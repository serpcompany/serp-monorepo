[
  {
    "owner": "upbge",
    "repo": "upbge",
    "content": "TITLE: Conditional Subdirectory Inclusion - CMake\nDESCRIPTION: This snippet demonstrates conditional inclusion of subdirectories based on CMake options.  The `add_subdirectory` command is executed only if the corresponding `WITH_*` option is enabled (e.g., `WITH_BLENDER_THUMBNAILER`, `WITH_IMAGE_OPENEXR`, `WITH_PYTHON`).  This allows for optional features and dependencies to be included or excluded during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER_THUMBNAILER)\n  add_subdirectory(blendthumb)\nendif()\n\n\nif(WITH_IMAGE_OPENEXR)\n  add_subdirectory(imbuf/intern/openexr)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_subdirectory(imbuf/intern/cineon)\nendif()\n\nif(WITH_PYTHON)\n  add_subdirectory(python)\nendif()\n\nif(WITH_FREESTYLE)\n  add_subdirectory(freestyle)\nendif()\n\nif(WITH_CPU_CHECK)\n  add_subdirectory(cpucheck)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Texture from Capture Device (FFmpeg) in Python\nDESCRIPTION: This snippet initializes a VideoFFmpeg object to capture video from a capture device (e.g., a webcam). It specifies the capture device number, capture rate, width, and height. Note that the `file` argument is not used on Windows when `capture` is greater than or equal to zero.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport bge\nimport bge.texture\n\n# Get the controller\ncont = bge.logic.getCurrentController()\n# Get the owner\nobj = cont.owner\n\n# Load from capture device\ncapture = bge.texture.VideoFFmpeg(\"AnyFile\", capture=0, rate=15, width=256, height=256)\n```\n\n----------------------------------------\n\nTITLE: Setting Generator Expression for Install Path\nDESCRIPTION: This CMake snippet configures a generator expression for the installation path, including the configuration directory. It checks if the generator is multi-config and replaces `${BUILD_TYPE}` with `$CONFIG` if it is. Otherwise, it replaces `${BUILD_TYPE}` with an empty string. This allows the installation path to adapt depending on the chosen build configuration, such as Debug or Release.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_76\n\nLANGUAGE: cmake\nCODE:\n```\n# Effective install path including config directory, as a generator expression.\nget_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(GENERATOR_IS_MULTI_CONFIG)\n  string(\n    REPLACE \"\\${BUILD_TYPE}\" \"$<CONFIG>\"\n    CMAKE_INSTALL_PREFIX_WITH_CONFIG ${CMAKE_INSTALL_PREFIX}\n  )\nelse()\n  string(\n    REPLACE \"\\${BUILD_TYPE}\" \"\"\n    CMAKE_INSTALL_PREFIX_WITH_CONFIG ${CMAKE_INSTALL_PREFIX}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Simple Keyframe Insertion in Blender\nDESCRIPTION: This example shows a simple way to insert keyframes for an object's location in Blender using Python. It sets the object's Z location and then inserts keyframes at frames 10 and 20.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nobj = bpy.context.object\nobj.location[2] = 0.0\nobj.keyframe_insert(data_path=\"location\", frame=10.0, index=2)\nobj.location[2] = 1.0\nobj.keyframe_insert(data_path=\"location\", frame=20.0, index=2)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Option with Error Handling - CMake\nDESCRIPTION: This snippet defines a build option WITH_STRICT_BUILD_OPTIONS. If the requirements for this option are not met, the build process will error instead of disabling the option. This helps ensure that configurations are valid and dependencies are satisfied before proceeding with the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_80\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_STRICT_BUILD_OPTIONS \"\\\nWhen requirements for a build option are not met, error instead of disabling the option.\"\n  OFF\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Textures with glDeleteTextures (bgl)\nDESCRIPTION: Deletes named textures. 'n' specifies the number of textures to delete, and 'textures' is a bgl.Buffer containing the texture names. This releases texture memory.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glDeleteTextures(n, textures)\n```\n\n----------------------------------------\n\nTITLE: Implementing Collision Callback\nDESCRIPTION: This Python code snippet demonstrates how to implement a collision callback function in UPBGE using the KX_CollisionContactPoint class. It defines an `oncollision` function that is triggered when a collision occurs, and prints various properties of the contact point, such as local coordinates, world coordinates, normals, friction, restitution, and applied impulse. This function is then assigned to the `collisionCallbacks` property of a game object.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_CollisionContactPoint.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\ndef oncollision(object, point, normal, points):\n    print(\"Hit by\", object)\n    for point in points:\n        print(point.localPointA)\n        print(point.localPointB)\n        print(point.worldPoint)\n        print(point.normal)\n        print(point.combinedFriction)\n        print(point.combinedRestitution)\n        print(point.appliedImpulse)\n\ncont = bge.logic.getCurrentController()\nown = cont.owner\nown.collisionCallbacks = [oncollision]\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Controller and Owner Object in Python\nDESCRIPTION: This snippet demonstrates how to obtain the current controller and the associated game object within a Python script in the Blender Game Engine (BGE).  It uses `bge.logic.getCurrentController()` to get the controller running the script and then accesses the `owner` property to retrieve the game object.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.logic.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n   # To get the controller thats running this python script:\n   cont = bge.logic.getCurrentController() # bge.logic is automatically imported\n   \n   # To get the game object this controller is on:\n   obj = cont.owner\n```\n\n----------------------------------------\n\nTITLE: Raycasting Example with KX_GameObject\nDESCRIPTION: This code snippet demonstrates how to use the rayCast method of the KX_GameObject class in UPBGE to detect objects along a ray. It shoots a ray from 'gun' to 'gunAim', and if an object is hit, it performs an action.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_GameObject.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# shoot along the axis gun-gunAim (gunAim should be collision-free)\nobj, point, normal = gun.rayCast(gunAim, None, 50)\nif obj:\n   # do something\n   pass\n```\n\n----------------------------------------\n\nTITLE: Operator Poll Check Example - Python\nDESCRIPTION: This code snippet demonstrates how to use the `poll()` function of an operator to check if it can be executed in the current context before actually calling the operator. This prevents `RuntimeError` exceptions by ensuring that the operator's requirements are met before attempting to run it.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nif bpy.ops.view3d.render_border.poll():\n    bpy.ops.view3d.render_border()\n```\n\n----------------------------------------\n\nTITLE: Enable Valgrind support\nDESCRIPTION: This option enables extended Valgrind support, improving memory error reporting. Valgrind is used for memory debugging and profiling.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_MEM_VALGRIND \"Enable extended valgrind support for better reporting\" OFF)\nmark_as_advanced(WITH_MEM_VALGRIND)\n```\n\n----------------------------------------\n\nTITLE: Crashing Edit Mode: Referencing Mesh Data (Incorrect)\nDESCRIPTION: This code demonstrates a common cause of crashes related to edit mode switching in Blender. It obtains a reference to the polygons of a mesh and then switches to edit mode and back to object mode. Since switching modes re-allocates the object's data, the original reference to the polygons becomes invalid, and accessing it will cause a crash.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.context.active_object.data\npolygons = mesh.polygons\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# This will crash!\nprint(polygons)\n```\n\n----------------------------------------\n\nTITLE: Access Active Object Location in Blender (bpy.context)\nDESCRIPTION: This snippet demonstrates how to access the location of the active object in Blender using the bpy.context.active_object.location property. It relies on the user having an active object selected in the Blender interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.active_object.location\n```\n\n----------------------------------------\n\nTITLE: Safe Way: Referencing Blender Data (Correct)\nDESCRIPTION: This code demonstrates a safe pattern for modifying Blender data. It adds multiple items to a collection property and then re-acquires a reference to the first item *after* all additions are complete. This ensures that the reference is valid even if the underlying memory for the collection has been re-allocated.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass TestItems(bpy.types.PropertyGroup):\n    name: bpy.props.StringProperty()\n\nbpy.utils.register_class(TestItems)\nbpy.types.Scene.test_items = bpy.props.CollectionProperty(type=TestItems)\n\nfirst_item = bpy.context.scene.test_items.add()\nfor i in range(100):\n    bpy.context.scene.test_items.add()\n\n# This is safe, we are getting again desired data *after*\n# all modifications to its container are done.\nfirst_item = bpy.context.scene.test_items[0]\nfirst_item.name = \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Attributes of Data-Blocks - Python\nDESCRIPTION: This snippet illustrates how to access attributes of data blocks in Blender, such as the name of an object or a scene. It demonstrates how to retrieve and use the attributes of objects, scenes and materials once the data-block is retrieved. The tooltips in the Blender UI often display the Python attributes.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.data.objects[0].name\n'Camera'\n\n>>> bpy.data.scenes[\"Scene\"]\nbpy.data.scenes['Scene']\n\n>>> bpy.data.materials.new(\"MyMaterial\")\nbpy.data.materials['MyMaterial']\n```\n\n----------------------------------------\n\nTITLE: Third Person Movement Component in Python\nDESCRIPTION: This example demonstrates a basic third-person movement component using the KX_PythonComponent class. It allows the object to move forward/backward and rotate left/right based on keyboard input (W, A, S, D). It uses the `start` method to initialize move and turn speeds from component properties and the `update` method to apply movement and rotation to the object based on keyboard input.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_PythonComponent.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport bge\nfrom collections import OrderedDict\n\nclass ThirdPerson(bge.types.KX_PythonComponent):\n    \"\"\"Basic third person controls\n\n    W: move forward\n    A: turn left\n    S: move backward\n    D: turn right\n\n    \"\"\"\n\n    #\n\n    args = OrderedDict([\n        (\"Move Speed\", 0.1),\n        (\"Turn Speed\", 0.04)\n    ])\n\n    def start(self, args):\n        self.move_speed = args['Move Speed']\n        self.turn_speed = args['Turn Speed']\n\n    def update(self):\n        keyboard = bge.logic.keyboard.events\n\n        move = 0\n        rotate = 0\n\n        if keyboard[bge.events.WKEY]:\n            move += self.move_speed\n        if keyboard[bge.events.SKEY]:\n            move -= self.move_speed\n\n        if keyboard[bge.events.AKEY]:\n            rotate += self.turn_speed\n        if keyboard[bge.events.DKEY]:\n            rotate -= self.turn_speed\n\n        self.object.applyMovement((0, move, 0), True)\n        self.object.applyRotation((0, 0, rotate), True)\n```\n\n----------------------------------------\n\nTITLE: Setting File Format and Filepath in Blender (Python)\nDESCRIPTION: This snippet demonstrates how to set the file format and filepath for rendering in Blender using Python. It assigns the string 'PNG' to the file_format enum and the string '//render_out' to the filepath property.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.scene.render.image_settings.file_format = 'PNG'\nbpy.context.scene.render.filepath = \"//render_out\"\n```\n\n----------------------------------------\n\nTITLE: Avoiding Edit Mode Crash: Re-accessing Mesh Data (Correct)\nDESCRIPTION: This code demonstrates how to correctly handle edit mode switching in Blender. It obtains a reference to the polygons of a mesh, switches to edit mode and back to object mode, and then re-acquires a fresh reference to the polygons *after* the mode switch. This ensures that the reference is valid and prevents a crash.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.context.active_object.data\npolygons = mesh.polygons\nbpy.ops.object.mode_set(mode='EDIT')\nbpy.ops.object.mode_set(mode='OBJECT')\n\n# Polygons have been re-allocated.\npolygons = mesh.polygons\nprint(polygons)\n```\n\n----------------------------------------\n\nTITLE: Collision Callback Registration\nDESCRIPTION: This code shows how to register callback functions to be executed when a collision occurs with a KX_GameObject. The callbacks can be defined as regular functions or as methods within a class that inherits from KX_GameObject. The example demonstrates both forms, showcasing the possible function signatures: one argument (object), three arguments (object, point, normal), and four arguments (object, point, normal, points).\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_GameObject.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Function form\ndef callback_four(object, point, normal, points):\n    print('Hit by %r with %i contacts points' % (object.name, len(points)))\n\ndef callback_three(object, point, normal):\n    print('Hit by %r at %s with normal %s' % (object.name, point, normal))\n\ndef callback_one(object):\n    print('Hit by %r' % object.name)\n\ndef register_callback(controller):\n    controller.owner.collisionCallbacks.append(callback_four)\n    controller.owner.collisionCallbacks.append(callback_three)\n    controller.owner.collisionCallbacks.append(callback_one)\n\n\n# Method form\nclass YourGameEntity(bge.types.KX_GameObject):\n    def __init__(self, old_owner):\n        self.collisionCallbacks.append(self.on_collision_four)\n        self.collisionCallbacks.append(self.on_collision_three)\n        self.collisionCallbacks.append(self.on_collision_one)\n\n    def on_collision_four(self, object, point, normal, points):\n        print('Hit by %r with %i contacts points' % (object.name, len(points)))\n\n    def on_collision_three(self, object, point, normal):\n        print('Hit by %r at %s with normal %s' % (object.name, point, normal))\n\n    def on_collision_one(self, object):\n        print('Hit by %r' % object.name)\n```\n\n----------------------------------------\n\nTITLE: Accessing Data-Blocks using bpy.data - Python\nDESCRIPTION: This code snippet demonstrates how to access different data blocks in Blender using the `bpy.data` module. It shows how to access objects, scenes, and materials within the Blender environment. The snippet aims to illustrate how to retrieve data collections for various Blender elements.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.data.objects\n<bpy_collection[3], BlendDataObjects>\n\n>>> bpy.data.scenes\n<bpy_collection[1], BlendDataScenes>\n\n>>> bpy.data.materials\n<bpy_collection[1], BlendDataMaterials>\n```\n\n----------------------------------------\n\nTITLE: Running Blender in Background with Blend File and Script\nDESCRIPTION: Opens a blend file and then executes a Python script in Blender's background mode.  This allows scripts to operate on existing scene data. Requires both the blend file and script path. The `--background` option prevents Blender from opening a window.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nblender myscene.blend --background --python myscript.py\n```\n\n----------------------------------------\n\nTITLE: Checking Mandatory Build Options - CMake\nDESCRIPTION: This snippet enforces that at least one of several primary build options (WITH_BLENDER, WITH_PLAYER, WITH_CYCLES_STANDALONE, WITH_CYCLES_HYDRA_RENDER_DELEGATE) must be enabled. If none are enabled, the build process terminates with a fatal error. This ensures a usable build configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_81\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WITH_BLENDER AND NOT WITH_PLAYER AND NOT WITH_CYCLES_STANDALONE AND NOT WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  message(FATAL_ERROR\n    \"At least one of WITH_BLENDER or WITH_CYCLES_STANDALONE \"\n    \"or WITH_CYCLES_HYDRA_RENDER_DELEGATE \"\n    \"must be enabled, nothing to do!\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a Wheel to the Vehicle (KX_VehicleWrapper)\nDESCRIPTION: This method adds a wheel to the vehicle. It requires specifying the wheel object, attachment position, down direction, axle direction, suspension rest length, wheel radius, and whether the wheel has steering. The wheel object can be a KX_GameObject instance or its name.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: addWheel(wheel, attachPos, downDir, axleDir, suspensionRestLength, wheelRadius, hasSteering)\n\n      Add a wheel to the vehicle\n\n      :arg wheel: The object to use as a wheel.\n      :type wheel: :class:`~bge.types.KX_GameObject` or a :class:`~bge.types.KX_GameObject` name\n      :arg attachPos: The position to attach the wheel, relative to the chassis object center.\n      :type attachPos: vector of 3 floats\n      :arg downDir: The direction vector pointing down to where the vehicle should collide with the floor.\n      :type downDir: vector of 3 floats\n      :arg axleDir: The axis the wheel rotates around, relative to the chassis.\n      :type axleDir: vector of 3 floats\n      :arg suspensionRestLength: The length of the suspension when no forces are being applied.\n      :type suspensionRestLength: float\n      :arg wheelRadius: The radius of the wheel (half the diameter).\n      :type wheelRadius: float\n      :arg hasSteering: True if the wheel should turn with steering, typically used in front wheels.\n      :type hasSteering: boolean\n```\n\n----------------------------------------\n\nTITLE: Enable Cycles CUDA and OptiX Support\nDESCRIPTION: These options control the CUDA and OptiX support for Cycles on non-Apple platforms (and also excluding Windows ARM64). They allow enabling/disabling CUDA and OptiX devices, building CUDA binaries for specific architectures, building CUDA binaries serially, and dynamically loading CUDA libraries.  They also specify paths to the OptiX SDK.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE AND NOT (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\"))\n  option(WITH_CYCLES_DEVICE_CUDA \"Enable Cycles NVIDIA CUDA compute support\" ON)\n  option(WITH_CYCLES_DEVICE_OPTIX \"Enable Cycles NVIDIA OptiX support\" ON)\n  mark_as_advanced(WITH_CYCLES_DEVICE_CUDA)\n\n  option(WITH_CYCLES_CUDA_BINARIES \"Build Cycles NVIDIA CUDA binaries\" OFF)\n  set(CYCLES_CUDA_BINARIES_ARCH\n    sm_30 sm_35 sm_37 sm_50 sm_52 sm_60 sm_61 sm_70 sm_75 sm_86 sm_89 sm_120 compute_75\n    CACHE STRING \"CUDA architectures to build binaries for\"\n  )\n  option(WITH_CYCLES_CUDA_BUILD_SERIAL \"\\\nBuild cubins one after another (useful on machines with limited RAM)\"\n    OFF\n  )\n  option(WITH_CUDA_DYNLOAD \"\\\nDynamically load CUDA libraries at runtime (for developers, makes cuda-gdb work)\"\n    ON\n  )\n\n  set(OPTIX_ROOT_DIR \"\" CACHE PATH \"\\\nPath to the OptiX SDK root directory, for building Cycles OptiX kernels.\"\n  )\n  set(CYCLES_RUNTIME_OPTIX_ROOT_DIR \"\" CACHE PATH \"\\\nPath to the OptiX SDK root directory. \\\nWhen set, this path will be used at runtime to compile OptiX kernels.\"\n  )\n\n  mark_as_advanced(CYCLES_CUDA_BINARIES_ARCH)\n  mark_as_advanced(WITH_CYCLES_CUDA_BUILD_SERIAL)\n  mark_as_advanced(WITH_CUDA_DYNLOAD)\n  mark_as_advanced(OPTIX_ROOT_DIR)\n  mark_as_advanced(CYCLES_RUNTIME_OPTIX_ROOT_DIR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Referencing Meshes by Name (Correct)\nDESCRIPTION: This code demonstrates the recommended way to create and reference meshes by name in Blender using the Python API.  It uses a dictionary to map requested names to the newly created mesh data, which prevents potential issues with name collisions or unexpected behavior when referencing data later. The dictionary ensures that the correct data is always referenced even if the name assigned by Blender differs from the requested name.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Typically declared in the main body of the function.\nmesh_name_mapping = {}\n\nmesh = bpy.data.meshes.new(name=meshid)\nmesh_name_mapping[meshid] = mesh\n\n# Normally some code, or function calls, etc.\n\n# Use own dictionary rather than `bpy.data`.\nmesh = mesh_name_mapping[meshid]\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Python\nDESCRIPTION: This snippet conditionally includes Python support if `WITH_PYTHON` is enabled. It appends `../python` to the include paths (`INC`), adds `bf_python` and `bf_python_bmesh` to the library list (`LIB`), and defines `-DWITH_PYTHON`. It further defines `-DWITH_PYTHON_MODULE`, `-DWITH_PYTHON_SAFETY`, and `-DWITH_PYTHON_SECURITY` if their respective options are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\n  list(APPEND LIB\n    bf_python\n    bf_python_bmesh\n  )\n  add_definitions(-DWITH_PYTHON)\n\n  if(WITH_PYTHON_MODULE)\n    add_definitions(-DWITH_PYTHON_MODULE)\n  endif()\n\n  if(WITH_PYTHON_SAFETY)\n    add_definitions(-DWITH_PYTHON_SAFETY)\n  endif()\n\n  if(WITH_PYTHON_SECURITY)\n    add_definitions(-DWITH_PYTHON_SECURITY)\n  endif()\n\n\n  if(PYTHON_EXECUTABLE)\n    get_filename_component(_python_exe_name ${PYTHON_EXECUTABLE} NAME)\n    add_definitions(-DPYTHON_EXECUTABLE_NAME=${_python_exe_name})\n    unset(_python_exe_name)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: UNIX Compiler Cache Option (CCACHE)\nDESCRIPTION: This CMake snippet configures an option to use ccache for improving rebuild times on UNIX systems.  It sets the `WITH_COMPILER_CCACHE` option, making it available to the user, and marks it as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n  # See WITH_WINDOWS_SCCACHE for Windows.\n  option(WITH_COMPILER_CCACHE \"\\\nUse ccache to improve rebuild times (Works with Ninja, Makefiles and Xcode)\"\n    OFF\n  )\n  mark_as_advanced(WITH_COMPILER_CCACHE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Scene and Camera in Python\nDESCRIPTION: This snippet illustrates how to obtain the current scene and active camera within the Blender Game Engine (BGE) using Python. It calls `bge.logic.getCurrentScene()` to get the current scene and then accesses the `active_camera` property to retrieve the active camera.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.logic.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n   # Get the current scene\n   scene = bge.logic.getCurrentScene()\n\n   # Get the current camera\n   cam = scene.active_camera\n```\n\n----------------------------------------\n\nTITLE: Executing External Script Relative to Blend File\nDESCRIPTION: Executes an external Python script located in the same directory as the Blender file.  This makes the script location relative and portable.  It uses `os.path.join` and `os.path.dirname` to construct the full path. It relies on bpy.data.filepath for the current blend file's path. Requires the `bpy` and `os` modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nimport os\n\nfilename = os.path.join(os.path.dirname(bpy.data.filepath), \"myscript.py\")\nexec(compile(open(filename).read(), filename, 'exec'))\n```\n\n----------------------------------------\n\nTITLE: Cycles HIP Kernel Macro\nDESCRIPTION: This macro defines the steps to compile a HIP kernel for a specific architecture. It sets up compiler flags, including architecture-specific optimization levels based on Windows and HIP versions, and defines custom commands to compile the kernel using `hipcc`, compress it using `zstd_compress`, and install it to the deployment directory. It uses `get_hip_math_flag` to configure math settings.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(CYCLES_HIP_KERNEL_ADD arch name flags sources experimental)\n    set(format \"fatbin\")\n    set(hip_file ${name}_${arch}.${format})\n    set(hip_file_compressed ${hip_file}.zst)\n    set(kernel_sources ${sources})\n\n    set(hip_kernel_src \"/device/hip/${name}.cpp\")\n\n    if(WIN32)\n      set(hip_command ${CMAKE_COMMAND})\n      set(hip_flags\n        -E env \"HIP_PATH=${HIP_ROOT_DIR}\"\n        ${HIP_HIPCC_EXECUTABLE})\n    else()\n      set(hip_command ${HIP_HIPCC_EXECUTABLE})\n      set(hip_flags)\n    endif()\n\n    # There's a few bugs in the HIP compiler causing some scenes to fail to render,\n    # or render improperly with specific combinations of device and/or compiler.\n    # - Vega (gfx90x) fails to render some scenes\n    # - Other GPUs (E.g. RDNA3) render volumes improperly with HIP 6.1.40252\n    # A workaround is to set -O1 opt level during kernel compilation for these\n    # configurations.\n    if(WIN32 AND ((${arch} MATCHES \"gfx90[a-z0-9]+\") OR (${HIP_VERSION} STREQUAL \"6.1.40252\")))\n      set(hip_opt_flags \"-O1\")\n    else()\n      set(hip_opt_flags)\n    endif()\n\n    get_hip_math_flag(${arch} math_flag)\n\n    set(hip_flags\n      ${hip_flags}\n      --offload-arch=${arch}\n      ${HIP_HIPCC_FLAGS}\n      --genco\n      ${CMAKE_CURRENT_SOURCE_DIR}${hip_kernel_src}\n      ${flags}\n      -D CCL_NAMESPACE_BEGIN=\n      -D CCL_NAMESPACE_END=\n      -D HIPCC\n      -I ${CMAKE_CURRENT_SOURCE_DIR}/..\n      -I ${CMAKE_CURRENT_SOURCE_DIR}/device/hip\n      -Wno-parentheses-equality\n      -Wno-unused-value\n      -ffast-math\n      ${math_flag}\n      ${hip_opt_flags}\n      -o ${CMAKE_CURRENT_BINARY_DIR}/${hip_file})\n\n    if(WITH_NANOVDB)\n      set(hip_flags ${hip_flags}\n        -D WITH_NANOVDB)\n    endif()\n\n    if(WITH_CYCLES_DEBUG)\n      set(hip_flags ${hip_flags} -D WITH_CYCLES_DEBUG)\n    endif()\n\n    add_custom_command(\n      OUTPUT ${hip_file}\n      COMMAND ${hip_command} ${hip_flags}\n      DEPENDS ${kernel_sources})\n    add_custom_command(\n      OUTPUT ${hip_file_compressed}\n      COMMAND \"$<TARGET_FILE:zstd_compress>\" ${hip_file} ${hip_file_compressed}\n      DEPENDS ${hip_file})\n    delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}\" \"${hip_file_compressed}\" ${CYCLES_INSTALL_PATH}/lib)\n    list(APPEND hip_fatbins ${hip_file_compressed})\n  endmacro()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (Grease Pencil) - CMake\nDESCRIPTION: This snippet conditionally appends the Grease Pencil I/O library and defines a preprocessor definition if the WITH_IO_GREASE_PENCIL flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_GREASE_PENCIL)\n  list(APPEND LIB\n    bf_io_grease_pencil\n  )\n  add_definitions(-DWITH_IO_GREASE_PENCIL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sphere Frustum Culling Example (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `sphereInsideFrustum` method of the `KX_Camera` class to check if a sphere is inside the camera's view frustum. It retrieves the current controller and camera object, then calls `sphereInsideFrustum` with the sphere's center coordinates and radius.  The result is compared against `cam.OUTSIDE` to determine if the sphere is within the frustum.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bge import logic\ncont = logic.getCurrentController()\ncam = cont.owner\n\n# A sphere of radius 4.0 located at [x, y, z] = [1.0, 1.0, 1.0]\nif (cam.sphereInsideFrustum([1.0, 1.0, 1.0], 4) != cam.OUTSIDE):\n    # Sphere is inside frustum !\n    # Do something useful !\nelse:\n    # Sphere is outside frustum\n```\n\n----------------------------------------\n\nTITLE: Manipulating Light Properties with KX_LightObject (Python)\nDESCRIPTION: This code snippet demonstrates how to access and modify light properties using the KX_LightObject in UPBGE. It shows how to get the owner of the current controller, set a game property, and modify the world position using the bge module.  It also demonstrates how to access and modify Blender light data attributes, such as energy, color, and type, through the `blenderObject.data` property.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_LightObject.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\n# Use bge module to get/set game property + transform\nkxlight = (bge.logic.getCurrentController()).owner\nkxlight[\"Text\"] = \"Text Example\"\nkxlight.worldPosition = [-2.5, 1.0, 0.0]\n\n# Use bpy.types.Light attributes to set other light settings\nlightData = kxlight.blenderObject.data\nlightData.energy = 1000.0\nlightData.color = [1.0, 0.0, 0.0]\nlightData.type = \"POINT\"\n```\n\n----------------------------------------\n\nTITLE: Registering a Simple Blender Module\nDESCRIPTION: This code snippet demonstrates the basic structure of a Blender Python module with `register()` and `unregister()` functions. These functions are essential for Blender to load and unload modules at startup, allowing for toggling add-ons and reloading scripts while Blender runs.  The `register()` function registers a simple operator class, and the `unregister()` function unregisters it.  A conditional statement executes `register()` only when the script is run directly, not when imported as a module.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\nclass SimpleOperator(bpy.types.Operator):\n    \"\"\" See example above \"\"\"\n\ndef register():\n    bpy.utils.register_class(SimpleOperator)\n\ndef unregister():\n    bpy.utils.unregister_class(SimpleOperator)\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Using onRemove Callback with Controller (UPBGE, Python)\nDESCRIPTION: This code snippet shows how to access the game object from a controller and register a callback function to be executed when the object is removed. It accesses the current controller and gets the owner (game object) to append the callback.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_GameObject.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncont = bge.logic.getCurrentController()\n         gameobj = cont.owner\n\n         def callback():\n            print('exiting' %s...' % gameobj.name)\n\n         gameobj.onRemove.append(callback)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Snap Targets in Blender\nDESCRIPTION: This code snippet shows how to set multiple snap targets in Blender's tool settings using a set of strings. It's useful for configuring the snapping behavior in the 3D viewport.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Setting multiple snap targets.\nbpy.context.scene.tool_settings.snap_elements_base = {'VERTEX', 'EDGE'}\n\n# Passing as an operator argument for report types.\nself.report({'WARNING', 'INFO'}, \"Some message!\")\n```\n\n----------------------------------------\n\nTITLE: Rendering Overlay Texture with Filters in BGE (Python)\nDESCRIPTION: This Python code snippet demonstrates how to render an overlay texture using a separate camera and scene in the Blender Game Engine (BGE). It configures a render target, applies a 2D filter using a custom shader, and handles pre-draw callbacks to manage transparency and effects. The example shows the integration of Blender's bpy module for accessing scene data and manipulating render settings.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport bpy, bge\nfrom bge import texture\n\ncont = bge.logic.getCurrentController() # on main camera\nscene = bge.logic.getCurrentScene()\nrendercam = scene.objects[\"rendercam\"]\nrenderplane = scene.objects[\"renderplane\"]\n\nbge.overlayTex = texture.Texture(renderplane, 0, 0)\nbge.overlayTex.source = texture.ImageRender(scene, rendercam)\nbge.overlayTex.source.capsize = [512, 512]\n\nfilter = scene.filterManager.addFilter(0, bge.logic.RAS_2DFILTER_CUSTOMFILTER, cont.actuators[\"overlay\"].shaderText)\n\ndef preDraw():\n\tdepsgraph = bpy.context.evaluated_depsgraph_get()\n\tscene_eval = bpy.context.scene.evaluated_get(depsgraph)\n\t\n\t# Make background transparent before rendering overlay texture\n\tscene_eval.render.film_transparent = True\n\n\t# Disable not wanted effects before rendering overlay texture\n\tscene_eval.eevee.bloom_intensity = 0\n\ndef renderOverlay():\n\t# Append preDraw to bge.overlayTex.source pre-draw callbacks\n\tbge.overlayTex.source.pre_draw.append(preDraw)\n\n\t# Render Overlay Camera to renderplane texture\n\tbge.overlayTex.refresh(True)\n\ndef sendUniformsTo2DFilters():\n\t# Render overlay texture\n\trenderOverlay()\n\n\t# send uniforms to 2D filter to do the compositing between main render and overlay\n\tif filter is not None:\n\t\tfilter.setTexture(0, bge.overlayTex.bindId, \"overlayTex\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Bullet Physics - CMake\nDESCRIPTION: This snippet configures the Bullet physics library. If `WITH_SYSTEM_BULLET` is enabled, it uses `find_package(Bullet)` to locate the system-wide installation. Otherwise, it sets the `BULLET_INCLUDE_DIRS` and `BULLET_LIBRARIES` variables to use the external Bullet library included in the source directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_104\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  if(WITH_SYSTEM_BULLET)\n    find_package(Bullet)\n    set_and_warn_library_found(\"Bullet\" BULLET_FOUND WITH_BULLET)\n  else()\n    set(BULLET_INCLUDE_DIRS \"${CMAKE_SOURCE_DIR}/extern/bullet2/src\")\n    set(BULLET_LIBRARIES \"extern_bullet\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Alembic Integration - CMake\nDESCRIPTION: Conditionally includes Alembic integration, adding a preprocessor definition, system include directories, and libraries to the Cycles build. This allows Cycles to load and render geometry stored in the Alembic file format.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC_SYS\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${ALEMBIC_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source File Properties\nDESCRIPTION: This snippet sets compile flags for specific source files based on CMake variables. If `CYCLES_KERNEL_FLAGS` is defined, it sets the `COMPILE_FLAGS` property for `device/cpu/kernel.cpp`.  Similarly, if `CXX_HAS_AVX2` is true, it sets compile flags for `device/cpu/kernel_avx2.cpp`.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED CYCLES_KERNEL_FLAGS)\n  set_source_files_properties(device/cpu/kernel.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_KERNEL_FLAGS}\")\nendif()\n\nif(CXX_HAS_AVX2)\n  set_source_files_properties(device/cpu/kernel_avx2.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_AVX2_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using onRemove Callback in KX_GameObject (UPBGE, Python)\nDESCRIPTION: This code snippet demonstrates how to use the `onRemove` attribute of a `KX_GameObject` to register a callback function that will be executed when the game object is destroyed. This allows for performing cleanup or other actions when an object is removed from the scene.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_GameObject.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@gameobj.onRemove.append\n         def callback(gameobj):\n            print('exiting %s...' % gameobj.name)\n```\n\n----------------------------------------\n\nTITLE: Inserting TBB Libraries - CMake\nDESCRIPTION: Inserts TBB (Threading Building Blocks) libraries at the beginning of the LIB list. This forces TBB initialization before MKL (part of OpenImageDenoise) to avoid static library initialization order issues, especially when TBB is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  # Force TBB libraries to be in front of MKL (part of `OpenImageDenoise`), so\n  # that it is initialized before MKL and static library initialization order issues are avoided.\n  #\n  # This isn't fully robust but seems to work.\n  list(INSERT LIB 0 ${TBB_LIBRARIES})\n  list(INSERT LIB 0 bf_blenkernel)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Raycasting with KX_NavMeshObject in Python\nDESCRIPTION: This code snippet demonstrates the `raycast` method of the `KX_NavMeshObject` class. It performs a raycast from a start to a goal point on the navigation mesh and returns the hit factor as a float. Requires an instance of KX_NavMeshObject and two 3D vectors representing the start and goal positions.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_NavMeshObject.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nKX_NavMeshObject.raycast(start, goal)\n```\n\n----------------------------------------\n\nTITLE: Compiling CUDA Kernels for Architectures\nDESCRIPTION: This snippet iterates through a list of CUDA architectures and compiles the CUDA kernel for each, checking for CUDA version compatibility. It utilizes the CYCLES_CUDA_KERNEL_ADD macro to manage compilation.  It uses CUDA's versioning to determine which CUDA toolkit and compiler to use. Some architectures are skipped, due to version support.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\n  set(prev_arch \"none\")\n  foreach(arch ${CYCLES_CUDA_BINARIES_ARCH})\n    if(${arch} MATCHES \".*_2.\")\n      message(STATUS \"CUDA binaries for ${arch} are no longer supported, skipped.\")\n    elseif(${arch} MATCHES \".*_30\")\n      if(DEFINED CUDA10_NVCC_EXECUTABLE)\n        set(cuda_nvcc_executable ${CUDA10_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA10_TOOLKIT_ROOT_DIR})\n        set(cuda_version 100)\n      elseif(\"${CUDA_VERSION}\" LESS 110) # Support for sm_30 was removed in CUDA 11\n        set(cuda_nvcc_executable ${CUDA_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA_TOOLKIT_ROOT_DIR})\n        set(cuda_version ${CUDA_VERSION})\n      else()\n        message(STATUS \"CUDA binaries for ${arch} require CUDA 10 or earlier, skipped.\")\n      endif()\n    elseif(${arch} MATCHES \".*_3.\")\n      if(DEFINED CUDA11_NVCC_EXECUTABLE)\n        set(cuda_nvcc_executable ${CUDA11_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA11_TOOLKIT_ROOT_DIR})\n        set(cuda_version 110)\n      elseif(\"${CUDA_VERSION}\" LESS 120) # Support for sm_35, sm_37 was removed in CUDA 12\n        set(cuda_nvcc_executable ${CUDA_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA_TOOLKIT_ROOT_DIR})\n        set(cuda_version ${CUDA_VERSION})\n      else()\n        message(STATUS \"CUDA binaries for ${arch} require CUDA 11 or earlier, skipped.\")\n      endif()\n    elseif(${arch} MATCHES \".*_7.\" AND \"${CUDA_VERSION}\" LESS 100)\n      message(STATUS \"CUDA binaries for ${arch} require CUDA 10.0+, skipped.\")\n    elseif(${arch} MATCHES \".*_8.\")\n      if(\"${CUDA_VERSION}\" GREATER_EQUAL 111) # Support for sm_86 was introduced in CUDA 11\n        set(cuda_nvcc_executable ${CUDA_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA_TOOLKIT_ROOT_DIR})\n        set(cuda_version ${CUDA_VERSION})\n      elseif(DEFINED CUDA11_NVCC_EXECUTABLE)\n        set(cuda_nvcc_executable ${CUDA11_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA11_TOOLKIT_ROOT_DIR})\n        set(cuda_version 110)\n      else()\n        message(STATUS \"CUDA binaries for ${arch} require CUDA 11.1+, skipped.\")\n      endif()\n    elseif(${arch} MATCHES \".*_10.\" OR ${arch} MATCHES \".*_120\")\n      if(\"${CUDA_VERSION}\" GREATER_EQUAL 128) # Support for sm_100, sm_101, sm_120 was introduced in CUDA 12.8\n        set(cuda_nvcc_executable ${CUDA_NVCC_EXECUTABLE})\n        set(cuda_toolkit_root_dir ${CUDA_TOOLKIT_ROOT_DIR})\n        set(cuda_version ${CUDA_VERSION})\n      else()\n        message(STATUS \"CUDA binaries for ${arch} require CUDA 12.8+, skipped.\")\n      endif()\n    else()\n      set(cuda_nvcc_executable ${CUDA_NVCC_EXECUTABLE})\n      set(cuda_toolkit_root_dir ${CUDA_TOOLKIT_ROOT_DIR})\n      set(cuda_version ${CUDA_VERSION})\n    endif()\n    if(DEFINED cuda_nvcc_executable AND DEFINED cuda_toolkit_root_dir)\n      # Compile regular kernel\n      cycles_cuda_kernel_add(${arch} ${prev_arch} kernel \"\" \"${cuda_sources}\" FALSE)\n\n      if(WITH_CYCLES_CUDA_BUILD_SERIAL)\n        set(prev_arch ${arch})\n      endif()\n\n      unset(cuda_nvcc_executable)\n      unset(cuda_toolkit_root_dir)\n    endif()\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Initializing ListBox widget with click event\nDESCRIPTION: This snippet demonstrates how to create a ListBox widget, populate it with items, and assign a callback function to the `on_click` event. The `lb_click` function will be executed when an item in the listbox is clicked, printing the selected item to the console. Requires bgui library.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgui/list_box.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MySys(bgui.System):\n   def lb_click(self, lb):\n      print(lb.selected)\n\n   def __init__(self):\n      bgui.System.__init__(self)\n\n      items = [\"One\", \"Two\", 4, 4.6]\n      self.frame = bgui.Frame(self, 'window', border=2, size=[0.5, 0.5], options=bgui.BGUI_DEFAULT|bgui.BGUI_CENTERED)\n      self.lb = bgui.ListBox(self.frame, \"lb\", items=items, padding=0.05, size=[0.9, 0.9], pos=[0.05, 0.05])\n      self.lb.on_click = self.lb_click\n\n      # ... rest of __init__\n```\n\n----------------------------------------\n\nTITLE: Configuring Ninja Pool Jobs\nDESCRIPTION: This CMake snippet configures an option to enable Ninja pools of jobs, which can help ease building on machines with limited RAM. It checks if the generator is Ninja and then sets the `WITH_NINJA_POOL_JOBS` option, marking it as advanced. This is specific to the Ninja generator.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\")\n  option(WITH_NINJA_POOL_JOBS \"\\\nEnable Ninja pools of jobs, to try to ease building on machines with 16GB of RAM or less \\\n(if not yet defined, will try to set best values based on detected machine specifications).\"\n    ON\n  )\n  mark_as_advanced(WITH_NINJA_POOL_JOBS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Operator Poll Failed Exception - Python\nDESCRIPTION: This code shows the `RuntimeError` that occurs when an operator's `poll()` function fails because the context is incorrect. It illustrates that the operator requires a specific context (in this case, the 3D Viewport with an active camera), and if that context is not met, the operator cannot execute.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRuntimeError: Operator bpy.ops.view3d.render_border.poll() failed, context is incorrect\n```\n\n----------------------------------------\n\nTITLE: Single-Line Python Interpreter Insertion\nDESCRIPTION: A concise, single-line version to insert a Python interpreter into a running Blender script, allowing for interactive debugging and variable inspection, accessing both global and local variables. Requires no separate imports. Uses `__import__('code').interact`\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n__import__('code').interact(local=dict(globals(), **locals()))\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Depth Value with glClearDepth (bgl)\nDESCRIPTION: Specifies the depth value used when the depth buffer is cleared. The 'depth' parameter defines the value written to the depth buffer during a glClear operation. This influences depth testing and the rendering of objects in 3D space.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glClearDepth(depth)\n```\n\n----------------------------------------\n\nTITLE: Loading a Sound from File\nDESCRIPTION: This snippet loads a sound from a file using aud.Sound.file().  The filename is expected to be provided as a command line argument (sys.argv[1]). The loaded sound can then be played using an aud.Device object.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nsound = aud.Sound.file(sys.argv[1])\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Operator in Blender - Python\nDESCRIPTION: This code defines a simple operator in Blender using the bpy module. It creates a subclass of bpy.types.Operator, defines bl_idname and bl_label, and implements the execute method which prints \"Hello World\" to the console. The operator is then registered using bpy.utils.register_class.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass SimpleOperator(bpy.types.Operator):\n    bl_idname = \"object.simple_operator\"\n    bl_label = \"Tool Name\"\n\n    def execute(self, context):\n        print(\"Hello World\")\n        return {'FINISHED'}\n\nbpy.utils.register_class(SimpleOperator)\n```\n\n----------------------------------------\n\nTITLE: Efficient List Removal: Swapping and Popping (Python)\nDESCRIPTION: Demonstrates an efficient way of removing an element from a list by swapping it with the last element and then popping the last element.  This method is good if list order can be changed.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\npop_index = 5\n\n# Swap so the pop_index is last.\nmy_list[-1], my_list[pop_index] = my_list[pop_index], my_list[-1]\n\n# Remove last item (pop_index).\nmy_list.pop()\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Texture from File (FFmpeg) in Python\nDESCRIPTION: This snippet initializes a VideoFFmpeg object to load and play a video file. It creates a dynamic texture from a video source, which can then be used to replace an existing texture on a game object. The video will loop infinitely by default.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bge\nimport bge.texture\n\n# Get the controller\ncont = bge.logic.getCurrentController()\n# Get the owner\nobj = cont.owner\n\n# Load a movie\nmovie = bge.texture.VideoFFmpeg(\"test.avi\")\n```\n\n----------------------------------------\n\nTITLE: Binding a Texture using glBindTexture (bgl)\nDESCRIPTION: Binds a specified texture to a texturing target. 'target' determines the binding point and 'texture' specifies the texture name.  This function allows the application to select a texture for use in subsequent rendering operations.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glBindTexture(target, texture)\n```\n\n----------------------------------------\n\nTITLE: Setting Edit Bone Head Position in Edit Mode (Python)\nDESCRIPTION: This snippet demonstrates how to modify the head position of an edit bone using the `bpy.context.object.data.edit_bones` collection. This operation requires the armature to be in Edit-Mode. The code accesses the edit bone named \"Bone\" and sets its head property to a new Vector.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object.data.edit_bones[\"Bone\"].head = Vector((1.0, 2.0, 3.0))\n```\n\n----------------------------------------\n\nTITLE: Testing Module Registration\nDESCRIPTION: This snippet shows how to test the registration functions by running the script directly in Blender's text editor. The `if __name__ == \"__main__\":` block ensures that the `register()` function is only called when the script is executed directly, and not when it's imported as a module.  This is useful for testing changes without affecting other parts of the Blender environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Moving a Vertex in Blender using bpy - Python\nDESCRIPTION: This code snippet demonstrates how to directly modify Blender's internal data using the bpy module.  It imports the bpy module and then accesses the vertex data of an object named \"Cube\" and increments its x-coordinate. This shows how to interact with the 3D Viewport update directly.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nbpy.data.objects[\"Cube\"].data.vertices[0].co.x += 1.0\n```\n\n----------------------------------------\n\nTITLE: Embedding IPython Interpreter\nDESCRIPTION: Embeds an IPython interpreter into a Blender script, providing enhanced interactive debugging with features like auto-completion. Requires the `IPython` module to be installed. Preserves the current namespace for immediate inspection.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport IPython\nIPython.embed()\n```\n\n----------------------------------------\n\nTITLE: Executing Module from Blend File Directory\nDESCRIPTION: Extends Python's module search path to include the current blend-file's directory, and then loads the script as a module and executes a function within it. This resolves module import issues when the script resides in the same directory as the blend file. Requires `sys`, `os`, and `bpy` modules. Should only be used for testing purposes.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport sys\nimport os\nimport bpy\n\nblend_dir = os.path.dirname(bpy.data.filepath)\nif blend_dir not in sys.path:\n   sys.path.append(blend_dir)\n\nimport myscript\nimport importlib\nimportlib.reload(myscript)\nmyscript.main()\n```\n\n----------------------------------------\n\nTITLE: Efficient List Extension: Using extend (Python)\nDESCRIPTION: This snippet showcases the efficient way of adding several items from one list into another using the extend method. It extends `my_list` with multiple items at once, which is more efficient than appending one by one in a loop.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmy_list.extend([a, b, c...])\n```\n\n----------------------------------------\n\nTITLE: Including Platform and Build-Mode Specific CMake Modules\nDESCRIPTION: Includes CMake modules based on the target platform (Apple, Windows, Unix) and build mode (Release), conditionally including dependencies like Level-Zero, GMP, OpenJPEG, OpenImageDenoise, LAME, OGG, Vorbis, Theora, Opus, VPX, x264, x265, AOM, FFmpeg, FFTW, FLAC, Sndfile, SPNAV, Jemalloc, Bzip2, FFI, Lzma, SQLite, LibGLU, Mesa, Wayland Protocols, Shaderc Deps, Shaderc, Vulkan, Pybind11, Nanobind and Manifold. Also conditionally includes XR OpenXR, HIP-RT, DPC++, IGC, GmmLib, Ocloc, OpenPGL, and Embree based on platform and architecture.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  include(cmake/xr_openxr.cmake)\n  if(NOT BLENDER_PLATFORM_ARM)\n    # HIP-RT requires special SDK which is not widely available yet.\n    if(NOT WIN32)\n      include(cmake/hiprt.cmake)\n    endif()\n    include(cmake/dpcpp.cmake)\n    include(cmake/dpcpp_deps.cmake)\n    if(NOT WIN32)\n      include(cmake/igc.cmake)\n      include(cmake/gmmlib.cmake)\n      include(cmake/ocloc.cmake)\n    endif()\n  endif()\nendif()\ninclude(cmake/ispc.cmake)\nif(BLENDER_PLATFORM_WINDOWS_ARM)\n  include(cmake/openpgl_windows_arm.cmake)\nelse()\n  include(cmake/openpgl.cmake)\nendif()\n# EMBREE needs to be included after `dpcpp` as it uses it for compiling with GPU support\nif(BLENDER_PLATFORM_WINDOWS_ARM)\n  # WoA needs EMBREE to be built with the VS Generator + LLVM,\n  # put it in its own file to avoid clutter.\n  include(cmake/embree_windows_arm.cmake)\nelse()\n  include(cmake/embree.cmake)\nendif()\ninclude(cmake/fmt.cmake)\ninclude(cmake/robinmap.cmake)\ninclude(cmake/xml2.cmake)\n# OpenColorIO and dependencies.\ninclude(cmake/expat.cmake)\ninclude(cmake/pystring.cmake)\ninclude(cmake/yamlcpp.cmake)\ninclude(cmake/minizipng.cmake)\ninclude(cmake/opencolorio.cmake)\n\nif(BLENDER_PLATFORM_ARM)\n  include(cmake/sse2neon.cmake)\nendif()\n\ninclude(cmake/webp.cmake)\nif(NOT APPLE)\n  include(cmake/level-zero.cmake)\nendif()\n\nif(NOT WIN32 OR ENABLE_MSYS2)\n  include(cmake/gmp.cmake)\n  include(cmake/openjpeg.cmake)\n  if(NOT WIN32 OR BUILD_MODE STREQUAL Release)\n    include(cmake/openimagedenoise.cmake)\n    include(cmake/lame.cmake)\n    include(cmake/ogg.cmake)\n    include(cmake/vorbis.cmake)\n    include(cmake/theora.cmake)\n    include(cmake/opus.cmake)\n    include(cmake/vpx.cmake)\n    include(cmake/x264.cmake)\n    include(cmake/x265.cmake)\n    include(cmake/aom.cmake)\n    include(cmake/ffmpeg.cmake)\n    include(cmake/fftw.cmake)\n    include(cmake/flac.cmake)\n    include(cmake/sndfile.cmake)\n    if(UNIX)\n      if(NOT APPLE)\n        include(cmake/spnav.cmake)\n        include(cmake/jemalloc.cmake)\n      endif()\n    endif()\n  endif()\nendif()\n\nif(UNIX)\n  include(cmake/bzip2.cmake)\n  include(cmake/ffi.cmake)\n  include(cmake/lzma.cmake)\n  include(cmake/sqlite.cmake)\nendif()\n\nif(UNIX AND NOT APPLE)\n  include(cmake/libglu.cmake)\n  include(cmake/mesa.cmake)\n  include(cmake/wayland_protocols.cmake)\n  # Can be removed when the build-bot upgrades to v1.20.x or newer.\n  include(cmake/wayland.cmake)\n  include(cmake/wayland_libdecor.cmake)\n  include(cmake/wayland_weston.cmake)\nendif()\ninclude(cmake/shaderc_deps.cmake)\ninclude(cmake/shaderc.cmake)\ninclude(cmake/vulkan.cmake)\ninclude(cmake/pybind11.cmake)\ninclude(cmake/nanobind.cmake)\ninclude(cmake/manifold.cmake)\n```\n\n----------------------------------------\n\nTITLE: OSL Compilation Configuration - CMake\nDESCRIPTION: This CMake snippet iterates through the list of OSL source files and sets up a custom command to compile each .osl file into a .oso (Open Shading Object) file. It uses the OSL compiler (`OSL_COMPILER`) with specific flags to optimize the shaders and include necessary header directories. This process is crucial for generating the shader bytecode that the rendering engine can execute.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(_file ${SRC_OSL})\n  set(_OSL_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${_file})\n  set_source_files_properties(${_file} PROPERTIES HEADER_FILE_ONLY TRUE)\n  string(REPLACE \".osl\" \".oso\" _OSO_FILE ${_OSL_FILE})\n  string(REPLACE ${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR} _OSO_FILE ${_OSO_FILE})\n  add_custom_command(\n    OUTPUT ${_OSO_FILE}\n    COMMAND\n      ${CMAKE_COMMAND} -E env ${PLATFORM_ENV_BUILD}\n      ${OSL_COMPILER} -q -O2\n        -I\"${CMAKE_CURRENT_SOURCE_DIR}\"\n        -I\"${OSL_SHADER_DIR}\"\n        -o ${_OSO_FILE}\n        ${_OSL_FILE}\n    DEPENDS ${_OSL_FILE} ${SRC_OSL_HEADERS} ${OSL_COMPILER}\n  )\n  list(APPEND SRC_OSO\n    ${_OSO_FILE}\n  )\n\n  unset(_OSL_FILE)\n  unset(_OSO_FILE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Copying Pixels into 2D Texture with glCopyTexImage2D (bgl)\nDESCRIPTION: Copies pixels from the frame buffer into a 2D texture image.  'target' specifies the target texture, 'level' is the mipmap level, 'internalformat' the number of color components, 'x' and 'y' the window coordinates, 'width' and 'height' the texture dimensions, and 'border' the border width. This enables dynamic texture updates based on rendered content.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glCopyTexImage2D(target, level, internalformat, x, y, width, height, border)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions based on Python (CMake)\nDESCRIPTION: This snippet conditionally adds a preprocessor definition and an include directory based on the 'WITH_PYTHON' flag. If enabled, '-DWITH_PYTHON' is added and '../python' is added to the include paths.  This allows C++ code to interface with Python, enabling features that require Python bindings.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Objects in a Scene - Python\nDESCRIPTION: This code snippet demonstrates how to access and iterate through objects within the current scene in the Blender Game Engine (BGE) using Python. It retrieves the current scene, iterates through its objects, and prints their names. Additionally, it shows how to access a specific object by name and by index. It requires the 'bge' module.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bge import logic\n\n# get the scene\nscene = logic.getCurrentScene()\n\n# print all the objects in the scene\nfor object in scene.objects:\n   print(object.name)\n\n# get an object named 'Cube'\nobject = scene.objects[\"Cube\"]\n\n# get the first object in the scene.\nobject = scene.objects[0]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Solvers based on Availability in CMake\nDESCRIPTION: This code block defines default LP and MIP solvers based on which solver libraries (ILOG, COIN, GLPK, SOPLEX) were found by `FIND_PACKAGE`. It prioritizes CPLEX, CLP/CBC and GLPK respectively, if available.  The user can override these defaults, but the code ensures that if the user-specified default is not available, it falls back to a working solver.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nIF(ILOG_FOUND)\n  SET(DEFAULT_LP \"CPLEX\")\n  SET(DEFAULT_MIP \"CPLEX\")\nELSEIF(COIN_FOUND)\n  SET(DEFAULT_LP \"CLP\")\n  SET(DEFAULT_MIP \"CBC\")\nELSEIF(GLPK_FOUND)\n  SET(DEFAULT_LP \"GLPK\")\n  SET(DEFAULT_MIP \"GLPK\")\nELSEIF(SOPLEX_FOUND)\n  SET(DEFAULT_LP \"SOPLEX\")\nENDIF()\n\nIF(NOT LEMON_DEFAULT_LP OR\n    (NOT ILOG_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"CPLEX\")) OR\n    (NOT COIN_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"CLP\")) OR\n    (NOT GLPK_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"GLPK\")) OR\n    (NOT SOPLEX_FOUND AND (LEMON_DEFAULT_LP STREQUAL \"SOPLEX\")))\n  SET(LEMON_DEFAULT_LP ${DEFAULT_LP} CACHE STRING\n    \"Default LP solver backend (GLPK, CPLEX, CLP or SOPLEX)\" FORCE)\nELSE()\n  SET(LEMON_DEFAULT_LP ${DEFAULT_LP} CACHE STRING\n    \"Default LP solver backend (GLPK, CPLEX, CLP or SOPLEX)\")\nENDIF()\nIF(NOT LEMON_DEFAULT_MIP OR\n    (NOT ILOG_FOUND AND (LEMON_DEFAULT_MIP STREQUAL \"CPLEX\")) OR\n    (NOT COIN_FOUND AND (LEMON_DEFAULT_MIP STREQUAL \"CBC\")) OR\n    (NOT GLPK_FOUND AND (LEMON_DEFAULT_MIP STREQUAL \"GLPK\")))\n  SET(LEMON_DEFAULT_MIP ${DEFAULT_MIP} CACHE STRING\n    \"Default MIP solver backend (GLPK, CPLEX or CBC)\" FORCE)\nELSE()\n  SET(LEMON_DEFAULT_MIP ${DEFAULT_MIP} CACHE STRING\n    \"Default MIP solver backend (GLPK, CPLEX or CBC)\")\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Component Property Types in Python\nDESCRIPTION: This example illustrates the declaration of various property types supported by KX_PythonComponent including float, integer, boolean, string, set (enumeration), and Vector (2D, 3D, 4D). The properties are defined in the `args` dictionary using `OrderedDict` to maintain the order. The `start` method prints the property values.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_PythonComponent.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom bge import *\nfrom mathutils import *\nfrom collections import OrderedDict\n\nclass Component(types.KX_PythonComponent):\n     args = OrderedDict([\n         (\"Float\", 58.6),\n         (\"Integer\", 150),\n         (\"Boolean\", True),\n         (\"String\", \"Cube\"),\n         (\"Enum\", {\"Enum 1\", \"Enum 2\", \"Enum 3\"}),\n         (\"Vector 2D\", Vector((0.8, 0.7))),\n         (\"Vector 3D\", Vector((0.4, 0.3, 0.1))),\n         (\"Vector 4D\", Vector((0.5, 0.2, 0.9, 0.6)))\n     ])\n\n     def start(self, args):\n         print(args)\n\n     def update(self):\n         pass\n```\n\n----------------------------------------\n\nTITLE: Inserting Python Interpreter with Global Access\nDESCRIPTION: Inserts a Python interpreter into a Blender script with access to both global and local variables. This enables more comprehensive debugging. Requires the `code` module. The namespace is created by merging globals and locals.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport code\nnamespace = globals().copy()\nnamespace.update(locals())\ncode.interact(local=namespace)\n```\n\n----------------------------------------\n\nTITLE: Create guardedalloc library\nDESCRIPTION: This snippet creates the bf_intern_guardedalloc library using the specified source files, include directories, and library dependencies. It then creates an alias bf::intern::guardedalloc for easier referencing.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_guardedalloc \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::guardedalloc ALIAS bf_intern_guardedalloc)\n```\n\n----------------------------------------\n\nTITLE: Adding and Moving a Cube Component in Python\nDESCRIPTION: This example shows how to add a \"Cube\" object to the scene at initialization and move it along the x-axis during each update using the KX_PythonComponent class. It also demonstrates how to handle the import of bge modules when the component is loaded outside of the BGE by checking for the `__component__` attribute. This ensures that functions from the scene can be used safely during component loading.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_PythonComponent.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nimport bge\n\nif not hasattr(bge, \"__component__\"):\n    global scene\n    scene = bge.logic.getCurrentScene()\n\nclass Component(bge.types.KX_PythonComponent):\n    args = {}\n\n    def start(self, args):\n        scene.addObject(\"Cube\")\n\n    def update(self):\n        scene.objects[\"Cube\"].worldPosition.x += 0.1\n```\n\n----------------------------------------\n\nTITLE: IDE Source Grouping Options\nDESCRIPTION: This CMake snippet configures IDE source grouping options for Visual Studio and Xcode. It defines options to organize source files and projects in folders based on the source directory structure.  It enables the use of folders in the IDE for better organization.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 OR XCODE)\n  option(IDE_GROUP_SOURCES_IN_FOLDERS \"\\\nOrganize the source files in filters matching the source directory.\"\n    ON\n  )\n  mark_as_advanced(IDE_GROUP_SOURCES_IN_FOLDERS)\n\n  option(IDE_GROUP_PROJECTS_IN_FOLDERS \"\\\nOrganize the projects according to source directory structure.\"\n    ON\n  )\n  mark_as_advanced(IDE_GROUP_PROJECTS_IN_FOLDERS)\n\n  if(IDE_GROUP_PROJECTS_IN_FOLDERS)\n    set_property(GLOBAL PROPERTY USE_FOLDERS ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Internationalization Support in CMake\nDESCRIPTION: This snippet conditionally adds support for internationalization (i18n).  If the WITH_INTERNATIONAL option is enabled, it adds the -DWITH_INTERNATIONAL preprocessor definition, enabling the code to use internationalization features for supporting multiple languages.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Color Component Writing with glColorMask (bgl)\nDESCRIPTION: Enables or disables writing of frame buffer color components. The 'red', 'green', 'blue', and 'alpha' parameters (boolean integers) control whether each respective color component can be written to the frame buffer. This allows for selective color component updates.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glColorMask(red, green, blue, alpha)\n```\n\n----------------------------------------\n\nTITLE: Executing External Script from Blender\nDESCRIPTION: Executes an external Python script from within Blender.  This is useful for running scripts that are stored outside of the Blender file. Requires the full path to the script. The `compile` function is used to compile the code, and `exec` executes the compiled code.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfilename = \"/full/path/to/myscript.py\"\nexec(compile(open(filename).read(), filename, 'exec'))\n```\n\n----------------------------------------\n\nTITLE: Complex UI Layout with Split and Column (Python)\nDESCRIPTION: Illustrates creating a more complex UI layout using layout.split() to divide the layout into columns, allowing for more structured arrangement of properties. Each column then has two properties added.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsplit = layout.split()\n\ncol = split.column()\ncol.prop()\ncol.prop()\n\ncol = split.column()\ncol.prop()\ncol.prop()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Includes & Definitions - CMake\nDESCRIPTION: This code block conditionally includes the Python include directories and defines the WITH_PYTHON preprocessor macro if Python support is enabled. It checks the `WITH_PYTHON` variable, and if it's true, it adds the system include directories for Python using `include_directories` and defines the `WITH_PYTHON` macro using `add_definitions`.  `PYTHON_INCLUDE_DIRS` is assumed to be populated by a separate CMake module that detects the Python installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  include_directories(SYSTEM \"${PYTHON_INCLUDE_DIRS}\")\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Horizontal UI Layout with Row (Python)\nDESCRIPTION: Demonstrates creating a horizontal UI layout using the layout.row() function, allowing multiple properties to be displayed on a single line.  Two properties are added to a row layout.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nrow = layout.row()\nrow.prop()\nrow.prop()\n```\n\n----------------------------------------\n\nTITLE: Loading User Preferences and Startup File in Blender Python Module\nDESCRIPTION: This code snippet shows how to load user preferences and the startup file when using Blender as a Python module.  By default, the module ignores the user's local configuration.  This code uses the `bpy.ops.wm.read_userpref()` and `bpy.ops.wm.read_homefile()` operators to load these settings, allowing the script to behave more like the interactive Blender application.  It requires the `bpy` module to be imported.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_advanced_blender_as_bpy.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\n\nbpy.ops.wm.read_userpref()\nbpy.ops.wm.read_homefile()\n```\n\n----------------------------------------\n\nTITLE: Getting Number of Wheels (KX_VehicleWrapper)\nDESCRIPTION: This method returns the total number of wheels associated with the vehicle. The returned value is an integer representing the wheel count, useful for iterating through all wheels or accessing specific wheels by index.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getNumWheels()\n\n      Returns the number of wheels.\n\n      :return: the number of wheels for this vehicle\n      :rtype: integer\n```\n\n----------------------------------------\n\nTITLE: Getting Material ID from Texture/Material Name (Python)\nDESCRIPTION: Retrieves the internal material number associated with a texture or material name. The object must have a material that matches the provided name. A runtime error is raised if no match is found. The 'IM' prefix identifies the texture directly, while the 'MA' prefix identifies the texture by material.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\nbge.texture.materialID(obj, 'IMvideo.png')\n```\n\n----------------------------------------\n\nTITLE: Access Sculpt Brush Texture Contrast (bpy.context)\nDESCRIPTION: This snippet demonstrates how to access the contrast of the active sculpt brush's texture using nested properties in Blender. It assumes Blender is in Sculpt Mode, a brush is active, and the brush has a texture assigned. It uses bpy.context.tool_settings.sculpt.brush.texture.contrast to retrieve the contrast value.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.tool_settings.sculpt.brush.texture.contrast\n```\n\n----------------------------------------\n\nTITLE: Setting Post-Install and Post-Configure Scripts\nDESCRIPTION: This CMake snippet sets the paths to scripts that are run after the installation and configuration processes. It defines two cache variables, `POSTINSTALL_SCRIPT` and `POSTCONFIGURE_SCRIPT`, and marks them as advanced.  These scripts can be used to perform additional tasks after the main build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_74\n\nLANGUAGE: cmake\nCODE:\n```\n# Installation process.\nset(POSTINSTALL_SCRIPT \"\" CACHE FILEPATH \"Run given CMake script after installation process\")\nmark_as_advanced(POSTINSTALL_SCRIPT)\n\nset(POSTCONFIGURE_SCRIPT \"\" CACHE FILEPATH \"\\\nRun given CMake script as the last step of CMake configuration\"\n)\nmark_as_advanced(POSTCONFIGURE_SCRIPT)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenVDB Configuration CMake\nDESCRIPTION: This snippet conditionally configures the build based on the `WITH_OPENVDB` flag. If enabled, it adds preprocessor definitions and includes OpenVDB include directories.  This allows the Cycles Hydra delegate to utilize OpenVDB functionality if the library is available.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining OSL Header Files - CMake\nDESCRIPTION: This CMake code defines the header files for OSL (Open Shading Language) support in the Cycles kernel. It is conditionally included based on the `WITH_CYCLES_OSL` option. It includes headers for OSL core definitions, closure setup, templates, GPU services, and types.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  set(SRC_KERNEL_OSL_HEADERS\n    osl/osl.h\n    osl/closures_setup.h\n    osl/closures_template.h\n    osl/services_gpu.h\n    osl/types.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the Wavefront OBJ I/O module. It specifies the Blender libraries that the module depends on, such as `blenkernel`, `blenlib`, `bmesh`, `depsgraph`, `dna`, `clog`, `guardedalloc`, `fmtlib`, `nodes`, and `windowmanager`. The `bf_io_common` library is also linked.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Enable CPU SIMD instructions\nDESCRIPTION: This option enables SIMD (Single Instruction, Multiple Data) instructions if they are detected on the host machine.  SIMD instructions allow the CPU to perform the same operation on multiple data points simultaneously, potentially improving performance. The option is marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_CPU_SIMD \"Enable SIMD instruction if they're detected on the host machine\" ON)\nmark_as_advanced(WITH_CPU_SIMD)\n```\n\n----------------------------------------\n\nTITLE: Defining a PropertyGroup Subclass with Inline Property\nDESCRIPTION: This snippet demonstrates the more common and concise way to define a custom `PropertyGroup` subclass, including the property definition directly within the class. This is functionally equivalent to adding the property after the class definition as shown in the previous example.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass MyPropGroup(bpy.types.PropertyGroup):\n    my_float: bpy.props.FloatProperty()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the 3D viewport editor module.  It specifies both local project directories and external library locations. The `CMAKE_BINARY_DIR` variable provides the path to the build directory where generated files like `RNA_prototypes.hh` are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../makesrna\n  ../../modifiers\n  ../../../../intern/mantaflow/extern\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories required for compiling the source files. It includes the local directory (.), the makesrna directory, and Python include directories. These are essential for resolving header files and accessing Python API functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../makesrna\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Suspension Stiffness (KX_VehicleWrapper)\nDESCRIPTION: This method sets the suspension stiffness for a specified wheel. It requires the stiffness value as a float and the wheel index as an integer.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setSuspensionStiffness(stiffness, wheelIndex)\n\n      Set the specified wheel's stiffness\n\n      :arg stiffness: the wheel stiffness\n      :type stiffness: float\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Basic Number Parsing Example\nDESCRIPTION: Demonstrates basic usage of `fast_float::from_chars` to parse a double from a string. The example checks for parsing errors and prints the parsed number to the console.  It requires the fast_float header and iostream for output.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n    const std::string input =  \"3.1416 xyz \";\n    double result;\n    auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\n    if(answer.ec != std::errc()) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n    std::cout << \"parsed the number \" << result << std::endl;\n    return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Compression Options\nDESCRIPTION: This snippet defines options for enabling LZO, LZMA and Draco compression libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n# Compression\noption(WITH_LZO \"Enable fast LZO compression (used for pointcache)\" ON)\noption(WITH_LZMA \"Enable best LZMA compression, (used for pointcache)\" ON)\nif(UNIX AND NOT APPLE)\n  option(WITH_SYSTEM_LZO \"Use the system LZO library\" OFF)\nendif()\noption(WITH_DRACO \"Enable Draco mesh compression Python module (used for glTF)\" ON)\n```\n\n----------------------------------------\n\nTITLE: Buffer Object Initialization and Usage in bgl (Python)\nDESCRIPTION: This code demonstrates how to create, initialize, and use a bgl.Buffer object for interacting with OpenGL functions. It includes initializing a byte buffer, retrieving polygon stipple data, accessing dimensions, converting to a list, and creating a slice of the buffer.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport bgl\n\nmyByteBuffer = bgl.Buffer(bgl.GL_BYTE, [32, 32])\nbgl.glGetPolygonStipple(myByteBuffer)\n\nprint(myByteBuffer.dimensions)\nprint(myByteBuffer.to_list())\n\nsliceBuffer = myByteBuffer[0:16]\nprint(sliceBuffer)\n```\n\n----------------------------------------\n\nTITLE: Setting Roll Influence (KX_VehicleWrapper)\nDESCRIPTION: This method sets the roll influence for a specified wheel. The roll influence determines how much the vehicle will tend to roll over in corners. The higher the value, the more the vehicle will roll. The method requires the roll influence value (float) and the wheel index (integer).\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setRollInfluence(rollInfluece, wheelIndex)\n\n      Set the specified wheel's roll influence.\n      The higher the roll influence the more the vehicle will tend to roll over in corners.\n\n      :arg rollInfluece: the wheel roll influence\n      :type rollInfluece: float\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Initializing Keyboard Sensor with F1 Key - Python\nDESCRIPTION: This snippet demonstrates how to set a connected keyboard sensor to accept the F1 key using the bge.events.F1KEY constant. It accesses the current controller, retrieves the keyboard sensor by name, and assigns the F1KEY constant to the sensor's key property. Requires a keyboard sensor named 'Keyboard' to exist in the scene.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.events.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n   # Set a connected keyboard sensor to accept F1\n   import bge\n\n   co = bge.logic.getCurrentController()\n   # 'Keyboard' is a keyboard sensor\n   sensor = co.sensors[\"Keyboard\"]\n   sensor.key = bge.events.F1KEY\n```\n\n----------------------------------------\n\nTITLE: Get Screen Vector (Python)\nDESCRIPTION: This example retrieves a vector from the camera's position, pointing in a specific screen coordinate direction, using the `getScreenVect` method. This method calculates the 3D vector corresponding to a given screen position (x, y) relative to the camera. The example demonstrates how to obtain the vector representing the camera's forward direction.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Gets the vector of the camera front direction:\nm_vect = camera.getScreenVect(0.5, 0.5)\n```\n\n----------------------------------------\n\nTITLE: Applying Engine Force (KX_VehicleWrapper)\nDESCRIPTION: This method applies an engine force to a specified wheel of the vehicle. It takes the engine force as a float and the wheel index as an integer. The force is applied to the wheel identified by the index.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: applyEngineForce(force, wheelIndex)\n\n      Apply an engine force to the specified wheel\n\n      :arg force: the engine force\n      :type force: float\n\n      :arg wheelIndex: index of the wheel where the force needs to be applied\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Matrix Vector Multiplication in Blender\nDESCRIPTION: This snippet illustrates how to perform matrix-vector multiplication in Blender using the mathutils module. It multiplies the object's world matrix by the coordinate of the first vertex of the object's data.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object.matrix_world @ bpy.context.object.data.verts[0].co\n```\n\n----------------------------------------\n\nTITLE: Finding and Setting Blender Executable Path in Python\nDESCRIPTION: This code snippet demonstrates how to locate the Blender executable using `shutil.which` and set the `bpy.app.binary_path` if found. This allows the Python module to access the full Blender application, enabling functionalities that rely on the executable being available. If the Blender executable isn't found, a message is printed to the console.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_advanced_blender_as_bpy.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nimport shutil\n\nblender_bin = shutil.which(\"blender\")\nif blender_bin:\n   print(\"Found:\", blender_bin)\n   bpy.app.binary_path = blender_bin\nelse:\n   print(\"Unable to find blender!\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Constraint Name from Pose Bone (Python)\nDESCRIPTION: This snippet shows how to retrieve the name of the first constraint applied to a pose bone. It accesses the pose bone named \"Bone\", gets the first constraint in its constraint list (index 0), and then retrieves the `name` attribute of that constraint. It assumes that the bone has at least one constraint.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Gets the name of the first constraint (if it exists).\nbpy.context.object.pose.bones[\"Bone\"].constraints[0].name\n```\n\n----------------------------------------\n\nTITLE: Get Screen Ray (Python)\nDESCRIPTION: This snippet illustrates how to use the `getScreenRay` method to perform a raycast from the camera through a specific screen coordinate to find an object. It searches for the first object hit within a given distance that also possesses a specified property.  It uses the camera to cast a ray from the center of the screen (0.5, 0.5) up to a distance of 100 units, looking for objects with a property named \"wall\".\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Gets an object with a property \"wall\" in front of the camera within a distance of 100:\ntarget = camera.getScreenRay(0.5, 0.5, 100, \"wall\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Removing a Mesh - Python\nDESCRIPTION: This code snippet demonstrates the correct way to create and remove a mesh in Blender using the Python API. It shows how to create a new mesh using `bpy.data.meshes.new()` and then remove it using `bpy.data.meshes.remove()`. This approach ensures that data is properly managed within Blender's internal database.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> mesh = bpy.data.meshes.new(name=\"MyMesh\")\n>>> print(mesh)\n<bpy_struct, Mesh(\"MyMesh.001\")>\n\n>>> bpy.data.meshes.remove(mesh)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenGL Support\nDESCRIPTION: Conditionally adds OpenGL EGL-related source files and include directories if the WITH_OPENGL_BACKEND option is enabled.  Also adds a preprocessor definition. Requires WITH_OPENGL_BACKEND to be defined elsewhere. This ensures EGL support is included only when OpenGL is used.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/wayland_dynload/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${wayland-egl_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/wayland_dynload_egl.c\n\n    extern/wayland_dynload_egl.h\n  )\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVDB Include Directories and Libraries\nDESCRIPTION: This snippet conditionally adds include directories and libraries for OpenVDB if it is enabled.  It also adds a definition, `WITH_OPENVDB`, to the preprocessor. The `OPENVDB_DEFINITIONS`, `OPENVDB_INCLUDE_DIRS`, and `OPENVDB_LIBRARIES` variables are assumed to be defined elsewhere in the CMake configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Suspension Compression (KX_VehicleWrapper)\nDESCRIPTION: This method sets the suspension compression for a specified wheel. It requires the compression value as a float and the wheel index as an integer.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setSuspensionCompression(compression, wheelIndex)\n\n      Set the specified wheel's compression\n\n      :arg compression: the wheel compression\n      :type compression: float\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Installing OpenVDB Python Bindings with CMake\nDESCRIPTION: This snippet demonstrates how to install OpenVDB Python bindings, specifically `.pyd` files, into the site-packages directory.  It uses conditional logic to account for debug and release versions and different naming conventions introduced in newer versions (4.3 and 4.4) by checking file existence. It also considers the system architecture (ARM64 or AMD64) when constructing the file names.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${LIBDIR}/openvdb/python/pyopenvdb_d.pyd)\n  install(\n    FILES ${LIBDIR}/openvdb/python/pyopenvdb_d.pyd\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Debug\n  )\n  install(\n    FILES ${LIBDIR}/openvdb/python/pyopenvdb.pyd\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n  )\nendif()\n\n# This will exist for 4.1 `./lib` directories.\nif(CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n  set(_openvdb_arch arm64)\nelse()\n  set(_openvdb_arch amd64)\nendif()\n\n# 4.3\nif(EXISTS ${LIBDIR}/openvdb/python/pyopenvdb_d.cp${_PYTHON_VERSION_NO_DOTS}-win_${_openvdb_arch}.pyd)\n  install(\n    FILES ${LIBDIR}/openvdb/python/pyopenvdb_d.cp${_PYTHON_VERSION_NO_DOTS}-win_${_openvdb_arch}.pyd\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Debug\n  )\n  install(\n    FILES ${LIBDIR}/openvdb/python/pyopenvdb.cp${_PYTHON_VERSION_NO_DOTS}-win_${_openvdb_arch}.pyd\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n  )\nendif()\n# 4.4\nif(EXISTS ${LIBDIR}/openvdb/python/openvdb_d.cp${_PYTHON_VERSION_NO_DOTS}-win_${_openvdb_arch}.pyd)\n  install(\n    FILES ${LIBDIR}/openvdb/python/openvdb_d.cp${_PYTHON_VERSION_NO_DOTS}-win_${_openvdb_arch}.pyd\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Debug\n  )\n  install(\n    FILES ${LIBDIR}/openvdb/python/openvdb.cp${_PYTHON_VERSION_NO_DOTS}-win_${_openvdb_arch}.pyd\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enable Cycles AMD HIP support\nDESCRIPTION: These options enable and configure AMD HIP (Heterogeneous-compute Interface for Portability) support in Cycles for non-Apple systems, excluding Windows ARM64. It includes toggles for HIP device and HIPRT (HIP Ray Tracing) support, and sets the target HIP architectures.  Vega and older architectures are excluded due to rendering issues.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE AND NOT (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\"))\n  option(WITH_CYCLES_DEVICE_HIP \"Enable Cycles AMD HIP support\" ON)\n  option(WITH_CYCLES_HIP_BINARIES \"Build Cycles AMD HIP binaries\" OFF)\n  # We only support RDNA1 (gfx101X) and newer.\n  # Vega and older generations have rendering artifacts and crashing issues.\n  set(CYCLES_HIP_BINARIES_ARCH\n    gfx1010 gfx1011 gfx1012\n    gfx1030 gfx1031 gfx1032 gfx1034 gfx1035 gfx1036\n    gfx1100 gfx1101 gfx1102 gfx1103 gfx1150 gfx1151 gfx1152\n    gfx1200 gfx1201\n    CACHE STRING \"AMD HIP architectures to build binaries for\"\n  )\n  mark_as_advanced(WITH_CYCLES_DEVICE_HIP)\n  mark_as_advanced(CYCLES_HIP_BINARIES_ARCH)\n\n  option(WITH_CYCLES_DEVICE_HIPRT \"Enable Cycles AMD HIPRT support\" OFF)\n  mark_as_advanced(WITH_CYCLES_DEVICE_HIPRT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Multi-Inheritance with RenderEngine and __init__ - Python\nDESCRIPTION: This code demonstrates how to properly handle multi-inheritance when one of the parent classes is bpy.types.RenderEngine. It emphasizes explicitly calling the Blender-defined parent class's __init__ method (e.g., bpy.types.RenderEngine.__init__(self, *args, **kwargs)) before calling other parent class constructors or accessing object data, because super() may not work as expected.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass FancyRaytracer(AwesomeRaytracer, bpy.types.RenderEngine):\n   def __init__(self, *args, **kwargs):\n      bpy.types.RenderEngine.__init__(self, *args, **kwargs)\n      AwesomeRaytracer.__init__(self, *args, **kwargs)\n      self.my_var = 42\n      ...\n```\n\n----------------------------------------\n\nTITLE: Checking Conditional Dependencies - CMake\nDESCRIPTION: These code blocks check for conditional dependencies between different build options, issuing a FATAL_ERROR if a dependency is not met.  For instance, WITH_PLAYER requires WITH_GAMEENGINE, and WITH_GAMEENGINE requires WITH_AUDASPACE. These checks ensure that necessary components are included when specific features are enabled, preventing runtime errors.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_83\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WITH_GAMEENGINE AND WITH_PLAYER)\n\tmessage(FATAL_ERROR \"WITH_PLAYER requires WITH_GAMEENGINE\")\nendif()\n\nif(NOT WITH_AUDASPACE)\n\tif(WITH_GAMEENGINE)\n\t\tmessage(FATAL_ERROR \"WITH_GAMEENGINE requires WITH_AUDASPACE\")\n\tendif()\nendif()\n\nif(NOT WITH_SDL AND WITH_GHOST_SDL)\n  message(FATAL_ERROR \"WITH_GHOST_SDL requires WITH_SDL\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding FBX Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_IO_FBX` option is enabled. If it is, the 'fbx' subdirectory is added to the build. This enables the FBX importer/exporter functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_FBX)\n  add_subdirectory(fbx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Get Screen Position of Object (Python)\nDESCRIPTION: This code snippet shows how to get the screen space coordinates of an object using the `getScreenPosition` method of the `KX_Camera` class. The `getScreenPosition` method takes a KX_GameObject as input and returns a list representing the object's x and y coordinates in screen space, where [0.5, 0.5] represents the center of the screen.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# For an object in the middle of the screen, coord = [0.5, 0.5]\ncoord = camera.getScreenPosition(object)\n```\n\n----------------------------------------\n\nTITLE: Setting Text and Position with KX_FontObject in UPBGE\nDESCRIPTION: This code snippet demonstrates how to use the `bge` module to access and modify a `KX_FontObject` in UPBGE. It shows how to set the text property, position, and other text settings using both `bge` module and `bpy.types.TextCurve` attributes. Requires the `bge` module.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_FontObject.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport bge\n\n# Use bge module to get/set game property + transform\nfont_object = (bge.logic.getCurrentController()).owner\nfont_object[\"Text\"] = \"Text Example\"\nfont_object.worldPosition = [-2.5, 1.0, 0.0]\n\n# Use bpy.types.TextCurve attributes to set other text settings\nfont_object_text = font_object.blenderObject.data\nfont_object_text.size = 1\nfont_object_text.resolution_u = 4\nfont_object_text.align_x = \"LEFT\"\n```\n\n----------------------------------------\n\nTITLE: SDL Integration with CMake\nDESCRIPTION: This CMake code handles SDL integration. It tries to find SDL2 first, and if not found, falls back to SDL1. It defines source and header files for the SDL plugin, and appends necessary include directories and libraries. It also includes logic to find and append DLLs for Windows when `AUDASPACE_STANDALONE` is set.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_SDL)\n\tif(AUDASPACE_STANDALONE)\n\t\tif(USE_SDL2)\n\t\t\tfind_package(SDL2)\n\t\t\tif(SDL2_FOUND)\n\t\t\t\tset(SDL_INCLUDE_DIR ${SDL2_INCLUDE_DIR})\n\t\t\t\tset(SDL_LIBRARY ${SDL2_LIBRARY})\n\t\t\t\tset(SDL_FOUND TRUE)\n\t\t\telse()\n\t\t\t\tfind_package(SDL ${PACKAGE_OPTION})\n\t\t\tendif()\n\t\telse()\n\t\t\tfind_package(SDL ${PACKAGE_OPTION})\n\t\tendif()\n\tendif()\n\n\tif(SDL_FOUND)\n\t\tset(SDL_SRC\n\t\t\tplugins/sdl/SDLDevice.cpp\n\t\t)\n\t\tset(SDL_HDR\n\t\t\tplugins/sdl/SDLDevice.h\n\t\t)\n\n\t\tif(NOT PLUGIN_SDL)\n\t\t\tlist(APPEND INCLUDE ${SDL_INCLUDE_DIR})\n\t\t\tlist(APPEND LIBRARIES ${SDL_LIBRARY})\n\t\t\tlist(APPEND SRC ${SDL_SRC})\n\t\t\tlist(APPEND HDR ${SDL_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS SDLDevice)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB SDL_DLLS ${LIBRARY_PATH}/sdl/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${SDL_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_SDL FALSE CACHE BOOL \"Build With SDL\" FORCE)\n\t\telse()\n\t\t\tset(WITH_SDL FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"SDL not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling Depth Buffer Writing with glDepthMask (bgl)\nDESCRIPTION: Enables or disables writing to the depth buffer. The 'flag' parameter (boolean integer) determines whether depth buffer writing is enabled. Disabling depth buffer writing can be useful for overlay effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glDepthMask(flag)\n```\n\n----------------------------------------\n\nTITLE: Setting Vulkan Source Files (CMake)\nDESCRIPTION: This snippet defines the source files for the Vulkan backend. It encompasses various aspects of Vulkan implementation, including batch processing, buffer management, context creation, data conversion, debugging tools, descriptor pools and sets, device management, memory layouts, pipeline pools, pixel buffers, push constants, queries, render graph nodes, resource management, samplers, shaders, shader compilation, state management, storage buffers, textures, uniform buffers, and vertex buffers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(VULKAN_SRC\n  vulkan/vk_backend.cc\n  vulkan/vk_batch.cc\n  vulkan/vk_buffer.cc\n  vulkan/vk_common.cc\n  vulkan/vk_context.cc\n  vulkan/vk_data_conversion.cc\n  vulkan/vk_debug.cc\n  vulkan/vk_descriptor_pools.cc\n  vulkan/vk_descriptor_set.cc\n  vulkan/vk_descriptor_set_layouts.cc\n  vulkan/vk_device.cc\n  vulkan/vk_device_submission.cc\n  vulkan/vk_fence.cc\n  vulkan/vk_framebuffer.cc\n  vulkan/vk_image_view.cc\n  vulkan/vk_immediate.cc\n  vulkan/vk_index_buffer.cc\n  vulkan/vk_memory_layout.cc\n  vulkan/vk_pipeline_pool.cc\n  vulkan/vk_pixel_buffer.cc\n  vulkan/vk_push_constants.cc\n  vulkan/vk_query.cc\n  vulkan/render_graph/nodes/vk_pipeline_data.cc\n  vulkan/render_graph/vk_command_buffer_wrapper.cc\n  vulkan/render_graph/vk_command_builder.cc\n  vulkan/render_graph/vk_render_graph.cc\n  vulkan/render_graph/vk_render_graph_links.cc\n  vulkan/render_graph/vk_resource_access_info.cc\n  vulkan/render_graph/vk_resource_state_tracker.cc\n  vulkan/render_graph/vk_scheduler.cc\n  vulkan/vk_resource_pool.cc\n  vulkan/vk_resource_tracker.cc\n  vulkan/vk_sampler.cc\n  vulkan/vk_samplers.cc\n  vulkan/vk_shader.cc\n  vulkan/vk_shader_compiler.cc\n  vulkan/vk_shader_interface.cc\n  vulkan/vk_shader_log.cc\n  vulkan/vk_shader_module.cc\n  vulkan/vk_staging_buffer.cc\n  vulkan/vk_state_manager.cc\n  vulkan/vk_storage_buffer.cc\n  vulkan/vk_texture.cc\n  vulkan/vk_to_string.cc\n  vulkan/vk_uniform_buffer.cc\n  vulkan/vk_vertex_attribute_object.cc\n  vulkan/vk_vertex_buffer.cc\n\n  vulkan/vk_backend.hh\n  vulkan/vk_batch.hh\n  vulkan/vk_buffer.hh\n  vulkan/vk_common.hh\n  vulkan/vk_context.hh\n  vulkan/vk_data_conversion.hh\n  vulkan/vk_debug.hh\n  vulkan/vk_descriptor_pools.hh\n  vulkan/vk_descriptor_set.hh\n  vulkan/vk_descriptor_set_layouts.hh\n  vulkan/vk_device.hh\n  vulkan/vk_fence.hh\n  vulkan/vk_framebuffer.hh\n  vulkan/vk_ghost_api.hh\n  vulkan/vk_image_view.hh\n  vulkan/vk_immediate.hh\n  vulkan/vk_index_buffer.hh\n  vulkan/vk_memory.hh\n  vulkan/vk_memory_layout.hh\n  vulkan/vk_pipeline_pool.hh\n  vulkan/vk_pixel_buffer.hh\n  vulkan/vk_push_constants.hh\n  vulkan/vk_query.hh\n  vulkan/render_graph/nodes/vk_begin_query_node.hh\n  vulkan/render_graph/nodes/vk_begin_rendering_node.hh\n  vulkan/render_graph/nodes/vk_blit_image_node.hh\n  vulkan/render_graph/nodes/vk_clear_attachments_node.hh\n  vulkan/render_graph/nodes/vk_clear_color_image_node.hh\n  vulkan/render_graph/nodes/vk_clear_depth_stencil_image_node.hh\n  vulkan/render_graph/nodes/vk_copy_buffer_node.hh\n  vulkan/render_graph/nodes/vk_copy_buffer_to_image_node.hh\n  vulkan/render_graph/nodes/vk_copy_image_node.hh\n  vulkan/render_graph/nodes/vk_copy_image_to_buffer_node.hh\n  vulkan/render_graph/nodes/vk_dispatch_indirect_node.hh\n  vulkan/render_graph/nodes/vk_dispatch_node.hh\n  vulkan/render_graph/nodes/vk_draw_indexed_indirect_node.hh\n  vulkan/render_graph/nodes/vk_draw_indexed_node.hh\n  vulkan/render_graph/nodes/vk_draw_indirect_node.hh\n  vulkan/render_graph/nodes/vk_draw_node.hh\n  vulkan/render_graph/nodes/vk_end_query_node.hh\n  vulkan/render_graph/nodes/vk_end_rendering_node.hh\n  vulkan/render_graph/nodes/vk_fill_buffer_node.hh\n  vulkan/render_graph/nodes/vk_node_info.hh\n  vulkan/render_graph/nodes/vk_pipeline_data.hh\n  vulkan/render_graph/nodes/vk_reset_query_pool_node.hh\n  vulkan/render_graph/nodes/vk_synchronization_node.hh\n  vulkan/render_graph/nodes/vk_update_buffer_node.hh\n  vulkan/render_graph/nodes/vk_update_mipmaps_node.hh\n  vulkan/render_graph/vk_command_buffer_wrapper.hh\n  vulkan/render_graph/vk_command_builder.hh\n  vulkan/render_graph/vk_render_graph.hh\n  vulkan/render_graph/vk_render_graph_links.hh\n  vulkan/render_graph/vk_render_graph_node.hh\n  vulkan/render_graph/vk_resource_access_info.hh\n  vulkan/render_graph/vk_resource_state_tracker.hh\n  vulkan/render_graph/vk_scheduler.hh\n  vulkan/vk_resource_pool.hh\n  vulkan/vk_resource_tracker.hh\n  vulkan/vk_sampler.hh\n  vulkan/vk_samplers.hh\n  vulkan/vk_shader.hh\n  vulkan/vk_shader_compiler.hh\n  vulkan/vk_shader_interface.hh\n  vulkan/vk_shader_log.hh\n  vulkan/vk_shader_module.hh\n  vulkan/vk_staging_buffer.hh\n  vulkan/vk_state_manager.hh\n  vulkan/vk_storage_buffer.hh\n  vulkan/vk_texture.hh\n  vulkan/vk_to_string.hh\n  vulkan/vk_uniform_buffer.hh\n  vulkan/vk_vertex_attribute_object.hh\n  vulkan/vk_vertex_buffer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting HIP Dynload - CMake\nDESCRIPTION: This snippet enables dynamic loading for HIP (Heterogeneous Interface for Portability) support. It directly sets WITH_HIP_DYNLOAD to ON when WITH_CYCLES_DEVICE_HIP is enabled. This dynamic loading is necessary because HIP support may evolve in future toolkit versions.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_90\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_HIP)\n  # Currently HIP must be dynamically loaded, this may change in future toolkits\n  set(WITH_HIP_DYNLOAD ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet demonstrates how to configure include directories for the project. It uses the `set` and `list(APPEND ...)` commands in CMake to manage both standard include directories (INC) and system include directories (INC_SYS). These directories are used during the compilation process to locate header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n\nlist(APPEND INC\n    ${GFLAGS_INCLUDE_DIRS}\n    ${GLOG_INCLUDE_DIRS}\n    ../guardedalloc\n  )\n\n  list(APPEND INC_SYS\n    ${PNG_INCLUDE_DIRS}\n    ${ZLIB_INCLUDE_DIRS}\n    ../../extern/ceres/include\n    ../../extern/ceres/config\n  )\n```\n\n----------------------------------------\n\nTITLE: CPU Check Option\nDESCRIPTION: This snippet defines the WITH_CPU_CHECK option to report CPU incompatibility on startup. It is enabled only if python module is disabled and on Windows (AMD64) and Linux (x86_64) platforms. It provides a more user-friendly error message than a cryptic crash.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif((NOT WITH_PYTHON_MODULE) AND (\n      (WIN32 AND (CMAKE_SYSTEM_PROCESSOR STREQUAL \"AMD64\")) OR\n      ((UNIX AND NOT APPLE) AND (CMAKE_SYSTEM_PROCESSOR STREQUAL \"x86_64\"))))\n  option(WITH_CPU_CHECK \"\\\nReport when a CPU is not compatible on startup \\\ninstead of failing to start with an inscrutable error.\" \n    ON\n  )\n  mark_as_advanced(WITH_CPU_CHECK)\nelse()\n  set(WITH_CPU_CHECK OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This section defines the include directories for the USD I/O library. It includes local directories within the Blender project and system-level directories for dependencies like USD, Boost, TBB, and Python.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../common\n  ../../editors/include\n  ../../makesrna\n  ../../python/intern\n  ../../../../intern/utfconv\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${USD_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n  ${TBB_INCLUDE_DIR}\n  ${PYTHON_INCLUDE_DIR}\n\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Wheel Orientation Quaternion (KX_VehicleWrapper)\nDESCRIPTION: This method returns the orientation of a specified wheel as a quaternion. It requires the wheel index as input. The documentation indicates it *should* return a quaternion, but the note indicates the code looks like it actually returns a matrix.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getWheelOrientationQuaternion(wheelIndex)\n\n      Returns the wheel orientation as a quaternion.\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n\n      :return: TODO Description\n      :rtype: TODO - type should be quat as per method name but from the code it looks like a matrix\n```\n\n----------------------------------------\n\nTITLE: Copy copyright text to install directory\nDESCRIPTION: This option allows copying the Blender Author's copyright.txt into the Blender install directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_INSTALL_COPYRIGHT \"\\\nCopy the official Blender Authors's copyright.txt into the Blender install directory\"\n  OFF\n)\nmark_as_advanced(WITH_INSTALL_COPYRIGHT)\n```\n\n----------------------------------------\n\nTITLE: Reloading Image Texture in Python\nDESCRIPTION: This snippet shows how to reload an image texture using the reload() method of the ImageFFmpeg class. An `ImageFFmpeg` object must be created first. This allows changing the image associated with the texture at runtime.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nmyimage.reload()\n# or\nmyimage.reload(\"//new_image.png\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Dependency with Feature Check - CMake\nDESCRIPTION: This snippet checks if WITH_UI_TESTS_HEADLESS is enabled, and if so, ensures that WITH_GHOST_WAYLAND is also enabled. It uses the `set_and_warn_dependency` macro (assumed to exist) to manage this dependency. This ensures that headless UI tests have the necessary graphics support.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_86\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_UI_TESTS_HEADLESS)\n  set_and_warn_dependency(WITH_GHOST_WAYLAND WITH_UI_TESTS_HEADLESS OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This code block defines the library dependencies for the dummy physics library. It depends on `bf::blenlib`, which is a Blender library. This dependency suggests that the dummy physics environment interacts with or relies on functionalities provided by the Blender core.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Dummy/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Define GLSL Shader Source Files (CMake)\nDESCRIPTION: This CMake snippet defines a variable `GLSL_SRC` containing a list of GLSL shader source files. These shader files are likely used for various GPU rendering operations within the UPBGE project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SRC\n  GPU_shader_shared.hh\n  shaders/opengl/glsl_shader_defines.glsl\n\n  shaders/gpu_shader_depth_only_frag.glsl\n  shaders/gpu_shader_uniform_color_frag.glsl\n  shaders/gpu_shader_checker_frag.glsl\n  shaders/gpu_shader_diag_stripes_frag.glsl\n  shaders/gpu_shader_simple_lighting_frag.glsl\n  shaders/gpu_shader_flat_color_frag.glsl\n  shaders/gpu_shader_2D_vert.glsl\n  shaders/gpu_shader_2D_area_borders_vert.glsl\n  shaders/gpu_shader_2D_area_borders_frag.glsl\n  shaders/gpu_shader_2D_widget_base_vert.glsl\n  shaders/gpu_shader_2D_widget_base_frag.glsl\n  shaders/gpu_shader_2D_widget_shadow_vert.glsl\n  shaders/gpu_shader_2D_widget_shadow_frag.glsl\n  shaders/gpu_shader_2D_node_socket_frag.glsl\n  shaders/gpu_shader_2D_node_socket_vert.glsl\n  shaders/gpu_shader_2D_nodelink_frag.glsl\n  shaders/gpu_shader_2D_nodelink_vert.glsl\n  shaders/gpu_shader_2D_line_dashed_frag.glsl\n  shaders/gpu_shader_2D_image_vert.glsl\n  shaders/gpu_shader_2D_image_rect_vert.glsl\n  shaders/gpu_shader_icon_multi_vert.glsl\n  shaders/gpu_shader_icon_frag.glsl\n  shaders/gpu_shader_icon_vert.glsl\n  shaders/gpu_shader_image_frag.glsl\n  shaders/gpu_shader_image_desaturate_frag.glsl\n  shaders/gpu_shader_image_overlays_merge_frag.glsl\n  shaders/gpu_shader_image_overlays_stereo_merge_frag.glsl\n  shaders/gpu_shader_image_shuffle_color_frag.glsl\n  shaders/gpu_shader_image_color_frag.glsl\n  shaders/gpu_shader_3D_image_vert.glsl\n  shaders/gpu_shader_3D_vert.glsl\n  shaders/gpu_shader_3D_normal_vert.glsl\n  shaders/gpu_shader_3D_flat_color_vert.glsl\n  shaders/gpu_shader_3D_line_dashed_uniform_color_vert.glsl\n  shaders/gpu_shader_3D_polyline_frag.glsl\n  shaders/gpu_shader_3D_polyline_vert.glsl\n  shaders/gpu_shader_3D_smooth_color_vert.glsl\n  shaders/gpu_shader_3D_smooth_color_frag.glsl\n  shaders/gpu_shader_3D_clipped_uniform_color_vert.glsl\n\n  shaders/gpu_shader_point_uniform_color_aa_frag.glsl\n  shaders/gpu_shader_point_uniform_color_outline_aa_frag.glsl\n  shaders/gpu_shader_point_varying_color_frag.glsl\n  shaders/gpu_shader_3D_point_varying_size_varying_color_vert.glsl\n  shaders/gpu_shader_3D_point_uniform_size_aa_vert.glsl\n  shaders/gpu_shader_2D_point_varying_size_varying_color_vert.glsl\n  shaders/gpu_shader_2D_point_uniform_size_aa_vert.glsl\n  shaders/gpu_shader_2D_point_uniform_size_outline_aa_vert.glsl\n\n  shaders/gpu_shader_text_vert.glsl\n  shaders/gpu_shader_text_frag.glsl\n  shaders/gpu_shader_keyframe_shape_vert.glsl\n  shaders/gpu_shader_keyframe_shape_frag.glsl\n\n  shaders/gpu_shader_sequencer_strips_vert.glsl\n  shaders/gpu_shader_sequencer_strips_frag.glsl\n  shaders/gpu_shader_sequencer_thumbs_vert.glsl\n  shaders/gpu_shader_sequencer_thumbs_frag.glsl\n\n  shaders/gpu_shader_codegen_lib.glsl\n\n  shaders/common/gpu_shader_attribute_load_lib.glsl\n  shaders/common/gpu_shader_bicubic_sampler_lib.glsl\n  shaders/common/gpu_shader_common_color_ramp.glsl\n  shaders/common/gpu_shader_common_color_utils.glsl\n  shaders/common/gpu_shader_common_curves.glsl\n  shaders/common/gpu_shader_common_hash.glsl\n  shaders/common/gpu_shader_common_math.glsl\n  shaders/common/gpu_shader_common_math_utils.glsl\n  shaders/common/gpu_shader_common_mix_rgb.glsl\n  shaders/common/gpu_shader_debug_gradients_lib.glsl\n  shaders/common/gpu_shader_fullscreen_vert.glsl\n  shaders/common/gpu_shader_index_load_lib.glsl\n  shaders/common/gpu_shader_math_base_lib.glsl\n  shaders/common/gpu_shader_math_fast_lib.glsl\n  shaders/common/gpu_shader_math_matrix_lib.glsl\n  shaders/common/gpu_shader_math_rotation_lib.glsl\n  shaders/common/gpu_shader_math_vector_lib.glsl\n  shaders/common/gpu_shader_print_lib.glsl\n  shaders/common/gpu_shader_sequencer_lib.glsl\n  shaders/common/gpu_shader_shared_exponent_lib.glsl\n  shaders/common/gpu_shader_smaa_lib.glsl\n  shaders/common/gpu_shader_test_lib.glsl\n  shaders/common/gpu_shader_utildefines_lib.glsl\n\n  shaders/material/gpu_shader_material_add_shader.glsl\n  shaders/material/gpu_shader_material_ambient_occlusion.glsl\n  shaders/material/gpu_shader_material_attribute.glsl\n  shaders/material/gpu_shader_material_background.glsl\n  shaders/material/gpu_shader_material_bevel.glsl\n  shaders/material/gpu_shader_material_wavelength.glsl\n  shaders/material/gpu_shader_material_blackbody.glsl\n  shaders/material/gpu_shader_material_bright_contrast.glsl\n  shaders/material/gpu_shader_material_bump.glsl\n  shaders/material/gpu_shader_material_camera.glsl\n  shaders/material/gpu_shader_material_clamp.glsl\n  shaders/material/gpu_shader_material_combine_color.glsl\n  shaders/material/gpu_shader_material_combine_hsv.glsl\n  shaders/material/gpu_shader_material_combine_rgb.glsl\n  shaders/material/gpu_shader_material_combine_xyz.glsl\n  shaders/material/gpu_shader_material_diffuse.glsl\n  shaders/material/gpu_shader_material_displacement.glsl\n  shaders/material/gpu_shader_material_eevee_specular.glsl\n  shaders/material/gpu_shader_material_emission.glsl\n  shaders/material/gpu_shader_material_fractal_noise.glsl\n  shaders/material/gpu_shader_material_fractal_voronoi.glsl\n  shaders/material/gpu_shader_material_fresnel.glsl\n  shaders/material/gpu_shader_material_gamma.glsl\n  shaders/material/gpu_shader_material_geometry.glsl\n  shaders/material/gpu_shader_material_glass.glsl\n  shaders/material/gpu_shader_material_glossy.glsl\n  shaders/material/gpu_shader_material_hair_info.glsl\n  shaders/material/gpu_shader_material_hair.glsl\n  shaders/material/gpu_shader_material_holdout.glsl\n  shaders/material/gpu_shader_material_hue_sat_val.glsl\n  shaders/material/gpu_shader_material_invert.glsl\n  shaders/material/gpu_shader_material_layer_weight.glsl\n  shaders/material/gpu_shader_material_light_falloff.glsl\n  shaders/material/gpu_shader_material_light_path.glsl\n  shaders/material/gpu_shader_material_mapping.glsl\n  shaders/material/gpu_shader_material_map_range.glsl\n  shaders/material/gpu_shader_material_metallic.glsl\n  shaders/material/gpu_shader_material_mix_color.glsl\n  shaders/material/gpu_shader_material_mix_shader.glsl\n  shaders/material/gpu_shader_material_noise.glsl\n  shaders/material/gpu_shader_material_normal.glsl\n  shaders/material/gpu_shader_material_normal_map.glsl\n  shaders/material/gpu_shader_material_object_info.glsl\n  shaders/material/gpu_shader_material_output_aov.glsl\n  shaders/material/gpu_shader_material_output_material.glsl\n  shaders/material/gpu_shader_material_output_world.glsl\n  shaders/material/gpu_shader_material_particle_info.glsl\n  shaders/material/gpu_shader_material_point_info.glsl\n  shaders/material/gpu_shader_material_principled.glsl\n  shaders/material/gpu_shader_material_ray_portal.glsl\n  shaders/material/gpu_shader_material_refraction.glsl\n  shaders/material/gpu_shader_material_rgb_to_bw.glsl\n  shaders/material/gpu_shader_material_separate_color.glsl\n  shaders/material/gpu_shader_material_separate_hsv.glsl\n  shaders/material/gpu_shader_material_separate_rgb.glsl\n  shaders/material/gpu_shader_material_separate_xyz.glsl\n  shaders/material/gpu_shader_material_set.glsl\n  shaders/material/gpu_shader_material_shader_to_rgba.glsl\n  shaders/material/gpu_shader_material_sheen.glsl\n  shaders/material/gpu_shader_material_sprites_animation.glsl #UPBGE\n  shaders/material/gpu_shader_material_squeeze.glsl\n  shaders/material/gpu_shader_material_subsurface_scattering.glsl\n  shaders/material/gpu_shader_material_tangent.glsl\n  shaders/material/gpu_shader_material_tex_brick.glsl\n  shaders/material/gpu_shader_material_tex_checker.glsl\n  shaders/material/gpu_shader_material_tex_environment.glsl\n  shaders/material/gpu_shader_material_tex_gabor.glsl\n  shaders/material/gpu_shader_material_tex_gradient.glsl\n  shaders/material/gpu_shader_material_tex_image.glsl\n  shaders/material/gpu_shader_material_tex_magic.glsl\n  shaders/material/gpu_shader_material_tex_noise.glsl\n  shaders/material/gpu_shader_material_tex_sky.glsl\n  shaders/material/gpu_shader_material_texture_coordinates.glsl\n  shaders/material/gpu_shader_material_tex_voronoi.glsl\n  shaders/material/gpu_shader_material_tex_wave.glsl\n  shaders/material/gpu_shader_material_tex_white_noise.glsl\n  shaders/material/gpu_shader_material_toon.glsl\n  shaders/material/gpu_shader_material_transform_utils.glsl\n  shaders/material/gpu_shader_material_translucent.glsl\n  shaders/material/gpu_shader_material_transparent.glsl\n  shaders/material/gpu_shader_material_uv_map.glsl\n  shaders/material/gpu_shader_material_vector_displacement.glsl\n  shaders/material/gpu_shader_material_vector_math.glsl\n  shaders/material/gpu_shader_material_vector_rotate.glsl\n  shaders/material/gpu_shader_material_vertex_color.glsl\n  shaders/material/gpu_shader_material_volume_absorption.glsl\n  shaders/material/gpu_shader_material_volume_principled.glsl\n  shaders/material/gpu_shader_material_volume_scatter.glsl\n  shaders/material/gpu_shader_material_voronoi.glsl\n  shaders/material/gpu_shader_material_wireframe.glsl\n  shaders/material/gpu_shader_material_world_normals.glsl\n\n  shaders/gpu_shader_gpencil_stroke_vert.glsl\n  shaders/gpu_shader_gpencil_stroke_frag.glsl\n\n  shaders/gpu_shader_display_fallback_vert.glsl\n  shaders/gpu_shader_display_fallback_frag.glsl\n\n  shaders/gpu_shader_cfg_world_clip_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Unity Build Option\nDESCRIPTION: This snippet conditionally defines the WITH_UNITY_BUILD option based on the CMake version. It enables unity builds (compiling multiple source files into a single compilation unit) for modules to potentially improve compile times. A warning is issued about potential header issues when enabling this option.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.16\" AND NOT ${CMAKE_VERSION} VERSION_EQUAL \"3.28.2\")\n  option(WITH_UNITY_BUILD \"\\\nEnable unity build for modules that support it to improve compile times.\\n\\\nWARNING: this option allows files to be built without all necessary headers!\\nThis option should be disabled before manipulating or removing headers.\" \n    ON\n  )\n  mark_as_advanced(WITH_UNITY_BUILD)\nelse()\n  set(WITH_UNITY_BUILD OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for OpenImageDenoise (CMake)\nDESCRIPTION: This snippet conditionally adds a preprocessor definition if OpenImageDenoise is enabled.  The `-DWITH_OPENIMAGEDENOISE` flag is passed to the compiler to enable OpenImageDenoise features within the code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Wheel Position (KX_VehicleWrapper)\nDESCRIPTION: This method retrieves the position of a specific wheel on the vehicle. It requires the wheel index as input and returns a list containing the x, y, and z coordinates of the wheel's position in world space.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getWheelPosition(wheelIndex)\n\n      Returns the position of the specified wheel\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n      :return: position vector\n      :rtype: list[x, y, z]\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet defines the source files (both .cc and .hh) that make up the core GPU module. These files implement various GPU functionalities, including batch processing, capabilities, compute shaders, context management, debugging, framebuffers, immediate mode rendering, index buffers, initialization, materials, matrices, node graphs, platform abstraction, queries, selection, shaders, state management, storage buffers, textures, uniform buffers, and vertex buffers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/gpu_batch.cc\n  intern/gpu_batch_presets.cc\n  intern/gpu_batch_utils.cc\n  intern/gpu_capabilities.cc\n  intern/gpu_codegen.cc\n  intern/gpu_compute.cc\n  intern/gpu_context.cc\n  intern/gpu_debug.cc\n  intern/gpu_framebuffer.cc\n  intern/gpu_immediate.cc\n  intern/gpu_immediate_util.cc\n  intern/gpu_index_buffer.cc\n  intern/gpu_init_exit.cc\n  intern/gpu_material.cc\n  intern/gpu_matrix.cc\n  intern/gpu_node_graph.cc\n  intern/gpu_platform.cc\n  intern/gpu_query.cc\n  intern/gpu_select.cc\n  intern/gpu_select_next.cc\n  intern/gpu_select_pick.cc\n  intern/gpu_select_sample_query.cc\n  intern/gpu_shader.cc\n  intern/gpu_shader_builtin.cc\n  intern/gpu_shader_create_info.cc\n  intern/gpu_shader_dependency.cc\n  intern/gpu_shader_interface.cc\n  intern/gpu_shader_log.cc\n  intern/gpu_state.cc\n  intern/gpu_storage_buffer.cc\n  intern/gpu_texture.cc\n  intern/gpu_texture_pool.cc\n  intern/gpu_uniform_buffer.cc\n  intern/gpu_vertex_buffer.cc\n  intern/gpu_vertex_format.cc\n  intern/gpu_vertex_format_normals.cc\n  intern/gpu_viewport.cc\n  intern/gpu_worker.cc\n\n  GPU_attribute_convert.hh\n  GPU_batch.hh\n  GPU_batch_presets.hh\n  GPU_batch_utils.hh\n  GPU_capabilities.hh\n  GPU_common.hh\n  GPU_common_types.hh\n  GPU_compilation_subprocess.hh\n  GPU_compute.hh\n  GPU_context.hh\n  GPU_debug.hh\n  GPU_framebuffer.hh\n  GPU_immediate.hh\n  GPU_immediate_util.hh\n  GPU_index_buffer.hh\n  GPU_init_exit.hh\n  GPU_material.hh\n  GPU_matrix.hh\n  GPU_platform.hh\n  GPU_platform_backend_enum.h\n  GPU_primitive.hh\n  GPU_select.hh\n  GPU_shader.hh\n  GPU_shader_builtin.hh\n  GPU_shader_shared.hh\n  GPU_state.hh\n  GPU_storage_buffer.hh\n  GPU_texture.hh\n  GPU_texture_pool.hh\n  GPU_uniform_buffer.hh\n  GPU_vertex_buffer.hh\n  GPU_vertex_format.hh\n  GPU_viewport.hh\n  GPU_worker.hh\n\n  intern/gpu_backend.hh\n  intern/gpu_capabilities_private.hh\n  intern/gpu_codegen.hh\n  intern/gpu_context_private.hh\n  intern/gpu_debug_private.hh\n  intern/gpu_framebuffer_private.hh\n  intern/gpu_immediate_private.hh\n  intern/gpu_material_library.hh\n  intern/gpu_matrix_private.hh\n  intern/gpu_node_graph.hh\n  intern/gpu_platform_private.hh\n  intern/gpu_private.hh\n  intern/gpu_profile_report.hh\n  intern/gpu_query.hh\n  intern/gpu_select_private.hh\n  intern/gpu_shader_create_info.hh\n  intern/gpu_shader_create_info_list.hh\n  intern/gpu_shader_create_info_private.hh\n  intern/gpu_shader_dependency_private.hh\n  intern/gpu_shader_interface.hh\n  intern/gpu_shader_private.hh\n  intern/gpu_state_private.hh\n  intern/gpu_storage_buffer_private.hh\n  intern/gpu_texture_private.hh\n  intern/gpu_uniform_buffer_private.hh\n  intern/gpu_vertex_format_private.hh\n\n  dummy/dummy_backend.hh\n  dummy/dummy_batch.hh\n  dummy/dummy_context.hh\n  dummy/dummy_framebuffer.hh\n  dummy/dummy_vertex_buffer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Minimum Python Version - CMake\nDESCRIPTION: This snippet enforces a minimum Python version requirement (3.11). It checks if PYTHON_VERSION is defined and if it's less than 3.11, it issues a FATAL_ERROR. This ensures that the build process uses a compatible Python version.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_91\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  # While we have this as an '#error' in 'bpy_capi_utils.hh',\n  # upgrading Python tends to cause confusion for users who build.\n  # Give the error message early to make this more obvious.\n  #\n  # Do this before main 'platform_*' checks,\n  # because UNIX will search for the old Python paths which may not exist.\n  # giving errors about missing paths before this case is met.\n  if(DEFINED PYTHON_VERSION AND \"${PYTHON_VERSION}\" VERSION_LESS \"3.11\")\n    message(\n      FATAL_ERROR\n      \"At least Python 3.11 is required to build, but found Python ${PYTHON_VERSION}\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set System Include Directories\nDESCRIPTION: This snippet defines system include directories. In this case, it specifies the location of the `fast_float` library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Shader Sources for Eevee\nDESCRIPTION: This section defines a variable `GLSL_SRC` which contains a list of GLSL shader source files. These shaders are part of the Eevee rendering engine, covering a wide range of functionalities, including ambient occlusion, attributes, BRDF (Bidirectional Reflectance Distribution Function) calculations, camera effects, closures, color space conversions, cryptomatte, debugging, deferred rendering, depth of field, film effects, filtering, G-buffer handling, geometry transformations, horizon-based ambient occlusion (HIZ), light culling, light evaluation, light probes, LookDev display, LUT (Look-Up Table) operations, motion blur, node trees, occupancy maps, ray tracing, render passes, shadow mapping, spherical harmonics, subsurface scattering, and surface shading. The `set` command suggests this list will be used in a CMake build script to compile or process these shader files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_SRC\n  engines/eevee/shaders/eevee_ambient_occlusion_lib.glsl\n  engines/eevee/shaders/eevee_ambient_occlusion_pass_comp.glsl\n  engines/eevee/shaders/eevee_attributes_curves_lib.glsl\n  engines/eevee/shaders/eevee_attributes_gpencil_lib.glsl\n  engines/eevee/shaders/eevee_attributes_mesh_lib.glsl\n  engines/eevee/shaders/eevee_attributes_pointcloud_lib.glsl\n  engines/eevee/shaders/eevee_attributes_volume_lib.glsl\n  engines/eevee/shaders/eevee_attributes_world_lib.glsl\n  engines/eevee/shaders/eevee_bxdf_lib.glsl\n  engines/eevee/shaders/eevee_bxdf_microfacet_lib.glsl\n  engines/eevee/shaders/eevee_bxdf_diffuse_lib.glsl\n  engines/eevee/shaders/eevee_bxdf_sampling_lib.glsl\n  engines/eevee/shaders/eevee_camera_lib.glsl\n  engines/eevee/shaders/eevee_closure_lib.glsl\n  engines/eevee/shaders/eevee_colorspace_lib.glsl\n  engines/eevee/shaders/eevee_cryptomatte_lib.glsl\n  engines/eevee/shaders/eevee_debug_gbuffer_frag.glsl\n  engines/eevee/shaders/eevee_debug_surfels_vert.glsl\n  engines/eevee/shaders/eevee_debug_surfels_frag.glsl\n  engines/eevee/shaders/eevee_debug_irradiance_grid_vert.glsl\n  engines/eevee/shaders/eevee_debug_irradiance_grid_frag.glsl\n  engines/eevee/shaders/eevee_deferred_capture_frag.glsl\n  engines/eevee/shaders/eevee_deferred_combine_frag.glsl\n  engines/eevee/shaders/eevee_deferred_thickness_amend_frag.glsl\n  engines/eevee/shaders/eevee_deferred_light_frag.glsl\n  engines/eevee/shaders/eevee_deferred_planar_frag.glsl\n  engines/eevee/shaders/eevee_deferred_tile_classify_frag.glsl\n  engines/eevee/shaders/eevee_depth_of_field_accumulator_lib.glsl\n  engines/eevee/shaders/eevee_depth_of_field_bokeh_lut_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_downsample_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_filter_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_gather_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_hole_fill_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_lib.glsl\n  engines/eevee/shaders/eevee_depth_of_field_reduce_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_resolve_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_scatter_frag.glsl\n  engines/eevee/shaders/eevee_depth_of_field_scatter_vert.glsl\n  engines/eevee/shaders/eevee_depth_of_field_setup_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_stabilize_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_tiles_dilate_comp.glsl\n  engines/eevee/shaders/eevee_depth_of_field_tiles_flatten_comp.glsl\n  engines/eevee/shaders/eevee_display_lightprobe_volume_frag.glsl\n  engines/eevee/shaders/eevee_display_lightprobe_volume_vert.glsl\n  engines/eevee/shaders/eevee_display_lightprobe_planar_frag.glsl\n  engines/eevee/shaders/eevee_display_lightprobe_planar_vert.glsl\n  engines/eevee/shaders/eevee_display_lightprobe_sphere_frag.glsl\n  engines/eevee/shaders/eevee_display_lightprobe_sphere_vert.glsl\n  engines/eevee/shaders/eevee_film_copy_frag.glsl\n  engines/eevee/shaders/eevee_film_comp.glsl\n  engines/eevee/shaders/eevee_film_cryptomatte_post_comp.glsl\n  engines/eevee/shaders/eevee_film_frag.glsl\n  engines/eevee/shaders/eevee_film_lib.glsl\n  engines/eevee/shaders/eevee_film_pass_convert_comp.glsl\n  engines/eevee/shaders/eevee_filter_lib.glsl\n  engines/eevee/shaders/eevee_forward_lib.glsl\n  engines/eevee/shaders/eevee_gbuffer_lib.glsl\n  engines/eevee/shaders/eevee_gbuffer_closure_test.glsl\n  engines/eevee/shaders/eevee_gbuffer_normal_test.glsl\n  engines/eevee/shaders/eevee_geom_curves_vert.glsl\n  engines/eevee/shaders/eevee_geom_gpencil_vert.glsl\n  engines/eevee/shaders/eevee_geom_mesh_vert.glsl\n  engines/eevee/shaders/eevee_geom_pointcloud_vert.glsl\n  engines/eevee/shaders/eevee_geom_volume_vert.glsl\n  engines/eevee/shaders/eevee_geom_world_vert.glsl\n  engines/eevee/shaders/eevee_hiz_debug_frag.glsl\n  engines/eevee/shaders/eevee_hiz_update_comp.glsl\n  engines/eevee/shaders/eevee_horizon_denoise_comp.glsl\n  engines/eevee/shaders/eevee_horizon_resolve_comp.glsl\n  engines/eevee/shaders/eevee_horizon_scan_eval_lib.glsl\n  engines/eevee/shaders/eevee_horizon_scan_comp.glsl\n  engines/eevee/shaders/eevee_horizon_scan_lib.glsl\n  engines/eevee/shaders/eevee_horizon_scan_test.glsl\n  engines/eevee/shaders/eevee_horizon_setup_comp.glsl\n  engines/eevee/shaders/eevee_light_culling_debug_frag.glsl\n  engines/eevee/shaders/eevee_light_culling_select_comp.glsl\n  engines/eevee/shaders/eevee_light_culling_sort_comp.glsl\n  engines/eevee/shaders/eevee_light_culling_tile_comp.glsl\n  engines/eevee/shaders/eevee_light_culling_zbin_comp.glsl\n  engines/eevee/shaders/eevee_light_shadow_setup_comp.glsl\n  engines/eevee/shaders/eevee_light_eval_lib.glsl\n  engines/eevee/shaders/eevee_light_iter_lib.glsl\n  engines/eevee/shaders/eevee_light_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_eval_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_volume_bounds_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_volume_ray_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_volume_offset_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_volume_load_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_volume_world_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_volume_eval_lib.glsl\n  engines/eevee/shaders/eevee_lookdev_display_frag.glsl\n  engines/eevee/shaders/eevee_lookdev_display_vert.glsl\n  engines/eevee/shaders/eevee_ltc_lib.glsl\n  engines/eevee/shaders/eevee_lut_comp.glsl\n  engines/eevee/shaders/eevee_motion_blur_dilate_comp.glsl\n  engines/eevee/shaders/eevee_motion_blur_flatten_comp.glsl\n  engines/eevee/shaders/eevee_motion_blur_gather_comp.glsl\n  engines/eevee/shaders/eevee_motion_blur_lib.glsl\n  engines/eevee/shaders/eevee_nodetree_lib.glsl\n  engines/eevee/shaders/eevee_occupancy_convert_frag.glsl\n  engines/eevee/shaders/eevee_occupancy_lib.glsl\n  engines/eevee/shaders/eevee_occupancy_test.glsl\n  engines/eevee/shaders/eevee_octahedron_lib.glsl\n  engines/eevee/shaders/eevee_ray_denoise_bilateral_comp.glsl\n  engines/eevee/shaders/eevee_ray_denoise_spatial_comp.glsl\n  engines/eevee/shaders/eevee_ray_denoise_temporal_comp.glsl\n  engines/eevee/shaders/eevee_ray_generate_comp.glsl\n  engines/eevee/shaders/eevee_ray_generate_lib.glsl\n  engines/eevee/shaders/eevee_ray_tile_classify_comp.glsl\n  engines/eevee/shaders/eevee_ray_tile_compact_comp.glsl\n  engines/eevee/shaders/eevee_ray_trace_fallback_comp.glsl\n  engines/eevee/shaders/eevee_ray_trace_planar_comp.glsl\n  engines/eevee/shaders/eevee_ray_trace_screen_comp.glsl\n  engines/eevee/shaders/eevee_ray_trace_screen_lib.glsl\n  engines/eevee/shaders/eevee_ray_types_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_convolve_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_eval_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_irradiance_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_mapping_lib.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_remap_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_select_comp.glsl\n  engines/eevee/shaders/eevee_lightprobe_sphere_sunlight_comp.glsl\n  engines/eevee/shaders/eevee_renderpass_clear_frag.glsl\n  engines/eevee/shaders/eevee_renderpass_lib.glsl\n  engines/eevee/shaders/eevee_sampling_lib.glsl\n  engines/eevee/shaders/eevee_shadow_debug_frag.glsl\n  engines/eevee/shaders/eevee_shadow_lib.glsl\n  engines/eevee/shaders/eevee_shadow_tracing_lib.glsl\n  engines/eevee/shaders/eevee_shadow_clipmap_clear_comp.glsl\n  engines/eevee/shaders/eevee_shadow_page_allocate_comp.glsl\n  engines/eevee/shaders/eevee_shadow_page_clear_comp.glsl\n  engines/eevee/shaders/eevee_shadow_page_defrag_comp.glsl\n  engines/eevee/shaders/eevee_shadow_page_free_comp.glsl\n  engines/eevee/shaders/eevee_shadow_page_mask_comp.glsl\n  engines/eevee/shaders/eevee_shadow_page_ops_lib.glsl\n  engines/eevee/shaders/eevee_shadow_tag_update_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tag_usage_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tag_usage_frag.glsl\n  engines/eevee/shaders/eevee_shadow_tag_usage_lib.glsl\n  engines/eevee/shaders/eevee_shadow_tag_usage_surfels_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tag_usage_vert.glsl\n  engines/eevee/shaders/eevee_shadow_tag_usage_volume_comp.glsl\n  engines/eevee/shaders/eevee_shadow_test.glsl\n  engines/eevee/shaders/eevee_shadow_tilemap_amend_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tilemap_bounds_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tilemap_finalize_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tilemap_init_comp.glsl\n  engines/eevee/shaders/eevee_shadow_tilemap_lib.glsl\n  engines/eevee/shaders/eevee_shadow_tilemap_rendermap_comp.glsl\n  engines/eevee/shaders/eevee_shadow_visibility_comp.glsl\n  engines/eevee/shaders/eevee_spherical_harmonics_lib.glsl\n  engines/eevee/shaders/eevee_subsurface_convolve_comp.glsl\n  engines/eevee/shaders/eevee_subsurface_lib.glsl\n  engines/eevee/shaders/eevee_subsurface_setup_comp.glsl\n  engines/eevee/shaders/eevee_surf_capture_frag.glsl\n  engines/eevee/shaders/eevee_surf_deferred_frag.glsl\n  engines/eevee/shaders/eevee_surf_depth_frag.glsl\n  engines/eevee/shaders/eevee_surf_forward_frag.glsl\n  engines/eevee/shaders/eevee_surf_hybrid_frag.glsl\n  engines/eevee/shaders/eevee_surf_lib.glsl\n  engines/eevee/shaders/eevee_surf_occupancy_frag.glsl\n  engines/eevee/shaders/eevee_surf_shadow_frag.glsl\n  engines/eevee/shaders/eevee_surf_volume_frag.glsl\n  engines/eevee/shaders/eevee_shadow_page_tile_vert.glsl\n  engines/eevee/shaders/eevee_shadow_page_tile_frag.glsl\n  engines/eevee/shaders/eevee_surf_world_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Efficient List Reversal: Using Slice Method (Python)\nDESCRIPTION: Shows a more efficient way to reverse a list using slicing.  Creates a reversed copy of some_list.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsome_reversed_list = some_list[::-1]\n```\n\n----------------------------------------\n\nTITLE: Checking Mutually Exclusive Options - CMake\nDESCRIPTION: These code blocks ensure that certain build options are not enabled simultaneously. For example, WITH_PYTHON_MODULE cannot be enabled if WITH_PLAYER or WITH_PYTHON_INSTALL are enabled. This is necessary because some combinations of options are incompatible or lead to conflicts during the build or runtime.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_84\n\nLANGUAGE: CMake\nCODE:\n```\n# python module, needs some different options\nif(WITH_PYTHON_MODULE AND WITH_PLAYER)\n\tmessage(FATAL_ERROR \"WITH_PYTHON_MODULE requires WITH_PLAYER to be OFF\")\nendif()\n\nif(WITH_PYTHON_MODULE AND WITH_PYTHON_INSTALL)\n  message(FATAL_ERROR \"WITH_PYTHON_MODULE requires WITH_PYTHON_INSTALL to be OFF\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Definitions - CMake\nDESCRIPTION: This snippet adds conditional definitions based on the status of various build options (e.g., WITH_BUILDINFO, WITH_CODEC_FFMPEG, WITH_ALEMBIC, WITH_GAMEENGINE_BPPLAYER, WIN32, WITH_EXPERIMENTAL_FEATURES). These definitions enable or disable certain features or behaviors in the code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenloader/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WITH_ALEMBIC)\n  list(APPEND INC\n    ../io/alembic\n  )\n  add_definitions(-DWITH_ALEMBIC)\nendif()\n\nif(WITH_GAMEENGINE_BPPLAYER)\n  list(APPEND INC\n    ../../../intern/spindle\n  )\n\n  list(APPEND LIB\n    bf_intern_spindle\n  )\n\n  add_definitions(-DWITH_GAMEENGINE_BPPLAYER)\nendif()\n\n\nif(WIN32)\n  add_definitions(-DNOMINMAX)\nendif()\n\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_EXPERIMENTAL_FEATURES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding STL Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_IO_STL` option is enabled. If so, it adds the 'stl' subdirectory to the build process. This makes sure that the STL importer/exporter is included during the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_STL)\n  add_subdirectory(stl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Mouse Button Events (BGE)\nDESCRIPTION: This code snippet illustrates how to handle different states of a mouse button (left mouse button in this case) using the SCA_InputEvent class. It checks for activated, active, released, and inactive states to trigger corresponding actions.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_InputEvent.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\nmouse = bge.logic.mouse.inputs\nmouse_left_button = mouse[bge.events.LEFTMOUSE]\n\nif mouse_left_button.activated:\n   # ...\nelif mouse_left_button.active:\n   # ...\nelif mouse_left_button.released:\n   # ...\nelif mouse_left_button.inactive:\n   # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Tyre Friction (KX_VehicleWrapper)\nDESCRIPTION: This method sets the tyre friction for a specified wheel. It requires the friction value as a float and the wheel index as an integer.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setTyreFriction(friction, wheelIndex)\n\n      Set the specified wheel's tyre friction\n\n      :arg friction: the tyre friction\n      :type friction: float\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (RenderDoc)\nDESCRIPTION: Conditionally adds the 'renderdoc_dynload' subdirectory if the WITH_RENDERDOC flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_RENDERDOC)\n  add_subdirectory(renderdoc_dynload)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Declares the dependencies for the Eigen library. It specifies that the library depends on the Eigen component from Blender's dependencies, managed by the bf::dependencies::eigen namespace. This ensures the Eigen library is built correctly and linked against the necessary components.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/eigen/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenXR Source Files, Includes, and Libraries (CMake)\nDESCRIPTION: Conditionally adds source files, include directories, and libraries required for OpenXR support based on the `WITH_XR_OPENXR` flag. It appends various `GHOST_Xr*.cc` and `GHOST_Xr*.hh` files, include directories for JSON and TinyGLTF, and the OpenXR SDK include directory to their respective lists.  It then proceeds to add platform-specific definitions, libraries, and source files (specifically for the D3D and Vulkan graphics bindings).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  list(APPEND SRC\n    intern/GHOST_Xr.cc\n    intern/GHOST_XrAction.cc\n    intern/GHOST_XrContext.cc\n    intern/GHOST_XrControllerModel.cc\n    intern/GHOST_XrEvent.cc\n    intern/GHOST_XrGraphicsBinding.cc\n    intern/GHOST_XrSession.cc\n    intern/GHOST_XrSwapchain.cc\n\n    GHOST_IXrContext.hh\n    intern/GHOST_IXrGraphicsBinding.hh\n    intern/GHOST_XrAction.hh\n    intern/GHOST_XrContext.hh\n    intern/GHOST_XrControllerModel.hh\n    intern/GHOST_XrException.hh\n    intern/GHOST_XrSession.hh\n    intern/GHOST_XrSwapchain.hh\n    intern/GHOST_Xr_intern.hh\n    intern/GHOST_Xr_openxr_includes.hh\n\n    # Header only library.\n    ../../extern/tinygltf/tiny_gltf.h\n  )\n  if(WIN32)\n    list(APPEND SRC\n      intern/GHOST_XrGraphicsBindingD3D.cc\n\n      intern/GHOST_XrGraphicsBindingD3D.hh\n    )\n  endif()\n\n  list(APPEND INC_SYS\n    ../../extern/json/include\n    ../../extern/tinygltf\n  )\n  list(APPEND INC_SYS\n    ${XR_OPENXR_SDK_INCLUDE_DIR}\n  )\n  list(APPEND LIB\n    ${XR_OPENXR_SDK_LIBRARIES}\n    PRIVATE bf::dependencies::eigen\n  )\n\n  set(XR_PLATFORM_DEFINES\n  )\n  if(WITH_OPENGL_BACKEND)\n    list(APPEND XR_PLATFORM_DEFINES -DXR_USE_GRAPHICS_API_OPENGL)\n  endif()\n  if(WITH_VULKAN_BACKEND)\n    list(APPEND XR_PLATFORM_DEFINES -DXR_USE_GRAPHICS_API_VULKAN)\n    list(APPEND SRC\n      intern/GHOST_XrGraphicsBindingVulkan.cc\n\n      intern/GHOST_XrGraphicsBindingVulkan.hh\n    )\n  endif()\n\n  # Add compiler defines as required by the OpenXR specification.\n  if(WIN32)\n    list(APPEND XR_PLATFORM_DEFINES\n      -DXR_USE_PLATFORM_WIN32\n      -DXR_USE_GRAPHICS_API_D3D11\n    )\n    list(APPEND LIB\n      shlwapi\n    )\n  elseif(UNIX AND NOT APPLE)\n    list(APPEND XR_PLATFORM_DEFINES -DXR_OS_LINUX)\n    if(WITH_GHOST_WAYLAND)\n      list(APPEND XR_PLATFORM_DEFINES -DXR_USE_PLATFORM_WAYLAND)\n    endif()\n    if(WITH_GHOST_X11)\n      list(APPEND XR_PLATFORM_DEFINES -DXR_USE_PLATFORM_EGL)\n      list(APPEND XR_PLATFORM_DEFINES -DXR_USE_PLATFORM_XLIB)\n    endif()\n  endif()\n\n  add_definitions(-DWITH_XR_OPENXR ${XR_PLATFORM_DEFINES})\n\n  unset(XR_PLATFORM_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring FFTW support\nDESCRIPTION: This snippet handles the configuration of FFTW support for AudaSpace. It attempts to find the FFTW library using `find_package`. If found, it sets the source and header files related to FFTW functionality. It appends the FFTW include directory and library to the global lists and adds a preprocessor definition `-DWITH_CONVOLUTION`. If FFTW is not found, it disables FFTW support and issues a warning.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# FFTW\nif(WITH_FFTW)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(FFTW ${PACKAGE_OPTION})\n\tendif()\n\n\tif(FFTW_FOUND)\n\t\tset(FFTW_SRC\n\t\t\tsrc/fx/BinauralSound.cpp\n\t\t\tsrc/fx/BinauralReader.cpp\n\t\t\tsrc/fx/Convolver.cpp\n\t\t\tsrc/fx/ConvolverReader.cpp\n\t\t\tsrc/fx/ConvolverSound.cpp\n\t\t\tsrc/fx/Equalizer.cpp\n\t\t\tsrc/fx/FFTConvolver.cpp\n\t\t\tsrc/fx/HRTF.cpp\n\t\t\tsrc/fx/ImpulseResponse.cpp\n\t\t\tsrc/util/FFTPlan.cpp\n\t\t)\n\tset(FFTW_HDR\n\t\t\tinclude/fx/BinauralSound.h\n\t\t\tinclude/fx/BinauralReader.h\n\t\t\tinclude/fx/Convolver.h\n\t\t\tinclude/fx/ConvolverReader.h\n\t\t\tinclude/fx/ConvolverSound.h\n\t\t\tinclude/fx/Equalizer.h\n\t\t\tinclude/fx/FFTConvolver.h\n\t\t\tinclude/fx/HRTF.h\n\t\t\tinclude/fx/HRTFLoader.h\n\t\t\tinclude/fx/ImpulseResponse.h\n\t\t\tinclude/util/FFTPlan.h\n\t\t)\n\n\t\tadd_definitions(-DWITH_CONVOLUTION)\n\n\t\tlist(APPEND INCLUDE ${FFTW_INCLUDE_DIR})\n\t\tlist(APPEND LIBRARIES ${FFTW_LIBRARY})\n\n\t\tlist(APPEND SRC ${FFTW_SRC})\n\t\tlist(APPEND HDR ${FFTW_HDR})\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB FFTW_DLLS ${LIBRARY_PATH}/fftw/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${FFTW_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_FFTW FALSE CACHE BOOL \"Build With FFTW\" FORCE)\n\t\telse()\n\t\t\tset(WITH_FFTW FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"FFTW not found, convolution functionality will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet lists the source files that comprise the device library.  These files include C++ implementations and header files related to event consumption, input devices, joysticks, and related events and definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  DEV_EventConsumer.cpp\n  DEV_InputDevice.cpp\n  DEV_Joystick.cpp\n  DEV_JoystickEvents.cpp\n  DEV_JoystickVibration.cpp\n\n  DEV_EventConsumer.h\n  DEV_InputDevice.h\n  DEV_Joystick.h\n  DEV_JoystickDefines.h\n  DEV_JoystickPrivate.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the STL I/O Library\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_lib` to create the STL I/O library (`bf_io_stl`). It passes the source files, include directories, system include directories, and libraries to link against. This function handles the actual compilation and linking process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_stl \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Shared Manifest Files on Windows - CMake\nDESCRIPTION: This CMake snippet utilizes a custom function `windows_install_shared_manifest` to install various DLL files along with their corresponding manifest files. It includes libraries such as `epoxy`, `vulkan`, `fftw3`, `OpenEXR`, `OpenImageIO`, `GMP`, `OpenVDB` and `MaterialX`. The function is called for different configurations such as `RELEASE` and `DEBUG` and installs the appropriate DLLs. It makes use of the variables `LIBDIR` to locate the necessary files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\n  windows_install_shared_manifest(\n    FILES ${LIBDIR}/epoxy/bin/epoxy-0.dll\n    ALL\n  )\n\n  if(WITH_VULKAN_BACKEND)\n    windows_install_shared_manifest(\n      FILES ${LIBDIR}/vulkan/bin/vulkan-1.dll\n      ALL\n    )\n  endif()\n\n  # 4.1 FFTW libs need to be installed, in 4.2 FFTW got turned into a static lib\n  # and the files below no longer exist.\n  if(EXISTS ${LIBDIR}/fftw3/lib/fftw3.dll)\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/fftw3/lib/fftw3.dll\n        ${LIBDIR}/fftw3/lib/fftw3f.dll\n      ALL\n    )\n  endif()\n  if(MSVC_ASAN)\n    # The ASAN DLL's can be found in the same directory as the compiler,\n    # this is the easiest way to find these.\n    string(\n      REPLACE \"cl.exe\" \"clang_rt.asan_dynamic-x86_64.dll\"\n      ASAN_DLL ${CMAKE_C_COMPILER})\n    string(\n      REPLACE \"cl.exe\" \"clang_rt.asan_dbg_dynamic-x86_64.dll\"\n      ASAN_DEBUG_DLL ${CMAKE_C_COMPILER}\n    )\n    if(NOT EXISTS \"${ASAN_DLL}\")\n      message(\n        FATAL_ERROR\n        \"ASAN is enabled, but the ASAN runtime is not detected, \"\n        \"this is an optional component during the MSVC install, please install it\"\n      )\n    endif()\n    windows_install_shared_manifest(\n      FILES ${ASAN_DLL}\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES ${ASAN_DEBUG_DLL}\n      DEBUG\n    )\n    unset(ASAN_DLL)\n    unset(ASAN_DEBUG_DLL)\n  endif()\n  if(EXISTS ${LIBDIR}/openexr/bin/Iex.dll)\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/openexr/bin/Iex.dll\n        ${LIBDIR}/openexr/bin/IlmThread.dll\n        ${LIBDIR}/openexr/bin/OpenEXRCore.dll\n        ${LIBDIR}/openexr/bin/OpenEXRUtil.dll\n        ${LIBDIR}/openexr/bin/OpenEXR.dll\n        ${LIBDIR}/imath/bin/imath.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/openexr/bin/Iex_d.dll\n        ${LIBDIR}/openexr/bin/IlmThread_d.dll\n        ${LIBDIR}/openexr/bin/OpenEXRCore_d.dll\n        ${LIBDIR}/openexr/bin/OpenEXRUtil_d.dll\n        ${LIBDIR}/openexr/bin/OpenEXR_d.dll\n        ${LIBDIR}/imath/bin/imath_d.dll\n      DEBUG\n    )\n  endif()\n  if(EXISTS ${LIBDIR}/openimageio/bin/openimageio.dll)\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/openimageio/bin/openimageio.dll\n        ${LIBDIR}/openimageio/bin/openimageio_util.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/openimageio/bin/openimageio_d.dll\n        ${LIBDIR}/openimageio/bin/openimageio_util_d.dll\n      DEBUG\n    )\n  endif()\n\n  if(EXISTS ${LIBDIR}/gmp/lib/gmp-10.dll)\n    set(GMP_DLL ${LIBDIR}/gmp/lib/gmp-10.dll)\n  else()\n    set(GMP_DLL ${LIBDIR}/gmp/lib/libgmp-10.dll)\n  endif()\n\n  windows_install_shared_manifest(\n    FILES ${GMP_DLL}\n    ALL\n  )\n  unset(GMP_DLL)\n\n  windows_install_shared_manifest(\n    FILES ${LIBDIR}/gmp/lib/libgmpxx.dll\n    RELEASE\n  )\n  windows_install_shared_manifest(\n    FILES ${LIBDIR}/gmp/lib/libgmpxx_d.dll\n    DEBUG\n  )\n\n  if(WITH_WINDOWS_RELEASE_PDB)\n    # Skip install of stripped PDB if compiling with clang since there doesn't seem\n    # to be a PDB-stripped version for `clang-cl`.\n    if(WITH_WINDOWS_RELEASE_STRIPPED_PDB AND NOT MSVC_CLANG)\n      # Icky hack for older CMAKE from https://stackoverflow.com/a/21198501\n      # `$<$<CONFIG>>` will work in newer CMAKE but the version currently (3.12)\n      # on the build-bot does not support this endeavor.\n      install(\n        FILES ${CMAKE_CURRENT_BINARY_DIR}/\\${CMAKE_INSTALL_CONFIG_NAME}/blender_public.pdb\n        DESTINATION \".\"\n        RENAME blender.pdb\n        CONFIGURATIONS Release\n      )\n    else()\n      install(\n        FILES $<TARGET_PDB_FILE:blender>\n        DESTINATION \".\"\n        RENAME blender.pdb\n        CONFIGURATIONS Release\n      )\n    endif()\n  endif()\n\n  windows_install_shared_manifest(\n    FILES ${LIBDIR}/openvdb/bin/openvdb.dll\n    RELEASE\n  )\n  windows_install_shared_manifest(\n    FILES ${LIBDIR}/openvdb/bin/openvdb_d.dll\n    DEBUG\n  )\n\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/materialx/bin/MaterialXCore.dll\n      ${LIBDIR}/materialx/bin/MaterialXFormat.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenGlsl.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenMdl.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenOsl.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenShader.dll\n    RELEASE\n  )\n  if(EXISTS ${LIBDIR}/materialx/bin/MaterialXRender.dll) # 3.6+\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/materialx/bin/MaterialXRender.dll\n        ${LIBDIR}/materialx/bin/MaterialXRenderGlsl.dll\n        ${LIBDIR}/materialx/bin/MaterialXRenderHw.dll\n        ${LIBDIR}/materialx/bin/MaterialXRenderOsl.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/materialx/bin/MaterialXRender_d.dll\n        ${LIBDIR}/materialx/bin/MaterialXRenderGlsl_d.dll\n        ${LIBDIR}/materialx/bin/MaterialXRenderHw_d.dll\n        ${LIBDIR}/materialx/bin/MaterialXRenderOsl_d.dll\n      DEBUG\n    )\n  endif()\n  if(EXISTS ${LIBDIR}/materialx/bin/MaterialXGenMsl.dll) # 4.1+\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/materialx/bin/MaterialXGenMsl.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/materialx/bin/MaterialXGenMsl_d.dll\n      DEBUG\n    )\n  endif()\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/materialx/bin/MaterialXCore_d.dll\n      ${LIBDIR}/materialx/bin/MaterialXFormat_d.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenGlsl_d.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenMdl_d.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenOsl.dll\n      ${LIBDIR}/materialx/bin/MaterialXGenShader_d.dll\n    DEBUG\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Selected Editable Bones in Edit Mode (Python)\nDESCRIPTION: This snippet shows how to access the currently selected editable bones.  This operation is only valid in Edit-Mode. Outside of Edit-Mode, this will likely return an empty set.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmybones = bpy.context.selected_editable_bones\n```\n\n----------------------------------------\n\nTITLE: GHOST X11 and Wayland Options\nDESCRIPTION: This snippet conditionally defines the WITH_GHOST_X11 and WITH_GHOST_WAYLAND options for enabling X11 and Wayland windowing, respectively, on Unix systems (excluding macOS and Haiku). It also includes options for LibDecor and dynamic loading for Wayland. Application ID can be set as well for wayland.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT (APPLE OR HAIKU))\n  option(WITH_GHOST_X11 \"Enable building Blender against X11 for windowing\" ON)\n  mark_as_advanced(WITH_GHOST_X11)\n\n  option(WITH_GHOST_WAYLAND \"Enable building Blender against Wayland for windowing\" ON)\n  mark_as_advanced(WITH_GHOST_WAYLAND)\n\n  if(WITH_GHOST_WAYLAND)\n    option(WITH_GHOST_WAYLAND_LIBDECOR \"Optionally build with LibDecor window decorations\" ON)\n    mark_as_advanced(WITH_GHOST_WAYLAND_LIBDECOR)\n\n    option(WITH_GHOST_WAYLAND_DYNLOAD \"Enable runtime dynamic WAYLAND libraries loading\" ON)\n    mark_as_advanced(WITH_GHOST_WAYLAND_DYNLOAD)\n\n    set(WITH_GHOST_WAYLAND_APP_ID \"\" CACHE STRING \"\\\nThe application ID used for Blender (use default when an empty string), \\\nthis can be used to differentiate Blender instances by version or branch for example.\" \n    )\n    mark_as_advanced(WITH_GHOST_WAYLAND_APP_ID)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Parsing Float/Double from String\nDESCRIPTION: Parses a character sequence into a float or double value using the `fast_float::from_chars` function. This function is locale-independent and expects a format equivalent to the C++17 `from_chars` function. It uses round-to-even for values between two representable floating-point numbers.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nfrom_chars_result from_chars(const char* first, const char* last, float& value, ...);\nfrom_chars_result from_chars(const char* first, const char* last, double& value, ...);\n```\n\n----------------------------------------\n\nTITLE: Set Vertex Shader Sources - CMake\nDESCRIPTION: This snippet defines the list of vertex shader source files (SRC_GLSL_VERT) used by the Eevee rendering engine. Each file listed here represents a specific vertex shader implementation for different features and rendering passes.  The shaders are written in GLSL.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_VERT\n  eevee_debug_irradiance_grid_vert.glsl\n  eevee_debug_surfels_vert.glsl\n  eevee_depth_of_field_scatter_vert.glsl\n  eevee_display_lightprobe_planar_vert.glsl\n  eevee_display_lightprobe_sphere_vert.glsl\n  eevee_display_lightprobe_volume_vert.glsl\n  eevee_geom_curves_vert.glsl\n  # eevee_geom_gpencil_vert.glsl # Not yet supported\n  eevee_geom_mesh_vert.glsl\n  eevee_geom_pointcloud_vert.glsl\n  eevee_geom_volume_vert.glsl\n  eevee_geom_world_vert.glsl\n  eevee_lookdev_display_vert.glsl\n  eevee_shadow_page_tile_vert.glsl\n  eevee_shadow_tag_usage_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Kernel OSL Library\nDESCRIPTION: This snippet uses the `cycles_add_library` function (likely a custom function defined elsewhere in the build system) to create the `cycles_kernel_osl` library. It takes the library name, linked libraries, source files, and header files as arguments, defining the target and compiling/linking the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ncycles_add_library(cycles_kernel_osl \"${LIB}\" ${SRC} ${HEADER_SRC})\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: This snippet sets the include directories required for compiling the Wavefront OBJ I/O module. It includes paths to the current directory, exporter/importer subdirectories, common Blender headers, BMesh, editor interfaces, and makesrna.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  exporter\n  importer\n  ../common\n  ../../bmesh/intern\n  ../../editors/include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Iterating over vertices in a mesh object\nDESCRIPTION: This code snippet demonstrates how to iterate over all vertices in a game object's mesh, accessing each vertex's properties. It retrieves the current controller and owner object, then loops through each mesh, material, and vertex to access and modify vertex data, specifically changing the vertex color to red.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_MeshProxy.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bge import logic\n\ncont = logic.getCurrentController()\nobject = cont.owner\n\nfor mesh in object.meshes:\n   for m_index in range(len(mesh.materials)):\n      for v_index in range(mesh.getVertexArrayLength(m_index)):\n         vertex = mesh.getVertex(m_index, v_index)\n         # Do something with vertex here...\n         # ... eg: color the vertex red.\n         vertex.color = [1.0, 0.0, 0.0, 1.0]\n```\n\n----------------------------------------\n\nTITLE: Audio/Video Format Support\nDESCRIPTION: This snippet defines options for enabling various audio/video codec support, including FFmpeg and libsndfile. These options control the inclusion of specific codec libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# Audio/Video format support\noption(WITH_CODEC_FFMPEG \"Enable FFMPeg Support (http://ffmpeg.org)\" ON)\noption(WITH_CODEC_SNDFILE \"Enable libsndfile Support (http://www.mega-nerd.com/libsndfile)\" ON)\n```\n\n----------------------------------------\n\nTITLE: DeckLink Class Definition\nDESCRIPTION: This class is used for video playback using DeckLink devices.  It takes card index and format as arguments. The class provides an attribute for setting the image source and another for the right image in stereo mode. It is used to send video frames to the DeckLink device for playback on HDMI or SDI interfaces.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. class:: DeckLink(cardIdx=0, format=\"\")\n\n   Certain DeckLink devices can be used to playback video: the host sends video frames regularly\n   for immediate or scheduled playback. The video feed is outputted on HDMI or SDI interfaces.\n   This class supports the immediate playback mode: it has a source attribute that is assigned\n   one of the source object in the bge.texture module. Refreshing the DeckLink object causes\n   the image source to be computed and sent to the DeckLink device for immediate transmission\n   on the output interfaces.  Keying is supported: it allows to composite the frame with an\n   input video feed that transits through the DeckLink card.\n\n   :arg cardIdx: Number of the card to be used for output (0=first card).\n      It should be noted that DeckLink devices are usually half duplex:\n      they can either be used for capture or playback but not both at the same time.\n   :type cardIdx: int\n   :arg format: String representing the display mode of the output feed.\n   :type format: str\n```\n\n----------------------------------------\n\nTITLE: Setting DNA Include Files - CMake\nDESCRIPTION: This snippet defines a CMake variable `SRC_DNA_INC` and populates it with a list of header files related to DNA (Data structure Nucleus Access) definitions. These headers are located in the `makesdna` subdirectory and are essential for defining the data structures used within Blender/UPBGE.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_DNA_INC\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_ID.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_ID_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_action_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_actuator_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_anim_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_armature_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_asset_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_boid_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_brush_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_brush_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_cachefile_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_camera_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_cloth_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_collection_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_color_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_constraint_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_controller_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_curve_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_curveprofile_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_curves_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_customdata_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_defs.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_documentation.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_dynamicpaint_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_effect_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_fileglobal_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_fluid_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_freestyle_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_genfile.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_gpencil_legacy_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_gpencil_modifier_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_gpu_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_grease_pencil_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_image_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_ipo_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_key_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_lattice_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_layer_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_light_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_lightprobe_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_lineart_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_linestyle_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_listBase.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_mask_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_material_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_mesh_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_meshdata_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_meta_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_modifier_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_movieclip_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_nla_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_node_tree_interface_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_node_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_object_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_object_fluidsim_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_object_force_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_object_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_outliner_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_packedFile_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_particle_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_pointcache_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_pointcloud_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_property_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_python_proxy_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_rigidbody_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_scene_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_scene_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_screen_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_sdna_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_sensor_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_sequence_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_session_uid_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_shader_fx_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_sound_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_space_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_speaker_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_text_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_texture_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_tracking_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_userdef_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_userdef_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_uuid_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_vec_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_vfont_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_view2d_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_view3d_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_view3d_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_viewer_path_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_volume_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_windowmanager_enums.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_windowmanager_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_workspace_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_world_types.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_xr_types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Box Frustum Culling Example (Python)\nDESCRIPTION: This code snippet illustrates how to use the `boxInsideFrustum` method of the `KX_Camera` class to check if a box is inside the camera's view frustum. It defines a list of eight corner points representing the box and then calls `boxInsideFrustum` with this list. The returned value is compared against `cam.OUTSIDE` to determine if the box is outside, inside, or intersects the frustum.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom bge import logic\ncont = logic.getCurrentController()\ncam = cont.owner\n\n# Box to test...\nbox = []\nbox.append([-1.0, -1.0, -1.0])\nbox.append([-1.0, -1.0,  1.0])\nbox.append([-1.0,  1.0, -1.0])\nbox.append([-1.0,  1.0,  1.0])\nbox.append([ 1.0, -1.0, -1.0])\nbox.append([ 1.0, -1.0,  1.0])\nbox.append([ 1.0,  1.0, -1.0])\nbox.append([ 1.0,  1.0,  1.0])\n\nif (cam.boxInsideFrustum(box) != cam.OUTSIDE):\n  # Box is inside/intersects frustum !\n  # Do something useful !\nelse:\n  # Box is outside the frustum !\n```\n\n----------------------------------------\n\nTITLE: Creating a Vulkan Buffer and Allocation (C++)\nDESCRIPTION: This snippet demonstrates the basic usage of the Vulkan Memory Allocator to create a `VkBuffer` and allocate memory for it using `vmaCreateBuffer`. It shows how to define buffer creation information and memory allocation requirements, and then use the VMA to handle the resource creation and memory management.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/README.md#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nVkBufferCreateInfo bufferInfo = { VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO };\nbufferInfo.size = 65536;\nbufferInfo.usage = VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT;\n\nVmaAllocationCreateInfo allocInfo = {};\nallocInfo.usage = VMA_MEMORY_USAGE_AUTO;\n\nVkBuffer buffer;\nVmaAllocation allocation;\nvmaCreateBuffer(allocator, &bufferInfo, &allocInfo, &buffer, &allocation, nullptr);\n```\n\n----------------------------------------\n\nTITLE: Clearing Buffers with glClear (bgl)\nDESCRIPTION: Clears specified buffers to preset values. 'mask' is a bitwise OR of enumerated constants, indicating the buffers to be cleared (e.g., color, depth, stencil).  This function resets buffer contents before rendering a new frame.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glClear(mask)\n```\n\n----------------------------------------\n\nTITLE: Generating a Sine Wave with aud.Sound\nDESCRIPTION: This snippet generates a sine wave using aud.Sound.sine() with a frequency of 440 Hz. The resulting 'sine' object is a sound description that can be further manipulated or played. No immediate audio playback occurs at this stage.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nsine = aud.Sound.sine(440)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Build Options\nDESCRIPTION: This CMake snippet configures Windows-specific build options. It defines options for finding external libraries, bundling the C runtime, using external manifest files, using sccache, generating PDB files, and supporting Windows 7. These options can be turned ON or OFF as needed and marked advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  # Use hardcoded paths or find_package to find externals\n  option(WITH_WINDOWS_FIND_MODULES \"Use find_package to locate libraries\" OFF)\n  mark_as_advanced(WITH_WINDOWS_FIND_MODULES)\n\n  # The python debugger in Visual Studio for has been broken for years\n  # but the upstream project over at https://github.com/microsoft/PTVS\n  # show hopeful signs of life once in a while, so there is hope that\n  # at one point this will start working again. That being said people\n  # do keep turning this option on and end up disappointed it isn't\n  # working and they spend a whole bunch of time on trying to get it to\n  # work. So for now rather than removing this functionality\n  # completely, just disable it.\n\n  if(WINDOWS_PYTHON_DEBUG)\n    # No need for a python version check here, anything over python 3.6 isn't working.\n    message(WARNING \"Unsupported python version for VS debugger, disabling WINDOWS_PYTHON_DEBUG\")\n    set(WINDOWS_PYTHON_DEBUG OFF)\n  endif()\n\n  # option(WINDOWS_PYTHON_DEBUG \"\\\n  # Include the files needed for debugging python scripts with visual studio 2017+.\"\n  #   OFF\n  # )\n  # mark_as_advanced(WINDOWS_PYTHON_DEBUG)\n\n  option(WITH_WINDOWS_BUNDLE_CRT \"Bundle the C runtime for install free distribution.\" ON)\n  mark_as_advanced(WITH_WINDOWS_BUNDLE_CRT)\n\n  option(WITH_WINDOWS_EXTERNAL_MANIFEST \"Use external manifest files\" OFF)\n  mark_as_advanced(WITH_WINDOWS_EXTERNAL_MANIFEST)\n\n  option(WITH_WINDOWS_SCCACHE \"Use sccache to speed up builds (Ninja builder only)\" OFF)\n  mark_as_advanced(WITH_WINDOWS_SCCACHE)\n\n  option(WITH_WINDOWS_RELEASE_PDB \"\\\nGenerate a pdb file for client side stacktraces for release builds\"\n    ON\n  )\n  mark_as_advanced(WITH_WINDOWS_RELEASE_PDB)\n\n  option(WITH_WINDOWS_RELEASE_STRIPPED_PDB \"Use a stripped PDB file for release builds\" ON)\n  mark_as_advanced(WITH_WINDOWS_RELEASE_STRIPPED_PDB)\n\n  option(WITH_WINDOWS_7 \"The executable supports Windows 7. It needs additional libraries\" OFF)\n  mark_as_advanced(WITH_WINDOWS_7)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Build Dependencies\nDESCRIPTION: This CMake snippet adds a build dependency on the `bf_rna` library. This ensures that the RNA (Runtime Name Access) system is built before the Action Editor library, as the Action Editor library relies on generated RNA data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_action/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_action bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Formatting with positional arguments using fmt\nDESCRIPTION: This C++ code snippet demonstrates how to use positional arguments with the fmt library to format a string. It uses indices within the format string to specify the order in which the arguments should be inserted. The result is the string \"I'd rather be happy than right.\"\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"I'd rather be {1} than {0}.\", \"right\", \"happy\");\n    // s == \"I'd rather be happy than right.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Viewport (Python)\nDESCRIPTION: This code snippet demonstrates how to set up multiple viewports using two cameras in a scene, splitting the screen vertically. It gets references to two camera objects and the render width and height. It enables the viewport for both cameras and then calls the `setViewport` method to define the region of the screen each camera renders to.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\nscene = bge.logic.getCurrentScene()\n\ncam1 = scene.objects[\"cam1\"]\ncam2 = scene.objects[\"cam2\"]\n\ncam1.useViewport = True\ncam2.useViewport = True\n\nwidth = bge.render.getWindowWidth()\nheight = bge.render.getWindowHeight()\n\n# Try to do a vertical split of the view (setViewport(left, bottom, right, top))\ncam1.setViewport(0, 0, int(width / 2), height)\ncam2.setViewport(int(width / 2), 0, width, height)\n```\n\n----------------------------------------\n\nTITLE: Accessing Collections - Python\nDESCRIPTION: This code demonstrates how to access members of a collection in Blender using both an index and a string. It illustrates accessing objects within `bpy.data.objects` using either their name or their index in the collection. This demonstrates two equivalent methods for accessing the same object.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> list(bpy.data.objects)\n[bpy.data.objects[\"Cube\"], bpy.data.objects[\"Plane\"]]\n\n>>> bpy.data.objects['Cube']\nbpy.data.objects[\"Cube\"]\n\n>>> bpy.data.objects[0]\nbpy.data.objects[\"Cube\"]\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation with MEM_callocN\nDESCRIPTION: This function allocates a block of memory with a specified length and initializes all bytes to zero. The `str` parameter is a descriptive string used for debugging purposes. It's similar to `calloc()` in standard C, but with added debugging information.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid *MEM_callocN(unsigned int len, char * str);\n```\n\n----------------------------------------\n\nTITLE: Feature Options\nDESCRIPTION: This snippet defines various options to enable or disable features such as FFTW3, PugiXML, Bullet physics engine, OpenColorIO, GMP, and Manifold. These options control the inclusion of specific libraries and functionalities in the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_FFTW3 \"Enable FFTW3 support (Used for smoke, ocean sim, glare, and audio effects)\" ON)\noption(WITH_PUGIXML \"Enable PugiXML support (Used for OpenImageIO, Grease Pencil SVG export)\" ON)\noption(WITH_BULLET \"Enable Bullet (Physics Engine)\" ON)\noption(WITH_SYSTEM_BULLET \"\\\nUse the systems bullet library (currently unsupported due to missing features in upstream!)\" \n  OFF\n)\nmark_as_advanced(WITH_SYSTEM_BULLET)\noption(WITH_OPENCOLORIO \"Enable OpenColorIO color management\" ON)\noption(WITH_GMP \"Enable features depending on GMP (Exact Boolean)\" ON)\noption(WITH_MANIFOLD \"Enable features depending on Manifold (Fast Robust Boolean)\" ON)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (DDS Image Support)\nDESCRIPTION: This snippet conditionally defines `-DWITH_DDS` if `WITH_IMAGE_DDS` is enabled. This enables support for DDS image format within the game engine. This allows the game engine to load and use DDS textures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_DDS)\n  add_definitions(-DWITH_DDS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definition for Double Precision in Bullet\nDESCRIPTION: This CMake command adds a compiler definition to enable double precision in the Bullet Physics library.  This increases precision for large open-world games but may reduce performance. The definition BT_USE_DOUBLE_PRECISION is used.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/rigidbody/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DBT_USE_DOUBLE_PRECISION)\n```\n\n----------------------------------------\n\nTITLE: Cycles OptiX Kernel Macro\nDESCRIPTION: This macro defines the steps to compile a CUDA kernel for OptiX. It sets output paths, defines CUDA compiler flags including include directories and fast math options. It also adds conditional compilation flags based on whether NANOVDB or Cycles OSL/Debug are enabled, invokes the CUDA compiler (nvcc) to compile the kernel to PTX, compresses the result, and performs a delayed install.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(cycles_optix_kernel_add name input flags)\n    set(output \"${CMAKE_CURRENT_BINARY_DIR}/${name}.ptx\")\n    set(output_compressed \"${output}.zst\")\n\n    set(cuda_flags ${flags}\n      -I \"${OPTIX_INCLUDE_DIR}\"\n      -I \"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n      -I \"${CMAKE_CURRENT_SOURCE_DIR}/device/cuda\"\n      --use_fast_math\n      -Wno-deprecated-gpu-targets\n      -o ${output})\n\n    if(CUDA_HOST_COMPILER)\n      set(cuda_flags ${cuda_flags}\n        -ccbin=\"${CUDA_HOST_COMPILER}\")\n    endif()\n\n    if(WITH_NANOVDB)\n      set(cuda_flags ${cuda_flags}\n        -D WITH_NANOVDB)\n    endif()\n\n    if(WITH_CYCLES_OSL)\n      set(cuda_flags ${cuda_flags}\n        -D OSL_LIBRARY_VERSION_CODE=${OSL_LIBRARY_VERSION_CODE})\n    endif()\n\n    if(WITH_CYCLES_DEBUG)\n      set(cuda_flags ${cuda_flags} -D WITH_CYCLES_DEBUG)\n    endif()\n\n    add_custom_command(\n      OUTPUT\n        ${output}\n      DEPENDS\n        ${input}\n        ${SRC_KERNEL_HEADERS}\n        ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n        ${SRC_KERNEL_DEVICE_CUDA_HEADERS}\n        ${SRC_KERNEL_DEVICE_OPTIX_HEADERS}\n        ${SRC_UTIL_HEADERS}\n      COMMAND\n        ${CUDA_NVCC_EXECUTABLE}\n        --ptx\n        -arch=sm_50\n        ${cuda_flags}\n        ${input}\n      WORKING_DIRECTORY\n        \"${CMAKE_CURRENT_SOURCE_DIR}\"\n    )\n\n    add_custom_command(\n      OUTPUT ${output_compressed}\n      COMMAND \"$<TARGET_FILE:zstd_compress>\" ${output} ${output_compressed}\n      DEPENDS ${output})\n\n    list(APPEND optix_ptx ${output_compressed})\n\n    delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}\" \"${output_compressed}\" ${CYCLES_INSTALL_PATH}/lib)\n  endmacro()\n```\n\n----------------------------------------\n\nTITLE: Adding a Scene Removal Callback - Python\nDESCRIPTION: This code demonstrates how to add a callback function that is executed when a scene is destroyed in the Blender Game Engine (BGE) using Python. It appends a function to the 'onRemove' list of the scene object. This function will be called when the scene is removed from the game, allowing for cleanup or other actions before the scene is fully destroyed.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@scene.onRemove.append\ndef callback(scene):\n   print('exiting %s...' % scene.name)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Navigation Mesh with KX_NavMeshObject in Python\nDESCRIPTION: This code snippet demonstrates the `rebuild` method of the `KX_NavMeshObject` class. It rebuilds the navigation mesh.  Requires an instance of KX_NavMeshObject.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_NavMeshObject.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nKX_NavMeshObject.rebuild()\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Directives Based on Dependencies - CMake\nDESCRIPTION: This snippet conditionally defines preprocessor directives based on whether Mantaflow dependencies are enabled. Specifically, it disables the CNPY library if `WITH_MANTA_DEPENDENCIES` is not set. Defines for TBB and OpenVDB support are also added, enabling conditional compilation for these features.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_MANTA_DEPENDENCIES)\n  add_definitions(-DNO_CNPY=1)\nendif()\n\nif(WITH_TBB)\n  add_definitions(-DTBB=1)\nendif()\n\nif(WITH_OPENVDB)\n  add_definitions(-DOPENVDB=1)\n  # OpenVDB headers use deprecated TBB headers, silence warning.\n  add_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\nendif()\n\nif(WITH_OPENVDB_BLOSC)\n  add_definitions(-DOPENVDB_BLOSC=1)\nendif()\n\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n\nif(WITH_MANTA_NUMPY AND WITH_PYTHON_NUMPY)\n  add_definitions(-DNUMPY=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Windows-specific compiler flags\nDESCRIPTION: This snippet appends Windows-specific compiler flags, including library paths, and definitions. It retrieves necessary directories for MSVC tools and the Windows Kit.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32) # Add Windows specific compiler flags.\n    list(APPEND sycl_compiler_flags\n      -fms-extensions\n      -fms-compatibility\n      -D_WINDLL\n      -D_MBCS\n      -DWIN32\n      -D_WINDOWS\n      -D_CRT_NONSTDC_NO_DEPRECATE\n      -D_CRT_SECURE_NO_DEPRECATE\n      -DONEAPI_EXPORT\n    )\n\n    string(REPLACE /Redist/ /Tools/ MSVC_TOOLS_DIR ${MSVC_REDIST_DIR})\n    # Version Folder between Redist and Tools can mismatch sometimes\n    if(NOT EXISTS ${MSVC_TOOLS_DIR})\n      get_filename_component(cmake_ar_dir ${CMAKE_AR} DIRECTORY)\n      get_filename_component(MSVC_TOOLS_DIR \"${cmake_ar_dir}/../../../\" ABSOLUTE)\n    endif()\n    if(CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION)\n      set(WINDOWS_KIT_DIR ${WINDOWS_KITS_DIR}/Lib/${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION})\n    else() # case for Ninja on Windows\n      get_filename_component(cmake_mt_dir ${CMAKE_MT} DIRECTORY)\n      string(REPLACE /bin/ /Lib/ WINDOWS_KIT_DIR ${cmake_mt_dir})\n      get_filename_component(WINDOWS_KIT_DIR \"${WINDOWS_KIT_DIR}/../\" ABSOLUTE)\n    endif()\n    list(APPEND sycl_compiler_flags\n      -L\"${MSVC_TOOLS_DIR}/lib/x64\"\n      -L\"${WINDOWS_KIT_DIR}/um/x64\"\n      -L\"${WINDOWS_KIT_DIR}/ucrt/x64\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This section defines all the source files (.cc and .hh) that constitute the USD I/O library. It encompasses utility functions, C API export/import, hierarchy iterators, hooks, instancing, light conversion, mesh operations, writer implementations for various data types, and reader implementations. It also includes skeleton conversion and root utilities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/usd_armature_utils.cc\n  intern/usd_asset_utils.cc\n  intern/usd_attribute_utils.cc\n  intern/usd_blend_shape_utils.cc\n  intern/usd_capi_export.cc\n  intern/usd_capi_import.cc\n  intern/usd_hierarchy_iterator.cc\n  intern/usd_hook.cc\n  intern/usd_instancing_utils.cc\n  intern/usd_light_convert.cc\n  intern/usd_mesh_utils.cc\n  intern/usd_utils.cc\n\n  intern/usd_writer_abstract.cc\n  intern/usd_writer_armature.cc\n  intern/usd_writer_camera.cc\n  intern/usd_writer_curves.cc\n  intern/usd_writer_hair.cc\n  intern/usd_writer_light.cc\n  intern/usd_writer_material.cc\n  intern/usd_writer_mesh.cc\n  intern/usd_writer_metaball.cc\n  intern/usd_writer_points.cc\n  intern/usd_writer_transform.cc\n  intern/usd_writer_volume.cc\n\n  intern/usd_reader_camera.cc\n  intern/usd_reader_curve.cc\n  intern/usd_reader_geom.cc\n  intern/usd_reader_instance.cc\n  intern/usd_reader_light.cc\n  intern/usd_reader_material.cc\n  intern/usd_reader_mesh.cc\n  intern/usd_reader_nurbs.cc\n  intern/usd_reader_pointinstancer.cc\n  intern/usd_reader_points.cc\n  intern/usd_reader_prim.cc\n  intern/usd_reader_shape.cc\n  intern/usd_reader_skeleton.cc\n  intern/usd_reader_stage.cc\n  intern/usd_reader_utils.cc\n  intern/usd_reader_volume.cc\n  intern/usd_reader_xform.cc\n  intern/usd_skel_convert.cc\n  intern/usd_skel_root_utils.cc\n\n  usd.hh\n  usd_private.hh\n\n  intern/usd_armature_utils.hh\n  intern/usd_asset_utils.hh\n  intern/usd_attribute_utils.hh\n  intern/usd_blend_shape_utils.hh\n  intern/usd_exporter_context.hh\n  intern/usd_hash_types.hh\n  intern/usd_hierarchy_iterator.hh\n  intern/usd_hook.hh\n  intern/usd_instancing_utils.hh\n  intern/usd_light_convert.hh\n  intern/usd_mesh_utils.hh\n  intern/usd_utils.hh\n\n  intern/usd_writer_abstract.hh\n  intern/usd_writer_armature.hh\n  intern/usd_writer_camera.hh\n  intern/usd_writer_curves.hh\n  intern/usd_writer_hair.hh\n  intern/usd_writer_light.hh\n  intern/usd_writer_material.hh\n  intern/usd_writer_mesh.hh\n  intern/usd_writer_metaball.hh\n  intern/usd_writer_points.hh\n  intern/usd_writer_transform.hh\n  intern/usd_writer_volume.hh\n\n  intern/usd_reader_camera.hh\n  intern/usd_reader_curve.hh\n  intern/usd_reader_geom.hh\n  intern/usd_reader_instance.hh\n  intern/usd_reader_light.hh\n  intern/usd_reader_material.hh\n  intern/usd_reader_mesh.hh\n  intern/usd_reader_nurbs.hh\n  intern/usd_reader_pointinstancer.hh\n  intern/usd_reader_points.hh\n  intern/usd_reader_prim.hh\n  intern/usd_reader_shape.hh\n  intern/usd_reader_skeleton.hh\n  intern/usd_reader_stage.hh\n  intern/usd_reader_utils.hh\n  intern/usd_reader_volume.hh\n  intern/usd_reader_xform.hh\n  intern/usd_skel_convert.hh\n  intern/usd_skel_root_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python DLLs on Windows - CMake\nDESCRIPTION: This CMake snippet installs the Python DLLs (python{version}.dll and python3.dll) to the target executable directory if Python is enabled and it is not a GNU compiler. It installs different DLLs based on the build configuration (Release, RelWithDebInfo, MinSizeRel, Debug). The _PYTHON_VERSION_NO_DOTS variable removes dots from the Python version string.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\n    if(WITH_PYTHON)\n    string(REPLACE \".\" \"\" _PYTHON_VERSION_NO_DOTS ${PYTHON_VERSION})\n\n    if(NOT WITH_PYTHON_MODULE)\n      if(NOT CMAKE_COMPILER_IS_GNUCC)\n        install(\n          FILES\n            ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}.dll\n            ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3.dll\n          DESTINATION ${TARGETDIR_EXE}\n          CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n        )\n\n        install(\n          FILES\n            ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}_d.dll\n            ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3_d.dll\n          DESTINATION ${TARGETDIR_EXE}\n          CONFIGURATIONS Debug\n        )\n      endif()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Game Engine Subdirectory - CMake\nDESCRIPTION: This snippet conditionally adds the `gameengine` subdirectory to the build process if the `WITH_GAMEENGINE` option is enabled. This incorporates the game engine component into the UPBGE project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n\tadd_subdirectory(gameengine)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Game Engine\nDESCRIPTION: This code snippet conditionally compiles code for the game engine if the WITH_GAMEENGINE flag is enabled.  It adds a preprocessor definition, include directories, source files, and library dependencies required for game engine integration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  add_definitions(-DWITH_GAMEENGINE)\n  list(APPEND INC\n    ../../../../extern/recastnavigation\n  )\n\n  list(APPEND SRC\n    mesh_navmesh.cc\n  )\n\n  list(APPEND LIB\n    extern_recastnavigation\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Definitions - CMake\nDESCRIPTION: This snippet conditionally adds Python support definitions if the WITH_PYTHON option is enabled.  It appends the python include directory to the INC variable and defines the WITH_PYTHON macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation (MaterialX)\nDESCRIPTION: This snippet handles conditional compilation settings for MaterialX. If WITH_MATERIALX is enabled, the definition -DWITH_MATERIALX is added, and the MaterialXCore library is appended to the LIB list, allowing the USD I/O library to utilize MaterialX features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_MATERIALX)\n  add_definitions(-DWITH_MATERIALX)\n  list(APPEND LIB MaterialXCore)\nendif()\n```\n\n----------------------------------------\n\nTITLE: AudaSpace Options\nDESCRIPTION: This snippet defines the WITH_AUDASPACE and WITH_SYSTEM_AUDASPACE options for enabling and using external audaspace library. The options allows using the internal AudaSpace library or an external system-installed library for audio processing. It also calls `set_and_warn_dependency` to manage dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_AUDASPACE \"\\\nBuild with blenders audio library (only disable if you know what you're doing!)\" \n  ON\n)\noption(WITH_SYSTEM_AUDASPACE \"\\\nBuild with external audaspace library installed on the system \\\n(only enable if you know what you're doing!)\" \n  OFF\n)\nmark_as_advanced(WITH_AUDASPACE)\nmark_as_advanced(WITH_SYSTEM_AUDASPACE)\n\nset_and_warn_dependency(WITH_AUDASPACE WITH_SYSTEM_AUDASPACE OFF)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions\nDESCRIPTION: This snippet adds compiler definitions, likely related to OpenGL, to the build process. These definitions are necessary for the correct compilation of the OpenGL-related code in the rasterizer library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(${GL_DEFINITIONS})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Freestyle\nDESCRIPTION: This snippet conditionally defines the `WITH_FREESTYLE` macro if the `WITH_FREESTYLE` option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Replacing Texture with Video in Python\nDESCRIPTION: This snippet retrieves an existing texture ID from a material and then creates a new dynamic texture using the VideoFFmpeg object. It updates the game object to use the new dynamic texture, replacing the original texture. The snippet assumes an object named \"Plane\" exists and has a material with an image texture.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get texture id\nid = bge.texture.materialID(obj, \"Material\", \"Image\")\n# Create a dynamic texture\ntex = bge.texture.Texture(obj, id)\n# Set the source\ntex.source = movie\n# Refresh the texture\ntex.refresh(True)\n```\n\n----------------------------------------\n\nTITLE: Defining and Setting up LINK/INLINK Buttons - C\nDESCRIPTION: This code snippet shows how to define and configure 'LINK' and 'INLINK' buttons, which are used to create visual links between data blocks in the UPBGE UI. The `uiDefIconBut` function creates the icon button. `uiSetButLink` associates the link button with data pointers and specifies link codes for filtering compatible connections. The INLINK button identifies the data block the link should connect to and a `fromcode` for identifying compatible LINK button types.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/interface_API.txt#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nuiBut but= uiDefIconBut(block, LINK, 0, ICON_LINK,\t\tx1, y1, w, h, NULL, 0, 0, 0, 0, \"\");\n\t/* create the LINK icon */\n\nuiSetButLink(but, void **pt, void ***ppt, short *totlink, short fromcode, short tocode);\n\t/**pt: pointer to pointer (only one link allowed)\n\t ***ppt: pointer to pointerpointer (an array of pointers)\n\t (Either one of these values should be NULL)\n\t\n\t fromcode: (currently unused)\n\t tocode: a short indicating which blocks it can link to. \n\t\n\t\nuiDefIconBut(block, INLINK, 0, ICON_INLINK, x1, y1, w, h, void *poin, short fromcode, 0, 0, 0, \"\");\n\tpoin: the pointer of the datablock you want to create links to\n\tfromcode: a short identifying which LINK buttons can connect to it \n```\n\n----------------------------------------\n\nTITLE: Defining Double Precision for Bullet Physics\nDESCRIPTION: This line adds a preprocessor definition to enable double-precision floating-point numbers in the Bullet Physics Library. This is especially important for large open worlds to maintain accuracy over long distances.  The macro `BT_USE_DOUBLE_PRECISION` ensures the library uses double precision calculations throughout.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DBT_USE_DOUBLE_PRECISION)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories needed for the FBX importer. These include the current directory, importer subdirectories, common directories, and Blender editor include directories. These paths are added to the INC variable for later use in the blender_add_lib function.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/fbx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  importer\n  ../common\n  ../../editors/include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Face Culling with glCullFace (bgl)\nDESCRIPTION: Specifies whether front- or back-facing facets should be culled (not rendered). The 'mode' parameter defines which faces are candidates for culling. This improves rendering performance by skipping hidden faces.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glCullFace(mode)\n```\n\n----------------------------------------\n\nTITLE: Conditional Precompiled Headers Option\nDESCRIPTION: This snippet defines the WITH_COMPILER_PRECOMPILED_HEADERS option, which enables or disables the use of pre-compiled headers to speed up compilation. It includes logic to disable precompiled headers if Clang-Tidy is enabled with GNU GCC or Apple Clang, due to incompatibility. It also sets the CMAKE_DISABLE_PRECOMPILE_HEADERS variable if precompiled headers are disabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(COMMAND target_precompile_headers)\n  # Disabling is needed for `./tools/utils_maintenance/code_clean.py` to function.\n  option(WITH_COMPILER_PRECOMPILED_HEADERS \"\\\nUse pre-compiled headers to speed up compilation.\" \n    ON\n  )\n  mark_as_advanced(WITH_COMPILER_PRECOMPILED_HEADERS)\n\n  if(WITH_CLANG_TIDY AND (CMAKE_COMPILER_IS_GNUCC OR APPLE))\n    if(WITH_COMPILER_PRECOMPILED_HEADERS)\n      message(STATUS\n        \"Clang-Tidy and the current compiler's precompiled headers are incompatible, \"\n        \"disabling precompiled headers.\"\n      )\n      set(WITH_COMPILER_PRECOMPILED_HEADERS OFF)\n    endif()\n  endif()\n\n  if(NOT WITH_COMPILER_PRECOMPILED_HEADERS)\n    set(CMAKE_DISABLE_PRECOMPILE_HEADERS ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: RenderDoc API Option\nDESCRIPTION: This snippet defines an option to use the RenderDoc API to capture frames for debugging purposes. It also defines an option to globally enable in-shader asserts, which requires a debug build or setting `GPU_FORCE_ENABLE_SHADER_PRINTF` to 1. The options are marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_RENDERDOC \"Use Renderdoc API to capture frames\" OFF)\n\noption(WITH_GPU_SHADER_ASSERT \"\\\nGlobally enable in-shader asserts.\n(Requires a debug build or setting GPU_FORCE_ENABLE_SHADER_PRINTF to 1)\"\n  OFF\n)\n\nmark_as_advanced(\n  WITH_RENDERDOC\n  WITH_GPU_SHADER_ASSERT\n)\n```\n\n----------------------------------------\n\nTITLE: Get Allocated Memory Length with MEM_allocN_len\nDESCRIPTION: This function returns the length (size) of a given memory block. It provides a way to determine the size of a dynamically allocated memory region, which is useful for managing and debugging memory usage.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nint MEM_allocN_len(void *vmemh);\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet lists all the source files (both .cpp and .h) that make up the Ketsji game engine.  These files are compiled and linked together to create the Ketsji engine library. Includes both header and source files for various Ketsji engine components, such as action management, shaders, textures, game objects, physics, and Python integration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  BL_Action.cpp\n  BL_ActionManager.cpp\n  BL_Shader.cpp\n  BL_Texture.cpp\n  KX_2DFilter.cpp\n  KX_2DFilterManager.cpp\n  KX_2DFilterFrameBuffer.cpp\n  KX_BlenderCanvas.cpp\n  KX_BlenderMaterial.cpp\n  KX_Camera.cpp\n  KX_CameraIpoSGController.cpp\n  KX_CharacterWrapper.cpp\n  KX_CollisionEventManager.cpp\n  KX_ConstraintWrapper.cpp\n  KX_EmptyObject.cpp\n  KX_FontObject.cpp\n  KX_GameObject.cpp\n  KX_Globals.cpp\n  KX_IpoController.cpp\n  KX_KetsjiEngine.cpp\n  KX_LibLoadStatus.cpp\n  KX_Light.cpp\n  KX_LightIpoSGController.cpp\n  KX_LodLevel.cpp\n  KX_LodManager.cpp\n  KX_MaterialShader.cpp\n  KX_MeshProxy.cpp\n  KX_MotionState.cpp\n  KX_NavMeshObject.cpp\n  KX_ObColorIpoSGController.cpp\n  KX_ObstacleSimulation.cpp\n  KX_PolyProxy.cpp\n  KX_PyConstraintBinding.cpp\n  KX_PyMath.cpp\n  KX_PythonComponent.cpp\n  KX_PythonProxyManager.cpp\n  KX_PythonInit.cpp\n  KX_PythonInitTypes.cpp\n  KX_PythonMain.cpp\n  KX_PythonProxy.cpp\n  KX_RayCast.cpp\n  KX_BoneParentNodeRelationship.cpp\n  KX_NodeRelationships.cpp\n  KX_ScalarInterpolator.cpp\n  KX_Scene.cpp\n  KX_TimeCategoryLogger.cpp\n  KX_TimeLogger.cpp\n  KX_VehicleWrapper.cpp\n  KX_VertexProxy.cpp\n  KX_CollisionContactPoints.cpp\n\n  BL_Action.h\n  BL_ActionManager.h\n  BL_Shader.h\n  BL_Texture.h\n  KX_2DFilter.h\n  KX_2DFilterManager.h\n  KX_2DFilterFrameBuffer.h\n  KX_BlenderCanvas.h\n  KX_BlenderMaterial.h\n  KX_Camera.h\n  KX_CameraIpoSGController.h\n  KX_CharacterWrapper.h\n  KX_ClientObjectInfo.h\n  KX_ConstraintWrapper.h\n  KX_EmptyObject.h\n  KX_FontObject.h\n  KX_GameObject.h\n  KX_Globals.h\n  KX_IInterpolator.h\n  KX_IpoTransform.h\n  KX_IpoController.h\n  KX_IScalarInterpolator.h\n  KX_ISystem.h\n  KX_KetsjiEngine.h\n  KX_LibLoadStatus.h\n  KX_Light.h\n  KX_LightIpoSGController.h\n  KX_LodLevel.h\n  KX_LodManager.h\n  KX_MaterialShader.h\n  KX_MeshProxy.h\n  KX_MotionState.h\n  KX_NavMeshObject.h\n  KX_ObColorIpoSGController.h\n  KX_ObstacleSimulation.h\n  KX_PhysicsEngineEnums.h\n  KX_PolyProxy.h\n  KX_PyConstraintBinding.h\n  KX_PyMath.h\n  KX_PythonComponent.h\n  KX_PythonProxyManager.h\n  KX_PythonInit.h\n  KX_PythonInitTypes.h\n  KX_PythonMain.h\n  KX_PythonProxy.h\n  KX_RayCast.h\n  KX_BoneParentNodeRelationship.h\n  KX_NodeRelationships.h\n  KX_ScalarInterpolator.h\n  KX_Scene.h\n  KX_TimeCategoryLogger.h\n  KX_TimeLogger.h\n  KX_CollisionEventManager.h\n  KX_VehicleWrapper.h\n  KX_VertexProxy.h\n  KX_CollisionContactPoints.h\n)\n```\n\n----------------------------------------\n\nTITLE: Drawing Navigation Mesh with KX_NavMeshObject in Python\nDESCRIPTION: This code snippet demonstrates the `draw` method of the `KX_NavMeshObject` class. It draws a debug mesh for the navigation mesh based on the provided mode. Requires an instance of KX_NavMeshObject and an integer representing the drawing mode.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_NavMeshObject.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nKX_NavMeshObject.draw(mode)\n```\n\n----------------------------------------\n\nTITLE: Inefficient List Modification: Removing Elements in Loop (Python)\nDESCRIPTION: This snippet shows an inefficient way to remove items from a list while iterating through it backwards, due to the use of `polygons.pop(p_idx)` which can be slow. It creates a copy of a mesh's polygons and then removes triangles by looping backward and calling `pop`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npolygons = mesh.polygons[:]  # Make a list copy of the meshes polygons.\np_idx = len(polygons)        # Loop backwards\nwhile p_idx:                 # While the value is not 0.\n    p_idx -= 1\n\n    if len(polygons[p_idx].vertices) == 3:\n        polygons.pop(p_idx)  # Remove the triangle.\n```\n\n----------------------------------------\n\nTITLE: Installing Python Libraries\nDESCRIPTION: This CMake code snippet manages the installation of Python libraries, distinguishing between pre-compiled libraries (if `LIBDIR` is defined) and system libraries. If `LIBDIR` is defined, it installs the entire Python library path. Otherwise, it installs a subset of the system's Python libraries, excluding cache files, static libraries, and unnecessary modules, into a target directory determined based on the system's library structure (lib or lib64).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\n    if(DEFINED LIBDIR)\n      # Pre-compiled libraries, copy over complete lib directory.\n      install_dir(\n        ${PYTHON_LIBPATH}\n        ${TARGETDIR_VER}/python\n      )\n    else()\n      # System libraries.\n      install(\n        PROGRAMS ${PYTHON_EXECUTABLE}\n        DESTINATION ${TARGETDIR_VER}/python/bin\n      )\n\n      # On some platforms (like openSUSE) Python is linked to be used from `lib64` directory.\n      # determine this from Python's libraries path.\n      # Ugh, its possible `lib64` is just a symbolic-link to `lib`\n      # which causes incorrect use of `lib64`.\n      get_filename_component(_pypath_real ${PYTHON_LIBPATH} REALPATH)\n      if(${_pypath_real} MATCHES \"lib64$\")\n        set(_target_LIB \"lib64\")\n      else()\n        set(_target_LIB \"lib\")\n      endif()\n      unset(_pypath_real)\n\n      # Copy the systems python into the install directory:\n      # install(CODE \"message(\\\"copying a subset of the systems python...\\\")\")\n      install(\n        DIRECTORY ${PYTHON_LIBPATH}/python${PYTHON_VERSION}\n        DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}\n        PATTERN \"__pycache__\" EXCLUDE               # * any cache *\n        PATTERN \"config-${PYTHON_VERSION}/*.a\" EXCLUDE  # static lib\n        PATTERN \"lib2to3\" EXCLUDE                   # ./lib2to3\n        PATTERN \"site-packages/*\" EXCLUDE           # ./site-packages/*\n        PATTERN \"tkinter\" EXCLUDE                   # ./tkinter\n        PATTERN \"lib-dynload/_tkinter.*\" EXCLUDE    # ./lib-dynload/_tkinter.co\n        PATTERN \"idlelib\" EXCLUDE                   # ./idlelib\n        PATTERN \"test\" EXCLUDE                      # ./test\n        PATTERN \"turtledemo\" EXCLUDE                # ./turtledemo\n        PATTERN \"turtle.py\" EXCLUDE                 # ./turtle.py\n        PATTERN \"wininst*.exe\" EXCLUDE              # from distutils, avoid malware false positive\n      )\n\n```\n\n----------------------------------------\n\nTITLE: Building the hdCycles Plugin CMake\nDESCRIPTION: This snippet conditionally builds the `hdCycles` plugin if `WITH_CYCLES_HYDRA_RENDER_DELEGATE` is enabled. It defines the source files, creates a shared library, and sets properties for the plugin, including compile definitions, link libraries, and versioning information for Apple and Unix platforms.  It also handles installation of the plugin and its associated `plugInfo.json` file.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  set(SRC_HD_CYCLES_PLUGIN\n    plugin.h\n    plugin.cpp\n  )\n  set(HdCyclesPluginName hdCycles)\n  add_library(${HdCyclesPluginName} SHARED ${SRC_HD_CYCLES_PLUGIN})\n\n  set_target_properties(${HdCyclesPluginName}\n    PROPERTIES PREFIX \"\"\n  )\n\n  target_compile_definitions(${HdCyclesPluginName}\n    PRIVATE\n    MFB_PACKAGE_NAME=${HdCyclesPluginName}\n    MFB_ALT_PACKAGE_NAME=${HdCyclesPluginName}\n    GLOG_NO_ABBREVIATED_SEVERITIES=1\n    OSL_DEBUG=$<CONFIG:DEBUG>\n    TBB_USE_DEBUG=$<CONFIG:DEBUG>\n    $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX=1>\n  )\n\n  target_link_libraries(${HdCyclesPluginName}\n    cycles_hydra\n  )\n\n  if(APPLE)\n    set_property(\n      TARGET\n      ${HdCyclesPluginName}\n      APPEND_STRING PROPERTY LINK_FLAGS\n      \" -Wl,-exported_symbols_list,'${CMAKE_CURRENT_SOURCE_DIR}/resources/apple_symbols.map'\"\n    )\n  elseif(UNIX)\n    set_property(\n      TARGET\n      ${HdCyclesPluginName}\n      APPEND_STRING PROPERTY LINK_FLAGS\n      \" -Wl,--version-script='${CMAKE_CURRENT_SOURCE_DIR}/resources/linux_symbols.map'\"\n    )\n  endif()\n\n\n  if(WITH_CYCLES_BLENDER)\n    # Install inside add-on\n    set(CYCLES_HYDRA_INSTALL_PATH ${CYCLES_INSTALL_PATH}/hydra)\n  else()\n    # Install next to cycles executable\n    set(CYCLES_HYDRA_INSTALL_PATH ${CMAKE_INSTALL_PREFIX}/hydra)\n  endif()\n\n  # Put the root `plugInfo.json` one level up.\n  delayed_install(\"${CMAKE_CURRENT_SOURCE_DIR}\" \"plugInfo.json\" ${CYCLES_HYDRA_INSTALL_PATH})\n  delayed_install(\"\" $<TARGET_FILE:${HdCyclesPluginName}> ${CYCLES_HYDRA_INSTALL_PATH})\n\n  set_target_properties(${HdCyclesPluginName}\n    PROPERTIES\n    RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})\n\n  set(PLUG_INFO_ROOT \"..\")\n\n  if(WITH_CYCLES_BLENDER)\n    # Full path not yet know at this point and RELATIVE_PATH requires\n    # absolute path as input. So just set manually.\n    set(PLUG_INFO_LIBRARY_PATH \"../${HdCyclesPluginName}${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n    set(PLUG_INFO_RESOURCE_PATH \"../..\")\n  else()\n    file(RELATIVE_PATH\n      PLUG_INFO_LIBRARY_PATH\n      \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}\"\n      \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n    file(RELATIVE_PATH PLUG_INFO_RESOURCE_PATH\n      \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}\"\n      \"${CYCLES_INSTALL_PATH}\")\n  endif()\n\n  configure_file(resources/plugInfo.json\n    ${CMAKE_CURRENT_BINARY_DIR}/resources/plugInfo.json\n    @ONLY\n  )\n\n  delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}/resources\" \"plugInfo.json\" \"${CYCLES_HYDRA_INSTALL_PATH}/${HdCyclesPluginName}/resources\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GCC C Compiler Flags\nDESCRIPTION: This snippet uses the `add_check_c_compiler_flags` CMake function to define a set of C compiler flags specifically for the GNU GCC compiler. These flags enable various warnings, such as `-Wall`, `-Werror=implicit-function-declaration`, and `-Wstrict-prototypes`. Some warnings are explicitly disabled using the `-Wno-` prefix. The flags are designed to improve code quality and catch potential errors during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_110\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n\n  add_check_c_compiler_flags(\n    C_WARNINGS\n\n    C_WARN_ALL -Wall\n    C_WARN_ERROR_IMPLICIT_FUNCTION_DECLARATION -Werror=implicit-function-declaration\n\n    # System headers sometimes do this, disable for now, was: `-Werror=strict-prototypes`.\n    C_WARN_STRICT_PROTOTYPES -Wstrict-prototypes\n\n    C_WARN_ERROR_RETURN_TYPE -Werror=return-type\n    C_WARN_ERROR_VLA -Werror=vla\n    C_WARN_MISSING_PROTOTYPES -Wmissing-prototypes\n    C_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n    C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    C_WARN_POINTER_ARITH -Wpointer-arith\n    C_WARN_UNUSED_PARAMETER -Wunused-parameter\n    C_WARN_WRITE_STRINGS -Wwrite-strings\n    C_WARN_LOGICAL_OP -Wlogical-op\n    C_WARN_UNDEF -Wundef\n\n    # Needs: `-Wuninitialized`.\n    C_WARN_INIT_SELF -Winit-self\n\n    C_WARN_MISSING_INCLUDE_DIRS -Wmissing-include-dirs\n    C_WARN_NO_DIV_BY_ZERO -Wno-div-by-zero\n    C_WARN_TYPE_LIMITS -Wtype-limits\n    C_WARN_FORMAT_SIGN -Wformat-signedness\n    C_WARN_RESTRICT -Wrestrict\n\n    # Useful but too many false positives and inconvenient to suppress each occurrence.\n    C_WARN_NO_STRINGOP_OVERREAD -Wno-stringop-overread\n    C_WARN_NO_STRINGOP_OVERFLOW -Wno-stringop-overflow\n\n    # C-only.\n    C_WARN_NO_NULL -Wnonnull\n    C_WARN_ABSOLUTE_VALUE -Wabsolute-value\n\n    C_WARN_UNINITIALIZED -Wuninitialized\n    C_WARN_REDUNDANT_DECLS -Wredundant-decls\n    C_WARN_SHADOW -Wshadow\n\n    # Disable because it gives warnings for printf() & friends.\n    # C_WARN_DOUBLE_PROMOTION \"-Wdouble-promotion -Wno-error=double-promotion\"\n\n    # Use `ATTR_FALLTHROUGH` macro to suppress.\n    C_WARN_IMPLICIT_FALLTHROUGH -Wimplicit-fallthrough=5\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating configuration-specific compiler flags\nDESCRIPTION: This snippet creates copies of the base compiler flags for each build configuration (Release, Debug, RelWithDebInfo) and appends configuration-specific flags, like debug symbols and optimization levels.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\nset(sycl_compiler_flags_Release ${sycl_compiler_flags})\n  set(sycl_compiler_flags_Debug ${sycl_compiler_flags})\n  set(sycl_compiler_flags_RelWithDebInfo ${sycl_compiler_flags})\n\n  list(APPEND sycl_compiler_flags_Release\n    -DNDEBUG\n  )\n  list(APPEND sycl_compiler_flags_RelWithDebInfo\n    -DNDEBUG\n    -g\n  )\n  list(APPEND sycl_compiler_flags_Debug\n    -g\n  )\n\n  if(WIN32)\n    list(APPEND sycl_compiler_flags_Debug\n      -D_DEBUG\n      -nostdlib\n      -Xclang --dependent-lib=msvcrtd\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet lists the private libraries that the shader node library depends on. These dependencies are necessary for the shader nodes to function correctly within the Blender environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_sky\n  bf_nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with BULLET\nDESCRIPTION: This snippet conditionally includes Bullet Physics library support. It appends Bullet include directories to `INC_SYS` and adds `../../../intern/rigidbody` to the include list `INC`. It appends the rigidbody library and Bullet libraries to `LIB` and defines `-DWITH_BULLET` to enable corresponding code. This enables rigid body physics simulations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n  )\n  list(APPEND INC\n    ../../../intern/rigidbody\n  )\n  list(APPEND LIB\n    bf_intern_rigidbody\n\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenVDB - CMake\nDESCRIPTION: Conditionally includes OpenVDB library based on the 'WITH_OPENVDB' flag. Adds include directories, libraries, and a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the Cycles Kernel OSL library. It defines both internal project include directories and system include directories that will be used during compilation. The `include_directories` command adds these directories to the compiler's search path.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../..\n)\n\nset(INC_SYS\n\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Defining Install Directory Macro with Exclusion Patterns CMake\nDESCRIPTION: This snippet defines a macro called `install_dir` that simplifies directory installation with a set of exclusion patterns. This macro is used to install a directory while excluding specific files and folders, such as `.git` directories, Python cache files, and test directories. It uses the `install` command with `PATTERN ... EXCLUDE` to achieve this.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\n# macro to help install files without dragging in unnecessary data.\nmacro(install_dir from to)\n  install(\n    DIRECTORY ${from}\n    DESTINATION ${to}\n    # Irrelevant files and caches.\n    PATTERN \".git\" EXCLUDE\n    PATTERN \".gitignore\" EXCLUDE\n    PATTERN \".gitea\" EXCLUDE\n    PATTERN \".github\" EXCLUDE\n    PATTERN \"*.pyc\" EXCLUDE\n    PATTERN \"*.pyo\" EXCLUDE\n    PATTERN \"*.orig\" EXCLUDE\n    PATTERN \"*.rej\" EXCLUDE\n    PATTERN \"__pycache__\" EXCLUDE\n    PATTERN \"__MACOSX\" EXCLUDE\n    PATTERN \".DS_Store\" EXCLUDE\n    # Unneeded Python files.\n    PATTERN \"config-${PYTHON_VERSION}/*.a\" EXCLUDE  # static lib\n    PATTERN \"lib2to3\" EXCLUDE                   # ./lib2to3\n    PATTERN \"tkinter\" EXCLUDE                   # ./tkinter\n    PATTERN \"lib-dynload/_tkinter.*\" EXCLUDE    # ./lib-dynload/_tkinter.co\n    PATTERN \"idlelib\" EXCLUDE                   # ./idlelib\n    PATTERN \"test\" EXCLUDE                      # ./test\n    PATTERN \"turtledemo\" EXCLUDE                # ./turtledemo\n    PATTERN \"turtle.py\" EXCLUDE                 # ./turtle.py\n    PATTERN \"wininst*.exe\" EXCLUDE              # from distutils, avoid malware false positive\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Linking test libraries as whole archives (CMake)\nDESCRIPTION: This snippet retrieves the list of test libraries and configures linker flags. It uses `-Wl,--whole-archive` on Linux and handles linking differently on Windows and macOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(_test_libs GLOBAL PROPERTY BLENDER_TEST_LIBS)\nif(WIN32 OR APPLE)\n  # Windows and macOS set target_link_options after target creation.\nelif(UNIX)\n  list(APPEND TEST_LIBS \"-Wl,--whole-archive\" ${_test_libs} \"-Wl,--no-whole-archive\")\nelse()\n  message(FATAL_ERROR \"Unknown how to link whole-archive with your compiler ${CMAKE_CXX_COMPILER_ID}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Wheel Rotation (KX_VehicleWrapper)\nDESCRIPTION: This method retrieves the rotation of a specified wheel on the vehicle. It requires the wheel index as input and returns a float representing the wheel's rotation angle.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getWheelRotation(wheelIndex)\n\n      Returns the rotation of the specified wheel\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n\n      :return: the wheel rotation\n      :rtype: float\n```\n\n----------------------------------------\n\nTITLE: Enable Freestyle rendering\nDESCRIPTION: This option enables Freestyle, an advanced edges rendering feature.  When enabled, it integrates the Freestyle rendering engine into the project. No specific dependencies are mentioned other than the Freestyle library itself.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_FREESTYLE \"Enable Freestyle (advanced edges rendering)\" ON)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Freestyle\nDESCRIPTION: This code snippet conditionally compiles code for Freestyle integration if the WITH_FREESTYLE flag is enabled. It adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the asset system library. `INC` is a variable that contains the list of directories to be included when compiling the library. It includes the current directory (.), `intern`, and `intern/library_types`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/asset_system/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n  intern/library_types\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Lists the C++ source and header files that make up the bf_python_ext library.  These files contain the implementation of the Python module, including API bindings and utility functions. The header files declare the functions and classes used within the module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  bgl.cc\n  bl_math_py_api.cc\n  blf_py_api.cc\n  bpy_threads.cc\n  bpy_internal_import.cc\n  idprop_py_api.cc\n  idprop_py_ui_api.cc\n  imbuf_py_api.cc\n  py_capi_rna.cc\n  py_capi_utils.cc\n\n  bgl.hh\n  bl_math_py_api.hh\n  blf_py_api.hh\n  bpy_internal_import.hh\n  idprop_py_api.hh\n  idprop_py_ui_api.hh\n  imbuf_py_api.hh\n  py_capi_rna.hh\n  py_capi_utils.hh\n\n  # header-only\n  python_compat.hh\n  python_utildefines.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Scene Actuator Error Warning\nDESCRIPTION: This code snippet shows the warning message that is displayed in the console when a Scene Actuator attempts to use a scene name that doesn't exist or is empty at the start of the game. The actuator will be ignored and the specified error message is printed to the console. This helps users identify and fix configuration errors in their game logic.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_SceneActuator.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nError: GameObject 'Name' has a SceneActuator 'ActuatorName' (SetScene) without scene\n```\n\n----------------------------------------\n\nTITLE: Object Name Lookup - Local and Library Data\nDESCRIPTION: This code demonstrates different methods for looking up objects by name in Blender, differentiating between local objects and library data.  It shows how to specify the library path when referencing library data to avoid naming collisions and how to exclude library data when looking for local objects.  This is important when dealing with linked data from external blend files.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Typical name lookup, could be local or library.\nobj = bpy.data.objects[\"my_obj\"]\n\n# Library object name lookup using a pair,\n# where the second argument is the library path matching bpy.types.Library.filepath.\nobj = bpy.data.objects[\"my_obj\", \"//my_lib.blend\"]\n\n# Local object name look up using a pair,\n# where the second argument excludes library data from being returned.\nobj = bpy.data.objects[\"my_obj\", None]\n\n# Both the examples above also works for `get`.\nobj = bpy.data.objects.get((\"my_obj\", None))\n```\n\n----------------------------------------\n\nTITLE: Checking Python Header\nDESCRIPTION: This snippet ensures that the Python header file is found. If it's missing, it issues a fatal error prompting the user to set the PYTHON_INCLUDE_DIR cache entry to a valid path. This is essential when using a fixed Python version to avoid detection failures.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_131\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  if(NOT EXISTS \"${PYTHON_INCLUDE_DIR}/Python.h\")\n    message(\n      FATAL_ERROR\n      \"Missing: \\\"${PYTHON_INCLUDE_DIR}/Python.h\\\",\\n\"\n      \"Set the cache entry 'PYTHON_INCLUDE_DIR' to point \"\n      \"to a valid python include path. Containing \"\n      \"Python.h for python version \\\"${PYTHON_VERSION}\\\"\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: OpenVDB ABI Compatibility Option\nDESCRIPTION: This snippet defines the WITH_OPENVDB_3_ABI_COMPATIBLE option to indicate OpenVDB library ABI compatibility. It allows users to specify that the OpenVDB library has been compiled with version 3 ABI compatibility.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_OPENVDB_3_ABI_COMPATIBLE \"\\\nAssume OpenVDB library has been compiled with version 3 ABI compatibility\" \n  OFF\n)\nmark_as_advanced(WITH_OPENVDB_3_ABI_COMPATIBLE)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGL Source Files (CMake)\nDESCRIPTION: This snippet defines the source files specifically for the OpenGL backend. It includes implementations for OpenGL-specific features such as batch processing, compute shaders, context management, debugging, framebuffers, immediate mode rendering, index buffers, queries, shaders, state management, storage buffers, textures, uniform buffers, vertex arrays, and vertex buffers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(OPENGL_SRC\n\n  opengl/gl_backend.cc\n  opengl/gl_batch.cc\n  opengl/gl_compilation_subprocess.cc\n  opengl/gl_compute.cc\n  opengl/gl_context.cc\n  opengl/gl_debug.cc\n  opengl/gl_debug_layer.cc\n  opengl/gl_framebuffer.cc\n  opengl/gl_immediate.cc\n  opengl/gl_index_buffer.cc\n  opengl/gl_query.cc\n  opengl/gl_shader.cc\n  opengl/gl_shader_interface.cc\n  opengl/gl_shader_log.cc\n  opengl/gl_state.cc\n  opengl/gl_storage_buffer.cc\n  opengl/gl_texture.cc\n  opengl/gl_uniform_buffer.cc\n  opengl/gl_vertex_array.cc\n  opengl/gl_vertex_buffer.cc\n\n  opengl/gl_backend.hh\n  opengl/gl_batch.hh\n  opengl/gl_compilation_subprocess.hh\n  opengl/gl_compute.hh\n  opengl/gl_context.hh\n  opengl/gl_debug.hh\n  opengl/gl_framebuffer.hh\n  opengl/gl_immediate.hh\n  opengl/gl_index_buffer.hh\n  opengl/gl_primitive.hh\n  opengl/gl_query.hh\n  opengl/gl_shader.hh\n  opengl/gl_shader_interface.hh\n  opengl/gl_state.hh\n  opengl/gl_storage_buffer.hh\n  opengl/gl_texture.hh\n  opengl/gl_uniform_buffer.hh\n  opengl/gl_vertex_array.hh\n  opengl/gl_vertex_buffer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Suppressing Strict C Compiler Flags\nDESCRIPTION: This snippet uses the `add_check_c_compiler_flags` CMake function to remove strict compiler flags. It effectively disables certain C compiler warnings by adding `-Wno-` flags, promoting more relaxed compilation settings.  This is helpful in cases where strict warnings impede development or compatibility.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_123\n\nLANGUAGE: CMake\nCODE:\n```\nadd_check_c_compiler_flags(\n    C_REMOVE_STRICT_FLAGS\n\n    C_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n    C_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    C_WARN_NO_UNUSED_MACROS -Wno-unused-macros\n    C_WARN_NO_MISLEADING_INDENTATION -Wno-misleading-indentation\n\n    C_WARN_NO_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations\n    C_WARN_NO_INCOMPAT_PTR_DISCARD_QUAL -Wno-incompatible-pointer-types-discards-qualifiers\n    C_WARN_NO_UNUSED_FUNCTION -Wno-unused-function\n    C_WARN_NO_INT_TO_VOID_POINTER_CAST -Wno-int-to-void-pointer-cast\n    C_WARN_NO_MISSING_PROTOTYPES -Wno-missing-prototypes\n    C_WARN_NO_DUPLICATE_ENUM -Wno-duplicate-enum\n    C_WARN_NO_UNDEF -Wno-undef\n    C_WARN_NO_MISSING_NORETURN -Wno-missing-noreturn\n    C_WARN_NO_UNUSED_BUT_SET_VARIABLE -Wno-unused-but-set-variable\n)\n```\n\n----------------------------------------\n\nTITLE: Consistency Check for Memory Manager\nDESCRIPTION: This function tests if the internal structures of the memory manager are intact. It helps detect corruption or inconsistencies within the memory management system itself, crucial for ensuring stability and preventing crashes. It returns 0 on success and !=0 on error.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nbool MEM_consistency_check(void);\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (Audaspace Support)\nDESCRIPTION: This snippet conditionally defines `-DWITH_AUDASPACE` and appends the Audaspace include directories and libraries to `INC_SYS` and `LIB` lists if `WITH_AUDASPACE` is enabled. This enables Audaspace audio support, allowing the game engine to handle audio playback and manipulation. Requires `AUDASPACE_C_INCLUDE_DIRS`, `AUDASPACE_C_LIBRARIES`, and `AUDASPACE_PY_LIBRARIES` to be set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${AUDASPACE_C_LIBRARIES}\n    ${AUDASPACE_PY_LIBRARIES}\n  )\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Module Definitions in CMake\nDESCRIPTION: This snippet defines the `WITH_PYTHON_MODULE` option and adds a preprocessor definition if enabled. It conditionally creates a shared library (`blender`) or executable depending on the option. The MODULE type is used for MacOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\n\n  # Creates `./bpy/__init__.so` which can be imported as a Python module.\n  #\n  # Note that 'SHARED' works on Linux and Windows, but not MACOS which _must_ be 'MODULE'.\n  add_library(blender MODULE ${SRC})\n\n\n  get_property(GENERATOR_IS_MULTI_CONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\n  if(GENERATOR_IS_MULTI_CONFIG)\n    set(BPY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/$<CONFIG>/bpy)\n  else()\n    set(BPY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/bpy)\n  endif()\n\n  set_target_properties(\n    blender\n    PROPERTIES\n      PREFIX \"\"\n      OUTPUT_NAME __init__\n      LIBRARY_OUTPUT_DIRECTORY ${BPY_OUTPUT_DIRECTORY}\n      RUNTIME_OUTPUT_DIRECTORY ${BPY_OUTPUT_DIRECTORY}\n  )\n  unset(BPY_OUTPUT_DIRECTORY)\n\n  if(APPLE)\n    set_target_properties(blender PROPERTIES MACOSX_BUNDLE TRUE)\n    if(WITH_BLENDER_THUMBNAILER)\n      set_target_properties(blender-thumbnailer PROPERTIES MACOSX_BUNDLE TRUE)\n    endif()\n  endif()\n\n  if(WIN32)\n    # Python modules use this.\n    set_target_properties(\n      blender\n      PROPERTIES\n      SUFFIX \".pyd\"\n    )\n  endif()\n\nelse()\n  add_executable(blender ${EXETYPE} ${SRC})\n  if(WITH_CPU_CHECK)\n    # blender_cpu_check *NEEDS* to be linked first, there can be no exceptions\n    # to this, this is to ensure this will be the first code to run once the\n    # blender binary has been loaded by the OS.\n    target_link_libraries(blender PRIVATE blender_cpu_check)\n  endif()\n  if(WIN32)\n    add_executable(blender-launcher WIN32\n      blender_launcher_win32.c\n      ${CMAKE_SOURCE_DIR}/release/windows/icons/winblender.rc\n    )\n    if(NOT WITH_WINDOWS_EXTERNAL_MANIFEST)\n      target_sources(blender-launcher PRIVATE\n        ${CMAKE_BINARY_DIR}/blender.exe.manifest\n      )\n    endif()\n    target_compile_definitions(blender-launcher PRIVATE -D_UNICODE -DUNICODE)\n    target_link_libraries(blender-launcher Pathcch.lib)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries - CMake\nDESCRIPTION: Defines the libraries that the Cycles library depends on. This includes Blender's internal libraries (blenkernel, blenlib, dna, imbuf, gpu, guardedalloc, render), Cycles-specific libraries, and external libraries like Epoxy and Python. Linking these dependencies makes their functions and data available to the Cycles code.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  cycles_bvh\n  cycles_device\n  cycles_graph\n  cycles_kernel\n  cycles_scene\n  cycles_session\n  cycles_subd\n  cycles_util\n\n  ${Epoxy_LIBRARIES}\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Mapping Depth Values with glDepthRange (bgl)\nDESCRIPTION: Specifies the mapping of depth values from normalized device coordinates to window coordinates. 'zNear' maps the near clipping plane, and 'zFar' maps the far clipping plane.  This function controls the depth range used for rendering.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glDepthRange(zNear, zFar)\n```\n\n----------------------------------------\n\nTITLE: Getting Object Depth in Camera View - Python\nDESCRIPTION: This code snippet calculates the depth of an object in relation to the active camera within a Blender Game Engine (BGE) scene using Python. It retrieves the current controller's owner (the object running the script) and the active camera from the current scene.  It then computes the depth based on the object's position and the camera's world-to-camera matrix. Depth values are negative, decreasing further from the camera. Requires the 'bge' module.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Get the depth of an object in the camera view.\nfrom bge import logic\n\nobject = logic.getCurrentController().owner\ncam = logic.getCurrentScene().active_camera\n\n# Depth is negative and decreasing further from the camera\ndepth = object.position[0]*cam.world_to_camera[2][0] + object.position[1]*cam.world_to_camera[2][1] + object.position[2]*cam.world_to_camera[2][2] + cam.world_to_camera[2][3]\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Source Files - CMake\nDESCRIPTION: This snippet lists the GLSL shader files used by the compositor nodes. These shaders define the image processing algorithms executed on the GPU for various compositing operations, including blurs, masks, color corrections, distortions, and other visual effects. The large number of shader files indicates the complexity and breadth of the compositing functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_SRC\n  shaders/compositor_alpha_crop.glsl\n  shaders/compositor_bilateral_blur.glsl\n  shaders/compositor_bokeh_blur.glsl\n  shaders/compositor_bokeh_blur_variable_size.glsl\n  shaders/compositor_bokeh_image.glsl\n  shaders/compositor_box_mask.glsl\n  shaders/compositor_compute_preview.glsl\n  shaders/compositor_convert.glsl\n  shaders/compositor_cryptomatte_image.glsl\n  shaders/compositor_cryptomatte_matte.glsl\n  shaders/compositor_cryptomatte_pick.glsl\n  shaders/compositor_defocus_blur.glsl\n  shaders/compositor_defocus_radius_from_depth.glsl\n  shaders/compositor_defocus_radius_from_scale.glsl\n  shaders/compositor_despeckle.glsl\n  shaders/compositor_deriche_gaussian_blur.glsl\n  shaders/compositor_deriche_gaussian_blur_sum.glsl\n  shaders/compositor_directional_blur.glsl\n  shaders/compositor_displace.glsl\n  shaders/compositor_double_edge_mask_compute_boundary.glsl\n  shaders/compositor_double_edge_mask_compute_gradient.glsl\n  shaders/compositor_edge_filter.glsl\n  shaders/compositor_ellipse_mask.glsl\n  shaders/compositor_filter.glsl\n  shaders/compositor_flip.glsl\n  shaders/compositor_gamma_correct.glsl\n  shaders/compositor_glare_bloom_downsample.glsl\n  shaders/compositor_glare_bloom_upsample.glsl\n  shaders/compositor_glare_ghost_accumulate.glsl\n  shaders/compositor_glare_ghost_base.glsl\n  shaders/compositor_glare_highlights.glsl\n  shaders/compositor_glare_mix.glsl\n  shaders/compositor_glare_simple_star_anti_diagonal_pass.glsl\n  shaders/compositor_glare_simple_star_diagonal_pass.glsl\n  shaders/compositor_glare_simple_star_horizontal_pass.glsl\n  shaders/compositor_glare_simple_star_vertical_pass.glsl\n  shaders/compositor_glare_streaks_accumulate.glsl\n  shaders/compositor_glare_streaks_filter.glsl\n  shaders/compositor_glare_write_glare_output.glsl\n  shaders/compositor_glare_write_highlights_output.glsl\n  shaders/compositor_id_mask.glsl\n  shaders/compositor_image_crop.glsl\n  shaders/compositor_inpaint_compute_boundary.glsl\n  shaders/compositor_inpaint_compute_region.glsl\n  shaders/compositor_inpaint_fill_region.glsl\n  shaders/compositor_jump_flooding.glsl\n  shaders/compositor_keying_compute_image.glsl\n  shaders/compositor_keying_compute_matte.glsl\n  shaders/compositor_keying_extract_chroma.glsl\n  shaders/compositor_keying_replace_chroma.glsl\n  shaders/compositor_keying_screen.glsl\n  shaders/compositor_keying_tweak_matte.glsl\n  shaders/compositor_kuwahara_anisotropic.glsl\n  shaders/compositor_kuwahara_anisotropic_compute_structure_tensor.glsl\n  shaders/compositor_kuwahara_classic.glsl\n  shaders/compositor_map_uv_anisotropic.glsl\n  shaders/compositor_map_uv_nearest_neighbour.glsl\n  shaders/compositor_morphological_blur.glsl\n  shaders/compositor_morphological_distance.glsl\n  shaders/compositor_morphological_distance_feather.glsl\n  shaders/compositor_morphological_distance_threshold.glsl\n  shaders/compositor_morphological_step.glsl\n  shaders/compositor_motion_blur.glsl\n  shaders/compositor_motion_blur_max_velocity_dilate.glsl\n  shaders/compositor_movie_distortion.glsl\n  shaders/compositor_normalize.glsl\n  shaders/compositor_parallel_reduction.glsl\n  shaders/compositor_pixel_coordinates.glsl\n  shaders/compositor_pixelate.glsl\n  shaders/compositor_plane_deform_anisotropic.glsl\n  shaders/compositor_plane_deform_mask.glsl\n  shaders/compositor_plane_deform_motion_blur.glsl\n  shaders/compositor_plane_deform_motion_blur_mask.glsl\n  shaders/compositor_plane_deform.glsl\n  shaders/compositor_premultiply_alpha.glsl\n  shaders/compositor_projector_lens_distortion.glsl\n  shaders/compositor_read_input.glsl\n  shaders/compositor_realize_on_domain.glsl\n  shaders/compositor_scale_variable.glsl\n  shaders/compositor_screen_lens_distortion.glsl\n  shaders/compositor_smaa_blending_weight_calculation.glsl\n  shaders/compositor_smaa_edge_detection.glsl\n  shaders/compositor_smaa_neighborhood_blending.glsl\n  shaders/compositor_split.glsl\n  shaders/compositor_summed_area_table_compute_complete_blocks.glsl\n  shaders/compositor_summed_area_table_compute_complete_x_prologues.glsl\n  shaders/compositor_summed_area_table_compute_complete_y_prologues.glsl\n  shaders/compositor_summed_area_table_compute_incomplete_prologues.glsl\n  shaders/compositor_sun_beams.glsl\n  shaders/compositor_symmetric_blur.glsl\n  shaders/compositor_symmetric_blur_variable_size.glsl\n  shaders/compositor_symmetric_separable_blur.glsl\n  shaders/compositor_symmetric_separable_blur_variable_size.glsl\n  shaders/compositor_texture_coordinates.glsl\n  shaders/compositor_tone_map_photoreceptor.glsl\n  shaders/compositor_tone_map_simple.glsl\n  shaders/compositor_translate_wrapped.glsl\n  shaders/compositor_van_vliet_gaussian_blur.glsl\n  shaders/compositor_van_vliet_gaussian_blur_sum.glsl\n  shaders/compositor_write_output.glsl\n  shaders/compositor_z_combine_compute_mask.glsl\n  shaders/compositor_z_combine_from_mask_depth.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Ninja Parallel Job Limits\nDESCRIPTION: This snippet determines the default number of parallel compile, heavy compile, and link jobs for the Ninja build system based on the available system cores and memory. It uses `cmake_host_system_information` to get the number of logical cores and total physical memory, then applies heuristics to calculate the number of jobs, capping them to prevent resource exhaustion.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_108\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS AND\n     NOT NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS AND\n     NOT NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n    # Try to define good default values.\n    # Max mem of heavy cpp files compilation: about 2.5GB\n    # Max mem during linking: about 3.3GB\n    cmake_host_system_information(RESULT _NUM_CORES QUERY NUMBER_OF_LOGICAL_CORES)\n    # Note: this gives mem in MB.\n    cmake_host_system_information(RESULT _TOT_MEM QUERY TOTAL_PHYSICAL_MEMORY)\n\n    # Heuristics: Assume 8Gb of RAM is needed per heavy compile job.\n    # Typical RAM peak usage of these is actually less than 3GB currently,\n    # but this also accounts for the part of the physical RAM being used by other unrelated\n    # processes on the system, and the part being used by the 'regular' compile and linking jobs.\n    #\n    # Also always cap heavy jobs amount to `number of available threads - 1`,\n    # to ensure that even if there would be enough RAM, the machine never ends up\n    # handling only heavy jobs at some point.\n    # This can have annoying sides effects, like lack of output in the console for several\n    # minutes, which can lead to a wrong detection of 'unresponsive' state by the build-bots e.g.\n    #\n    # Currently, these settings applied to a 64GB/16threads linux machine will use,\n    # for a full build:\n    #   - release build:\n    #      * RAM: typically less than 20%, with some peaks at 25%.\n    #      * CPU: over 90% of usage on average over the whole build time.\n    #   - debug with ASAN build:\n    #      * RAM: typically less than 40%, with some peaks at 50%.\n    #      * CPU: over 90% of usage on average over the whole build time.\n    math(EXPR _compile_heavy_jobs \"${_TOT_MEM} / 8000\")\n    math(EXPR _compile_heavy_jobs_max \"${_NUM_CORES} - 1\")\n    if(${_compile_heavy_jobs} GREATER ${_compile_heavy_jobs_max})\n      set(_compile_heavy_jobs ${_compile_heavy_jobs_max})\n    elseif(${_compile_heavy_jobs} LESS 1)\n      set(_compile_heavy_jobs 1)\n    endif()\n    set(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS \"${_compile_heavy_jobs}\" CACHE STRING \"\\\nDefine the maximum number of concurrent heavy compilation jobs, for ninja build system \\\n(used for some targets which cpp files can take several GB each during compilation).\"\n      FORCE\n    )\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS)\n    set(_compile_heavy_jobs)\n    set(_compile_heavy_jobs_max)\n\n    # Heuristics: Assume 2Gb of RAM is needed per heavy compile job.\n    # Typical RAM peak usage of these is actually way less than 1GB usually,\n    # but this also accounts for the part of the physical RAM being used by other unrelated\n    # processes on the system, and the part being used by the 'heavy' compile and linking jobs.\n    #\n    # If there are 'enough' cores available, cap the maximum number of regular jobs to\n    # `number of cores - 1`, otherwise allow using all cores if there is enough RAM available.\n    # This allows to ensure that the heavy jobs won't get starved by too many normal jobs,\n    # since the former usually take a long time to process.\n    math(EXPR _compile_jobs \"${_TOT_MEM} / 2000\")\n    if(${_NUM_CORES} GREATER 3)\n      math(EXPR _compile_jobs_max \"${_NUM_CORES} - 1\")\n    else()\n      set(_compile_jobs_max ${_NUM_CORES})\n    endif()\n    if(${_compile_jobs} GREATER ${_compile_jobs_max})\n      set(_compile_jobs ${_compile_jobs_max})\n    elseif(${_compile_jobs} LESS 1)\n      set(_compile_jobs 1)\n    endif()\n    set(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS \"${_compile_jobs}\" CACHE STRING\n        \"Define the maximum number of concurrent compilation jobs, for ninja build system.\" FORCE)\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS)\n    set(_compile_jobs)\n    set(_compile_jobs_max)\n\n    # In practice, even when there is RAM available,\n    # this proves to be quicker than running in parallel (due to slow disks accesses).\n    set(NINJA_MAX_NUM_PARALLEL_LINK_JOBS \"1\" CACHE STRING\n        \"Define the maximum number of concurrent link jobs, for ninja build system.\" FORCE)\n    mark_as_advanced(NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n\n    set(_NUM_CORES)\n    set(_TOT_MEM)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding GCC C++ Compiler Flags\nDESCRIPTION: This snippet defines C++ compiler flags using `add_check_cxx_compiler_flags` for the GNU GCC compiler. Similar to the C flags, it enables a range of warnings, including `-Wall`, `-Wuninitialized`, and `-Wredundant-decls`. Certain warnings like `-Wno-sign-compare` and `-Wno-invalid-offsetof` are disabled. The flags are aimed at enforcing coding standards and preventing potential runtime errors.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_112\n\nLANGUAGE: CMake\nCODE:\n```\n  add_check_cxx_compiler_flags(\n    CXX_WARNINGS\n\n    CXX_WARN_UNINITIALIZED -Wuninitialized\n    CXX_WARN_REDUNDANT_DECLS -Wredundant-decls\n\n    CXX_WARN_ALL -Wall\n    CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n    CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n    CXX_WARN_LOGICAL_OP -Wlogical-op\n\n    # Needs: `-Wuninitialized`.\n    CXX_WARN_INIT_SELF -Winit-self\n\n    CXX_WARN_MISSING_INCLUDE_DIRS -Wmissing-include-dirs\n    CXX_WARN_NO_DIV_BY_ZERO -Wno-div-by-zero\n    CXX_WARN_TYPE_LIMITS -Wtype-limits\n    CXX_WARN_ERROR_RETURN_TYPE -Werror=return-type\n    CXX_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n    CXX_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    CXX_WARN_POINTER_ARITH -Wpointer-arith\n    CXX_WARN_UNUSED_PARAMETER -Wunused-parameter\n    CXX_WARN_WRITE_STRINGS -Wwrite-strings\n    CXX_WARN_UNDEF -Wundef\n    CXX_WARN_COMMA_SUBSCRIPT -Wcomma-subscript\n    CXX_WARN_FORMAT_SIGN -Wformat-signedness\n    CXX_WARN_RESTRICT -Wrestrict\n    CXX_WARN_NO_SUGGEST_OVERRIDE -Wno-suggest-override\n    CXX_WARN_UNINITIALIZED -Wuninitialized\n\n    # NOTE(@ideasman42): In GCC 13.2.1 on Linux this causes internal compiler errors.\n    # The crashes can be resolved by disabling the flag per module (but not via pragmas).\n    # However this also causes a type mix-up FreeStyle  (Blender & FreeStyle's `Curve`)\n    # so it seems to impact GCC's the internal state enough that it's too risky to enable.\n    # When this is resolved the check can be enabled for fixed GCC versions.\n    #\n    # Prevents linking errors with MSVC.\n    # `CXX_WARN_MISMATCHED_TAGS -Wmismatched-tags`\n\n    # Useful but too many false positives and inconvenient to suppress each occurrence.\n    CXX_WARN_NO_STRINGOP_OVERREAD -Wno-stringop-overread\n    CXX_WARN_NO_STRINGOP_OVERFLOW -Wno-stringop-overflow\n\n    # Use `[[fallthrough]]` or `ATTR_FALLTHROUGH` macro to suppress.\n    CXX_WARN_IMPLICIT_FALLTHROUGH -Wimplicit-fallthrough=5\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Inclusion with CMake\nDESCRIPTION: Conditionally includes the `audaspace` library if `WITH_AUDASPACE` is enabled and `WITH_SYSTEM_AUDASPACE` is not enabled. It sets the `AUDASPACE_CMAKE_CFG` variable to point to a custom CMake configuration file for audaspace, sets `LIB_SUFFIX` to an empty string to avoid uninitialized warnings, adds the subdirectory, and then unsets `LIB_SUFFIX`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE AND NOT WITH_SYSTEM_AUDASPACE)\n  set(AUDASPACE_CMAKE_CFG ${CMAKE_CURRENT_SOURCE_DIR}/audaspace/blender_config.cmake)\n  set(LIB_SUFFIX \"\")  # Quiet uninitialized warning.\n  add_subdirectory(audaspace)\n  unset(LIB_SUFFIX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cycles HIPRT Compilation\nDESCRIPTION: This section configures the compilation of HIPRT kernels, including setting up compilation commands, flags, and dependencies. It defines parameters for parallel compilation jobs and adds conditional compilation flags based on whether NANOVDB or Cycles Debug are enabled.  It also sets architecture-specific flags before calling add_custom_command to compile and compress the HIPRT kernels.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_HIP_BINARIES AND WITH_CYCLES_DEVICE_HIPRT)\n  set(HIPRT_COMPILER_PARALLEL_JOBS 1 CACHE STRING \"Number of parallel compiler instances to use for HIP-RT kernels\")\n  mark_as_advanced(HIPRT_COMPILER_PARALLEL_JOBS)\n\n  if(WIN32)\n    set(hiprt_compile_command ${CMAKE_COMMAND})\n    set(hiprt_compile_flags\n      -E env \"HIP_PATH=${HIP_ROOT_DIR}\"\n      ${HIP_HIPCC_EXECUTABLE})\n  else()\n    set(hiprt_compile_command ${HIP_HIPCC_EXECUTABLE})\n    set(hiprt_compile_flags)\n  endif()\n\n  if(WITH_NANOVDB)\n    set(hiprt_compile_flags ${hiprt_compile_flags} -D WITH_NANOVDB)\n  endif()\n\n  if(WITH_CYCLES_DEBUG)\n    set(hiprt_compile_flags ${hiprt_compile_flags} -D WITH_CYCLES_DEBUG)\n  endif()\n\n  if(WIN32 AND (${HIP_VERSION} STREQUAL \"6.1.40252\"))\n    message(WARNING \"HIP SDK ${HIP_VERSION} has known rendering artifacts with HIPRT. 5.7 is recommended instead\")\n  endif()\n\n  set(hiprt_sources device/hiprt/kernel.cpp\n    ${SRC_KERNEL_HEADERS}\n    ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n    ${SRC_KERNEL_DEVICE_HIPRT_HEADERS}\n    ${SRC_UTIL_HEADERS}\n  )\n\n  set(kernel_sources ${hiprt_sources})\n  set(hiprt_kernel_src \"/device/hiprt/kernel.cpp\")\n  set(hiprt_compile_flags\n    ${hiprt_compile_flags}\n    ${HIP_HIPCC_FLAGS}\n    ${CMAKE_CURRENT_SOURCE_DIR}${hiprt_kernel_src}\n    -D CCL_NAMESPACE_BEGIN=\n    -D CCL_NAMESPACE_END=\n    -D HIPCC\n    -D __HIPRT__\n    -std=c++17\n    -mllvm\n    -amdgpu-early-inline-all=false\n    -mllvm\n    -amdgpu-function-calls=true\n    -parallel-jobs=${HIPRT_COMPILER_PARALLEL_JOBS}\n    --genco\n    -I ${CMAKE_CURRENT_SOURCE_DIR}/..\n    -I ${CMAKE_CURRENT_SOURCE_DIR}/device/hiprt\n    -I ${HIPRT_INCLUDE_DIR}\n    -Wno-parentheses-equality\n    -Wno-unused-value\n    -ffast-math\n  )\n\n  set(hiprt_hipfb)\n  foreach(arch ${CYCLES_HIP_BINARIES_ARCH})\n    get_hip_math_flag(${arch} math_flag)\n    set(hiprt_file ${CMAKE_CURRENT_BINARY_DIR}/kernel_rt_${arch}.hipfb)\n    set(hiprt_file_compressed ${hiprt_file}.zst)\n    set(hiprt_flags\n    ${hiprt_compile_flags}\n    ${math_flag}\n    --offload-arch=${arch}\n    -o ${hiprt_file})\n\n    add_custom_command(\n      OUTPUT  ${hiprt_file}\n      COMMAND ${hiprt_compile_command} ${hiprt_flags}\n      DEPENDS ${kernel_sources}\n    )\n    add_custom_command(\n      OUTPUT ${hiprt_file_compressed}\n      COMMAND \"$<TARGET_FILE:zstd_compress>\" ${hiprt_file} ${hiprt_file_compressed}\n      DEPENDS ${hiprt_file}\n    )\n    delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}\" \"${hiprt_file_compressed}\" ${CYCLES_INSTALL_PATH}/lib)\n    list(APPEND hiprt_hipfb ${hiprt_file_compressed})\n  endforeach()\n\n  add_custom_target(cycles_kernel_hiprt ALL DEPENDS ${hiprt_hipfb})\n  cycles_set_solution_folder(cycles_kernel_hiprt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the io_common library. It takes the library name, source files, include directories, and library dependencies as arguments. This command is crucial for building the actual library from the specified sources and dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/common/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_common \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Creating the 'extern_bullet' Library Target\nDESCRIPTION: This snippet creates a library target named 'extern_bullet' using the 'blender_add_lib' function. It includes source files (SRC), include directories (INC), system include directories (INC_SYS), and other libraries (LIB). The exact behavior of 'blender_add_lib' is project-specific but likely handles the library creation and linking process.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_bullet \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines the library dependencies for bf_python_bmesh. It specifies both internal Blender libraries (e.g., bf::blenkernel, bf::bmesh) and Python-related libraries and link flags. The PRIVATE keyword indicates that these dependencies are not exposed to libraries that link against bf_python_bmesh.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/bmesh/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  bf_python_mathutils\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the USD I/O Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the bf_io_usd library, which represents the USD I/O functionality. It specifies the source files (SRC), include directories (INC), system include directories (INC_SYS), and linked libraries (LIB) that are required to build the library. Also adds a dependency to bf_rna.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_usd \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_io_usd bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Defining Python Addon Files - CMake\nDESCRIPTION: Specifies the Python files that constitute the Cycles Blender addon. These files define the user interface, operators, and engine integration aspects of Cycles within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(ADDON_FILES\n  addon/__init__.py\n  addon/camera.py\n  addon/engine.py\n  addon/operators.py\n  addon/osl.py\n  addon/presets.py\n  addon/properties.py\n  addon/ui.py\n  addon/version_update.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories Conditionally (Cycles)\nDESCRIPTION: This snippet conditionally adds subdirectories relevant to the Cycles renderer based on the WITH_CYCLES_STANDALONE or WITH_CYCLES_HYDRA_RENDER_DELEGATE options. It includes directories like 'intern/atomic', 'intern/cycles', and external libraries like 'gflags' and 'glog' if certain conditions (e.g., WITH_CYCLES_LOGGING) are met.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_141\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(WITH_CYCLES_STANDALONE OR WITH_CYCLES_HYDRA_RENDER_DELEGATE)\n  add_subdirectory(intern/atomic)\n  add_subdirectory(intern/guardedalloc)\n  add_subdirectory(intern/libc_compat)\n  add_subdirectory(intern/sky)\n\n  add_subdirectory(intern/cycles)\n  if(WITH_CYCLES_LOGGING)\n    if(NOT WITH_SYSTEM_GFLAGS)\n      add_subdirectory(extern/gflags)\n    endif()\n    add_subdirectory(extern/glog)\n  endif()\n  if(WITH_CUDA_DYNLOAD)\n    add_subdirectory(extern/cuew)\n  endif()\n  if(WITH_HIP_DYNLOAD)\n    add_subdirectory(extern/hipew)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Playback Status with aud.Handle\nDESCRIPTION: This snippet checks the playback status of a sound using the aud.Handle.status property within a while loop.  It sleeps for 0.1 seconds in each iteration, effectively waiting until the sound has finished playing. Requires an aud.Handle object obtained from aud.Device.play().\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwhile handle.status:\n\ttime.sleep(0.1)\n```\n\n----------------------------------------\n\nTITLE: Setting and Warning Dependency - CMake\nDESCRIPTION: This snippet uses a `set_and_warn_dependency` macro (not defined in the extract but assumed to exist) to manage dependencies between build options. It takes two options as input.  If the first option is enabled and the second is not, it warns the user and disables the first option. This helps ensure that dependencies are met and that the build process doesn't proceed with missing requirements.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_82\n\nLANGUAGE: CMake\nCODE:\n```\nset_and_warn_dependency(WITH_AUDASPACE WITH_OPENAL OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_COREAUDIO OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_JACK OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_PULSEAUDIO OFF)\nset_and_warn_dependency(WITH_AUDASPACE WITH_WASAPI OFF)\n```\n\n----------------------------------------\n\nTITLE: Further Conditional Definitions\nDESCRIPTION: This section adds more preprocessor definitions based on various feature flags such as FFMPEG, FFTW3, Fluid, OceanSim, SDL, OpenAL, CoreAudio, JACK, PulseAudio, WASAPI, OpenCollada, Internationalization, Alembic, Bullet, Freestyle, OpenSubdiv, OpenVDB, NDOF input, XR OpenXR, and rendering backends.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WITH_FFTW3)\n  add_definitions(-DWITH_FFTW3)\nendif()\n\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n\nif(WITH_MOD_OCEANSIM)\n  add_definitions(-DWITH_OCEANSIM)\nendif()\n\nif(WITH_SDL)\n  add_definitions(-DWITH_SDL)\nendif()\n\nif(WITH_OPENAL)\n  add_definitions(-DWITH_OPENAL)\nendif()\n\nif(WITH_COREAUDIO)\n  add_definitions(-DWITH_COREAUDIO)\nendif()\n\nif(WITH_JACK)\n  add_definitions(-DWITH_JACK)\nendif()\n\nif(WITH_PULSEAUDIO)\n  add_definitions(-DWITH_PULSEAUDIO)\nendif()\n\nif(WITH_WASAPI)\n  add_definitions(-DWITH_WASAPI)\nendif()\n\nif(WITH_OPENCOLLADA)\n  add_definitions(-DWITH_COLLADA)\nendif()\n\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n\nif(WITH_ALEMBIC)\n  list(APPEND INC\n    ../../io/alembic\n  )\n  add_definitions(-DWITH_ALEMBIC)\nendif()\n\nif(WITH_BULLET)\n  list(APPEND INC\n    ../../../../intern/rigidbody\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n\nif(WITH_FREESTYLE)\n  list(APPEND INC\n    ../../freestyle\n  )\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_OPENSUBDIV)\n  list(APPEND INC\n    ../../../../intern/opensubdiv\n  )\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB)\n\n  if(WITH_OPENVDB_BLOSC)\n    add_definitions(-DWITH_OPENVDB_BLOSC)\n  endif()\nendif()\n\nif(WITH_INPUT_NDOF)\n  add_definitions(-DWITH_INPUT_NDOF)\nendif()\n\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n\nif(WITH_OPENGL_BACKEND)\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n\nif(WITH_METAL_BACKEND)\n  add_definitions(-DWITH_METAL_BACKEND)\nendif()\n\nif(WITH_VULKAN_BACKEND)\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Bone Deform Property (Python)\nDESCRIPTION: This snippet demonstrates how to set the `use_deform` property of a bone.  This property can be edited in any mode. This example sets the `use_deform` property of the bone named \"Bone\" to `True`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object.data.bones[\"Bone\"].use_deform = True\n```\n\n----------------------------------------\n\nTITLE: Adding the IK Plugin Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the `bf_ikplugin` library. It takes the library name and the lists of source files, include directories, and libraries as arguments, effectively defining how the library is built.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_ikplugin \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Library - CMake\nDESCRIPTION: This CMake snippet uses the blender_add_lib macro to create the ge_expressions library. It passes the source files, include directories, and library dependencies to the macro, which handles the actual library creation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Expressions/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_expressions \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the Mantaflow module. It includes both internal and external directories, as well as directories for Python and Zlib dependencies. These directories are necessary to find the header files required for compilation.  The `INC` variable contains relative paths while `INC_SYS` contains relative and variable-based paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  extern\n  intern/strings\n)\n\n# Python is always required\nadd_definitions(-DWITH_PYTHON)\n\nset(INC_SYS\n  ../../extern/mantaflow/helper/util\n  ../../extern/mantaflow/helper/pwrapper\n  ../../extern/mantaflow/preprocessed\n  ${PYTHON_INCLUDE_DIRS}\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking VMA with CMake (CMake)\nDESCRIPTION: This snippet demonstrates how to use CMake to find and link the Vulkan Memory Allocator library to a target.  It uses `find_package` to locate the library and then `target_link_libraries` to link it to the target.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/README.md#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(VulkanMemoryAllocator CONFIG REQUIRED)\ntarget_link_libraries(YourGameEngine PRIVATE GPUOpen::VulkanMemoryAllocator)\n```\n\n----------------------------------------\n\nTITLE: Creating and Applying Effects to Sine Waves\nDESCRIPTION: This snippet creates two sine waves with different frequencies (880 Hz and 700 Hz) and applies effects such as limit, fadein, fadeout, and volume.  The effects are chained together to create the desired sound characteristics.  Requires the 'aud' module.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nhigh = aud.Sound.sine(880).limit(0, length).fadein(0, fadelength).fadeout(length - fadelength, length)\nlow = aud.Sound.sine(700).limit(0, length).fadein(0, fadelength).fadeout(length - fadelength, length).volume(0.6)\n```\n\n----------------------------------------\n\nTITLE: Defining add_node_discovery function\nDESCRIPTION: Defines a CMake function to generate a library that registers all nodes in the provided source files. It uses a Python script to discover nodes and generate the necessary registration code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_node_discovery\n  lib_name\n  sources\n  output_file\n  output_function\n  )\n\n  set(extra_args \"\")\n\n  # See `add_definitions(-DUSE_MAKEFILE_WORKAROUND)` comment for `makesrna`.\n  if(CMAKE_GENERATOR MATCHES \".*Unix Makefiles\")\n    set(extra_args \"--use-makefile-workaround\")\n  endif()\n\n  add_custom_command(\n    OUTPUT\n      ${output_file}\n    COMMAND\n      ${PYTHON_EXECUTABLE}\n        ${DISCOVER_NODES_PATH}\n        ${CMAKE_CURRENT_SOURCE_DIR}\n        ${output_file}\n        ${output_function}\n        ${sources}\n        ${extra_args}\n    DEPENDS\n      ${SRC}\n      ${DISCOVER_NODES_PATH}\n  )\n  set_source_files_properties(${output_file} PROPERTIES GENERATED TRUE)\n  add_library(${lib_name} ${output_file})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Blenderplayer Output Name\nDESCRIPTION: This snippet sets the output name of the `blenderplayer` target to `Blenderplayer`, with an uppercase 'B'. This is specifically done when the `WITH_PYTHON_MODULE` option is not enabled, suggesting this renaming is important when building an application bundle on macOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_PYTHON_MODULE)\n    # Uppercase name for app bundle\n    set_target_properties(blenderplayer PROPERTIES OUTPUT_NAME Blenderplayer)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Libraries\nDESCRIPTION: This snippet handles platform-specific library configuration. On Windows, it checks if Audaspace is standalone and sets up library paths accordingly. On other platforms, it includes the necessary libraries like `CMAKE_DL_LIBS` and `pthread`. The LIBRARY_PATH is cached for potential user overrides.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n\tset(LIBRARIES)\n\tif(AUDASPACE_STANDALONE)\n\t\tset(DLLS)\n\t\tset(LIBRARY_PATH \"../lib\" CACHE PATH \"Path which contains the libraries.\")\n\t\tfile(GLOB LIBRARY_DIRS ${LIBRARY_PATH}/*)\n\t\tlist(APPEND CMAKE_PREFIX_PATH ${LIBRARY_DIRS})\n\tendif()\nelse()\n\tset(LIBRARIES ${CMAKE_DL_LIBS} -lpthread)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Async LibLoad Callback Example (UPBGE)\nDESCRIPTION: This Python code demonstrates how to use the KX_LibLoadStatus class with an asynchronous LibLoad operation in UPBGE. It defines a callback function `finished_cb` that prints a message when the library is loaded, including the library name and the time taken. The `bge.logic.LibLoad` function is used to load the library asynchronously, and the `onFinish` attribute of the returned object is set to the callback function.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_LibLoadStatus.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# Print a message when an async LibLoad is done\nimport bge\n\ndef finished_cb(status):\n    print(\"Library (%s) loaded in %.2fms.\" % (status.libraryName, status.timeTaken))\n\nbge.logic.LibLoad('myblend.blend', 'Scene', asynchronous=True).onFinish = finished_cb\n```\n\n----------------------------------------\n\nTITLE: Adding Draw Tests\nDESCRIPTION: This snippet conditionally adds test files and include directories, and links the `gpu_tests` library if `WITH_GTESTS` and `WITH_GPU_DRAW_TESTS` are enabled. It then defines a test suite library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  if(WITH_GPU_DRAW_TESTS)\n    set(TEST_SRC\n      tests/draw_pass_test.cc\n      tests/draw_testing.cc\n      tests/eevee_test.cc\n\n      tests/draw_testing.hh\n    )\n    set(TEST_INC\n      ../../../intern/ghost\n      ../gpu/tests\n    )\n    set(TEST_LIB\n      gpu_tests\n    )\n    blender_add_test_suite_lib(draw \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake variables for SVG processing\nDESCRIPTION: This snippet initializes CMake lists to store the contents of SVG icons as C code. It prepares for iterating through SVG files and converting them into a format suitable for embedding in the application.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n    set(SVG_CONTENTS_H)\n    set(SVG_CONTENTS_C)\n    foreach(svg ${SVG_FILENAMES_NOEXT})\n      data_to_c_simple(../../../../release/datafiles/icons_svg/${svg}.svg SRC)\n      string(TOUPPER ${svg} svg_name_upper)\n      list(APPEND SVG_CONTENTS_H\n        \"extern const char datatoc_${svg}_svg[]\\;\n\"\n      )\n      list(APPEND SVG_CONTENTS_C\n        \"case ICON_${svg_name_upper}: return datatoc_${svg}_svg\\;\n\"\n      )\n    endforeach()\n    unset(svg_name_upper)\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Configuration CMake\nDESCRIPTION: This snippet conditionally configures Audaspace integration.  If `WITH_AUDASPACE` is enabled, it adds Audaspace include directories and libraries. It also defines the `WITH_AUDASPACE` preprocessor macro and conditionally defines `WITH_CONVOLUTION` if FFTW3 is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\n\n  if(WITH_FFTW3)\n    add_definitions(-DWITH_CONVOLUTION)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Efficient String Checking: startswith() (Python)\nDESCRIPTION: Demonstrates the use of `startswith()` for checking if a string starts with a specific substring. This method is faster and avoids potential errors.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nif line.startswith(\"vert \"):\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries to Link\nDESCRIPTION: This section defines the libraries to be linked with the USD I/O library. It includes Blender's internal libraries (blenkernel, blenlib, etc.), I/O common libraries, external libraries (fmtlib), node libraries, window manager libraries, and external dependencies like Boost Python, Python, USD, and TBB.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::animrig\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n\nlist(APPEND LIB\n  ${BOOST_PYTHON_LIBRARIES}\n  ${PYTHON_LIBRARIES}\n  ${USD_LIBRARIES}\n  ${TBB_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (OpenXR Support)\nDESCRIPTION: This snippet conditionally defines `-DWITH_XR_OPENXR` if `WITH_XR_OPENXR` is enabled. This enables support for the OpenXR standard for virtual reality and augmented reality applications.  Enables OpenXR support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Integration with CMake\nDESCRIPTION: This CMake code block handles Python integration, requiring both PythonLibs and NumPy. It uses `find_package` to locate them. If found, it appends the necessary include directories. It also checks for the Python interpreter if `WITH_PYTHON_MODULE` is set, and handles Python DLLs on Windows. Finally, it sets the `AUDASPACE_PY_LIBRARY`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n\tadd_definitions(-DWITH_PYTHON) #UPBGE\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(PythonLibs 3.2 ${PACKAGE_OPTION})\n\t\tfind_package(NumPy ${PACKAGE_OPTION})\n\tendif()\n\n\tif(PYTHONLIBS_FOUND AND NUMPY_FOUND)\n\t\tlist(APPEND INCLUDE ${PYTHON_INCLUDE_DIRS} ${NUMPY_INCLUDE_DIRS})\n\n\t\tif(WITH_PYTHON_MODULE)\n\t\t\tfind_package(PythonInterp 3.2 ${PACKAGE_OPTION})\n\n\t\t\tif(NOT PYTHONINTERP_FOUND)\n\t\t\t\tset(WITH_PYTHON_MODULE FALSE)\n\t\t\t\tmessage(WARNING \"Python interpreter not found, module will not be built.\")\n\t\t\tendif()\n\t\tendif()\n\n\t\tset(AUDASPACE_PY_LIBRARY -laudaspace-py)\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB PYTHON_DLLS ${LIBRARY_PATH}/Python/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${PYTHON_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_PYTHON FALSE CACHE BOOL \"Build With Python Library\" FORCE)\n\t\telse()\n\t\t\tset(WITH_PYTHON FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"Python & NumPy libraries not found, language binding will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Enumerator Values in Blender Python\nDESCRIPTION: This snippet demonstrates setting an enumerator value for the rotation mode of an object. It shows how to access and modify Blender data using Python.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nC.object.rotation_mode = 'AXIS_ANGLE'\n```\n\n----------------------------------------\n\nTITLE: Creating and Referencing Meshes by Name (Incorrect)\nDESCRIPTION: This code demonstrates an incorrect way to create and reference meshes by name in Blender using the Python API.  It highlights a common mistake where it's assumed that newly created data is always assigned the requested name. This can lead to errors if the name is already in use, exceeds the maximum length or is an empty string.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nbpy.data.meshes.new(name=meshid)\n\n# Normally some code, function calls, etc.\nbpy.data.meshes[meshid]\n```\n\n----------------------------------------\n\nTITLE: Installing Mesa Libraries\nDESCRIPTION: This CMake code snippet handles the installation of Mesa libraries.  It checks if the `LIBDIR` variable is defined and if a `mesa` subdirectory exists within it. If both conditions are met, it installs the Mesa libraries to the `./lib/mesa` directory and installs `blender-launcher` and `blender-softwaregl` programs.  It also removes old OpenGL libraries from a previous location to prevent conflicts.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\n    # NOTE: there is a bug in CMake 3.25.1 where `LIBDIR` is reported as undefined.\n    if(NOT DEFINED LIBDIR)\n      # Pass.\n    elseif(EXISTS ${LIBDIR}/mesa)\n      install(\n        # Trailing slash is needed to install contents instead of directory itself.\n        DIRECTORY ${LIBDIR}/mesa/lib/\n        DESTINATION \"./lib/mesa\"\n      )\n\n      install(\n        PROGRAMS\n        ${CMAKE_SOURCE_DIR}/release/bin/blender-launcher\n        ${CMAKE_SOURCE_DIR}/release/bin/blender-softwaregl\n        DESTINATION \".\"\n      )\n\n      # Remove from old location, so existing builds don't start with software\n      # OpenGL now that the `./lib/` directory is used for other libraries.\n      install(\n        CODE \"\\\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libGL.so)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libGL.so.1)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libGL.so.1.5.0)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libGLU.so)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libGLU.so.1)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libGLU.so.1.3.1)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libglapi.so)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libglapi.so.0)\\n\nfile(REMOVE ${CMAKE_BINARY_DIR}/bin/lib/libglapi.so.0.0.0)\\n\"\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenColorIO Configuration\nDESCRIPTION: This snippet configures OpenColorIO (OCIO) integration. It adds the `-DWITH_OCIO` definition, appends the OCIO include directories and libraries to `INC_SYS` and `LIB` respectively. If on Windows and `USD_OVERRIDE_OPENCOLORIO` is not set, it also adds the `-DOpenColorIO_SKIP_IMPORTS` definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\n  list(APPEND INC_SYS\n    ${OPENCOLORIO_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENCOLORIO_LIBRARIES}\n  )\n  if(WIN32 AND NOT USD_OVERRIDE_OPENCOLORIO)\n    add_definitions(-DOpenColorIO_SKIP_IMPORTS)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Linked Libraries\nDESCRIPTION: This snippet defines the private libraries that the ge_scenegraph library depends on.  It specifies bf::blenlib and ge_common as linked libraries required during the linking stage. These libraries provide utility functions and common components used by the scene graph implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/SceneGraph/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  ge_common\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: This snippet defines the 'LIB' variable, which lists libraries required for linking the 'bf_render_hydra' library. It includes Epoxy, Python, USD, and TBB libraries, as well as several private Blender libraries (blenkernel, depsgraph, gpu, imbuf, clog, bf_io_usd, nodes, eigen).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${Epoxy_LIBRARIES}\n  ${PYTHON_LIBRARIES}\n  ${USD_LIBRARIES}\n  ${TBB_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::depsgraph\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  bf_io_usd\n  PRIVATE bf::nodes\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Add Library - CMake\nDESCRIPTION: This CMake code snippet uses the `blender_add_lib` macro (specific to the Blender build system) to create the `bf_editor_space_statusbar` library. It takes the library name, source files, include directories, system include directories, and linked libraries as arguments. This macro handles the compilation and linking process to produce the final library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_statusbar/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_statusbar \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding GPU Library and Linking Dependencies\nDESCRIPTION: This snippet adds the `bf_gpu` library using the source files, include directories, system include directories, and libraries defined previously.  It then links this library with other libraries such as compositor shaders, draw shaders and gpu shaders.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_gpu \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::gpu ALIAS bf_gpu)\ntarget_link_libraries(bf_gpu PUBLIC\n  bf_compositor_shaders\n  bf_draw_shaders\n  bf_gpu_shaders\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (Game Engine)\nDESCRIPTION: This snippet conditionally defines `-DWITH_GAMEENGINE` if `WITH_GAMEENGINE` is enabled. This likely indicates that the entire game engine is being built, as opposed to a subset of its features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  add_definitions(-DWITH_GAMEENGINE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories required for compiling the device library.  It includes relative paths to internal modules and absolute paths to external libraries like ghost and termcolor from the Blender project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../Common\n  ../Expressions\n  ../GameLogic\n  ../Ketsji\n  ../Rasterizer\n  ../SceneGraph\n  ../../blender/blenkernel\n  ../../../intern/ghost\n  ../../../intern/termcolor\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions in CMake\nDESCRIPTION: This snippet adds compiler definitions based on whether certain features are enabled.  If WITH_FREESTYLE is enabled, the -DWITH_FREESTYLE definition is added.  Similarly, if WITH_EXPERIMENTAL_FEATURES is enabled, -DWITH_SIMULATION_DATABLOCK and -DWITH_POINTCLOUD definitions are added.  These definitions likely control conditional compilation blocks within the C++ code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_buttons/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\n  add_definitions(-DWITH_POINTCLOUD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags for Address Sanitizer - CMake\nDESCRIPTION: This snippet adds compiler and linker flags for the address sanitizer (ASan) tool when WITH_COMPILER_ASAN is enabled and the build type is not Release. This helps detect memory errors during debugging. The implementation differs for Apple platforms and other systems to handle the flags correctly.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_94\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Release\")\n  if(WITH_COMPILER_ASAN)\n    if(NOT APPLE)\n      # Avoid passing address sanitizer compiler flags to `try_compile`.\n      # Since linker flags are not set, all compiler checks and `find_package`\n      # calls that rely on `try_compile` will fail.\n      # See CMP0066 also.\n      string(APPEND CMAKE_C_FLAGS_DEBUG \" ${COMPILER_ASAN_CFLAGS}\")\n      string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO \" ${COMPILER_ASAN_CFLAGS}\")\n\n      string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${COMPILER_ASAN_CXXFLAGS}\")\n      string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" ${COMPILER_ASAN_CXXFLAGS}\")\n    endif()\n    if(MSVC)\n      set(COMPILER_ASAN_LINKER_FLAGS \"/FUNCTIONPADMIN:6\")\n    endif()\n\n    if(APPLE AND COMPILER_ASAN_LIBRARY)\n      string(REPLACE \" \" \";\" _list_COMPILER_ASAN_CFLAGS ${COMPILER_ASAN_CFLAGS})\n      set(_is_CONFIG_DEBUG \"$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>\")\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:${_list_COMPILER_ASAN_CFLAGS}>\")\n\n      # Skip generation of the unwind tables, as they might require a lot of space when sanitizers\n      # are enabled and not fit into the .eh_frame section. Disabling the unwind tables might have\n      # side effects on code which does frame walking, such as\n      #   - backtrace()\n      #   - __attribute__((__cleanup__(f)))\n      #   - __builtin_return_address(n), for n > 0\n      #   - pthread_cleanup_push when it is implemented using __attribute__((__cleanup__(f)))\n      # It should not have affect on debugging, since it uses -g flag which generates debugging\n      # tables in the .debug_frame section.\n      # At the time of adding these flags calling backtrace() from C code on Apple M2 did not\n      # affect on the printed backtrace, and exception handling was correct as well.\n      #\n      # Related discussion:\n      #  https://stackoverflow.com/questions/26300819\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:-fno-unwind-tables>\")\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:-fno-asynchronous-unwind-tables>\")\n\n      add_compile_options(\"$<${_is_CONFIG_DEBUG}:-fno-omit-frame-pointer>\")\n      add_link_options(\"$<${_is_CONFIG_DEBUG}:-fno-omit-frame-pointer;-fsanitize=address>\")\n      unset(_list_COMPILER_ASAN_CFLAGS)\n      unset(_is_CONFIG_DEBUG)\n    elseif(COMPILER_ASAN_LIBRARY)\n      set(PLATFORM_LINKLIBS \"${PLATFORM_LINKLIBS};${COMPILER_ASAN_LIBRARY}\")\n      set(PLATFORM_LINKFLAGS \"${COMPILER_ASAN_LIBRARY}\")\n      set(PLATFORM_LINKFLAGS_DEBUG \"${COMPILER_ASAN_LIBRARY}\")\n      if(DEFINED COMPILER_ASAN_LINKER_FLAGS)\n        set(PLATFORM_LINKFLAGS \"${PLATFORM_LINKFLAGS} ${COMPILER_ASAN_LINKER_FLAGS}\")\n        set(PLATFORM_LINKFLAGS_DEBUG \"${PLATFORM_LINKFLAGS_DEBUG} ${COMPILER_ASAN_LINKER_FLAGS}\")\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling C++ Compiler Warnings (Clang/CL)\nDESCRIPTION: This snippet defines a series of C++ compiler warning flags that are disabled using the `-Wno-` prefix. These flags are specific to Clang and Microsoft's CL compilers and are intended to suppress warnings related to code style, compatibility, and potential issues identified during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_122\n\nLANGUAGE: CMake\nCODE:\n```\nCXX_WARN_CLANG_CL_C++98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-local-type-template-args # 6906\n      CXX_WARN_CLANG_CL_RESERVED_IDENTIFIER -Wno-reserved-identifier # 5886\n      CXX_WARN_CLANG_CL_CAST_ALIGN -Wno-cast-align # 5513\n      CXX_WARN_CLANG_CL_DOCUMENTATION -Wno-documentation # 5107\n      CXX_WARN_CLANG_CL_DISABLED_MACRO_EXPANSION -Wno-disabled-macro-expansion # 4449\n      CXX_WARN_CLANG_CL_EXTRA_SEMI_STMT -Wno-extra-semi-stmt # 4349\n      CXX_WARN_CLANG_CL_ZERO_AS_NULL_POINTER_CONSTANT -Wno-zero-as-null-pointer-constant # 3209\n      CXX_WARN_CLANG_CL_FLOAT_CONVERSION -Wno-float-conversion # 2869\n      CXX_WARN_CLANG_CL_RESERVED_MACRO_IDENTIFIER -Wno-reserved-macro-identifier # 2862\n      CXX_WARN_CLANG_CL_CAST_FUNCTION_TYPE_STRICT -Wno-cast-function-type-strict # 2663\n      CXX_WARN_CLANG_CL_FLOAT_EQUAL -Wno-float-equal # 2153\n      CXX_WARN_CLANG_CL_IMPLICIT_INT_CONVERSION -Wno-implicit-int-conversion # 2117\n      CXX_WARN_CLANG_CL_SHADOW -Wno-shadow # 2068\n      CXX_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR -Wno-shadow-field-in-constructor # 1829\n      CXX_WARN_CLANG_CL_CAST_QUAL -Wno-cast-qual # 1742\n      CXX_WARN_CLANG_CL_PRE_C++14_COMPAT -Wno-pre-c++14-compat # 1569\n      CXX_WARN_CLANG_CL_GLOBAL_CONSTRUCTORS -Wno-global-constructors # 1402\n      CXX_WARN_CLANG_CL_SWITCH_ENUM -Wno-switch-enum # 973\n      CXX_WARN_CLANG_CL_EXIT_TIME_DESTRUCTORS -Wno-exit-time-destructors # 940\n      CXX_WARN_CLANG_CL_CTAD_MAYBE_UNSUPPORTED -Wno-ctad-maybe-unsupported # 891\n      CXX_WARN_CLANG_CL_UNDEFINED_FUNC_TEMPLATE -Wno-undefined-func-template # 863\n      CXX_WARN_CLANG_CL_C++98_COMPAT_EXTRA_SEMI -Wno-c++98-compat-extra-semi # 848\n      CXX_WARN_CLANG_CL_CAST_FUNCTION_TYPE -Wno-cast-function-type # 807\n      CXX_WARN_CLANG_CL_NULLABILITY_EXTENSION -Wno-nullability-extension # 602\n      CXX_WARN_CLANG_CL_SHADOW_FIELD -Wno-shadow-field # 585\n      CXX_WARN_CLANG_CL_CONDITIONAL_UNINITIALIZED -Wno-conditional-uninitialized # 555\n      CXX_WARN_CLANG_CL_UNUSED_PARAMETER -Wno-unused-parameter # 539\n      CXX_WARN_CLANG_CL_SUGGEST_DESTRUCTOR_OVERRIDE -Wno-suggest-destructor-override # 356\n      CXX_WARN_CLANG_CL_SHADOW_UNCAPTURED_LOCAL -Wno-shadow-uncaptured-local # 355\n      CXX_WARN_CLANG_CL_UNUSED_MACROS -Wno-unused-macros # 289\n      CXX_WARN_CLANG_CL_COVERED_SWITCH_DEFAULT -Wno-covered-switch-default # 233\n      CXX_WARN_CLANG_CL_SIGNED_ENUM_BITFIELD -Wno-signed-enum-bitfield # 229\n      CXX_WARN_CLANG_CL_DECLARATION_AFTER_STATEMENT -Wno-declaration-after-statement # 228\n      CXX_WARN_CLANG_CL_IMPLICIT_FALLTHROUGH -Wno-implicit-fallthrough # 164\n      CXX_WARN_CLANG_CL_NON_VIRTUAL_DTOR -Wno-non-virtual-dtor # 161\n      CXX_WARN_CLANG_CL_NESTED_ANON_TYPES -Wno-nested-anon-types # 140\n      CXX_WARN_CLANG_CL_GNU_ZERO_VARIADIC_MACRO_ARGUMENTS -Wno-gnu-zero-variadic-macro-arguments # 132\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE_BREAK -Wno-unreachable-code-break # 115\n      CXX_WARN_CLANG_CL_INCONSISTENT_MISSING_DESTRUCTOR_OVERRIDE -Wno-inconsistent-missing-destructor-override # 104\n      CXX_WARN_CLANG_CL_FORMAT_PEDANTIC -Wno-format-pedantic # 97\n      CXX_WARN_CLANG_CL_NONPORTABLE_SYSTEM_INCLUDE_PATH -Wno-nonportable-system-include-path # 95\n      CXX_WARN_CLANG_CL_UNDEF -Wno-undef # 94\n      CXX_WARN_CLANG_CL_IGNORED_QUALIFIERS -Wno-ignored-qualifiers # 93\n      CXX_WARN_CLANG_CL_USED_BUT_MARKED_UNUSED -Wno-used-but-marked-unused # 83\n      CXX_WARN_CLANG_CL_HEADER_HYGIENE -Wno-header-hygiene # 79\n      CXX_WARN_CLANG_CL_CHAR_SUBSCRIPTS -Wno-char-subscripts # 76\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE_RETURN -Wno-unreachable-code-return # 71\n      CXX_WARN_CLANG_CL_UNUSED_TEMPLATE -Wno-unused-template # 66\n      CXX_WARN_CLANG_CL_GNU_ANONYMOUS_STRUCT -Wno-gnu-anonymous-struct # 63\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_DTOR -Wno-deprecated-copy-with-user-provided-dtor # 62\n      CXX_WARN_CLANG_CL_INCONSISTENT_MISSING_OVERRIDE -Wno-inconsistent-missing-override # 54\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE -Wno-unreachable-code # 52\n      CXX_WARN_CLANG_CL_DEPRECATED_DYNAMIC_EXCEPTION_SPEC -Wno-deprecated-dynamic-exception-spec # 51\n      CXX_WARN_CLANG_CL_BAD_FUNCTION_CAST -Wno-bad-function-cast # 50\n      CXX_WARN_CLANG_CL_MICROSOFT_ENUM_VALUE -Wno-microsoft-enum-value # 47\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY -Wno-deprecated-copy-with-user-provided-copy # 41\n      CXX_WARN_CLANG_CL_ZERO_LENGTH_ARRAY -Wno-zero-length-array # 39\n      CXX_WARN_CLANG_CL_UNUSED_FUNCTION -Wno-unused-function # 38\n      CXX_WARN_CLANG_CL_PEDANTIC -Wno-pedantic # 38\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY_WITH_DTOR -Wno-deprecated-copy-with-dtor # 37\n      CXX_WARN_CLANG_CL_DOCUMENTATION_UNKNOWN_COMMAND -Wno-documentation-unknown-command # 34\n      CXX_WARN_CLANG_CL_UNDEFINED_REINTERPRET_CAST -Wno-undefined-reinterpret-cast # 33\n      CXX_WARN_CLANG_CL_FORMAT_NONLITERAL -Wno-format-nonliteral # 29\n      CXX_WARN_CLANG_CL_COMMA -Wno-comma # 27\n      CXX_WARN_CLANG_CL_DOCUMENTATION_DEPRECATED_SYNC -Wno-documentation-deprecated-sync # 26\n      CXX_WARN_CLANG_CL_SHIFT_SIGN_OVERFLOW -Wno-shift-sign-overflow # 24\n      CXX_WARN_CLANG_CL_PRE_C++17_COMPAT_PEDANTIC -Wno-pre-c++17-compat-pedantic # 24\n      CXX_WARN_CLANG_CL_C++98_COMPAT_UNNAMED_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-unnamed-type-template-args # 22\n      CXX_WARN_CLANG_CL_SIGN_COMPARE -Wno-sign-compare # 21\n      CXX_WARN_CLANG_CL_FORMAT -Wno-format # 21\n      CXX_WARN_CLANG_CL_C++98_COMPAT_BIND_TO_TEMPORARY_COPY -Wno-c++98-compat-bind-to-temporary-copy # 21\n      CXX_WARN_CLANG_CL_ENUM_ENUM_CONVERSION -Wno-enum-enum-conversion # 20\n      CXX_WARN_CLANG_CL_ANON_ENUM_ENUM_CONVERSION -Wno-anon-enum-enum-conversion # 14\n      CXX_WARN_CLANG_CL_RANGE_LOOP_BIND_REFERENCE -Wno-range-loop-bind-reference # 14\n      CXX_WARN_CLANG_CL_ENUM_FLOAT_CONVERSION -Wno-enum-float-conversion # 12\n      CXX_WARN_CLANG_CL_KEYWORD_MACRO -Wno-keyword-macro # 10\n      CXX_WARN_CLANG_CL_DEPRECATED_COPY -Wno-deprecated-copy # 10\n      CXX_WARN_CLANG_CL_UNUSED_MEMBER_FUNCTION -Wno-unused-member-function # 9\n      CXX_WARN_CLANG_CL_MISSING_NORETURN -Wno-missing-noreturn # 8\n      CXX_WARN_CLANG_CL_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations # 8\n      CXX_WARN_CLANG_CL_DOCUMENTATION_HTML -Wno-documentation-html # 6\n      CXX_WARN_CLANG_CL_GNU_REDECLARED_ENUM -Wno-gnu-redeclared-enum # 6\n      CXX_WARN_CLANG_CL_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations # 6\n      CXX_WARN_CLANG_CL_OVERLOADED_VIRTUAL -Wno-overloaded-virtual # 5\n      CXX_WARN_CLANG_CL_C++98_C++11_COMPAT_BINARY_LITERAL -Wno-c++98-c++11-compat-binary-literal # 4\n      CXX_WARN_CLANG_CL_DEPRECATED_REDUNDANT_CONSTEXPR_STATIC_DEF -Wno-deprecated-redundant-constexpr-static-def # 4\n      CXX_WARN_CLANG_CL_MISSING_BRACES -Wno-missing-braces # 4\n      CXX_WARN_CLANG_CL_C99_EXTENSIONS -Wno-c99-extensions # 4\n      CXX_WARN_CLANG_CL_STRICT_PROTOTYPES -Wno-strict-prototypes # 4\n      CXX_WARN_CLANG_CL_UNREACHABLE_CODE_LOOP_INCREMENT -Wno-unreachable-code-loop-increment # 4\n      CXX_WARN_CLANG_CL_GNU_CASE_RANGE -Wno-gnu-case-range # 4\n      CXX_WARN_CLANG_CL_DUPLICATE_ENUM -Wno-duplicate-enum # 3\n      CXX_WARN_CLANG_CL_NULL_POINTER_SUBTRACTION -Wno-null-pointer-subtraction # 2\n      CXX_WARN_CLANG_CL_DEPRECATED_LITERAL_OPERATOR -Wno-deprecated-literal-operator # 2\n      CXX_WARN_CLANG_CL_NEWLINE_EOF -Wno-newline-eof # 2\n      CXX_WARN_CLANG_CL_MICROSOFT_CAST -Wno-microsoft-cast # 2\n      CXX_WARN_CLANG_CL_DATE_TIME -Wno-date-time # 2\n      CXX_WARN_CLANG_CL_DELETE_NON_ABSTRACT_NON_VIRTUAL_DTOR -Wno-delete-non-abstract-non-virtual-dtor # 2\n      CXX_WARN_CLANG_CL_UNUSED_PRIVATE_FIELD -Wno-unused-private-field # 2\n      CXX_WARN_CLANG_CL_FLEXIBLE_ARRAY_EXTENSIONS -Wno-flexible-array-extensions # 2\n      CXX_WARN_CLANG_CL_STRING_CONVERSION -Wno-string-conversion # 2\n      CXX_WARN_CLANG_CL_FINAL_DTOR_NON_FINAL_CLASS -Wno-final-dtor-non-final-class # 2\n      CXX_WARN_CLANG_CL_MICROSOFT_UNQUALIFIED_FRIEND -Wno-microsoft-unqualified-friend # 2\n      CXX_WARN_CLANG_CL_INVALID_NORETURN -Wno-invalid-noreturn # 1\n      CXX_WARN_CLANG_CL_INVALID_UTF8 -Wno-invalid-utf8 # 1\n      CXX_WARN_CLANG_CL_FOUR_CHAR_CONSTANTS -Wno-four-char-constants # 1\n      CXX_WARN_CLANG_CL_PARENTHESES -Wno-parentheses # 1\n      CXX_WARN_CLANG_CL_PESSIMIZING_MOVE -Wno-pessimizing-move # 1\n      CXX_WARN_CLANG_CL_DEPRECATED_NON_PROTOTYPE -Wno-deprecated-non-prototype # 1\n      CXX_WARN_CLANG_CL_BITFIELD_ENUM_CONVERSION -Wno-bitfield-enum-conversion # 1\n      CXX_WARN_CLANG_CL_UNUSED_LAMBDA_CAPTURE -Wno-unused-lambda-capture # 1\n      CXX_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR_MODIFIED -Wno-shadow-field-in-constructor-modified # 1\n      # And some additional ones that came up when using LLVM 18.1.8 on Windows ARM64\n      CXX_WARN_CLANG_CL_SWITCH_DEFAULT -Wno-switch-default\n      CXX_WARN_CLANG_CL_NAN_INFINITY_DISABLED -Wno-nan-infinity-disabled\n      # And another from 19.1.5\n      CXX_WARN_CLANG_CL_PRE_C11_COMPAT -Wno-pre-c11-compat\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Constraint Limits with setParam - Python\nDESCRIPTION: This method sets the constraint limits for different constraint types (PHY_LINEHINGE_CONSTRAINT, PHY_ANGULAR_CONSTRAINT, PHY_CONE_TWIST_CONSTRAINT, PHY_GENERIC_6DOF_CONSTRAINT). It takes the axis, minimum limit (value0), and maximum limit (value1) as arguments. The behavior varies depending on the constraint type. Value0 and Value1 determine the constraint limits and motor behaviors.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_ConstraintWrapper.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setParam(axis, value0, value1)\n\n      Set the constraint limits\n\n      :arg axis:\n      :type axis: integer\n\n      .. note::\n         * Lowerlimit == Upperlimit -> axis is locked\n         * Lowerlimit > Upperlimit -> axis is free\n         * Lowerlimit < Upperlimit -> axis it limited in that range\n\n      For PHY_LINEHINGE_CONSTRAINT = 2 or PHY_ANGULAR_CONSTRAINT = 3:\n\n      axis = 3 is a constraint limit, with low/high limit value\n         * 3: X axis angle\n\n      :arg value0 (min): Set the minimum limit of the axis\n      :type value0: float\n      :arg value1 (max): Set the maximum limit of the axis\n      :type value1: float\n\n      For PHY_CONE_TWIST_CONSTRAINT = 4:\n\n      axis = 3..5 are constraint limits, high limit values\n         * 3: X axis angle\n         * 4: Y axis angle\n         * 5: Z axis angle\n\n      :arg value0 (min): Set the minimum limit of the axis\n      :type value0: float\n      :arg value1 (max): Set the maximum limit of the axis\n      :type value1: float\n\n      For PHY_GENERIC_6DOF_CONSTRAINT = 12:\n\n      axis = 0..2 are constraint limits, with low/high limit value\n         * 0: X axis position\n         * 1: Y axis position\n         * 2: Z axis position\n\n      axis = 3..5 are relative constraint (Euler) angles in radians\n         * 3: X axis angle\n         * 4: Y axis angle\n         * 5: Z axis angle\n\n      :arg value0 (min): Set the minimum limit of the axis\n      :type value0: float\n      :arg value1 (max): Set the maximum limit of the axis\n      :type value1: float\n\n      axis = 6..8 are translational motors, with value0=target velocity, value1 = max motor force\n         * 6: X axis position\n         * 7: Y axis position\n         * 8: Z axis position\n\n      axis = 9..11 are rotational motors, with value0=target velocity, value1 = max motor force\n         * 9: X axis angle\n         * 10: Y axis angle\n         * 11: Z axis angle\n\n      :arg value0 (speed): Set the linear velocity of the axis\n      :type value0: float Range: -10,000.00 to 10,000.00\n      :arg value1 (force): Set the maximum force limit of the axis\n      :type value1: float Range: -10,000.00 to 10,000.00\n\n      axis = 12..14 are for linear springs on each of the position of freedom\n         * 12: X axis position\n         * 13: Y axis position\n         * 14: Z axis position\n\n      axis = 15..17 are for angular springs on each of the angle of freedom in radians\n         * 15: X axis angle\n         * 16: Y axis angle\n         * 17: Z axis angle\n\n      :arg value0 (stiffness): Set the stiffness of the spring\n      :type value0: float\n      :arg value1 (damping): Tendency of the spring to return to it's original position\n      :type value1: float\n                    1.0 = springs back to original position (no damping)\n                    0.0 = don't springs back\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files to be compiled for the project. It lists both header files (`.hh`) and source code files (`.cc`) organized into different subdirectories, covering core compositor functionality, algorithms, cached resources, derived resources, and utilities. The source files define the implementation of the compositor nodes and related functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  COM_compile_state.hh\n  COM_compositor.hh\n  COM_context.hh\n  COM_conversion_operation.hh\n  COM_derived_resources.hh\n  COM_domain.hh\n  COM_evaluator.hh\n  COM_implicit_input_operation.hh\n  COM_input_descriptor.hh\n  COM_input_single_value_operation.hh\n  COM_meta_data.hh\n  COM_multi_function_procedure_operation.hh\n  COM_node_operation.hh\n  COM_operation.hh\n  COM_pixel_operation.hh\n  COM_profiler.hh\n  COM_realize_on_domain_operation.hh\n  COM_render_context.hh\n  COM_result.hh\n  COM_scheduler.hh\n  COM_shader_node.hh\n  COM_shader_operation.hh\n  COM_simple_operation.hh\n  COM_static_cache_manager.hh\n  COM_utilities.hh\n\n  intern/COM_compositor.cc\n  intern/compile_state.cc\n  intern/context.cc\n  intern/conversion_operation.cc\n  intern/domain.cc\n  intern/evaluator.cc\n  intern/implicit_input_operation.cc\n  intern/input_single_value_operation.cc\n  intern/meta_data.cc\n  intern/multi_function_procedure_operation.cc\n  intern/node_operation.cc\n  intern/operation.cc\n  intern/pixel_operation.cc\n  intern/profiler.cc\n  intern/realize_on_domain_operation.cc\n  intern/render_context.cc\n  intern/result.cc\n  intern/scheduler.cc\n  intern/shader_node.cc\n  intern/shader_operation.cc\n  intern/simple_operation.cc\n  intern/static_cache_manager.cc\n  intern/utilities.cc\n\n  algorithms/intern/compute_preview.cc\n  algorithms/intern/deriche_gaussian_blur.cc\n  algorithms/intern/extract_alpha.cc\n  algorithms/intern/gamma_correct.cc\n  algorithms/intern/jump_flooding.cc\n  algorithms/intern/morphological_blur.cc\n  algorithms/intern/morphological_distance.cc\n  algorithms/intern/morphological_distance_feather.cc\n  algorithms/intern/parallel_reduction.cc\n  algorithms/intern/recursive_gaussian_blur.cc\n  algorithms/intern/smaa.cc\n  algorithms/intern/summed_area_table.cc\n  algorithms/intern/symmetric_separable_blur.cc\n  algorithms/intern/symmetric_separable_blur_variable_size.cc\n  algorithms/intern/van_vliet_gaussian_blur.cc\n\n  algorithms/COM_algorithm_compute_preview.hh\n  algorithms/COM_algorithm_deriche_gaussian_blur.hh\n  algorithms/COM_algorithm_extract_alpha.hh\n  algorithms/COM_algorithm_gamma_correct.hh\n  algorithms/COM_algorithm_jump_flooding.hh\n  algorithms/COM_algorithm_morphological_blur.hh\n  algorithms/COM_algorithm_morphological_distance.hh\n  algorithms/COM_algorithm_morphological_distance_feather.hh\n  algorithms/COM_algorithm_parallel_reduction.hh\n  algorithms/COM_algorithm_recursive_gaussian_blur.hh\n  algorithms/COM_algorithm_smaa.hh\n  algorithms/COM_algorithm_summed_area_table.hh\n  algorithms/COM_algorithm_symmetric_separable_blur.hh\n  algorithms/COM_algorithm_symmetric_separable_blur_variable_size.hh\n  algorithms/COM_algorithm_van_vliet_gaussian_blur.hh\n\n  cached_resources/intern/bokeh_kernel.cc\n  cached_resources/intern/cached_image.cc\n  cached_resources/intern/cached_mask.cc\n  cached_resources/intern/cached_shader.cc\n  cached_resources/intern/cached_texture.cc\n  cached_resources/intern/deriche_gaussian_coefficients.cc\n  cached_resources/intern/distortion_grid.cc\n  cached_resources/intern/fog_glow_kernel.cc\n  cached_resources/intern/keying_screen.cc\n  cached_resources/intern/morphological_distance_feather_weights.cc\n  cached_resources/intern/ocio_color_space_conversion_shader.cc\n  cached_resources/intern/pixel_coordinates.cc\n  cached_resources/intern/smaa_precomputed_textures.cc\n  cached_resources/intern/symmetric_blur_weights.cc\n  cached_resources/intern/symmetric_separable_blur_weights.cc\n  cached_resources/intern/texture_coordinates.cc\n  cached_resources/intern/van_vliet_gaussian_coefficients.cc\n\n  cached_resources/COM_bokeh_kernel.hh\n  cached_resources/COM_cached_image.hh\n  cached_resources/COM_cached_mask.hh\n  cached_resources/COM_cached_resource.hh\n  cached_resources/COM_cached_shader.hh\n  cached_resources/COM_cached_texture.hh\n  cached_resources/COM_deriche_gaussian_coefficients.hh\n  cached_resources/COM_distortion_grid.hh\n  cached_resources/COM_fog_glow_kernel.hh\n  cached_resources/COM_keying_screen.hh\n  cached_resources/COM_morphological_distance_feather_weights.hh\n  cached_resources/COM_ocio_color_space_conversion_shader.hh\n  cached_resources/COM_pixel_coordinates.hh\n  cached_resources/COM_smaa_precomputed_textures.hh\n  cached_resources/COM_symmetric_blur_weights.hh\n  cached_resources/COM_symmetric_separable_blur_weights.hh\n  cached_resources/COM_texture_coordinates.hh\n  cached_resources/COM_van_vliet_gaussian_coefficients.hh\n\n  derived_resources/intern/denoised_auxiliary_pass.cc\n\n  derived_resources/COM_denoised_auxiliary_pass.hh\n\n  utilities/intern/gpu_material.cc\n  utilities/intern/oidn.cc\n\n  utilities/COM_utilities_diagonals.hh\n  utilities/COM_utilities_gpu_material.hh\n  utilities/COM_utilities_oidn.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Clang/C++ Compiler Warnings\nDESCRIPTION: This snippet disables a series of Clang/C++ compiler warnings using the `-Wno-` flag. Each `C_WARN_CLANG_CL_*` variable represents a specific warning, and the associated `-Wno-*` flag tells the compiler to suppress that warning. This is used to manage compiler output and focus on relevant issues during development.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_120\n\nLANGUAGE: CMake\nCODE:\n```\n      C_WARN_CLANG_CL_C++98_COMPAT_LOCAL_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-local-type-template-args # 6906\n      C_WARN_CLANG_CL_RESERVED_IDENTIFIER -Wno-reserved-identifier # 5886\n      C_WARN_CLANG_CL_CAST_ALIGN -Wno-cast-align # 5513\n      C_WARN_CLANG_CL_DOCUMENTATION -Wno-documentation # 5107\n      C_WARN_CLANG_CL_DISABLED_MACRO_EXPANSION -Wno-disabled-macro-expansion # 4449\n      C_WARN_CLANG_CL_EXTRA_SEMI_STMT -Wno-extra-semi-stmt # 4349\n      C_WARN_CLANG_CL_ZERO_AS_NULL_POINTER_CONSTANT -Wno-zero-as-null-pointer-constant # 3209\n      C_WARN_CLANG_CL_FLOAT_CONVERSION -Wno-float-conversion # 2869\n      C_WARN_CLANG_CL_RESERVED_MACRO_IDENTIFIER -Wno-reserved-macro-identifier # 2862\n      C_WARN_CLANG_CL_CAST_FUNCTION_TYPE_STRICT -Wno-cast-function-type-strict # 2663\n      C_WARN_CLANG_CL_FLOAT_EQUAL -Wno-float-equal # 2153\n      C_WARN_CLANG_CL_IMPLICIT_INT_CONVERSION -Wno-implicit-int-conversion # 2117\n      C_WARN_CLANG_CL_SHADOW -Wno-shadow # 2068\n      C_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR -Wno-shadow-field-in-constructor # 1829\n      C_WARN_CLANG_CL_CAST_QUAL -Wno-cast-qual # 1742\n      C_WARN_CLANG_CL_PRE_C++14_COMPAT -Wno-pre-c++14-compat # 1569\n      C_WARN_CLANG_CL_GLOBAL_CONSTRUCTORS -Wno-global-constructors # 1402\n      C_WARN_CLANG_CL_SWITCH_ENUM -Wno-switch-enum # 973\n      C_WARN_CLANG_CL_EXIT_TIME_DESTRUCTORS -Wno-exit-time-destructors # 940\n      C_WARN_CLANG_CL_CTAD_MAYBE_UNSUPPORTED -Wno-ctad-maybe-unsupported # 891\n      C_WARN_CLANG_CL_UNDEFINED_FUNC_TEMPLATE -Wno-undefined-func-template # 863\n      C_WARN_CLANG_CL_C++98_COMPAT_EXTRA_SEMI -Wno-c++98-compat-extra-semi # 848\n      C_WARN_CLANG_CL_CAST_FUNCTION_TYPE -Wno-cast-function-type # 807\n      C_WARN_CLANG_CL_NULLABILITY_EXTENSION -Wno-nullability-extension # 602\n      C_WARN_CLANG_CL_SHADOW_FIELD -Wno-shadow-field # 585\n      C_WARN_CLANG_CL_CONDITIONAL_UNINITIALIZED -Wno-conditional-uninitialized # 555\n      C_WARN_CLANG_CL_UNUSED_PARAMETER -Wno-unused-parameter # 539\n      C_WARN_CLANG_CL_SUGGEST_DESTRUCTOR_OVERRIDE -Wno-suggest-destructor-override # 356\n      C_WARN_CLANG_CL_SHADOW_UNCAPTURED_LOCAL -Wno-shadow-uncaptured-local # 355\n      C_WARN_CLANG_CL_UNUSED_MACROS -Wno-unused-macros # 289\n      C_WARN_CLANG_CL_COVERED_SWITCH_DEFAULT -Wno-covered-switch-default # 233\n      C_WARN_CLANG_CL_SIGNED_ENUM_BITFIELD -Wno-signed-enum-bitfield # 229\n      C_WARN_CLANG_CL_DECLARATION_AFTER_STATEMENT -Wno-declaration-after-statement # 228\n      C_WARN_CLANG_CL_IMPLICIT_FALLTHROUGH -Wno-implicit-fallthrough # 164\n      C_WARN_CLANG_CL_NON_VIRTUAL_DTOR -Wno-non-virtual-dtor # 161\n      C_WARN_CLANG_CL_NESTED_ANON_TYPES -Wno-nested-anon-types # 140\n      C_WARN_CLANG_CL_GNU_ZERO_VARIADIC_MACRO_ARGUMENTS -Wno-gnu-zero-variadic-macro-arguments # 132\n      C_WARN_CLANG_CL_UNREACHABLE_CODE_BREAK -Wno-unreachable-code-break # 115\n      C_WARN_CLANG_CL_INCONSISTENT_MISSING_DESTRUCTOR_OVERRIDE -Wno-inconsistent-missing-destructor-override # 104\n      C_WARN_CLANG_CL_FORMAT_PEDANTIC -Wno-format-pedantic # 97\n      C_WARN_CLANG_CL_NONPORTABLE_SYSTEM_INCLUDE_PATH -Wno-nonportable-system-include-path # 95\n      C_WARN_CLANG_CL_UNDEF -Wno-undef # 94\n      C_WARN_CLANG_CL_IGNORED_QUALIFIERS -Wno-ignored-qualifiers # 93\n      C_WARN_CLANG_CL_USED_BUT_MARKED_UNUSED -Wno-used-but-marked-unused # 83\n      C_WARN_CLANG_CL_HEADER_HYGIENE -Wno-header-hygiene # 79\n      C_WARN_CLANG_CL_CHAR_SUBSCRIPTS -Wno-char-subscripts # 76\n      C_WARN_CLANG_CL_UNREACHABLE_CODE_RETURN -Wno-unreachable-code-return # 71\n      C_WARN_CLANG_CL_UNUSED_TEMPLATE -Wno-unused-template # 66\n      C_WARN_CLANG_CL_GNU_ANONYMOUS_STRUCT -Wno-gnu-anonymous-struct # 63\n      C_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_DTOR -Wno-deprecated-copy-with-user-provided-dtor # 62\n      C_WARN_CLANG_CL_INCONSISTENT_MISSING_OVERRIDE -Wno-inconsistent-missing-override # 54\n      C_WARN_CLANG_CL_UNREACHABLE_CODE -Wno-unreachable-code # 52\n      C_WARN_CLANG_CL_DEPRECATED_DYNAMIC_EXCEPTION_SPEC -Wno-deprecated-dynamic-exception-spec # 51\n      C_WARN_CLANG_CL_BAD_FUNCTION_CAST -Wno-bad-function-cast # 50\n      C_WARN_CLANG_CL_MICROSOFT_ENUM_VALUE -Wno-microsoft-enum-value # 47\n      C_WARN_CLANG_CL_DEPRECATED_COPY_WITH_USER_PROVIDED_COPY -Wno-deprecated-copy-with-user-provided-copy # 41\n      C_WARN_CLANG_CL_ZERO_LENGTH_ARRAY -Wno-zero-length-array # 39\n      C_WARN_CLANG_CL_UNUSED_FUNCTION -Wno-unused-function # 38\n      C_WARN_CLANG_CL_PEDANTIC -Wno-pedantic # 38\n      C_WARN_CLANG_CL_DEPRECATED_COPY_WITH_DTOR -Wno-deprecated-copy-with-dtor # 37\n      C_WARN_CLANG_CL_DOCUMENTATION_UNKNOWN_COMMAND -Wno-documentation-unknown-command # 34\n      C_WARN_CLANG_CL_UNDEFINED_REINTERPRET_CAST -Wno-undefined-reinterpret-cast # 33\n      C_WARN_CLANG_CL_FORMAT_NONLITERAL -Wno-format-nonliteral # 29\n      C_WARN_CLANG_CL_COMMA -Wno-comma # 27\n      C_WARN_CLANG_CL_DOCUMENTATION_DEPRECATED_SYNC -Wno-documentation-deprecated-sync # 26\n      C_WARN_CLANG_CL_SHIFT_SIGN_OVERFLOW -Wno-shift-sign-overflow # 24\n      C_WARN_CLANG_CL_PRE_C++17_COMPAT_PEDANTIC -Wno-pre-c++17-compat-pedantic # 24\n      C_WARN_CLANG_CL_C++98_COMPAT_UNNAMED_TYPE_TEMPLATE_ARGS -Wno-c++98-compat-unnamed-type-template-args # 22\n      C_WARN_CLANG_CL_SIGN_COMPARE -Wno-sign-compare # 21\n      C_WARN_CLANG_CL_FORMAT -Wno-format # 21\n      C_WARN_CLANG_CL_C++98_COMPAT_BIND_TO_TEMPORARY_COPY -Wno-c++98-compat-bind-to-temporary-copy # 21\n      C_WARN_CLANG_CL_ENUM_ENUM_CONVERSION -Wno-enum-enum-conversion # 20\n      C_WARN_CLANG_CL_ANON_ENUM_ENUM_CONVERSION -Wno-anon-enum-enum-conversion # 14\n      C_WARN_CLANG_CL_RANGE_LOOP_BIND_REFERENCE -Wno-range-loop-bind-reference # 14\n      C_WARN_CLANG_CL_ENUM_FLOAT_CONVERSION -Wno-enum-float-conversion # 12\n      C_WARN_CLANG_CL_KEYWORD_MACRO -Wno-keyword-macro # 10\n      C_WARN_CLANG_CL_DEPRECATED_COPY -Wno-deprecated-copy # 10\n      C_WARN_CLANG_CL_UNUSED_MEMBER_FUNCTION -Wno-unused-member-function # 9\n      C_WARN_CLANG_CL_MISSING_NORETURN -Wno-missing-noreturn # 8\n      C_WARN_CLANG_CL_MISSING_VARIABLE_DECLARATIONS -Wno-missing-variable-declarations # 8\n      C_WARN_CLANG_CL_DOCUMENTATION_HTML -Wno-documentation-html # 6\n      C_WARN_CLANG_CL_GNU_REDECLARED_ENUM -Wno-gnu-redeclared-enum # 6\n      C_WARN_CLANG_CL_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations # 6\n      C_WARN_CLANG_CL_OVERLOADED_VIRTUAL -Wno-overloaded-virtual # 5\n      C_WARN_CLANG_CL_C++98_C++11_COMPAT_BINARY_LITERAL -Wno-c++98-c++11-compat-binary-literal # 4\n      C_WARN_CLANG_CL_DEPRECATED_REDUNDANT_CONSTEXPR_STATIC_DEF -Wno-deprecated-redundant-constexpr-static-def # 4\n      C_WARN_CLANG_CL_MISSING_BRACES -Wno-missing-braces # 4\n      C_WARN_CLANG_CL_C99_EXTENSIONS -Wno-c99-extensions # 4\n      C_WARN_CLANG_CL_STRICT_PROTOTYPES -Wno-strict-prototypes # 4\n      C_WARN_CLANG_CL_UNREACHABLE_CODE_LOOP_INCREMENT -Wno-unreachable-code-loop-increment # 4\n      C_WARN_CLANG_CL_GNU_CASE_RANGE -Wno-gnu-case-range # 4\n      C_WARN_CLANG_CL_DUPLICATE_ENUM -Wno-duplicate-enum # 3\n      C_WARN_CLANG_CL_NULL_POINTER_SUBTRACTION -Wno-null-pointer-subtraction # 2\n      C_WARN_CLANG_CL_DEPRECATED_LITERAL_OPERATOR -Wno-deprecated-literal-operator # 2\n      C_WARN_CLANG_CL_NEWLINE_EOF -Wno-newline-eof # 2\n      C_WARN_CLANG_CL_MICROSOFT_CAST -Wno-microsoft-cast # 2\n      C_WARN_CLANG_CL_DATE_TIME -Wno-date-time # 2\n      C_WARN_CLANG_CL_DELETE_NON_ABSTRACT_NON_VIRTUAL_DTOR -Wno-delete-non-abstract-non-virtual-dtor # 2\n      C_WARN_CLANG_CL_UNUSED_PRIVATE_FIELD -Wno-unused-private-field # 2\n      C_WARN_CLANG_CL_FLEXIBLE_ARRAY_EXTENSIONS -Wno-flexible-array-extensions # 2\n      C_WARN_CLANG_CL_STRING_CONVERSION -Wno-string-conversion # 2\n      C_WARN_CLANG_CL_FINAL_DTOR_NON_FINAL_CLASS -Wno-final-dtor-non-final-class # 2\n      C_WARN_CLANG_CL_MICROSOFT_UNQUALIFIED_FRIEND -Wno-microsoft-unqualified-friend # 2\n      C_WARN_CLANG_CL_INVALID_NORETURN -Wno-invalid-noreturn # 1\n      C_WARN_CLANG_CL_INVALID_UTF8 -Wno-invalid-utf8 # 1\n      C_WARN_CLANG_CL_FOUR_CHAR_CONSTANTS -Wno-four-char-constants # 1\n      C_WARN_CLANG_CL_PARENTHESES -Wno-parentheses # 1\n      C_WARN_CLANG_CL_PESSIMIZING_MOVE -Wno-pessimizing-move # 1\n      C_WARN_CLANG_CL_DEPRECATED_NON_PROTOTYPE -Wno-deprecated-non-prototype # 1\n      C_WARN_CLANG_CL_BITFIELD_ENUM_CONVERSION -Wno-bitfield-enum-conversion # 1\n      C_WARN_CLANG_CL_UNUSED_LAMBDA_CAPTURE -Wno-unused-lambda-capture # 1\n      C_WARN_CLANG_CL_SHADOW_FIELD_IN_CONSTRUCTOR_MODIFIED -Wno-shadow-field-in-constructor-modified # 1\n      # And some additional ones that came up when using LLVM 18.1.8 on Windows ARM64\n      C_WARN_CLANG_CL_SWITCH_DEFAULT -Wno-switch-default\n      C_WARN_CLANG_CL_NAN_INFINITY_DISABLED -Wno-nan-infinity-disabled\n      # And another from 19.1.5\n      C_WARN_CLANG_CL_PRE_C11_COMPAT -Wno-pre-c11-compat\n\n```\n\n----------------------------------------\n\nTITLE: Setting OSL Source Files - CMake\nDESCRIPTION: This snippet defines a list of OSL shader source files (.osl) used in the Cycles rendering engine. These files contain the shader code that defines the appearance and behavior of various materials and effects. The `set` command in CMake is used to create a variable named `SRC_OSL` and assigns it a list of all the OSL shader files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_OSL\n  node_add_closure.osl\n  node_ambient_occlusion.osl\n  node_attribute.osl\n  node_background.osl\n  node_bevel.osl\n  node_brick_texture.osl\n  node_brightness.osl\n  node_bump.osl\n  node_camera.osl\n  node_checker_texture.osl\n  node_clamp.osl\n  node_combine_color.osl\n  node_combine_rgb.osl\n  node_combine_hsv.osl\n  node_combine_xyz.osl\n  node_convert_from_color.osl\n  node_convert_from_float.osl\n  node_convert_from_int.osl\n  node_convert_from_normal.osl\n  node_convert_from_point.osl\n  node_convert_from_vector.osl\n  node_diffuse_bsdf.osl\n  node_displacement.osl\n  node_vector_displacement.osl\n  node_emission.osl\n  node_environment_texture.osl\n  node_float_curve.osl\n  node_fresnel.osl\n  node_gabor_texture.osl\n  node_gamma.osl\n  node_geometry.osl\n  node_glass_bsdf.osl\n  node_glossy_bsdf.osl\n  node_gradient_texture.osl\n  node_hair_info.osl\n  node_point_info.osl\n  node_scatter_volume.osl\n  node_absorption_volume.osl\n  node_principled_volume.osl\n  node_holdout.osl\n  node_hsv.osl\n  node_ies_light.osl\n  node_image_texture.osl\n  node_invert.osl\n  node_layer_weight.osl\n  node_light_falloff.osl\n  node_light_path.osl\n  node_magic_texture.osl\n  node_map_range.osl\n  node_mapping.osl\n  node_math.osl\n  node_metallic_bsdf.osl\n  node_mix.osl\n  node_mix_closure.osl\n  node_mix_color.osl\n  node_mix_float.osl\n  node_mix_vector.osl\n  node_mix_vector_non_uniform.osl\n  node_noise_texture.osl\n  node_normal.osl\n  node_normal_map.osl\n  node_object_info.osl\n  node_output_displacement.osl\n  node_output_surface.osl\n  node_output_volume.osl\n  node_particle_info.osl\n  node_ray_portal_bsdf.osl\n  node_refraction_bsdf.osl\n  node_rgb_curves.osl\n  node_rgb_ramp.osl\n  node_separate_color.osl\n  node_separate_rgb.osl\n  node_separate_hsv.osl\n  node_separate_xyz.osl\n  node_set_normal.osl\n  node_sheen_bsdf.osl\n  node_sky_texture.osl\n  node_subsurface_scattering.osl\n  node_tangent.osl\n  node_texture_coordinate.osl\n  node_toon_bsdf.osl\n  node_translucent_bsdf.osl\n  node_transparent_bsdf.osl\n  node_value.osl\n  node_vector_curves.osl\n  node_vector_math.osl\n  node_vector_map_range.osl\n  node_vector_rotate.osl\n  node_vector_transform.osl\n  node_vertex_color.osl\n  node_voronoi_texture.osl\n  node_voxel_texture.osl\n  node_voxel_texture_zero.osl\n  node_wavelength.osl\n  node_blackbody.osl\n  node_wave_texture.osl\n  node_white_noise_texture.osl\n  node_wireframe.osl\n  node_hair_bsdf.osl\n  node_principled_hair_bsdf.osl\n  node_uv_map.osl\n  node_principled_bsdf.osl\n  node_rgb_to_bw.osl\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GLog/GFlags - CMake\nDESCRIPTION: This snippet configures the GLog (Google Logging Library) and GFlags (Google Flags Library). If `WITH_SYSTEM_GFLAGS` and/or `WITH_SYSTEM_GLOG` are enabled, it uses `find_package()` to locate them. Otherwise, it defines necessary defines, namespaces, libraries, and include directories for the external versions of these libraries. It handles the case where system-wide versions are requested but not found.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_106\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBMV OR WITH_GTESTS OR (WITH_CYCLES AND WITH_CYCLES_LOGGING))\n  if(WITH_SYSTEM_GFLAGS)\n    find_package(Gflags)\n    if(NOT GFLAGS_FOUND)\n      message(FATAL_ERROR \"System wide Gflags is requested but was not found\")\n    endif()\n    # `FindGflags` does not define this, and we are not even sure what to use here.\n    set(GFLAGS_DEFINES)\n  else()\n    set(GFLAGS_DEFINES\n      -DGFLAGS_DLL_DEFINE_FLAG=\n      -DGFLAGS_DLL_DECLARE_FLAG=\n      -DGFLAGS_DLL_DECL=\n    )\n    set(GFLAGS_NAMESPACE \"gflags\")\n    set(GFLAGS_LIBRARIES extern_gflags)\n    set(GFLAGS_INCLUDE_DIRS \"${PROJECT_SOURCE_DIR}/extern/gflags/src\")\n  endif()\n\n  if(WITH_SYSTEM_GLOG)\n    find_package(Glog)\n    if(NOT GLOG_FOUND)\n      message(FATAL_ERROR \"System wide Glog is requested but was not found\")\n    endif()\n    # `FindGlog` does not define this, and we are not even sure what to use here.\n    set(GLOG_DEFINES)\n  else()\n    set(GLOG_DEFINES\n      -DGOOGLE_GLOG_DLL_DECL=\n    )\n    set(GLOG_LIBRARIES extern_glog)\n    if(WIN32)\n      set(GLOG_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/glog/src/windows)\n    else()\n      set(GLOG_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/glog/include)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Audaspace Source Files\nDESCRIPTION: This snippet defines the `SRC` variable, which is a list of all C++ source files that make up the Audaspace library. These files are located in various subdirectories under the `src` directory, such as `devices`, `file`, `fx`, `generator`, `respec`, `sequence`, and `util`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n\tsrc/devices/DeviceManager.cpp\n\tsrc/devices/MixingThreadDevice.cpp\n\tsrc/devices/NULLDevice.cpp\n\tsrc/devices/ReadDevice.cpp\n\tsrc/devices/SoftwareDevice.cpp\n\tsrc/devices/ThreadedDevice.cpp\n\tsrc/Exception.cpp\n\tsrc/file/File.cpp\n\tsrc/file/FileManager.cpp\n\tsrc/file/FileWriter.cpp\n\tsrc/fx/Accumulator.cpp\n\tsrc/fx/ADSR.cpp\n\tsrc/fx/ADSRReader.cpp\n\tsrc/fx/BaseIIRFilterReader.cpp\n\tsrc/fx/ButterworthCalculator.cpp\n\tsrc/fx/Butterworth.cpp\n\tsrc/fx/CallbackIIRFilterReader.cpp\n\tsrc/fx/Delay.cpp\n\tsrc/fx/DelayReader.cpp\n\tsrc/fx/DynamicIIRFilter.cpp\n\tsrc/fx/DynamicIIRFilterReader.cpp\n\tsrc/fx/DynamicMusic.cpp\n\tsrc/fx/Effect.cpp\n\tsrc/fx/EffectReader.cpp\n\tsrc/fx/Envelope.cpp\n\tsrc/fx/Fader.cpp\n\tsrc/fx/FaderReader.cpp\n\tsrc/fx/HighpassCalculator.cpp\n\tsrc/fx/Highpass.cpp\n\tsrc/fx/IIRFilter.cpp\n\tsrc/fx/IIRFilterReader.cpp\n\tsrc/fx/Limiter.cpp\n\tsrc/fx/LimiterReader.cpp\n\tsrc/fx/Loop.cpp\n\tsrc/fx/LoopReader.cpp\n\tsrc/fx/LowpassCalculator.cpp\n\tsrc/fx/Lowpass.cpp\n\tsrc/fx/Modulator.cpp\n\tsrc/fx/ModulatorReader.cpp\n\tsrc/fx/MutableReader.cpp\n\tsrc/fx/MutableSound.cpp\n\tsrc/fx/Pitch.cpp\n\tsrc/fx/PitchReader.cpp\n\tsrc/fx/PlaybackManager.cpp\n\tsrc/fx/PlaybackCategory.cpp\n\tsrc/fx/Reverse.cpp\n\tsrc/fx/ReverseReader.cpp\n\tsrc/fx/SoundList.cpp\n\tsrc/fx/Source.cpp\n\tsrc/fx/Sum.cpp\n\tsrc/fx/Threshold.cpp\n\tsrc/fx/Volume.cpp\n\tsrc/fx/VolumeReader.cpp\n\tsrc/fx/VolumeSound.cpp\n\tsrc/fx/VolumeStorage.cpp\n\tsrc/generator/Sawtooth.cpp\n\tsrc/generator/SawtoothReader.cpp\n\tsrc/generator/Silence.cpp\n\tsrc/generator/SilenceReader.cpp\n\tsrc/generator/Sine.cpp\n\tsrc/generator/SineReader.cpp\n\tsrc/generator/Square.cpp\n\tsrc/generator/SquareReader.cpp\n\tsrc/generator/Triangle.cpp\n\tsrc/generator/TriangleReader.cpp\n\tsrc/respec/ChannelMapper.cpp\n\tsrc/respec/ChannelMapperReader.cpp\n\tsrc/respec/Converter.cpp\n\tsrc/respec/ConverterFunctions.cpp\n\tsrc/respec/ConverterReader.cpp\n\tsrc/respec/JOSResample.cpp\n\tsrc/respec/JOSResampleReaderCoeffHigh.cpp\n\tsrc/respec/JOSResampleReaderCoeffLow.cpp\n\tsrc/respec/JOSResampleReaderCoeffMedium.cpp\n\tsrc/respec/JOSResampleReader.cpp\n\tsrc/respec/LinearResample.cpp\n\tsrc/respec/LinearResampleReader.cpp\n\tsrc/respec/Mixer.cpp\n\tsrc/respec/ResampleReader.cpp\n\tsrc/respec/SpecsChanger.cpp\n\tsrc/sequence/AnimateableProperty.cpp\n\tsrc/sequence/Double.cpp\n\tsrc/sequence/DoubleReader.cpp\n\tsrc/sequence/PingPong.cpp\n\tsrc/sequence/Sequence.cpp\n\tsrc/sequence/SequenceData.cpp\n\tsrc/sequence/SequenceEntry.cpp\n\tsrc/sequence/SequenceHandle.cpp\n\tsrc/sequence/SequenceReader.cpp\n\tsrc/sequence/Superpose.cpp\n\tsrc/sequence/SuperposeReader.cpp\n\tsrc/util/Barrier.cpp\n\tsrc/util/Buffer.cpp\n\tsrc/util/BufferReader.cpp\n\tsrc/util/RingBuffer.cpp\n\tsrc/util/StreamBuffer.cpp\n\tsrc/util/ThreadPool.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Gflags Library - CMake\nDESCRIPTION: This snippet conditionally appends the 'extern_gflags' library to the LIB variable if WITH_SYSTEM_GFLAGS is not enabled. This indicates that the gflags library is used as an external dependency for glog.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_SYSTEM_GFLAGS)\n  list(APPEND LIB\n    extern_gflags\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Baking Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to baking functionalities in the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_BAKE_HEADERS\n  bake/bake.h\n)\n```\n\n----------------------------------------\n\nTITLE: Processing startup.blend and adding library\nDESCRIPTION: This snippet processes the `startup.blend` file, converting it to C code. It then defines a library `bf_editor_datafiles` including the generated sources and other configurations, and creates an alias `bf::editor::datafiles` for it.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n  data_to_c_simple(../../../../release/datafiles/startup.blend SRC)\nendif()\n\nunset(ICON_NAMES)\n\nblender_add_lib(bf_editor_datafiles \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::editor::datafiles ALIAS bf_editor_datafiles)\n```\n\n----------------------------------------\n\nTITLE: Add Wavefront OBJ Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the `bf_io_wavefront_obj` library.  It passes the source files, include directories, system include directories, and library dependencies to the function. This command compiles the source files and links them into a library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_wavefront_obj \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on the `bf_rna` library, ensuring that the RNA (Runtime Name Access) prototypes are generated before the shader node library is built.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes_shader bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for TBB on Windows (CMake)\nDESCRIPTION: This snippet conditionally adds a preprocessor definition for TBB on Windows. It defines `-DNOMINMAX` to prevent conflicts between the Windows API's `min`/`max` macros and the STL's `std::min`/`std::max` functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes `Windows.h` which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries in CMake\nDESCRIPTION: This snippet defines the libraries that the 3D viewport editor module depends on. These libraries provide various functionalities, including animation rigging, asset management, font handling, kernel operations, and more. `PRIVATE` visibility indicates that these libraries are only needed during the build process of `bf_editor_space_view3d` and are not exposed to other modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_curves\n  bf_editor_lattice\n  bf_editor_mesh\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Using FetchContent to Retrieve fast_float in CMake\nDESCRIPTION: This snippet shows how to use CMake's `FetchContent` module to automatically download and include the fast_float library. It requires CMake 3.11 or later.  You must specify the GIT_REPOSITORY and GIT_TAG. `target_link_libraries` links your program to the fast_float library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nFetchContent_Declare(\n  fast_float\n  GIT_REPOSITORY https://github.com/lemire/fast_float.git\n  GIT_TAG tags/v1.1.2\n  GIT_SHALLOW TRUE)\n\nFetchContent_MakeAvailable(fast_float)\ntarget_link_libraries(myprogram PUBLIC fast_float)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory\nDESCRIPTION: Adds a subdirectory to the build process. This is the fundamental operation used to incorporate external libraries and modules into the project. The specific subdirectory added depends on various configuration flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(atomic)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(clog)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ghost)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(guardedalloc)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(libmv)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(memutil)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(opencolorio)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(opensubdiv)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(mikktspace)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(eigen)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(sky)\n```\n\n----------------------------------------\n\nTITLE: Setting Alembic I/O Tests - CMake\nDESCRIPTION: Configures Alembic import/export tests, using `add_python_test` and `add_blender_test`. It first checks for Alembic using `find_package_wrapper(Alembic)` and reports a fatal error if not found. The tests involve exporting and importing Alembic files.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC AND TEST_SRC_DIR_EXISTS)\n  find_package_wrapper(Alembic)\n  if(NOT ALEMBIC_FOUND)\n    message(FATAL_ERROR \"Alembic is enabled but cannot be found\")\n  endif()\n  get_filename_component(real_include_dir ${ALEMBIC_INCLUDE_DIR} REALPATH)\n  get_filename_component(ALEMBIC_ROOT_DIR ${real_include_dir} DIRECTORY)\n\n  add_python_test(\n    io_alembic_export_tests\n    ${CMAKE_CURRENT_LIST_DIR}/alembic_export_tests.py\n    --blender \"${TEST_BLENDER_EXE}\"\n    --testdir \"${TEST_SRC_DIR}/alembic\"\n    --alembic-root \"${ALEMBIC_ROOT_DIR}\"\n  )\n\n  add_blender_test(\n    script_alembic_io\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_alembic_io_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/alembic\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenVDB Integration - CMake\nDESCRIPTION: Conditionally includes OpenVDB integration, adding a preprocessor definition, include directories, system include directories, and libraries to the Cycles build.  This enables Cycles to render volumetric data stored in the OpenVDB format.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC\n    ../../openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Sound Location with aud.Handle\nDESCRIPTION: This snippet updates the location of a playing sound using the aud.Handle.location property.  It calculates the X and Z coordinates based on the time elapsed, creating a circular path for the sound. Requires the 'math' and 'time' modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstart = time.time()\n\nwhile time.time() - start < 10:\n\tangle = time.time() - start\n\n\thandle.location = [math.sin(angle), 0, -math.cos(angle)]\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories needed to compile the physics module. It includes internal Blender directories like `../include`, `../../makesrna`, and external libraries like `../../../../intern/mantaflow/extern`. It also adds the RNA prototypes directory, which is generated during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../intern/mantaflow/extern\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Compositor Nodes\nDESCRIPTION: This snippet specifies the source files to be compiled for the compositor nodes library. These files contain the implementations of various compositor nodes, including operations like alpha over, antialiasing, blur, color correction, and many more.  The files cover various compositing functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  nodes/node_composite_alpha_over.cc\n  nodes/node_composite_antialiasing.cc\n  nodes/node_composite_bilateralblur.cc\n  nodes/node_composite_blur.cc\n  nodes/node_composite_bokehblur.cc\n  nodes/node_composite_bokehimage.cc\n  nodes/node_composite_boxmask.cc\n  nodes/node_composite_brightness.cc\n  nodes/node_composite_channel_matte.cc\n  nodes/node_composite_chroma_matte.cc\n  nodes/node_composite_color_matte.cc\n  nodes/node_composite_color_spill.cc\n  nodes/node_composite_colorbalance.cc\n  nodes/node_composite_colorcorrection.cc\n  nodes/node_composite_common.cc\n  nodes/node_composite_composite.cc\n  nodes/node_composite_convert_color_space.cc\n  nodes/node_composite_cornerpin.cc\n  nodes/node_composite_crop.cc\n  nodes/node_composite_cryptomatte.cc\n  nodes/node_composite_curves.cc\n  nodes/node_composite_defocus.cc\n  nodes/node_composite_denoise.cc\n  nodes/node_composite_despeckle.cc\n  nodes/node_composite_diff_matte.cc\n  nodes/node_composite_dilate.cc\n  nodes/node_composite_directionalblur.cc\n  nodes/node_composite_displace.cc\n  nodes/node_composite_distance_matte.cc\n  nodes/node_composite_double_edge_mask.cc\n  nodes/node_composite_ellipsemask.cc\n  nodes/node_composite_exposure.cc\n  nodes/node_composite_file_output.cc\n  nodes/node_composite_filter.cc\n  nodes/node_composite_flip.cc\n  nodes/node_composite_gamma.cc\n  nodes/node_composite_glare.cc\n  nodes/node_composite_hue_sat_val.cc\n  nodes/node_composite_huecorrect.cc\n  nodes/node_composite_id_mask.cc\n  nodes/node_composite_image.cc\n  nodes/node_composite_image_info.cc\n  nodes/node_composite_inpaint.cc\n  nodes/node_composite_invert.cc\n  nodes/node_composite_keying.cc\n  nodes/node_composite_keyingscreen.cc\n  nodes/node_composite_kuwahara.cc\n  nodes/node_composite_lensdist.cc\n  nodes/node_composite_levels.cc\n  nodes/node_composite_luma_matte.cc\n  nodes/node_composite_map_range.cc\n  nodes/node_composite_map_uv.cc\n  nodes/node_composite_map_value.cc\n  nodes/node_composite_mask.cc\n  nodes/node_composite_math.cc\n  nodes/node_composite_mixrgb.cc\n  nodes/node_composite_movieclip.cc\n  nodes/node_composite_moviedistortion.cc\n  nodes/node_composite_normal.cc\n  nodes/node_composite_normalize.cc\n  nodes/node_composite_pixelate.cc\n  nodes/node_composite_planetrackdeform.cc\n  nodes/node_composite_posterize.cc\n  nodes/node_composite_premulkey.cc\n  nodes/node_composite_rgb.cc\n  nodes/node_composite_rotate.cc\n  nodes/node_composite_scale.cc\n  nodes/node_composite_scene_time.cc\n  nodes/node_composite_sepcomb_color.cc\n  nodes/node_composite_sepcomb_hsva.cc\n  nodes/node_composite_sepcomb_rgba.cc\n  nodes/node_composite_sepcomb_xyz.cc\n  nodes/node_composite_sepcomb_ycca.cc\n  nodes/node_composite_sepcomb_yuva.cc\n  nodes/node_composite_setalpha.cc\n  nodes/node_composite_split.cc\n  nodes/node_composite_stabilize2d.cc\n  nodes/node_composite_sunbeams.cc\n  nodes/node_composite_switch.cc\n  nodes/node_composite_switchview.cc\n  nodes/node_composite_texture.cc\n  nodes/node_composite_tonemap.cc\n  nodes/node_composite_trackpos.cc\n  nodes/node_composite_transform.cc\n  nodes/node_composite_translate.cc\n  nodes/node_composite_val_to_rgb.cc\n  nodes/node_composite_value.cc\n  nodes/node_composite_vec_blur.cc\n  nodes/node_composite_viewer.cc\n  nodes/node_composite_zcombine.cc\n\n  node_composite_register.cc\n  node_composite_tree.cc\n  node_composite_util.cc\n\n  node_composite_register.hh\n  node_composite_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Lists the C++ source files that comprise the transform editor library. These files implement various transformation functionalities, including constraints, conversions, gizmos, modes, and snapping features. The source files cover a wide range of object types and transformation scenarios within the Blender environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/transform/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  transform.cc\n  transform_constraints.cc\n  transform_convert.cc\n  transform_convert_action.cc\n  transform_convert_armature.cc\n  transform_convert_cursor.cc\n  transform_convert_curve.cc\n  transform_convert_curves.cc\n  transform_convert_graph.cc\n  transform_convert_grease_pencil.cc\n  transform_convert_lattice.cc\n  transform_convert_mask.cc\n  transform_convert_mball.cc\n  transform_convert_mesh.cc\n  transform_convert_mesh_edge.cc\n  transform_convert_mesh_skin.cc\n  transform_convert_mesh_uv.cc\n  transform_convert_mesh_vert_cdata.cc\n  transform_convert_nla.cc\n  transform_convert_node.cc\n  transform_convert_object.cc\n  transform_convert_object_texspace.cc\n  transform_convert_paintcurve.cc\n  transform_convert_particle.cc\n  transform_convert_pointcloud.cc\n  transform_convert_sculpt.cc\n  transform_convert_sequencer.cc\n  transform_convert_sequencer_image.cc\n  transform_convert_sequencer_retiming.cc\n  transform_convert_tracking.cc\n  transform_convert_tracking_curves.cc\n  transform_draw_cursors.cc\n  transform_generics.cc\n  transform_gizmo_2d.cc\n  transform_gizmo_3d.cc\n  transform_gizmo_3d_cage.cc\n  transform_gizmo_3d_shear.cc\n  transform_gizmo_extrude_3d.cc\n  transform_input.cc\n  transform_mode.cc\n  transform_mode_align.cc\n  transform_mode_baketime.cc\n  transform_mode_bbone_resize.cc\n  transform_mode_bend.cc\n  transform_mode_boneenvelope.cc\n  transform_mode_boneroll.cc\n  transform_mode_curveshrinkfatten.cc\n  transform_mode_customdata.cc\n  transform_mode_edge_rotate_normal.cc\n  transform_mode_edge_seq_slide.cc\n  transform_mode_edge_slide.cc\n  transform_mode_gpopacity.cc\n  transform_mode_maskshrinkfatten.cc\n  transform_mode_mirror.cc\n  transform_mode_push_pull.cc\n  transform_mode_resize.cc\n  transform_mode_rotate.cc\n  transform_mode_shear.cc\n  transform_mode_shrink_fatten.cc\n  transform_mode_skin_resize.cc\n  transform_mode_snapsource.cc\n  transform_mode_tilt.cc\n  transform_mode_timescale.cc\n  transform_mode_timeslide.cc\n  transform_mode_timetranslate.cc\n  transform_mode_tosphere.cc\n  transform_mode_trackball.cc\n  transform_mode_translate.cc\n  transform_mode_vert_slide.cc\n  transform_ops.cc\n  transform_orientations.cc\n  transform_snap.cc\n  transform_snap_animation.cc\n  transform_snap_object.cc\n  transform_snap_object_armature.cc\n  transform_snap_object_camera.cc\n  transform_snap_object_curve.cc\n  transform_snap_object_editmesh.cc\n  transform_snap_object_mesh.cc\n  transform_snap_sequencer.cc\n\n  transform.hh\n  transform_constraints.hh\n  transform_convert.hh\n  transform_draw_cursors.hh\n  transform_gizmo.hh\n  transform_mode.hh\n  transform_orientations.hh\n  transform_snap.hh\n  transform_snap_object.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Printing Final Configuration\nDESCRIPTION: This snippet defines two functions, `info_cfg_option` and `info_cfg_text`, used to format and print configuration options to the console. It iterates through a list of CMake variables (e.g., WITH_ALEMBIC, WITH_GAMEENGINE) and displays their values in a formatted manner. This is done only during the first run of CMake.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_147\n\nLANGUAGE: cmake\nCODE:\n```\nif(FIRST_RUN)\n\n  set(_config_msg \"\\nBlender Configuration\\n=====================\")\n\n  function(info_cfg_option\n    _setting\n    )\n\n    set(_msg \"  - ${_setting}\")\n    string(LENGTH \"${_msg}\" _len)\n    while(\"36\" GREATER \"${_len}\")\n      string(APPEND _msg \" \")\n      math(EXPR _len \"${_len} + 1\")\n    endwhile()\n\n    set(_config_msg \"${_config_msg}\\n${_msg}${${_setting}}\" PARENT_SCOPE)\n  endfunction()\n\n  function(info_cfg_text\n    _text\n    )\n\n    set(_config_msg \"${_config_msg}\\n\\n  ${_text}\" PARENT_SCOPE)\n  endfunction()\n\n  message(STATUS \"C Compiler:   \\\"${CMAKE_C_COMPILER_ID}\\\"\")\n  message(STATUS \"C++ Compiler: \\\"${CMAKE_CXX_COMPILER_ID}\\\"\")\n\n  info_cfg_text(\"Build Options:\")\n  info_cfg_option(WITH_ALEMBIC)\n  info_cfg_option(WITH_GAMEENGINE)\n  info_cfg_option(WITH_GAMEENGINE_SECURITY)\n  info_cfg_option(WITH_PLAYER)\n  info_cfg_option(WITH_BULLET)\n  info_cfg_option(WITH_CLANG)\n  info_cfg_option(WITH_CYCLES)\n  info_cfg_option(WITH_FFTW3)\n  info_cfg_option(WITH_FREESTYLE)\n  info_cfg_option(WITH_GMP)\n  info_cfg_option(WITH_HARU)\n  info_cfg_option(WITH_IK_ITASC)\n  info_cfg_option(WITH_IK_SOLVER)\n  info_cfg_option(WITH_INPUT_NDOF)\n  info_cfg_option(WITH_INPUT_IME)\n  info_cfg_option(WITH_INTERNATIONAL)\n  info_cfg_option(WITH_MANIFOLD)\n  info_cfg_option(WITH_OPENCOLLADA)\n  info_cfg_option(WITH_OPENCOLORIO)\n  info_cfg_option(WITH_OPENIMAGEDENOISE)\n  info_cfg_option(WITH_OPENSUBDIV)\n  info_cfg_option(WITH_OPENVDB)\n  info_cfg_option(WITH_POTRACE)\n  info_cfg_option(WITH_PUGIXML)\n  info_cfg_option(WITH_QUADRIFLOW)\n  info_cfg_option(WITH_TBB)\n  info_cfg_option(WITH_USD)\n  info_cfg_option(WITH_MATERIALX)\n  info_cfg_option(WITH_XR_OPENXR)\n\n  info_cfg_text(\"Compiler Options:\")\n  info_cfg_option(WITH_BUILDINFO)\n\n  info_cfg_text(\"System Options:\")\n  info_cfg_option(WITH_INSTALL_PORTABLE)\n  info_cfg_option(WITH_MEM_JEMALLOC)\n  info_cfg_option(WITH_MEM_VALGRIND)\n\n  info_cfg_text(\"GHOST Options:\")\n  info_cfg_option(WITH_GHOST_DEBUG)\n  info_cfg_option(WITH_GHOST_SDL)\n  if(UNIX AND NOT APPLE)\n    info_cfg_option(WITH_GHOST_X11)\n    info_cfg_option(WITH_GHOST_WAYLAND)\n    if(WITH_GHOST_X11)\n      info_cfg_option(WITH_GHOST_XDND)\n      info_cfg_option(WITH_X11_XF86VMODE)\n      info_cfg_option(WITH_X11_XFIXES)\n      info_cfg_option(WITH_X11_XINPUT)\n      info_cfg_option(WITH_X11_XINERAMA)\n    endif()\n    if(WITH_GHOST_WAYLAND)\n      info_cfg_option(WITH_GHOST_WAYLAND_DYNLOAD)\n      info_cfg_option(WITH_GHOST_WAYLAND_LIBDECOR)\n    endif()\n  endif()\n\n  info_cfg_text(\"Image Formats:\")\n  info_cfg_option(WITH_IMAGE_CINEON)\n  info_cfg_option(WITH_IMAGE_OPENEXR)\n  info_cfg_option(WITH_IMAGE_OPENJPEG)\n\n  info_cfg_text(\"Audio:\")\n  info_cfg_option(WITH_AUDASPACE)\n  info_cfg_option(WITH_CODEC_FFMPEG)\n  info_cfg_option(WITH_CODEC_SNDFILE)\n  info_cfg_option(WITH_COREAUDIO)\n  info_cfg_option(WITH_JACK)\n  info_cfg_option(WITH_JACK_DYNLOAD)\n  info_cfg_option(WITH_OPENAL)\n  info_cfg_option(WITH_PULSEAUDIO)\n  info_cfg_option(WITH_PULSEAUDIO_DYNLOAD)\n  info_cfg_option(WITH_SDL)\n  info_cfg_option(WITH_WASAPI)\n\n  info_cfg_text(\"Compression:\")\n  info_cfg_option(WITH_LZMA)\n  info_cfg_option(WITH_LZO)\n\n  if(WITH_PYTHON)\n    info_cfg_text(\"Python:\")\n    info_cfg_option(WITH_PYTHON_INSTALL)\n    info_cfg_option(WITH_PYTHON_INSTALL_NUMPY)\n    info_cfg_option(WITH_PYTHON_INSTALL_ZSTANDARD)\n    info_cfg_option(WITH_PYTHON_MODULE)\n    info_cfg_option(WITH_PYTHON_SAFETY)\n  endif()\n\n  info_cfg_text(\"Modifiers:\")\n  info_cfg_option(WITH_MOD_FLUID)\n  info_cfg_option(WITH_MOD_OCEANSIM)\n  info_cfg_option(WITH_MOD_REMESH)\n\n  info_cfg_text(\"Rendering:\")\n  info_cfg_option(WITH_HYDRA)\n\n  if(WITH_CYCLES)\n    info_cfg_text(\"Rendering (Cycles):\")\n    info_cfg_option(WITH_CYCLES_OSL)\n    info_cfg_option(WITH_CYCLES_EMBREE)\n    info_cfg_option(WITH_CYCLES_PATH_GUIDING)\n    if(NOT APPLE)\n      info_cfg_option(WITH_CYCLES_DEVICE_OPTIX)\n      info_cfg_option(WITH_CYCLES_DEVICE_CUDA)\n      info_cfg_option(WITH_CYCLES_CUDA_BINARIES)\n      info_cfg_option(WITH_CYCLES_DEVICE_ONEAPI)\n      info_cfg_option(WITH_CYCLES_ONEAPI_BINARIES)\n      info_cfg_option(WITH_CYCLES_DEVICE_HIP)\n      info_cfg_option(WITH_CYCLES_HIP_BINARIES)\n      info_cfg_option(WITH_CYCLES_DEVICE_HIPRT)\n    endif()\n  endif()\n\n  info_cfg_text(\"\")\n\n  message(STATUS \"${_config_msg}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Test Sources and Includes\nDESCRIPTION: This snippet defines the source files, include directories, and libraries needed for running tests. These settings are conditional and depend on whether testing is enabled (`WITH_GTESTS`) and which backends are being tested (e.g., `WITH_GPU_BACKEND_TESTS`, `WITH_VULKAN_BACKEND`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC)\n  set(TEST_INC)\n  set(TEST_LIB\n    bf_intern_ghost\n    bf_imbuf\n    bf_windowmanager\n  )\n\n  if(WITH_GPU_BACKEND_TESTS)\n    list(APPEND TEST_SRC\n      tests/buffer_texture_test.cc\n      tests/compute_test.cc\n      tests/framebuffer_test.cc\n      tests/immediate_test.cc\n      tests/index_buffer_test.cc\n      tests/push_constants_test.cc\n      tests/shader_create_info_test.cc\n      tests/shader_test.cc\n      tests/specialization_constants_test.cc\n      tests/state_blend_test.cc\n      tests/storage_buffer_test.cc\n      tests/texture_test.cc\n      tests/vertex_buffer_test.cc\n    )\n  endif()\n\n  if(WITH_VULKAN_BACKEND)\n    list(APPEND TEST_SRC\n      vulkan/tests/vk_data_conversion_test.cc\n      vulkan/tests/vk_memory_layout_test.cc\n      vulkan/render_graph/tests/vk_render_graph_test_compute.cc\n      vulkan/render_graph/tests/vk_render_graph_test_present.cc\n      vulkan/render_graph/tests/vk_render_graph_test_render.cc\n      vulkan/render_graph/tests/vk_render_graph_test_scheduler.cc\n      vulkan/render_graph/tests/vk_render_graph_test_transfer.cc\n\n      vulkan/render_graph/tests/vk_render_graph_test_types.hh\n    )\n  endif()\n\n  # Enable shader validation on build-bot for Metal\n  if(WITH_METAL_BACKEND AND NOT WITH_GPU_DRAW_TESTS AND\n     NOT (WITH_GTESTS AND WITH_GPU_BACKEND_TESTS)) # Avoid duplicate source file\n    list(APPEND TEST_SRC\n      tests/shader_create_info_test.cc\n    )\n  endif()\n\n  set(TEST_COMMON_SRC\n    tests/gpu_testing.cc\n    tests/gpu_testing.hh\n  )\n\n  blender_add_test_suite_lib(gpu\n    \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\" \"${TEST_COMMON_SRC}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries\nDESCRIPTION: This snippet defines the libraries that the OCIO module depends on.  It includes Blender libraries (blenlib, dna, gpu, guardedalloc) and any OpenColorIO libraries when `WITH_OPENCOLORIO` is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opencolorio/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting File Dates on macOS (CMake)\nDESCRIPTION: This snippet retrieves the current date and time using `execute_process` and then uses the `SetFile` command to set the creation and modification dates of the `Blender.app` bundle on macOS. It also ensures the directory exists before attempting to set the file dates.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\n  # Gather the date in finder-style.\n  execute_process(\n    COMMAND date \"+%m/%d/%Y/%H:%M\"\n    OUTPUT_VARIABLE SETFILE_DATE\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n\n  # Give the bundle actual creation/modification date.\n  #\n  # Note that the directory might not yet exist, which happens when CMAKE is first run.\n  if(NOT EXISTS ${EXECUTABLE_OUTPUT_PATH}/Blender.app)\n    file(MAKE_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/Blender.app)\n  endif()\n  execute_process(\n    COMMAND SetFile -d ${SETFILE_DATE} -m ${SETFILE_DATE} ${EXECUTABLE_OUTPUT_PATH}/Blender.app\n  )\n```\n\n----------------------------------------\n\nTITLE: Performing Delayed Installation\nDESCRIPTION: This snippet performs a delayed installation based on whether Blender is enabled and whether it is a standalone repository.  It either installs to the default location or a specified binary directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_BLENDER)\n  if(CYCLES_STANDALONE_REPOSITORY)\n    delayed_do_install()\n  else()\n    delayed_do_install(${CMAKE_BINARY_DIR}/bin)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional UTF Conversion Include\nDESCRIPTION: If the target platform is Windows (`WIN32`), it appends the UTF conversion include directory to the list of include directories. This adds necessary headers for UTF encoding conversion, likely due to differing character encoding handling on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  list(APPEND INC\n    ../../../intern/utfconv\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Warnings for MSVC\nDESCRIPTION: This snippet configures warning flags for the MSVC compiler. It sets the warning level, enables specific warnings, and disables others that are considered less important or cause false positives. It uses the `string(REPLACE)` command to format the warnings before setting them as C and C++ compiler flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_129\n\nLANGUAGE: cmake\nCODE:\n```\nset(_WARNINGS\n    # warning level:\n    \"/W3\"\n    \"/w34062\"  # switch statement contains 'default' but no 'case' labels\n    \"/w34100\"  # 'identifier' : unreferenced formal parameter\n    \"/w34115\"  # 'type' : named type definition in parentheses\n    \"/w34189\"  # local variable is initialized but not referenced\n    # see https://docs.microsoft.com/en-us/cpp/error-messages/compiler-warnings/c5038?view=vs-2017\n    \"/w35038\"  # order of initialization in c++ constructors\n    # disable:\n    \"/wd4018\"  # signed/unsigned mismatch\n    \"/wd4146\"  # unary minus operator applied to unsigned type, result still unsigned\n    \"/wd4065\"  # switch statement contains 'default' but no 'case' labels\n    \"/wd4127\"  # conditional expression is constant\n    \"/wd4181\"  # qualifier applied to reference type; ignored\n    \"/wd4200\"  # zero-sized array in struct/union\n    \"/wd4244\"  # conversion from 'type1' to 'type2', possible loss of data\n    \"/wd4267\"  # conversion from 'size_t' to 'type', possible loss of data\n    \"/wd4305\"  # truncation from 'type1' to 'type2'\n    \"/wd4800\"  # forcing value to bool 'true' or 'false'\n    \"/wd4828\"  # The file contains a character that is illegal\n    \"/wd4996\"  # identifier was declared deprecated\n    \"/wd4661\"  # no suitable definition provided for explicit template instantiation request\n    \"/wd4848\"  # 'no_unique_address' is a vendor extension in C++17\n    # errors:\n    \"/we4013\"  # 'function' undefined; assuming extern returning int\n    \"/we4133\"  # incompatible pointer types\n    \"/we4431\"  # missing type specifier - int assumed\n    \"/we4033\"  # 'function' must return a value\n  )\n\n  string(REPLACE \";\" \" \" _WARNINGS \"${_WARNINGS}\")\n  set(C_WARNINGS \"${_WARNINGS}\")\n  set(CXX_WARNINGS \"${_WARNINGS}\")\n  unset(_WARNINGS)\n```\n\n----------------------------------------\n\nTITLE: Disabling ASAN for External Dependencies with CMake\nDESCRIPTION: Disables Address Sanitizer (ASAN) for external dependencies to avoid linking issues and binary size problems, especially when ASAN is not externally managed. This ensures that ASAN-related issues are contained within the main project and not propagated to external libraries. This is skipped for MSVC due to ODR violation issues.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COMPILER_ASAN AND NOT WITH_COMPILER_ASAN_EXTERN)\n  # Not only does MSVC not have an -fno-sanitize=all option, if you remove the /fsanitize=address\n  # flag at this point, it will give a linker error as it generates an ODR violation for some\n  # vector classes, for details see :\n  # https://learn.microsoft.com/en-us/cpp/sanitizers/error-container-overflow?view=msvc-170\n  if(NOT MSVC)\n    # Disable ASAN for extern dependencies, as it can lead to linking issues due to too large binaries.\n    string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -fno-sanitize=all\")\n    string(APPEND CMAKE_C_FLAGS_RELWITHDEBINFO \" -fno-sanitize=all\")\n    string(APPEND CMAKE_CXX_FLAGS_DEBUG \" -fno-sanitize=all\")\n    string(APPEND CMAKE_C_FLAGS_DEBUG \" -fno-sanitize=all\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories to the Build - CMake\nDESCRIPTION: This CMake snippet adds several subdirectories to the build process. These subdirectories contain core modules of the UPBGE engine, including internal components (`intern`), generic utilities (`generic`), GPU functionalities (`gpu`), math utilities (`mathutils`), and the bmesh library (`bmesh`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(intern)\nadd_subdirectory(generic)\nadd_subdirectory(gpu)\nadd_subdirectory(mathutils)\nadd_subdirectory(bmesh)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Native CPU - CMake\nDESCRIPTION: This snippet sets compiler flags when `WITH_CYCLES_NATIVE_ONLY` is enabled. It disables SSE and AVX and adds `-DWITH_KERNEL_NATIVE`. For non-MSVC compilers, it attempts to add `-march=native` flag to enable all instruction sets supported by the host CPU. For MSVC it uses a script to detect supported architecture flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_NATIVE_ONLY)\n  set(CXX_HAS_SSE42 FALSE)\n  set(CXX_HAS_AVX2 FALSE)\n  add_definitions(\n    -DWITH_KERNEL_NATIVE\n  )\n\n  if(NOT MSVC)\n    add_check_cxx_compiler_flags(\n      CMAKE_CXX_FLAGS\n      _has_march_native \"-march=native\"\n    )\n    if(_has_march_native)\n      string(APPEND CMAKE_CXX_FLAGS \" -march=native\")\n    else()\n      string(APPEND CMAKE_CXX_FLAGS \"\")\n    endif()\n    unset(_has_march_native)\n  else()\n    if(NOT MSVC_NATIVE_ARCH_FLAGS)\n      try_run(\n        arch_run_result\n        arch_compile_result\n        ${CMAKE_CURRENT_BINARY_DIR}/\n        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/msvc_arch_flags.c\n        COMPILE_OUTPUT_VARIABLE arch_compile_output\n        RUN_OUTPUT_VARIABLE arch_run_output\n      )\n      if(arch_compile_result AND \"${arch_run_result}\" EQUAL \"0\")\n        string(STRIP ${arch_run_output} arch_run_output)\n        set(MSVC_NATIVE_ARCH_FLAGS ${arch_run_output} CACHE STRING \"MSVC Native architecture flags\")\n      endif()\n    endif()\n    string(APPEND CMAKE_CXX_FLAGS \" ${MSVC_NATIVE_ARCH_FLAGS}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions based on Platform\nDESCRIPTION: This snippet sets compiler definitions based on the operating system. It addresses issues related to deprecated headers on Linux and defines flags specific to Windows, including disabling the min/max macros, enabling lean and mean Windows headers, and enabling Boost debug Python features. It also disables GNU STL extensions for clang.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  add_definitions(-D_GLIBCXX_PERMIT_BACKWARD_HASH)\nendif()\nif(WIN32)\n  add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -DBOOST_DEBUG_PYTHON)\nendif()\nadd_definitions(-DBOOST_ALL_NO_LIB)\n\n# Pre-compiled Linux libraries are made with GCC, and USD uses some extensions\n# which lead to an incompatible ABI for Clang. Using those extensions with\n# Clang as well works around the issue.\nif(UNIX AND NOT APPLE)\n  if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    if(DEFINED LIBDIR)\n      add_definitions(-DARCH_HAS_GNU_STL_EXTENSIONS)\n    endif()\n  endif()\nendif()\n\n# USD headers use deprecated TBB headers, silence warning.\nadd_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Compiler Flags for GCC/Clang\nDESCRIPTION: This snippet adds C++ compiler flags, disabling a range of warnings, including unused parameters, private fields, narrowing conversions, non-virtual destructors, unused macros/variables/typedefs, reordering, comments, undefined variable templates, instantiation after specialization, misleading indentation, bitwise operations, implicit conversions, undefined symbols/prefixes, inconsistent missing overrides. It relies on `add_check_cxx_compiler_flags` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_125\n\nLANGUAGE: cmake\nCODE:\n```\nadd_check_cxx_compiler_flags(\n    CXX_REMOVE_STRICT_FLAGS\n\n    CXX_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n    CXX_WARN_NO_UNUSED_PRIVATE_FIELD -Wno-unused-private-field\n    CXX_WARN_NO_CXX11_NARROWING -Wno-c++11-narrowing\n    CXX_WARN_NO_NON_VIRTUAL_DTOR -Wno-non-virtual-dtor\n    CXX_WARN_NO_UNUSED_MACROS -Wno-unused-macros\n    CXX_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    CXX_WARN_NO_REORDER -Wno-reorder\n    CXX_WARN_NO_COMMENT -Wno-comment\n    CXX_WARN_NO_UNUSED_TYPEDEFS -Wno-unused-local-typedefs\n    CXX_WARN_NO_UNDEFINED_VAR_TEMPLATE -Wno-undefined-var-template\n    CXX_WARN_NO_INSTANTIATION_AFTER_SPECIALIZATION -Wno-instantiation-after-specialization\n    CXX_WARN_NO_MISLEADING_INDENTATION -Wno-misleading-indentation\n    CXX_WARN_NO_BITWISE_INSTEAD_OF_LOGICAL -Wno-bitwise-instead-of-logical\n    CXX_WARN_NO_IMPLICIT_CONST_INT_FLOAT_CONVERSION -Wno-implicit-const-int-float-conversion\n    CXX_WARN_NO_UNDEF -Wno-undef\n    CXX_WARN_NO_UNDEF_PREFIX -Wno-undef-prefix\n    CXX_WARN_NO_INCONSISTENT_MISSING_OVERRIDE -Wno-inconsistent-missing-override\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags with CMake\nDESCRIPTION: This snippet uses the `add_check_cxx_compiler_flags` CMake function to add compiler flags.  It defines flags such as `CXX_WARN_CLANG_CL_W3` (which enables warning level 3), and numerous other flags to disable specific warnings using `-Wno-*`. These flags are then applied to the C++ compiler during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_121\n\nLANGUAGE: CMake\nCODE:\n```\n    add_check_cxx_compiler_flags(\n      CXX_WARNINGS\n      CXX_WARN_CLANG_CL_W3 /W3\n      CXX_WARN_CLANG_CL_C++98_COMPAT -Wno-c++98-compat # 352692\n      CXX_WARN_CLANG_CL_OLD_STYLE_CAST -Wno-old-style-cast # 178608\n      CXX_WARN_CLANG_CL_UNSAFE_BUFFER_USAGE -Wno-unsafe-buffer-usage # 89032\n      CXX_WARN_CLANG_CL_MISSING_PROTOTYPES -Wno-missing-prototypes # 25587\n      CXX_WARN_CLANG_CL_SIGN_CONVERSION -Wno-sign-conversion # 20109\n      CXX_WARN_CLANG_CL_MISSING_FIELD_INITIALIZERS -Wno-missing-field-initializers # 20060\n      CXX_WARN_CLANG_CL_EXTRA_SEMI -Wno-extra-semi # 12513\n      CXX_WARN_CLANG_CL_LANGUAGE_EXTENSION_TOKEN -Wno-language-extension-token # 11032\n      CXX_WARN_CLANG_CL_IMPLICIT_FLOAT_CONVERSION -Wno-implicit-float-conversion # 11003\n      CXX_WARN_CLANG_CL_C++98_COMPAT_PEDANTIC -Wno-c++98-compat-pedantic # 10336\n      CXX_WARN_CLANG_CL_IMPLICIT_INT_FLOAT_CONVERSION -Wno-implicit-int-float-conversion # 7354\n      CXX_WARN_CLANG_CL_DOUBLE_PROMOTION -Wno-double-promotion # 7350\n      CXX_WARN_CLANG_CL_PRE_C++17_COMPAT -Wno-pre-c++17-compat # 7303\n      CXX_WARN_CLANG_CL_SHORTEN_64_TO_32 -Wno-shorten-64-to-32 # 7085\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Finding Git Package - CMake\nDESCRIPTION: This snippet checks if WITH_BUILDINFO is enabled, and if so, it attempts to locate the Git package using `find_package`. If the Git package is found (`GIT_FOUND`), it uses the `set_and_warn_library_found` macro (assumed to exist) to record the status. This allows the build to collect build information from Git if it's available.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_87\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BUILDINFO)\n  find_package(Git)\n  set_and_warn_library_found(\"Git\" GIT_FOUND WITH_BUILDINFO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Manifest Files - CMake\nDESCRIPTION: This CMake snippet installs the `blender.exe.manifest` file to the destination directory and renames one of them to `blender-launcher.exe.manifest` when building on Windows with `WITH_WINDOWS_EXTERNAL_MANIFEST` enabled. This step is likely important for embedding specific application requirements within the executable's metadata for operating system compatibility.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\n  if(WITH_WINDOWS_EXTERNAL_MANIFEST)\n    install(\n      FILES ${CMAKE_BINARY_DIR}/blender.exe.manifest\n      DESTINATION \".\"\n    )\n    install(\n      FILES ${CMAKE_BINARY_DIR}/blender.exe.manifest\n      DESTINATION \".\"\n      RENAME blender-launcher.exe.manifest\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding the Compositor Nodes Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the 'bf_nodes_composite' library.  It specifies the source files, include directories, and library dependencies to be used in building the library. This creates the actual library that will be linked against other Blender modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_nodes_composite \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Move Game Object Up Using Python Script in BGE\nDESCRIPTION: This code snippet demonstrates how to move a game object one unit up in the Z-axis within the Blender Game Engine. It utilizes the bge.logic module to access the current controller, retrieve the owner object (KX_GameObject), and then modify its worldPosition.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.types.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# bge.types.SCA_PythonController\ncont = bge.logic.getCurrentController()\n\n# bge.types.KX_GameObject\nobj = cont.owner\nobj.worldPosition.z += 1\n```\n\n----------------------------------------\n\nTITLE: Setting AudaSpace build options\nDESCRIPTION: This snippet sets various build options for the AudaSpace project. These options control whether to build demos, shared libraries, and modules written in C, as well as whether to include documentation, and support for external libraries like FFMPEG, FFTW, JACK, OpenAL, Python, and SDL. It uses `option` command to define boolean options with default values, and `cmake_dependent_option` for options that depend on other options.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(AUDASPACE_STANDALONE)\n\tset(PACKAGE_OPTION QUIET)\n\tlist(APPEND CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}/cmake/\")\n\n\toption(BUILD_DEMOS \"Build and install demos\" TRUE)\n\n\toption(SHARED_LIBRARY \"Build Shared Library\" TRUE)\n\n\toption(WITH_C \"Build C Module\" TRUE)\n\toption(WITH_DOCS \"Build C++ HTML Documentation with Doxygen\" TRUE)\n\toption(WITH_FFMPEG \"Build With FFMPEG\" TRUE)\n\toption(WITH_FFTW \"Build With FFTW\" TRUE)\n\toption(WITH_JACK \"Build With Plugin\" TRUE)\n\toption(WITH_LIBSNDFILE \"Build With LibSndFile\" TRUE)\n\toption(WITH_OPENAL \"Build With OpenAL\" TRUE)\n\toption(WITH_PYTHON \"Build With Python Library\" TRUE)\n\toption(WITH_SDL \"Build With SDL\" TRUE)\n\toption(WITH_STRICT_DEPENDENCIES \"Error and abort instead of warning if a library is not found.\" FALSE)\n\tif(APPLE)\n\t\toption(WITH_COREAUDIO \"Build With CoreAudio\" TRUE)\n\tendif()\n\tif(NOT WIN32 AND NOT APPLE)\n\t\toption(WITH_PULSEAUDIO \"Build With PulseAudio\" TRUE)\n\t\toption(WITH_PIPEWIRE \"Build With PipeWire\" TRUE)\n\tendif()\n\tif(WIN32)\n\t\toption(WITH_WASAPI \"Build With WASAPI\" TRUE)\n\tendif()\n\n\tif(WITH_STRICT_DEPENDENCIES)\n\t\tset(PACKAGE_OPTION REQUIRED)\n\tendif()\n\n\tif(WIN32 OR APPLE)\n\t\tset(DEFAULT_PLUGIN_PATH \".\" CACHE STRING \"Default plugin installation and loading path.\")\n\t\tset(DOCUMENTATION_INSTALL_PATH \"doc\" CACHE PATH \"Path where the documentation is installed.\")\n\telse()\n\t\tset(DEFAULT_PLUGIN_PATH \"${CMAKE_INSTALL_PREFIX}/share/audaspace/plugins\" CACHE STRING \"Default plugin installation and loading path.\")\n\t\tset(DOCUMENTATION_INSTALL_PATH \"share/doc/audaspace\" CACHE PATH \"Path where the documentation is installed.\")\n\tendif()\n\n\tcmake_dependent_option(SEPARATE_C \"Build C Binding as separate library\" TRUE \"WITH_C\" FALSE)\n\tcmake_dependent_option(PLUGIN_COREAUDIO \"Build CoreAudio Plugin\" TRUE \"WITH_COREAUDIO;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_FFMPEG \"Build FFMPEG Plugin\" TRUE \"WITH_FFMPEG;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_JACK \"Build JACK Plugin\" TRUE \"WITH_JACK;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_LIBSNDFILE \"Build LibSndFile Plugin\" TRUE \"WITH_LIBSNDFILE;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_OPENAL \"Build OpenAL Plugin\" TRUE \"WITH_OPENAL;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_PULSEAUDIO \"Build PulseAudio Plugin\" TRUE \"WITH_PULSEAUDIO;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_PIPEWIRE \"Build PipeWire Plugin\" TRUE \"WITH_PIPEWIRE;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_SDL \"Build SDL Plugin\" TRUE \"WITH_SDL;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(PLUGIN_WASAPI \"Build WASAPI Plugin\" TRUE \"WITH_WASAPI;SHARED_LIBRARY\" FALSE)\n\tcmake_dependent_option(WITH_PYTHON_MODULE \"Build Python Module\" TRUE \"WITH_PYTHON\" FALSE)\n\tcmake_dependent_option(USE_SDL2 \"Use SDL2 instead of 1 if available\" TRUE \"WITH_SDL\" FALSE)\n\tcmake_dependent_option(DYNLOAD_JACK \"Dynamically load JACK\" FALSE \"WITH_JACK\" FALSE)\n\tcmake_dependent_option(DYNLOAD_PULSEAUDIO \"Dynamically load PulseAudio\" FALSE \"WITH_PULSEAUDIO\" FALSE)\n\tcmake_dependent_option(DYNLOAD_PIPEWIRE \"Dynamically load PipeWire\" FALSE \"WITH_PIPEWIRE\" FALSE)\n\tcmake_dependent_option(WITH_BINDING_DOCS \"Build C/Python HTML Documentation with Sphinx\" TRUE \"WITH_PYTHON_MODULE\" FALSE)\n\tcmake_dependent_option(WITH_VERSIONED_PLUGINS \"Build Plugins With Sonumber\" TRUE \"SHARED_LIBRARY\" FALSE)\n\n\t# compiler options\n\tset(CMAKE_CXX_STANDARD 17)\n\tset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\n\tif(CMAKE_COMPILER_IS_GNUCXX OR \"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang\")\n\t\tlist(APPEND CMAKE_C_COMPILER_FLAGS \"-fvisibility=hidden\")\n\t\tlist(APPEND CMAKE_CXX_COMPILER_FLAGS \"-fvisibility=hidden\")\n\tendif()\n\n\tif(MSVC)\n\t\tlist(APPEND CMAKE_C_FLAGS_DEBUG \"/Zi /Od\")\n\t\tlist(APPEND CMAKE_CXX_FLAGS_DEBUG \"/Zi /Od\")\n\t\tlist(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG \"/DEBUG\")\n\t\tlist(APPEND CMAKE_STATIC_LINKER_FLAGS_DEBUG \"/DEBUG\")\n\t\tlist(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG \"/DEBUG\")\n\n\t\tif(SHARED_LIBRARY)\n\t\t\tinclude(GenerateExportHeader)\n\t\tendif()\n\tendif()\n\n\tif(APPLE AND NOT CMAKE_OSX_DEPLOYMENT_TARGET)\n\t\tset(CMAKE_OSX_DEPLOYMENT_TARGET \"10.9\" CACHE STRING \"\" FORCE)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the library dependencies for the mathutils module. It includes Blender libraries (blenkernel, blenlib, bmesh, depsgraph, dna, imbuf, guardedalloc) and Python-related libraries and link flags.  These dependencies are necessary for the mathutils module to function correctly within the Blender environment and interact with Python.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/mathutils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_python_ext\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Check UPBGE Release (Python)\nDESCRIPTION: Executes the `upload-release.py` script with the `--check` flag to perform checks before uploading the UPBGE release. The script requires the version number and Git hash as parameters.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/pypi/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./upload-release.py --version X.X.X --git-hash abcd1234 --check\n```\n\n----------------------------------------\n\nTITLE: Parsing UTF-16 String\nDESCRIPTION: Demonstrates how to parse UTF-16 strings using `fast_float::from_chars`.  This example parses a UTF-16 string \"3.1416 xyz \" into a double. Requires the fast_float header and iostream for output.  It showcases the library's support for non-ASCII inputs.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n    const std::u16string input =  u\"3.1416 xyz \";\n    double result;\n    auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\n    if(answer.ec != std::errc()) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n    std::cout << \"parsed the number \" << result << std::endl;\n    return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenColorIO support\nDESCRIPTION: This snippet configures OpenColorIO (OCIO) support. It adds the WITH_OCIO definition and includes the OpenColorIO include directories. This makes the OCIO library available for use.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\n  include_directories(\n    SYSTEM\n    ${OPENCOLORIO_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring JACK support\nDESCRIPTION: This snippet handles the configuration of JACK support for AudaSpace. It uses `find_package` to locate the JACK library. If JACK is found, it sets the source and header files related to JACK functionality. It conditionally adds the `-DDYNLOAD_JACK` definition if dynamic loading of JACK is enabled. If the `PLUGIN_JACK` option is not enabled, it appends JACK include directories and libraries to the global lists.  If JACK is not found, it disables JACK support and issues a warning.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# JACK\nif(WITH_JACK)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(Jack ${PACKAGE_OPTION})\n\tendif()\n\n\tif(JACK_FOUND)\n\t\tset(JACK_SRC\n\t\t\tplugins/jack/JackDevice.cpp\n\t\t\tplugins/jack/JackLibrary.cpp\n\t\t)\n\t\tset(JACK_HDR\n\t\t\tplugins/jack/JackDevice.h\n\t\t\tplugins/jack/JackLibrary.h\n\t\t\tplugins/jack/JackSymbols.h\n\t\t)\n\n\t\tif(DYNLOAD_JACK)\n\t\t\tadd_definitions(-DDYNLOAD_JACK)\n\t\tendif()\n\n\t\tif(NOT PLUGIN_JACK)\n\t\t\tlist(APPEND INCLUDE ${JACK_INCLUDE_DIRS})\n\t\t\tif(NOT DYNLOAD_JACK)\n\t\t\t\tlist(APPEND LIBRARIES ${JACK_LIBRARIES})\n\t\t\tendif()\n\t\t\tlist(APPEND SRC ${JACK_SRC})\n\t\t\tlist(APPEND HDR ${JACK_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS JackDevice)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB JACK_DLLS ${LIBRARY_PATH}/jack/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${JACK_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_JACK FALSE CACHE BOOL \"Build With JACK\" FORCE)\n\t\telse()\n\t\t\tset(WITH_JACK FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"JACK not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enable Cycles Render Engine\nDESCRIPTION: These options control the build configuration for the Cycles rendering engine. They enable core Cycles functionality, Open Shading Language (OSL) support, path guiding, Embree support, logging, debugging features, and standalone applications/tools.  Each option toggles a specific feature or variant of the Cycles build.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_CYCLES \"Enable Cycles Render Engine\" ON)\noption(WITH_CYCLES_OSL \"Build Cycles with OpenShadingLanguage support\" ON)\noption(WITH_CYCLES_PATH_GUIDING \"Build Cycles with path guiding support\" ON)\noption(WITH_CYCLES_EMBREE \"Build Cycles with Embree support\" ON)\noption(WITH_CYCLES_LOGGING \"Build Cycles with logging support\" ON)\noption(WITH_CYCLES_DEBUG \"Build Cycles with options useful for debugging (e.g., MIS)\" OFF)\n\noption(WITH_CYCLES_STANDALONE \"Build Cycles standalone application\" OFF)\noption(WITH_CYCLES_STANDALONE_GUI \"Build Cycles standalone with GUI\" OFF)\noption(WITH_CYCLES_PRECOMPUTE \"Build Cycles data precomputation tool\" OFF)\n\noption(WITH_CYCLES_HYDRA_RENDER_DELEGATE \"Build Cycles Hydra render delegate\" OFF)\n\noption(WITH_CYCLES_DEBUG_NAN \"\\\nBuild Cycles with additional asserts for detecting NaNs and invalid values\"\n  OFF\n)\noption(WITH_CYCLES_NATIVE_ONLY \"\\\nBuild Cycles with native kernel only (which fits current CPU, use for development only)\"\n  OFF\n)\noption(WITH_CYCLES_KERNEL_ASAN \"\\\nBuild Cycles kernels with address sanitizer when WITH_COMPILER_ASAN is on, even if it's very slow\"\n  OFF\n)\nset(CYCLES_TEST_DEVICES CPU CACHE STRING \"\\\nRun regression tests on the specified device types \\\n(CPU CUDA OPTIX HIP HIP-RT METAL METAL-RT ONEAPI ONEAPI-RT)\"\n)\noption(WITH_CYCLES_TEST_OSL \"\\\nRun additional Cycles test with OSL enabled\"\n  OFF\n)\nmark_as_advanced(WITH_CYCLES_KERNEL_ASAN)\nmark_as_advanced(WITH_CYCLES_LOGGING)\nmark_as_advanced(WITH_CYCLES_DEBUG_NAN)\nmark_as_advanced(WITH_CYCLES_NATIVE_ONLY)\nmark_as_advanced(WITH_CYCLES_PRECOMPUTE)\nmark_as_advanced(CYCLES_TEST_DEVICES)\nmark_as_advanced(WITH_CYCLES_TEST_OSL)\n```\n\n----------------------------------------\n\nTITLE: Accessing Vertex Group Weights in BMesh (Python)\nDESCRIPTION: This code snippet demonstrates how to access and potentially set vertex group weights for each vertex in a BMesh. It retrieves the active vertex group index from the object, accesses the deform layer, and then checks and sets the weight for the specified group index.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/include__bmesh.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# In this example the active vertex group index is used,\n# this is stored in the object, not the `BMesh`.\ngroup_index = obj.vertex_groups.active_index\n\n# Only ever one deform weight layer.\ndvert_lay = bm.verts.layers.deform.active\n\nfor vert in bm.verts:\n    dvert = vert[dvert_lay]\n\n    if group_index in dvert:\n        print(\"Weight %f\" % dvert[group_index])\n    else:\n        print(\"Setting Weight\")\n        dvert[group_index] = 0.5\n```\n\n----------------------------------------\n\nTITLE: Adding Tests (Optional) - CMake\nDESCRIPTION: This snippet conditionally adds tests for the Depsgraph library if the WITH_GTESTS option is enabled. It defines the test source files, include directories, and linked libraries, and utilizes a custom CMake function to build the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    intern/builder/deg_builder_rna_test.cc\n  )\n  set(TEST_LIB\n    bf_depsgraph\n  )\n  blender_add_test_suite_lib(depsgraph \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Definition Addition (CMake)\nDESCRIPTION: Adds preprocessor definitions based on CMake options. These definitions control the availability and behavior of certain features within the Blender Python module, such as build date, portable installation, Python module availability, Python safety, and support for various external libraries like AUDASPACE, Bullet, FFMPEG, and Cycles.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/intern/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DBUILD_DATE)\nendif()\n\nif(WITH_INSTALL_PORTABLE)\n  add_definitions(-DWITH_INSTALL_PORTABLE)\nendif()\n\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\nendif()\n\nif(WITH_PYTHON AND WITH_PYTHON_INSTALL AND (APPLE OR WITH_INSTALL_PORTABLE) AND (NOT WIN32))\n  # - `PYTHON_SSL_CERT_FILE` absolute path to the PEM file.\n  find_python_module_file(\"certifi/cacert.pem\" PYTHON_SSL_CERT_FILE _python_ssl_cert_file_relative)\n  mark_as_advanced(PYTHON_SSL_CERT_FILE)\n  if(PYTHON_SSL_CERT_FILE)\n    add_definitions(-DPYTHON_SSL_CERT_FILE=\"${_python_ssl_cert_file_relative}\")\n  else()\n    message(WARNING\n      \"Unable to find \\\"certifi/cacert.pem\\\" within \\\"${PYTHON_LIBPATH}\\\", \"\n      \"this build will not be able to use bundled certificates with the \\\"ssl\\\" module!\"\n    )\n  endif()\n  unset(_python_ssl_cert_file_relative)\nendif()\n\nif(WITH_PYTHON_SAFETY)\n  add_definitions(-DWITH_PYTHON_SAFETY)\nendif()\n\nif(WITH_AUDASPACE)\n  # It's possible to build with AUDASPACE (for file IO) but without the `aud` Python API,\n  # when building without NUMPY so define both `WITH_AUDASPACE` & `DWITH_AUDASPACE_PY`.\n  add_definitions(-DWITH_AUDASPACE)\n  if(WITH_PYTHON_NUMPY)\n    add_definitions(-DWITH_AUDASPACE_PY)\n  endif()\nendif()\n\nif(WITH_BULLET)\n  add_definitions(-DWITH_BULLET)\nendif()\n\nif(WITH_CODEC_FFMPEG)\n  list(APPEND INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFMPEG_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WITH_CODEC_SNDFILE)\n  add_definitions(-DWITH_SNDFILE)\nendif()\n\nif(WITH_CYCLES)\n  list(APPEND INC\n    ../../../../intern/cycles/blender\n  )\n  list(APPEND LIB\n    bf_intern_cycles\n  )\n  add_definitions(-DWITH_CYCLES)\nendif()\n\nif(WITH_CYCLES_OSL)\n  add_definitions(-DWITH_CYCLES_OSL)\nendif()\n\nif(WITH_CYCLES_EMBREE)\n  add_definitions(-DWITH_CYCLES_EMBREE)\nendif()\n\nif(WITH_FREESTYLE)\n  list(APPEND INC\n    ../../freestyle/intern/python\n  )\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_GAMEENGINE)\n\tadd_definitions(-DWITH_GAMEENGINE)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_IMAGE_OPENJPEG)\n  add_definitions(-DWITH_IMAGE_OPENJPEG)\nendif()\n\nif(WITH_IMAGE_WEBP)\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n\nif(WITH_INPUT_NDOF)\n  add_definitions(-DWITH_INPUT_NDOF)\nendif()\n\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n\nif(WITH_OPENAL)\n  add_definitions(-DWITH_OPENAL)\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n\nif(WITH_SDL)\n  list(APPEND INC_SYS\n    ${SDL_INCLUDE_DIR}\n  )\n  list(APPEND LIB\n    ${SDL_LIBRARY}\n  )\n  add_definitions(-DWITH_SDL)\nendif()\n\nif(WITH_JACK)\n  add_definitions(-DWITH_JACK)\nendif()\n\nif(WITH_COREAUDIO)\n  add_definitions(-DWITH_COREAUDIO)\nendif()\n\nif(WITH_LIBMV)\n  add_definitions(-DWITH_LIBMV)\nendif()\n\nif(WITH_PULSEAUDIO)\n  add_definitions(-DWITH_PULSEAUDIO)\nendif()\n\nif(WITH_WASAPI)\n  add_definitions(-DWITH_WASAPI)\nendif()\n\nif(WITH_MOD_OCEANSIM)\n  add_definitions(-DWITH_OCEANSIM)\nendif()\n\nif(WITH_MOD_REMESH)\n  add_definitions(-DWITH_MOD_REMESH)\nendif()\n\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n\nif(WITH_OPENCOLLADA)\n  add_definitions(-DWITH_COLLADA)\nendif()\n\nif(WITH_IO_WAVEFRONT_OBJ)\n  add_definitions(-DWITH_IO_WAVEFRONT_OBJ)\nendif()\n\nif(WITH_IO_PLY)\n  add_definitions(-DWITH_IO_PLY)\nendif()\n\nif(WITH_IO_STL)\n  add_definitions(-DWITH_IO_STL)\nendif()\n\nif(WITH_IO_FBX)\n  add_definitions(-DWITH_IO_FBX)\nendif()\n\nif(WITH_IO_GREASE_PENCIL)\n  add_definitions(-DWITH_IO_GREASE_PENCIL)\nendif()\n\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\nendif()\n\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\nendif()\n\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\nendif()\n\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC\n    ../../io/alembic\n  )\nendif()\n\nif(WITH_USD)\n  add_definitions(-DWITH_USD)\n  list(APPEND INC\n    ../../io/usd\n  )\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\n  list(APPEND INC\n    ../../../../intern/opensubdiv\n  )\nendif()\n\nif(WITH_PLAYER)\n  add_definitions(-DWITH_PLAYER)\nendif()\n\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n\nif(WITH_POTRACE)\n  add_definitions(-DWITH_POTRACE)\nendif()\n\nif(WITH_PUGIXML)\n  add_definitions(-DWITH_PUGIXML)\nendif()\n\nif(WITH_HARU)\n  add_definitions(-DWITH_HARU)\nendif()\n\nif(WITH_HYDRA)\n  list(APPEND LIB\n    bf_render_hydra\n  )\n  add_definitions(-DWITH_HYDRA)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending flags for Embree integration\nDESCRIPTION: This snippet conditionally appends compiler flags and include directories to enable Embree integration, including version and library paths. It also handles thread building blocks (TBB) library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_EMBREE AND EMBREE_SYCL_SUPPORT)\n    list(APPEND sycl_compiler_flags\n      -DWITH_EMBREE\n      -DWITH_EMBREE_GPU\n      -DEMBREE_MAJOR_VERSION=${EMBREE_MAJOR_VERSION}\n      -I\"${EMBREE_INCLUDE_DIRS}\")\n\n    if(WIN32)\n      list(APPEND sycl_compiler_flags\n        -ladvapi32.lib\n      )\n    endif()\n\n    set(next_library_mode \"\")\n    foreach(library ${EMBREE_LIBRARIES})\n      string(TOLOWER \"${library}\" library_lower)\n      if((\"${library_lower}\" STREQUAL \"optimized\") OR\n         (\"${library_lower}\" STREQUAL \"debug\"))\n        set(next_library_mode \"${library_lower}\")\n      else()\n        if(next_library_mode STREQUAL \"\")\n          list(APPEND EMBREE_TBB_LIBRARIES_optimized ${library})\n          list(APPEND EMBREE_TBB_LIBRARIES_debug ${library})\n        else()\n          list(APPEND EMBREE_TBB_LIBRARIES_${next_library_mode} ${library})\n        endif()\n        set(next_library_mode \"\")\n      endif()\n    endforeach()\n\n    foreach(library ${TBB_LIBRARIES})\n      string(TOLOWER \"${library}\" library_lower)\n      if((\"${library_lower}\" STREQUAL \"optimized\") OR\n         (\"${library_lower}\" STREQUAL \"debug\"))\n        set(next_library_mode \"${library_lower}\")\n      else()\n        if(next_library_mode STREQUAL \"\")\n          list(APPEND EMBREE_TBB_LIBRARIES_optimized ${library})\n          list(APPEND EMBREE_TBB_LIBRARIES_debug ${library})\n        else()\n          list(APPEND EMBREE_TBB_LIBRARIES_${next_library_mode} ${library})\n        endif()\n        set(next_library_mode \"\")\n      endif()\n    endforeach()\n    list(APPEND sycl_compiler_flags\n      \"$<$<CONFIG:Release>:${EMBREE_TBB_LIBRARIES_optimized}>\"\n      \"$<$<CONFIG:RelWithDebInfo>:${EMBREE_TBB_LIBRARIES_optimized}>\"\n      \"$<$<CONFIG:MinSizeRel>:${EMBREE_TBB_LIBRARIES_optimized}>\"\n      \"$<$<CONFIG:Debug>:${EMBREE_TBB_LIBRARIES_debug}>\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting DNA Defaults Include Files - CMake\nDESCRIPTION: This snippet defines a CMake variable `SRC_DNA_DEFAULTS_INC` and populates it with a list of header files related to DNA default values. These headers, located in the `makesdna` subdirectory, provide default values for the DNA data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_DNA_DEFAULTS_INC\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_action_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_armature_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_asset_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_brush_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_cachefile_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_camera_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_collection_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_curve_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_curves_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_fluid_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_gpencil_modifier_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_grease_pencil_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_image_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_lattice_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_light_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_lightprobe_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_linestyle_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_material_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_mesh_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_meta_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_modifier_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_movieclip_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_object_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_particle_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_pointcloud_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_scene_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_space_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_speaker_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_texture_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_userdef_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_vec_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_view3d_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_volume_defaults.h\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_world_defaults.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines a list of source files that constitute the Geometry Nodes module. These files include various node implementations and utility functions. The source files are specified as relative paths to the CMakeLists.txt file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_geo_accumulate_field.cc\n  nodes/node_geo_attribute_capture.cc\n  nodes/node_geo_attribute_domain_size.cc\n  nodes/node_geo_attribute_statistic.cc\n  nodes/node_geo_bake.cc\n  nodes/node_geo_blur_attribute.cc\n  nodes/node_geo_boolean.cc\n  nodes/node_geo_bounding_box.cc\n  nodes/node_geo_camera_info.cc\n  nodes/node_geo_closure.cc\n  nodes/node_geo_collection_info.cc\n  nodes/node_geo_combine_bundle.cc\n  nodes/node_geo_common.cc\n  nodes/node_geo_convex_hull.cc\n  nodes/node_geo_curve_endpoint_selection.cc\n  nodes/node_geo_curve_fill.cc\n  nodes/node_geo_curve_fillet.cc\n  nodes/node_geo_curve_handle_type_selection.cc\n  nodes/node_geo_curve_length.cc\n  nodes/node_geo_curve_primitive_arc.cc\n  nodes/node_geo_curve_primitive_bezier_segment.cc\n  nodes/node_geo_curve_primitive_circle.cc\n  nodes/node_geo_curve_primitive_line.cc\n  nodes/node_geo_curve_primitive_quadratic_bezier.cc\n  nodes/node_geo_curve_primitive_quadrilateral.cc\n  nodes/node_geo_curve_primitive_spiral.cc\n  nodes/node_geo_curve_primitive_star.cc\n  nodes/node_geo_curve_resample.cc\n  nodes/node_geo_curve_reverse.cc\n  nodes/node_geo_curve_sample.cc\n  nodes/node_geo_curve_set_handle_type.cc\n  nodes/node_geo_curve_spline_parameter.cc\n  nodes/node_geo_curve_spline_type.cc\n  nodes/node_geo_curve_subdivide.cc\n  nodes/node_geo_curve_to_mesh.cc\n  nodes/node_geo_curve_to_points.cc\n  nodes/node_geo_curve_topology_curve_of_point.cc\n  nodes/node_geo_curve_topology_points_of_curve.cc\n  nodes/node_geo_curve_trim.cc\n  nodes/node_geo_curves_to_grease_pencil.cc\n  nodes/node_geo_deform_curves_on_surface.cc\n  nodes/node_geo_delete_geometry.cc\n  nodes/node_geo_distribute_points_in_grid.cc\n  nodes/node_geo_distribute_points_in_volume.cc\n  nodes/node_geo_distribute_points_on_faces.cc\n  nodes/node_geo_dual_mesh.cc\n  nodes/node_geo_duplicate_elements.cc\n  nodes/node_geo_edge_paths_to_curves.cc\n  nodes/node_geo_edge_paths_to_selection.cc\n  nodes/node_geo_edge_split.cc\n  nodes/node_geo_edges_to_face_groups.cc\n  nodes/node_geo_evaluate_at_index.cc\n  nodes/node_geo_evaluate_closure.cc\n  nodes/node_geo_evaluate_on_domain.cc\n  nodes/node_geo_extrude_mesh.cc\n  nodes/node_geo_field_average.cc\n  nodes/node_geo_field_min_and_max.cc\n  nodes/node_geo_field_variance.cc\n  nodes/node_geo_flip_faces.cc\n  nodes/node_geo_foreach_geometry_element.cc\n  nodes/node_geo_geometry_to_instance.cc\n  nodes/node_geo_get_named_grid.cc\n  nodes/node_geo_gizmo_dial.cc\n  nodes/node_geo_gizmo_linear.cc\n  nodes/node_geo_gizmo_transform.cc\n  nodes/node_geo_grease_pencil_to_curves.cc\n  nodes/node_geo_grid_to_mesh.cc\n  nodes/node_geo_image.cc\n  nodes/node_geo_image_info.cc\n  nodes/node_geo_image_texture.cc\n  nodes/node_geo_import_csv.cc\n  nodes/node_geo_import_obj.cc\n  nodes/node_geo_import_ply.cc\n  nodes/node_geo_import_stl.cc\n  nodes/node_geo_import_text.cc\n  nodes/node_geo_index_of_nearest.cc\n  nodes/node_geo_index_switch.cc\n  nodes/node_geo_input_active_camera.cc\n  nodes/node_geo_input_collection.cc\n  nodes/node_geo_input_curve_handles.cc\n  nodes/node_geo_input_curve_tilt.cc\n  nodes/node_geo_input_edge_smooth.cc\n  nodes/node_geo_input_face_smooth.cc\n  nodes/node_geo_input_id.cc\n  nodes/node_geo_input_index.cc\n  nodes/node_geo_input_instance_bounds.cc\n  nodes/node_geo_input_instance_rotation.cc\n  nodes/node_geo_input_instance_scale.cc\n  nodes/node_geo_input_instance_transform.cc\n  nodes/node_geo_input_material.cc\n  nodes/node_geo_input_material_index.cc\n  nodes/node_geo_input_mesh_edge_angle.cc\n  nodes/node_geo_input_mesh_edge_neighbors.cc\n  nodes/node_geo_input_mesh_edge_vertices.cc\n  nodes/node_geo_input_mesh_face_area.cc\n  nodes/node_geo_input_mesh_face_is_planar.cc\n  nodes/node_geo_input_mesh_face_neighbors.cc\n  nodes/node_geo_input_mesh_island.cc\n  nodes/node_geo_input_mesh_vertex_neighbors.cc\n  nodes/node_geo_input_named_attribute.cc\n  nodes/node_geo_input_named_layer_selection.cc\n  nodes/node_geo_input_normal.cc\n  nodes/node_geo_input_object.cc\n  nodes/node_geo_input_position.cc\n  nodes/node_geo_input_radius.cc\n  nodes/node_geo_input_scene_time.cc\n  nodes/node_geo_input_shortest_edge_paths.cc\n  nodes/node_geo_input_spline_cyclic.cc\n  nodes/node_geo_input_spline_length.cc\n  nodes/node_geo_input_spline_resolution.cc\n  nodes/node_geo_input_tangent.cc\n  nodes/node_geo_instance_on_points.cc\n  nodes/node_geo_instances_to_points.cc\n  nodes/node_geo_interpolate_curves.cc\n  nodes/node_geo_is_viewport.cc\n  nodes/node_geo_join_geometry.cc\n  nodes/node_geo_material_replace.cc\n  nodes/node_geo_material_selection.cc\n  nodes/node_geo_menu_switch.cc\n  nodes/node_geo_merge_by_distance.cc\n  nodes/node_geo_merge_layers.cc\n  nodes/node_geo_mesh_face_group_boundaries.cc\n  nodes/node_geo_mesh_primitive_circle.cc\n  nodes/node_geo_mesh_primitive_cone.cc\n  nodes/node_geo_mesh_primitive_cube.cc\n  nodes/node_geo_mesh_primitive_cylinder.cc\n  nodes/node_geo_mesh_primitive_grid.cc\n  nodes/node_geo_mesh_primitive_ico_sphere.cc\n  nodes/node_geo_mesh_primitive_line.cc\n  nodes/node_geo_mesh_primitive_uv_sphere.cc\n  nodes/node_geo_mesh_subdivide.cc\n  nodes/node_geo_mesh_to_curve.cc\n  nodes/node_geo_mesh_to_density_grid.cc\n  nodes/node_geo_mesh_to_points.cc\n  nodes/node_geo_mesh_to_sdf_grid.cc\n  nodes/node_geo_mesh_to_volume.cc\n  nodes/node_geo_mesh_topology_corners_of_edge.cc\n  nodes/node_geo_mesh_topology_corners_of_face.cc\n  nodes/node_geo_mesh_topology_corners_of_vertex.cc\n  nodes/node_geo_mesh_topology_edges_of_corner.cc\n  nodes/node_geo_mesh_topology_edges_of_vertex.cc\n  nodes/node_geo_mesh_topology_face_of_corner.cc\n  nodes/node_geo_mesh_topology_offset_corner_in_face.cc\n  nodes/node_geo_mesh_topology_vertex_of_corner.cc\n  nodes/node_geo_mouse_position.cc\n  nodes/node_geo_object_info.cc\n  nodes/node_geo_offset_point_in_curve.cc\n  nodes/node_geo_points.cc\n  nodes/node_geo_points_to_curves.cc\n  nodes/node_geo_points_to_sdf_grid.cc\n  nodes/node_geo_points_to_vertices.cc\n  nodes/node_geo_points_to_volume.cc\n  nodes/node_geo_proximity.cc\n  nodes/node_geo_raycast.cc\n  nodes/node_geo_realize_instances.cc\n  nodes/node_geo_remove_attribute.cc\n  nodes/node_geo_repeat.cc\n  nodes/node_geo_rotate_instances.cc\n  nodes/node_geo_sample_grid.cc\n  nodes/node_geo_sample_grid_index.cc\n  nodes/node_geo_sample_index.cc\n  nodes/node_geo_sample_nearest.cc\n  nodes/node_geo_sample_nearest_surface.cc\n  nodes/node_geo_sample_uv_surface.cc\n  nodes/node_geo_scale_elements.cc\n  nodes/node_geo_scale_instances.cc\n  nodes/node_geo_sdf_grid_boolean.cc\n  nodes/node_geo_self_object.cc\n  nodes/node_geo_separate_bundle.cc\n  nodes/node_geo_separate_components.cc\n  nodes/node_geo_separate_geometry.cc\n  nodes/node_geo_set_curve_handles.cc\n  nodes/node_geo_set_curve_normal.cc\n  nodes/node_geo_set_curve_radius.cc\n  nodes/node_geo_set_curve_tilt.cc\n  nodes/node_geo_set_geometry_name.cc\n  nodes/node_geo_set_grease_pencil_color.cc\n  nodes/node_geo_set_grease_pencil_depth_mode.cc\n  nodes/node_geo_set_id.cc\n  nodes/node_geo_set_instance_transform.cc\n  nodes/node_geo_set_material.cc\n  nodes/node_geo_set_material_index.cc\n  nodes/node_geo_set_mesh_normal.cc\n  nodes/node_geo_set_point_radius.cc\n  nodes/node_geo_set_position.cc\n  nodes/node_geo_set_shade_smooth.cc\n  nodes/node_geo_set_spline_cyclic.cc\n  nodes/node_geo_set_spline_resolution.cc\n  nodes/node_geo_simulation.cc\n  nodes/node_geo_sort_elements.cc\n  nodes/node_geo_split_to_instances.cc\n  nodes/node_geo_store_named_attribute.cc\n  nodes/node_geo_store_named_grid.cc\n  nodes/node_geo_string_join.cc\n  nodes/node_geo_string_to_curves.cc\n  nodes/node_geo_subdivision_surface.cc\n  nodes/node_geo_switch.cc\n  nodes/node_geo_tool_3d_cursor.cc\n  nodes/node_geo_tool_active_element.cc\n  nodes/node_geo_tool_face_set.cc\n  nodes/node_geo_tool_selection.cc\n  nodes/node_geo_tool_set_face_set.cc\n  nodes/node_geo_tool_set_selection.cc\n  nodes/node_geo_transform_geometry.cc\n  nodes/node_geo_translate_instances.cc\n  nodes/node_geo_triangulate.cc\n  nodes/node_geo_uv_pack_islands.cc\n  nodes/node_geo_uv_unwrap.cc\n  nodes/node_geo_viewer.cc\n  nodes/node_geo_viewport_transform.cc\n  nodes/node_geo_volume_cube.cc\n  nodes/node_geo_volume_to_mesh.cc\n  nodes/node_geo_warning.cc\n\n  include/NOD_geo_bake.hh\n  include/NOD_geo_capture_attribute.hh\n  include/NOD_geo_foreach_geometry_element.hh\n  include/NOD_geo_index_switch.hh\n  include/NOD_geo_menu_switch.hh\n  include/NOD_geo_repeat.hh\n  include/NOD_geo_simulation.hh\n\n  node_geometry_tree.cc\n  node_geometry_util.cc\n\n  node_geometry_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Freestyle with CMake\nDESCRIPTION: This CMake code snippet defines a variable named `SRC` which contains a list of C++ and header files that constitute the source code for the Freestyle rendering engine. This list is used by CMake to compile and link the Freestyle library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  FRS_freestyle.h\n  intern/application/AppCanvas.cpp\n  intern/application/AppCanvas.h\n  intern/application/AppConfig.cpp\n  intern/application/AppConfig.h\n  intern/application/AppView.cpp\n  intern/application/AppView.h\n  intern/application/Controller.cpp\n  intern/application/Controller.h\n  intern/blender_interface/BlenderFileLoader.cpp\n  intern/blender_interface/BlenderFileLoader.h\n  intern/blender_interface/BlenderStrokeRenderer.cpp\n  intern/blender_interface/BlenderStrokeRenderer.h\n  intern/blender_interface/BlenderStyleModule.h\n  intern/blender_interface/FRS_freestyle.cpp\n  intern/geometry/BBox.h\n  intern/geometry/Bezier.cpp\n  intern/geometry/Bezier.h\n  intern/geometry/FastGrid.cpp\n  intern/geometry/FastGrid.h\n  intern/geometry/FitCurve.cpp\n  intern/geometry/FitCurve.h\n  intern/geometry/Geom.h\n  intern/geometry/GeomCleaner.cpp\n  intern/geometry/GeomCleaner.h\n  intern/geometry/GeomUtils.cpp\n  intern/geometry/GeomUtils.h\n  intern/geometry/Grid.cpp\n  intern/geometry/Grid.h\n  intern/geometry/GridHelpers.cpp\n  intern/geometry/GridHelpers.h\n  intern/geometry/HashGrid.cpp\n  intern/geometry/HashGrid.h\n  intern/geometry/Noise.cpp\n  intern/geometry/Noise.h\n  intern/geometry/Polygon.h\n  intern/geometry/SweepLine.h\n  intern/geometry/VecMat.h\n  intern/geometry/matrix_util.cpp\n  intern/geometry/matrix_util.h\n  intern/geometry/normal_cycle.cpp\n  intern/geometry/normal_cycle.h\n  intern/image/GaussianFilter.cpp\n  intern/image/GaussianFilter.h\n  intern/image/Image.h\n  intern/image/ImagePyramid.cpp\n  intern/image/ImagePyramid.h\n  intern/python/BPy_BBox.cpp\n  intern/python/BPy_BBox.h\n  intern/python/BPy_BinaryPredicate0D.cpp\n  intern/python/BPy_BinaryPredicate0D.h\n  intern/python/BPy_BinaryPredicate1D.cpp\n  intern/python/BPy_BinaryPredicate1D.h\n  intern/python/BPy_ContextFunctions.cpp\n  intern/python/BPy_ContextFunctions.h\n  intern/python/BPy_Convert.cpp\n  intern/python/BPy_Convert.h\n  intern/python/BPy_Freestyle.cpp\n  intern/python/BPy_Freestyle.h\n  intern/python/BPy_FrsMaterial.cpp\n  intern/python/BPy_FrsMaterial.h\n  intern/python/BPy_FrsNoise.cpp\n  intern/python/BPy_FrsNoise.h\n  intern/python/BPy_Id.cpp\n  intern/python/BPy_Id.h\n  intern/python/BPy_IntegrationType.cpp\n  intern/python/BPy_IntegrationType.h\n  intern/python/BPy_Interface0D.cpp\n  intern/python/BPy_Interface0D.h\n  intern/python/BPy_Interface1D.cpp\n  intern/python/BPy_Interface1D.h\n  intern/python/BPy_Iterator.cpp\n  intern/python/BPy_Iterator.h\n  intern/python/BPy_MediumType.cpp\n  intern/python/BPy_MediumType.h\n  intern/python/BPy_Nature.cpp\n  intern/python/BPy_Nature.h\n  intern/python/BPy_Operators.cpp\n  intern/python/BPy_Operators.h\n  intern/python/BPy_SShape.cpp\n  intern/python/BPy_SShape.h\n  intern/python/BPy_StrokeAttribute.cpp\n  intern/python/BPy_StrokeAttribute.h\n  intern/python/BPy_StrokeShader.cpp\n  intern/python/BPy_StrokeShader.h\n  intern/python/BPy_UnaryFunction0D.cpp\n  intern/python/BPy_UnaryFunction0D.h\n  intern/python/BPy_UnaryFunction1D.cpp\n  intern/python/BPy_UnaryFunction1D.h\n  intern/python/BPy_UnaryPredicate0D.cpp\n  intern/python/BPy_UnaryPredicate0D.h\n  intern/python/BPy_UnaryPredicate1D.cpp\n  intern/python/BPy_UnaryPredicate1D.h\n  intern/python/BPy_ViewMap.cpp\n  intern/python/BPy_ViewMap.h\n  intern/python/BPy_ViewShape.cpp\n  intern/python/BPy_ViewShape.h\n  intern/python/BinaryPredicate1D/BPy_FalseBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_FalseBP1D.h\n  intern/python/BinaryPredicate1D/BPy_Length2DBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_Length2DBP1D.h\n  intern/python/BinaryPredicate1D/BPy_SameShapeIdBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_SameShapeIdBP1D.h\n  intern/python/BinaryPredicate1D/BPy_TrueBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_TrueBP1D.h\n  intern/python/BinaryPredicate1D/BPy_ViewMapGradientNormBP1D.cpp\n  intern/python/BinaryPredicate1D/BPy_ViewMapGradientNormBP1D.h\n  intern/python/Director.cpp\n  intern/python/Director.h\n  intern/python/Interface0D/BPy_CurvePoint.cpp\n  intern/python/Interface0D/BPy_CurvePoint.h\n  intern/python/Interface0D/BPy_SVertex.cpp\n  intern/python/Interface0D/BPy_SVertex.h\n  intern/python/Interface0D/BPy_ViewVertex.cpp\n  intern/python/Interface0D/BPy_ViewVertex.h\n  intern/python/Interface0D/CurvePoint/BPy_StrokeVertex.cpp\n  intern/python/Interface0D/CurvePoint/BPy_StrokeVertex.h\n  intern/python/Interface0D/ViewVertex/BPy_NonTVertex.cpp\n  intern/python/Interface0D/ViewVertex/BPy_NonTVertex.h\n  intern/python/Interface0D/ViewVertex/BPy_TVertex.cpp\n  intern/python/Interface0D/ViewVertex/BPy_TVertex.h\n  intern/python/Interface1D/BPy_FEdge.cpp\n  intern/python/Interface1D/BPy_FEdge.h\n  intern/python/Interface1D/BPy_FrsCurve.cpp\n  intern/python/Interface1D/BPy_FrsCurve.h\n  intern/python/Interface1D/BPy_Stroke.cpp\n  intern/python/Interface1D/BPy_Stroke.h\n  intern/python/Interface1D/BPy_ViewEdge.cpp\n  intern/python/Interface1D/BPy_ViewEdge.h\n  intern/python/Interface1D/Curve/BPy_Chain.cpp\n  intern/python/Interface1D/Curve/BPy_Chain.h\n  intern/python/Interface1D/FEdge/BPy_FEdgeSharp.cpp\n  intern/python/Interface1D/FEdge/BPy_FEdgeSharp.h\n  intern/python/Interface1D/FEdge/BPy_FEdgeSmooth.cpp\n  intern/python/Interface1D/FEdge/BPy_FEdgeSmooth.h\n  intern/python/Iterator/BPy_AdjacencyIterator.cpp\n  intern/python/Iterator/BPy_AdjacencyIterator.h\n  intern/python/Iterator/BPy_ChainPredicateIterator.cpp\n  intern/python/Iterator/BPy_ChainPredicateIterator.h\n  intern/python/Iterator/BPy_ChainSilhouetteIterator.cpp\n  intern/python/Iterator/BPy_ChainSilhouetteIterator.h\n  intern/python/Iterator/BPy_ChainingIterator.cpp\n  intern/python/Iterator/BPy_ChainingIterator.h\n  intern/python/Iterator/BPy_CurvePointIterator.cpp\n  intern/python/Iterator/BPy_CurvePointIterator.h\n  intern/python/Iterator/BPy_Interface0DIterator.cpp\n  intern/python/Iterator/BPy_Interface0DIterator.h\n  intern/python/Iterator/BPy_SVertexIterator.cpp\n  intern/python/Iterator/BPy_SVertexIterator.h\n  intern/python/Iterator/BPy_StrokeVertexIterator.cpp\n  intern/python/Iterator/BPy_StrokeVertexIterator.h\n  intern/python/Iterator/BPy_ViewEdgeIterator.cpp\n  intern/python/Iterator/BPy_ViewEdgeIterator.h\n  intern/python/Iterator/BPy_orientedViewEdgeIterator.cpp\n  intern/python/Iterator/BPy_orientedViewEdgeIterator.h\n  intern/python/StrokeShader/BPy_BackboneStretcherShader.cpp\n  intern/python/StrokeShader/BPy_BackboneStretcherShader.h\n  intern/python/StrokeShader/BPy_BezierCurveShader.cpp\n  intern/python/StrokeShader/BPy_BezierCurveShader.h\n  intern/python/StrokeShader/BPy_BlenderTextureShader.cpp\n  intern/python/StrokeShader/BPy_BlenderTextureShader.h\n  intern/python/StrokeShader/BPy_CalligraphicShader.cpp\n  intern/python/StrokeShader/BPy_CalligraphicShader.h\n  intern/python/StrokeShader/BPy_ColorNoiseShader.cpp\n  intern/python/StrokeShader/BPy_ColorNoiseShader.h\n  intern/python/StrokeShader/BPy_ConstantColorShader.cpp\n  intern/python/StrokeShader/BPy_ConstantColorShader.h\n  intern/python/StrokeShader/BPy_ConstantThicknessShader.cpp\n  intern/python/StrokeShader/BPy_ConstantThicknessShader.h\n  intern/python/StrokeShader/BPy_ConstrainedIncreasingThicknessShader.cpp\n  intern/python/StrokeShader/BPy_ConstrainedIncreasingThicknessShader.h\n  intern/python/StrokeShader/BPy_GuidingLinesShader.cpp\n  intern/python/StrokeShader/BPy_GuidingLinesShader.h\n  intern/python/StrokeShader/BPy_IncreasingColorShader.cpp\n  intern/python/StrokeShader/BPy_IncreasingColorShader.h\n  intern/python/StrokeShader/BPy_IncreasingThicknessShader.cpp\n  intern/python/StrokeShader/BPy_IncreasingThicknessShader.h\n  intern/python/StrokeShader/BPy_PolygonalizationShader.cpp\n  intern/python/StrokeShader/BPy_PolygonalizationShader.h\n  intern/python/StrokeShader/BPy_SamplingShader.cpp\n  intern/python/StrokeShader/BPy_SamplingShader.h\n  intern/python/StrokeShader/BPy_SmoothingShader.cpp\n  intern/python/StrokeShader/BPy_SmoothingShader.h\n  intern/python/StrokeShader/BPy_SpatialNoiseShader.cpp\n  intern/python/StrokeShader/BPy_SpatialNoiseShader.h\n  intern/python/StrokeShader/BPy_StrokeTextureStepShader.cpp\n  intern/python/StrokeShader/BPy_StrokeTextureStepShader.h\n  intern/python/StrokeShader/BPy_ThicknessNoiseShader.cpp\n  intern/python/StrokeShader/BPy_ThicknessNoiseShader.h\n  intern/python/StrokeShader/BPy_TipRemoverShader.cpp\n  intern/python/StrokeShader/BPy_TipRemoverShader.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DDouble.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DDouble.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DEdgeNature.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DEdgeNature.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DFloat.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DFloat.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DId.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DId.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DMaterial.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DMaterial.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DUnsigned.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DUnsigned.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec2f.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec2f.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec3f.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVec3f.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVectorViewShape.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DVectorViewShape.h\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DViewShape.cpp\n  intern/python/UnaryFunction0D/BPy_UnaryFunction0DViewShape.h\n  intern/python/UnaryFunction0D/UnaryFunction0D_Id/BPy_ShapeIdF0D.cpp\n  intern/python/UnaryFunction0D/UnaryFunction0D_Id/BPy_ShapeIdF0D.h\n  intern/python/UnaryFunction0D/UnaryFunction0D_Material/BPy_MaterialF0D.cpp\n  intern/python/UnaryFunction0D/UnaryFunction0D_Material/BPy_MaterialF0D.h\n  intern/python/UnaryFunction0D/UnaryFunction0D_Nature_EdgeNature/BPy_CurveNatureF0D.cpp\n\n```\n\n----------------------------------------\n\nTITLE: Physics Softbody Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for soft body physics. It loads `softbody_test.blend` and executes `physics_softbody.py` with the `--run-all-tests` option to ensure all tests in the Python script are run.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    physics_softbody\n    ${TEST_SRC_DIR}/physics/softbody_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_softbody.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Experimental Test Option\nDESCRIPTION: Defines an option to run tests labeled as experimental.  These tests are not suitable for blocking a build due to long runtime, flakey results, or other issues.  The option is marked as advanced to hide it from basic CMake configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_TESTS_EXPERIMENTAL \"\\\nRun tests marked as experimental. \\\nThese tests are labeled as such due to long runtime, flakey results, or other issues that make them unsuitable \\\nfor blocking a build on.\"\n  OFF\n)\nmark_as_advanced(WITH_TESTS_EXPERIMENTAL)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: Defines the system include directories required to compile the gizmo library. This variable is currently empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/gizmo_library/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Add Dependencies - CMake\nDESCRIPTION: This CMake code snippet adds an explicit dependency of `bf_editor_space_statusbar` on `bf_rna`. This means that the `bf_rna` library must be built before `bf_editor_space_statusbar`. This is likely because the `space_statusbar.cc` source file uses code or data structures defined in the `bf_rna` library or generated files such as RNA_prototypes.hh and dna_type_offsets.h .\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_statusbar/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(bf_editor_space_statusbar bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Muting a Sequence Entry\nDESCRIPTION: This snippet mutes a specific aud.SequenceEntry using the muted property. This allows pausing of individual notes. \nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif char == 'p':\n\tentry.muted = True\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC) - CMake\nDESCRIPTION: This CMake snippet defines a variable `SRC` that lists the source files required to build the `bf_intern_sky` library. It includes both `.cpp` and `.h` files, specifying the implementation and headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/sky/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  source/sky_model.cpp\n  source/sky_nishita.cpp\n\n  include/sky_model.h\n  source/sky_float3.h\n  source/sky_model_data.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for USD - CMake\nDESCRIPTION: Conditionally includes USD-related headers, libraries, and preprocessor definitions based on the 'WITH_USD' flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD)\n  add_definitions(-DWITH_USD)\n  list(APPEND INC\n    ../io/usd\n  )\n  list(APPEND LIB\n    bf_io_usd\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding System Paths Source Files (CMake)\nDESCRIPTION: Adds platform-specific system paths source files. On macOS (APPLE), it adds `GHOST_SystemPathsCocoa.hh` and `GHOST_SystemPathsCocoa.mm`. On generic Unix systems, it adds `GHOST_SystemPathsUnix.cc` and `GHOST_SystemPathsUnix.hh`. On Windows, it adds `GHOST_SystemPathsWin32.cc` and `GHOST_SystemPathsWin32.hh`.  It also defines the `PREFIX` if not using a portable install for Unix. Finally it adds the `utfconv` include directory for Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  list(APPEND SRC\n    intern/GHOST_SystemPathsCocoa.hh\n    intern/GHOST_SystemPathsCocoa.mm\n  )\n\nelif(UNIX)\n  list(APPEND SRC\n    intern/GHOST_SystemPathsUnix.cc\n    intern/GHOST_SystemPathsUnix.hh\n  )\n\n  if(NOT WITH_INSTALL_PORTABLE)\n    add_definitions(-DPREFIX=\"${CMAKE_INSTALL_PREFIX}\")\n  endif()\n\nelif(WIN32)\n  list(APPEND SRC\n    intern/GHOST_SystemPathsWin32.cc\n    intern/GHOST_SystemPathsWin32.hh\n  )\n\n  list(APPEND INC\n    ../utfconv\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Integrator Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to the integration process in the Cycles kernel. It covers displacement shading, initialization, intersection routines, guiding, megakernel execution, multiple importance sampling, path state management, shading of various components (background, light, shadow, surface, volume), shadow catcher, shadow linking, state management, subsurface scattering, and surface/volume shader handling.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_INTEGRATOR_HEADERS\n  integrator/displacement_shader.h\n  integrator/init_from_bake.h\n  integrator/init_from_camera.h\n  integrator/intersect_dedicated_light.h\n  integrator/intersect_closest.h\n  integrator/intersect_shadow.h\n  integrator/intersect_subsurface.h\n  integrator/intersect_volume_stack.h\n  integrator/guiding.h\n  integrator/megakernel.h\n  integrator/mnee.h\n  integrator/path_state.h\n  integrator/shade_background.h\n  integrator/shade_light.h\n  integrator/shade_shadow.h\n  integrator/shade_surface.h\n  integrator/shade_volume.h\n  integrator/shade_dedicated_light.h\n  integrator/shadow_catcher.h\n  integrator/shadow_linking.h\n  integrator/shadow_state_template.h\n  integrator/state_flow.h\n  integrator/state.h\n  integrator/state_template.h\n  integrator/state_util.h\n  integrator/subsurface_disk.h\n  integrator/subsurface.h\n  integrator/subsurface_random_walk.h\n  integrator/surface_shader.h\n  integrator/volume_shader.h\n  integrator/volume_stack.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: This snippet defines the list of C++ source files that make up the Outliner space library. These files implement various aspects of the Outliner, including drawing, editing, querying, and managing tree structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_outliner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  outliner_collections.cc\n  outliner_context.cc\n  outliner_dragdrop.cc\n  outliner_draw.cc\n  outliner_edit.cc\n  outliner_ops.cc\n  outliner_query.cc\n  outliner_select.cc\n  outliner_sync.cc\n  outliner_tools.cc\n  outliner_tree.cc\n  outliner_utils.cc\n  space_outliner.cc\n  tree/common.cc\n  tree/tree_display.cc\n  tree/tree_display_data.cc\n  tree/tree_display_libraries.cc\n  tree/tree_display_orphaned.cc\n  tree/tree_display_override_library_hierarchies.cc\n  tree/tree_display_override_library_properties.cc\n  tree/tree_display_scenes.cc\n  tree/tree_display_sequencer.cc\n  tree/tree_display_view_layer.cc\n  tree/tree_element.cc\n  tree/tree_element_anim_data.cc\n  tree/tree_element_bone.cc\n  tree/tree_element_bone_collection.cc\n  tree/tree_element_collection.cc\n  tree/tree_element_constraint.cc\n  tree/tree_element_defgroup.cc\n  tree/tree_element_driver.cc\n  tree/tree_element_edit_bone.cc\n  tree/tree_element_gpencil_effect.cc\n  tree/tree_element_gpencil_layer.cc\n  tree/tree_element_grease_pencil_node.cc\n  tree/tree_element_id.cc\n  tree/tree_element_id_armature.cc\n  tree/tree_element_id_collection.cc\n  tree/tree_element_id_curve.cc\n  tree/tree_element_id_gpencil_legacy.cc\n  tree/tree_element_id_grease_pencil.cc\n  tree/tree_element_id_library.cc\n  tree/tree_element_id_linestyle.cc\n  tree/tree_element_id_mesh.cc\n  tree/tree_element_id_metaball.cc\n  tree/tree_element_id_object.cc\n  tree/tree_element_id_scene.cc\n  tree/tree_element_id_texture.cc\n  tree/tree_element_label.cc\n  tree/tree_element_layer_collection.cc\n  tree/tree_element_linked_node_tree.cc\n  tree/tree_element_linked_object.cc\n  tree/tree_element_modifier.cc\n  tree/tree_element_nla.cc\n  tree/tree_element_overrides.cc\n  tree/tree_element_particle_system.cc\n  tree/tree_element_pose.cc\n  tree/tree_element_rna.cc\n  tree/tree_element_scene_objects.cc\n  tree/tree_element_seq.cc\n  tree/tree_element_view_collection.cc\n  tree/tree_element_view_layer.cc\n  tree/tree_iterator.cc\n\n  outliner_intern.hh\n  tree/common.hh\n  tree/tree_display.hh\n  tree/tree_element.hh\n  tree/tree_element_anim_data.hh\n  tree/tree_element_bone.hh\n  tree/tree_element_bone_collection.hh\n  tree/tree_element_collection.hh\n  tree/tree_element_constraint.hh\n  tree/tree_element_defgroup.hh\n  tree/tree_element_driver.hh\n  tree/tree_element_edit_bone.hh\n  tree/tree_element_gpencil_effect.hh\n  tree/tree_element_gpencil_layer.hh\n  tree/tree_element_grease_pencil_node.hh\n  tree/tree_element_id.hh\n  tree/tree_element_id_armature.hh\n  tree/tree_element_id_collection.hh\n  tree/tree_element_id_curve.hh\n  tree/tree_element_id_gpencil_legacy.hh\n  tree/tree_element_id_grease_pencil.hh\n  tree/tree_element_id_library.hh\n  tree/tree_element_id_linestyle.hh\n  tree/tree_element_id_mesh.hh\n  tree/tree_element_id_metaball.hh\n  tree/tree_element_id_object.hh\n  tree/tree_element_id_scene.hh\n  tree/tree_element_id_texture.hh\n  tree/tree_element_label.hh\n  tree/tree_element_layer_collection.hh\n  tree/tree_element_linked_node_tree.hh\n  tree/tree_element_linked_object.hh\n  tree/tree_element_modifier.hh\n  tree/tree_element_nla.hh\n  tree/tree_element_overrides.hh\n  tree/tree_element_particle_system.hh\n  tree/tree_element_pose.hh\n  tree/tree_element_rna.hh\n  tree/tree_element_scene_objects.hh\n  tree/tree_element_seq.hh\n  tree/tree_element_view_collection.hh\n  tree/tree_element_view_layer.hh\n  tree/tree_iterator.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Validating Intel device binaries support\nDESCRIPTION: This code block validates if the devices in the `CYCLES_ONEAPI_INTEL_BINARIES_ARCH` list are supported by `ocloc`. If not, it removes them from the list and informs the user. Then it compiles for only supported devices.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_ONEAPI_BINARIES AND NOT WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n    # Add the list of Intel devices to build binaries for.\n    foreach(device ${CYCLES_ONEAPI_INTEL_BINARIES_ARCH})\n      # Run `ocloc` ids to test if the device is supported.\n      if(WIN32)\n        execute_process(\n          COMMAND ${OCLOC_INSTALL_DIR}/ocloc.exe ids ${device}\n          RESULT_VARIABLE oclocids_ret\n          OUTPUT_QUIET\n          ERROR_QUIET\n        )\n      else()\n        execute_process(\n          COMMAND ${CMAKE_COMMAND}\n          -E env \"LD_LIBRARY_PATH=${OCLOC_INSTALL_DIR}/lib:${IGC_INSTALL_DIR}/lib\"\n          ${OCLOC_INSTALL_DIR}/bin/ocloc ids ${device}\n\n          RESULT_VARIABLE oclocids_ret\n          OUTPUT_QUIET\n          ERROR_QUIET\n        )\n      endif()\n      if(NOT oclocids_ret EQUAL 0)\n        list(REMOVE_ITEM CYCLES_ONEAPI_INTEL_BINARIES_ARCH ${device})\n        message(STATUS\n          \"Cycles oneAPI: \"\n          \"binaries for ${device} not supported by Intel Graphics Compiler/ocloc, skipped.\"\n        )\n      endif()\n    endforeach()\n    list(JOIN CYCLES_ONEAPI_INTEL_BINARIES_ARCH \",\" gen_devices_string)\n    if(\"${gen_devices_string}\" STREQUAL \"\")\n      # Don't compile spir64_gen if no device is targeted\n      message(STATUS \"Cycles oneAPI: skipping spir64_gen compilation as no devices are targeted.\")\n      list(REMOVE_ITEM CYCLES_ONEAPI_SYCL_TARGETS spir64_gen)\n    else()\n      string(PREPEND CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen \"-device ${gen_devices_string} \")\n    endif()\n  else()\n      list(REMOVE_ITEM CYCLES_ONEAPI_SYCL_TARGETS spir64_gen)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configure C Bindings compilation\nDESCRIPTION: This snippet defines the source and header files for the C bindings of the AudaSpace library. It conditionally includes HRTF and ImpulseResponse files if FFTW is enabled. If `SEPARATE_C` is not enabled, the C sources and headers are appended to the global source and header lists, otherwise, it sets a variable `AUDASPACE_C_LIBRARY`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# C\nif(WITH_C)\n\tset(C_SRC\n\t\tbindings/C/AUD_ThreadPool.cpp\n\t\tbindings/C/AUD_Source.cpp\n\t\tbindings/C/AUD_Device.cpp\n\t\tbindings/C/AUD_DynamicMusic.cpp\n\t\tbindings/C/AUD_Handle.cpp\n\t\tbindings/C/AUD_PlaybackManager.cpp\n\t\tbindings/C/AUD_Sequence.cpp\n\t\tbindings/C/AUD_Sound.cpp\n\t\tbindings/C/AUD_Special.cpp\n\t)\n\tset(C_HDR\n\t\tbindings/C/AUD_ThreadPool.h\n\t\tbindings/C/AUD_Source.h\n\t\tbindings/C/AUD_Device.h\n\t\tbindings/C/AUD_DynamicMusic.h\n\t\tbindings/C/AUD_Handle.h\n\t\tbindings/C/AUD_PlaybackManager.h\n\t\tbindings/C/AUD_Sequence.h\n\t\tbindings/C/AUD_Sound.h\n\t\tbindings/C/AUD_Special.h\n\t\tbindings/C/AUD_Types.h\n\t)\n\n\tif(WITH_FFTW)\n\t\tlist(APPEND C_SRC\n\t\t\tbindings/C/AUD_HRTF.cpp\n\t\t\tbindings/C/AUD_ImpulseResponse.cpp\n\t\t)\n\n\t\tlist(APPEND C_HDR\n\t\t\tbindings/C/AUD_HRTF.h\n\t\t\tbindings/C/AUD_ImpulseResponse.h\n\t\t)\n\tendif()\n\n\tif(NOT SEPARATE_C)\n\t\tlist(APPEND SRC ${C_SRC})\n\t\tlist(APPEND HDR ${C_HDR})\n\telse()\n\t\tset(AUDASPACE_C_LIBRARY -laudaspace-c)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Copy system python into install directory\nDESCRIPTION: This option allows copying the system's Python installation into the Blender install directory. This makes sure that the blender install includes it's own python version.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_PYTHON_INSTALL \"Copy system python into the blender install directory\" ON)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC) - CMake\nDESCRIPTION: This CMake snippet defines a variable `INC` that stores the path to the include directory. It is used later in the `blender_add_lib` command to specify the include paths for the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/sky/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  include\n)\n```\n\n----------------------------------------\n\nTITLE: Set System Include Directories - CMake\nDESCRIPTION: This CMake code snippet initializes an empty list of system include directories. This indicates that, for this specific library, no external system-level include paths are explicitly required beyond the default compiler search paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_statusbar/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Blender Editor Interface\nDESCRIPTION: This snippet defines the list of source files that comprise the Blender editor interface library. These files implement various aspects of the user interface, including eyedroppers, interface elements, regions, templates, and 2D views.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  eyedroppers/eyedropper_bone.cc\n  eyedroppers/eyedropper_color.cc\n  eyedroppers/eyedropper_colorband.cc\n  eyedroppers/eyedropper_datablock.cc\n  eyedroppers/eyedropper_depth.cc\n  eyedroppers/eyedropper_driver.cc\n  eyedroppers/eyedropper_grease_pencil_color.cc\n  eyedroppers/interface_eyedropper.cc\n  interface.cc\n  interface_align.cc\n  interface_anim.cc\n  interface_button_group.cc\n  interface_button_sections.cc\n  interface_context_menu.cc\n  interface_context_path.cc\n  interface_drag.cc\n  interface_draw.cc\n  interface_drop.cc\n  interface_dropboxes.cc\n  interface_handlers.cc\n  interface_icons.cc\n  interface_icons_event.cc\n  interface_layout.cc\n  interface_ops.cc\n  interface_panel.cc\n  interface_query.cc\n  regions/interface_region_color_picker.cc\n  regions/interface_region_hud.cc\n  regions/interface_region_menu_pie.cc\n  regions/interface_region_menu_popup.cc\n  regions/interface_region_popover.cc\n  regions/interface_region_popup.cc\n  regions/interface_region_search.cc\n  regions/interface_region_tooltip.cc\n  regions/interface_regions.cc\n  interface_string_search.cc\n  interface_style.cc\n  templates/interface_template_asset_shelf_popover.cc\n  templates/interface_template_asset_view.cc\n  templates/interface_template_attribute_search.cc\n  templates/interface_template_bone_collection_tree.cc\n  templates/interface_template_cache_file.cc\n  templates/interface_template_color_management.cc\n  templates/interface_template_color_picker.cc\n  templates/interface_template_color_ramp.cc\n  templates/interface_template_component_menu.cc\n  templates/interface_template_constraint.cc\n  templates/interface_template_curve_mapping.cc\n  templates/interface_template_curve_profile.cc\n  templates/interface_template_event.cc\n  templates/interface_template_grease_pencil_layer_search.cc\n  templates/interface_template_grease_pencil_layer_tree.cc\n  templates/interface_template_icon.cc\n  templates/interface_template_id.cc\n  templates/interface_template_keymap.cc\n  templates/interface_template_layers.cc\n  templates/interface_template_light_linking.cc\n  templates/interface_template_list.cc\n  templates/interface_template_modifiers.cc\n  templates/interface_template_node_inputs.cc\n  templates/interface_template_node_tree_interface.cc\n  templates/interface_template_operator_property.cc\n  templates/interface_template_preview.cc\n  templates/interface_template_recent_files.cc\n  templates/interface_template_running_jobs.cc\n  templates/interface_template_scopes.cc\n  templates/interface_template_search.cc\n  templates/interface_template_search_menu.cc\n  templates/interface_template_search_operator.cc\n  templates/interface_template_shader_fx.cc\n  templates/interface_template_status.cc\n  templates/interface_templates.cc\n  interface_undo.cc\n  interface_utils.cc\n  interface_widgets.cc\n  resources.cc\n  view2d/view2d.cc\n  view2d/view2d_draw.cc\n  view2d/view2d_edge_pan.cc\n  view2d/view2d_gizmo_navigate.cc\n  view2d/view2d_ops.cc\n  views/abstract_view.cc\n  views/abstract_view_item.cc\n  views/grid_view.cc\n  views/interface_view.cc\n  views/tree_view.cc\n\n  eyedroppers/eyedropper_intern.hh\n  templates/interface_templates_intern.hh\n  interface_intern.hh\n  regions/interface_regions_intern.hh\n  view2d/view2d_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Python in CMake\nDESCRIPTION: This snippet conditionally includes Python support based on the `WITH_PYTHON` flag. If enabled, it adds the Python include directory to the include path and defines the `WITH_PYTHON` preprocessor macro, which enables Python-related code within the 3D viewport editor module.  The `list(APPEND ...)` command adds to an existing list of items.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC ../../python)\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (FFMPEG Support)\nDESCRIPTION: This snippet conditionally defines `-DWITH_FFMPEG` if `WITH_CODEC_FFMPEG` is enabled. This enables FFMPEG codec support, allowing the game engine to handle various video and audio formats.  It adds a preprocessor definition to enable the feature in the source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tests (Conditional)\nDESCRIPTION: This snippet conditionally sets up the tests for the asset system library if the `WITH_GTESTS` CMake variable is enabled. It defines test-specific source files, include directories, and library dependencies.  The `blender_add_test_suite_lib` macro is used to create the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/asset_system/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    tests/asset_catalog_path_test.cc\n    tests/asset_catalog_test.cc\n    tests/asset_catalog_tree_test.cc\n    tests/asset_library_service_test.cc\n    tests/asset_library_test.cc\n    tests/asset_representation_test.cc\n  )\n  set(TEST_COMMON_SRC\n    tests/asset_library_test_common.hh\n  )\n  set(TEST_LIB\n    bf_asset_system\n  )\n  blender_add_test_suite_lib(asset_system\n    \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\" \"${TEST_COMMON_SRC}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unsetting CMake variables\nDESCRIPTION: This snippet unsets the CMake variables used during the processing of SVG icons to clean up the scope. It is done after the processing is complete to avoid conflicts with other parts of the build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n    unset(SVG_CONTENTS_H)\n    unset(SVG_CONTENTS_C)\n    unset(SVG_FILENAMES_NOEXT)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (IK Itasc)\nDESCRIPTION: Conditionally adds the 'itasc' subdirectory if the WITH_IK_ITASC flag is enabled. This includes the IK Itasc solver.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IK_ITASC)\n  add_subdirectory(itasc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: Defines the source files for the Blender Python module. It lists both .cc and .hh files that make up the module's implementation. This includes the core Python API, application-level code, and RNA interface code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/intern/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  bpy.cc\n  bpy_app.cc\n  bpy_app_alembic.cc\n  bpy_app_build_options.cc\n  bpy_app_ffmpeg.cc\n  bpy_app_handlers.cc\n  bpy_app_icons.cc\n  bpy_app_ocio.cc\n  bpy_app_oiio.cc\n  bpy_app_opensubdiv.cc\n  bpy_app_openvdb.cc\n  bpy_app_sdl.cc\n  bpy_app_timers.cc\n  bpy_app_translations.cc\n  bpy_app_usd.cc\n  bpy_capi_utils.cc\n  bpy_cli_command.cc\n  bpy_driver.cc\n  bpy_geometry_set.cc\n  bpy_gizmo_wrap.cc\n  bpy_interface.cc\n  bpy_interface_atexit.cc\n  bpy_interface_run.cc\n  bpy_intern_string.cc\n  bpy_library_load.cc\n  bpy_library_write.cc\n  bpy_msgbus.cc\n  bpy_operator.cc\n  bpy_operator_wrap.cc\n  bpy_path.cc\n  bpy_props.cc\n  bpy_rna.cc\n  bpy_rna_anim.cc\n  bpy_rna_array.cc\n  bpy_rna_callback.cc\n  bpy_rna_context.cc\n  bpy_rna_data.cc\n  bpy_rna_driver.cc\n  bpy_rna_gizmo.cc\n  bpy_rna_id_collection.cc\n  bpy_rna_operator.cc\n  bpy_rna_text.cc\n  bpy_rna_types_capi.cc\n  bpy_rna_ui.cc\n  bpy_traceback.cc\n  bpy_utils_previews.cc\n  bpy_utils_units.cc\n\n  bpy.hh\n  bpy_app.hh\n  bpy_app_alembic.hh\n  bpy_app_build_options.hh\n  bpy_app_ffmpeg.hh\n  bpy_app_handlers.hh\n  bpy_app_icons.hh\n  bpy_app_ocio.hh\n  bpy_app_oiio.cc\n  bpy_app_opensubdiv.hh\n  bpy_app_openvdb.hh\n  bpy_app_sdl.hh\n  bpy_app_timers.hh\n  bpy_app_translations.hh\n  bpy_app_usd.hh\n  bpy_capi_utils.hh\n  bpy_cli_command.hh\n  bpy_driver.hh\n  bpy_geometry_set.hh\n  bpy_gizmo_wrap.hh\n  bpy_intern_string.hh\n  bpy_library.hh\n  bpy_msgbus.hh\n  bpy_operator.hh\n  bpy_operator_wrap.hh\n  bpy_path.hh\n  bpy_props.hh\n  bpy_rna.hh\n  bpy_rna_anim.hh\n  bpy_rna_callback.hh\n  bpy_rna_context.hh\n  bpy_rna_data.hh\n  bpy_rna_driver.hh\n  bpy_rna_gizmo.hh\n  bpy_rna_id_collection.hh\n  bpy_rna_operator.hh\n  bpy_rna_text.hh\n  bpy_rna_types_capi.hh\n  bpy_rna_ui.hh\n  bpy_traceback.hh\n  bpy_utils_previews.hh\n  bpy_utils_units.hh\n  ../BPY_extern.hh\n  ../BPY_extern_clog.hh\n  ../BPY_extern_python.hh\n  ../BPY_extern_run.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet defines the libraries that the bf_editor_space_buttons library depends on. The PRIVATE keyword indicates that these libraries are only required for building this specific target and are not exposed to other targets that might link against it. The libraries listed likely provide core Blender functionality such as data structures, I/O, and UI elements.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_buttons/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Precompile Headers\nDESCRIPTION: This snippet attempts to precompile the headers for the USD I/O library, if the target_precompile_headers command is available.  It specifies that intern/usd_precomp.hh is the private header file to precompile.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(COMMAND target_precompile_headers)\n  target_precompile_headers(bf_io_usd PRIVATE intern/usd_precomp.hh)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: Defines include directories for the Blender Python module. It includes both project-specific directories and system-level include directories, referencing internal Blender modules, external libraries and generated files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/intern/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n  ../../editors/include\n  ../../imbuf/intern/oiio\n  ../../makesrna\n  ../../../../intern/mantaflow/extern\n  ../../../../intern/opencolorio\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Bundle Creation/Modification Date\nDESCRIPTION: This CMake snippet sets the creation and modification dates of the Blenderplayer application bundle on macOS. It retrieves the current date and time using the `date` command and formats it for use with the `SetFile` command. If the application bundle directory doesn't exist, it creates it first. Then, it executes the `SetFile` command to set both the creation and modification dates. This ensures the application bundle has the correct timestamps in the Finder.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n  # Gather the date in finder-style\n  execute_process(COMMAND date \"+%m/%d/%Y/%H:%M\"\n  OUTPUT_VARIABLE SETFILE_DATE\n  OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n  # Give the bundle actual creation/modification date\n  #\n  # Note that the directory might not yet exist, which happens when CMAKE is first run.\n  if(NOT EXISTS ${EXECUTABLE_OUTPUT_PATH}/Blenderplayer.app)\n    file(MAKE_DIRECTORY ${EXECUTABLE_OUTPUT_PATH}/Blenderplayer.app)\n  endif()\n  execute_process(\n    COMMAND SetFile -d ${SETFILE_DATE} -m ${SETFILE_DATE} ${EXECUTABLE_OUTPUT_PATH}/Blenderplayer.app\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the `bf_python_gpu` library, using the defined source files, include directories, and libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/gpu/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_python_gpu \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing MouseLook with MouseSensor and ObjectActuator in UPBGE (Python)\nDESCRIPTION: This code snippet demonstrates how to implement MouseLook functionality using a MouseSensor and two ObjectActuators in the UPBGE game engine. It uses the mouse movement to control object rotation, achieving a first-person camera control effect.  Dependencies include the bge module, specifically the logic, render, types.SCA_MouseSensor and types.SCA_ObjectActuator classes.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.render.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# To use a mouse movement sensor \"Mouse\" and a\n# motion actuator to mouse look:\nimport bge\n\n# scale sets the speed of motion\nscale = 1.0, 0.5\n\nco = bge.logic.getCurrentController()\nobj = co.owner\nmouse = co.sensors[\"Mouse\"]\nlmotion = co.actuators[\"LMove\"]\nwmotion = co.actuators[\"WMove\"]\n\n# Transform the mouse coordinates to see how far the mouse has moved.\ndef mousePos():\n   x = (bge.render.getWindowWidth() / 2 - mouse.position[0]) * scale[0]\n   y = (bge.render.getWindowHeight() / 2 - mouse.position[1]) * scale[1]\n   return (x, y)\n\npos = mousePos()\n\n# Set the amount of motion: X is applied in world coordinates...\nwmotion.useLocalTorque = False\nwmotion.torque = ((0.0, 0.0, pos[0]))\n\n# ...Y is applied in local coordinates\nlmotion.useLocalTorque = True\nlmotion.torque = ((-pos[1], 0.0, 0.0))\n\n# Activate both actuators\nco.activate(lmotion)\nco.activate(wmotion)\n\n# Centre the mouse\nbge.render.setMousePosition(int(bge.render.getWindowWidth() / 2), int(bge.render.getWindowHeight() / 2))\n```\n\n----------------------------------------\n\nTITLE: Building Cycles Standalone Executable\nDESCRIPTION: This snippet configures the build process for the cycles standalone executable if WITH_CYCLES_STANDALONE is enabled. It defines the source files, creates the executable, links libraries, and sets up installation and testing rules. It also handles platform-specific frameworks for Apple.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_STANDALONE)\n  set(SRC\n    cycles_standalone.cpp\n    cycles_xml.cpp\n    cycles_xml.h\n    oiio_output_driver.cpp\n    oiio_output_driver.h\n  )\n\n  if(WITH_CYCLES_STANDALONE_GUI)\n    list(APPEND SRC\n      opengl/display_driver.cpp\n      opengl/display_driver.h\n      opengl/shader.cpp\n      opengl/shader.h\n      opengl/window.cpp\n      opengl/window.h\n    )\n  endif()\n\n  add_executable(cycles ${SRC} ${INC} ${INC_SYS})\n  unset(SRC)\n\n  target_link_libraries(cycles PRIVATE ${LIB})\n\n  if(APPLE)\n    if(WITH_CYCLES_STANDALONE_GUI)\n      # Frameworks used by SDL.\n      string(CONCAT _cycles_sdl_frameworks\n        \" -framework AudioToolbox\"\n        \" -framework AudioUnit\"\n        \" -framework Cocoa\"\n        \" -framework CoreAudio\"\n        \" -framework CoreHaptics\"\n        \" -framework CoreVideo\"\n        \" -framework ForceFeedback\"\n        \" -framework GameController\"\n      )\n      set_property(\n        TARGET cycles\n        APPEND PROPERTY LINK_FLAGS\n        \"${_cycles_sdl_frameworks}\"\n      )\n    endif()\n  endif()\n\n  if(CYCLES_STANDALONE_REPOSITORY)\n    cycles_install_libraries(cycles)\n\n    if(WITH_USD AND USD_LIBRARY_DIR)\n      install(DIRECTORY\n        ${USD_LIBRARY_DIR}/usd\n        DESTINATION ${CMAKE_INSTALL_PREFIX}\n      )\n\n      install(DIRECTORY\n        ${USD_LIBRARY_DIR}/../plugin/usd\n        DESTINATION ${CMAKE_INSTALL_PREFIX}\n      )\n    endif()\n  endif()\n\n  install(\n    TARGETS cycles\n    DESTINATION ${CMAKE_INSTALL_PREFIX})\n\n  add_test(\n    NAME cycles_version\n    COMMAND ${CMAKE_INSTALL_PREFIX}/$<TARGET_FILE_NAME:cycles> --version)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Fragment Shader Sources - CMake\nDESCRIPTION: This snippet defines the list of fragment shader source files (SRC_GLSL_FRAG) used by the Eevee rendering engine. Each file listed here represents a specific fragment shader implementation for different features and rendering passes. The shaders are written in GLSL.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  eevee_debug_gbuffer_frag.glsl\n  eevee_debug_irradiance_grid_frag.glsl\n  eevee_debug_surfels_frag.glsl\n  eevee_deferred_capture_frag.glsl\n  eevee_deferred_combine_frag.glsl\n  eevee_deferred_light_frag.glsl\n  eevee_deferred_planar_frag.glsl\n  eevee_deferred_thickness_amend_frag.glsl\n  eevee_deferred_tile_classify_frag.glsl\n  eevee_depth_of_field_scatter_frag.glsl\n  eevee_display_lightprobe_planar_frag.glsl\n  eevee_display_lightprobe_sphere_frag.glsl\n  eevee_display_lightprobe_volume_frag.glsl\n  eevee_film_copy_frag.glsl\n  eevee_film_frag.glsl\n  eevee_hiz_debug_frag.glsl\n  eevee_light_culling_debug_frag.glsl\n  eevee_lookdev_display_frag.glsl\n  eevee_occupancy_convert_frag.glsl\n  eevee_renderpass_clear_frag.glsl\n  eevee_shadow_debug_frag.glsl\n  eevee_shadow_page_tile_frag.glsl\n  eevee_shadow_tag_usage_frag.glsl\n  eevee_surf_capture_frag.glsl\n  eevee_surf_deferred_frag.glsl\n  eevee_surf_depth_frag.glsl\n  eevee_surf_forward_frag.glsl\n  eevee_surf_hybrid_frag.glsl\n  eevee_surf_occupancy_frag.glsl\n  eevee_surf_shadow_frag.glsl\n  eevee_surf_volume_frag.glsl\n  eevee_surf_world_frag.glsl\n  eevee_volume_resolve_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Logic Bricks\nDESCRIPTION: This snippet defines the source files (.cpp and .h) that make up the game engine logic bricks library. It lists all the individual source files for actuators, sensors, controllers, and other related classes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  SCA_2DFilterActuator.cpp\n  SCA_ActionActuator.cpp\n  SCA_AddObjectActuator.cpp\n  SCA_ANDController.cpp\n  SCA_ActuatorEventManager.cpp\n  SCA_ActuatorSensor.cpp\n  SCA_AlwaysSensor.cpp\n  SCA_ArmatureSensor.cpp\n  SCA_BasicEventManager.cpp\n  SCA_CameraActuator.cpp\n  SCA_CollectionActuator.cpp\n  SCA_CollisionSensor.cpp\n  SCA_ConstraintActuator.cpp\n  SCA_DelaySensor.cpp\n  SCA_DynamicActuator.cpp\n  SCA_EndObjectActuator.cpp\n  SCA_EventManager.cpp\n  SCA_ExpressionController.cpp\n  SCA_GameActuator.cpp\n  SCA_IActuator.cpp\n  SCA_IController.cpp\n  SCA_IInputDevice.cpp\n  SCA_ILogicBrick.cpp\n  SCA_InputEvent.cpp\n  SCA_IObject.cpp\n  SCA_IScene.cpp\n  SCA_ISensor.cpp\n  SCA_JoystickManager.cpp\n  SCA_JoystickSensor.cpp\n  SCA_KeyboardManager.cpp\n  SCA_KeyboardSensor.cpp\n  SCA_LogicManager.cpp\n  SCA_MouseActuator.cpp\n  SCA_MouseFocusSensor.cpp\n  SCA_MouseManager.cpp\n  SCA_MouseSensor.cpp\n  SCA_MovementSensor.cpp\n  SCA_NANDController.cpp\n  SCA_NearSensor.cpp\n  SCA_NetworkMessageActuator.cpp\n  SCA_NetworkMessageSensor.cpp\n  SCA_NORController.cpp\n  SCA_ObjectActuator.cpp\n  SCA_ORController.cpp\n  SCA_ParentActuator.cpp\n  SCA_PropertyActuator.cpp\n  SCA_PropertySensor.cpp\n  SCA_PythonController.cpp\n  SCA_PythonJoystick.cpp\n  SCA_PythonKeyboard.cpp\n  SCA_PythonMouse.cpp\n  SCA_RadarSensor.cpp\n  SCA_RandomActuator.cpp\n  SCA_RandomNumberGenerator.cpp\n  SCA_RandomSensor.cpp\n  SCA_RaySensor.cpp\n  SCA_ReplaceMeshActuator.cpp\n  SCA_SceneActuator.cpp\n  SCA_SoundActuator.cpp\n  SCA_StateActuator.cpp\n  SCA_SteeringActuator.cpp\n  SCA_TimeEventManager.cpp\n  SCA_TrackToActuator.cpp\n  SCA_VibrationActuator.cpp\n  SCA_VisibilityActuator.cpp\n  SCA_XNORController.cpp\n  SCA_XORController.cpp\n\n  SCA_2DFilterActuator.h\n  SCA_ActionActuator.h\n  SCA_AddObjectActuator.h\n  SCA_ANDController.h\n  SCA_ActuatorEventManager.h\n  SCA_ActuatorSensor.h\n  SCA_AlwaysSensor.h\n  SCA_ArmatureSensor.h\n  SCA_BasicEventManager.h\n  SCA_CameraActuator.h\n  SCA_CollectionActuator.h\n  SCA_CollisionSensor.h\n  SCA_ConstraintActuator.h\n  SCA_DelaySensor.h\n  SCA_DynamicActuator.h\n  SCA_EndObjectActuator.h\n  SCA_EventManager.h\n  SCA_ExpressionController.h\n  SCA_GameActuator.h\n  SCA_IActuator.h\n  SCA_IController.h\n  SCA_IInputDevice.h\n  SCA_ILogicBrick.h\n  SCA_InputEvent.h\n  SCA_IObject.h\n  SCA_IScene.h\n  SCA_ISensor.h\n  SCA_JoystickManager.h\n  SCA_JoystickSensor.h\n  SCA_KeyboardManager.h\n  SCA_KeyboardSensor.h\n  SCA_LogicManager.h\n  SCA_MouseActuator.h\n  SCA_MouseFocusSensor.h\n  SCA_MouseManager.h\n  SCA_MouseSensor.h\n  SCA_MovementSensor.h\n  SCA_NANDController.h\n  SCA_NearSensor.h\n  SCA_NetworkMessageActuator.h\n  SCA_NetworkMessageSensor.h\n  SCA_NORController.h\n  SCA_ObjectActuator.h\n  SCA_ORController.h\n  SCA_ParentActuator.h\n  SCA_PropertyActuator.h\n  SCA_PropertySensor.h\n  SCA_PythonController.h\n  SCA_PythonJoystick.h\n  SCA_PythonKeyboard.h\n  SCA_PythonMouse.h\n  SCA_RadarSensor.h\n  SCA_RandomActuator.h\n  SCA_RandomNumberGenerator.h\n  SCA_RandomSensor.h\n  SCA_RaySensor.h\n  SCA_ReplaceMeshActuator.cpp\n  SCA_SceneActuator.cpp\n  SCA_SoundActuator.cpp\n  SCA_StateActuator.cpp\n  SCA_SteeringActuator.cpp\n  SCA_TimeEventManager.h\n  SCA_TrackToActuator.h\n  SCA_VibrationActuator.cpp\n  SCA_VisibilityActuator.cpp\n  SCA_XNORController.h\n  SCA_XORController.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet defines the source files to be compiled for the BLI library. It lists all the .cc files located in the intern/ directory, effectively specifying all the source code that comprises the library's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/BLI_assert.cc\n  intern/BLI_color.cc\n  intern/BLI_dial_2d.cc\n  intern/BLI_dynstr.cc\n  intern/BLI_filelist.cc\n  intern/BLI_ghash.cc\n  intern/BLI_ghash_utils.cc\n  intern/BLI_heap.cc\n  intern/BLI_heap_simple.cc\n  intern/BLI_kdopbvh.cc\n  intern/BLI_linklist.cc\n  intern/BLI_linklist_lockfree.cc\n  intern/BLI_memarena.cc\n  intern/BLI_memblock.cc\n  intern/BLI_memiter.cc\n  intern/BLI_mempool.cc\n  intern/BLI_mmap.cc\n  intern/BLI_subprocess.cc\n  intern/BLI_timer.cc\n  intern/array_store.cc\n  intern/array_store_utils.cc\n  intern/array_utils.cc\n  intern/array_utils_c.cc\n  intern/astar.cc\n  intern/atomic_disjoint_set.cc\n  intern/bit_bool_conversion.cc\n  intern/bit_ref.cc\n  intern/bit_span.cc\n  intern/bitmap.cc\n  intern/bitmap_draw_2d.cc\n  intern/boxpack_2d.cc\n  intern/buffer.cc\n  intern/cache_mutex.cc\n  intern/compute_context.cc\n  intern/convexhull_2d.cc\n  intern/cpp_type.cc\n  intern/cpp_types.cc\n  intern/csv_parse.cc\n  intern/delaunay_2d.cc\n  intern/dot_export.cc\n  intern/dynlib.cc\n  intern/easing.cc\n  intern/endian_switch.cc\n  intern/expr_pylike_eval.cc\n  intern/fftw.cc\n  intern/fileops.cc\n  intern/fileops_c.cc\n  intern/filereader_file.cc\n  intern/filereader_gzip.cc\n  intern/filereader_memory.cc\n  intern/filereader_zstd.cc\n  intern/fnmatch.cc\n  intern/generic_vector_array.cc\n  intern/generic_virtual_array.cc\n  intern/generic_virtual_vector_array.cc\n  intern/gsqueue.cc\n  intern/hash_md5.cc\n  intern/hash_mm2a.cc\n  intern/hash_mm3.cc\n  intern/hash_tables.cc\n  intern/implicit_sharing.cc\n  intern/index_mask.cc\n  intern/index_mask_expression.cc\n  intern/index_range.cc\n  intern/jitter_2d.cc\n  intern/kdtree_1d.cc\n  intern/kdtree_2d.cc\n  intern/kdtree_3d.cc\n  intern/kdtree_4d.cc\n  intern/lasso_2d.cc\n  intern/lazy_threading.cc\n  intern/length_parameterize.cc\n  intern/listbase.cc\n  intern/math_base.cc\n  intern/math_base_inline.cc\n  intern/math_base_safe_inline.cc\n  intern/math_basis_types.cc\n  intern/math_bits_inline.cc\n  intern/math_boolean.cc\n  intern/math_color.cc\n  intern/math_color_blend_inline.cc\n  intern/math_color_inline.cc\n  intern/math_geom.cc\n  intern/math_geom_inline.cc\n  intern/math_half.cc\n  intern/math_interp.cc\n  intern/math_matrix.cc\n  intern/math_matrix_c.cc\n  intern/math_rotation.cc\n  intern/math_rotation_c.cc\n  intern/math_solvers.cc\n  intern/math_statistics.cc\n  intern/math_time.cc\n  intern/math_vec.cc\n  intern/math_vector.cc\n  intern/math_vector_inline.cc\n  intern/memory_cache.cc\n  intern/memory_counter.cc\n  intern/memory_utils.cc\n  intern/mesh_boolean.cc\n  intern/mesh_intersect.cc\n  intern/noise.cc\n  intern/noise_c.cc\n  intern/offset_indices.cc\n  intern/ordered_edge.cc\n  intern/path_utils.cc\n  intern/polyfill_2d.cc\n  intern/polyfill_2d_beautify.cc\n  intern/quadric.cc\n  intern/rand.cc\n  intern/rct.cc\n  intern/resource_scope.cc\n  intern/scanfill.cc\n  intern/scanfill_utils.cc\n  intern/serialize.cc\n  intern/session_uid.cc\n  intern/smaa_textures.cc\n  intern/sort.cc\n  intern/sort_utils.cc\n  intern/stack.cc\n  intern/storage.cc\n  intern/string.cc\n  intern/string_cursor_utf8.cc\n  intern/string_ref.cc\n  intern/string_search.cc\n  intern/string_utf8.cc\n  intern/string_utils.cc\n  intern/system.cc\n  intern/task_graph.cc\n  intern/task_iterator.cc\n  intern/task_pool.cc\n  intern/task_range.cc\n  intern/task_scheduler.cc\n  intern/tempfile.cc\n  intern/threads.cc\n  intern/time.cc\n  intern/timecode.cc\n  intern/timeit.cc\n  intern/uuid.cc\n  intern/vector.cc\n  intern/virtual_array.cc\n  intern/voxel.cc\n  intern/winstuff.cc\n  intern/winstuff_dir.cc\n  intern/winstuff_registration.cc\n  # Private headers.\n  intern/BLI_mempool_private.h\n\n  ../../../extern/wcwidth/wcwidth.c\n\n  # Header as source (included in C files above).\n  intern/kdtree_impl.h\n  intern/list_sort_impl.h\n\n\n  BLI_alloca.h\n  BLI_allocator.hh\n  BLI_any.hh\n  BLI_array.hh\n  BLI_array_state.hh\n  BLI_array_store.h\n  BLI_array_store_utils.h\n  BLI_array_utils.h\n  BLI_array_utils.hh\n  BLI_asan.h\n  BLI_assert.h\n  BLI_astar.h\n  BLI_atomic_disjoint_set.hh\n  BLI_binary_search.hh\n  BLI_bit_bool_conversion.hh\n  BLI_bit_group_vector.hh\n  BLI_bit_ref.hh\n  BLI_bit_span.hh\n  BLI_bit_span_ops.hh\n  BLI_bit_span_to_index_ranges.hh\n  BLI_bit_vector.hh\n  BLI_bitmap.h\n  BLI_bitmap_draw_2d.h\n  BLI_bounds.hh\n  BLI_bounds_types.hh\n  BLI_boxpack_2d.h\n  BLI_buffer.h\n  BLI_build_config.h\n  BLI_cache_mutex.hh\n  BLI_color.hh\n  BLI_color_mix.hh\n  BLI_compiler_attrs.h\n  BLI_compiler_compat.h\n  BLI_compiler_typecheck.h\n  BLI_compute_context.hh\n  BLI_concurrent_map.hh\n  BLI_console.h\n  BLI_convexhull_2d.h\n  BLI_cpp_type.hh\n  BLI_cpp_type_make.hh\n  BLI_cpp_types.hh\n  BLI_cpp_types_make.hh\n  BLI_csv_parse.hh\n  BLI_delaunay_2d.hh\n  BLI_devirtualize_parameters.hh\n  BLI_dial_2d.h\n  BLI_disjoint_set.hh\n  BLI_dot_export.hh\n  BLI_dot_export_attribute_enums.hh\n  BLI_dynlib.h\n  BLI_dynstr.h\n  BLI_easing.h\n  BLI_endian_defines.h\n  BLI_endian_switch.h\n  BLI_endian_switch_inline.h\n  BLI_enumerable_thread_specific.hh\n  BLI_expr_pylike_eval.h\n  BLI_fftw.hh\n  BLI_fileops.h\n  BLI_fileops.hh\n  BLI_fileops_types.h\n  BLI_filereader.h\n  BLI_fixed_width_int.hh\n  BLI_fixed_width_int_str.hh\n  BLI_fnmatch.h\n  BLI_function_ref.hh\n  BLI_generic_array.hh\n  BLI_generic_key.hh\n  BLI_generic_pointer.hh\n  BLI_generic_span.hh\n  BLI_generic_value_map.hh\n  BLI_generic_vector_array.hh\n  BLI_generic_virtual_array.hh\n  BLI_generic_virtual_vector_array.hh\n  BLI_ghash.h\n  BLI_gsqueue.h\n  BLI_hash.h\n  BLI_hash.hh\n  BLI_hash_md5.hh\n  BLI_hash_mm2a.hh\n  BLI_hash_mm3.hh\n  BLI_hash_tables.hh\n  BLI_heap.h\n  BLI_heap_simple.h\n  BLI_implicit_sharing.h\n  BLI_implicit_sharing.hh\n  BLI_implicit_sharing_ptr.hh\n  BLI_index_mask.hh\n  BLI_index_mask_expression.hh\n  BLI_index_mask_fwd.hh\n  BLI_index_range.hh\n  BLI_index_ranges_builder.hh\n  BLI_index_ranges_builder_fwd.hh\n  BLI_inplace_priority_queue.hh\n  BLI_iterator.h\n  BLI_jitter_2d.h\n  BLI_kdopbvh.hh\n  BLI_kdtree.h\n  BLI_kdtree_impl.h\n  BLI_lasso_2d.hh\n  BLI_lazy_threading.hh\n  BLI_length_parameterize.hh\n  BLI_linear_allocator.hh\n  BLI_linear_allocator_chunked_list.hh\n  BLI_link_utils.h\n  BLI_linklist.h\n  BLI_linklist_lockfree.h\n  BLI_linklist_stack.h\n  BLI_listbase.h\n  BLI_listbase_wrapper.hh\n  BLI_map.hh\n  BLI_map_slots.hh\n  BLI_math_angle_types.hh\n  BLI_math_axis_angle.hh\n  BLI_math_axis_angle_types.hh\n  BLI_math_base.h\n  BLI_math_base.hh\n  BLI_math_base_safe.h\n  BLI_math_basis_types.hh\n  BLI_math_bits.h\n  BLI_math_boolean.hh\n  BLI_math_color.h\n  BLI_math_color.hh\n  BLI_math_color_blend.h\n  BLI_math_constants.h\n  BLI_math_euler.hh\n  BLI_math_euler_types.hh\n  BLI_math_geom.h\n  BLI_math_half.hh\n  BLI_math_inline.h\n  BLI_math_interp.hh\n  BLI_math_matrix.h\n  BLI_math_matrix.hh\n  BLI_math_matrix_types.hh\n  BLI_math_mpq.hh\n  BLI_math_numbers.hh\n  BLI_math_quaternion.hh\n  BLI_math_quaternion_types.hh\n  BLI_math_rotation.h\n  BLI_math_rotation.hh\n  BLI_math_rotation_legacy.hh\n  BLI_math_rotation_types.hh\n  BLI_math_solvers.h\n  BLI_math_statistics.h\n  BLI_math_time.h\n  BLI_math_vector.h\n  BLI_math_vector.hh\n  BLI_math_vector_mpq_types.hh\n  BLI_math_vector_types.hh\n  BLI_math_vector_unroll.hh\n  BLI_memarena.h\n  BLI_memblock.h\n  BLI_memiter.h\n  BLI_memory_cache.hh\n  BLI_memory_counter.hh\n  BLI_memory_counter_fwd.hh\n  BLI_memory_utils.h\n  BLI_memory_utils.hh\n  BLI_mempool.h\n  BLI_mesh_boolean.hh\n  BLI_mesh_intersect.hh\n  BLI_mmap.h\n  BLI_multi_value_map.hh\n  BLI_noise.h\n  BLI_noise.hh\n  BLI_offset_indices.hh\n  BLI_offset_span.hh\n  BLI_ordered_edge.hh\n  BLI_parameter_pack_utils.hh\n  BLI_path_utils.hh\n  BLI_polyfill_2d.h\n  BLI_polyfill_2d_beautify.h\n  BLI_pool.hh\n  BLI_probing_strategies.hh\n  BLI_quadric.h\n  BLI_rand.h\n  BLI_rand.hh\n  BLI_random_access_iterator_mixin.hh\n  BLI_rect.h\n  BLI_resource_scope.hh\n  BLI_scanfill.h\n  BLI_serialize.hh\n  BLI_session_uid.h\n  BLI_set.hh\n  BLI_set_slots.hh\n  BLI_shared_cache.hh\n  BLI_simd.hh\n  BLI_smaa_textures.h\n  BLI_sort.h\n  BLI_sort.hh\n  BLI_sort_utils.h\n  BLI_span.hh\n  BLI_stack.h\n  BLI_stack.hh\n  BLI_strict_flags.h\n  BLI_string.h\n  BLI_string_cursor_utf8.h\n  BLI_string_ref.hh\n  BLI_string_search.hh\n  BLI_string_utf8.h\n  BLI_string_utf8_symbols.h\n  BLI_string_utils.hh\n  BLI_struct_equality_utils.hh\n  BLI_sub_frame.hh\n  BLI_subprocess.hh\n  BLI_sys_types.h\n  BLI_system.h\n  BLI_task.h\n  BLI_task.hh\n  BLI_task_size_hints.hh\n  BLI_tempfile.h\n  BLI_threads.h\n  BLI_time.h\n  BLI_time_utildefines.h\n  BLI_timecode.h\n  BLI_timeit.hh\n  BLI_timer.h\n  BLI_unique_sorted_indices.hh\n  BLI_unroll.hh\n  BLI_utildefines.h\n  BLI_utildefines_iter.h\n  BLI_utildefines_stack.h\n  BLI_utildefines_variadic.h\n  BLI_utility_mixins.hh\n  BLI_uuid.h\n  BLI_vector.hh\n  BLI_vector_list.hh\n  BLI_vector_set.hh\n  BLI_vector_set_slots.hh\n  BLI_virtual_array.hh\n  BLI_virtual_array_fwd.hh\n  BLI_virtual_vector_array.hh\n  BLI_voxel.h\n  BLI_winstuff.h\n  BLI_winstuff_com.hh\n\n  ../../../extern/wcwidth/wcwidth.h\n\n  # Without these files listed, they aren't known to CMake.\n  ../../../extern/json/include/json.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Finding and Enabling Solver Backends in CMake\nDESCRIPTION: This snippet uses the `FIND_PACKAGE` command to locate external solver libraries (GLPK, ILOG, COIN, SOPLEX). It then enables specific solver backends based on user-defined options and sets corresponding flags if the packages are found. The availability of LP and MIP solvers are also configured.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nSET(LEMON_ENABLE_GLPK YES CACHE STRING \"Enable GLPK solver backend.\")\nSET(LEMON_ENABLE_ILOG YES CACHE STRING \"Enable ILOG (CPLEX) solver backend.\")\nSET(LEMON_ENABLE_COIN YES CACHE STRING \"Enable COIN solver backend.\")\nSET(LEMON_ENABLE_SOPLEX YES CACHE STRING \"Enable SoPlex solver backend.\")\n\nIF(LEMON_ENABLE_GLPK)\n  FIND_PACKAGE(GLPK 4.33)\nENDIF(LEMON_ENABLE_GLPK)\nIF(LEMON_ENABLE_ILOG)\n  FIND_PACKAGE(ILOG)\nENDIF(LEMON_ENABLE_ILOG)\nIF(LEMON_ENABLE_COIN)\n  FIND_PACKAGE(COIN)\nENDIF(LEMON_ENABLE_COIN)\nIF(LEMON_ENABLE_SOPLEX)\n  FIND_PACKAGE(SOPLEX)\nENDIF(LEMON_ENABLE_SOPLEX)\n\nIF(GLPK_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_MIP TRUE)\n  SET(LEMON_HAVE_GLPK TRUE)\nENDIF(GLPK_FOUND)\nIF(ILOG_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_MIP TRUE)\n  SET(LEMON_HAVE_CPLEX TRUE)\nENDIF(ILOG_FOUND)\nIF(COIN_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_MIP TRUE)\n  SET(LEMON_HAVE_CLP TRUE)\n  SET(LEMON_HAVE_CBC TRUE)\nENDIF(COIN_FOUND)\nIF(SOPLEX_FOUND)\n  SET(LEMON_HAVE_LP TRUE)\n  SET(LEMON_HAVE_SOPLEX TRUE)\nENDIF(SOPLEX_FOUND)\n```\n\n----------------------------------------\n\nTITLE: Conditional Bullet Library Append in CMake\nDESCRIPTION: This snippet conditionally appends the Bullet library include directory to the `INC` list and adds the preprocessor definition `-DWITH_BULLET` if Bullet physics is enabled during the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC\n    ../../../../intern/rigidbody\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting platform specific definitions\nDESCRIPTION: This snippet adds a preprocessor definition for MSYS or MINGW environments to enable math constants.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSYS OR MINGW)\n\tadd_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Private Blender Libraries\nDESCRIPTION: This section defines a list of private Blender libraries that are dependencies for the UPBGE project.  These libraries cover various aspects of the engine, including font handling (blenfont), kernel operations (blenkernel), core utilities (blenlib), asset loading (blenloader), translations (blentranslation), mesh data structures (bmesh), dependency graph management (depsgraph), DNA (data structures), function definitions, GPU interaction, image buffer handling (imbuf), logging (clog), guarded memory allocation, the compositor, node management, rendering functionalities, window management, atomic operations, and external formatting libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nPRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_compositor\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::extern::fmtlib\n```\n\n----------------------------------------\n\nTITLE: Adding BMesh Library\nDESCRIPTION: This snippet uses the blender_add_lib macro to create the bf_bmesh library, and creates an alias bf::bmesh.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_bmesh \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::bmesh ALIAS bf_bmesh)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Blender Editor Interface\nDESCRIPTION: This snippet sets the include directories required for compiling the Blender editor interface library. It includes paths to various Blender modules, external libraries, and generated header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../asset\n  ../include\n  ../../makesrna\n  ../../python\n  ../../../../intern/ghost\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake\nDESCRIPTION: This snippet defines the source files that will be compiled into the bf_editor_space_buttons library. It includes both C++ source files (.cc) and header files (.hh). These files likely contain the implementation logic for creating and managing buttons in the Blender editor space.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_buttons/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  buttons_context.cc\n  buttons_ops.cc\n  buttons_texture.cc\n  space_buttons.cc\n\n  buttons_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GMP\nDESCRIPTION: This snippet configures the build for GMP (GNU Multiple Precision Arithmetic Library). It adds the `WITH_GMP` preprocessor definition, includes the GMP include directories, and links the GMP libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the libraries that the IK plugin depends on.  These are Blender internal libraries (blenkernel, blenlib, dna, guardedalloc).  The `PRIVATE` keyword indicates that these libraries are only needed for compiling the IK plugin and not for other libraries that depend on it. Additional libraries are appended conditionally based on the IK solvers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Blender Editor Interface Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the Blender editor interface library. It specifies the library name, source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_interface \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Warning Flags in CMake\nDESCRIPTION: This snippet configures C++ compiler warning flags based on the compiler used (GNU or MSVC). It retrieves warning flags from the LEMON_CXX_WARNING environment variable if defined; otherwise, it sets default flags based on the compiler. The resulting flags are stored in the CMAKE_CXX_FLAGS variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nIF(DEFINED ENV{LEMON_CXX_WARNING})\n  SET(CXX_WARNING $ENV{LEMON_CXX_WARNING})\nELSE()\n  IF(CMAKE_COMPILER_IS_GNUCXX)\n    SET(CXX_WARNING \"-Wall -W -Wunused -Wformat=2 -Wctor-dtor-privacy -Wnon-virtual-dtor -Wno-char-subscripts -Wwrite-strings -Wno-char-subscripts -Wreturn-type -Wcast-qual -Wcast-align -Wsign-promo -Woverloaded-virtual -fno-strict-aliasing -Wold-style-cast -Wno-unknown-pragmas\")\n    SET(CMAKE_CXX_FLAGS_DEBUG CACHE STRING \"-ggdb\")\n    SET(CMAKE_C_FLAGS_DEBUG CACHE STRING \"-ggdb\")\n  ELSEIF(MSVC)\n    # This part is unnecessary 'casue the same is set by the lemon/core.h.\n    # Still keep it as an example.\n    SET(CXX_WARNING \"/wd4250 /wd4355 /wd4503 /wd4800 /wd4996\")\n    # Suppressed warnings:\n    # C4250: 'class1' : inherits 'class2::member' via dominance\n    # C4355: 'this' : used in base member initializer list\n    # C4503: 'function' : decorated name length exceeded, name was truncated\n    # C4800: 'type' : forcing value to bool 'true' or 'false'\n    #        (performance warning)\n    # C4996: 'function': was declared deprecated\n  ELSE()\n    SET(CXX_WARNING \"-Wall\")\n  ENDIF()\nENDIF()\nSET(LEMON_CXX_WARNING_FLAGS ${CXX_WARNING} CACHE STRING \"LEMON warning flags.\")\n\nSET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${LEMON_CXX_WARNING_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: OpenSubdiv Conditional Logic\nDESCRIPTION: This snippet conditionally includes OpenSubdiv-related source files, include directories, and libraries based on the `WITH_OPENSUBDIV` flag. If `WITH_OPENSUBDIV` is not enabled, stub files are used instead.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  macro(OPENSUBDIV_DEFINE_COMPONENT component)\n    if(${${component}})\n      add_definitions(-D${component})\n    endif()\n  endmacro()\n\n  list(APPEND INC_SYS\n    ${OPENSUBDIV_INCLUDE_DIRS}\n    ${Epoxy_INCLUDE_DIRS}\n  )\n\n  list(APPEND SRC\n    # Base.\n    internal/base/memory.h\n    internal/base/opensubdiv_capi.cc\n    internal/base/type_convert.cc\n    internal/base/type_convert.h\n    internal/base/util.cc\n    internal/base/util.h\n\n    # Evaluator.\n    internal/evaluator/eval_output.cc\n    internal/evaluator/eval_output.h\n    internal/evaluator/eval_output_cpu.cc\n    internal/evaluator/eval_output_cpu.h\n    internal/evaluator/eval_output_gpu.cc\n    internal/evaluator/eval_output_gpu.h\n    internal/evaluator/evaluator_cache_impl.cc\n    internal/evaluator/evaluator_cache_impl.h\n    internal/evaluator/evaluator_capi.cc\n    internal/evaluator/evaluator_impl.cc\n    internal/evaluator/gpu_compute_evaluator.cc\n    internal/evaluator/gpu_compute_evaluator.h\n    internal/evaluator/gpu_patch_table.cc\n    internal/evaluator/gpu_patch_table.hh\n    internal/evaluator/gpu_vertex_buffer_wrapper.hh\n    internal/evaluator/patch_map.cc\n    internal/evaluator/patch_map.h\n\n\n    # Topology.\n    internal/topology/mesh_topology.cc\n    internal/topology/mesh_topology_compare.cc\n    internal/topology/mesh_topology.h\n    internal/topology/topology_refiner_factory.cc\n    internal/topology/topology_refiner_impl.cc\n    internal/topology/topology_refiner_impl_compare.cc\n  )\n\n  list(APPEND LIB\n    ${OPENSUBDIV_LIBRARIES}\n    ${Epoxy_LIBRARIES}\n  )\n\n  if(WIN32)\n    add_definitions(-DNOMINMAX)\n    add_definitions(-D_USE_MATH_DEFINES)\n  endif()\n\n  set(GLSL_SRC\n    internal/evaluator/shaders/osd_eval_stencils_comp.glsl\n    internal/evaluator/shaders/osd_eval_patches_comp.glsl\n  )\n\n  set(GLSL_C)\n  foreach(GLSL_FILE ${GLSL_SRC})\n    glsl_to_c(${GLSL_FILE} GLSL_C)\n  endforeach()\n\n  blender_add_lib(bf_osd_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n\n  list(APPEND LIB\n    bf_osd_shaders\n  )\n\n  set(GLSL_SOURCE_CONTENT \"\")\n  foreach(GLSL_FILE ${GLSL_SRC})\n    get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n    string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n    string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\n  endforeach()\n\n  set(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_osd_source_list.h\")\n  file(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\n  list(APPEND SRC ${glsl_source_list_file})\n  list(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n\n  target_include_directories(bf_osd_shaders PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n\nelse()\n  list(APPEND SRC\n    stub/opensubdiv_stub.cc\n    stub/opensubdiv_evaluator_stub.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: This snippet sets the source files for the sequencer library. It includes both header files (.hh) and C++ source files (.cc) located in the project's directories, defining the core implementation of the sequencer.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  SEQ_add.hh\n  SEQ_animation.hh\n  SEQ_channels.hh\n  SEQ_connect.hh\n  SEQ_edit.hh\n  SEQ_effects.hh\n  SEQ_iterator.hh\n  SEQ_modifier.hh\n  SEQ_offscreen.hh\n  SEQ_prefetch.hh\n  SEQ_proxy.hh\n  SEQ_relations.hh\n  SEQ_render.hh\n  SEQ_retiming.hh\n  SEQ_select.hh\n  SEQ_sequencer.hh\n  SEQ_sound.hh\n  SEQ_thumbnail_cache.hh\n  SEQ_time.hh\n  SEQ_transform.hh\n  SEQ_utils.hh\n\n  intern/animation.cc\n  intern/channels.cc\n  intern/disk_cache.cc\n  intern/disk_cache.hh\n  intern/effects/effects.cc\n  intern/effects/effects.hh\n  intern/effects/vse_effect_add_sub_mul.cc\n  intern/effects/vse_effect_adjustment.cc\n  intern/effects/vse_effect_blend.cc\n  intern/effects/vse_effect_cross.cc\n  intern/effects/vse_effect_gaussian_blur.cc\n  intern/effects/vse_effect_glow.cc\n  intern/effects/vse_effect_multi_camera.cc\n  intern/effects/vse_effect_solid_color.cc\n  intern/effects/vse_effect_speed.cc\n  intern/effects/vse_effect_text.cc\n  intern/effects/vse_effect_transform.cc\n  intern/effects/vse_effect_wipe.cc\n  intern/image_cache.cc\n  intern/image_cache.hh\n  intern/iterator.cc\n  intern/media_presence.cc\n  intern/modifier.cc\n  intern/multiview.cc\n  intern/multiview.hh\n  intern/prefetch.cc\n  intern/prefetch.hh\n  intern/proxy.cc\n  intern/proxy.hh\n  intern/proxy_job.cc\n  intern/render.cc\n  intern/render.hh\n  intern/sequencer.cc\n  intern/sequencer.hh\n  intern/sound.cc\n  intern/strip_add.cc\n  intern/strip_connect.cc\n  intern/strip_edit.cc\n  intern/strip_lookup.cc\n  intern/strip_relations.cc\n  intern/strip_retiming.cc\n  intern/strip_select.cc\n  intern/strip_time.cc\n  intern/strip_time.hh\n  intern/strip_transform.cc\n  intern/thumbnail_cache.cc\n  intern/utils.cc\n  intern/utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Maps with glEvalCoord (bgl)\nDESCRIPTION: Evaluates enabled one- and two-dimensional maps. The 'u' and 'v' parameters (depending on the function prototype) specify domain coordinates to the basis function defined in a previous glMap command. This allows for the evaluation of curves and surfaces.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glEvalCoord (u,v)\n```\n\n----------------------------------------\n\nTITLE: Enable Libmv structure from motion library\nDESCRIPTION: This code snippet configures an option to enable the Libmv structure from motion library. Libmv is used for camera and motion tracking functionalities. The `WITH_LIBMV_SCHUR_SPECIALIZATIONS` option enables fixed-size Schur specializations for Libmv, and is marked as an advanced option.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_LIBMV \"Enable Libmv structure from motion library\" ON)\noption(WITH_LIBMV_SCHUR_SPECIALIZATIONS \"Enable fixed-size schur specializations.\" ON)\nmark_as_advanced(WITH_LIBMV_SCHUR_SPECIALIZATIONS)\n```\n\n----------------------------------------\n\nTITLE: Defining Light Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to light sources in the Cycles kernel. It includes definitions for area lights, background lights, common light parameters, distant lights, light distributions, generic light definitions, point lights, light sampling techniques, spot lights, light trees, and triangle lights.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_LIGHT_HEADERS\n  light/area.h\n  light/background.h\n  light/common.h\n  light/distant.h\n  light/distribution.h\n  light/light.h\n  light/point.h\n  light/sample.h\n  light/spot.h\n  light/tree.h\n  light/triangle.h\n)\n```\n\n----------------------------------------\n\nTITLE: Set Source Files - CMake\nDESCRIPTION: This CMake code snippet defines the source files that make up the `bf_editor_space_statusbar` library. In this case, only one source file, `space_statusbar.cc`, is specified. This file presumably contains the C++ implementation of the statusbar functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_statusbar/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  space_statusbar.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenGL Dependencies\nDESCRIPTION: This snippet conditionally appends OpenGL-related include directories and libraries to the `INC_SYS` and `LIB` variables if the `WITH_OPENGL_BACKEND` option is enabled, using the Epoxy library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/gpu/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting -fmacro-prefix-map Flag\nDESCRIPTION: This snippet attempts to set the `-fmacro-prefix-map` flag for Clang and GCC compilers. This flag is used to shorten file paths in macros. It checks if the compiler supports the flag, and if so, appends the flag to the platform CFLAGS.  It also handles the case where the compiler is Clang shipped with an older Xcode version that does not support this flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_137\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COMPILER_SHORT_FILE_MACRO)\n  # Use '-fmacro-prefix-map' for Clang and GCC (MSVC doesn't support this).\n  set(C_PREFIX_MAP_FLAGS \"\")\n  set(CXX_PREFIX_MAP_FLAGS \"\")\n  add_check_c_compiler_flags(\n    C_PREFIX_MAP_FLAGS\n    C_MACRO_PREFIX_MAP -fmacro-prefix-map=foo=bar\n  )\n  add_check_cxx_compiler_flags(\n    CXX_PREFIX_MAP_FLAGS\n    CXX_MACRO_PREFIX_MAP -fmacro-prefix-map=foo=bar\n  )\n  if(C_MACRO_PREFIX_MAP AND CXX_MACRO_PREFIX_MAP)\n    if(APPLE)\n      if(XCODE AND ${XCODE_VERSION} VERSION_LESS 12.0)\n        # Developers may have say LLVM Clang-10.0.1 toolchain (which supports the flag)\n        # with Xcode-11 (the Clang of which doesn't support the flag).\n        message(\n          WARNING\n          \"-fmacro-prefix-map flag is NOT supported by Clang shipped with Xcode-${XCODE_VERSION}.\"\n          \" Some Xcode functionality in Product menu may not work. \"\n          \"Disabling WITH_COMPILER_SHORT_FILE_MACRO.\"\n        )\n        set(WITH_COMPILER_SHORT_FILE_MACRO OFF)\n      endif()\n    endif()\n    if(WITH_COMPILER_SHORT_FILE_MACRO)\n      path_ensure_trailing_slash(_src_dir \"${CMAKE_SOURCE_DIR}\")\n      path_ensure_trailing_slash(_bin_dir \"${CMAKE_BINARY_DIR}\")\n      # Keep this variable so it can be stripped from build-info.\n      set(PLATFORM_CFLAGS_FMACRO_PREFIX_MAP\n        \"-fmacro-prefix-map=\\\"${_src_dir}\\\"=\\\"\\\" -fmacro-prefix-map=\\\"${_bin_dir}\\\"=\\\"\\\"\"\n      )\n      string(APPEND PLATFORM_CFLAGS \" ${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\")\n      unset(_src_dir)\n      unset(_bin_dir)\n    endif()\n  else()\n    message(\n      WARNING\n      \"-fmacro-prefix-map flag is NOT supported by C/C++ compiler.\"\n      \" Disabling WITH_COMPILER_SHORT_FILE_MACRO.\"\n    )\n    set(WITH_COMPILER_SHORT_FILE_MACRO OFF)\n  endif()\n  unset(C_PREFIX_MAP_FLAGS)\n  unset(CXX_PREFIX_MAP_FLAGS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional TBB Support in CMake\nDESCRIPTION: This snippet conditionally adds TBB (Threading Building Blocks) support. If WITH_TBB is enabled, it adds the -DWITH_TBB definition, includes the TBB include directories, and appends the TBB libraries to the LIB list.  It relies on the TBB_INCLUDE_DIRS and TBB_LIBRARIES variables being defined elsewhere, presumably by FindTBB.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_TBB)\n  add_definitions(-DWITH_TBB)\n\n  list(APPEND INC_SYS\n    ${TBB_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${TBB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions\nDESCRIPTION: This section adds preprocessor definitions based on various feature flags. These definitions enable specific features during compilation, such as Cycles, Python, Game Engine, and various image format support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES)\n  add_definitions(-DWITH_CYCLES)\nendif()\n\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../../python\n  )\nendif()\n\nif(WITH_GAMEENGINE)\n\tadd_definitions(-DWITH_GAMEENGINE)\nendif()\n\n\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_IMAGE_OPENJPEG)\n  add_definitions(-DWITH_IMAGE_OPENJPEG)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n\nif(WITH_IMAGE_WEBP)\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in CMake\nDESCRIPTION: This snippet adds dependencies to the `bf_editor_space_image` library.  It ensures that the `bf_rna` library is built before `bf_editor_space_image`. This is necessary because `bf_editor_space_image` relies on the generated RNA data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_image/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_image bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Formatting a string with fmt\nDESCRIPTION: This C++ code snippet shows how to format a string using the fmt library. It includes the `<fmt/core.h>` implicitly as it's required for `fmt::format`.  It formats the integer 42 into a string \"The answer is 42.\" using the `fmt::format` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nstd::string s = fmt::format(\"The answer is {}.\", 42);\n    // s == \"The answer is 42.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library\nDESCRIPTION: This code creates an interface library named bf_intern_atomic. It also creates an alias bf::intern::atomic for this library, allowing it to be referenced more conveniently in other parts of the project. Interface libraries are used to propagate usage requirements.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/atomic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf_intern_atomic INTERFACE)\n\ntarget_include_directories(bf_intern_atomic INTERFACE .)\nadd_library(bf::intern::atomic ALIAS bf_intern_atomic)\n```\n\n----------------------------------------\n\nTITLE: MSVC Clang Specific Warning Handling\nDESCRIPTION: This snippet is used when the compiler is MSVC Clang (clang-cl). It removes the /W3 flag, then adds it back to ensure the custom warning flags are properly applied, as flag order matters to clang. It disables a large number of warnings using `-Wno-*` to reduce the build log size. The comments include the number of unique warnings that were generated on a specific date.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_119\n\nLANGUAGE: CMake\nCODE:\n```\n  if(MSVC_CLANG)\n    # clang-cl produces an unhealthy ammount of warnings in its default\n    # configuration as it for reasons unknown decided to enable all\n    # warnings known to mankind. Resulting in a 5.5GB build log containing\n    # well over 11 million warnings. The code below disables every single\n    # one of them indiscriminately. Someone with time on their hands,\n    # could/should go over these and either fix them or describe why we\n    # would want to disable the warning. The list below contains both C\n    # and C++ warnings for all warnings since clang has seemingly no\n    # easy way to tell if something is a C or C++ specific warning and\n    # manually auditing every single one of them just isn't in the cards\n    # right now.\n\n    # /W3 is being removed, then added back again, this is because order\n    # matters for clang and these flags are being placed before the\n    # CMAKE_[LANGUAGE]_FLAGS which normally contain /W3, so we would\n    # disable certain warings here only for them to be re-enabled by /W3\n    # later on.\n    remove_cc_flag(\"/W3\")\n\n    add_check_c_compiler_flags(\n      C_WARNINGS\n      C_WARN_CLANG_CL_W3 /W3\n      # The number behind each warn is the number of unique warning were\n      # generated on 2024-04-24 (d2be9cecc28a03ff1f799e8c63f1f9f8eda7cce3)\n      # especially the ones in the single and low double digits are likely\n      # genuine problems that can be investigated.\n      C_WARN_CLANG_CL_C++98_COMPAT -Wno-c++98-compat # 352692\n      C_WARN_CLANG_CL_OLD_STYLE_CAST -Wno-old-style-cast # 178608\n      C_WARN_CLANG_CL_UNSAFE_BUFFER_USAGE -Wno-unsafe-buffer-usage # 89032\n      C_WARN_CLANG_CL_MISSING_PROTOTYPES -Wno-missing-prototypes # 25587\n      C_WARN_CLANG_CL_SIGN_CONVERSION -Wno-sign-conversion # 20109\n      C_WARN_CLANG_CL_MISSING_FIELD_INITIALIZERS -Wno-missing-field-initializers # 20060\n      C_WARN_CLANG_CL_EXTRA_SEMI -Wno-extra-semi # 12513\n      C_WARN_CLANG_CL_LANGUAGE_EXTENSION_TOKEN -Wno-language-extension-token # 11032\n      C_WARN_CLANG_CL_IMPLICIT_FLOAT_CONVERSION -Wno-implicit-float-conversion # 11003\n      C_WARN_CLANG_CL_C++98_COMPAT_PEDANTIC -Wno-c++98-compat-pedantic # 10336\n      C_WARN_CLANG_CL_IMPLICIT_INT_FLOAT_CONVERSION -Wno-implicit-int-float-conversion # 7354\n      C_WARN_CLANG_CL_DOUBLE_PROMOTION -Wno-double-promotion # 7350\n      C_WARN_CLANG_CL_PRE_C++17_COMPAT -Wno-pre-c++17-compat # 7303\n      C_WARN_CLANG_CL_SHORTEN_64_TO_32 -Wno-shorten-64-to-32 # 7085\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Quadriflow Inclusion with CMake\nDESCRIPTION: Conditionally includes the `quadriflow` library if `WITH_QUADRIFLOW` is enabled.  It sets the `QUADRIFLOW_CMAKE_CFG` variable to point to a custom CMake configuration file for quadriflow before adding the subdirectory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_QUADRIFLOW)\n  set(QUADRIFLOW_CMAKE_CFG ${CMAKE_CURRENT_SOURCE_DIR}/quadriflow/blender_config.cmake)\n  add_subdirectory(quadriflow)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories required for compiling the BlendThumb library and thumbnailer applications. It includes local directories like blenlib and makesdna, as well as system directories and ZLIB include directories, to ensure that the necessary header files are available during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blendthumb/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n  ../blenlib\n  ../makesdna\n  ../../../intern/guardedalloc\n)\n\ninclude_directories(\n  SYSTEM\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries\nDESCRIPTION: This snippet specifies the libraries that the Cycles Kernel OSL library depends on. These libraries are linked during the compilation process, providing necessary functions and resources. The `set` command creates a list of libraries, including both internal and external dependencies such as OSL, OpenImageIO, and PugiXML.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  cycles_scene\n\n  ${OSL_LIBRARIES}\n  ${OPENIMAGEIO_LIBRARIES}\n  ${PUGIXML_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Building blenderplayer as a Python Module - CMake\nDESCRIPTION: This snippet conditionally builds the blenderplayer as a Python module (`bpy.so`). It sets the `MODULE` type, output name (`bpy`), and output directories. It also includes platform-specific settings for macOS (bundle) and Windows (suffix).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\n\n  # creates ./bin/bpy.so which can be imported as a python module.\n  #\n  # note that 'SHARED' works on Linux and Windows,\n  # but not OSX which _must_ be 'MODULE'\n  add_library(blenderplayer MODULE ${SRC})\n  set_target_properties(\n    blenderplayer\n    PROPERTIES\n      PREFIX \"\"\n      OUTPUT_NAME bpy\n      LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin\n      RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin  # only needed on windows\n  )\n\n  if(APPLE)\n    set_target_properties(blenderplayer PROPERTIES MACOSX_BUNDLE TRUE)\n   endif()\n\n  if(WIN32)\n    # python modules use this\n    set_target_properties(\n      blenderplayer\n      PROPERTIES\n      SUFFIX \".pyd\"\n    )\n  endif()\n\nelse()\n  add_executable(blenderplayer ${EXETYPE} ${SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Depth Comparison Function with glDepthFunc (bgl)\nDESCRIPTION: Specifies the function used for depth buffer comparisons. The 'func' parameter determines the depth comparison function. This affects how fragments are tested for visibility based on their depth.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glDepthFunc(func)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Include - CMake\nDESCRIPTION: This snippet conditionally adds the Python include directory and a preprocessor definition if Python support is enabled. This allows the script editor module to interact with Python scripts.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_script/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC\n    ../../python\n  )\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending SYCL targets and their options to compiler flags\nDESCRIPTION: This snippet iterates through the SYCL targets and appends them to the compiler flags, along with any target-specific options defined. It ensures that each target is compiled with correct customization.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nlist(JOIN CYCLES_ONEAPI_SYCL_TARGETS \",\" targets_string)\n  list(APPEND sycl_compiler_flags -fsycl-targets=${targets_string})\n  foreach(target ${CYCLES_ONEAPI_SYCL_TARGETS})\n    if(DEFINED CYCLES_ONEAPI_SYCL_OPTIONS_${target})\n      list(APPEND sycl_compiler_flags\n        \"-Xsycl-target-backend=${target} \\\"${CYCLES_ONEAPI_SYCL_OPTIONS_${target}}\\\"\"\n      )\n    endif()\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths\nDESCRIPTION: This snippet defines the include directories needed to compile the object editor library. It specifies paths to various Blender modules, including the RNA system, IK plugin, and shader effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../ikplugin\n  ../../makesrna\n  ../../modifiers\n  ../../nodes\n  ../../python\n  ../../shader_fx\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Private Libraries for bf_rna (CMake)\nDESCRIPTION: This CMake code sets the private libraries required by the `bf_rna` library. It specifies a list of libraries like `bf::animrig`, `bf::dna`, `bf::dependencies::optional::tbb`, `extern_fmtlib`, and several `bf_editor_*` libraries. These libraries are linked privately to `bf_rna`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::dna\n  PRIVATE bf::dependencies::optional::tbb\n  PRIVATE extern_fmtlib\n  bf_editor_space_api\n\n  bf_editor_animation\n  bf_editor_armature\n  bf_editor_asset\n  bf_editor_curve\n  bf_editor_curves\n  bf_editor_gizmo_library\n  bf_editor_gpencil_legacy\n  bf_editor_io\n  bf_editor_mesh\n  bf_editor_object\n  bf_editor_physics\n  bf_editor_pointcloud\n  bf_editor_render\n  bf_editor_scene\n  bf_editor_sculpt_paint\n  bf_editor_sound\n  bf_editor_transform\n  bf_editor_undo\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation of Shaders to C++\nDESCRIPTION: This snippet conditionally compiles GLSL shaders into C++ code based on the `WITH_GPU_SHADER_CPP_COMPILATION` CMake option.  If the option is enabled, the `compile_sources_as_cpp` function is called for vertex and fragment shaders, generating C++ source files that embed the shader code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/shaders/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n\n  compile_sources_as_cpp(gpu_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(gpu_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(gpu_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This CMake command sets the library dependencies for the rigid body physics library.  It uses the variable `${BULLET_LIBRARIES}` to specify the Bullet Physics libraries that the module depends on.  These libraries provide the underlying physics engine implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/rigidbody/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${BULLET_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Eevee Next Render Tests\nDESCRIPTION: This snippet configures Eevee Next render tests for different GPU backends (OpenGL, Metal, Vulkan). It iterates through the gpu_render_tests list and calls add_render_test for each test, specifying the test directory, output directory, and GPU backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\n if(WITH_GPU_RENDER_TESTS)\n    list(APPEND gpu_render_tests ${render_tests})\n    list(FILTER gpu_render_tests EXCLUDE REGEX light_group|shadow_catcher|denoise|guiding|reports)\n\n    set(_gpu_render_tests_arguments)\n\n    # Eevee Next\n    if(WITH_OPENGL_BACKEND)\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          eevee_next_opengl_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/eevee_next_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/eevee_next_opengl\"\n          --gpu-backend opengl\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\n\n    if(WITH_METAL_BACKEND)\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          eevee_next_metal_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/eevee_next_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/eevee_next_metal\"\n          --gpu-backend metal\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\n\n    if(WITH_VULKAN_BACKEND AND WITH_GPU_RENDER_TESTS_VULKAN)\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          eevee_next_vulkan_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/eevee_next_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/eevee_next_vulkan\"\n          --gpu-backend vulkan\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Fragment Shader Sources - CMake\nDESCRIPTION: Defines a list of GLSL fragment shader source files used for overlay effects. These shaders are responsible for determining the color of each pixel and are compiled as part of the rendering pipeline.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  overlay_antialiasing_frag.glsl\n  overlay_armature_dof_solid_frag.glsl\n  overlay_armature_envelope_solid_frag.glsl\n  overlay_armature_shape_solid_frag.glsl\n  overlay_armature_shape_wire_frag.glsl\n  overlay_armature_sphere_solid_frag.glsl\n  overlay_armature_stick_frag.glsl\n  overlay_armature_wire_frag.glsl\n  overlay_background_frag.glsl\n  overlay_depth_only_frag.glsl\n  overlay_depth_only_gpencil_frag.glsl\n  overlay_edit_mesh_analysis_frag.glsl\n  overlay_edit_mesh_frag.glsl\n  overlay_edit_uv_edges_frag.glsl\n  overlay_edit_uv_image_mask_frag.glsl\n  overlay_edit_uv_verts_frag.glsl\n  overlay_extra_frag.glsl\n  overlay_extra_loose_point_frag.glsl\n  overlay_extra_wire_frag.glsl\n  overlay_facing_frag.glsl\n  overlay_grid_background_frag.glsl\n  overlay_grid_frag.glsl\n  overlay_image_frag.glsl\n  overlay_motion_path_line_frag.glsl\n  overlay_outline_detect_frag.glsl\n  overlay_outline_prepass_frag.glsl\n  overlay_outline_prepass_gpencil_frag.glsl\n  overlay_paint_texture_frag.glsl\n  overlay_paint_weight_frag.glsl\n  overlay_particle_frag.glsl\n  overlay_particle_shape_frag.glsl\n  overlay_point_varying_color_frag.glsl\n  overlay_point_varying_color_varying_outline_aa_frag.glsl\n  overlay_sculpt_curves_selection_frag.glsl\n  overlay_sculpt_mask_frag.glsl\n  overlay_uniform_color_frag.glsl\n  # TODO(fclem): rename to overlay_varying_color_frag.glsl\n  overlay_varying_color.glsl\n  overlay_viewer_attribute_frag.glsl\n  overlay_wireframe_frag.glsl\n  overlay_xray_fade_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Build Information Header - CMake\nDESCRIPTION: Configures the generation of a build information header file (buildinfo_static.h) containing build-related details such as platform, build type, and compiler flags. This information is embedded into the executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BUILDINFO)\n  # --------------------------------------------------------------------------\n  # These defines could all be moved into the header below\n\n  # Write strings into a separate header since we can escape C-strings\n  # in a way that's not practical when passing defines.\n  set(BUILD_PLATFORM \"${CMAKE_SYSTEM_NAME}\")\n  set(BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n  set(BUILD_CFLAGS \"${CMAKE_C_FLAGS}\")\n  set(BUILD_CXXFLAGS \"${CMAKE_CXX_FLAGS}\")\n  set(BUILD_LINKFLAGS \"${PLATFORM_LINKFLAGS}\")\n  set(BUILD_SYSTEM \"CMake\")\n\n  if(WITH_COMPILER_SHORT_FILE_MACRO)\n    # It's not necessary to include path information\n    # about the system building Blender in the executable.\n    string(REPLACE \"${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\" \" \" BUILD_CFLAGS \"${BUILD_CFLAGS}\")\n    string(REPLACE \"${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\" \" \" BUILD_CXXFLAGS \"${BUILD_CXXFLAGS}\")\n  endif()\n\n  # Use `configure_file` instead of definitions since properly\n  # escaping the multiple command line arguments which themselves\n  # contain strings and spaces becomes overly error-prone & complicated.\n  configure_file(\n    \"${CMAKE_SOURCE_DIR}/build_files/cmake/buildinfo_static.h.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo_static.h\"\n    ESCAPE_QUOTES\n    @ONLY\n  )\n\n  unset(BUILD_PLATFORM)\n  unset(BUILD_TYPE)\n  unset(BUILD_CFLAGS)\n  unset(BUILD_CXXFLAGS)\n  unset(BUILD_LINKFLAGS)\n  unset(BUILD_SYSTEM)\n\n  # --------------------------------------------------------------------------\n  # Write header for values that change each build\n  #\n  # NOTE: generated file is in build directory `source/creator`\n  # except when used as an include path.\n\n  add_definitions(-DWITH_BUILDINFO_HEADER)\n\n  # Include the output directory, where the `buildinfo.h` file is generated.\n  include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n\n  # XXX: `${buildinfo_h_fake}` is used here,\n  # because we rely on that file being detected as missing\n  # every build so that the real header `buildinfo.h` is updated.\n  #\n  # Keep this until we find a better way to resolve!\n\n  set(buildinfo_h_real \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo.h\")\n  set(buildinfo_h_fake \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo.h_fake\")\n\n  if(EXISTS ${buildinfo_h_fake})\n    message(\n      FATAL_ERROR\n      \"File \\\"${buildinfo_h_fake}\\\" found, this should never be created, remove!\"\n    )\n  endif()\n\n  # From the CMAKE documentation \"If the output of the custom command is not actually created as a\n  # file on disk it should be marked with the SYMBOLIC source file property.\"\n  #\n  # Not doing this leads to build warnings for the not generated file on\n  # MS-Windows when using `msbuild`.\n  set_source_files_properties(${buildinfo_h_fake} PROPERTIES SYMBOLIC TRUE)\n\n  # a custom target that is always built\n  add_custom_target(\n    buildinfo ALL\n    DEPENDS ${buildinfo_h_fake}\n  )\n\n  # Creates `buildinfo.h` using CMAKE script.\n  add_custom_command(\n    OUTPUT\n      ${buildinfo_h_fake}  # ensure we always run\n      ${buildinfo_h_real}\n    COMMAND\n      ${CMAKE_COMMAND}\n      -DSOURCE_DIR=${CMAKE_SOURCE_DIR}\n      # Overrides only used when non-empty strings.\n      -DBUILD_DATE=${BUILDINFO_OVERRIDE_DATE}\n      -DBUILD_TIME=${BUILDINFO_OVERRIDE_TIME}\n      -P ${CMAKE_SOURCE_DIR}/build_files/cmake/buildinfo.cmake\n  )\n\n  # `buildinfo.h` is a generated file.\n  set_source_files_properties(\n    ${buildinfo_h_real}\n    PROPERTIES GENERATED TRUE\n    HEADER_FILE_ONLY TRUE)\n\n  unset(buildinfo_h_real)\n  unset(buildinfo_h_fake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (CMake)\nDESCRIPTION: This code sets the libraries to link against, including CUDA, HIP, Metal, OneAPI, OpenImageDenoise, and OSL, conditionally based on build options. It appends to LIB variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/device/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_kernel\n  cycles_util\n)\n\nif(WITH_CYCLES_DEVICE_OPTIX OR WITH_CYCLES_DEVICE_CUDA)\n  if(WITH_CUDA_DYNLOAD)\n    list(APPEND LIB\n      extern_cuew\n    )\n  else()\n    list(APPEND LIB\n      ${CUDA_CUDA_LIBRARY}\n    )\n  endif()\nendif()\n\nif(WITH_CYCLES_DEVICE_HIP AND WITH_HIP_DYNLOAD)\n  list(APPEND LIB\n    extern_hipew\n  )\nendif()\n\nif(WITH_CYCLES_DEVICE_METAL)\n  list(APPEND LIB\n    ${METAL_LIBRARY}\n  )\n  list(APPEND SRC\n    ${SRC_METAL}\n  )\nendif()\n\nif(WITH_CYCLES_DEVICE_ONEAPI)\n  if(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n    add_definitions(-DWITH_ONEAPI_SYCL_HOST_TASK)\n  endif()\n  if(WITH_CYCLES_ONEAPI_BINARIES)\n    set(cycles_kernel_oneapi_lib_suffix \"_aot\")\n  else()\n    set(cycles_kernel_oneapi_lib_suffix \"_jit\")\n  endif()\n  if(WIN32)\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/../kernel/cycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.lib)\n  else()\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/../kernel/libcycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.so)\n  endif()\n  list(APPEND LIB\n    ${cycles_kernel_oneapi_lib}\n    ${SYCL_LIBRARIES}\n  )\n  list(APPEND SRC\n    ${SRC_ONEAPI}\n  )\n  list(APPEND INC_SYS\n    ${SYCL_INCLUDE_DIR}\n  )\nendif()\n\nif(WITH_OPENIMAGEDENOISE)\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n  )\nendif()\n\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB\n    ${OSL_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: HIP Math Flag Function\nDESCRIPTION: This function sets HIP math flags based on the architecture and operating system. It configures specific flags for Windows platforms and certain GPU architectures (gfx1030-gfx1036) to improve floating-point accuracy and disable approximations. The result is stored in the `math_flag` variable in the parent scope.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(get_hip_math_flag arch math_flag)\n  if(WIN32 AND (${arch} MATCHES \"gfx1030|gfx1031|gfx1032|gfx1033|gfx1034|gfx1035|gfx1036\"))\n    set(result\n      -fhip-fp32-correctly-rounded-divide-sqrt\n      -fno-gpu-approx-transcendentals\n      -fgpu-flush-denormals-to-zero\n      -ffp-contract=off)\n  else()\n    set(result \"\")\n  endif()\n  set(${math_flag} \"${result}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definition - CMake\nDESCRIPTION: Adds a preprocessor definition 'ENABLE_BINRELOC' to the compilation flags. This enables binary relocation functionality during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/binreloc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DENABLE_BINRELOC)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files CMake\nDESCRIPTION: This snippet defines the source files that constitute the Vulkan Memory Allocator library. It specifies both the C++ implementation file (`vk_mem_alloc_impl.cc`) and the header file (`vk_mem_alloc.h`). These files are compiled and linked to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  vk_mem_alloc_impl.cc\n\n  vk_mem_alloc.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Inclusion (IO_PLY) - CMake\nDESCRIPTION: This snippet conditionally appends libraries related to PLY I/O to the list of libraries and adds the compiler definition `WITH_IO_PLY` if `WITH_IO_PLY` is true, enabling PLY I/O support during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_PLY)\n  list(APPEND LIB\n    PRIVATE bf_io_common\n    PRIVATE bf_io_ply\n  )\n  add_definitions(-DWITH_IO_PLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Library\nDESCRIPTION: This snippet uses the `cycles_add_library` function to create the `cycles_bvh` library, linking it with the specified library dependencies, source files, and header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_add_library(cycles_bvh \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Fluid Simulation and OpenVDB\nDESCRIPTION: This snippet adds preprocessor definitions to control the compilation of code related to fluid simulation and OpenVDB support. It conditionally defines `OPENVDB` based on the `WITH_OPENVDB` CMake option.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DWITH_FLUID=1)\n\nif(WITH_OPENVDB)\n  add_definitions(-DOPENVDB=1)\nelse()\n  add_definitions(-DOPENVDB=0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Library - CMake\nDESCRIPTION: Adds the Cycles library using the blender_add_lib function, which is a custom CMake function for building Blender libraries.  It specifies the name of the library, the source files, include directories, system include directories, and libraries to link against.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_cycles \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Shape Key Data in BMesh (Python)\nDESCRIPTION: This code snippet shows how to access shape key data for each vertex in a BMesh. It retrieves the shape key layer by name and then iterates through each vertex, accessing the shape key coordinates and printing their values.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/include__bmesh.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nshape_lay = bm.verts.layers.shape[\"Key.001\"]\n\nfor vert in bm.verts:\n    shape = vert[shape_lay]\n    print(\"Vert Shape: %f, %f, %f\" % (shape.x, shape.y, shape.z))\n```\n\n----------------------------------------\n\nTITLE: IK Solver Options\nDESCRIPTION: This snippet defines options for enabling or disabling the ITASC and Legacy IK solvers. These options allow developers to choose which Inverse Kinematics solvers to include in the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_IK_ITASC \"\\\nEnable ITASC IK solver (only disable for development & for incompatible C++ compilers)\" \n  ON\n)\noption(WITH_IK_SOLVER \"\\\nEnable Legacy IK solver (only disable for development)\" \n  ON\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet defines the list of source files that constitute the node editor space module. These `.cc` files contain the implementation of the node editor's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  add_menu_assets.cc\n  clipboard.cc\n  drawnode.cc\n  link_drag_search.cc\n  node_add.cc\n  node_context_path.cc\n  node_draw.cc\n  node_edit.cc\n  node_geometry_attribute_search.cc\n  node_geometry_layer_search.cc\n  node_gizmo.cc\n  node_group.cc\n  node_ops.cc\n  node_relationships.cc\n  node_select.cc\n  node_shader_preview.cc\n  node_templates.cc\n  node_view.cc\n  space_node.cc\n\n  node_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Access Weight Paint Brush Size in Blender (bpy.context)\nDESCRIPTION: This snippet demonstrates how to access the current weight paint brush size using nested properties in Blender. It assumes Blender is in Weight Paint mode and a brush is active. It uses bpy.context.tool_settings.weight_paint.brush.size to retrieve the size.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.tool_settings.weight_paint.brush.size\n```\n\n----------------------------------------\n\nTITLE: Defining SVM (Shader Value Math) Header Files - CMake\nDESCRIPTION: This CMake code defines the header files for SVM (Shader Value Math) nodes in the Cycles kernel. These nodes are used for shader graph calculations and include a wide range of functionalities from AO to voronoi.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_SVM_HEADERS\n  svm/svm.h\n  svm/ao.h\n  svm/aov.h\n  svm/attribute.h\n  svm/bevel.h\n  svm/blackbody.h\n  svm/bump.h\n  svm/camera.h\n  svm/clamp.h\n  svm/closure.h\n  svm/convert.h\n  svm/checker.h\n  svm/color_util.h\n  svm/brick.h\n  svm/displace.h\n  svm/fresnel.h\n  svm/wireframe.h\n  svm/wavelength.h\n  svm/gabor.h\n  svm/gamma.h\n  svm/brightness.h\n  svm/geometry.h\n  svm/gradient.h\n  svm/hsv.h\n  svm/ies.h\n  svm/image.h\n  svm/invert.h\n  svm/light_path.h\n  svm/magic.h\n  svm/map_range.h\n  svm/mapping.h\n  svm/mapping_util.h\n  svm/math.h\n  svm/math_util.h\n  svm/mix.h\n  svm/node_types_template.h\n  svm/noise.h\n  svm/noisetex.h\n  svm/normal.h\n  svm/ramp.h\n  svm/ramp_util.h\n  svm/sepcomb_color.h\n  svm/sepcomb_hsv.h\n  svm/sepcomb_vector.h\n  svm/sky.h\n  svm/tex_coord.h\n  svm/fractal_noise.h\n  svm/types.h\n  svm/util.h\n  svm/value.h\n  svm/vector_rotate.h\n  svm/vector_transform.h\n  svm/voronoi.h\n  svm/voxel.h\n  svm/wave.h\n  svm/white_noise.h\n  svm/vertex_color.h\n)\n```\n\n----------------------------------------\n\nTITLE: Legacy macOS Linker Option\nDESCRIPTION: This CMake snippet configures an option to use the legacy macOS linker. It sets the `WITH_LEGACY_MACOS_X64_LINKER` option and marks it as advanced. This option is applicable only to x64 platforms and might result in slightly slower linking times, but can emit fewer warnings.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_79\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  option(WITH_LEGACY_MACOS_X64_LINKER \"Use legacy macOS linker. Only on x64 platform. Minutes slower, but emits fewer warnings.\" OFF)\n  mark_as_advanced(WITH_LEGACY_MACOS_X64_LINKER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet specifies the list of source files (.cpp and .h) that comprise the ge_converter library. These files contain the actual code that will be compiled into the library.  The headers are included to expose the library API.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  BL_ArmatureActuator.cpp\n  BL_ArmatureChannel.cpp\n  BL_ArmatureConstraint.cpp\n  BL_ArmatureObject.cpp\n  BL_Converter.cpp\n  BL_ConvertActuators.cpp\n  BL_ConvertControllers.cpp\n  BL_ConvertProperties.cpp\n  BL_ConvertSensors.cpp\n  BL_DataConversion.cpp\n  BL_ScalarInterpolator.cpp\n  BL_SceneConverter.cpp\n  #BL_IpoConvert.cpp (everything inside BL_IpoConvert.h)\n\n  BL_ArmatureActuator.h\n  BL_ArmatureChannel.h\n  BL_ArmatureConstraint.h\n  BL_ArmatureObject.h\n  BL_Converter.h\n  BL_ConvertActuators.h\n  BL_ConvertControllers.h\n  BL_ConvertProperties.h\n  BL_ConvertSensors.h\n  BL_DataConversion.h\n  BL_IpoConvert.h\n  BL_ScalarInterpolator.h\n  BL_SceneConverter.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Metal Source Files (CMake)\nDESCRIPTION: This snippet defines the source files specifically for the Metal backend, primarily written in Objective-C++. It includes implementations for Metal-specific features such as backend initialization, batch processing, command buffer management, context creation, debugging, framebuffers, immediate mode rendering, index buffers, memory management, queries, shaders, shader generation, shader interfaces, state management, storage buffers, textures, uniform buffers, and vertex buffers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(METAL_SRC\n  metal/mtl_backend.mm\n  metal/mtl_batch.mm\n  metal/mtl_command_buffer.mm\n  metal/mtl_context.mm\n  metal/mtl_debug.mm\n  metal/mtl_framebuffer.mm\n  metal/mtl_immediate.mm\n  metal/mtl_index_buffer.mm\n  metal/mtl_memory.mm\n  metal/mtl_query.mm\n  metal/mtl_shader.mm\n  metal/mtl_shader_generator.mm\n  metal/mtl_shader_interface.mm\n  metal/mtl_shader_log.mm\n  metal/mtl_state.mm\n  metal/mtl_storage_buffer.mm\n  metal/mtl_texture.mm\n  metal/mtl_texture_util.mm\n  metal/mtl_uniform_buffer.mm\n  metal/mtl_vertex_buffer.mm\n\n  metal/mtl_backend.hh\n  metal/mtl_batch.hh\n  metal/mtl_capabilities.hh\n  metal/mtl_common.hh\n  metal/mtl_context.hh\n  metal/mtl_debug.hh\n  metal/mtl_framebuffer.hh\n  metal/mtl_immediate.hh\n  metal/mtl_index_buffer.hh\n  metal/mtl_memory.hh\n  metal/mtl_primitive.hh\n  metal/mtl_pso_descriptor_state.hh\n  metal/mtl_query.hh\n  metal/mtl_shader.hh\n```\n\n----------------------------------------\n\nTITLE: Generating DNA Header Files\nDESCRIPTION: This snippet generates header files containing DNA definitions by iterating through a list of source DNA include files. The generated files are used during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(dna_header_include_file \"${CMAKE_CURRENT_BINARY_DIR}/dna_includes_all.h\")\nset(dna_header_string_file \"${CMAKE_CURRENT_BINARY_DIR}/dna_includes_as_strings.h\")\n\nset(DNA_INCLUDE_TEXT \"/* Do not edit manually, changes will be overwritten. */\\n\")\nset(DNA_FILE_LIST \"/* Do not edit manually, changes will be overwritten. */\\n\")\nforeach(header ${SRC_DNA_INC})\n  get_filename_component(dna_header_file ${header} NAME)\n  string(APPEND DNA_INCLUDE_TEXT \"#include \\\"${header}\\\"\\n\")\n  string(APPEND DNA_FILE_LIST \"\\t\\\"${dna_header_file}\\\",\\n\")\nendforeach()\n\nfile(GENERATE OUTPUT ${dna_header_include_file} CONTENT \"${DNA_INCLUDE_TEXT}\")\nfile(GENERATE OUTPUT ${dna_header_string_file} CONTENT \"${DNA_FILE_LIST}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Library Target (CMake)\nDESCRIPTION: Adds the Blender Python library target. It uses the defined source files, include directories, and libraries.  It specifies the dependencies for the target `bf_python`\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/intern/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_python \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n# RNA_prototypes.hh\nadd_dependencies(bf_python bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Enable Cycles oneAPI support\nDESCRIPTION: These options configure oneAPI support in Cycles on non-Apple platforms (excluding Windows ARM64). They enable/disable oneAPI device support, ahead-of-time (AOT) compilation, and host task execution (for debugging). They also set the target Intel GPU architectures and SYCL targets for AOT compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT APPLE AND NOT (WIN32 AND CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\"))\n  option(WITH_CYCLES_DEVICE_ONEAPI \"Enable Cycles oneAPI compute support\" OFF)\n  option(WITH_CYCLES_ONEAPI_BINARIES \"\\\nEnable Ahead-Of-Time compilation for Cycles oneAPI device\"\n    OFF\n  )\n  option(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION \"\\\nSwitch target of oneAPI implementation from SYCL devices to Host Task (single thread on CPU). \\\nThis option is only for debugging purposes.\"\n    OFF\n  )\n\n  # https://www.intel.com/content/www/us/en/develop/documentation/oneapi-dpcpp-cpp-compiler-dev-guide-and-reference/top/compilation/ahead-of-time-compilation.html\n  # The supported devices can be retrieved from `ocloc` output when running\n  # `ocloc compile --help`.\n  set(CYCLES_ONEAPI_INTEL_BINARIES_ARCH dg2 mtl lnl bmg CACHE STRING \"\\\noneAPI Intel GPU architectures to build binaries for\"\n  )\n  set(CYCLES_ONEAPI_SYCL_TARGETS spir64 spir64_gen CACHE STRING \"\\\noneAPI targets to build AOT binaries for\"\n  )\n\n  mark_as_advanced(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n  mark_as_advanced(CYCLES_ONEAPI_INTEL_BINARIES_ARCH)\n  mark_as_advanced(CYCLES_ONEAPI_SYCL_TARGETS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding SIMD Definitions and Flags - CMake\nDESCRIPTION: This snippet adds preprocessor definitions (WITH_KERNEL_SSE42, WITH_KERNEL_AVX2) based on SIMD support and appends the generated SIMD flags to the CMAKE_CXX_FLAGS variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(CXX_HAS_SSE42)\n  add_definitions(\n    -DWITH_KERNEL_SSE42\n  )\n  # We require SSE4.2 as a minimum, so make use of it\n  string(APPEND CMAKE_CXX_FLAGS \" ${CYCLES_SSE42_FLAGS}\")\nendif()\n\nif(CXX_HAS_AVX2)\n  add_definitions(-DWITH_KERNEL_AVX2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Suite\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_test_suite_lib` to create a test suite named `io_stl`.  It passes the test source files, include directories, system include directories, and libraries to link against.  The test suite will be built and run if WITH_GTESTS is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_test_suite_lib(io_stl \"${TEST_SRC}\" \"${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Math Optimizations - CMake\nDESCRIPTION: This section configures compiler flags to enable math optimizations. It distinguishes between MSVC and GCC/Clang compilers, applying different sets of flags based on the compiler's capabilities and platform-specific considerations. Flags are added to CMAKE_CXX_FLAGS.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  # Unlike GCC/clang we still use fast math, because there is no fine\n  # grained control and the speedup we get here is too big to ignore.\n  string(APPEND CMAKE_CXX_FLAGS \" /fp:fast -D_CRT_SECURE_NO_WARNINGS /GS-\")\n  string(APPEND CMAKE_CXX_FLAGS_RELEASE \" /Ox\")\n  string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" /Ox\")\n  string(APPEND CMAKE_CXX_FLAGS_MINSIZEREL \" /Ox\")\n\n  # `jumptablerdata` improves performance when there is contention in large switch statements\n  # such as in `svm.h`.\n  # This flag is supported starting with MSVC 17.7 preview 3:\n  # https://learn.microsoft.com/en-us/cpp/build/reference/jump-table-rdata\n  if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.37.32820)\n    string(APPEND CMAKE_CXX_FLAGS \" /jumptablerdata\")\n  endif()\nelif(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  # Assume no signal trapping for better code generation.\n  list(APPEND CYCLES_MATH_FLAGS \"-fno-trapping-math\")\n  # Avoid overhead of setting `errno` for NaNs.\n  list(APPEND CYCLES_MATH_FLAGS \"-fno-math-errno\")\n  # Let compiler optimize 0.0 - x without worrying about signed zeros.\n  list(APPEND CYCLES_MATH_FLAGS \"-fno-signed-zeros\")\n  # Let the compiler generate fused multiply-add instructions\n  list(APPEND CYCLES_MATH_FLAGS \"-ffp-contract=fast\")\n  # Let the compiler replace x/y with x*(1/y)\n  list(APPEND CYCLES_MATH_FLAGS \"-freciprocal-math\")\n  # Let the compiler reorder terms to save operations\n  # NOTE: Disabled for now due to problems with bsdf_D for GGX on Linux (#130389)\n  # list(APPEND CYCLES_MATH_FLAGS \"-fassociative-math\")\n  # Don't enable `-ffinite-math-only` since the BVH code relies on NaNs.\n  # Otherwise, we could just use `-ffast-math`.\n\n  if(CMAKE_COMPILER_IS_GNUCC)\n    # Assume no signal trapping for better code generation.\n    list(APPEND CYCLES_MATH_FLAGS \"-fno-signaling-nans\")\n    # Assume a fixed rounding mode for better constant folding.\n    list(APPEND CYCLES_MATH_FLAGS \"-fno-rounding-math\")\n\n    if(CXX_HAS_SSE42)\n      list(APPEND CYCLES_MATH_FLAGS \"-mfpmath=sse\")\n    endif()\n  endif()\n\n  if(WIN32 AND MSVC)\n    # Pass clang flags directly to clang otherwise. Clang-cl doesn't recognize\n    # these flags by default\n    list(TRANSFORM CYCLES_MATH_FLAGS PREPEND \"/clang:\")\n  endif()\n\n  list(JOIN CYCLES_MATH_FLAGS \" \" CYCLES_MATH_FLAGS)\n  string(APPEND CMAKE_CXX_FLAGS \" ${CYCLES_MATH_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories with CMake\nDESCRIPTION: This snippet defines include directories for the point cloud editor library. It specifies both local project includes and generated header files using `set` command to create a list of include paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/pointcloud/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions based on Internationalization (CMake)\nDESCRIPTION: This snippet conditionally adds a preprocessor definition based on the 'WITH_INTERNATIONAL' flag. If enabled, '-DWITH_INTERNATIONAL' is added, which allows the C++ code to use internationalization features via conditional compilation. This influences which parts of the code are included during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Grease Pencil Editor Library\nDESCRIPTION: Adds the Grease Pencil editor library to the build process, specifying the source files, include directories, and library dependencies. It uses the `blender_add_lib` macro, which is specific to the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/grease_pencil/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_grease_pencil \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting and Warning Incompatible Options - CMake\nDESCRIPTION: This snippet uses a `set_and_warn_incompatible` macro (not defined in the extract, but assumed to exist) to manage mutually exclusive build options. It takes two options as input and disables the second option if the first is enabled, along with a warning message. This helps prevent incompatible configurations from being used.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_85\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT (APPLE OR HAIKU))\n  set_and_warn_incompatible(WITH_HEADLESS WITH_GHOST_WAYLAND OFF)\n  set_and_warn_incompatible(WITH_HEADLESS WITH_GHOST_X11 OFF)\nendif()\nset_and_warn_incompatible(WITH_HEADLESS WITH_GHOST_SDL OFF)\n\nif(WITH_INPUT_IME)\n  set_and_warn_incompatible(WITH_HEADLESS WITH_INPUT_IME OFF)\n  set_and_warn_incompatible(WITH_GHOST_SDL WITH_INPUT_IME OFF)\nendif()\n\nset_and_warn_incompatible(WITH_HEADLESS WITH_XR_OPENXR OFF)\nset_and_warn_incompatible(WITH_GHOST_SDL WITH_XR_OPENXR OFF)\n```\n\n----------------------------------------\n\nTITLE: Playing a Sound with aud.Device\nDESCRIPTION: This snippet plays a sound using the aud.Device.play() method.  It takes an aud.Sound object as input and returns an aud.Handle object, which can be used to control playback. The 'device' object must be initialized beforehand.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nhandle = device.play(square)\n```\n\n----------------------------------------\n\nTITLE: Conditional compilation flags\nDESCRIPTION: Conditionally adds preprocessor definitions based on whether certain features are enabled, such as TBB, OpenEXR, Freestyle, OpenSubdiv, and GMP.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This CMake snippet defines the include directories required for compiling the Action Editor library. It includes paths to local headers within the Blender source tree, as well as generated headers like `RNA_prototypes.hh`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_action/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../modifiers\n  ../../nodes\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions (Python)\nDESCRIPTION: This snippet conditionally defines the `WITH_PYTHON` preprocessor macro if Python support is enabled. This enables Python-specific features in the object editor.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining a Library\nDESCRIPTION: This snippet defines a library named `cycles_kernel` using `cycles_add_library`. The library includes a list of source files specified by variables such as `SRC_KERNEL_DEVICE_CPU`, `SRC_KERNEL_DEVICE_CUDA`, and corresponding header files.  The `${LIB}` variable likely contains a list of previously defined libraries or object files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_add_library(cycles_kernel \"${LIB}\"\n  ${SRC_KERNEL_DEVICE_CPU}\n  ${SRC_KERNEL_DEVICE_CUDA}\n  ${SRC_KERNEL_DEVICE_HIP}\n  ${SRC_KERNEL_DEVICE_HIPRT}\n  ${SRC_KERNEL_DEVICE_OPTIX}\n  ${SRC_KERNEL_DEVICE_METAL}\n  ${SRC_KERNEL_HEADERS}\n  ${SRC_KERNEL_DEVICE_CPU_HEADERS}\n  ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n  ${SRC_KERNEL_DEVICE_CUDA_HEADERS}\n  ${SRC_KERNEL_DEVICE_HIP_HEADERS}\n  ${SRC_KERNEL_DEVICE_HIPRT_HEADERS}\n  ${SRC_KERNEL_DEVICE_OPTIX_HEADERS}\n  ${SRC_KERNEL_DEVICE_METAL_HEADERS}\n  ${SRC_KERNEL_DEVICE_ONEAPI_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Game Engine in CMake\nDESCRIPTION: This snippet conditionally includes Game Engine support based on the `WITH_GAMEENGINE` flag. If enabled, it adds the Game Engine libraries (`ge_launcher`, `ge_blender_routines`) to the library list, adds the Game Engine include directories to the include path, and defines the `WITH_GAMEENGINE` preprocessor macro, enabling Game Engine-related code in the 3D viewport editor module. The `list(APPEND ...)` command adds to an existing list of items.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  list(APPEND LIB\n    ge_launcher\n    ge_blender_routines\n  )\n\n  list(APPEND INC\n    ../../../gameengine/Launcher\n    ../../../gameengine/BlenderRoutines\n  )\n\n  add_definitions(-DWITH_GAMEENGINE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the FBX Library - CMake\nDESCRIPTION: This snippet uses the blender_add_lib function to create the bf_io_fbx library.  It takes the source files (SRC), include directories (INC), system include directories (INC_SYS), and linked libraries (LIB) as input. This macro handles the compilation and linking process to build the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/fbx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_fbx \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Linking Additional Libraries\nDESCRIPTION: This snippet conditionally links additional libraries to the `bf_gpu` target based on feature flags. It links the `rt` library on Unix systems when the OpenGL backend is enabled, and it links OpenColorIO, OpenSubdiv and RenderDoc related libraries when their respective features are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENGL_BACKEND AND UNIX)\n  target_link_libraries(bf_gpu PUBLIC rt)\nendif()\n\nif(WITH_OPENCOLORIO)\n  target_link_libraries(bf_gpu PUBLIC bf_ocio_shaders)\nendif()\n\nif(WITH_OPENSUBDIV)\n  target_link_libraries(bf_gpu PUBLIC bf_osd_shaders)\nendif()\n\nif(WITH_RENDERDOC)\n  target_link_libraries(bf_gpu PUBLIC bf_intern_renderdoc_dynload)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This code snippet adds a dependency to the bf_rna library, ensuring it is built before bf_editor_mesh. RNA (Runtime Name Access) is used for accessing Blender's data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_mesh bf_rna)\n```\n\n----------------------------------------\n\nTITLE: PulseAudio Integration with CMake\nDESCRIPTION: This CMake segment configures PulseAudio integration. It attempts to find the LibPulse package. If found, it defines source and header files, adds definitions for dynamic loading, appends include directories and libraries, and includes the plugin in the build. Conditional compilation is used based on `DYNLOAD_PULSEAUDIO`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PULSEAUDIO)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(LibPulse ${PACKAGE_OPTION})\n\tendif()\n\n\tif(LIBPULSE_FOUND)\n\t\tset(PULSEAUDIO_SRC\n\t\t\tplugins/pulseaudio/PulseAudioDevice.cpp\n\t\t\tplugins/pulseaudio/PulseAudioLibrary.cpp\n\t\t)\n\t\tset(PULSEAUDIO_HDR\n\t\t\tplugins/pulseaudio/PulseAudioDevice.h\n\t\t\tplugins/pulseaudio/PulseAudioLibrary.h\n\t\t\tplugins/pulseaudio/PulseAudioSymbols.h\n\t\t)\n\n\t\tif(DYNLOAD_PULSEAUDIO)\n\t\t\tadd_definitions(-DDYNLOAD_PULSEAUDIO)\n\t\tendif()\n\n\t\tif(NOT PLUGIN_PULSEAUDIO)\n\t\t\tlist(APPEND INCLUDE ${LIBPULSE_INCLUDE_DIR})\n\t\t\tif(NOT DYNLOAD_PULSEAUDIO)\n\t\t\t\tlist(APPEND LIBRARIES ${LIBPULSE_LIBRARY})\n\t\t\tendif()\n\t\t\tlist(APPEND SRC ${PULSEAUDIO_SRC})\n\t\t\tlist(APPEND HDR ${PULSEAUDIO_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS PulseAudioDevice)\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_PULSEAUDIO FALSE CACHE BOOL \"Build With PulseAudio\" FORCE)\n\t\telse()\n\t\t\tset(WITH_PULSEAUDIO FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"PulseAudio not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC) - CMake\nDESCRIPTION: Lists all the C++ source files that comprise the modifier library. These source files implement various modifier functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/MOD_armature.cc\n  intern/MOD_array.cc\n  intern/MOD_bevel.cc\n  intern/MOD_boolean.cc\n  intern/MOD_build.cc\n  intern/MOD_cast.cc\n  intern/MOD_cloth.cc\n  intern/MOD_collision.cc\n  intern/MOD_correctivesmooth.cc\n  intern/MOD_curve.cc\n  intern/MOD_datatransfer.cc\n  intern/MOD_decimate.cc\n  intern/MOD_displace.cc\n  intern/MOD_dynamicpaint.cc\n  intern/MOD_edgesplit.cc\n  intern/MOD_explode.cc\n  intern/MOD_fluid.cc\n  intern/MOD_grease_pencil_armature.cc\n  intern/MOD_grease_pencil_array.cc\n  intern/MOD_grease_pencil_build.cc\n  intern/MOD_grease_pencil_color.cc\n  intern/MOD_grease_pencil_dash.cc\n  intern/MOD_grease_pencil_envelope.cc\n  intern/MOD_grease_pencil_hook.cc\n  intern/MOD_grease_pencil_lattice.cc\n  intern/MOD_grease_pencil_length.cc\n  intern/MOD_grease_pencil_mirror.cc\n  intern/MOD_grease_pencil_multiply.cc\n  intern/MOD_grease_pencil_noise.cc\n  intern/MOD_grease_pencil_offset.cc\n  intern/MOD_grease_pencil_opacity.cc\n  intern/MOD_grease_pencil_outline.cc\n  intern/MOD_grease_pencil_shrinkwrap.cc\n  intern/MOD_grease_pencil_simplify.cc\n  intern/MOD_grease_pencil_smooth.cc\n  intern/MOD_grease_pencil_subdiv.cc\n  intern/MOD_grease_pencil_texture.cc\n  intern/MOD_grease_pencil_thickness.cc\n  intern/MOD_grease_pencil_time.cc\n  intern/MOD_grease_pencil_tint.cc\n  intern/MOD_grease_pencil_util.cc\n  intern/MOD_grease_pencil_weight_angle.cc\n  intern/MOD_grease_pencil_weight_proximity.cc\n  intern/MOD_hook.cc\n  intern/MOD_laplaciandeform.cc\n  intern/MOD_laplaciansmooth.cc\n  intern/MOD_lattice.cc\n  intern/MOD_lineart.cc\n  intern/MOD_mask.cc\n  intern/MOD_mesh_to_volume.cc\n  intern/MOD_meshcache.cc\n  intern/MOD_meshcache_mdd.cc\n  intern/MOD_meshcache_pc2.cc\n  intern/MOD_meshcache_util.cc\n  intern/MOD_meshdeform.cc\n  intern/MOD_meshsequencecache.cc\n  intern/MOD_mirror.cc\n  intern/MOD_multires.cc\n  intern/MOD_nodes.cc\n  intern/MOD_none.cc\n  intern/MOD_normal_edit.cc\n  intern/MOD_ocean.cc\n  intern/MOD_particleinstance.cc\n  intern/MOD_particlesystem.cc\n  intern/MOD_remesh.cc\n  intern/MOD_screw.cc\n  intern/MOD_shapekey.cc\n  intern/MOD_shrinkwrap.cc\n  intern/MOD_simpledeform.cc\n  intern/MOD_skin.cc\n  intern/MOD_smooth.cc\n  intern/MOD_softbody.cc\n  intern/MOD_solidify.cc\n  intern/MOD_solidify_extrude.cc\n  intern/MOD_solidify_nonmanifold.cc\n  intern/MOD_subsurf.cc\n  intern/MOD_surface.cc\n  intern/MOD_surfacedeform.cc\n  intern/MOD_triangulate.cc\n  intern/MOD_ui_common.cc\n  intern/MOD_util.cc\n  intern/MOD_uvproject.cc\n  intern/MOD_uvwarp.cc\n  intern/MOD_volume_displace.cc\n  intern/MOD_volume_to_mesh.cc\n  intern/MOD_warp.cc\n  intern/MOD_wave.cc\n  intern/MOD_weighted_normal.cc\n  intern/MOD_weightvg_util.cc\n  intern/MOD_weightvgedit.cc\n  intern/MOD_weightvgmix.cc\n  intern/MOD_weightvgproximity.cc\n  intern/MOD_weld.cc\n  intern/MOD_wireframe.cc\n  intern/lineart/lineart_chain.cc\n  intern/lineart/lineart_cpu.cc\n  intern/lineart/lineart_shadow.cc\n  intern/lineart/lineart_util.cc\n\n  MOD_modifiertypes.hh\n  MOD_nodes.hh\n  intern/MOD_grease_pencil_util.hh\n  intern/MOD_meshcache_util.hh\n  intern/MOD_solidify_util.hh\n  intern/MOD_ui_common.hh\n  intern/MOD_util.hh\n  intern/MOD_weightvg_util.hh\n  intern/lineart/MOD_lineart.hh\n  intern/lineart/lineart_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions (WindowManager)\nDESCRIPTION: Conditionally adds preprocessor definitions based on CMake options. These definitions affect the compilation process and can enable or disable certain features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-DNOMINMAX)\nendif()\n\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n\nif(WITH_CYCLES)\n  add_definitions(-DWITH_CYCLES)\nendif()\n\nif(WITH_OPENGL_BACKEND)\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n\nif(WITH_VULKAN_BACKEND)\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n\nif(WITH_OPENCOLLADA)\n  add_definitions(-DWITH_COLLADA)\nendif()\n\nif(WITH_CODEC_FFMPEG)\n  list(APPEND INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFMPEG_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nelseif(WITH_GHOST_X11)\n  add_definitions(-DWITH_GHOST_X11)\nendif()\n\nif(WITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\n  add_definitions(-DWITH_PYTHON)\n  if(WITH_PYTHON_MODULE)\n    add_definitions(-DWITH_PYTHON_MODULE)\n  endif()\nendif()\n\nif(WITH_GAMEENGINE)\n\tadd_definitions(-DWITH_GAMEENGINE)\nendif()\n\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n\nif(WITH_INPUT_NDOF)\n  add_definitions(-DWITH_INPUT_NDOF)\nendif()\n\nif(WITH_INPUT_IME)\n  add_definitions(-DWITH_INPUT_IME)\nendif()\n\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\n\n  list(APPEND INC\n    xr\n  )\n\n  list(APPEND SRC\n    xr/intern/wm_xr.cc\n    xr/intern/wm_xr_action.cc\n    xr/intern/wm_xr_actionmap.cc\n    xr/intern/wm_xr_draw.cc\n    xr/intern/wm_xr_operators.cc\n    xr/intern/wm_xr_session.cc\n\n    xr/wm_xr.hh\n    xr/intern/wm_xr_intern.hh\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: GHOST SDL Option\nDESCRIPTION: This snippet defines the WITH_GHOST_SDL option for building Blender against SDL for windowing. It is marked as advanced and defaults to OFF, offering an alternative windowing backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_GHOST_SDL \"\\\nEnable building Blender against SDL for windowing rather than the native APIs\" \n  OFF\n)\nmark_as_advanced(WITH_GHOST_SDL)\n```\n\n----------------------------------------\n\nTITLE: Windows-specific linking options (CMake)\nDESCRIPTION: This snippet configures Windows-specific linker options for the test libraries. It uses `target_link_libraries` to add dependent libraries and `target_link_options` with `/wholearchive` to link the libraries as whole archives.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  foreach(_lib ${_test_libs})\n    # Both target_link_libraries and target_link_options are required here\n    # target_link_libraries will add any dependent libraries, while just setting\n    # the wholearchive flag in target link options will not.\n    target_link_libraries(blender_test PRIVATE ${_lib})\n    target_link_options(blender_test PRIVATE /wholearchive:$<TARGET_FILE:${_lib}>)\n  endforeach()\n  set_target_properties(blender_test PROPERTIES VS_DEBUGGER_ENVIRONMENT \"${PLATFORM_ENV_INSTALL};$<TARGET_FILE_DIR:blender>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories needed to compile the Grease Pencil editor library. It sets the paths to the core Blender includes, the generated RNA headers, and external libraries like curve_fit_nd.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/grease_pencil/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../extern/curve_fit_nd\n  ../sculpt_paint\n  ../../modifiers/intern/lineart\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files for the `blenloader` library. It lists both C++ source files and header files that are part of the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenloader/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ${CMAKE_SOURCE_DIR}/release/datafiles/userdef/userdef_default_theme.c\n  intern/blend_validate.cc\n  intern/readblenentry.cc\n  intern/readfile.cc\n  intern/readfile_tempload.cc\n  intern/runtime.cc\n  intern/undofile.cc\n  intern/versioning_250.cc\n  intern/versioning_260.cc\n  intern/versioning_270.cc\n  intern/versioning_280.cc\n  intern/versioning_290.cc\n  intern/versioning_300.cc\n  intern/versioning_400.cc\n  intern/versioning_common.cc\n  intern/versioning_defaults.cc\n  intern/versioning_dna.cc\n  intern/versioning_legacy.cc\n  intern/versioning_upbge.cc\n  intern/versioning_userdef.cc\n  intern/writefile.cc\n\n  BLO_blend_defs.hh\n  BLO_blend_validate.hh\n  BLO_read_write.hh\n  BLO_readfile.hh\n  BLO_runtime.hh\n  BLO_undofile.hh\n  BLO_userdef_default.h\n  BLO_writefile.hh\n  intern/readfile.hh\n  intern/versioning_common.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Maintainer Flags in CMake\nDESCRIPTION: This snippet sets the compiler and linker flags for the 'Maintainer' build type. It differentiates between MSVC and other compilers (like GCC). For MSVC, it enables `/WX` (treat warnings as errors) along with debug flags. For other compilers, it enables `-Werror` (treat warnings as errors), debug info, and disables optimizations.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nIF(MSVC)\n  SET( CMAKE_CXX_FLAGS_MAINTAINER \"/WX ${CMAKE_CXX_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the C++ compiler during maintainer builds.\"\n    )\n  SET( CMAKE_C_FLAGS_MAINTAINER \"/WX ${CMAKE_CXX_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the C compiler during maintainer builds.\"\n    )\n  SET( CMAKE_EXE_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used for linking binaries during maintainer builds.\"\n    )\n  SET( CMAKE_SHARED_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the shared libraries linker during maintainer builds.\"\n    )\nELSE()\n  SET( CMAKE_CXX_FLAGS_MAINTAINER \"-Werror -ggdb -O0\" CACHE STRING\n    \"Flags used by the C++ compiler during maintainer builds.\"\n    )\n  SET( CMAKE_C_FLAGS_MAINTAINER \"-Werror -O0\" CACHE STRING\n    \"Flags used by the C compiler during maintainer builds.\"\n    )\n  SET( CMAKE_EXE_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_EXE_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used for linking binaries during maintainer builds.\"\n    )\n  SET( CMAKE_SHARED_LINKER_FLAGS_MAINTAINER\n    \"${CMAKE_SHARED_LINKER_FLAGS_DEBUG}\" CACHE STRING\n    \"Flags used by the shared libraries linker during maintainer builds.\"\n    )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (WindowManager)\nDESCRIPTION: Defines the include directories needed to compile the window manager module. These paths are added to the compiler's include search path.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  gizmo\n  gizmo/intern\n  ../compositor\n  ../editors/include\n  ../makesrna\n  ../../gameengine/Launcher\n  ../../../intern/memutil\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining blenkernel Dependencies\nDESCRIPTION: This snippet establishes a dependency between the `bf_blenkernel` library and the `bf_rna` library. This ensures that `bf_rna` is built before `bf_blenkernel`, as `bf_blenkernel` depends on the RNA prototypes defined in `bf_rna`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_blenkernel bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries to Link\nDESCRIPTION: This snippet specifies the libraries that the bf_editor_screen library depends on. It lists both internal Blender libraries (bf::*) and external libraries (bf::extern::fmtlib).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_datafiles\n  bf_editor_space_sequencer\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the project, including paths to various I/O libraries (Alembic, Collada, FBX, etc.) and generated source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../io/alembic\n  ../../io/collada\n  ../../io/common\n  ../../io/fbx\n  ../../io/grease_pencil\n  ../../io/ply\n  ../../io/stl\n  ../../io/usd\n  ../../io/wavefront_obj\n  ../../makesrna\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Set GLSL Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories (INC_GLSL) required for compiling GLSL shaders within the Eevee rendering engine. These include paths provide access to necessary header files and shader utilities, ensuring correct compilation of shader code. The paths include both relative and absolute paths within the project structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n\n  # For grease pencil.\n  ../../gpencil\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Defines the include directories needed for compiling the Render module. These directories contain header files required by the source code. The 'PUBLIC .' directive makes the current directory available for inclusion.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n  ../compositor\n  ../compositor/cached_resources\n  ../compositor/derived_resources\n  ../draw/intern\n  ../gpu/intern\n  ../makesrna\n  ../simulation\n  ../../../intern/mikktspace\n  ../../../intern/mantaflow/extern\n)\n```\n\n----------------------------------------\n\nTITLE: OpenAL Integration with CMake\nDESCRIPTION: This CMake code block manages the integration of OpenAL. It uses `find_package` to locate OpenAL, defines source and header files for the OpenAL plugin, and appends necessary include directories and libraries. It also includes logic to find and append DLLs for Windows when `AUDASPACE_STANDALONE` is set.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENAL)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(OpenAL ${PACKAGE_OPTION})\n\tendif()\n\n\tif(OPENAL_FOUND)\n\t\tset(OPENAL_SRC\n\t\t\tplugins/openal/OpenALDevice.cpp\n\t\t\tplugins/openal/OpenALReader.cpp\n\t\t)\n\t\tset(OPENAL_HDR\n\t\t\tplugins/openal/OpenALDevice.h\n\t\t\tplugins/openal/OpenALReader.h\n\t\t)\n\n\t\tif(NOT PLUGIN_OPENAL)\n\t\t\tlist(APPEND INCLUDE ${OPENAL_INCLUDE_DIR})\n\t\t\tlist(APPEND LIBRARIES ${OPENAL_LIBRARY})\n\t\t\tlist(APPEND SRC ${OPENAL_SRC})\n\t\t\tlist(APPEND HDR ${OPENAL_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS OpenALDevice)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB OPENAL_DLLS ${LIBRARY_PATH}/OpenAL/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${OPENAL_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_OPENAL FALSE CACHE BOOL \"Build With OpenAL\" FORCE)\n\t\telse()\n\t\t\tset(WITH_OPENAL FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"OpenAL not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Aggregating Kernel Header Files - CMake\nDESCRIPTION: This CMake code aggregates all the previously defined kernel header file lists into a single `SRC_KERNEL_HEADERS` variable. This simplifies including all necessary headers in the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_HEADERS\n  ${SRC_KERNEL_BAKE_HEADERS}\n  ${SRC_KERNEL_BVH_HEADERS}\n  ${SRC_KERNEL_CAMERA_HEADERS}\n  ${SRC_KERNEL_CLOSURE_HEADERS}\n  ${SRC_KERNEL_FILM_HEADERS}\n  ${SRC_KERNEL_GEOM_HEADERS}\n  ${SRC_KERNEL_INTEGRATOR_HEADERS}\n  ${SRC_KERNEL_LIGHT_HEADERS}\n  ${SRC_KERNEL_OSL_HEADERS}\n  ${SRC_KERNEL_SAMPLE_HEADERS}\n  ${SRC_KERNEL_SVM_HEADERS}\n  ${SRC_KERNEL_TYPES_HEADERS}\n  ${SRC_KERNEL_UTIL_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding libmv test executable\nDESCRIPTION: This CMake code snippet uses the `blender_add_test_executable` function to define and build a test executable.  It specifies the executable name, the source file, include directories (`INC`, `INC_SYS`), and libraries to link against (including `libmv_test_dataset`, `bf_intern_libmv` and other libraries defined by `LIB`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_executable(\"libmv_brute_region_tracker\" \"./libmv/tracking/brute_region_tracker_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Metal Backend GLSL Sources\nDESCRIPTION: This snippet defines a list of GLSL shader source files specifically for the Metal backend. These shaders are designed to be compatible with Metal's shading language and are used for tasks like depth updates and full-screen blits.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(MTL_BACKEND_GLSL_SRC\n  metal/kernels/depth_2d_update_float_frag.glsl\n  metal/kernels/depth_2d_update_int24_frag.glsl\n  metal/kernels/depth_2d_update_int32_frag.glsl\n  metal/kernels/depth_2d_update_vert.glsl\n  metal/kernels/gpu_shader_fullscreen_blit_vert.glsl\n  metal/kernels/gpu_shader_fullscreen_blit_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This CMake code sets the include directory for the project. The include directory is '..'.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring FFMPEG support\nDESCRIPTION: This snippet handles the configuration of FFMPEG support for AudaSpace. It uses `find_package` to locate the FFMPEG library, and if found, it defines source and header files specific to FFMPEG.  If `PLUGIN_FFMPEG` is not enabled, it appends FFMPEG include directories, libraries, source files, and header files to the global lists. If FFMPEG is not found, it disables FFMPEG support and displays a warning message.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# FFMPEG\nif(WITH_FFMPEG)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(FFMPEG ${PACKAGE_OPTION})\n\tendif()\n\n\tif(FFMPEG_FOUND)\n\t\tset(FFMPEG_SRC\n\t\t\tplugins/ffmpeg/FFMPEG.cpp\n\t\t\tplugins/ffmpeg/FFMPEGReader.cpp\n\t\t\tplugins/ffmpeg/FFMPEGWriter.cpp\n\t\t)\n\t\tset(FFMPEG_HDR\n\t\t\tplugins/ffmpeg/FFMPEG.h\n\t\t\tplugins/ffmpeg/FFMPEGReader.h\n\t\t\tplugins/ffmpeg/FFMPEGWriter.h\n\t\t)\n\n\t\tif(NOT PLUGIN_FFMPEG)\n\t\t\tlist(APPEND INCLUDE ${FFMPEG_INCLUDE_DIRS})\n\t\t\tlist(APPEND LIBRARIES ${FFMPEG_LIBRARIES})\n\t\t\tlist(APPEND SRC ${FFMPEG_SRC})\n\t\t\tlist(APPEND HDR ${FFMPEG_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS FFMPEG)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB FFMPEG_DLLS ${LIBRARY_PATH}/ffmpeg/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${FFMPEG_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_FFMPEG FALSE CACHE BOOL \"Build With FFMPEG\" FORCE)\n\t\telse()\n\t\t\tset(WITH_FFMPEG FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"FFMPEG not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (STL) - CMake\nDESCRIPTION: This snippet conditionally appends the STL I/O library and defines a preprocessor definition if the WITH_IO_STL flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_STL)\n  list(APPEND LIB\n    bf_io_stl\n  )\n  add_definitions(-DWITH_IO_STL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: This snippet defines the include directories needed for compiling the sculpt and paint editor library. These include project-specific paths, such as asset, include, uvedit, blenlib, and makesrna, as well as external libraries like Eigen. It also includes the path to generated RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../..\n\n  ../asset\n  ../include\n  ../uvedit\n  ../../blenlib\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Executable\nDESCRIPTION: This CMake code conditionally installs the Python executable to the specified destination directory.  The installation is performed only if both `WITH_PYTHON` and `WITH_PYTHON_INSTALL` variables are enabled. It installs the `PYTHON_EXECUTABLE` to `${TARGETDIR_VER}/python/bin`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\n  if(WITH_PYTHON AND WITH_PYTHON_INSTALL)\n    # Install executable\n    install(\n      PROGRAMS ${PYTHON_EXECUTABLE}\n      DESTINATION ${TARGETDIR_VER}/python/bin\n    )\n```\n\n----------------------------------------\n\nTITLE: Set NumPy path\nDESCRIPTION: This block sets the path to the NumPy module's site-packages or dist-packages directory and its include directory. This is done when building for Windows or macOS, which have NumPy bundled with their Python libraries. These paths are used to locate the NumPy headers and libraries during compilation. The variables are cached and marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 OR APPLE)\n  # Windows and macOS have this bundled with Python libraries.\nelseif(WITH_PYTHON_INSTALL OR WITH_PYTHON_NUMPY)\n  set(PYTHON_NUMPY_PATH \"\" CACHE PATH \"\\\nPath to python site-packages or dist-packages containing 'numpy' module\"\n  )\n  mark_as_advanced(PYTHON_NUMPY_PATH)\n  set(PYTHON_NUMPY_INCLUDE_DIRS \"\" CACHE PATH \"Path to the include directory of the NumPy module\")\n  mark_as_advanced(PYTHON_NUMPY_INCLUDE_DIRS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Defines the source files that will be compiled to create the executable. Additional source files are included based on platform and build options, like Visual Studio support or Windows resource files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  creator.cc\n  creator_args.cc\n  creator_signals.cc\n\n  creator_intern.h\n)\n\nif(CMAKE_GENERATOR MATCHES \"^Visual Studio.+\")\n  # This helps visual studio find the debugger visualizers\n  list(APPEND SRC ${CMAKE_SOURCE_DIR}/tools/utils_ide/natvis/Blender.natvis)\nendif()\n\nif(WIN32 AND NOT UNIX)\n  list(APPEND SRC\n    ${CMAKE_SOURCE_DIR}/release/windows/icons/winblender.rc\n  )\n\n  if(NOT WITH_WINDOWS_EXTERNAL_MANIFEST)\n    list(APPEND SRC\n      ${CMAKE_BINARY_DIR}/blender.exe.manifest\n    )\n  endif()\nendif()\n\nif(WITH_BUILDINFO)\n  list(APPEND SRC\n    buildinfo.c\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Integration in CMake\nDESCRIPTION: This snippet conditionally adds FFmpeg support using the WITH_CODEC_FFMPEG flag. If enabled, it defines the WITH_FFMPEG preprocessor macro, enabling FFmpeg-related code paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenGL Backend Setup (CMake)\nDESCRIPTION: This CMake snippet configures the OpenGL backend if it is enabled. It appends include directories, source files, and libraries to corresponding lists and adds a preprocessor definition to enable the OpenGL backend during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    ${OPENGL_SRC}\n  )\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags in CMake\nDESCRIPTION: These snippets define preprocessor definitions that are conditionally added based on whether certain image format libraries are enabled (WITH_IMAGE_OPENJPEG, WITH_IMAGE_OPENEXR, WITH_IMAGE_CINEON, WITH_IMAGE_WEBP). These flags enable support for respective image formats during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_image/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENJPEG)\n  add_definitions(-DWITH_IMAGE_OPENJPEG)\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n\nif(WITH_IMAGE_WEBP)\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Compiler Flag Removal\nDESCRIPTION: This snippet handles Windows-specific compiler flags. It removes the /w34100 warning level flag.  For ARM64 architecture, it removes the preprocessor flag \"/Zc:preprocessor\" and adds the definition to disable SSE2NEON.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  # Some USD library headers trigger the \"unreferenced formal parameter\"\n  # warning alert.\n  # Silence them by restore warn C4100 back to w4\n  remove_cc_flag(\"/w34100\")\n  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n    # USD currently does not support the new preprocessor,\n    # so we remove it here and disable sse2neon\n    remove_cc_flag(\"/Zc:preprocessor\")\n    add_definitions(-DDISABLE_SSE2NEON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies (CMake)\nDESCRIPTION: This snippet adds a dependency on the `bf_rna` target for the `bf_editor_space_node` target. This ensures that the `bf_rna` target is built before `bf_editor_space_node` because `bf_editor_space_node` depends on the generated RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_node bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies (add_dependencies)\nDESCRIPTION: This snippet adds a dependency on the `bf_rna` library for the `bf_editor_space_clip` library. This ensures that the RNA library is built before the clip editor space library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_clip/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_space_clip bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet specifies the libraries that the FBX importer depends on. These include various Blender internal libraries such as animrig, blenkernel, blenlib, bmesh, depsgraph, dna, nodes, imbuf and external libraries like fmtlib and ufbx.  These libraries are linked to bf_io_fbx either privately or publicly.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/fbx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::nodes\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::ufbx\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: This snippet defines the list of libraries that the Ketsji engine depends on. These libraries are linked during the linking phase to resolve external dependencies and provide functionality used by the engine. Includes Blender libraries, the converter, logic bricks, scenegraph, message network, device, recastnavigation, rasterizer, and videotexture libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n  ge_converter\n  ge_logic_bricks\n  ge_scenegraph\n  ge_msg_network\n  ge_device\n  extern_recastnavigation\n  ge_rasterizer\n  ge_videotexture\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for BMesh\nDESCRIPTION: This snippet sets the include directories required for compiling the BMesh library. It includes public directories, Eigen, and rangetree.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../../../intern/eigen\n  ../../../extern/rangetree\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions - CMake\nDESCRIPTION: Conditionally adds preprocessor definitions based on whether certain features or libraries are enabled.  These definitions are used to control conditional compilation within the C/C++ code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_FEENABLEEXCEPT)\n  add_definitions(-DHAVE_FEENABLEEXCEPT)\nendif()\n\nif(WITH_STRSIZE_DEBUG)\n  add_definitions(-DWITH_STRSIZE_DEBUG)\nendif()\n\nif(WITH_LIBMV)\n  add_definitions(-DWITH_LIBMV)\nendif()\n\nif(WITH_CYCLES)\n  add_definitions(-DWITH_CYCLES)\n  if(WITH_CYCLES_LOGGING)\n    add_definitions(-DWITH_CYCLES_LOGGING)\n  endif()\nendif()\n\nif(WITH_OPENGL_BACKEND)\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n\nif(WITH_VULKAN_BACKEND)\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n\nif(WITH_RENDERDOC)\n  add_definitions(-DWITH_RENDERDOC)\nendif()\n\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n\nif(WIN32)\n  # Windows.h will define min/max macros that will collide with the STL versions.\n  add_definitions(-DNOMINMAX)\nendif()\n\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n\n  if(WITH_PYTHON_SECURITY)\n    add_definitions(-DWITH_PYTHON_SECURITY)\n  endif()\nendif()\n\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nendif()\n\nif(WITH_GAMEENGINE)\n  add_definitions(-DWITH_GAMEENGINE)\nendif()\n\nif(WITH_SDL)\n  add_definitions(-DWITH_SDL)\nendif()\n\nif(WITH_BINRELOC)\n  add_definitions(-DWITH_BINRELOC)\nendif()\n\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\nendif()\n\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\nendif()\n\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling SIMD Support based on Detection - CMake\nDESCRIPTION: This snippet checks for CPU SIMD (Single Instruction, Multiple Data) support using `test_sse_support()` or `test_neon_support()`. If enabled and Neon is supported, it includes SSE2NEON headers and defines `WITH_SSE2NEON`. If SSE42 is supported, it appends the compiler flags and defines preprocessor macros for MMX, SSE, SSE2, SSE3, SSE4.1, and SSE4.2 on Windows platforms.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_97\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CPU_SIMD)\n  if(SUPPORT_NEON_BUILD)\n    # Neon\n    if(SSE2NEON_FOUND)\n      include_directories(SYSTEM \"${SSE2NEON_INCLUDE_DIRS}\")\n      add_definitions(-DWITH_SSE2NEON)\n    endif()\n  else()\n    # SSE\n    if(SUPPORT_SSE42_BUILD)\n      string(APPEND CMAKE_CXX_FLAGS \" ${COMPILER_SSE42_FLAG}\")\n      string(APPEND CMAKE_C_FLAGS \" ${COMPILER_SSE42_FLAG}\")\n      # MSVC doesn't define any of these and only does the AVX and higher flags.\n      # For consistency we define these flags for MSVC.\n      if(WIN32)\n        add_compile_definitions(\n          __MMX__\n          __SSE__\n          __SSE2__\n          __SSE3__\n          __SSE4_1__\n          __SSE4_2__\n        )\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: LibSndFile Integration with CMake\nDESCRIPTION: This CMake snippet handles the integration of LibSndFile. It first attempts to find the package. If found and `AUDASPACE_STANDALONE` is enabled, it defines source and header files, appends necessary include directories and libraries, and handles DLLs on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBSNDFILE)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(LibSndFile ${PACKAGE_OPTION})\n\tendif()\n\n\tif(LIBSNDFILE_FOUND)\n\t\tset(LIBSNDFILE_SRC\n\t\t\tplugins/libsndfile/SndFile.cpp\n\t\t\tplugins/libsndfile/SndFileReader.cpp\n\t\t\tplugins/libsndfile/SndFileWriter.cpp\n\t\t)\n\t\tset(LIBSNDFILE_HDR\n\t\t\tplugins/libsndfile/SndFile.h\n\t\t\tplugins/libsndfile/SndFileReader.h\n\t\t\tplugins/libsndfile/SndFileWriter.h\n\t\t)\n\n\t\tif(NOT PLUGIN_LIBSNDFILE)\n\t\t\tlist(APPEND INCLUDE ${LIBSNDFILE_INCLUDE_DIRS})\n\t\t\tlist(APPEND LIBRARIES ${LIBSNDFILE_LIBRARIES})\n\t\t\tlist(APPEND SRC ${LIBSNDFILE_SRC})\n\t\t\tlist(APPEND HDR ${LIBSNDFILE_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS SndFile)\n\t\tendif()\n\n\t\tif(WIN32 AND AUDASPACE_STANDALONE)\n\t\t\tfile(GLOB LIBSNDFILE_DLLS ${LIBRARY_PATH}/libsndfile/bin/*.dll)\n\t\t\tlist(APPEND DLLS ${LIBSNDFILE_DLLS})\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_LIBSNDFILE FALSE CACHE BOOL \"Build With LibSndFile\" FORCE)\n\t\telse()\n\t\t\tset(WITH_LIBSNDFILE FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"LibSndFile not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Embree Configuration - CMake\nDESCRIPTION: This snippet configures Embree support, including adding definitions, include directories, and handling Embree GPU support for OneAPI. It also checks if the Embree SYCL debug library is available on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_EMBREE)\n  add_definitions(-DWITH_EMBREE)\n  if(WITH_CYCLES_DEVICE_ONEAPI AND EMBREE_SYCL_SUPPORT)\n    # NOTE: The debug version of Embree is built without SYCL support on Windows\n    # since 7fb480095e371f8f5ac4f647f0ba2fd78da486f7. This is not reflected in\n    # EMBREE_SYCL_SUPPORT which is coming from Embree headers that aren't\n    # differentiated for release and debug, so we handle this case here by\n    # disabling its use when embree4_sycl_d.lib doesn't exist.\n    set(EMBREE_SYCL_DEBUG_LIBRARY ${EMBREE_LIBRARIES})\n    list(FILTER EMBREE_SYCL_DEBUG_LIBRARY INCLUDE REGEX \"_sycl_d\\.lib$\")\n    if(WIN32 AND NOT EMBREE_SYCL_DEBUG_LIBRARY)\n      add_compile_definitions(\"$<$<CONFIG:Release>:WITH_EMBREE_GPU>\")\n      add_compile_definitions(\"$<$<CONFIG:RelWithDebInfo>:WITH_EMBREE_GPU>\")\n      add_compile_definitions(\"$<$<CONFIG:MinSizeRel>:WITH_EMBREE_GPU>\")\n      if(CMAKE_BUILD_TYPE MATCHES \"Debug\" OR GENERATOR_IS_MULTI_CONFIG)\n        message(STATUS\n          \"The use of Embree GPU is disabled for the Debug configuration \"\n          \"as embree${EMBREE_MAJOR_VERSION}_sycl_d.lib is not found.\"\n        )\n      endif()\n    else()\n      add_definitions(-DWITH_EMBREE_GPU)\n    endif()\n  endif()\n  add_definitions(-DEMBREE_MAJOR_VERSION=${EMBREE_MAJOR_VERSION})\n  include_directories(\n    SYSTEM\n    ${EMBREE_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting source files\nDESCRIPTION: Lists the source files to be compiled into the nodes library. These files implement the core functionality of the nodes system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/derived_node_tree.cc\n  intern/geometry_nodes_bundle.cc\n  intern/geometry_nodes_closure.cc\n  intern/geometry_nodes_closure_zone.cc\n  intern/geometry_nodes_dependencies.cc\n  intern/geometry_nodes_execute.cc\n  intern/geometry_nodes_foreach_geometry_element_zone.cc\n  intern/geometry_nodes_gizmos.cc\n  intern/geometry_nodes_lazy_function.cc\n  intern/geometry_nodes_log.cc\n  intern/geometry_nodes_repeat_zone.cc\n  intern/inverse_eval.cc\n  intern/math_functions.cc\n  intern/node_common.cc\n  intern/node_declaration.cc\n  intern/node_exec.cc\n  intern/node_geometry_exec.cc\n  intern/node_multi_function.cc\n  intern/node_register.cc\n  intern/node_rna_define.cc\n  intern/node_socket.cc\n  intern/node_socket_declarations.cc\n  intern/node_util.cc\n  intern/partial_eval.cc\n  intern/socket_search_link.cc\n  intern/socket_usage_inference.cc\n  intern/value_elem.cc\n\n  NOD_common.hh\n  NOD_composite.hh\n  NOD_derived_node_tree.hh\n  NOD_geometry.hh\n  NOD_geometry_exec.hh\n  NOD_geometry_nodes_bundle.hh\n  NOD_geometry_nodes_bundle_fwd.hh\n  NOD_geometry_nodes_closure.hh\n  NOD_geometry_nodes_closure_eval.hh\n  NOD_geometry_nodes_closure_fwd.hh\n  NOD_geometry_nodes_closure_location.hh\n  NOD_geometry_nodes_dependencies.hh\n  NOD_geometry_nodes_execute.hh\n  NOD_geometry_nodes_gizmos.hh\n  NOD_geometry_nodes_lazy_function.hh\n  NOD_geometry_nodes_log.hh\n  NOD_inverse_eval_params.hh\n  NOD_inverse_eval_path.hh\n  NOD_inverse_eval_run.hh\n  NOD_math_functions.hh\n  NOD_multi_function.hh\n  NOD_node_declaration.hh\n  NOD_node_extra_info.hh\n  NOD_node_in_compute_context.hh\n  NOD_partial_eval.hh\n  NOD_register.hh\n  NOD_rna_define.hh\n  NOD_shader.h\n  NOD_socket.hh\n  NOD_socket_declarations.hh\n  NOD_socket_declarations_geometry.hh\n  NOD_socket_items.hh\n  NOD_socket_items_blend.hh\n  NOD_socket_items_ops.hh\n  NOD_socket_items_ui.hh\n  NOD_socket_search_link.hh\n  NOD_socket_usage_inference.hh\n  NOD_texture.h\n  NOD_value_elem.hh\n  NOD_value_elem_eval.hh\n  intern/node_common.h\n  intern/node_exec.hh\n  intern/node_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions and Includes - CMake\nDESCRIPTION: This snippet adds preprocessor definitions and include directories required for Cycles. It includes Boost definitions, namespace definitions, system includes, and includes for external libraries like OpenImageIO, Imath, OpenEXR, and Pugixml. Further definitions are set based on enabled features such as debugging (WITH_CYCLES_DEBUG), standalone GUI (WITH_CYCLES_STANDALONE_GUI), PTex (WITH_CYCLES_PTEX) and OSL (WITH_CYCLES_OSL).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(\n  ${BOOST_DEFINITIONS}\n)\n\nadd_definitions(\n  -DCCL_NAMESPACE_BEGIN=namespace\\ ccl\\ {\n  -DCCL_NAMESPACE_END=}\n)\n\ninclude_directories(\n  SYSTEM\n  ${BOOST_INCLUDE_DIR}\n  ${OPENIMAGEIO_INCLUDE_DIRS}\n  ${IMATH_INCLUDE_DIRS}\n  ${OPENEXR_INCLUDE_DIRS}\n  ${PUGIXML_INCLUDE_DIR}\n)\n\nif(WITH_CYCLES_DEBUG)\n  add_definitions(-DWITH_CYCLES_DEBUG)\nendif()\nif(WITH_CYCLES_STANDALONE_GUI)\n  add_definitions(-DWITH_CYCLES_STANDALONE_GUI)\nendif()\n\nif(WITH_CYCLES_PTEX)\n  add_definitions(-DWITH_PTEX)\nendif()\n\nif(WITH_CYCLES_OSL)\n  add_definitions(-DWITH_OSL)\n  include_directories(\n    SYSTEM\n    ${OSL_INCLUDE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library\nDESCRIPTION: This snippet calls a custom CMake function `blender_add_lib` to create the `bf_intern_opensubdiv` library. It takes the source files, include directories, and library dependencies as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_opensubdiv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting source files for the Blender test runner (CMake)\nDESCRIPTION: This snippet initializes the list of source files used to build the test runner. It includes `blender_test.cc` and, conditionally, the build info object if `WITH_BUILDINFO` is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  blender_test.cc\n)\n\nif(WITH_BUILDINFO)\n  list(APPEND SRC\n    \"$<TARGET_OBJECTS:buildinfoobj>\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Include Directories\nDESCRIPTION: This snippet sets the include directories needed for compiling the tests. This includes include directories for blenloader and gtests.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_INC\n    ${INC}\n\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries (LIB)\nDESCRIPTION: This snippet defines the list of libraries that the Outliner space library depends on.  These include Blender's internal libraries (blenkernel, blenlib, etc.) as well as external libraries (fmtlib). PRIVATE indicates that the dependency is not exposed to other libraries that link against this one.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_outliner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_id_management\n  bf_editor_undo\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n  extern_fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Bundle Information\nDESCRIPTION: This CMake snippet sets the macOS bundle information for the Blenderplayer application. It first retrieves the current date using the `date` command and stores it in the `BLENDER_DATE` variable. Then, it sets the `MACOSX_BUNDLE_INFO_PLIST`, `MACOSX_BUNDLE_SHORT_VERSION_STRING`, and `MACOSX_BUNDLE_LONG_VERSION_STRING` properties for the `blenderplayer` target. This configuration is essential for creating a proper macOS application bundle.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n  set(OSX_APP_PLAYER_SOURCEDIR ${CMAKE_SOURCE_DIR}/release/darwin/Blenderplayer.app)\n\n  # setup Info.plist\n  execute_process(COMMAND date \"+%Y-%m-%d\"\n                  OUTPUT_VARIABLE BLENDER_DATE\n                  OUTPUT_STRIP_TRAILING_WHITESPACE)\n\n  set_target_properties(blenderplayer PROPERTIES\n    MACOSX_BUNDLE_INFO_PLIST ${OSX_APP_PLAYER_SOURCEDIR}/Contents/Info.plist\n    MACOSX_BUNDLE_SHORT_VERSION_STRING \"${BLENDER_VERSION}${BLENDER_VERSION_CHAR}\"\n    MACOSX_BUNDLE_LONG_VERSION_STRING \"${BLENDER_VERSION}${BLENDER_VERSION_CHAR} ${BLENDER_DATE}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files used for building the BlendThumb library and thumbnailer applications. It sets the SRC variable to include common source files and then defines platform-specific source files based on the operating system (Windows, macOS, Unix).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blendthumb/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/blendthumb.hh\n  src/blendthumb_extract.cc\n  src/blendthumb_png.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet specifies the libraries that the ge_videotexture library depends on. These include Blender's internal libraries like blenkernel, blenlib, bmesh, depsgraph, dna, draw, gpu, imbuf, guardedalloc, render, blentranslation and the game engine's scenegraph library (ge_scenegraph).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  ge_scenegraph\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library and Linking Dependencies\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_lib` to add the `bf_nodes_geometry` library, specifying its source files, include directories, and system include directories. It also links `bf_nodes_geometry_generated` to `bf_nodes_geometry`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_nodes_geometry \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\ntarget_link_libraries(bf_nodes_geometry_generated bf_nodes_geometry)\n```\n\n----------------------------------------\n\nTITLE: Adding GUI Dependencies (Epoxy and SDL2)\nDESCRIPTION: This snippet conditionally adds Epoxy and SDL2 as dependencies if both WITH_CYCLES_STANDALONE and WITH_CYCLES_STANDALONE_GUI are enabled. It appends include directories and libraries to INC_SYS and LIB, respectively.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_STANDALONE AND WITH_CYCLES_STANDALONE_GUI)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n    ${SDL2_INCLUDE_DIRS}\n  )\n  list(APPEND LIB ${Epoxy_LIBRARIES} ${SDL2_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the list of C++ source files that make up the texture nodes library. These files contain the implementation of the various texture nodes and related utility functions. The file names indicate that these files contain the logic for different texture nodes like bricks, checker, image, math etc.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/texture/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  nodes/node_texture_at.cc\n  nodes/node_texture_bricks.cc\n  nodes/node_texture_checker.cc\n  nodes/node_texture_combine_color.cc\n  nodes/node_texture_common.cc\n  nodes/node_texture_compose.cc\n  nodes/node_texture_coord.cc\n  nodes/node_texture_curves.cc\n  nodes/node_texture_decompose.cc\n  nodes/node_texture_distance.cc\n  nodes/node_texture_hueSatVal.cc\n  nodes/node_texture_image.cc\n  nodes/node_texture_invert.cc\n  nodes/node_texture_math.cc\n  nodes/node_texture_mixRgb.cc\n  nodes/node_texture_output.cc\n  nodes/node_texture_proc.cc\n  nodes/node_texture_rotate.cc\n  nodes/node_texture_scale.cc\n  nodes/node_texture_separate_color.cc\n  nodes/node_texture_texture.cc\n  nodes/node_texture_translate.cc\n  nodes/node_texture_valToNor.cc\n  nodes/node_texture_valToRgb.cc\n  nodes/node_texture_viewer.cc\n\n  node_texture_register.cc\n  node_texture_tree.cc\n  node_texture_util.cc\n\n  node_texture_register.hh\n  node_texture_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Other DNA Include Files - CMake\nDESCRIPTION: This snippet defines a CMake variable `SRC_DNA_OTHER_INC` to store a list of other include files related to DNA. These files, located in the `makesdna` subdirectory, provide utility functions and other support for DNA operations, such as array utilities and printing functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_DNA_OTHER_INC\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_array_utils.hh\n  ${CMAKE_CURRENT_SOURCE_DIR}/makesdna/DNA_print.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the project. It includes paths to internal Blender headers, generated DNA headers, and RNA prototypes. These headers are essential for compiling the C++ source code that interacts with Blender's internal data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../interface\n  ../../makesrna\n\n  # dna_type_offsets.h\n  ${CMAKE_CURRENT_BINARY_DIR}/../../makesdna/intern\n  # RNA_prototypes.h\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Including Final CMake Modules\nDESCRIPTION: Includes the final CMake modules, deps_html.cmake and cve_check.cmake.  deps_html.cmake likely generates HTML documentation or reports related to the project dependencies. cve_check.cmake probably performs a Common Vulnerabilities and Exposures (CVE) check to ensure the project dependencies are secure.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# Keep these last\ninclude(cmake/deps_html.cmake)\ninclude(cmake/cve_check.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding C++ Compiler Flags for Intel Compiler\nDESCRIPTION: This snippet adds C++ compiler flags when the compiler is Intel. It enables all warnings, disables invalid offsetof warnings, and disables sign compare warnings. It uses the `add_check_cxx_compiler_flags` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_127\n\nLANGUAGE: cmake\nCODE:\n```\nadd_check_cxx_compiler_flags(\n    CXX_WARNINGS\n\n    CXX_WARN_ALL -Wall\n    CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n    CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating GLSL Source List File\nDESCRIPTION: This snippet generates a header file containing definitions for accessing GLSL shader source code at runtime.  It iterates through the `GLSL_SRC` list, extracts the file name, replaces dots with underscores, and appends a `SHADER_SOURCE` macro definition to the `GLSL_SOURCE_CONTENT` string. This string is then written to a generated header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_SOURCE_CONTENT \"\")\nforeach(GLSL_FILE ${GLSL_SRC})\n  get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n  string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n  string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\nendforeach()\n\nset(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_gpu_source_list.h\")\nfile(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\nlist(APPEND SRC ${glsl_source_list_file})\nlist(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Enable asserts in Release builds\nDESCRIPTION: This option enables assertion checks even in non-debug (release) configurations. Normally, assertions are only active in debug builds. This makes the build safer, at the cost of performance.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_ASSERT_RELEASE \"Build with asserts enabled even for non-debug configurations\" OFF)\nmark_as_advanced(WITH_ASSERT_RELEASE)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for MaterialX\nDESCRIPTION: This snippet conditionally adds MaterialX support if the `WITH_MATERIALX` option is enabled.  It adds compiler definitions, source files, and library dependencies related to MaterialX.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MATERIALX)\n  add_definitions(-DWITH_MATERIALX)\n  list(APPEND SRC\n    materialx/group_nodes.cc\n    materialx/material.cc\n    materialx/node_graph.cc\n    materialx/node_item.cc\n    materialx/node_parser.cc\n\n    materialx/group_nodes.h\n    materialx/material.h\n    materialx/node_graph.h\n    materialx/node_item.h\n    materialx/node_parser.h\n  )\n  list(APPEND LIB\n    MaterialXCore\n    MaterialXFormat\n  )\n\n  if(WITH_USD)\n    add_definitions(-DWITH_USD)\n    list(APPEND INC_SYS\n      ${USD_INCLUDE_DIRS}\n      ${BOOST_INCLUDE_DIR}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Constraint ID (KX_VehicleWrapper)\nDESCRIPTION: This method retrieves the constraint ID associated with the vehicle. It returns the constraint ID as an integer value, which can be used for further manipulation of the constraint.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getConstraintId()\n\n      Get the constraint ID\n\n      :return: the constraint id\n      :rtype: integer\n```\n\n----------------------------------------\n\nTITLE: Building with CMake (Shell)\nDESCRIPTION: This snippet shows how to use CMake to build the Vulkan Memory Allocator on Linux. It creates a build directory, configures the build using the CMake command, and then installs the library to a specified prefix.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build\n# Since VMA has no source files, you can skip to installation immediately\ncmake --install build --prefix build/install\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (WindowManager)\nDESCRIPTION: Defines the source files (.cc and .hh) that make up the window manager module. These files are compiled and linked to create the window manager library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/wm.cc\n  intern/wm_cursors.cc\n  intern/wm_dragdrop.cc\n  intern/wm_draw.cc\n  intern/wm_event_query.cc\n  intern/wm_event_system.cc\n  intern/wm_files.cc\n  intern/wm_files_link.cc\n  intern/wm_gesture.cc\n  intern/wm_gesture_ops.cc\n  intern/wm_init_exit.cc\n  intern/wm_jobs.cc\n  intern/wm_keymap.cc\n  intern/wm_keymap_utils.cc\n  intern/wm_menu_type.cc\n  intern/wm_operator_props.cc\n  intern/wm_operator_type.cc\n  intern/wm_operator_utils.cc\n  intern/wm_operators.cc\n  intern/wm_panel_type.cc\n  intern/wm_platform.cc\n  intern/wm_platform_support.cc\n  intern/wm_playanim.cc\n  intern/wm_splash_screen.cc\n  intern/wm_stereo.cc\n  intern/wm_subwindow.cc\n  intern/wm_surface.cc\n  intern/wm_toolsystem.cc\n  intern/wm_tooltip.cc\n  intern/wm_uilist_type.cc\n  intern/wm_utils.cc\n  intern/wm_window.cc\n  gizmo/intern/wm_gizmo.cc\n  gizmo/intern/wm_gizmo_group.cc\n  gizmo/intern/wm_gizmo_group_type.cc\n  gizmo/intern/wm_gizmo_map.cc\n  gizmo/intern/wm_gizmo_target_props.cc\n  gizmo/intern/wm_gizmo_type.cc\n  message_bus/intern/wm_message_bus.cc\n  message_bus/intern/wm_message_bus_rna.cc\n  message_bus/intern/wm_message_bus_static.cc\n\n  WM_api.hh\n  WM_keymap.hh\n  WM_message.hh\n  WM_toolsystem.hh\n  WM_types.hh\n  wm.hh\n  wm_cursors.hh\n  wm_draw.hh\n  wm_event_system.hh\n  wm_event_types.hh\n  wm_files.hh\n  wm_surface.hh\n  wm_window.hh\n  intern/wm_platform_support.hh\n  intern/wm_window_private.hh\n  gizmo/WM_gizmo_api.hh\n  gizmo/WM_gizmo_types.hh\n  gizmo/wm_gizmo_fn.hh\n  gizmo/wm_gizmo_wmapi.hh\n  gizmo/intern/wm_gizmo_intern.hh\n  message_bus/intern/wm_message_bus_intern.hh\n  message_bus/wm_message_bus.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Modifiers Library - CMake\nDESCRIPTION: Creates the 'bf_modifiers' library using the specified source files, include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_modifiers \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Add Test Suite\nDESCRIPTION: This snippet uses the `blender_add_test_suite_lib` function to create the test suite for the Wavefront OBJ I/O module. It provides the test source files, include directories, system include directories, and library dependencies. This command compiles the test sources, links them with the necessary libraries, and creates a test executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_suite_lib(io_wavefront \"${TEST_SRC}\" \"${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Executable Path CMake\nDESCRIPTION: Sets the path to the Blender executable based on the operating system. Different paths are used for MSVC, Apple, and other platforms, considering portable installations.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/blender.exe)\nelif(APPLE)\n  set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/Blender.app/Contents/MacOS/Blender)\nelse()\n  if(WITH_INSTALL_PORTABLE)\n    set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/blender)\n  else()\n    set(TEST_BLENDER_EXE ${TEST_INSTALL_DIR}/bin/blender)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking libraries for blender_cpu_check in CMake\nDESCRIPTION: This snippet links the `blender_cpu_check` library with the platform-specific libraries defined in the `PLATFORM_LINKLIBS` variable. These platform libraries are linked privately, meaning they are not exposed to other libraries that link against `blender_cpu_check`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(blender_cpu_check PRIVATE ${PLATFORM_LINKLIBS})\n```\n\n----------------------------------------\n\nTITLE: Configuring Cocoa (macOS)\nDESCRIPTION: Configures the build for Cocoa on macOS (if not using X11).  It appends source files for Cocoa-specific display, system, and window management.  It includes conditional NDOF support.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(APPLE AND NOT WITH_GHOST_X11)\n  list(APPEND SRC\n    intern/GHOST_DisplayManagerCocoa.mm\n    intern/GHOST_SystemCocoa.mm\n    intern/GHOST_WindowCocoa.mm\n\n    intern/GHOST_DisplayManagerCocoa.hh\n    intern/GHOST_SystemCocoa.hh\n    intern/GHOST_WindowCocoa.hh\n    intern/GHOST_WindowViewCocoa.hh\n  )\n\n  if(WITH_INPUT_NDOF)\n    list(APPEND SRC\n      intern/GHOST_NDOFManagerCocoa.mm\n\n      intern/GHOST_NDOFManagerCocoa.hh\n    )\n  endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: HIP and HIPRT Configuration - CMake\nDESCRIPTION: This snippet configures HIP and HIPRT device support, adding definitions and include directories based on their respective flags.  It also addresses dynamic loading of HIP through hipew.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_HIP)\n  add_definitions(-DWITH_HIP)\n\n  if(WITH_CYCLES_DEVICE_HIPRT)\n    include_directories(\n      ${HIPRT_INCLUDE_DIR}\n    )\n    add_definitions(-DWITH_HIPRT)\n  endif()\n\n  if(WITH_HIP_DYNLOAD)\n    include_directories(\n      ../../extern/hipew/include\n    )\n    add_definitions(-DWITH_HIP_DYNLOAD)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compositor GPU Render Tests - CMake\nDESCRIPTION: Sets up compositor render tests that leverage GPU rendering with OpenGL, Metal and Vulkan backends.  It loops through defined compositor tests and uses `add_render_test` specifying the backend, test directory, output path and python test script. The WITH_GPU_COMPOSITOR_TESTS and TEST_SRC_DIR_EXISTS variables control the execution of the test setup.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_43\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_COMPOSITOR_TESTS AND TEST_SRC_DIR_EXISTS)\n  set(compositor_tests\n    color\n    converter\n    filter\n    input\n    output\n    vector\n\n    pixel_nodes\n    multiple_node_setups\n  )\n\n  if(WITH_LIBMV)\n    list(APPEND compositor_tests distort matte)\n  endif()\n\n  if(WITH_OPENGL_BACKEND)\n    foreach(comp_test ${compositor_tests})\n      add_render_test(\n        compositor_opengl_${comp_test}\n        ${CMAKE_CURRENT_LIST_DIR}/compositor_render_tests.py\n        --testdir \"${TEST_SRC_DIR}/compositor/${comp_test}\"\n        --outdir \"${TEST_OUT_DIR}/compositor_opengl\"\n        --gpu-backend opengl\n      )\n    endforeach()\n    add_blender_test(\n      compositor_opengl_file_output\n      --python ${CMAKE_CURRENT_LIST_DIR}/compositor_file_output_tests.py\n      --\n      --testdir \"${TEST_SRC_DIR}/compositor/file_output/\"\n      --outdir \"${TEST_OUT_DIR}/compositor_opengl/file_output\"\n      --gpu-backend opengl\n    )\n  endif()\n  if(WITH_METAL_BACKEND)\n    foreach(comp_test ${compositor_tests})\n      add_render_test(\n        compositor_metal_${comp_test}\n        ${CMAKE_CURRENT_LIST_DIR}/compositor_render_tests.py\n        --testdir \"${TEST_SRC_DIR}/compositor/${comp_test}\"\n        --outdir \"${TEST_OUT_DIR}/compositor_metal\"\n        --gpu-backend metal\n      )\n    endforeach()\n    add_blender_test(\n      compositor_metal_file_output\n      --python ${CMAKE_CURRENT_LIST_DIR}/compositor_file_output_tests.py\n      --\n      --testdir \"${TEST_SRC_DIR}/compositor/file_output/\"\n      --outdir \"${TEST_OUT_DIR}/compositor_metal/file_output\"\n      --gpu-backend metal\n    )\n  endif()\n  if(WITH_VULKAN_BACKEND)\n    foreach(comp_test ${compositor_tests})\n      add_render_test(\n        compositor_vulkan_${comp_test}\n        ${CMAKE_CURRENT_LIST_DIR}/compositor_render_tests.py\n        --testdir \"${TEST_SRC_DIR}/compositor/${comp_test}\"\n        --outdir \"${TEST_OUT_DIR}/compositor_vulkan\"\n        --gpu-backend vulkan\n      )\n    endforeach()\n    add_blender_test(\n      compositor_vulkan_file_output\n      --python ${CMAKE_CURRENT_LIST_DIR}/compositor_file_output_tests.py\n      --\n      --testdir \"${TEST_SRC_DIR}/compositor/file_output/\"\n      --outdir \"${TEST_OUT_DIR}/compositor_vulkan/file_output\"\n      --gpu-backend vulkan\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include NumPy in Blender\nDESCRIPTION: This conditional option enables including NumPy in Blender if Audaspace is enabled (and not using the system Audaspace) or if the fluid simulator (mod_fluid) is enabled. NumPy is used by these components for numerical computations.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif((WITH_AUDASPACE AND NOT WITH_SYSTEM_AUDASPACE) OR WITH_MOD_FLUID)\n  option(WITH_PYTHON_NUMPY \"Include NumPy in Blender (used by Audaspace and Mantaflow)\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with XR OpenXR in CMake\nDESCRIPTION: This snippet conditionally defines the `WITH_XR_OPENXR` preprocessor macro if the `WITH_XR_OPENXR` flag is enabled.  This macro enables XR OpenXR-related code within the 3D viewport editor module. It depends on a boolean variable that represents whether XR OpenXR is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Python Path in Blender\nDESCRIPTION: Demonstrates setting the `PYTHONPATH` environment variable to specify the location of the Python installation that Blender should use.  Useful when Blender's bundled Python doesn't include necessary packages. Note that the Python version must match what Blender expects. The `--python-use-system-env` argument forces blender to check the system's environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nPYTHONPATH=/usr/lib/python3.7 ./blender --python-use-system-env\n```\n\n----------------------------------------\n\nTITLE: Texture Class Definition\nDESCRIPTION: This class creates the Texture object that loads the dynamic texture on the GPU. It takes a game object, material ID, texture ID, and an optional texture object as arguments.  The class provides methods for closing and refreshing the texture, as well as an attribute for mipmap settings. It serves as a wrapper for OpenGL texture bindings.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. class:: Texture(gameObj, materialID=0, textureID=0, textureObj=None)\n\n   Class that creates the ``Texture`` object that loads the dynamic texture on the GPU.\n\n   :arg gameObj: Game object to be created a video texture on.\n   :type gameObj: :class:`~bge.types.KX_GameObject`\n   :arg materialID: Material ID default, 0 is the first material. (optional)\n   :type materialID: int\n   :arg textureID: Texture index in case of multi-texture channel, 0 = first channel by default.\n      In case of UV texture, this parameter should always be 0. (optional)\n   :type textureID: int\n   :arg textureObj: Reference to another ``Texture`` object with shared bindId\n      which he user might want to reuse the texture.\n      If this argument is used, you should not create any source on this texture\n      and there is no need to refresh it either: the other ``Texture`` object will\n      provide the texture for both materials/textures.(optional)\n   :type textureObj: :class:`~bge.texture.Texture`\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories with CMake\nDESCRIPTION: This snippet uses the `set` command in CMake to define a variable named `INC` which contains a list of include directories. These directories are used during compilation to locate header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n\n  ../editors/include\n  ../editors/space_view3d\n  ../gpu/intern\n  ../makesrna\n  ../render/intern\n  ../compositor\n  ../compositor/algorithms\n  ../compositor/cached_resources\n  ../compositor/derived_resources\n\n  ../../../intern/opensubdiv\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This CMake snippet defines the library dependencies for the expression system. It lists the required Blender libraries, such as blenlib, fmtlib, and guardedalloc. These libraries must be available for linking during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Expressions/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries - CMake\nDESCRIPTION: This snippet defines a list of libraries that the Geometry Nodes module depends on.  The `PRIVATE` keyword signifies that these libraries are only needed for building this specific module and should not be exposed to other modules that depend on it. It includes Blender's internal libraries and external libraries like fmtlib and xxhash.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  bf_nodes\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies (add_dependencies)\nDESCRIPTION: This snippet adds a dependency of bf_editor_curve on bf_rna. This ensures that bf_rna is built before bf_editor_curve, particularly because bf_editor_curve likely uses generated code from the RNA system (RNA_prototypes.hh).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/curve/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(bf_editor_curve bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional compilation with Bullet\nDESCRIPTION: Conditionally adds Bullet physics library include directories, libraries, and definitions if Bullet is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n    ../../../intern/rigidbody\n  )\n  list(APPEND LIB\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the project. It includes local directories relative to the current CMakeLists.txt file and a directory generated during the build process for RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../io\n  ../../compositor\n  ../../compositor/algorithms\n  ../../compositor/cached_resources\n  ../../compositor/derived_resources\n  ../../compositor/utilities\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries\nDESCRIPTION: This snippet specifies the libraries to be linked with the BLF library. It includes internal Blender libraries (bf::blenkernel, bf::blenlib, etc.) and external libraries (FreeType, Brotli).  These libraries provide necessary functionalities for the BLF library to operate correctly.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  ${FREETYPE_LIBRARIES} ${BROTLI_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: Defines the list of source files that comprise the gizmo library. These files contain the implementation of the gizmo functionality. The list includes both .cc and .h files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/gizmo_library/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  gizmo_draw_utils.cc\n  gizmo_geometry.h\n  gizmo_library_intern.hh\n  gizmo_library_presets.cc\n  gizmo_library_utils.cc\n  geometry/geom_arrow_gizmo.cc\n  geometry/geom_cube_gizmo.cc\n  geometry/geom_dial_gizmo.cc\n  gizmo_types/arrow3d_gizmo.cc\n  gizmo_types/blank3d_gizmo.cc\n  gizmo_types/button2d_gizmo.cc\n  gizmo_types/cage2d_gizmo.cc\n  gizmo_types/cage3d_gizmo.cc\n  gizmo_types/dial3d_gizmo.cc\n  gizmo_types/move3d_gizmo.cc\n  gizmo_types/primitive3d_gizmo.cc\n  gizmo_types/snap3d_gizmo.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the list of source files (`SRC`) that comprise the OpenCOLLADA importer/exporter library.  These source files implement the functionality for importing and exporting COLLADA files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  AnimationClipExporter.cpp\n  AnimationExporter.cpp\n  AnimationImporter.cpp\n  ArmatureExporter.cpp\n  ArmatureImporter.cpp\n  BCAnimationCurve.cpp\n  BCAnimationSampler.cpp\n  BCMath.cpp\n  BCSampleData.cpp\n  BlenderContext.cpp\n  CameraExporter.cpp\n  ControllerExporter.cpp\n  DocumentExporter.cpp\n  DocumentImporter.cpp\n  EffectExporter.cpp\n  ErrorHandler.cpp\n  ExportSettings.cpp\n  ExtraHandler.cpp\n  ExtraTags.cpp\n  GeometryExporter.cpp\n  ImageExporter.cpp\n  ImportSettings.cpp\n  InstanceWriter.cpp\n  LightExporter.cpp\n  MaterialExporter.cpp\n  Materials.cpp\n  MeshImporter.cpp\n  SceneExporter.cpp\n  SkinInfo.cpp\n  TransformReader.cpp\n  TransformWriter.cpp\n  collada.cpp\n  collada_internal.cpp\n  collada_utils.cpp\n\n  AnimationClipExporter.h\n  AnimationExporter.h\n  AnimationImporter.h\n  ArmatureExporter.h\n  ArmatureImporter.h\n  BCAnimationCurve.h\n  BCAnimationSampler.h\n  BCMath.h\n  BCSampleData.h\n  BlenderContext.h\n  BlenderTypes.h\n  CameraExporter.h\n  ControllerExporter.h\n  DocumentExporter.h\n  DocumentImporter.h\n  EffectExporter.h\n  ErrorHandler.h\n  ExportSettings.h\n  ExtraHandler.h\n  ExtraTags.h\n  GeometryExporter.h\n  ImageExporter.h\n  ImportSettings.h\n  InstanceWriter.h\n  LightExporter.h\n  MaterialExporter.h\n  Materials.h\n  MeshImporter.h\n  SceneExporter.h\n  SkinInfo.h\n  TransformReader.h\n  TransformWriter.h\n  collada.h\n  collada_internal.h\n  collada_utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories - CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command in CMake to include several subdirectories into the build process.  Each subdirectory represents a distinct module or component of the Blender/UPBGE project, such as datatoc, gpu, editors, and others. This structure facilitates modular development and organization.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(datatoc)\nadd_subdirectory(gpu/glsl_preprocess)\nadd_subdirectory(editors)\nadd_subdirectory(windowmanager)\nadd_subdirectory(animrig)\nadd_subdirectory(asset_system)\nadd_subdirectory(blenkernel)\nadd_subdirectory(blenlib)\nadd_subdirectory(bmesh)\nadd_subdirectory(draw)\nadd_subdirectory(draw/intern/shaders)\nadd_subdirectory(draw/engines/eevee/shaders)\nadd_subdirectory(draw/engines/gpencil/shaders)\nadd_subdirectory(draw/engines/overlay/shaders)\nadd_subdirectory(draw/engines/workbench/shaders)\nadd_subdirectory(render)\nadd_subdirectory(blenfont)\nadd_subdirectory(blentranslation)\nadd_subdirectory(blenloader)\nadd_subdirectory(depsgraph)\nadd_subdirectory(ikplugin)\nadd_subdirectory(simulation)\nadd_subdirectory(geometry)\nadd_subdirectory(gpu)\nadd_subdirectory(gpu/shaders)\nadd_subdirectory(imbuf)\nadd_subdirectory(imbuf/intern/oiio)\nadd_subdirectory(nodes)\nadd_subdirectory(modifiers)\nadd_subdirectory(sequencer)\nadd_subdirectory(shader_fx)\nadd_subdirectory(io)\nadd_subdirectory(functions)\nadd_subdirectory(makesdna)\nadd_subdirectory(makesrna)\nadd_subdirectory(compositor)\n```\n\n----------------------------------------\n\nTITLE: Installing Blender Application on macOS (CMake)\nDESCRIPTION: This code snippet installs the Blender application, including the executable, package info, and resources. The `blender` target is installed to the root directory (`.`), and other files like `PkgInfo` and the `Resources` directory are installed into the `Blender.app/Contents` subdirectory. There are conditional installations for `blender-thumbnailer` and platform-bundled libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\n  set(BLENDER_BIN \"bin/blender\")\n  install(\n    TARGETS blender\n    DESTINATION \".\"\n  )\n\n  install(\n    FILES ${OSX_APP_SOURCEDIR}/Contents/PkgInfo\n    DESTINATION \"Blender.app/Contents\"\n  )\n\n  install_dir(\n    ${OSX_APP_SOURCEDIR}/Contents/Resources\n    \"Blender.app/Contents\"\n  )\n\n  if(WITH_BLENDER_THUMBNAILER)\n    install(\n      TARGETS blender-thumbnailer\n      DESTINATION \"./Blender.app/Contents/PlugIns\"\n    )\n  endif()\n\n  if(PLATFORM_BUNDLED_LIBRARIES AND TARGETDIR_LIB)\n    install(\n      FILES ${PLATFORM_BUNDLED_LIBRARIES}\n      DESTINATION ${TARGETDIR_LIB}\n    )\n  endif()\n\n  if(WITH_VULKAN_BACKEND)\n    install(\n      FILES ${VULKAN_LIBRARY} ${MOLTENVK_LIBRARY}\n      DESTINATION ${TARGETDIR_LIB}\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Direct Key Input Handling without Keyboard Sensor - Python\nDESCRIPTION: This snippet demonstrates how to directly access keyboard input states using the bge.logic.keyboard object, without using a keyboard sensor. It checks if specific keys (W, S, A, D) have been just activated and prints a message accordingly. Requires an always sensor with pulse mode enabled to trigger the script execution every frame. It relies on the KX_INPUT_JUST_ACTIVATED constant.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.events.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   # The all keys thing without a keyboard sensor (but you will\n   # need an always sensor with pulse mode on)\n   import bge\n\n   # Just shortening names here\n   keyboard = bge.logic.keyboard\n   JUST_ACTIVATED = bge.logic.KX_INPUT_JUST_ACTIVATED\n\n   if JUST_ACTIVATED in keyboard.inputs[bge.events.WKEY].queue:\n   \tprint(\"Activate Forward!\")\n   if JUST_ACTIVATED in keyboard.inputs[bge.events.SKEY].queue:\n   \tprint(\"Activate Backward!\")\n   if JUST_ACTIVATED in keyboard.inputs[bge.events.AKEY].queue:\n   \tprint(\"Activate Left!\")\n   if JUST_ACTIVATED in keyboard.inputs[bge.events.DKEY].queue:\n   \tprint(\"Activate Right!\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the list of source files (`SRC`) that make up the Cycles scene component. These files contain the implementation code for various scene-related features, such as Alembic support, attribute handling, camera models, geometry processing, and shading.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  alembic.cpp\n  alembic_read.cpp\n  attribute.cpp\n  background.cpp\n  bake.cpp\n  camera.cpp\n  colorspace.cpp\n  constant_fold.cpp\n  devicescene.cpp\n  film.cpp\n  geometry.cpp\n  geometry_attributes.cpp\n  geometry_bvh.cpp\n  geometry_mesh.cpp\n  hair.cpp\n  image.cpp\n  image_oiio.cpp\n  image_sky.cpp\n  image_vdb.cpp\n  integrator.cpp\n  light.cpp\n  light_tree.cpp\n  light_tree_debug.cpp\n  mesh.cpp\n  mesh_displace.cpp\n  mesh_subdivision.cpp\n  procedural.cpp\n  pointcloud.cpp\n  object.cpp\n  osl.cpp\n  particles.cpp\n  pass.cpp\n  curves.cpp\n  scene.cpp\n  shader.cpp\n  shader_graph.cpp\n  shader_nodes.cpp\n  stats.cpp\n  svm.cpp\n  tables.cpp\n  tabulated_sobol.cpp\n  volume.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet defines the include directories required for the BLF library. It includes the current directory (.) and the 'makesrna' directory for project-specific headers.  It also includes external library include directories such as those provided by FreeType.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../makesrna\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${FREETYPE_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Source Files for RenderDoc Library\nDESCRIPTION: This snippet lists the source files that are part of the RenderDoc dynamic library. It includes a C++ source file and header files, ensuring they are known to CMake.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/renderdoc_dynload/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/renderdoc_api.cc\n\n  include/renderdoc_api.hh\n\n  # Without these files listed, they aren't known to CMake.\n  ../../extern/renderdoc/include/renderdoc_app.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet defines system-level include directories. In this case, it is empty which means that no additional system include paths are specified beyond the defaults.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/id_management/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files for the OCIO module.  It lists both C++ source files and header files used in the module, using the `set` command to store the file list in a CMake variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opencolorio/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ocio_capi.cc\n  fallback_impl.cc\n\n  ocio_capi.h\n  ocio_impl.h\n  ocio_shader_shared.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Target for the OneAPI Kernel\nDESCRIPTION: This snippet defines a custom target named `cycles_kernel_oneapi` that depends on the compiled OneAPI kernel library. This target is added to the 'ALL' target, ensuring that the OneAPI kernel is built as part of the overall build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(cycles_kernel_oneapi ALL DEPENDS ${cycles_kernel_oneapi_lib})\n```\n\n----------------------------------------\n\nTITLE: Installing Targets with CMake\nDESCRIPTION: This snippet installs the target libraries (theora, theoraenc, theoradec) to the specified directories. `RUNTIME` is for executables, `LIBRARY` is for shared libraries, and `ARCHIVE` is for static libraries. These destinations are relative to the install prefix.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS theora theoraenc theoradec\n  RUNTIME DESTINATION bin\n  LIBRARY DESTINATION bin\n  ARCHIVE DESTINATION lib\n)\n```\n\n----------------------------------------\n\nTITLE: System Python Testing Options\nDESCRIPTION: This section defines options related to system Python testing.  It enables tests to validate build-related scripts against the system version of Python, which might be older than Blender's.  The path to the system Python executable is also configurable via a CMake cache variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_SYSTEM_PYTHON_TESTS \"\\\nEnable tests validating some build-related scripts against the 'system' version of Python \\\n(buildbots currently can use significantly older versions of Python than Blender's)\"\n  OFF\n)\nmark_as_advanced(WITH_SYSTEM_PYTHON_TESTS)\n# We could use `find_package (Python3 COMPONENTS Interpreter)` to set that value automatically.\n# However, on some buildbots this will give the default Python version of the current virtual\n# environment, which may differ from the OS default Python version.\n# And it would set that global 'python3 exec path' CMake value for all CMake scripts,\n# which could have unexpected and dangerous side effects.\n# So this has to be set explicitly for all builders.\nset(TEST_SYSTEM_PYTHON_EXE \"\" CACHE PATH \"Python executable used to run 'system python' tests\")\nmark_as_advanced(TEST_SYSTEM_PYTHON_EXE)\n```\n\n----------------------------------------\n\nTITLE: Set Source Files (CMake)\nDESCRIPTION: Defines the list of source files (.cpp and .h) that make up the physics engine. These files contain the actual code that will be compiled into the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  CcdConstraint.cpp\n  CcdPhysicsEnvironment.cpp\n  CcdPhysicsController.cpp\n  CcdGraphicController.cpp\n\n  CcdConstraint.h\n  CcdMathUtils.h\n  CcdGraphicController.h\n  CcdPhysicsController.h\n  CcdPhysicsEnvironment.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cycles Install Path - CMake\nDESCRIPTION: This snippet determines the installation path for Cycles based on whether it's being built as a standalone application or as part of Blender. If WITH_BLENDER is enabled, it further adjusts the path based on whether Windows Python debugging is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_BLENDER)\n  set(CYCLES_INSTALL_PATH ${CMAKE_INSTALL_PREFIX})\nelse()\n  set(WITH_CYCLES_BLENDER ON)\n  # WINDOWS_PYTHON_DEBUG needs to write into the user addons folder since it will\n  # be started with --env-system-scripts pointing to the release folder, which will\n  # lack the cycles addon, and we don't want to write into it.\n  if(NOT WINDOWS_PYTHON_DEBUG)\n    set(CYCLES_INSTALL_PATH \"scripts/addons_core/cycles\")\n  else()\n    set(CYCLES_INSTALL_PATH\n      \"$ENV{appdata}/blender foundation/blender/${BLENDER_VERSION}/scripts/addons_core/cycles\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add intern Subdirectory to Build\nDESCRIPTION: This command adds the 'intern' subdirectory to the build process.  The 'intern' directory likely contains source code and further CMakeLists.txt files needed for the project, potentially related to Freestyle or other core functionalities. The function ensures that the CMake configuration in the 'intern' subdirectory is processed during the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(intern)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet defines the source files for the blentranslation library, including both C++ implementation files (.cc) and header files (.hh).  These files comprise the core logic and interface of the blentranslation library, responsible for handling language translations within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/blt_lang.cc\n  intern/blt_translation.cc\n\n  BLT_lang.hh\n  BLT_translation.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet lists the C++ and header files that constitute the rasterizer library. These files implement the core rasterization logic, 2D filters, and related data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  RAS_2DFilter.cpp\n  RAS_2DFilterData.cpp\n  RAS_2DFilterManager.cpp\n  RAS_2DFilterFrameBuffer.cpp\n  RAS_BucketManager.cpp\n  RAS_DebugDraw.cpp\n  RAS_DisplayArrayBucket.cpp\n  RAS_FrameBuffer.cpp\n  RAS_FramingManager.cpp\n  RAS_ICanvas.cpp\n  RAS_IDisplayArray.cpp\n  RAS_IPolygonMaterial.cpp\n  RAS_Rasterizer.cpp\n  RAS_IVertex.cpp\n  RAS_MaterialBucket.cpp\n  RAS_MeshMaterial.cpp\n  RAS_MeshObject.cpp\n  RAS_Polygon.cpp\n  RAS_Shader.cpp\n  RAS_Texture.cpp\n\n  RAS_2DFilterData.h\n  RAS_2DFilter.h\n  RAS_2DFilterManager.h\n  RAS_2DFilterFrameBuffer.h\n  RAS_BucketManager.h\n  RAS_CameraData.h\n  RAS_DebugDraw.h\n  RAS_DisplayArray.h\n  RAS_DisplayArrayBucket.h\n  RAS_FrameBuffer.h\n  RAS_FramingManager.h\n  RAS_ICanvas.h\n  RAS_IDisplayArray.h\n  RAS_IPolygonMaterial.h\n  RAS_Rasterizer.h\n  RAS_IVertex.h\n  RAS_MaterialBucket.h\n  RAS_MaterialShader.h\n  RAS_MeshMaterial.h\n  RAS_MeshObject.h\n  RAS_Polygon.h\n  RAS_Rect.h\n  RAS_Shader.h\n  RAS_Texture.h\n  RAS_Vertex.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenImageDenoise DLLs with Manifests on Windows CMake\nDESCRIPTION: This snippet installs OpenImageDenoise DLLs and their associated manifests on Windows. It checks for the existence of `openimagedenoise.dll` and calls `windows_install_shared_manifest` to install the DLLs. Requires the `windows_install_shared_manifest` macro to be defined elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  if(EXISTS ${LIBDIR}/OpenImageDenoise/bin/openimagedenoise.dll) # 4.0\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise.dll\n        ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_core.dll\n        ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_cpu.dll\n    )\n  endif()\n  # Platforms that have SyCL support.\n  if(EXISTS ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_sycl.dll)\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_sycl.dll\n    )\n  endif()\n  if(EXISTS ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_hip.dll) # 4.1\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_hip.dll\n    )\n  endif()\n  if(EXISTS ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_cuda.dll) # 4.1\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/OpenImageDenoise/bin/OpenImageDenoise_device_cuda.dll\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Executable: gears_c (C)\nDESCRIPTION: Adds an executable named `gears_c` built from a single C source file and links it against several libraries including ghost_lib, string_lib, OpenGL, and platform-specific link libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# Gears (C)\nadd_executable(gears_c\n  ${CMAKE_SOURCE_DIR}/gears/GHOST_C-Test.c\n)\n\ntarget_link_libraries(gears_c\n  ghost_lib\n  string_lib\n  ${OPENGL_gl_LIBRARY}\n  ${CMAKE_DL_LIBS}\n  ${PLATFORM_LINKLIBS}\n)\n```\n\n----------------------------------------\n\nTITLE: Set Compute Shader Sources - CMake\nDESCRIPTION: This snippet defines the list of compute shader source files (SRC_GLSL_COMP) used by the Eevee rendering engine.  These compute shaders perform various calculations and processing tasks within the rendering pipeline.  The shaders are written in GLSL.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_COMP\n  eevee_ambient_occlusion_pass_comp.glsl\n  eevee_depth_of_field_bokeh_lut_comp.glsl\n  eevee_depth_of_field_downsample_comp.glsl\n  eevee_depth_of_field_filter_comp.glsl\n  eevee_depth_of_field_gather_comp.glsl\n  eevee_depth_of_field_hole_fill_comp.glsl\n  eevee_depth_of_field_reduce_comp.glsl\n  eevee_depth_of_field_resolve_comp.glsl\n  eevee_depth_of_field_setup_comp.glsl\n  eevee_depth_of_field_stabilize_comp.glsl\n  eevee_depth_of_field_tiles_dilate_comp.glsl\n  eevee_depth_of_field_tiles_flatten_comp.glsl\n  eevee_film_comp.glsl\n  eevee_film_cryptomatte_post_comp.glsl\n  eevee_film_pass_convert_comp.glsl\n  eevee_hiz_update_comp.glsl\n  eevee_horizon_denoise_comp.glsl\n  eevee_horizon_resolve_comp.glsl\n  eevee_horizon_scan_comp.glsl\n  eevee_horizon_setup_comp.glsl\n  eevee_light_culling_select_comp.glsl\n  eevee_light_culling_sort_comp.glsl\n  eevee_light_culling_tile_comp.glsl\n  eevee_light_culling_zbin_comp.glsl\n  eevee_light_shadow_setup_comp.glsl\n  eevee_lightprobe_sphere_convolve_comp.glsl\n  eevee_lightprobe_sphere_irradiance_comp.glsl\n  eevee_lightprobe_sphere_remap_comp.glsl\n  eevee_lightprobe_sphere_select_comp.glsl\n  eevee_lightprobe_sphere_sunlight_comp.glsl\n  eevee_lightprobe_volume_bounds_comp.glsl\n  eevee_lightprobe_volume_load_comp.glsl\n  eevee_lightprobe_volume_offset_comp.glsl\n  eevee_lightprobe_volume_ray_comp.glsl\n  eevee_lightprobe_volume_world_comp.glsl\n  eevee_lut_comp.glsl\n  eevee_motion_blur_dilate_comp.glsl\n  eevee_motion_blur_flatten_comp.glsl\n  eevee_motion_blur_gather_comp.glsl\n  eevee_ray_denoise_bilateral_comp.glsl\n  eevee_ray_denoise_spatial_comp.glsl\n  eevee_ray_denoise_temporal_comp.glsl\n  eevee_ray_generate_comp.glsl\n  eevee_ray_tile_classify_comp.glsl\n  eevee_ray_tile_compact_comp.glsl\n  eevee_ray_trace_fallback_comp.glsl\n  eevee_ray_trace_planar_comp.glsl\n  eevee_ray_trace_screen_comp.glsl\n  eevee_shadow_clipmap_clear_comp.glsl\n  eevee_shadow_page_allocate_comp.glsl\n  eevee_shadow_page_clear_comp.glsl\n  eevee_shadow_page_defrag_comp.glsl\n  eevee_shadow_page_free_comp.glsl\n  eevee_shadow_page_mask_comp.glsl\n  eevee_shadow_tag_update_comp.glsl\n  eevee_shadow_tag_usage_comp.glsl\n  eevee_shadow_tag_usage_surfels_comp.glsl\n  eevee_shadow_tag_usage_volume_comp.glsl\n  eevee_shadow_tilemap_amend_comp.glsl\n  eevee_shadow_tilemap_bounds_comp.glsl\n  eevee_shadow_tilemap_finalize_comp.glsl\n  eevee_shadow_tilemap_init_comp.glsl\n  eevee_shadow_tilemap_rendermap_comp.glsl\n  eevee_shadow_visibility_comp.glsl\n  eevee_subsurface_convolve_comp.glsl\n  eevee_subsurface_setup_comp.glsl\n  eevee_surfel_cluster_build_comp.glsl\n  eevee_surfel_light_comp.glsl\n  eevee_surfel_list_build_comp.glsl\n  eevee_surfel_list_sort_comp.glsl\n  eevee_surfel_ray_comp.glsl\n  eevee_vertex_copy_comp.glsl\n  eevee_volume_integration_comp.glsl\n  eevee_volume_scatter_comp.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines a variable `SRC` which contains the list of source files required to build the fmtlib library. This includes both header files (.h) and source files (.cc). CMake uses this list to compile and link the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  include/fmt/core.h\n  include/fmt/format-inl.h\n  include/fmt/format.h\n  src/format.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C Compiler Flags for Intel Compiler\nDESCRIPTION: This snippet adds C compiler flags when the compiler is Intel. It enables all warnings, pointer arithmetic warnings and disables unknown pragmas warnings. It uses the `add_check_c_compiler_flags` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_126\n\nLANGUAGE: cmake\nCODE:\n```\nadd_check_c_compiler_flags(\n    C_WARNINGS\n\n    C_WARN_ALL -Wall\n    C_WARN_POINTER_ARITH -Wpointer-arith\n    C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Ray Cast Mask (KX_VehicleWrapper)\nDESCRIPTION: This attribute sets the ray cast mask for the vehicle. This is a bitfield used to determine which objects the vehicle's raycasts will collide with. It affects the vehicle's interaction with the environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n   .. attribute:: rayMask\n\n      Set ray cast mask.\n\n      :type: bitfield\n```\n\n----------------------------------------\n\nTITLE: Shader Installation - CMake\nDESCRIPTION: This CMake snippet uses `delayed_install` to install the compiled OSL shaders (.oso files) and their header files into the specified `CYCLES_INSTALL_PATH}/shader` directory. The install command is delayed to allow for cross-platform compatibility or other installation logic that may need to be applied.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/shaders/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ndelayed_install(\"\" \"${SRC_OSO}\" ${CYCLES_INSTALL_PATH}/shader)\ndelayed_install(\"${CMAKE_CURRENT_SOURCE_DIR}\" \"${SRC_OSL_HEADERS}\" ${CYCLES_INSTALL_PATH}/shader)\n```\n\n----------------------------------------\n\nTITLE: Creating the Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function (specific to the Blender build system) to create the `bf_nodes_shader` library, linking the specified source files, include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_nodes_shader \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: GHOST XDND Option\nDESCRIPTION: This snippet defines the WITH_GHOST_XDND option for enabling drag-and-drop support on X11 using the XDND protocol. It's only relevant if WITH_GHOST_X11 is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GHOST_X11)\n  option(WITH_GHOST_XDND \"Enable drag'n'drop support on X11 using XDND protocol\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Subdirectories with CMake\nDESCRIPTION: Adds multiple subdirectories for various libraries, including `rangetree`, `nanosvg`, `wcwidth`, and `xxhash`. These libraries are included unconditionally.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(rangetree)\nadd_subdirectory(nanosvg)\nadd_subdirectory(wcwidth)\nadd_subdirectory(xxhash)\n```\n\n----------------------------------------\n\nTITLE: Including TBB Directories\nDESCRIPTION: This snippet includes the Threading Building Blocks (TBB) include directories.  This ensures that the necessary header files for TBB are available during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(\n  SYSTEM\n  ${TBB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the script editor space library. It specifies the target name, source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_script/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_script \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the `bf_editor_id_management` library. It specifies paths to both project-specific include files and system include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/id_management/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding EGL Context Source Files (CMake)\nDESCRIPTION: Conditionally adds source files related to the EGL (Embedded-System Graphics Library) context when building on Unix-like systems (excluding macOS) and when the `WITH_OPENGL_BACKEND` flag is enabled.  It appends `GHOST_ContextEGL.cc` and `GHOST_ContextEGL.hh` to the source list. This allows using OpenGL through EGL.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(WITH_OPENGL_BACKEND)\n    list(APPEND SRC\n      intern/GHOST_ContextEGL.cc\n\n      intern/GHOST_ContextEGL.hh\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution with time.sleep\nDESCRIPTION: This snippet pauses the execution of the program for 3 seconds using time.sleep(). This allows the sound to be heard before the application exits. Requires the 'time' module to be imported.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntime.sleep(3)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Windows UTF Conversion\nDESCRIPTION: This snippet conditionally includes the `../../../intern/utfconv` directory in the include paths (`INC`) when the target platform is Windows (WIN32). This enables the use of UTF conversion utilities specific to the Windows operating system. No additional libraries or definitions are added, indicating these utilities are self-contained.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  list(APPEND INC\n    ../../../intern/utfconv\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating the OCIO Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the `bf_intern_opencolorio` library. It specifies the source files, include directories, system include directories, and libraries that the library depends on. The created library contains OCIO-related functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opencolorio/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_opencolorio \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining NOMINMAX for TBB\nDESCRIPTION: This snippet defines the `NOMINMAX` preprocessor definition when TBB is enabled. This prevents conflicts between Windows.h's min/max macros and the STL versions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on RNA Generation\nDESCRIPTION: This snippet adds a dependency on the RNA (Runtime Name Access) generation process.  It ensures that the RNA data structures and functions are generated before the 'bf_nodes_composite' library is built. This is because the compositor nodes may rely on RNA-generated code for accessing node properties and data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes_composite bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding WindowManager Library\nDESCRIPTION: Creates the 'bf_windowmanager' library using the specified source files, include directories, and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib_nolist(bf_windowmanager \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::windowmanager ALIAS bf_windowmanager)\n```\n\n----------------------------------------\n\nTITLE: Installing NumPy\nDESCRIPTION: This CMake code snippet conditionally installs the NumPy library. It checks if the `WITH_PYTHON_INSTALL_NUMPY` variable is enabled. If so, it installs the NumPy directory to the appropriate destination, excluding several subdirectories and file types that are not needed for Blender's use of NumPy.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\n      if(WITH_PYTHON_INSTALL_NUMPY)\n        # Install to the same directory as the source, so debian-like\n        # distributions are happy with their policy.\n        set(_suffix \"site-packages\")\n        if(${PYTHON_NUMPY_PATH} MATCHES \"dist-packages\")\n          set(_suffix \"dist-packages\")\n        endif()\n        install(\n          DIRECTORY ${PYTHON_NUMPY_PATH}/numpy\n          DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n          PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n          PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n          PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n          PATTERN \"oldnumeric\" EXCLUDE            # ./oldnumeric\n          PATTERN \"doc\" EXCLUDE                   # ./doc\n          PATTERN \"tests\" EXCLUDE                 # ./tests\n          PATTERN \"f2py\" EXCLUDE                  # ./f2py - fortran/python interface code, not for blender.\n          PATTERN \"include\" EXCLUDE               # include dirs all over, we won't use NumPy/CAPI\n          PATTERN \"*.h\" EXCLUDE                   # some includes are not in include dirs\n          PATTERN \"*.a\" EXCLUDE                   # ./core/lib/libnpymath.a - for linking, we don't need.\n        )\n        install(\n          DIRECTORY ${PYTHON_NUMPY_PATH}/Cython\n          DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n          PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n          PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n          PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n        )\n        install(\n          FILES ${PYTHON_NUMPY_PATH}/cython.py\n          DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n        )\n        unset(_suffix)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Blender System Info Script - CMake\nDESCRIPTION: This CMake snippet configures and installs the `blender-system-info.sh` script. It retrieves the name of the Python executable, configures the script using `configure_file`, and installs the script to the specified destination. This is done only if `WITH_INSTALL_PORTABLE` is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\n      get_filename_component(PYTHON_EXECUTABLE_NAME_ONLY ${PYTHON_EXECUTABLE} NAME)\n      configure_file(\n        ${CMAKE_SOURCE_DIR}/release/freedesktop/scripts/blender-system-info.sh.in\n        ${CMAKE_BINARY_DIR}/release/freedesktop/scripts/blender-system-info.sh\n        @ONLY\n      )\n      unset(PYTHON_EXECUTABLE_NAME_ONLY)\n      install(\n        PROGRAMS ${CMAKE_BINARY_DIR}/release/freedesktop/scripts/blender-system-info.sh\n        DESTINATION \".\"\n      )\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This snippet lists the source files that constitute the mask editor module. These `.cc` files contain the C++ code for various mask editor functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mask/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  mask_add.cc\n  mask_draw.cc\n  mask_edit.cc\n  mask_editaction.cc\n  mask_ops.cc\n  mask_query.cc\n  mask_relationships.cc\n  mask_select.cc\n  mask_shapekey.cc\n\n  mask_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: GTest Unit Testing Options\nDESCRIPTION: This section defines options to enable various GTest-based unit tests, including general tests, GPU render tests (with optional Vulkan support), GPU backend tests, GPU drawing tests, GPU compositor tests, and UI tests.  The `mark_as_advanced` function is used to hide some of these options from the standard CMake GUI.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_GTESTS \"Enable GTest unit testing\" OFF)\noption(WITH_GPU_RENDER_TESTS \"\\\nEnable GPU render related unit testing (EEVEE, Workbench and Grease Pencil)\"\n  OFF\n)\noption(WITH_GPU_RENDER_TESTS_VULKAN \"\\\nEnable GPU render related unit testing using Vulkan\"\n  OFF\n)\nmark_as_advanced(WITH_GPU_RENDER_TESTS_VULKAN)\noption(WITH_GPU_RENDER_TESTS_HEADED \"\\\nEnable GPU render related unit testing that doesn't work in background mode. \\\nThese tests require an environment with a display server to run. \\\nRequires WITH_GPU_RENDER_TESTS \"\n  OFF\n)\nmark_as_advanced(WITH_GPU_RENDER_TESTS_HEADED)\noption(WITH_GPU_BACKEND_TESTS \"\\\nEnable GPU backend related unit testing\"\n  OFF\n)\noption(WITH_GPU_DRAW_TESTS \"\\\nEnable GPU drawing related unit testing (draw manager)\"\n  OFF\n)\noption(WITH_GPU_COMPOSITOR_TESTS \"Enable regression testing for GPU compositor\" OFF)\noption(WITH_GPU_MESH_PAINT_TESTS \"\\\nEnable visual render-based regression testing for mesh painting\"\n  OFF\n)\noption(WITH_UI_TESTS \"\\\nEnable user-interface tests (Experimental)\"\n  OFF\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Site-Packages with CMake\nDESCRIPTION: This snippet demonstrates installing Python site-packages from a specified directory into a target directory (`${TARGETDIR_SITE_PACKAGES}`). It uses conditional checks to verify the existence of the directory before attempting the installation, and includes exclusion patterns to avoid installing cache files. It accounts for different Python versions and debug/release configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${LIBDIR}/openimageio/lib/python${PYTHON_VERSION}/site-packages)\n  install(\n    DIRECTORY ${LIBDIR}/openimageio/lib/python${PYTHON_VERSION}/site-packages/\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}/\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n    PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n    PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n    PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n  )\nendif()\nif(EXISTS ${LIBDIR}/openimageio/lib/python${PYTHON_VERSION}_debug/site-packages)\n  install(\n    DIRECTORY ${LIBDIR}/openimageio/lib/python${PYTHON_VERSION}_debug/site-packages/\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}/\n    CONFIGURATIONS Debug\n    PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n    PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n    PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n  )\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${USD_LIBRARY_DIR}/python/)\n  install(\n    DIRECTORY ${USD_LIBRARY_DIR}/python/\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n    PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n    PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n    PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n  )\nendif()\nif(EXISTS ${USD_LIBRARY_DIR}/debug/python/)\n  install(\n    DIRECTORY ${USD_LIBRARY_DIR}/debug/python/\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Debug\n    PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n    PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n    PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n  )\nendif()\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${LIBDIR}/materialx/python/Release/MaterialX)\n  install(\n    DIRECTORY ${LIBDIR}/materialx/python/Release/MaterialX\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}/\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n    PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n    PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n    PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n  )\nendif()\nif(EXISTS ${LIBDIR}/materialx/python/Debug/MaterialX)\n  install(\n    DIRECTORY ${LIBDIR}/materialx/python/Debug/MaterialX\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}/\n    CONFIGURATIONS Debug\n    PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n    PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n    PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing FFmpeg Shared Manifests with CMake\nDESCRIPTION: This snippet uses a custom CMake function `windows_install_shared_manifest` to install FFmpeg DLLs. It checks for the existence of specific FFmpeg DLL versions (60 and 59) and falls back to the older version if the newer one is not found. It installs the specified DLLs with the appropriate manifest.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS \"${LIBDIR}/ffmpeg/lib/avcodec-60.dll\")\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/ffmpeg/lib/avcodec-60.dll\n      ${LIBDIR}/ffmpeg/lib/avformat-60.dll\n      ${LIBDIR}/ffmpeg/lib/avdevice-60.dll\n      ${LIBDIR}/ffmpeg/lib/avutil-58.dll\n      ${LIBDIR}/ffmpeg/lib/swscale-7.dll\n      ${LIBDIR}/ffmpeg/lib/swresample-4.dll\n    ALL\n  )\nelse()\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/ffmpeg/lib/avcodec-59.dll\n      ${LIBDIR}/ffmpeg/lib/avformat-59.dll\n      ${LIBDIR}/ffmpeg/lib/avdevice-59.dll\n      ${LIBDIR}/ffmpeg/lib/avutil-57.dll\n      ${LIBDIR}/ffmpeg/lib/swscale-6.dll\n      ${LIBDIR}/ffmpeg/lib/swresample-4.dll\n    ALL\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding and Installing Audaspace Library with CMake\nDESCRIPTION: This CMake code adds the Audaspace library, links the required libraries, sets the SOVERSION property, and configures installation rules. It installs the target, include directories, and configuration files, handling platform-specific installation paths. pkg-config file also is generated and installed if not Windows or Apple platform.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(audaspace ${LIBRARY_TYPE} ${SRC} ${HDR})\ntarget_link_libraries(audaspace ${LIBRARIES})\nset_target_properties(audaspace PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\nif(AUDASPACE_STANDALONE)\n\tinstall(TARGETS audaspace\n\t\tRUNTIME DESTINATION ${BIN_DESTINATION}\n\t\tLIBRARY DESTINATION ${LIB_DESTINATION}\n\t\tARCHIVE DESTINATION ${LIB_DESTINATION}\n\t)\n\n\tinstall(DIRECTORY ${CMAKE_SOURCE_DIR}/include/ DESTINATION include/audaspace)\n\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/Audaspace.h DESTINATION include/audaspace)\n\n\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/packages/pkgconfig/audaspace.pc.in ${CMAKE_CURRENT_BINARY_DIR}/audaspace.pc @ONLY)\n\n\tif(NOT WIN32 AND NOT APPLE)\n\t\tinstall(FILES ${CMAKE_CURRENT_BINARY_DIR}/audaspace.pc DESTINATION \"lib${LIB_SUFFIX}/pkgconfig\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Key Inputs with Keyboard Sensor - Python\nDESCRIPTION: This code shows how to iterate through the inputs of a keyboard sensor and detect specific key presses using the bge.events constants for W, S, A, and D keys. It checks if a key has been just activated and then performs actions based on the key pressed.  It utilizes the KX_INPUT_JUST_ACTIVATED status from bge.logic.  Requires a keyboard sensor named 'Keyboard' to be present.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.events.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   # Do the all keys thing\n   import bge\n\n   co = bge.logic.getCurrentController()\n   # 'Keyboard' is a keyboard sensor\n   sensor = co.sensors[\"Keyboard\"]\n\n   for key, input in sensor.inputs:\n   \t# key[0] == bge.events.keycode = event.type, key[1] = input\n   \tif bge.logic.KX_INPUT_JUST_ACTIVATED in input.queue:\n   \t\tif key == bge.events.WKEY:\n   \t\t\t# Activate Forward!\n   \t\tif key == bge.events.SKEY:\n   \t\t\t# Activate Backward!\n   \t\tif key == bge.events.AKEY:\n   \t\t\t# Activate Left!\n   \t\tif key == bge.events.DKEY:\n   \t\t\t# Activate Right!\n```\n\n----------------------------------------\n\nTITLE: Modifying Object Location in Blender\nDESCRIPTION: This snippet shows how to directly modify an object's location along the Z-axis in Blender using Python. It demonstrates how mathutils types keep a reference to Blender's internal data.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Modifies the Z axis in place.\nbpy.context.object.location.z += 2.0\n\n# Location variable holds a reference to the object too.\nlocation = bpy.context.object.location\nlocation *= 2.0\n\n# Copying the value drops the reference so the value can be passed to\n# functions and modified without unwanted side effects.\nlocation = bpy.context.object.location.copy()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies - CMake\nDESCRIPTION: This CMake snippet adds a dependency on the `bf_rna` library, ensuring that the RNA library is built before the Freestyle library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_freestyle bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite (Conditional)\nDESCRIPTION: Conditionally configures a test suite for the Grease Pencil editor library if the `WITH_GTESTS` option is enabled. It defines the test source files, include directories, and library dependencies for the test suite. Uses `blender_add_test_suite_lib` macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/grease_pencil/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/grease_pencil_merge_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n  )\n  blender_add_test_suite_lib(editor_grease_pencil \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions for GCC and Windows\nDESCRIPTION: This snippet adds compiler definitions based on the operating system. For Unix-like systems (excluding macOS), it defines '_GLIBCXX_PERMIT_BACKWARD_HASH' to suppress warnings related to deprecated headers. For Windows, it defines 'NOMINMAX', 'WIN32_LEAN_AND_MEAN', and 'BOOST_DEBUG_PYTHON'. It also defines 'BOOST_ALL_NO_LIB' to prevent automatic linking to Boost libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  add_definitions(-D_GLIBCXX_PERMIT_BACKWARD_HASH)\nendif()\nif(WIN32)\n  add_definitions(-DNOMINMAX -DWIN32_LEAN_AND_MEAN -DBOOST_DEBUG_PYTHON)\nendif()\nadd_definitions(-DBOOST_ALL_NO_LIB)\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Header Files\nDESCRIPTION: Defines the source and header files that make up the Cycles rendering session. The `SRC` variable lists the C++ source files, and the `SRC_HEADERS` variable lists the corresponding header files. These files contain the implementation details for the session.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/session/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  buffers.cpp\n  denoising.cpp\n  merge.cpp\n  session.cpp\n  tile.cpp\n)\n\nset(SRC_HEADERS\n  buffers.h\n  display_driver.h\n  denoising.h\n  merge.h\n  output_driver.h\n  session.h\n  tile.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating an alias for the xxHash library - CMake\nDESCRIPTION: This snippet creates an alias named `bf::extern::xxhash` for the `extern_xxhash` library. This allows other parts of the project to refer to the xxHash library using the alias, providing a consistent and organized way to access external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xxhash/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf::extern::xxhash ALIAS extern_xxhash)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for gflags\nDESCRIPTION: This snippet sets the include directories for the gflags library, which allows the compiler to find the necessary header files during compilation. 'src' and 'src/gflags' are added to the include path.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  src\n  src/gflags\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Library\nDESCRIPTION: This snippet creates the `bf_intern_clog` library using the specified source files, include directories, and dependencies. It also creates an alias `bf::intern::clog` for the library, making it easier to reference in other parts of the project.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/clog/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_clog \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::clog ALIAS bf_intern_clog)\n```\n\n----------------------------------------\n\nTITLE: Configuring Audaspace Python Bindings with CMake\nDESCRIPTION: This snippet configures and builds Python bindings for Audaspace. It defines source and header files, conditionally appends files based on WITH_FFTW, creates a shared library, links it to Audaspace and Python libraries, sets target properties, and installs the library and headers if AUDASPACE_STANDALONE is enabled. It also configures a Python module if WITH_PYTHON_MODULE is enabled, including handling platform-specific build commands and installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n\tset(PYTHON_SRC\n\t\tbindings/python/PyAPI.cpp\n\t\tbindings/python/PyDevice.cpp\n\t\tbindings/python/PyDynamicMusic.cpp\n\t\tbindings/python/PyHandle.cpp\n\t\tbindings/python/PyPlaybackManager.cpp\n\t\tbindings/python/PySequence.cpp\n\t\tbindings/python/PySequenceEntry.cpp\n\t\tbindings/python/PySound.cpp\n\t\tbindings/python/PySource.cpp\n\t\tbindings/python/PyThreadPool.cpp\n\t)\n\tset(PYTHON_HDR\n\t\tbindings/python/PyAPI.h\n\t\tbindings/python/PyDevice.h\n\t\tbindings/python/PyDynamicMusic.h\n\t\tbindings/python/PyHandle.h\n\t\tbindings/python/PyPlaybackManager.h\n\t\tbindings/python/PySequence.h\n\t\tbindings/python/PySequenceEntry.h\n\t\tbindings/python/PySound.h\n\t\tbindings/python/PySource.h\n\t\tbindings/python/PyThreadPool.h\n\t)\n\n\tif(WITH_FFTW)\n\t\tlist(APPEND PYTHON_SRC\n\t\t\tbindings/python/PyHRTF.cpp\n\t\t\tbindings/python/PyImpulseResponse.cpp\n\t\t\t)\n\t\tlist(APPEND PYTHON_HDR\n\t\t\tbindings/python/PyHRTF.h\n\t\t\tbindings/python/PyImpulseResponse.h\n\t\t\t)\n\tendif()\n\n\tadd_library(audaspace-py ${LIBRARY_TYPE} ${PYTHON_SRC} ${PYTHON_HDR})\n\ttarget_link_libraries(audaspace-py audaspace ${PYTHON_LIBRARIES})\n\tset_target_properties(audaspace-py PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\n\tif(AUDASPACE_STANDALONE)\n\t\tinstall(TARGETS audaspace-py\n\t\t\tRUNTIME DESTINATION ${BIN_DESTINATION}\n\t\t\tLIBRARY DESTINATION ${LIB_DESTINATION}\n\t\t\tARCHIVE DESTINATION ${LIB_DESTINATION}\n\t\t)\n\n\t\tinstall(FILES ${PYTHON_HDR} DESTINATION include/audaspace/python)\n\tendif()\n\n\tif(WITH_PYTHON_MODULE)\n\t\tset(PYTHON_SOURCE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/bindings/python)\n\t\tconfigure_file(${PYTHON_SOURCE_DIRECTORY}/setup.py.in ${CMAKE_CURRENT_BINARY_DIR}/setup.py ESCAPE_QUOTES @ONLY)\n\n\t\tif(APPLE)\n\t\t\tadd_custom_command(OUTPUT build COMMAND MACOSX_DEPLOYMENT_TARGET=${CMAKE_OSX_DEPLOYMENT_TARGET} ${PYTHON_EXECUTABLE} setup.py build DEPENDS ${PYTHON_SRC} ${PYTHON_HDR} setup.py)\n\t\telseif(WIN32)\n\t\t\tset(ENV{VS100COMNTOOLS} $ENV{VS120COMNTOOLS})\n\t\t\tadd_custom_command(OUTPUT build COMMAND ${PYTHON_EXECUTABLE} setup.py build DEPENDS ${PYTHON_SRC} ${PYTHON_HDR} setup.py)\n\t\telse()\n\t\t\tadd_custom_command(OUTPUT build COMMAND ${PYTHON_EXECUTABLE} setup.py build DEPENDS ${PYTHON_SRC} ${PYTHON_HDR} setup.py)\n\t\tendif()\n\t\tadd_custom_target(pythonmodule ALL DEPENDS build SOURCES ${PYTHON_SOURCE_DIRECTORY}/setup.py.in ${PYTHON_SRC} ${PYTHON_HDR})\n\t\tadd_dependencies(pythonmodule audaspace)\n\n\t\tinstall(CODE \"EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} setup.py install --root=\\$ENV{DESTDIR} --prefix=${CMAKE_INSTALL_PREFIX})\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the Quadriflow library. It sets both internal and system include paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  src\n  3rd/pcg32\n  3rd/pss\n  ${LEMON_INCLUDE_DIRS}\n  ${LEMON_GEN_DIR}\n)\n\nset(INC_SYS\n  ${EIGEN3_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Mantaflow Library - CMake\nDESCRIPTION: This snippet defines the libraries to link with the Mantaflow library, including TBB, Python link flags, and Python libraries. It then calls `blender_add_lib` to create the `extern_mantaflow` library, using the defined source files, include paths, and libraries. Finally, it explicitly links OpenVDB libraries to the `extern_mantaflow` target to ensure proper dependency handling.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::optional::tbb\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n)\n\nblender_add_lib(extern_mantaflow \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\nif(WITH_OPENVDB)\n  # The VDB libs above are only added to as INTERFACE libs by blender_add_lib,\n  # meaning extern_mantaflow itself actually does not have a dependency on the\n  # OpenVDB libraries, and CMAKE is free to link the VDB libraries before\n  # extern_mantaflow causing linker errors on linux. By explicitly declaring\n  # a dependency here, CMAKE will do the right thing.\n  target_link_libraries(extern_mantaflow PRIVATE ${OPENVDB_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Clang C Compiler Flags\nDESCRIPTION: This snippet adds C compiler flags when using the Clang compiler. Similar to the GCC configuration, it enables and disables specific warnings with `-Wall` and `-Wno-*` prefixes. Some flags are explicitly errors, such as `-Werror=implicit-function-declaration` and `-Werror=return-type`.  Also includes flags specific to clang.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_117\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  # Matches both \"Clang\" & \"AppleClang\" on macOS.\n\n  add_check_c_compiler_flags(\n    C_WARNINGS\n\n    # Strange, clang complains these are not supported, but then uses them.\n    C_WARN_ALL -Wall\n    C_WARN_ERROR_IMPLICIT_FUNCTION_DECLARATION -Werror=implicit-function-declaration\n    C_WARN_ERROR_RETURN_TYPE -Werror=return-type\n    C_WARN_NO_AUTOLOGICAL_COMPARE -Wno-tautological-compare\n    C_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    C_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n    C_WARN_STRICT_PROTOTYPES -Wstrict-prototypes\n    C_WARN_MISSING_PROTOTYPES -Wmissing-prototypes\n    C_WARN_UNUSED_PARAMETER -Wunused-parameter\n    C_WARN_UNDEF -Wundef\n    C_WARN_UNDEF_PREFIX -Wundef-prefix\n\n    C_WARN_ERROR_UNGUARDED_AVAILABILITY_NEW -Werror=unguarded-availability-new\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories required for compiling the OpenEXR image format integration code.  It includes the current directory, parent directories, and the utfconv library. This ensures that the necessary header files are available during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/openexr/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n  ../../../../../intern/utfconv\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (Cycles Rendering)\nDESCRIPTION: This snippet conditionally defines `-DWITH_CYCLES` if `WITH_CYCLES` is enabled. This enables support for the Cycles rendering engine, which is an alternative rendering engine to the default Blender Render engine. Enables Cycles rendering integration within the game engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES)\n  add_definitions(-DWITH_CYCLES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unsetting Animation Clip Variable\nDESCRIPTION: This snippet unsets the `OPENCOLLADA_ANIMATION_CLIP` variable from the CMake cache. This is done to ensure that subsequent builds re-evaluate the location of the animation clip header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nunset(OPENCOLLADA_ANIMATION_CLIP CACHE)\n```\n\n----------------------------------------\n\nTITLE: Adding Include Directories\nDESCRIPTION: This snippet adds the defined include directories to the compiler's include path. It uses the `include_directories` command to add both project-specific include directories (`${INC}`) and system include directories (`${INC_SYS}`). The `SYSTEM` keyword indicates that `${INC_SYS}` contains system headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/integrator/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: Defines the source files that make up the armature editor library. These files contain the implementation of the armature editing functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/armature/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  armature_add.cc\n  armature_edit.cc\n  armature_naming.cc\n  armature_ops.cc\n  armature_relations.cc\n  armature_select.cc\n  armature_skinning.cc\n  armature_utils.cc\n  bone_collections.cc\n  editarmature_undo.cc\n  meshlaplacian.cc\n  pose_edit.cc\n  pose_lib_2.cc\n  pose_select.cc\n  pose_slide.cc\n  pose_transform.cc\n  pose_utils.cc\n\n  armature_intern.hh\n  meshlaplacian.h\n)\n```\n\n----------------------------------------\n\nTITLE: Enable NDOF input devices\nDESCRIPTION: This option enables support for NDOF (Non-Degrees Of Freedom) input devices like SpaceNavigator.  When enabled, it allows the application to receive input from these specialized devices for 3D navigation and manipulation.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_INPUT_NDOF \"Enable NDOF input devices (SpaceNavigator and friends)\" ON)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (PLY) - CMake\nDESCRIPTION: This snippet conditionally appends the PLY I/O library and defines a preprocessor definition if the WITH_IO_PLY flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_PLY)\n  list(APPEND LIB\n    bf_io_ply\n  )\n  add_definitions(-DWITH_IO_PLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating bf_rna Library (CMake)\nDESCRIPTION: This CMake code uses the `blender_add_lib` macro to create the `bf_rna` library. It passes the library name, source files (`${SRC}`), include directories (`${INC}`), system include directories (`${INC_SYS}`), and dependent libraries (`${LIB}`) as arguments to the macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_rna \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flag (GCC/Clang)\nDESCRIPTION: This snippet adds a compiler flag to suppress self-assignment warnings when using GCC or Clang compilers. This helps to reduce noise during the build process by ignoring warnings that are not critical.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzma/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_c_flag(\n    \"-Wno-self-assign\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB) - CMake\nDESCRIPTION: Defines the library dependencies for the modifier library. Uses the 'bf::' namespace convention for Blender libraries.  Specifies both public and private dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PUBLIC bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Blendfile Library Linking Test (CMake)\nDESCRIPTION: This CMake snippet adds a test for blendfile library linking.  It specifies the Python script to use for the test (`bl_blendfile_liblink.py`), the source test directory, and the output directory. The Python script will perform the library linking test within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n    blendfile_liblink\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_liblink.py --\n    --src-test-dir ${TEST_SRC_DIR}/\n    --output-dir ${TEST_OUT_DIR}/blendfile_io/\n  )\n```\n\n----------------------------------------\n\nTITLE: Building BlendThumb DLL (Windows)\nDESCRIPTION: This snippet configures the build process for the BlendThumb DLL on Windows. It defines Windows-specific source files, adds a compiler definition to disable min/max macros, creates a shared library named BlendThumb, links required libraries (blenlib, dbghelp, Version, Comctl32), and sets linker flags to optimize the binary and avoid default libraries in debug mode.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blendthumb/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  # -----------------------------------------------------------------------------\n  # Build `BlendThumb.dll`\n\n  set(SRC_WIN32\n    src/blendthumb_win32.cc\n    src/blendthumb_win32.def\n    src/blendthumb_win32.rc\n    src/blendthumb_win32_dll.cc\n  )\n\n  add_definitions(-DNOMINMAX)\n\n  add_library(BlendThumb SHARED ${SRC} ${SRC_WIN32})\n\n  target_link_libraries(BlendThumb bf_blenlib dbghelp.lib Version.lib Comctl32.lib)\n  # `blenlib` drags in a whole bunch of dependencies on shared libraries, none of which are used\n  # by `blenthumb`, but will cause load issues since the debug linker will not eliminate them.\n  # Link with /OPT:ref to force elimination of those unused dependencies this is already\n  # enabled by default on the release mode flags.\n  set_target_properties(BlendThumb PROPERTIES LINK_FLAGS \"/OPT:ref\")\n  set_target_properties(BlendThumb PROPERTIES LINK_FLAGS_DEBUG \"/NODEFAULTLIB:msvcrt\")\n  set_target_properties(BlendThumb PROPERTIES VS_GLOBAL_VcpkgEnabled \"false\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Testing SIMD Support - CMake\nDESCRIPTION: This snippet tests for SIMD (Single Instruction, Multiple Data) support. It first checks for Neon support and then falls back to SSE support. The results of these tests are stored in variables like SUPPORT_NEON_BUILD, which can be used to enable or disable SIMD optimizations in the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_95\n\nLANGUAGE: CMake\nCODE:\n```\n# Test SIMD support, before platform includes to determine if sse2neon is needed.\nif(WITH_CPU_SIMD)\n  set(COMPILER_SSE42_FLAG)\n\n  # Test Neon first since macOS Arm can compile and run x86-64 SSE binaries.\n  test_neon_support()\n  if(NOT SUPPORT_NEON_BUILD)\n    test_sse_support(COMPILER_SSE42_FLAG)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Static Plugins Variable\nDESCRIPTION: This snippet sets the `STATIC_PLUGINS` variable to an empty string. This variable is likely used to define which plugins should be statically linked into the Audaspace library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(STATIC_PLUGINS \"\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the project. It includes both relative paths within the project and a path derived from the CMake binary directory. These paths are used by the compiler to locate header files during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  include\n  ../intern\n  ../../editors/include\n  ../../makesrna\n  ../../modifiers\n  ../../io/common\n  ../../io/csv\n  ../../io/ply\n  ../../io/stl\n  ../../io/wavefront_obj\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets include directories for the imbuf library.  It includes public directories within the project, such as './movie', '../makesrna', and '../../../intern/memutil', as well as system include directories for external libraries like JPEG, ZLIB, and OpenImageIO.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ./movie\n  ../makesrna\n  ../../../intern/memutil\n)\n\nset(INC_SYS\n  ${JPEG_INCLUDE_DIR}\n  ${ZLIB_INCLUDE_DIRS}\n  ${OPENIMAGEIO_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Data and Preventing Access Errors in Blender Python\nDESCRIPTION: This example illustrates how Blender prevents access to removed data blocks to avoid crashes. It creates a mesh, removes it, and then attempts to access its name. Blender raises a ReferenceError to prevent the access of invalidated memory.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.data.meshes.new(name=\"MyMesh\")\n# Normally the script would use the mesh here.\nbpy.data.meshes.remove(mesh)\nprint(mesh.name)  # <- Give an exception rather than crashing:\n\n# ReferenceError: StructRNA of type Mesh has been removed\n```\n\n----------------------------------------\n\nTITLE: Adding Definition for Animation Clip Support\nDESCRIPTION: This snippet conditionally adds a preprocessor definition `WITH_OPENCOLLADA_ANIMATION_CLIP` if the `OPENCOLLADA_ANIMATION_CLIP` variable is defined, indicating that the animation clip header file was found.  This enables animation clip related code during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(OPENCOLLADA_ANIMATION_CLIP)\n  add_definitions(-DWITH_OPENCOLLADA_ANIMATION_CLIP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files required for building the shader effects library. These are the actual .cc and .h files that contain the implementation of various shader effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/shader_fx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/FX_shader_util.h\n  intern/FX_ui_common.cc\n\n  intern/FX_shader_blur.cc\n  intern/FX_shader_colorize.cc\n  intern/FX_shader_flip.cc\n  intern/FX_shader_glow.cc\n  intern/FX_shader_pixel.cc\n  intern/FX_shader_rim.cc\n  intern/FX_shader_shadow.cc\n  intern/FX_shader_swirl.cc\n  intern/FX_shader_util.cc\n  intern/FX_shader_wave.cc\n\n  intern/FX_ui_common.h\n  FX_shader_types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding dependency on bf_rna\nDESCRIPTION: Adds a dependency of the bf_nodes library on the bf_rna library, ensuring that bf_rna is built before bf_nodes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Creating the Rigid Body Library\nDESCRIPTION: This CMake command uses the `blender_add_lib` macro to create the 'bf_intern_rigidbody' library. It takes the source files, include directories (local and system), and library dependencies as input. This command builds the library from the specified source files and links it against the required libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/rigidbody/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_rigidbody \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: GLSL to C Conversion\nDESCRIPTION: This snippet iterates through a list of GLSL files (`GLSL_SRC`) and converts each GLSL file into a corresponding C file using the `glsl_to_c` function. The resulting C files are stored in the `GLSL_C` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(GLSL_FILE ${GLSL_SRC})\n  glsl_to_c(${GLSL_FILE} GLSL_C)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Alembic support\nDESCRIPTION: This snippet configures Alembic support by adding the WITH_ALEMBIC definition and including the necessary include directories. It enables the program to utilize Alembic libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  include_directories(\n    SYSTEM\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating the GHOST Library (CMake)\nDESCRIPTION: Finally, this line creates the `bf_intern_ghost` library using the source files, include directories, and libraries defined previously. It uses the `blender_add_lib` function, which is a custom function provided by Blender's build system. This command links all the compiled object files into a shared library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_ghost \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Freestyle Dependency\nDESCRIPTION: This snippet conditionally adds a compiler definition WITH_FREESTYLE if WITH_FREESTYLE is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage Support\nDESCRIPTION: This CMake snippet configures code coverage support for GCC. It checks if code coverage is enabled and if the compiler is GCC. If both conditions are met, it sets the compiler flags for code coverage and marks them as advanced options.  This is activated only for Debug targets.  It also warns the user if code coverage is enabled with a non-GCC compiler.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_COMPILER_CODE_COVERAGE \"\\\nBuild and link with code coverage support (only for Debug targets).\"\n  OFF\n)\nmark_as_advanced(WITH_COMPILER_CODE_COVERAGE)\n\nif(WITH_COMPILER_CODE_COVERAGE)\n  if(NOT CMAKE_COMPILER_IS_GNUCC)\n    message(WARNING \"WITH_COMPILER_CODE_COVERAGE only works with GCC currently.\")\n    set(WITH_COMPILER_CODE_COVERAGE OFF)\n  endif()\nendif()\n\nif(WITH_COMPILER_CODE_COVERAGE)\n  set(_code_coverage_defaults \"--coverage\")\n  set(COMPILER_CODE_COVERAGE_CFLAGS\n    ${_code_coverage_defaults} CACHE STRING\n    \"C flags for code coverage\"\n  )\n  mark_as_advanced(COMPILER_CODE_COVERAGE_CFLAGS)\n  set(COMPILER_CODE_COVERAGE_\n    CXXFLAGS ${_code_coverage_defaults} CACHE STRING\n    \"C++ flags for code coverage\"\n  )\n  mark_as_advanced(COMPILER_CODE_COVERAGE_CXXFLAGS)\n  unset(_code_coverage_defaults)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Requests Dependencies - CMake\nDESCRIPTION: This CMake snippet iterates through a list of Python request dependencies ('certifi', 'chardet', 'charset_normalizer', 'idna', 'urllib3') and installs each dependency if it exists in the specified directory. It excludes cache and compiled Python files during the installation. It also installs `six.py` if it exists.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\n        set(_requests_deps \"certifi\" \"chardet\" \"charset_normalizer\" \"idna\" \"urllib3\")\n        foreach(_requests_dep ${_requests_deps})\n          if(EXISTS ${PYTHON_REQUESTS_PATH}/${_requests_dep})\n            install(\n              DIRECTORY ${PYTHON_REQUESTS_PATH}/${_requests_dep}\n              DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n              PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n              PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n              PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n            )\n          endif()\n        endforeach()\n        if(EXISTS ${PYTHON_REQUESTS_PATH}/six.py)\n          install(\n            FILES ${PYTHON_REQUESTS_PATH}/six.py\n            DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n          )\n        endif()\n        unset(_requests_dep)\n        unset(_requests_deps)\n        unset(_suffix)\n```\n\n----------------------------------------\n\nTITLE: Add Executable: multitest_c (C)\nDESCRIPTION: Adds an executable named `multitest_c` built from multiple C source files and links it against various libraries, including blenfont_lib, bli_lib, gpu_lib, ghost_lib, string_lib, numaapi_lib, guardedalloc_lib, wcwidth_lib, OpenGL, Freetype, ZLIB, and platform-specific link libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\n# MultiTest (C)\nadd_executable(multitest_c\n  ${CMAKE_SOURCE_DIR}/multitest/Basic.c\n  ${CMAKE_SOURCE_DIR}/multitest/EventToBuf.c\n  ${CMAKE_SOURCE_DIR}/multitest/MultiTest.c\n  ${CMAKE_SOURCE_DIR}/multitest/ScrollBar.c\n  ${CMAKE_SOURCE_DIR}/multitest/Util.c\n  ${CMAKE_SOURCE_DIR}/multitest/WindowData.c\n  ${CMAKE_SOURCE_DIR}/multitest/stubs.c\n)\n\n\ntarget_link_libraries(multitest_c\n  blenfont_lib\n  bli_lib\n  gpu_lib\n  # imbuf_lib\n  ghost_lib\n  bli_lib  # again...\n  string_lib\n  numaapi_lib\n  guardedalloc_lib\n  wcwidth_lib\n  ${OPENGL_gl_LIBRARY}\n  ${FREETYPE_LIBRARIES} ${BROTLI_LIBRARIES}\n  ${ZLIB_LIBRARIES}\n  ${CMAKE_DL_LIBS}\n  ${PLATFORM_LINKLIBS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This section lists all the source files (.cc and .hh) that make up the PLY I/O library. These files contain the actual implementation of the PLY import and export functionalities. They are grouped logically by their role (exporter, importer, core I/O).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/ply/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  exporter/ply_export.cc\n  exporter/ply_export_data.cc\n  exporter/ply_export_header.cc\n  exporter/ply_export_load_plydata.cc\n  exporter/ply_file_buffer.cc\n  exporter/ply_file_buffer_ascii.cc\n  exporter/ply_file_buffer_binary.cc\n  importer/ply_import.cc\n  importer/ply_import_buffer.cc\n  importer/ply_import_data.cc\n  importer/ply_import_mesh.cc\n  IO_ply.cc\n\n  exporter/ply_export.hh\n  exporter/ply_export_data.hh\n  exporter/ply_export_header.hh\n  exporter/ply_export_load_plydata.hh\n  exporter/ply_file_buffer.hh\n  exporter/ply_file_buffer_ascii.hh\n  exporter/ply_file_buffer_binary.hh\n  importer/ply_import.hh\n  importer/ply_import_buffer.hh\n  importer/ply_import_data.hh\n  importer/ply_import_mesh.hh\n  IO_ply.hh\n\n  intern/ply_data.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Threading with Blender Example (Supported)\nDESCRIPTION: This code demonstrates a supported way to use threading in Blender. The threads are created and then explicitly joined using `threading.join()`, ensuring that they complete before the script exits. This prevents potential crashes caused by threads running after the script finishes.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport threading\nimport time\n\ndef prod():\n    print(threading.current_thread().name, \"Starting\")\n\n    # Do something vaguely useful.\n    import bpy\n    from mathutils import Vector\n    from random import random\n\n    prod_vec = Vector((random() - 0.5, random() - 0.5, random() - 0.5))\n    print(\"Prodding\", prod_vec)\n    bpy.data.objects[\"Cube\"].location += prod_vec\n    time.sleep(random() + 1.0)\n    # Finish.\n\n    print(threading.current_thread().name, \"Exiting\")\n\nthreads = [threading.Thread(name=\"Prod %d\" % i, target=prod) for i in range(10)]\n\n\nprint(\"Starting threads...\")\n\nfor t in threads:\n    t.start()\n\nprint(\"Waiting for threads to finish...\")\n\nfor t in threads:\n    t.join()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the source files that comprise the Moto library. This includes C++ source files (.cpp), header files (.h), and inline files (.inl) that implement the library's functionality, such as matrix and vector operations.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/moto/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n\tintern/MT_CmMatrix4x4.cpp\n\tintern/MT_Frustum.cpp\n\tintern/MT_Matrix3x3.cpp\n\tintern/MT_Matrix4x4.cpp\n\tintern/MT_Quaternion.cpp\n\tintern/MT_Transform.cpp\n\tintern/MT_Vector2.cpp\n\tintern/MT_Vector3.cpp\n\tintern/MT_Vector4.cpp\n\tintern/MT_random.cpp\n\n\tinclude/MT_CmMatrix4x4.h\n\tinclude/MT_Config.h\n\tinclude/MT_Frustum.h\n\tinclude/MT_Matrix3x3.h\n\tinclude/MT_Matrix4x4.h\n\tinclude/MT_MinMax.h\n\tinclude/MT_Optimize.h\n\tinclude/MT_Quaternion.h\n\tinclude/MT_Scalar.h\n\tinclude/MT_Stream.h\n\tinclude/MT_Transform.h\n\tinclude/MT_Vector2.h\n\tinclude/MT_Vector3.h\n\tinclude/MT_Vector4.h\n\tinclude/MT_random.h\n\n\tinclude/MT_Frustum.inl\n\tinclude/MT_Matrix3x3.inl\n\tinclude/MT_Matrix4x4.inl\n\tinclude/MT_Quaternion.inl\n\tinclude/MT_Vector2.inl\n\tinclude/MT_Vector3.inl\n\tinclude/MT_Vector4.inl\n)\n```\n\n----------------------------------------\n\nTITLE: Define Include Directories (Internal)\nDESCRIPTION: Defines the internal include directories for the URI conversion library.  In this case, it specifies the current directory ('.') as an include path. This allows the compiler to find header files within the project's internal structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/uriconvert/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Uncached Variables - CMake\nDESCRIPTION: This snippet initializes several variables that are not intended to be cached by CMake. This ensures that these variables are set to default values for each build, avoiding issues with stale values from previous builds. Some variables are platform dependent and set to empty strings to prevent uninitialized warnings.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_92\n\nLANGUAGE: CMake\nCODE:\n```\n# InitialIze Un-cached Vars, Avoid Unused Warning\n\n# linux only, not cached\nset(WITH_BINRELOC OFF)\n\n# MACOSX only, set to avoid uninitialized\nset(EXETYPE \"\")\n\n# C/C++ flags\nset(PLATFORM_CFLAGS)\n\n# these are added to later on.\nset(C_WARNINGS)\nset(CXX_WARNINGS)\n\n# NOTE: These flags are intended for situations where it's impractical to\n# suppress warnings by modifying the code or for code which is maintained externally.\n# For GCC this typically means adding `-Wno-*` arguments to negate warnings\n# that are useful in the general case.\nset(C_REMOVE_STRICT_FLAGS)\nset(CXX_REMOVE_STRICT_FLAGS)\n\n# Libraries to link to targets in setup_platform_linker_libs\nset(PLATFORM_LINKLIBS \"\")\n\n# Added to target linker flags in setup_platform_linker_flags\n# - CMAKE_EXE_LINKER_FLAGS\n# - CMAKE_EXE_LINKER_FLAGS_DEBUG\nset(PLATFORM_LINKFLAGS \"\")\nset(PLATFORM_LINKFLAGS_DEBUG \"\")\nset(PLATFORM_LINKFLAGS_RELEASE \"\")\nset(PLATFORM_LINKFLAGS_EXECUTABLE \"\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines include directories required for compiling the IK plugin. The '.' represents the current directory. Additional directories are conditionally added based on whether specific IK solvers (IK Solver, ITASC) are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Platform specific includes and libraries\nDESCRIPTION: This snippet appends the PTHREADS include directory and libraries to INC_SYS and LIB respectively if the platform is Windows and not Unix, and if the PTHREADS_LIBRARIES variable is defined. This handles including pthread support for Windows builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND NOT UNIX)\n  list(APPEND INC_SYS\n    ${PTHREADS_INC}\n  )\n  if(DEFINED PTHREADS_LIBRARIES)\n    list(APPEND LIB\n      ${PTHREADS_LIBRARIES}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Printing SIMD instructions used status - CMake\nDESCRIPTION: This snippet prints a message about the SIMD instructions being used based on the detected support for Neon or SSE42.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_98\n\nLANGUAGE: cmake\nCODE:\n```\nif(FIRST_RUN)\n  if(WITH_CPU_SIMD)\n    if(SUPPORT_NEON_BUILD)\n      if(SSE2NEON_FOUND)\n        message(STATUS \"Neon SIMD instructions enabled\")\n      else()\n        message(STATUS \"Neon SIMD instructions detected but unused, requires sse2neon\")\n      endif()\n    elseif(SUPPORT_SSE42_BUILD)\n      message(STATUS \"SSE42 SIMD instructions enabled\")\n    else()\n      message(STATUS \"No SIMD instructions detected\")\n    endif()\n  else()\n    message(STATUS \"SIMD instructions disabled\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the `bf_io_collada` library. It specifies the source files, include directories, system include directories, and library dependencies defined in the previous snippets.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_collada \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Bone in Edit Mode (Python)\nDESCRIPTION: This snippet demonstrates how to get the currently active bone. This is only valid when the armature is in Edit-Mode. The value returned is an edit bone.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.active_bone\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet defines variables for include directories. INC is set to the current directory ('.'). INC_SYS is populated with Audaspace and potentially Python include directories based on configuration flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/audaspace/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${AUDASPACE_C_INCLUDE_DIRS}\n  ${AUDASPACE_PY_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries CMake\nDESCRIPTION: This snippet defines the libraries required for linking. It includes internal libraries like `cycles_scene`, `cycles_session`, and `cycles_graph`, as well as external libraries such as Epoxy and Boost Python. The `cycles_external_libraries_append` function is used to add external dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_scene\n  cycles_session\n  cycles_graph\n  ${Epoxy_LIBRARIES}\n  ${BOOST_PYTHON_LIBRARIES}\n)\ncycles_external_libraries_append(LIB)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: This snippet defines the source files for the io_common library. It includes both .cc and .h files that constitute the library's implementation and interface. These files contain the actual code that will be compiled and linked into the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/common/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/abstract_hierarchy_iterator.cc\n  intern/dupli_parent_finder.cc\n  intern/dupli_persistent_id.cc\n  intern/object_identifier.cc\n  intern/orientation.cc\n  intern/path_util.cc\n  intern/string_utils.cc\n  intern/subdiv_disabler.cc\n\n  IO_abstract_hierarchy_iterator.h\n  IO_dupli_persistent_id.hh\n  IO_orientation.hh\n  IO_path_util.hh\n  IO_path_util_types.hh\n  IO_string_utils.hh\n  IO_subdiv_disabler.hh\n  IO_types.hh\n  intern/dupli_parent_finder.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This code snippet sets the include directories for the edit mesh library. It includes paths to necessary header files for the project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../uvedit\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (CMake)\nDESCRIPTION: This snippet defines the `LIB` variable as a list of library names that the Cycles unit tests depend on. These libraries include modules related to kernel, integrator, scene, session, BVH, graph, subdivision, device, and utilities. `cycles_external_libraries_append` is likely a custom function to incorporate external library paths. Includes directories specified via ${INC} are added to the project using `include_directories(${INC})`.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_kernel\n  cycles_integrator\n  cycles_scene\n  cycles_session\n  cycles_bvh\n  cycles_graph\n  cycles_subd\n  cycles_device\n  cycles_util\n)\ncycles_external_libraries_append(LIB)\n\ninclude_directories(${INC})\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Batch Files (CMake)\nDESCRIPTION: This snippet installs several Windows batch files to the executable directory. The `blender_system_info.cmd` file is generated from a template, and other batch files like `blender_debug_gpu.cmd` are directly copied. WITH_CYCLES determines if `blender_debug_cycles.cmd` is installed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\n    install(\n      INPUT ${CMAKE_BINARY_DIR}/release/windows/batch/blender_system_info.with_vars.cmd.in\n    )\n    install(\n      FILES\n      ${CMAKE_BINARY_DIR}/release/windows/batch/blender_system_info_$<CONFIG>.cmd\n      DESTINATION ${TARGETDIR_EXE}\n      RENAME blender_system_info.cmd\n    )\n    if(WITH_CYCLES)\n      install(\n        FILES\n          ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_debug_cycles.cmd\n        DESTINATION ${TARGETDIR_EXE}\n      )\n    endif()\n    install(\n      FILES\n        ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_debug_gpu.cmd\n        ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_debug_gpu_glitchworkaround.cmd\n        ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_debug_log.cmd\n        ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_factory_startup.cmd\n        ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_oculus.cmd\n        ${CMAKE_SOURCE_DIR}/release/windows/batch/oculus.json\n      DESTINATION ${TARGETDIR_EXE}\n    )\n```\n\n----------------------------------------\n\nTITLE: Installing OpenColorIO DLLs with Manifests on Windows CMake\nDESCRIPTION: This snippet installs OpenColorIO DLLs and their associated manifests on Windows. It checks for the existence of `opencolorio_2_4.dll` or `opencolorio_2_3.dll` and calls `windows_install_shared_manifest` to install the DLLs for both Release and Debug configurations. Requires the `windows_install_shared_manifest` macro to be defined elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  if(EXISTS ${LIBDIR}/opencolorio/bin/opencolorio_2_4.dll) # 4.4\n    windows_install_shared_manifest(\n      FILES ${LIBDIR}/opencolorio/bin/opencolorio_2_4.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES ${LIBDIR}/opencolorio/bin/opencolorio_d_2_4.dll\n      DEBUG\n    )\n  endif()\n  if(EXISTS ${LIBDIR}/opencolorio/bin/opencolorio_2_3.dll) # 4.1\n    windows_install_shared_manifest(\n      FILES ${LIBDIR}/opencolorio/bin/opencolorio_2_3.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES ${LIBDIR}/opencolorio/bin/opencolorio_d_2_3.dll\n      DEBUG\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Include Directories & Create Library - CMake\nDESCRIPTION: This snippet configures the include directories and creates the `extern_gmock` library using the defined source and header files. `include_directories` specifies the search paths for header files, and `add_library` creates a library target.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gmock/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\nadd_library(extern_gmock ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Adding the Logic Bricks Library\nDESCRIPTION: This snippet uses a custom CMake function, blender_add_lib, to add the ge_logic_bricks library to the build. It passes the source files, include directories, system include directories, and libraries as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_logic_bricks \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Windows System Version\nDESCRIPTION: This CMake snippet sets the Windows system version for compatibility with Windows 7.  It sets the `CMAKE_SYSTEM_VERSION` variable to 10.0, indicating support for the latest installed version of Windows 10 when targeting Windows 7. This is specifically marked as a UPBGE modification.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_77\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND WITH_WINDOWS_7)\n  # UPBGE modification for Windows 7\n  set(CMAKE_SYSTEM_VERSION 10.0 (latest installed version))\nendif ()\n```\n\n----------------------------------------\n\nTITLE: Adding Library (blender_add_lib)\nDESCRIPTION: This snippet uses the blender_add_lib macro to create the bf_editor_curve library. It specifies the target name, source files, include directories, and library dependencies. The macro handles the compilation and linking process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/curve/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_curve \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Compilation - CMake\nDESCRIPTION: This CMake snippet conditionally adds Python-related source files to the SRC variable if the WITH_PYTHON option is enabled. This allows the expression system to integrate with Python if desired.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Expressions/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND SRC\n    intern/PythonCallBack.cpp\n\n    EXP_PythonCallBack.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the Grease Pencil I/O library. It lists both internal Blender libraries (e.g., blenkernel, blenlib) and external libraries (e.g., fmtlib).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::nanosvg\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n  PRIVATE extern_fmtlib\n  bf_io_common\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Blender Guarded Allocator and Adding Subdirectory\nDESCRIPTION: If WITH_CYCLES_BLENDER is enabled, this snippet removes specific compiler flags related to floating-point contraction and adds the WITH_BLENDER_GUARDEDALLOC definition. It then includes the `blender` subdirectory, enabling integration with Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_BLENDER)\n  # Not needed to make cycles automated tests pass with -march=native.\n  # However Blender itself needs this flag.\n  # Note: the clang-cl style removal must go first, to avoid a dangling \"/clang:\"\n  remove_cc_flag(\"/clang:-ffp-contract=off\")\n  remove_cc_flag(\"-ffp-contract=off\")\n  add_definitions(-DWITH_BLENDER_GUARDEDALLOC)\n  add_subdirectory(blender)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Definition (Pugixml) - CMake\nDESCRIPTION: This snippet conditionally adds a preprocessor definition if the WITH_PUGIXML flag is enabled.  This indicates that the project is configured to use the PugiXml library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PUGIXML)\n  add_definitions(-DWITH_PUGIXML)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Device Library (CMake)\nDESCRIPTION: This snippet adds the `cycles_device` library using the specified source files and libraries. `cycles_add_library` is a custom CMake function, likely defined elsewhere. The code then adds a dependency to ensure proper rebuilding in case of changes in cycles_kernel_oneapi, relevant for the OneAPI build.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/device/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_add_library(cycles_device \"${LIB}\" ${SRC})\n\nif(WITH_CYCLES_DEVICE_ONEAPI)\n  # Need to have proper rebuilding in case of changes\n  # in cycles_kernel_oneapi due external project behavior.\n  add_dependencies(cycles_device cycles_kernel_oneapi)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directories required for compiling the Blender editor space API. Currently, it is empty, suggesting no external system headers are directly included in this module. It could be expanded later to include system-level dependencies if needed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_api/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines the private library dependencies for the I/O library. These dependencies include core Blender libraries and external libraries like fmtlib.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::clog\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with JACK Audio Connection Kit\nDESCRIPTION: This snippet conditionally defines `-DWITH_JACK` if `WITH_JACK` is enabled. This enables support for JACK, a low-latency audio server, allowing the software to interface with professional audio equipment.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_JACK)\n  add_definitions(-DWITH_JACK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Source Files (CMake)\nDESCRIPTION: This snippet sets the include directories, source files, and libraries for the OpenVDB library. It defines the core files and dependencies required for building the OpenVDB module within Blender. The snippet also includes a conditional block that appends OpenVDB specific configurations when OpenVDB support is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/openvdb/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n\nset(SRC\n  openvdb_capi.h\n  openvdb_fwd.hh\n)\n\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n)\n\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n\n  list(APPEND SRC\n    openvdb_capi.cc\n  )\n\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions (CMake)\nDESCRIPTION: This code snippet adds compiler definitions for GFLAGS and GLOG. These definitions are required to properly compile the Ceres library with its dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(${GFLAGS_DEFINES})\nadd_definitions(${GLOG_DEFINES})\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Unix Systems in CMake\nDESCRIPTION: This snippet conditionally sets the `-fPIC` compiler flag for Unix systems. This flag is necessary for creating position-independent code, which is often required for shared libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_pystring.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX)\n\tset(pystring_CXX_FLAGS \"${pystring_CXX_FLAGS} -fPIC\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the object editor library. It lists various Blender libraries and external libraries that the object editor depends on, such as animation rigging, asset system, and bmesh.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_mesh\n  bf_editor_metaball\n  bf_editor_grease_pencil\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files\nDESCRIPTION: This snippet defines the header files for the Cycles graph library. It sets the `SRC_HEADERS` variable to a list of header files. These header files provide the interface for the source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/graph/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_HEADERS\n  node.h\n  node_enum.h\n  node_type.h\n  node_xml.h\n)\n```\n\n----------------------------------------\n\nTITLE: SVG Import Test (CMake)\nDESCRIPTION: This CMake snippet iterates through a list of SVG render tests (`complex`, `path`) and adds a render test for each. It executes the `bl_io_curve_svg_test.py` Python script with the appropriate test directory and output directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(_svg_render_tests complex path)\n\n  foreach(render_test ${_svg_render_tests})\n    add_render_test(\n      io_curve_svg_${render_test}\n      ${CMAKE_CURRENT_LIST_DIR}/bl_io_curve_svg_test.py\n      --testdir \"${TEST_SRC_DIR}/io_tests/svg/${render_test}\"\n      --outdir \"${TEST_OUT_DIR}/io_curve_svg\"\n    )\n  endforeach()\n\n  unset(_svg_render_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional FFmpeg Codec Support in CMake\nDESCRIPTION: This snippet conditionally adds support for the FFmpeg codec library. If WITH_CODEC_FFMPEG is enabled, it adds the -DWITH_FFMPEG preprocessor definition, allowing the game engine player to use FFmpeg for video encoding and decoding.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on bf_rna library\nDESCRIPTION: This snippet adds a dependency on the `bf_rna` library to ensure that the `bf_editor_interface` library is built after the `bf_rna` library. This is needed because RNA prototypes are generated in bf_rna.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_interface bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding the Library\nDESCRIPTION: Defines the `bf_nodes_function` library using the specified source files, include directories, and library dependencies. This creates a reusable component that encapsulates the node function implementations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_nodes_function \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Definition for Math Constants on Windows\nDESCRIPTION: This snippet adds a preprocessor definition on Windows platforms to ensure that math constants like PI are available. It is necessary because the default Windows headers do not define these constants.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for OpenSubdiv (CMake)\nDESCRIPTION: This snippet conditionally adds a preprocessor definition if OpenSubdiv is enabled. The `-DWITH_OPENSUBDIV` flag is passed to the compiler to enable OpenSubdiv features within the code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions Based on Configuration in CMake\nDESCRIPTION: This snippet adds preprocessor definitions based on configuration options. If the WITH_GAMEENGINE option is enabled, it adds the -DWITH_GAMEENGINE definition. It also includes GL_DEFINITIONS and conditionally adds -DWITH_INTERNATIONAL if WITH_INTERNATIONAL is enabled. These definitions control conditional compilation within the C++ code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  add_definitions(-DWITH_GAMEENGINE)\nendif()\n\nadd_definitions(${GL_DEFINITIONS})\n\nif(WITH_INTERNATIONAL)\n\tadd_definitions(-DWITH_INTERNATIONAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories required for compiling the Grease Pencil I/O library. It includes both local directories within the Blender project and external dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../common\n  ../../editors/include\n  ../../makesdna\n  ../../makesrna\n  ../../../../intern/guardedalloc\n  ../../../../intern/utfconv\n  ../../../../extern/fmtlib/include\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Simulation Library\nDESCRIPTION: Adds the simulation library to the build process using the `blender_add_lib` CMake function. This function takes the library name (`bf_simulation`), the list of source files (`${SRC}`), include directories (`${INC}`), system include directories (`${INC_SYS}`), and library dependencies (`${LIB}`) as arguments.  It compiles the source files into a library and links it with the specified dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/simulation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_simulation \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional BPPlayer Support in CMake\nDESCRIPTION: This snippet conditionally adds support for the BPPlayer (likely a Blender Player) component. If WITH_GAMEENGINE_BPPLAYER is enabled, it appends the spindle include directory to the INC list and adds the -DWITH_GAMEENGINE_BPPLAYER preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GAMEENGINE_BPPLAYER)\n  list(APPEND INC\n    ../../../intern/spindle\n  )\n  add_definitions(-DWITH_GAMEENGINE_BPPLAYER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Classes Dynamically\nDESCRIPTION: This advanced example showcases dynamic class creation using the `type()` function. It creates multiple operator classes with unique `bl_idname` values in a loop. This is particularly useful when the data structures or class definitions are not known in advance, such as when integrating with external render engines or handling dynamically loaded data. The created classes are then registered with Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    idname = \"object.operator_{:d}\".format(i)\n\n    def func(self, context):\n        print(\"Hello World\", self.bl_idname)\n        return {'FINISHED'}\n\n    op_class = type(\n        \"DynOp{:d}\".format(i),\n        (bpy.types.Operator, ),\n        {\"bl_idname\": idname, \"bl_label\": \"Test\", \"execute\": func},\n    )\n    bpy.utils.register_class(op_class)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Material Properties\nDESCRIPTION: This code demonstrates how to create a custom property group for materials in Blender.  The `MyMaterialProps` class inherits from `bpy.types.PropertyGroup` and defines a custom float property. The `register()` function registers the custom property group and adds a pointer property to the `Material` type. The `unregister()` function removes the pointer property and unregisters the class. It's crucial to register the class *before* using it in a property.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create new property:\n# bpy.data.materials[0].my_custom_props.my_float\nimport bpy\n\nclass MyMaterialProps(bpy.types.PropertyGroup):\n    my_float: bpy.props.FloatProperty()\n\ndef register():\n    bpy.utils.register_class(MyMaterialProps)\n    bpy.types.Material.my_custom_props: bpy.props.PointerProperty(type=MyMaterialProps)\n\ndef unregister():\n    del bpy.types.Material.my_custom_props\n    bpy.utils.unregister_class(MyMaterialProps)\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notice to Program Source Files\nDESCRIPTION: This code snippet describes the notices that should be attached to the start of each source file of a program to convey the exclusion of warranty and license terms. It is crucial to include at least the copyright line and a pointer to where the full notice is found.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/GPL-2.0-or-later.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Files (Hydra)\nDESCRIPTION: Conditionally appends Hydra-related source files to the SRC list if the WITH_HYDRA option is enabled. These files deal with scene delegation, ID management, image handling, instancing, lights, materials, meshes, objects, volumes, and world representation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HYDRA)\n  list(APPEND SRC\n    hydra/curves.cc\n    hydra/hydra_scene_delegate.cc\n    hydra/id.cc\n    hydra/image.cc\n    hydra/instancer.cc\n    hydra/light.cc\n    hydra/material.cc\n    hydra/mesh.cc\n    hydra/object.cc\n    hydra/usd_scene_delegate.cc\n    hydra/volume.cc\n    hydra/volume_modifier.cc\n    hydra/world.cc\n\n    hydra/curves.hh\n    hydra/hydra_scene_delegate.hh\n    hydra/id.hh\n    hydra/image.hh\n    hydra/instancer.hh\n    hydra/light.hh\n    hydra/material.hh\n    hydra/mesh.hh\n    hydra/object.hh\n    hydra/usd_scene_delegate.hh\n    hydra/volume.hh\n    hydra/volume_modifier.hh\n    hydra/world.hh\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenVDB Configuration\nDESCRIPTION: This snippet configures OpenVDB integration. It adds the `-DWITH_OPENVDB` definition along with any user-defined definitions in `OPENVDB_DEFINITIONS`. It appends the OpenVDB include directories and libraries to `INC_SYS` and `LIB` respectively. It also sets compiler flags for `image_vdb.cpp` to work around template parsing issues with MSVC Clang.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\n\n  # This works around the issue described in #120317 and https://github.com/AcademySoftwareFoundation/openvdb/pull/1786\n  if(MSVC_CLANG)\n    set_source_files_properties(image_vdb.cpp PROPERTIES COMPILE_FLAGS -fno-delayed-template-parsing)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Inefficient List Extension: Appending in Loop (Python)\nDESCRIPTION: This snippet shows an inefficient way to extend a list by appending items from another list within a loop, using my_list.append(l). Prefer extend() for performance.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfor l in some_list:\n    my_list.append(l)\n```\n\n----------------------------------------\n\nTITLE: Installing Config Header CMake\nDESCRIPTION: Installs the generated `config.h` file to the `include/lemon` directory. This provides configuration information for projects using the Lemon library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/config.h\n  DESTINATION include/lemon\n  COMPONENT headers\n)\n```\n\n----------------------------------------\n\nTITLE: Adding IK Solver Library - CMake\nDESCRIPTION: This snippet uses the blender_add_lib function to create the IK Solver library (bf_intern_iksolver). It passes the source files, include directories, system include directories, and dependencies as arguments to this function.  This likely calls CMake functions behind the scenes to compile and link the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/iksolver/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_iksolver \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet specifies the include directories for the project.  It includes both the source and binary directories, making headers available during compilation. This allows the compiler to find necessary header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS) - CMake\nDESCRIPTION: This CMake snippet defines a variable `INC_SYS` for system include directories. In this case, it is empty, indicating that no specific system include paths are defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/sky/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Header Files - CMake\nDESCRIPTION: This CMake code defines the header files for general utility functions used across the Cycles project.  These are outside the `kernel` directory. It includes definitions for atomic operations, colors, defines, half-precision floating point numbers, hashes, math functions (basic, fast, intersection, float2/3/4/8, int2/3/4/8), projection and inverse projection, rectangles, static assertions, transforms, textures, and various type definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_UTIL_HEADERS\n  ../util/atomic.h\n  ../util/color.h\n  ../util/defines.h\n  ../util/half.h\n  ../util/hash.h\n  ../util/math.h\n  ../util/math_base.h\n  ../util/math_fast.h\n  ../util/math_intersect.h\n  ../util/math_float2.h\n  ../util/math_float3.h\n  ../util/math_float4.h\n  ../util/math_float8.h\n  ../util/math_int2.h\n  ../util/math_int3.h\n  ../util/math_int4.h\n  ../util/math_int8.h\n  ../util/projection.h\n  ../util/projection_inverse.h\n  ../util/rect.h\n  ../util/static_assert.h\n  ../util/transform.h\n  ../util/texture.h\n  ../util/types.h\n  ../util/types_base.h\n  ../util/types_float2.h\n  ../util/types_float3.h\n  ../util/types_float4.h\n  ../util/types_float8.h\n  ../util/types_int2.h\n  ../util/types_int3.h\n  ../util/types_int4.h\n  ../util/types_int8.h\n  ../util/types_spectrum.h\n  ../util/types_uchar2.h\n  ../util/types_uchar3.h\n  ../util/types_uchar4.h\n  ../util/types_uint2.h\n  ../util/types_uint3.h\n  ../util/types_uint4.h\n  ../util/types_ushort4.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories needed for the Recast and Detour libraries. These directories contain the header files required for compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/recastnavigation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC \n\tRecast/Include\n\tDetour/Include\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories - CMake\nDESCRIPTION: This CMake code snippet defines the include directories required for compiling the `bf_editor_space_statusbar` library.  It includes both project-specific include directories (like `../include` and `../../makesrna`) and a generated directory `${CMAKE_BINARY_DIR}/source/blender/makesrna` which likely contains automatically generated header files from the RNA system. The RNA_prototypes.hh file is expected to be in one of the specified paths. These header files provide definitions and declarations necessary for compiling the source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_statusbar/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the module. It includes private dependencies (blenkernel, blenlib, guardedalloc) and public dependencies (imbuf).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PUBLIC  bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This CMake snippet defines the include directories for the component. The `INC` variable is set to include the current binary directory and the `../include` directory. These paths are added as public include directories, making them accessible to other components that depend on this one.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC ${CMAKE_CURRENT_BINARY_DIR}\n  ../include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This CMake snippet defines a set of include directories used during compilation. It includes the current directory, the parent directory, and the include directories for glog, gflags, and gtest. This ensures the compiler can find the necessary header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/testing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ${GLOG_INCLUDE_DIRS}\n  ${GFLAGS_INCLUDE_DIRS}\n  ../../../extern/gtest/include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting LEMON Library Paths\nDESCRIPTION: This snippet defines paths and variables related to the LEMON library, including the source root directory, source files, include directories, and the generation directory for the configured header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LEMON_3RD_PATH 3rd/lemon-1.3.1)\n# Needed for the configure script.\nset(PROJECT_VERSION \"1.3.1\")\n\nset(LEMON_SOURCE_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR}/${LEMON_3RD_PATH})\n\nset(LEMON_SRC ${LEMON_SOURCE_ROOT_DIR}/lemon)\nset(LEMON_INCLUDE_DIRS ${LEMON_SOURCE_ROOT_DIR})\n\nset(LEMON_GEN_DIR ${CMAKE_BINARY_DIR}/extern/quadriflow/${LEMON_3RD_PATH})\nconfigure_file(\n  ${LEMON_SRC}/config.h.in\n  ${LEMON_GEN_DIR}/lemon/config.h\n)\nunset(PROJECT_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with LZO Compression\nDESCRIPTION: This snippet conditionally includes LZO compression library support. It checks if `WITH_SYSTEM_LZO` is enabled to determine if a system-wide LZO library should be used. If so, it appends system include directories and libraries. Otherwise, it uses the embedded minilzo library. It defines `-DWITH_LZO` to enable corresponding code paths for LZO compression/decompression.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LZO)\n  if(WITH_SYSTEM_LZO)\n    list(APPEND INC_SYS\n      ${LZO_INCLUDE_DIR}\n    )\n    list(APPEND LIB\n      ${LZO_LIBRARIES}\n    )\n    add_definitions(-DWITH_SYSTEM_LZO)\n  else()\n    list(APPEND INC_SYS\n      ../../../extern/lzo/minilzo\n    )\n    list(APPEND LIB\n      extern_minilzo\n    )\n  endif()\n  add_definitions(-DWITH_LZO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files (.cc and .hh) that make up the GPU module, including both the implementation and header files for various GPU-related components such as buffers, shaders, and textures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/gpu/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  gpu_py.cc\n  gpu_py_api.cc\n  gpu_py_batch.cc\n  gpu_py_buffer.cc\n  gpu_py_capabilities.cc\n  gpu_py_compute.cc\n  gpu_py_element.cc\n  gpu_py_framebuffer.cc\n  gpu_py_matrix.cc\n  gpu_py_offscreen.cc\n  gpu_py_platform.cc\n  gpu_py_select.cc\n  gpu_py_shader.cc\n  gpu_py_shader_create_info.cc\n  gpu_py_state.cc\n  gpu_py_texture.cc\n  gpu_py_types.cc\n  gpu_py_uniformbuffer.cc\n  gpu_py_vertex_buffer.cc\n  gpu_py_vertex_format.cc\n\n  gpu_py.hh\n  gpu_py_api.hh\n  gpu_py_batch.hh\n  gpu_py_buffer.hh\n  gpu_py_capabilities.hh\n  gpu_py_compute.hh\n  gpu_py_element.hh\n  gpu_py_framebuffer.hh\n  gpu_py_matrix.hh\n  gpu_py_offscreen.hh\n  gpu_py_platform.hh\n  gpu_py_select.hh\n  gpu_py_shader.hh\n  gpu_py_state.hh\n  gpu_py_texture.hh\n  gpu_py_types.hh\n  gpu_py_uniformbuffer.hh\n  gpu_py_vertex_buffer.hh\n  gpu_py_vertex_format.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet defines a set of include directories (INC) that are used during the compilation of the GPU module. These include paths provide access to necessary header files for the GPU functionality and external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  dummy\n  intern\n  metal\n  opengl\n  vulkan\n  ../makesrna\n\n  # For theme color access.\n  ../editors/include\n\n  # For `*_info.hh` includes.\n  ../compositor/shaders/infos\n  ../draw/engines/eevee\n  ../draw/engines/eevee/shaders/infos\n  ../draw/engines/gpencil\n  ../draw/engines/gpencil/shaders/infos\n  ../draw/engines/image/shaders/infos\n  ../draw/engines/overlay/shaders/infos\n  ../draw/engines/select\n  ../draw/engines/select/shaders/infos\n  ../draw/engines/workbench\n  ../draw/engines/workbench/shaders/infos\n  ../draw/intern\n  ../draw/intern/shaders\n  metal/kernels\n  shaders/infos\n\n\n  # For shader includes\n  shaders/common\n  shaders\n\n  ../../../intern/ghost\n  ../../../intern/mantaflow/extern\n  ../../../intern/opensubdiv\n)\n```\n\n----------------------------------------\n\nTITLE: Wayland Protocol Bindings Generation (CMake)\nDESCRIPTION: Generates protocol bindings for Wayland interfaces using `generate_protocol_bindings`. It configures bindings for pointer gestures, tablets, and primary selection.  It also generates bindings for text input if `WITH_INPUT_IME` is enabled. Depends on `WAYLAND_PROTOCOLS_DIR` being properly set. Output is likely C++ code generated from the XML protocol definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n    # Pointer-gestures (multi-touch).\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/unstable/pointer-gestures/pointer-gestures-unstable-v1.xml\"\n    )\n    # Tablet.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/stable/tablet/tablet-v2.xml\"\n    )\n    # Primary-selection.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/unstable/primary-selection/primary-selection-unstable-v1.xml\"\n    )\n    if(WITH_INPUT_IME)\n      generate_protocol_bindings(\n        \"${WAYLAND_PROTOCOLS_DIR}/unstable/text-input/text-input-unstable-v3.xml\"\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compositor CPU Render Tests - CMake\nDESCRIPTION: Defines and adds render tests for the compositor using CPU rendering. It iterates through a list of compositor test names and calls `add_render_test` to create each test, specifying the test script, test directory, and output directory. `TEST_SRC_DIR_EXISTS` is a prerequisite condition.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(compositor_tests\n    color\n    converter\n    filter\n    input\n    output\n    vector\n\n    pixel_nodes\n    multiple_node_setups\n  )\n\n  if(WITH_LIBMV)\n    list(APPEND compositor_tests distort matte anisotropic_filtering)\n  endif()\n\n  foreach(comp_test ${compositor_tests})\n    add_render_test(\n      compositor_cpu_${comp_test}\n      ${CMAKE_CURRENT_LIST_DIR}/compositor_render_tests.py\n      --testdir \"${TEST_SRC_DIR}/compositor/${comp_test}\"\n      --outdir \"${TEST_OUT_DIR}/compositor_cpu\"\n    )\n  endforeach()\n\n  add_blender_test(\n    compositor_cpu_file_output\n    --python ${CMAKE_CURRENT_LIST_DIR}/compositor_file_output_tests.py\n    --\n    --testdir \"${TEST_SRC_DIR}/compositor/file_output/\"\n    --outdir \"${TEST_OUT_DIR}/compositor_cpu/file_output\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PulseAudio Plugin with CMake\nDESCRIPTION: This snippet configures and builds the PulseAudio plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, conditionally links to PulseAudio libraries based on DYNLOAD_PULSEAUDIO, and installs it to the plugin directory. It depends on WITH_PULSEAUDIO and PLUGIN_PULSEAUDIO being enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PULSEAUDIO AND PLUGIN_PULSEAUDIO)\n\tadd_definitions(-DPULSEAUDIO_PLUGIN)\n\tinclude_directories(${INCLUDE} ${LIBPULSE_INCLUDE_DIR})\n\tadd_library(audpulseaudio SHARED ${PULSEAUDIO_SRC} ${PULSEAUDIO_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audpulseaudio PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\tif(DYNLOAD_PULSEAUDIO)\n\t\ttarget_link_libraries(audpulseaudio audaspace)\n\telse()\n\t\ttarget_link_libraries(audpulseaudio audaspace ${LIBPULSE_LIBRARY})\n\tendif()\n\tinstall(TARGETS audpulseaudio DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Python DLLs with CMake\nDESCRIPTION: This snippet shows how to install Python DLLs to a specific destination directory (`${BLENDER_VERSION}/python`) depending on the build configuration. It installs different DLLs for Debug and Release configurations, handling different naming conventions and debug versions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  DIRECTORY ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/DLLs\n  DESTINATION ${BLENDER_VERSION}/python\n  CONFIGURATIONS Debug\n)\n\ninstall(\n  FILES\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}.dll\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3.dll\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python.exe\n  DESTINATION ${BLENDER_VERSION}/python/bin\n  CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n)\ninstall(\n  FILES\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python${_PYTHON_VERSION_NO_DOTS}_d.dll\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python3_d.dll\n    ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/bin/python_d.exe\n  DESTINATION ${BLENDER_VERSION}/python/bin\n  CONFIGURATIONS Debug\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the project. It includes both project-specific directories (relative paths) and external library directories (using variables like ${CMAKE_BINARY_DIR}, ${EIGEN3_INCLUDE_DIRS}, etc.). These directories are added to the include path during compilation, allowing the compiler to find header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../BlenderRoutines\n  ../Common\n  ../Device\n  ../Expressions\n  ../GameLogic\n  ../Ketsji\n  ../Ketsji/KXNetwork\n  ../Launcher\n  ../Physics/Bullet\n  ../Physics/Dummy\n  ../Physics/Common\n  ../Rasterizer\n  ../Rasterizer/RAS_OpenGLRasterizer\n  ../SceneGraph\n  ../VideoTexture\n  ../../blender\n  ../../blender/ikplugin\n  ../../blender/makesrna\n  ../../../intern/termcolor\n  # RNA_prototypes.h\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Basic UI Layout with Properties (Python)\nDESCRIPTION: Demonstrates a simple top-to-bottom UI layout using the layout.prop() function.  This is a basic layout showing properties in a vertical list.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlayout.prop()\nlayout.prop()\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectories for node types\nDESCRIPTION: Adds subdirectories for different types of nodes (composite, function, geometry, shader, texture) to the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(composite)\nadd_subdirectory(function)\nadd_subdirectory(geometry)\nadd_subdirectory(shader)\nadd_subdirectory(texture)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines the system include directories.  In this case, it's set to empty. This may be extended with additional OS or system-specific includes.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/memutil/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet sets the include directories for the Vulkan Memory Allocator library.  It defines both local include directories (INC) and system include directories (INC_SYS), including Vulkan and MoltenVK headers.  These are used when compiling the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${VULKAN_INCLUDE_DIRS}\n)\n\nif(APPLE)\n  list(APPEND INC_SYS\n    ${MOLTENVK_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB Defines and Includes - CMake\nDESCRIPTION: This snippet configures OpenVDB definitions and include directories. It appends `-DWITH_OPENVDB` and optionally `-DOPENVDB_3_ABI_COMPATIBLE` to `OPENVDB_DEFINITIONS` based on the presence of WITH_OPENVDB_3_ABI_COMPATIBLE. It also appends necessary include directories such as Boost, TBB, and OpenEXR.  It defines compiler flags and include paths for the OpenVDB library, an open-source volumetric data structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_102\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND OPENVDB_DEFINITIONS -DWITH_OPENVDB)\n\n  if(WITH_OPENVDB_3_ABI_COMPATIBLE)\n    list(APPEND OPENVDB_DEFINITIONS -DOPENVDB_3_ABI_COMPATIBLE)\n  endif()\n\n  # OpenVDB headers use deprecated TBB headers, silence warning.\n  list(APPEND OPENVDB_DEFINITIONS -DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n\n  list(APPEND OPENVDB_INCLUDE_DIRS\n    ${BOOST_INCLUDE_DIR}\n    ${TBB_INCLUDE_DIRS}\n    ${OPENEXR_INCLUDE_DIRS}\n  )\n\n  if(WITH_OPENVDB_BLOSC)\n    list(APPEND OPENVDB_DEFINITIONS -DWITH_OPENVDB_BLOSC)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Specifies the list of source files that make up the node functions library. Each file contains the implementation of a specific node function, contributing to the overall functionality of the library. These files are compiled and linked to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_fn_align_euler_to_vector.cc\n  nodes/node_fn_align_rotation_to_vector.cc\n  nodes/node_fn_axes_to_rotation.cc\n  nodes/node_fn_axis_angle_to_rotation.cc\n  nodes/node_fn_boolean_math.cc\n  nodes/node_fn_combine_color.cc\n  nodes/node_fn_combine_matrix.cc\n  nodes/node_fn_combine_transform.cc\n  nodes/node_fn_compare.cc\n  nodes/node_fn_euler_to_rotation.cc\n  nodes/node_fn_find_in_string.cc\n  nodes/node_fn_float_to_int.cc\n  nodes/node_fn_hash_value.cc\n  nodes/node_fn_input_bool.cc\n  nodes/node_fn_input_color.cc\n  nodes/node_fn_input_int.cc\n  nodes/node_fn_input_rotation.cc\n  nodes/node_fn_input_special_characters.cc\n  nodes/node_fn_input_string.cc\n  nodes/node_fn_input_vector.cc\n  nodes/node_fn_integer_math.cc\n  nodes/node_fn_invert_matrix.cc\n  nodes/node_fn_invert_rotation.cc\n  nodes/node_fn_match_string.cc\n  nodes/node_fn_matrix_determinant.cc\n  nodes/node_fn_matrix_multiply.cc\n  nodes/node_fn_project_point.cc\n  nodes/node_fn_quaternion_to_rotation.cc\n  nodes/node_fn_random_value.cc\n  nodes/node_fn_replace_string.cc\n  nodes/node_fn_rotate_euler.cc\n  nodes/node_fn_rotate_rotation.cc\n  nodes/node_fn_rotate_vector.cc\n  nodes/node_fn_rotation_to_axis_angle.cc\n  nodes/node_fn_rotation_to_euler.cc\n  nodes/node_fn_rotation_to_quaternion.cc\n  nodes/node_fn_separate_color.cc\n  nodes/node_fn_separate_matrix.cc\n  nodes/node_fn_separate_transform.cc\n  nodes/node_fn_slice_string.cc\n  nodes/node_fn_string_length.cc\n  nodes/node_fn_transform_direction.cc\n  nodes/node_fn_transform_point.cc\n  nodes/node_fn_transpose_matrix.cc\n  nodes/node_fn_value_to_string.cc\n\n  node_function_util.cc\n\n  node_function_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Draco Library with Blender\nDESCRIPTION: This snippet demonstrates how to add the Draco library within the Blender build system. It uses the `blender_add_lib` function to integrate the source files, include directories, and libraries into the build process. This setup is specific to the Blender environment and its build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/draco/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n\nblender_add_lib(draco \"${SRC}\" \"${INC}\" \"\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet defines the system include directories for the script editor module. Currently, it is empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_script/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Closure Header Files - CMake\nDESCRIPTION: This CMake code defines the header files for closures in the Cycles kernel. Closures are used for defining surface properties like BSDFs (Bidirectional Scattering Distribution Functions) and volume properties.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_CLOSURE_HEADERS\n  closure/alloc.h\n  closure/bsdf.h\n  closure/bsdf_ashikhmin_velvet.h\n  closure/bsdf_burley.h\n  closure/bsdf_diffuse.h\n  closure/bsdf_diffuse_ramp.h\n  closure/bsdf_microfacet.h\n  closure/bsdf_oren_nayar.h\n  closure/bsdf_phong_ramp.h\n  closure/bsdf_ray_portal.h\n  closure/bsdf_sheen.h\n  closure/bsdf_toon.h\n  closure/bsdf_transparent.h\n  closure/bsdf_util.h\n  closure/bsdf_ashikhmin_shirley.h\n  closure/bsdf_hair.h\n  closure/bssrdf.h\n  closure/emissive.h\n  closure/volume.h\n  closure/volume_util.h\n  closure/volume_henyey_greenstein.h\n  closure/volume_rayleigh.h\n  closure/volume_fournier_forand.h\n  closure/volume_draine.h\n  closure/bsdf_principled_hair_chiang.h\n  closure/bsdf_principled_hair_huang.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Definition (Cmake)\nDESCRIPTION: This snippet adds a compiler definition if the WITH_IMAGE_CINEON option is enabled. This enables Cineon image support during compilation. It uses the `add_definitions` command.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/cineon/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This CMake code snippet defines the system include directories for the UPBGE project. These directories point to external libraries like Zlib, Python, and Freetype that the project depends on. These are essential for compiling code that utilizes these libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${ZLIB_INCLUDE_DIRS}\n  ${PYTHON_INCLUDE_DIRS}\n\n  # For `vfontdata_freetype.cc`.\n  ${FREETYPE_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Copy Requests to Python Install\nDESCRIPTION: This option, conditional on `WITH_PYTHON_INSTALL` and a UNIX system that is not Apple, enables copying the system's 'requests' library into the Blender install directory.  It also sets a cached path to the 'requests' module.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON_INSTALL)\n  if(UNIX AND NOT APPLE)\n    option(WITH_PYTHON_INSTALL_REQUESTS \"\\\nCopy system requests into the blender install directory\"\n      ON\n    )\n    set(PYTHON_REQUESTS_PATH \"\" CACHE PATH \"\\\nPath to python site-packages or dist-packages containing 'requests' module\"\n    )\n    mark_as_advanced(PYTHON_REQUESTS_PATH)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Double Precision (CMake)\nDESCRIPTION: Adds a compiler definition to enable double-precision floating-point numbers for the Bullet physics engine. This increases precision in large-scale simulations (over 10km) at the cost of performance. If this definition is enabled, a similar definition must be also enabled in 'intern/rigidbody/CMakeLists.txt' and 'source/gameengine/Physics/Bullet/CMakeLists.txt'.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DBT_USE_DOUBLE_PRECISION)\n```\n\n----------------------------------------\n\nTITLE: Adding OSL Support for OptiX - CMake\nDESCRIPTION: This CMake code conditionally adds OSL (Open Shading Language) support to the OptiX kernel if the `WITH_CYCLES_OSL` option is enabled. It calculates the OSL library version code and adds the `services_optix.cu` and `kernel_osl.cu` files to the `SRC_KERNEL_DEVICE_OPTIX` list.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  math(EXPR OSL_LIBRARY_VERSION_CODE \"${OSL_LIBRARY_VERSION_MAJOR} * 10000 + ${OSL_LIBRARY_VERSION_MINOR} * 100 + ${OSL_LIBRARY_VERSION_PATCH}\")\n\n  set(SRC_KERNEL_DEVICE_OPTIX\n    ${SRC_KERNEL_DEVICE_OPTIX}\n    osl/services_optix.cu\n    device/optix/kernel_osl.cu\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the IK Solver library. These directories contain the header files needed during compilation. The 'intern' and '../memutil' directories are added to the include path.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/iksolver/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  intern\n  ../memutil\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Node Discovery\nDESCRIPTION: This snippet uses a custom CMake function `add_node_discovery` to generate code for registering geometry nodes. It specifies the source files, output file, and registration function name.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_node_discovery(\n  bf_nodes_geometry_generated\n  \"${SRC}\"\n  ${CMAKE_CURRENT_BINARY_DIR}/register_geometry_nodes.cc\n  register_geometry_nodes\n)\n```\n\n----------------------------------------\n\nTITLE: Linking the Generated Library\nDESCRIPTION: Links the generated registration library to the `bf_nodes_function` library, ensuring that the registration code is included in the final library. This allows Blender to discover and use the registered node functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(bf_nodes_functions_generated bf_nodes_function)\n```\n\n----------------------------------------\n\nTITLE: Configuring NDOF Input\nDESCRIPTION: Configures the build for NDOF (3D mouse) input.  It adds a preprocessor definition, appends source files, include directories, and libraries for NDOF support.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INPUT_NDOF)\n  add_definitions(-DWITH_INPUT_NDOF)\n\n  list(APPEND SRC\n    intern/GHOST_NDOFManager.cc\n\n    intern/GHOST_EventNDOF.hh\n    intern/GHOST_NDOFManager.hh\n  )\n\n  list(APPEND INC_SYS\n    ${NDOF_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${NDOF_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories needed for the game engine player. It sets the paths for both internal Blender components and external libraries.  It is crucial for the compiler to find necessary header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../BlenderRoutines\n  ../Common\n  ../Converter\n  ../Device\n  ../Expressions\n  ../GameLogic\n  ../Ketsji\n  ../Ketsji/KXNetwork\n  ../Launcher\n  ../Physics/Common\n  ../Rasterizer\n  ../Rasterizer/RAS_OpenGLRasterizer\n  ../SceneGraph\n  ../../blender\n  ../../blender/editors/include\n  ../../blender/makesrna\n  ../../blender/python\n  ../../blender/sequencer\n  ../../blender/windowmanager/message_bus\n  ../../../intern/memutil\n  # RNA_prototypes.h\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for TBB - CMake\nDESCRIPTION: Conditionally adds a preprocessor definition to disable min/max macros on Windows when using TBB (Threading Building Blocks).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Application Properties (CMake)\nDESCRIPTION: This snippet configures macOS application bundle properties. It sets the `OUTPUT_NAME` of the `blender` target to \"Blender\" if `WITH_PYTHON_MODULE` is not enabled, configures the Info.plist using `MACOSX_BUNDLE_INFO_PLIST`, and sets bundle version strings derived from `BLENDER_VERSION` and `BLENDER_VERSION_PATCH` and a date obtained using `execute_process`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(APPLE)\n  if(NOT WITH_PYTHON_MODULE)\n    # Uppercase name for app bundle.\n    set_target_properties(blender PROPERTIES OUTPUT_NAME Blender)\n  endif()\n\n  set(OSX_APP_SOURCEDIR ${CMAKE_SOURCE_DIR}/release/darwin/Blender.app)\n\n  # Setup `Info.plist`.\n  execute_process(\n    COMMAND date \"+%Y-%m-%d\"\n    OUTPUT_VARIABLE BLENDER_DATE\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n\n  set_target_properties(blender PROPERTIES\n    MACOSX_BUNDLE_INFO_PLIST ${OSX_APP_SOURCEDIR}/Contents/Info.plist\n    MACOSX_BUNDLE_SHORT_VERSION_STRING \"${BLENDER_VERSION}.${BLENDER_VERSION_PATCH}\"\n    MACOSX_BUNDLE_LONG_VERSION_STRING \"${BLENDER_VERSION}.${BLENDER_VERSION_PATCH} ${BLENDER_DATE}\"\n  )\n\n  if(WITH_BLENDER_THUMBNAILER)\n    set(OSX_THUMBNAILER_SOURCEDIR ${OSX_APP_SOURCEDIR}/Contents/PlugIns/blender-thumbnailer.appex)\n    set_target_properties(blender-thumbnailer PROPERTIES\n      BUNDLE_EXTENSION appex\n      MACOSX_BUNDLE_INFO_PLIST ${OSX_THUMBNAILER_SOURCEDIR}/Contents/Info.plist\n      MACOSX_BUNDLE_SHORT_VERSION_STRING \"${BLENDER_VERSION}.${BLENDER_VERSION_PATCH}\"\n      MACOSX_BUNDLE_LONG_VERSION_STRING \"${BLENDER_VERSION}.${BLENDER_VERSION_PATCH} ${BLENDER_DATE}\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Creating Interface Library: bf_intern_mikktspace\nDESCRIPTION: This code snippet creates an interface library named bf_intern_mikktspace. It sets the include directories and links against the Threading Building Blocks (TBB) library if it's available as an optional dependency.  It ensures other modules can use the library's headers and functionality by linking against it.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mikktspace/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(bf_intern_mikktspace INTERFACE)\ntarget_include_directories(bf_intern_mikktspace INTERFACE .)\n\ntarget_link_libraries(bf_intern_mikktspace INTERFACE bf::dependencies::optional::tbb)\n```\n\n----------------------------------------\n\nTITLE: Delayed Installation Call\nDESCRIPTION: This CMake snippet invokes a custom function called `delayed_do_install` which is presumed to perform delayed installation tasks. This is called to process any pending files and resources for installation. The parameter passed is the target version installation directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\n  # install more files specified elsewhere\n  delayed_do_install(${PLAYER_TARGETDIR_VER})\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet specifies the libraries that the project depends on. It includes Blender libraries like `blenkernel`, `blentranslation`, `fmtlib`, `functions`, `gpu`, `imbuf`, `nodes`, `render`, `blenlib`, `dna`, and `guardedalloc`. These libraries provide essential functionality for the compositor nodes, interacting with Blender's internal data structures and rendering capabilities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blentranslation\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Set Source Files\nDESCRIPTION: This snippet defines the source files (both .cc and .hh) for the Wavefront OBJ I/O module, including both importer and exporter components. These files implement the core logic for reading and writing OBJ files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  IO_wavefront_obj.cc\n  exporter/obj_export_file_writer.cc\n  exporter/obj_export_mesh.cc\n  exporter/obj_export_mtl.cc\n  exporter/obj_export_nurbs.cc\n  exporter/obj_exporter.cc\n  importer/importer_mesh_utils.cc\n  importer/obj_import_file_reader.cc\n  importer/obj_import_mesh.cc\n  importer/obj_import_mtl.cc\n  importer/obj_import_nurbs.cc\n  importer/obj_importer.cc\n\n  IO_wavefront_obj.hh\n  exporter/obj_export_file_writer.hh\n  exporter/obj_export_io.hh\n  exporter/obj_export_mesh.hh\n  exporter/obj_export_mtl.hh\n  exporter/obj_export_nurbs.hh\n  exporter/obj_exporter.hh\n  importer/importer_mesh_utils.hh\n  importer/obj_import_file_reader.hh\n  importer/obj_import_mesh.hh\n  importer/obj_import_mtl.hh\n  importer/obj_import_nurbs.hh\n  importer/obj_import_objects.hh\n  importer/obj_importer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Threading Options in CMake\nDESCRIPTION: This code finds the available threading libraries (Pthreads or Win32 threads) and sets the `LEMON_THREADING` variable accordingly. The user can override the detected threading library.  Based on the selected threading library, corresponding flags (`LEMON_USE_PTHREAD`, `LEMON_USE_WIN32_THREADS`) are set.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(FindThreads)\n\nIF(NOT LEMON_THREADING)\n  IF(CMAKE_USE_PTHREADS_INIT)\n    SET(LEMON_THREADING \"Pthread\")\n  ELSEIF(CMAKE_USE_WIN32_THREADS_INIT)\n    SET(LEMON_THREADING \"Win32\")\n  ELSE()\n    SET(LEMON_THREADING \"None\")\n  ENDIF()\nENDIF()\n\nSET( LEMON_THREADING \"${LEMON_THREADING}\" CACHE STRING\n  \"Choose the threading library, options are: Pthread Win32 None.\"\n  FORCE )\n\nIF(LEMON_THREADING STREQUAL \"Pthread\")\n  SET(LEMON_USE_PTHREAD TRUE)\nELSEIF(LEMON_THREADING STREQUAL \"Win32\")\n  SET(LEMON_USE_WIN32_THREADS TRUE)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Assert Macros\nDESCRIPTION: This snippet adds definitions for assert macros. If `WITH_ASSERT_ABORT` is enabled, it adds the `DWITH_ASSERT_ABORT` definition. If `WITH_ASSERT_RELEASE` is disabled, it adds the `NDEBUG` definition for Release, MinSizeRel, and RelWithDebInfo configurations. It also removes the `/DNDEBUG` and `-DNDEBUG` flags before setting the directories properties.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_139\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ASSERT_ABORT)\n  add_definitions(-DWITH_ASSERT_ABORT)\nendif()\n\n# NDEBUG is the standard C define to disable asserts.\nif(WITH_ASSERT_RELEASE)\n  # CMake seemingly be setting the NDEBUG flag on its own already on some configurations\n  # therefore we need to remove the flags if they happen to be set.\n  remove_cc_flag(\"-DNDEBUG\") # GCC/CLang\n  remove_cc_flag(\"/DNDEBUG\") # MSVC\nelse()\n  set_property(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS\n    $<$<CONFIG:Release>:NDEBUG>\n    $<$<CONFIG:MinSizeRel>:NDEBUG>\n    $<$<CONFIG:RelWithDebInfo>:NDEBUG>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Error Stream for Memory Manager\nDESCRIPTION: This function sets the file stream that the memory manager should use to output debugging messages. If the parameter is NULL, the messages are suppressed. The default is that messages are suppressed, which enhances performance in production environments.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nvoid MEM_set_error_stream(FILE*);\n```\n\n----------------------------------------\n\nTITLE: Inefficient List Reversal: Inserting at Start (Python)\nDESCRIPTION: Demonstrates an inefficient way of reversing a list by inserting elements at the beginning of the list within a loop. This uses `reverse_list.insert(0, list_item)` which causes a shift of all other elements on each iteration, drastically reducing performance.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nreverse_list = []\nfor list_item in some_list:\n    reverse_list.insert(0, list_item)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet lists all source files that comprise the STL I/O library. These files contain the implementation for STL import and export functionality, data structures, and related utilities. The list includes both .cc and .hh files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  IO_stl.cc\n  importer/stl_import.cc\n  importer/stl_import_ascii_reader.cc\n  importer/stl_import_binary_reader.cc\n  importer/stl_import_mesh.cc\n  exporter/stl_export.cc\n  exporter/stl_export_writer.cc\n\n  intern/stl_data.hh\n\n  IO_stl.hh\n  importer/stl_import.hh\n  importer/stl_import_ascii_reader.hh\n  importer/stl_import_binary_reader.hh\n  importer/stl_import_mesh.hh\n  exporter/stl_export.hh\n  exporter/stl_export_writer.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Schur Specializations (CMake)\nDESCRIPTION: This code snippet conditionally adds specialized Schur eliminator and partitioned matrix view implementations based on the `WITH_LIBMV_SCHUR_SPECIALIZATIONS` flag. If the flag is not set, a compiler definition `CERES_RESTRICT_SCHUR_SPECIALIZATION` is added to restrict the Schur specialization.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBMV_SCHUR_SPECIALIZATIONS)\n  list(APPEND SRC\n    internal/ceres/generated/partitioned_matrix_view_2_2_2.cc\n    internal/ceres/generated/partitioned_matrix_view_2_2_3.cc\n    internal/ceres/generated/partitioned_matrix_view_2_2_4.cc\n    internal/ceres/generated/partitioned_matrix_view_2_2_d.cc\n    internal/ceres/generated/partitioned_matrix_view_2_3_3.cc\n    internal/ceres/generated/partitioned_matrix_view_2_3_4.cc\n    internal/ceres/generated/partitioned_matrix_view_2_3_6.cc\n    internal/ceres/generated/partitioned_matrix_view_2_3_9.cc\n    internal/ceres/generated/partitioned_matrix_view_2_3_d.cc\n    internal/ceres/generated/partitioned_matrix_view_2_4_3.cc\n    internal/ceres/generated/partitioned_matrix_view_2_4_4.cc\n    internal/ceres/generated/partitioned_matrix_view_2_4_6.cc\n    internal/ceres/generated/partitioned_matrix_view_2_4_8.cc\n    internal/ceres/generated/partitioned_matrix_view_2_4_9.cc\n    internal/ceres/generated/partitioned_matrix_view_2_4_d.cc\n    internal/ceres/generated/partitioned_matrix_view_2_d_d.cc\n    internal/ceres/generated/partitioned_matrix_view_3_3_3.cc\n    internal/ceres/generated/partitioned_matrix_view_4_4_2.cc\n    internal/ceres/generated/partitioned_matrix_view_4_4_3.cc\n    internal/ceres/generated/partitioned_matrix_view_4_4_4.cc\n    internal/ceres/generated/partitioned_matrix_view_4_4_d.cc\n    internal/ceres/generated/schur_eliminator_2_2_2.cc\n    internal/ceres/generated/schur_eliminator_2_2_3.cc\n    internal/ceres/generated/schur_eliminator_2_2_4.cc\n    internal/ceres/generated/schur_eliminator_2_2_d.cc\n    internal/ceres/generated/schur_eliminator_2_3_3.cc\n    internal/ceres/generated/schur_eliminator_2_3_4.cc\n    internal/ceres/generated/schur_eliminator_2_3_6.cc\n    internal/ceres/generated/schur_eliminator_2_3_9.cc\n    internal/ceres/generated/schur_eliminator_2_3_d.cc\n    internal/ceres/generated/schur_eliminator_2_4_3.cc\n    internal/ceres/generated/schur_eliminator_2_4_4.cc\n    internal/ceres/generated/schur_eliminator_2_4_6.cc\n    internal/ceres/generated/schur_eliminator_2_4_8.cc\n    internal/ceres/generated/schur_eliminator_2_4_9.cc\n    internal/ceres/generated/schur_eliminator_2_4_d.cc\n    internal/ceres/generated/schur_eliminator_2_d_d.cc\n    internal/ceres/generated/schur_eliminator_3_3_3.cc\n    internal/ceres/generated/schur_eliminator_4_4_2.cc\n    internal/ceres/generated/schur_eliminator_4_4_3.cc\n    internal/ceres/generated/schur_eliminator_4_4_4.cc\n    internal/ceres/generated/schur_eliminator_4_4_d.cc\n  )\nelse()\n  add_definitions(-DCERES_RESTRICT_SCHUR_SPECIALIZATION)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Specifies the source files for the DeckLink library. These files contain the implementation of the DeckLink API wrapper. The DeckLinkAPI.cpp and DeckLinkAPI.h are common to all platforms.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/decklink/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n\tDeckLinkAPI.cpp\n\tDeckLinkAPI.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests (WindowManager)\nDESCRIPTION: Configures tests for the window manager module, defining source files and include directories for the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    intern/wm_dragdrop_test.cc\n  )\n  blender_add_test_suite_lib(windowmanager \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions (CMake)\nDESCRIPTION: This section conditionally defines preprocessor macros based on CMake options. WITH_BUILDINFO, WITH_RENDERDOC and WITH_GPU_SHADER_ASSERT control the inclusion of build information, RenderDoc integration, and GPU shader assertions, respectively.  `add_definitions` adds these definitions to the compiler command line.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n\nif(WITH_RENDERDOC)\n  list(APPEND INC\n    ../../../extern/renderdoc/include\n    ../../../intern/renderdoc_dynload/include\n  )\n  add_definitions(-DWITH_RENDERDOC)\nendif()\n\nif(WITH_GPU_SHADER_ASSERT)\n  add_definitions(-DWITH_GPU_SHADER_ASSERT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compile GLSL Sources as C++ - CMake\nDESCRIPTION: This snippet conditionally compiles the GLSL shader source files (vertex, fragment, and compute) as C++ source files if the `WITH_GPU_SHADER_CPP_COMPILATION` flag is enabled.  This is done using the `compile_sources_as_cpp` macro.  This allows for pre-processing and embedding of shaders directly into the executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(eevee_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(eevee_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  compile_sources_as_cpp(eevee_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(eevee_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Cycles Logging using GLog\nDESCRIPTION: This snippet configures logging using the GLog library. It adds definitions to enable Cycles logging and sets the GFlags namespace. It also includes the necessary directories for GLog and GFlags.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_LOGGING)\n  add_definitions(-DWITH_CYCLES_LOGGING)\n  add_definitions(${GLOG_DEFINES})\n  add_definitions(-DCYCLES_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})\n  include_directories(\n    SYSTEM\n    ${GLOG_INCLUDE_DIRS}\n    ${GFLAGS_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet lists all the source files (``.cpp`` and ``.h``) required to build the Recast and Detour libraries. These source files contain the implementation of the navigation mesh generation and pathfinding algorithms.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/recastnavigation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC \n\trecast-capi.cpp\n\trecast-capi.h\n\n\n\tDetour/Source/DetourCommon.cpp\n\tDetour/Source/DetourNode.cpp\n\tDetour/Source/DetourStatNavMesh.cpp\n\tDetour/Source/DetourStatNavMeshBuilder.cpp\n\tDetour/Source/DetourTileNavMesh.cpp\n\tDetour/Source/DetourTileNavMeshBuilder.cpp\n\n\tDetour/Include/DetourCommon.h\n\tDetour/Include/DetourNode.h\n\tDetour/Include/DetourStatNavMesh.h\n\tDetour/Include/DetourStatNavMeshBuilder.h\n\tDetour/Include/DetourTileNavMesh.h\n\tDetour/Include/DetourTileNavMeshBuilder.h\n\n\tRecast/Source/Recast.cpp\n\tRecast/Source/RecastAlloc.cpp\n\tRecast/Source/RecastArea.cpp\n\tRecast/Source/RecastContour.cpp\n\tRecast/Source/RecastFilter.cpp\n\tRecast/Source/RecastLayers.cpp\n\tRecast/Source/RecastMesh.cpp\n\tRecast/Source/RecastMeshDetail.cpp\n\tRecast/Source/RecastRasterization.cpp\n\tRecast/Source/RecastRegion.cpp\n\n\tRecast/Include/Recast.h\n\tRecast/Include/RecastAlloc.h\n\tRecast/Include/RecastAssert.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Image IMBuf Save Tests - CMake\nDESCRIPTION: Configures image buffer save tests using `add_blender_test`.  It specifies a python script and a number of input/output parameters, and tool executable. It defines optional image formats based on other WITH_IMAGE_* variables.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS AND TEST_OPENIMAGEIO_TOOL_EXISTS)\n  set(OPTIONAL_FORMATS \"\")\n  if(WITH_IMAGE_CINEON)\n    set(OPTIONAL_FORMATS \"${OPTIONAL_FORMATS} CINEON\")\n  endif()\n  if(WITH_IMAGE_OPENEXR)\n    set(OPTIONAL_FORMATS \"${OPTIONAL_FORMATS} OPENEXR\")\n  endif()\n  if(WITH_IMAGE_OPENJPEG)\n    set(OPTIONAL_FORMATS \"${OPTIONAL_FORMATS} OPENJPEG\")\n  endif()\n  if(WITH_IMAGE_WEBP)\n    set(OPTIONAL_FORMATS \"${OPTIONAL_FORMATS} WEBP\")\n  endif()\n\n  add_blender_test(\n    imbuf_save\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_imbuf_save.py\n    --\n    -test_dir \"${TEST_SRC_DIR}/imbuf_io\"\n    -output_dir \"${TEST_OUT_DIR}/imbuf_io/save\"\n    -oiiotool \"${OPENIMAGEIO_TOOL}\"\n    -optional_formats \"${OPTIONAL_FORMATS}\"\n  )\n\n  add_blender_test(\n    imbuf_load\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_imbuf_load.py\n    --\n    -test_dir \"${TEST_SRC_DIR}/imbuf_io\"\n    -output_dir \"${TEST_OUT_DIR}/imbuf_io/load\"\n    -oiiotool \"${OPENIMAGEIO_TOOL}\"\n    -optional_formats \"${OPTIONAL_FORMATS}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Detecting CUDA Version\nDESCRIPTION: This snippet retrieves the CUDA version using nvcc and stores major and minor version numbers in CMake variables. It then issues a warning if the detected CUDA version hasn't been thoroughly tested with the build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\n  execute_process(COMMAND ${CUDA_NVCC_EXECUTABLE} \"--version\" OUTPUT_VARIABLE NVCC_OUT)\n  string(REGEX REPLACE \".*release ([0-9]+)\\.([0-9]+).*\" \"\\\\1\" CUDA_VERSION_MAJOR \"${NVCC_OUT}\")\n  string(REGEX REPLACE \".*release ([0-9]+)\\.([0-9]+).*\" \"\\\\2\" CUDA_VERSION_MINOR \"${NVCC_OUT}\")\n  set(CUDA_VERSION \"${CUDA_VERSION_MAJOR}${CUDA_VERSION_MINOR}\")\n\n  # warn for other versions\n  if((CUDA_VERSION STREQUAL \"101\") OR\n     (CUDA_VERSION STREQUAL \"102\") OR\n     (CUDA_VERSION_MAJOR STREQUAL \"11\") OR\n     (CUDA_VERSION_MAJOR STREQUAL \"12\"))\n  else()\n    message(WARNING\n      \"CUDA version ${CUDA_VERSION_MAJOR}.${CUDA_VERSION_MINOR} detected, \"\n      \"build may succeed but only CUDA 12, 11, 10.2 and 10.1 have been tested\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring JACK Plugin with CMake\nDESCRIPTION: This snippet configures and builds the JACK plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, conditionally links to JACK libraries based on DYNLOAD_JACK, sets its version, and installs it to the plugin directory. It depends on WITH_JACK and PLUGIN_JACK being enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_JACK AND PLUGIN_JACK)\n\tadd_definitions(-DJACK_PLUGIN)\n\tinclude_directories(${INCLUDE} ${JACK_INCLUDE_DIRS})\n\tadd_library(audjack SHARED ${JACK_SRC} ${JACK_HDR} ${HDR})\n\tif(DYNLOAD_JACK)\n\t\ttarget_link_libraries(audjack audaspace)\n\telse()\n\t\ttarget_link_libraries(audjack audaspace ${JACK_LIBRARIES})\n\tendif()\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audjack PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\tinstall(TARGETS audjack DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the list of source files for the glog library. It includes various C++ files such as 'demangle.cc', 'logging.cc', and 'utilities.cc', as well as header files. These files are compiled to create the glog library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/demangle.cc\n  src/logging.cc\n  src/raw_logging.cc\n  src/signalhandler.cc\n  src/symbolize.cc\n  src/utilities.cc\n  src/vlog_is_on.cc\n\n  src/demangle.h\n  src/symbolize.h\n  src/utilities.h\n\n  src/config.h\n  src/config_freebsd.h\n  src/config_haiku.h\n  src/config_hurd.h\n  src/config_linux.h\n  src/config_mac.h\n  src/config_netbsd.h\n  src/config_openbsd.h\n\n  src/base/commandlineflags.h\n  src/base/googleinit.h\n  src/base/mutex.h\n\n  src/stacktrace.h\n  src/stacktrace_generic-inl.h\n  src/stacktrace_libunwind-inl.h\n  src/stacktrace_powerpc-inl.h\n  src/stacktrace_x86_64-inl.h\n  src/stacktrace_x86-inl.h\n  src/stacktrace_windows-inl.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional AVX2 Test Inclusion (CMake)\nDESCRIPTION: This snippet conditionally includes AVX2-specific unit tests based on the platform and compiler support. It excludes AVX2 tests on macOS due to issues with Rosetta. If AVX2 support is available and the platform is not macOS, it appends `util_float8_avx2_test.cpp` to the `SRC` list and sets compiler flags using `set_source_files_properties` to ensure AVX2 instructions are enabled during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  if(CXX_HAS_AVX2)\n    list(APPEND SRC\n      util_float8_avx2_test.cpp\n    )\n    set_source_files_properties(util_float8_avx2_test.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_AVX2_FLAGS}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the Mantaflow module. It includes dependencies on Blender libraries, Python, and Zlib. These libraries are required for linking the Mantaflow module and providing the necessary functionality. `PRIVATE` keyword specifies the visibility of the dependencies to the library itself.  `${PYTHON_LINKFLAGS}` are also included, suggesting they are platform dependent flags required to properly link Python.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::dependencies::optional::tbb\n  extern_mantaflow\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  ${ZLIB_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAL Plugin with CMake\nDESCRIPTION: This snippet configures and builds the OpenAL plugin for Audaspace. It defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, links it to other libraries, and installs it to the plugin directory. The functionality is enabled when both WITH_OPENAL and PLUGIN_OPENAL are true.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENAL AND PLUGIN_OPENAL)\n\tadd_definitions(-DOPENAL_PLUGIN)\n\tinclude_directories(${INCLUDE} ${OPENAL_INCLUDE_DIR})\n\tadd_library(audopenal SHARED ${OPENAL_SRC} ${OPENAL_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audopenal PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\ttarget_link_libraries(audopenal audaspace ${OPENAL_LIBRARY})\n\tinstall(TARGETS audopenal DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Parsing Delimited Numbers\nDESCRIPTION: Shows how to parse multiple delimited numbers using repeated calls to `fast_float::from_chars`. This example parses a string \"234532.3426362,7869234.9823,324562.645\" and extracts the numbers separated by commas.  It requires the fast_float header.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_6\n\nLANGUAGE: C++\nCODE:\n```\n  const std::string input =   \"234532.3426362,7869234.9823,324562.645\";\n  double result;\n  auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\n  if(answer.ec != std::errc()) {\n    // check error\n  }\n  // we have result == 234532.3426362.\n  if(answer.ptr[0] != ',') {\n    // unexpected delimiter\n  }\n  answer = fast_float::from_chars(answer.ptr + 1, input.data()+input.size(), result);\n  if(answer.ec != std::errc()) {\n    // check error\n  }\n  // we have result == 7869234.9823.\n  if(answer.ptr[0] != ',') {\n    // unexpected delimiter\n  }\n  answer = fast_float::from_chars(answer.ptr + 1, input.data()+input.size(), result);\n  if(answer.ec != std::errc()) {\n    // check error\n  }\n  // we have result == 324562.645.\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files (.cc and .hh) that comprise the FBX importer.  These files are assigned to the SRC variable and include the main IO_fbx file and various importer files for animations, armatures, materials, meshes, and utilities. These files will be compiled and linked into the bf_io_fbx library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/fbx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  IO_fbx.cc\n  importer/fbx_import.cc\n  importer/fbx_import_anim.cc\n  importer/fbx_import_armature.cc\n  importer/fbx_import_material.cc\n  importer/fbx_import_mesh.cc\n  importer/fbx_import_util.cc\n\n  IO_fbx.hh\n  importer/fbx_import.hh\n  importer/fbx_import_anim.hh\n  importer/fbx_import_armature.hh\n  importer/fbx_import_material.hh\n  importer/fbx_import_mesh.hh\n  importer/fbx_import_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating ClangTidy for Static Analysis - CMake\nDESCRIPTION: This snippet integrates ClangTidy for static analysis if `WITH_CLANG_TIDY` is enabled and the build system is not MSVC. It finds the ClangTidy executable, sets extra arguments to suppress specific warnings, and configures CMake to use ClangTidy for C, C++, Objective-C, and Objective-C++ files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CLANG_TIDY AND NOT MSVC)\n  find_package(ClangTidy REQUIRED)\n  set(CLANG_TIDY_EXTRA_ARGS --extra-arg=-Wno-error=unknown-warning-option)\n\n  set(CMAKE_C_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\n  set(CMAKE_CXX_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\n  set(CMAKE_OBJC_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\n  set(CMAKE_OBJCXX_CLANG_TIDY ${CLANG_TIDY_EXECUTABLE};${CLANG_TIDY_EXTRA_ARGS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This CMake snippet defines the source files for the expression system. It lists both .cpp and .h files that make up the expression library. These files will be compiled to build the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Expressions/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/BaseListValue.cpp\n  intern/BoolValue.cpp\n  intern/ConstExpr.cpp\n  intern/EmptyValue.cpp\n  intern/ErrorValue.cpp\n  intern/Expression.cpp\n  intern/FloatValue.cpp\n  intern/IdentifierExpr.cpp\n  intern/IfExpr.cpp\n  intern/InputParser.cpp\n  intern/IntValue.cpp\n  intern/Operator1Expr.cpp\n  intern/Operator2Expr.cpp\n  intern/PyObjectPlus.cpp\n  intern/StringValue.cpp\n  intern/Value.cpp\n  intern/ListWrapper.cpp\n\n  EXP_BaseListValue.h\n  EXP_BoolValue.h\n  EXP_ConstExpr.h\n  EXP_EmptyValue.h\n  EXP_ErrorValue.h\n  EXP_Expression.h\n  EXP_FloatValue.h\n  EXP_IdentifierExpr.h\n  EXP_IfExpr.h\n  EXP_InputParser.h\n  EXP_IntValue.h\n  EXP_Operator1Expr.h\n  EXP_Operator2Expr.h\n  EXP_PyObjectPlus.h\n  EXP_Python.h\n  EXP_StringValue.h\n  EXP_Value.h\n  EXP_ListWrapper.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Compositor Nodes\nDESCRIPTION: This snippet specifies the library dependencies for the compositor nodes library. It lists both private Blender libraries (starting with 'bf::') and external libraries (like fmtlib). These libraries provide core functionalities for the compositor, such as kernel operations, memory management, data structures, and rendering capabilities. `bf_compositor` is a public dependency.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  bf_compositor\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Files\nDESCRIPTION: This snippet defines the library files for the Quadriflow library (currently empty).\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Types Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to data types and structures used in the Cycles kernel. It includes definitions for data arrays, templates, global variables, image structures, tables, and basic types.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_TYPES_HEADERS\n  data_arrays.h\n  data_template.h\n  globals.h\n  image.h\n  tables.h\n  types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Calling build_deps.cmd (Batch)\nDESCRIPTION: This snippet calls the `build_deps.cmd` script, passing the Visual Studio version (2019), architecture (x64), and build type (release) as arguments. This script is assumed to be located in the `c:\\blendergit\\blender\\build_files\\build_environment\\windows\\` directory. The `call` command is used to ensure that the batch script execution returns to the current script after `build_deps.cmd` completes.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/windows/vmbuild.cmd.txt#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\ncall c:\\blendergit\\blender\\build_files\\build_environment\\windows\\build_deps.cmd 2019 x64 release\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (Alembic) - CMake\nDESCRIPTION: This snippet conditionally appends the Alembic I/O library and defines a preprocessor definition if the WITH_ALEMBIC flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  list(APPEND LIB\n    bf_io_alembic\n  )\n  add_definitions(-DWITH_ALEMBIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Support in CMake\nDESCRIPTION: This snippet conditionally adds Python support.  If the WITH_PYTHON option is enabled, it appends the Python include directories to the INC_SYS list.  It relies on the PYTHON_INCLUDE_DIRS variable being defined elsewhere, presumably by FindPython.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC_SYS\n    ${PYTHON_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories for the mathutils module. `INC` specifies the local directory, while `INC_SYS` includes Python's include directories. This ensures that the necessary header files are available during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/mathutils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Wavefront OBJ Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_IO_WAVEFRONT_OBJ` option is enabled. If it is, the 'wavefront_obj' subdirectory is added to the build using the `add_subdirectory` command. This ensures that the Wavefront OBJ importer/exporter is included in the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ)\n  add_subdirectory(wavefront_obj)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Build\nDESCRIPTION: This snippet enables a \"unity build\" (also known as jumbo build), which combines multiple source files into a single compilation unit. This can improve build times. It sets the number of files per unit to 10.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_set_target_unity_build(bf_nodes_shader 10)\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks for the `WITH_IO_CSV` option. If enabled, the 'csv' subdirectory is added to the build using the `add_subdirectory` command, allowing the CSV importer/exporter to be built.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_CSV)\n  add_subdirectory(csv)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Ninja Job Pools\nDESCRIPTION: This snippet defines Ninja job pools for compilation, heavy compilation, and linking. It uses `set_property` to append job pools to the GLOBAL property JOB_POOLS. It also sets `CMAKE_JOB_POOL_COMPILE` and `CMAKE_JOB_POOL_LINK` if the corresponding Ninja variables are defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_109\n\nLANGUAGE: cmake\nCODE:\n```\n  if(NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS compile_job_pool=${NINJA_MAX_NUM_PARALLEL_COMPILE_JOBS}\n    )\n    set(CMAKE_JOB_POOL_COMPILE compile_job_pool)\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS compile_heavy_job_pool=${NINJA_MAX_NUM_PARALLEL_COMPILE_HEAVY_JOBS}\n    )\n  endif()\n\n  if(NINJA_MAX_NUM_PARALLEL_LINK_JOBS)\n    set_property(\n      GLOBAL APPEND PROPERTY\n      JOB_POOLS link_job_pool=${NINJA_MAX_NUM_PARALLEL_LINK_JOBS}\n    )\n    set(CMAKE_JOB_POOL_LINK link_job_pool)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting default SYCL options for spir64_gen target\nDESCRIPTION: This snippet sets default compiler options for the spir64_gen SYCL target, initializing it with the spir64 options. It also prepends the `--format zebin` flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen)\n    set(CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen \"${CYCLES_ONEAPI_SYCL_OPTIONS_spir64}\" CACHE STRING \"Extra build options for spir64_gen target\")\n    mark_as_advanced(CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen)\n  endif()\n  # Enable `zebin`, a graphics binary format with improved compatibility.\n  string(PREPEND CYCLES_ONEAPI_SYCL_OPTIONS_spir64_gen \"--format zebin \")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency of `bf_nodes_geometry` on `bf_rna`, ensuring that `bf_rna` is built before `bf_nodes_geometry`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_nodes_geometry bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Set System Include Directories - CMake\nDESCRIPTION: This snippet defines the system include directories required for compiling the bf_editor_lattice library. In this specific case, it's set to an empty list, indicating no additional system include directories are needed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/lattice/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Object Modifier Array Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for the array modifier. It loads `array_test.blend` and executes the Python text block `run_tests.py` embedded within the blend file. This checks the correct behavior of the array modifier.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    object_modifier_array\n    ${TEST_SRC_DIR}/modifier_stack/array_test.blend\n    --python-text run_tests.py\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries - CMake\nDESCRIPTION: This snippet defines the libraries that the CSV import library depends on. It includes Blender Foundation libraries such as `bf_blenkernel`, `bf::blenlib`, `bf::depsgraph`, `bf::dna`, `bf::intern::guardedalloc`, and `bf_io_common`, as well as external libraries like `bf::extern::fmtlib`. The `PRIVATE` keyword indicates that these dependencies are not exposed to other libraries that link against `bf_io_csv`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/csv/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  bf_blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Cycles Integrator Library\nDESCRIPTION: This snippet creates the `cycles_integrator` library using the `cycles_add_library` macro. It specifies the library name, its dependencies (`${LIB}`), source files (`${SRC}`), and header files (`${SRC_HEADERS}`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/integrator/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_add_library(cycles_integrator \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenEXR Support\nDESCRIPTION: Conditionally adds OpenEXR support to the imbuf library. If `WITH_IMAGE_OPENEXR` is enabled, it appends `bf_imbuf_openexr` to the list of libraries and adds the `-DWITH_IMAGE_OPENEXR` definition. Otherwise, it appends a stub implementation (`intern/openexr/openexr_stub.cpp`) to the source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND LIB\n    bf_imbuf_openexr\n  )\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nelse()\n  list(APPEND SRC\n    intern/openexr/openexr_stub.cpp\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Excluding Files During Installation (CMake)\nDESCRIPTION: This snippet demonstrates how to exclude specific files or patterns during the installation process using the `PATTERN ... EXCLUDE` command within a CMake `install` block. This is commonly used to prevent cache files or debug symbols from being included in the final installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nPATTERN \"*.pdb\" EXCLUDE\nPATTERN \"*_d.*\" EXCLUDE\n```\n\n----------------------------------------\n\nTITLE: Disabling Intel Compiler Warnings\nDESCRIPTION: This snippet disables specific numbered warnings for the Intel compiler. These warnings are known to produce false positives. The warnings are appended to both C and C++ warning flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_128\n\nLANGUAGE: cmake\nCODE:\n```\nstring(APPEND C_WARNINGS \" -wd188,186,144,913,556,858,597,177,1292,167,279,592,94,2722,3199\")\n  string(APPEND CXX_WARNINGS \" -wd188,186,144,913,556,858,597,177,1292,167,279,592,94,2722,3199\")\n```\n\n----------------------------------------\n\nTITLE: Adding Grease Pencil Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_IO_GREASE_PENCIL` option is enabled. If the option is enabled, it adds the 'grease_pencil' subdirectory to the build, incorporating the Grease Pencil functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_GREASE_PENCIL)\n  add_subdirectory(grease_pencil)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add GL Definitions (CMake)\nDESCRIPTION: Adds the OpenGL definitions to the compiler flags, making them available during compilation.  ${GL_DEFINITIONS} is expected to be a CMake variable containing relevant OpenGL preprocessor definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(${GL_DEFINITIONS})\n```\n\n----------------------------------------\n\nTITLE: Creating the gflags library\nDESCRIPTION: This snippet calls the `blender_add_lib` CMake function to create the `extern_gflags` library. It passes the source files, include directories, and library dependencies to the function, effectively building the gflags library within the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_gflags \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories required for compiling the rasterizer library. It includes paths to local modules and external dependencies like Boost and Python.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  RAS_OpenGLRasterizer\n  ../Common\n  ../Expressions\n  ../Ketsji\n  ../Physics/Common\n  ../SceneGraph\n  ../GameLogic\n  ../../blender/blenkernel\n  ../../blender/draw/intern\n  ../../blender/makesrna\n  ../../../intern/termcolor\n)\n\nset(INC_SYS\n  ../../../intern/moto/include\n  ${BOOST_INCLUDE_DIR}\n)\n\nif(WITH_PYTHON)\n  list(APPEND INC_SYS\n    ${PYTHON_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining USD Support\nDESCRIPTION: This snippet defines USD support by adding the WITH_USD definition. If enabled, it allows compilation against the USD library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD)\n  add_definitions(-DWITH_USD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: X11 Options\nDESCRIPTION: This snippet defines various X11 related options if WITH_GHOST_X11 is enabled, including Xinput, Xinerama, XF86VMode, and XFixes. These options enable support for tablet input, multi-monitor setups, video mode switching, and XWayland cursor warping workarounds.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GHOST_X11)\n  option(WITH_X11_XINPUT \"Enable X11 Xinput (tablet support and unicode input)\" ON)\n  option(WITH_X11_XINERAMA  \"Enable multi-monitor support\" ON)\n  option(WITH_X11_XF86VMODE \"Enable X11 video mode switching\" ON)\n  option(WITH_X11_XFIXES \"Enable X11 XWayland cursor warping workaround\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Quadriflow Remesher\nDESCRIPTION: This snippet conditionally includes Quadriflow remesher support. It appends `../../../intern/quadriflow` to `INC` and adds `bf_intern_quadriflow` to the library list `LIB`, and defines `-DWITH_QUADRIFLOW` to enable the use of Quadriflow for mesh remeshing.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_QUADRIFLOW)\n  list(APPEND INC\n    ../../../intern/quadriflow\n  )\n  list(APPEND LIB\n    bf_intern_quadriflow\n  )\n  add_definitions(-DWITH_QUADRIFLOW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories for the `blenloader` library. It sets both public and system include directories. `INC` contains paths to local headers, while `INC_SYS` contains paths to system headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenloader/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../editors/include\n  ../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${ZSTD_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Building QuadriFlow with Logging\nDESCRIPTION: This CMake command configures QuadriFlow to enable verbose logging during the build process. The `-DBUILD_LOG=ON` flag activates logging, which can be helpful for understanding the SAT flip removal procedure.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DCMAKE_BUILD_TYPE=release -DBUILD_LOG=ON\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notices to Source Files\nDESCRIPTION: This snippet shows the standard format for adding GPL notices to the start of each source file, including the program's name, copyright information, and a reference to the GNU General Public License.  It emphasizes excluding warranty and providing information about redistribution and modification.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/GPL-3.0-or-later.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreAudio Plugin with CMake\nDESCRIPTION: This snippet conditionally configures and builds the CoreAudio plugin for Audaspace. It checks if both WITH_COREAUDIO and PLUGIN_COREAUDIO are enabled, defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, links it to other libraries, and installs it to the plugin directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COREAUDIO AND PLUGIN_COREAUDIO)\n\tadd_definitions(-DCOREAUDIO_PLUGIN)\n\tinclude_directories(${INCLUDE} ${COREAUDIO_INCLUDE_DIRS})\n\tadd_library(audcoreaudio SHARED ${COREAUDIO_SRC} ${COREAUDIO_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audcoreaudio PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\ttarget_link_libraries(audcoreaudio audaspace ${COREAUDIO_LIBRARIES})\n\tinstall(TARGETS audcoreaudio DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Vulkan Backend Setup (CMake)\nDESCRIPTION: This CMake snippet configures the Vulkan backend if enabled. It includes platform-specific (Apple) MoltenVK setup, general Vulkan include directories, and source files. It also appends Vulkan-related libraries and defines a preprocessor definition for enabling the Vulkan backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_VULKAN_BACKEND)\n  if(APPLE)\n    list(APPEND INC_SYS\n      ${MOLTENVK_INCLUDE_DIRS}\n    )\n\n    list(APPEND LIB\n      ${MOLTENVK_LIBRARIES}\n    )\n  endif()\n\n  list(APPEND INC\n    ../../../extern/vulkan_memory_allocator\n  )\n  list(APPEND INC_SYS\n    ${VULKAN_INCLUDE_DIRS}\n  )\n\n  list(APPEND INC_SYS\n    ${SHADERC_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    ${VULKAN_SRC}\n  )\n\n  list(APPEND LIB\n    ${VULKAN_LIBRARIES}\n    ${SHADERC_LIBRARIES}\n    extern_vulkan_memory_allocator\n    PRIVATE bf::extern::xxhash\n  )\n\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Linked Libraries - CMake\nDESCRIPTION: This CMake code snippet defines the libraries that the `bf_editor_space_statusbar` library depends on.  These are Blender's internal libraries (`bf::blenkernel`, `bf::blenlib`, `bf::blenloader`, `bf::blentranslation`, `bf::dna`, `bf::gpu`, `bf::intern::guardedalloc`, `bf::windowmanager`). The `PRIVATE` keyword indicates that these dependencies are not exposed to other libraries that link against `bf_editor_space_statusbar`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_statusbar/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting RGBA Color Values (setRGBA)\nDESCRIPTION: Illustrates different ways to set the color of a vertex using the `setRGBA()` method. It accepts either a packed integer representing the RGBA color or a list of four floating-point values [r, g, b, a], where each value ranges from 0.0 to 1.0. Note that endianness affects integer representation of the color.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VertexProxy.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nv.setRGBA(0xff0000ff) # Red\nv.setRGBA(0xff00ff00) # Green on little endian, transparent purple on big endian\nv.setRGBA([1.0, 0.0, 0.0, 1.0]) # Red\nv.setRGBA([0.0, 1.0, 0.0, 1.0]) # Green on all platforms.\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the libraries (`LIB`) that the OpenCOLLADA library depends on. It includes external libraries like `OPENCOLLADA_LIBRARIES` and `XML2_LIBRARIES`, as well as internal Blender libraries prefixed with `bf::`. The `PRIVATE` keyword indicates that these dependencies are not exposed to other libraries that link against bf_io_collada.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${OPENCOLLADA_LIBRARIES}\n  ${XML2_LIBRARIES}\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines a variable for system include directories. It's initialized as empty and is later populated conditionally.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Low-Level Keyframe Insertion in Blender\nDESCRIPTION: This snippet demonstrates how to add keyframes to an object using low-level functions in Blender's Python API. It creates an action, f-curve, and keyframe points to control the object's Z location.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nobj = bpy.context.object\nobj.animation_data_create()\nobj.animation_data.action = bpy.data.actions.new(name=\"MyAction\")\nfcu_z = obj.animation_data.action.fcurves.new(data_path=\"location\", index=2)\nfcu_z.keyframe_points.add(2)\nfcu_z.keyframe_points[0].co = 10.0, 0.0\nfcu_z.keyframe_points[1].co = 20.0, 1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Theora Source Files - Decoder\nDESCRIPTION: This snippet defines a list of source files that make up the decoder part of the Theora library. These files contain functionalities specific to decoding video.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBTHEORA_DEC\n  \"lib/decapiwrapper.c\"\n  \"lib/decinfo.c\"\n  \"lib/decode.c\"\n  \"lib/huffdec.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Python Module - CMake\nDESCRIPTION: This snippet disables the Python module by setting `WITH_PYTHON_MODULE` and `WITH_GTESTS` to `OFF`.  It uses the `set_and_warn_incompatible` macro, likely to handle the interaction of these options.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_105\n\nLANGUAGE: cmake\nCODE:\n```\nset_and_warn_incompatible(WITH_PYTHON_MODULE WITH_GTESTS OFF)\n```\n\n----------------------------------------\n\nTITLE: Installing BlendThumb Target (CMake)\nDESCRIPTION: This snippet conditionally installs the `BlendThumb` target if `WITH_BLENDER_THUMBNAILER` is enabled. The target is installed to the root directory (`.`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_BLENDER_THUMBNAILER)\n    install(\n      TARGETS BlendThumb\n      DESTINATION \".\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: OpenXR Option with Platform Condition\nDESCRIPTION: This snippet defines the WITH_XR_OPENXR option for enabling VR features through the OpenXR specification.  It's default value is set to OFF on macOS because OpenXR runtime is not available and code is not well tested.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(_option_default ON)\nif(APPLE)\n  # There's no OpenXR runtime in sight for macOS, neither is code well\n  # tested there -> disable it by default.\n  set(_option_default OFF)\nendif()\noption(WITH_XR_OPENXR \"Enable VR features through the OpenXR specification\" ${_option_default})\nif(APPLE)\n  mark_as_advanced(WITH_XR_OPENXR)\nendif()\nunset(_option_default)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Command for SYCL Kernel Compilation\nDESCRIPTION: This CMake snippet defines a custom command to compile a SYCL kernel using the specified SYCL compiler. It sets up the necessary environment variables like LD_LIBRARY_PATH and PATH to locate the compiler and required libraries. The command uses different compiler flags based on the selected build configuration (Release, RelWithDebInfo, Debug, MinSizeRel) and depends on the listed source files and the SYCL compiler.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${cycles_kernel_oneapi_lib}\n  COMMAND\n    ${CMAKE_COMMAND} -E env\n    \"LD_LIBRARY_PATH=${sycl_compiler_root}/../lib:${OCLOC_INSTALL_DIR}/lib:${IGC_INSTALL_DIR}/lib\"\n    # `$ENV{PATH}` is for compiler to find `ld`.\n    \"PATH=${OCLOC_INSTALL_DIR}/bin:${sycl_compiler_root}:$ENV{PATH}\"\n    ${SYCL_COMPILER}\n    \"$<$<CONFIG:Release>:${sycl_compiler_flags_Release_str}>\"\n    \"$<$<CONFIG:RelWithDebInfo>:${sycl_compiler_flags_RelWithDebInfo_str}>\"\n    \"$<$<CONFIG:Debug>:${sycl_compiler_flags_Debug_str}>\"\n    \"$<$<CONFIG:MinSizeRel>:${sycl_compiler_flags_Release_str}>\"\n  COMMAND_EXPAND_LISTS\n  DEPENDS ${cycles_oneapi_kernel_sources} ${SYCL_COMPILER})\n```\n\n----------------------------------------\n\nTITLE: Enabling Libmv Integration\nDESCRIPTION: This snippet adds a preprocessor definition `-DWITH_LIBMV` if the `WITH_LIBMV` option is enabled. This enables the integration of the libmv library, likely for motion tracking and camera solving functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBMV)\n  add_definitions(-DWITH_LIBMV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Specifies the libraries that the bf_python_ext library depends on. It includes Python libraries, Blender's internal libraries (blenkernel, blenlib, dna, gpu, clog, guardedalloc), and Epoxy. These libraries provide essential functionalities for the Python extension, such as math operations, data structures, and OpenGL support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with FFTW3\nDESCRIPTION: This snippet conditionally includes FFTW3 library support for Fast Fourier Transforms. It appends FFTW3 include directories to `INC_SYS` and FFTW3 libraries to `LIB`. It defines `-DFFTW3=1` to enable corresponding code paths for FFT operations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DFFTW3=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional USD Support in CMake\nDESCRIPTION: This snippet conditionally adds USD (Universal Scene Description) support to the game engine player.  If the WITH_USD option is enabled, it appends the bf_io_usd library to the LIB list.  It also contained a commented out line to add preprocessor definitions (-DWITH_USD), indicating the initial intention to use a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_USD)\n  list(APPEND LIB\n    bf_io_usd\n  )\n  #add_definitions(-DWITH_USD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: Specifies the private libraries that the transform editor library depends on. These libraries provide supporting functionalities such as animation rigging, font handling, kernel operations, and other core Blender components. The `PRIVATE` keyword ensures these dependencies are not exposed to other libraries that link against `bf_editor_transform`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/transform/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenfont\n  PRIVATE bf::blentranslation\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_mask\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with OpenVDB\nDESCRIPTION: This snippet conditionally includes OpenVDB support. It appends `../../../intern/openvdb` to `INC`, OpenVDB include directories to `INC_SYS` and adds the OpenVDB library and associated definitions.  It adds both the internal and system OpenVDB libraries to `LIB`, and sets the `-DWITH_OPENVDB` and `${OPENVDB_DEFINITIONS}`. This configures support for volumetric data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries in CMake\nDESCRIPTION: This snippet defines the libraries that the game engine player depends on. These libraries are linked during the build process to resolve dependencies and provide necessary functionalities. It covers internal Blender libraries such as animrig, asset_system, blenfont, and more.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::draw\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_ghost\n  bf_nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python on macOS (CMake)\nDESCRIPTION: This snippet conditionally installs Python libraries and the Python executable on macOS if `WITH_PYTHON` is enabled, `WITH_PYTHON_MODULE` is not enabled, and `WITH_PYTHON_FRAMEWORK` is not enabled. It copies the Python libraries and executable into the installation directory and also installs the `pyconfig.h` file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_PYTHON AND NOT WITH_PYTHON_MODULE AND NOT WITH_PYTHON_FRAMEWORK)\n    # Copy the python libraries into the install directory.\n    install_dir(\n      ${PYTHON_LIBPATH}/python${PYTHON_VERSION}\n      ${TARGETDIR_VER}/python/lib\n    )\n\n    # Install Python executable.\n    install(\n      PROGRAMS ${PYTHON_EXECUTABLE}\n      DESTINATION ${TARGETDIR_VER}/python/bin\n    )\n\n    # Needed for `distutils/pip`.\n    # Get the last part of the include dir, will be `python{version}{abiflag}`.\n    get_filename_component(_py_inc_suffix ${PYTHON_INCLUDE_DIR} NAME)\n    install(\n      FILES ${PYTHON_INCLUDE_DIR}/pyconfig.h\n      DESTINATION ${TARGETDIR_VER}/python/include/${_py_inc_suffix}\n    )\n    unset(_py_inc_suffix)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Removed Data (Crash Example) in Blender Python\nDESCRIPTION: This code demonstrates a scenario where Blender's protection against accessing removed data fails, leading to a potential crash. It creates a mesh, stores a reference to its vertices, removes the mesh, and then attempts to access the vertices. Because the vertices reference still exists, but the mesh is removed, a crash may occur.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nmesh = bpy.data.meshes.new(name=\"MyMesh\")\nvertices = mesh.vertices\nbpy.data.meshes.remove(mesh)\nprint(vertices)  # <- This may crash.\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL Plugin with CMake\nDESCRIPTION: This snippet configures and builds the SDL plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, links it to other libraries, and installs it to the plugin directory. The process is conditional upon enabling both WITH_SDL and PLUGIN_SDL.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_SDL AND PLUGIN_SDL)\n\tadd_definitions(-DSDL_PLUGIN)\n\tinclude_directories(${INCLUDE} ${SDL_INCLUDE_DIR})\n\tadd_library(audsdl SHARED ${SDL_SRC} ${SDL_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audsdl PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\ttarget_link_libraries(audsdl audaspace ${SDL_LIBRARY})\n\tinstall(TARGETS audsdl DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring PLY I/O Tests (Conditional) - CMake\nDESCRIPTION: This code block conditionally defines and creates unit tests for the PLY I/O library if Google Test (`WITH_GTESTS`) is enabled.  It sets source files, include directories, and library dependencies specific to the tests.  It then uses `blender_add_test_suite_lib` to create a test suite executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/ply/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/io_ply_exporter_test.cc\n    tests/io_ply_importer_test.cc\n  )\n  set(TEST_INC\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n  set(TEST_LIB\n    bf_io_ply\n    bf_blenloader_test_util\n  )\n  blender_add_test_suite_lib(io_ply \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Camera - Python\nDESCRIPTION: This code snippet demonstrates how to programmatically set the active camera for a scene in the Blender Game Engine (BGE) using Python. It retrieves the current scene and sets the 'active_camera' attribute to a specific camera object found by its name. This allows dynamic control over which camera the scene renders from, avoiding the need for the KX_SceneActuator. It requires the 'bge' module.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\nown = bge.logic.getCurrentController().owner\nscene = own.scene\n\nscene.active_camera = scene.objects[\"Camera.001\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring WASAPI Plugin with CMake\nDESCRIPTION: This snippet configures and builds the WASAPI plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, links it to other libraries (including ksuser), and installs it to the plugin directory. Requires WITH_WASAPI and PLUGIN_WASAPI to be enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_WASAPI AND PLUGIN_WASAPI)\n\tadd_definitions(-DWASAPI_PLUGIN)\n\tinclude_directories(${INCLUDE})\n\tadd_library(audwasapi SHARED ${WASAPI_SRC} ${WASAPI_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audwasapi PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\ttarget_link_libraries(audwasapi audaspace ksuser)\n\tinstall(TARGETS audwasapi DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories with CMake\nDESCRIPTION: This CMake command adds the project's source and binary directories to the include path. This allows the compiler to find header files located in those directories when compiling the project.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/demo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding GMP Definitions and Libraries (CMake)\nDESCRIPTION: This snippet conditionally adds the preprocessor definition WITH_GMP, include directories from GMP_INCLUDE_DIRS, and libraries from GMP_LIBRARIES if the WITH_GMP option is enabled.  This enables the use of the GNU Multiple Precision Arithmetic Library (GMP) within the BLI library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GPL License Notice to a Program - C\nDESCRIPTION: This code snippet provides a template for adding a GNU General Public License notice to the start of each source file in a program. It includes the program's name, copyright information, and a statement about the terms of the GPL under which the program is distributed. It also states the lack of warranty and directs users to the full license text.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/GPL3-license.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files (CMake 3.19+)\nDESCRIPTION: This code conditionally adds source files to the bf_intern_atomic target based on the CMake version. If the CMake version is 3.19 or greater, it defines a list of source files (SRC) and adds them to the target. The blender_source_group command is used to organize these files in the IDE.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/atomic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.19\")\n  set(SRC\n    atomic_ops.h\n    intern/atomic_ops_ext.h\n    intern/atomic_ops_msvc.h\n    intern/atomic_ops_unix.h\n    intern/atomic_ops_utils.h\n  )\n  target_sources(bf_intern_atomic PRIVATE ${SRC})\n  blender_source_group(bf_intern_atomic ${SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining source files\nDESCRIPTION: This snippet defines the list of source files that make up the BLF library. It lists both C++ (.cc) and header (.hh) files, indicating the source code to be compiled and included in the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/blf.cc\n  intern/blf_default.cc\n  intern/blf_dir.cc\n  intern/blf_font.cc\n  intern/blf_font_default.cc\n  intern/blf_glyph.cc\n  intern/blf_thumbs.cc\n  BLF_api.hh\n  intern/blf_internal.hh\n  intern/blf_internal_types.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding blenkernel Library\nDESCRIPTION: This snippet creates the `bf_blenkernel` library using the provided source files (`SRC`), include directories (`INC`), system include directories (`INC_SYS`), and libraries (`LIB`). It also creates an alias `bf::blenkernel` for easier referencing. This encapsulates all the configuration done previously into a library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blenkernel \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blenkernel ALIAS bf_blenkernel)\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Library\nDESCRIPTION: Adds the `cycles_session` library using the specified source files, header files and libraries. This is a custom function `cycles_add_library` which will create and link the library with the provided sources and headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/session/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncycles_add_library(cycles_session \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This CMake snippet defines the list of C++ source files that make up the Action Editor library. These files contain the implementation of the Action Editor's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_action/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  action_buttons.cc\n  action_data.cc\n  action_draw.cc\n  action_edit.cc\n  action_ops.cc\n  action_select.cc\n  space_action.cc\n\n  action_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Inclusion (WITH_BULLET) - CMake\nDESCRIPTION: This snippet conditionally appends include directories and libraries related to the Bullet physics engine. It also defines `WITH_BULLET` if it is enabled. This block includes the Bullet library if the `WITH_BULLET` option is enabled, allowing for rigid body simulations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n    ../../../../intern/rigidbody\n  )\n  list(APPEND LIB\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the OpenImageIO integration. It includes the OpenImageIO libraries themselves, as well as Blender's internal libraries like blenkernel, blenlib, dna, and guardedalloc. PugiXML and OpenEXR libraries are added conditionally based on CMake flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/oiio/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${OPENIMAGEIO_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n\nif(WITH_PUGIXML)\n  list(APPEND LIB\n    ${PUGIXML_LIBRARIES}\n  )\nendif()\n\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND LIB\n    ${OPENEXR_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Application Directory\nDESCRIPTION: This snippet conditionally adds the 'source/creator' subdirectory, which contains the Blender application source code, if the WITH_BLENDER option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_143\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER)\n  add_subdirectory(source/creator)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the ge_converter Library - CMake\nDESCRIPTION: This snippet calls the `blender_add_lib` macro (likely defined elsewhere in the CMake project) to create the `ge_converter` library.  It passes the source files, include directories, system include directories, and library dependencies defined in the previous snippets.  This macro encapsulates the details of creating a library within the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_converter \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (IK Solver)\nDESCRIPTION: Conditionally adds the 'iksolver' subdirectory if the WITH_IK_SOLVER flag is enabled. This includes the IK solver module.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IK_SOLVER)\n  add_subdirectory(iksolver)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the BLI library. INC defines project-relative include directories, and INC_SYS defines system include directories, including those for external libraries like wcwidth, json, Zlib, and Zstd.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../../../intern/eigen\n)\n\nset(INC_SYS\n  ../../../extern/wcwidth\n  ../../../extern/json/include\n\n  ${ZLIB_INCLUDE_DIRS}\n  ${ZSTD_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files for the script editor module. It lists the C++ files that will be compiled to create the module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_script/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  script_edit.cc\n  script_ops.cc\n  space_script.cc\n\n  script_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for Draco-Blender Module\nDESCRIPTION: Defines the source files for the Draco-Blender bridging module, including both C++ source and header files.  These files implement the interface between the Draco library and Blender, enabling Draco compression and decompression within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/common.cpp\n  src/decoder.cpp\n  src/encoder.cpp\n\n  src/common.h\n  src/decoder.h\n  src/encoder.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Render Library - CMake\nDESCRIPTION: Creates the 'bf_render' library using the specified source files, include directories, and library dependencies.  Also creates an alias for the library as 'bf::render'.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib_nolist(bf_render \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::render ALIAS bf_render)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions (MSVC)\nDESCRIPTION: This snippet adds the /DNOMINMAX compiler definition when using MSVC. This is often used to prevent conflicts with the Windows API's min/max macros.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  add_definitions(\n    /DNOMINMAX\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries\nDESCRIPTION: This snippet specifies the private libraries that the rasterizer library depends on. These libraries provide functionalities such as font handling, math operations, scene management, and graphics rendering.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  bf_intern_moto\n  ge_rasterizer_opengl\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library with CMake\nDESCRIPTION: This snippet creates a shared library named `theora` by linking together the object libraries created in the previous step. It also links against the OGG library using `target_link_libraries`. The `libtheora.def` file is included, likely for Windows compatibility (import/export definitions).\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(theora $<TARGET_OBJECTS:theora-common> $<TARGET_OBJECTS:theora-enc> $<TARGET_OBJECTS:theora-dec> \"libtheora.def\")\ntarget_link_libraries(theora ${OGG_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB)\nDESCRIPTION: This snippet lists the library dependencies required for linking the sculpt and paint editor library. These dependencies include various Blender internal libraries (blenkernel, blenlib, bmesh, etc.) and external libraries (fmtlib, atomic, clog, guardedalloc). 'PRIVATE' indicates these libraries are only needed for linking this specific target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Generating C++ Documentation with Doxygen\nDESCRIPTION: This snippet checks if Doxygen is installed and configures a custom target to build C++ HTML documentation.  It uses `find_package` to locate Doxygen, configures a Doxyfile from a template, and adds a custom target that executes Doxygen. The generated documentation is then installed to a specified destination.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_DOCS)\n\tfind_package(Doxygen ${PACKAGE_OPTION})\n\n\tif(DOXYGEN_FOUND AND DOXYGEN_DOT_FOUND)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/doc/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)\n\n\t\tadd_custom_target(audaspace_doc ALL ${DOXYGEN_EXECUTABLE} Doxyfile COMMENT \"Building C++ HTML documentation with Doxygen.\")\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_DOCS FALSE CACHE BOOL \"Build C++ HTML Documentation with Doxygen\" FORCE)\n\t\telse()\n\t\t\tset(WITH_DOCS FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"Doxygen (and/or dot) not found, documentation will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to RNA\nDESCRIPTION: Adds a dependency on the `bf_rna` library to the `bf_editor_armature` library. This ensures that the RNA library is built before the armature editor library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/armature/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_armature bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines the library dependencies required for compiling the `bf_editor_id_management` library. It lists the Blender Foundation libraries that the module depends on.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/id_management/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::windowmanager\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the list of source files (.cpp and .h) that make up the ge_videotexture library. These files implement the various classes and functions related to video texture handling in the game engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  Exception.cpp\n  FilterBase.cpp\n  FilterBlueScreen.cpp\n  FilterColor.cpp\n  FilterNormal.cpp\n  FilterSource.cpp\n  ImageBase.cpp\n  ImageBuff.cpp\n  ImageMix.cpp\n  ImageRender.cpp\n  ImageViewport.cpp\n  PyTypeList.cpp\n  Texture.cpp\n  DeckLink.cpp\n  VideoBase.cpp\n  VideoFFmpeg.cpp\n  VideoDeckLink.cpp\n  blendVideoTex.cpp\n\n  Common.h\n  Exception.h\n  FilterBase.h\n  FilterBlueScreen.h\n  FilterColor.h\n  FilterNormal.h\n  FilterSource.h\n  ImageBase.h\n  ImageBuff.h\n  ImageMix.h\n  ImageRender.h\n  ImageViewport.h\n  PyTypeList.h\n  Texture.h\n  DeckLink.h\n  VideoBase.h\n  VideoFFmpeg.h\n  VideoDeckLink.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Audaspace C Bindings with CMake\nDESCRIPTION: This snippet conditionally builds and installs C bindings for Audaspace. If WITH_C is enabled, it checks for SEPARATE_C to build a separate shared library, links it to audaspace, sets the SOVERSION, and installs the library. If AUDASPACE_STANDALONE is enabled, it installs the C header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_38\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_C)\n\tif(SEPARATE_C)\n\t\tadd_library(audaspace-c ${LIBRARY_TYPE} ${C_SRC} ${C_HDR})\n\t\ttarget_link_libraries(audaspace-c audaspace)\n\t\tset_target_properties(audaspace-c PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\t\tinstall(TARGETS audaspace-c\n\t\t\tRUNTIME DESTINATION ${BIN_DESTINATION}\n\t\t\tLIBRARY DESTINATION ${LIB_DESTINATION}\n\t\t\tARCHIVE DESTINATION ${LIB_DESTINATION}\n\t\t)\n\tendif()\n\n\tif(AUDASPACE_STANDALONE)\n\t\tinstall(FILES ${C_HDR} DESTINATION include/audaspace)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Python Package (Numpy)\nDESCRIPTION: This snippet attempts to find the numpy python package and set appropriate variables for it. The code first checks if the PYTHON_NUMPY_PATH variable is already set. If not, it attempts to locate the numpy headers using `find_python_package`. It uses different include paths depending on the Python version.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_132\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    # Always use numpy bundled in precompiled libs.\n  elseif((WITH_PYTHON_INSTALL AND WITH_PYTHON_INSTALL_NUMPY) OR WITH_PYTHON_NUMPY)\n    if((\"${PYTHON_NUMPY_PATH}\" STREQUAL \"\") OR (${PYTHON_NUMPY_PATH} MATCHES NOTFOUND))\n      set(_numpy_include \"_core/include\")\n      if(PYTHON_VERSION VERSION_LESS \"3.13\")\n        set(_numpy_include \"core/include\")\n      endif()\n      find_python_package(numpy \"${_numpy_include}\")\n      unset(_numpy_include)\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Blenderplayer Target Directories (Apple)\nDESCRIPTION: This snippet sets the target directories for the Blenderplayer application on macOS, specifically for resources, libraries, and text files within the application bundle. It also sets the BUILD_WITH_INSTALL_RPATH property for the blenderplayer target. These directories are used during the installation process to place the appropriate files in their correct locations within the Blenderplayer.app structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n\n  set(PLAYER_TARGETDIR_VER Blenderplayer.app/Contents/Resources/${BLENDER_VERSION})\n  set(PLAYER_TARGETDIR_LIB Blenderplayer.app/Contents/Resources/lib)\n  set(PLAYER_TARGETDIR_TEXT Blenderplayer.app/Contents/Resources/text)\n\n  # Skip relinking on cpack / install\n  set_target_properties(blenderplayer PROPERTIES BUILD_WITH_INSTALL_RPATH true)\n```\n\n----------------------------------------\n\nTITLE: Configuring FFMPEG Plugin with CMake\nDESCRIPTION: This snippet configures and builds the FFMPEG plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, links it to other libraries, sets its version, and installs it to the plugin directory. It requires WITH_FFMPEG and PLUGIN_FFMPEG to be enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FFMPEG AND PLUGIN_FFMPEG)\n\tadd_definitions(-DFFMPEG_PLUGIN)\n\tinclude_directories(${INCLUDE} ${FFMPEG_INCLUDE_DIRS})\n\tadd_library(audffmpeg SHARED ${FFMPEG_SRC} ${FFMPEG_HDR} ${HDR})\n\ttarget_link_libraries(audffmpeg audaspace ${FFMPEG_LIBRARIES})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audffmpeg PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\tinstall(TARGETS audffmpeg DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Test Suite Configuration\nDESCRIPTION: This snippet configures the test suite for the USD I/O library using Google Test (gtest). It sets the source files, include directories, and linked libraries for the tests. Tests are only added if WITH_GTESTS is enabled. This allows developers to verify the correctness of USD import and export operations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/usd_export_test.cc\n    tests/usd_stage_creation_test.cc\n    tests/usd_usdz_export_test.cc\n    intern/usd_writer_material.hh\n  )\n\n  include_directories(intern)\n\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf_blenloader_test_util\n  )\n  blender_add_test_suite_lib(io_usd \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Linux-Specific Sources\nDESCRIPTION: Conditionally appends Linux-specific source files to the SRC variable, excluding macOS. This includes various header files related to DeckLink API components and a C++ file for dispatching. The UNIX and NOT APPLE macros check if the target platform is Linux.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/decklink/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n\tlist(APPEND SRC\n\t\tlinux/DeckLinkAPI.h\n\t\tlinux/DeckLinkAPIConfiguration.h\n\t\tlinux/DeckLinkAPIDeckControl.h\n\t\tlinux/DeckLinkAPIDiscovery.h\n\t\tlinux/DeckLinkAPIDispatch.cpp\n\t\tlinux/DeckLinkAPIModes.h\n\t\tlinux/DeckLinkAPIVersion.h\n\t\tlinux/DeckLinkAPITypes.h\n\t\tlinux/LinuxCOM.h\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the source files (`.cc`) and header files (`.hh`) that constitute the `bf_functions` library. These files likely implement the core functionality of the functions module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/functions/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/field.cc\n  intern/lazy_function.cc\n  intern/lazy_function_execute.cc\n  intern/lazy_function_graph.cc\n  intern/lazy_function_graph_executor.cc\n  intern/multi_function.cc\n  intern/multi_function_builder.cc\n  intern/multi_function_params.cc\n  intern/multi_function_procedure.cc\n  intern/multi_function_procedure_builder.cc\n  intern/multi_function_procedure_executor.cc\n  intern/multi_function_procedure_optimization.cc\n\n  FN_field.hh\n  FN_lazy_function.hh\n  FN_lazy_function_execute.hh\n  FN_lazy_function_graph.hh\n  FN_lazy_function_graph_executor.hh\n  FN_multi_function.hh\n  FN_multi_function_builder.hh\n  FN_multi_function_context.hh\n  FN_multi_function_data_type.hh\n  FN_multi_function_param_type.hh\n  FN_multi_function_params.hh\n  FN_multi_function_procedure.hh\n  FN_multi_function_procedure_builder.hh\n  FN_multi_function_procedure_executor.hh\n  FN_multi_function_procedure_optimization.hh\n  FN_multi_function_signature.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Point Frustum Culling Example (Python)\nDESCRIPTION: This code snippet demonstrates how to use the `pointInsideFrustum` method to determine if a 3D point is within the camera's view frustum.  It retrieves the current controller and the camera object, then calls `pointInsideFrustum` with the point's coordinates. It prints a message indicating if the point is inside or outside the frustum.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Camera.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom bge import logic\ncont = logic.getCurrentController()\ncam = cont.owner\n\n# Test point [0.0, 0.0, 0.0]\nif (cam.pointInsideFrustum([0.0, 0.0, 0.0])):\n  # Point is inside frustum !\n  # Do something useful !\nelse:\n  # Box is outside the frustum !\n```\n\n----------------------------------------\n\nTITLE: Defining Tests (CMake)\nDESCRIPTION: This snippet defines a list of test executables that will be built. Each entry in the `TESTS` variable represents a test executable to be created.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TESTS\n  adaptors_test\n  arc_look_up_test\n  bellman_ford_test\n  bfs_test\n  bpgraph_test\n  circulation_test\n  connectivity_test\n  counter_test\n  dfs_test\n  digraph_test\n  dijkstra_test\n  dim_test\n  edge_set_test\n  error_test\n  euler_test\n  fractional_matching_test\n  gomory_hu_test\n  graph_copy_test\n  graph_test\n  graph_utils_test\n  hao_orlin_test\n  heap_test\n  kruskal_test\n  lgf_reader_writer_test\n  lgf_test\n  maps_test\n  matching_test\n  max_cardinality_search_test\n  max_clique_test\n  max_flow_test\n  min_cost_arborescence_test\n  min_cost_flow_test\n  min_mean_cycle_test\n  nagamochi_ibaraki_test\n  path_test\n  planarity_test\n  radix_sort_test\n  random_test\n  suurballe_test\n  time_measure_test\n  tsp_test\n  unionfind_test\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Vertex Shader GLSL Example\nDESCRIPTION: This GLSL code provides a basic vertex shader example for use with KX_2DFilter. It takes vertex position and texture coordinates as input and outputs the position and texture coordinates. It is crucial that the vertex shader does not apply modelview and projection transformations, leaving only the position passed to `gl_Position`. The texture coordinate `bgl_TexCoord` is then passed to the fragment shader.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_2DFilter.rst#_snippet_0\n\nLANGUAGE: glsl\nCODE:\n```\nin vec4 pos;\nin vec2 texCoord;\n\nout vec4 bgl_TexCoord;\n\nvoid main(void)\n{\n    gl_Position = pos;\n    bgl_TexCoord = vec4(texCoord, 0.0, 0.0);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This commented-out snippet demonstrates how to add an executable target using the `ADD_EXECUTABLE` command in CMake. It creates an executable named 'myprog' from the source file 'myprog-main.cc'. This is a basic example that can be extended to include multiple source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# ADD_EXECUTABLE(myprog myprog-main.cc)\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: This snippet provides a sample copyright disclaimer that an employer or school can use to disclaim copyright interest in a library written by an individual. It serves to clarify that the organization relinquishes any rights to the code, allowing it to be freely distributed under the LGPL. The user needs to replace the placeholders with the actual organization name, library name, author, and signature.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/LGPL2.1-license.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Installing Files with CMake\nDESCRIPTION: This snippet installs the generated `theora.pc` file to the `lib/pkgconfig` directory. This allows pkg-config to find the Theora library.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n    FILES ${CMAKE_CURRENT_BINARY_DIR}/theora.pc\n    DESTINATION lib/pkgconfig\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: This code defines the CMake variable `LIB`.  In this case, it is left empty, suggesting that there are no external libraries directly linked at this stage during the configuration of the gtest library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gtest/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Building 'datatoc' Executable - CMake\nDESCRIPTION: This CMake command creates the 'datatoc' executable from the source file specified in the `SRC` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/datatoc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(datatoc ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: TBB\nDESCRIPTION: This snippet conditionally defines the `NOMINMAX` macro on Windows if TBB is enabled to prevent conflicts between TBB's includes and the STL.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Curve to Mesh Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for converting curves to meshes. It loads `curve_to_mesh.blend` and runs `curve_to_mesh.py` with the `--run-all-tests` option, executing all tests defined in the Python script.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    curve_to_mesh\n    ${TEST_SRC_DIR}/modeling/curve_to_mesh.blend\n    --python ${TEST_PYTHON_DIR}/curve_to_mesh.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: GHOST Debug Option\nDESCRIPTION: This snippet defines the WITH_GHOST_DEBUG option for enabling debugging output for the GHOST library. It helps developers debug windowing-related issues.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# GHOST Windowing Library Options\noption(WITH_GHOST_DEBUG \"Enable debugging output for the GHOST library\" OFF)\nmark_as_advanced(WITH_GHOST_DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Adding Quadriflow Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the Quadriflow library. It specifies the library name (`bf_intern_quadriflow`), source files (`${SRC}`), include directories (`${INC}`, `${INC_SYS}`), and dependencies (`${LIB}`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/quadriflow/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_quadriflow \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies (LIB)\nDESCRIPTION: This snippet specifies the private library dependencies of the NLA editor library. It includes dependencies on Blender's kernel, animation rigging, Blender library, loader, translation, dependency graph, DNA, GPU, guarded allocator, and window manager libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_nla/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Add Python Test (CMake)\nDESCRIPTION: This snippet adds a Python test for Linux release sanity checks. It gets the directory of the Blender executable, sets up extra arguments based on whether the compiler ASAN is enabled, and then calls the `add_python_test` macro with the Python script and arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LINUX_OFFICIAL_RELEASE_TESTS)\n  get_filename_component(release_root_folder ${TEST_BLENDER_EXE} DIRECTORY)\n  set(extra_args \"\")\n  if(WITH_COMPILER_ASAN)\n    set(extra_args\n      ${extra_args}\n      --sanitizer-build\n    )\n  endif()\n  add_python_test(\n    linux_release_sanity_checks\n    ${CMAKE_SOURCE_DIR}/tools/check_blender_release/check_release.py\n    -- --directory \"${release_root_folder}\" ${extra_args}\n  )\n  unset(extra_args)\n  unset(release_root_folder)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate\nDESCRIPTION: This snippet shows the boilerplate notice required to apply the Apache License 2.0 to a work.  It includes instructions to replace bracketed fields with identifying information. The snippet emphasizes embedding the notice within appropriate comment syntax and including a file/class name for easy identification.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Setting Raster Position with View Matrix Scaling in Python\nDESCRIPTION: This Python code snippet demonstrates how to correctly set the raster position when drawing to a 3D view in UPBGE using a Scriptlink. It retrieves the view matrix scale and applies it to the x and y coordinates to compensate for panel zoom levels, ensuring accurate pixel placement.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nimport bgl\nxval, yval= 100, 40\n# Get the scale of the view matrix.\nview_matrix = bgl.Buffer(bgl.GL_FLOAT, 16)\nbgl.glGetFloatv(bgl.GL_MODELVIEW_MATRIX, view_matrix)\nf = 1.0 / view_matrix[0]\n\n# Instead of the usual `glRasterPos2i(xval, yval)`.\nbgl.glRasterPos2f(xval * f, yval * f)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vulkan Backend\nDESCRIPTION: Configures the build for the Vulkan backend, including MoltenVK support on macOS.  It appends include directories and libraries to the respective lists and defines a preprocessor macro to enable the Vulkan backend.  It includes conditional handling of MoltenVK libraries and include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_VULKAN_BACKEND)\n  if(WITH_VULKAN_MOLTENVK)\n    list(APPEND INC_SYS\n      PUBLIC ${MOLTENVK_INCLUDE_DIRS}\n    )\n\n    list(APPEND LIB\n      ${MOLTENVK_LIBRARIES}\n    )\n  endif()\n\n  list(APPEND SRC\n    intern/GHOST_ContextVK.cc\n\n    intern/GHOST_ContextVK.hh\n  )\n  list(APPEND INC\n    ../../extern/vulkan_memory_allocator/\n  )\n  list(APPEND INC_SYS\n    PUBLIC ${VULKAN_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${VULKAN_LIBRARIES}\n  )\n\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Blender System Info Script on macOS (CMake)\nDESCRIPTION: This code conditionally configures and installs a shell script named `blender-system-info.sh` on macOS, if `WITH_PYTHON_MODULE` is not enabled, and both `WITH_PYTHON` and `WITH_PYTHON_INSTALL` are enabled. This script is placed in the `Blender.app/Contents/Resources` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\n  if(NOT WITH_PYTHON_MODULE AND WITH_PYTHON AND WITH_PYTHON_INSTALL)\n    get_filename_component(PYTHON_EXECUTABLE_NAME_ONLY ${PYTHON_EXECUTABLE} NAME)\n    configure_file(\n      ${CMAKE_SOURCE_DIR}/release/darwin/scripts/blender-system-info.sh.in\n      ${CMAKE_BINARY_DIR}/release/darwin/scripts/blender-system-info.sh\n      @ONLY\n    )\n    unset(PYTHON_EXECUTABLE_NAME_ONLY)\n    install(\n      PROGRAMS ${CMAKE_BINARY_DIR}/release/darwin/scripts/blender-system-info.sh\n      DESTINATION \"Blender.app/Contents/Resources\"\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Accessing RGBA Color Components (getRGBA)\nDESCRIPTION: Demonstrates how to access individual color components (RGBA) from the packed integer returned by `getRGBA()` using the `struct` module in Python.  This approach ensures machine independence when interpreting the byte order of the packed color value. It's recommended to use the r, g, b and a attributes or the color attribute instead.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VertexProxy.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport struct;\ncol = struct.unpack('4B', struct.pack('I', v.getRGBA()))\n# col = (r, g, b, a)\n# black = (  0, 0, 0, 255)\n# white = (255, 255, 255, 255)\n```\n\n----------------------------------------\n\nTITLE: Linking Blender Target (CMake)\nDESCRIPTION: This code snippet sets up dependencies and link libraries for the `blender` target. It adds a dependency on `makesdna`, links private libraries defined in the `LIB` variable, and then unsets the `LIB` variable. It also calls functions to set up platform-specific linker flags and libraries, and target include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_77\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(blender makesdna)\ntarget_link_libraries(blender PRIVATE ${LIB})\nunset(LIB)\n\nsetup_platform_linker_flags(blender)\nsetup_platform_linker_libs(blender)\n\nif(DEFINED PLATFORM_SYMBOLS_MAP)\n  set_target_properties(blender PROPERTIES LINK_DEPENDS ${PLATFORM_SYMBOLS_MAP})\nendif()\n\nblender_target_include_dirs(blender ${INC})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Open Image Denoise Support\nDESCRIPTION: This snippet enables Open Image Denoise (OIDN) support if the `WITH_OPENIMAGEDENOISE` option is enabled. It adds preprocessor definitions (`-DWITH_OPENIMAGEDENOISE`, `-DOIDN_STATIC_LIB`), includes the OIDN and TBB header directories, and links the OIDN and TBB libraries. This enables denoising functionalities in the compositor.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  add_definitions(-DOIDN_STATIC_LIB)\n  list(APPEND INC_SYS\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n    ${TBB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n    ${TBB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing MaterialX Libraries\nDESCRIPTION: This CMake snippet conditionally installs the MaterialX libraries directory into the Blenderplayer application bundle if MaterialX is enabled (WITH_MATERIALX) and both LIBDIR and PLAYER_TARGETDIR_LIB are defined. This ensures that the necessary MaterialX libraries are included in the final application, allowing it to use MaterialX for material definitions and rendering, regardless of whether Blender itself uses them.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MATERIALX AND LIBDIR AND PLAYER_TARGETDIR_LIB)\n  install(\n    DIRECTORY ${LIBDIR}/materialx/libraries\n    DESTINATION \"${PLAYER_TARGETDIR_LIB}/materialx\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories - CMake\nDESCRIPTION: This set of commands adds several subdirectories to the project.  Each `add_subdirectory` call instructs CMake to process the `CMakeLists.txt` file in the specified directory and add the resulting target to the current project. This is the standard way to structure a larger project in CMake to allow building logically separated components.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(BlenderRoutines)\nadd_subdirectory(Common)\nadd_subdirectory(Converter)\nadd_subdirectory(Device)\nadd_subdirectory(Expressions)\nadd_subdirectory(GameLogic)\nadd_subdirectory(Ketsji)\nadd_subdirectory(Ketsji/KXNetwork)\nadd_subdirectory(Launcher)\nadd_subdirectory(Physics/Dummy)\nadd_subdirectory(Rasterizer)\nadd_subdirectory(Rasterizer/RAS_OpenGLRasterizer)\nadd_subdirectory(SceneGraph)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Debug PDB Files with CMake\nDESCRIPTION: This snippet demonstrates installing Python debug PDB files (program database files) using CMake. It only executes if the `WITH_PYTHON_INSTALL` and `WINDOWS_PYTHON_DEBUG` options are enabled. It differentiates between release and debug PDB files, installing them to the root directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_INSTALL)\n  if(WINDOWS_PYTHON_DEBUG)\n    install(\n      FILES\n        ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/libs/python${_PYTHON_VERSION_NO_DOTS}.pdb\n      DESTINATION \".\"\n      CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n    )\n\n    install(\n      FILES\n        ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/libs/python${_PYTHON_VERSION_NO_DOTS}_d.pdb\n      DESTINATION \".\"\n      CONFIGURATIONS Debug\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Header to Source Files\nDESCRIPTION: This code snippet shows the standard header to include at the start of each source file when applying the GNU General Public License. It clearly states the program's name, copyright, licensing terms, warranty disclaimer, and where to find the full license.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet lists the source files that comprise the bf_python_bmesh library. It includes both C++ source files (.cc) and header files (.hh). These files contain the implementation and declarations for the library's functionality, respectively.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/bmesh/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  bmesh_py_api.cc\n  bmesh_py_geometry.cc\n  bmesh_py_ops.cc\n  bmesh_py_ops_call.cc\n  bmesh_py_types.cc\n  bmesh_py_types_customdata.cc\n  bmesh_py_types_meshdata.cc\n  bmesh_py_types_select.cc\n  bmesh_py_utils.cc\n\n  bmesh_py_api.hh\n  bmesh_py_geometry.hh\n  bmesh_py_ops.hh\n  bmesh_py_ops_call.hh\n  bmesh_py_types.hh\n  bmesh_py_types_customdata.hh\n  bmesh_py_types_meshdata.hh\n  bmesh_py_types_select.hh\n  bmesh_py_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Programs\nDESCRIPTION: This snippet outlines how to display a short notice when an interactive program starts, informing the user about the copyright, warranty disclaimer, and licensing terms of the GNU General Public License. It suggests including commands (e.g., `show w`, `show c`) or other interactive elements that allow users to access the relevant parts of the GPL for details.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/GPL-license.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries - CMake\nDESCRIPTION: This snippet specifies the private libraries that the device library depends on.  It links against `blenlib` and `guardedalloc` from the Blender foundation's internal libraries, indicating that they are not exposed as public dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Parsing with Custom Decimal Separator\nDESCRIPTION: Illustrates how to use a custom decimal separator with `fast_float::from_chars_advanced`. This example parses a string \"3,1416 xyz \" using a comma as the decimal separator. It requires the fast_float header and iostream for output and demonstrating `parse_options` usage.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n#include \"fast_float/fast_float.h\"\n#include <iostream>\n\nint main() {\n    const std::string input =  \"3,1416 xyz \";\n    double result;\n    fast_float::parse_options options{fast_float::chars_format::general, ','};\n    auto answer = fast_float::from_chars_advanced(input.data(), input.data()+input.size(), result, options);\n    if((answer.ec != std::errc()) || ((result != 3.1416))) { std::cerr << \"parsing failure\\n\"; return EXIT_FAILURE; }\n    std::cout << \"parsed the number \" << result << std::endl;\n    return EXIT_SUCCESS;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Source Files\nDESCRIPTION: This snippet defines the source files for vertex, fragment, and compute shaders.  These variables are used later in the CMake script to specify which files should be compiled.  The comments indicate the purpose or status of some files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/intern/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_VERT\n  draw_debug_draw_display_vert.glsl\n)\n\nset(SRC_GLSL_FRAG\n  draw_debug_draw_display_frag.glsl\n)\n\nset(SRC_GLSL_COMP\n  draw_hair_refine_comp.glsl\n  draw_command_generate_comp.glsl\n  # Failed because of mixed definition of ObjectInfos\n  # draw_resource_finalize_comp.glsl\n  draw_view_finalize_comp.glsl\n  draw_visibility_comp.glsl\n\n  subdiv_ibo_lines_comp.glsl\n  subdiv_ibo_tris_comp.glsl\n  subdiv_vbo_edge_fac_comp.glsl\n  subdiv_custom_data_interp_comp.glsl\n  subdiv_vbo_sculpt_data_comp.glsl\n  subdiv_vbo_edituv_strech_angle_comp.glsl\n  subdiv_vbo_edituv_strech_area_comp.glsl\n  subdiv_vbo_lnor_comp.glsl\n  subdiv_normals_accumulate_comp.glsl\n  subdiv_normals_finalize_comp.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries in CMake\nDESCRIPTION: This snippet specifies the private libraries that the physics module depends on. These libraries provide essential functionalities, including kernel operations, memory management, DNA handling, and window management.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating bf_draw Library\nDESCRIPTION: This snippet creates the `bf_draw` library using the source files, include directories, system include directories, and link libraries specified in the `SRC`, `INC`, `INC_SYS`, and `LIB` variables respectively.  An alias `bf::draw` is created for `bf_draw`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_draw \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::draw ALIAS bf_draw)\n```\n\n----------------------------------------\n\nTITLE: Installing Addon Files - CMake\nDESCRIPTION: Installs the Cycles addon files to the specified installation path. This makes the addon available for use within Blender after installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${ADDON_FILES}\" ${CYCLES_INSTALL_PATH})\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags\nDESCRIPTION: This snippet adds compiler flags to suppress errors related to unused macros when using GCC or Clang. It checks if the compiler is GCC or Clang and then adds the \"-Wno-error=unused-macros\" flag if supported.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_check_cxx_compiler_flags(\n    CMAKE_CXX_FLAGS\n    _has_no_error_unused_macros \"-Wno-error=unused-macros\"\n  )\n  unset(_has_no_error_unused_macros)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating the Library\nDESCRIPTION: This snippet creates the Cycles graph library using the `cycles_add_library` function. It specifies the library name (`cycles_graph`), alias (`${LIB}` which expands to `cycles_util`), source files (`${SRC}`), and header files (`${SRC_HEADERS}`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/graph/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_add_library(cycles_graph \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties CMake\nDESCRIPTION: Sets target properties for the Lemon library, specifically the output name, version, and SOVERSION. This is done only on Unix systems.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nIF(UNIX)\n  SET_TARGET_PROPERTIES(lemon PROPERTIES OUTPUT_NAME emon VERSION ${LEMON_VERSION} SOVERSION ${LEMON_VERSION})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with OpenSubdiv\nDESCRIPTION: This snippet conditionally includes OpenSubdiv support. It appends the OpenSubdiv include directories to `INC_SYS` and adds the OpenSubdiv libraries to `LIB`. It defines `-DWITH_OPENSUBDIV` to enable corresponding code for adaptive subdivision surfaces.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  list(APPEND INC_SYS\n    ${OPENSUBDIV_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENSUBDIV_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Audaspace Header Files\nDESCRIPTION: This snippet defines the `PRIVATE_HDR` and `PUBLIC_HDR` variables, which are lists of header files. `PRIVATE_HDR` contains internal header files, while `PUBLIC_HDR` contains header files that are part of the public API of the Audaspace library. These headers are located in the `include` directory and subdirectories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PRIVATE_HDR\n\tsrc/sequence/SequenceHandle.h\n)\n\nset(PUBLIC_HDR\n\tinclude/devices/DeviceManager.h\n\tinclude/devices/I3DDevice.h\n\tinclude/devices/I3DHandle.h\n\tinclude/devices/IDeviceFactory.h\n\tinclude/devices/IDevice.h\n\tinclude/devices/IHandle.h\n\tinclude/devices/MixingThreadDevice.h\n\tinclude/devices/NULLDevice.h\n\tinclude/devices/ReadDevice.h\n\tinclude/devices/SoftwareDevice.h\n\tinclude/devices/ThreadedDevice.h\n\tinclude/Exception.h\n\tinclude/file/File.h\n\tinclude/file/FileInfo.h\n\tinclude/file/FileManager.h\n\tinclude/file/FileWriter.h\n\tinclude/file/IFileInput.h\n\tinclude/file/IFileOutput.h\n\tinclude/file/IWriter.h\n\tinclude/fx/Accumulator.h\n\tinclude/fx/ADSR.h\n\tinclude/fx/ADSRReader.h\n\tinclude/fx/BaseIIRFilterReader.h\n\tinclude/fx/ButterworthCalculator.h\n\tinclude/fx/Butterworth.h\n\tinclude/fx/CallbackIIRFilterReader.h\n\tinclude/fx/Delay.h\n\tinclude/fx/DelayReader.h\n\tinclude/fx/DynamicIIRFilter.h\n\tinclude/fx/DynamicIIRFilterReader.h\n\tinclude/fx/DynamicMusic.h\n\tinclude/fx/Effect.h\n\tinclude/fx/EffectReader.h\n\tinclude/fx/Envelope.h\n\tinclude/fx/Fader.h\n\tinclude/fx/FaderReader.h\n\tinclude/fx/HighpassCalculator.h\n\tinclude/fx/Highpass.h\n\tinclude/fx/IDynamicIIRFilterCalculator.h\n\tinclude/fx/IIRFilter.h\n\tinclude/fx/IIRFilterReader.h\n\tinclude/fx/Limiter.h\n\tinclude/fx/LimiterReader.h\n\tinclude/fx/Loop.h\n\tinclude/fx/LoopReader.h\n\tinclude/fx/LowpassCalculator.h\n\tinclude/fx/Lowpass.h\n\tinclude/fx/Modulator.h\n\tinclude/fx/ModulatorReader.h\n\tinclude/fx/MutableReader.h\n\tinclude/fx/MutableSound.h\n\tinclude/fx/Pitch.h\n\tinclude/fx/PitchReader.h\n\tinclude/fx/PlaybackManager.h\n\tinclude/fx/PlaybackCategory.h\n\tinclude/fx/Reverse.h\n\tinclude/fx/ReverseReader.h\n\tinclude/fx/SoundList.h\n\tinclude/fx/Source.h\n\tinclude/fx/Sum.h\n\tinclude/fx/Threshold.h\n\tinclude/fx/Volume.h\n\tinclude/fx/VolumeReader.h\n\tinclude/fx/VolumeSound.h\n\tinclude/fx/VolumeStorage.h\n\tinclude/generator/Sawtooth.h\n\tinclude/generator/SawtoothReader.h\n\tinclude/generator/Silence.h\n\tinclude/generator/SilenceReader.h\n\tinclude/generator/Sine.h\n\tinclude/generator/SineReader.h\n\tinclude/generator/Square.h\n\tinclude/generator/SquareReader.h\n\tinclude/generator/Triangle.h\n\tinclude/generator/TriangleReader.h\n\tinclude/IReader.h\n\tinclude/ISound.h\n\tinclude/plugin/PluginManager.h\n\tinclude/respec/ChannelMapper.h\n\tinclude/respec/ChannelMapperReader.h\n\tinclude/respec/ConverterFunctions.h\n\tinclude/respec/Converter.h\n\tinclude/respec/ConverterReader.h\n\tinclude/respec/JOSResample.h\n\tinclude/respec/JOSResampleReader.h\n\tinclude/respec/LinearResample.h\n\tinclude/respec/LinearResampleReader.h\n\tinclude/respec/Mixer.h\n\tinclude/respec/ResampleReader.h\n\tinclude/respec/Specification.h\n\tinclude/respec/SpecsChanger.h\n\tinclude/sequence/AnimateableProperty.h\n\tinclude/sequence/Double.h\n\tinclude/sequence/DoubleReader.h\n\tinclude/sequence/PingPong.h\n\tinclude/sequence/SequenceData.h\n\tinclude/sequence/SequenceEntry.h\n\tinclude/sequence/Sequence.h\n\tinclude/sequence/SequenceReader.h\n\tinclude/sequence/Superpose.h\n\tinclude/sequence/SuperposeReader.h\n\tinclude/util/Barrier.h\n\tinclude/util/Buffer.h\n\tinclude/util/BufferReader.h\n\tinclude/util/ILockable.h\n\tinclude/util/Math3D.h\n\tinclude/util/RingBuffer.h\n\tinclude/util/StreamBuffer.h\n\tinclude/util/ThreadPool.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Inclusion (IO_WAVEFRONT_OBJ) - CMake\nDESCRIPTION: This snippet conditionally appends libraries related to Wavefront OBJ I/O to the list of libraries and adds the compiler definition `WITH_IO_WAVEFRONT_OBJ` if `WITH_IO_WAVEFRONT_OBJ` is true, enabling OBJ I/O support during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ)\n  list(APPEND LIB\n    PRIVATE bf_io_common\n    PRIVATE bf_io_wavefront_obj\n  )\n  add_definitions(-DWITH_IO_WAVEFRONT_OBJ)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library in CMake\nDESCRIPTION: This snippet uses a custom CMake function (`blender_add_lib`) to create the `bf_editor_space_image` library.  It passes the library name, source files, include directories, and linked libraries as arguments. This function encapsulates the standard CMake commands for creating a library target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_image/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_image \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Integration - CMake\nDESCRIPTION: This snippet conditionally integrates the Audaspace audio library.  If `WITH_AUDASPACE` is enabled, it appends the Audaspace include directories and libraries to `INC_SYS` and `LIB` respectively, and defines `WITH_AUDASPACE`.`${AUDASPACE_C_INCLUDE_DIRS}`, `${AUDASPACE_C_LIBRARIES}`, and `${AUDASPACE_PY_LIBRARIES}` are assumed to be defined elsewhere, likely by `find_package(Audaspace)`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${AUDASPACE_C_LIBRARIES}\n    ${AUDASPACE_PY_LIBRARIES}\n  )\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Dependency\nDESCRIPTION: This snippet conditionally adds Audaspace libraries and include directories if the WITH_AUDASPACE option is enabled. It also adds a preprocessor definition to enable Audaspace integration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n    ${AUDASPACE_PY_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${AUDASPACE_C_LIBRARIES}\n    ${AUDASPACE_PY_LIBRARIES}\n  )\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Compiler Flags (CMake)\nDESCRIPTION: This snippet uses the `add_cc_flags_custom_test` macro to add custom compiler flags for the `msgfmt` target. This allows for specific compiler options to be applied during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cc_flags_custom_test(msgfmt)\n```\n\n----------------------------------------\n\nTITLE: Configuring CoreAudio support\nDESCRIPTION: This CMake code block handles the configuration of CoreAudio support for AudaSpace. It searches for the CoreAudio, AudioUnit, and AudioToolbox libraries and include directories. If found, it defines variables for the libraries and include directories. It also defines source and header files specific to CoreAudio. If the `PLUGIN_COREAUDIO` option is not enabled, the CoreAudio include directories and libraries are added to the global include and library lists, along with the source and header files. If CoreAudio is not found and strict dependencies are enabled, it throws a fatal error; otherwise, it disables CoreAudio support and issues a warning.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# CoreAudio\nif(WITH_COREAUDIO)\n\tfind_library(COREAUDIO_LIBRARY CoreAudio)\n\tfind_library(AUDIOUNIT_LIBRARY AudioUnit)\n\tfind_library(AUDIOTOOLBOX_LIBRARY AudioToolbox)\n\tfind_path(AUDIOUNIT_INCLUDE_DIR AudioUnit/AudioUnit.h)\n\tfind_path(AUDIOTOOLBOX_INCLUDE_DIR AudioToolbox/CoreAudioClock.h)\n\n\tif(COREAUDIO_LIBRARY AND AUDIOUNIT_LIBRARY AND AUDIOUNIT_INCLUDE_DIR)\n\t\tset(COREAUDIO_LIBRARIES ${COREAUDIO_LIBRARY} ${AUDIOUNIT_LIBRARY} ${AUDIOTOOLBOX_LIBRARY})\n\t\tset(COREAUDIO_INCLUDE_DIRS ${AUDIOUNIT_INCLUDE_DIR} ${AUDIOTOOLBOX_INCLUDE_DIR})\n\n\t\tset(COREAUDIO_SRC\n\t\t\tplugins/coreaudio/CoreAudioDevice.cpp\n\t\t)\n\t\tset(COREAUDIO_HDR\n\t\t\tplugins/coreaudio/CoreAudioDevice.h\n\t\t)\n\n\t\tif(NOT PLUGIN_COREAUDIO)\n\t\t\tlist(APPEND INCLUDE ${COREAUDIO_INCLUDE_DIRS})\n\t\t\tlist(APPEND LIBRARIES ${COREAUDIO_LIBRARIES})\n\t\t\tlist(APPEND SRC ${COREAUDIO_SRC})\n\t\t\tlist(APPEND HDR ${COREAUDIO_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS CoreAudioDevice)\n\t\tendif()\n\telse()\n\t\tif(WITH_STRICT_DEPENDENCIES)\n\t\t\tmessage(FATAL_ERROR \"CoreAudio not found!\")\n\t\telse()\n\t\t\tif(AUDASPACE_STANDALONE)\n\t\t\t\tset(WITH_COREAUDIO FALSE CACHE BOOL \"Build With CoreAudio\" FORCE)\n\t\t\telse()\n\t\t\t\tset(WITH_COREAUDIO FALSE)\n\t\t\tendif()\n\t\t\tmessage(WARNING \"CoreAudio not found, plugin will not be built.\")\n\t\tendif()\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Inclusion (IO_STL) - CMake\nDESCRIPTION: This snippet conditionally appends libraries related to STL I/O to the list of libraries. It also adds a compiler definition `WITH_IO_STL` if `WITH_IO_STL` is true, enabling STL I/O support during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_STL)\n  list(APPEND LIB\n    PRIVATE bf_io_common\n    PRIVATE bf_io_stl\n  )\n  add_definitions(-DWITH_IO_STL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Options (GNUCC)\nDESCRIPTION: This CMake snippet checks if the compiler is GNU CC and provides options to use different linkers like ld.gold, ld.lld, and ld.mold if the compiler is either GNU CC or Clang.  It sets the `WITH_LINKER_GOLD`, `WITH_LINKER_LLD`, and `WITH_LINKER_MOLD` options, making them available to the user, and marks them as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(CMAKE_COMPILER_IS_GNUCC)\n    option(WITH_LINKER_GOLD \"Use ld.gold linker which is usually faster than ld.bfd\" ON)\n    mark_as_advanced(WITH_LINKER_GOLD)\n  endif()\n  if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    option(WITH_LINKER_LLD \"Use ld.lld linker which is usually faster than ld.gold\" OFF)\n    mark_as_advanced(WITH_LINKER_LLD)\n    option(WITH_LINKER_MOLD \"Use ld.mold linker which is usually faster than ld.gold & ld.lld\" OFF)\n    mark_as_advanced(WITH_LINKER_MOLD)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Include Directories\nDESCRIPTION: Defines the include directories required for compiling the GLSL shaders.  These paths are necessary to resolve dependencies between shader files. The paths point to various internal directories within the UPBGE and Blender projects.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n\n  # For grease pencil.\n  ../../gpencil\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Install Path\nDESCRIPTION: This CMake snippet sets the default installation path based on the build type and platform. It distinguishes between Windows, macOS, and other platforms, setting the installation path accordingly.  It also takes into account a `WITH_INSTALL_PORTABLE` option on non-Windows, non-macOS systems.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_75\n\nLANGUAGE: cmake\nCODE:\n```\n# By default we want to install to the directory we are compiling our executables\n# unless specified otherwise, which we currently do not allow\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  if(WIN32)\n    set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH}/\\${BUILD_TYPE} CACHE PATH \"\\\ndefault install path\"\n      FORCE\n    )\n  elseif(APPLE)\n    set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH}/\\${BUILD_TYPE} CACHE PATH \"\\\ndefault install path\"\n      FORCE\n    )\n  else()\n    if(WITH_INSTALL_PORTABLE)\n      set(CMAKE_INSTALL_PREFIX ${EXECUTABLE_OUTPUT_PATH} CACHE PATH \"default install path\" FORCE)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting OpenVDB Specific Configuration - CMake\nDESCRIPTION: This section configures settings specifically for OpenVDB integration. It appends the OpenVDB include directories and libraries to relevant lists. It also addresses a known issue with MSVC compilers and template parsing by setting specific compile flags for a particular file. A compiler flag to suppress warnings related to deprecated TBB headers is also specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\n  if(WIN32)\n    # OpenVDB emits lots of these, they should be suppressed through other\n    # means but MSVC 16.8/16.9 has broken this functionality, so C4251 is\n    # suppressed here explicitly. See\n    # https://developercommunity.visualstudio.com/content/problem/1167590/bug.html\n    # for details.\n    string(APPEND CMAKE_CXX_FLAGS \" /wd4251\")\n  endif()\n\n  # This works around the issue described in #120317 and https://github.com/AcademySoftwareFoundation/openvdb/pull/1786\n  if(MSVC_CLANG)\n    set_source_files_properties(${MANTA_PP}/fileio/iovdb.cpp PROPERTIES COMPILE_FLAGS -fno-delayed-template-parsing)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories needed for compiling the bf_editor_screen library. It includes paths to asset, space_graph, include, makesrna, nodes, fmtlib, and generated RNA headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../asset\n  ../space_graph\n  ../include\n  ../../makesrna\n  ../../nodes\n  ../../../../extern/fmtlib/include\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Endian Define - CMake\nDESCRIPTION: This code snippet sets the endianness define based on the operating system and architecture. It uses `TestBigEndian` module to determine the endianness for non-MSVC, non-OSX architectures. For MSVC and certain OSX architectures it always defaults to little endian.  It adds -D__LITTLE_ENDIAN__ or -D__BIG_ENDIAN__ to the compile definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_99\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  # For some reason this fails on MSVC.\n  add_definitions(-D__LITTLE_ENDIAN__)\n\n  # OSX-Note: as we do cross-compiling with specific set architecture,\n  # endianness-detection and auto-setting is counterproductive\n  # so we just set endianness according CMAKE_OSX_ARCHITECTURES\n\nelseif(CMAKE_OSX_ARCHITECTURES MATCHES i386 OR\n       CMAKE_OSX_ARCHITECTURES MATCHES x86_64 OR\n       CMAKE_OSX_ARCHITECTURES MATCHES arm64)\n  add_definitions(-D__LITTLE_ENDIAN__)\nelif(CMAKE_OSX_ARCHITECTURES MATCHES ppc OR CMAKE_OSX_ARCHITECTURES MATCHES ppc64)\n  add_definitions(-D__BIG_ENDIAN__)\n\nelse()\n  include(TestBigEndian)\n  test_big_endian(_SYSTEM_BIG_ENDIAN)\n  if(_SYSTEM_BIG_ENDIAN)\n    add_definitions(-D__BIG_ENDIAN__)\n  else()\n    add_definitions(-D__LITTLE_ENDIAN__)\n  endif()\n  unset(_SYSTEM_BIG_ENDIAN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (SDL Support)\nDESCRIPTION: This snippet conditionally defines `-DWITH_SDL` and includes the SDL include directory if `WITH_SDL` is enabled. This enables SDL support, which likely involves input handling, window management, and other functionalities that SDL provides. Requires `SDL_INCLUDE_DIR` to be set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_SDL)\n  list(APPEND INC_SYS\n    ${SDL_INCLUDE_DIR}\n  )\n  add_definitions(-DWITH_SDL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Blender UI Tests (CMake)\nDESCRIPTION: This snippet adds Blender UI tests. It iterates through a list of `_undo_tests` and calls the `add_blender_test_ui` macro for each, enabling event simulation and specifying the Python setup script and the test to run.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_UI_TESTS)\n  # This could be generated with:\n  # `\"${TEST_PYTHON_EXE}\" \"${CMAKE_CURRENT_LIST_DIR}/ui_simulate/run.py\" --list-tests`\n  # list explicitly so changes bisecting/updated are sure to re-run CMake.\n  set(_undo_tests\n    test_undo.text_editor_edit_mode_mix\n    test_undo.text_editor_simple\n    test_undo.view3d_edit_mode_multi_window\n    test_undo.view3d_font_edit_mode_simple\n    test_undo.view3d_mesh_edit_separate\n    test_undo.view3d_mesh_particle_edit_mode_simple\n    test_undo.view3d_multi_mode_multi_window\n    test_undo.view3d_multi_mode_select\n    test_undo.view3d_sculpt_dyntopo_and_edit\n    test_undo.view3d_sculpt_dyntopo_simple\n    test_undo.view3d_sculpt_with_memfile_step\n    test_undo.view3d_simple\n    test_undo.view3d_texture_paint_complex\n    test_undo.view3d_texture_paint_simple\n  )\n  foreach(ui_test ${_undo_tests})\n    add_blender_test_ui(\n      \"ui_${ui_test}\"\n      --enable-event-simulate\n      --python \"${CMAKE_CURRENT_LIST_DIR}/ui_simulate/run_blender_setup.py\"\n      --\n      --tests \"${ui_test}\"\n    )\n  endforeach()\n  unset(_undo_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files (CMake)\nDESCRIPTION: This code defines various sets of source files, including base files, and files specific to CPU, CUDA, HIP, HIPRT, OneAPI, Dummy, Multi, Metal, and OptiX devices. It organizes source code based on device backends.  These variables are later used to create the `cycles_device` library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/device/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_BASE\n  device.cpp\n  denoise.cpp\n  graphics_interop.cpp\n  kernel.cpp\n  memory.cpp\n  queue.cpp\n)\n\nset(SRC_CPU\n  cpu/device.cpp\n  cpu/device.h\n  cpu/device_impl.cpp\n  cpu/device_impl.h\n  cpu/kernel.cpp\n  cpu/kernel.h\n  cpu/kernel_function.h\n)\n\nset(SRC_CUDA\n  cuda/device.cpp\n  cuda/device.h\n  cuda/device_impl.cpp\n  cuda/device_impl.h\n  cuda/graphics_interop.cpp\n  cuda/graphics_interop.h\n  cuda/kernel.cpp\n  cuda/kernel.h\n  cuda/queue.cpp\n  cuda/queue.h\n  cuda/util.cpp\n  cuda/util.h\n)\n\nset(SRC_HIP\n  hip/device.cpp\n  hip/device.h\n  hip/device_impl.cpp\n  hip/device_impl.h\n  hip/graphics_interop.cpp\n  hip/graphics_interop.h\n  hip/kernel.cpp\n  hip/kernel.h\n  hip/queue.cpp\n  hip/queue.h\n  hip/util.cpp\n  hip/util.h\n)\n\nset(SRC_HIPRT\n  hiprt/device_impl.cpp\n  hiprt/device_impl.h\n  hiprt/queue.cpp\n  hiprt/queue.h\n)\n\nset(SRC_ONEAPI\n  oneapi/device_impl.cpp\n  oneapi/device_impl.h\n  oneapi/device.cpp\n  oneapi/device.h\n  oneapi/queue.cpp\n  oneapi/queue.h\n)\n\nset(SRC_DUMMY\n  dummy/device.cpp\n  dummy/device.h\n)\n\nset(SRC_MULTI\n  multi/device.cpp\n  multi/device.h\n)\n\nset(SRC_METAL\n  metal/bvh.mm\n  metal/bvh.h\n  metal/device.mm\n  metal/device.h\n  metal/device_impl.mm\n  metal/device_impl.h\n  metal/kernel.mm\n  metal/kernel.h\n  metal/queue.mm\n  metal/queue.h\n  metal/util.mm\n  metal/util.h\n)\n\nset(SRC_OPTIX\n  optix/device.cpp\n  optix/device.h\n  optix/device_impl.cpp\n  optix/device_impl.h\n  optix/queue.cpp\n  optix/queue.h\n  optix/util.h\n)\n\nset(SRC_HEADERS\n  device.h\n  denoise.h\n  graphics_interop.h\n  memory.h\n  kernel.h\n  queue.h\n)\n\nset(SRC\n  ${SRC_BASE}\n  ${SRC_CPU}\n  ${SRC_CUDA}\n  ${SRC_HIP}\n  ${SRC_HIPRT}\n  ${SRC_DUMMY}\n  ${SRC_MULTI}\n  ${SRC_OPTIX}\n  ${SRC_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Audaspace Project Properties\nDESCRIPTION: This snippet sets the minimum CMake version, includes the CMakeDependentOption module, sets CMake policy CMP0054 to NEW, defines the Audaspace project, and sets the project's version numbers. It also includes an optional CMake configuration file if defined and sets a default value for AUDASPACE_STANDALONE.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\ninclude(CMakeDependentOption)\n\nif(POLICY CMP0054)\n\tcmake_policy(SET CMP0054 NEW)\nendif()\n\nproject(audaspace)\n\nset(AUDASPACE_VERSION 1.6)\nset(AUDASPACE_LONG_VERSION ${AUDASPACE_VERSION}.0)\n\nif(DEFINED AUDASPACE_CMAKE_CFG)\n\tinclude(${AUDASPACE_CMAKE_CFG})\nendif()\n\nif(NOT DEFINED AUDASPACE_STANDALONE)\n\tset(AUDASPACE_STANDALONE TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for Inline Header\nDESCRIPTION: Sets the `HEADER_FILE_ONLY` property to `TRUE` for `intern/colormanagement_inline.cc`.  This indicates that this file should only be treated as a header file, preventing the compiler from generating an object file for it. The .cc extension is a mistake, it should be .hh. This is often used for inline implementations that are included directly into other source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset_source_files_properties(\n  intern/colormanagement_inline.cc\n  PROPERTIES HEADER_FILE_ONLY TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Installing OSL Python Packages on Windows CMake\nDESCRIPTION: This snippet handles the installation of OSL Python packages on Windows. It checks for the existence of the `oslquery` directory and installs it to `${TARGETDIR_SITE_PACKAGES}` for different configurations (Release, Debug).  It considers both debug and release versions of the package.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  if(EXISTS ${LIBDIR}/osl/lib/python${PYTHON_VERSION}/site-packages/oslquery) # 4.4+\n    install(\n      DIRECTORY ${LIBDIR}/osl/lib/python${PYTHON_VERSION}/site-packages/oslquery\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n      CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n    )\n    install(\n      DIRECTORY ${LIBDIR}/osl/lib/python${PYTHON_VERSION}_debug/site-packages/oslquery\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n      CONFIGURATIONS Debug\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Texture Properties in Python\nDESCRIPTION: This snippet demonstrates how to access and modify properties of a VideoFFmpeg object, such as framerate, filter, and repeat.  It also shows how to access image data from the video texture.  Requires an initialized `movie` object from the previous snippet. Demonstrates using gray scale filter, setting custom framerate and setting to infinite repeat.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set framerate\nmovie.framerate = 24\n# Set filter\nmovie.filter = bge.texture.FilterGray()\n# Set number of times to repeat\nmovie.repeat = -1\n\n# Get image data (bgl.Buffer)\nimage_data = movie.image\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: This snippet sets the libraries (`LIB`) that the Cycles scene component depends on. These libraries provide functionality for BVH traversal, device management, integration, subdivision, and utility functions. It also conditionally appends the `extern_sky` or `bf_intern_sky` library based on whether Cycles is built as a standalone repository.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_bvh\n  cycles_device\n  cycles_integrator\n  cycles_subd\n  cycles_util\n)\n\nif(CYCLES_STANDALONE_REPOSITORY)\n  list(APPEND LIB extern_sky)\nelse()\n  list(APPEND LIB bf_intern_sky)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies with CMake\nDESCRIPTION: This snippet defines the external libraries that the point cloud editor library depends on. These libraries provide functionalities such as kernel operations, data structures, and dependency graph management.  The `PRIVATE` keyword indicates that these dependencies are not exposed to other libraries that link against `bf_editor_pointcloud`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/pointcloud/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::geometry\n  PRIVATE bf::functions\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Compiler Flag Modifications\nDESCRIPTION: This snippet handles Windows-specific compiler flag modifications. It removes the '/w34100' flag to restore the warning level for C4100. If the system processor is ARM64, it removes the '/Zc:preprocessor' flag (disabling the new preprocessor) and adds the '-DDISABLE_SSE2NEON' definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  # Some USD library headers trigger the \"unreferenced formal parameter\"\n  # warning alert.\n  # Silence them by restore warn C4100 back to w4\n  remove_cc_flag(\"/w34100\")\n  if(CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n    # USD currently does not support the new preprocessor,\n    # so we remove it here and disable sse2neon\n    remove_cc_flag(\"/Zc:preprocessor\")\n    add_definitions(-DDISABLE_SSE2NEON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Windows Thumbnailer\nDESCRIPTION: This snippet conditionally adds a preprocessor definition, `WITH_BLENDER_THUMBNAILER`, for Windows builds. This definition is required when querying the `thumbnailer .dll` in `winstuff.c`.  It also appends include directories and libraries for URI conversion and UTF-8 conversion.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n    # Needed for querying the `thumbnailer .dll` in `winstuff.c`.\n    add_definitions(-DWITH_BLENDER_THUMBNAILER)\n  endif()\n  list(APPEND INC\n    ../../../intern/uriconvert\n    ../../../intern/utfconv\n  )\n  list(APPEND LIB\n    bf_intern_uriconvert\n    bf_intern_utfconv\n    dxgi\n  )\n  list(APPEND SRC\n    intern/system_win32.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Configuration with gtest\nDESCRIPTION: This CMake code block conditionally configures testing if Google Test (gtest) is enabled. It removes strict compiler flags, and based on the `WITH_TESTS_SINGLE_BINARY` variable, it adds subdirectories for a test runner and a testing utility library.  The `add_subdirectory` command includes CMakeLists.txt files in the specified directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  # Otherwise we get warnings here that we can't fix in external projects\n  remove_strict_flags()\n\n  # Build common test executable used by most tests\n  if(WITH_TESTS_SINGLE_BINARY)\n    add_subdirectory(runner)\n  endif()\n\n  # Build utility library used by test executables\n  add_subdirectory(testing)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Common Subdirectory based on Build Flags - CMake\nDESCRIPTION: This CMake snippet checks if any of the import/export add-ons or libraries (Wavefront OBJ, PLY, STL, Grease Pencil, Alembic, USD, CSV, or FBX) are enabled via CMake options (WITH_IO_*). If any of these options are true, it adds the 'common' subdirectory to the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ OR\n   WITH_IO_PLY OR\n   WITH_IO_STL OR\n   WITH_IO_GREASE_PENCIL OR\n   WITH_ALEMBIC OR\n   WITH_USD OR\n   WITH_IO_CSV OR\n   WITH_IO_FBX)\n  add_subdirectory(common)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Constraint Position/Angle using getParam - Python\nDESCRIPTION: This method retrieves the constraint position or Euler angle of a PHY_GENERIC_6DOF_CONSTRAINT. It takes the axis as an argument (0-2 for position, 3-5 for Euler angles). It returns a float representing either the position or the angle.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_ConstraintWrapper.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getParam(axis)\n\n      Get the constraint position or euler angle of a generic 6DOF constraint\n\n      :arg axis:\n      :type axis: integer\n\n      axis = 0..2 are linear constraint values\n         * 0: X axis position\n         * 1: Y axis position\n         * 2: Z axis position\n\n      :return: position\n      :rtype: float\n\n      axis = 3..5 are relative constraint (Euler) angles in radians\n         * 3: X axis angle\n         * 4: Y axis angle\n         * 5: Z axis angle\n\n      :return: angle\n      :rtype: float\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files\nDESCRIPTION: This snippet defines the list of header files (`SRC_HEADERS`) associated with the source files of the Cycles scene component. These header files declare the classes, functions, and data structures used in the implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_HEADERS\n  alembic.h\n  alembic_read.h\n  attribute.h\n  bake.h\n  background.h\n  camera.h\n  colorspace.h\n  constant_fold.h\n  devicescene.h\n  film.h\n  geometry.h\n  hair.h\n  image.h\n  image_oiio.h\n  image_sky.h\n  image_vdb.h\n  integrator.h\n  light.h\n  light_tree.h\n  light_tree_debug.h\n  mesh.h\n  object.h\n  osl.h\n  particles.h\n  pass.h\n  procedural.h\n  pointcloud.h\n  curves.h\n  scene.h\n  shader.h\n  shader_graph.h\n  shader_nodes.h\n  stats.h\n  svm.h\n  tables.h\n  tabulated_sobol.h\n  volume.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Screenshot Tests - CMake\nDESCRIPTION: Defines and adds screenshot render tests using the `add_render_test` command. It conditionally appends 'viewport' to the list of render tests if `WITH_TESTS_EXPERIMENTAL` is enabled. The tests are executed using a specified python script.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_RENDER_TESTS AND TEST_SRC_DIR_EXISTS)\n  set(render_tests\n  )\n\n  if(WITH_TESTS_EXPERIMENTAL)\n    # The viewport tests are flakey and difficult to keep up to date for use\n    # in a CI environment due to constantly changing UI, but may still be helpful\n    # for local development.\n    #\n    # Additionally, they do not currently succeed in an ASAN build. (2025-01-29)\n    list(APPEND render_tests viewport)\n  endif()\n\n  foreach(render_test ${render_tests})\n    add_render_test(\n      screenshot_${render_test}\n      ${CMAKE_CURRENT_LIST_DIR}/ui_screenshot_tests.py\n      --testdir \"${TEST_SRC_DIR}/screenshot/${render_test}\"\n      --outdir \"${TEST_OUT_DIR}/screenshot\"\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags for Float/Double Conversion Warnings\nDESCRIPTION: This code checks if the compiler is GCC or Clang and then adds compiler flags to generate errors for implicit float-to-double conversion and double promotion. It uses a helper function `add_check_cxx_compiler_flags` to check if the compiler supports these flags before adding them.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_check_cxx_compiler_flags(\n    CMAKE_CXX_FLAGS\n    _has_cxxflag_float_conversion \"-Werror=float-conversion\"\n    _has_cxxflag_double_promotion \"-Werror=double-promotion\"\n  )\n  unset(_has_cxxflag_float_conversion)\n  unset(_has_cxxflag_double_promotion)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (Local)\nDESCRIPTION: This snippet defines a list of local include directories that the compiler will search to resolve header files during the compilation process of the Ketsji engine. These directories contain the header files necessary for the Ketsji engine components.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  KXNetwork\n  ../BlenderRoutines\n  ../Common\n  ../Converter\n  ../Device\n  ../Expressions\n  ../GameLogic\n  ../Launcher\n  ../Physics/Common\n  ../Rasterizer\n  ../Rasterizer/RAS_OpenGLRasterizer\n  ../SceneGraph\n  ../../blender\n  ../../blender/draw/intern\n  ../../blender/editors/include\n  ../../blender/makesrna\n  ../../blender/python\n  ../../blender/python/generic\n  ../../blender/python/mathutils\n  ../../blender/python/intern\n  ../../../intern/ghost\n)\n```\n\n----------------------------------------\n\nTITLE: Vulkan Backend Options\nDESCRIPTION: This section manages Vulkan backend options.  It defines an option to enable Vulkan as the graphics backend and a sub-option for using MoltenVK on macOS. If experimental features are disabled, both the Vulkan and MoltenVK backends are turned off. The options are marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_VULKAN_BACKEND \"Enable Vulkan as graphics backend (experimental)\" ON)\nmark_as_advanced(WITH_VULKAN_BACKEND)\nif(APPLE)\n  option(WITH_VULKAN_MOLTENVK \"Enable Vulkan over MoltenVK (development option)\" OFF)\n  mark_as_advanced(WITH_VULKAN_MOLTENVK)\nendif()\n\nif(APPLE AND NOT WITH_VULKAN_MOLTENVK)\n  set(WITH_VULKAN_BACKEND OFF)\nendif()\nif(NOT WITH_EXPERIMENTAL_FEATURES)\n  if(APPLE)\n    set(WITH_VULKAN_MOLTENVK OFF)\n    set(WITH_VULKAN_BACKEND OFF)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Private Libraries in CMake\nDESCRIPTION: This CMake code snippet defines a variable named `LIB` and assigns it a list of private libraries. These libraries are likely dependencies or internal components of the UPBGE project. The `PRIVATE` keyword indicates that these libraries are not exposed to other projects that might depend on this one.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that will be compiled into the `cycles_integrator` library. These files implement various rendering algorithms and components, such as adaptive sampling, denoising, path tracing, and shader evaluation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/integrator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  adaptive_sampling.cpp\n  denoiser.cpp\n  denoiser_gpu.cpp\n  denoiser_oidn.cpp\n  denoiser_oidn_gpu.cpp\n  denoiser_optix.cpp\n  path_trace.cpp\n  tile.cpp\n  pass_accessor.cpp\n  pass_accessor_cpu.cpp\n  pass_accessor_gpu.cpp\n  path_trace_display.cpp\n  path_trace_tile.cpp\n  path_trace_work.cpp\n  path_trace_work_cpu.cpp\n  path_trace_work_gpu.cpp\n  render_scheduler.cpp\n  shader_eval.cpp\n  work_balancer.cpp\n  work_tile_scheduler.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Updating the Position\nDESCRIPTION: This snippet increments the position variable by the length of the note. This moves the playback position to the start of the next note.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nposition += length\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directory - CMake\nDESCRIPTION: This snippet sets the include directory for the range tree library. The '.' indicates that the current directory is the include path. This makes the headers within the current directory accessible during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/rangetree/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Module Definition\nDESCRIPTION: Adds a preprocessor definition WITH_PYTHON_MODULE if WITH_PYTHON_MODULE is enabled.  This allows conditional compilation of code specific to Python module builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DWITH_PYTHON_MODULE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Lemon Library CMake\nDESCRIPTION: Adds the Lemon library target using the specified source files. This creates a library named `lemon` from the source files listed in the `LEMON_SOURCES` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nADD_LIBRARY(lemon ${LEMON_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines the system include directories. It is empty by default but will be populated if optional dependencies like PugiXML or Haru are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Ocean Simulation\nDESCRIPTION: This snippet conditionally defines `-DWITH_OCEANSIM` if `WITH_MOD_OCEANSIM` is enabled.  This will activate any code paths related to ocean simulation within the blenkernel library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_OCEANSIM)\n  add_definitions(-DWITH_OCEANSIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: LOD Mesh Switching with Replace Mesh Actuator (Python)\nDESCRIPTION: This Python script implements a level-of-detail (LOD) system by switching a game object's mesh based on its distance from the camera. It retrieves the appropriate mesh name from a list of meshes and activates a Replace Mesh actuator to update the object's mesh. The script depends on the `bge` module and requires an Always sensor, a Python controller, and a Replace Mesh Actuator configured in the Blender game engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_ReplaceMeshActuator.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom bge import logic\n\n# List detail meshes here\n# Mesh (name, near, far)\n# Meshes overlap so that they don't 'pop' when on the edge of the distance.\nmeshes = ((\".Hi\", 0.0, -20.0),\n        (\".Med\", -15.0, -50.0),\n        (\".Lo\", -40.0, -100.0)\n      )\n\ncont = logic.getCurrentController()\nobject = cont.owner\nactuator = cont.actuators[\"LOD.\" + obj.name]\ncamera = logic.getCurrentScene().active_camera\n\ndef Depth(pos, plane):\n  return pos[0]*plane[0] + pos[1]*plane[1] + pos[2]*plane[2] + plane[3]\n\n# Depth is negative and decreasing further from the camera\ndepth = Depth(object.position, camera.world_to_camera[2])\n\nnewmesh = None\ncurmesh = None\n# Find the lowest detail mesh for depth\nfor mesh in meshes:\n  if depth < mesh[1] and depth > mesh[2]:\n    newmesh = mesh\n  if \"ME\" + object.name + mesh[0] == actuator.getMesh():\n      curmesh = mesh\n\nif newmesh != None and \"ME\" + object.name + newmesh[0] != actuator.mesh:\n  # The mesh is a different mesh - switch it.\n  # Check the current mesh is not a better fit.\n  if curmesh == None or curmesh[1] < depth or curmesh[2] > depth:\n    actuator.mesh = object.name + newmesh[0]\n    cont.activate(actuator)\n```\n\n----------------------------------------\n\nTITLE: Blendfile Versioning Tests Setup (CMake)\nDESCRIPTION: This CMake snippet sets up a series of tests for blendfile versioning. It iterates through a range and creates a separate test for each slice of the blendfile set. Each test runs a Python script that handles the actual versioning checks. The `BLENDFILE_VERSIONING_SPLIT_RANGE` variable determines how the blendfile set is split.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(BLENDFILE_VERSIONING_SPLIT_RANGE 32)\n  math(EXPR BLENDFILE_VERSIONING_SPLIT_RANGE_CMAKE \"${BLENDFILE_VERSIONING_SPLIT_RANGE} - 1\")\n  foreach(idx RANGE ${BLENDFILE_VERSIONING_SPLIT_RANGE_CMAKE})\n    add_blender_test(\n      \"blendfile_versioning_${idx}_over_${BLENDFILE_VERSIONING_SPLIT_RANGE}\"\n      --log \"*blendfile*\"\n      --debug-memory\n      --debug\n      --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_versioning.py --\n      --src-test-dir ${TEST_SRC_DIR}/\n      --slice-range ${BLENDFILE_VERSIONING_SPLIT_RANGE}\n      --slice-index ${idx}\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Metal and OneAPI Configuration - CMake\nDESCRIPTION: This snippet adds definitions for Metal and OneAPI device support if they are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_METAL)\n  add_definitions(-DWITH_METAL)\nendif()\n\nif(WITH_CYCLES_DEVICE_ONEAPI)\n  add_definitions(-DWITH_ONEAPI)\nendif()\n```\n\n----------------------------------------\n\nTITLE: macOS-specific linking options (CMake)\nDESCRIPTION: This snippet configures macOS-specific linker options for the test libraries. It uses `target_link_libraries` to add `-Wl,-force_load` linker flag to ensure that all symbols from the test libraries are loaded.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(APPLE)\n  foreach(_lib ${_test_libs})\n    # We need -force_load for every test library and target_link_libraries will\n    # deduplicate it. So explicitly set as linker option for every test lib.\n    target_link_libraries(blender_test PRIVATE \"-Wl,-force_load\" ${_lib})\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documenting removeOverlayCollection method\nDESCRIPTION: This snippet documents the `removeOverlayCollection` method which removes an overlay collection. It takes a bpy.types.Collection object as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n   .. method:: removeOverlayCollection(blenderCollection)\n\n      Removes an overlay collection (as with collection actuator).\n\n      :arg blenderCollection: The overlay collection to remove.\n      :type blenderCollection: :class:`~bpy.types.Collection`\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries - CMake\nDESCRIPTION: This snippet defines the list of Blender libraries that the texture nodes library depends on. These libraries provide various functionalities, such as memory management (`bf::blenlib`, `bf::intern::guardedalloc`), data structures (`bf::dna`), image handling (`bf::imbuf`), and rendering (`bf::render`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/texture/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies for Blender Editor Interface\nDESCRIPTION: This snippet specifies the library dependencies required for linking the Blender editor interface library. It includes dependencies on various Blender modules such as asset_system, blenfont, blenkernel, and other internal and external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_datafiles\n  bf_editor_id_management\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Custom Properties Usage - Python\nDESCRIPTION: This code demonstrates how to add, check, get, and delete custom properties on Blender data blocks, specifically on the context object, scene, and a collection. It shows how to assign basic Python types as custom properties and demonstrates using the dictionary-like access and deletion.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object[\"MyOwnProperty\"] = 42\n\nif \"SomeProp\" in bpy.context.object:\n    print(\"Property found\")\n\n# Use the get function like a Python dictionary\n# which can have a fallback value.\nvalue = bpy.data.scenes[\"Scene\"].get(\"test_prop\", \"fallback value\")\n\n# Dictionaries can be assigned as long as they only use basic types.\ncollection = bpy.data.collections.new(\"MyTestCollection\")\ncollection[\"MySettings\"] = {\"foo\": 10, \"bar\": \"spam\", \"baz\": {}}\n\ndel collection[\"MySettings\"]\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet sets system include directories, primarily for external libraries.  It includes the directories specified by OPENIMAGEIO_INCLUDE_DIRS, OPENEXR_INCLUDE_DIRS and IMATH_INCLUDE_DIRS (if defined).  These are required for the compiler to find the header files for these external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/oiio/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${OPENIMAGEIO_INCLUDE_DIRS}\n)\n\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND INC_SYS\n    ${OPENEXR_INCLUDE_DIRS}\n  )\nendif()\n\n# OpenImageIO headers include `Imath` headers when there is no SSE support for\n# matrix operations. This depends on the specific architecture and compiler\n# flags, most reliable is to always include the `Imath` headers if we have them.\nif(DEFINED IMATH_INCLUDE_DIRS)\n  list(APPEND INC_SYS\n    ${IMATH_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Assigning Object Names (Incorrect)\nDESCRIPTION: This code demonstrates an incorrect way to assign object names in Blender using the Python API.  It highlights a common mistake where it's assumed that the object will always be assigned the given name. This can lead to errors if the name is already in use, exceeds the maximum length, or is an empty string.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nobj.name = objname\n\n# Normally some code, function calls, etc.\nobj = bpy.data.meshes[objname]\n```\n\n----------------------------------------\n\nTITLE: Modifying Collection Objects During Iteration (Correct) in Blender Python\nDESCRIPTION: This example shows the correct way to modify collection objects during iteration. By iterating over a copy of `all_objects` (using `[:]`), modifications to object properties like `hide_viewport` do not cause errors as long as no objects are deleted during the iteration.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# `all_objects[:]` is an independent list generated from the iterator. As long as no objects are deleted,\n# its content will remain valid even if the data accessed by the `all_objects` iterator is modified.\nfor object in bpy.data.collections[\"Collection\"].all_objects[:]:\n     object.hide_viewport = True\n```\n\n----------------------------------------\n\nTITLE: Enable Input Method Editor (IME)\nDESCRIPTION: This code block conditionally enables the Input Method Editor (IME) option for complex Asian character input on Windows, macOS, and some UNIX systems (excluding Haiku) when using the Wayland display server. If the condition is not met, the IME option is explicitly turned off.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 OR APPLE OR ((UNIX AND (NOT HAIKU)) AND WITH_GHOST_WAYLAND))\n  option(WITH_INPUT_IME \"Enable Input Method Editor (IME) for complex Asian character input\" ON)\nelse()\n  set(WITH_INPUT_IME OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet defines the libraries that the `cycles_integrator` library depends on. It includes `cycles_device`, `cycles_session`, and `cycles_util`. It also conditionally includes OpenImageDenoise and OpenPGL libraries based on the `WITH_OPENIMAGEDENOISE` and `WITH_CYCLES_PATH_GUIDING` build options, respectively.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/integrator/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_device\n\n  # NOTE: Is required for RenderBuffers access. Might consider moving files around a bit to\n  # avoid such cyclic dependency.\n  cycles_session\n\n  cycles_util\n)\n\nif(WITH_OPENIMAGEDENOISE)\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n  )\nendif()\n\nif(WITH_CYCLES_PATH_GUIDING)\n  list(APPEND LIB\n    ${OPENPGL_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet lists the source files that make up the physics module. These files contain the C++ code for various physics-related features like dynamic paint, particle boids, fluid simulation, and rigid body dynamics. It also includes header files defining utility functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  dynamicpaint_ops.cc\n  particle_boids.cc\n  particle_edit.cc\n  particle_edit_undo.cc\n  particle_object.cc\n  physics_fluid.cc\n  physics_ops.cc\n  physics_pointcache.cc\n  rigidbody_constraint.cc\n  rigidbody_object.cc\n  rigidbody_world.cc\n\n  particle_edit_utildefines.h\n  physics_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Recast Navigation Library\nDESCRIPTION: This snippet uses a custom CMake function, ``blender_add_lib``, to create the Recast Navigation library. It specifies the library name (``extern_recastnavigation``), source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/recastnavigation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_recastnavigation \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This code defines the CMake variable `SRC` to list the source files required to build the gtest library. It includes both C++ source files and header files, specifying the paths relative to the project root.  The files listed are essential for the core functionality of gtest, assertion results, death tests, file path handling, matchers, porting, printing, test parts, and typed tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gtest/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  # src/gtest-all.cc\n  # src/gtest_main.cc\n\n  src/gtest.cc\n  src/gtest-assertion-result.cc\n  src/gtest-death-test.cc\n  src/gtest-filepath.cc\n  src/gtest-matchers.cc\n  src/gtest-port.cc\n  src/gtest-printers.cc\n  src/gtest-test-part.cc\n  src/gtest-typed-test.cc\n\n  src/gtest-internal-inl.h\n\n  include/gtest/gtest.h\n  include/gtest/gtest_pred_impl.h\n  include/gtest/gtest_prod.h\n  include/gtest/gtest-assertion-result.h\n  include/gtest/gtest-death-test.h\n  include/gtest/gtest-matchers.h\n  include/gtest/gtest-message.h\n  include/gtest/gtest-param-test.h\n  include/gtest/gtest-printers.h\n  include/gtest/gtest-spi.h\n  include/gtest/gtest-test-part.h\n  include/gtest/gtest-typed-test.h\n  include/gtest/internal/custom/gtest.h\n  include/gtest/internal/custom/gtest-port.h\n  include/gtest/internal/custom/gtest-printers.h\n  include/gtest/internal/gtest-death-test-internal.h\n  include/gtest/internal/gtest-filepath.h\n  include/gtest/internal/gtest-internal.h\n  include/gtest/internal/gtest-param-util.h\n  include/gtest/internal/gtest-port.h\n  include/gtest/internal/gtest-port-arch.h\n  include/gtest/internal/gtest-string.h\n  include/gtest/internal/gtest-type-util.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries for BMesh\nDESCRIPTION: This snippet sets the libraries that the BMesh library depends on, including Blender's blenkernel, blenlib, blentranslation, depsgraph, dna, clog, guardedalloc, rangetree, and atomic.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  extern_rangetree\n  PRIVATE bf::intern::atomic\n)\n```\n\n----------------------------------------\n\nTITLE: Object API Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for the Blender object API.  It utilizes the `bl_object.py` Python script to perform tests related to the object API. This test does not load a blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    object_api\n    --python ${TEST_PYTHON_DIR}/bl_object.py\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Libsndfile Plugin with CMake\nDESCRIPTION: This snippet configures and builds the Libsndfile plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, links it to other libraries, and installs it to the plugin directory. It requires WITH_LIBSNDFILE and PLUGIN_LIBSNDFILE to be enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBSNDFILE AND PLUGIN_LIBSNDFILE)\n\tadd_definitions(-DLIBSNDFILE_PLUGIN)\n\tinclude_directories(${INCLUDE} ${LIBSNDFILE_INCLUDE_DIRS})\n\tadd_library(audlibsndfile SHARED ${LIBSNDFILE_SRC} ${LIBSNDFILE_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audlibsndfile PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\ttarget_link_libraries(audlibsndfile audaspace ${LIBSNDFILE_LIBRARIES})\n\tinstall(TARGETS audlibsndfile DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with FFTW3\nDESCRIPTION: This snippet conditionally includes FFTW3 headers and libraries if enabled. It appends to the include and library lists and adds a definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFTW3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Directories for Includes and Linking (CMake)\nDESCRIPTION: This snippet sets the include and link directories for the project.  It adds the project source directory and the project binary directory to the include path, and specifies the `lemon` subdirectory within the binary directory for linking.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n```\n\n----------------------------------------\n\nTITLE: Setting and Warning Library Found\nDESCRIPTION: This snippet sets a warning if the USD library is not found when the Cycles Hydra render delegate is enabled. It calls `set_and_warn_library_found` to handle this warning.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE AND (NOT WITH_USD))\n  set_and_warn_library_found(\"USD\" WITH_USD WITH_CYCLES_HYDRA_RENDER_DELEGATE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies CMake\nDESCRIPTION: This snippet defines library dependencies for Audaspace. If WITH_SYSTEM_AUDASPACE is not enabled, it links against the internal 'audaspace' library. Otherwise, it links against the system Audaspace libraries. It also handles Python integration if enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/audaspace/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n\nif(NOT WITH_SYSTEM_AUDASPACE)\n  list(APPEND LIB\n    audaspace\n  )\nelse()\n  list(APPEND LIB\n    ${AUDASPACE_C_LIBRARIES}\n  )\n  if(WITH_PYTHON AND WITH_PYTHON_NUMPY)\n    list(APPEND LIB\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files for RNA Generation\nDESCRIPTION: This snippet sets the list of source files used for RNA generation.  These files contain the implementation of the RNA system and are used to generate the RNA interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(DEFSRC\n  rna_ID.cc\n  rna_action.cc\n  rna_actuator.cc\n  rna_animation.cc\n  rna_animviz.cc\n  rna_annotations.cc\n  rna_armature.cc\n  rna_asset.cc\n  rna_attribute.cc\n  rna_blendfile_import.cc\n  rna_boid.cc\n  rna_brush.cc\n  rna_cachefile.cc\n  rna_camera.cc\n  rna_cloth.cc\n  rna_collection.cc\n  rna_color.cc\n  rna_constraint.cc\n  rna_context.cc\n  rna_controller.cc\n  rna_curve.cc\n  rna_curveprofile.cc\n  rna_curves.cc\n  rna_depsgraph.cc\n  rna_dynamicpaint.cc\n  rna_fcurve.cc\n  rna_fluid.cc\n  rna_grease_pencil.cc\n  rna_image.cc\n  rna_key.cc\n  rna_lattice.cc\n  rna_layer.cc\n  rna_light.cc\n  rna_lightprobe.cc\n  rna_linestyle.cc\n  rna_main.cc\n  rna_mask.cc\n  rna_material.cc\n  rna_mesh.cc\n  rna_meta.cc\n  rna_modifier.cc\n  rna_movieclip.cc\n  rna_nla.cc\n  rna_node_socket.cc\n  rna_node_tree_interface.cc\n  rna_nodetree.cc\n  rna_object.cc\n  rna_object_force.cc\n  rna_packedfile.cc\n  rna_palette.cc\n  rna_particle.cc\n  rna_pointcloud.cc\n  rna_pose.cc\n  rna_property.cc\n  rna_python_proxy.cc\n  rna_render.cc\n  rna_rigidbody.cc\n  rna_rna.cc\n  rna_scene.cc\n  rna_screen.cc\n  rna_sculpt_paint.cc\n  rna_sensor.cc\n  rna_sequencer.cc\n  rna_shader_fx.cc\n  rna_sound.cc\n  rna_space.cc\n  rna_speaker.cc\n  rna_test.cc\n  rna_text.cc\n  rna_texture.cc\n  rna_timeline.cc\n  rna_tracking.cc\n  rna_ui.cc\n  rna_userdef.cc\n  rna_vfont.cc\n  rna_volume.cc\n  rna_wm.cc\n  rna_wm_gizmo.cc\n  rna_workspace.cc\n  rna_world.cc\n  rna_xr.cc\n)\n```\n\n----------------------------------------\n\nTITLE: TBB Windows Definition\nDESCRIPTION: This code snippet conditionally adds the `-DNOMINMAX` definition if TBB (Threading Building Blocks) is enabled and the target platform is Windows. This is a workaround to prevent conflicts between the Windows API's min/max macros and the STL versions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/functions/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Theora Decoder Library with CMake\nDESCRIPTION: This snippet creates a Theora decoder library by linking the common and decoder object libraries. It also specifies a .def file, likely for Windows DLL export/import definitions, and links against the OGG library.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(theoradec $<TARGET_OBJECTS:theora-common> $<TARGET_OBJECTS:theora-dec> \"win32/xmingw32/libtheoradec-all.def\")\ntarget_link_libraries(theoradec ${OGG_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Defining OneAPI Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines the OneAPI kernel source file. It specifies the OneAPI implementation of the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_ONEAPI\n  device/oneapi/kernel.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Bone Tail (Read-Only) (Python)\nDESCRIPTION: This snippet demonstrates how to access the tail property of a bone. The tail property is read-only. The example retrieves the bone named \"Bone\" from the armature data of the object `myobj` and accesses its tail.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ntail = myobj.data.bones[\"Bone\"].tail\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions (Game Engine)\nDESCRIPTION: This snippet conditionally defines the `WITH_GAMEENGINE` preprocessor macro if the game engine is enabled. This enables game engine-specific features in the object editor.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n\tadd_definitions(-DWITH_GAMEENGINE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Suppressing TBB Deprecation Warnings CMake\nDESCRIPTION: This snippet suppresses deprecation warnings from TBB headers by defining specific preprocessor macros. This prevents the build from failing due to these warnings, allowing the project to compile cleanly even with older versions of TBB.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(\n  -D__TBB_show_deprecation_message_atomic_H\n  -D__TBB_show_deprecation_message_task_H\n)\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Configuration - CMake\nDESCRIPTION: This snippet configures glog for the Windows platform. It appends Windows-specific source files and include directories to the SRC and INC variables. It also adds a compiler definition to suppress a specific warning in MSVC.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  list(APPEND SRC\n    src/windows/port.cc\n\n    src/windows/glog/raw_logging.h\n    src/windows/glog/vlog_is_on.h\n    src/windows/glog/logging.h\n    src/windows/glog/log_severity.h\n    src/windows/glog/stl_logging.h\n    src/windows/port.h\n    src/windows/config.h\n  )\n\n  list(APPEND INC\n    src/windows\n  )\n  if(MSVC)\n    # Suppress warning about google::LogMessageFatal::~LogMessageFatal\n    # not returning.\n    add_definitions(\"/wd4722\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting oneAPI library suffix based on binary option\nDESCRIPTION: This snippet sets the suffix for the oneAPI kernel library based on whether pre-compiled binaries are used (AOT - Ahead Of Time) or if just-in-time (JIT) compilation is performed.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_ONEAPI)\n  if(WITH_CYCLES_ONEAPI_BINARIES)\n    set(cycles_kernel_oneapi_lib_suffix \"_aot\")\n  else()\n    set(cycles_kernel_oneapi_lib_suffix \"_jit\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories with CMake\nDESCRIPTION: This snippet uses the `include_directories` command to add the `include` directory and the OGG include directory to the compiler's search path. This allows the compiler to find the necessary header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(\"include\")\ninclude_directories(${OGG_INCLUDE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Define Endianness\nDESCRIPTION: Detects the system's endianness and defines either `__LITTLE_ENDIAN__` or `__BIG_ENDIAN__`.  For MSVC, it directly defines `__LITTLE_ENDIAN__`. For other compilers, it includes `TestBigEndian` module and uses the result to define the appropriate endianness macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# set the endian define\nif(MSVC)\n  # For some reason this fails on MSVC.\n  add_definitions(-D__LITTLE_ENDIAN__)\nelse()\n  include(TestBigEndian)\n  test_big_endian(_SYSTEM_BIG_ENDIAN)\n  if(_SYSTEM_BIG_ENDIAN)\n    add_definitions(-D__BIG_ENDIAN__)\n  else()\n    add_definitions(-D__LITTLE_ENDIAN__)\n  endif()\n  unset(_SYSTEM_BIG_ENDIAN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Shaderc Shared Library with CMake\nDESCRIPTION: This snippet installs the Shaderc shared library (`shaderc_shared.dll` for release and `shaderc_shared_d.dll` for debug) using the `windows_install_shared_manifest` function, specifying separate installation configurations for release and debug builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nwindows_install_shared_manifest(\n  FILES ${LIBDIR}/shaderc/bin/shaderc_shared.dll\n  RELEASE\n)\n\nwindows_install_shared_manifest(\n  FILES ${LIBDIR}/shaderc/bin/shaderc_shared_d.dll\n  DEBUG\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Requests Library\nDESCRIPTION: This CMake code conditionally installs the Requests library. It checks if the `WITH_PYTHON_INSTALL_REQUESTS` variable is enabled. If so, it installs the `requests` directory to the appropriate destination, excluding cache files. It also considers dist-packages vs site-packages based on the `PYTHON_REQUESTS_PATH` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\n      # Copy requests, we need to generalize site-packages.\n      if(WITH_PYTHON_INSTALL_REQUESTS)\n        set(_suffix \"site-packages\")\n        if(${PYTHON_REQUESTS_PATH} MATCHES \"dist-packages\")\n          set(_suffix \"dist-packages\")\n        endif()\n        install(\n          DIRECTORY ${PYTHON_REQUESTS_PATH}/requests\n          DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n          PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n          PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n          PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n        )\n        # On some platforms requests does have extra dependencies.\n        #\n\n```\n\n----------------------------------------\n\nTITLE: Adding libmv test executable\nDESCRIPTION: This CMake code snippet uses the `blender_add_test_executable` function to define and build a test executable.  It specifies the executable name, the source file, include directories (`INC`, `INC_SYS`), and libraries to link against (including `libmv_test_dataset`, `bf_intern_libmv` and other libraries defined by `LIB`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_executable(\"libmv_pyramid_region_tracker\" \"./libmv/tracking/pyramid_region_tracker_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting addOverlayCollection method\nDESCRIPTION: This snippet documents the `addOverlayCollection` method which adds an overlay collection using a specified camera. It requires a KX_Camera object and a bpy.types.Collection object as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n      :arg kxCamera: The camera used to render the overlay collection.\n      :type kxCamera: :class:`~bge.types.KX_Camera`\n\n      :arg blenderCollection: The overlay collection to add.\n      :type blenderCollection: :class:`~bpy.types.Collection`\n```\n\n----------------------------------------\n\nTITLE: Adding libmv test executable\nDESCRIPTION: This CMake code snippet uses the `blender_add_test_executable` function to define and build a test executable.  It specifies the executable name, the source file, include directories (`INC`, `INC_SYS`), and libraries to link against (including `libmv_test_dataset`, `bf_intern_libmv` and other libraries defined by `LIB`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_executable(\"libmv_parallel_for\" \"./libmv/threading/parallel_for_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the launcher library. It sets both internal project includes (INC) and system includes (INC_SYS) using the `set` command. The system includes also include paths to Boost and Moto libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../BlenderRoutines\n  ../Common\n  ../Converter\n  ../Device\n  ../Expressions\n  ../GameLogic\n  ../GamePlayer\n  ../Ketsji\n  ../Ketsji/KXNetwork\n  ../Rasterizer\n  ../SceneGraph\n  ../VideoTexture\n  ../../blender/makesrna\n  ../../../intern/ghost\n  ../../../intern/termcolor\n)\n\nset(INC_SYS\n  ../../../intern/moto/include\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Printing with colors and text styles using fmt\nDESCRIPTION: This C++ code snippet demonstrates how to print text with colors and styles using the fmt library. It requires including the `<fmt/color.h>` header file. It showcases different color combinations and text styles like bold, underline, and italic.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/color.h>\n\n    int main() {\n      fmt::print(fg(fmt::color::crimson) | fmt::emphasis::bold,\n                 \"Hello, {}\\n\", \"world\");\n      fmt::print(fg(fmt::color::floral_white) | bg(fmt::color::slate_gray) |\n                 fmt::emphasis::underline, \"Hello, {}\\n\", \"мир\");\n      fmt::print(fg(fmt::color::steel_blue) | fmt::emphasis::italic,\n                 \"Hello, {}\\n\", \"世界\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing TBB Malloc Proxy with CMake\nDESCRIPTION: This snippet conditionally installs TBB malloc proxy DLLs if the `WITH_TBB_MALLOC_PROXY` option is enabled. It installs both release and debug versions of `tbbmalloc.dll` and `tbbmalloc_proxy.dll` and then appends the necessary TBB malloc libraries to the `LIB` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB_MALLOC_PROXY)\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbbmalloc.dll\n      ${LIBDIR}/tbb/bin/tbbmalloc_proxy.dll\n    RELEASE\n  )\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbbmalloc_debug.dll\n      ${LIBDIR}/tbb/bin/tbbmalloc_proxy_debug.dll\n    DEBUG\n  )\n  list(APPEND LIB ${TBB_MALLOC_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: CUDA and OptiX Configuration - CMake\nDESCRIPTION: This snippet handles CUDA and OptiX device configuration, adding definitions and include directories based on the enabled devices.  It also addresses dynamic loading of CUDA through cuew.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_CUDA OR WITH_CYCLES_DEVICE_OPTIX)\n  add_definitions(-DWITH_CUDA)\n\n  if(WITH_CUDA_DYNLOAD)\n    include_directories(\n      ../../extern/cuew/include\n    )\n    add_definitions(-DWITH_CUDA_DYNLOAD)\n  else()\n    include_directories(\n      SYSTEM\n      ${CUDA_TOOLKIT_INCLUDE}\n    )\n  endif()\nendif()\n\nif(WITH_CYCLES_DEVICE_OPTIX)\n  find_package(OptiX 7.3.0)\n\n  if(OPTIX_FOUND)\n    add_definitions(-DWITH_OPTIX)\n    include_directories(\n      SYSTEM\n      ${OPTIX_INCLUDE_DIR}\n    )\n  else()\n    set_and_warn_library_found(\"OptiX\" OPTIX_FOUND WITH_CYCLES_DEVICE_OPTIX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional GTest Configuration\nDESCRIPTION: This snippet conditionally configures a test suite if Google Test (GTest) is enabled (WITH_GTESTS). It defines source files, include directories, and library dependencies for the test suite, and then uses `blender_add_test_suite_lib` to create the test executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    mesh_brush_common_tests.cc\n    paint_test.cc\n    sculpt_detail_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    ${LIB}\n    bf_rna  # RNA_prototypes.hh\n  )\n  blender_add_test_suite_lib(editor_sculpt_paint \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: FFTW3 Support\nDESCRIPTION: This snippet enables FFTW3 (Fastest Fourier Transform in the West) support if the `WITH_FFTW3` option is enabled. It includes the FFTW3 header directory, links the FFTW3 library, and adds a preprocessor definition `-DWITH_FFTW3`. This allows the use of FFTW3 for frequency-domain operations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFTW3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiling Shaders as C++ - CMake\nDESCRIPTION: Conditionally compiles shader sources as C++ code. This is enabled if `WITH_GPU_SHADER_CPP_COMPILATION` is true. It configures compiler definitions and compiles vertex and fragment shaders to C++.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(overlay_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(overlay_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  # compile_sources_as_cpp(overlay_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(overlay_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Appending Source Files - CMake\nDESCRIPTION: This section conditionally appends source files based on the `WITH_MANTA_DEPENDENCIES` and `WITH_MANTA_NUMPY` flags. If `WITH_MANTA_DEPENDENCIES` is enabled, it includes CNPY source files. If `WITH_MANTA_NUMPY` and `WITH_PYTHON_NUMPY` are enabled, it includes NUMPY conversion and wrapper files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MANTA_DEPENDENCIES)\n  list(APPEND SRC\n    ${MANTA_DEP}/cnpy/cnpy.cpp\n    ${MANTA_DEP}/cnpy/cnpy.h\n  )\nendif()\nif(WITH_MANTA_NUMPY AND WITH_PYTHON_NUMPY)\n  list(APPEND SRC\n    ${MANTA_PP}/plugin/numpyconvert.cpp\n    ${MANTA_PP}/plugin/tfplugins.cpp\n    ${MANTA_HLP}/pwrapper/numpyWrap.cpp\n    ${MANTA_HLP}/pwrapper/numpyWrap.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the project.  It includes both local and system-level directories required for compiling the source files. The INC variable includes relative paths to header files and a generated directory, while INC_SYS is empty, implying no system-level includes are explicitly defined here.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_image/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../asset\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling GLSL to C++\nDESCRIPTION: This section conditionally compiles the GLSL shaders into C++ code using the `compile_sources_as_cpp` CMake function, if `WITH_GPU_SHADER_CPP_COMPILATION` is enabled. This allows the shaders to be embedded directly into the application's C++ code. The `add_definitions` call adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/intern/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(draw_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(draw_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  compile_sources_as_cpp(draw_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Collada Test Function (CMake)\nDESCRIPTION: This snippet defines a CMake function `collada_test` to add Blender tests for COLLADA import/export. It calls the `add_blender_test` macro with the specified module, test name, and blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  function(collada_test module test_name blend_file)\n    add_blender_test(\n      bf_io_collada_${module}_${test_name}\n      ${TEST_SRC_DIR}/collada/${module}/${blend_file}\n      --python ${CMAKE_CURRENT_LIST_DIR}/${module}/test_${module}_${test_name}.py --\n      --testdir ${TEST_SRC_DIR}/collada/${module}\n    )\n  endfunction()\n\n  # Tests are disabled because they only work on Windows\n  # Tests will be redone completely to work reliable\n  #\n  # collada_test(mesh simple mesh_simple.blend)\n  # collada_test(animation simple suzannes_parent_inverse.blend)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Removal of Strict Flags (CMake)\nDESCRIPTION: This snippet conditionally removes strict compiler flags if Google Test (GTEST) and Cycles logging are enabled. This is done to prevent warnings that cannot be fixed in external projects. This implies the existence of a `remove_strict_flags` function defined elsewhere, likely in a shared CMake module.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS AND WITH_CYCLES_LOGGING)\n  # Otherwise we get warnings here that we can't fix in external projects\n  remove_strict_flags()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Modifying Collection Objects During Iteration (Incorrect) in Blender Python\nDESCRIPTION: This snippet shows an incorrect way of modifying collection objects during iteration. Modifying properties like `hide_viewport` while iterating over `all_objects` directly will lead to memory access errors and crashes because it rebuilds the collection caches mid-iteration.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# `all_objects` is an iterator. Using it directly while performing operations on its members that will update\n# the memory accessed by the `all_objects` iterator will lead to invalid memory accesses and crashes.\nfor object in bpy.data.collections[\"Collection\"].all_objects:\n     object.hide_viewport = True\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in CMake\nDESCRIPTION: This snippet adds a dependency between the `ge_player` library and the `bf_rna` library. This ensures that `bf_rna` is built before `ge_player`, guaranteeing that any code generated by `bf_rna` is available during the compilation of `ge_player`. The comment \"RNA_prototypes.h\" hints that changes to the RNA prototypes trigger the rebuild of `ge_player`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.h\nadd_dependencies(ge_player bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Accessing Mipmap Levels in Fragment Shader (GLSL)\nDESCRIPTION: This GLSL fragment shader code demonstrates how to access mipmap levels of a rendered texture `bgl_RenderedTexture` within a shader.  It uses the `textureLod` function to sample the texture at a specific mipmap level specified by the `level` variable. The `bgl_TexCoord.xy` is used for the texture coordinates.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_2DFilter.rst#_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\nuniform sampler2D bgl_RenderedTexture;\nin vec4 bgl_TexCoord;\nout vec4 fragColor;\n\nvoid main()\n{\n    float level = 2.0; // mipmap level\n    fragColor = textureLod(bgl_RenderedTexture, bgl_TexCoord.xy, level);\n}\n```\n\n----------------------------------------\n\nTITLE: Building QuadriFlow with CMake\nDESCRIPTION: These commands are used to clone the QuadriFlow repository, create a build directory, configure the project with CMake, and compile the software. The `-DCMAKE_BUILD_TYPE=release` flag specifies a release build, and `make -j` utilizes multiple cores for faster compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/hjwdzh/quadriflow\ncd quadriflow\nmkdir build\ncd build\ncmake .. -DCMAKE_BUILD_TYPE=release\nmake -j\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for Inline Header Files\nDESCRIPTION: This snippet configures the source file properties for several inline header files. Specifically, it sets the `HEADER_FILE_ONLY` property to `TRUE`, indicating that these files should not be compiled as object files. This improves compilation speed and reduces binary size.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# no need to compile object files for inline headers.\nset_source_files_properties(\n  intern/math_base_inline.cc\n  intern/math_base_safe_inline.cc\n  intern/math_bits_inline.cc\n  intern/math_color_blend_inline.cc\n  intern/math_color_inline.cc\n  intern/math_geom_inline.cc\n  intern/math_vector_inline.cc\n  PROPERTIES HEADER_FILE_ONLY TRUE\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Freestyle Library - CMake\nDESCRIPTION: This CMake snippet adds the `bf_freestyle` library using a custom `blender_add_lib` function. It specifies the source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_freestyle \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Avoid Crash: Referencing Blender Data (Incorrect)\nDESCRIPTION: This code demonstrates a problematic pattern that can cause Blender to crash. It adds multiple items to a collection property and then attempts to modify the first item's name directly after the additions. This can lead to a crash because the internal memory for the collection might be re-allocated, invalidating the reference to `first_item`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass TestItems(bpy.types.PropertyGroup):\n    name: bpy.props.StringProperty()\n\nbpy.utils.register_class(TestItems)\nbpy.types.Scene.test_items = bpy.props.CollectionProperty(type=TestItems)\n\nfirst_item = bpy.context.scene.test_items.add()\nfor i in range(100):\n    bpy.context.scene.test_items.add()\n\n# This is likely to crash, as internal code may re-allocate\n# the whole container (the collection) memory at some point.\nfirst_item.name = \"foobar\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Experimental Features - CMake\nDESCRIPTION: Conditionally adds a preprocessor definition for experimental features, specifically for simulation datablocks.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines the 'INC_SYS' variable, which lists system include directories required for compiling the 'bf_render_hydra' library. It includes directories for Python, Epoxy, USD, Boost, TBB, and GFlags.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n  ${Epoxy_INCLUDE_DIRS}\n  ${USD_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n  ${TBB_INCLUDE_DIR}\n  ${GFLAGS_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Defines the include directories for the ufbx library. `INC` sets the public include directory to the current directory (.). `INC_SYS` is defined but remains empty, indicating no system include directories are specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ufbx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Windows - CMake\nDESCRIPTION: This snippet adds a preprocessor definition for Windows builds.  Specifically, it defines _USE_MATH_DEFINES which makes mathematical constants like PI available.  This is necessary as some Windows compilers do not define these by default.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/iksolver/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files that are part of the range tree library. It includes header files and a C source file, which are used for the implementation of range tree functionality and generic memory allocation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/rangetree/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  range_tree.h\n  intern/generic_alloc_impl.h\n\n  intern/range_tree.c\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pip3\nDESCRIPTION: This command installs the necessary Python dependencies from the `requirements.txt` file. These dependencies are required to run the `create_release_notes.py` script.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/lts/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip3 install -r ./requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Class Mix-in Example in Blender - Python\nDESCRIPTION: This code demonstrates class mix-ins in Blender using the bpy module. It defines a BaseOperator class with an execute method, and then creates a SimpleOperator class that inherits from both bpy.types.Operator and BaseOperator. The SimpleOperator's execute method will be inherited from BaseOperator. The operator is then registered.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass BaseOperator:\n    def execute(self, context):\n        print(\"Hello World BaseClass\")\n        return {'FINISHED'}\n\nclass SimpleOperator(bpy.types.Operator, BaseOperator):\n    bl_idname = \"object.simple_operator\"\n    bl_label = \"Tool Name\"\n\nbpy.utils.register_class(SimpleOperator)\n```\n\n----------------------------------------\n\nTITLE: Installing Sndfile with CMake\nDESCRIPTION: This snippet determines the correct name for the Sndfile DLL (either `sndfile.dll` or `libsndfile-1.dll`) based on file existence, and then installs it using the `windows_install_shared_manifest` function for all configurations. Finally it unsets the `SNDFILE_DLL` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_53\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${LIBDIR}/sndfile/lib/sndfile.dll)\n  set(SNDFILE_DLL ${LIBDIR}/sndfile/lib/sndfile.dll)\nelse()\n  set(SNDFILE_DLL ${LIBDIR}/sndfile/lib/libsndfile-1.dll)\nendif()\n\nwindows_install_shared_manifest(\n  FILES ${SNDFILE_DLL}\n  ALL\n)\nunset(SNDFILE_DLL)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in CMake\nDESCRIPTION: This snippet adds a dependency between the bf_editor_space_buttons library and the bf_rna library. This ensures that the bf_rna library is built before bf_editor_space_buttons. The RNA_prototypes.hh and dna_type_offsets.h files likely contain generated code from the RNA system, so this dependency ensures that those files are up-to-date before the bf_editor_space_buttons library is compiled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_buttons/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_buttons bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Including Platform-Specific Configurations - CMake\nDESCRIPTION: This code block includes platform-specific CMake files based on the detected operating system. It includes `platform_unix`, `platform_win32`, or `platform_apple` depending on whether the system is UNIX (excluding Apple), Windows, or macOS, respectively. This allows for different settings and configurations to be applied to each platform.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_96\n\nLANGUAGE: CMake\nCODE:\n```\n# ----------------------------------------------------------------------------\n# Main Platform Checks\n#\n# - UNIX\n# - WIN32\n# - APPLE\n\nif(UNIX AND NOT APPLE)\n  include(platform_unix)\nelif(WIN32)\n  include(platform_win32)\nelif(APPLE)\n  include(platform_apple)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Configuration\nDESCRIPTION: This snippet conditionally configures tests for the module when WITH_GTESTS and WITH_CODEC_FFMPEG are enabled. It defines source files, include directories, and libraries for the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS AND WITH_CODEC_FFMPEG)\n  set(TEST_SRC\n    tests/ffmpeg_codecs.cc\n    tests/ffmpeg_cpu_flags.cc\n  )\n  set(TEST_INC\n    intern\n  )\n  set(TEST_INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n  )\n  set(TEST_LIB\n    ${FFMPEG_LIBRARIES}\n  )\n  if(WITH_IMAGE_OPENJPEG)\n    set(TEST_LIB ${TEST_LIB} ${OPENJPEG_LIBRARIES})\n  endif()\n  blender_add_test_suite_lib(ffmpeg_libs \"${TEST_SRC}\" \"${TEST_INC}\" \"${TEST_INC_SYS}\" \"${TEST_LIB}\")\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Joining lists into single strings and configuring files\nDESCRIPTION: This snippet concatenates the C code snippets generated for SVG icons into single strings. It then uses CMake's `configure_file` command to create the final `.h` and `.cc` files in the build directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n    list(JOIN SVG_CONTENTS_C \"\" SVG_CONTENTS_C)\n    list(JOIN SVG_CONTENTS_H \"\" SVG_CONTENTS_H)\n\n    configure_file(\n      \"svg_icons.h.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/svg_icons.h\"\n      ESCAPE_QUOTES\n      @ONLY\n    )\n    configure_file(\n      \"svg_icons.cc.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}/svg_icons.cc\"\n      ESCAPE_QUOTES\n      @ONLY\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (Bullet Physics Support)\nDESCRIPTION: This snippet conditionally defines `-DWITH_BULLET` and appends the Bullet Physics include directories to `INC` and `INC_SYS` lists if `WITH_BULLET` is enabled.  This enables support for the Bullet physics engine within the game engine, adding physics simulation capabilities. Requires `BULLET_INCLUDE_DIRS` to be set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC\n    ../Physics/Bullet\n  )\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: This snippet sets the list of include directories for the `makesrna` executable. These directories contain the header files needed for compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../../animrig\n  ../../asset_system\n  ../../blenfont\n  ../../blenkernel\n  ../../blenlib\n  ../../blenloader\n  ../../blentranslation\n  ../../bmesh\n  ../../depsgraph\n  ../../draw\n  ../../functions\n  ../../gpu\n  ../../ikplugin\n  ../../imbuf\n  ../../imbuf/movie\n  ../../io/usd\n  ../../modifiers\n  ../../nodes\n  ../../nodes/geometry/include\n  ../../sequencer\n  ../../simulation\n  ../../windowmanager\n  ../../editors/asset\n  ../../editors/include\n  ../../render\n  ../../../../intern/clog\n  ../../../../intern/cycles/blender\n  ../../../../extern/fmtlib/include\n  ../../../../intern/memutil\n  ../../../../intern/mantaflow/extern\n\n\n  # RNA_prototypes.hh\n  ${CMAKE_CURRENT_BINARY_DIR}/../../makesrna/\n)\n```\n\n----------------------------------------\n\nTITLE: Adding DeckLink Library\nDESCRIPTION: Adds the DeckLink library using the blender_add_lib CMake function.  This function (specific to the Blender project) likely handles the details of creating the library target, linking the specified source files, and managing include directories and library dependencies. The function takes the library name (bf_intern_decklink) and a list of source files, include directories, and library dependencies as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/decklink/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_decklink \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (CMake)\nDESCRIPTION: Defines the libraries to link against the Blender Python module. It includes both internal Blender libraries (using bf:: namespace) and external libraries. This also includes Python-specific link flags and library paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/intern/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  bf_editor_animation\n  bf_editor_interface\n  bf_editor_space_api\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  bf_python_gpu\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Zstd Compressor Executable - CMake\nDESCRIPTION: This CMake code defines an executable named `zstd_compress` built from `../cmake/zstd_compress.cpp`. It includes the Zstd headers, links against the Zstd library, and links against PThreads if defined. This tool is used for compressing kernels using the Zstd algorithm.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_34\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(zstd_compress ../cmake/zstd_compress.cpp)\ntarget_include_directories(zstd_compress SYSTEM PRIVATE ${ZSTD_INCLUDE_DIRS})\n\ntarget_link_libraries(zstd_compress ${ZSTD_LIBRARIES})\nif(DEFINED PTHREADS_LIBRARIES)\n  target_link_libraries(zstd_compress ${PTHREADS_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Suppressing Compiler Warnings with CMake\nDESCRIPTION: Conditionally removes specific compiler warnings that are considered too noisy or not maintainable for external code. It targets both GCC and Clang compilers to suppress certain warnings related to indentation, extra checks, and null pointer subtraction.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  remove_cc_flag(\n    \"-Wmisleading-indentation\"\n  )\nelif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  remove_cc_flag(\n    \"-Weverything\"\n    \"-Wextra\"\n    \"-Wnull-pointer-subtraction\"\n    \"-Wcast-function-type-mismatch\"\n    \"-Wignored-qualifiers\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Node Registration File\nDESCRIPTION: Uses a custom CMake function (`add_node_discovery`) to automatically generate a C++ file that registers the node functions with Blender. This simplifies the process of adding new nodes to the system by automating the registration process. It takes the source files, an output file path, and a function name as parameters.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_node_discovery(\n  bf_nodes_functions_generated\n  \"${SRC}\"\n  ${CMAKE_CURRENT_BINARY_DIR}/register_function_nodes.cc\n  register_function_nodes\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Potrace Configuration\nDESCRIPTION: This snippet conditionally configures the build based on whether Potrace is enabled (WITH_POTRACE). If enabled, it appends Potrace's include directories and libraries to the existing lists, and adds the preprocessor definition -DWITH_POTRACE. This allows the library to use Potrace if it's available.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_POTRACE)\n  list(APPEND INC\n    ${POTRACE_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${POTRACE_LIBRARIES}\n  )\n  add_definitions(-DWITH_POTRACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding test suite (GTEST)\nDESCRIPTION: This snippet configures a test suite for the BLF library if Google Test (GTEST) is enabled (WITH_GTESTS). It defines source files, include directories, and linked libraries for the test suite, and then uses the 'blender_add_test_suite_lib' function to create the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/BLF_tests.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf::blenfont\n  )\n  blender_add_test_suite_lib(blenfont \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: This snippet lists the source files (.cc and .hh files) that are part of the clip editor space library. These files contain the implementation of the clip editor's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_clip/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  clip_buttons.cc\n  clip_dopesheet_draw.cc\n  clip_dopesheet_ops.cc\n  clip_draw.cc\n  clip_editor.cc\n  clip_graph_draw.cc\n  clip_graph_ops.cc\n  clip_ops.cc\n  clip_utils.cc\n  space_clip.cc\n  tracking_ops.cc\n  tracking_ops_detect.cc\n  tracking_ops_orient.cc\n  tracking_ops_plane.cc\n  tracking_ops_solve.cc\n  tracking_ops_stabilize.cc\n  tracking_ops_track.cc\n  tracking_ops_utils.cc\n  tracking_select.cc\n\n  clip_intern.hh\n  tracking_ops_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OneAPI Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the OneAPI kernel. These headers include compatibility definitions, context management, global definitions, kernel declarations, and kernel templates. It also reuses the CPU BVH header.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_ONEAPI_HEADERS\n  device/oneapi/compat.h\n  device/oneapi/context_begin.h\n  device/oneapi/context_end.h\n  device/oneapi/context_intersect_begin.h\n  device/oneapi/context_intersect_end.h\n  device/oneapi/globals.h\n  device/oneapi/kernel.h\n  device/oneapi/kernel_templates.h\n  device/cpu/bvh.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding USD Dependency\nDESCRIPTION: This snippet conditionally adds USD as a dependency if WITH_USD is enabled.  It defines preprocessor definitions to suppress deprecation warnings from TBB, appends USD include directories and libraries, including cycles_hydra, to INC_SYS and LIB, respectively.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD)\n  # Silence warning from USD headers using deprecated TBB header.\n  add_definitions(\n    -D__TBB_show_deprecation_message_atomic_H\n    -D__TBB_show_deprecation_message_task_H\n  )\n\n  list(APPEND INC_SYS\n    ${USD_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    cycles_hydra\n    ${USD_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting MAX_MSVC for CUDA Binaries\nDESCRIPTION: This snippet sets the maximum supported MSVC version (MAX_MSVC) based on the CUDA version when WITH_CYCLES_CUDA_BINARIES is enabled. This is used to handle compatibility between CUDA and MSVC compilers.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_CUDA_BINARIES)\n  if(MSVC)\n    set(MAX_MSVC 1800)\n    if(${CUDA_VERSION} EQUAL \"8.0\")\n      set(MAX_MSVC 1900)\n    elseif(${CUDA_VERSION} EQUAL \"9.0\")\n      set(MAX_MSVC 1910)\n    elseif(${CUDA_VERSION} EQUAL \"9.1\")\n      set(MAX_MSVC 1911)\n    elseif(${CUDA_VERSION} VERSION_GREATER_EQUAL 10.0)\n      set(MAX_MSVC 1999)\n    endif()\n    unset(MAX_MSVC)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Source Files with a Custom Command (CMake)\nDESCRIPTION: This CMake code defines a custom command to generate source files using the `makesrna` target. It executes `makesrna` with specific arguments to create the generated source file `${GENSRC}`. The command depends on the `makesrna` target and uses the `CMAKE_COMMAND` and `PLATFORM_ENV_BUILD` variables.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${GENSRC}\n  COMMAND\n    ${CMAKE_COMMAND} -E env ${PLATFORM_ENV_BUILD}\n    \"$<TARGET_FILE:makesrna>\" ${CMAKE_CURRENT_BINARY_DIR}/ ${CMAKE_CURRENT_BINARY_DIR}/../\n  DEPENDS makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Image Format Definitions\nDESCRIPTION: These snippets enable preprocessor definitions for various image formats (OpenEXR, OpenJPEG, Cineon, and WebP) based on the corresponding `WITH_IMAGE_*` flags. These definitions inform the code to include support for these formats during image loading and saving.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n\nif(WITH_IMAGE_OPENJPEG)\n  add_definitions(-DWITH_IMAGE_OPENJPEG)\nendif()\n\nif(WITH_IMAGE_CINEON)\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n\nif(WITH_IMAGE_WEBP)\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Sample Copyright Disclaimer for Employers\nDESCRIPTION: This snippet presents a sample copyright disclaimer for employers or schools to sign, relinquishing copyright interest in a program developed by an employee or student. It specifies the name of the organization, the name of the program, and the author, and includes a signature line for an authorized representative.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/GPL-license.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Joining Compiler Flags with CMake\nDESCRIPTION: This snippet joins compiler flags for different build configurations (Release, RelWithDebInfo, Debug) into strings, then replaces spaces with semicolons to create lists suitable for CMake's command-line argument handling. This is used to pass different sets of flags to the SYCL compiler based on the build configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\nlist(JOIN sycl_compiler_flags_Release \" \" sycl_compiler_flags_Release_str)\nstring(REPLACE \" \" \";\" sycl_compiler_flags_Release_str ${sycl_compiler_flags_Release_str})\nlist(JOIN sycl_compiler_flags_RelWithDebInfo \" \" sycl_compiler_flags_RelWithDebInfo_str)\nstring(REPLACE \" \" \";\" sycl_compiler_flags_RelWithDebInfo_str ${sycl_compiler_flags_RelWithDebInfo_str})\nlist(JOIN sycl_compiler_flags_Debug \" \" sycl_compiler_flags_Debug_str)\nstring(REPLACE \" \" \";\" sycl_compiler_flags_Debug_str ${sycl_compiler_flags_Debug_str})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with OpenColorIO\nDESCRIPTION: This snippet configures compilation settings when `WITH_OPENCOLORIO` is enabled. It defines preprocessor macros, adds include directories for OpenColorIO and Epoxy, appends source files (`ocio_impl.cc`, `ocio_impl_glsl.cc`), and appends OCIO libraries to the `LIB` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opencolorio/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(\n    -DWITH_OCIO\n  )\n\n  add_definitions(${OPENCOLORIO_DEFINITIONS})\n\n  list(APPEND INC_SYS\n    ${OPENCOLORIO_INCLUDE_DIRS}\n    ${Epoxy_INCLUDE_DIRS}\n  )\n\n  list(APPEND SRC\n    ocio_impl.cc\n    ocio_impl_glsl.cc\n  )\n\n  list(APPEND LIB\n    ${OPENCOLORIO_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Film Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to film and output processing in the Cycles kernel. These headers handle adaptive sampling, AOV passes, data passes, denoising passes, cryptomatte passes, light passes, reading and writing film data.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_FILM_HEADERS\n  film/adaptive_sampling.h\n  film/aov_passes.h\n  film/data_passes.h\n  film/denoising_passes.h\n  film/cryptomatte_passes.h\n  film/light_passes.h\n  film/read.h\n  film/write.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Embree Backend Dependencies\nDESCRIPTION: This snippet conditionally appends the Embree and SYCL libraries to the list of library dependencies if the WITH_CYCLES_EMBREE option is enabled and SYCL support is available.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_EMBREE)\n  list(APPEND LIB\n    ${EMBREE_LIBRARIES}\n  )\n  if(EMBREE_SYCL_SUPPORT)\n    list(APPEND LIB\n      ${SYCL_LIBRARIES}\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining PugiXML support\nDESCRIPTION: This snippet configures PugiXML support by adding the WITH_PUGIXML definition. It optionally adds WITH_SYSTEM_PUGIXML depending on whether OpenImageIO's PugiXML is found and the target platform is Windows (WIN32).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PUGIXML OR OPENIMAGEIO_PUGIXML_FOUND)\n  add_definitions(-DWITH_PUGIXML)\n  if((NOT OPENIMAGEIO_PUGIXML_FOUND) OR WIN32)\n    add_definitions(-DWITH_SYSTEM_PUGIXML)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions for gflags\nDESCRIPTION: This snippet adds preprocessor definitions (specified by `GFLAGS_DEFINES`) to the compiler. These definitions can be used to control compilation behavior or provide configuration options for the gflags library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(${GFLAGS_DEFINES})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Fluid - CMake\nDESCRIPTION: Conditionally adds a preprocessor definition if the 'WITH_MOD_FLUID' flag is set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: FreeType Project Credit/Disclaimer Example\nDESCRIPTION: This snippet provides an example of the preferred credit/disclaimer to be used in compliance with the FreeType Project license. It includes a placeholder for the year of the FreeType version used.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/FTL.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"\"\"\n    Portions of this software are copyright © <year> The FreeType\n    Project (www.freetype.org).  All rights reserved.\n   \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Bullet\nDESCRIPTION: This code snippet conditionally compiles code for Bullet integration if the WITH_BULLET flag is enabled. It adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Physics Ocean Simulation Test (CMake)\nDESCRIPTION: This CMake snippet conditionally adds a test for ocean simulation physics, based on the `WITH_MOD_OCEANSIM` variable. If enabled, it loads the `ocean_test.blend` file and executes the `physics_ocean.py` Python script, executing all tests using the `--run-all-tests` argument.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  if(WITH_MOD_OCEANSIM)\n    add_blender_test(\n      physics_ocean\n      ${TEST_SRC_DIR}/physics/ocean_test.blend\n      --python ${TEST_PYTHON_DIR}/physics_ocean.py\n      --\n      --run-all-tests\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding UTF Conversion Library - CMake\nDESCRIPTION: This snippet uses a custom function `blender_add_lib` to create the `bf_intern_utfconv` library, specifying the source files, include directories, and library dependencies. It then adds an alias `bf::intern::utfconv` for easier referencing.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/utfconv/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_utfconv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::intern::utfconv ALIAS bf_intern_utfconv)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (CMake)\nDESCRIPTION: This snippet defines the library dependencies for blentranslation.  It specifies the libraries that blentranslation relies on, such as blenkernel, blenlib, dna, imbuf, clog, and guardedalloc. The 'PRIVATE' keyword indicates that these dependencies are only needed during the compilation and linking of blentranslation and are not exposed to other libraries that depend on it.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Removing -Wall flag in CMake\nDESCRIPTION: This snippet removes the \"-Wall\" compiler flag for GCC and Clang compilers. This is done to avoid noisy warnings during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  remove_cc_flag(\n    \"-Wall\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Storm Render Tests\nDESCRIPTION: This code configures render tests for the Hydra Storm renderer, exporting the results using both the HYDRA and USD methods. It iterates through the gpu_render_tests list and defines the test using storm_render_tests.py.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\n if(WITH_GPU_RENDER_TESTS)\n    if(WITH_HYDRA)\n      # Hydra Storm\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          storm_hydra_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/storm_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/storm_hydra\"\n          --export_method \"HYDRA\"\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          storm_usd_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/storm_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/storm_usd\"\n          --export_method \"USD\"\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\n    unset(_gpu_render_tests_arguments)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Suppressing TBB Deprecated Messages\nDESCRIPTION: This snippet adds a compiler definition to suppress deprecated messages from the Threading Building Blocks (TBB) library.  It defines 'TBB_SUPPRESS_DEPRECATED_MESSAGES=1'.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DTBB_SUPPRESS_DEPRECATED_MESSAGES=1)\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions (Experimental Features)\nDESCRIPTION: This snippet conditionally defines preprocessor macros for experimental features like simulation datablocks and point cloud support, if experimental features are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\n  add_definitions(-DWITH_POINTCLOUD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Include Directories - CMake\nDESCRIPTION: Defines the include directories for GLSL shader files. These directories are used to resolve include statements within the shaders. The directories specified include blenlib, intern, shaders, gpu, gpencil, and select related paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n\n  ../../gpencil\n  ../../gpencil/shaders/infos\n\n  ../../select\n  ../../select/shaders\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: These CMake snippets conditionally install bundled libraries and Vulkan related files into the Blenderplayer application bundle. It checks if `PLATFORM_BUNDLED_LIBRARIES` is defined and then installs the libraries. If Vulkan backend is enabled, vulkan libraries and MoltenVK libraries are installed. These steps ensure the libraries needed are available to the application.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n  if(PLATFORM_BUNDLED_LIBRARIES AND PLAYER_TARGETDIR_LIB)\n    install(\n      FILES ${PLATFORM_BUNDLED_LIBRARIES}\n      DESTINATION ${PLAYER_TARGETDIR_LIB}\n    )\n  endif()\n\n  if(WITH_VULKAN_BACKEND)\n    install(\n      FILES ${VULKAN_LIBRARY} ${MOLTENVK_LIBRARY}\n      DESTINATION ${PLAYER_TARGETDIR_LIB}\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library\nDESCRIPTION: This snippet adds the library `bf_editor_space_console` using the specified source files, include directories, and library dependencies.  `blender_add_lib` is a custom CMake function.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_console/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_console \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional compilation flags (Headless mode)\nDESCRIPTION: This snippet adds a preprocessor definition ('-DWITH_HEADLESS') if headless mode is enabled (WITH_HEADLESS). Otherwise, it links against SVG and datafiles libraries. This allows for code to be conditionally compiled based on whether Blender is running in headless mode or with a graphical interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nelse()\n  # SVG icons.\n  list(APPEND LIB\n    PRIVATE bf::extern::nanosvg\n    PRIVATE bf::editor::datafiles\n  )\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (WindowManager)\nDESCRIPTION: Defines the libraries that the window manager module depends on. These libraries are linked during the linking phase.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_screen\n  bf_editor_undo\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::sequencer\n  bf_intern_ghost\n  bf_compositor\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Specifies the library dependencies for the imbuf library.  It includes both private and public dependencies, such as 'bf::blenkernel', 'bf::blenlib', 'bf::dna', 'bf::gpu', and external libraries like JPEG and OpenImageIO.  The use of 'PRIVATE' indicates that these dependencies are only required for compiling the imbuf library itself and are not exposed to other libraries that link against it. 'PUBLIC' suggests the dependency must be available when another lib links against this.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  bf_imbuf_openimageio\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_memutil\n  bf_intern_opencolorio\n  PRIVATE bf::extern::nanosvg\n\n  ${JPEG_LIBRARIES}\n  PRIVATE bf::sequencer\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories for BMesh\nDESCRIPTION: This snippet sets the system include directories. Currently, it's empty but can be extended to include system-level dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Track To Actuator Warning\nDESCRIPTION: This code block shows a warning message that will be displayed in the console if the object to track to is invalid at the start of the game. It indicates a problem with the EditObjectActuator.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_TrackToActuator.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nGameObject 'Name' no object in EditObjectActuator 'ActuatorName'\n```\n\n----------------------------------------\n\nTITLE: Defining HIPRT SDK Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the HIPRT SDK. These headers include common definitions, device definitions, type definitions, vector definitions, and math functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_HIPRT_SDK_HEADERS\n  hiprt/hiprt_common.h\n  hiprt/hiprt_device.h\n  hiprt/hiprt_types.h\n  hiprt/hiprt_vec.h\n  hiprt/hiprt_math.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Configuration\nDESCRIPTION: This snippet conditionally configures the module for Audaspace support. It appends Audaspace-related include directories and libraries to the respective lists if WITH_AUDASPACE is enabled. It also adds a preprocessor definition. It also checks `WITH_SYSTEM_AUDASPACE` to append the libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the library target named `bf_intern_dualcon`. It passes the source files, include directories, system include directories, and library dependencies defined in the previous snippets. The PRIVATE keyword implies that the dependency is only for building this library, and not exposed to others.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/dualcon/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_dualcon \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet defines system include directories. These are typically external libraries or system-level headers required for the project to build. Variables such as ${EIGEN3_INCLUDE_DIRS}, ${PTHREADS_INCLUDE_DIRS}, and ${BOOST_INCLUDE_DIR} are used to specify the locations of these external dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../intern/moto/include\n  ../../../extern/recastnavigation/Detour/Include\n  ${EIGEN3_INCLUDE_DIRS}\n  ${PTHREADS_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Running QuadriFlow with SAT Flip Removal\nDESCRIPTION: This command runs QuadriFlow with SAT flip removal enabled. It converts an input triangle mesh (`input.obj`) to a quad mesh (`output.obj`) with a specified resolution (`-f`). The `-sat` option activates the SAT solver to remove flips in the integer offsets map, ensuring a watertight result.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -sat -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Experimental Features Toggle\nDESCRIPTION: This snippet manages the `WITH_EXPERIMENTAL_FEATURES` option based on the `BLENDER_VERSION_CYCLE`. If the Blender version cycle is 'alpha' and experimental features are initially enabled, the option remains on. Otherwise, it's turned off. This allows controlling features in alpha builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_EXPERIMENTAL_FEATURES \"Enable experimental features\" ON)\n\n# This should be turned off when Blender enter beta/rc/release\nif(\"${BLENDER_VERSION_CYCLE}\" STREQUAL \"alpha\" AND WITH_EXPERIMENTAL_FEATURES)\n  set(WITH_EXPERIMENTAL_FEATURES ON)\nelse()\n  set(WITH_EXPERIMENTAL_FEATURES OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies CMake\nDESCRIPTION: This snippet defines the library dependencies for the io_common library. It specifies the private libraries that are required for building io_common. These dependencies ensure that the necessary functions and data structures from other modules are available during compilation and linking.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/common/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Sky Model Library - CMake\nDESCRIPTION: This CMake snippet uses the `blender_add_lib` command to define the `bf_intern_sky` library. It takes the library name, source files (`SRC`), include directories (`INC`), system include directories (`INC_SYS`), and external libraries (`LIB`) as input.  It compiles the source files into a static or shared library based on the project configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/sky/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_sky \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional FFmpeg Configuration\nDESCRIPTION: This snippet conditionally configures the module for FFmpeg support. It appends FFmpeg-related source files, include directories, and libraries to the respective lists if WITH_CODEC_FFMPEG is enabled. It also adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  list(APPEND SRC\n    intern/ffmpeg_swscale.cc\n    intern/ffmpeg_swscale.hh\n  )\n  list(APPEND INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFMPEG_LIBRARIES}\n    ${OPENJPEG_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Efficient List Removal: Using pop(index) (Python)\nDESCRIPTION: Demonstrates an efficient way of removing an element from a list using pop(index), if the index is known.  Loops through the list, and removes items based on attribute. It's assumed the list is ordered to be removed from the back to the front, which is most efficient.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlist_index = len(my_list)\n\nwhile list_index:\n    list_index -= 1\n    if my_list[list_index].some_test_attribute == 1:\n        my_list.pop(list_index)\n```\n\n----------------------------------------\n\nTITLE: Building Library with Blender Add Lib - CMake\nDESCRIPTION: This snippet uses the custom `blender_add_lib` CMake function to create the `bf_editor_space_api` library. It specifies the library name, source files, include directories, and linked libraries as arguments. The function configures the build process based on these parameters, creating the library during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_api/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_api \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies in CMake\nDESCRIPTION: This snippet sets the library dependencies for the logic editor space module. It lists the Blender libraries that the module depends on, such as blenkernel, blenlib, dna, and gpu. These libraries provide essential functions and data structures used by the module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Mesh Creation Attempt - Python\nDESCRIPTION: This code snippet demonstrates an incorrect attempt to create a new mesh object directly by calling the class constructor.  It illustrates the `TypeError` that occurs when attempting to create Blender data outside of the main Blender database. This highlights that Blender data needs to be created via bpy.data collections.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.types.Mesh()\nTraceback (most recent call last):\n  File \"<blender_console>\", line 1, in <module>\nTypeError: bpy_struct.__new__(type): expected a single argument\n```\n\n----------------------------------------\n\nTITLE: Accessing Sensors Linked to a Controller in Python\nDESCRIPTION: This snippet shows how to access a sensor linked to a controller in Python within the Blender Game Engine. It retrieves a sensor by its name using `cont.sensors[\"sensorname\"]` and also shows how to get a sequence of all attached sensors using `co.sensors`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.logic.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   # To get a sensor linked to this controller.\n   # \"sensorname\" is the name of the sensor as defined in the Blender interface.\n   # +---------------------+  +--------+\n   # | Sensor \"sensorname\" +--+ Python +\n   # +---------------------+  +--------+\n   sens = cont.sensors[\"sensorname\"]\n\n   # To get a sequence of all sensors:\n   sensors = co.sensors\n```\n\n----------------------------------------\n\nTITLE: Target Compile Options for MSVC in CMake\nDESCRIPTION: This snippet adds target compile options specific to the Microsoft Visual C++ compiler (MSVC). It disables specific warning numbers to reduce noise during compilation. These options are only applied when using MSVC and not using the Clang compiler.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND NOT MSVC_CLANG)\n  target_compile_options(bf_editor_space_logic PRIVATE /wd26495 /wd26812) # disable annoying MSVC warnings\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Logic Bricks\nDESCRIPTION: This snippet defines the include directories required for compiling the game engine logic bricks. It includes paths to various subdirectories within the project, as well as external dependencies like Blender's blenkernel and gpu modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../Common\n  ../Converter\n  ../Device\n  ../Expressions\n  ../Ketsji\n  ../Ketsji/KXNetwork\n  ../Physics/Common\n  ../Rasterizer\n  ../SceneGraph\n  ../../blender/blenkernel\n  ../../blender/gpu\n  ../../blender/python/generic\n  ../../../intern/termcolor\n  ../../../intern/ghost\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Clipping Plane with glClipPlane (bgl)\nDESCRIPTION: Specifies a plane against which all geometry is clipped. The 'plane' parameter indicates which clipping plane is being configured, and 'equation' is a bgl.Buffer object containing the plane equation (4 double-precision floating-point values). This function is used to remove parts of the scene outside of the defined plane.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glClipPlane (plane, equation)\n```\n\n----------------------------------------\n\nTITLE: Guardedalloc tests configuration\nDESCRIPTION: This snippet configures the guardedalloc test suite if the WITH_GTESTS option is enabled. It defines the source files, include directories, and library dependencies for the test suite. Finally, it creates the guardedalloc test executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/guardedalloc_alignment_test.cc\n    tests/guardedalloc_overflow_test.cc\n    tests/guardedalloc_test_base.h\n  )\n  set(TEST_INC\n    ../../source/blender/blenlib\n  )\n  set(TEST_LIB\n    bf_intern_guardedalloc\n    bf_blenlib\n  )\n  blender_add_test_suite_executable(guardedalloc \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for DNA Generation\nDESCRIPTION: This snippet creates a custom command to run the `makesdna` executable and generate DNA-related source files. The command is executed during the build process and depends on the `makesdna` target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT\n    ${CMAKE_CURRENT_BINARY_DIR}/dna.cc\n    ${CMAKE_CURRENT_BINARY_DIR}/dna_type_offsets.h\n    ${CMAKE_CURRENT_BINARY_DIR}/dna_verify.cc\n  COMMAND\n    ${CMAKE_COMMAND} -E env ${PLATFORM_ENV_BUILD}\n    \"$<TARGET_FILE:makesdna>\"\n    ${CMAKE_CURRENT_BINARY_DIR}/dna.cc\n    ${CMAKE_CURRENT_BINARY_DIR}/dna_type_offsets.h\n    ${CMAKE_CURRENT_BINARY_DIR}/dna_verify.cc\n    ${CMAKE_SOURCE_DIR}/source/blender/makesdna/\n  DEPENDS makesdna\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Module in Blender\nDESCRIPTION: Loads and executes a Python script as a module, calling a specific function within it (e.g., `main()`).  The script is reloaded each time to ensure that modifications are reflected. This approach requires the `importlib` module to reload the module. The advantage is the ability to pass arguments to the function.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport myscript\nimport importlib\n\nimportlib.reload(myscript)\nmyscript.main()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories Conditionally (Blender/Player)\nDESCRIPTION: This snippet conditionally adds subdirectories based on the WITH_BLENDER or WITH_PLAYER options. It includes 'intern', 'extern', and 'source' directories if either of these options is enabled.  The 'source' directory is added last to gather library information from 'intern' and 'extern' first.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_140\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER OR WITH_PLAYER)\n  add_subdirectory(intern)\n  add_subdirectory(extern)\n\n  # source after intern and extern to gather all\n  # internal and external library information first, for test linking\n  add_subdirectory(source)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Sequencer Library CMake\nDESCRIPTION: This snippet creates the sequencer library using the `blender_add_lib` macro and defines an alias for the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_sequencer \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::sequencer ALIAS bf_sequencer)\n```\n\n----------------------------------------\n\nTITLE: Setting Global Property for Icon Geometry Names in CMake\nDESCRIPTION: This CMake code snippet sets a global property called ICON_GEOM_NAMES. The property contains a list of strings, each representing the name of an icon geometry. These names are used elsewhere in the build system to identify icon resources.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(GLOBAL PROPERTY ICON_GEOM_NAMES\n  # BEGIN ICON_GEOM_NAMES\n  brush.generic\n  brush.gpencil_draw.erase\n  brush.gpencil_draw.fill\n  brush.paint_texture.clone\n  brush.paint_texture.soften\n  brush.paint_texture.smear\n  brush.paint_texture.fill\n  brush.paint_texture.mask\n  brush.paint_vertex.average\n  brush.paint_vertex.blur\n  brush.paint_vertex.replace\n  brush.paint_vertex.smear\n  brush.paint_weight.average\n  brush.paint_weight.blur\n  brush.paint_weight.smear\n  brush.particle.add\n  brush.particle.comb\n  brush.particle.cut\n  brush.particle.length\n  brush.particle.puff\n  brush.particle.smooth\n  brush.particle.weight\n  brush.sculpt.displacement_eraser\n  brush.sculpt.displacement_smear\n  brush.sculpt.draw_face_sets\n  brush.sculpt.mask\n  brush.sculpt.paint\n  brush.sculpt.simplify\n  brush.uv_sculpt.grab\n  brush.uv_sculpt.pinch\n  brush.uv_sculpt.relax\n  none\n  ops.armature.bone.roll\n  ops.armature.extrude_cursor\n  ops.armature.extrude_move\n  ops.curve.draw\n  ops.curve.extrude_cursor\n  ops.curve.extrude_move\n  ops.curve.pen\n  ops.curve.radius\n  ops.curve.vertex_random\n  ops.curves.sculpt_add\n  ops.curves.sculpt_delete\n  ops.curves.sculpt_density\n  ops.generic.cursor\n  ops.generic.select\n  ops.generic.select_box\n  ops.generic.select_circle\n  ops.generic.select_lasso\n  ops.generic.select_paint\n  ops.gpencil.draw\n  ops.gpencil.draw.eraser\n  ops.gpencil.draw.line\n  ops.gpencil.draw.poly\n  ops.gpencil.edit_bend\n  ops.gpencil.edit_mirror\n  ops.gpencil.edit_shear\n  ops.gpencil.edit_to_sphere\n  ops.gpencil.extrude_move\n  ops.gpencil.primitive_arc\n  ops.gpencil.primitive_box\n  ops.gpencil.primitive_circle\n  ops.gpencil.primitive_curve\n  ops.gpencil.primitive_line\n  ops.gpencil.primitive_polyline\n  ops.gpencil.radius\n  ops.gpencil.sculpt_average\n  ops.gpencil.sculpt_blur\n  ops.gpencil.sculpt_clone\n  ops.gpencil.sculpt_smear\n  ops.gpencil.stroke_trim\n  ops.gpencil.transform_fill\n  ops.mesh.bevel\n  ops.mesh.bisect\n  ops.mesh.dupli_extrude_cursor\n  ops.mesh.extrude_faces_move\n  ops.mesh.extrude_manifold\n  ops.mesh.extrude_region_move\n  ops.mesh.extrude_region_shrink_fatten\n  ops.mesh.inset\n  ops.mesh.knife_tool\n  ops.mesh.loopcut_slide\n  ops.mesh.offset_edge_loops_slide\n  ops.mesh.polybuild_hover\n  ops.mesh.primitive_cone_add_gizmo\n  ops.mesh.primitive_cube_add_gizmo\n  ops.mesh.primitive_cylinder_add_gizmo\n  ops.mesh.primitive_grid_add_gizmo\n  ops.mesh.primitive_sphere_add_gizmo\n  ops.mesh.primitive_torus_add_gizmo\n  ops.mesh.rip\n  ops.mesh.rip_edge\n  ops.mesh.spin\n  ops.mesh.vertices_smooth\n  ops.node.links_cut\n  ops.paint.eyedropper_add\n  ops.paint.vertex_color_fill\n  ops.paint.weight_fill\n  ops.paint.weight_gradient\n  ops.paint.weight_sample\n  ops.paint.weight_sample_group\n  ops.pose.breakdowner\n  ops.pose.push\n  ops.pose.relax\n  ops.sculpt.border_face_set\n  ops.sculpt.border_hide\n  ops.sculpt.border_mask\n  ops.sculpt.box_trim\n  ops.sculpt.cloth_filter\n  ops.sculpt.color_filter\n  ops.sculpt.face_set_edit\n  ops.sculpt.lasso_face_set\n  ops.sculpt.lasso_hide\n  ops.sculpt.lasso_mask\n  ops.sculpt.lasso_trim\n  ops.sculpt.line_face_set\n  ops.sculpt.line_hide\n  ops.sculpt.line_mask\n  ops.sculpt.line_project\n  ops.sculpt.line_trim\n  ops.sculpt.mask_by_color\n  ops.sculpt.mesh_filter\n  ops.sculpt.polyline_face_set\n  ops.sculpt.polyline_hide\n  ops.sculpt.polyline_mask\n  ops.sculpt.polyline_trim\n  ops.sequencer.blade\n  ops.sequencer.retime\n  ops.transform.bone_envelope\n  ops.transform.bone_size\n  ops.transform.edge_slide\n  ops.transform.push_pull\n  ops.transform.resize.cage\n  ops.transform.resize\n  ops.transform.rotate\n  ops.transform.shear\n  ops.transform.shrink_fatten\n  ops.transform.tilt\n  ops.transform.tosphere\n  ops.transform.transform\n  ops.transform.translate\n  ops.transform.vert_slide\n  ops.transform.vertex_random\n  ops.view3d.ruler\n  # END ICON_GEOM_NAMES\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Specifies the source files (.cc and .h) that make up the Eigen library integration.  These files provide C++ implementations and header definitions for various linear algebra operations such as eigenvalues, linear solvers, matrices, and singular value decomposition (SVD).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/eigen/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  eigen_capi.h\n\n  intern/eigenvalues.cc\n  intern/linear_solver.cc\n  intern/matrix.cc\n  intern/svd.cc\n\n  intern/eigenvalues.h\n  intern/linear_solver.h\n  intern/matrix.h\n  intern/svd.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Cycles Path Guiding\nDESCRIPTION: This snippet configures path guiding for Cycles. It defines WITH_PATH_GUIDING and sets the PATH_GUIDING_LEVEL. It also includes the OpenPGL include directory, necessary for the path guiding functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_PATH_GUIDING)\n  add_definitions(-DWITH_PATH_GUIDING)\n\n  # The level of the guiding integration.\n  # Different levels can be selected to measure the overhead of different stages.\n  # 1 = recording the path segments\n  # 2 = 1 + generating (not storing) sample data from the segments\n  # 3 = 2 + storing the generates sample data\n  # 4 = 3 + training the guiding fields\n  # 5 = 4 + querying the trained guiding for sampling (full path guiding)\n  add_definitions(-DPATH_GUIDING_LEVEL=5)\n\n  include_directories(\n    SYSTEM\n    ${OPENPGL_INCLUDE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Test Include Directories\nDESCRIPTION: This snippet defines the include directories required for building the unit tests. It includes the standard include directories, `blenloader`, and the Google Test framework's include directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_INC\n    ${INC}\n\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding NDOF Source Files (CMake)\nDESCRIPTION: Conditionally adds source files related to NDOF (N-Degrees of Freedom) input based on the `WITH_INPUT_NDOF` flag. The files `intern/GHOST_NDOFManagerUnix.cc` and `intern/GHOST_NDOFManagerUnix.hh` are added to the source list (`SRC`) if NDOF input is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_INPUT_NDOF)\n    list(APPEND SRC\n      intern/GHOST_NDOFManagerUnix.cc\n\n      intern/GHOST_NDOFManagerUnix.hh\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Defines the list of C++ source files that constitute the Alembic I/O library. This includes both reader and exporter components for handling Alembic data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/alembic/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/abc_axis_conversion.cc\n  intern/abc_customdata.cc\n  intern/abc_reader_archive.cc\n  intern/abc_reader_camera.cc\n  intern/abc_reader_curves.cc\n  intern/abc_reader_mesh.cc\n  intern/abc_reader_nurbs.cc\n  intern/abc_reader_object.cc\n  intern/abc_reader_points.cc\n  intern/abc_reader_transform.cc\n  intern/abc_util.cc\n  intern/alembic_capi.cc\n\n  exporter/abc_archive.cc\n  exporter/abc_custom_props.cc\n  exporter/abc_export_capi.cc\n  exporter/abc_hierarchy_iterator.cc\n  exporter/abc_writer_abstract.cc\n  exporter/abc_writer_camera.cc\n  exporter/abc_writer_curves.cc\n  exporter/abc_writer_hair.cc\n  exporter/abc_writer_instance.cc\n  exporter/abc_writer_mball.cc\n  exporter/abc_writer_mesh.cc\n  exporter/abc_writer_nurbs.cc\n  exporter/abc_writer_points.cc\n  exporter/abc_writer_transform.cc\n\n  ABC_alembic.h\n  intern/abc_axis_conversion.h\n  intern/abc_customdata.h\n  intern/abc_reader_archive.h\n  intern/abc_reader_camera.h\n  intern/abc_reader_curves.h\n  intern/abc_reader_mesh.h\n  intern/abc_reader_nurbs.h\n  intern/abc_reader_object.h\n  intern/abc_reader_points.h\n  intern/abc_reader_transform.h\n  intern/abc_util.h\n\n  exporter/abc_archive.h\n  exporter/abc_custom_props.h\n  exporter/abc_hierarchy_iterator.h\n  exporter/abc_writer_abstract.h\n  exporter/abc_writer_camera.h\n  exporter/abc_writer_curves.h\n  exporter/abc_writer_hair.h\n  exporter/abc_writer_instance.h\n  exporter/abc_writer_mball.h\n  exporter/abc_writer_mesh.h\n  exporter/abc_writer_nurbs.h\n  exporter/abc_writer_points.h\n  exporter/abc_writer_transform.h\n)\n```\n\n----------------------------------------\n\nTITLE: Add Test to Import bpy Module\nDESCRIPTION: Adds a specific test case named `import_bpy` to check if the `bpy` module can be imported successfully. It utilizes the `add_blender_as_python_module_test` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/blender_as_python_module/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_as_python_module_test(import_bpy ${CMAKE_CURRENT_LIST_DIR}/import_bpy.py ${CMAKE_INSTALL_PREFIX_WITH_CONFIG})\n```\n\n----------------------------------------\n\nTITLE: Defining and Linking the Library\nDESCRIPTION: This snippet calls `blender_add_lib` to define the sculpt and paint editor library (bf_editor_sculpt_paint), specifying its source files, include directories, system include directories, and library dependencies.  `add_dependencies` ensures that the bf_rna library (containing generated RNA prototypes) is built before this library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_sculpt_paint \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_sculpt_paint bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Blenloader Library - CMake\nDESCRIPTION: This snippet adds the `bf_blenloader` library using the `blender_add_lib` macro, which is likely defined elsewhere in the Blender CMake infrastructure. It also creates an alias `bf::blenloader` for the library.  The `add_dependencies` command ensures `bf_rna` is built before `bf_blenloader`\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenloader/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blenloader \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blenloader ALIAS bf_blenloader)\n\n# RNA_prototypes.hh\nadd_dependencies(bf_blenloader bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding FFTW3 Definitions and Libraries (CMake)\nDESCRIPTION: This snippet conditionally adds the FFTW3 include directories and libraries to the respective INC_SYS and LIB variables and defines the WITH_FFTW3 preprocessor definition if WITH_FFTW3 is enabled. This allows the code to utilize the FFTW3 library for fast Fourier transforms.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FFTW3)\n  list(APPEND INC_SYS\n    ${FFTW3_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${FFTW3_LIBRARIES}\n  )\n  add_definitions(-DWITH_FFTW3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This CMake command sets the source files for the rigid body physics library.  It lists the `.cpp` and `.h` files that make up the module, including `rb_bullet_api.cpp`, `rb_convex_hull_api.cpp`, `RBI_hull_api.h`, and `RBI_api.h`.  These files contain the implementation and interface definitions for the rigid body physics functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/rigidbody/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  rb_bullet_api.cpp\n  rb_convex_hull_api.cpp\n\n  RBI_hull_api.h\n  RBI_api.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation (CMake)\nDESCRIPTION: This snippet conditionally appends source files related to command-line arguments (BLI_args.cc and BLI_args.h) to the SRC variable if the WITH_PYTHON_MODULE option is not enabled. This indicates that those files are only needed when the library is not built as a Python module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_PYTHON_MODULE)\n  list(APPEND SRC\n    intern/BLI_args.cc\n\n    BLI_args.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender Build System CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` function to add the Vulkan Memory Allocator library to the build process. It specifies the library name (`extern_vulkan_memory_allocator`), source files (`${SRC}`), include directories (`${INC}`), system include directories (`${INC_SYS}`), and library dependencies (`${LIB}`).  This assumes a custom Blender CMake function.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n\nblender_add_lib(extern_vulkan_memory_allocator \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Use Clang Tidy for code analysis\nDESCRIPTION: This option enables Clang Tidy for static code analysis. It's typically used for development on Linux using Clang, or Windows using the Visual Studio IDE.  It analyzes the source code for potential issues and provides suggestions.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX OR (CMAKE_GENERATOR MATCHES \"^Visual Studio.+\"))\n  option(WITH_CLANG_TIDY \"\\\nUse Clang Tidy to analyze the source code \\\n(only enable for development on Linux using Clang, or Windows using the Visual Studio IDE)\"\n    OFF\n  )\n  mark_as_advanced(WITH_CLANG_TIDY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: Specifies the C++ source files that comprise the Cycles rendering engine library.  These files are compiled and linked together to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  camera.cpp\n  device.cpp\n  display_driver.cpp\n  image.cpp\n  geometry.cpp\n  light.cpp\n  light_linking.cpp\n  mesh.cpp\n  object.cpp\n  object_cull.cpp\n  output_driver.cpp\n  particles.cpp\n  pointcloud.cpp\n  curves.cpp\n  logging.cpp\n  python.cpp\n  session.cpp\n  shader.cpp\n  sync.cpp\n  texture.cpp\n  viewport.cpp\n  volume.cpp\n\n  attribute_convert.h\n  CCL_api.h\n  device.h\n  display_driver.h\n  id_map.h\n  image.h\n  light_linking.h\n  object_cull.h\n  output_driver.h\n  sync.h\n  session.h\n  texture.h\n  util.h\n  viewport.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: OpenEXR Support\nDESCRIPTION: This snippet enables OpenEXR image format support if the `WITH_IMAGE_OPENEXR` option is enabled.  It adds a preprocessor definition `-DWITH_IMAGE_OPENEXR`, which allows conditional compilation within the C++ code based on OpenEXR support. This provides support for high dynamic range images.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files for the Quadriflow library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  patches/boykov_kolmogorov_max_flow.hpp\n  src/adjacent-matrix.cpp\n  src/adjacent-matrix.hpp\n  src/compare-key.hpp\n  src/config.hpp\n  src/dedge.cpp\n  src/dedge.hpp\n  src/disajoint-tree.hpp\n  src/dset.hpp\n  src/field-math.hpp\n  src/flow.hpp\n  src/hierarchy.cpp\n  src/hierarchy.hpp\n  src/loader.cpp\n  src/loader.hpp\n  src/localsat.cpp\n  src/localsat.hpp\n  src/merge-vertex.cpp\n  src/merge-vertex.hpp\n  src/optimizer.cpp\n  src/optimizer.hpp\n  src/parametrizer.cpp\n  src/parametrizer-flip.cpp\n  src/parametrizer-int.cpp\n  src/parametrizer-mesh.cpp\n  src/parametrizer-scale.cpp\n  src/parametrizer-sing.cpp\n  src/parametrizer.hpp\n  src/post-solver.hpp\n  src/serialize.hpp\n  src/subdivide.cpp\n  src/subdivide.hpp\n  ${LEMON_SOURCES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding gtest library\nDESCRIPTION: This code calls a custom CMake function `blender_add_lib` to create a library named `extern_gtest`. It passes the source files (`SRC`), include directories (`INC`), system include directories (`INC_SYS`), and linked libraries (`LIB`) as arguments. This function is responsible for configuring and building the gtest library within the Blender project.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gtest/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_gtest \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the project. These directories contain header files that are necessary for compiling the source code. It includes local directories such as `.`, `algorithms`, `cached_resources`, `derived_resources`, and `utilities`, as well as parent directories within the project structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  algorithms\n  cached_resources\n  derived_resources\n  utilities\n  ../gpu/intern\n  ../makesrna\n  ../render/intern\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries in CMake\nDESCRIPTION: This snippet specifies the libraries that the current library depends on.  It includes Blender's internal libraries such as blenkernel, blenlib, depsgraph, dna, guardedalloc, sequencer, and windowmanager.  These libraries provide core functionalities used by the sound editor.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: BMesh Bevel Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for the BMesh bevel operator. It loads the specified blend file and runs the `bevel_operator.py` Python script with the `--run-all-tests` argument.  This will ensure all defined tests in the Python script are executed.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bmesh_bevel\n    ${TEST_SRC_DIR}/modeling/bevel_regression.blend\n    --python ${TEST_PYTHON_DIR}/bevel_operator.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This snippet adds multiple subdirectories to the build process. Each subdirectory represents a different module or component of the Cycles rendering engine, such as `app`, `bvh`, `device`, etc. These subdirectories contain the source code for the corresponding modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(app)\nadd_subdirectory(bvh)\nadd_subdirectory(device)\nadd_subdirectory(doc)\nadd_subdirectory(graph)\nadd_subdirectory(integrator)\nadd_subdirectory(kernel)\nadd_subdirectory(scene)\nadd_subdirectory(session)\nadd_subdirectory(subd)\nadd_subdirectory(util)\n```\n\n----------------------------------------\n\nTITLE: Conditional Bullet Configuration - CMake\nDESCRIPTION: This snippet conditionally configures the build process if Bullet physics is enabled (`WITH_BULLET` is true). It appends the Bullet include directories to the `INC_SYS` list and adds the `-DWITH_BULLET` compiler definition.  This ensures that the code is compiled with Bullet support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Overriding the __init__ Method for RenderEngine - Python\nDESCRIPTION: This code demonstrates how to override the __init__ method when subclassing bpy.types.RenderEngine. It emphasizes the importance of calling the parent class's __init__ method using super().__init__(*args, **kwargs) to ensure proper initialization of the RenderEngine instance. Omitting this can cause errors.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport bpy\nclass AwesomeRaytracer(bpy.types.RenderEngine):\n   def __init__(self, *args, **kwargs):\n      super().__init__(*args, **kwargs)\n      self.my_var = 42\n      ...\n```\n\n----------------------------------------\n\nTITLE: Appending Source File Conditionally\nDESCRIPTION: This CMake code snippet conditionally appends the `intern/stub.cc` file to the `SRC` list. The condition is based on an `else()` block, implying there's a related `if()` block checking some feature flag or environment variable. If the condition is met, the stub file is added to the source list.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND SRC\n    intern/stub.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the PLY I/O library. It includes both local directories within the project and system include paths for external libraries like `fast_float`. These paths are essential for the compiler to find the necessary header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/ply/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  exporter\n  importer\n  intern\n  ../common\n  ../../makesrna\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Create Executable\nDESCRIPTION: This snippet creates the `makesrna` executable by specifying the source files, include directories, and linking libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cc_flags_custom_test(makesrna)\n\nadd_executable(makesrna ${SRC} ${SRC_RNA_INC} ${SRC_DNA_INC})\nsetup_platform_linker_flags(makesrna)\nsetup_platform_linker_libs(makesrna)\nblender_target_include_dirs(makesrna ${INC})\nblender_target_include_dirs_sys(makesrna ${INC_SYS})\n\ntarget_link_libraries(makesrna PRIVATE bf_dna)\ntarget_link_libraries(makesrna PRIVATE bf::intern::atomic)\ntarget_link_libraries(makesrna PRIVATE bf::intern::guardedalloc)\ntarget_link_libraries(makesrna PRIVATE bf_dna_blenlib)\ntarget_link_libraries(makesrna PRIVATE bf::dependencies::optional::tbb)\n\nif(WIN32 AND NOT UNIX)\n  if(DEFINED PTHREADS_LIBRARIES)\n    target_link_libraries(makesrna PRIVATE ${PTHREADS_LIBRARIES})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Object Error Warning\nDESCRIPTION: This code block shows the error message that appears when an Add Object actuator attempts to add an object that does not exist or is located in an active layer at the start of the game. This is a warning to ensure the proper setup of the actuator and its target object.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_AddObjectActuator.rst#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nError: GameObject 'Name' has a AddObjectActuator 'ActuatorName' without object (in 'nonactive' layer)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (System and Local) CMake\nDESCRIPTION: This snippet defines the include directories for the project. It sets both local include directories (INC) and system include directories (INC_SYS). System include directories include paths for USD, Epoxy, and Python. These are essential for resolving header dependencies during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\nset(INC_SYS\n  ${USD_INCLUDE_DIRS}\n  ${Epoxy_INCLUDE_DIRS}\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing and Activating Actuators Linked to a Controller in Python\nDESCRIPTION: This snippet demonstrates how to access an actuator linked to a controller in Python within the Blender Game Engine and activate it. It fetches the actuator by name using `co.actuators[\"actuatorname\"]` and then activates it using `controller.activate(actuator)`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.logic.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n   # To get an actuator attached to the controller:\n   #                          +--------+  +-------------------------+\n   #                          + Python +--+ Actuator \"actuatorname\" |\n   #                          +--------+  +-------------------------+\n   actuator = co.actuators[\"actuatorname\"]\n   \n   # Activate an actuator\n   controller.activate(actuator)\n```\n\n----------------------------------------\n\nTITLE: Audaspace Integration in CMake\nDESCRIPTION: This snippet conditionally adds Audaspace support to the library based on the WITH_AUDASPACE flag. It appends Audaspace libraries and include directories to the relevant lists.  It also handles both system and internal Audaspace libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND LIB\n    bf_intern_audaspace\n  )\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Pixel Arithmetic with glBlendFunc (bgl)\nDESCRIPTION: Defines how source and destination colors are combined during blending.  'sfactor' determines how source color components are computed, while 'dfactor' specifies the computation for destination color components. This function controls the blending operation for transparency and other effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glBlendFunc(sfactor, dfactor)\n```\n\n----------------------------------------\n\nTITLE: WASAPI Integration with CMake\nDESCRIPTION: This CMake block configures WASAPI integration. It defines source and header files for the WASAPI plugin and appends required libraries, source files, and header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_WASAPI)\n\tset(WASAPI_SRC\n\t\tplugins/wasapi/WASAPIDevice.cpp\n\t)\n\tset(WASAPI_HDR\n\t\tplugins/wasapi/WASAPIDevice.h\n\t)\n\n\tif(NOT PLUGIN_WASAPI)\n\t\tlist(APPEND LIBRARIES ksuser)\n\t\tlist(APPEND SRC ${WASAPI_SRC})\n\t\tlist(APPEND HDR ${WASAPI_HDR})\n\t\tlist(APPEND STATIC_PLUGINS WASAPIDevice)\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: Specifies the library dependencies for the project. These libraries are linked with the executable during the linking stage of the build process. The `PRIVATE` keyword indicates that these libraries are only used internally within this module and are not exposed to other modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Compute Shader Files\nDESCRIPTION: This snippet defines a CMake variable `SRC_GLSL_COMP` to list compute shader files. Compute shaders are used for general-purpose computation on the GPU. The listed shaders are currently commented out, possibly indicating they are not ready for compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/shaders/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_COMP\n  # TODO rename them properly to enable compilation.\n  # gpu_shader_index_2d_array_lines.glsl\n  # gpu_shader_index_2d_array_points.glsl\n  # gpu_shader_index_2d_array_tris.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directory for the CSV import library, specifically targeting the `fast_float` external library. This indicates that the library relies on the `fast_float` library for floating-point number parsing.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/csv/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling GLSL Shaders as C++ Sources\nDESCRIPTION: Conditionally compiles GLSL shaders as C++ source files if `WITH_GPU_SHADER_CPP_COMPILATION` is enabled. This allows the shaders to be preprocessed using the C++ compiler. Macros GPU_VERTEX_SHADER and GPU_FRAGMENT_SHADER defines the type of shader.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n\n  compile_sources_as_cpp(gpencil_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(gpencil_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  # compile_sources_as_cpp(gpencil_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(gpencil_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: GLSL Shader Compilation\nDESCRIPTION: This snippet compiles GLSL shader files into C source code. It iterates through the `GLSL_SRC` list, converts each shader to C using the `glsl_to_c` function, and then creates a library `bf_osd_shaders` from the generated C files. The snippet also generates a header file containing the shader source code as strings.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n  set(GLSL_SRC\n    internal/evaluator/shaders/osd_eval_stencils_comp.glsl\n    internal/evaluator/shaders/osd_eval_patches_comp.glsl\n  )\n\n  set(GLSL_C)\n  foreach(GLSL_FILE ${GLSL_SRC})\n    glsl_to_c(${GLSL_FILE} GLSL_C)\n  endforeach()\n\n  blender_add_lib(bf_osd_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n\n  list(APPEND LIB\n    bf_osd_shaders\n  )\n\n  set(GLSL_SOURCE_CONTENT \"\")\n  foreach(GLSL_FILE ${GLSL_SRC})\n    get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n    string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n    string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\n  endforeach()\n\n  set(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_osd_source_list.h\")\n  file(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\n  list(APPEND SRC ${glsl_source_list_file})\n  list(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n\n  target_include_directories(bf_osd_shaders PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: OpenSubdiv\nDESCRIPTION: This snippet conditionally adds the `WITH_OPENSUBDIV` macro and includes the OpenSubdiv include directories if the `WITH_OPENSUBDIV` option is enabled. It depends on the `OPENSUBDIV_INCLUDE_DIRS` variable being set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\n  list(APPEND INC_SYS\n    ${OPENSUBDIV_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories Conditionally - CMake\nDESCRIPTION: This snippet sets include directories for AudaSpace based on whether WITH_SYSTEM_AUDASPACE is enabled. If WITH_SYSTEM_AUDASPACE is not enabled, it sets the AUDASPACE_C_INCLUDE_DIRS and AUDASPACE_PY_INCLUDE_DIRS variables to point to the local AudaSpace directories. This customizes the build process to use either the system-wide AudaSpace or a local version.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_88\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_AUDASPACE)\n  if(NOT WITH_SYSTEM_AUDASPACE)\n    set(AUDASPACE_C_INCLUDE_DIRS\n      \"${CMAKE_SOURCE_DIR}/extern/audaspace/bindings/C\"\n      \"${CMAKE_BINARY_DIR}/extern/audaspace\"\n    )\n    set(AUDASPACE_PY_INCLUDE_DIRS\n      \"${CMAKE_SOURCE_DIR}/extern/audaspace/bindings\"\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library - CMake\nDESCRIPTION: This snippet adds the Blender I/O library to the build system, using the specified source files, include directories, and library dependencies. The resulting library is named bf_editor_io.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_io \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Bullet Dependency\nDESCRIPTION: This code snippet conditionally includes Bullet's include directories and libraries, adds a compiler definition WITH_BULLET if WITH_BULLET is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n    ../../../intern/rigidbody\n  )\n  list(APPEND LIB\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Check Target in CMake\nDESCRIPTION: This snippet adds a custom target named `check` that executes the CTest command.  If the build type is 'Maintainer', it makes 'check' an 'ALL' target which means it is executed as part of the default build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nENABLE_TESTING()\n\nIF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n  ADD_CUSTOM_TARGET(check ALL COMMAND ${CMAKE_CTEST_COMMAND})\nELSE()\n  ADD_CUSTOM_TARGET(check COMMAND ${CMAKE_CTEST_COMMAND})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions based on build flags\nDESCRIPTION: This snippet conditionally adds compiler definitions based on whether certain features are enabled during the build process, such as internationalization, headless mode, Python scripting, and input method editors (IME).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  add_definitions(-DWITH_INTERNATIONAL)\nendif()\n\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nendif()\n\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n\nif(WITH_INPUT_IME)\n  add_definitions(-DWITH_INPUT_IME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for AVX2\nDESCRIPTION: This conditional statement checks if the compiler has AVX2 support. If AVX2 support is available, it sets compilation flags specific to AVX2 for the `transform_avx2.cpp` file.  `${CYCLES_AVX2_FLAGS}` is assumed to contain the necessary flags for AVX2 optimization.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(CXX_HAS_AVX2)\n  set_source_files_properties(transform_avx2.cpp PROPERTIES COMPILE_FLAGS \"${CYCLES_AVX2_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing UV Coordinates in BMesh (Python)\nDESCRIPTION: This code snippet demonstrates how to access UV coordinates for each loop in a BMesh face using the active UV layer. It iterates through each face and its loops, retrieves the UV data, and prints the UV coordinates and corresponding vertex coordinates.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/include__bmesh.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nuv_lay = bm.loops.layers.uv.active\n\nfor face in bm.faces:\n    for loop in face.loops:\n        uv = loop[uv_lay].uv\n        print(\"Loop UV: %f, %f\" % uv[:])\n        vert = loop.vert\n        print(\"Loop Vert: (%f,%f,%f)\" % vert.co[:])\n```\n\n----------------------------------------\n\nTITLE: Compile-Time Parsing in C++20\nDESCRIPTION: Illustrates the use of `fast_float::from_chars` for compile-time parsing of strings in C++20 using `consteval`.  This example parses the string \"3.1415 input\" at compile time and returns the parsed double value. Requires a C++20 compiler.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n// consteval forces compile-time evaluation of the function in C++20.\nconsteval double parse(std::string_view input) {\n  double result;\n  auto answer = fast_float::from_chars(input.data(), input.data()+input.size(), result);\n  if(answer.ec != std::errc()) { return -1.0; }\n  return result;\n}\n\n// This function should compile to a function which\n// merely returns 3.1415.\nconstexpr double constexptest() {\n  return parse(\"3.1415 input\");\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Support in CMake\nDESCRIPTION: This snippet conditionally adds support for the Audaspace audio library. If WITH_AUDASPACE is enabled, it appends the Audaspace C include directories and libraries to their respective lists. It also adds the -DWITH_AUDASPACE preprocessor definition. It relies on AUDASPACE_C_INCLUDE_DIRS, AUDASPACE_C_LIBRARIES and AUDASPACE_PY_LIBRARIES to be already defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_audaspace\n\n    ${AUDASPACE_C_LIBRARIES}\n    ${AUDASPACE_PY_LIBRARIES}\n  )\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the library\nDESCRIPTION: This snippet uses the blender_add_lib function to create the extern_hipew library. It passes the source files, include directories, and system include directories as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/hipew/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_hipew \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Linking Blenderplayer Libraries\nDESCRIPTION: This CMake code snippet configures the linking of libraries for the `blenderplayer` target. It adds a dependency on the `makesdna` target, links the libraries specified in the `LIB` variable (privately), unsets the `LIB` variable, and sets up platform-specific linker flags and libraries using custom functions. The last part handles platform symbols map.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(blenderplayer makesdna)\ntarget_link_libraries(blenderplayer PRIVATE ${LIB})\nunset(LIB)\n\nsetup_platform_linker_flags(blenderplayer)\nsetup_platform_linker_libs(blenderplayer)\n\nif(DEFINED PLATFORM_SYMBOLS_MAP)\n  set_target_properties(blenderplayer PROPERTIES LINK_DEPENDS ${PLATFORM_SYMBOLS_MAP})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Target and PkgInfo\nDESCRIPTION: These CMake snippets install the `blenderplayer` target and the `PkgInfo` file into the application bundle. The `install(TARGETS)` command places the compiled executable into the appropriate location, while the `install(FILES)` command copies the `PkgInfo` file, which identifies the bundle type to the operating system, to its designated location inside the Blenderplayer.app structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n  install(\n    TARGETS blenderplayer\n    DESTINATION \".\"\n  )\n\n  install(\n    FILES ${OSX_APP_PLAYER_SOURCEDIR}/Contents/PkgInfo\n    DESTINATION Blenderplayer.app/Contents\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Subdirectory - CMake\nDESCRIPTION: This snippet adds the `blender` subdirectory to the build process.  This incorporates the core Blender code into the UPBGE project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(blender)\n```\n\n----------------------------------------\n\nTITLE: Conditional GCC C Compiler Flags (Non-Apple)\nDESCRIPTION: This snippet conditionally adds a C compiler flag `-Wno-error=unused-but-set-variable` when the target platform is not Apple (macOS). This is done to avoid issues related to unused but set variables on non-Apple systems. It relies on the `add_check_c_compiler_flags` CMake function to modify the compiler flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_111\n\nLANGUAGE: CMake\nCODE:\n```\n  if(NOT APPLE)\n    add_check_c_compiler_flags(\n      C_WARNINGS\n      C_WARN_NO_ERROR_UNUSED_BUT_SET_VARIABLE -Wno-error=unused-but-set-variable\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding CXX flag to suppress warnings\nDESCRIPTION: This code snippet adds a compiler flag to suppress warnings related to casting function types when using the GNU C++ compiler. This is done to reduce noise from external code.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  add_cxx_flag(\"-Wno-cast-function-type\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Windows Configuration\nDESCRIPTION: This snippet conditionally adds the -DNOMINMAX preprocessor definition on Windows platforms (WIN32). This is often necessary to prevent conflicts between the Windows API's min/max macros and the standard library's min/max functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-DNOMINMAX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet sets the library dependencies for the blenkernel project. It includes both PRIVATE and PUBLIC dependencies. These dependencies cover a wide range of functionalities like animation rigging, asset management, font handling, linear algebra, mesh manipulation, dependency graph management, DNA structures, drawing routines, curve fitting, GPU access, image handling, internal utilities, modifier application, node-based systems, rendering, RNA, sequencer operations, shader effects, simulation, and external libraries like fmtlib and xxhash.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::curve_fit_nd\n  PRIVATE bf::functions\n  PRIVATE bf::gpu\n  bf_ikplugin\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  bf_intern_ghost\n  PRIVATE bf::intern::guardedalloc\n  bf_intern_libmv  # Uses stub when disabled.\n  bf_intern_mikktspace\n  bf_intern_opensubdiv  # Uses stub when disabled.\n  bf_modifiers\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  bf_rna\n  PRIVATE bf::sequencer\n  bf_shader_fx\n  bf_simulation\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  PRIVATE bf::intern::atomic\n  # For `vfontdata_freetype.c`.\n  ${FREETYPE_LIBRARIES} ${BROTLI_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Libraries\nDESCRIPTION: This snippet defines the libraries to link against when building the GPU module, including Python libraries and Blender-specific libraries (blenkernel, blenlib, dna, gpu, imbuf, guardedalloc).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/gpu/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Source Files - Ceres Solver\nDESCRIPTION: Lists all the source files (both header and implementation) that make up the Ceres Solver library. These files cover various aspects of the solver, including cost functions, manifolds, solvers, and internal utilities.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  include/ceres/autodiff_cost_function.h\n  include/ceres/autodiff_first_order_function.h\n  include/ceres/autodiff_manifold.h\n  include/ceres/c_api.h\n  include/ceres/ceres.h\n  include/ceres/conditioned_cost_function.h\n  include/ceres/constants.h\n  include/ceres/context.h\n  include/ceres/cost_function.h\n  include/ceres/cost_function_to_functor.h\n  include/ceres/covariance.h\n  include/ceres/crs_matrix.h\n  include/ceres/cubic_interpolation.h\n  include/ceres/dynamic_autodiff_cost_function.h\n  include/ceres/dynamic_cost_function.h\n  include/ceres/dynamic_cost_function_to_functor.h\n  include/ceres/dynamic_numeric_diff_cost_function.h\n  include/ceres/evaluation_callback.h\n  include/ceres/first_order_function.h\n  include/ceres/gradient_checker.h\n  include/ceres/gradient_problem.h\n  include/ceres/gradient_problem_solver.h\n  include/ceres/iteration_callback.h\n  include/ceres/jet.h\n  include/ceres/jet_fwd.h\n  include/ceres/line_manifold.h\n  include/ceres/loss_function.h\n  include/ceres/manifold.h\n  include/ceres/manifold_test_utils.h\n  include/ceres/normal_prior.h\n  include/ceres/numeric_diff_cost_function.h\n  include/ceres/numeric_diff_first_order_function.h\n  include/ceres/numeric_diff_options.h\n  include/ceres/ordered_groups.h\n  include/ceres/problem.h\n  include/ceres/product_manifold.h\n  include/ceres/rotation.h\n  include/ceres/sized_cost_function.h\n  include/ceres/solver.h\n  include/ceres/sphere_manifold.h\n  include/ceres/tiny_solver.h\n  include/ceres/tiny_solver_autodiff_function.h\n  include/ceres/tiny_solver_cost_function_adapter.h\n  include/ceres/types.h\n  include/ceres/version.h\n\n  include/ceres/internal/array_selector.h\n  include/ceres/internal/autodiff.h\n  include/ceres/internal/disable_warnings.h\n  include/ceres/internal/eigen.h\n  include/ceres/internal/euler_angles.h\n  include/ceres/internal/fixed_array.h\n  include/ceres/internal/householder_vector.h\n  include/ceres/internal/integer_sequence_algorithm.h\n  include/ceres/internal/jet_traits.h\n  include/ceres/internal/line_parameterization.h\n  include/ceres/internal/memory.h\n  include/ceres/internal/numeric_diff.h\n  include/ceres/internal/parameter_dims.h\n  include/ceres/internal/port.h\n  include/ceres/internal/reenable_warnings.h\n  include/ceres/internal/sphere_manifold_functions.h\n  include/ceres/internal/variadic_evaluate.h\n\n  internal/ceres/accelerate_sparse.cc\n  internal/ceres/accelerate_sparse.h\n  internal/ceres/array_utils.cc\n  internal/ceres/array_utils.h\n  internal/ceres/block_evaluate_preparer.cc\n  internal/ceres/block_evaluate_preparer.h\n  internal/ceres/block_jacobi_preconditioner.cc\n  internal/ceres/block_jacobi_preconditioner.h\n  internal/ceres/block_jacobian_writer.cc\n  internal/ceres/block_jacobian_writer.h\n  internal/ceres/block_random_access_dense_matrix.cc\n  internal/ceres/block_random_access_dense_matrix.h\n  internal/ceres/block_random_access_diagonal_matrix.cc\n  internal/ceres/block_random_access_diagonal_matrix.h\n  internal/ceres/block_random_access_matrix.cc\n  internal/ceres/block_random_access_matrix.h\n  internal/ceres/block_random_access_sparse_matrix.cc\n  internal/ceres/block_random_access_sparse_matrix.h\n  internal/ceres/block_sparse_matrix.cc\n  internal/ceres/block_sparse_matrix.h\n  internal/ceres/block_structure.cc\n  internal/ceres/block_structure.h\n  internal/ceres/c_api.cc\n  internal/ceres/callbacks.cc\n  internal/ceres/callbacks.h\n  internal/ceres/canonical_views_clustering.cc\n  internal/ceres/canonical_views_clustering.h\n  internal/ceres/casts.h\n  internal/ceres/cgnr_solver.cc\n  internal/ceres/cgnr_solver.h\n  internal/ceres/compressed_col_sparse_matrix_utils.cc\n  internal/ceres/compressed_col_sparse_matrix_utils.h\n  internal/ceres/compressed_row_jacobian_writer.cc\n  internal/ceres/compressed_row_jacobian_writer.h\n  internal/ceres/compressed_row_sparse_matrix.cc\n  internal/ceres/compressed_row_sparse_matrix.h\n  internal/ceres/concurrent_queue.h\n  internal/ceres/conditioned_cost_function.cc\n  internal/ceres/conjugate_gradients_solver.h\n  internal/ceres/context.cc\n  internal/ceres/context_impl.cc\n  internal/ceres/context_impl.h\n  internal/ceres/coordinate_descent_minimizer.cc\n  internal/ceres/coordinate_descent_minimizer.h\n  internal/ceres/corrector.cc\n  internal/ceres/corrector.h\n  internal/ceres/cost_function.cc\n  internal/ceres/covariance.cc\n  internal/ceres/covariance_impl.cc\n  internal/ceres/covariance_impl.h\n  internal/ceres/cuda_block_sparse_crs_view.cc\n  internal/ceres/cuda_block_sparse_crs_view.h\n  internal/ceres/cuda_block_structure.cc\n  internal/ceres/cuda_block_structure.h\n  internal/ceres/cuda_buffer.h\n  # internal/ceres/cuda_kernels_bsm_to_crs.cu.cc\n  # internal/ceres/cuda_kernels_bsm_to_crs.h\n  internal/ceres/cuda_kernels_utils.h\n  # internal/ceres/cuda_kernels_vector_ops.cu.cc\n  internal/ceres/cuda_kernels_vector_ops.h\n  internal/ceres/cuda_partitioned_block_sparse_crs_view.cc\n  internal/ceres/cuda_partitioned_block_sparse_crs_view.h\n  internal/ceres/cuda_sparse_matrix.cc\n  internal/ceres/cuda_sparse_matrix.h\n  internal/ceres/cuda_streamed_buffer.h\n  internal/ceres/cuda_vector.cc\n  internal/ceres/cuda_vector.h\n  internal/ceres/dense_cholesky.cc\n  internal/ceres/dense_cholesky.h\n  internal/ceres/dense_jacobian_writer.h\n  internal/ceres/dense_normal_cholesky_solver.cc\n  internal/ceres/dense_normal_cholesky_solver.h\n  internal/ceres/dense_qr.cc\n  internal/ceres/dense_qr.h\n  internal/ceres/dense_qr_solver.cc\n  internal/ceres/dense_qr_solver.h\n  internal/ceres/dense_sparse_matrix.cc\n  internal/ceres/dense_sparse_matrix.h\n  internal/ceres/detect_structure.cc\n  internal/ceres/detect_structure.h\n  internal/ceres/dogleg_strategy.cc\n  internal/ceres/dogleg_strategy.h\n  internal/ceres/dynamic_compressed_row_finalizer.h\n  internal/ceres/dynamic_compressed_row_jacobian_writer.cc\n  internal/ceres/dynamic_compressed_row_jacobian_writer.h\n  internal/ceres/dynamic_compressed_row_sparse_matrix.cc\n  internal/ceres/dynamic_compressed_row_sparse_matrix.h\n  internal/ceres/dynamic_sparse_normal_cholesky_solver.cc\n  internal/ceres/dynamic_sparse_normal_cholesky_solver.h\n  internal/ceres/eigen_vector_ops.h\n  internal/ceres/eigensparse.cc\n  internal/ceres/eigensparse.h\n  internal/ceres/evaluation_callback.cc\n  internal/ceres/evaluator.cc\n  internal/ceres/evaluator.h\n  internal/ceres/execution_summary.h\n  internal/ceres/fake_bundle_adjustment_jacobian.cc\n  internal/ceres/fake_bundle_adjustment_jacobian.h\n  internal/ceres/file.cc\n  internal/ceres/file.h\n  internal/ceres/first_order_function.cc\n  internal/ceres/float_suitesparse.cc\n  internal/ceres/float_suitesparse.h\n  internal/ceres/function_sample.cc\n  internal/ceres/function_sample.h\n  internal/ceres/generate_bundle_adjustment_tests.py\n  internal/ceres/generate_template_specializations.py\n  internal/ceres/generated\n  internal/ceres/gradient_checker.cc\n  internal/ceres/gradient_checking_cost_function.cc\n  internal/ceres/gradient_checking_cost_function.h\n  internal/ceres/gradient_problem.cc\n  internal/ceres/gradient_problem_evaluator.h\n  internal/ceres/gradient_problem_solver.cc\n  internal/ceres/graph.h\n  internal/ceres/graph_algorithms.h\n  internal/ceres/implicit_schur_complement.cc\n  internal/ceres/implicit_schur_complement.h\n  internal/ceres/inner_product_computer.cc\n  internal/ceres/inner_product_computer.h\n  internal/ceres/invert_psd_matrix.h\n  internal/ceres/is_close.cc\n  internal/ceres/is_close.h\n  internal/ceres/iteration_callback.cc\n  internal/ceres/iterative_refiner.cc\n  internal/ceres/iterative_refiner.h\n  internal/ceres/iterative_schur_complement_solver.cc\n  internal/ceres/iterative_schur_complement_solver.h\n  internal/ceres/levenberg_marquardt_strategy.cc\n  internal/ceres/levenberg_marquardt_strategy.h\n  internal/ceres/line_search.cc\n  internal/ceres/line_search.h\n  internal/ceres/line_search_direction.cc\n  internal/ceres/line_search_direction.h\n  internal/ceres/line_search_minimizer.cc\n  internal/ceres/line_search_minimizer.h\n  internal/ceres/line_search_preprocessor.cc\n  internal/ceres/line_search_preprocessor.h\n  internal/ceres/linear_least_squares_problems.cc\n  internal/ceres/linear_least_squares_problems.h\n  internal/ceres/linear_operator.cc\n  internal/ceres/linear_operator.h\n  internal/ceres/linear_solver.cc\n  internal/ceres/linear_solver.h\n  internal/ceres/loss_function.cc\n  internal/ceres/low_rank_inverse_hessian.cc\n  internal/ceres/low_rank_inverse_hessian.h\n  internal/ceres/manifold.cc\n  internal/ceres/map_util.h\n  internal/ceres/minimizer.cc\n  internal/ceres/minimizer.h\n  internal/ceres/normal_prior.cc\n  internal/ceres/pair_hash.h\n  internal/ceres/parallel_for.h\n  internal/ceres/parallel_invoke.cc\n  internal/ceres/parallel_invoke.h\n  internal/ceres/parallel_utils.cc\n  internal/ceres/parallel_utils.h\n  internal/ceres/parallel_vector_ops.cc\n  internal/ceres/parallel_vector_ops.h\n  internal/ceres/parameter_block.h\n  internal/ceres/parameter_block_ordering.cc\n  internal/ceres/parameter_block_ordering.h\n  internal/ceres/partition_range_for_parallel_for.h\n  internal/ceres/partitioned_matrix_view.cc\n  internal/ceres/partitioned_matrix_view.h\n  internal/ceres/partitioned_matrix_view_impl.h\n  internal/ceres/partitioned_matrix_view_template.py\n  internal/ceres/polynomial.cc\n  internal/ceres/polynomial.h\n  internal/ceres/power_series_expansion_preconditioner.cc\n  internal/ceres/power_series_expansion_preconditioner.h\n  internal/ceres/preconditioner.cc\n  internal/ceres/preconditioner.h\n  internal/ceres/preprocessor.cc\n  internal/ceres/preprocessor.h\n  internal/ceres/problem.cc\n  internal/ceres/problem_impl.cc\n  internal/ceres/problem_impl.h\n  internal/ceres/program.cc\n  internal/ceres/program.h\n  internal/ceres/program_evaluator.h\n  internal/ceres/reorder_program.cc\n  internal/ceres/reorder_program.h\n  internal/ceres/residual_block.cc\n  internal/ceres/residual_block.h\n  internal/ceres/residual_block_utils.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the cycles_hydra Library CMake\nDESCRIPTION: This snippet creates a static library named `cycles_hydra` from the source and header files defined earlier.  It also sets compile options and definitions specific to the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(cycles_hydra STATIC\n  ${SRC_HD_CYCLES}\n  ${SRC_HD_CYCLES_HEADERS}\n)\n\ntarget_compile_options(cycles_hydra\n  PRIVATE\n  $<$<CXX_COMPILER_ID:MSVC>:/wd4003 /wd4244 /wd4506>\n  $<$<CXX_COMPILER_ID:GNU>:-Wno-float-conversion -Wno-double-promotion -Wno-deprecated>\n)\n\ntarget_compile_definitions(cycles_hydra\n  PRIVATE\n  GLOG_NO_ABBREVIATED_SEVERITIES=1\n  OSL_DEBUG=$<CONFIG:DEBUG>\n  TBB_USE_DEBUG=$<CONFIG:DEBUG>\n  $<$<CXX_COMPILER_ID:MSVC>:NOMINMAX=1>\n)\n\ntarget_link_libraries(cycles_hydra\n  PUBLIC\n  ${USD_LIBRARIES}\n  PRIVATE\n  ${LIB}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Draco Programs\nDESCRIPTION: This CMake snippet conditionally installs Draco encoder/decoder as part of blenderplayer. This is installed into the site-packages directory so that the blender bundled Python can access draco.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_DRACO)\n    install(\n      PROGRAMS $<TARGET_FILE:extern_draco>\n      DESTINATION ${PLAYER_TARGETDIR_VER}/python/lib/python${PYTHON_VERSION}/site-packages\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Library and Adding Dependencies with CMake\nDESCRIPTION: This snippet creates the `bf_editor_pointcloud` library using the `blender_add_lib` macro, linking the specified source files, include directories, and dependencies. It then adds an explicit dependency on the `bf_rna` library to ensure it is built before `bf_editor_pointcloud`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/pointcloud/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_pointcloud \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_dependencies(bf_editor_pointcloud bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Strict Flag Libraries with CMake\nDESCRIPTION: Adds subdirectories for libraries that adhere to strict compiler flags. This ensures that these libraries are built with the desired level of rigor. `curve_fit_nd` and `fmtlib` are included, and `ufbx` is included conditionally based on the `WITH_IO_FBX` flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(curve_fit_nd)\nadd_subdirectory(fmtlib)\nif(WITH_IO_FBX)\n  add_subdirectory(ufbx)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Blendfile Relationships Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for blendfile relationships, using the `bl_blendfile_relationships.py` Python script. It also sets the source test directory and the output directory. The Python script is responsible for validating the relationships between various elements within a blendfile.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n    blendfile_relationships\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_relationships.py --\n    --src-test-dir ${TEST_SRC_DIR}/\n    --output-dir ${TEST_OUT_DIR}/blendfile_io/\n  )\n```\n\n----------------------------------------\n\nTITLE: SCA_ActuatorSensor Class Definition\nDESCRIPTION: Defines the SCA_ActuatorSensor class, which inherits from SCA_ISensor.  This sensor detects changes in the actuator state of the parent object, generating a positive pulse when activated and a negative pulse when deactivated. It is part of the `bge.types` module.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_ActuatorSensor.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass SCA_ActuatorSensor(SCA_ISensor):\n   \"\"\"Actuator sensor detect change in actuator state of the parent object.\n   It generates a positive pulse if the corresponding actuator is activated\n   and a negative pulse if the actuator is deactivated.\"\"\"\n\n   def __init__(self):\n       pass # Placeholder\n\n```\n\n----------------------------------------\n\nTITLE: Deform Modifiers Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for deform modifiers. It loads the `deform_modifiers.blend` file and runs the `deform_modifiers.py` Python script with the `--run-all-tests` argument.  This will execute all tests defined within the Python script.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    deform_modifiers\n    ${TEST_SRC_DIR}/modeling/deform_modifiers.blend\n    --python ${TEST_PYTHON_DIR}/deform_modifiers.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Writing a file using fmt\nDESCRIPTION: This C++ code snippet demonstrates how to write to a file using the fmt library. It requires including the `<fmt/os.h>` header file. It creates a file named \"guide.txt\" and writes the string \"Don't Panic\" to it.  This method is claimed to be faster than using `fprintf`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/os.h>\n\n    int main() {\n      auto out = fmt::output_file(\"guide.txt\");\n      out.print(\"Don't {}\", \"Panic\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting USD I/O Tests - CMake\nDESCRIPTION: Configures USD import/export tests using `add_blender_test`. The tests are executed using Python scripts and test data from the USD test directory. These tests cover the functionalities of importing and exporting USD files.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD AND TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    io_usd_export\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_usd_export_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/usd\"\n  )\n  add_blender_test(\n    io_usd_import\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_usd_import_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/usd\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenJPEG Support\nDESCRIPTION: Conditionally adds OpenJPEG support to the imbuf library. If `WITH_IMAGE_OPENJPEG` is enabled, it appends OpenJPEG include directories to `INC_SYS`, adds `intern/format_jp2.cc` to the source files, and appends OpenJPEG libraries to the library dependencies. It also adds the `-DWITH_IMAGE_OPENJPEG` definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENJPEG)\n  list(APPEND INC_SYS\n    ${OPENJPEG_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/format_jp2.cc\n  )\n  list(APPEND LIB\n    ${OPENJPEG_LIBRARIES}\n  )\n\n  add_definitions(-DWITH_IMAGE_OPENJPEG ${OPENJPEG_DEFINES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building bf_dna_blenlib Library\nDESCRIPTION: This snippet defines the source files and dependencies for the `bf_dna_blenlib` library. The library includes blenlib sources and DNA defaults and is created using the `blender_add_lib` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n  ../../blenlib\n)\n\nset(INC_SYS\n\n)\n\nset(SRC\n  ${BLENLIB_SRC}\n  ${SRC_DNA_DEFAULTS_INC}\n  ${SRC_DNA_OTHER_INC}\n)\n\nset(LIB\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::dependencies::optional::tbb\n)\n\nblender_add_lib(bf_dna_blenlib \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for bf_rna Library (CMake)\nDESCRIPTION: This CMake code defines the source files for the `bf_rna` library by setting the `SRC` variable to a list of `.cc` and `.hh` files, including the generated source file `${GENSRC}` and the `${SRC_RNA_INC}` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  rna_access.cc\n  rna_access_compare_override.cc\n  rna_path.cc\n  ${GENSRC}\n\n  ${SRC_RNA_INC}\n  rna_access_internal.hh\n  rna_curves_utils.hh\n  rna_internal.hh\n  rna_internal_types.hh\n  rna_mesh_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Metal Shading Language (MSL) Sources\nDESCRIPTION: This snippet defines a list of MSL source files used for the Metal backend. These files contain compute kernels for texture updates and reads, as well as shared definitions and common shader code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(MSL_SRC\n  metal/mtl_shader_shared.hh\n\n  metal/kernels/compute_texture_update.msl\n  metal/kernels/compute_texture_read.msl\n\n  shaders/metal/mtl_shader_defines.msl\n  shaders/metal/mtl_shader_common.msl\n)\n```\n\n----------------------------------------\n\nTITLE: GPU Shader C++ Compilation\nDESCRIPTION: This snippet defines an option to compile shaders using C++. It allows testing Metal compilation on other platforms and enables C++ IDE support for shader code.  This is only available if CMake policy CMP0119 is set.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0119)\n  option(WITH_GPU_SHADER_CPP_COMPILATION \"\\\n  Compiler shaders using C++. \\\n  Allows testing Metal compilation on other platform and enable C++ IDE support for shader code\"\n    OFF\n  )\n  mark_as_advanced(WITH_GPU_SHADER_CPP_COMPILATION)\nelse()\n  set(WITH_GPU_SHADER_CPP_COMPILATION OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines the library dependencies for the script editor module. It specifies the Blender libraries that the module depends on, including blenkernel, blenlib, blenloader, blentranslation, dna, gpu, guardedalloc, and windowmanager.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_script/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Mantaflow Library\nDESCRIPTION: This snippet uses a custom CMake function, `blender_add_lib`, to create the `bf_intern_mantaflow` library. It specifies the source files, include directories, and library dependencies defined in the previous snippets. This function is responsible for building the library and linking it with its dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_mantaflow \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Physics Particle System Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for the particle system physics. It loads the `physics_particle_test.blend` file and runs the `physics_particle_system.py` Python script.  The `--run-all-tests` argument ensures all tests defined in the Python script are executed.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    physics_particle_system\n    ${TEST_SRC_DIR}/physics/physics_particle_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_particle_system.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Physics Particle Instance Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for particle instancing in physics simulations. The `physics_particle_instance.blend` file is loaded and `physics_particle_instance.py` is executed.  The `--run-all-tests` argument ensures that all test functions within the Python script are executed.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    physics_particle_instance\n    ${TEST_SRC_DIR}/physics/physics_particle_instance.blend\n    --python ${TEST_PYTHON_DIR}/physics_particle_instance.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with USD\nDESCRIPTION: This snippet conditionally includes USD (Universal Scene Description) support. It appends `../io/usd` to the include paths (`INC`) and defines `-DWITH_USD` to enable the corresponding code paths for USD file format support.  This enables importing and exporting USD data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD)\n  list(APPEND INC\n    ../io/usd\n  )\n  add_definitions(-DWITH_USD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Executable Arguments for Tests\nDESCRIPTION: Configures the Blender executable with specific arguments for running tests in the background, using factory settings, enabling debug memory, and setting the system scripts path. These options are crucial for automated testing and error detection.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/view_layer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_BLENDER_EXE\n  $<TARGET_FILE:blender>\n  --background\n  --factory-startup\n  --debug-memory\n  --debug-exit-on-error\n  --env-system-scripts ${CMAKE_SOURCE_DIR}/scripts\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Install Destinations with CMake\nDESCRIPTION: This CMake code sets the installation destination directories for binaries and libraries based on the platform. On Windows, the binaries are installed to the root directory (`.`), while on other systems, they are installed to the `bin` directory.  Libraries are installed to `lib${LIB_SUFFIX}`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n\tset(BIN_DESTINATION \".\")\nelse()\n\tset(BIN_DESTINATION \"bin\")\nendif()\n\nset(LIB_DESTINATION \"lib${LIB_SUFFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to Existing Types\nDESCRIPTION: This snippet shows how to add and remove properties to existing Blender types dynamically.  `bpy.types.Object.my_float` adds a float property to the `Object` type, and `del bpy.types.Object.my_float` removes it. This is typically done within the `register()` and `unregister()` functions, respectively.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Add a new property to an existing type.\nbpy.types.Object.my_float: bpy.props.FloatProperty()\n# Remove it.\ndel bpy.types.Object.my_float\n```\n\n----------------------------------------\n\nTITLE: CMake: Creating minilzo Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create a library named `extern_minilzo` from the specified source files, include directories, and system include directories.  The `${LIB}` variable is empty, indicating no external libraries are linked here.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n\nblender_add_lib(extern_minilzo \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC specific definitions\nDESCRIPTION: This snippet sets preprocessor definitions specifically for the MSVC (Microsoft Visual C++) compiler. These definitions include enabling math constants, exception handling, disabling min/max macros, and defining the standard integer header.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n\tadd_definitions(\n\t\t/D_USE_MATH_DEFINES\n\t\t/EHsc\n\t\t/DNOMINMAX\n\t\t/D_STDINT_H\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Render Resolution Percentage - Python\nDESCRIPTION: This code shows how to access the render resolution percentage for a scene and the X coordinate of a vertex in an object using the Blender Python API. It provides an example of navigating through nested data structures to access specific properties within Blender's data.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_quickstart.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> bpy.data.scenes[0].render.resolution_percentage\n100\n>>> bpy.data.scenes[0].objects[\"Torus\"].data.vertices[0].co.x\n1.0\n```\n\n----------------------------------------\n\nTITLE: Defining Utility Header Files - CMake\nDESCRIPTION: This CMake code defines the header files for utility functions used in the Cycles kernel. It includes definitions for color space conversions, differential calculations, IES light profiles, lookup tables, NanoVDB support, and profiling tools.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_UTIL_HEADERS\n  util/colorspace.h\n  util/differential.h\n  util/ies.h\n  util/lookup_table.h\n  util/nanovdb.h\n  util/profiler.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB)\nDESCRIPTION: Defines the library dependencies for the armature editor library.  These libraries provide functionality required by the armature editor. The `PRIVATE` keyword suggests these libraries are only linked to this target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/armature/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions - CMake\nDESCRIPTION: This snippet conditionally adds definitions based on the WITH_FREESTYLE and WITH_GMP flags. If WITH_FREESTYLE is enabled, the -DWITH_FREESTYLE definition is added. Similarly, if WITH_GMP is enabled, the -DWITH_GMP definition is added. These definitions can be used in the source code to conditionally compile sections based on these features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/bmesh/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Metal Backend GLSL Sources and Converting MSL to C\nDESCRIPTION: This snippet conditionally appends Metal backend GLSL source files to the `GLSL_SRC` list and converts MSL files to C code if the Metal backend is enabled.  The `data_to_c_simple` function is used to convert each MSL file to a C-compatible representation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_METAL_BACKEND)\n  list(APPEND GLSL_SRC ${MTL_BACKEND_GLSL_SRC})\n\n  set(MSL_C)\n  foreach(MSL_FILE ${MSL_SRC})\n    data_to_c_simple(${MSL_FILE} MSL_C)\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation (OpenVDB)\nDESCRIPTION: This snippet adds conditional compilation flags, include directories, and libraries for OpenVDB if the WITH_OPENVDB option is enabled. It defines WITH_OPENVDB, appends the OpenVDB include directory, and links against the OpenVDB libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/usd/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENVDB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying License Notice in Interactive Programs\nDESCRIPTION: This snippet provides an example of how to display a short license notice when a program starts in interactive mode. It includes the program's name, copyright information, a warranty disclaimer, and instructions on how to view license details.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/GPL-3.0-or-later.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Accessing Object by ID using from_id method in EXP_ListValue (Python)\nDESCRIPTION: This code snippet demonstrates how to retrieve a game object from an EXP_ListValue (e.g., scene.objects) using its unique ID.  The ID is obtained using the `id()` function in Python. The example shows how to store and retrieve a game object when a direct reference cannot be stored.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.EXP_ListValue.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmyObID=id(gameObject)\nob= scene.objects.from_id(myObID)\n```\n\n----------------------------------------\n\nTITLE: Add CC Flags Custom Test - CMake\nDESCRIPTION: Calls a function to add custom C compiler flags for the blender target. This is often used to set flags specific to particular compilers or build configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_cc_flags_custom_test(blender)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags (macOS)\nDESCRIPTION: This snippet adds a conditional compilation flag for macOS to disable allocation warnings related to aligned memory allocation. This is necessary due to a known issue with OIIO's unordered_map_concurrent on macOS versions prior to 10.14. The flag `-faligned-allocation` is appended to the `CMAKE_CXX_FLAGS` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  # Disable allocation warning on macOS prior to 10.14: the OSLRenderServices\n  # contains member which is 64 bytes aligned (cache inside of OIIO's\n  # unordered_map_concurrent). This is not something what the SDK supports, but\n  # since we take care of allocations ourselves is OK to ignore the\n  # diagnostic message.\n  string(APPEND CMAKE_CXX_FLAGS \" -faligned-allocation\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: String Formatting (Python)\nDESCRIPTION: Demonstrates string formatting, which is suitable for writing string data from floats and integers.  This is more performant than concatenation, and good for writing out numbers.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfile.write(\"%s %s %s\\n\" % (str1, str2, str3))\n```\n\n----------------------------------------\n\nTITLE: Setting Short File Macro Option\nDESCRIPTION: This CMake snippet configures an option to make paths in macros like `__FILE__` relative to the top-level source and build directories. It sets the `WITH_COMPILER_SHORT_FILE_MACRO` option and marks it as advanced. The snippet only works if the compiler is GNUCC or Clang.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  option(WITH_COMPILER_SHORT_FILE_MACRO \"\\\nMake paths in macros like __FILE__ relative to top level source and build directories.\"\n    ON\n  )\n  mark_as_advanced(WITH_COMPILER_SHORT_FILE_MACRO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Datafiles Subdirectory\nDESCRIPTION: This snippet unconditionally adds the `datafiles` subdirectory to the build process. This directory likely contains data files required by the Blender application.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(datafiles)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Source Files and Includes (CMake)\nDESCRIPTION: Conditionally adds source files and include directories specific to Windows platforms. It appends various `GHOST_*.cc` and `GHOST_*.hh` files to the `SRC` list and the `WINTAB_INC` directory to the system include list (`INC_SYS`).  This section is crucial for compiling the GHOST library on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(WIN32)\n  # # Warnings as errors, this is too strict!\n  # if(MSVC)\n  #   string(APPEND CMAKE_CXX_FLAGS \" /WX\")\n  # endif()\n\n  list(APPEND INC_SYS\n    ${WINTAB_INC}\n  )\n\n  list(APPEND SRC\n    intern/GHOST_ContextD3D.cc\n    intern/GHOST_DisplayManagerWin32.cc\n    intern/GHOST_DropTargetWin32.cc\n    intern/GHOST_SystemWin32.cc\n    intern/GHOST_TrackpadWin32.cc\n    intern/GHOST_WindowWin32.cc\n    intern/GHOST_Wintab.cc\n\n    intern/GHOST_ContextD3D.hh\n    intern/GHOST_DisplayManagerWin32.hh\n    intern/GHOST_DropTargetWin32.hh\n    intern/GHOST_SystemWin32.hh\n    intern/GHOST_TaskbarWin32.hh\n    intern/GHOST_TrackpadWin32.hh\n    intern/GHOST_WindowWin32.hh\n    intern/GHOST_Wintab.hh\n  )\n\n  list(APPEND SRC\n    intern/GHOST_ContextWGL.cc\n\n    intern/GHOST_ContextWGL.hh\n  )\n\n  if(WITH_INPUT_IME)\n    list(APPEND SRC\n      intern/GHOST_ImeWin32.cc\n\n      intern/GHOST_ImeWin32.hh\n    )\n  endif()\n\n  if(WITH_INPUT_NDOF)\n    list(APPEND SRC\n      intern/GHOST_NDOFManagerWin32.cc\n\n      intern/GHOST_NDOFManagerWin32.hh\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional PugiXML Integration\nDESCRIPTION: This snippet conditionally adds PugiXML support for SVG export. If WITH_PUGIXML is enabled, it appends the relevant source file, include directory, and library to the respective lists.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PUGIXML)\n  list(APPEND SRC\n    intern/grease_pencil_io_export_svg.cc\n  )\n  list(APPEND INC_SYS\n    ${PUGIXML_INCLUDE_DIR}\n  )\n  list(APPEND LIB\n    ${PUGIXML_LIBRARIES}\n  )\n  add_definitions(-DWITH_PUGIXML)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional GTests Configuration\nDESCRIPTION: This snippet conditionally configures the build system if the `WITH_GTESTS` option is enabled, setting up the test suite library, source files, include directories, and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    tests/GEO_merge_curves_test.cc\n  )\n  set(TEST_LIB\n  )\n  blender_add_test_suite_lib(bf_geometry_tests \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet specifies the dependencies for the IK Solver library. It indicates that the library depends on the Eigen library provided by bf::dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/iksolver/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVDB Library (CMake)\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the `bf_intern_openvdb` library.  It specifies the source files, include directories, and libraries that the library depends on. The macro handles the details of building the library, linking dependencies, and setting up the build environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/openvdb/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_openvdb \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Operators Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for Blender operators.  It loads the `operators.blend` file and executes the `operators.py` Python script. The `--run-all-tests` argument tells the python script to run all tests. Requires `TEST_SRC_DIR_EXISTS` to be true.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    operators\n    ${TEST_SRC_DIR}/modeling/operators.blend\n    --python ${TEST_PYTHON_DIR}/operators.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: Adds an explicit dependency of the `bf_editor_transform` library on the `bf_rna` library. This ensures that `bf_rna` is built before `bf_editor_transform`, addressing potential build order issues. The comment `# RNA_prototypes.hh` suggests that the RNA prototypes are essential for this library to function correctly.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/transform/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_transform bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Static Plugin Configuration with CMake\nDESCRIPTION: This CMake code iterates through the list of `STATIC_PLUGINS` to generate strings for static plugin class and register declarations. It then concatenates these strings for use in other parts of the configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nset(STATIC_PLUGIN_CLASSES \"\")\nset(STATIC_PLUGIN_REGISTERS \"\")\n\nforeach(PLUGIN ${STATIC_PLUGINS})\n\tlist(APPEND STATIC_PLUGIN_CLASSES \"STATIC_PLUGIN_CLASS(\" ${PLUGIN} \")\\n\")\n\tlist(APPEND STATIC_PLUGIN_REGISTERS \"\\tSTATIC_PLUGIN_REGISTER(\" ${PLUGIN} \")\\n\")\nendforeach()\n\nstring(CONCAT STATIC_PLUGIN_CLASSES ${STATIC_PLUGIN_CLASSES})\nstring(CONCAT STATIC_PLUGIN_REGISTERS ${STATIC_PLUGIN_REGISTERS})\n```\n\n----------------------------------------\n\nTITLE: Creating a Library in CMake\nDESCRIPTION: This snippet creates the `bf_editor_space_view3d` library using the specified source files, include directories, and system include directories. The `blender_add_lib` macro likely encapsulates the standard CMake commands for creating a library with the given configurations. This library constitutes the 3D viewport editor module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_view3d \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Object Conversion Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for object conversion. The `object_conversion.blend` file is loaded, and the `object_conversion.py` Python script is executed.  The `--run-all-tests` parameter ensures that all tests defined in the python script are run.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    object_conversion\n    ${TEST_SRC_DIR}/modeling/object_conversion.blend\n    --python ${TEST_PYTHON_DIR}/object_conversion.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Library Sources - CMake\nDESCRIPTION: Defines a list of GLSL library source files. These libraries contain common functions and definitions that are shared across multiple shaders. This improves code reusability and maintainability.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_LIB\n  overlay_common_lib.glsl\n  overlay_edit_mesh_common_lib.glsl\n  # overlay_edit_mesh_lib.glsl # TODO(fclem) Contains reference from the shader interface.\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories required for building the extern_xdnd library.  It sets the local include directory to '.' and also includes the X11 include path if available. This ensures that the compiler can find the necessary header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xdnd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${X11_X11_INCLUDE_PATH}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories required for compiling the Quadriflow library. `INC` specifies the current directory, while `INC_SYS` points to the Quadriflow source within the extern directory. These directories are added to the compiler's search path for header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/quadriflow/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ../../extern/quadriflow/src\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Subdirectories - CMake\nDESCRIPTION: This code block demonstrates conditionally adding subdirectories based on feature flags. If `WITH_BULLET`, `WITH_PYTHON`, or `WITH_PLAYER` is enabled, the corresponding subdirectory is added to the project.  This allows for building UPBGE with different feature sets enabled or disabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  add_subdirectory(Physics/Bullet)\nendif()\n\nif(WITH_PYTHON)\n  add_subdirectory(VideoTexture)\nendif()\n\nif(WITH_PLAYER)\n  add_subdirectory(GamePlayer)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Sequencer Render Tests - CMake\nDESCRIPTION: Defines and adds render tests for the sequencer using `add_render_test`. It iterates through a list of sequencer test names and specifies the test script, test directory, and output directory for each.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(render_tests\n    effects\n    filter\n    transform\n    blend_modes_byte\n    blend_modes_float\n    ffmpeg\n  )\n\n  foreach(render_test ${render_tests})\n    add_render_test(\n      sequencer_render_${render_test}\n      ${CMAKE_CURRENT_LIST_DIR}/sequencer_render_tests.py\n      --testdir \"${TEST_SRC_DIR}/sequence_editing/${render_test}\"\n      --outdir \"${TEST_OUT_DIR}/sequence_editing\"\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the bf_editor_lattice library. It specifies both project-specific include paths (../include, ../../makesrna) and system include paths (INC_SYS, which is empty in this case). These paths are used to locate header files during the compilation process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/lattice/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries - CMake\nDESCRIPTION: This snippet specifies the private libraries that the shader effects library depends on. These libraries are part of the Blender project and provide functionalities like font handling, kernel operations, and DNA access.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/shader_fx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Printing chrono durations with fmt\nDESCRIPTION: This C++ code snippet demonstrates how to print chrono durations using the fmt library.  It requires including the `<fmt/chrono.h>` header file.  It uses both the default format and a strftime-like format to print the durations.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/chrono.h>\n\n    int main() {\n      using namespace std::literals::chrono_literals;\n      fmt::print(\"Default format: {} {}\\n\", 42s, 100ms);\n      fmt::print(\"strftime-like format: {:%H:%M:%S}\\n\", 3h + 15min + 30s);\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (MantaFlow Fluid Simulation)\nDESCRIPTION: This snippet conditionally defines `-DWITH_FLUID` and appends the mantaflow library to LIB if WITH_MOD_FLUID is enabled. This enables support for Mantaflow fluid simulations, allowing for realistic fluid dynamics within the game engine. Enables Mantaflow integration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  list(APPEND LIB\n    bf_intern_mantaflow\n  )\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CPU Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the CPU kernel. These headers include BVH structures, compatibility definitions, image handling, global definitions, kernel function declarations, and architecture-specific kernel implementations.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_CPU_HEADERS\n  device/cpu/bvh.h\n  device/cpu/compat.h\n  device/cpu/image.h\n  device/cpu/globals.h\n  device/cpu/kernel.h\n  device/cpu/kernel_arch.h\n  device/cpu/kernel_arch_impl.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional WebP Support\nDESCRIPTION: Conditionally adds WebP support to the imbuf library. If `WITH_IMAGE_WEBP` is enabled, it appends `intern/format_webp.cc` to the source files, appends WebP include directories to `INC_SYS`, appends WebP libraries to the library dependencies, and adds the `-DWITH_IMAGE_WEBP` definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_WEBP)\n  list(APPEND SRC\n    intern/format_webp.cc\n  )\n  list(APPEND INC_SYS\n    ${WEBP_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${WEBP_LIBRARIES}\n  )\n  add_definitions(-DWITH_IMAGE_WEBP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines the library dependencies for the `blenloader` library. It lists the other Blender libraries that `blenloader` depends on.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenloader/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::intern::memutil\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Ketsji Library\nDESCRIPTION: This snippet calls the `blender_add_lib` function to create the `ge_ketsji` library. It passes the source files, include directories, system include directories, and libraries defined earlier as arguments. This function handles the compilation and linking process to create the final library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_ketsji \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: OpenColorIO Support\nDESCRIPTION: This snippet enables OpenColorIO (OCIO) support if the `WITH_OPENCOLORIO` option is enabled.  It adds a preprocessor definition `-DWITH_OCIO`, which allows conditional compilation within the C++ code based on OCIO support. This enables color management features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Pathfinding with KX_NavMeshObject in Python\nDESCRIPTION: This code snippet demonstrates the `findPath` method of the `KX_NavMeshObject` class. It finds a path between a start and goal point on the navigation mesh and returns the path as a list of 3D vector points. Requires an instance of KX_NavMeshObject and two 3D vectors representing the start and goal positions.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_NavMeshObject.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nKX_NavMeshObject.findPath(start, goal)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with LZMA Compression\nDESCRIPTION: This snippet conditionally includes LZMA compression library support. It appends LZMA include directories to `INC_SYS` and the LZMA library to `LIB`. It defines `-DWITH_LZMA` to enable corresponding code paths for LZMA compression/decompression.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LZMA)\n  list(APPEND INC_SYS\n    ../../../extern/lzma\n  )\n  list(APPEND LIB\n    extern_lzma\n  )\n  add_definitions(-DWITH_LZMA)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC) - CMake\nDESCRIPTION: This snippet lists the source files that comprise the undo system library. It includes C++ source files such as 'ed_undo.cc', 'memfile_undo.cc', and 'undo_system_types.cc', as well as a header file 'undo_intern.hh'. These files contain the implementation logic for the undo system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/undo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ed_undo.cc\n  memfile_undo.cc\n  undo_system_types.cc\n\n  undo_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional OpenVDB Configuration\nDESCRIPTION: This snippet conditionally configures the build system if the `WITH_OPENVDB` option is enabled. It appends include directories, system include directories, libraries, and adds preprocessor definitions based on the OpenVDB library paths and definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Hydra Display Driver CMake\nDESCRIPTION: This snippet conditionally adds the display driver based on the existence of `pxr/imaging/hgiGL` in the USD include directory.  If the directory exists, it defines `WITH_HYDRA_DISPLAY_DRIVER` and includes the corresponding source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${USD_INCLUDE_DIR}/pxr/imaging/hgiGL)\n  add_definitions(-DWITH_HYDRA_DISPLAY_DRIVER)\n  list(APPEND SRC_HD_CYCLES display_driver.cpp)\n  list(APPEND SRC_HD_CYCLES_HEADERS display_driver.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Extensions Directory (CMake)\nDESCRIPTION: This snippet installs the `release/extensions` directory to `${TARGETDIR_VER}`. It is meant to create a system extensions directory that users or administrators can populate.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  DIRECTORY ${CMAKE_SOURCE_DIR}/release/extensions\n  DESTINATION ${TARGETDIR_VER}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Generating Blender System Info Command\nDESCRIPTION: This snippet configures and generates a batch file (`blender_system_info.cmd`) for gathering system information. It gets the Python executable name, configures the input file (`blender_system_info.cmd.in`), generates an intermediate file (`blender_system_info.with_vars.cmd.in`), and then generates the final command file using the `file(GENERATE)` command. This uses a generator expression `<CONFIG>` to create a configuration-specific output file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_PYTHON_MODULE)\n  get_filename_component(PYTHON_EXECUTABLE_NAME_ONLY ${PYTHON_EXECUTABLE} NAME)\n  # Configure then generate file. Note that this copies the literal generator\n  # for the Python executable name. So the file needs to be generated afterwards\n  # to get the correct name.\n  configure_file(\n    ${CMAKE_SOURCE_DIR}/release/windows/batch/blender_system_info.cmd.in\n    ${CMAKE_BINARY_DIR}/release/windows/batch/blender_system_info.with_vars.cmd.in\n    @ONLY\n  )\n  unset(PYTHON_EXECUTABLE_NAME_ONLY)\n  # Replace Python executable generator with actual executable name.\n  file(GENERATE\n    OUTPUT ${CMAKE_BINARY_DIR}/release/windows/batch/blender_system_info_$<CONFIG>.cmd\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the 'INC' variable, which lists include directories required for compiling the 'bf_render_hydra' library.  These include internal Blender directories (guardedalloc, blenlib, makesdna, makesrna, io/usd, gpu/intern, python/intern) and the generated RNA prototypes directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../../../../intern/guardedalloc\n  ../../blenlib\n  ../../makesdna\n  ../../makesrna\n  ../../io/usd\n  ../../gpu/intern\n  ../../python/intern\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n  ..\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (CMake)\nDESCRIPTION: This CMake snippet defines the library dependencies for the component. The `LIB` variable is set to `bf::blenlib` as a private dependency. This indicates that the component depends on the `blenlib` library, which is part of the `bf` namespace.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Appending GLSL Sources based on Feature Flags\nDESCRIPTION: This snippet conditionally appends GLSL source files to the `GLSL_SRC` list based on whether gtests and GPU backend tests are enabled.  This allows for including test shaders only when the corresponding testing features are enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  if(WITH_GPU_BACKEND_TESTS)\n    list(APPEND GLSL_SRC ${GLSL_SRC_TEST})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Math Constants for Windows\nDESCRIPTION: This snippet defines the _USE_MATH_DEFINES macro for Windows builds, which is necessary to use math constants from the standard library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags - CMake\nDESCRIPTION: Defines compilation flags based on whether specific features are enabled. These flags control which parts of the Cycles code are compiled and linked, depending on the availability of optional dependencies or desired functionalities (HIP, Metal, Fluid, TBB).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_HIP)\n  add_definitions(-DWITH_HIP)\nendif()\n\nif(WITH_CYCLES_DEVICE_METAL)\n  add_definitions(-DWITH_METAL)\nendif()\n\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n\nif(WITH_TBB)\n  add_definitions(-DWITH_TBB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting up BMesh Tests\nDESCRIPTION: If Google Tests are enabled (WITH_GTESTS), this block defines the source, include, and library dependencies for the BMesh tests and uses a custom macro to add the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/bmesh_core_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf_bmesh\n  )\n  blender_add_test_suite_lib(bmesh \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: GMP\nDESCRIPTION: This code snippet conditionally compiles code for GMP integration if the WITH_GMP flag is enabled. It adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional TBB Malloc Option\nDESCRIPTION: This snippet conditionally defines the `WITH_TBB_MALLOC_PROXY` option based on the platform being Windows and not ARM64. It enables the TBB malloc replacement if the condition is met. This is specific to Windows platforms for performance reasons.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND NOT CMAKE_SYSTEM_PROCESSOR STREQUAL \"ARM64\")\n  option(WITH_TBB_MALLOC_PROXY \"Enable the TBB malloc replacement\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenVDB Support (CMake)\nDESCRIPTION: This snippet conditionally adds support for OpenVDB if it is enabled. It appends OpenVDB include directories and libraries to the respective lists and adds a preprocessor definition for OpenVDB.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: This snippet defines the libraries required by the LZMA library. In this case, no external libraries are specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzma/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Compute Shader Sources - CMake\nDESCRIPTION: Defines a list of GLSL compute shader source files.  Currently, this list is empty, indicating no compute shaders are used for overlay effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_COMP\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Camera Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to camera models and projections in the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_CAMERA_HEADERS\n  camera/camera.h\n  camera/projection.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories in CMake\nDESCRIPTION: This snippet defines system-level include directories for the game engine player, primarily for external libraries. These paths point to the header files for Moto and Boost, allowing the code to use their functionalities. It relies on the BOOST_INCLUDE_DIR variable being defined elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ../../../intern/moto/include\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for GMP - CMake\nDESCRIPTION: Conditionally includes GMP (GNU Multiple Precision Arithmetic Library) based on the 'WITH_GMP' flag.  Adds include directories, libraries, and a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Alembic Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_ALEMBIC` option is enabled. If it is, the 'alembic' subdirectory is included in the build process using `add_subdirectory`. This ensures that the Alembic importer/exporter is included.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_subdirectory(alembic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Modifiers Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for various modifiers. It loads the `modifiers.blend` file and runs the `modifiers.py` Python script. The `--run-all-tests` argument instructs the script to execute all defined tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    modifiers\n    ${TEST_SRC_DIR}/modeling/modifiers.blend\n    --python ${TEST_PYTHON_DIR}/modifiers.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing Strict GCC C Compiler Flags\nDESCRIPTION: This code removes some strict C compiler warning flags using `add_check_c_compiler_flags`. These flags are disabled using the `-Wno-` prefix to allow for more relaxed coding practices. Flags like `-Wno-deprecated-declarations`, `-Wno-unused-parameter`, `-Wno-unused-function`, `-Wno-type-limits` etc. are disabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_114\n\nLANGUAGE: CMake\nCODE:\n```\n  add_check_c_compiler_flags(\n    C_REMOVE_STRICT_FLAGS\n\n    C_WARN_NO_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations\n    C_WARN_NO_UNUSED_PARAMETER -Wno-unused-parameter\n    C_WARN_NO_UNUSED_FUNCTION -Wno-unused-function\n    C_WARN_NO_TYPE_LIMITS -Wno-type-limits\n    C_WARN_NO_INT_IN_BOOL_CONTEXT -Wno-int-in-bool-context\n    C_WARN_NO_FORMAT -Wno-format\n    C_WARN_NO_SWITCH -Wno-switch\n    C_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    C_WARN_NO_UNUSED_VARIABLE -Wno-uninitialized\n    C_WARN_NO_IMPLICIT_FALLTHROUGH -Wno-implicit-fallthrough\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional HIP inclusion\nDESCRIPTION: This snippet conditionally includes HIP-related source files and include directories if the HIPRT_INCLUDE_DIR variable is defined. It appends the HIP include directory to INC_SYS and adds HIP-related source files to SRC.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/hipew/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(HIPRT_INCLUDE_DIR)\n  list(APPEND INC_SYS\n    ${HIPRT_INCLUDE_DIR}\n  )\n\n  list(APPEND SRC\n    src/hiprtew.cc\n\n    include/hiprtew.h\n    src/util.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions - CMake\nDESCRIPTION: This CMake snippet adds compiler definitions to enable Freestyle functionality (`-DWITH_FREESTYLE`) and, optionally, Python module support (`-DPy_ENABLE_SHARED`) and Python safety features (`-DWITH_PYTHON_SAFETY`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DWITH_FREESTYLE)\n\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DPy_ENABLE_SHARED)\nendif()\n\nif(WITH_PYTHON_SAFETY)\n  # For bpy_rna.hh access.\n  add_definitions(-DWITH_PYTHON_SAFETY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building QuadriFlow with GUROBI Support\nDESCRIPTION: This CMake command configures QuadriFlow to use the Gurobi integer programming solver. The `-DBUILD_GUROBI=ON` flag enables Gurobi integration, and `-DBUILD_LOG=ON` activates logging. This configuration is intended for benchmark purposes only.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncmake .. -DCMAKE_BUILD_TYPE=release -DBUILD_GUROBI=ON -DBUILD_LOG=ON\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB) - CMake\nDESCRIPTION: This snippet defines the library dependencies for the undo system library.  It lists several Blender Foundation libraries, including 'bf::asset_system', 'bf::blenkernel', 'bf::blenlib', 'bf::blenloader', 'bf::blentranslation', 'bf::bmesh', 'bf::dna', 'bf::intern::clog', 'bf::intern::guardedalloc', and 'bf::windowmanager'. These libraries provide functionalities required by the undo system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/undo/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Running View Layer Tests using the Macro\nDESCRIPTION: Executes the `view_layer_test` macro for a series of tests related to view layer functionality. Each call to the macro defines and adds a specific view layer test to the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/view_layer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nview_layer_test(active_collection)\nview_layer_test(background_set)\nview_layer_test(collection_new_sync)\nview_layer_test(collection_rename_a)\nview_layer_test(collection_rename_b)\n# view_layer_test(evaluation_render_settings_a)\n# view_layer_test(evaluation_render_settings_b)\n# view_layer_test(evaluation_render_settings_c)\n# view_layer_test(evaluation_render_settings_d)\n# view_layer_test(evaluation_render_settings_e)\n# view_layer_test(evaluation_render_settings_f)\n# view_layer_test(evaluation_render_settings_g)\n# view_layer_test(evaluation_render_settings_h)\n# view_layer_test(evaluation_render_settings_i)\nview_layer_test(evaluation_visibility_a)\nview_layer_test(evaluation_visibility_b)\nview_layer_test(evaluation_visibility_c)\nview_layer_test(evaluation_visibility_d)\nview_layer_test(evaluation_visibility_e)\nview_layer_test(evaluation_visibility_f)\nview_layer_test(evaluation_visibility_g)\nview_layer_test(evaluation_visibility_h)\nview_layer_test(evaluation_visibility_i)\nview_layer_test(evaluation_visibility_j)\nview_layer_test(evaluation_selectability_a)\nview_layer_test(evaluation_selectability_b)\nview_layer_test(evaluation_selectability_c)\nview_layer_test(evaluation_selectability_d)\nview_layer_test(evaluation_selectability_e)\nview_layer_test(evaluation_selectability_f)\nview_layer_test(group_a)\nview_layer_test(group_b)\nview_layer_test(group_c)\nview_layer_test(group_d)\nview_layer_test(group_e)\nview_layer_test(object_add_cylinder)\nview_layer_test(object_add_empty)\nview_layer_test(object_add_torus)\nview_layer_test(object_add_no_collection_cylinder)\nview_layer_test(object_add_no_collection_empty)\nview_layer_test(object_add_no_collection_torus)\nview_layer_test(object_copy)\nview_layer_test(object_delete_a)\nview_layer_test(object_delete_b)\nview_layer_test(object_link_a)\nview_layer_test(object_link_b)\nview_layer_test(object_link_c)\nview_layer_test(operator_context)\nview_layer_test(make_single_user)\nview_layer_test(move_above_below_scene_collection_a)\nview_layer_test(move_above_below_scene_collection_b)\nview_layer_test(move_above_below_scene_collection_c)\nview_layer_test(move_above_below_scene_collection_d)\nview_layer_test(move_above_below_scene_collection_e)\nview_layer_test(move_above_below_scene_collection_f)\nview_layer_test(move_above_below_scene_collection_g)\nview_layer_test(move_above_below_scene_collection_h)\nview_layer_test(move_above_below_scene_collection_i)\nview_layer_test(move_above_below_scene_collection_sync_a)\nview_layer_test(move_above_below_scene_collection_sync_b)\nview_layer_test(move_above_below_scene_collection_sync_c)\nview_layer_test(move_above_below_scene_collection_sync_d)\nview_layer_test(move_above_below_scene_collection_sync_e)\nview_layer_test(move_above_below_scene_collection_sync_f)\nview_layer_test(move_above_below_scene_collection_sync_g)\nview_layer_test(move_above_below_scene_collection_sync_h)\nview_layer_test(move_above_below_scene_collection_sync_i)\nview_layer_test(move_into_scene_collection_a)\nview_layer_test(move_into_scene_collection_b)\nview_layer_test(move_into_scene_collection_c)\nview_layer_test(move_into_scene_collection_d)\nview_layer_test(move_into_scene_collection_e)\nview_layer_test(move_into_scene_collection_f)\nview_layer_test(move_into_scene_collection_g)\nview_layer_test(move_into_scene_collection_h)\nview_layer_test(move_into_scene_collection_i)\nview_layer_test(move_into_scene_collection_j)\nview_layer_test(move_into_scene_collection_k)\nview_layer_test(move_into_scene_collection_l)\nview_layer_test(move_into_scene_collection_sync_a)\nview_layer_test(move_into_scene_collection_sync_b)\nview_layer_test(move_into_scene_collection_sync_c)\nview_layer_test(move_into_scene_collection_sync_d)\nview_layer_test(move_into_scene_collection_sync_e)\nview_layer_test(move_into_scene_collection_sync_f)\nview_layer_test(move_into_scene_collection_sync_g)\nview_layer_test(move_into_scene_collection_sync_h)\nview_layer_test(move_into_scene_collection_sync_i)\nview_layer_test(move_into_scene_collection_sync_j)\nview_layer_test(move_into_scene_collection_sync_k)\nview_layer_test(move_into_scene_collection_sync_l)\nview_layer_test(move_above_below_layer_collection_a)\nview_layer_test(move_above_below_layer_collection_b)\nview_layer_test(move_above_below_layer_collection_c)\nview_layer_test(move_above_below_layer_collection_d)\nview_layer_test(move_above_below_layer_collection_e)\nview_layer_test(move_above_below_layer_collection_f)\nview_layer_test(move_above_below_layer_collection_g)\nview_layer_test(move_above_below_layer_collection_h)\nview_layer_test(move_above_below_layer_collection_i)\nview_layer_test(move_above_below_layer_collection_j)\nview_layer_test(move_above_below_layer_collection_k)\nview_layer_test(move_above_below_layer_collection_l)\nview_layer_test(move_into_layer_collection_a)\nview_layer_test(move_into_layer_collection_b)\nview_layer_test(move_into_layer_collection_c)\nview_layer_test(move_into_layer_collection_d)\nview_layer_test(move_into_layer_collection_e)\nview_layer_test(move_into_layer_collection_f)\nview_layer_test(move_into_layer_collection_g)\nview_layer_test(move_into_layer_collection_h)\nview_layer_test(move_into_layer_collection_i)\nview_layer_test(move_into_layer_collection_j)\nview_layer_test(layer_linking)\nview_layer_test(layer_syncing)\nview_layer_test(scene_collection_delete)\nview_layer_test(scene_copy_a)\nview_layer_test(scene_copy_b)\nview_layer_test(scene_copy_c)\nview_layer_test(scene_copy_d)\nview_layer_test(scene_copy_e)\nview_layer_test(scene_copy_f)\nview_layer_test(scene_delete)\nview_layer_test(scene_objects)\nview_layer_test(scene_write_read)\nview_layer_test(view_layer_rename)\n```\n\n----------------------------------------\n\nTITLE: Creating Asset System Library\nDESCRIPTION: This snippet creates the asset system library using the `blender_add_lib` CMake macro. It specifies the library name (`bf_asset_system`), source files (`${SRC}`), include directories (`${INC}` and `${INC_SYS}`), and library dependencies (`${LIB}`).  It also creates an alias for easier linking.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/asset_system/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_asset_system \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::asset_system ALIAS bf_asset_system)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenEXR - CMake\nDESCRIPTION: Conditionally appends the 'bf_imbuf_openexr' library to the list of libraries and defines a preprocessor macro if OpenEXR support is enabled. This allows the Render module to read and write OpenEXR image files if the 'WITH_IMAGE_OPENEXR' option is turned on.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND LIB\n    bf_imbuf_openexr\n  )\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Get Mouse Coordinates Example (BGE)\nDESCRIPTION: This code snippet demonstrates how to retrieve the non-normalized mouse coordinates using the SCA_InputEvent class in the Blender Game Engine (BGE). It accesses the mouse inputs for X and Y axes and prints their values.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_InputEvent.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\nx = bge.logic.mouse.inputs[bge.events.MOUSEX].values[-1]\ny = bge.logic.mouse.inputs[bge.events.MOUSEY].values[-1]\n\nprint(\"Mouse non-normalized position: x: {0}, y: {1}\".format(x, y))\n```\n\n----------------------------------------\n\nTITLE: Timing Code Execution in Python\nDESCRIPTION: This snippet demonstrates how to measure the execution time of a Python code block using the `time` module. It records the start time, executes the code, calculates the elapsed time, and prints the result formatted to four decimal places.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport time\ntime_start = time.time()\n\n# Do something...\n\nprint(\"My Script Finished: %.4f sec\" % (time.time() - time_start))\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender's Custom CMake Function\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the `bf_editor_space_logic` library. It specifies the source files, include directories, system include directories, and library dependencies. This function handles the specific build requirements for Blender libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_logic \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Copy Zstandard to Python install\nDESCRIPTION: This snippet conditionally defines an option to copy the zstandard library into the Blender install directory when `WITH_PYTHON_INSTALL` is enabled. It also sets a cached path to the zstandard module and marks it as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON_INSTALL)\n  option(WITH_PYTHON_INSTALL_ZSTANDARD \"Copy zstandard into the blender install directory\" ON)\n  set(PYTHON_ZSTANDARD_PATH \"\" CACHE PATH \"\\\nPath to python site-packages or dist-packages containing 'zstandard' module\"\n  )\n  mark_as_advanced(PYTHON_ZSTANDARD_PATH)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining _LIBCPP_VERSION for MSVC Clang with TBB\nDESCRIPTION: This snippet appends the `/D_LIBCPP_VERSION` compiler flag when compiling with MSVC Clang and TBB is enabled. This is done to avoid TBB errors when compiling with the C++ standard library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n# If compiling with MSVC clang we need to add the `D_LIBCPP_VERSION` define\n# so we don't run into TBB errors when compiling with lib.\nif(WITH_TBB AND MSVC_CLANG)\n  string(APPEND CMAKE_CXX_FLAGS \" /D_LIBCPP_VERSION\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Theora Encoder Library with CMake\nDESCRIPTION: This snippet creates a Theora encoder library by linking the common and encoder object libraries. It also specifies a .def file, likely for Windows DLL export/import definitions, and links against the OGG library.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(theoraenc $<TARGET_OBJECTS:theora-common> $<TARGET_OBJECTS:theora-enc> \"win32/xmingw32/libtheoraenc-all.def\")\ntarget_link_libraries(theoraenc ${OGG_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Programs\nDESCRIPTION: This snippet shows the notice to display when a GPL-licensed program starts in interactive mode. It includes the program's name, copyright information, a disclaimer of warranty, and information on how to view license details.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files in CMake\nDESCRIPTION: This snippet defines the source files that make up the logic editor space module. These .cc files contain the C++ code that implements the logic editor's functionality, including handling logic buttons, operators, window management, and the space itself.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  logic_buttons.cc\n  logic_ops.cc\n  logic_window.cc\n  space_logic.cc\n\n  logic_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Cycles Install Path\nDESCRIPTION: This snippet sets the CYCLES_INSTALL_PATH if the Cycles Hydra render delegate is enabled and neither Blender nor Cycles standalone are enabled. It configures the installation path to a resources directory within the hdCycles folder.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE AND (NOT WITH_BLENDER) AND (NOT WITH_CYCLES_STANDALONE))\n  set(CYCLES_INSTALL_PATH ${CYCLES_INSTALL_PATH}/hdCycles/resources)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting number of parallel compiler jobs\nDESCRIPTION: This snippet allows the user to control the number of parallel compiler instances used for compiling device binaries. This can affect build times, but has high memory usage.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_47\n\nLANGUAGE: cmake\nCODE:\n```\nset(SYCL_OFFLINE_COMPILER_PARALLEL_JOBS 1 CACHE STRING \"Number of parallel compiler instances to use for device binaries compilation (expect ~8GB peak memory usage per instance).\")\n  mark_as_advanced(SYCL_OFFLINE_COMPILER_PARALLEL_JOBS)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines a list of source files for the module. These files include header files (.hh) and source files (.cc) related to movie reading, writing, and utility functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  MOV_enums.hh\n  MOV_read.hh\n  MOV_util.hh\n  MOV_write.hh\n\n  intern/ffmpeg_compat.h\n  intern/movie_proxy_indexer.cc\n  intern/movie_proxy_indexer.hh\n  intern/movie_read.cc\n  intern/movie_read.hh\n  intern/movie_util.cc\n  intern/movie_util.hh\n  intern/movie_write.cc\n  intern/movie_write.hh\n  intern/movie_write_audio.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Files based on Internationalization (CMake)\nDESCRIPTION: This snippet conditionally adds source files related to internationalization support. If 'WITH_INTERNATIONAL' is enabled, 'messages.cc' and 'messages.hh' are added.  If on Apple systems, 'messages_apple.mm' is included for platform-specific internationalization features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  list(APPEND SRC\n    intern/messages.cc\n    intern/messages.hh\n  )\n\n  if(APPLE)\n    list(APPEND SRC\n      intern/messages_apple.mm\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Build\nDESCRIPTION: Enables unity builds for the `bf_nodes_function` target, which combines multiple source files into a single compilation unit. This reduces compilation overhead and can significantly improve build times, especially for large projects like Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_set_target_unity_build(bf_nodes_function 10)\n```\n\n----------------------------------------\n\nTITLE: MSVC Specific Definitions - CMake\nDESCRIPTION: This snippet adds a preprocessor definition `NOMINMAX` when using the MSVC compiler. This prevents conflicts between the Windows API's `min` and `max` macros and the standard C++ library's `std::min` and `std::max` functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n\tadd_definitions(\n\t\t/DNOMINMAX\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the Moto Library\nDESCRIPTION: This line uses the `blender_add_lib` macro (likely defined elsewhere in the Blender build system) to create the `bf_intern_moto` library. It passes the source files, include directories, system include directories, and library dependencies to the macro for library creation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/moto/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_moto \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding the BLF library\nDESCRIPTION: This snippet uses a custom CMake function 'blender_add_lib' to create the BLF library.  It passes the name of the library ('bf_blenfont'), the source files, include directories, and linked libraries as arguments. It also defines an alias for the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blenfont \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blenfont ALIAS bf_blenfont)\n```\n\n----------------------------------------\n\nTITLE: Overriding loggerName Property in KX_GameObject (UPBGE, Python)\nDESCRIPTION: This snippet demonstrates how to override the `loggerName` property of a `KX_GameObject`. This allows for customizing the name used for the logger instance associated with the object, which can be useful for organizing and filtering log messages.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_GameObject.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@property\n         def loggerName():\n            return \"MyObject\"\n```\n\n----------------------------------------\n\nTITLE: Remove GCC compiler flag\nDESCRIPTION: This snippet removes the `-Wmissing-declarations` compiler flag when using the GNU C++ compiler. This is done to avoid noisy warnings during the build process. It checks if the compiler is GCC before attempting to remove the flag, avoiding errors with other compilers.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gtest/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  remove_cc_flag(\n    \"-Wmissing-declarations\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Build for Compositor Nodes\nDESCRIPTION: This snippet sets the unity build setting for the 'bf_nodes_composite' library.  A unity build combines multiple source files into a single compilation unit to improve build times.  The value '10' likely represents a chunk size for combining files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nblender_set_target_unity_build(bf_nodes_composite 10)\n```\n\n----------------------------------------\n\nTITLE: Add Executable: gears_cpp (C++)\nDESCRIPTION: Adds an executable named `gears_cpp` built from a single C++ source file and links it against several libraries including ghost_lib, string_lib, OpenGL, and platform-specific link libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Gears (C++)\nadd_executable(gears_cpp\n  ${CMAKE_SOURCE_DIR}/gears/GHOST_Test.cpp\n)\n\ntarget_link_libraries(gears_cpp\n  ghost_lib\n  string_lib\n  ${OPENGL_gl_LIBRARY}\n  ${CMAKE_DL_LIBS}\n  ${PLATFORM_LINKLIBS}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library for Draco-Blender Module\nDESCRIPTION: Creates a shared library named `extern_draco` from the specified source files. It also sets the include directories and links the library against the Draco library.  This shared library can then be loaded by Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(extern_draco SHARED \"${SRC}\")\ntarget_include_directories(extern_draco PUBLIC \"${INC}\")\ntarget_link_libraries(extern_draco PUBLIC \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to a CMake Target\nDESCRIPTION: This snippet adds a dependency between the `bf_editor_space_view3d` library and the `bf_rna` library. This ensures that `bf_rna` is built before `bf_editor_space_view3d`, as the latter depends on the former.  This uses CMake's `add_dependencies` command.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(bf_editor_space_view3d bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Installing Shell Script (CMake)\nDESCRIPTION: This snippet installs the shell script 'lemon-0.x-to-1.x.sh' to the 'bin' directory, but only if the platform is not Windows (WIN32). The component is also set to 'bin'. This handles platform-specific installation requirements.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nIF(NOT WIN32)\n  INSTALL(\n    PROGRAMS ${CMAKE_CURRENT_SOURCE_DIR}/lemon-0.x-to-1.x.sh\n    DESTINATION bin\n    COMPONENT bin\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the list of source files (.cpp) and header files (.h) that make up the IK Solver library. These files contain the implementation and declarations for the IK Solver functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/iksolver/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/IK_QJacobian.cpp\n  intern/IK_QJacobianSolver.cpp\n  intern/IK_QSegment.cpp\n  intern/IK_QTask.cpp\n  intern/IK_Solver.cpp\n\n  extern/IK_solver.h\n  intern/IK_Math.h\n  intern/IK_QJacobian.h\n  intern/IK_QJacobianSolver.h\n  intern/IK_QSegment.h\n  intern/IK_QTask.h\n)\n```\n\n----------------------------------------\n\nTITLE: MSVC Clang TBB Definition\nDESCRIPTION: When compiling with MSVC Clang and TBB (Threading Building Blocks), the `_LIBCPP_VERSION` definition is appended to the CXX flags. This avoids potential errors due to incompatibility between TBB and the C++ standard library implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB AND MSVC_CLANG)\n  string(APPEND CMAKE_CXX_FLAGS \" /D_LIBCPP_VERSION\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating and Changing Directory (Batch)\nDESCRIPTION: This snippet creates the `c:\\db` directory if it does not exist and then changes the current working directory to `c:\\db`. It relies on the `if not exist` condition to avoid errors if the directory already exists.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/windows/vmbuild.cmd.txt#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nif not exist c:\\db ( \n  mkdir c:\\db\n)\ncd /d c:\\db\n```\n\n----------------------------------------\n\nTITLE: BMesh Split Faces Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for the BMesh split faces functionality. It loads the `split_faces_test.blend` and executes the embedded Python text block named `run_tests`. This test verifies the correct behavior of splitting faces in BMesh.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bmesh_split_faces\n    ${TEST_SRC_DIR}/modeling/split_faces_test.blend\n    --python-text run_tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias for the fmtlib Library in CMake\nDESCRIPTION: This snippet creates an alias `bf::extern::fmtlib` for the `extern_fmtlib` library. This allows other parts of the project to refer to the library using a more convenient and namespaced name. Aliases simplify dependency management and improve code readability.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf::extern::fmtlib ALIAS extern_fmtlib)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (CMake)\nDESCRIPTION: This snippet specifies the libraries that the node editor space module depends on.  It uses the `PRIVATE` keyword indicating that these libraries are only needed for building this target and not for any target that depends on it. The `bf_editor_screen` and `bf_compositor` don't use `PRIVATE` and are used as shared dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_screen\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_compositor\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compilation Target - CMake\nDESCRIPTION: This CMake snippet defines a custom target named `cycles_osl_shaders` which depends on all compiled OSL shaders (`SRC_OSO`), OSL headers (`SRC_OSL_HEADERS`), and the OSL compiler itself (`OSL_COMPILER`). This target ensures that all OSL shaders are compiled before other parts of the build process that depend on them. It also adds this target to the 'ALL' target so that all osl shaders are compiled in every build.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/shaders/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(cycles_osl_shaders ALL DEPENDS ${SRC_OSO} ${SRC_OSL_HEADERS} ${OSL_COMPILER} SOURCES ${SRC_OSL})\ncycles_set_solution_folder(cycles_osl_shaders)\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL Notice in Interactive Programs\nDESCRIPTION: This code snippet shows a short notice to output when a program starts in interactive mode. It displays the program's copyright, warranty disclaimer, and information on redistribution terms, directing users to more details through commands like `show w` and `show c`.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n<program>  Copyright (C) <year>  <name of author>\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the dependencies of the `bf_intern_clog` library. It depends on `bf::intern::guardedalloc` and `bf::intern::atomic`, which suggests that it uses guarded allocation and atomic operations internally. These are likely custom libraries provided by Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/clog/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::atomic\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Cycles)\nDESCRIPTION: Conditionally adds the 'cycles' subdirectory if the WITH_CYCLES flag is enabled. This includes the Cycles rendering engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES)\n  add_subdirectory(cycles)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Animation Action Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for animation actions using the `bl_animation_action.py` Python script. The snippet specifies the test directory and the output directory for the test results.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_animation_action\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_action.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n    --output-dir \"${TEST_OUT_DIR}/bl_animation_action\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet sets system include directories (`INC_SYS`) by referencing the `OPENCOLLADA_INCLUDE_DIRS` variable.  This variable contains the paths to OpenCOLLADA external library headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${OPENCOLLADA_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless or SDL\nDESCRIPTION: Configures the build for either headless mode or SDL. Headless adds a preprocessor definition. SDL appends source files, include directories, and libraries to support the SDL windowing system.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nelif(WITH_GHOST_SDL)\n  list(APPEND SRC\n    intern/GHOST_ContextSDL.cc\n    intern/GHOST_DisplayManagerSDL.cc\n    intern/GHOST_SystemSDL.cc\n    intern/GHOST_WindowSDL.cc\n\n    intern/GHOST_ContextSDL.hh\n    intern/GHOST_DisplayManagerSDL.hh\n    intern/GHOST_SystemSDL.hh\n    intern/GHOST_WindowSDL.hh\n  )\n  add_definitions(-DWITH_GHOST_SDL)\n\n  list(APPEND INC_SYS\n    ${SDL_INCLUDE_DIR}\n  )\n  list(APPEND LIB\n    ${SDL_LIBRARY}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Audaspace Libraries with CMake\nDESCRIPTION: This snippet conditionally installs Audaspace libraries (`audaspace.dll`, `audaspace-c.dll`, and `audaspace-py.dll`) to the root directory if the `WITH_SYSTEM_AUDASPACE` option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_SYSTEM_AUDASPACE)\n  install(\n    FILES\n      ${LIBDIR}/audaspace/lib/audaspace.dll\n      ${LIBDIR}/audaspace/lib/audaspace-c.dll\n      ${LIBDIR}/audaspace/lib/audaspace-py.dll\n    DESTINATION \".\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files for the OpenImageIO integration.  It lists both header (.h, .hh) and source (.cpp, .cc) files that are part of the module. These files contain the implementation of the OpenImageIO API and support code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/oiio/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  openimageio_api.h\n  openimageio_support.hh\n\n  openimageio_api.cpp\n  openimageio_support.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Physics Constraint Example in Python\nDESCRIPTION: This example demonstrates how to import the `bge` module, focusing on the constraints submodule. While the example doesn't show usage of constraint functions, it serves as a basic import statement for the physics constraint functionalities. It is a starting point to use the Bullet Physics engine in the Blender Game Engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.constraints.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\n# bge.constraints\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: This snippet sets the include directories required for compiling the Outliner space library. It includes paths to core Blender headers, external libraries (fmtlib), and generated headers from RNA definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_outliner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../blenfont\n  ../../makesrna\n\n  ../../../../extern/fmtlib/include\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Building with CMake on Windows (Shell)\nDESCRIPTION: This snippet shows how to use CMake to build the Vulkan Memory Allocator on Windows from the command line. It configures the build, enabling samples, and then opens the generated Visual Studio project.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# By default CMake picks the newest version of Visual Studio it can use\ncmake -S .  -B build -D VMA_BUILD_SAMPLES=ON\ncmake --open build\n```\n\n----------------------------------------\n\nTITLE: Conditional Alembic Configuration\nDESCRIPTION: This snippet configures Alembic integration. It adds the `-DWITH_ALEMBIC` definition and appends the Alembic include directories and libraries to `INC_SYS` and `LIB` respectively, enabling support for Alembic file format.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC_SYS\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${ALEMBIC_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Draco Library in CMake\nDESCRIPTION: This CMake snippet sets the include directories for the Draco library. It uses the `set` command to define a variable `INC` containing the path to the source directory (`src`). This allows the compiler to find header files required to compile the Draco source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/draco/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  src\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Mathutils Library\nDESCRIPTION: Uses the `blender_add_lib` function to create the `bf_python_mathutils` library. It takes the source files, include directories, and library dependencies defined earlier as input. This function handles the compilation and linking process to build the final mathutils library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/mathutils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_python_mathutils \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific C Flags\nDESCRIPTION: Sets platform-specific C flags. If using the GNU C compiler, it adds the `-funsigned-char` flag. For Unix-like systems (excluding macOS), it finds the X11 library and defines the necessary platform-specific link libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  set(PLATFORM_CFLAGS \"-funsigned-char\")\nendif()\n\nif(UNIX AND NOT APPLE)\n  find_package(X11 REQUIRED)\n\n  set(PLATFORM_LINKLIBS\n    ${X11_X11_LIB}\n    ${X11_Xinput_LIB}\n    -lpthread\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Library Dependencies\nDESCRIPTION: This snippet appends `bf::animrig` and `bf_draw_shaders` to the `LIB` variable as PRIVATE dependencies. This indicates that `bf_draw` depends on these libraries internally but they aren't exposed in its public interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND LIB\n  PRIVATE bf::animrig\n  bf_draw_shaders\n)\n```\n\n----------------------------------------\n\nTITLE: Set System Include Directories (CMake)\nDESCRIPTION: Sets the system include directories for the project.  These typically include external libraries like Boost. The compiler searches these directories for header files.  ${BOOST_INCLUDE_DIR} is expected to be a CMake variable that provides the path to the boost include directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../../intern/moto/include\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Freestyle in CMake\nDESCRIPTION: This snippet conditionally defines the `WITH_FREESTYLE` preprocessor macro if the `WITH_FREESTYLE` flag is enabled.  This macro enables Freestyle-related code within the 3D viewport editor module. It depends on a boolean variable that represents whether Freestyle is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Variables\nDESCRIPTION: Defines the LIB variable, representing external libraries to link against. Currently set to empty, which suggests that no external libraries are explicitly linked here, or that any required libraries are handled through other means within the CMake configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/decklink/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Add Blender Sculpt Operator Test (CMake)\nDESCRIPTION: This snippet adds a Blender test for sculpt operators. It checks if `TEST_SRC_DIR_EXISTS` is true and then calls the `add_blender_test` macro to define the test, specifying the Python script and test directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_sculpt_operators\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_sculpt.py\n    --\n    --testdir \"${TEST_SRC_DIR}/sculpting\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories for the DeckLink library. Currently, both INC and INC_SYS are set as empty, indicating that standard system include paths are used or that includes are added through other mechanisms within the CMake configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/decklink/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the glsl_preprocess Executable - CMake\nDESCRIPTION: This snippet creates the `glsl_preprocess` executable using the source files defined in the `SRC` variable. The `add_executable` command links the specified source files to produce the executable.  `SRC_DNA_INC` is assumed to be defined in the parent directory, although not shown in the included content.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/glsl_preprocess/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(glsl_preprocess ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Setting Audaspace Include Directories\nDESCRIPTION: This snippet defines the `HDR` variable by combining the `PRIVATE_HDR` and `PUBLIC_HDR` lists.  It then sets the `INCLUDE` variable to specify the include directories needed for compiling the Audaspace project. The `CMAKE_CURRENT_BINARY_DIR` and `include` directories are included.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(HDR ${PRIVATE_HDR} ${PUBLIC_HDR})\n\nset(INCLUDE ${CMAKE_CURRENT_BINARY_DIR} include)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files required to build the Blender editor space API. It sets the `SRC` variable to `spacetypes.cc`, indicating that this is the primary source file for this module. This source file will be compiled and linked into the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_api/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  spacetypes.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Fluid Library Append in CMake\nDESCRIPTION: This snippet conditionally appends the `bf_intern_mantaflow` library to the `LIB` list if the `WITH_MOD_FLUID` option is enabled. It also adds a preprocessor definition `-DWITH_FLUID` to enable fluid-specific code during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  list(APPEND LIB\n    bf_intern_mantaflow\n  )\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Open Image Denoise Integration - CMake\nDESCRIPTION: Conditionally includes Open Image Denoise integration, adding a preprocessor definition and system include directories to the Cycles build. This allows Cycles to use Intel's Open Image Denoise library for denoising rendered images.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  list(APPEND INC_SYS\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Vertex Shader Sources\nDESCRIPTION: Lists the GLSL files used as vertex shaders for the workbench. Each file listed here defines the vertex processing stage for a specific rendering effect or feature within the workbench.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_VERT\n  workbench_effect_smaa_vert.glsl\n  workbench_prepass_hair_vert.glsl\n  workbench_prepass_pointcloud_vert.glsl\n  workbench_prepass_vert.glsl\n  workbench_shadow_caps_vert.glsl\n  workbench_shadow_vert.glsl\n  workbench_volume_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Installing DLLs for Windows with CMake\nDESCRIPTION: This snippet conditionally installs DLL files on Windows systems. It checks if the WIN32 macro is defined and if the DLLS variable is set. If both conditions are true, it installs the specified DLLs to the BIN_DESTINATION directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n\tif(DLLS)\n\t\tinstall(FILES ${DLLS} DESTINATION ${BIN_DESTINATION})\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Launcher Library - CMake\nDESCRIPTION: This snippet adds the ge_launcher library using the `blender_add_lib` function, passing in the source files (SRC), include directories (INC), system include directories (INC_SYS), and linked libraries (LIB). This creates the actual library that will be built.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_launcher \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This section sets the include directories for the Bullet Physics Library build.  The `INC` variable specifies the directories where the compiler should search for header files during compilation.  The relative path \".\" refers to the current source directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  src\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directories (INC_SYS). It appears to be empty, which means that no specific system include paths are being added in this configuration. This could mean the system includes are handled elsewhere or are not needed for this module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/texture/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the project. It includes internal directories like '../include' and '../../makesrna', as well as the generated RNA_prototypes.hh in the build directory. The CMAKE_BINARY_DIR variable dynamically points to the current build directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories required to compile the node function source files. This includes local directories and those for internal Blender libraries. These paths are used by the compiler to resolve header file dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Python - CMake\nDESCRIPTION: Conditionally adds the Python include directory and defines a preprocessor macro if Python support is enabled. This allows the Render module to use Python scripting if the 'WITH_PYTHON' option is turned on.  Requires the existence of ../python directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: BMesh Boolean Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for the BMesh boolean operator. It loads the `bool_regression.blend` file and runs `boolean_operator.py` with the `--run-all-tests` argument. This test checks the boolean operation functionality of BMesh.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bmesh_boolean\n    ${TEST_SRC_DIR}/modeling/bool_regression.blend\n    --python ${TEST_PYTHON_DIR}/boolean_operator.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Printing to stdout using fmt\nDESCRIPTION: This C++ code snippet demonstrates how to print a simple \"Hello, world!\" message to standard output using the fmt library.  It requires including the `<fmt/core.h>` header file.  The `fmt::print` function is used to achieve this.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#include <fmt/core.h>\n    \n    int main() {\n      fmt::print(\"Hello, world!\\n\");\n    }\n```\n\n----------------------------------------\n\nTITLE: Conditional SDL Dependency\nDESCRIPTION: This snippet conditionally adds SDL include directories if the WITH_SDL option is enabled. It also adds preprocessor definitions to enable SDL and Ghost-SDL integration if WITH_GHOST_SDL is also enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_SDL)\n  list(APPEND INC_SYS\n    ${SDL_INCLUDE_DIR}\n  )\n  add_definitions(-DWITH_SDL)\n\n  if(WITH_GHOST_SDL)\n    add_definitions(-DWITH_GHOST_SDL)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Cineon (DPX) Support\nDESCRIPTION: Conditionally adds Cineon (DPX) support to the imbuf library. If `WITH_IMAGE_CINEON` is enabled, it appends `intern/format_dpx.cc` to the source files, appends `bf_imbuf_cineon` to the library dependencies, and adds the `-DWITH_IMAGE_CINEON` definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_CINEON)\n  list(APPEND SRC\n    intern/format_dpx.cc\n  )\n  list(APPEND LIB\n    bf_imbuf_cineon\n  )\n  add_definitions(-DWITH_IMAGE_CINEON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for TBB\nDESCRIPTION: This snippet conditionally handles TBB (Threading Building Blocks) integration. On Windows, it defines `NOMINMAX` to prevent conflicts with STL min/max functions caused by TBB's inclusion of Windows.h.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dependent Libraries - CMake\nDESCRIPTION: Specifies the libraries that the Alembic I/O library depends on. These include Blender's internal libraries and external libraries like Alembic and OpenEXR.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/alembic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n\n  ${ALEMBIC_LIBRARIES}\n  ${OPENEXR_LIBRARIES}\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Ceres Library (CMake)\nDESCRIPTION: This code snippet uses `blender_add_lib` (likely a custom function in the build environment) to create the `extern_ceres` library. It takes source files, include directories, system include directories, and library dependencies as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_ceres \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Audaspace Header with CMake\nDESCRIPTION: This CMake command configures the `Audaspace.h.in` file, placing the output in the binary directory.  The `ESCAPE_QUOTES` and `@ONLY` options are used to ensure proper handling of variables and quoting.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/config/Audaspace.h.in ${CMAKE_CURRENT_BINARY_DIR}/Audaspace.h ESCAPE_QUOTES @ONLY)\n\nlist(APPEND HDR ${CMAKE_CURRENT_BINARY_DIR}/Audaspace.h)\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender Macro\nDESCRIPTION: Uses the blender_add_lib macro to configure and add the extern_xdnd library to the build process. The macro takes the library name, source files, include directories, system include directories, and libraries as arguments. It handles the actual compilation and linking of the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xdnd/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_xdnd \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Alembic Dependency\nDESCRIPTION: This snippet conditionally adds Alembic as a dependency if WITH_ALEMBIC is enabled. It appends Alembic include directories and libraries to the INC_SYS and LIB variables, respectively.  It also adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC_SYS\n    ${ALEMBIC_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${ALEMBIC_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet lists the source files and header files that constitute the memory utility library. These files are compiled and linked together to create the library. The list includes both C++ source files (.cpp, .cc) and header files (.h, .hh).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/memutil/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/MEM_CacheLimiterC-Api.cpp\n  intern/MEM_RefCountedC-Api.cpp\n  intern/MEM_alloc_string_storage.cc\n\n  MEM_Allocator.h\n  MEM_CacheLimiter.h\n  MEM_CacheLimiterC-Api.h\n  MEM_RefCounted.h\n  MEM_RefCountedC-Api.h\n  MEM_alloc_string_storage.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Scripts and Modules in CMake\nDESCRIPTION: This snippet installs Blender scripts, including handling conditional exclusion of Freestyle scripts, and installs the `sitecustomize.py` file either into the Blender version directory or site-packages depending on module installation settings. It also manages draco library installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  # install(CODE \"message(\\\"copying blender scripts...\\\")\")\n\n  # do not install freestyle dir if disabled\n  if(NOT WITH_FREESTYLE)\n    set(FREESTYLE_EXCLUDE_CONDITIONAL \"freestyle/*\")\n  else()\n    set(FREESTYLE_EXCLUDE_CONDITIONAL \"_freestyle/*\")  # Dummy, won't do anything.\n  endif()\n\n  install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/scripts\n    DESTINATION ${TARGETDIR_VER}\n    PATTERN \".git\" EXCLUDE\n    PATTERN \".gitignore\" EXCLUDE\n    PATTERN \".gitea\" EXCLUDE\n    PATTERN \".github\" EXCLUDE\n    PATTERN \".arcconfig\" EXCLUDE\n    PATTERN \"__pycache__\" EXCLUDE\n    PATTERN \"site\" EXCLUDE\n    PATTERN \"${FREESTYLE_EXCLUDE_CONDITIONAL}\" EXCLUDE\n\n    # Exclude extensions development files.\n    PATTERN \"addons_core/bl_pkg/Makefile\" EXCLUDE\n    PATTERN \"addons_core/bl_pkg/tests\" EXCLUDE\n    PATTERN \"addons_core/bl_pkg/example_extension\" EXCLUDE\n  )\n\n  if(WITH_PYTHON_MODULE)\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/scripts/site/sitecustomize.py\n      DESTINATION ${TARGETDIR_VER}/scripts/startup\n      # Rename to avoid conflict with system `sitecustomize.py`.\n      RENAME bpy_site_customize.py\n    )\n  elseif(WITH_PYTHON_INSTALL)\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/scripts/site/sitecustomize.py\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n  endif()\n  unset(FREESTYLE_EXCLUDE_CONDITIONAL)\n\n  if(WITH_DRACO)\n    install(\n      PROGRAMS $<TARGET_FILE:extern_draco>\n      DESTINATION ${TARGETDIR_VER}/scripts/addons_core/io_scene_gltf2\n    )\n  endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the source files to be compiled for the OpenEXR image format integration. These files contain the actual implementation of the OpenEXR API within Blender. The header file is also defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/openexr/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  openexr_api.cpp\n  openexr_api.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Rasterizer Library\nDESCRIPTION: This snippet uses a custom function, `blender_add_lib`, to create the `ge_rasterizer` library. It specifies the source files, include directories, and linked libraries required for building the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_rasterizer \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining GLSL Shader Sources\nDESCRIPTION: This snippet defines a list of GLSL shader source files used in the project. These shaders are used for various GPU operations and are later compiled into C code for inclusion in the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_SRC_TEST\n  tests/shaders/gpu_math_test.glsl\n  tests/shaders/gpu_buffer_texture_test.glsl\n  tests/shaders/gpu_compute_1d_test.glsl\n  tests/shaders/gpu_compute_2d_test.glsl\n  tests/shaders/gpu_compute_ibo_test.glsl\n  tests/shaders/gpu_compute_ssbo_test.glsl\n  tests/shaders/gpu_compute_vbo_test.glsl\n  tests/shaders/gpu_compute_dummy_test.glsl\n  tests/shaders/gpu_specialization_test.glsl\n  tests/shaders/gpu_framebuffer_layer_viewport_test.glsl\n  tests/shaders/gpu_framebuffer_subpass_input_test.glsl\n  tests/shaders/gpu_push_constants_test.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet lists the source files (`.cpp` and `.h`) that make up the `ge_msg_network` library. These files contain the implementation and declarations for network message handling functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/KXNetwork/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  KX_NetworkMessageManager.cpp\n  KX_NetworkMessageScene.cpp\n\n  KX_NetworkMessageManager.h\n  KX_NetworkMessageScene.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This CMake code snippet defines the include directories for the UPBGE project. These directories contain header files that are necessary for compiling the source code.  It includes both project-specific paths and external library paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../ikplugin\n  ../makesrna\n  ../modifiers\n  ../nodes/geometry/include\n  ../shader_fx\n  ../simulation\n  ../windowmanager\n  ../../../intern/eigen\n  ../../../intern/ghost\n  ../../../intern/iksolver/extern\n  ../../../intern/libmv\n  ../../../intern/mantaflow/extern\n  ../../../intern/memutil\n  ../../../intern/mikktspace\n  ../../../intern/opensubdiv\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Fragment Shader Files\nDESCRIPTION: This snippet defines a CMake variable `SRC_GLSL_FRAG` containing a list of GLSL fragment shader files.  These shaders are responsible for determining the final color of each pixel. Each file listed is a string representing the filename of a fragment shader.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  gpu_shader_2D_area_borders_frag.glsl\n  gpu_shader_2D_line_dashed_frag.glsl\n  gpu_shader_2D_node_socket_frag.glsl\n  gpu_shader_2D_nodelink_frag.glsl\n  gpu_shader_2D_widget_base_frag.glsl\n  gpu_shader_2D_widget_shadow_frag.glsl\n  gpu_shader_3D_polyline_frag.glsl\n  gpu_shader_3D_smooth_color_frag.glsl\n  gpu_shader_checker_frag.glsl\n  gpu_shader_depth_only_frag.glsl\n  gpu_shader_diag_stripes_frag.glsl\n  gpu_shader_display_fallback_frag.glsl\n  gpu_shader_flat_color_frag.glsl\n  gpu_shader_gpencil_stroke_frag.glsl\n  gpu_shader_icon_frag.glsl\n  gpu_shader_image_color_frag.glsl\n  gpu_shader_image_desaturate_frag.glsl\n  gpu_shader_image_frag.glsl\n  gpu_shader_image_overlays_merge_frag.glsl\n  gpu_shader_image_overlays_stereo_merge_frag.glsl\n  gpu_shader_image_shuffle_color_frag.glsl\n  gpu_shader_keyframe_shape_frag.glsl\n  gpu_shader_point_uniform_color_aa_frag.glsl\n  gpu_shader_point_uniform_color_outline_aa_frag.glsl\n  gpu_shader_point_varying_color_frag.glsl\n  gpu_shader_sequencer_strips_frag.glsl\n  gpu_shader_sequencer_thumbs_frag.glsl\n  gpu_shader_simple_lighting_frag.glsl\n  gpu_shader_text_frag.glsl\n  gpu_shader_uniform_color_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. Ensures that the CMake version used to build the project is at least 3.5.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Target in CMake\nDESCRIPTION: This commented-out snippet demonstrates how to link libraries to a target using the `TARGET_LINK_LIBRARIES` command in CMake. It links the 'lemon' library to the 'myprog' executable target. This ensures that the executable can use functions and data defined in the linked library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# TARGET_LINK_LIBRARIES(myprog lemon)\n```\n\n----------------------------------------\n\nTITLE: Adding Library with No List in CMake\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_lib_nolist` to add the `ge_player` library.  It specifies the source files, include directories, system include directories, and libraries needed to build the library.  The function likely handles platform-specific configurations and dependencies internally. This call defines how the ge_player library is constructed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib_nolist(ge_player \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting SIMD Compiler Flags - CMake\nDESCRIPTION: This section configures compiler flags based on the detected SIMD support (SSE4.2, AVX2) and the compiler being used (MSVC, GCC, Intel). It utilizes `check_cxx_compiler_flag` to detect SIMD support and sets corresponding compiler flags.  Conditional logic determines SSE42 and AVX2 flags based on compiler, platform and version.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(WIN32 AND MSVC AND SUPPORT_NEON_BUILD AND SSE2NEON_FOUND)\n  set(CXX_HAS_SSE42 FALSE)\n  set(CXX_HAS_AVX2 FALSE)\nelif(NOT WITH_CPU_SIMD OR (SUPPORT_NEON_BUILD AND SSE2NEON_FOUND))\n  set(CXX_HAS_SSE42 FALSE)\n  set(CXX_HAS_AVX2 FALSE)\nelif(WIN32 AND MSVC AND NOT CMAKE_CXX_COMPILER_ID MATCHES \"Clang\")\n  set(CXX_HAS_SSE42 TRUE)\n  set(CXX_HAS_AVX2 TRUE)\n\n  # /arch:AVX for VC2012 and above\n  if(NOT MSVC_VERSION LESS 1700)\n    set(CYCLES_AVX2_FLAGS \"/arch:AVX /arch:AVX2\")\n  elseif(NOT CMAKE_CL_64)\n    set(CYCLES_AVX2_FLAGS \"/arch:SSE2\")\n  endif()\n\n  # there is no /arch:SSE3, but intrinsics are available anyway\n  if(CMAKE_CL_64)\n    set(CYCLES_SSE42_FLAGS \"\")\n  else()\n    set(CYCLES_SSE42_FLAGS \"/arch:SSE2\")\n  endif()\nelif(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n  check_cxx_compiler_flag(-msse4.2 CXX_HAS_SSE42)\n  check_cxx_compiler_flag(-mavx2 CXX_HAS_AVX2)\n\n  if(CXX_HAS_SSE42)\n    set(CYCLES_SSE42_FLAGS \"-msse -msse2 -msse3 -mssse3 -msse4.1 -msse4.2\")\n    if(CXX_HAS_AVX2)\n      set(CYCLES_AVX2_FLAGS \"${CYCLES_SSE42_FLAGS} -mavx -mavx2 -mfma -mlzcnt -mbmi -mbmi2 -mf16c\")\n    endif()\n  endif()\n\nelif(WIN32 AND CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n  check_cxx_compiler_flag(/QxSSE4.2 CXX_HAS_SSE42)\n  check_cxx_compiler_flag(/QxCORE-AVX2 CXX_HAS_AVX2)\n\n  if(CXX_HAS_SSE42)\n    set(CYCLES_SSE42_FLAGS \"/QxSSE4.2\")\n\n    if(CXX_HAS_AVX2)\n      set(CYCLES_AVX2_FLAGS \"/QxCORE-AVX2\")\n    endif()\n  endif()\nelif(CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\n  check_cxx_compiler_flag(-xsse4.2 CXX_HAS_SSE42)\n  check_cxx_compiler_flag(-xcore-avx2 CXX_HAS_AVX2)\n\n  if(CXX_HAS_SSE42)\n    set(CYCLES_SSE42_FLAGS \"-xsse4.2\")\n\n    if(CXX_HAS_AVX2)\n      set(CYCLES_AVX2_FLAGS \"-xcore-avx2\")\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Memory Deallocation with MEM_freeN\nDESCRIPTION: This function frees a previously allocated memory block. It takes a pointer to the memory block as input and releases the memory back to the system. The function returns 0 on success and a non-zero value on error, providing a basic error checking mechanism.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nshort MEM_freeN(void *vmemh);\n```\n\n----------------------------------------\n\nTITLE: Set GLSL Library Sources - CMake\nDESCRIPTION: This snippet defines the list of GLSL library files (SRC_GLSL_LIB) used by the Eevee rendering engine. These files contain reusable functions, data structures, and definitions that are shared across multiple shaders. They promote code reuse and maintainability. The shaders are written in GLSL.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/eevee/shaders/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_LIB\n  eevee_ambient_occlusion_lib.glsl\n  eevee_attributes_curves_lib.glsl\n  eevee_attributes_gpencil_lib.glsl\n  eevee_attributes_mesh_lib.glsl\n  eevee_attributes_pointcloud_lib.glsl\n  eevee_attributes_volume_lib.glsl\n  eevee_attributes_world_lib.glsl\n  eevee_bxdf_diffuse_lib.glsl\n  eevee_bxdf_lib.glsl\n  eevee_bxdf_microfacet_lib.glsl\n  eevee_camera_lib.glsl\n  eevee_closure_lib.glsl\n  eevee_colorspace_lib.glsl\n  eevee_cryptomatte_lib.glsl\n  eevee_depth_of_field_accumulator_lib.glsl\n  eevee_depth_of_field_lib.glsl\n  eevee_film_lib.glsl\n  eevee_filter_lib.glsl\n  # eevee_forward_lib.glsl\n  eevee_gbuffer_lib.glsl\n  eevee_horizon_scan_eval_lib.glsl\n  eevee_horizon_scan_lib.glsl\n  eevee_light_eval_lib.glsl\n  eevee_light_iter_lib.glsl\n  eevee_light_lib.glsl\n  eevee_lightprobe_eval_lib.glsl\n  eevee_lightprobe_lib.glsl\n  eevee_lightprobe_sphere_eval_lib.glsl\n  eevee_lightprobe_sphere_lib.glsl\n  eevee_lightprobe_sphere_mapping_lib.glsl\n  eevee_lightprobe_volume_eval_lib.glsl\n  eevee_ltc_lib.glsl\n  eevee_motion_blur_lib.glsl\n  # eevee_nodetree_lib.glsl # Has dependency on draw_model_lib that is hard to resolve\n  eevee_occupancy_lib.glsl\n  eevee_octahedron_lib.glsl\n  eevee_ray_generate_lib.glsl\n  eevee_ray_trace_screen_lib.glsl\n  eevee_ray_types_lib.glsl\n  eevee_renderpass_lib.glsl\n  eevee_sampling_lib.glsl\n  eevee_shadow_lib.glsl\n  eevee_shadow_page_ops_lib.glsl\n  eevee_shadow_tag_usage_lib.glsl\n  eevee_shadow_tilemap_lib.glsl\n  eevee_shadow_tracing_lib.glsl\n  eevee_spherical_harmonics_lib.glsl\n  eevee_subsurface_lib.glsl\n  eevee_surf_lib.glsl\n  eevee_surfel_list_lib.glsl\n  eevee_thickness_lib.glsl\n  # eevee_transparency_lib.glsl # Require Fragment shader include\n  # eevee_velocity_lib.glsl # Has dependency on draw_model_lib that is hard to resolve\n  eevee_volume_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: Sets the `INC` variable to '..', likely representing the parent directory of the current CMakeLists.txt file. This indicates that include files are located one level up in the directory structure. This variable is later used to add include directories to the compilation process.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet demonstrates how to set include directories using the `INCLUDE_DIRECTORIES` command in CMake. It adds the project source directory and the project binary directory to the include path, allowing the compiler to find header files located in these directories. These directories are essential for resolving dependencies during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Blender Target (CMake)\nDESCRIPTION: This snippet conditionally installs the `blender` target as a library if `WITH_PYTHON_MODULE` is enabled and `TARGETDIR_BPY` is defined. The library is installed to the `${TARGETDIR_BPY}` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_PYTHON_MODULE AND TARGETDIR_BPY)\n    install(\n      TARGETS blender\n      LIBRARY DESTINATION ${TARGETDIR_BPY}\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Install Directory Macro\nDESCRIPTION: This CMake macro, `install_dir`, simplifies the installation of directories while excluding specific patterns. It's used to install directories from a source location to a destination, excluding files and directories matching predefined patterns such as version control metadata (.git, .svn), compiled Python files (*.pyc, *.pyo), temporary files (*.orig, *.rej), and other unnecessary items. The macro takes a `from` and `to` directory as input and utilizes the `install(DIRECTORY)` command.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(install_dir from to)\n    install(\n      DIRECTORY ${from}\n      DESTINATION ${to}\n      PATTERN \".git\" EXCLUDE\n      PATTERN \".svn\" EXCLUDE\n      PATTERN \"*.pyc\" EXCLUDE\n      PATTERN \"*.pyo\" EXCLUDE\n      PATTERN \"*.orig\" EXCLUDE\n      PATTERN \"*.rej\" EXCLUDE\n      PATTERN \"__pycache__\" EXCLUDE\n      PATTERN \"__MACOSX\" EXCLUDE\n      PATTERN \".DS_Store\" EXCLUDE\n      PATTERN \"config-${PYTHON_VERSION}/*.a\" EXCLUDE  # static lib\n      PATTERN \"lib2to3\" EXCLUDE                   # ./lib2to3\n      PATTERN \"tkinter\" EXCLUDE                   # ./tkinter\n      PATTERN \"lib-dynload/_tkinter.*\" EXCLUDE    # ./lib-dynload/_tkinter.co\n      PATTERN \"idlelib\" EXCLUDE                   # ./idlelib\n      PATTERN \"test\" EXCLUDE                      # ./test\n      PATTERN \"turtledemo\" EXCLUDE                # ./turtledemo\n      PATTERN \"turtle.py\" EXCLUDE                 # ./turtle.py\n      PATTERN \"wininst*.exe\" EXCLUDE              # from distutils, avoid malware false positive\n    )\n  endmacro()\n```\n\n----------------------------------------\n\nTITLE: Appending Include Directories - CMake\nDESCRIPTION: Appends specified include directories to the INC list.  These directories are searched by the compiler for header files during the build process.  Different directories are included depending on build configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  list(APPEND INC ../../intern/utfconv)\nendif()\n\nif(WITH_LIBMV)\n  list(APPEND INC ../../intern/libmv)\nendif()\n\nif(WITH_CYCLES)\n  if(WITH_CYCLES_LOGGING)\n    list(APPEND INC ../../intern/cycles/blender)\n  endif()\nendif()\n\nif(WITH_TBB)\n  list(APPEND INC ${TBB_INCLUDE_DIRS})\nendif()\n\nif(WITH_PYTHON)\n  list(APPEND INC ../blender/python)\nendif()\n\nif(WITH_GAMEENGINE)\n  list(APPEND INC ../gameengine/BlenderRoutines)\n  list(APPEND INC ../gameengine/Converter)\n  list(APPEND INC ../gameengine/Launcher)\nendif()\n\nif(WITH_BINRELOC)\n  list(APPEND INC ${BINRELOC_INCLUDE_DIRS})\nendif()\n\nif(WITH_FREESTYLE)\n  list(APPEND INC ../blender/freestyle)\nendif()\n\nif(WITH_GMP)\n  list(APPEND INC ${GMP_INCLUDE_DIRS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building the Blender test executable (CMake)\nDESCRIPTION: This snippet calls `blender_src_gtest_ex` to build the `blender_test` executable. It specifies the source files and extra libraries to link against.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nblender_src_gtest_ex(\n  NAME blender\n  SRC \"${SRC}\"\n  EXTRA_LIBS \"${TEST_LIBS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing zstandard Library\nDESCRIPTION: This CMake code conditionally installs the zstandard library. It checks if `WITH_PYTHON_INSTALL_ZSTANDARD` is enabled. If so, it installs the zstandard directory to the correct destination, excluding cache files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\n      if(WITH_PYTHON_INSTALL_ZSTANDARD)\n        # Install to the same directory as the source, so debian-like\n        # distributions are happy with their policy.\n        set(_suffix \"site-packages\")\n        if(${PYTHON_ZSTANDARD_PATH} MATCHES \"dist-packages\")\n          set(_suffix \"dist-packages\")\n        endif()\n        install(\n          DIRECTORY ${PYTHON_ZSTANDARD_PATH}/zstandard\n          DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n          PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n          PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n          PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n        )\n        unset(_suffix)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Adding blender_cpu_check library in CMake\nDESCRIPTION: This snippet adds the `blender_cpu_check` library to the build process using the `add_library` command. It specifies that the library should be built as a SHARED library using the source files defined in the `SRC` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(blender_cpu_check SHARED ${SRC})\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency to RNA - CMake\nDESCRIPTION: Adds a build dependency from the 'bf_modifiers' library to the 'bf_rna' library, ensuring that RNA is built before modifiers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_modifiers bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet sets the `SRC` variable to a list of C++ source files that constitute the Cycles unit tests. These files cover various aspects of the rendering engine, including integrators, kernels, render graphs, and utilities. They likely contain Google Test assertions to verify the correctness of different components.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  integrator_adaptive_sampling_test.cpp\n  integrator_render_scheduler_test.cpp\n  integrator_tile_test.cpp\n  kernel_camera_projection_test.cpp\n  render_graph_finalize_test.cpp\n  util_aligned_malloc_test.cpp\n  util_boundbox_test.cpp\n  util_ies_test.cpp\n  util_math_test.cpp\n  util_math_fast_test.cpp\n  util_math_float3_test.cpp\n  util_math_float4_test.cpp\n  util_md5_test.cpp\n  util_path_test.cpp\n  util_string_test.cpp\n  util_task_test.cpp\n  util_time_test.cpp\n  util_transform_test.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories (CMake)\nDESCRIPTION: Sets the include directories for the project.  These include directories are searched by the compiler to find header files during compilation. It encompasses project-specific directories, as well as directories from external libraries such as blender and ketsji.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../Common\n  ../../Common\n  ../../Converter\n  ../../Expressions\n  ../../GameLogic\n  ../../Ketsji\n  ../../Rasterizer\n  ../../SceneGraph\n  ../../../blender/blenkernel\n  ../../../blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HIPRT SDK Files - CMake\nDESCRIPTION: This CMake code defines the header files for the HIPRT SDK. These headers include implementations for AABB, BVH nodes, geometry, device implementation, bitcode kernels, instances, QR decomposition, quaternions, scenes, transforms, and triangles.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_HIPRT_SDK\n  hiprt/impl/Aabb.h\n  hiprt/impl/BvhNode.h\n  hiprt/impl/Geometry.h\n  hiprt/impl/hiprt_device_impl.h\n  hiprt/impl/hiprt_kernels_bitcode.h\n  hiprt/impl/Instance.h\n  hiprt/impl/QrDecomposition.h\n  hiprt/impl/Quaternion.h\n  hiprt/impl/Scene.h\n  hiprt/impl/Transform.h\n  hiprt/impl/Triangle.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configure Gflags and Glog usage\nDESCRIPTION: These options determine whether to use system-wide Gflags and Glog libraries or bundled versions. Gflags is a command-line flag processing library, and Glog is a logging library. Both options are marked as advanced settings.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_SYSTEM_GFLAGS \"Use system-wide Gflags instead of a bundled one\" OFF)\noption(WITH_SYSTEM_GLOG \"Use system-wide Glog instead of a bundled one\" OFF)\nmark_as_advanced(WITH_SYSTEM_GFLAGS)\nmark_as_advanced(WITH_SYSTEM_GLOG)\n```\n\n----------------------------------------\n\nTITLE: Setting C Standard for GCC/Clang/Intel\nDESCRIPTION: This snippet sets the C standard to gnu11 for GCC, Clang (excluding Clang on Windows/MSVC), and Intel compilers. It appends the `-std=gnu11` flag to the CMAKE_C_FLAGS variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_136\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR\n   (CMAKE_C_COMPILER_ID MATCHES \"Clang\" AND (NOT MSVC)) OR\n   (CMAKE_C_COMPILER_ID STREQUAL \"Intel\"))\n\n  # Use C11 + GNU extensions, works with GCC, Clang, ICC\n  string(APPEND CMAKE_C_FLAGS \" -std=gnu11\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Include Directories\nDESCRIPTION: Defines the include directories required for GLSL shader compilation. These paths are necessary for the shader compiler to locate header files and shared code used by the shaders.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  # For variadic macros\n  ../../../../blenlib\n\n  ../../../intern\n  ../../../intern/shaders\n\n  ../../../../gpu\n  ../../../../gpu/intern\n  ../../../../gpu/shaders\n  ../../../../gpu/shaders/common\n  ../../../../gpu/shaders/infos\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories in CMake\nDESCRIPTION: This snippet defines a variable `INC_SYS`. In this specific case, it is an empty set which implies no additional system include directories are required for the fmtlib. If system includes were needed, they would be listed here.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: Defines include directories for the armature editor library. These directories contain header files required to compile the source code. It includes both relative paths and a variable referencing the binary directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/armature/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Finding OpenCOLLADA Animation Clip Header\nDESCRIPTION: This snippet uses the `find_file` command to locate the `COLLADAFWAnimationClip.h` header file within the specified `OPENCOLLADA_INCLUDE_DIRS`. The `NO_DEFAULT_PATH` option prevents searching in default system directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_file(OPENCOLLADA_ANIMATION_CLIP\n  NAMES\n    COLLADAFWAnimationClip.h\n  PATHS\n    ${OPENCOLLADA_INCLUDE_DIRS}\n  NO_DEFAULT_PATH\n)\n```\n\n----------------------------------------\n\nTITLE: Running Blender in Background with Python Script\nDESCRIPTION: Executes a Python script using Blender in background mode.  This is useful for running scripts without the Blender UI. Requires Blender executable to be in the system's PATH or the full path to be specified.  The `--background` option prevents Blender from opening a window.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nblender --background --python myscript.py\n```\n\n----------------------------------------\n\nTITLE: Defining a PropertyGroup Subclass\nDESCRIPTION: This example demonstrates how to define a custom `PropertyGroup` subclass and add a property to it. This approach is equivalent to defining the property directly within the class definition. This is a common way to organize and manage custom properties within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyPropGroup(bpy.types.PropertyGroup):\n    pass\nMyPropGroup.my_float: bpy.props.FloatProperty()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Fragment Shader Sources\nDESCRIPTION: Defines the list of GLSL fragment shader source files used for Grease Pencil rendering. These files contain the fragment processing logic that determines the final pixel color.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  gpencil_antialiasing_accumulation_frag.glsl\n  gpencil_antialiasing_frag.glsl\n  gpencil_depth_merge_frag.glsl\n  gpencil_frag.glsl\n  gpencil_layer_blend_frag.glsl\n  gpencil_mask_invert_frag.glsl\n  gpencil_vfx_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the Depsgraph library. It includes both public and system include paths, including source directories and the generated RNA prototypes directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../animrig\n  ../makesrna\n  ../modifiers\n  ../nodes\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Shader Source Dictionary Example\nDESCRIPTION: This code snippet demonstrates the structure of the 'sources' dictionary used with the (deprecated) setSourceList method of the BL_Shader class.  The dictionary maps shader types (vertex, fragment, geometry) to their respective program source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.BL_Shader.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsources = {\n    \"vertex\" : vertexProgram,\n    \"fragment\" : fragmentProgram,\n    \"geometry\" : geometryProgram\n}\n```\n\n----------------------------------------\n\nTITLE: Add Library (CMake)\nDESCRIPTION: Adds a library named 'ge_physics_bullet' using the specified source files, include directories, and libraries.  This command creates the actual library that will be used by other parts of the UPBGE engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_physics_bullet \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files (cpp and header files) that make up the launcher library. The `set` command is used to create a list of source files for the ge_launcher library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  LA_BlenderLauncher.cpp\n  LA_Launcher.cpp\n  LA_PlayerLauncher.cpp\n  LA_SystemCommandLine.cpp\n  LA_System.cpp\n\n  LA_BlenderLauncher.h\n  LA_Launcher.h\n  LA_PlayerLauncher.h\n  LA_SystemCommandLine.h\n  LA_System.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenVDB support\nDESCRIPTION: This snippet configures OpenVDB support. It defines WITH_OPENVDB and OPENVDB_DEFINITIONS, and includes the OpenVDB include directories. It allows the program to use OpenVDB features if the appropriate flags and dependencies are available.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\n  include_directories(\n    SYSTEM\n    ${OPENVDB_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define WITH_FREESTYLE CMake Variable\nDESCRIPTION: This snippet conditionally defines the WITH_FREESTYLE preprocessor macro based on the WITH_FREESTYLE CMake option. When WITH_FREESTYLE is enabled, the -DWITH_FREESTYLE flag is added to the compilation definitions. This enables Freestyle-specific code paths within the project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining GPU Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the GPU kernel. These headers include image handling, kernel function declarations, and parallel algorithm implementations.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_GPU_HEADERS\n  device/gpu/image.h\n  device/gpu/kernel.h\n  device/gpu/parallel_active_index.h\n  device/gpu/parallel_prefix_sum.h\n  device/gpu/parallel_sorted_index.h\n  device/gpu/work_stealing.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This CMake snippet defines the include directories required for compiling the `bf_freestyle` module. It includes both relative paths within the Blender source tree and system include directories for Python.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../makesrna\n  ../python\n  ../python/intern\n  ../render/intern\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting C and C++ Flags\nDESCRIPTION: This snippet sets the C and C++ flags by concatenating the C_WARNINGS, CMAKE_C_FLAGS, PLATFORM_CFLAGS variables for C and CXX_WARNINGS, CMAKE_CXX_FLAGS, PLATFORM_CFLAGS variables for C++. This includes the warnings and platform-specific flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_138\n\nLANGUAGE: cmake\nCODE:\n```\n# Include warnings first, so its possible to disable them with user defined flags\n# eg: -Wno-uninitialized\nset(CMAKE_C_FLAGS \"${C_WARNINGS} ${CMAKE_C_FLAGS} ${PLATFORM_CFLAGS}\")\nset(CMAKE_CXX_FLAGS \"${CXX_WARNINGS} ${CMAKE_CXX_FLAGS} ${PLATFORM_CFLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the bf_python_bmesh library. It includes both local include directories ('.') and system include directories obtained from Python (${PYTHON_INCLUDE_DIRS}). These directories are used to find header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/bmesh/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Path Test Script in UPBGE\nDESCRIPTION: This command executes the 'paths_test.py' script located in the './utils/' directory. The script is presumably designed to test and validate file paths within the UPBGE project. It requires a working Python environment and assumes the script is executable from the project's root directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/scripts/addons_core/node_wrangler/README.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n./utils/paths_test.py\n```\n\n----------------------------------------\n\nTITLE: Adding the Library (Cmake)\nDESCRIPTION: This snippet calls a custom CMake macro, `blender_add_lib`, to create the Cineon/DPX image buffer library named `bf_imbuf_cineon`.  It passes the source files, include directories, system include directories and linked libraries as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/cineon/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_imbuf_cineon \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Safety Build Option in CMake\nDESCRIPTION: This snippet shows how to enable the `WITH_PYTHON_SAFETY` option during the CMake build process for Blender. Enabling this option raises Python exceptions when accessing freed data, aiding in debugging but reducing performance.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nWITH_PYTHON_SAFETY\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Suite Setup\nDESCRIPTION: This snippet conditionally includes the test suite setup based on the `WITH_GTESTS` CMake variable. If `WITH_GTESTS` is enabled, the test suite configuration is executed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/stl_exporter_tests.cc\n  )\n\n  set(TEST_INC\n    ${INC}\n\n    ../../blenloader\n    ../../../../tests/gtests\n  )\n\n  set(TEST_LIB\n    ${LIB}\n\n    bf_blenloader_test_util\n    bf_io_stl\n  )\n\n  blender_add_test_suite_lib(io_stl \"${TEST_SRC}\" \"${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the Quadriflow library. It specifies that the library depends on `bf::intern::guardedalloc` and `bf::dependencies::eigen` which are internal Blender libraries.  It also creates a library named `extern_quadriflow`.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/quadriflow/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::dependencies::eigen\n  extern_quadriflow\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Library Sources\nDESCRIPTION: Lists the GLSL files containing reusable functions and definitions used by the other shaders. These libraries promote code reuse and maintainability.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_LIB\n  workbench_effect_dof_lib.glsl\n  workbench_cavity_lib.glsl\n  workbench_common_lib.glsl\n  workbench_curvature_lib.glsl\n  workbench_image_lib.glsl\n  workbench_matcap_lib.glsl\n  workbench_material_lib.glsl\n  workbench_shadow_lib.glsl\n  workbench_world_light_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries (Cmake)\nDESCRIPTION: This snippet defines the private linked libraries required by the Cineon/DPX image buffer library. These are Blender's internal libraries. `bf::blenkernel`, `bf::blenlib`, `bf::dna`, and `bf::intern::guardedalloc`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/cineon/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Wayland Dynload)\nDESCRIPTION: Conditionally adds the 'wayland_dynload' subdirectory if the platform is UNIX and not APPLE, and if WITH_GHOST_WAYLAND and WITH_GHOST_WAYLAND_DYNLOAD are both enabled. This inclusion depends on GHOST's CMake definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  # Important this comes after \"ghost\" as it uses includes defined by GHOST's CMake.\n  if(WITH_GHOST_WAYLAND AND WITH_GHOST_WAYLAND_DYNLOAD)\n    add_subdirectory(wayland_dynload)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (USD) - CMake\nDESCRIPTION: This snippet conditionally appends the USD I/O library, adds USD include directories to the system include paths, and defines a preprocessor definition if the WITH_USD flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD)\n  list(APPEND INC_SYS\n    ${USD_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_io_usd\n  )\n  add_definitions(-DWITH_USD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Header File CMake\nDESCRIPTION: Configures a header file from a template. It takes the input file (${CMAKE_CURRENT_SOURCE_DIR}/config.h.in) and generates the output file (${CMAKE_CURRENT_BINARY_DIR}/config.h) by replacing variables in the template.  This allows generating config files based on the current environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/config.h.in\n  ${CMAKE_CURRENT_BINARY_DIR}/config.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: Defines the include directories required to compile the gizmo library. These directories contain header files needed for the source files. Includes relative paths and a CMake binary directory path.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/gizmo_library/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../interface\n  ../../makesrna\n  ../../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Print Allocated Memory List\nDESCRIPTION: This function dumps a list of all currently allocated memory blocks with their length and name to the error stream, if the stream is set by `MEM_set_error_stream()`. This is a useful debugging tool for identifying memory leaks or excessive memory consumption.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nvoid MEM_printmemlist(void);\n```\n\n----------------------------------------\n\nTITLE: Define Stub Macro: blender_add_lib\nDESCRIPTION: Defines a macro `blender_add_lib` which currently does nothing. This might be a placeholder for a more complex library addition process, potentially used for compatibility with other build scripts.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# stub macro, does nothing\nmacro(blender_add_lib\n  name\n  sources\n  includes\n  includes_sys\n  library_deps # ignored.\n  )\n\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Conditional OSL Configuration\nDESCRIPTION: This snippet conditionally appends the OSL libraries to the `LIB` variable if the `WITH_CYCLES_OSL` option is enabled. It appends both the `cycles_kernel_osl` library and the user-defined `OSL_LIBRARIES` to provide shader support.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB\n    cycles_kernel_osl\n    ${OSL_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handling UnicodeEncodeError When Printing File Paths\nDESCRIPTION: This snippet demonstrates a common error encountered when printing file paths with non-ASCII characters and provides a solution using `repr()` to safely print the path.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_file_paths_and_encoding.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> print(bpy.data.filepath)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 10-21: ordinal not in range(128)\n\n>>> print(repr(bpy.data.filepath))\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (General)\nDESCRIPTION: This snippet adds compiler definitions based on the variable `${GL_DEFINITIONS}`. These definitions are preprocessor macros that can control conditional compilation and enable or disable certain features based on the build configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(${GL_DEFINITIONS})\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files CMake\nDESCRIPTION: This snippet conditionally defines test-related variables if `WITH_GTESTS` is enabled. It sets the source files, include directories, and library dependencies for the test suite. These settings are used to compile and link the test suite for the io_common library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/common/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    intern/abstract_hierarchy_iterator_test.cc\n    intern/object_identifier_test.cc\n    intern/string_utils_tests.cc\n  )\n  set(TEST_INC\n    ../../blenloader\n  )\n  set(TEST_LIB\n    bf_blenloader_test_util\n    bf_io_common\n  )\n  blender_add_test_suite_lib(io_common \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Audaspace Library CMake\nDESCRIPTION: This snippet uses the blender_add_lib function (presumably a custom function within the UPBGE build system) to add the Audaspace library. It specifies the target name ('bf_intern_audaspace'), source files, include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/audaspace/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_audaspace \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Audaspace Configuration - CMake\nDESCRIPTION: This snippet conditionally configures the build process if Audaspace is enabled (`WITH_AUDASPACE` is true). It appends the Audaspace include directories to the `INC_SYS` list and the Audaspace libraries to the `LIB` list. It also adds the `-DWITH_AUDASPACE` compiler definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${AUDASPACE_C_LIBRARIES}\n    ${AUDASPACE_PY_LIBRARIES}\n  )\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Library - CMake\nDESCRIPTION: This snippet uses the blender_add_lib CMake function to create the bf_editor_lattice library. It takes the library name, source files, include directories, and library dependencies as input. This function handles the compilation and linking process to produce the final library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/lattice/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_lattice \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Performance Test Executable (CMake)\nDESCRIPTION: Adds the performance test executable using `blender_add_test_performance_executable`. It links the executable `IMB_performance` using source file `IMB_scaling_performance_test.cc` and specified include directories (`INC`, `INC_SYS`) and libraries (`LIB`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/tests/performance/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_performance_executable(IMB_performance \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Address Sanitizer (ASAN)\nDESCRIPTION: This CMake snippet configures address sanitizer (ASAN) support for GCC and Clang compilers. It defines options to enable ASAN for Debug and RelWithDebInfo targets and handles platform-specific settings, including finding the ASAN library on different operating systems.  It sets compiler flags and links the appropriate ASAN library.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_COMPILER_ASAN \"\\\nBuild and link against address sanitizer (only for Debug & RelWithDebInfo targets).\"\n  OFF\n)\nmark_as_advanced(WITH_COMPILER_ASAN)\noption(WITH_COMPILER_ASAN_EXTERN \"\\\nBuild `extern` dependencies with address sanitizer when WITH_COMPILER_ASAN is on. \\\nCan cause linking issues due to too large binary size.\"\n  OFF\n)\nmark_as_advanced(WITH_COMPILER_ASAN_EXTERN)\nset_and_warn_incompatible(WITH_COMPILER_ASAN WITH_MEM_JEMALLOC OFF)\nset_and_warn_incompatible(WITH_COMPILER_ASAN WITH_MEM_VALGRIND OFF)\nset_and_warn_incompatible(WITH_COMPILER_ASAN_EXTERN WITH_MEM_JEMALLOC OFF)\nset_and_warn_incompatible(WITH_COMPILER_ASAN_EXTERN WITH_MEM_VALGRIND OFF\n```\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  if(WITH_COMPILER_ASAN)\n    set(_asan_defaults \"\\\n-fsanitize=address \\\n-fsanitize=bool \\\n-fsanitize=bounds \\\n-fsanitize=enum \\\n-fsanitize=float-cast-overflow \\\n-fsanitize=float-divide-by-zero \\\n-fsanitize=nonnull-attribute \\\n-fsanitize=returns-nonnull-attribute \\\n-fsanitize=signed-integer-overflow \\\n-fsanitize=undefined \\\n-fsanitize=vla-bound \\\n-fno-sanitize=alignment \\\n\")\n\n    if(MSVC)\n      # clang-cl doesn't support all sanitizers, but leak and object-size give errors/warnings.\n      set(_asan_defaults \"${_asan_defaults}\")\n    elseif(APPLE)\n      # AppleClang doesn't support all sanitizers, but leak gives error.\n      # Build type is not known for multi-config generator, so don't add object-size sanitizer.\n      if(CMAKE_BUILD_TYPE MATCHES \"Debug\" OR GENERATOR_IS_MULTI_CONFIG)\n        # Silence the warning that object-size is not effective in -O0.\n        set(_asan_defaults \"${_asan_defaults}\")\n      else()\n        string(APPEND _asan_defaults \" -fsanitize=object-size\")\n      endif()\n    elseif(CMAKE_COMPILER_IS_GNUCC)\n      string(APPEND _asan_defaults \" -fsanitize=leak -fsanitize=object-size\")\n    else()\n      string(APPEND _asan_defaults \" -fsanitize=leak\")\n    endif()\n\n    set(COMPILER_ASAN_CFLAGS \"${_asan_defaults}\" CACHE STRING \"C flags for address sanitizer\")\n    mark_as_advanced(COMPILER_ASAN_CFLAGS)\n    set(COMPILER_ASAN_CXXFLAGS \"${_asan_defaults}\" CACHE STRING \"C++ flags for address sanitizer\")\n    mark_as_advanced(COMPILER_ASAN_CXXFLAGS)\n\n    unset(_asan_defaults)\n\n    if(MSVC)\n      find_library(\n        COMPILER_ASAN_LIBRARY NAMES clang_rt.asan-x86_64\n        PATHS\n        [HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node\\\\LLVM\\\\LLVM;]/lib/clang/7.0.0/lib/windows\n        [HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Wow6432Node\\\\LLVM\\\\LLVM;]/lib/clang/6.0.0/lib/windows\n      )\n      mark_as_advanced(COMPILER_ASAN_LIBRARY)\n    elseif(APPLE)\n      execute_process(COMMAND ${CMAKE_CXX_COMPILER}\n        -print-file-name=lib\n        OUTPUT_VARIABLE CLANG_LIB_DIR\n      )\n      string(STRIP \"${CLANG_LIB_DIR}\" CLANG_LIB_DIR)\n      find_library(\n        COMPILER_ASAN_LIBRARY\n        NAMES\n          libclang_rt.asan_osx_dynamic.dylib\n        PATHS\n          \"${CLANG_LIB_DIR}/darwin/\"\n      )\n      unset(CLANG_LIB_DIR)\n      mark_as_advanced(COMPILER_ASAN_LIBRARY)\n    elseif(CMAKE_COMPILER_IS_GNUCC)\n      find_library(\n        COMPILER_ASAN_LIBRARY asan ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES}\n      )\n      mark_as_advanced(COMPILER_ASAN_LIBRARY)\n    endif()\n\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This code defines CMake variables to specify include directories for the gtest library. `INC` is used to define local include directories (relative to the current CMakeLists.txt) and `INC_SYS` is used to define system include directories. In this case, the `INC_SYS` variable is empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gtest/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  include\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directories for the IK Solver library. In this case, it is an empty set, indicating no specific system include directories are required.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/iksolver/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This CMake code snippet installs bundled libraries to a specified destination directory. It checks if the `PLATFORM_BUNDLED_LIBRARIES` variable is defined and if `TARGETDIR_LIB` is also defined. If both conditions are true, it installs the files listed in `PLATFORM_BUNDLED_LIBRARIES` to the directory specified by `TARGETDIR_LIB`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n\n  if(PLATFORM_BUNDLED_LIBRARIES AND TARGETDIR_LIB)\n    install(\n      FILES ${PLATFORM_BUNDLED_LIBRARIES}\n      DESTINATION ${TARGETDIR_LIB}\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: MSVC Debug Flag Workaround\nDESCRIPTION: This snippet provides a workaround for a known issue with the MSVC 2015 compiler when building in debug mode. It adds specific compiler flags to increase the number of sections allowed in the object file format, preventing potential linking errors with large projects.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC14)\n  set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /bigobj /Zi /Od /Ob0\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enable LLVM\nDESCRIPTION: These options control the use of LLVM (Low Level Virtual Machine) and Clang.  `WITH_LLVM` enables the use of LLVM, `LLVM_STATIC` enables linking with LLVM static libraries, and `WITH_CLANG` enables the use of the Clang compiler.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_LLVM \"Use LLVM\" OFF)\noption(LLVM_STATIC \"Link with LLVM static libraries\" OFF)\nmark_as_advanced(LLVM_STATIC)\noption(WITH_CLANG \"Use Clang\" OFF)\n```\n\n----------------------------------------\n\nTITLE: Adding the Geometry Library\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_lib` to add the geometry library, specifying its source files, include directories, system include directories, and linked libraries. It also creates an alias for the library target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_geometry \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::geometry ALIAS bf_geometry)\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Sample\nDESCRIPTION: This code is a sample copyright disclaimer that an employer or school can sign for a program. It disclaims all copyright interest in the specified program, transferring the rights to the public domain.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/GPL-2.0-or-later.txt#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Adding the Library\nDESCRIPTION: Creates a library named bf_intern_wayland_dynload using the specified source files, include directories, and libraries.  This command encapsulates the compilation and linking steps. Defines the library target in the CMake build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/wayland_dynload/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n\n\nblender_add_lib(bf_intern_wayland_dynload \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Thumbnailer Target\nDESCRIPTION: This CMake snippet conditionally installs the `blender-thumbnailer` target to the root directory (`.`). The installation is performed only if the `WITH_BLENDER_THUMBNAILER` variable is enabled. This creates the thumbnailer for `.blend` files in the system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\n    if(WITH_BLENDER_THUMBNAILER)\n      install(\n        TARGETS blender-thumbnailer\n        DESTINATION \".\"\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Add Definition to Workaround Makefile Issues\nDESCRIPTION: This snippet adds a preprocessor definition to enable a workaround for dependency issues specifically when using Unix Makefiles as the CMake generator. This workaround forces files to be regenerated even if they haven't changed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_GENERATOR MATCHES \".*Unix Makefiles\")\n  add_definitions(-DUSE_MAKEFILE_WORKAROUND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies with CMake\nDESCRIPTION: This snippet defines external libraries to link against. It's currently empty, indicating that no external libraries are explicitly linked.  This could mean that the library only depends on system libraries or other internal Blender libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/gpudirect/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable 'dimacs-to-lgf' (CMake)\nDESCRIPTION: This snippet creates an executable named 'dimacs-to-lgf' from the source file 'dimacs-to-lgf.cc'. It then links this executable against the 'lemon' library. This allows the executable to use functionality provided by the lemon library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(dimacs-to-lgf dimacs-to-lgf.cc)\nTARGET_LINK_LIBRARIES(dimacs-to-lgf lemon)\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging Library Linking - CMake\nDESCRIPTION: Conditionally includes Google Logging (glog) and Google Flags (gflags) libraries in the linking stage when `WITH_CYCLES_LOGGING` is enabled. This allows for detailed logging during Cycles development and debugging.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_LOGGING)\n  list(APPEND LIB\n    ${GLOG_LIBRARIES}\n    ${GFLAGS_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines the include directories required for compiling the network message management code. It specifies both local project directories and system include paths, allowing the compiler to find necessary header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/KXNetwork/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../../Common\n  ../../Expressions\n  ../../GameLogic\n  ../../SceneGraph\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Module Definitions - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_PYTHON_MODULE` option is enabled. If it is, it adds the `-DPy_ENABLE_SHARED` definition, which is necessary for building a shared Python module. This allows UPBGE to be extended with Python scripts.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_definitions(-DPy_ENABLE_SHARED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenXR support\nDESCRIPTION: This snippet adds a preprocessor definition `-DWITH_XR_OPENXR` if the `WITH_XR_OPENXR` option is enabled. This enables OpenXR support, likely for Virtual Reality (VR) and Augmented Reality (AR) applications.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional OSL Integration - CMake\nDESCRIPTION: Conditionally includes Open Shading Language (OSL) integration, appending the OSL libraries to the list of libraries to link with Cycles. This enables Cycles to use OSL shaders for advanced material creation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB\n    ${OSL_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Constraints Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for constraints. It utilizes the `bl_constraints.py` Python script to perform the test, and specifies the test directory. The test does not load a blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    constraints\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_constraints.py\n    --\n    --testdir \"${TEST_SRC_DIR}/constraints\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Note using Square Wave Generator\nDESCRIPTION: This snippet creates a square wave using aud.Sound.square(), applies fadein and fadeout effects, and stores the result in the 'note' variable. This constructs a single note for the Tetris music.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nnote = aud.Sound.square(freq, rate).fadein(0, fadelength).fadeout(length - fadelength, fadelength)\n```\n\n----------------------------------------\n\nTITLE: Access Object Location by Name in Blender (bpy.data)\nDESCRIPTION: This snippet demonstrates how to access the location of an object in Blender by its name using the bpy.data.objects[\"Cube\"].location property. It assumes an object named \"Cube\" exists in the Blender scene. It shows data access directly bypassing the user context.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nbpy.data.objects[\"Cube\"].location\n```\n\n----------------------------------------\n\nTITLE: Documenting getGameObjectFromObject method\nDESCRIPTION: This snippet documents the `getGameObjectFromObject` method which retrieves a KX_GameObject corresponding to a Blender object. It takes a bpy.types.Object as input and returns a bge.types.KX_GameObject.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_Scene.rst#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n   .. method:: getGameObjectFromObject(blenderObject)\n\n      Get the KX_GameObject corresponding to the blenderObject.\n\n      :arg blenderObject: the Object from which we want to get the KX_GameObject.\n      :type blenderObject: :class:`bpy.types.Object`\n      :rtype: :class:`~bge.types.KX_GameObject`\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that comprise the Quadriflow library. `quadriflow_capi.cpp` and `quadriflow_capi.hpp` are identified as the core implementation files for the Quadriflow C API, which will be compiled to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/quadriflow/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  quadriflow_capi.cpp\n  quadriflow_capi.hpp\n)\n```\n\n----------------------------------------\n\nTITLE: Cloning the fmt benchmark repository\nDESCRIPTION: This snippet clones the format-benchmark repository, changes directory into it, and generates Makefiles using CMake. It's a prerequisite to running speed and bloat tests for the fmt library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone --recursive https://github.com/fmtlib/format-benchmark.git\n$ cd format-benchmark\n$ cmake .\n```\n\n----------------------------------------\n\nTITLE: Setting Clear Color with glClearColor (bgl)\nDESCRIPTION: Specifies the color values used when clearing color buffers.  'red', 'green', 'blue', and 'alpha' define the color used in the glClear operation.  This function sets the background color for rendering.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glClearColor(red, green, blue, alpha)\n```\n\n----------------------------------------\n\nTITLE: Configure .pypirc for PyPI Authentication (Python)\nDESCRIPTION: Configures the .pypirc file with authentication details for PyPI and bpy repositories. The file stores the username (__token__) and a secret token to allow uploads.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/pypi/README.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[distutils]\n  index-servers =\n    pypi\n    bpy\n[pypi]\n  username = __token__\n  password = <SECRET_PYPI_TOKEN>\n[bpy]\n  repository = https://upload.pypi.org/legacy/\n  username = __token__\n  password = <SECRET_PYPI_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories needed to compile the shader node code. It includes relative paths within the Blender project, as well as a path for generated RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../makesrna\n  ../../../../intern/sky/include\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories required for compiling the source files. These directories contain header files necessary for the transform editor library. It includes both project-specific and potentially system-level includes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/transform/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../ikplugin\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Braking Force (KX_VehicleWrapper)\nDESCRIPTION: This method applies a braking force to a specified wheel of the vehicle. It takes the brake force as a float and the wheel index as an integer. The force is applied to the wheel identified by the index.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: applyBraking(force, wheelIndex)\n\n      Apply a braking force to the specified wheel\n\n      :arg force: the brake force\n      :type force: float\n\n      :arg wheelIndex: index of the wheel where the force needs to be applied\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Setting source files for gflags\nDESCRIPTION: This snippet defines the source files required to build the gflags library. It includes both C++ source files and header files that define the library's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  src/gflags.cc\n  src/gflags_completions.cc\n  src/gflags_reporting.cc\n\n  src/gflags/config.h\n  src/gflags/gflags_completions.h\n  src/gflags/gflags_declare.h\n  src/gflags/gflags_gflags.h\n  src/gflags/gflags.h\n  src/mutex.h\n  src/util.h\n)\n```\n\n----------------------------------------\n\nTITLE: Define Source Files\nDESCRIPTION: Defines the source files used to build the URI conversion library. The list includes 'uri_convert.cc' (the C++ implementation) and 'uri_convert.hh' (the header file defining the interface). These files contain the logic for URI conversion.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/uriconvert/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  uri_convert.cc\n\n  uri_convert.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional FFMPEG Configuration\nDESCRIPTION: This snippet conditionally adds the FFMPEG include directories and the WITH_FFMPEG definition if the WITH_CODEC_FFMPEG option is enabled. It also adds the PThreads include directory which FFMPEG depends on.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  list(APPEND INC_SYS\n    ${FFMPEG_INCLUDE_DIRS}\n    ${PTHREADS_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files - CMake\nDESCRIPTION: Defines the source files for the unit tests of the Alembic I/O library. This section is conditional based on the `WITH_GTESTS` flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/alembic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/abc_export_test.cc\n    tests/abc_matrix_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    bf_io_alembic\n  )\n  blender_add_test_suite_lib(io_alembic \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Draco\nDESCRIPTION: Defines the include directory for the Draco library, specifying the path to the Draco header files. This allows the compiler to find the necessary header files when compiling code that uses the Draco library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  draco/src\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies in CMake\nDESCRIPTION: This snippet adds a dependency of the `bf_editor_physics` library on the `bf_rna` library. This means that the `bf_rna` library must be built before the `bf_editor_physics` library can be built. The RNA library is responsible for generating RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_physics bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Operator Call and Error Handling in Blender\nDESCRIPTION: This snippet demonstrates calling a Blender operator and handling the potential RuntimeError that can occur if the operator's poll function fails due to an incorrect context. The specific operator is `bpy.ops.action.clean`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_operators.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> bpy.ops.action.clean(threshold=0.001)\n   RuntimeError: Operator bpy.ops.action.clean.poll() failed, context is incorrect\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the glog library. It includes the 'src' directory and the directory containing gflags headers. This ensures that the compiler can find the necessary header files for glog and its dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  src\n  ../gflags/src\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the local include directories (`INC`) required for compiling the OpenCOLLADA library. These include directories contain header files specific to the OpenCOLLADA importer/exporter and related Blender components.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../editors/include\n  ../../ikplugin\n  ../../makesrna\n  ../../../../intern/iksolver/extern\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Library - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` function (likely a custom CMake function) to create the `ge_device` library. It passes the source files, include directories, and linked libraries to this function.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(ge_device \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Scene Library\nDESCRIPTION: This snippet adds a library named `cycles_scene`. It includes the libraries defined in the `LIB` variable, the source files defined in the `SRC` variable, and the header files defined in the `SRC_HEADERS` variable. This creates the core Cycles scene component library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_add_library(cycles_scene \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Setting up Heavy Library Pool\nDESCRIPTION: This snippet calls the `setup_heavy_lib_pool()` function. This function is likely defined elsewhere and is responsible for configuring a build pool for 'heavy' sub-modules, potentially optimizing the build process when using the Ninja builder.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_145\n\nLANGUAGE: cmake\nCODE:\n```\nsetup_heavy_lib_pool()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: This snippet defines the include directories required to compile the NLA editor library. It specifies paths to the project's internal include directory, the makesrna directory, and the generated RNA prototypes header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_nla/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for glsl_preprocess - CMake\nDESCRIPTION: This snippet defines the source files used to build the `glsl_preprocess` executable. It assigns the list of source files (`glsl_preprocess.cc`, `glsl_preprocess.hh`) to the `SRC` variable. These files contain the C++ source code for the GLSL preprocessor.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/glsl_preprocess/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  glsl_preprocess.cc\n\n  glsl_preprocess.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional SDL Inclusion - CMake\nDESCRIPTION: This snippet conditionally appends the SDL include directory and adds a preprocessor definition if `WITH_SDL` is enabled. This allows building the library with SDL support if it is available.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_SDL)\n  list(APPEND INC_SYS\n    ${SDL_INCLUDE_DIR}\n  )\n\n  add_definitions(-DWITH_SDL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This command defines the list of source files (`.cpp`) that make up the Cycles utility library.  These source files contain the implementation of various utility functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  aligned_malloc.cpp\n  debug.cpp\n  ies.cpp\n  log.cpp\n  math_cdf.cpp\n  md5.cpp\n  murmurhash.cpp\n  path.cpp\n  profiling.cpp\n  string.cpp\n  system.cpp\n  task.cpp\n  thread.cpp\n  time.cpp\n  transform.cpp\n  transform_avx2.cpp\n  windows.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Blender Library\nDESCRIPTION: Creates a Blender library named `bf_intern_eigen` using the specified source files, include directories, system include directories, and dependencies. The `blender_add_lib` macro likely handles the actual compilation and linking process, ensuring the library is built correctly within the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/eigen/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_eigen \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Freestyle Rendering\nDESCRIPTION: This snippet adds a preprocessor definition `-DWITH_FREESTYLE` if the `WITH_FREESTYLE` option is enabled. This enables the Freestyle non-photorealistic rendering engine, which is used to create line-based renderings.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Defines the system include directories required for the WindowManager. These paths are added to the compiler's system include search path.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Siren Sound Properties\nDESCRIPTION: This snippet defines properties for a siren sound, including the length and fade length. It also initializes an aud.Device object. This sets up the parameters used for generating the sound effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python\nimport aud, math, time\nlength = 0.5\nfadelength = 0.05\n\ndevice = aud.Device()\n```\n\n----------------------------------------\n\nTITLE: Defining SYCL compiler flags\nDESCRIPTION: This snippet defines the compiler flags for SYCL compilation. It includes flags for SYCL features, optimization levels, include directories, and defines. Includes flags for offline compilation and compression.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nset(sycl_compiler_flags\n    ${CMAKE_CURRENT_SOURCE_DIR}/${SRC_KERNEL_DEVICE_ONEAPI}\n    -fsycl\n    -fsycl-unnamed-lambda\n    -fdelayed-template-parsing\n    -fsycl-device-code-split=per_kernel\n    -fsycl-max-parallel-link-jobs=${SYCL_OFFLINE_COMPILER_PARALLEL_JOBS}\n    --offload-compress\n    --offload-compression-level=19\n    -shared\n    -DWITH_ONEAPI\n    -O2\n    -ffast-math\n    -D__KERNEL_LOCAL_ATOMIC_SORT__\n    -o\"${cycles_kernel_oneapi_lib}\"\n    -I\"${CMAKE_CURRENT_SOURCE_DIR}/..\"\n    ${SYCL_CPP_FLAGS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet defines a variable `INC` which stores the path to the public include directory. This variable is later used when creating the library to specify where the header files are located. This ensures that other parts of the project can include these header files when using the fmtlib.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC include\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Player Library Append - CMake\nDESCRIPTION: This snippet conditionally appends the `ge_player` library to the `LIB` variable if the `WITH_PLAYER` flag is enabled. This allows building the launcher with player support when the `WITH_PLAYER` option is enabled. `list(APPEND ...)` adds an element to a list.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PLAYER)\n    list(APPEND LIB\n      ge_player\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This code snippet sets the library dependencies for the edit mesh library.  It lists all the required Blender libraries for compiling edit mesh features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Includes (CMake)\nDESCRIPTION: Conditionally appends the Python include directories to INC_SYS if Python support is enabled (WITH_PYTHON is true).  ${PYTHON_INCLUDE_DIRS} is a CMake variable that provides the path to the Python include directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND INC_SYS\n    ${PYTHON_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Single Binary Testing Option\nDESCRIPTION: This option links GTest tests into a single binary, which can improve build speed and reduce disk space, but may slow down individual test builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_TESTS_SINGLE_BINARY \"\\\nLink GTest tests into a single binary. \\\nFor faster overall build and less disk space, but slower individual test build\"\n  ON\n)\nmark_as_advanced(WITH_TESTS_SINGLE_BINARY)\n```\n\n----------------------------------------\n\nTITLE: Adding Post-Build Installation Message CMake\nDESCRIPTION: This snippet adds a post-build command to display a helpful tip on how to install the runtime files. It determines the appropriate install command based on the CMake generator and echoes a message after the build process. It relies on variables such as `TARGETDIR_VER` and `CMAKE_INSTALL_PREFIX`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n# Show helpful tip.\nset(_install_cmd \"\")\nif(\"${CMAKE_GENERATOR}\" MATCHES \".*Makefiles.*\")\n  set(_install_cmd \"make install\")\nelseif(\"${CMAKE_GENERATOR}\" MATCHES \"Ninja\")\n  set(_install_cmd \"ninja install\")\nendif()\nif(NOT (\"${_install_cmd}\" STREQUAL \"\"))\n  # Message to display after building.\n  get_filename_component(_install_dst ${TARGETDIR_VER} ABSOLUTE BASE_DIR ${CMAKE_INSTALL_PREFIX})\n  add_custom_command(\n    TARGET blender POST_BUILD\n    COMMAND\n      ${CMAKE_COMMAND} -E echo\n      \"Run: \\\"${_install_cmd}\\\" to copy runtime files and scripts to: ${_install_dst}\"\n  )\n  unset(_install_dst)\nendif()\nunset(_install_cmd)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with AUDASPACE\nDESCRIPTION: This snippet conditionally includes AUDASPACE support if the `WITH_AUDASPACE` option is enabled. It appends the AUDASPACE include directories to `INC_SYS`. If `WITH_SYSTEM_AUDASPACE` is also enabled, it appends the AUDASPACE libraries to the `LIB` list. It defines `-DWITH_AUDASPACE` to enable corresponding code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-specific source files\nDESCRIPTION: This conditional snippet adds Windows-specific source files (`src/windows_port.cc` and `src/windows_port.h`) to the list of source files when building on Windows. These files likely contain implementations specific to the Windows operating system.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  list(APPEND SRC\n    src/windows_port.cc\n    src/windows_port.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Looping Playback with aud.Handle\nDESCRIPTION: This snippet plays a sound using aud.Device.play() and sets the loop_count property of the aud.Handle object to -1, which causes the sound to loop indefinitely. Requires a valid aud.Device and aud.Sound object.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nhandle = device.play(sound)\nhandle.loop_count = -1\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (Collada) - CMake\nDESCRIPTION: This snippet conditionally appends the Collada I/O library and defines a preprocessor definition if the WITH_OPENCOLLADA flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLLADA)\n  list(APPEND LIB\n    bf_io_collada\n  )\n  add_definitions(-DWITH_COLLADA)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries (LIB)\nDESCRIPTION: Defines the list of libraries that the gizmo library depends on. These libraries provide functionality used by the gizmo library. All listed libraries are marked as PRIVATE.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/gizmo_library/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: String Size Debug Option\nDESCRIPTION: This snippet defines an option, `WITH_STRSIZE_DEBUG`, to enable debugging of string operations on fixed-size buffers. It's designed to work with address sanitizers and Valgrind to detect incorrect buffer size arguments.  The option is marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_STRSIZE_DEBUG \"\\\nEnsure string operations on fixed size buffers \\\n(works well with with \\\"WITH_COMPILER_ASAN\\\" & valgrind to detect incorrect buffer size arguments)\"\n  OFF\n)\nmark_as_advanced(WITH_STRSIZE_DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of C++ source files and header files that constitute the simulation library. These files contain the implementation of various simulation algorithms and data structures, such as mass-spring systems, hair volume calculations, and implicit surface handling. Header files declare classes, functions, and data structures for use in the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/simulation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/SIM_mass_spring.cc\n  intern/hair_volume.cc\n  intern/implicit_blender.cc\n  intern/implicit_eigen.cc\n\n  intern/ConstrainedConjugateGradient.h\n  intern/eigen_utils.h\n  intern/implicit.h\n\n  SIM_mass_spring.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding C Compiler Flags for GCC/Clang\nDESCRIPTION: This snippet adds specific C compiler flags when the compiler is GCC or Clang.  It disables certain deprecated, strict prototype, bitwise operation, implicit conversion, and single bit bitfield constant conversion warnings. It uses the `add_check_c_compiler_flags` function to add these flags to the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_124\n\nLANGUAGE: cmake\nCODE:\n```\nadd_check_c_compiler_flags(\n    C_WARN_NO_DEPRECATED_DECLARATIONS -Wno-deprecated-declarations\n    C_WARN_NO_STRICT_PROTOTYPES -Wno-strict-prototypes\n    C_WARN_NO_BITWISE_INSTEAD_OF_LOGICAL -Wno-bitwise-instead-of-logical\n    C_WARN_NO_IMPLICIT_CONST_INT_FLOAT_CONVERSION -Wno-implicit-const-int-float-conversion\n    C_WARN_NO_SINGLE_BIT_BITFIELD_CONSTANT_CONVERSION -Wno-single-bit-bitfield-constant-conversion\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies on RNA Generation\nDESCRIPTION: This snippet adds an explicit dependency of the `bf_editor_space_nla` library on the `bf_rna` target. This ensures that the RNA (Runtime Nodal Architecture) code is generated before the NLA editor library is built, as the library relies on generated RNA code (specifically `RNA_prototypes.hh` and `dna_type_offsets.h`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_nla/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_nla bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Installing Executables (CMake)\nDESCRIPTION: This snippet installs the compiled executables (lgf-gen, dimacs-to-lgf, dimacs-solver) to the 'bin' directory. The component is also set to 'bin'. This ensures that the executables are placed in the correct location during installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(\n  TARGETS lgf-gen dimacs-to-lgf dimacs-solver\n  RUNTIME DESTINATION bin\n  COMPONENT bin\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Library (blender_add_lib)\nDESCRIPTION: Calls the `blender_add_lib` CMake function to create the gizmo library. It specifies the target name (`bf_editor_gizmo_library`), source files, include directories, system include directories, and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/gizmo_library/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_gizmo_library \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines the source files to be compiled into the library. It includes 'sound_ops.cc' as a source file and 'sound_intern.hh' as a header file. The source files contain the implementation of the sound editor functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  sound_ops.cc\n\n  sound_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header and Source Files for pystring\nDESCRIPTION: This snippet defines the header and source files that constitute the pystring library.  These are used to create the library target.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_pystring.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(HEADERS\n\tpystring.h\n)\n\nset(SOURCES\n\tpystring.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Constraint ID using getConstraintId - Python\nDESCRIPTION: This method retrieves the constraint ID as an integer. It takes a value as an argument but its purpose is not clear from the documentation. It does not appear to modify the constraint itself.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_ConstraintWrapper.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getConstraintId(val)\n\n      Returns the constraint ID\n\n      :return: the constraint ID\n      :rtype: integer\n```\n\n----------------------------------------\n\nTITLE: Adding RNA Dependency CMake\nDESCRIPTION: This snippet adds a dependency on the RNA library to the sequencer library, ensuring that the RNA library is built before the sequencer library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_sequencer bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Inefficient String Checking: Slicing (Python)\nDESCRIPTION: Shows the inefficient method of checking a string's start using slicing. Slicing might cause errors, and has poorer performance.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif line[0:5] == \"vert \": ...\n```\n\n----------------------------------------\n\nTITLE: Definition of from_chars_result struct\nDESCRIPTION: Defines the structure `from_chars_result` which is the return type of the `from_chars` function. It contains a pointer (`ptr`) to the end of the parsed number and an error code (`ec`) indicating success or failure.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nstruct from_chars_result {\n    const char* ptr;\n    std::errc ec;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating the Outliner Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the Outliner space library.  It specifies the library name (bf_editor_space_outliner) and uses the previously defined variables for source files, include directories, and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_outliner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_outliner \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library (CMake)\nDESCRIPTION: This snippet defines a Blender library named `bf_editor_space_node` using the specified source files, include directories, system include directories, and libraries. This creates a library target within the CMake project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_node \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Include GFlags Header (New)\nDESCRIPTION: This code snippet shows the updated way to include the GFlags header file in version 1.0 and later. The header files have been moved from `/usr/include/google` to `/usr/include/gflags`. This is the recommended way to include the header.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/README.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n   #include <gflags/gflags.h>\n```\n\n----------------------------------------\n\nTITLE: Find Packages\nDESCRIPTION: Uses `find_package` to locate the OpenGL, Freetype, and ZLIB libraries, which are required dependencies.  It also sets include directories for them.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(OpenGL REQUIRED)\n\nfind_package(Freetype REQUIRED)\n\nfind_package(ZLIB REQUIRED)\n\ninclude_directories(${CMAKE_SOURCE_DIR}/../)\ninclude_directories(${OPENGL_INCLUDE_DIR})\ninclude_directories(${FREETYPE_INCLUDE_DIRS})\ninclude_directories(${CMAKE_SOURCE_DIR}/../../../source/blender/blenfont)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Files in CMake\nDESCRIPTION: This snippet defines a variable `LIB`. In this case, it's empty, suggesting that no pre-compiled library files are directly included.  This approach relies on compiling the sources defined in `SRC` to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library for Unix Platforms (excluding Apple)\nDESCRIPTION: This snippet conditionally adds the `bf_intern_libc_compat` library to the list of libraries if the platform is Unix but not Apple. This ensures compatibility with libc on Unix-like systems.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  list(APPEND LIB\n    bf_intern_libc_compat\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: Specifies system-level include directories required for the Alembic I/O library, typically provided by external libraries like Alembic and OpenEXR, ensuring the compiler can find necessary headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/alembic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${ALEMBIC_INCLUDE_DIRS}\n  ${OPENEXR_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring pkg-config File with CMake\nDESCRIPTION: This snippet configures the `theora.pc.in` file, replacing variables with their actual values. The resulting `theora.pc` file is then used by pkg-config to provide information about the Theora library.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/theora.pc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/theora.pc\n    @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Setting source files\nDESCRIPTION: This snippet defines the source files for the hipew library. It includes C and C++ source files, as well as header files. Additional source files are conditionally included based on the availability of HIP.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/hipew/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  src/hipew.c\n  include/hipew.h\n  include/hipew6.h\n  include/hipew5.h\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Xcode Warning Flags\nDESCRIPTION: This snippet disables the GCC_WARN_64_TO_32_BIT_CONVERSION attribute in Xcode projects to match the command-line build and other platforms more closely. This avoids warnings related to 64-bit to 32-bit conversion.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_130\n\nLANGUAGE: cmake\nCODE:\n```\nif(XCODE)\n  set(CMAKE_XCODE_ATTRIBUTE_GCC_WARN_64_TO_32_BIT_CONVERSION NO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying a Threshold Effect to Create a Square Wave\nDESCRIPTION: This snippet applies a threshold effect to a sine wave using aud.Sound.threshold() to create a square wave. This demonstrates how to apply effects to aud.Sound objects. The input is a sine wave aud.Sound object, and the output is a square wave aud.Sound object.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nsquare = sine.threshold()\n```\n\n----------------------------------------\n\nTITLE: Including Apple Platform Configuration\nDESCRIPTION: This CMake snippet includes a separate file to handle platform-specific settings for Apple systems. If the platform is macOS, it includes the `platform_apple_xcode` file, which likely contains configurations related to Xcode and macOS SDKs.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_78\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  include(platform_apple_xcode)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files with CMake\nDESCRIPTION: This snippet defines the source files that make up the point cloud editor library. These are the C++ files containing the implementation logic for the library's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/pointcloud/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/attribute_set.cc\n  intern/duplicate.cc\n  intern/edit.cc\n  intern/join.cc\n  intern/operators.cc\n  intern/selection.cc\n  intern/separate.cc\n  intern/undo.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Game Engine Icons (CMake)\nDESCRIPTION: This snippet conditionally installs a directory containing game engine icons if `WITH_GAMEENGINE` is enabled. The icons are installed into the `rceditcustom` subdirectory within the `TARGETDIR_VER` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_GAMEENGINE)\n    install(\n      DIRECTORY ${CMAKE_SOURCE_DIR}/release/windows/icons/rceditcustom/\n      DESTINATION ${TARGETDIR_VER}/rceditcustom\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Steering Value (KX_VehicleWrapper)\nDESCRIPTION: This method sets the steering value for a specified wheel. The steering value determines the angle of the wheel for steering purposes. The method requires the steering value (float) and the wheel index (integer).\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setSteeringValue(steering, wheelIndex)\n\n      Set the specified wheel's steering\n\n      :arg steering: the wheel steering\n      :type steering: float\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Processing Bundled Libraries (CMake)\nDESCRIPTION: This snippet conditionally calls the `windows_process_platform_bundled_libraries` function if `PLATFORM_BUNDLED_LIBRARIES` is defined. This function (presumably custom) handles processing platform-specific bundled libraries. This likely occurs only on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\n  if(PLATFORM_BUNDLED_LIBRARIES)\n    windows_process_platform_bundled_libraries(\"${PLATFORM_BUNDLED_LIBRARIES}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ceres Library Dependencies (CMake)\nDESCRIPTION: This code snippet defines the dependencies for the Ceres library. It includes GLOG, GFLAGS, and Eigen.  These are necessary for compiling and linking the Ceres Solver library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  ${GLOG_LIBRARIES}\n  ${GFLAGS_LIBRARIES}\n\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Python Script from the Command Line - Shell\nDESCRIPTION: This code snippet shows how to execute a Python script from the command line using Blender. It demonstrates how to specify the Python script to be run when starting Blender from the command line, enabling automated tasks or batch processing.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nblender --python /home/me/my_script.py\n```\n\n----------------------------------------\n\nTITLE: Setting Sky Library Dependency\nDESCRIPTION: This snippet conditionally adds either extern_sky or bf_intern_sky to the LIB variable depending on the CYCLES_STANDALONE_REPOSITORY variable. This handles the sky library based on the repository configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CYCLES_STANDALONE_REPOSITORY)\n  list(APPEND LIB extern_sky)\nelse()\n  list(APPEND LIB bf_intern_sky)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files CMake\nDESCRIPTION: Defines the list of source files (`.c` and `.h`) that make up the `extern_curve_fit_nd` library. These files are used to compile the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/curve_fit_nd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/curve_fit_cubic.c\n  intern/curve_fit_cubic_refit.c\n  intern/curve_fit_corners_detect.c\n\n  curve_fit_nd.h\n  intern/curve_fit_inline.h\n  intern/generic_alloc_impl.h\n  intern/generic_heap.c\n  intern/generic_heap.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable (CMake)\nDESCRIPTION: This snippet adds the executable target `msgfmt` using the source files defined in the `SRC` variable. It then sets up platform-specific linker flags and links the libraries defined in the `LIB` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(msgfmt ${SRC})\nsetup_platform_linker_flags(msgfmt)\ntarget_link_libraries(msgfmt ${LIB})\n```\n\n----------------------------------------\n\nTITLE: Joining Sounds with aud.Sound.join\nDESCRIPTION: This snippet joins two sounds (high and low) using aud.Sound.join() to create a combined sound. This combines the individual sine waves into a single sound object for playback.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nsound = high.join(low)\n```\n\n----------------------------------------\n\nTITLE: Setting IGC install directory for Linux\nDESCRIPTION: This snippet sets the IGC_INSTALL_DIR on Linux if it's not already defined by attempting to derive it from the sycl compiler root.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32)\n    if(NOT IGC_INSTALL_DIR)\n      get_filename_component(IGC_INSTALL_DIR \"${sycl_compiler_root}/../lib/igc\" ABSOLUTE)\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional GCC C++ Undef and Missing Declarations\nDESCRIPTION: This snippet adds more C++ compiler flags if the build is not on Apple.  Specifically, it adds flags to warn about undefined macros and missing declarations.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_113\n\nLANGUAGE: CMake\nCODE:\n```\n  if(NOT APPLE)\n    add_check_cxx_compiler_flags(\n      CXX_WARNINGS\n      CXX_WARN_UNDEF -Wundef\n      CXX_WARN_MISSING_DECLARATIONS -Wmissing-declarations\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Cycles Utility Library\nDESCRIPTION: This command adds the Cycles utility library to the build system. It specifies the library name (`cycles_util`), the libraries it links against (`${LIB}`), and the source and header files that make up the library (`${SRC}` and `${SRC_HEADERS}`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ncycles_add_library(cycles_util \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Add Library CMake\nDESCRIPTION: Adds the `extern_curve_fit_nd` library using the `blender_add_lib` function, specifying its source files, include directories, and dependencies. It also creates an alias for the library for easier referencing.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/curve_fit_nd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_curve_fit_nd \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::extern::curve_fit_nd ALIAS extern_curve_fit_nd)\n```\n\n----------------------------------------\n\nTITLE: Including CPack Configuration\nDESCRIPTION: This snippet includes the 'build_files/cmake/packaging.cmake' file, which likely contains configuration settings and functions for generating software packages using CPack. CPack is used to create installers and archives for different platforms.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_146\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(build_files/cmake/packaging.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing aud.Device\nDESCRIPTION: This snippet initializes an aud.Device object, which represents the audio output device.  This is a necessary step to play any audio using audaspace. No specific dependencies are required beyond the aud module itself.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndevice = aud.Device()\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library\nDESCRIPTION: This snippet adds the memory utility library using the `blender_add_lib` CMake function. It specifies the library name (`bf_intern_memutil`), source files, include directories, and library dependencies. This command effectively creates the library target.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/memutil/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_memutil \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Set Subdivision Modifier Levels in Blender (bpy.context)\nDESCRIPTION: This snippet demonstrates how to set the levels of a Subdivision Surface modifier on the active object. It assumes the active object has a modifier named \"Subdivision\". It uses bpy.context.active_object.modifiers[\"Subdivision\"].levels = 2 to set the levels value to 2.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.active_object.modifiers[\"Subdivision\"].levels = 2\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions in CMake\nDESCRIPTION: This CMake snippet adds preprocessor definitions for gflags, glog, and a custom Blender gflags namespace. These definitions are used during the compilation process to configure the behavior of the code.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/testing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(${GFLAGS_DEFINES})\nadd_definitions(${GLOG_DEFINES})\nadd_definitions(-DBLENDER_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})\n```\n\n----------------------------------------\n\nTITLE: Adding fast_float as a Subdirectory in CMake\nDESCRIPTION: This snippet demonstrates how to include the fast_float library in your CMake project by adding it as a subdirectory. It assumes that the fast_float repository is placed within your project's directory. The `target_link_libraries` command links your program to the fast_float library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fast_float/README.md#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(fast_float)\ntarget_link_libraries(myprogram PUBLIC fast_float)\n```\n\n----------------------------------------\n\nTITLE: Converting GLSL to C Source\nDESCRIPTION: This snippet iterates through a list of GLSL files, converts each to a C source file, and stores the resulting files in the `GLSL_C` variable. This prepares the shaders for inclusion in a library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_C)\nforeach(GLSL_FILE ${GLSL_SRC})\n  glsl_to_c(${GLSL_FILE} GLSL_C)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Version File in CMake\nDESCRIPTION: This snippet configures the `version.cmake` file from the `version.cmake.in` template, substituting variables using `@ONLY` syntax. This allows embedding the project version information into the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(\n  ${PROJECT_SOURCE_DIR}/cmake/version.cmake.in\n  ${PROJECT_BINARY_DIR}/cmake/version.cmake\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Installing the Library\nDESCRIPTION: This snippet installs the 'libgmpxx' library to the 'lib' directory. This makes the compiled library available for other projects to use. DESTINATION specifies where to install the built target relative to the installation prefix.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_gmpxx.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS libgmpxx DESTINATION lib)\n```\n\n----------------------------------------\n\nTITLE: Jemalloc configuration\nDESCRIPTION: This snippet adds the -DWITH_JEMALLOC_CONF definition if WITH_MEM_JEMALLOC is true and the Jemalloc version is 5.0.0 or greater. This provides extra configuration options when using Jemalloc.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MEM_JEMALLOC)\n  if(NOT (\"${JEMALLOC_VERSION}\" VERSION_LESS \"5.0.0\"))\n    add_definitions(-DWITH_JEMALLOC_CONF)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating GLSL Source List\nDESCRIPTION: This snippet generates a header file containing macro definitions that embed the GLSL source code directly into the program. It iterates through the GLSL files, creates a macro definition `SHADER_SOURCE` for each, and writes these to a header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SOURCE_CONTENT \"\")\nforeach(GLSL_FILE ${GLSL_SRC})\n  get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n  string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n  string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\")\\n\")\nendforeach()\n\nset(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_compositor_source_list.h\")\nfile(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\nlist(APPEND SRC ${glsl_source_list_file})\nlist(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n\ntarget_include_directories(bf_compositor_shaders PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions - CMake\nDESCRIPTION: This snippet conditionally adds a compiler definition if the `WITH_GPU_SHADER_ASSERT` variable is enabled. The `add_definitions` command adds `-DWITH_GPU_SHADER_ASSERT` to the compiler flags, enabling GPU shader assertion functionality during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/glsl_preprocess/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_ASSERT)\n  add_definitions(-DWITH_GPU_SHADER_ASSERT)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Vulkan Backend Support in CMake\nDESCRIPTION: This snippet conditionally adds support for the Vulkan graphics backend. If WITH_VULKAN_BACKEND is enabled, it adds the -DWITH_VULKAN_BACKEND preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_VULKAN_BACKEND)\n  add_definitions(-DWITH_VULKAN_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Draco subdirectory\nDESCRIPTION: Adds the `draco` subdirectory to the build process, allowing the Draco library to be compiled as part of the UPBGE project. This assumes the `draco` subdirectory contains a `CMakeLists.txt` file defining the Draco library's build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(draco)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (CMake)\nDESCRIPTION: This CMake snippet defines system include directories for the component. The `INC_SYS` variable is set, though it's currently empty.  This allows for specifying system-level include directories that are necessary for compiling the component.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HIP Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines the HIP kernel source file. It specifies the HIP implementation of the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_HIP\n  device/hip/kernel.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional DeckLink Configuration\nDESCRIPTION: This snippet conditionally adds the WITH_GAMEENGINE_DECKLINK definition and links the bf_intern_decklink library if the WITH_GAMEENGINE_DECKLINK option is enabled.  This enables support for DeckLink video capture cards.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE_DECKLINK)\n  add_definitions(-DWITH_GAMEENGINE_DECKLINK)\n\n  list(APPEND LIB\n    bf_intern_decklink\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional GLPK Integration CMake\nDESCRIPTION: Conditionally includes GLPK support. If `LEMON_HAVE_GLPK` is true, it adds `glpk.cc` to the source files, includes the GLPK include directories, and installs the GLPK DLLs for Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_GLPK)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} glpk.cc)\n  INCLUDE_DIRECTORIES(${GLPK_INCLUDE_DIRS})\n  IF(WIN32)\n    INSTALL(FILES ${GLPK_BIN_DIR}/glpk.dll DESTINATION bin)\n    INSTALL(FILES ${GLPK_BIN_DIR}/libltdl3.dll DESTINATION bin)\n    INSTALL(FILES ${GLPK_BIN_DIR}/zlib1.dll DESTINATION bin)\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (Cmake)\nDESCRIPTION: This snippet defines the source files for the Cineon/DPX image buffer library. It lists both header files (.h) and C++ source files (.cc).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/cineon/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  cineonlib.h\n  dpxlib.h\n  logImageCore.h\n  logmemfile.h\n\n  cineon_dpx.cc\n  cineonlib.cc\n  dpxlib.cc\n  logImageCore.cc\n  logmemfile.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC Compiler Options\nDESCRIPTION: This snippet adds specific compiler options for MSVC when not using CLANG, including /WX to treat warnings as errors and /wd4101 to disable a specific warning.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND NOT MSVC_CLANG)\n  target_compile_options(bf_bmesh PRIVATE /WX /wd4101)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories with CMake\nDESCRIPTION: This snippet sets the system include directories, specifically using the Epoxy library's include directories. Epoxy is likely used for OpenGL context management or related tasks in the GPU Direct library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/gpudirect/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${Epoxy_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library\nDESCRIPTION: This snippet uses the custom CMake function 'blender_add_lib' to create the 'bf_render_hydra' library. It takes the source files, include directories, system include directories, and libraries as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_render_hydra \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGL Include Directories\nDESCRIPTION: Adds the Epoxy include directories to the INC_SYS list. Epoxy is used for handling OpenGL extensions, ensuring compatibility across different platforms and drivers. The bgl module uses this for OpenGL constants.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND INC_SYS\n  ${Epoxy_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenGL Backend\nDESCRIPTION: Configures the build for the OpenGL backend.  It appends Epoxy include directories and libraries to the respective lists, and defines a preprocessor macro to enable the OpenGL backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND INC_SYS\n    ${Epoxy_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENGL_BACKEND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding USD Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_USD` option is enabled during the build configuration. If it is, the 'usd' subdirectory, containing the USD importer/exporter, is added to the build using the `add_subdirectory` command.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_USD)\n  add_subdirectory(usd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining OptiX Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the OptiX kernel. These headers include BVH structures, compatibility definitions, and global definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_OPTIX_HEADERS\n  device/optix/bvh.h\n  device/optix/compat.h\n  device/optix/globals.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining USD Build (CMake)\nDESCRIPTION: This snippet adds the definition `-DWITH_USD` and sets the absolute include directory of `../blender/io/usd` if WITH_USD is true. It is related to USD usage inside Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_78\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_USD)\n  add_definitions(-DWITH_USD)\n  absolute_include_dirs(../blender/io/usd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a Library in CMake\nDESCRIPTION: This snippet calls the `blender_add_lib` function to create the `bf_editor_physics` library.  It specifies the source files, include directories, and libraries that are needed to build the physics module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_physics \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Blender Execution Parameters CMake\nDESCRIPTION: Defines standard Blender arguments for running tests, including background mode, factory startup, memory debugging, error handling, and a Python exit code.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_BLENDER_EXE_PARAMS\n  --background --factory-startup --debug-memory --debug-exit-on-error --python-exit-code 1\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (CMake)\nDESCRIPTION: This snippet sets the system include directories. In this case, it's empty, indicating no additional system include paths are required. This ensures that the compiler will search the standard system directories for include files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Rigging Symmetrize Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for rigging symmetrization, utilizing the `bl_rigging_symmetrize.py` Python script. The script is located in the specified test directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_rigging_symmetrize\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_rigging_symmetrize.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining HIP Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the HIP kernel. These headers include compatibility definitions, configuration settings, and global definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_HIP_HEADERS\n  device/hip/compat.h\n  device/hip/config.h\n  device/hip/globals.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Valgrind Definition (CMake)\nDESCRIPTION: This snippet adds a preprocessor definition WITH_MEM_VALGRIND if the WITH_MEM_VALGRIND option is enabled. This enables conditional compilation of code that interacts with Valgrind for memory debugging purposes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MEM_VALGRIND)\n  add_definitions(-DWITH_MEM_VALGRIND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Import aud and time modules\nDESCRIPTION: This snippet imports the necessary modules for using audaspace in Python: 'aud' for audio processing and 'time' for controlling playback duration. It is a fundamental step in any audaspace application.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/python\nimport aud, time\n```\n\n----------------------------------------\n\nTITLE: Pose Assets Test (CMake)\nDESCRIPTION: This CMake snippet adds a test for pose assets using the `bl_pose_assets.py` Python script. It also specifies the test directory where the pose assets tests are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_pose_assets\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_pose_assets.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Linker Flags (CMake)\nDESCRIPTION: This snippet appends a specific linker flag to `CMAKE_EXE_LINKER_FLAGS_DEBUG` when building on Windows.  This flag prevents linking against MSVCRT.lib. It only applies to debug builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG \" /nodefaultlib:MSVCRT.lib\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files that comprise the Grease Pencil I/O library. These source files contain the implementation for importing and exporting Grease Pencil data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/grease_pencil_io.cc\n  intern/grease_pencil_io_import_svg.cc\n\n  grease_pencil_io.hh\n  intern/grease_pencil_io_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: These commands define the include directories for the Cycles utility library. The first `set(INC ...)` sets the relative include path, while `set(INC_SYS ...)` sets the system include paths based on the ZSTD library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n  ${ZSTD_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining CUDA Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the CUDA kernel. These headers include compatibility definitions, configuration settings, and global definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_CUDA_HEADERS\n  device/cuda/compat.h\n  device/cuda/config.h\n  device/cuda/globals.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines any library dependencies for the range tree library. In this instance, there are no direct library dependencies specified, indicated by the empty value.  This means the library is self-contained in terms of external library linkages.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/rangetree/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Compositor Shader Library\nDESCRIPTION: This snippet creates a library named `bf_compositor_shaders` from the compiled GLSL C source files. It then appends the library to the `LIB` list, making it available for linking.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_compositor_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n\nlist(APPEND LIB\n  bf_compositor_shaders\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Metal Backend - CMake\nDESCRIPTION: This snippet configures the Metal backend by adding the `-DWITH_METAL_BACKEND` definition. It assumes necessary frameworks are already being added in `build_files/cmake/platform/platform_apple.cmake`\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_103\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_METAL_BACKEND)\n  add_definitions(-DWITH_METAL_BACKEND)\n\n  # No need to add frameworks here, all the ones we need for Metal and\n  # Metal-OpenGL Interop are already being added by\n  # build_files/cmake/platform/platform_apple.cmake\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CPU Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines a list of source files used for the CPU kernel implementation. These files include global definitions, kernel functions, and AVX2 optimized kernel functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_CPU\n  device/cpu/globals.cpp\n  device/cpu/kernel.cpp\n  device/cpu/kernel_avx2.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Appending to Libraries List\nDESCRIPTION: Appends the generated node registration library to the list of libraries. This ensures that the generated code is included in the final build, enabling the registered nodes to be used within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND LIB\n  bf_nodes_functions_generated\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional GMP Dependency\nDESCRIPTION: This code snippet conditionally includes GMP's include directories and libraries and adds a compiler definition WITH_GMP if WITH_GMP is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: This snippet defines the include directories required for compiling the bf_editor_curve library. It includes paths to local header files and generated files from the RNA system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/curve/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Definitions and Include Directories for Audaspace\nDESCRIPTION: This snippet configures Audaspace integration by adding include directories and libraries. It also adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_AUDASPACE)\n  list(APPEND INC_SYS\n    ${AUDASPACE_C_INCLUDE_DIRS}\n  )\n  if(WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      ${AUDASPACE_C_LIBRARIES}\n      ${AUDASPACE_PY_LIBRARIES}\n    )\n  endif()\n  add_definitions(-DWITH_AUDASPACE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Options\nDESCRIPTION: This snippet adds a compiler option to suggest overrides when using C++. This helps improve code quality and maintainability by encouraging the use of the `override` keyword.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(CXX_WARN_NO_SUGGEST_OVERRIDE)\n  target_compile_options(bf_gpu PRIVATE $<$<COMPILE_LANGUAGE:CXX>:-Wsuggest-override>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies CMake\nDESCRIPTION: This snippet sets the library dependencies for the sequencer library. It specifies private dependencies on other Blender libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Cycles NaN Debugging\nDESCRIPTION: This snippet enables NaN (Not a Number) debugging for Cycles. It adds the WITH_CYCLES_DEBUG_NAN definition, allowing for easier identification and resolution of NaN issues during rendering.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEBUG_NAN)\n  add_definitions(-DWITH_CYCLES_DEBUG_NAN)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding bf_python_ext Library\nDESCRIPTION: Creates the bf_python_ext library using the specified source files, include directories, and library dependencies. It uses the blender_add_lib CMake function, which is a custom function defined elsewhere in the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_python_ext \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This snippet defines the source files that make up the spindle encryption library. It lists both the C++ source file (SpindleEncryption.cpp) and the header file (SpindleEncryption.h) needed for compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/spindle/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n\tSpindleEncryption.cpp\n\n\tSpindleEncryption.h\n)\n```\n\n----------------------------------------\n\nTITLE: Set Include Files\nDESCRIPTION: This snippet sets the list of include files. These files contain the header files that are required to compile the source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_RNA_INC\n  ../RNA_access.hh\n  ../RNA_define.hh\n  ../RNA_documentation.hh\n  ../RNA_enum_items.hh\n  ../RNA_enum_types.hh\n  ../RNA_path.hh\n  ../RNA_types.hh\n\n  rna_action_tools.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Append for USD Support\nDESCRIPTION: This snippet conditionally appends a source file and adds a preprocessor definition if USD support is enabled. USD (Universal Scene Description) is a file format for scene interchange.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_USD)\n  list(APPEND DEFSRC\n    rna_usd.cc\n  )\n  add_definitions(-DWITH_USD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Game Engine Libraries - CMake\nDESCRIPTION: Appends game engine libraries (ge_blender_routines, ge_launcher, ge_converter) to the LIB list when the WITH_GAMEENGINE option is enabled. These libraries provide functionality specific to the Blender game engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  list(APPEND LIB\n    ge_blender_routines\n    ge_launcher\n    ge_converter\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending generated files to source list\nDESCRIPTION: This snippet appends the generated `.h` and `.cc` files to the source list `SRC`. It also processes blend files and images using `data_to_c_simple` to convert them into C code and add them to the source list.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n    list(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/svg_icons.h)\n    list(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/svg_icons.cc)\n    # Blend files.\n    data_to_c_simple(../../../../release/datafiles/preview.blend SRC)\n    data_to_c_simple(../../../../release/datafiles/preview_grease_pencil.blend SRC)\n\n    # Images.\n    data_to_c_simple(../../../../release/datafiles/splash.png SRC)\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender Build System - CMake\nDESCRIPTION: This snippet utilizes the blender_add_lib function to create the 'extern_rangetree' library. It takes the source files, include directories, dependencies, and library name as input to generate the library. The empty string parameters indicate no specific options or link libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/rangetree/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_rangetree \"${SRC}\" \"${INC}\" \"\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories required for compiling the ge_videotexture library. It includes paths to various Blender modules, internal libraries, and external dependencies like Epoxy and Boost.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../BlenderRoutines\n  ../Common\n  ../Device\n  ../Expressions\n  ../GameLogic\n  ../Ketsji\n  ../Rasterizer\n  ../Rasterizer/RAS_OpenGLRasterizer\n  ../SceneGraph\n  ../../blender/editors/include\n  ../../blender/imbuf/movie/intern\n  ../../blender/makesrna\n  ../../blender/python\n  ../../blender/python/generic\n  ../../../intern/decklink\n  ../../../intern/gpudirect\n  ../../../intern/atomic\n)\n\nset(INC_SYS\n  ../../../intern/moto/include\n  ${Epoxy_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: GLSL Shader Compilation\nDESCRIPTION: This snippet handles the compilation of GLSL shaders. It iterates through a list of GLSL files, converts each file to a C++ source file using `glsl_to_c`, and then creates a library (`bf_ocio_shaders`) containing the compiled shaders. Additionally, the source of shaders is embedded into the library using SHADER_SOURCE macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opencolorio/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n  set(GLSL_SRC\n    gpu_shader_display_transform_vert.glsl\n    gpu_shader_display_transform_frag.glsl\n\n    ocio_shader_shared.hh\n  )\n\n  set(GLSL_C)\n  foreach(GLSL_FILE ${GLSL_SRC})\n    glsl_to_c(${GLSL_FILE} GLSL_C)\n  endforeach()\n\n  blender_add_lib(bf_ocio_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n\n  list(APPEND LIB\n    bf_ocio_shaders\n  )\n\n  set(GLSL_SOURCE_CONTENT \"\")\n  foreach(GLSL_FILE ${GLSL_SRC})\n    get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n    string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n    string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE\\(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\"\\)\\n\")\n  endforeach()\n\n  set(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_ocio_source_list.h\")\n  file(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\n  list(APPEND SRC ${glsl_source_list_file})\n  list(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n\n  target_include_directories(bf_ocio_shaders PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories for the project. The `INC` variable is used to specify local include directories, while `INC_SYS` is used to specify system include directories. The `include_directories` command adds these directories to the include path.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/session/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Adding Library Dependencies - CMake\nDESCRIPTION: Adds a dependency on the `bf_rna` library, ensuring that the RNA library is built before the Cycles library. This resolves dependencies between the two libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(bf_intern_cycles bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Library Installation\nDESCRIPTION: This CMake snippet conditionally installs Python libraries and the Python executable into the Blenderplayer application bundle, if Python is enabled and not built as a module or a framework. It copies the Python library files, the Python executable, and the `pyconfig.h` file to the appropriate locations within the bundle. It first uses get_filename_component to find the final part of the Python include path for the pyconfig.h DESTINATION.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON AND NOT WITH_PYTHON_MODULE AND NOT WITH_PYTHON_FRAMEWORK)\n    # Copy the python libs into the install directory\n    install_dir(\n      ${PYTHON_LIBPATH}/python${PYTHON_VERSION}\n      ${PLAYER_TARGETDIR_VER}/python/lib\n    )\n\n    # Install Python executable.\n    install(\n      PROGRAMS ${PYTHON_EXECUTABLE}\n      DESTINATION ${PLAYER_TARGETDIR_VER}/python/bin\n    )\n\n    # Needed for distutils/pip\n    # get the last part of the include dir, will be 'python{version}{abiflag}',\n    get_filename_component(_py_inc_suffix ${PYTHON_INCLUDE_DIR} NAME)\n    install(\n      FILES ${PYTHON_INCLUDE_DIR}/pyconfig.h\n      DESTINATION ${PLAYER_TARGETDIR_VER}/python/include/${_py_inc_suffix}\n    )\n    unset(_py_inc_suffix)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Enable Jemalloc\nDESCRIPTION: This option enables Jemalloc, a malloc replacement (memory allocator). Jemalloc is known for its performance and fragmentation avoidance.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_MEM_JEMALLOC \"Enable malloc replacement (http://www.canonware.com/jemalloc)\" ON)\nmark_as_advanced(WITH_MEM_JEMALLOC)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: These snippets define the include directories used for compiling the LZMA library. `INC` sets the local include directory to the current directory, while `INC_SYS` is left empty, indicating that no system include directories are explicitly added here.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzma/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining WITH_IMAGE_OPENEXR\nDESCRIPTION: This snippet defines the `WITH_IMAGE_OPENEXR` preprocessor definition when the `WITH_IMAGE_OPENEXR` option is enabled. This indicates that the project should be built with OpenEXR support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  add_definitions(-DWITH_IMAGE_OPENEXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional NDOF Input Support in CMake\nDESCRIPTION: This snippet conditionally adds support for NDOF (N-Degrees of Freedom) input devices. If the WITH_INPUT_NDOF option is enabled, it adds the -DWITH_INPUT_NDOF preprocessor definition, enabling the code to use NDOF input functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INPUT_NDOF)\n  add_definitions(-DWITH_INPUT_NDOF)\nendif(WITH_INPUT_NDOF)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files CMake\nDESCRIPTION: This snippet defines the source files for the Audaspace library. The SRC variable is populated with C++ and header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/audaspace/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/AUD_Set.cpp\n  intern/AUD_Set.h\n)\n```\n\n----------------------------------------\n\nTITLE: Suppressing HAVE_EXECINFO_H Definition - CMake\nDESCRIPTION: This snippet checks if the HAVE_EXECINFO_H definition is present and removes it if it is. This is done because GLOG has its own definition for this macro, and removing the existing one prevents conflicts.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_EXECINFO_H)\n  remove_definitions(-DHAVE_EXECINFO_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Library Append - CMake\nDESCRIPTION: This snippet conditionally appends the `ge_videotexture` library to the `LIB` variable if the `WITH_PYTHON` flag is enabled. This allows the launcher to link against Python-related libraries when Python support is enabled during the build process. `list(APPEND ...)` adds an element to a list.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  list(APPEND LIB\n    ge_videotexture\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: PipeWire Integration with CMake\nDESCRIPTION: This CMake code handles PipeWire integration. It uses `find_package(PkgConfig)` to find PipeWire, setting minimum version requirements. It defines source and header files, adds definitions for dynamic loading, appends include directories and libraries and includes the plugin in the build. It uses conditional compilation based on `DYNLOAD_PIPEWIRE`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PIPEWIRE)\n\tif(AUDASPACE_STANDALONE)\n\t\tfind_package(PkgConfig)\n\t\tpkg_check_modules(PIPEWIRE ${PACKAGE_OPTION} libpipewire-0.3>=1.1.0)\n\tendif()\n\n\tif(PIPEWIRE_FOUND)\n\t\tset(PIPEWIRE_SRC\n\t\t\tplugins/pipewire/PipeWireDevice.cpp\n\t\t\tplugins/pipewire/PipeWireLibrary.cpp\n\t\t)\n\t\tset(PIPEWIRE_HDR\n\t\t\tplugins/pipewire/PipeWireDevice.h\n\t\t\tplugins/pipewire/PipeWireLibrary.h\n\t\t\tplugins/pipewire/PipeWireSymbols.h\n\t\t)\n\n\t\tif(DYNLOAD_PIPEWIRE)\n\t\t\tadd_definitions(-DDYNLOAD_PIPEWIRE)\n\t\tendif()\n\n\t\tif(NOT PLUGIN_PIPEWIRE)\n\t\t\tlist(APPEND INCLUDE ${PIPEWIRE_INCLUDE_DIRS})\n\t\t\tif(NOT DYNLOAD_PIPEWIRE)\n\t\t\t\tlist(APPEND LIBRARIES ${PIPEWIRE_LIBRARIES})\n\t\t\tendif()\n\t\t\tlist(APPEND SRC ${PIPEWIRE_SRC})\n\t\t\tlist(APPEND HDR ${PIPEWIRE_HDR})\n\t\t\tlist(APPEND STATIC_PLUGINS PipeWireDevice)\n\t\tendif()\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_PIPEWIRE FALSE CACHE BOOL \"Build With PipeWire\" FORCE)\n\t\telse()\n\t\t\tset(WITH_PIPEWIRE FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"PipeWire not found, plugin will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Plugin Manager Configuration with CMake\nDESCRIPTION: This CMake code configures the PluginManager and HRTFLoader based on the operating system. On Windows, it uses `PluginManagerWindows.cpp.in` and `HRTFLoaderWindows.cpp`, while on other systems it uses `PluginManagerUnix.cpp.in` and `HRTFLoaderUnix.cpp`. The HRTFLoader is only configured if `WITH_FFTW` is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/PluginManagerWindows.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp ESCAPE_QUOTES @ONLY)\n\tif(WITH_FFTW)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderWindows.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)\n\tendif()\nelse()\n\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/plugin/PluginManagerUnix.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp ESCAPE_QUOTES @ONLY)\n\tif(WITH_FFTW)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/src/fx/HRTFLoaderUnix.cpp ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp COPYONLY)\n\tendif()\nendif()\n\nlist(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/PluginManager.cpp)\nif(WITH_FFTW)\n\tlist(APPEND SRC ${CMAKE_CURRENT_BINARY_DIR}/HRTFLoader.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating the View Layer after Modifying Object Properties\nDESCRIPTION: This code demonstrates how to update the view layer after modifying object properties in Blender using the Python API.  It highlights the importance of calling `bpy.context.view_layer.update()` to ensure that dependent data (child objects, modifiers, drivers, etc.) are recalculated and that the updated values are available to the script.  This is necessary because Blender defers evaluation to avoid expensive recalculations.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.object.location = 1, 2, 3\nbpy.context.view_layer.update()\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender Macro - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the `bf_intern_spindle` library. It takes the library name, source files, include directories, and system include directories as arguments, effectively building the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/spindle/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_spindle \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that will be compiled to create the console editor space library. These files include C++ sources for drawing, operations, and the space itself, along with an internal header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_console/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  console_draw.cc\n  console_ops.cc\n  space_console.cc\n\n  console_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency - CMake\nDESCRIPTION: This command adds a dependency of the `bf_nodes_texture` library on the `bf_rna` library. This ensures that the RNA library is built before the texture nodes library, as the texture nodes library relies on the RNA (Runtime Name Access) system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/texture/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(bf_nodes_texture bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This code snippet sets the source files to be compiled for the edit mesh library. It lists all the .cc files related to edit mesh functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  editface.cc\n  editmesh_add.cc\n  editmesh_add_gizmo.cc\n  editmesh_attribute.cc\n  editmesh_automerge.cc\n  editmesh_bevel.cc\n  editmesh_bisect.cc\n  editmesh_extrude.cc\n  editmesh_extrude_screw.cc\n  editmesh_extrude_spin.cc\n  editmesh_extrude_spin_gizmo.cc\n  editmesh_inset.cc\n  editmesh_intersect.cc\n  editmesh_knife.cc\n  editmesh_knife_project.cc\n  editmesh_loopcut.cc\n  editmesh_mask_extract.cc\n  editmesh_path.cc\n  editmesh_polybuild.cc\n  editmesh_preselect_edgering.cc\n  editmesh_preselect_elem.cc\n  editmesh_rip.cc\n  editmesh_rip_edge.cc\n  editmesh_select.cc\n  editmesh_select_similar.cc\n  editmesh_set_sharpness_by_angle.cc\n  editmesh_tools.cc\n  editmesh_undo.cc\n  editmesh_utils.cc\n  mesh_data.cc\n  mesh_mirror.cc\n  mesh_ops.cc\n  meshtools.cc\n\n  mesh_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Security Definition - CMake\nDESCRIPTION: This snippet conditionally adds the `-DWITH_GAMEENGINE_SECURITY` preprocessor definition if the `WITH_GAMEENGINE_SECURITY` flag is enabled. This allows enabling security features at compile time via conditional compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE_SECURITY)\n  add_definitions(-DWITH_GAMEENGINE_SECURITY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Lemon Library CMake\nDESCRIPTION: Installs the Lemon library to the specified directories. This copies the library files to the `lib` directory under the installation prefix, making it available for other projects to use.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(\n  TARGETS lemon\n  ARCHIVE DESTINATION lib\n  LIBRARY DESTINATION lib\n  COMPONENT library\n)\n```\n\n----------------------------------------\n\nTITLE: Adding PLY Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_IO_PLY` option is enabled. If it is enabled, the 'ply' subdirectory is added to the build process, ensuring that the PLY importer/exporter is included in the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_IO_PLY)\n  add_subdirectory(ply)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting FBX I/O Tests - CMake\nDESCRIPTION: Configures FBX import tests using `add_blender_test_io`.  This test imports FBX files from a test directory. Output directory is specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_48\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test_io(\n    io_fbx_import\n    --python ${CMAKE_CURRENT_LIST_DIR}/io_fbx_import_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/io_tests/fbx\"\n    --outdir \"${TEST_OUT_DIR}/io_fbx\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories with CMake\nDESCRIPTION: This snippet uses the `set` command in CMake to define a variable named `INC_SYS` which is intended to hold system-level include directories. Currently, the list is empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Execinfo Definition (CMake)\nDESCRIPTION: This snippet checks if the execinfo.h header file is available and, if so, adds a preprocessor definition HAVE_EXECINFO_H. This allows conditional compilation based on the presence of the execinfo library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_EXECINFO_H)\n  add_definitions(-DHAVE_EXECINFO_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (Wavefront OBJ) - CMake\nDESCRIPTION: This snippet conditionally appends the Wavefront OBJ I/O library and defines a preprocessor definition if the WITH_IO_WAVEFRONT_OBJ flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ)\n  list(APPEND LIB\n    bf_io_wavefront_obj\n  )\n  add_definitions(-DWITH_IO_WAVEFRONT_OBJ)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Documentation Manpage Option\nDESCRIPTION: This snippet defines an option to create a manual page (Unix manpage) during the build process. It is only enabled on Unix-like systems that are not macOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  option(WITH_DOC_MANPAGE \"Create a manual page (Unix manpage)\" OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files for the Cycles graph library. It sets the `SRC` variable to a list of C++ source files. These source files will be compiled and linked into the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/graph/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  node.cpp\n  node_type.cpp\n  node_xml.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows Definition\nDESCRIPTION: This snippet adds a preprocessor definition `_USE_MATH_DEFINES` specifically for Windows builds.  This ensures that math constants like PI are available when compiling on the Windows platform.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/quadriflow/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-D_USE_MATH_DEFINES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: Sets the include directories for the project.  It includes both project-specific and system include directories. The variables INC and INC_SYS are used to define the paths to be included.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/subd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Conditional NDOF Input Inclusion - CMake\nDESCRIPTION: This snippet conditionally adds a preprocessor definition if `WITH_INPUT_NDOF` is enabled.  This likely controls support for NDOF (Non-Discrete 6-Axis) input devices.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INPUT_NDOF)\n  add_definitions(-DWITH_INPUT_NDOF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Metal Backend Compilation\nDESCRIPTION: This snippet conditionally appends the Metal source file to the list of source files and adds a preprocessor definition if the WITH_CYCLES_DEVICE_METAL option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_METAL)\n  list(APPEND SRC\n    ${SRC_METAL}\n  )\n  add_definitions(-DWITH_METAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: Defines the include directories required for compiling the nodes library, including local directories and paths to other UPBGE modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  composite\n  function\n  geometry\n  intern\n  shader\n  texture\n  geometry/include\n  ../animrig\n  ../editors/include\n  ../depsgraph\n  ../makesrna\n  ../modifiers\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Library in CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the bf_editor_sound library.  It takes the source files, include directories, system include directories, and linked libraries as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_sound \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining WITH_OPENSUBDIV\nDESCRIPTION: This snippet defines the `WITH_OPENSUBDIV` preprocessor definition when the `WITH_OPENSUBDIV` option is enabled. This indicates that the project should be built with OpenSubdiv support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Test Library Dependencies\nDESCRIPTION: This snippet sets the library dependencies for the test suite. It includes the standard library dependencies, the `bf_blenloader_test_util` library, and the `bf_io_wavefront_obj` library being tested.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_LIB\n    ${LIB}\n\n    bf_blenloader_test_util\n    bf_io_wavefront_obj\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Link Directories with CMake\nDESCRIPTION: This CMake command specifies the directory where the linker should look for libraries. Here, it adds the 'lemon' library directory located within the project's binary directory to the link path.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/demo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n```\n\n----------------------------------------\n\nTITLE: Animation Drivers Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for animation drivers. It executes the `bl_animation_drivers.py` Python script and specifies the test directory for the animation drivers tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_animation_drivers\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_drivers.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Include gflags Header\nDESCRIPTION: This code snippet demonstrates the recommended way to include the gflags header file in C++ code. It ensures proper access to gflags functionalities. The older method of including is also shown.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/NEWS.txt#_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gflags/gflags.h>\n```\n\n----------------------------------------\n\nTITLE: Initialize Project and Module Path\nDESCRIPTION: Initializes the CMake project and sets the module path to include custom CMake modules. This ensures that project-specific modules can be found during the configuration process.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\n\nproject(GhostMultiTest)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/../../../build_files/cmake/Modules\")\n\nset(WITH_GUARDEDALLOC ON)\n```\n\n----------------------------------------\n\nTITLE: SCA_ActuatorSensor.actuator Attribute\nDESCRIPTION: Describes the `actuator` attribute of the SCA_ActuatorSensor class. This attribute stores the name of the actuator that the sensor is monitoring. The actuator's name is a string.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.SCA_ActuatorSensor.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nclass SCA_ActuatorSensor(SCA_ISensor):\n    # ...\n    @property\n    def actuator(self):\n        \"\"\"the name of the actuator that the sensor is monitoring.\n\n        :type: string\n        \"\"\"\n        return self._actuator\n\n    @actuator.setter\n    def actuator(self, value):\n        self._actuator = value\n```\n\n----------------------------------------\n\nTITLE: Adding Glog Library - CMake\nDESCRIPTION: This snippet creates the 'extern_glog' library using the specified source files, include directories, system include directories, and libraries. This function creates the glog library with all configured dependencies and settings.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_glog \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting OBJ I/O Tests - CMake\nDESCRIPTION: Configures Wavefront OBJ import tests using `add_blender_test_io`.  This test imports OBJ files from a specified test directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_WAVEFRONT_OBJ AND TEST_SRC_DIR_EXISTS)\n  add_blender_test_io(\n    io_obj_import\n    --python ${CMAKE_CURRENT_LIST_DIR}/io_obj_import_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/io_tests/obj\"\n    --outdir \"${TEST_OUT_DIR}/io_obj\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional XDND Library Inclusion with CMake\nDESCRIPTION: Conditionally includes the `xdnd` library if both `WITH_GHOST_X11` and `WITH_GHOST_XDND` are enabled, implying support for X11 and X Drag and Drop functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GHOST_X11 AND WITH_GHOST_XDND)\n  add_subdirectory(xdnd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with OpenColorIO\nDESCRIPTION: This snippet conditionally includes OpenColorIO headers and libraries if enabled. It adds definitions and appends to the include and library lists.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  add_definitions(\n    -DWITH_OCIO\n  )\n\n  list(APPEND INC_SYS\n    ${OPENCOLORIO_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${OPENCOLORIO_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Alembic - CMake\nDESCRIPTION: Conditionally includes Alembic-related headers, libraries, and preprocessor definitions based on the 'WITH_ALEMBIC' flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  add_definitions(-DWITH_ALEMBIC)\n  list(APPEND INC\n    ../io/alembic\n  )\n  list(APPEND LIB\n    bf_io_alembic\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries\nDESCRIPTION: This code snippet defines a CMake variable `LIB` to list the external libraries that the project depends on. In this particular case, the variable is empty, indicating that `ge_physics_dummy` has no external library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Common/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the OpenImageIO integration.  It includes local project directories and the location of the utfconv library. These directories are necessary for compiling the OpenImageIO code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/oiio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n  ../../../../../intern/utfconv\n)\n```\n\n----------------------------------------\n\nTITLE: Adding pystring Library Target in CMake\nDESCRIPTION: This snippet adds a static library target named `${PROJECT_NAME}` (which resolves to \"pystring\"). It uses the previously defined header and source files to build the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_pystring.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PROJECT_NAME} STATIC ${HEADERS} ${SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for pystring Library\nDESCRIPTION: This snippet sets the compile flags and public header for the pystring library.  It utilizes platform-specific compile flags and the previously defined header list.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_pystring.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${PROJECT_NAME} PROPERTIES \n\tCOMPILE_FLAGS \"${PLATFORM_COMPILE_FLAGS} ${pystring_CXX_FLAGS}\"\n    PUBLIC_HEADER \"${HEADERS}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Disable Clang-Tidy for Generated Files\nDESCRIPTION: This snippet disables clang-tidy for generated files. This is done because the generated files are stored outside of the source directory, preventing clang-tidy from finding the configuration file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nunset(CMAKE_C_CLANG_TIDY)\nunset(CMAKE_CXX_CLANG_TIDY)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: This snippet sets the system include directories, which are not specified here, so it remains empty. These are for external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_clip/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files for the cuew library. It sets the SRC variable to include 'src/cuew.c' and 'include/cuew.h'. These files will be compiled and linked to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/cuew/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  src/cuew.c\n\n  include/cuew.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with TBB\nDESCRIPTION: This snippet conditionally defines `-DNOMINMAX` on Windows if TBB is enabled to prevent conflicts between TBB's headers and the STL's min/max macros.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Overriding Logger Name in Python\nDESCRIPTION: This example demonstrates how to override the default logger name for a KX_PythonComponent. By defining a `loggerName` property, the logger instance will use the specified name instead of the default 'Type[Name]' format.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_PythonComponent.rst#_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n@property\ndef loggerName():\n   return \"MyObject\"\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet sets the include directories for the io_common library build. It includes the current directory (.), the makesrna directory, and the extern/fast_float directory. These directories are essential for finding header files required during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/common/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../../makesrna\n)\n\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Library Shader Sources\nDESCRIPTION: Defines the list of GLSL library shader source files used for Grease Pencil rendering. These library files contain shared GLSL code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_LIB\n  gpencil_common_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Unity Build\nDESCRIPTION: This snippet calls a custom CMake function, `blender_set_target_unity_build`, to enable unity builds for the `bf_nodes_geometry` target with a chunk size of 10.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nblender_set_target_unity_build(bf_nodes_geometry 10)\n```\n\n----------------------------------------\n\nTITLE: Animation Keyframing Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for animation keyframing, using the `bl_animation_keyframing.py` Python script.  It also specifies the test directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_animation_keyframing\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_keyframing.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (CMake)\nDESCRIPTION: Defines the libraries to link against.  It sets the `LIB` variable to `bf_blenlib` and `bf_imbuf` libraries, specifying that these are private libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/tests/performance/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf_blenlib\n  PRIVATE bf_imbuf\n)\n```\n\n----------------------------------------\n\nTITLE: Windows 7 Compatibility - CMake\nDESCRIPTION: Inserts libraries required for Windows 7 compatibility at the beginning of the LIB list. This ensures that the necessary libraries are linked when building on Windows and targeting Windows 7.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 AND WITH_WINDOWS_7)\n  list(INSERT LIB 0 ${BCOMPAT7_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the Library\nDESCRIPTION: This snippet uses a custom CMake function (`blender_add_lib`) to create the `bf_editor_object` library, using the source files, include paths, and library dependencies defined earlier.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_object \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy OpenGL Support - CMake\nDESCRIPTION: This snippet conditionally adds the preprocessor definition `-DWITH_LEGACY_OPENGL` if the `WITH_LEGACY_OPENGL` option is enabled. This allows the code to be compiled with support for legacy OpenGL functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LEGACY_OPENGL)\n  add_definitions(-DWITH_LEGACY_OPENGL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Converting GLSL to C\nDESCRIPTION: This snippet converts all GLSL source files in the `GLSL_SRC` list to C code using the `glsl_to_c` function. The results are stored in the `GLSL_C` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nset(GLSL_C)\nforeach(GLSL_FILE ${GLSL_SRC})\n  glsl_to_c(${GLSL_FILE} GLSL_C)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Access Cycles Render Samples in Blender (bpy.context)\nDESCRIPTION: This snippet shows how to access the number of samples for the Cycles render engine through nested properties in the Blender API using bpy.context.scene.cycles.samples. This assumes the Cycles render engine is active.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.scene.cycles.samples\n```\n\n----------------------------------------\n\nTITLE: Adding OpenCollada Subdirectory - CMake\nDESCRIPTION: This CMake snippet checks if the `WITH_OPENCOLLADA` option is enabled. If it is enabled, the 'collada' subdirectory is added to the build, including the OpenCollada functionality in the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENCOLLADA)\n  add_subdirectory(collada)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting Constraint Type (KX_VehicleWrapper)\nDESCRIPTION: This method returns the type of constraint used by the vehicle. The return value is an integer representing the constraint type, allowing the user to identify the specific type of constraint applied.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: getConstraintType()\n\n      Returns the constraint type.\n\n      :return: constraint type\n      :rtype: integer\n```\n\n----------------------------------------\n\nTITLE: Check Fullscreen Window Status in Blender (bpy.context)\nDESCRIPTION: This snippet demonstrates how to check if the Blender window is in full-screen mode. It accesses nested properties to retrieve the window's screen's fullscreen status using bpy.context.window.screen.show_fullscreen.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.window.screen.show_fullscreen\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the project. These dependencies are linked with the target during the linking phase.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::dependencies::optional::tbb\n  PRIVATE bf::extern::fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the nodes library\nDESCRIPTION: Creates the bf_nodes library using the specified source files, include directories, system include directories, and libraries. It also creates an alias for the library named bf::nodes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_nodes \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::nodes ALIAS bf_nodes)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: This snippet defines system include directories. In this case it's empty, meaning no additional system-level include paths are explicitly defined at this stage.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Add Definition for Malloc Stats\nDESCRIPTION: This snippet adds a preprocessor definition if the system has the `malloc_stats.h` header file. This enables code that depends on malloc statistics functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(HAVE_MALLOC_STATS_H)\n  add_definitions(-DHAVE_MALLOC_STATS_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling GL Capabilities with glDisable (bgl)\nDESCRIPTION: Disables a server-side GL capability. The 'cap' parameter specifies a symbolic constant indicating the capability to disable.  This turns off specific OpenGL features.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glDisable(cap)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Module on macOS (CMake)\nDESCRIPTION: This snippet installs the blender target as a library to TARGETDIR_BPY if WITH_PYTHON_MODULE is enabled and TARGETDIR_BPY is set. This is for installing the blender module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_PYTHON_MODULE AND TARGETDIR_BPY)\n    install(\n      TARGETS blender\n      LIBRARY DESTINATION ${TARGETDIR_BPY}\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional GTest/GMock Inclusion with CMake\nDESCRIPTION: Conditionally includes `gtest` and `gmock` subdirectories if the `WITH_GTESTS` flag is enabled. This is commonly used for including testing frameworks.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  add_subdirectory(gtest)\n  add_subdirectory(gmock)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Accessing Image Texture Status in Python\nDESCRIPTION: This snippet accesses the status attribute of an ImageFFmpeg object. The status indicates whether the image has been loaded successfully. The snippet requires the creation of an `ImageFFmpeg` object beforehand.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstatus = image.status\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the project. It includes both project-specific include directories defined in the `INC` variable and system include directories specified in the `INC_SYS` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/integrator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Add Executable: datatoc (C)\nDESCRIPTION: Adds an executable named `datatoc` built from a single C source file. This executable is likely a utility for converting data to C source code format.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(datatoc\n  \"${CMAKE_SOURCE_DIR}/../../../source/blender/datatoc/datatoc.c\")\n```\n\n----------------------------------------\n\nTITLE: Removing Strict Flags CMake\nDESCRIPTION: This snippet removes the '-Wunused-macros' compiler flag if the compiler is GCC. This is done to avoid warnings related to unused macros during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/audaspace/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  remove_cc_flag(\"-Wunused-macros\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the Cycles graph library. It sets the `LIB` variable to a list of other libraries that the Cycles graph library depends on.  In this case, it depends on `cycles_util`.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/graph/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_util\n)\n```\n\n----------------------------------------\n\nTITLE: Access Texture Contrast by Name (bpy.data)\nDESCRIPTION: This snippet demonstrates how to directly access the contrast of a texture by its name using bpy.data.textures[\"Texture\"].contrast. It assumes a texture named \"Texture\" exists in the Blender scene.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nbpy.data.textures[\"Texture\"].contrast\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Bullet - CMake\nDESCRIPTION: Conditionally includes Bullet physics library based on the 'WITH_BULLET' flag. Appends the Bullet libraries and adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND LIB\n    ${BULLET_LIBRARIES}\n  )\n  add_definitions(-DWITH_BULLET)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Directories\nDESCRIPTION: These commands add the previously defined include directories to the compiler's include path. This allows the compiler to find the header files needed to build the Cycles utility library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Fluid\nDESCRIPTION: This snippet conditionally includes a directory related to fluid simulation if `WITH_MOD_FLUID` is enabled, and defines the `WITH_FLUID` macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  list(APPEND INC\n    ../../../intern/mantaflow/extern\n  )\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories for the Eigen library.  '.' represents the current source directory. INC_SYS is left empty, implying no system-level includes are explicitly set here.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/eigen/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional compilation flags (Python support)\nDESCRIPTION: This snippet adds a preprocessor definition ('-DWITH_PYTHON') if Python support is enabled (WITH_PYTHON).  It also appends the python include directory to the INC variable. This enables code that is conditionally compiled based on Python support.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\n  list(APPEND INC\n    ../python\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Converting Data to C Simple Array Using CMake\nDESCRIPTION: This CMake command calls a custom function or macro named `data_to_c_simple`.  It takes the path `../../../../release/datafiles/bfont.pfb` as input (presumably a font file) and specifies `SRC` as an argument, which may determine how the data is processed and converted to a C-style array.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ndata_to_c_simple(../../../../release/datafiles/bfont.pfb SRC)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines system include directories for the cuew library. Currently, it's an empty set.  This variable is later passed to the blender_add_lib function, allowing for the inclusion of system-level headers if needed.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/cuew/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files\nDESCRIPTION: This command defines the list of header files (`.h`) that are part of the Cycles utility library. These header files declare the interfaces and data structures used by the source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  algorithm.h\n  aligned_malloc.h\n  args.h\n  array.h\n  atomic.h\n  boundbox.h\n  color.h\n  concurrent_set.h\n  concurrent_vector.h\n  debug.h\n  defines.h\n  deque.h\n  disjoint_set.h\n  guarded_allocator.cpp\n  guarded_allocator.h\n  guiding.h\n  half.h\n  hash.h\n  ies.h\n  image.h\n  image_impl.h\n  list.h\n  log.h\n  map.h\n  math.h\n  math_base.h\n  math_cdf.h\n  math_fast.h\n  math_intersect.h\n  math_float2.h\n  math_float3.h\n  math_float4.h\n  math_float8.h\n  math_int2.h\n  math_int3.h\n  math_int4.h\n  math_int8.h\n  md5.h\n  murmurhash.h\n  openimagedenoise.h\n  openvdb.h\n  optimization.h\n  param.h\n  path.h\n  profiling.h\n  progress.h\n  projection.h\n  projection_inverse.h\n  queue.h\n  rect.h\n  set.h\n  simd.h\n  semaphore.h\n  stack_allocator.h\n  static_assert.h\n  stats.h\n  string.h\n  system.h\n  task.h\n  tbb.h\n  texture.h\n  thread.h\n  time.h\n  transform.h\n  types.h\n  types_base.h\n  types_float2.h\n  types_float3.h\n  types_float4.h\n  types_float8.h\n  types_int2.h\n  types_int3.h\n  types_int4.h\n  types_int8.h\n  types_spectrum.h\n  types_uchar2.h\n  types_uchar3.h\n  types_uchar4.h\n  types_uint2.h\n  types_uint3.h\n  types_uint4.h\n  types_ushort4.h\n  unique_ptr.h\n  unique_ptr_vector.h\n  vector.h\n  version.h\n  windows.h\n  xml.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions (MSVC)\nDESCRIPTION: This snippet adds a compiler definition specifically for Microsoft Visual C++ (MSVC) compilers. The `/DNOMINMAX` definition prevents the compiler from defining `min` and `max` macros, which can conflict with standard library functions. This is conditional compilation for MSVC builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  add_definitions(\n    /DNOMINMAX\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files\nDESCRIPTION: This snippet sets the list of source files for the `makesrna` executable. This includes C and C++ files, as well as some data files included as source.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  makesrna.cc\n  rna_define.cc\n  ${DEFSRC}\n  ${APISRC}\n  ../../../../intern/clog/clog.c\n  # Needed for defaults.\n  ../../../../release/datafiles/userdef/userdef_default.c\n  ../../../../release/datafiles/userdef/userdef_default_theme.c\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: Draw Debug\nDESCRIPTION: This snippet conditionally adds `select_debug_engine.cc` to the source files and defines the `WITH_DRAW_DEBUG` macro if the `WITH_DRAW_DEBUG` option is enabled. This allows for debugging functionality to be included during development.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_DRAW_DEBUG)\n  list(APPEND SRC\n    engines/select/select_debug_engine.cc\n  )\n  add_definitions(-DWITH_DRAW_DEBUG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enable TBB for multi-threading\nDESCRIPTION: This option enables multi-threading using TBB (Threading Building Blocks). TBB is also required for features such as Cycles, OpenVDB, and USD.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_48\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_TBB \"\\\nEnable multi-threading. TBB is also required for features such as Cycles, OpenVDB and USD\"\n  ON\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Metal Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines the Metal kernel source file. It specifies the Metal Shading Language implementation of the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_METAL\n  device/metal/kernel.metal\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenJPEG Defines - CMake\nDESCRIPTION: This snippet configures OpenJPEG defines based on the platform. If on Windows, it sets `OPENJPEG_DEFINES` to `-DOPJ_STATIC`, otherwise, it's set to an empty string.  It handles the special case for windows, where openjpeg is always statically linked.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_100\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENJPEG)\n  # Special handling of Windows platform where openjpeg is always static.\n  if(WIN32)\n    set(OPENJPEG_DEFINES \"-DOPJ_STATIC\")\n  else()\n    set(OPENJPEG_DEFINES \"\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Access Subdivision Modifier Levels in Blender (bpy.context)\nDESCRIPTION: This snippet demonstrates how to access the levels of a Subdivision Surface modifier on the active object.  It assumes the active object has a modifier named \"Subdivision\". It uses bpy.context.active_object.modifiers[\"Subdivision\"].levels to get or set the levels value.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_api_reference.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbpy.context.active_object.modifiers[\"Subdivision\"].levels\n```\n\n----------------------------------------\n\nTITLE: Creating Compositor Library\nDESCRIPTION: This snippet creates the `bf_compositor` library, linking the source files, include directories, and system include directories, and libraries. This library depends on `bf_compositor_shaders` which holds the shader code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_compositor \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional UTF Conversion Include for Windows in CMake\nDESCRIPTION: This snippet conditionally adds the UTF conversion include directory for Windows builds.  It checks if the target platform is WIN32 and, if so, appends the path to the INC variable.  This is necessary for handling Unicode characters correctly on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  list(APPEND INC ../../../intern/utfconv)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Vulkan Memory Allocator Inclusion with CMake\nDESCRIPTION: Conditionally includes the Vulkan Memory Allocator library if the `WITH_VULKAN_BACKEND` flag is enabled, signifying that the project uses a Vulkan rendering backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_VULKAN_BACKEND)\n  add_subdirectory(vulkan_memory_allocator)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Distribution Packages in CMake\nDESCRIPTION: This snippet defines a custom target named `dist` that creates distribution packages of the LEMON library. It generates both `.tar.gz` and `.zip` archives, including or excluding the documentation based on different suffixes. It uses CMake commands to remove directories, copy files, and create the archives. It depends on the 'html' target and works in the project binary directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nSET(ARCHIVE_BASE_NAME ${CMAKE_PROJECT_NAME})\nSTRING(TOLOWER ${ARCHIVE_BASE_NAME} ARCHIVE_BASE_NAME)\nSET(ARCHIVE_NAME ${ARCHIVE_BASE_NAME}-${PROJECT_VERSION})\nADD_CUSTOM_TARGET(dist\n  COMMAND cmake -E remove_directory ${ARCHIVE_NAME}\n  COMMAND hg archive ${ARCHIVE_NAME}\n  COMMAND cmake -E copy cmake/version.cmake ${ARCHIVE_NAME}/cmake/version.cmake\n  COMMAND tar -czf ${ARCHIVE_BASE_NAME}-nodoc-${PROJECT_VERSION}.tar.gz ${ARCHIVE_NAME}\n  COMMAND zip -r ${ARCHIVE_BASE_NAME}-nodoc-${PROJECT_VERSION}.zip ${ARCHIVE_NAME}\n  COMMAND cmake -E copy_directory doc/html ${ARCHIVE_NAME}/doc/html\n  COMMAND tar -czf ${ARCHIVE_NAME}.tar.gz ${ARCHIVE_NAME}\n  COMMAND zip -r ${ARCHIVE_NAME}.zip ${ARCHIVE_NAME}\n  COMMAND cmake -E copy_directory doc/html ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  COMMAND tar -czf ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}.tar.gz ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  COMMAND zip -r ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}.zip ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  COMMAND cmake -E remove_directory ${ARCHIVE_NAME}\n  COMMAND cmake -E remove_directory ${ARCHIVE_BASE_NAME}-doc-${PROJECT_VERSION}\n  DEPENDS html\n  WORKING_DIRECTORY ${PROJECT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Freestyle - CMake\nDESCRIPTION: Conditionally appends the Freestyle include directory and library to the respective lists and defines a preprocessor macro if Freestyle support is enabled. This allows the Render module to utilize Freestyle rendering features if the 'WITH_FREESTYLE' option is turned on.  Requires the existence of ../freestyle directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_FREESTYLE)\n  list(APPEND INC\n    ../freestyle\n  )\n  list(APPEND LIB\n    bf_freestyle\n  )\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure portable installation\nDESCRIPTION: This snippet defines an option for portable installation on UNIX systems (excluding macOS, unless WITH_PYTHON_MODULE is enabled). When enabled, the application installs a redistributable runtime. Otherwise, it installs into CMAKE_INSTALL_PREFIX. This affects where the application's runtime dependencies are placed during installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND (NOT APPLE OR WITH_PYTHON_MODULE))\n  option(WITH_INSTALL_PORTABLE \"\\\nInstall redistributable runtime, otherwise install into CMAKE_INSTALL_PREFIX\"\n    ON\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing USD Library\nDESCRIPTION: This CMake code conditionally installs the USD (Universal Scene Description) library. It checks if `WITH_USD` is enabled. It then attempts to install the library files to the correct directory, excluding cache files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\n      if(WITH_USD)\n        # Install to the same directory as the source, so debian-like\n        # distributions are happy with their policy.\n        set(_suffix \"site-packages\")\n        if(0) # TODO: `PYTHON_USD_PATH` isn't defined anywhere.\n          if(${PYTHON_USD_PATH} MATCHES \"dist-packages\")\n            set(_suffix \"dist-packages\")\n          endif()\n        endif()\n        install(\n          DIRECTORY ${USD_LIBRARY_DIR}/python/\n          DESTINATION ${TARGETDIR_VER}/python/${_target_LIB}/python${PYTHON_VERSION}/${_suffix}\n          PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n          PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n          PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n        )\n        unset(_suffix)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Suspension Damping (KX_VehicleWrapper)\nDESCRIPTION: This method sets the suspension damping for a specified wheel. It requires the damping value as a float and the wheel index as an integer.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_VehicleWrapper.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n   .. method:: setSuspensionDamping(damping, wheelIndex)\n\n      Set the specified wheel's damping\n\n      :arg damping: the wheel damping\n      :type damping: float\n\n      :arg wheelIndex: the wheel index\n      :type wheelIndex: integer\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines the source files that make up the game engine player library. It lists the .cpp and .h files that will be compiled and linked to create the library. The files specified are GPG_Canvas.cpp, GPG_ghost.cpp, and GPG_Canvas.h.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  GPG_Canvas.cpp\n  GPG_ghost.cpp\n\n  GPG_Canvas.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines variables to store include directories. `INC` stores local include directories, and `INC_SYS` stores system include directories. These variables will be used when creating the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../source/blender/gpu/intern\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional TBB Definition on Windows\nDESCRIPTION: This code snippet defines NOMINMAX on Windows platforms if WITH_TBB is enabled to avoid conflicts between Windows.h and STL min/max macros.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n    # TBB includes Windows.h which will define min/max macros\n    # that will collide with the STL versions.\n    add_definitions(-DNOMINMAX)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: Defines the source files for the executable.  It sets the `SRC` variable to `IMB_scaling_performance_test.cc`, indicating the C++ source file that contains the test logic.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/tests/performance/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  IMB_scaling_performance_test.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding CGL Context Source Files (CMake)\nDESCRIPTION: Conditionally adds source files related to the CGL (Core Graphics Library) context when building on macOS (APPLE) and when the `WITH_METAL_BACKEND` flag is enabled. It adds `GHOST_ContextCGL.mm` and `GHOST_ContextCGL.hh` to the source file list. This is for using Metal graphics backend on macOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  if(WITH_METAL_BACKEND)\n    list(APPEND SRC\n      intern/GHOST_ContextCGL.mm\n\n      intern/GHOST_ContextCGL.hh\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting include directories for xxHash - CMake\nDESCRIPTION: This snippet sets the include directories for the xxHash library. The `INC` variable defines public include directories, and `INC_SYS` is for system include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xxhash/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional SOPLEX Integration CMake\nDESCRIPTION: Conditionally includes SoPlex support. If `LEMON_HAVE_SOPLEX` is true, it adds `soplex.cc` to the source files and includes the SoPlex include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_SOPLEX)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} soplex.cc)\n  INCLUDE_DIRECTORIES(${SOPLEX_INCLUDE_DIRS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Configuration (FBX) - CMake\nDESCRIPTION: This snippet conditionally appends the FBX I/O library and defines a preprocessor definition if the WITH_IO_FBX flag is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_FBX)\n  list(APPEND LIB\n    bf_io_fbx\n  )\n  add_definitions(-DWITH_IO_FBX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enabling GL Capabilities with glEnable (bgl)\nDESCRIPTION: Enables a server-side GL capability. The 'cap' parameter specifies a symbolic constant indicating the capability to enable.  This turns on specific OpenGL features.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glEnable(cap)\n```\n\n----------------------------------------\n\nTITLE: Metal Backend Option\nDESCRIPTION: This snippet defines an option to enable Metal for graphics on macOS. On other platforms, the option is disabled.  The option is marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  option(WITH_METAL_BACKEND \"\\\nUse Metal for graphics instead of (or as well as) OpenGL on macOS.\"\n    ON\n  )\n  mark_as_advanced(WITH_METAL_BACKEND)\nelse()\n  set(WITH_METAL_BACKEND OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Defines the include directories for the UTF conversion library. `INC` specifies the public include path as the current directory, and `INC_SYS` is currently empty for system includes.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/utfconv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This CMake command defines the external libraries (`LIB`) that the ITASC library depends on. It specifies that the ITASC library depends on Eigen, managed as a dependency by Blender's build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/itasc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PUBLIC bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OptiX Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines the OptiX kernel source files. These files include the main kernel implementation and a shader for ray tracing.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_OPTIX\n  device/optix/kernel.cu\n  device/optix/kernel_shader_raytrace.cu\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Compiler Flags Test - CMake\nDESCRIPTION: This snippet adds custom compiler flags for the blenderplayer.  It utilizes a function `add_cc_flags_custom_test`, which is assumed to be defined elsewhere, to perform this operation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_cc_flags_custom_test(blenderplayer)\n```\n\n----------------------------------------\n\nTITLE: Conditional CBC Integration CMake\nDESCRIPTION: Conditionally includes CBC support. If `LEMON_HAVE_CBC` is true, it adds `cbc.cc` to the source files and includes the CoinUtils include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_CBC)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} cbc.cc)\n  INCLUDE_DIRECTORIES(${COIN_INCLUDE_DIRS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Adding Action Editor Library\nDESCRIPTION: This CMake snippet uses the `blender_add_lib` macro to create the Action Editor library (`bf_editor_space_action`). It specifies the source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_action/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_action \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Licenses\nDESCRIPTION: This snippet uses the `delayed_install` function to copy the license files to the specified installation directory. The `CMAKE_CURRENT_SOURCE_DIR` and `CYCLES_INSTALL_PATH` variables must be defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/doc/license/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${LICENSES}\" ${CYCLES_INSTALL_PATH}/license)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Defines the include directories required for the project.  These paths are used by the compiler to locate header files during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../blender/editors/include\n  ../blender/io/usd\n  ../blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Game Engine - CMake\nDESCRIPTION: Conditionally defines a preprocessor macro if the Game Engine is enabled. This allows the Render module to integrate with the Game Engine if the 'WITH_GAMEENGINE' option is turned on.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GAMEENGINE)\n\tadd_definitions(-DWITH_GAMEENGINE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Library\nDESCRIPTION: This snippet appends the generated geometry nodes library (`bf_nodes_geometry_generated`) to the `LIB` variable, which is presumably used later for linking.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND LIB\n  bf_nodes_geometry_generated\n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated Include gflags Header\nDESCRIPTION: This code snippet shows the older, now deprecated, way to include the gflags header file.  Using the new path `/usr/include/gflags/gflags.h` is encouraged.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/NEWS.txt#_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <google/gflags.h>\n```\n\n----------------------------------------\n\nTITLE: Setting library dependencies for xxHash - CMake\nDESCRIPTION: This snippet sets the library dependencies for the xxHash library. In this case, the `LIB` variable is empty, indicating that there are no explicit library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xxhash/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting system include directories (empty)\nDESCRIPTION: This snippet sets system include directories (currently empty), which can be used to specify system-level include paths for the gflags library if needed in the future.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version and Project\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name.  It ensures that the CMake version used is at least 3.1 and names the project 'libgmpxx'.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_gmpxx.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.1)\nproject(libgmpxx)\n```\n\n----------------------------------------\n\nTITLE: Append C Flags\nDESCRIPTION: Appends the platform-specific C flags to the `CMAKE_C_FLAGS` and `CMAKE_CXX_FLAGS` variables. This ensures the correct flags are used when compiling C and C++ code.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nstring(APPEND CMAKE_C_FLAGS \" ${PLATFORM_CFLAGS}\")\nstring(APPEND CMAKE_CXX_FLAGS \" ${PLATFORM_CFLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Definition for Build Information\nDESCRIPTION: This snippet conditionally adds a preprocessor definition `WITH_BUILDINFO` if the `WITH_BUILDINFO` variable is defined. This enables code related to build information during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/collada/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (LIB)\nDESCRIPTION: Sets the libraries to be linked with the performance test executable. It includes bf_blenlib and several bf::dna, bf::intern::guardedalloc, bf::intern::atomic.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/tests/performance/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf_blenlib\n  PRIVATE bf::dna\n  PRIVATE PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::atomic\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenColorIO Include\nDESCRIPTION: Appends the OpenColorIO include directory to the list of include directories. This ensures that the imbuf library can access the necessary headers for color management.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND INC\n  ../../../intern/opencolorio\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional NanoVDB Configuration\nDESCRIPTION: This snippet configures NanoVDB integration by appending the NanoVDB include directories to the `INC_SYS` variable, enabling the use of NanoVDB within Cycles.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_NANOVDB)\n  list(APPEND INC_SYS\n    ${NANOVDB_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet specifies the dependent libraries. `bf::blenlib` and `bf::intern::guardedalloc` and `bf::gpu` are defined as private dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::gpu\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compute Shader Sources\nDESCRIPTION: Lists the GLSL files used as compute shaders for the workbench.  Compute shaders are used for general-purpose computations on the GPU, such as shadow visibility calculations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_COMP\n  workbench_shadow_visibility_comp.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on the bf_rna library, ensuring that bf_rna is built before bf_editor_screen. This is needed for the generated RNA headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_screen bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Decklink)\nDESCRIPTION: Conditionally adds the 'decklink' subdirectory if the WITH_GAMEENGINE_DECKLINK flag is enabled. This allows for optional inclusion of the Decklink library when building the game engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE_DECKLINK)\n\tadd_subdirectory(decklink)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Vertex Shader Sources\nDESCRIPTION: Defines the list of GLSL vertex shader source files used for Grease Pencil rendering. These files contain the vertex processing logic.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_VERT\n  gpencil_antialiasing_vert.glsl\n  gpencil_depth_merge_vert.glsl\n  gpencil_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: OpenGL Backend Option\nDESCRIPTION: This snippet enables OpenGL support as the graphics backend, except on macOS, where it is disabled by default.  The option is marked as advanced.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT APPLE)\n  option(WITH_OPENGL_BACKEND \"Enable OpenGL support as graphic backend\" ON)\n  mark_as_advanced(WITH_OPENGL_BACKEND)\nelse()\n  set(WITH_OPENGL_BACKEND OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB) - CMake\nDESCRIPTION: This CMake snippet defines a variable `LIB` for external library dependencies. In this case, it's empty, implying that the sky model library doesn't have external library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/sky/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Appending flags for NanoVDB integration\nDESCRIPTION: This snippet conditionally appends a compiler flag to enable NanoVDB integration if the WITH_NANOVDB option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_NANOVDB)\n    list(APPEND sycl_compiler_flags\n      -DWITH_NANOVDB)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directories. This list appears to be empty initially, presumably populated later via conditional logic.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (BPPlayer)\nDESCRIPTION: Conditionally adds the 'spindle' subdirectory if the WITH_GAMEENGINE_BPPLAYER flag is enabled.  This allows for optional inclusion of the BPPlayer library when building the game engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (WITH_GAMEENGINE_BPPLAYER)\n  add_subdirectory(spindle)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Hydra Subdirectory - CMake\nDESCRIPTION: Conditionally adds the 'hydra' subdirectory to the build process if the 'WITH_HYDRA' option is enabled.  This integrates the Hydra rendering framework with the Render module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_HYDRA)\n  add_subdirectory(hydra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Script Installation (Python)\nDESCRIPTION: This CMake snippet conditionally installs Blender's Python scripts into the Blenderplayer application bundle. It checks if Python is enabled (`WITH_PYTHON`) and then excludes specific directories (addons_contrib, freestyle) based on the Blender version cycle (release, rc) and whether freestyle is enabled. This ensures that only the necessary scripts are installed and that development or testing scripts are excluded in production builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON)\n    # install(CODE \"message(\\\"copying blender scripts...\\\")\")\n\n    # exclude addons_contrib if release\n    if(\"${BLENDER_VERSION_CYCLE}\" STREQUAL \"release\" OR\n       \"${BLENDER_VERSION_CYCLE}\" STREQUAL \"rc\")\n      set(ADDON_EXCLUDE_CONDITIONAL \"addons_contrib/*\")\n    else()\n      set(ADDON_EXCLUDE_CONDITIONAL \"_addons_contrib/*\")  # dummy, wont do anything\n    endif()\n\n    # do not install freestyle dir if disabled\n    if(NOT WITH_FREESTYLE)\n      set(FREESTYLE_EXCLUDE_CONDITIONAL \"freestyle/*\")\n    else()\n      set(FREESTYLE_EXCLUDE_CONDITIONAL \"_freestyle/*\")  # dummy, wont do anything\n    endif()\n\n    install(\n      DIRECTORY ${CMAKE_SOURCE_DIR}/scripts\n      DESTINATION ${PLAYER_TARGETDIR_VER}\n      PATTERN \".git\" EXCLUDE\n      PATTERN \".gitignore\" EXCLUDE\n      PATTERN \".arcconfig\" EXCLUDE\n      PATTERN \"__pycache__\" EXCLUDE\n      PATTERN \"site\" EXCLUDE\n      PATTERN \"${ADDON_EXCLUDE_CONDITIONAL}\" EXCLUDE\n      PATTERN \"${FREESTYLE_EXCLUDE_CONDITIONAL}\" EXCLUDE\n    )\n\n    unset(ADDON_EXCLUDE_CONDITIONAL)\n    unset(FREESTYLE_EXCLUDE_CONDITIONAL)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Looping Through Tests and Adding Executables (CMake)\nDESCRIPTION: This snippet iterates through the list of tests defined in the `TESTS` variable. For each test, it adds an executable target, links it to the lemon library, and adds a test command.  It supports running tests with Valgrind if the `TEST_WITH_VALGRIND` option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nFOREACH(TEST_NAME ${TESTS})\n  IF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n    ADD_EXECUTABLE(${TEST_NAME} ${TEST_NAME}.cc)\n  ELSE()\n    ADD_EXECUTABLE(${TEST_NAME} EXCLUDE_FROM_ALL ${TEST_NAME}.cc)\n  ENDIF()\n  TARGET_LINK_LIBRARIES(${TEST_NAME} lemon)\n    IF(TEST_WITH_VALGRIND)\n      ADD_TEST(${TEST_NAME}\n        valgrind --error-exitcode=1 ${VALGRIND_FLAGS}\n        ${CMAKE_CURRENT_BINARY_DIR}/${TEST_NAME} )\n    ELSE()\n      ADD_TEST(${TEST_NAME} ${TEST_NAME})\n    ENDIF()\n  ADD_DEPENDENCIES(check ${TEST_NAME})\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: This snippet defines the list of C++ source files that comprise the bf_editor_curve library. These files implement the curve editing functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/curve/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  curve_ops.cc\n  editcurve.cc\n  editcurve_add.cc\n  editcurve_paint.cc\n  editcurve_pen.cc\n  editcurve_query.cc\n  editcurve_select.cc\n  editcurve_undo.cc\n  editfont.cc\n  editfont_undo.cc\n\n  curve_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet specifies system include directories, primarily for external libraries used by the STL I/O library.  It includes the path to the fast_float library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ../../../../extern/fast_float\n)\n```\n\n----------------------------------------\n\nTITLE: Appending to CMAKE_MODULE_PATH\nDESCRIPTION: Appends the path to custom CMake modules to the CMAKE_MODULE_PATH variable. This allows CMake to find custom modules located in the specified directory during the configuration stage.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/../cmake/Modules\")\n```\n\n----------------------------------------\n\nTITLE: CPACK Install Prefix\nDESCRIPTION: This snippet sets the CPACK installation prefix on Windows platforms. It uses a function `getDefaultWindowsPrefixBase` to determine the appropriate program files directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  getDefaultWindowsPrefixBase(CMAKE_GENERIC_PROGRAM_FILES)\n  set(CPACK_INSTALL_PREFIX ${CMAKE_GENERIC_PROGRAM_FILES}/${})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Metal Backend Setup (CMake)\nDESCRIPTION: This CMake snippet adds source files to the SRC list if the Metal backend is enabled. It's a basic inclusion step for the Metal backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_METAL_BACKEND)\n  list(APPEND SRC ${METAL_SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This CMake snippet defines the source files used to build the library. In this case, it specifies `testing_main.cc` and `testing.h` as the primary source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/testing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  testing_main.cc\n\n  testing.h\n)\n```\n\n----------------------------------------\n\nTITLE: String Checking with Case Insensitivity (Python)\nDESCRIPTION: Demonstrates using `lower()` and `startswith()` together to check if a string starts with a specific substring, regardless of the case.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nif line.lower().startswith(\"vert \")\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Standard\nDESCRIPTION: This snippet sets the C++ standard to C++17 and requires it. It also disables compiler-specific language extensions.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_135\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 17)\n# If C++17 is not available, downgrading to an earlier standard is NOT OK.\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n# Do not enable compiler specific language extensions.\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Setting Lemon Sources CMake\nDESCRIPTION: Sets the list of source files for the Lemon library. This defines the core source files that will be compiled into the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nSET(LEMON_SOURCES\n  arg_parser.cc\n  base.cc\n  color.cc\n  lp_base.cc\n  lp_skeleton.cc\n  random.cc\n  bits/windows.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories for the GMock library. `INC` represents the local include directory, and `INC_SYS` represents the system include directory for gtest.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gmock/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  include\n)\n\nset(INC_SYS\n  ../gtest/include\n)\n```\n\n----------------------------------------\n\nTITLE: Open Image Denoise Configuration - CMake\nDESCRIPTION: This snippet handles Open Image Denoise configuration, adding the necessary definition and include directory if it's enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  include_directories(\n    SYSTEM\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional compilation with OpenVDB\nDESCRIPTION: Conditionally adds OpenVDB include directories, libraries, and definitions if OpenVDB is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: Defines system include directories for the armature editor library.  This variable is currently empty, suggesting no additional system includes are needed at this time.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/armature/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Paths\nDESCRIPTION: This snippet defines the system include directories needed to compile the object editor library. In this case, it is empty, meaning no additional system-level includes are required.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Name for Draco\nDESCRIPTION: Defines the name of the Draco library, which is used for linking against the library. This name corresponds to the library built in the `add_subdirectory(draco)` command.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  draco\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Quadriflow Library\nDESCRIPTION: This snippet adds the Quadriflow library using the blender_add_lib macro, specifying the source files, include directories, system include directories, and library files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_quadriflow \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files that are part of the `bf_editor_id_management` library. The `ed_id_management.cc` file contains the implementation of the editor ID management functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/id_management/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  ed_id_management.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: Sets the list of libraries that the GHOST library depends on. These are typically Blender's internal libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n)\n```\n\n----------------------------------------\n\nTITLE: Computing Grids with glEvalMesh (bgl)\nDESCRIPTION: Computes a one- or two-dimensional grid of points or lines.  This function generates a mesh based on previously defined maps.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glEvalMesh (mode, i1, i2)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories needed for compiling the Moto library. It includes the `include` directory and the `../../source/blender/blenlib` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/moto/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n\tinclude\n\t../../source/blender/blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGL Libraries\nDESCRIPTION: Appends the Epoxy libraries to the LIB list if the WITH_OPENGL_BACKEND option is enabled. This links the necessary OpenGL extension handling libraries to the bf_python_ext library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/generic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENGL_BACKEND)\n  list(APPEND LIB\n    ${Epoxy_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring GHOST Debugging\nDESCRIPTION: Adds source files and a preprocessor definition if GHOST debugging is enabled, incorporating the GHOST_EventPrinter for debugging purposes.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GHOST_DEBUG)\n  list(APPEND SRC\n    intern/GHOST_EventPrinter.cc\n\n    intern/GHOST_EventPrinter.hh\n  )\n  add_definitions(-DWITH_GHOST_DEBUG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Defines the source files for the binreloc library, including 'binreloc.c' and 'include/binreloc.h'. These files are required to build the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/binreloc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  binreloc.c\n\n  include/binreloc.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for RenderDoc\nDESCRIPTION: This snippet defines the include directories required for compiling RenderDoc integration. It includes both internal include directory and the external RenderDoc include directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/renderdoc_dynload/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  include\n  ../../extern/renderdoc/include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories for the script editor module. It sets the include paths for local headers and the makesrna directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_script/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Dependencies in CMake\nDESCRIPTION: This snippet establishes a dependency between the bf_editor_sound library and the bf_rna library. This ensures that the bf_rna library is built before the bf_editor_sound library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_sound bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories required for compiling the geometry library. It includes both local project directories and external library include paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../makesrna\n  ../../../intern/eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Inclusion (IO_CSV) - CMake\nDESCRIPTION: This snippet conditionally appends libraries related to CSV I/O to the list of libraries. It also adds a compiler definition `WITH_IO_CSV` if `WITH_IO_CSV` is true. This indicates that the CSV I/O functionality should be included during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_CSV)\n  list(APPEND LIB\n    PRIVATE bf_io_common\n    PRIVATE bf_io_csv\n  )\n  add_definitions(-DWITH_IO_CSV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Curves Extrude Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for curve extrusion functionality. It loads the `curves_extrude.blend` file and runs the `curves_extrude.py` Python script, executing all tests defined within the script using the `--run-all-tests` argument.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    curves_extrude\n    ${TEST_SRC_DIR}/modeling/curves_extrude.blend\n    --python ${TEST_PYTHON_DIR}/curves_extrude.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Headless Build Option\nDESCRIPTION: This snippet defines the WITH_HEADLESS option for building without graphical support, intended for render farms or server mode. It's marked as an advanced option.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\n# Misc...\noption(WITH_HEADLESS \"Build without graphical support (renderfarm, server mode only)\" OFF)\nmark_as_advanced(WITH_HEADLESS)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet lists all the source files that will be compiled into the shader node library. The files are primarily C++ implementations of various shader nodes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nodes/node_shader_add_shader.cc\n  nodes/node_shader_ambient_occlusion.cc\n  nodes/node_shader_attribute.cc\n  nodes/node_shader_background.cc\n  nodes/node_shader_bevel.cc\n  nodes/node_shader_blackbody.cc\n  nodes/node_shader_brightness.cc\n  nodes/node_shader_bsdf_diffuse.cc\n  nodes/node_shader_bsdf_glass.cc\n  nodes/node_shader_bsdf_glossy.cc\n  nodes/node_shader_bsdf_hair.cc\n  nodes/node_shader_bsdf_hair_principled.cc\n  nodes/node_shader_bsdf_metallic.cc\n  nodes/node_shader_bsdf_principled.cc\n  nodes/node_shader_bsdf_ray_portal.cc\n  nodes/node_shader_bsdf_refraction.cc\n  nodes/node_shader_bsdf_sheen.cc\n  nodes/node_shader_bsdf_toon.cc\n  nodes/node_shader_bsdf_translucent.cc\n  nodes/node_shader_bsdf_transparent.cc\n  nodes/node_shader_bump.cc\n  nodes/node_shader_camera.cc\n  nodes/node_shader_clamp.cc\n  nodes/node_shader_color_ramp.cc\n  nodes/node_shader_common.cc\n  nodes/node_shader_curves.cc\n  nodes/node_shader_displacement.cc\n  nodes/node_shader_eevee_specular.cc\n  nodes/node_shader_emission.cc\n  nodes/node_shader_fresnel.cc\n  nodes/node_shader_gamma.cc\n  nodes/node_shader_geometry.cc\n  nodes/node_shader_hair_info.cc\n  nodes/node_shader_holdout.cc\n  nodes/node_shader_hueSatVal.cc\n  nodes/node_shader_ies_light.cc\n  nodes/node_shader_invert.cc\n  nodes/node_shader_layer_weight.cc\n  nodes/node_shader_light_falloff.cc\n  nodes/node_shader_light_path.cc\n  nodes/node_shader_map_range.cc\n  nodes/node_shader_mapping.cc\n  nodes/node_shader_math.cc\n  nodes/node_shader_mix.cc\n  nodes/node_shader_mix_rgb.cc\n  nodes/node_shader_mix_shader.cc\n  nodes/node_shader_normal.cc\n  nodes/node_shader_normal_map.cc\n  nodes/node_shader_object_info.cc\n  nodes/node_shader_output_aov.cc\n  nodes/node_shader_output_light.cc\n  nodes/node_shader_output_linestyle.cc\n  nodes/node_shader_output_material.cc\n  nodes/node_shader_output_world.cc\n  nodes/node_shader_particle_info.cc\n  nodes/node_shader_point_info.cc\n  nodes/node_shader_rgb.cc\n  nodes/node_shader_rgb_to_bw.cc\n  nodes/node_shader_script.cc\n  nodes/node_shader_sepcomb_color.cc\n  nodes/node_shader_sepcomb_hsv.cc\n  nodes/node_shader_sepcomb_rgb.cc\n  nodes/node_shader_sepcomb_xyz.cc\n  nodes/node_shader_shader_to_rgb.cc\n  nodes/node_shader_sprites_animation.cc\n  nodes/node_shader_squeeze.cc\n  nodes/node_shader_subsurface_scattering.cc\n  nodes/node_shader_tangent.cc\n  nodes/node_shader_tex_brick.cc\n  nodes/node_shader_tex_checker.cc\n  nodes/node_shader_tex_coord.cc\n  nodes/node_shader_tex_environment.cc\n  nodes/node_shader_tex_gabor.cc\n  nodes/node_shader_tex_gradient.cc\n  nodes/node_shader_tex_image.cc\n  nodes/node_shader_tex_magic.cc\n  nodes/node_shader_tex_noise.cc\n  nodes/node_shader_tex_pointdensity.cc\n  nodes/node_shader_tex_sky.cc\n  nodes/node_shader_tex_voronoi.cc\n  nodes/node_shader_tex_wave.cc\n  nodes/node_shader_tex_white_noise.cc\n  nodes/node_shader_uv_along_stroke.cc\n  nodes/node_shader_uvmap.cc\n  nodes/node_shader_value.cc\n  nodes/node_shader_vector_displacement.cc\n  nodes/node_shader_vector_math.cc\n  nodes/node_shader_vector_rotate.cc\n  nodes/node_shader_vector_transform.cc\n  nodes/node_shader_vertex_color.cc\n  nodes/node_shader_volume_absorption.cc\n  nodes/node_shader_volume_info.cc\n  nodes/node_shader_volume_principled.cc\n  nodes/node_shader_volume_scatter.cc\n  nodes/node_shader_wavelength.cc\n  nodes/node_shader_wireframe.cc\n\n  node_shader_register.cc\n  node_shader_tree.cc\n  node_shader_util.cc\n\n  node_shader_register.hh\n  node_shader_util.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Strict GCC C++ Compiler Flags\nDESCRIPTION: This code removes strict C++ compiler warning flags by using `add_check_cxx_compiler_flags` with the `CXX_REMOVE_STRICT_FLAGS` option. Several warning flags are disabled using `-Wno-` prefixes including `-Wno-class-memaccess`, `-Wno-comment`, `-Wno-unused-local-typedefs`, and others.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_115\n\nLANGUAGE: CMake\nCODE:\n```\n  add_check_cxx_compiler_flags(\n    CXX_REMOVE_STRICT_FLAGS\n\n    CXX_WARN_NO_CLASS_MEMACCESS -Wno-class-memaccess\n    CXX_WARN_NO_COMMENT -Wno-comment\n    CXX_WARN_NO_UNUSED_TYPEDEFS -Wno-unused-local-typedefs\n    CXX_WARN_NO_UNUSED_VARIABLE -Wno-unused-variable\n    CXX_WARN_NO_UNINITIALIZED -Wno-uninitialized\n    CXX_WARN_NO_REORDER -Wno-reorder\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting SVG Filenames for Blender UI in CMake\nDESCRIPTION: This CMake code snippet conditionally sets a variable named `SVG_FILENAMES_NOEXT` to a list of SVG filenames (without extensions).  This list is only defined if `WITH_BLENDER` is enabled and `WITH_HEADLESS` is not enabled, indicating that the code is for the Blender UI and not a headless build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_BLENDER)\n  # Blender only (not Cycles stand-alone).\n\n  if(NOT WITH_HEADLESS)\n    # Blender UI only.\n\n    set(SVG_FILENAMES_NOEXT\n      action\n      action_slot\n      action_tweak\n      add\n      aliased\n      align_bottom\n      align_center\n      align_flush\n      align_justify\n      align_left\n      align_middle\n      align_right\n      align_top\n      anchor_bottom\n      anchor_center\n      anchor_left\n      anchor_right\n      anchor_top\n      anim\n      anim_data\n      antialiased\n      append_blend\n      area_dock\n      area_join\n      area_join_down\n      area_join_left\n      area_join_up\n      area_swap\n      armature_data\n      arrow_leftright\n      asset_manager\n      auto\n      automerge_off\n      automerge_on\n      axis_front\n      axis_side\n      axis_top\n      back\n      blank1\n      blender\n      blender_logo_large\n      boids\n      bold\n      bone_data\n      bookmarks\n      bordermove\n      brushes_all\n      brush_data\n      camera_data\n      camera_stereo\n      cancel\n      cancel_large\n      center_only\n      char_notdef\n      char_replacement\n      checkbox_dehlt\n      checkbox_hlt\n      checkmark\n      clipuv_dehlt\n      clipuv_hlt\n      collapsemenu\n      collection_new\n      color\n      color_blue\n      color_green\n      color_red\n      community\n      cone\n      console\n      constraint\n      constraint_bone\n      con_action\n      con_armature\n      con_camerasolver\n      con_childof\n      con_clampto\n      con_distlimit\n      con_floor\n      con_followpath\n      con_followtrack\n      con_kinematic\n      con_locktrack\n      con_loclike\n      con_loclimit\n      con_objectsolver\n      con_pivot\n      con_rotlike\n      con_rotlimit\n      con_samevol\n      con_shrinkwrap\n      con_sizelike\n      con_sizelimit\n      con_splineik\n      con_stretchto\n      con_trackto\n      con_transform\n      con_transform_cache\n      con_translike\n      copydown\n      copy_id\n      cube\n      current_file\n      cursor\n      curves\n      curves_data\n      curve_bezcircle\n      curve_bezcurve\n      curve_data\n      curve_ncircle\n      curve_ncurve\n      curve_path\n      decorate\n      decorate_animate\n      decorate_driver\n      decorate_keyframe\n      decorate_library_override\n      decorate_linked\n      decorate_locked\n      decorate_override\n      decorate_unlocked\n      desktop\n      disc\n      disc_large\n      disclosure_tri_down\n      disclosure_tri_right\n      disk_drive\n      disk_drive_large\n      documents\n      dot\n      downarrow_hlt\n      driver\n      driver_distance\n      driver_rotational_difference\n      driver_transform\n      duplicate\n      edgesel\n      editmode_hlt\n      empty_arrows\n      empty_axis\n      empty_data\n      empty_single_arrow\n      error\n      experimental\n      export\n      external_drive\n      external_drive_large\n      eyedropper\n      facesel\n      face_corner\n      face_maps\n      fake_user_off\n      fake_user_on\n      fcurve\n      fcurve_snapshot\n      ff\n      file\n      file_large\n      filebrowser\n      file_3d\n      file_alias\n      file_archive\n      file_backup\n      file_blank\n      file_blend\n      file_cache\n      file_folder\n      file_folder_large\n      file_font\n      file_hidden\n      file_image\n      file_movie\n      file_new\n      file_parent\n      file_parent_large\n      file_refresh\n      file_script\n      file_sound\n      file_text\n      file_tick\n      file_volume\n      filter\n      fixed_size\n      folder_redirect\n      fontpreview\n      font_data\n      force_boid\n      force_charge\n      force_curve\n      force_drag\n      force_fluidflow\n      force_force\n      force_harmonic\n      force_lennardjones\n      force_magnetic\n      force_texture\n      force_turbulence\n      force_vortex\n      force_wind\n      forward\n      frame_next\n      frame_prev\n      freeze\n      fullscreen_enter\n      fullscreen_exit\n      fund\n      geometry_nodes\n      geometry_set\n      ghost_disabled\n      ghost_enabled\n      gizmo\n      gp_caps_flat\n      gp_caps_round\n      gp_multiframe_editing\n      gp_only_selected\n      gp_select_between_strokes\n      gp_select_points\n      gp_select_strokes\n      graph\n      greasepencil\n      greasepencil_layer_group\n      grid\n      grip\n      grip_v\n      group\n      group_bone\n      group_uvs\n      group_vcol\n      group_vertex\n      hand\n      handle_aligned\n      handle_auto\n      handle_autoclamped\n      handle_free\n      handle_vector\n      heart\n      help\n      hide_off\n      hide_on\n      holdout_off\n      holdout_on\n      home\n      hook\n      image\n      image_alpha\n      image_background\n      image_data\n      image_plane\n      image_reference\n      image_rgb\n      image_rgb_alpha\n      image_zdepth\n      imgdisplay\n      import\n      indirect_only_off\n      indirect_only_on\n      info\n      info_large\n      internet\n      internet_offline\n      inversesquarecurve\n      ipo_back\n      ipo_bezier\n      ipo_bounce\n      ipo_circ\n      ipo_constant\n      ipo_cubic\n      ipo_ease_in\n      ipo_ease_in_out\n      ipo_ease_out\n      ipo_elastic\n      ipo_expo\n      ipo_linear\n      ipo_quad\n      ipo_quart\n      ipo_quint\n      ipo_sine\n      italic\n      keyframe\n      keyframe_hlt\n      keyingset\n      key_backspace\n      key_backspace_filled\n      key_command\n      key_command_filled\n      key_control\n      key_control_filled\n      key_dehlt\n      key_empty1\n      key_empty1_filled\n      key_empty2\n      key_empty2_filled\n      key_empty3\n      key_empty3_filled\n      key_hlt\n      key_menu\n      key_menu_filled\n      key_option\n      key_option_filled\n      key_return\n      key_return_filled\n      key_ring\n      key_ring_filled\n      key_shift\n      key_shift_filled\n      key_tab\n      key_tab_filled\n      key_windows\n      key_windows_filled\n      lattice_data\n      layer_active\n      layer_used\n      library_data_broken\n      library_data_direct\n      library_data_override\n      light\n      lightprobe_plane\n      lightprobe_sphere\n      lightprobe_volume\n      light_area\n      light_data\n      light_hemi\n      light_point\n\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files that make up the object editor library. It lists various C++ files responsible for object manipulation, baking, collection management, constraints, and other object-related functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  add_modifier_assets.cc\n  object_add.cc\n  object_bake.cc\n  object_bake_api.cc\n  object_bake_simulation.cc\n  object_collection.cc\n  object_constraint.cc\n  object_data_transfer.cc\n  object_data_transform.cc\n  object_edit.cc\n  object_hook.cc\n  object_light_linking_ops.cc\n  object_lod.cc\n  object_modes.cc\n  object_modifier.cc\n  object_multires_modifier.cc\n  object_ops.cc\n  object_random.cc\n  object_relations.cc\n  object_remesh.cc\n  object_select.cc\n  object_shader_fx.cc\n  object_shapekey.cc\n  object_transform.cc\n  object_utils.cc\n  object_vgroup.cc\n  object_visual_geometry_to_objects.cc\n  object_volume.cc\n  object_warp.cc\n\n  object_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC) - CMake\nDESCRIPTION: This snippet sets the include directories needed for compiling the undo system library. It defines two include paths: '../include' and '../../makesrna', specifying where the necessary header files are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/undo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Library - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` CMake function to create the `bf_io_csv` library. It specifies the library name, source files, include directories, and linked libraries. This command orchestrates the compilation and linking process to produce the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/csv/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_csv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: CPACK NSIS Configuration\nDESCRIPTION: This snippet configures CPACK for generating an NSIS installer. It sets various properties such as the package name, vendor, version, installation directories, components, and dependencies. It also configures the NSIS installer with custom icons, shortcuts, and URLs.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nIF(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})\n  SET(CPACK_PACKAGE_NAME ${PROJECT_NAME})\n  SET(CPACK_PACKAGE_VENDOR \"EGRES\")\n  SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY\n    \"LEMON - Library for Efficient Modeling and Optimization in Networks\")\n  SET(CPACK_RESOURCE_FILE_LICENSE \"${PROJECT_SOURCE_DIR}/LICENSE\")\n\n  SET(CPACK_PACKAGE_VERSION ${PROJECT_VERSION})\n\n  SET(CPACK_PACKAGE_INSTALL_DIRECTORY\n    \"${PROJECT_NAME} ${PROJECT_VERSION}\")\n  SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY\n    \"${PROJECT_NAME} ${PROJECT_VERSION}\")\n\n  SET(CPACK_COMPONENTS_ALL headers library html_documentation bin)\n\n  SET(CPACK_COMPONENT_HEADERS_DISPLAY_NAME \"C++ headers\")\n  SET(CPACK_COMPONENT_LIBRARY_DISPLAY_NAME \"Dynamic-link library\")\n  SET(CPACK_COMPONENT_BIN_DISPLAY_NAME \"Command line utilities\")\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_DISPLAY_NAME \"HTML documentation\")\n\n  SET(CPACK_COMPONENT_HEADERS_DESCRIPTION\n    \"C++ header files\")\n  SET(CPACK_COMPONENT_LIBRARY_DESCRIPTION\n    \"DLL and import library\")\n  SET(CPACK_COMPONENT_BIN_DESCRIPTION\n    \"Command line utilities\")\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_DESCRIPTION\n    \"Doxygen generated documentation\")\n\n  SET(CPACK_COMPONENT_HEADERS_DEPENDS library)\n\n  SET(CPACK_COMPONENT_HEADERS_GROUP \"Development\")\n  SET(CPACK_COMPONENT_LIBRARY_GROUP \"Development\")\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_GROUP \"Documentation\")\n\n  SET(CPACK_COMPONENT_GROUP_DEVELOPMENT_DESCRIPTION\n    \"Components needed to develop software using LEMON\")\n  SET(CPACK_COMPONENT_GROUP_DOCUMENTATION_DESCRIPTION\n    \"Documentation of LEMON\")\n\n  SET(CPACK_ALL_INSTALL_TYPES Full Developer)\n\n  SET(CPACK_COMPONENT_HEADERS_INSTALL_TYPES Developer Full)\n  SET(CPACK_COMPONENT_LIBRARY_INSTALL_TYPES Developer Full)\n  SET(CPACK_COMPONENT_HTML_DOCUMENTATION_INSTALL_TYPES Full)\n\n  SET(CPACK_GENERATOR \"NSIS\")\n  SET(CPACK_NSIS_MUI_ICON \"${PROJECT_SOURCE_DIR}/cmake/nsis/lemon.ico\")\n  SET(CPACK_NSIS_MUI_UNIICON \"${PROJECT_SOURCE_DIR}/cmake/nsis/uninstall.ico\")\n  #SET(CPACK_PACKAGE_ICON \"${PROJECT_SOURCE_DIR}/cmake/nsis\\\\installer.bmp\")\n  SET(CPACK_NSIS_INSTALLED_ICON_NAME \"bin\\\\lemon.ico\")\n  SET(CPACK_NSIS_DISPLAY_NAME \"${CPACK_PACKAGE_INSTALL_DIRECTORY} ${PROJECT_NAME}\")\n  SET(CPACK_NSIS_HELP_LINK \"http:\\\\\\\\lemon.cs.elte.hu\")\n  SET(CPACK_NSIS_URL_INFO_ABOUT \"http:\\\\\\\\lemon.cs.elte.hu\")\n  SET(CPACK_NSIS_CONTACT \"lemon-user@lemon.cs.elte.hu\")\n  SET(CPACK_NSIS_CREATE_ICONS_EXTRA \"\n    CreateShortCut \\\"$SMPROGRAMS\\\\$STARTMENU_FOLDER\\\\Documentation.lnk\\\" \\\"$INSTDIR\\\\share\\\\doc\\\\index.html\\\"\\n    \")\n  SET(CPACK_NSIS_DELETE_ICONS_EXTRA \"\n    !insertmacro MUI_STARTMENU_GETFOLDER Application $MUI_TEMP\n    Delete \\\"$SMPROGRAMS\\\\$MUI_TEMP\\\\Documentation.lnk\\\"\\n    \")\n\n  INCLUDE(CPack)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Defining Demo Executables with CMake\nDESCRIPTION: This CMake code iterates through a list of demo names and creates an executable for each. It then links each executable with the 'lemon' library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/demo/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nSET(DEMOS\n  arg_parser_demo\n  graph_to_eps_demo\n  lgf_demo\n)\n\nFOREACH(DEMO_NAME ${DEMOS})\n  ADD_EXECUTABLE(${DEMO_NAME} ${DEMO_NAME}.cc)\n  TARGET_LINK_LIBRARIES(${DEMO_NAME} lemon)\nENDFOREACH()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: These CMake commands set the include directories for the project. `INC` specifies the local directory ('.') as an include directory, and `INC_SYS` specifies the include directories for the Bullet Physics library, using the variable `${BULLET_INCLUDE_DIRS}`. These are needed to find header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/rigidbody/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${BULLET_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Workbench Render Tests\nDESCRIPTION: This snippet configures Workbench render tests for different GPU backends (OpenGL, Metal, Vulkan). It iterates through the gpu_render_tests list and calls add_render_test for each test, specifying the test directory, output directory, and GPU backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\n if(WITH_GPU_RENDER_TESTS)\n    # Workbench\n    if(WITH_OPENGL_BACKEND)\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          workbench_opengl_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/workbench_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/workbench_opengl\"\n          --gpu-backend opengl\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\n\n    if(WITH_METAL_BACKEND)\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          workbench_metal_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/workbench_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/workbench_metal\"\n          --gpu-backend metal\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\n\n    if(WITH_VULKAN_BACKEND AND WITH_GPU_RENDER_TESTS_VULKAN)\n      foreach(render_test ${gpu_render_tests})\n        add_render_test(\n          workbench_vulkan_${render_test}\n          ${CMAKE_CURRENT_LIST_DIR}/workbench_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n          --outdir \"${TEST_OUT_DIR}/workbench/vulkan\"\n          --gpu-backend vulkan\n          ${_gpu_render_tests_arguments}\n        )\n      endforeach()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet specifies the source files (both .cc and .hh) that make up the I/O library. These files handle import/export functionality for various file formats.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  io_alembic.cc\n  io_cache.cc\n  io_collada.cc\n  io_drop_import_file.cc\n  io_fbx_ops.cc\n  io_grease_pencil.cc\n  io_obj.cc\n  io_ops.cc\n  io_ply_ops.cc\n  io_stl_ops.cc\n  io_usd.cc\n  io_utils.cc\n\n  io_alembic.hh\n  io_cache.hh\n  io_collada.hh\n  io_drop_import_file.hh\n  io_fbx_ops.hh\n  io_grease_pencil.hh\n  io_obj.hh\n  io_ops.hh\n  io_ply_ops.hh\n  io_stl_ops.hh\n  io_usd.hh\n  io_utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenSubdiv support\nDESCRIPTION: This snippet configures OpenSubdiv support by adding the WITH_OPENSUBDIV definition and including the OpenSubdiv include directories, ensuring correct compilation against OpenSubdiv libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\n  include_directories(\n    SYSTEM\n    ${OPENSUBDIV_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet lists the source files that comprise the 3D viewport editor module. These `.cc` files contain the implementation of various features, including drawing, navigation, editing, and gizmo interactions within the 3D viewport. The specified order of files might influence compile times or dependency resolution.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_view3d/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  drawobject.cc\n  space_view3d.cc\n  view3d_buttons.cc\n  view3d_camera_control.cc\n  view3d_context.cc\n  view3d_cursor_snap.cc\n  view3d_draw.cc\n  view3d_dropboxes.cc\n  view3d_edit.cc\n  view3d_gizmo_armature.cc\n  view3d_gizmo_camera.cc\n  view3d_gizmo_empty.cc\n  view3d_gizmo_forcefield.cc\n  view3d_gizmo_geometry_nodes.cc\n  view3d_gizmo_light.cc\n  view3d_gizmo_navigate.cc\n  view3d_gizmo_navigate_type.cc\n  view3d_gizmo_preselect.cc\n  view3d_gizmo_preselect_type.cc\n  view3d_gizmo_ruler.cc\n  view3d_gizmo_tool_generic.cc\n  view3d_header.cc\n  view3d_iterators.cc\n  view3d_navigate.cc\n  view3d_navigate_fly.cc\n  view3d_navigate_smoothview.cc\n  view3d_navigate_view_all.cc\n  view3d_navigate_view_axis.cc\n  view3d_navigate_view_camera.cc\n  view3d_navigate_view_center_cursor.cc\n  view3d_navigate_view_center_pick.cc\n  view3d_navigate_view_dolly.cc\n  view3d_navigate_view_move.cc\n  view3d_navigate_view_ndof.cc\n  view3d_navigate_view_orbit.cc\n  view3d_navigate_view_pan.cc\n  view3d_navigate_view_roll.cc\n  view3d_navigate_view_rotate.cc\n  view3d_navigate_view_zoom.cc\n  view3d_navigate_walk.cc\n  view3d_navigate_zoom_border.cc\n  view3d_ops.cc\n  view3d_placement.cc\n  view3d_project.cc\n  view3d_select.cc\n  view3d_snap.cc\n  view3d_utils.cc\n  view3d_view.cc\n\n  view3d_intern.hh\n  view3d_navigate.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files with CMake\nDESCRIPTION: This snippet defines the source files for the 'bf_intern_gpudirect' library. It includes 'dvpapi.cpp' and 'dvpapi.h', suggesting that the library interacts with a device virtualization or direct video port API.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/gpudirect/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n\tdvpapi.cpp\n\tdvpapi.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files used to build the IK plugin. These include C++ source files (.cc) and header files (.h). Additional source files are conditionally added depending on enabled IK solvers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/ikplugin_api.cc\n\n  BIK_api.h\n  intern/ikplugin_api.h\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Blender and Associated Files (System Install)\nDESCRIPTION: This CMake code installs the Blender binary and associated files for a system installation.  It installs the Blender executable to `./bin`, and desktop and icon files to their corresponding `share` directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\n  else()\n    # main blender binary\n    set(BLENDER_BIN \"bin/blender\")\n    install(\n      TARGETS blender\n      DESTINATION \"./bin\"\n    )\n    # Misc files.\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/release/freedesktop/org.upbge.UPBGE.desktop\n      DESTINATION \"./share/applications\"\n    )\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/release/freedesktop/org.upbge.UPBGE.metainfo.xml\n      DESTINATION \"./share/metainfo\"\n    )\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/release/freedesktop/icons/scalable/apps/org.upbge.UPBGE.svg\n      DESTINATION \"./share/icons/hicolor/scalable/apps\"\n    )\n    install(\n      FILES ${CMAKE_SOURCE_DIR}/release/freedesktop/icons/symbolic/apps/org.upbge.UPBGE-symbolic.svg\n      DESTINATION \"./share/icons/hicolor/symbolic/apps\"\n    )\n    if(WITH_BLENDER_THUMBNAILER)\n      install(\n        TARGETS blender-thumbnailer\n        DESTINATION \"./bin\"\n      )\n    endif()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with BINRELOC\nDESCRIPTION: This snippet conditionally includes BINRELOC support if the `WITH_BINRELOC` option is enabled. It appends the BINRELOC include directories to the `INC_SYS` list and adds the `extern_binreloc` library to the `LIB` list. Additionally, it adds the `-DWITH_BINRELOC` preprocessor definition to enable the corresponding code paths during compilation. This configuration is for handling relocatable binaries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BINRELOC)\n  list(APPEND INC_SYS\n    ${BINRELOC_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    extern_binreloc\n  )\n  add_definitions(-DWITH_BINRELOC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating cycles_subd library\nDESCRIPTION: Creates the cycles_subd library using the cycles_add_library function. This function takes the library name, libraries to link against (empty in this case), source files, and header files as arguments. This combines all source files to produce the cycles_subd library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/subd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n\n)\n\ncycles_add_library(cycles_subd \"${LIB}\" ${SRC} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Checking for minisat and timeout\nDESCRIPTION: These commands use the `which` command to verify that the `minisat` and `timeout` binaries are installed and accessible in the system's `PATH`. This is a prerequisite for enabling SAT flip removal in QuadriFlow.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwhich minisat\nwhich timeout\n```\n\n----------------------------------------\n\nTITLE: Installing SDL2 Shared Library with CMake\nDESCRIPTION: This snippet installs the SDL2 shared library (`SDL2.dll`) using the `windows_install_shared_manifest` function for all build configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nwindows_install_shared_manifest(\n  FILES ${LIBDIR}/sdl/lib/SDL2.dll\n  ALL\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Include Directories\nDESCRIPTION: This snippet sets up the include directories for the project, including both local (INC) and system (INC_SYS) directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Including Dependency Targets - CMake\nDESCRIPTION: This snippet includes the `dependency_targets` file.  This file likely contains definitions for creating and managing dependency targets within the CMake build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_107\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(dependency_targets)\n```\n\n----------------------------------------\n\nTITLE: Adding GPU Shaders Library\nDESCRIPTION: This snippet adds a library named `bf_gpu_shaders` using the compiled shader C code.  It uses the `blender_add_lib` custom CMake function.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_gpu_shaders \"${SHADER_C}\" \"\" \"\" \"\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for 'datatoc' - CMake\nDESCRIPTION: This CMake command sets the source file variable `SRC` to `datatoc.cc`, which is the source file to be compiled into the executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/datatoc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  datatoc.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Define WITH_MEM_VALGRIND macro\nDESCRIPTION: This snippet defines the WITH_MEM_VALGRIND macro if the WITH_MEM_VALGRIND variable is true. This macro enables Valgrind integration for memory debugging.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MEM_VALGRIND)\n  add_definitions(-DWITH_MEM_VALGRIND)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Twine for PyPI Uploads (Python)\nDESCRIPTION: Installs the Twine package, a tool used for securely publishing Python packages to PyPI. This is a prerequisite for uploading UPBGE releases.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/pypi/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install twine\n```\n\n----------------------------------------\n\nTITLE: Adding the Grease Pencil I/O Library\nDESCRIPTION: This snippet adds the bf_io_grease_pencil library using the specified source files, include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_grease_pencil \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Audaspace)\nDESCRIPTION: Conditionally adds the 'audaspace' subdirectory if the WITH_AUDASPACE flag is enabled. This includes the Audaspace library if it's configured for use.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_AUDASPACE)\n  add_subdirectory(audaspace)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the bf_intern_libc_compat library.  It defines both internal include paths (INC) and system include paths (INC_SYS).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libc_compat/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Windows Specific)\nDESCRIPTION: Conditionally adds 'utfconv', 'uriconvert', and 'gpudirect' subdirectories only on Windows platforms (WIN32).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  # Only windows needs utf16 converter.\n  add_subdirectory(utfconv)\n\n  # Only used for Windows for now.\n  add_subdirectory(uriconvert)\n  add_subdirectory(gpudirect)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Game Engine)\nDESCRIPTION: Conditionally adds the 'moto' subdirectory if the WITH_GAMEENGINE flag is enabled. This is crucial for including core game engine components.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  add_subdirectory(moto)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency (add_dependencies)\nDESCRIPTION: Adds a dependency on the `bf_rna` target for the `bf_editor_gizmo_library`. This ensures that the `bf_rna` target is built before the gizmo library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/gizmo_library/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(bf_editor_gizmo_library bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines system include directories for the IK plugin. System include directories are often used for external libraries or system headers. Currently, it's empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency of the `bf_editor_object` library on the `bf_rna` library. This ensures that the RNA library is built before the object editor library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/object/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_editor_object bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Definition for Experimental Features\nDESCRIPTION: This snippet adds a preprocessor definition if experimental features are enabled, enabling code related to simulation datablocks.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_EXPERIMENTAL_FEATURES)\n  add_definitions(-DWITH_SIMULATION_DATABLOCK)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Library Dependencies CMake\nDESCRIPTION: Defines any library dependencies required by `extern_curve_fit_nd`. In this case, `LIB` is empty, indicating no external libraries are directly linked.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/curve_fit_nd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the Cycles BVH library. It includes both local include directories and system include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Setting library files\nDESCRIPTION: This snippet sets the library files. Currently, it's empty, indicating no external libraries are directly specified at this point.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/hipew/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Freestyle\nDESCRIPTION: This snippet conditionally adds Freestyle support if the `WITH_FREESTYLE` option is enabled.  It adds a compiler definition for Freestyle.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_FREESTYLE)\n  add_definitions(-DWITH_FREESTYLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This large snippet sets the source files for the Mantaflow library. It includes a variety of C++ and header files from different subdirectories such as `preprocessed`, `helper`, and `plugin`. These files cover core functionalities like fluid simulation, file I/O, and plugin implementations.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ${MANTA_PP}/commonkernels.h\n  ${MANTA_PP}/commonkernels.h.reg.cpp\n  ${MANTA_PP}/conjugategrad.cpp\n  ${MANTA_PP}/conjugategrad.h\n  ${MANTA_PP}/conjugategrad.h.reg.cpp\n  ${MANTA_PP}/edgecollapse.cpp\n  ${MANTA_PP}/edgecollapse.h\n  ${MANTA_PP}/edgecollapse.h.reg.cpp\n  ${MANTA_PP}/fastmarch.cpp\n  ${MANTA_PP}/fastmarch.h\n  ${MANTA_PP}/fastmarch.h.reg.cpp\n  ${MANTA_PP}/fileio/iogrids.cpp\n  ${MANTA_PP}/fileio/iomeshes.cpp\n  ${MANTA_PP}/fileio/ioparticles.cpp\n  ${MANTA_PP}/fileio/ioutil.cpp\n  ${MANTA_PP}/fileio/iovdb.cpp\n  ${MANTA_PP}/fileio/mantaio.cpp\n  ${MANTA_PP}/fileio/mantaio.h\n  ${MANTA_PP}/fileio/mantaio.h.reg.cpp\n  ${MANTA_PP}/fluidsolver.cpp\n  ${MANTA_PP}/fluidsolver.h\n  ${MANTA_PP}/fluidsolver.h.reg.cpp\n  ${MANTA_PP}/general.cpp\n  ${MANTA_PP}/general.h\n  ${MANTA_PP}/general.h.reg.cpp\n  ${MANTA_PP}/gitinfo.h\n  ${MANTA_PP}/grid.cpp\n  ${MANTA_PP}/grid.h\n  ${MANTA_PP}/grid.h.reg.cpp\n  ${MANTA_PP}/grid4d.cpp\n  ${MANTA_PP}/grid4d.h\n  ${MANTA_PP}/grid4d.h.reg.cpp\n  ${MANTA_PP}/kernel.cpp\n  ${MANTA_PP}/kernel.h\n  ${MANTA_PP}/kernel.h.reg.cpp\n  ${MANTA_PP}/levelset.cpp\n  ${MANTA_PP}/levelset.h\n  ${MANTA_PP}/levelset.h.reg.cpp\n  ${MANTA_PP}/mesh.cpp\n  ${MANTA_PP}/mesh.h\n  ${MANTA_PP}/mesh.h.reg.cpp\n  ${MANTA_PP}/movingobs.cpp\n  ${MANTA_PP}/movingobs.h\n  ${MANTA_PP}/movingobs.h.reg.cpp\n  ${MANTA_PP}/multigrid.cpp\n  ${MANTA_PP}/multigrid.h\n  ${MANTA_PP}/multigrid.h.reg.cpp\n  ${MANTA_PP}/noisefield.cpp\n  ${MANTA_PP}/noisefield.h\n  ${MANTA_PP}/noisefield.h.reg.cpp\n  ${MANTA_PP}/particle.cpp\n  ${MANTA_PP}/particle.h\n  ${MANTA_PP}/particle.h.reg.cpp\n  ${MANTA_PP}/plugin/advection.cpp\n  ${MANTA_PP}/plugin/apic.cpp\n  ${MANTA_PP}/plugin/extforces.cpp\n  ${MANTA_PP}/plugin/fire.cpp\n  ${MANTA_PP}/plugin/flip.cpp\n  ${MANTA_PP}/plugin/fluidguiding.cpp\n  ${MANTA_PP}/plugin/initplugins.cpp\n  ${MANTA_PP}/plugin/kepsilon.cpp\n  ${MANTA_PP}/plugin/meshplugins.cpp\n  ${MANTA_PP}/plugin/pressure.cpp\n  ${MANTA_PP}/plugin/ptsplugins.cpp\n  ${MANTA_PP}/plugin/secondaryparticles.cpp\n  ${MANTA_PP}/plugin/surfaceturbulence.cpp\n  ${MANTA_PP}/plugin/viscosity.cpp\n  ${MANTA_PP}/plugin/vortexplugins.cpp\n  ${MANTA_PP}/plugin/waveletturbulence.cpp\n  ${MANTA_PP}/plugin/waves.cpp\n  ${MANTA_PP}/python/defines.py\n  ${MANTA_PP}/python/defines.py.reg.cpp\n  ${MANTA_PP}/registration.cpp\n  ${MANTA_PP}/shapes.cpp\n  ${MANTA_PP}/shapes.h\n  ${MANTA_PP}/shapes.h.reg.cpp\n  ${MANTA_PP}/test.cpp\n  ${MANTA_PP}/timing.cpp\n  ${MANTA_PP}/timing.h\n  ${MANTA_PP}/timing.h.reg.cpp\n  ${MANTA_PP}/turbulencepart.cpp\n  ${MANTA_PP}/turbulencepart.h\n  ${MANTA_PP}/turbulencepart.h.reg.cpp\n  ${MANTA_PP}/vortexpart.cpp\n  ${MANTA_PP}/vortexpart.h\n  ${MANTA_PP}/vortexpart.h.reg.cpp\n  ${MANTA_PP}/vortexsheet.cpp\n  ${MANTA_PP}/vortexsheet.h\n  ${MANTA_PP}/vortexsheet.h.reg.cpp\n\n  ${MANTA_HLP}/pwrapper/manta.h\n  ${MANTA_HLP}/pwrapper/pclass.cpp\n  ${MANTA_HLP}/pwrapper/pclass.h\n  ${MANTA_HLP}/pwrapper/pconvert.cpp\n  ${MANTA_HLP}/pwrapper/pconvert.h\n  ${MANTA_HLP}/pwrapper/pvec3.cpp\n  ${MANTA_HLP}/pwrapper/pythonInclude.h\n  ${MANTA_HLP}/pwrapper/registry.cpp\n  ${MANTA_HLP}/pwrapper/registry.h\n  ${MANTA_HLP}/util/integrator.h\n  ${MANTA_HLP}/util/interpol.h\n  ${MANTA_HLP}/util/interpolHigh.h\n  ${MANTA_HLP}/util/matrixbase.h\n  ${MANTA_HLP}/util/mcubes.h\n  ${MANTA_HLP}/util/quaternion.h\n  ${MANTA_HLP}/util/randomstream.h\n  ${MANTA_HLP}/util/rcmatrix.h\n  ${MANTA_HLP}/util/simpleimage.cpp\n  ${MANTA_HLP}/util/simpleimage.h\n  ${MANTA_HLP}/util/solvana.h\n  ${MANTA_HLP}/util/vector4d.cpp\n  ${MANTA_HLP}/util/vector4d.h\n  ${MANTA_HLP}/util/vectorbase.cpp\n  ${MANTA_HLP}/util/vectorbase.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OSL Dependency\nDESCRIPTION: This snippet conditionally adds the cycles_kernel_osl library to the LIB variable if WITH_CYCLES_OSL is enabled. This adds Open Shading Language support.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB cycles_kernel_osl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding test executables\nDESCRIPTION: This snippet demonstrates how to add test executables using CMake and a custom function `blender_add_test_executable`. It conditionally adds these executables if the `WITH_GTESTS` option is enabled. Each executable is linked against the libmv library and the Google Test framework.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n    blender_add_lib(libmv_test_dataset \"./libmv/multiview/test_data_sets.cc\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n\n    blender_add_test_executable(\"libmv_predict_tracks\" \"./libmv/autotrack/predict_tracks_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_tracks\" \"./libmv/autotrack/tracks_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_scoped_ptr\" \"./libmv/base/scoped_ptr_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_vector\" \"./libmv/base/vector_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_array_nd\" \"./libmv/image/array_nd_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_convolve\" \"./libmv/image/convolve_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_image\" \"./libmv/image/image_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_sample\" \"./libmv/image/sample_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_tuple\" \"./libmv/image/tuple_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_euclidean_resection\" \"./libmv/multiview/euclidean_resection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_fundamental\" \"./libmv/multiview/fundamental_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_homography\" \"./libmv/multiview/homography_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_nviewtriangulation\" \"./libmv/multiview/nviewtriangulation_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_panography\" \"./libmv/multiview/panography_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_projection\" \"./libmv/multiview/projection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_resection\" \"./libmv/multiview/resection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_triangulation\" \"./libmv/multiview/triangulation_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_dogleg\" \"./libmv/numeric/dogleg_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_function_derivative\" \"./libmv/numeric/function_derivative_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_levenberg_marquardt\" \"./libmv/numeric/levenberg_marquardt_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_numeric\" \"./libmv/numeric/numeric_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_poly\" \"./libmv/numeric/poly_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_camera_intrinsics\" \"./libmv/simple_pipeline/camera_intrinsics_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_detect\" \"./libmv/simple_pipeline/detect_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_intersect\" \"./libmv/simple_pipeline/intersect_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_keyframe_selection\" \"./libmv/simple_pipeline/keyframe_selection_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n    blender_add_test_executable(\"libmv_modal_solver\" \"./libmv/simple_pipeline/modal_solver_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories CMake\nDESCRIPTION: This snippet sets the system include directories for the sequencer library.  Currently, it is empty, but it is used to define system-level dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Formatting with printf\nDESCRIPTION: This snippet demonstrates formatting a floating-point number using printf in C++. It sets the precision to 2 and uses fixed-point notation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nprintf(\"%.2f\\n\", 1.23456);\n```\n\n----------------------------------------\n\nTITLE: Unsetting the _test_libs variable (CMake)\nDESCRIPTION: This snippet unsets the `_test_libs` variable to clean up the CMake environment after linking is complete.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nunset(_test_libs)\n```\n\n----------------------------------------\n\nTITLE: Conditional MANIFOLD Configuration\nDESCRIPTION: This snippet conditionally configures the build system by adding a preprocessor definition if the `WITH_MANIFOLD` option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MANIFOLD)\n  add_definitions(-DWITH_MANIFOLD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set System Include Directories\nDESCRIPTION: This snippet sets the list of system include directories. These are typically external libraries or system headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Testing Directory\nDESCRIPTION: This snippet adds the 'tests' subdirectory to the build.  This ensures that the test suite is included in the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_142\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(tests)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (System)\nDESCRIPTION: This snippet defines a list of system include directories that the compiler will search to resolve header files. These directories usually point to external libraries or system-level headers required by the Ketsji engine, such as Moto, Recast Navigation, Detour, Pthreads, and Boost.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../intern/moto/include\n  ../../../extern/recastnavigation/Recast/Include\n  ../../../extern/recastnavigation/Detour/Include\n  ${PTHREADS_INCLUDE_DIRS}\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Coverage Report and Reset Targets CMake\nDESCRIPTION: Creates custom targets for generating code coverage reports and resetting coverage data, using a Python script located in the `coverage` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COMPILER_CODE_COVERAGE)\n  set(COVERAGE_SCRIPT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/coverage/coverage.py)\n\n  add_custom_target(coverage-report\n    ${PYTHON_EXECUTABLE} ${COVERAGE_SCRIPT_PATH} report --build-directory ${CMAKE_BINARY_DIR}\n    USES_TERMINAL\n  )\n\n  add_custom_target(coverage-reset\n    ${PYTHON_EXECUTABLE} ${COVERAGE_SCRIPT_PATH} reset --build-directory ${CMAKE_BINARY_DIR}\n    USES_TERMINAL\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies - CMake\nDESCRIPTION: This snippet adds a dependency on the bf_rna library. Ensures that bf_rna is built before bf_depsgraph.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_depsgraph bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding libmv test executable\nDESCRIPTION: This CMake code snippet uses the `blender_add_test_executable` function to define and build a test executable.  It specifies the executable name, the source file, include directories (`INC`, `INC_SYS`), and libraries to link against (including `libmv_test_dataset`, `bf_intern_libmv` and other libraries defined by `LIB`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_executable(\"libmv_resect\" \"./libmv/simple_pipeline/resect_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Sndfile Integration in CMake\nDESCRIPTION: This snippet conditionally adds Sndfile support based on the WITH_CODEC_SNDFILE flag. If enabled, it defines the WITH_SNDFILE preprocessor macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sound/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_SNDFILE)\n  add_definitions(-DWITH_SNDFILE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Sample Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to sampling techniques used in the Cycles kernel. It includes LCG (Linear Congruential Generator), mapping functions, MIS (Multiple Importance Sampling), pattern generation, Sobol sequence variants, and utility functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_SAMPLE_HEADERS\n  sample/lcg.h\n  sample/mapping.h\n  sample/mis.h\n  sample/pattern.h\n  sample/sobol_burley.h\n  sample/tabulated_sobol.h\n  sample/util.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC) - CMake\nDESCRIPTION: Defines the include directories required for compiling the modifier library. Includes local paths within the Blender project and external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  intern\n  intern/lineart\n  ../editors/include\n  ../makesrna\n  ../../../intern/eigen\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the PLY I/O Library - CMake\nDESCRIPTION: This command uses a custom CMake function, `blender_add_lib`, to create the PLY I/O library (`bf_io_ply`). It takes the source files, include directories, and library dependencies defined in the previous snippets as input.  The resulting library is linked against other parts of the Blender/UPBGE system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/ply/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_io_ply \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Valgrind Test Option (CMake)\nDESCRIPTION: This snippet defines a CMake option `TEST_WITH_VALGRIND` to enable or disable running tests with Valgrind, and a variable `VALGRIND_FLAGS` to store flags for Valgrind.  These variables are stored in the CMake cache.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nSET(TEST_WITH_VALGRIND \"NO\" CACHE STRING\n  \"Run the test with valgrind (YES/NO).\")\nSET(VALGRIND_FLAGS \"\" CACHE STRING \"Valgrind flags used by the tests.\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the cuew library.  It sets the INC variable to include the current directory (.) and the 'include' subdirectory. These directories will be used during compilation to find header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/cuew/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  include\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional IK Solver Configuration\nDESCRIPTION: This snippet conditionally adds source files, include directories, library dependencies, and preprocessor definitions based on whether the `WITH_IK_SOLVER` option is enabled. If enabled, it appends the `bf_intern_iksolver` library to the dependencies, adds the IK solver extern include directory, adds iksolver plugin source files, and defines `WITH_IK_SOLVER`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IK_SOLVER)\n  list(APPEND LIB\n    bf_intern_iksolver\n  )\n  list(APPEND INC\n    ../../../intern/iksolver/extern\n  )\n  list(APPEND SRC\n    intern/iksolver_plugin.cc\n    intern/iksolver_plugin.h\n  )\n  add_definitions(-DWITH_IK_SOLVER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the 'libgmpxx' library to the GMP library.  It ensures that the libgmpxx library can use the GMP library's functions and symbols. The `${GMP_LIBRARY}` variable represents the path to the GMP library, found by find_package.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_gmpxx.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(libgmpxx ${GMP_LIBRARY})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories required for compiling the STL I/O library. It includes both local directories within the project structure and external dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  exporter\n  importer\n  intern\n  ../common\n  ../../editors/include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions Based on Feature Flags\nDESCRIPTION: This snippet adds preprocessor definitions based on enabled features like the game engine, Windows 7 support, fluid modification, OpenColorIO, OpenSubdiv, GPU backend tests, and gtests. These definitions allow for conditional compilation of code based on the enabled features.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  add_definitions(-DWITH_GAMEENGINE)\nendif()\n\nif(WITH_WINDOWS_7)\n  add_definitions(-DWITH_WINDOWS_7)\nendif()\n\nif(WITH_MOD_FLUID)\n  add_definitions(-DWITH_FLUID)\nendif()\n\nif(WITH_OPENCOLORIO)\n  add_definitions(-DWITH_OCIO)\nendif()\n\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n\nif(WITH_GPU_BACKEND_TESTS)\n  add_definitions(-DWITH_GPU_BACKEND_TESTS)\nendif()\n\nif(WITH_GTESTS)\n  add_definitions(-DWITH_GTESTS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding GPU Kernel Dependencies\nDESCRIPTION: This code defines a macro `cycles_add_gpu_kernel_dependencies` to manage dependencies between GPU kernel targets.  It ensures that `cycles_kernel` depends on each GPU kernel (CUDA, OptiX, HIP, OneAPI), and also creates a chain of dependencies between the GPU kernels themselves, ensuring they are built in a specific order.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\nset(_cycles_prev_gpu_kernel_target)\nmacro(cycles_add_gpu_kernel_dependencies GPU_KERNEL_TARGET)\n  if(TARGET ${GPU_KERNEL_TARGET})\n    add_dependencies(cycles_kernel ${GPU_KERNEL_TARGET})\n    if(_cycles_prev_gpu_kernel_target)\n      add_dependencies(${GPU_KERNEL_TARGET} ${_cycles_prev_gpu_kernel_target})\n    endif()\n    set(_cycles_prev_gpu_kernel_target ${GPU_KERNEL_TARGET})\n  endif()\nendmacro()\n\ncycles_add_gpu_kernel_dependencies(cycles_kernel_cuda)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_optix)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_hip)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_hiprt)\ncycles_add_gpu_kernel_dependencies(cycles_kernel_oneapi)\n```\n\n----------------------------------------\n\nTITLE: Set Source Files for Draco Library in CMake\nDESCRIPTION: This CMake snippet sets the source files for the Draco library. It uses the `set` command to define a variable `SRC` containing a list of all the C++ source files (`.cc`) and header files (`.h`) that are part of the Draco library. These files are used to build the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/draco/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n\n  src/draco/animation/keyframe_animation.cc\n  src/draco/animation/keyframe_animation.h\n  src/draco/animation/keyframe_animation_decoder.cc\n  src/draco/animation/keyframe_animation_decoder.h\n  src/draco/animation/keyframe_animation_encoder.cc\n  src/draco/animation/keyframe_animation_encoder.h\n  src/draco/attributes/attribute_octahedron_transform.cc\n  src/draco/attributes/attribute_octahedron_transform.h\n  src/draco/attributes/attribute_quantization_transform.cc\n  src/draco/attributes/attribute_quantization_transform.h\n  src/draco/attributes/attribute_transform.cc\n  src/draco/attributes/attribute_transform.h\n  src/draco/attributes/attribute_transform_data.h\n  src/draco/attributes/attribute_transform_type.h\n  src/draco/attributes/geometry_attribute.cc\n  src/draco/attributes/geometry_attribute.h\n  src/draco/attributes/geometry_indices.h\n  src/draco/attributes/point_attribute.cc\n  src/draco/attributes/point_attribute.h\n  src/draco/compression/attributes/attributes_decoder.cc\n  src/draco/compression/attributes/attributes_decoder.h\n  src/draco/compression/attributes/attributes_decoder_interface.h\n  src/draco/compression/attributes/attributes_encoder.cc\n  src/draco/compression/attributes/attributes_encoder.h\n  src/draco/compression/attributes/kd_tree_attributes_decoder.cc\n  src/draco/compression/attributes/kd_tree_attributes_decoder.h\n  src/draco/compression/attributes/kd_tree_attributes_encoder.cc\n  src/draco/compression/attributes/kd_tree_attributes_encoder.h\n  src/draco/compression/attributes/kd_tree_attributes_shared.h\n  src/draco/compression/attributes/linear_sequencer.h\n  src/draco/compression/attributes/mesh_attribute_indices_encoding_data.h\n  src/draco/compression/attributes/normal_compression_utils.h\n  src/draco/compression/attributes/point_d_vector.h\n  src/draco/compression/attributes/points_sequencer.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_constrained_multi_parallelogram_shared.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_data.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_area.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_geometric_normal_predictor_base.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_multi_parallelogram_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_multi_parallelogram_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_parallelogram_shared.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_decoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_encoder.h\n  src/draco/compression/attributes/prediction_schemes/mesh_prediction_scheme_tex_coords_portable_predictor.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoder_factory.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoder_interface.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_delta_decoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_delta_encoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder_factory.cc\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder_factory.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoder_interface.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_factory.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_interface.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_canonicalized_transform_base.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_normal_octahedron_transform_base.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_wrap_decoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_wrap_encoding_transform.h\n  src/draco/compression/attributes/prediction_schemes/prediction_scheme_wrap_transform_base.h\n  src/draco/compression/attributes/sequential_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_attribute_decoder.h\n  src/draco/compression/attributes/sequential_attribute_decoders_controller.cc\n  src/draco/compression/attributes/sequential_attribute_decoders_controller.h\n  src/draco/compression/attributes/sequential_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_attribute_encoder.h\n  src/draco/compression/attributes/sequential_attribute_encoders_controller.cc\n  src/draco/compression/attributes/sequential_attribute_encoders_controller.h\n  src/draco/compression/attributes/sequential_integer_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_integer_attribute_decoder.h\n  src/draco/compression/attributes/sequential_integer_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_integer_attribute_encoder.h\n  src/draco/compression/attributes/sequential_normal_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_normal_attribute_decoder.h\n  src/draco/compression/attributes/sequential_normal_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_normal_attribute_encoder.h\n  src/draco/compression/attributes/sequential_quantization_attribute_decoder.cc\n  src/draco/compression/attributes/sequential_quantization_attribute_decoder.h\n  src/draco/compression/attributes/sequential_quantization_attribute_encoder.cc\n  src/draco/compression/attributes/sequential_quantization_attribute_encoder.h\n  src/draco/compression/bit_coders/adaptive_rans_bit_coding_shared.h\n  src/draco/compression/bit_coders/adaptive_rans_bit_decoder.cc\n  src/draco/compression/bit_coders/adaptive_rans_bit_decoder.h\n  src/draco/compression/bit_coders/adaptive_rans_bit_encoder.cc\n  src/draco/compression/bit_coders/adaptive_rans_bit_encoder.h\n  src/draco/compression/bit_coders/direct_bit_decoder.cc\n  src/draco/compression/bit_coders/direct_bit_decoder.h\n  src/draco/compression/bit_coders/direct_bit_encoder.cc\n  src/draco/compression/bit_coders/direct_bit_encoder.h\n  src/draco/compression/bit_coders/folded_integer_bit_decoder.h\n  src/draco/compression/bit_coders/folded_integer_bit_encoder.h\n  src/draco/compression/bit_coders/rans_bit_decoder.cc\n  src/draco/compression/bit_coders/rans_bit_decoder.h\n  src/draco/compression/bit_coders/rans_bit_encoder.cc\n  src/draco/compression/bit_coders/rans_bit_encoder.h\n  src/draco/compression/bit_coders/symbol_bit_decoder.cc\n  src/draco/compression/bit_coders/symbol_bit_decoder.h\n  src/draco/compression/bit_coders/symbol_bit_encoder.cc\n  src/draco/compression/bit_coders/symbol_bit_encoder.h\n  src/draco/compression/config/compression_shared.h\n  src/draco/compression/config/decoder_options.h\n  src/draco/compression/config/draco_options.h\n  src/draco/compression/config/encoder_options.h\n  src/draco/compression/config/encoding_features.h\n  src/draco/compression/decode.cc\n  src/draco/compression/decode.h\n  src/draco/compression/encode.cc\n  src/draco/compression/encode.h\n  src/draco/compression/encode_base.h\n  src/draco/compression/entropy/ans.h\n  src/draco/compression/entropy/rans_symbol_coding.h\n  src/draco/compression/entropy/rans_symbol_decoder.h\n  src/draco/compression/entropy/rans_symbol_encoder.h\n  src/draco/compression/entropy/shannon_entropy.cc\n  src/draco/compression/entropy/shannon_entropy.h\n  src/draco/compression/entropy/symbol_decoding.cc\n  src/draco/compression/entropy/symbol_decoding.h\n  src/draco/compression/entropy/symbol_encoding.cc\n  src/draco/compression/entropy/symbol_encoding.h\n  src/draco/compression/expert_encode.cc\n  src/draco/compression/expert_encode.h\n  src/draco/compression/mesh/mesh_decoder.cc\n  src/draco/compression/mesh/mesh_decoder.h\n  src/draco/compression/mesh/mesh_edgebreaker_decoder.cc\n  src/draco/compression/mesh/mesh_edgebreaker_decoder.h\n)\n```\n\n----------------------------------------\n\nTITLE: Define HAVE_MALLOC_STATS_H macro\nDESCRIPTION: This snippet defines the HAVE_MALLOC_STATS_H macro if the HAVE_MALLOC_STATS_H variable is true. This macro likely enables the collection of malloc statistics.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(HAVE_MALLOC_STATS_H)\n  add_definitions(-DHAVE_MALLOC_STATS_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: This snippet sets the include directories for the sequencer library. It specifies both public and internal include paths, including a path to generated RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/sequencer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  intern\n  ../animrig\n  ../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Compute Shader Sources\nDESCRIPTION: Defines the list of GLSL compute shader source files used for Grease Pencil rendering.  Currently, the list is empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/gpencil/shaders/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_COMP\n)\n```\n\n----------------------------------------\n\nTITLE: Flagging Edges with glEdgeFlag (bgl)\nDESCRIPTION: Flags edges as either boundary or non-boundary edges. The 'flag' parameter specifies the current edge flag value. This influences how edges are treated during rendering.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glEdgeFlag (flag)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OceanSim - CMake\nDESCRIPTION: Conditionally adds a preprocessor definition if the 'WITH_MOD_OCEANSIM' flag is set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_OCEANSIM)\n  add_definitions(-DWITH_OCEANSIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for OpenSubdiv - CMake\nDESCRIPTION: Conditionally adds a preprocessor definition if the 'WITH_OPENSUBDIV' flag is set.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENSUBDIV)\n  add_definitions(-DWITH_OPENSUBDIV)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Precompile Headers - CMake\nDESCRIPTION: This CMake snippet precompiles headers for faster compilation if the `target_precompile_headers` command is available.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(COMMAND target_precompile_headers)\n  target_precompile_headers(bf_freestyle PRIVATE FRS_precomp.h)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This code snippet is used to set system include directories. In this case it's empty, so no directories are added.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Fonts in CMake\nDESCRIPTION: This snippet installs the fonts directory from the source to the target directory during the installation process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\n# fonts\ninstall(\n  DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/fonts\n  DESTINATION ${TARGETDIR_VER}/datafiles\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines the system include directories, which are typically paths to system-level libraries or frameworks.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (UV Slim)\nDESCRIPTION: Conditionally adds the 'slim' subdirectory if the WITH_UV_SLIM flag is enabled. This incorporates the UV Slim library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_UV_SLIM)\n  add_subdirectory(slim)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: This snippet defines the external libraries that the bf_intern_libc_compat library depends on. Currently, there are no external libraries specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libc_compat/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Bullet)\nDESCRIPTION: Conditionally adds the 'rigidbody' subdirectory if the WITH_BULLET flag is enabled. This includes the Bullet physics engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  add_subdirectory(rigidbody)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Quadriflow)\nDESCRIPTION: Conditionally adds the 'quadriflow' subdirectory if the WITH_QUADRIFLOW flag is enabled. This incorporates the Quadriflow library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_QUADRIFLOW)\n  add_subdirectory(quadriflow)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running the speed test\nDESCRIPTION: This snippet uses the make command to run the speed test within the format-benchmark repository. This tests the speed of the fmt library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ make speed-test\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions - CMake\nDESCRIPTION: Adds compiler definitions to disable specific features of the ufbx library that are not used by Blender. These definitions use the `-D` flag to define preprocessor macros, effectively turning off features such as subdivision, tessellation, geometry caching, scene evaluation, skinning evaluation, animation baking, triangulation, index generation, and OBJ format support. This is done to reduce code size and improve performance.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ufbx/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\n  # Turn off ufbx features that Blender does not use\n  -DUFBX_NO_SUBDIVISION\n  -DUFBX_NO_TESSELLATION\n  -DUFBX_NO_GEOMETRY_CACHE\n  -DUFBX_NO_SCENE_EVALUATION\n  -DUFBX_NO_SKINNING_EVALUATION\n  -DUFBX_NO_ANIMATION_BAKING\n  -DUFBX_NO_TRIANGULATION\n  -DUFBX_NO_INDEX_GENERATION\n  -DUFBX_NO_FORMAT_OBJ\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring PipeWire Plugin with CMake\nDESCRIPTION: This snippet configures and builds the PipeWire plugin. It defines a preprocessor macro, includes necessary directories, creates a shared library, sets its version, conditionally links to PipeWire libraries based on DYNLOAD_PIPEWIRE, and installs it to the plugin directory. It depends on WITH_PIPEWIRE and PLUGIN_PIPEWIRE being enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_33\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PIPEWIRE AND PLUGIN_PIPEWIRE)\n\tadd_definitions(-DPIPEWIRE_PLUGIN)\n\tinclude_directories(${INCLUDE} ${PIPEWIRE_INCLUDE_DIRS})\n\tadd_library(audpipewire SHARED ${PIPEWIRE_SRC} ${PIPEWIRE_HDR} ${HDR})\n\tif(WITH_VERSIONED_PLUGINS)\n\t\tset_target_properties(audpipewire PROPERTIES SOVERSION ${AUDASPACE_VERSION})\n\tendif()\n\tif(DYNLOAD_PIPEWIRE)\n\t\ttarget_link_libraries(audpipewire audaspace)\n\telse()\n\t\ttarget_link_libraries(audpipewire audaspace ${PIPEWIRE_LIBRARIES})\n\tendif()\n\tinstall(TARGETS audpipewire DESTINATION ${DEFAULT_PLUGIN_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender Macro\nDESCRIPTION: This code line adds the `ge_physics_dummy` library to the Blender build system using the `blender_add_lib` macro. It specifies the library name, source files, include directories, and library dependencies, linking everything together for compilation and linking.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Dummy/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_physics_dummy \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation\nDESCRIPTION: This snippet installs the generated documentation to a specified destination directory.  It checks if either C++ or binding documentation generation is enabled before installing the directory containing generated documentation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_42\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_DOCS OR WITH_BINDING_DOCS)\n\tinstall(DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/doc/ DESTINATION ${DOCUMENTATION_INSTALL_PATH})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dependencies\nDESCRIPTION: Specifies the dependencies for the 'bf_windowmanager' library, ensuring that the 'bf_rna' library is built before 'bf_windowmanager'.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/windowmanager/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_windowmanager bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (OpenVDB)\nDESCRIPTION: Conditionally adds the 'openvdb' subdirectory if the WITH_OPENVDB flag is enabled. This incorporates the OpenVDB library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  add_subdirectory(openvdb)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies - CMake\nDESCRIPTION: Defines an empty set of library dependencies for ufbx. This suggests that ufbx has no external library dependencies in this configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ufbx/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Defining the CMake Project\nDESCRIPTION: Defines the CMake project with the name \"BlenderDependencies\". This command is essential for setting up the CMake project environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(\"BlenderDependencies\")\n```\n\n----------------------------------------\n\nTITLE: Enable Cycles Apple Metal support\nDESCRIPTION: This option enables Apple Metal compute support for Cycles rendering engine on Apple platforms.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  option(WITH_CYCLES_DEVICE_METAL \"Enable Cycles Apple Metal compute support\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: Sets the source files for the performance test. In this case, it's BLI_map_performance_test.cc.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/tests/performance/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  BLI_map_performance_test.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Finding the SYCL compiler root directory\nDESCRIPTION: This snippet finds the root directory of the SYCL compiler using get_filename_component.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(sycl_compiler_root ${SYCL_COMPILER} DIRECTORY)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Libraries to Link\nDESCRIPTION: This snippet defines the libraries required for the STL exporter tests. These libraries are linked against the test executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_LIB\n    ${LIB}\n\n    bf_blenloader_test_util\n    bf_io_stl\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Blender as Python Module Tests CMake\nDESCRIPTION: Adds the `blender_as_python_module` subdirectory for tests when Blender is used as a Python module, enabled by the `WITH_PYTHON_MODULE` option.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_MODULE)\n  add_subdirectory(blender_as_python_module)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the Library - CMake\nDESCRIPTION: This snippet uses the blender_add_lib macro to create the bf_python_bmesh library. It specifies the library name, source files, include directories, and library dependencies. This macro likely encapsulates the standard CMake commands for creating a library target and linking it with its dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/bmesh/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_python_bmesh \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Source Grouping (CMake)\nDESCRIPTION: This code snippet uses the `source_group` command to organize the source files into logical groups in the IDE.  This enhances project readability and manageability.  The files are grouped according to the rendering device backend (CPU, CUDA, Dummy, HIP, HIPRT, Multi, Metal, OptiX, OneAPI) and common files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/device/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(\"cpu\" FILES ${SRC_CPU})\nsource_group(\"cuda\" FILES ${SRC_CUDA})\nsource_group(\"dummy\" FILES ${SRC_DUMMY})\nsource_group(\"hip\" FILES ${SRC_HIP})\nsource_group(\"hiprt\" FILES ${SRC_HIPRT})\nsource_group(\"multi\" FILES ${SRC_MULTI})\nsource_group(\"metal\" FILES ${SRC_METAL})\nsource_group(\"optix\" FILES ${SRC_OPTIX})\nsource_group(\"oneapi\" FILES ${SRC_ONEAPI})\nsource_group(\"common\" FILES ${SRC_BASE} ${SRC_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Non-Windows Configuration - CMake\nDESCRIPTION: This snippet configures glog for non-Windows platforms. It appends the 'include' directory to the INC variable and adds several header files from the 'include/glog' directory to the SRC variable. This ensures the correct headers are available for compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n  list(APPEND INC\n    include\n  )\n  list(APPEND SRC\n    include/glog/logging.h\n    include/glog/log_severity.h\n    include/glog/raw_logging.h\n    include/glog/stl_logging.h\n    include/glog/vlog_is_on.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a subdirectory using CMake\nDESCRIPTION: This snippet adds the 'intern' subdirectory to the current CMake project.  The `add_subdirectory` command instructs CMake to process the CMakeLists.txt file located within the specified directory and integrate its build targets into the current project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(intern)\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Installation Directory\nDESCRIPTION: This CMake code snippet removes the existing installation directory before installing the new files. This ensures a clean installation and prevents old scripts and resources from interfering with the new version of Blenderplayer. It uses the `file(REMOVE_RECURSE)` command to recursively delete the contents of the specified directory. The directory to be removed is `PLAYER_TARGETDIR_VER` which contains the blenderplayer version.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n    CODE\n    \"file(REMOVE_RECURSE ${PLAYER_TARGETDIR_VER})\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions for Wayland (CMake)\nDESCRIPTION: Adds preprocessor definitions related to Wayland support.  It always defines `WITH_GHOST_WAYLAND`.  It also defines `WITH_GHOST_WAYLAND_APP_ID` if the `WITH_GHOST_WAYLAND_APP_ID` variable is set. These definitions are used during compilation to enable or configure Wayland-specific features in the GHOST library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n    add_definitions(-DWITH_GHOST_WAYLAND)\n    if(NOT WITH_GHOST_WAYLAND_APP_ID STREQUAL \"\")\n      add_definitions(-DWITH_GHOST_WAYLAND_APP_ID=${WITH_GHOST_WAYLAND_APP_ID})\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies - CMake\nDESCRIPTION: This snippet specifies the libraries that the PLY I/O library depends on. It includes both Blender's internal libraries (prefixed with `bf::`) like `blenkernel`, `blenlib`, and `bmesh`, as well as external libraries such as `fmtlib`.  These dependencies provide essential functionality for the PLY I/O operations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/ply/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::geometry\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Data Directories Conditionally\nDESCRIPTION: These CMake snippets conditionally install various data directories (fonts, colormanagement, gamecontroller) into the Blenderplayer application bundle. The installation depends on whether specific build options are enabled (WITH_OPENCOLORIO, WITH_GAMEENGINE, WITH_SDL).  This ensures that only the required data files are included in the final application, reducing its size and dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\n  # fonts\n  install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/fonts\n    DESTINATION ${PLAYER_TARGETDIR_VER}/datafiles\n  )\n\n  # color management\n  if(WITH_OPENCOLORIO)\n    install(\n      DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/colormanagement\n      DESTINATION ${PLAYER_TARGETDIR_VER}/datafiles\n    )\n  endif()\n\n  # game controller data base\n  if(WITH_GAMEENGINE AND WITH_SDL)\n    install(\n      DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/gamecontroller\n      DESTINATION ${PLAYER_TARGETDIR_VER}/datafiles\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Set Libraries (CMake)\nDESCRIPTION: Specifies the private libraries required for linking the physics engine. These include Blender libraries like blenlib, depsgraph, dna, and guardedalloc. The 'PRIVATE' keyword indicates that these libraries are only needed for building this specific target and are not exposed to other targets that link against it.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Libraries on Windows - CMake\nDESCRIPTION: This CMake snippet handles the installation of Python libraries. It installs the root python directory and the python/lib directory, followed by libraries within the specified Python version directory (`${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/lib`). Debug libraries and cache files are excluded. This is executed either with `WITH_PYTHON_INSTALL` or `WITH_PYTHON_MODULE` enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\n    # VFX libs are bundled with both Blender executable and Python module.\n    if(WITH_PYTHON_INSTALL OR WITH_PYTHON_MODULE)\n      # NOTE: as far as python is concerned `RelWithDebInfo`\n      # is not debug since its without debug flags.\n\n      install(DIRECTORY DESTINATION ${TARGETDIR_VER}/python)\n      install(DIRECTORY DESTINATION ${TARGETDIR_VER}/python/lib)\n\n      install(\n        DIRECTORY ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/lib\n        DESTINATION ${BLENDER_VERSION}/python/\n        CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n        PATTERN \"*_d.*\" EXCLUDE                 # * debug libraries *\n        PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n        PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n        PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n      )\n\n      install(\n        DIRECTORY ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/lib\n        DESTINATION ${BLENDER_VERSION}/python/\n        CONFIGURATIONS Debug\n        PATTERN \"__pycache__\" EXCLUDE           # * any cache *\n        PATTERN \"*.pyc\" EXCLUDE                 # * any cache *\n        PATTERN \"*.pyo\" EXCLUDE                 # * any cache *\n      )\n\n      install(\n        DIRECTORY ${LIBDIR}/python/${_PYTHON_VERSION_NO_DOTS}/DLLs\n        DESTINATION ${BLENDER_VERSION}/python\n        CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that make up the wcwidth library. It includes both the C source file (wcwidth.c) and the header file (wcwidth.h).\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/wcwidth/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  wcwidth.c\n\n  wcwidth.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories needed for compiling the console editor space. It specifies paths to the local `include` directory and the `makesrna` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_console/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n)\n```\n\n----------------------------------------\n\nTITLE: Defining NanoVDB support\nDESCRIPTION: This snippet configures NanoVDB support by adding the WITH_NANOVDB definition and including the NanoVDB include directory.  It enables NanoVDB integration.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_NANOVDB)\n  add_definitions(-DWITH_NANOVDB)\n  include_directories(\n    SYSTEM\n    ${NANOVDB_INCLUDE_DIR}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Python Definition\nDESCRIPTION: This snippet adds a preprocessor definition to enable Python support if the `WITH_PYTHON` option is enabled. This allows conditional compilation of code that relies on Python functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_console/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON)\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Support CMake\nDESCRIPTION: This snippet configures Python support by adding include directories and source files if Python integration is enabled. It also links against the Python libraries and defines a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/audaspace/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON AND WITH_PYTHON_NUMPY)\n  list(APPEND INC_SYS\n    ${PYTHON_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/AUD_PyInit.cpp\n    intern/AUD_PyInit.h\n  )\n  list(APPEND LIB\n    ${PYTHON_LINKFLAGS}\n    ${PYTHON_LIBRARIES}\n  )\n  if(NOT WITH_SYSTEM_AUDASPACE)\n    list(APPEND LIB\n      audaspace-py\n    )\n  endif()\n\n  add_definitions(-DWITH_PYTHON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Paths - CMake\nDESCRIPTION: These snippets define include paths for the Mantaflow library, including internal directories like `helper`, `preprocessed`, and `dependencies`. It also appends system include directories for Python, Zlib, and NUMPY if the corresponding options are enabled. The variables `INC` and `INC_SYS` collect internal and system include paths respectively.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(MANTA_HLP\n  helper\n)\nset(MANTA_PP\n  preprocessed\n)\nif(WITH_MANTA_DEPENDENCIES)\n  set(MANTA_DEP\n    dependencies\n  )\nendif()\n\nset(INC\n  ${MANTA_PP}\n  ${MANTA_PP}/fileio\n  ${MANTA_PP}/python\n  ${MANTA_PP}/plugin\n  ${MANTA_HLP}/pwrapper\n  ${MANTA_HLP}/util\n)\n\nif(WITH_MANTA_DEPENDENCIES)\n  list(APPEND INC\n    ${MANTA_DEP}/cnpy\n  )\nendif()\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n  ${ZLIB_INCLUDE_DIRS}\n)\n\nif(WITH_MANTA_NUMPY AND WITH_PYTHON_NUMPY)\n  list(APPEND INC_SYS\n    ${PYTHON_NUMPY_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This CMake snippet defines the list of private libraries that the Action Editor library depends on. These libraries provide essential Blender functionalities, such as data structures, animation rigging, and dependency graph management.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_action/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Set include directories\nDESCRIPTION: This snippet defines the include directories for the guardedalloc library. `INC` specifies the public include directory ('.'), while `INC_SYS` is intended for system include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Windows Specific Definitions - CMake\nDESCRIPTION: Adds definitions specific to Windows builds, including version information and resource file definitions. It also manages the inclusion of the application manifest file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32 AND NOT UNIX)\n  add_definitions(\n    -DBLEN_VER_RC_STR=\"${BLENDER_VERSION}\"\n    -DBLEN_VER_RC_1=${BLENDER_VERSION_MAJOR}\n    -DBLEN_VER_RC_2=${BLENDER_VERSION_MINOR}\n    -DBLEN_VER_RC_3=${BLENDER_VERSION_PATCH}\n    -DBLEN_VER_RC_4=0\n  )\n\n  list(APPEND SRC\n    ${CMAKE_SOURCE_DIR}/release/windows/icons/winblender.rc\n  )\n\n  if(NOT WITH_WINDOWS_EXTERNAL_MANIFEST)\n    list(APPEND SRC\n      ${CMAKE_BINARY_DIR}/blender.exe.manifest\n    )\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending External Libraries\nDESCRIPTION: This snippet appends external libraries to the LIB variable using the cycles_external_libraries_append macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncycles_external_libraries_append(LIB)\n```\n\n----------------------------------------\n\nTITLE: Set library dependencies\nDESCRIPTION: This snippet defines the library dependencies for the guardedalloc library. It depends on the bf::intern::atomic library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::atomic\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: Sets the system include directories. This is currently empty in this configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/tests/performance/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting default SYCL options for spir64 target\nDESCRIPTION: This snippet sets default compiler options for the spir64 SYCL target if they are not already defined, providing defaults that can be overridden.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT DEFINED CYCLES_ONEAPI_SYCL_OPTIONS_spir64)\n    set(CYCLES_ONEAPI_SYCL_OPTIONS_spir64 \"-options '-cl-fast-relaxed-math -ze-intel-enable-auto-large-GRF-mode -ze-opt-regular-grf-kernel integrator_intersect -ze-opt-large-grf-kernel shade_surface -ze-opt-no-local-to-generic'\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for IME Input\nDESCRIPTION: Adds a preprocessor definition if IME input is enabled. This conditionally enables the IME input feature within the GHOST library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_INPUT_IME)\n  add_definitions(-DWITH_INPUT_IME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directories, specifically including the ZLIB include directory. This allows the code to find the necessary header files for the ZLIB library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/shader_fx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: This snippet defines system include directories. In this case, it is currently empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/curve/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (libc_compat)\nDESCRIPTION: Conditionally adds the 'libc_compat' subdirectory if the platform is UNIX and not APPLE.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  add_subdirectory(libc_compat)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enable Boost\nDESCRIPTION: This option enables features that depend on the Boost C++ libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_BOOST \"Enable features depending on boost\" ON)\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files\nDESCRIPTION: This snippet defines the list of header files for the Cycles BVH library, including both generic C++ headers and the Metal-specific header.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_HEADERS\n  bvh.h\n  bvh2.h\n  binning.h\n  build.h\n  embree.h\n  hiprt.h\n  multi.h\n  node.h\n  optix.h\n  params.h\n  sort.h\n  split.h\n  unaligned.h\n  metal.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that will be used to build the library. It includes header files and potentially C++ source files, depending on whether OpenSubdiv is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  opensubdiv_capi.hh\n  opensubdiv_capi_type.hh\n  opensubdiv_converter_capi.hh\n  opensubdiv_evaluator_capi.hh\n  opensubdiv_evaluator.hh\n  opensubdiv_topology_refiner.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Contents/Resources Directory\nDESCRIPTION: This CMake snippet uses the `install_dir` macro (defined earlier) to install the contents of the `Contents/Resources` directory from the Blenderplayer.app source directory to the corresponding location in the installed application bundle. The `install_dir` macro ensures that unnecessary files like version control directories and compiled Python files are excluded during the installation process, creating a clean and efficient application bundle.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\n  install_dir(\n    ${OSX_APP_PLAYER_SOURCEDIR}/Contents/Resources\n    Blenderplayer.app/Contents/\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets the system include directories, specifically pointing to the moto library within the Blender project. These are typically directories containing system-level headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Device/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ../../../intern/moto/include\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Cycles - CMake\nDESCRIPTION: Conditionally adds a preprocessor definition if the 'WITH_CYCLES' flag is set, enabling adaptive subdivision test in the subsurf UI.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# To disable adaptive subdivision test in subsurf UI without cycles\nif(WITH_CYCLES)\n  add_definitions(-DWITH_CYCLES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linked Libraries in CMake\nDESCRIPTION: This snippet defines the libraries that the image editor space library depends on. The 'PRIVATE' keyword indicates these libraries are only needed for compiling and linking the image editor space library, not for any library that links against it. Several Blender-specific libraries are listed, covering areas like font handling, kernel functions, and data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_image/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  bf_editor_uvedit\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional GMP Configuration\nDESCRIPTION: This snippet conditionally configures the build system if the `WITH_GMP` option is enabled.  It appends system include directories and libraries for the GMP library and adds a preprocessor definition.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GMP)\n  add_definitions(-DWITH_GMP)\n\n  list(APPEND INC_SYS\n    ${GMP_INCLUDE_DIRS}\n  )\n\n  list(APPEND LIB\n    ${GMP_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the project. `INC` is for public include directories, while `INC_SYS` is likely for system include directories.  The single `.` indicates the current directory is an include path.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/functions/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (SRC)\nDESCRIPTION: This snippet lists all the source files (.cc and .hh) that are part of the sculpt and paint editor library.  These files implement the various features and functionalities of the sculpt and paint tools within Blender. It encompasses various aspects such as curve sculpting, grease pencil tools, paint functionalities (image, vertex, weight), sculpt tools, and brush implementations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/sculpt_paint/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  brush_asset_ops.cc\n  curves_sculpt_add.cc\n  curves_sculpt_brush.cc\n  curves_sculpt_comb.cc\n  curves_sculpt_delete.cc\n  curves_sculpt_density.cc\n  curves_sculpt_grow_shrink.cc\n  curves_sculpt_ops.cc\n  curves_sculpt_pinch.cc\n  curves_sculpt_puff.cc\n  curves_sculpt_selection.cc\n  curves_sculpt_selection_paint.cc\n  curves_sculpt_slide.cc\n  curves_sculpt_smooth.cc\n  curves_sculpt_snake_hook.cc\n  grease_pencil_draw_ops.cc\n  grease_pencil_erase.cc\n  grease_pencil_fill.cc\n  grease_pencil_interpolate.cc\n  grease_pencil_paint.cc\n  grease_pencil_paint_common.cc\n  grease_pencil_sculpt_clone.cc\n  grease_pencil_sculpt_grab.cc\n  grease_pencil_sculpt_pinch.cc\n  grease_pencil_sculpt_push.cc\n  grease_pencil_sculpt_randomize.cc\n  grease_pencil_sculpt_smooth.cc\n  grease_pencil_sculpt_strength.cc\n  grease_pencil_sculpt_thickness.cc\n  grease_pencil_sculpt_twist.cc\n  grease_pencil_tint.cc\n  grease_pencil_trace.cc\n  grease_pencil_trace_util.cc\n  grease_pencil_vertex_average.cc\n  grease_pencil_vertex_blur.cc\n  grease_pencil_vertex_paint.cc\n  grease_pencil_vertex_replace.cc\n  grease_pencil_vertex_smear.cc\n  grease_pencil_weight_average.cc\n  grease_pencil_weight_blur.cc\n  grease_pencil_weight_draw.cc\n  grease_pencil_weight_smear.cc\n  paint_canvas.cc\n  paint_cursor.cc\n  paint_curve.cc\n  paint_curve_undo.cc\n  paint_hide.cc\n  paint_image.cc\n  paint_image_2d.cc\n  paint_image_2d_curve_mask.cc\n  paint_image_ops_paint.cc\n  paint_image_proj.cc\n  paint_mask.cc\n  paint_ops.cc\n  paint_stroke.cc\n  paint_utils.cc\n  paint_vertex.cc\n  paint_vertex_color_ops.cc\n  paint_vertex_proj.cc\n  paint_vertex_weight_ops.cc\n  paint_vertex_weight_utils.cc\n  paint_weight.cc\n  sculpt.cc\n  sculpt_automasking.cc\n  sculpt_boundary.cc\n  sculpt_cloth.cc\n  sculpt_detail.cc\n  sculpt_dyntopo.cc\n  sculpt_expand.cc\n  sculpt_face_set.cc\n  sculpt_filter_color.cc\n  sculpt_filter_mask.cc\n  sculpt_filter_mesh.cc\n  sculpt_flood_fill.cc\n  sculpt_geodesic.cc\n  sculpt_gesture.cc\n  sculpt_hide.cc\n  sculpt_mask_init.cc\n  sculpt_ops.cc\n  sculpt_paint_color.cc\n  sculpt_paint_image.cc\n  sculpt_pose.cc\n  sculpt_project.cc\n  sculpt_smooth.cc\n  sculpt_transform.cc\n  sculpt_trim.cc\n  sculpt_undo.cc\n  sculpt_uv.cc\n\n  curves_sculpt_intern.hh\n  grease_pencil_intern.hh\n  grease_pencil_trace_util.hh\n  grease_pencil_weight_paint.hh\n  mesh_brush_common.hh\n  paint_hide.hh\n  paint_intern.hh\n  paint_mask.hh\n  sculpt_automask.hh\n  sculpt_boundary.hh\n  sculpt_cloth.hh\n  sculpt_color.hh\n  sculpt_dyntopo.hh\n  sculpt_expand.hh\n  sculpt_face_set.hh\n  sculpt_filter.hh\n  sculpt_flood_fill.hh\n  sculpt_geodesic.hh\n  sculpt_gesture.hh\n  sculpt_hide.hh\n  sculpt_intern.hh\n  sculpt_islands.hh\n  sculpt_pose.hh\n  sculpt_smooth.hh\n  sculpt_undo.hh\n\n  brushes/bmesh_topology_rake.cc\n  brushes/clay.cc\n  brushes/clay_strips.cc\n  brushes/clay_thumb.cc\n  brushes/crease.cc\n  brushes/draw.cc\n  brushes/draw_face_sets.cc\n  brushes/draw_sharp.cc\n  brushes/draw_vector_displacement.cc\n  brushes/elastic_deform.cc\n  brushes/enhance_details.cc\n  brushes/grab.cc\n  brushes/inflate.cc\n  brushes/layer.cc\n  brushes/mask.cc\n  brushes/multiplane_scrape.cc\n  brushes/multires_displacement_eraser.cc\n  brushes/multires_displacement_smear.cc\n  brushes/pinch.cc\n  brushes/plane.cc\n  brushes/plane_legacy.cc\n  brushes/relax.cc\n  brushes/rotate.cc\n  brushes/smooth.cc\n  brushes/smooth_mask.cc\n  brushes/snake_hook.cc\n  brushes/surface_smooth.cc\n  brushes/thumb.cc\n  brushes/topology_slide.cc\n\n  brushes/brushes.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies - CMake\nDESCRIPTION: This snippet adds a dependency from the `bf_shader_fx` library to `bf_rna`.  This ensures that the `bf_rna` library is built before `bf_shader_fx`, probably because the shader effects library utilizes generated RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/shader_fx/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# RNA_prototypes.hh\nadd_dependencies(bf_shader_fx bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This CMake snippet defines the library dependencies for the `bf_freestyle` target. It includes both Blender's internal libraries (blenkernel, blenlib, etc.) and Python-related libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_python_mathutils\n\n  ${PYTHON_LINKFLAGS}\n  ${PYTHON_LIBRARIES}\n  PRIVATE bf::render\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Compiler Flag on Windows\nDESCRIPTION: This snippet removes a specific compiler warning flag (C4100) on Windows. This is done to suppress \"unreferenced formal parameter\" warnings that may arise from included files in the `extern` directory, preventing the build from being noisy with irrelevant warnings. It uses the `remove_cc_flag` function, which is likely defined elsewhere in the project's CMake infrastructure.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  # Some files in `./extern` are being included which brings up a bunch of\n  # \"unreferenced formal parameter\" warnings.\n  # So restore warn C4100 (unreferenced formal parameter) back to w4\n  remove_cc_flag(\"/w34100\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB)\nDESCRIPTION: This snippet defines the library dependencies for bf_editor_curve. These libraries provide necessary functions and data structures for curve editing and integration with other Blender components. The PRIVATE keyword ensures that these dependencies are not exposed to other libraries that depend on bf_editor_curve.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/curve/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::extern::curve_fit_nd\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source and Header Files\nDESCRIPTION: This snippet defines the source and header files that constitute the Cycles Kernel OSL library. The `set` commands create lists of source and header files, which are later used when defining the library. This enables the build system to identify and compile the necessary files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  closures.cpp\n  globals.cpp\n  services.cpp\n)\n\nset(HEADER_SRC\n  closures_setup.h\n  closures_template.h\n  compat.h\n  globals.h\n  osl.h\n  services.h\n  services_shared.h\n  types.h\n)\n```\n\n----------------------------------------\n\nTITLE: Install Studio Lights\nDESCRIPTION: This CMake snippet installs the studio lights data directory. It's installed to allow use of lights in the application.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\n install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/studiolights\n    DESTINATION ${PLAYER_TARGETDIR_VER}/datafiles\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining CUDA Kernel Compilation Macro\nDESCRIPTION: This macro (CYCLES_CUDA_KERNEL_ADD) defines the steps to compile a CUDA kernel for a specific architecture. It sets compiler flags, adds custom commands to compile and compress the kernel, and prepares it for installation.  It uses the CUDA NVCC compiler, and relies on CMake's `add_custom_command` to generate build rules. It also uses a custom target `zstd_compress` for compression.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\n  macro(CYCLES_CUDA_KERNEL_ADD arch prev_arch name flags sources experimental)\n    if(${arch} MATCHES \"compute_.*\")\n      set(format \"ptx\")\n    else()\n      set(format \"cubin\")\n    endif()\n    set(cuda_file ${name}_${arch}.${format})\n    set(cuda_file_compressed ${cuda_file}.zst)\n\n    set(kernel_sources ${sources})\n    if(NOT ${prev_arch} STREQUAL \"none\")\n      if(${prev_arch} MATCHES \"compute_.*\")\n        set(kernel_sources ${kernel_sources} ${name}_${prev_arch}.ptx)\n      else()\n        set(kernel_sources ${kernel_sources} ${name}_${prev_arch}.cubin)\n      endif()\n    endif()\n\n    set(cuda_kernel_src \"/device/cuda/${name}.cu\")\n\n    set(cuda_flags ${flags}\n      -D CCL_NAMESPACE_BEGIN=\n      -D CCL_NAMESPACE_END=\n      -D NVCC\n      -m ${CUDA_BITS}\n      -I ${CMAKE_CURRENT_SOURCE_DIR}/..\n      -I ${CMAKE_CURRENT_SOURCE_DIR}/device/cuda\n      --use_fast_math\n      -o ${CMAKE_CURRENT_BINARY_DIR}/${cuda_file}\n      -Wno-deprecated-gpu-targets)\n\n    if(CUDA_HOST_COMPILER)\n      set(cuda_flags ${cuda_flags}\n        -ccbin=\"${CUDA_HOST_COMPILER}\")\n    endif()\n\n    if(WITH_NANOVDB)\n      set(cuda_flags ${cuda_flags}\n        -D WITH_NANOVDB)\n    endif()\n\n    if(WITH_CYCLES_DEBUG)\n      set(cuda_flags ${cuda_flags} -D WITH_CYCLES_DEBUG)\n      set(cuda_flags ${cuda_flags} --ptxas-options=\"-v\")\n    endif()\n\n    if(${cuda_version} GREATER_EQUAL 110)\n      # Helps with compatibility when using recent clang host compiler.\n      set(cuda_flags ${cuda_flags} -std=c++17)\n    endif()\n\n    set(_cuda_nvcc_args\n      -arch=${arch}\n      ${CUDA_NVCC_FLAGS}\n      --${format}\n      ${CMAKE_CURRENT_SOURCE_DIR}${cuda_kernel_src}\n      ${cuda_flags}\n    )\n\n    if(WITH_COMPILER_CCACHE AND CCACHE_PROGRAM)\n      add_custom_command(\n        OUTPUT ${cuda_file}\n        COMMAND ${CCACHE_PROGRAM} ${cuda_nvcc_executable} ${_cuda_nvcc_args}\n        DEPENDS ${kernel_sources})\n    else()\n      add_custom_command(\n        OUTPUT ${cuda_file}\n        COMMAND ${cuda_nvcc_executable} ${_cuda_nvcc_args}\n        DEPENDS ${kernel_sources})\n    endif()\n\n    add_custom_command(\n      OUTPUT ${cuda_file_compressed}\n      COMMAND \"$<TARGET_FILE:zstd_compress>\" ${cuda_file} ${cuda_file_compressed}\n      DEPENDS ${cuda_file})\n\n    unset(_cuda_nvcc_args)\n    delayed_install(\"${CMAKE_CURRENT_BINARY_DIR}\" \"${cuda_file_compressed}\" ${CYCLES_INSTALL_PATH}/lib)\n    list(APPEND cuda_cubins ${cuda_file_compressed})\n\n    unset(cuda_debug_flags)\n  endmacro()\n```\n\n----------------------------------------\n\nTITLE: Generating Wayland Protocol Bindings\nDESCRIPTION: Defines a macro to generate Wayland protocol bindings using the Wayland scanner.  It creates custom commands to generate both header and source files from the protocol definition XML files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n    # Generate protocols bindings.\n    macro(generate_protocol_bindings PROT_DEF)\n      # File name without directory or extension (use for header name).\n      get_filename_component(_name ${PROT_DEF} NAME_WLE)\n      add_custom_command(\n        OUTPUT ${INC_DST}/${_name}-client-protocol.h\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${INC_DST}\n        COMMAND ${WAYLAND_SCANNER} client-header ${PROT_DEF} ${INC_DST}/${_name}-client-protocol.h\n      )\n      add_custom_command(\n        OUTPUT ${INC_DST}/${_name}-client-protocol.c\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${INC_DST}\n        COMMAND ${WAYLAND_SCANNER} private-code ${PROT_DEF} ${INC_DST}/${_name}-client-protocol.c\n        DEPENDS ${INC_DST}/${_name}-client-protocol.h\n      )\n\n      if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        # Prevent warnings/failure to compile with generated `WL_PRIVATE` declarations.\n        set_source_files_properties(\n          \"${INC_DST}/${_name}-client-protocol.c\"\n          PROPERTIES COMPILE_FLAGS \"-Wno-missing-variable-declarations\"\n        )\n      endif()\n\n      list(APPEND SRC\n        ${INC_DST}/${_name}-client-protocol.c\n        ${INC_DST}/${_name}-client-protocol.h\n      )\n      unset(_name)\n    endmacro()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation for Remesh - CMake\nDESCRIPTION: Conditionally includes Remesh-related headers, libraries, and preprocessor definitions based on the 'WITH_MOD_REMESH' flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_REMESH)\n  list(APPEND INC\n    ../../../intern/dualcon\n  )\n  list(APPEND LIB\n    bf_intern_dualcon\n  )\n  add_definitions(-DWITH_MOD_REMESH)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating bf_draw_shaders Library\nDESCRIPTION: This snippet creates a static library named `bf_draw_shaders` from the compiled GLSL shaders (stored as C files in `GLSL_C`). The `blender_add_lib` function is used for this purpose. No include directories or link libraries are specified directly here.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_draw_shaders \"${GLSL_C}\" \"\" \"\" \"\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files for the Mantaflow module. It includes both C++ source files and header files. These files contain the implementation of the Mantaflow integration, including Python bindings and fluid simulation logic.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mantaflow/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/manta_python_API.cpp\n  intern/manta_fluid_API.cpp\n  intern/MANTA_main.cpp\n\n  extern/manta_python_API.h\n  extern/manta_fluid_API.h\n  intern/MANTA_main.h\n  intern/strings/fluid_script.h\n  intern/strings/smoke_script.h\n  intern/strings/liquid_script.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting system include directories\nDESCRIPTION: Placeholder for system include directories, currently empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files that make up the Depsgraph library.  It lists all the .cc and .h files within the intern directory related to depsgraph functionality, builder, eval, node and debug.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/builder/deg_builder.cc\n  intern/builder/deg_builder_cache.cc\n  intern/builder/deg_builder_cycle.cc\n  intern/builder/deg_builder_key.cc\n  intern/builder/deg_builder_key.h\n  intern/builder/deg_builder_map.cc\n  intern/builder/deg_builder_nodes.cc\n  intern/builder/deg_builder_nodes_rig.cc\n  intern/builder/deg_builder_nodes_scene.cc\n  intern/builder/deg_builder_nodes_view_layer.cc\n  intern/builder/deg_builder_pchanmap.cc\n  intern/builder/deg_builder_relations.cc\n  intern/builder/deg_builder_relations_drivers.cc\n  intern/builder/deg_builder_relations_rig.cc\n  intern/builder/deg_builder_relations_scene.cc\n  intern/builder/deg_builder_relations_view_layer.cc\n  intern/builder/deg_builder_remove_noop.cc\n  intern/builder/deg_builder_rna.cc\n  intern/builder/deg_builder_stack.cc\n  intern/builder/deg_builder_transitive.cc\n  intern/builder/pipeline.cc\n  intern/builder/pipeline_all_objects.cc\n  intern/builder/pipeline_compositor.cc\n  intern/builder/pipeline_from_collection.cc\n  intern/builder/pipeline_from_ids.cc\n  intern/builder/pipeline_render.cc\n  intern/builder/pipeline_view_layer.cc\n  intern/debug/deg_debug.cc\n  intern/debug/deg_debug_relations_graphviz.cc\n  intern/debug/deg_debug_stats_gnuplot.cc\n  intern/eval/deg_eval.cc\n  intern/eval/deg_eval_copy_on_write.cc\n  intern/eval/deg_eval_flush.cc\n  intern/eval/deg_eval_runtime_backup.cc\n  intern/eval/deg_eval_runtime_backup_animation.cc\n  intern/eval/deg_eval_runtime_backup_modifier.cc\n  intern/eval/deg_eval_runtime_backup_movieclip.cc\n  intern/eval/deg_eval_runtime_backup_object.cc\n  intern/eval/deg_eval_runtime_backup_pose.cc\n  intern/eval/deg_eval_runtime_backup_scene.cc\n  intern/eval/deg_eval_runtime_backup_sequence.cc\n  intern/eval/deg_eval_runtime_backup_sequencer.cc\n  intern/eval/deg_eval_runtime_backup_sound.cc\n  intern/eval/deg_eval_runtime_backup_volume.cc\n  intern/eval/deg_eval_stats.cc\n  intern/eval/deg_eval_visibility.cc\n  intern/eval/deg_eval_visibility.h\n  intern/node/deg_node.cc\n  intern/node/deg_node_component.cc\n  intern/node/deg_node_factory.cc\n  intern/node/deg_node_id.cc\n  intern/node/deg_node_operation.cc\n  intern/node/deg_node_time.cc\n  intern/depsgraph.cc\n  intern/depsgraph_build.cc\n  intern/depsgraph_debug.cc\n  intern/depsgraph_eval.cc\n  intern/depsgraph_light_linking.cc\n  intern/depsgraph_light_linking.hh\n  intern/depsgraph_physics.cc\n  intern/depsgraph_query.cc\n  intern/depsgraph_query_foreach.cc\n  intern/depsgraph_query_iter.cc\n  intern/depsgraph_registry.cc\n  intern/depsgraph_relation.cc\n  intern/depsgraph_tag.cc\n  intern/depsgraph_type.cc\n  intern/depsgraph_update.cc\n  intern/depsgraph_writeback_sync.cc\n\n  DEG_depsgraph.hh\n  DEG_depsgraph_build.hh\n  DEG_depsgraph_debug.hh\n  DEG_depsgraph_light_linking.hh\n  DEG_depsgraph_physics.hh\n  DEG_depsgraph_query.hh\n  DEG_depsgraph_writeback_sync.hh\n\n  intern/builder/deg_builder.h\n  intern/builder/deg_builder_cache.h\n  intern/builder/deg_builder_cycle.h\n  intern/builder/deg_builder_map.h\n  intern/builder/deg_builder_nodes.h\n  intern/builder/deg_builder_pchanmap.h\n  intern/builder/deg_builder_relations.h\n  intern/builder/deg_builder_relations_drivers.h\n  intern/builder/deg_builder_relations_impl.h\n  intern/builder/deg_builder_remove_noop.h\n  intern/builder/deg_builder_rna.h\n  intern/builder/deg_builder_stack.h\n  intern/builder/deg_builder_transitive.h\n  intern/builder/pipeline.h\n  intern/builder/pipeline_all_objects.h\n  intern/builder/pipeline_compositor.h\n  intern/builder/pipeline_from_collection.h\n  intern/builder/pipeline_from_ids.h\n  intern/builder/pipeline_render.h\n  intern/builder/pipeline_view_layer.h\n  intern/debug/deg_debug.h\n  intern/eval/deg_eval.h\n  intern/eval/deg_eval_copy_on_write.h\n  intern/eval/deg_eval_flush.h\n  intern/eval/deg_eval_runtime_backup.h\n  intern/eval/deg_eval_runtime_backup_animation.h\n  intern/eval/deg_eval_runtime_backup_modifier.h\n  intern/eval/deg_eval_runtime_backup_movieclip.h\n  intern/eval/deg_eval_runtime_backup_object.h\n  intern/eval/deg_eval_runtime_backup_pose.h\n  intern/eval/deg_eval_runtime_backup_scene.h\n  intern/eval/deg_eval_runtime_backup_sequence.h\n  intern/eval/deg_eval_runtime_backup_sequencer.h\n  intern/eval/deg_eval_runtime_backup_sound.h\n  intern/eval/deg_eval_runtime_backup_volume.h\n  intern/eval/deg_eval_stats.h\n  intern/node/deg_node.hh\n  intern/node/deg_node_component.hh\n  intern/node/deg_node_factory.hh\n  intern/node/deg_node_factory_impl.hh\n  intern/node/deg_node_id.hh\n  intern/node/deg_node_operation.hh\n  intern/node/deg_node_time.hh\n  intern/depsgraph.hh\n  intern/depsgraph_physics.hh\n  intern/depsgraph_registry.hh\n  intern/depsgraph_relation.hh\n  intern/depsgraph_tag.hh\n  intern/depsgraph_type.hh\n  intern/depsgraph_update.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies in CMake\nDESCRIPTION: This CMake snippet defines the private library dependencies for the target. Here, the `bf::intern::guardedalloc` library is specified as a private dependency.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/testing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Google Tests Subdirectory CMake\nDESCRIPTION: Adds the `gtests` subdirectory for Google Tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(gtests)\n```\n\n----------------------------------------\n\nTITLE: Conditional Bullet Includes and Libraries (CMake)\nDESCRIPTION: Conditionally appends the Bullet include directories to INC_SYS and adds the necessary definitions and libraries if Bullet physics support is enabled (WITH_BULLET is true). ${BULLET_INCLUDE_DIRS} and ${BULLET_LIBRARIES} are CMake variables representing the Bullet include directories and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  list(APPEND INC_SYS\n    ${BULLET_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_BULLET)\n        list(APPEND LIB\n          extern_bullet\n          ${BULLET_LIBRARIES}\n        )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files in CMake\nDESCRIPTION: This snippet defines the source files that will be compiled into the library. It lists the C++ source files and a header file (image_intern.hh) related to the image editor space.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_image/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  image_buttons.cc\n  image_draw.cc\n  image_edit.cc\n  image_ops.cc\n  image_sequence.cc\n  image_undo.cc\n  space_image.cc\n\n  image_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Including External Libraries - CMake\nDESCRIPTION: This snippet includes external libraries required by Cycles using CMake's `include` command.  It only does so if `CYCLES_STANDALONE_REPOSITORY` is not set, implying an external build.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CYCLES_STANDALONE_REPOSITORY)\n  include(cmake/external_libs.cmake)\n  include(cmake/macros.cmake)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies (LIB)\nDESCRIPTION: This snippet specifies the private library dependencies required for the clip editor space library. It lists various Blender libraries related to fonts, kernel, utilities, loaders, translations, dependency graph, DNA, GPU, image buffers, guarded allocator, and window manager.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_clip/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Imath Include Directories\nDESCRIPTION: Adds Imath include directories to the system include path (`INC_SYS`) if `IMATH_INCLUDE_DIRS` is defined. This is necessary because OpenImageIO may include Imath headers depending on the target architecture and compiler flags, especially when SSE support is lacking.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED IMATH_INCLUDE_DIRS)\n  list(APPEND INC_SYS\n    ${IMATH_INCLUDE_DIRS}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Test Executable (WITH_GTESTS)\nDESCRIPTION: This code conditionally adds a test executable named atomic if the WITH_GTESTS option is enabled. It defines the test source files (TEST_SRC), include directories (TEST_INC), and library dependencies (TEST_LIB). The blender_add_test_executable command is used to create the test executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/atomic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/atomic_test.cc\n  )\n  set(TEST_INC\n  )\n  set(TEST_LIB\n    PRIVATE bf_intern_atomic\n  )\n  blender_add_test_executable(atomic \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This code block defines the source files that will be compiled into the dummy physics library. It specifies two files: `DummyPhysicsEnvironment.cpp` and `DummyPhysicsEnvironment.h`, suggesting a basic implementation of a physics environment with a corresponding header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Dummy/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  DummyPhysicsEnvironment.cpp\n\n  DummyPhysicsEnvironment.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the private libraries that the node functions library depends on. These dependencies are essential for the correct functioning of the node functions, providing access to core Blender functionalities. `PRIVATE` keyword ensures these libraries are only linked to this target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories required for the spindle encryption library. The '.' represents the current directory, typically where the CMakeLists.txt file is located. INC_SYS is set to empty, meaning there are no specific system include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/spindle/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n\t.\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Game Controller Data CMake\nDESCRIPTION: This snippet installs the game controller data if `WITH_GAMEENGINE` and `WITH_SDL` are enabled. It uses the `install` command to copy the directory containing game controller data to the destination directory `${TARGETDIR_VER}/datafiles`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_GAMEENGINE AND WITH_SDL)\n\tinstall(\n\t\tDIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/gamecontroller\n\t\tDESTINATION ${TARGETDIR_VER}/datafiles\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Dependent Libraries\nDESCRIPTION: Specifies the private libraries that the OpenEXR integration depends on.  These include `blenkernel`, `blenlib`, `dna`, and `guardedalloc` which are Blender internal libraries.  These are linked privately, meaning they are only used within this library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/openexr/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Dependencies\nDESCRIPTION: This snippet adds a dependency on the `bf_rna` library. This ensures that the RNA library is built before the Outliner library, as the Outliner library relies on generated RNA data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_outliner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.hh dna_type_offsets.h\nadd_dependencies(bf_editor_space_outliner bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding a Sound to the Sequence\nDESCRIPTION: This snippet adds a sound to the aud.Sequence object using aud.Sequence.add(). It specifies the sound, start position, end position, and priority (0).  The method returns an aud.SequenceEntry object.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nentry = sequence.add(note, position, position + length, 0)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Directories in CMake\nDESCRIPTION: Defines the source and output directories used for the view layer tests. The source directory points to where the test data is located, and the output directory is where the test results will be stored.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/view_layer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SRC_DIR ${CMAKE_SOURCE_DIR}/tests/data)\nset(TEST_OUT_DIR ${CMAKE_BINARY_DIR}/tests)\n```\n\n----------------------------------------\n\nTITLE: Adding Maintainer Build Type in CMake\nDESCRIPTION: This snippet adds the 'Maintainer' build type to the list of available build configurations.  If CMAKE_CONFIGURATION_TYPES is already defined, it appends 'Maintainer' to the list and removes duplicates.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nIF(CMAKE_CONFIGURATION_TYPES)\n  LIST(APPEND CMAKE_CONFIGURATION_TYPES Maintainer)\n  LIST(REMOVE_DUPLICATES CMAKE_CONFIGURATION_TYPES)\n  SET(CMAKE_CONFIGURATION_TYPES \"${CMAKE_CONFIGURATION_TYPES}\" CACHE STRING\n      \"Add the configurations that we need\"\n      FORCE)\n endif()\n```\n\n----------------------------------------\n\nTITLE: Installing Text Files (CMake)\nDESCRIPTION: This snippet configures and installs text files. It configures `readme.html` from a template and adds it to the `BLENDER_TEXT_FILES` list. Then, it installs all files in the `BLENDER_TEXT_FILES` list to the `${TARGETDIR_TEXT}` directory. It also installs the contents of the `release/license` directory to the same destination.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED TARGETDIR_TEXT)\n\n  configure_file(\n    ${CMAKE_SOURCE_DIR}/release/text/readme.html\n    ${CMAKE_BINARY_DIR}/release/text/readme.html\n    @ONLY\n  )\n  list(APPEND BLENDER_TEXT_FILES\n    ${CMAKE_BINARY_DIR}/release/text/readme.html\n  )\n\n  install(\n    FILES ${BLENDER_TEXT_FILES}\n    DESTINATION \"${TARGETDIR_TEXT}\"\n  )\n\n  install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/release/license\n    DESTINATION \"${TARGETDIR_TEXT}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Color Management Data CMake\nDESCRIPTION: This snippet installs the color management data if `WITH_OPENCOLORIO` is enabled. It uses the `install` command to copy the directory containing color management files to the destination directory `${TARGETDIR_VER}/datafiles`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENCOLORIO)\n  install(\n    DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/colormanagement\n    DESTINATION ${TARGETDIR_VER}/datafiles\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender CMake Macro\nDESCRIPTION: This snippet uses a custom CMake macro, `blender_add_lib`, to create the `ge_msg_network` library. It passes the source files, include directories, system include directories, and linked libraries as arguments to the macro, configuring the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/KXNetwork/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(ge_msg_network \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Text Files\nDESCRIPTION: This CMake snippet configures and installs text files, including a generated readme.html file. It first configures the readme.html file using `configure_file`, replacing variables within the file. Then, it appends the generated file to a list of text files to be installed. Finally, it installs all the text files, including the generated readme and the contents of the license directory, to the designated text directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n  if(DEFINED PLAYER_TARGETDIR_TEXT)\n\n    configure_file(\n      ${CMAKE_SOURCE_DIR}/release/text/readme.html\n      ${CMAKE_BINARY_DIR}/release/text/readme.html\n      @ONLY\n    )\n    list(APPEND PLAYER_TEXT_FILES\n      ${CMAKE_BINARY_DIR}/release/text/readme.html\n    )\n\n    install(\n      FILES ${PLAYER_TEXT_FILES}\n      DESTINATION \"${PLAYER_TARGETDIR_TEXT}\"\n    )\n\n    install(\n      DIRECTORY ${CMAKE_SOURCE_DIR}/release/license\n      DESTINATION \"${PLAYER_TARGETDIR_TEXT}\"\n  )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Define Macro: suffix_relpaths\nDESCRIPTION: Defines a macro `suffix_relpaths` to convert relative file paths to absolute paths by adding a prefix. This is used to correctly locate source files when including external CMake files.  The macro takes a list of files and adds the specified prefix to each relative path, creating a new list of suffixed paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(suffix_relpaths\n  new_files files prefix)\n\n  set(${new_files})\n  foreach(_file ${files})\n    if(IS_ABSOLUTE \"${_file}\")\n      list(APPEND ${new_files} ${_file})\n    else()\n      set(_file_to \"${prefix}${_file}\")\n      list(APPEND ${new_files} ${_file_to})\n      get_source_file_property(_is_generated ${_file} GENERATED)\n      set_source_files_properties(${_file_to} PROPERTIES GENERATED ${_is_generated})\n      unset(_file_to)\n      unset(_is_generated)\n    endif()\n  endforeach()\n  unset(_file)\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions for Windows Version Resources - CMake\nDESCRIPTION: This snippet adds preprocessor definitions for setting version information into Windows resources. It is only executed on Windows platforms (WIN32) when not building for a UNIX environment.  The definitions set strings and integer values representing the blender version.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND NOT UNIX)\n    add_definitions(\n    -DBLEN_VER_RC_STR=\"${BLENDER_VERSION}\"\n    -DBLEN_VER_RC_1=${BLENDER_VERSION_MAJOR}\n    -DBLEN_VER_RC_2=${BLENDER_VERSION_MINOR}\n    -DBLEN_VER_RC_3=${BLENDER_VERSION_PATCH}\n    -DBLEN_VER_RC_4=0\n  )\n\n\n  list(APPEND SRC\n    ${CMAKE_SOURCE_DIR}/release/windows/icons/winblender.rc\n    ${CMAKE_BINARY_DIR}/blender.exe.manifest\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Source Files - CMake\nDESCRIPTION: This snippet defines the source files that make up the bf_editor_lattice library. It lists the .cc files and a .hh file that contain the implementation code for the library's functionality.  These source files will be compiled and linked together to create the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/lattice/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  editlattice_select.cc\n  editlattice_tools.cc\n  editlattice_undo.cc\n  lattice_ops.cc\n\n  lattice_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Library Shader Files\nDESCRIPTION: This snippet defines a CMake variable `SRC_GLSL_LIB` which contains a list of GLSL library shader files.  Library shaders are reusable code blocks that can be included in other shaders. This example includes `gpu_shader_print_lib.glsl` which is likely used for debugging purposes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/shaders/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_LIB\n  common/gpu_shader_print_lib.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to RNA Prototypes in CMake\nDESCRIPTION: This snippet adds a dependency on the `bf_rna` library to ensure that the RNA prototypes are built before the logic editor space library. This ensures that the generated RNA headers are available during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_logic/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.h\nadd_dependencies(bf_editor_space_logic bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Add Library: bli_lib\nDESCRIPTION: Adds a library `bli_lib` built from multiple C and C++ source files located under the `../../../source/blender/blenlib/intern/` directory. It also adds necessary include directories and defines `MATH_STANDALONE` to avoid eigen dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Unfortunately `blenfont` needs `blenlib`.\ninclude_directories(\n  \"../../../source/blender/blenlib\"\n)\n\n# Needed for math_matrix_c.cc to avoid eigen_capi.h dependency.\nadd_definitions(-DMATH_STANDALONE)\n\nadd_library(bli_lib\n  \"../../../source/blender/blenlib/intern/fileops.c\"\n  \"../../../source/blender/blenlib/intern/gsqueue.c\"\n  \"../../../source/blender/blenlib/intern/rct.c\"\n  \"../../../source/blender/blenlib/intern/string.c\"\n  \"../../../source/blender/blenlib/intern/string_utf8.c\"\n  \"../../../source/blender/blenlib/intern/listbase.cc\"\n  \"../../../source/blender/blenlib/intern/math_color.cc\"\n  \"../../../source/blender/blenlib/intern/math_geom.c\"\n  \"../../../source/blender/blenlib/intern/math_matrix_c.cc\"\n  \"../../../source/blender/blenlib/intern/math_rotation.c\"\n  \"../../../source/blender/blenlib/intern/math_vector.c\"\n  \"../../../source/blender/blenlib/intern/storage.c\"\n  \"../../../source/blender/blenlib/intern/task.c\"\n  \"../../../source/blender/blenlib/intern/threads.c\"\n  \"../../../source/blender/blenlib/intern/time.c\"\n  \"../../../source/blender/blenlib/intern/path_utils.cc\"\n  \"../../../source/blender/blenlib/intern/BLI_dynstr.c\"\n  \"../../../source/blender/blenlib/intern/BLI_ghash.c\"\n  \"../../../source/blender/blenlib/intern/BLI_ghash_utils.cc\"\n  \"../../../source/blender/blenlib/intern/BLI_linklist.c\"\n  \"../../../source/blender/blenlib/intern/BLI_memarena.c\"\n  \"../../../source/blender/blenlib/intern/BLI_mempool.c\"\n  \"../../../source/blender/blenlib/intern/hash_mm2a.cc\"\n  \"../../../source/blender/blenlib/intern/string_utils.c\"\n  \"../../../source/blender/blenlib/intern/system.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Platform Specific Include Directories - CMake\nDESCRIPTION: This CMake snippet conditionally appends the PThreads include directory on Windows systems.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/freestyle/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  list(APPEND INC_SYS\n    ${PTHREADS_INC}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Game Engine Decklink Option\nDESCRIPTION: This snippet defines the WITH_GAMEENGINE_DECKLINK option for enabling BlackMagicDesign DeckLink card support in the Game Engine. The option is disabled by default on macOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  set(WITH_GAMEENGINE_DECKLINK OFF)\nelse()\n  option(WITH_GAMEENGINE_DECKLINK \"Support BlackMagicDesign DeckLink cards in the Game Engine\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Geometry Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to geometry processing in the Cycles kernel. These headers include definitions for attributes, curves, intersections, objects, points, primitives, shader data, triangles, and volumes.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_GEOM_HEADERS\n  geom/attribute.h\n  geom/curve.h\n  geom/curve_intersect.h\n  geom/geom_intersect.h\n  geom/motion_curve.h\n  geom/motion_point.h\n  geom/motion_triangle.h\n  geom/motion_triangle_intersect.h\n  geom/motion_triangle_shader.h\n  geom/object.h\n  geom/point.h\n  geom/point_intersect.h\n  geom/primitive.h\n  geom/shader_data.h\n  geom/triangle.h\n  geom/triangle_intersect.h\n  geom/volume.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining compile definitions for blender_cpu_check in CMake\nDESCRIPTION: This snippet defines a compile definition `WITH_CPU_CHECK` for the `blender_cpu_check` library. This definition can be used in the C++ code to conditionally compile sections of code based on whether CPU checking is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(blender_cpu_check PUBLIC WITH_CPU_CHECK)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory for Message Formatting (CMake)\nDESCRIPTION: This snippet conditionally adds the 'msgfmt' subdirectory. If 'WITH_INTERNATIONAL' is enabled, the 'msgfmt' directory is included, which likely contains tools and scripts for generating message catalogs or other internationalization-related data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INTERNATIONAL)\n  add_subdirectory(msgfmt)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Brush Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for brushes. The `bl_brush_test.py` script located in the current list directory is used for testing.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n  bl_brush\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_brush_test.py\n)\n```\n\n----------------------------------------\n\nTITLE: Generate Source File Names\nDESCRIPTION: This snippet uses a regular expression to transform the filenames in `DEFSRC` into generated source file names, placing them in the binary directory. It also appends header files to the generated source list and sets the `GENERATED` property for these files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nstring(\n  REGEX REPLACE\n  \"rna_([a-zA-Z0-9_-]*).cc\" \"${CMAKE_CURRENT_BINARY_DIR}/rna_\\\\1_gen.cc\"\n  GENSRC \"${DEFSRC}\"\n)\nlist(APPEND GENSRC\n  \"${CMAKE_CURRENT_BINARY_DIR}/rna_prototypes_gen.hh\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/../RNA_prototypes.hh\"\n)\nset_source_files_properties(${GENSRC} PROPERTIES GENERATED TRUE)\n```\n\n----------------------------------------\n\nTITLE: Installing Geometry Icons (CMake)\nDESCRIPTION: This snippet installs geometry icons. It retrieves a list of icon names from the global property `ICON_GEOM_NAMES`, constructs the full paths to the corresponding `.dat` files, and installs them into `${TARGETDIR_VER}/datafiles/icons`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_74\n\nLANGUAGE: cmake\nCODE:\n```\n# Geometry icons.\nget_property(_icon_names GLOBAL PROPERTY ICON_GEOM_NAMES)\nset(_icon_files)\nforeach(_f ${_icon_names})\n  list(APPEND _icon_files\n    \"${CMAKE_SOURCE_DIR}/release/datafiles/icons/${_f}.dat\"\n  )\nendforeach()\ninstall(\n  FILES ${_icon_files}\n  DESTINATION ${TARGETDIR_VER}/datafiles/icons\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories with CMake\nDESCRIPTION: This snippet sets the include directories for the GPU Direct library. It includes the current directory (.) and a blenlib directory. The blenlib directory is included to provide necessary definitions for the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/gpudirect/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n\t.\n\t# XXX, bad level include!\n\t../../source/blender/blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Defines system include directories. In this specific case, it is empty, meaning the library relies only on standard system headers or headers provided in the 'INC' variable. If there were system dependencies, they would be added here.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/simulation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Library\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_lib` to create the `bf_functions` library. It specifies the library name, source files, include directories, and library dependencies. The `add_library` command creates an alias `bf::functions` for the `bf_functions` target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/functions/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_functions \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::functions ALIAS bf_functions)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the list of libraries that the Grease Pencil editor library depends on. These include Blender's internal libraries such as blenkernel, bmesh, and depsgraph, as well as external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/grease_pencil/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::animrig\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::intern::clog\n  PRIVATE bf::windowmanager\n  extern_curve_fit_nd\n  extern_fmtlib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - Ceres Solver\nDESCRIPTION: Defines the system include directories for the Ceres Solver library. These directories contain external dependencies like gflags and glog.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ${GFLAGS_INCLUDE_DIRS}\n  ${GLOG_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories required for compiling the texture nodes library. These directories contain header files needed by the source code. The `CMAKE_BINARY_DIR` variable is used to point to the build directory for generated headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/texture/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../makesrna\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory Conditionally\nDESCRIPTION: This code snippet demonstrates how to conditionally add subdirectories to the build process based on a CMake variable. If `WITH_CYCLES_OSL` is enabled, it adds the `osl` and `osl/shaders` subdirectories to the build. It also appends `cycles_kernel_osl` to the `LIB` variable, likely a list of libraries to be linked.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_OSL)\n  list(APPEND LIB\n    cycles_kernel_osl\n  )\n  add_subdirectory(osl)\n  add_subdirectory(osl/shaders)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender Helper Function\nDESCRIPTION: This snippet uses a Blender-specific CMake function, `blender_add_lib`, to create the bf_intern_libc_compat library. It passes the library name, source files, include directories, and system include directories as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libc_compat/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_intern_libc_compat \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlay Render Tests\nDESCRIPTION: This snippet configures overlay render tests for different GPU backends (OpenGL, Metal, Vulkan), but only if WITH_GPU_RENDER_TESTS_HEADED is enabled. It uses the overlay_render_tests.py script and specifies test and output directories along with the chosen GPU backend.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_40\n\nLANGUAGE: cmake\nCODE:\n```\n if(WITH_GPU_RENDER_TESTS)\n    # Overlay\n    if(WITH_GPU_RENDER_TESTS_HEADED)\n      if(WITH_OPENGL_BACKEND)\n        add_render_test(\n          overlay_opengl\n          ${CMAKE_CURRENT_LIST_DIR}/overlay_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/overlay\"\n          --outdir \"${TEST_OUT_DIR}/overlay\"\n          --gpu-backend opengl\n          ${_gpu_render_tests_arguments}\n        )\n      endif()\n\n      if(WITH_METAL_BACKEND)\n        add_render_test(\n          overlay_metal\n          ${CMAKE_CURRENT_LIST_DIR}/overlay_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/overlay\"\n          --outdir \"${TEST_OUT_DIR}/overlay\"\n          --gpu-backend metal\n          ${_gpu_render_tests_arguments}\n        )\n      endif()\n\n      if(WITH_VULKAN_BACKEND AND WITH_GPU_RENDER_TESTS_VULKAN)\n        add_render_test(\n          overlay_vulkan\n          ${CMAKE_CURRENT_LIST_DIR}/overlay_render_tests.py\n          --testdir \"${TEST_SRC_DIR}/overlay\"\n          --outdir \"${TEST_OUT_DIR}/overlay\"\n          --gpu-backend vulkan\n          ${_gpu_render_tests_arguments}\n        )\n      endif()\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library\nDESCRIPTION: This snippet uses the blender_add_lib function to create the extern_cuew library. It passes the source files, include directories, and system include directories defined in the previous snippets. This function handles the compilation and linking process.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/cuew/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_cuew \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the memory utility library. These dependencies are linked with the memory utility library during compilation and linking.  These dependencies are marked as PRIVATE.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/memutil/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Including Atomic Directory\nDESCRIPTION: This snippet includes the atomic directory.  The directory to be included depends on whether the project is a standalone repository or not.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nif(CYCLES_STANDALONE_REPOSITORY)\n  include_directories(../third_party/atomic)\nelse()\n  include_directories(../atomic)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Custom Properties\nDESCRIPTION: This example demonstrates how to create nested property groups. `MyMaterialSubProps` defines a float property, and `MyMaterialGroupProps` contains a pointer to `MyMaterialSubProps`. Registration must occur in the order of dependencies (sub-properties first), and unregistration is the reverse. This creates a hierarchical structure for organizing custom material settings.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_overview.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Create new property group with a sub property:\n# bpy.data.materials[0].my_custom_props.sub_group.my_float\nimport bpy\n\nclass MyMaterialSubProps(bpy.types.PropertyGroup):\n    my_float: bpy.props.FloatProperty()\n\nclass MyMaterialGroupProps(bpy.types.PropertyGroup):\n    sub_group: bpy.props.PointerProperty(type=MyMaterialSubProps)\n\ndef register():\n    bpy.utils.register_class(MyMaterialSubProps)\n    bpy.utils.register_class(MyMaterialGroupProps)\n    bpy.types.Material.my_custom_props: bpy.props.PointerProperty(type=MyMaterialGroupProps)\n\ndef unregister():\n    del bpy.types.Material.my_custom_props\n    bpy.utils.unregister_class(MyMaterialGroupProps)\n    bpy.utils.unregister_class(MyMaterialSubProps)\n\nif __name__ == \"__main__\":\n    register()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files and header files required to build the LZMA library. These files contain the implementation of the LZMA compression and decompression algorithms.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzma/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  Alloc.c\n  CpuArch.c\n  LzFind.c\n  LzFindMt.c\n  LzFindOpt.c\n  LzmaDec.c\n  LzmaEnc.c\n  LzmaLib.c\n  Threads.c\n\n  7zTypes.h\n  7zWindows.h\n  Alloc.h\n  Compiler.h\n  CpuArch.h\n  LzFind.h\n  LzFindMt.h\n  LzHash.h\n  LzmaDec.h\n  LzmaEnc.h\n  LzmaLib.h\n  Precomp.h\n  Threads.h\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions\nDESCRIPTION: This snippet demonstrates how to define compiler definitions in CMake, specifically when the `WITH_LIBMV` option is enabled. It uses the `add_definitions` command to add preprocessor definitions that affect the compilation of the source code. These definitions can enable or disable certain features, set namespaces, or configure threading behavior.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBMV)\n  if(WIN32)\n    add_definitions(-D_USE_MATH_DEFINES)\n  endif()\n  add_definitions(${GFLAGS_DEFINES})\n  add_definitions(${GLOG_DEFINES})\n  add_definitions(-DLIBMV_GFLAGS_NAMESPACE=${GFLAGS_NAMESPACE})\n\n  if(WITH_TBB)\n    add_definitions(-DLIBMV_USE_TBB_THREADS)\n  endif()\n\n  add_definitions(\n    -DWITH_LIBMV_GUARDED_ALLOC\n    -DLIBMV_NO_FAST_DETECTOR=\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the `bf_intern_clog` library. `INC` is set to the current directory, while `INC_SYS` is left empty, suggesting no system-level includes are directly specified here.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/clog/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Checking CUDA Toolkit Availability - CMake\nDESCRIPTION: This snippet checks for the availability of the CUDA toolkit when CUDA device support is enabled for Cycles rendering. If the toolkit isn't found, it sets the WITH_CUDA_DYNLOAD option to ON, enabling dynamic loading of CUDA libraries. This allows the build to proceed without requiring a CUDA toolkit to be installed at build time.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_89\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_CYCLES AND WITH_CYCLES_DEVICE_CUDA AND NOT WITH_CUDA_DYNLOAD)\n  find_package(CUDA)\n  if(NOT CUDA_FOUND)\n    message(\n      STATUS\n      \"CUDA toolkit not found, \"\n      \"using dynamic runtime loading of libraries (WITH_CUDA_DYNLOAD) instead\"\n    )\n    set(WITH_CUDA_DYNLOAD ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source files for blender_cpu_check CMake\nDESCRIPTION: This snippet sets the source file for the `blender_cpu_check` library. It defines the variable `SRC` to contain the filename `cpu_check.cc`, which will be used as input for the library's compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  cpu_check.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files that make up the CSV import library. `csv_reader.cc` is likely the main implementation file, and `IO_csv.hh` could be a header file defining the interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/csv/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  importer/csv_reader.cc\n\n  IO_csv.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Test Suite for Blender Editor Interface\nDESCRIPTION: This snippet conditionally sets up a test suite for the Blender editor interface library if Google Test (`WITH_GTESTS`) is enabled. It defines the source files and library dependencies for the test suite and uses the `blender_add_test_suite_lib` macro to create the test library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/interface/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    interface_ops_test.cc\n  )\n\n  set(TEST_LIB\n    PRIVATE bf::intern::clog\n  )\n\n  blender_add_test_suite_lib(interface \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing TBB Shared Manifests with CMake\nDESCRIPTION: This snippet uses the `windows_install_shared_manifest` function to install Intel Threading Building Blocks (TBB) DLLs. It checks for the existence of `tbb12.dll` and falls back to `tbb.dll` if the newer version is not available. It handles debug and release versions separately and installs the associated manifests.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nif(EXISTS ${LIBDIR}/tbb/bin/tbb12.dll) # 4.4\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbb12.dll\n    RELEASE\n  )\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbb12_debug.dll\n    DEBUG\n  )\nelse()\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbb.dll\n    RELEASE\n  )\n  windows_install_shared_manifest(\n    FILES\n      ${LIBDIR}/tbb/bin/tbb_debug.dll\n    DEBUG\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including CMake Modules\nDESCRIPTION: Includes a series of CMake modules to handle various aspects of the build process, such as checking software, setting options, managing versions, downloading files, defining macros, checking compilers, and harvesting files. These modules provide reusable functionality for the dependency build.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/check_software.cmake)\ninclude(cmake/options.cmake)\n# `versions.cmake` needs to be included after `options.cmake`\n# due to the `BLENDER_PLATFORM_ARM` variable being needed.\ninclude(cmake/versions.cmake)\ninclude(cmake/download.cmake)\ninclude(cmake/macros.cmake)\n# `setup_msys2.cmake` to install `perl`,\n# which HIP needs to function for the compiler detection to work properly,\n# hence needs to be included before `check_compilers.cmake`.\nif(ENABLE_MSYS2)\n  include(cmake/setup_msys2.cmake)\nelse()\n  set(mingw_LIBDIR ${LIBDIR})\nendif()\ninclude(cmake/check_compilers.cmake)\ninclude(cmake/harvest.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on bf_rna - CMake\nDESCRIPTION: This snippet adds a dependency of the `ge_converter` library on the `bf_rna` library. This means that `bf_rna` must be built before `ge_converter` can be built. It's likely related to the `RNA_prototypes.h` comment above, indicating that the RNA system needs to be built first to generate those prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# RNA_prototypes.h\nadd_dependencies(ge_converter bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: GPU Draw Tests\nDESCRIPTION: This snippet conditionally defines macros and includes directories related to GPU draw tests based on various backend options (OpenGL, Metal, Vulkan). It also handles platform-specific includes (e.g., MoltenVK on Apple).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  if(WITH_GPU_DRAW_TESTS)\n    add_definitions(-DWITH_GPU_DRAW_TESTS)\n    if(WITH_OPENGL_BACKEND)\n      add_definitions(-DWITH_OPENGL_BACKEND)\n    endif()\n    if(WITH_METAL_BACKEND)\n      add_definitions(-DWITH_METAL_BACKEND)\n    endif()\n    if(WITH_VULKAN_BACKEND)\n      add_definitions(-DWITH_VULKAN_BACKEND)\n      list(APPEND INC_SYS\n        PUBLIC ${VULKAN_INCLUDE_DIRS}\n      )\n      if(APPLE)\n        list(APPEND INC_SYS\n          ${MOLTENVK_INCLUDE_DIRS}\n        )\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet specifies the library dependencies for the dual contouring library. It indicates that the library depends on the Eigen linear algebra library provided by the `bf::dependencies::eigen` module.  This ensures that the Eigen library is linked correctly when building the dual contouring library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/dualcon/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries in CMake\nDESCRIPTION: This snippet specifies the `blenlib` library as a private dependency for the `ge_msg_network` library. This ensures that `blenlib` is linked during the build process but is not exposed as a public dependency of the resulting library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/KXNetwork/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Defines include directories for the Cycles library, including internal Blender headers, generated RNA headers, and the Epoxy and Python include directories. These paths are added to the include search paths used during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/blender/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n  ../../../source/blender/makesrna\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna/intern\n)\n\nset(INC_SYS\n  ${Epoxy_INCLUDE_DIRS}\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library (CMake)\nDESCRIPTION: This snippet creates the 'bf_blentranslation' library. It uses the source files, include directories, and system include directories defined earlier. It links against the specified libraries. 'blender_add_lib' is likely a custom CMake function used within the Blender project for consistent library creation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blentranslation \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blentranslation ALIAS bf_blentranslation)\n```\n\n----------------------------------------\n\nTITLE: Building the ufbx Library - CMake\nDESCRIPTION: Uses the `blender_add_lib` command (a custom CMake function specific to the Blender project) to create the `extern_ufbx` library. It specifies the name of the library (`extern_ufbx`), the source files (`SRC`), and the include directories (`INC` and `INC_SYS`). It then creates an alias `bf::extern::ufbx` for the library target, providing a namespaced way to reference it in other parts of the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ufbx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_ufbx \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::extern::ufbx ALIAS extern_ufbx)\n```\n\n----------------------------------------\n\nTITLE: Building bf_dna Library\nDESCRIPTION: This snippet defines the source files and properties for the `bf_dna` library. The library includes generated DNA files and is created using the `blender_add_lib` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  dna_defaults.c\n  dna_genfile.cc\n  dna_utils.cc\n  ${CMAKE_CURRENT_BINARY_DIR}/dna.cc\n  ${CMAKE_CURRENT_BINARY_DIR}/dna_verify.cc\n  ${SRC_DNA_INC}\n\n  ${CMAKE_CURRENT_BINARY_DIR}/dna_type_offsets.h\n  dna_rename_defs.h\n  dna_utils.h\n)\n\nset_source_files_properties(\n  ${CMAKE_CURRENT_BINARY_DIR}/dna.cc\n  ${CMAKE_CURRENT_BINARY_DIR}/dna_type_offsets.h\n  ${CMAKE_CURRENT_BINARY_DIR}/dna_verify.cc\n  PROPERTIES GENERATED TRUE\n)\n\nblender_add_lib(bf_dna \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::dna ALIAS bf_dna)\n```\n\n----------------------------------------\n\nTITLE: Setting oneAPI library paths based on platform\nDESCRIPTION: This snippet defines the paths for the oneAPI kernel library, distinguishing between Windows (DLL and LIB) and other platforms (SO - shared object).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_45\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/cycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.dll)\n    set(cycles_kernel_oneapi_linker_lib ${CMAKE_CURRENT_BINARY_DIR}/cycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.lib)\n  else()\n    set(cycles_kernel_oneapi_lib ${CMAKE_CURRENT_BINARY_DIR}/libcycles_kernel_oneapi${cycles_kernel_oneapi_lib_suffix}.so)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Enabling Game Engine Features\nDESCRIPTION: This snippet adds a preprocessor definition `-DWITH_GAMEENGINE` if the `WITH_GAMEENGINE` option is enabled. This enables features related to the built-in game engine within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GAMEENGINE)\n  add_definitions(-DWITH_GAMEENGINE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Desktop and Icon Files\nDESCRIPTION: This CMake snippet installs desktop entry, metainfo, and icon files to the root directory (`.`) for portable installations. This is typically used to integrate the application with the desktop environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\n    install(\n      FILES\n        ${CMAKE_SOURCE_DIR}/release/freedesktop/org.upbge.UPBGE.desktop\n        ${CMAKE_SOURCE_DIR}/release/freedesktop/org.upbge.UPBGE.metainfo.xml\n        ${CMAKE_SOURCE_DIR}/release/freedesktop/icons/scalable/apps/org.upbge.UPBGE.svg\n        ${CMAKE_SOURCE_DIR}/release/freedesktop/icons/symbolic/apps/org.upbge.UPBGE-symbolic.svg\n      DESTINATION \".\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Adding the Library\nDESCRIPTION: This snippet adds the library using the blender_add_lib command, which likely configures the build process for the movie library. It takes source files, include directories, and libraries as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_imbuf_movie \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::imbuf::movie ALIAS bf_imbuf_movie)\n```\n\n----------------------------------------\n\nTITLE: Memory Allocation with MEM_allocN\nDESCRIPTION: This function allocates a block of memory with a specified length. The `str` parameter is a descriptive string used for debugging purposes, indicating the purpose or origin of the memory block. It is analogous to `malloc()` but includes debugging features.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid *MEM_allocN(unsigned int len, char * str);\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories in CMake\nDESCRIPTION: This snippet defines the system include directories, specifically pointing to the `intern/moto/include` directory. This ensures that the necessary system-level header files for the project are included during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Ketsji/KXNetwork/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n  ../../../../intern/moto/include\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional ITASC Solver Configuration\nDESCRIPTION: This snippet conditionally adds source files, include directories, library dependencies, and preprocessor definitions based on whether the `WITH_IK_ITASC` option is enabled. If enabled, it appends the `bf_intern_itasc` library to the dependencies, adds the ITASC include directory, adds itasc plugin source files, and defines `WITH_IK_ITASC`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/ikplugin/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IK_ITASC)\n  list(APPEND LIB\n    bf_intern_itasc\n  )\n  list(APPEND INC\n    ../../../intern/itasc\n  )\n  list(APPEND INC_SYS\n  )\n  list(APPEND SRC\n    intern/itasc_plugin.cc\n    intern/itasc_plugin.h\n  )\n  add_definitions(-DWITH_IK_ITASC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Object Libraries with CMake\nDESCRIPTION: This snippet creates three object libraries: `theora-common`, `theora-enc`, and `theora-dec`.  Each library contains the compiled object files from the corresponding source files defined earlier, along with the header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(theora-common OBJECT ${LIBTHEORA_COMMON} ${HEADERS})\nadd_library(theora-enc OBJECT ${LIBTHEORA_ENC} ${HEADERS})\nadd_library(theora-dec OBJECT ${LIBTHEORA_DEC} ${HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Setting Render Test Attributes\nDESCRIPTION: This snippet defines a list of render tests to be performed. The list is extended conditionally based on whether certain features like WITH_OPENSUBDIV, WITH_FREESTYLE, WITH_MOD_FLUID, WITH_OPENVDB, and WITH_OPENIMAGEDENOISE are enabled. The final list is then sorted.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_36\n\nLANGUAGE: cmake\nCODE:\n```\nif((WITH_CYCLES OR WITH_GPU_RENDER_TESTS) AND TEST_SRC_DIR_EXISTS)\n  set(render_tests\n    attributes\n    camera\n    bsdf\n    hair\n    image_colorspace\n    image_data_types\n    image_mapping\n    image_texture_limit\n    integrator\n    light\n    light_group\n    light_linking\n    mesh\n    pointcloud\n    principled_bsdf\n    shader\n    shadow_catcher\n    sss\n    texture\n  )\n\n  if(WITH_OPENSUBDIV)\n    list(APPEND render_tests displacement)\n  endif()\n\n  if(WITH_FREESTYLE)\n    list(APPEND render_tests render_layer)\n  endif()\n\n  if(WITH_MOD_FLUID)\n    list(APPEND render_tests motion_blur reports volume)\n  endif()\n\n  if(WITH_OPENVDB)\n    list(APPEND render_tests openvdb)\n  endif()\n\n  if(WITH_OPENIMAGEDENOISE)\n    list(APPEND render_tests denoise)\n  endif()\n\n  # Disabled until new OpenPGL version with deterministic results.\n  # if(WITH_CYCLES_PATH_GUIDING)\n  #   list(APPEND render_tests guiding)\n  # endif()\n\n  if(WITH_GPU_RENDER_TESTS)\n    list(APPEND render_tests grease_pencil)\n  endif()\n\n  list(SORT render_tests)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: Defines any external libraries that the Moto library depends on. In this instance, it is set to an empty list, indicating that the Moto library does not directly depend on any other pre-built libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/moto/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines the system include directories. It appears to be intentionally empty here but can be populated based on conditional compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/shader/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet sets the include directories for the hipew library. It includes both local include directories and system include directories, potentially including HIP include directories if available.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/hipew/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  include\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library - CMake\nDESCRIPTION: This snippet uses a custom CMake function blender_add_lib to create the Depsgraph library.  It defines the target name, source files, include directories, and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_depsgraph \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::depsgraph ALIAS bf_depsgraph)\n```\n\n----------------------------------------\n\nTITLE: Adding and Aliasing the BLI Library\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the `bf_blenlib` library, using the specified source files, include directories, and system include directories.  Then, it creates an alias `bf::blenlib` for the `bf_blenlib` library, which can be used as a target in other parts of the project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_blenlib \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::blenlib ALIAS bf_blenlib)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the project, including both local include directories and system include directories.  The include_directories command adds the specified directories to the compiler's search path for header files.  This ensures that the compiler can find the necessary header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/device/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS )\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: XR OpenXR\nDESCRIPTION: This snippet conditionally defines the `WITH_XR_OPENXR` macro if the `WITH_XR_OPENXR` option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_XR_OPENXR)\n  add_definitions(-DWITH_XR_OPENXR)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Sets the include directories for the binreloc library. 'include' is added as an include path. INC_SYS is set but empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/binreloc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  include\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Defines the include directories for the simulation library. It specifies both local directories ('.', 'intern', '../makesrna') and system include directories, if any. These directories are added to the compiler's include path, allowing the simulation code to find necessary header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/simulation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  intern\n  ../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Library - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` custom CMake function to create the `bf_editor_mask` library. It passes the source files, include directories, and linked libraries as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mask/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_mask \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Define CMake Function for Python Module Test\nDESCRIPTION: Defines a CMake function `add_blender_as_python_module_test` that creates a test using the provided Python executable and script. It also sets environment variables for AddressSanitizer on macOS.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/blender_as_python_module/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_blender_as_python_module_test testname testscript)\n  if(NOT TEST_PYTHON_EXE)\n    message(FATAL_ERROR \"No Python configured for running tests, set TEST_PYTHON_EXE.\")\n  endif()\n\n  add_test(\n    NAME ${testname}\n    COMMAND ${TEST_PYTHON_EXE} ${TEST_PYTHON_EXE_EXTRA_ARGS} ${testscript} ${ARGN}\n  )\n\n  # On macOS, asan library must be loaded early.\n  if(APPLE AND WITH_COMPILER_ASAN)\n    set_tests_properties(\n      ${testname}\n      PROPERTIES ENVIRONMENT DYLD_INSERT_LIBRARIES=${COMPILER_ASAN_LIBRARY}\n    )\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Headers and Source Files CMake\nDESCRIPTION: These snippets define the header files (`SRC_HD_CYCLES_HEADERS`) and source files (`SRC_HD_CYCLES`) that make up the Cycles Hydra render delegate. These lists are used later to create the `cycles_hydra` library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/hydra/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_HD_CYCLES_HEADERS\n  attribute.h\n  camera.h\n  config.h\n  curves.h\n  field.h\n  file_reader.h\n  geometry.h\n  geometry.inl\n  instancer.h\n  light.h\n  material.h\n  mesh.h\n  node_util.h\n  output_driver.h\n  pointcloud.h\n  render_buffer.h\n  render_delegate.h\n  render_pass.h\n  session.h\n  volume.h\n)\n\nset(SRC_HD_CYCLES\n  attribute.cpp\n  curves.cpp\n  camera.cpp\n  field.cpp\n  file_reader.cpp\n  geometry.cpp\n  instancer.cpp\n  light.cpp\n  material.cpp\n  mesh.cpp\n  node_util.cpp\n  output_driver.cpp\n  pointcloud.cpp\n  render_buffer.cpp\n  render_delegate.cpp\n  render_pass.cpp\n  session.cpp\n  volume.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Linux-specific compiler flags\nDESCRIPTION: This snippet appends Linux-specific compiler flags, including flags for position-independent code (PIC) and visibility. It also adds an RPATH to the shared object.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\nelse() # Add Linux specific compiler flags.\n    list(APPEND sycl_compiler_flags -fPIC)\n    list(APPEND sycl_compiler_flags -fvisibility=hidden)\n\n    # Add $ORIGIN to `cycles_kernel_oneapi.so` RPATH so `libsycl.so` and\n    # `libpi_level_zero.so` can be placed next to it and get found.\n    list(APPEND sycl_compiler_flags -Wl,-rpath,'$$ORIGIN')\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: Adds dependencies to the `bf_editor_curves` target, ensuring that it depends on `bf_rna`. This ensures that the RNA library is built before the curves editor.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/grease_pencil/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(bf_editor_curves bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Adding Headless System Files\nDESCRIPTION: Adds source files specific to the headless system (no display). These files provide null implementations for display and window management.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND SRC\n  intern/GHOST_DisplayManagerNULL.hh\n  intern/GHOST_SystemHeadless.hh\n  intern/GHOST_WindowNULL.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries\nDESCRIPTION: Defines the libraries that are used by the Cycles rendering session. The `LIB` variable lists the names of the libraries. This is used to define the `cycles_session` library that will be built.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/session/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  cycles_device\n  cycles_integrator\n  cycles_util\n)\n```\n\n----------------------------------------\n\nTITLE: Set Test Source Files\nDESCRIPTION: This snippet defines the source files for the unit tests of the Wavefront OBJ I/O module.  It includes tests for the exporter, importer, and MTL parser.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/wavefront_obj/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_SRC\n    tests/obj_exporter_tests.cc\n    tests/obj_importer_tests.cc\n    tests/obj_mtl_parser_tests.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: These CMake commands define the include directories for the ITASC library. The `INC` and `INC_SYS` variables are set but left empty in this snippet, suggesting they will be populated elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/itasc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable 'dimacs-solver' (CMake)\nDESCRIPTION: This snippet creates an executable named 'dimacs-solver' from the source file 'dimacs-solver.cc'. It then links this executable against the 'lemon' library. This allows the executable to use functionality provided by the lemon library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(dimacs-solver dimacs-solver.cc)\nTARGET_LINK_LIBRARIES(dimacs-solver lemon)\n```\n\n----------------------------------------\n\nTITLE: Finding Python Package (ZStandard)\nDESCRIPTION: This snippet attempts to locate the Python 'zstandard' package using `find_python_package`. This is only done on non-Windows and non-Apple platforms and only if `WITH_PYTHON_INSTALL_ZSTANDARD` is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_134\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 OR APPLE)\n    # Always copy from precompiled libs.\n  elseif(WITH_PYTHON_INSTALL_ZSTANDARD)\n    find_python_package(zstandard \"\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions based on Input IME (CMake)\nDESCRIPTION: This snippet conditionally adds a preprocessor definition based on the 'WITH_INPUT_IME' flag. If enabled, '-DWITH_INPUT_IME' is added, which activates Input Method Editor (IME) support within the C++ code.  This enables features related to handling complex text input, especially for languages with non-Latin character sets.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_INPUT_IME)\n  add_definitions(-DWITH_INPUT_IME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Dependency-Specific CMake Modules\nDESCRIPTION: Includes a large number of CMake modules, each responsible for configuring and building a specific dependency, such as SSL, Zlib, Zstd, OpenAL, PNG, JPEG, Blosc, Pthreads, Deflate, Imath, OpenEXR, Brotli, Freetype, Epoxy, Alembic, OpenSubdiv, SDL, OpenCOLLADA, Nasm, Tiff, FlexBison/Flex, TBB, Python, LLVM, OSL, NumPy, Python Site Packages, Package Python, OpenImageIO, USD, MaterialX, OpenVDB, Potrace, Haru, Pugixml, Fribidi, Harfbuzz, XR OpenXR, HIP-RT, DPC++, IGC, GmmLib, Ocloc, ISPC, OpenPGL, Embree, Fmt, Robinmap, XML2, Expat, Pystring, YamlCpp, Minizip-NG, and OpenColorIO.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(cmake/ssl.cmake)\ninclude(cmake/zlib.cmake)\ninclude(cmake/zstd.cmake)\ninclude(cmake/openal.cmake)\ninclude(cmake/png.cmake)\ninclude(cmake/jpeg.cmake)\ninclude(cmake/blosc.cmake)\ninclude(cmake/pthreads.cmake)\ninclude(cmake/deflate.cmake)\ninclude(cmake/imath.cmake)\ninclude(cmake/openexr.cmake)\ninclude(cmake/brotli.cmake)\ninclude(cmake/freetype.cmake)\ninclude(cmake/epoxy.cmake)\ninclude(cmake/alembic.cmake)\ninclude(cmake/opensubdiv.cmake)\ninclude(cmake/sdl.cmake)\ninclude(cmake/opencollada.cmake)\nif(UNIX)\n  include(cmake/nasm.cmake)\nendif()\ninclude(cmake/tiff.cmake)\nif(WIN32)\n  include(cmake/flexbison.cmake)\nelif(UNIX AND NOT APPLE)\n  include(cmake/flex.cmake)\nendif()\ninclude(cmake/tbb.cmake)\ninclude(cmake/python.cmake)\ninclude(cmake/llvm.cmake)\ninclude(cmake/osl.cmake)\ninclude(cmake/numpy.cmake)\ninclude(cmake/python_site_packages.cmake)\ninclude(cmake/package_python.cmake)\ninclude(cmake/openimageio.cmake)\ninclude(cmake/usd.cmake)\ninclude(cmake/materialx.cmake)\ninclude(cmake/openvdb.cmake)\ninclude(cmake/potrace.cmake)\ninclude(cmake/haru.cmake)\ninclude(cmake/pugixml.cmake)\ninclude(cmake/fribidi.cmake)\ninclude(cmake/harfbuzz.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting LEMON Source Files\nDESCRIPTION: This snippet defines the list of source files for the LEMON library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LEMON_SOURCES\n  ${LEMON_SRC}/arg_parser.cc\n  ${LEMON_SRC}/base.cc\n  ${LEMON_SRC}/color.cc\n  ${LEMON_SRC}/lp_base.cc\n  ${LEMON_SRC}/lp_skeleton.cc\n  ${LEMON_SRC}/random.cc\n  ${LEMON_SRC}/bits/windows.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets up include directories for the `bf_draw_shaders` target. The current binary directory (`CMAKE_CURRENT_BINARY_DIR`) is added as a public include directory, meaning that code using `bf_draw_shaders` can include headers from this directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(bf_draw_shaders PUBLIC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: Defines the include directories required for compiling the Alembic I/O library. It includes relative paths within the project and external dependencies such as Alembic and OpenEXR.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/alembic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ../common\n  ../../editors/include\n  ../../makesrna\n  ../../../../intern/utfconv\n)\n```\n\n----------------------------------------\n\nTITLE: Setting FFmpeg Tests - CMake\nDESCRIPTION: Sets up FFmpeg tests using `add_python_test`.  It requires both `WITH_CODEC_FFMPEG` and `TEST_SRC_DIR_EXISTS` to be true. It uses a specific test blender executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG AND TEST_SRC_DIR_EXISTS)\n  add_python_test(\n    ffmpeg\n    ${CMAKE_CURRENT_LIST_DIR}/ffmpeg_tests.py\n    --blender \"${TEST_BLENDER_EXE}\"\n    --testdir \"${TEST_SRC_DIR}/ffmpeg\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Libraries\nDESCRIPTION: This command defines the external libraries that the Cycles utility library depends on. It includes TBB (Threading Building Blocks) and ZSTD libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/util/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  ${TBB_LIBRARIES}\n  ${ZSTD_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library\nDESCRIPTION: This code snippet adds the edit mesh library with the specified source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mesh/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_mesh \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Python Arguments CMake\nDESCRIPTION: Adds extra arguments to the Python executable, specifically `-B` to prevent writing `.pyc` files if the Python installation is managed by Blender in the LIBDIR. This avoids conflicts during updates.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(DEFINED LIBDIR)\n  path_is_prefix(LIBDIR TEST_PYTHON_EXE _is_prefix)\n  if(_is_prefix)\n    # Keep the Python in Blender's SVN LIBDIR pristine, to avoid conflicts on updating.\n    set(TEST_PYTHON_EXE_EXTRA_ARGS \"-B\")\n  endif()\n  unset(_is_prefix)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Headless UI Testing on Linux\nDESCRIPTION: This snippet configures UI testing options for Linux, prioritizing headless testing if `WITH_GHOST_WAYLAND` is enabled.  It defines the `WITH_UI_TESTS_HEADLESS` option and sets a default value based on the presence of `WITH_GHOST_WAYLAND`. If not on Linux, the option is disabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_52\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT (APPLE OR HAIKU))\n  # Headless is preferable as opening windows on the developers computer\n  # prevents the system being used while tests run. It's also unreliable,\n  # where tiling compositors ignore the window size causing some tests to fail.\n  set(_option_default OFF)\n  if(WITH_GHOST_WAYLAND)\n    set(_option_default ON)\n  endif()\n  option(WITH_UI_TESTS_HEADLESS \"\\\nEnable user-interface tests using a headless display server. \\\nCurrently this depends on WITH_GHOST_WAYLAND and the weston compositor \\\n(Experimental)\"\n    ${_option_default}\n  )\n  unset(_option_default)\n\n  option(WITH_LINUX_OFFICIAL_RELEASE_TESTS \"\\\nEnable sanity check tests for the linux official release. \\\nThese test are only relevant for checking that our official Linux releases are portable and \\\npackaged properly. For example that we don't link to any unexpected system libraries.\"\n    OFF\n  )\nelse()\n  set(WITH_UI_TESTS_HEADLESS OFF)\n  # TODO: We should probably add more sanity checks for Windows and Mac as well\n  set(WITH_LINUX_OFFICIAL_RELEASE_TESTS OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries - CMake\nDESCRIPTION: This snippet specifies the libraries that the mask editor module depends on. These libraries are part of the Blender project and provide essential functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mask/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::animrig\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: Adds a preprocessor definition to the compilation process.  -DHAVE_SYS_TIME_H defines the HAVE_SYS_TIME_H macro, which is likely used to conditionally include or exclude code depending on the availability of the sys/time.h header file. This is often used for platform-specific builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xdnd/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(\n  -DHAVE_SYS_TIME_H\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix Definition (CMake)\nDESCRIPTION: Adds a preprocessor definition for the installation prefix if `WITH_INSTALL_PORTABLE` is not enabled. It defines `PREFIX` as the `CMAKE_INSTALL_PREFIX`. This is used to specify the installation location during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n  if(NOT WITH_INSTALL_PORTABLE)\n    add_definitions(-DPREFIX=\"${CMAKE_INSTALL_PREFIX}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Installing Python Include File\nDESCRIPTION: This CMake code installs the `pyconfig.h` file from the Python include directory to the installation destination. It extracts a suffix from the Python include directory name to determine the correct subdirectory for installation. It ensures that the required header file is installed with the Blender build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\n      # Needed for `distutils/pip`.\n      # Get the last part of the include dir, will be `python{version}{abiflag}`.\n      get_filename_component(_py_inc_suffix ${PYTHON_INCLUDE_DIR} NAME)\n      install(\n        FILES ${PYTHON_INCLUDE_DIR}/pyconfig.h\n        DESTINATION ${TARGETDIR_VER}/python/include/${_py_inc_suffix}\n      )\n      unset(_py_inc_suffix)\n```\n\n----------------------------------------\n\nTITLE: Conditional Unit Tests\nDESCRIPTION: Conditionally adds unit tests for the imbuf library. If `WITH_GTESTS` is enabled, it defines a list of test source files, adds a test suite library using `blender_add_test_suite_lib` (likely a custom CMake function), and adds a subdirectory for performance tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/IMB_scaling_test.cc\n    tests/IMB_transform_test.cc\n  )\n  blender_add_test_suite_lib(imbuf \"${TEST_SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n  add_subdirectory(tests/performance)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for `bf_functions`. It depends on `blenlib`, `dna`, and `guardedalloc`, all within the `bf` (Blender Foundation) namespace. These dependencies provide core functionality for memory management and data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/functions/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting STL I/O Tests - CMake\nDESCRIPTION: Configures STL import tests using `add_blender_test_io`. STL files from the specified test directory are imported.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_51\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_STL AND TEST_SRC_DIR_EXISTS)\n  add_blender_test_io(\n    io_stl_import\n    --python ${CMAKE_CURRENT_LIST_DIR}/io_stl_import_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/io_tests/stl\"\n    --outdir \"${TEST_OUT_DIR}/io_stl\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Subclassing KX_GameObject\nDESCRIPTION: This code demonstrates how to subclass the KX_GameObject class to extend its functionality. It defines a CustomGameObject class with a custom update method that modifies the object's world position. It also shows how to use a logic brick controller to mutate an existing object into the custom class and update its logic every frame.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.KX_GameObject.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport bge\n\nclass CustomGameObject(bge.types.KX_GameObject):\n    RATE = 0.05\n\n    def __init__(self, old_owner):\n        # \"old_owner\" can just be ignored. At this point, \"self\" is\n        # already the object in the scene, and \"old_owner\" has been\n        # destroyed.\n\n        # New attributes can be defined - but we could also use a game\n        # property, like \"self['rate']\".\n        self.rate = CustomGameObject.RATE\n\n    def update(self):\n        self.worldPosition.z += self.rate\n\n        # switch direction\n        if self.worldPosition.z > 1.0:\n            self.rate = -CustomGameObject.RATE\n        elif self.worldPosition.z < 0.0:\n            self.rate = CustomGameObject.RATE\n\n# Called first\ndef mutate(cont):\n    old_object = cont.owner\n    mutated_object = CustomGameObject(cont.owner)\n\n    # After calling the constructor above, references to the old object\n    # should not be used.\n    assert(old_object is not mutated_object)\n    assert(old_object.invalid)\n    assert(mutated_object is cont.owner)\n\n# Called later - note we are now working with the mutated object.\ndef update(cont):\n    cont.owner.update()\n```\n\n----------------------------------------\n\nTITLE: Setting GLSL Vertex Shader Sources - CMake\nDESCRIPTION: Defines a list of GLSL vertex shader source files used for overlay effects. These shaders are responsible for processing vertex data and are compiled as part of the rendering pipeline.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/overlay/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_GLSL_VERT\n  overlay_armature_dof_vert.glsl\n  overlay_armature_envelope_outline_vert.glsl\n  overlay_armature_envelope_solid_vert.glsl\n  overlay_armature_shape_outline_vert.glsl\n  overlay_armature_shape_solid_vert.glsl\n  overlay_armature_shape_wire_vert.glsl\n  overlay_armature_sphere_outline_vert.glsl\n  overlay_armature_sphere_solid_vert.glsl\n  overlay_armature_stick_vert.glsl\n  overlay_armature_wire_vert.glsl\n  overlay_clipbound_vert.glsl\n  overlay_depth_only_curves_vert.glsl\n  overlay_depth_only_gpencil_vert.glsl\n  overlay_depth_only_mesh_conservative_vert.glsl\n  overlay_depth_only_pointcloud_vert.glsl\n  overlay_depth_only_vert.glsl\n  overlay_edit_curve_handle_vert.glsl\n  overlay_edit_curve_normals_vert.glsl\n  overlay_edit_curve_point_vert.glsl\n  overlay_edit_curve_wire_vert.glsl\n  overlay_edit_curves_handle_vert.glsl\n  overlay_edit_gpencil_canvas_vert.glsl\n  overlay_edit_lattice_point_vert.glsl\n  overlay_edit_lattice_wire_vert.glsl\n  overlay_edit_pointcloud_vert.glsl\n  overlay_edit_mesh_analysis_vert.glsl\n  overlay_edit_mesh_depth_vert.glsl\n  overlay_edit_mesh_edge_vert.glsl\n  overlay_edit_mesh_facedot_vert.glsl\n  overlay_edit_mesh_normal_vert.glsl\n  overlay_edit_mesh_skin_root_vert.glsl\n  overlay_edit_mesh_vert.glsl\n  overlay_edit_particle_point_vert.glsl\n  overlay_edit_particle_strand_vert.glsl\n  overlay_edit_uv_edges_vert.glsl\n  overlay_edit_uv_face_dots_vert.glsl\n  overlay_edit_uv_faces_vert.glsl\n  overlay_edit_uv_image_vert.glsl\n  overlay_edit_uv_stretching_vert.glsl\n  overlay_edit_uv_tiled_image_borders_vert.glsl\n  overlay_edit_uv_verts_vert.glsl\n  overlay_extra_groundline_vert.glsl\n  overlay_extra_lightprobe_grid_vert.glsl\n  overlay_extra_loose_point_vert.glsl\n  overlay_extra_point_vert.glsl\n  overlay_extra_vert.glsl\n  overlay_extra_wire_vert.glsl\n  overlay_facing_vert.glsl\n  overlay_grid_vert.glsl\n  overlay_image_vert.glsl\n  overlay_motion_path_line_vert.glsl\n  overlay_motion_path_point_vert.glsl\n  overlay_outline_prepass_curves_vert.glsl\n  overlay_outline_prepass_gpencil_vert.glsl\n  overlay_outline_prepass_pointcloud_vert.glsl\n  overlay_outline_prepass_vert.glsl\n  overlay_outline_prepass_wire_vert.glsl\n  overlay_paint_face_vert.glsl\n  overlay_paint_point_vert.glsl\n  overlay_paint_texture_vert.glsl\n  overlay_paint_weight_vert.glsl\n  overlay_paint_wire_vert.glsl\n  overlay_particle_hair_vert.glsl\n  overlay_particle_shape_vert.glsl\n  overlay_particle_vert.glsl\n  overlay_sculpt_curves_cage_vert.glsl\n  overlay_sculpt_curves_selection_vert.glsl\n  overlay_sculpt_mask_vert.glsl\n  overlay_viewer_attribute_curve_vert.glsl\n  overlay_viewer_attribute_curves_vert.glsl\n  overlay_viewer_attribute_mesh_vert.glsl\n  overlay_viewer_attribute_pointcloud_vert.glsl\n  overlay_volume_gridlines_vert.glsl\n  overlay_volume_velocity_vert.glsl\n  overlay_wireframe_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation based on WITH_BLENDER\nDESCRIPTION: This snippet conditionally includes a block of code only if the `WITH_BLENDER` variable is enabled. If it is, it potentially adds the `-DWITH_INPUT_NDOF` definition based on `WITH_INPUT_NDOF`, and then adds subdirectories for various blender modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER)\n  if(WITH_INPUT_NDOF)\n    add_definitions(-DWITH_INPUT_NDOF)\n  endif()\n\n  add_subdirectory(animation)\n  add_subdirectory(armature)\n  add_subdirectory(asset)\n  add_subdirectory(curve)\n  add_subdirectory(curves)\n  add_subdirectory(geometry)\n  add_subdirectory(gizmo_library)\n  add_subdirectory(gpencil_legacy)\n  add_subdirectory(grease_pencil)\n  add_subdirectory(id_management)\n  add_subdirectory(interface)\n  add_subdirectory(io)\n  add_subdirectory(lattice)\n  add_subdirectory(mask)\n  add_subdirectory(mesh)\n  add_subdirectory(metaball)\n  add_subdirectory(object)\n  add_subdirectory(physics)\n  add_subdirectory(pointcloud)\n  add_subdirectory(render)\n  add_subdirectory(scene)\n  add_subdirectory(sculpt_paint)\n  add_subdirectory(sound)\n  add_subdirectory(space_action)\n  add_subdirectory(space_api)\n  add_subdirectory(space_buttons)\n  add_subdirectory(space_clip)\n  add_subdirectory(space_console)\n  add_subdirectory(space_file)\n  add_subdirectory(space_graph)\n  add_subdirectory(space_image)\n  add_subdirectory(space_info)\n  add_subdirectory(space_logic)\n  add_subdirectory(space_nla)\n  add_subdirectory(space_node)\n  add_subdirectory(space_outliner)\n  add_subdirectory(space_script)\n  add_subdirectory(space_sequencer)\n  add_subdirectory(space_spreadsheet)\n  add_subdirectory(space_statusbar)\n  add_subdirectory(space_text)\n  add_subdirectory(space_topbar)\n  add_subdirectory(space_userpref)\n  add_subdirectory(space_view3d)\n  add_subdirectory(transform)\n  add_subdirectory(undo)\n  add_subdirectory(util)\n  add_subdirectory(uvedit)\n  add_subdirectory(screen)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (PUBLIC)\nDESCRIPTION: This snippet defines the public include directories for the module. The current directory (.) is added as a public include directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/movie/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Theora Source Files - Common\nDESCRIPTION: This snippet defines a list of source files that make up the common part of the Theora library.  These files contain core functionalities shared by both the encoder and decoder.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBTHEORA_COMMON\n  \"lib/apiwrapper.c\"\n  \"lib/bitpack.c\"\n  \"lib/dequant.c\"\n  \"lib/fragment.c\"\n  \"lib/idct.c\"\n  \"lib/info.c\"\n  \"lib/internal.c\"\n  \"lib/state.c\"\n  \"lib/quant.c\"\n\n  \"lib/x86_vc/mmxfrag.c\"\n  \"lib/x86_vc/mmxidct.c\"\n  \"lib/x86_vc/mmxstate.c\"\n  \"lib/x86_vc/x86state.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory\nDESCRIPTION: Adds the 'movie' subdirectory to the build process. This likely contains code related to movie playback or video processing.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(movie)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: This snippet sets the include directories required for compiling the clip editor space library. It includes relative paths to local include directories, the makesrna directory, and a generated header file.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_clip/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional LibMV/GFlags/GLog Inclusion with CMake\nDESCRIPTION: Conditionally includes libraries based on feature flags. If `WITH_LIBMV`, `WITH_GTESTS` or `WITH_CYCLES` and `WITH_CYCLES_LOGGING` are set, `gflags` (if not system version) and `glog` are added as subdirectories. `gflags` is only added if a system version isn't specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_LIBMV)\n  add_subdirectory(ceres)\nendif()\n\nif(WITH_LIBMV OR WITH_GTESTS OR (WITH_CYCLES AND WITH_CYCLES_LOGGING))\n  if(NOT WITH_SYSTEM_GFLAGS)\n    add_subdirectory(gflags)\n  endif()\n  add_subdirectory(glog)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set source files and headers\nDESCRIPTION: This snippet defines the source files and header files for the guardedalloc library.  These files contain the implementation of the library's memory management functions and data structures.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/guardedalloc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ./intern/leak_detector.cc\n  ./intern/mallocn.cc\n  ./intern/mallocn_guarded_impl.cc\n  ./intern/mallocn_lockfree_impl.cc\n  ./intern/memory_usage.cc\n\n  MEM_guardedalloc.h\n  ./intern/mallocn_inline.hh\n  ./intern/mallocn_intern.hh\n  ./intern/mallocn_intern_function_pointers.hh\n\n  # only so the header is known by cmake\n  ../atomic/atomic_ops.h\n  ../atomic/intern/atomic_ops_ext.h\n  ../atomic/intern/atomic_ops_msvc.h\n  ../atomic/intern/atomic_ops_unix.h\n  ../atomic/intern/atomic_ops_utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the fmtlib Library in CMake\nDESCRIPTION: This snippet utilizes the `blender_add_lib` macro to create the `extern_fmtlib` library. It passes the source files, include directories and other required parameters for building the library. The macro abstracts the underlying CMake commands required to create a library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_fmtlib \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding xxHash library using blender_add_lib - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create a library named `extern_xxhash` using the source files, include directories, and library dependencies defined earlier. This macro is likely a custom function defined in the UPBGE project's CMake infrastructure. It creates the library with the specified source files and include paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xxhash/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(extern_xxhash \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the OCIO module, including the current directory, internal GPU headers, and system include directories. It uses the `set` command to define CMake variables.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opencolorio/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../source/blender/gpu/intern\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Clang on Linux\nDESCRIPTION: This snippet sets compiler flags specifically for Clang on Unix-like systems (excluding macOS). It checks if the C compiler is Clang and if the LIBDIR variable is defined. If both conditions are met, it adds the '-DARCH_HAS_GNU_STL_EXTENSIONS' definition to ensure ABI compatibility with GCC-compiled libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    if(DEFINED LIBDIR)\n      add_definitions(-DARCH_HAS_GNU_STL_EXTENSIONS)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional source file inclusion (Windows)\nDESCRIPTION: This snippet conditionally includes a Windows-specific source file ('intern/blf_font_win32_compat.cc') when the target platform is Windows (WIN32). This allows for platform-specific code to be incorporated during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenfont/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  list(APPEND SRC\n    intern/blf_font_win32_compat.cc\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Specifies the source files that make up the Render module. These '.cc' and '.hh' files contain the C++ code that implements the module's functionality. These sources are compiled and linked to create the bf_render library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/bake.cc\n  intern/compositor.cc\n  intern/engine.cc\n  intern/initrender.cc\n  intern/multires_bake.cc\n  intern/pipeline.cc\n  intern/render_result.cc\n  intern/render_types.cc\n  intern/texture_image.cc\n  intern/texture_margin.cc\n  intern/texture_pointdensity.cc\n  intern/texture_procedural.cc\n  intern/tile_highlight.cc\n  intern/zbuf.cc\n\n  RE_bake.h\n  RE_compositor.hh\n  RE_engine.h\n  RE_multires_bake.h\n  RE_pipeline.h\n  RE_texture.h\n  RE_texture_margin.h\n\n  intern/pipeline.hh\n  intern/render_result.h\n  intern/render_types.h\n  intern/texture_common.h\n  intern/tile_highlight.h\n  intern/zbuf.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Executable 'lgf-gen' (CMake)\nDESCRIPTION: This snippet creates an executable named 'lgf-gen' from the source file 'lgf-gen.cc'. It then links this executable against the 'lemon' library. This allows the executable to use functionality provided by the lemon library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nADD_EXECUTABLE(lgf-gen lgf-gen.cc)\nTARGET_LINK_LIBRARIES(lgf-gen lemon)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet defines the private library dependencies required by the console editor space library. It lists several Blender-specific libraries, including blenfont, blenkernel, blenlib, blenloader, dna, gpu, guardedalloc, and windowmanager.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_console/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenfont\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::dna\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Creating the Library\nDESCRIPTION: Uses the `blender_add_lib` CMake function to create the `bf_editor_transform` library.  It passes the source files, include directories, and library dependencies defined in the previous `set` commands. This command effectively compiles the C++ code and links it into a library for use within Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/transform/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_transform \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Add URI Conversion Library\nDESCRIPTION: Adds and configures the 'bf_intern_uriconvert' library using the `blender_add_lib` function. This function takes the library name, source files, include directories (internal and system), and library dependencies as arguments.  It creates the library build target.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/uriconvert/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_uriconvert \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files that make up the ge_scenegraph library. It lists both the .cpp and .h files that are compiled and linked into the library. These files contain the implementation of various scene graph components like bounding boxes, controllers, and nodes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/SceneGraph/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  SG_BBox.cpp\n  SG_Controller.cpp\n  SG_CullingNode.cpp\n  SG_Familly.cpp\n  SG_Frustum.cpp\n  SG_Node.cpp\n\n  SG_BBox.h\n  SG_Controller.h\n  SG_CullingNode.h\n  SG_DList.h\n  SG_Familly.h\n  SG_Frustum.h\n  SG_Node.h\n  SG_ParentRelation.h\n  SG_QList.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Fragment Shader Sources\nDESCRIPTION: Lists the GLSL files used as fragment shaders for the workbench. Each file listed here defines the fragment processing stage (pixel shading) for a specific rendering effect or feature within the workbench.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_FRAG\n  workbench_composite_frag.glsl\n  workbench_effect_dof_prepare_frag.glsl\n  workbench_effect_dof_downsample_frag.glsl\n  workbench_effect_dof_blur1_frag.glsl\n  workbench_effect_dof_blur2_frag.glsl\n  workbench_effect_dof_resolve_frag.glsl\n  workbench_effect_outline_frag.glsl\n  workbench_effect_smaa_frag.glsl\n  workbench_effect_taa_frag.glsl\n  workbench_merge_depth_frag.glsl\n  workbench_overlay_depth_frag.glsl\n  workbench_prepass_frag.glsl\n  workbench_shadow_debug_frag.glsl\n  workbench_transparent_accum_frag.glsl\n  workbench_transparent_resolve_frag.glsl\n  workbench_volume_frag.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Source Files for Bullet Physics\nDESCRIPTION: This section lists all the source files (.cpp) that are part of the Bullet Physics Library. It defines the `SRC` variable, which contains the paths to all the source files needed to build the library's various modules, including collision detection, dynamics, soft body physics, and linear algebra. These paths are relative to the project's root directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  src/BulletCollision/BroadphaseCollision/btAxisSweep3.cpp\n  src/BulletCollision/BroadphaseCollision/btBroadphaseProxy.cpp\n  src/BulletCollision/BroadphaseCollision/btCollisionAlgorithm.cpp\n  src/BulletCollision/BroadphaseCollision/btDbvt.cpp\n  src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.cpp\n  src/BulletCollision/BroadphaseCollision/btDispatcher.cpp\n  src/BulletCollision/BroadphaseCollision/btOverlappingPairCache.cpp\n  src/BulletCollision/BroadphaseCollision/btQuantizedBvh.cpp\n  src/BulletCollision/BroadphaseCollision/btSimpleBroadphase.cpp\n  src/BulletCollision/CollisionDispatch/SphereTriangleDetector.cpp\n  src/BulletCollision/CollisionDispatch/btActivatingCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btBox2dBox2dCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btBoxBoxCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btBoxBoxDetector.cpp\n  src/BulletCollision/CollisionDispatch/btCollisionDispatcher.cpp\n  src/BulletCollision/CollisionDispatch/btCollisionObject.cpp\n  src/BulletCollision/CollisionDispatch/btCollisionWorld.cpp\n  src/BulletCollision/CollisionDispatch/btCollisionWorldImporter.cpp\n  src/BulletCollision/CollisionDispatch/btCompoundCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btCompoundCompoundCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btConvex2dConvex2dAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btConvexConcaveCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btConvexConvexAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btConvexPlaneCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btDefaultCollisionConfiguration.cpp\n  src/BulletCollision/CollisionDispatch/btEmptyCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btGhostObject.cpp\n  src/BulletCollision/CollisionDispatch/btHashedSimplePairCache.cpp\n  src/BulletCollision/CollisionDispatch/btInternalEdgeUtility.cpp\n  src/BulletCollision/CollisionDispatch/btManifoldResult.cpp\n  src/BulletCollision/CollisionDispatch/btSimulationIslandManager.cpp\n  src/BulletCollision/CollisionDispatch/btSphereBoxCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btSphereSphereCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btSphereTriangleCollisionAlgorithm.cpp\n  src/BulletCollision/CollisionDispatch/btUnionFind.cpp\n  src/BulletCollision/CollisionShapes/btBox2dShape.cpp\n  src/BulletCollision/CollisionShapes/btBoxShape.cpp\n  src/BulletCollision/CollisionShapes/btBvhTriangleMeshShape.cpp\n  src/BulletCollision/CollisionShapes/btCapsuleShape.cpp\n  src/BulletCollision/CollisionShapes/btCollisionShape.cpp\n  src/BulletCollision/CollisionShapes/btCompoundShape.cpp\n  src/BulletCollision/CollisionShapes/btConcaveShape.cpp\n  src/BulletCollision/CollisionShapes/btConeShape.cpp\n  src/BulletCollision/CollisionShapes/btConvex2dShape.cpp\n  src/BulletCollision/CollisionShapes/btConvexHullShape.cpp\n  src/BulletCollision/CollisionShapes/btConvexInternalShape.cpp\n  src/BulletCollision/CollisionShapes/btConvexPointCloudShape.cpp\n  src/BulletCollision/CollisionShapes/btConvexPolyhedron.cpp\n  src/BulletCollision/CollisionShapes/btConvexShape.cpp\n  src/BulletCollision/CollisionShapes/btConvexTriangleMeshShape.cpp\n  src/BulletCollision/CollisionShapes/btCylinderShape.cpp\n  src/BulletCollision/CollisionShapes/btEmptyShape.cpp\n  src/BulletCollision/CollisionShapes/btHeightfieldTerrainShape.cpp\n  src/BulletCollision/CollisionShapes/btMiniSDF.cpp\n  src/BulletCollision/CollisionShapes/btMinkowskiSumShape.cpp\n  src/BulletCollision/CollisionShapes/btMultiSphereShape.cpp\n  src/BulletCollision/CollisionShapes/btMultimaterialTriangleMeshShape.cpp\n  src/BulletCollision/CollisionShapes/btOptimizedBvh.cpp\n  src/BulletCollision/CollisionShapes/btPolyhedralConvexShape.cpp\n  src/BulletCollision/CollisionShapes/btScaledBvhTriangleMeshShape.cpp\n  src/BulletCollision/CollisionShapes/btSdfCollisionShape.cpp\n  src/BulletCollision/CollisionShapes/btShapeHull.cpp\n  src/BulletCollision/CollisionShapes/btSphereShape.cpp\n  src/BulletCollision/CollisionShapes/btStaticPlaneShape.cpp\n  src/BulletCollision/CollisionShapes/btStridingMeshInterface.cpp\n  src/BulletCollision/CollisionShapes/btTetrahedronShape.cpp\n  src/BulletCollision/CollisionShapes/btTriangleBuffer.cpp\n  src/BulletCollision/CollisionShapes/btTriangleCallback.cpp\n  src/BulletCollision/CollisionShapes/btTriangleIndexVertexArray.cpp\n  src/BulletCollision/CollisionShapes/btTriangleIndexVertexMaterialArray.cpp\n  src/BulletCollision/CollisionShapes/btTriangleMesh.cpp\n  src/BulletCollision/CollisionShapes/btTriangleMeshShape.cpp\n  src/BulletCollision/CollisionShapes/btUniformScalingShape.cpp\n  src/BulletCollision/Gimpact/btContactProcessing.cpp\n  src/BulletCollision/Gimpact/btGImpactBvh.cpp\n  src/BulletCollision/Gimpact/btGImpactCollisionAlgorithm.cpp\n  src/BulletCollision/Gimpact/btGImpactQuantizedBvh.cpp\n  src/BulletCollision/Gimpact/btGImpactShape.cpp\n  src/BulletCollision/Gimpact/btGenericPoolAllocator.cpp\n  src/BulletCollision/Gimpact/btTriangleShapeEx.cpp\n  src/BulletCollision/Gimpact/gim_box_set.cpp\n  src/BulletCollision/Gimpact/gim_contact.cpp\n  src/BulletCollision/Gimpact/gim_memory.cpp\n  src/BulletCollision/Gimpact/gim_tri_collision.cpp\n  src/BulletCollision/NarrowPhaseCollision/btContinuousConvexCollision.cpp\n  src/BulletCollision/NarrowPhaseCollision/btConvexCast.cpp\n  src/BulletCollision/NarrowPhaseCollision/btGjkConvexCast.cpp\n  src/BulletCollision/NarrowPhaseCollision/btGjkEpa2.cpp\n  src/BulletCollision/NarrowPhaseCollision/btGjkEpaPenetrationDepthSolver.cpp\n  src/BulletCollision/NarrowPhaseCollision/btGjkPairDetector.cpp\n  src/BulletCollision/NarrowPhaseCollision/btMinkowskiPenetrationDepthSolver.cpp\n  src/BulletCollision/NarrowPhaseCollision/btPersistentManifold.cpp\n  src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n  src/BulletCollision/NarrowPhaseCollision/btRaycastCallback.cpp\n  src/BulletCollision/NarrowPhaseCollision/btSubSimplexConvexCast.cpp\n  src/BulletCollision/NarrowPhaseCollision/btVoronoiSimplexSolver.cpp\n\n  src/BulletDynamics/Character/btKinematicCharacterController.cpp\n  src/BulletDynamics/ConstraintSolver/btConeTwistConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btContactConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btFixedConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btGearConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btGeneric6DofConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btGeneric6DofSpring2Constraint.cpp\n  src/BulletDynamics/ConstraintSolver/btGeneric6DofSpringConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btHinge2Constraint.cpp\n  src/BulletDynamics/ConstraintSolver/btHingeConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btNNCGConstraintSolver.cpp\n  src/BulletDynamics/ConstraintSolver/btPoint2PointConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btSequentialImpulseConstraintSolver.cpp\n  src/BulletDynamics/ConstraintSolver/btSliderConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btSolve2LinearConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btTypedConstraint.cpp\n  src/BulletDynamics/ConstraintSolver/btUniversalConstraint.cpp\n  src/BulletDynamics/Dynamics/btDiscreteDynamicsWorld.cpp\n  src/BulletDynamics/Dynamics/btRigidBody.cpp\n  src/BulletDynamics/Dynamics/btSimpleDynamicsWorld.cpp\n  src/BulletDynamics/Featherstone/btMultiBody.cpp\n  src/BulletDynamics/Featherstone/btMultiBodyConstraint.cpp\n  src/BulletDynamics/Featherstone/btMultiBodyConstraintSolver.cpp\n  src/BulletDynamics/Featherstone/btMultiBodyDynamicsWorld.cpp\n  src/BulletDynamics/Featherstone/btMultiBodyJointLimitConstraint.cpp\n  src/BulletDynamics/Featherstone/btMultiBodyJointMotor.cpp\n  src/BulletDynamics/Featherstone/btMultiBodyPoint2Point.cpp\n  src/BulletDynamics/MLCPSolvers/btDantzigLCP.cpp\n  src/BulletDynamics/MLCPSolvers/btLemkeAlgorithm.cpp\n  src/BulletDynamics/MLCPSolvers/btMLCPSolver.cpp\n  src/BulletDynamics/Vehicle/btRaycastVehicle.cpp\n  src/BulletDynamics/Vehicle/btWheelInfo.cpp\n\n  src/BulletSoftBody/btDefaultSoftBodySolver.cpp\n  src/BulletSoftBody/btSoftBody.cpp\n  src/BulletSoftBody/btSoftBodyConcaveCollisionAlgorithm.cpp\n  src/BulletSoftBody/btSoftBodyHelpers.cpp\n  src/BulletSoftBody/btSoftBodyRigidBodyCollisionConfiguration.cpp\n  src/BulletSoftBody/btSoftRigidCollisionAlgorithm.cpp\n  src/BulletSoftBody/btSoftRigidDynamicsWorld.cpp\n  src/BulletSoftBody/btSoftSoftCollisionAlgorithm.cpp\n  src/BulletSoftBody/poly34.cpp\n\n  src/LinearMath/btAlignedAllocator.cpp\n  src/LinearMath/btConvexHull.cpp\n  src/LinearMath/btConvexHullComputer.cpp\n  src/LinearMath/btGeometryUtil.cpp\n  src/LinearMath/btPolarDecomposition.cpp\n  src/LinearMath/btQuickprof.cpp\n  src/LinearMath/btSerializer.cpp\n  src/LinearMath/btSerializer64.cpp\n  src/LinearMath/btVector3.cpp\n\n  src/BulletCollision/BroadphaseCollision/btAxisSweep3.h\n  src/BulletCollision/BroadphaseCollision/btBroadphaseInterface.h\n  src/BulletCollision/BroadphaseCollision/btBroadphaseProxy.h\n  src/BulletCollision/BroadphaseCollision/btCollisionAlgorithm.h\n  src/BulletCollision/BroadphaseCollision/btDbvt.h\n  src/BulletCollision/BroadphaseCollision/btDbvtBroadphase.h\n  src/BulletCollision/BroadphaseCollision/btDispatcher.h\n  src/BulletCollision/BroadphaseCollision/btOverlappingPairCache.h\n  src/BulletCollision/BroadphaseCollision/btOverlappingPairCallback.h\n  src/BulletCollision/BroadphaseCollision/btQuantizedBvh.h\n  src/BulletCollision/BroadphaseCollision/btSimpleBroadphase.h\n  src/BulletCollision/CollisionDispatch/SphereTriangleDetector.h\n  src/BulletCollision/CollisionDispatch/btActivatingCollisionAlgorithm.h\n  src/BulletCollision/CollisionDispatch/btBox2dBox2dCollisionAlgorithm.h\n  src/BulletCollision/CollisionDispatch/btBoxBoxCollisionAlgorithm.h\n  src/BulletCollision/CollisionDispatch/btBoxBoxDetector.h\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This CMake snippet invokes the `blender_target_include_dirs` macro to set the include directories for the `blenderplayer` target. The directories to be included are specified in the `INC` variable, presumably containing paths to necessary header files. This step is crucial for ensuring that the compiler can find the required header files during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nblender_target_include_dirs(blenderplayer ${INC})\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables (Batch)\nDESCRIPTION: This snippet defines environment variables required for the build process. These variables specify paths for CMake, Perl, temporary directories, and ROCm. The script also modifies the PATH environment variable to include the Perl executable directory. Note that the paths are hardcoded and may require adjustment depending on the local environment.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/windows/vmbuild.cmd.txt#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nset CMAKE_GENERATOR_INSTANCE=c:\\vs2019bt\\\nset CMAKE_GENERATOR=Visual Studio 16 2019\nset NODEBUG=\nset TMPDIR=c:\\t\\\nset ROCM_PATH=c:\\tools\\rocm\\5.7\nset HIP_PATH=c:\\tools\\rocm\\5.7\nset PERL=c:\\db\\build\\downloads\\perl\\perl\\bin\\perl.exe\nset path=%path%;c:\\db\\build\\downloads\\perl\\perl\\bin\\;\n```\n\n----------------------------------------\n\nTITLE: Converting Relative File Paths to Absolute Paths with bpy.path.abspath\nDESCRIPTION: This snippet demonstrates how to convert Blender's relative file paths to absolute paths using `bpy.path.abspath`.  It accounts for linked library scenarios by optionally passing the `library` argument from the :class:`bpy.types.ID`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_file_paths_and_encoding.rst#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> bpy.path.abspath(image.filepath)\n\n>>> bpy.path.abspath(image.filepath, library=image.library)\n```\n\n----------------------------------------\n\nTITLE: Copy NumPy on Python Install\nDESCRIPTION: This option, conditional on `WITH_PYTHON_INSTALL`, allows copying the system's NumPy library into the Blender install directory alongside the Python installation.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_PYTHON_INSTALL)\n  option(WITH_PYTHON_INSTALL_NUMPY \"Copy system NumPy into the blender install directory\" ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating GLSL Source List\nDESCRIPTION: This snippet generates a header file containing macros for including GLSL shader sources. It iterates through `GLSL_SRC`, extracts the filename, replaces dots with underscores, and appends a `SHADER_SOURCE` macro invocation to `GLSL_SOURCE_CONTENT` for each shader.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(GLSL_SOURCE_CONTENT \"\")\n\nforeach(GLSL_FILE ${GLSL_SRC})\n  get_filename_component(GLSL_FILE_NAME ${GLSL_FILE} NAME)\n  string(REPLACE \".\" \"_\" GLSL_FILE_NAME_UNDERSCORES ${GLSL_FILE_NAME})\n  string(APPEND GLSL_SOURCE_CONTENT \"SHADER_SOURCE(datatoc_${GLSL_FILE_NAME_UNDERSCORES}, \\\"${GLSL_FILE_NAME}\\\", \\\"${GLSL_FILE}\\\")\\n\")\nendforeach()\n\nset(glsl_source_list_file \"${CMAKE_CURRENT_BINARY_DIR}/glsl_draw_source_list.h\")\nfile(GENERATE OUTPUT ${glsl_source_list_file} CONTENT \"${GLSL_SOURCE_CONTENT}\")\nlist(APPEND SRC ${glsl_source_list_file})\nlist(APPEND INC ${CMAKE_CURRENT_BINARY_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining Include Directories\nDESCRIPTION: This snippet defines the include directories for the wcwidth library.  '.' represents the current directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/wcwidth/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the source files that make up the bf_editor_screen library. These files are listed by their names.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  area.cc\n  area_query.cc\n  area_utils.cc\n  glutil.cc\n  screen_context.cc\n  screen_draw.cc\n  screen_edit.cc\n  screen_geometry.cc\n  screen_ops.cc\n  screen_user_menu.cc\n  screendump.cc\n  workspace_edit.cc\n  workspace_layout_edit.cc\n  workspace_listen.cc\n\n  screen_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Mod Remesh)\nDESCRIPTION: Conditionally adds the 'dualcon' subdirectory if the WITH_MOD_REMESH flag is enabled. This includes the remeshing module when specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_REMESH)\n  add_subdirectory(dualcon)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the Library\nDESCRIPTION: This snippet calls the blender_add_lib macro to create the ge_videotexture library using the specified source files, include directories, and linked libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_videotexture \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories in CMake\nDESCRIPTION: This snippet defines system include directories. This variable is used to specify system-level include directories required for compilation, though it is currently empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/physics/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: Specifies the source files for the UTF conversion library, including `utfconv.cc` and `utfconv.hh`. It also conditionally includes `utf_winfunc.cc` and `utf_winfunc.hh` if the target platform is Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/utfconv/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  utfconv.cc\n\n  utfconv.hh\n)\n\nset(LIB\n)\n\nif(WIN32)\n  list(APPEND SRC\n    utf_winfunc.cc\n    utf_winfunc.hh\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Header Files\nDESCRIPTION: This snippet defines the header files associated with the source files that comprise the `cycles_integrator` library. These header files declare the interfaces and data structures used by the source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/integrator/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_HEADERS\n  adaptive_sampling.h\n  denoiser.h\n  denoiser_gpu.h\n  denoiser_oidn.h\n  denoiser_oidn_gpu.h\n  denoiser_optix.h\n  guiding.h\n  path_trace.h\n  tile.h\n  pass_accessor.h\n  pass_accessor_cpu.h\n  pass_accessor_gpu.h\n  path_trace_display.h\n  path_trace_tile.h\n  path_trace_work.h\n  path_trace_work_cpu.h\n  path_trace_work_gpu.h\n  render_scheduler.h\n  shader_eval.h\n  work_balancer.h\n  work_tile_scheduler.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library with CMake\nDESCRIPTION: This CMake command adds a library named 'bf_intern_gpudirect'. It specifies source files, include directories, and system include directories for building the library. The ${LIB} variable representing library dependencies is also passed. This library will expose the GPU Direct functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/gpudirect/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_gpudirect \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Library Alias\nDESCRIPTION: This snippet creates an alias for the memory utility library using the `add_library` CMake command. This allows the library to be referenced by its alias (`bf::intern::memutil`) in other parts of the project, providing a more convenient way to link against the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/memutil/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(bf::intern::memutil ALIAS bf_intern_memutil)\n```\n\n----------------------------------------\n\nTITLE: Configuring X11 or Wayland\nDESCRIPTION: Configures the build for either X11 or Wayland windowing systems. If X11 is enabled, it adds include paths, libraries, and source files specific to X11. It includes conditional configuration for OpenGL, XDND, XF86keysym, XF86VMODE, XFIXES, and XINPUT. If Wayland is enabled, it configures include paths, libraries, and generates protocol bindings using wayland-scanner.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(WITH_GHOST_X11 OR WITH_GHOST_WAYLAND)\n  if(WITH_GHOST_X11)\n    list(APPEND INC_SYS\n      ${X11_X11_INCLUDE_PATH}\n    )\n\n    list(APPEND LIB\n      ${X11_X11_LIB}\n      ${X11_Xrender_LIB}\n    )\n\n    list(APPEND SRC\n      intern/GHOST_DisplayManagerX11.cc\n      intern/GHOST_SystemX11.cc\n      intern/GHOST_WindowX11.cc\n\n      intern/GHOST_DisplayManagerX11.hh\n      intern/GHOST_IconX11.hh\n      intern/GHOST_SystemX11.hh\n      intern/GHOST_WindowX11.hh\n    )\n\n    if(WITH_OPENGL_BACKEND)\n      list(APPEND SRC\n        intern/GHOST_ContextGLX.cc\n\n        intern/GHOST_ContextGLX.hh\n      )\n    endif()\n\n    if(WITH_GHOST_XDND)\n      add_definitions(-DWITH_XDND)\n\n      list(APPEND LIB\n        extern_xdnd\n      )\n\n      list(APPEND INC\n        ../../extern/xdnd\n      )\n\n      list(APPEND SRC\n        intern/GHOST_DropTargetX11.cc\n\n        intern/GHOST_DropTargetX11.hh\n      )\n    endif()\n\n    if(X11_XF86keysym_INCLUDE_PATH)\n      add_definitions(-DWITH_XF86KEYSYM)\n      list(APPEND INC_SYS\n        ${X11_XF86keysym_INCLUDE_PATH}\n      )\n    endif()\n\n    if(WITH_X11_XF86VMODE)\n      add_definitions(-DWITH_X11_XF86VMODE)\n      list(APPEND INC_SYS\n        ${X11_Xxf86vm_INCLUDE_PATH}\n      )\n      list(APPEND LIB\n        ${X11_Xxf86vmode_LIB}\n      )\n    endif()\n\n    if(WITH_X11_XFIXES)\n      add_definitions(-DWITH_X11_XFIXES)\n      list(APPEND INC_SYS\n        ${X11_Xfixes_INCLUDE_PATH}\n      )\n      list(APPEND LIB\n        ${X11_Xfixes_LIB}\n      )\n    endif()\n\n    if(WITH_X11_XINPUT)\n      add_definitions(-DWITH_X11_XINPUT)\n      list(APPEND INC_SYS\n        ${X11_Xinput_INCLUDE_PATH}\n      )\n      list(APPEND LIB\n        ${X11_Xinput_LIB}\n      )\n    endif()\n\n    add_definitions(-DWITH_GHOST_X11)\n  endif()\n\n  if(WITH_GHOST_WAYLAND)\n    list(APPEND INC_SYS\n      ${wayland-client_INCLUDE_DIRS}\n      ${wayland-egl_INCLUDE_DIRS}\n      ${xkbcommon_INCLUDE_DIRS}\n      ${wayland-cursor_INCLUDE_DIRS}\n    )\n    list(APPEND LIB\n      ${xkbcommon_LINK_LIBRARIES}\n    )\n\n    if(WITH_GHOST_WAYLAND_DYNLOAD)\n      list(APPEND INC_SYS\n        ../wayland_dynload/extern\n      )\n      list(APPEND LIB\n        bf_intern_wayland_dynload\n      )\n      add_definitions(-DWITH_GHOST_WAYLAND_DYNLOAD)\n    else()\n      list(APPEND LIB\n        ${wayland-client_LINK_LIBRARIES}\n        ${wayland-egl_LINK_LIBRARIES}\n        ${wayland-cursor_LINK_LIBRARIES}\n      )\n    endif()\n\n    if(WITH_GHOST_WAYLAND_LIBDECOR)\n      list(APPEND INC_SYS\n        ${libdecor_INCLUDE_DIRS}\n      )\n      if(NOT WITH_GHOST_WAYLAND_DYNLOAD)\n        list(APPEND LIB\n          ${libdecor_LIBRARIES}\n        )\n      endif()\n    endif()\n\n    include(CheckSymbolExists)\n    set(CMAKE_REQUIRED_DEFINITIONS \"-D_GNU_SOURCE\")\n    check_symbol_exists(memfd_create \"sys/mman.h\" HAVE_MEMFD_CREATE)\n    unset(CMAKE_REQUIRED_DEFINITIONS)\n    if(HAVE_MEMFD_CREATE)\n      add_definitions(-DHAVE_MEMFD_CREATE)\n    endif()\n\n    check_symbol_exists(poll \"poll.h\" HAVE_POLL)\n    if(HAVE_POLL)\n      add_definitions(-DHAVE_POLL)\n    endif()\n\n    if(WITH_GHOST_WAYLAND_LIBDECOR)\n      # See code-comment for `USE_LIBDECOR_CONFIG_COPY_WORKAROUND`.\n      check_symbol_exists(malloc_usable_size \"malloc.h\" HAVE_MALLOC_USABLE_SIZE)\n      if(HAVE_MALLOC_USABLE_SIZE)\n        add_definitions(-DHAVE_MALLOC_USABLE_SIZE)\n      endif()\n    endif()\n\n    list(APPEND SRC\n      intern/GHOST_SystemWayland.cc\n      intern/GHOST_WindowWayland.cc\n\n      intern/GHOST_SystemWayland.hh\n      intern/GHOST_WaylandUtils.hh\n      intern/GHOST_WindowWayland.hh\n    )\n\n    set(INC_DST ${CMAKE_CURRENT_BINARY_DIR}/libwayland)\n\n    # Generate protocols bindings.\n    macro(generate_protocol_bindings PROT_DEF)\n      # File name without directory or extension (use for header name).\n      get_filename_component(_name ${PROT_DEF} NAME_WLE)\n      add_custom_command(\n        OUTPUT ${INC_DST}/${_name}-client-protocol.h\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${INC_DST}\n        COMMAND ${WAYLAND_SCANNER} client-header ${PROT_DEF} ${INC_DST}/${_name}-client-protocol.h\n      )\n      add_custom_command(\n        OUTPUT ${INC_DST}/${_name}-client-protocol.c\n        COMMAND ${CMAKE_COMMAND} -E make_directory ${INC_DST}\n        COMMAND ${WAYLAND_SCANNER} private-code ${PROT_DEF} ${INC_DST}/${_name}-client-protocol.c\n        DEPENDS ${INC_DST}/${_name}-client-protocol.h\n      )\n\n      if(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n        # Prevent warnings/failure to compile with generated `WL_PRIVATE` declarations.\n        set_source_files_properties(\n          \"${INC_DST}/${_name}-client-protocol.c\"\n          PROPERTIES COMPILE_FLAGS \"-Wno-missing-variable-declarations\"\n        )\n      endif()\n\n      list(APPEND SRC\n        ${INC_DST}/${_name}-client-protocol.c\n        ${INC_DST}/${_name}-client-protocol.h\n      )\n      unset(_name)\n    endmacro()\n\n    list(APPEND INC_SYS\n      ${INC_DST}\n    )\n\n    # Used when: LIBDECOR is not needed.\n    # `xdg-shell`.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/stable/xdg-shell/xdg-shell.xml\"\n    )\n    # `xdg-decoration`.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml\"\n    )\n    # End LIBDECOR alternative.\n\n    # `xdg-output`.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/unstable/xdg-output/xdg-output-unstable-v1.xml\"\n    )\n    # `xdg-activation`.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/staging/xdg-activation/xdg-activation-v1.xml\"\n    )\n    # Fractional scale.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/staging/fractional-scale/fractional-scale-v1.xml\"\n    )\n    # Viewport (only required when fractional scale is in use).\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/stable/viewporter/viewporter.xml\"\n    )\n    # Pointer-constraints.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml\"\n    )\n    # Relative-pointer.\n    generate_protocol_bindings(\n      \"${WAYLAND_PROTOCOLS_DIR}/unstable/relative-pointer/relative-pointer-unstable-v1.xml\"\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Removing Strict Compiler Flags with CMake\nDESCRIPTION: Removes strict compiler flags that might cause issues with external projects where these flags cannot be easily adjusted. This is done to avoid warnings that cannot be fixed within the external project's codebase.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nremove_strict_flags()\n```\n\n----------------------------------------\n\nTITLE: Building Thumbnailer Executable (Unix)\nDESCRIPTION: This snippet configures the build process for the blender-thumbnailer executable on Unix-like systems. It defines Unix-specific source files, creates an executable, sets platform-specific linker flags, links bf_blenlib, and links PTHREADS_LIBRARIES if defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blendthumb/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(UNIX)\n  # -----------------------------------------------------------------------------\n  # Build `blender-thumbnailer` executable\n\n  set(SRC_CMD\n    src/blender_thumbnailer.cc\n  )\n\n  add_executable(blender-thumbnailer ${SRC} ${SRC_CMD})\n  setup_platform_linker_flags(blender-thumbnailer)\n  target_link_libraries(blender-thumbnailer bf_blenlib)\n  if(DEFINED PTHREADS_LIBRARIES)\n    target_link_libraries(blender-thumbnailer ${PTHREADS_LIBRARIES})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Type with CMake\nDESCRIPTION: This code determines the library type (shared or static) based on the `SHARED_LIBRARY` variable. It sets `AUD_LIBRARY_TYPE` and `LIBRARY_TYPE` accordingly and adds a preprocessor definition if building a shared library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(SHARED_LIBRARY)\n\tset(AUD_LIBRARY_TYPE AUD_SHARED_LIBRARY)\n\tset(LIBRARY_TYPE SHARED)\n\tadd_definitions(-DAUD_BUILD_SHARED_LIBRARY)\nelse()\n\tset(AUD_LIBRARY_TYPE AUD_STATIC_LIBRARY)\n\tset(LIBRARY_TYPE STATIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Suppressing MSVC Compiler Warnings\nDESCRIPTION: This snippet checks if the compiler is MSVC. If so, it removes the '/W3' flag (which enables level 3 warnings) and adds the '/W0' flag (which disables all warnings). This is done to suppress warnings generated by the Bullet library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  # bullet is responsible for quite a few silly warnings\n  # suppress all of them. Not great, but they really needed\n  # to sort that out themselves.\n  remove_cc_flag(\"/W3\")\n  add_c_flag(\"/W0\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running QuadriFlow with Min-Cost Flow\nDESCRIPTION: This command enables the adaptive network simplex minimum-cost flow solver in QuadriFlow.  It takes an input triangle mesh (`input.obj`) and generates a quad mesh (`output.obj`) with a specified resolution (`-f`). The `-mcf` option activates the min-cost flow algorithm.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -mcf -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Conditional UV_SLIM Configuration\nDESCRIPTION: This snippet conditionally configures the build system if the `WITH_UV_SLIM` option is enabled. It appends include directories and adds preprocessor definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_UV_SLIM)\n  list(APPEND INC\n    ../../../intern/slim\n  )\n  add_definitions(-DWITH_UV_SLIM)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library - CMake\nDESCRIPTION: This command uses the `blender_add_lib` macro to create the `bf_nodes_texture` library.  It takes the source files, include directories, and libraries defined earlier as input to configure the build process. The `blender_add_lib` is a custom cmake macro used within the blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/texture/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_nodes_texture \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Running QuadriFlow\nDESCRIPTION: This command executes the QuadriFlow software to convert an input triangle mesh (`input.obj`) to a quad mesh (`output.obj`). The `-f` option specifies the desired number of faces in the output quad mesh, controlling the resolution.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Setting Error Log File (Python)\nDESCRIPTION: Sets the filename for logging VideoTexture module-specific runtime errors. Ordinary runtime errors are not included in this log file. Returns -1 if the filename parameter is invalid (not a string), and 0 otherwise.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\nsetLogFile(filename)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0135\nDESCRIPTION: Sets the CMake policy CMP0135 to NEW. This policy controls whether the date/time for extracted files is set to the time of extraction, and is relevant for CMake versions 3.24 and later.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0135)\n  cmake_policy(SET CMP0135 NEW) # CMake 3.24+ Set the date/time for extracted files to time of extraction\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Library CMake\nDESCRIPTION: This snippet links the io_common library using `target_link_libraries` command. The INTERFACE keyword signifies that any target linking to `bf_io_common` will inherit its include directories and compile definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/common/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(bf_io_common INTERFACE)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet defines any library dependencies for the wcwidth library.  In this case, no external libraries are listed as dependencies, resulting in an empty set.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/wcwidth/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Blenloader Tests - CMake\nDESCRIPTION: This snippet configures the test suite for the `blenloader` library, conditional on `WITH_GTESTS` being enabled. It defines source files, include directories, and library dependencies for the test utilities and the actual tests, and then uses `blender_add_lib` and `blender_add_test_suite_lib` to create the necessary targets.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenloader/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  # Utility functions for test also used by other tests.\n  set(TEST_UTIL_SRC\n    tests/blendfile_loading_base_test.cc\n    tests/blendfile_loading_base_test.h\n  )\n  set(TEST_UTIL_INC\n    ${INC}\n    ../../../tests/gtests\n    ../../../intern/ghost\n  )\n  set(TEST_UTIL_INC_SYS\n    ${INC_SYS}\n    ${GFLAGS_INCLUDE_DIRS}\n    ${GLOG_INCLUDE_DIRS}\n    ${CMAKE_SOURCE_DIR}/extern/gtest/include\n  )\n  set(TEST_UTIL_LIB\n    ${LIB}\n    PRIVATE bf::blenfont\n    bf_blenloader\n  )\n  blender_add_lib(bf_blenloader_test_util \"${TEST_UTIL_SRC}\" \"${TEST_UTIL_INC}\" \"${TEST_UTIL_INC_SYS}\" \"${TEST_UTIL_LIB}\")\n\n  # Actual `blenloader` tests.\n  set(TEST_SRC\n    tests/blendfile_load_test.cc\n  )\n  set(TEST_LIB\n    ${LIB}\n    bf_blenloader\n    bf_blenloader_test_util\n  )\n  blender_add_test_suite_lib(blenloader \"${TEST_SRC}\" \"${INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding the Alembic I/O Library - CMake\nDESCRIPTION: Uses the `blender_add_lib` function to create the `bf_io_alembic` library, specifying the source files, include directories, system include directories, and dependent libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/alembic/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_io_alembic \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining HIPRT Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines the HIPRT kernel source file. It specifies the HIPRT implementation of the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_HIPRT\n  device/hiprt/kernel.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Armature Editor Library\nDESCRIPTION: Adds the armature editor library using the `blender_add_lib` function. This function likely handles the creation of the library target and links the specified source files, include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/armature/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_armature \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories needed for compiling the shader effects library. It includes local directories within the project as well as external directories such as Eigen and the directory containing generated RNA prototypes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/shader_fx/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  intern\n  ../editors/include\n  ../makesrna\n  ../../../intern/eigen\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Shader C List\nDESCRIPTION: This snippet creates a unified `SHADER_C` list by appending the compiled GLSL and MSL C code. The MSL C code is only added if the Metal backend is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(SHADER_C)\nlist(APPEND SHADER_C ${GLSL_C})\nif(WITH_METAL_BACKEND)\n  list(APPEND SHADER_C ${MSL_C})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install coreutils on MacOS\nDESCRIPTION: This command uses Homebrew to install the GNU core utilities on macOS, providing access to tools like `timeout`. After installation, the `PATH` environment variable is updated to include the coreutils binaries.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install coreutils\nexport PATH=\"/usr/local/opt/coreutils/libexec/gnubin:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies required for the geometry library to link against. These dependencies include Blender's internal libraries and external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::dependencies::optional::manifold\n)\n```\n\n----------------------------------------\n\nTITLE: Defining pystring Project in CMake\nDESCRIPTION: This snippet initializes the CMake project with the name \"pystring\" and sets the minimum required CMake version to 3.10. It's crucial for starting any CMake-based build configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_pystring.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nproject(pystring)\n\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Installing Studio Lights (CMake)\nDESCRIPTION: This snippet installs the studio lights data from the `release/datafiles/studiolights` directory to the `${TARGETDIR_VER}/datafiles` directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_75\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  DIRECTORY ${CMAKE_SOURCE_DIR}/release/datafiles/studiolights\n  DESTINATION ${TARGETDIR_VER}/datafiles\n)\n```\n\n----------------------------------------\n\nTITLE: Building with vcpkg (Shell)\nDESCRIPTION: These commands show how to build and install the Vulkan Memory Allocator using the vcpkg dependency manager. The commands clone the vcpkg repository, bootstrap vcpkg, integrate it into the environment, and install the vulkan-memory-allocator port.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n./bootstrap-vcpkg.sh\n./vcpkg integrate install\n./vcpkg install vulkan-memory-allocator\n```\n\n----------------------------------------\n\nTITLE: Defining sources for the oneAPI kernel\nDESCRIPTION: This snippet sets the list of source files to be compiled into the oneAPI kernel, including kernel device code, headers, and utility headers. This is used to aggregate all needed sources.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_46\n\nLANGUAGE: cmake\nCODE:\n```\nset(cycles_oneapi_kernel_sources\n    ${SRC_KERNEL_DEVICE_ONEAPI}\n    ${SRC_KERNEL_HEADERS}\n    ${SRC_KERNEL_DEVICE_GPU_HEADERS}\n    ${SRC_KERNEL_DEVICE_ONEAPI_HEADERS}\n    ${SRC_UTIL_HEADERS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for ASAN\nDESCRIPTION: This code adds compiler flags for AddressSanitizer (ASAN) conditionally, depending on the compiler and whether kernel ASAN is specifically enabled. It disables ASAN for certain configurations and compilers due to known issues (GCC hangs, RTTI conflicts with Clang/OSL).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_COMPILER_ASAN)\n  if(CMAKE_COMPILER_IS_GNUCC AND (NOT WITH_CYCLES_KERNEL_ASAN))\n    # GCC hangs compiling the big kernel files with ASAN and release, so disable by default.\n    string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -fno-sanitize=all\")\n    string(APPEND CMAKE_CXX_FLAGS_DEBUG \" -fno-sanitize=vptr\")\n  elseif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n    # With OSL, Cycles disables RTTI in some modules, which then breaks at linking\n    # when trying to use `vptr` sanitizer (included into 'undefined' general option).\n    string(APPEND CMAKE_CXX_FLAGS_RELWITHDEBINFO \" -fno-sanitize=vptr\")\n    string(APPEND CMAKE_CXX_FLAGS_DEBUG \" -fno-sanitize=vptr\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing and Refreshing Image Texture in Python\nDESCRIPTION: This snippet demonstrates how to initialize an ImageFFmpeg object and refresh its texture. It initializes an image from a file and then refreshes it to update the texture on the game object. An object 'Plane' with a material named 'Material' that uses an image texture channel named 'Image' is assumed to be present.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.texture.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport bge\nimport bge.texture\n\n# Get current controller\ncont = bge.logic.getCurrentController()\n# Get object\nobj = cont.owner\n\n# Get texture id\nid = bge.texture.materialID(obj, \"Material\", \"Image\")\n\n# Create texture\nmytexture = bge.texture.Texture(obj, id)\n\n# Create image object\nmyimage = bge.texture.ImageFFmpeg(\"//Blender_logo.png\")\n\n# Set the image to the texture\nmytexture.source = myimage\n\n# Refresh\nmytexture.refresh(True)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This CMake snippet defines the include directories for the expression system. It includes local directories and system directories that contain necessary header files for the project. BOOST_INCLUDE_DIR is a variable that should be set before this snippet.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Expressions/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../Common\n  ../SceneGraph\n  ../../../intern/termcolor\n)\n\nset(INC_SYS\n  ../../../intern/moto/include\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Printing a container with fmt\nDESCRIPTION: This C++ code snippet shows how to print a container (specifically, a `std::vector`) using the fmt library. It requires including the `<fmt/ranges.h>` header file. The output will be a string representation of the container's contents, which in this example is \"[1, 2, 3]\"\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#include <vector>\n    #include <fmt/ranges.h>\n\n    int main() {\n      std::vector<int> v = {1, 2, 3};\n      fmt::print(\"{}\\n\", v);\n    }\n```\n\n----------------------------------------\n\nTITLE: System Freetype and Eigen3 Options\nDESCRIPTION: This snippet defines options for using system-provided Freetype and Eigen3 libraries on Unix systems (excluding macOS). It defaults to using bundled libraries on macOS and Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  option(WITH_SYSTEM_FREETYPE \"Use the freetype library provided by the operating system\" OFF)\n  option(WITH_SYSTEM_EIGEN3 \"Use the systems Eigen3 library\" OFF)\nelse()\n  set(WITH_SYSTEM_FREETYPE OFF)\n  set(WITH_SYSTEM_EIGEN3 OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MIP Test (CMake)\nDESCRIPTION: This snippet configures the build and dependencies for the `mip_test` executable if the LEMON library has MIP (Mixed Integer Programming) support. It defines dependencies on GLPK, CPLEX, and CBC libraries, linking them to `mip_test`. It also handles copying DLLs on Windows for GLPK and CPLEX.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_MIP)\n  IF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n    ADD_EXECUTABLE(mip_test mip_test.cc)\n  ELSE()\n    ADD_EXECUTABLE(mip_test EXCLUDE_FROM_ALL mip_test.cc)\n  ENDIF()\n\n  SET(MIP_TEST_LIBS lemon)\n\n  IF(LEMON_HAVE_GLPK)\n    SET(MIP_TEST_LIBS ${MIP_TEST_LIBS} ${GLPK_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CPLEX)\n    SET(MIP_TEST_LIBS ${MIP_TEST_LIBS} ${ILOG_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CBC)\n    SET(MIP_TEST_LIBS ${MIP_TEST_LIBS} ${COIN_CBC_LIBRARIES})\n  ENDIF()\n\n  TARGET_LINK_LIBRARIES(mip_test ${MIP_TEST_LIBS})\n  ADD_TEST(mip_test mip_test)\n  ADD_DEPENDENCIES(check mip_test)\n\n  IF(WIN32 AND LEMON_HAVE_GLPK)\n    GET_TARGET_PROPERTY(TARGET_LOC mip_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET mip_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/glpk.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/libltdl3.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/zlib1.dll ${TARGET_PATH}\n    )\n  ENDIF()\n\n  IF(WIN32 AND LEMON_HAVE_CPLEX)\n    GET_TARGET_PROPERTY(TARGET_LOC mip_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET mip_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${ILOG_CPLEX_DLL} ${TARGET_PATH}\n    )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Vulkan/Metal Support in CMake\nDESCRIPTION: This snippet conditionally adds support for Vulkan/Metal graphics API. If WITH_VULKAN_METAL is enabled, it adds the -DWITH_VULKAN_METAL preprocessor definition.  This suggests a unified backend for Vulkan and Metal.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_VULKAN_METAL)\n  add_definitions(-DWITH_VULKAN_METAL)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the ge_scenegraph library.  It specifies both local and system-level include paths required to compile the library correctly. The INC variable represents the local include directory, while INC_SYS points to the system-level include directory for the moto library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/SceneGraph/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../Common\n)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../intern/moto/include\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files in Blender\nDESCRIPTION: Groups the source files in the Blender source tree for better organization and visibility. This command helps to categorize the Draco-Blender module's files within the Blender project's IDE or file structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_source_group(extern_draco \"${SRC}\")\n```\n\n----------------------------------------\n\nTITLE: CMake: Setting Include Directories\nDESCRIPTION: This snippet initializes CMake variables for include directories. `INC` is used for project-specific includes, and `INC_SYS` is likely intended for system-level includes. Both are left empty in this configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzo/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up platform linker libs (CMake)\nDESCRIPTION: This snippet sets up the platform linker libraries for the blender test executable. It makes sure the correct libraries are linked for the current platform.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nsetup_platform_linker_libs(blender_test)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags\nDESCRIPTION: This snippet adds a compiler flag to enable fast math optimizations during compilation. This can improve performance but might reduce accuracy in some cases.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libc_compat/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_c_flag(-ffast-math)\n```\n\n----------------------------------------\n\nTITLE: Defining CUDA Kernel Source Files - CMake\nDESCRIPTION: This CMake code defines the CUDA kernel source file. It specifies the CUDA implementation of the Cycles kernel.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_CUDA\n  device/cuda/kernel.cu\n)\n```\n\n----------------------------------------\n\nTITLE: Compiling Shaders to C++\nDESCRIPTION: Conditionally compiles the GLSL shader sources into C++ code if the `WITH_GPU_SHADER_CPP_COMPILATION` option is enabled.  This can be useful for embedding shaders directly into the executable.  The `compile_sources_as_cpp` function (likely custom) handles the compilation process, associating each shader type with a corresponding C++ macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/engines/workbench/shaders/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_SHADER_CPP_COMPILATION)\n  with_shader_cpp_compilation_config()\n  # TODO Remove\n  add_definitions(-DUSE_GPU_SHADER_CREATE_INFO)\n\n  compile_sources_as_cpp(workbench_cpp_shaders_vert \"${SRC_GLSL_VERT}\" \"GPU_VERTEX_SHADER\")\n  compile_sources_as_cpp(workbench_cpp_shaders_frag \"${SRC_GLSL_FRAG}\" \"GPU_FRAGMENT_SHADER\")\n  compile_sources_as_cpp(workbench_cpp_shaders_comp \"${SRC_GLSL_COMP}\" \"GPU_COMPUTE_SHADER\")\n  # Only enable to make sure they compile on their own.\n  # Otherwise it creates a warning about `pragma once`.\n  # compile_sources_as_cpp(workbench_cpp_shaders_lib \"${SRC_GLSL_LIB}\" \"GPU_LIBRARY_SHADER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Libraries to Link for blenderplayer - CMake\nDESCRIPTION: This snippet appends a list of libraries to the `LIB` variable, which are presumably used for linking the blenderplayer executable. These libraries include modules for asset management, memory allocation, and DNA loading.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND LIB\n  ge_player\n  bf_asset_system\n  bf_intern_guardedalloc\n  PRIVATE bf::blenlib\n  bf_intern_memutil\n  bf_dna_blenlib\n  bf_blenloader\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories and Libraries\nDESCRIPTION: This snippet defines variables for include directories (INC, INC_SYS) and libraries (LIB) used in the Cycles project. It initializes them with basic paths and module names and adds conditional dependencies based on CMake options.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\nset(INC_SYS\n)\n\nset(LIB\n  cycles_device\n  cycles_kernel\n  cycles_scene\n  cycles_session\n  cycles_bvh\n  cycles_subd\n  cycles_graph\n  cycles_util\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Geometry Node Tests - CMake\nDESCRIPTION: Defines and adds tests for geometry nodes. It loops through a list of geometry node test directories, finds all '.blend' files within each directory, and then calls `add_blender_test` for each file to create a test.  Each test execution makes use of a dedicated test python script and the location of the blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_44\n\nLANGUAGE: cmake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  set(geo_node_tests\n    attributes\n    closure\n    curve_primitives\n    curves\n    curves/interpolate_curves\n    foreach_geometry_element_zone\n    geometry\n    grease_pencil\n    instance\n    repeat_zone\n    mesh_primitives\n    mesh\n    mesh/extrude\n    mesh/split_edges\n    mesh/triangulate\n    points\n    texture\n    utilities\n    vector\n  )\n\n  if(WITH_GMP)\n    list(APPEND geo_node_tests mesh/boolean)\n  endif()\n\n  if(WITH_OPENVDB)\n    list(APPEND geo_node_tests volume)\n  endif()\n\n  if(WITH_OPENSUBDIV)\n    list(APPEND geo_node_tests mesh/subdivision_tests)\n  endif()\n\n  foreach(geo_node_test ${geo_node_tests})\n    file(GLOB files \"${TEST_SRC_DIR}/modeling/geometry_nodes/${geo_node_test}/*.blend\")\n    foreach(file ${files})\n      get_filename_component(filename ${file} NAME_WE)\n      add_blender_test(\n        geo_node_${geo_node_test}_${filename}\n        ${file}\n        --python ${TEST_PYTHON_DIR}/geo_node_test.py\n      )\n    endforeach()\n  endforeach()\n\n  file(GLOB files \"${TEST_SRC_DIR}/modeling/geometry_nodes/simulation/*.blend\")\n  foreach(file ${files})\n    get_filename_component(filename ${file} NAME_WE)\n    add_blender_test(\n      geo_node_simulation_test_${filename}\n      ${file}\n      --python ${TEST_PYTHON_DIR}/geo_node_sim_test.py\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions\nDESCRIPTION: This snippet adds compiler definitions, which are used to control conditional compilation based on platform or feature availability.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DWITH_DNA_GHASH)\n\n# Needed for `mallocn.cc`.\nif(HAVE_MALLOC_STATS_H)\n  add_definitions(-DHAVE_MALLOC_STATS_H)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the list of source files for the Cycles BVH library, separated into generic C++ source files and Metal-specific Objective-C++ source files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  bvh.cpp\n  bvh2.cpp\n  binning.cpp\n  build.cpp\n  embree.cpp\n  hiprt.cpp\n  multi.cpp\n  node.cpp\n  optix.cpp\n  sort.cpp\n  split.cpp\n  unaligned.cpp\n)\n\nset(SRC_METAL\n  metal.mm\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Test Subdirectory CMake\nDESCRIPTION: Conditionally adds the `python` subdirectory for Python tests if `WITH_BLENDER` and `WITH_PYTHON` are enabled, and `WITH_PYTHON_MODULE` is disabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BLENDER AND WITH_PYTHON AND NOT WITH_PYTHON_MODULE)\n  add_subdirectory(python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding a Blender Library in CMake\nDESCRIPTION: This CMake snippet uses a custom function `blender_add_lib` to create a library named `bf_testing_main`. It utilizes the previously defined source files, include directories, and library dependencies to configure the library's build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/gtests/testing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_testing_main \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines system-level include directories. In this case, it's empty, indicating no system-level includes are explicitly specified.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/recastnavigation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Definition (Haru) - CMake\nDESCRIPTION: This snippet conditionally adds a preprocessor definition if the WITH_HARU flag is enabled. This indicates that the project is configured to use the Haru PDF library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_HARU)\n  add_definitions(-DWITH_HARU)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Efficient String Joining (Python)\nDESCRIPTION: Demonstrates the most efficient way of joining multiple strings into a single string using the `join()` method, particularly suitable for joining a list of strings. It joins strings with a space in between.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfile.write(\" \".join((str1, str2, str3, \"\\n\"))) \n```\n\n----------------------------------------\n\nTITLE: Setting Clear Stencil Value with glClearStencil (bgl)\nDESCRIPTION: Specifies the index used when the stencil buffer is cleared. The 's' parameter defines the stencil value written during the glClear operation. This function is used in conjunction with stencil testing to control rendering.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glClearStencil(s)\n```\n\n----------------------------------------\n\nTITLE: Setting Header Files - CMake\nDESCRIPTION: This snippet defines the header files for the GMock library. It lists the `.h` files that are included as part of the library.  These files define the public interface of the GMock library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gmock/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  include/gmock/gmock.h\n  include/gmock/gmock-actions.h\n  include/gmock/gmock-cardinalities.h\n  include/gmock/gmock-function-mocker.h\n  include/gmock/gmock-matchers.h\n  include/gmock/gmock-more-actions.h\n  include/gmock/gmock-more-matchers.h\n  include/gmock/gmock-nice-strict.h\n  include/gmock/gmock-spec-builders.h\n  include/gmock/internal/custom/gmock-generated-actions.h\n  include/gmock/internal/custom/gmock-matchers.h\n  include/gmock/internal/custom/gmock-port.h\n  include/gmock/internal/gmock-internal-utils.h\n  include/gmock/internal/gmock-port.h\n  include/gmock/internal/gmock-pp.h\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lemon PC File CMake\nDESCRIPTION: Configures the lemon.pc file from a template (lemon.pc.in) to generate the final lemon.pc file in the binary directory. The @ONLY option ensures that only variables defined in CMake are used during configuration, preventing accidental leakage of environment variables.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nCONFIGURE_FILE(\n  ${CMAKE_CURRENT_SOURCE_DIR}/lemon.pc.in\n  ${CMAKE_CURRENT_BINARY_DIR}/lemon.pc\n  @ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files for Apple Platforms\nDESCRIPTION: This snippet conditionally adds source files specific to Apple platforms (macOS). It appends `intern/fileops_apple.mm` and `intern/storage_apple.mm` to the source file list when the `APPLE` variable is true.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  list(APPEND SRC\n    intern/fileops_apple.mm\n    intern/storage_apple.mm\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Post-Configuration Script\nDESCRIPTION: This snippet includes a post-configuration script, if defined by the POSTCONFIGURE_SCRIPT variable. This allows for custom actions to be performed after the main CMake configuration process is complete.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_148\n\nLANGUAGE: cmake\nCODE:\n```\nif(POSTCONFIGURE_SCRIPT)\n  include(${POSTCONFIGURE_SCRIPT})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Include Directories (System)\nDESCRIPTION: Defines system include directories for the URI conversion library.  This variable is currently empty, indicating no external system include directories are required. If external dependencies are needed, their header file locations would be added here.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/uriconvert/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Remove Strict Flags (CMake)\nDESCRIPTION: Removes strict compiler flags, presumably to avoid errors arising from the inclusion of Bullet headers. This function likely relaxes some of the compiler's strictness when handling code, potentially suppressing warnings or errors related to header compatibility.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Bullet/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nremove_strict_flags()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenGL Definitions in CMake\nDESCRIPTION: This snippet adds preprocessor definitions related to OpenGL.  These definitions are essential for configuring the OpenGL rendering context and ensuring compatibility with the OpenGL version used. The GL_DEFINITIONS variable is assumed to be predefined elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GamePlayer/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(${GL_DEFINITIONS})\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: Specifies the source files (`ufbx.c`, `ufbx.h`) that make up the ufbx library.  These are used in the `blender_add_lib` command later to compile the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ufbx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  ufbx.c\n  ufbx.h\n)\n```\n\n----------------------------------------\n\nTITLE: Creating RenderDoc Dynamic Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create a dynamic library named `bf_intern_renderdoc_dynload`. It takes the source files, include directories, and system include directories as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/renderdoc_dynload/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_renderdoc_dynload \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GLSL\nDESCRIPTION: This snippet defines the include directories for GLSL shaders.  These directories are used to locate included files within the shader code.  The directories specified are relative to the current CMake configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n  ../intern\n\n  common\n  infos\n)\n```\n\n----------------------------------------\n\nTITLE: Node Group Interface Test (CMake)\nDESCRIPTION: This CMake snippet adds a test for the node group interface, using the `bl_node_group_interface.py` Python script. The snippet specifies the test directory for the node group tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_node_group_interface\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_node_group_interface.py\n    --\n    --testdir \"${TEST_SRC_DIR}/node_group\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries - CMake\nDESCRIPTION: This snippet defines the dependent libraries required to build the Blender editor space API. It sets the `LIB` variable, listing several Blender internal libraries that `bf_editor_space_api` depends on. These libraries are linked during the build process to resolve dependencies and provide required functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_api/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::asset_system\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  bf_editor_geometry\n  bf_editor_space_action\n  bf_editor_space_buttons\n  bf_editor_space_clip\n  bf_editor_space_console\n  bf_editor_space_file\n  bf_editor_space_graph\n  bf_editor_space_image\n  bf_editor_space_info\n  bf_editor_space_logic\n  bf_editor_space_nla\n  bf_editor_space_node\n  bf_editor_space_outliner\n  bf_editor_space_script\n  bf_editor_space_sequencer\n  bf_editor_space_spreadsheet\n  bf_editor_space_statusbar\n  bf_editor_space_text\n  bf_editor_space_topbar\n  bf_editor_space_userpref\n  bf_editor_space_view3d\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Set Compiler Flags for Generated Source\nDESCRIPTION: This snippet sets compiler flags specifically for generated source files. It disables missing prototypes and declarations warnings for GNU GCC and Clang compilers. Additionally, it handles specific warnings for Clang and MSVC.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(GENSRC_FLAGS)\nset(GENSRC_CFLAGS)\nset(GENSRC_CXXFLAGS)\nif(CMAKE_COMPILER_IS_GNUCC OR (CMAKE_C_COMPILER_ID MATCHES \"Clang\"))\n  set(GENSRC_CFLAGS \"-Wno-missing-prototypes\")\n  set(GENSRC_CXXFLAGS \"-Wno-missing-declarations\")\nendif()\nif(CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  string(APPEND GENSRC_FLAGS \" -Wno-missing-variable-declarations\")\nelif(MSVC)\n  remove_cc_flag(\n    # Restore warn C4100 (unreferenced formal parameter) back to w4.\n    \"/w34100\"\n  )\nendif()\n\nset(GENSRC_C ${GENSRC})\nlist(FILTER GENSRC_C INCLUDE REGEX \"[a-zA-Z0-9_-]\\.c$\")\nset(GENSRC_CXX ${GENSRC})\nlist(FILTER GENSRC_CXX INCLUDE REGEX \"[a-zA-Z0-9_-]\\.cc$\")\n\nif(GENSRC_FLAGS)\n  set_source_files_properties(${GENSRC} PROPERTIES COMPILE_FLAGS \"${GENSRC_FLAGS}\")\nendif()\n\nif(GENSRC_CFLAGS)\n  set_source_files_properties(${GENSRC_C} PROPERTIES COMPILE_FLAGS \"${GENSRC_CFLAGS}\")\nendif()\n\nif(GENSRC_CXXFLAGS)\n  set_source_files_properties(${GENSRC_CXX} PROPERTIES COMPILE_FLAGS \"${GENSRC_CXXFLAGS}\")\nendif()\n\nunset(GENSRC_C)\nunset(GENSRC_CXX)\nunset(GENSRC_FLAGS)\nunset(GENSRC_CFLAGS)\nunset(GENSRC_CXXFLAGS)\n```\n\n----------------------------------------\n\nTITLE: Checking Symbol Existence\nDESCRIPTION: Uses CMake's `CheckSymbolExists` module to determine if specific symbols are available in the system headers. If a symbol is found, a preprocessor definition is added.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n    include(CheckSymbolExists)\n    set(CMAKE_REQUIRED_DEFINITIONS \"-D_GNU_SOURCE\")\n    check_symbol_exists(memfd_create \"sys/mman.h\" HAVE_MEMFD_CREATE)\n    unset(CMAKE_REQUIRED_DEFINITIONS)\n    if(HAVE_MEMFD_CREATE)\n      add_definitions(-DHAVE_MEMFD_CREATE)\n    endif()\n\n    check_symbol_exists(poll \"poll.h\" HAVE_POLL)\n    if(HAVE_POLL)\n      add_definitions(-DHAVE_POLL)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Add Render Tests (CMake)\nDESCRIPTION: This snippet adds render tests related to sculpting brushes. It iterates through a list of `render_tests` and calls the `add_render_test` macro for each, specifying the Python script, test directory, and output directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GPU_MESH_PAINT_TESTS AND TEST_SRC_DIR_EXISTS)\n  set(render_tests\n    brushes\n  )\n\n  foreach(render_test ${render_tests})\n    add_render_test(\n      sculpt_render_${render_test}\n      ${CMAKE_CURRENT_LIST_DIR}/sculpt_brush_render_tests.py\n      --testdir \"${TEST_SRC_DIR}/sculpting/${render_test}\"\n      --outdir \"${TEST_OUT_DIR}/sculpting\"\n    )\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding LZMA Library\nDESCRIPTION: This snippet uses a custom CMake function, `blender_add_lib`, to create the LZMA library. It takes the library name, source files, include directories, and library dependencies as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzma/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_lzma \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options\nDESCRIPTION: This snippet sets the compiler option `-Wsuggest-override` for the `bf_compositor` library if `CXX_WARN_NO_SUGGEST_OVERRIDE` is enabled. This adds a warning if a virtual function is not explicitly overridden.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(CXX_WARN_NO_SUGGEST_OVERRIDE)\n  target_compile_options(bf_compositor PRIVATE \"-Wsuggest-override\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet sets system include directories, which are typically standard library paths. In this configuration, it is empty.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS) - CMake\nDESCRIPTION: Specifies the system-level include directories required, particularly for external libraries like Zlib.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/modifiers/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ${ZLIB_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Library - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to define the creation of a library named `bf_editor_id_management`. The macro takes the library name, source files, include directories, system include directories, and library dependencies as input.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/id_management/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_id_management \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Checking Long Long Type Size in CMake\nDESCRIPTION: This snippet uses the `CHECK_TYPE_SIZE` macro to determine the size of the `long long` type. It defines `LEMON_HAVE_LONG_LONG` to indicate whether the `long long` type is supported by the compiler.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(CheckTypeSize)\nCHECK_TYPE_SIZE(\"long long\" LONG_LONG)\nSET(LEMON_HAVE_LONG_LONG ${HAVE_LONG_LONG})\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet initializes an empty list for system-level include directories. Currently, no system includes are explicitly defined for the mask editor module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mask/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Subdirectory\nDESCRIPTION: This snippet conditionally adds the `test` subdirectory to the build if WITH_GTESTS is enabled. The `test` subdirectory contains unit tests for the Cycles rendering engine.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the Cycles scene component. It includes both local project directories specified by the `INC` variable and system include directories specified by the `INC_SYS` variable. This ensures that the compiler can find the necessary header files for the project and its dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n  ../../sky/include\n  ../../mikktspace\n)\n```\n\n----------------------------------------\n\nTITLE: Array Re-Allocation Example in Blender Python\nDESCRIPTION: This snippet demonstrates how adding points to a curve can cause array re-allocation, leading to potential crashes if point coordinates are accessed immediately after adding a new point. The example uses bpy.ops to add a bezier curve and a point, then attempts to modify the coordinate, which can lead to a crash.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nbpy.ops.curve.primitive_bezier_curve_add()\npoint = bpy.context.object.data.splines[0].bezier_points[0]\nbpy.context.object.data.splines[0].bezier_points.add()\n\n# This will crash!\npoint.co = 1.0, 2.0, 3.0\n```\n\n----------------------------------------\n\nTITLE: Removing SSE42 compiler flag in CMake\nDESCRIPTION: This snippet checks if the `COMPILER_SSE42_FLAG` variable is defined, and if so, it removes the flag from the compiler. This is done to ensure compatibility with CPUs that may not support SSE42 instructions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(COMPILER_SSE42_FLAG)\n  remove_cc_flag(\"${COMPILER_SSE42_FLAG}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Node Group Compatibility Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for node group compatibility using the `bl_node_group_compat.py` Python script. It specifies the test directory where the test files are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_node_group_compat\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_node_group_compat.py\n    --\n    --testdir \"${TEST_SRC_DIR}/node_group\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This code block sets the include directories for the dummy physics library. `INC` specifies the relative path to the current directory and the Common directory. `INC_SYS` points to the moto include directory, which is located further up in the directory structure.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Dummy/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../Common\n)\n\nset(INC_SYS\n  ../../../../intern/moto/include\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Lemon Headers CMake\nDESCRIPTION: Installs the header files from the specified directories (`.`, `bits`, and `concepts`) to the `include/lemon` directory under the installation prefix. It also filters the files to only include those matching the pattern `*.h`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(\n  DIRECTORY . bits concepts\n  DESTINATION include/lemon\n  COMPONENT headers\n  FILES_MATCHING PATTERN \"*.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting source files for xxHash - CMake\nDESCRIPTION: This snippet sets the source files for the xxHash library. The `SRC` variable defines the C source file and header file for the xxHash implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xxhash/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  xxhash.c\n  xxhash.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories CMake\nDESCRIPTION: Sets include directories for the project, including the project source directory and the project binary directory. This allows the compiler to find header files in these locations.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nINCLUDE_DIRECTORIES(\n  ${PROJECT_SOURCE_DIR}\n  ${PROJECT_BINARY_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Additional Directories\nDESCRIPTION: This snippet ensures that the specified include directories (`INC`) and system include directories (`INC_SYS`) are available during compilation. This allows the compiler to find necessary header files for the Cycles scene component and its dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/scene/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Setting Link Directories (CMake)\nDESCRIPTION: This snippet specifies the link directory for the project. It points to the lemon library build directory. This allows the linker to find the compiled lemon library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/tools/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n```\n\n----------------------------------------\n\nTITLE: Embedding GLSL Shaders\nDESCRIPTION: This snippet uses the `data_to_c_simple` function to embed GLSL shader code into C++ source files. This allows the shaders to be compiled and used at runtime within the rasterizer library. The specified shader files implement various 2D filter effects.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Rasterizer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Blur2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Dilation2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Erosion2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_GrayScale2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Invert2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Laplacian2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Prewitt2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Sepia2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Sharpen2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_Sobel2DFilter.glsl SRC)\ndata_to_c_simple(RAS_OpenGLFilters/RAS_VertexShader2DFilter.glsl SRC)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files - CMake\nDESCRIPTION: This CMake code snippet lists all the source files (.cc, .c, .hh, .h) that are part of the UPBGE core library.  These files contain the actual implementation of the engine's features and functionalities. This large list is crucial for the compilation process to create the final executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  ${CMAKE_SOURCE_DIR}/release/datafiles/userdef/userdef_default.c\n  intern/CCGSubSurf.cc\n  intern/CCGSubSurf_legacy.cc\n  intern/CCGSubSurf_util.cc\n  intern/action.cc\n  intern/action_bones.cc\n  intern/action_mirror.cc\n  intern/addon.cc\n  intern/anim_data.cc\n  intern/anim_path.cc\n  intern/anim_sys.cc\n  intern/anim_visualization.cc\n  intern/anonymous_attribute_id.cc\n  intern/appdir.cc\n  intern/armature.cc\n  intern/armature_deform.cc\n  intern/armature_selection.cc\n  intern/armature_update.cc\n  intern/asset.cc\n  intern/asset_edit.cc\n  intern/asset_weak_reference.cc\n  intern/attribute.cc\n  intern/attribute_access.cc\n  intern/attribute_math.cc\n  intern/autoexec.cc\n  intern/bake_data_block_map.cc\n  intern/bake_geometry_nodes_modifier.cc\n  intern/bake_geometry_nodes_modifier_pack.cc\n  intern/bake_items.cc\n  intern/bake_items_paths.cc\n  intern/bake_items_serialize.cc\n  intern/bake_items_socket.cc\n  intern/blender.cc\n  intern/blender_cli_command.cc\n  intern/blender_copybuffer.cc\n  intern/blender_undo.cc\n  intern/blender_user_menu.cc\n  intern/blendfile.cc\n  intern/blendfile_link_append.cc\n  intern/boids.cc\n  intern/bpath.cc\n  intern/brush.cc\n  intern/bullet.c\n  intern/bvhutils.cc\n  intern/cachefile.cc\n  intern/callbacks.cc\n  intern/camera.cc\n  intern/cloth.cc\n  intern/collection.cc\n  intern/collision.cc\n  intern/colorband.cc\n  intern/colortools.cc\n  intern/compositor.cc\n  intern/compute_contexts.cc\n  intern/constraint.cc\n  intern/context.cc\n  intern/cpp_types.cc\n  intern/crazyspace.cc\n  intern/cryptomatte.cc\n  intern/curve.cc\n  intern/curve_bevel.cc\n  intern/curve_bezier.cc\n  intern/curve_catmull_rom.cc\n  intern/curve_convert.cc\n  intern/curve_decimate.cc\n  intern/curve_deform.cc\n  intern/curve_legacy_convert.cc\n  intern/curve_nurbs.cc\n  intern/curve_poly.cc\n  intern/curve_to_mesh_convert.cc\n  intern/curveprofile.cc\n  intern/curves.cc\n  intern/curves_attributes.cc\n  intern/curves_geometry.cc\n  intern/curves_utils.cc\n  intern/customdata.cc\n  intern/customdata_file.cc\n  intern/data_transfer.cc\n  intern/deform.cc\n  intern/displist.cc\n  intern/dynamicpaint.cc\n  intern/editlattice.cc\n  intern/editmesh.cc\n  intern/editmesh_bvh.cc\n  intern/editmesh_cache.cc\n  intern/editmesh_tangent.cc\n  intern/effect.cc\n  intern/fcurve.cc\n  intern/fcurve_cache.cc\n  intern/fcurve_driver.cc\n  intern/file_handler.cc\n  intern/fluid.cc\n  intern/fmodifier.cc\n  intern/freestyle.cc\n  intern/geometry_compare.cc\n  intern/geometry_component_curves.cc\n  intern/geometry_component_edit_data.cc\n  intern/geometry_component_grease_pencil.cc\n  intern/geometry_component_instances.cc\n  intern/geometry_component_mesh.cc\n  intern/geometry_component_pointcloud.cc\n  intern/geometry_component_volume.cc\n  intern/geometry_fields.cc\n  intern/geometry_set.cc\n  intern/geometry_set_instances.cc\n  intern/gpencil_geom_legacy.cc\n  intern/gpencil_legacy.cc\n  intern/gpencil_modifier_legacy.cc\n  intern/grease_pencil.cc\n  intern/grease_pencil_attributes.cc\n  intern/grease_pencil_convert_legacy.cc\n  intern/grease_pencil_vertex_groups.cc\n  intern/icons.cc\n  intern/icons_rasterize.cc\n  intern/idprop.cc\n  intern/idprop_create.cc\n  intern/idprop_serialize.cc\n  intern/idprop_utils.cc\n  intern/idtype.cc\n  intern/image.cc\n  intern/image_format.cc\n  intern/image_gen.cc\n  intern/image_gpu.cc\n  intern/image_partial_update.cc\n  intern/image_save.cc\n  intern/instances.cc\n  intern/instances_attributes.cc\n  intern/ipo.cc\n  intern/kelvinlet.cc\n  intern/key.cc\n  intern/keyconfig.cc\n  intern/lattice.cc\n  intern/lattice_deform.cc\n  intern/layer.cc\n  intern/layer_utils.cc\n  intern/lib_id.cc\n  intern/lib_id_delete.cc\n  intern/lib_id_eval.cc\n  intern/lib_id_remapper.cc\n  intern/lib_override.cc\n  intern/lib_override_proxy_conversion.cc\n  intern/lib_query.cc\n  intern/lib_remap.cc\n  intern/library.cc\n  intern/light.cc\n  intern/light_linking.cc\n  intern/lightprobe.cc\n  intern/linestyle.cc\n  intern/main.cc\n  intern/main_idmap.cc\n  intern/main_invariants.cc\n  intern/main_namemap.cc\n  intern/mask.cc\n  intern/mask_evaluate.cc\n  intern/mask_rasterize.cc\n  intern/material.cc\n  intern/mball.cc\n  intern/mball_tessellate.cc\n  intern/mesh.cc\n  intern/mesh_attributes.cc\n  intern/mesh_calc_edges.cc\n  intern/mesh_convert.cc\n  intern/mesh_data_update.cc\n  intern/mesh_debug.cc\n  intern/mesh_evaluate.cc\n  intern/mesh_fair.cc\n  intern/mesh_flip_faces.cc\n  intern/mesh_iterators.cc\n  intern/mesh_legacy_convert.cc\n  intern/mesh_legacy_derived_mesh.cc\n  intern/mesh_mapping.cc\n  intern/mesh_merge_customdata.cc\n  intern/mesh_mirror.cc\n  intern/mesh_normals.cc\n  intern/mesh_remap.cc\n  intern/mesh_remesh_voxel.cc\n  intern/mesh_runtime.cc\n  intern/mesh_sample.cc\n  intern/mesh_tangent.cc\n  intern/mesh_tessellate.cc\n  intern/mesh_topology_state.cc\n  intern/mesh_validate.cc\n  intern/mesh_wrapper.cc\n  intern/modifier.cc\n  intern/movieclip.cc\n  intern/multires.cc\n  intern/multires_reshape.cc\n  intern/multires_reshape_apply_base.cc\n  intern/multires_reshape_ccg.cc\n  intern/multires_reshape_smooth.cc\n  intern/multires_reshape_subdivide.cc\n  intern/multires_reshape_util.cc\n  intern/multires_reshape_vertcos.cc\n  intern/multires_subdiv.cc\n  intern/multires_unsubdivide.cc\n  intern/multires_versioning.cc\n  intern/nla.cc\n  intern/node.cc\n  intern/node_enum_definition.cc\n  intern/node_runtime.cc\n  intern/node_socket_value.cc\n  intern/node_tree_dot_export.cc\n  intern/node_tree_field_inferencing.cc\n  intern/node_tree_interface.cc\n  intern/node_tree_reference_lifetimes.cc\n  intern/node_tree_update.cc\n  intern/node_tree_zones.cc\n  intern/object.cc\n  intern/object_deform.cc\n  intern/object_dupli.cc\n  intern/object_update.cc\n  intern/ocean.cc\n  intern/ocean_spectrum.cc\n  intern/outliner_treehash.cc\n  intern/packedFile.cc\n  intern/paint.cc\n  intern/paint_canvas.cc\n  intern/particle.cc\n  intern/particle_child.cc\n  intern/particle_distribute.cc\n  intern/particle_system.cc\n  intern/pbvh.cc\n  intern/pbvh_bmesh.cc\n  intern/pbvh_pixels.cc\n  intern/pbvh_pixels_copy.cc\n  intern/pbvh_uv_islands.cc\n  intern/pointcache.cc\n  intern/pointcloud.cc\n  intern/pointcloud_attributes.cc\n  intern/pose_backup.cc\n  intern/preferences.cc\n  intern/preview_image.cc\n  intern/property.cc\n  intern/python_proxy.cc\n  intern/report.cc\n  intern/rigidbody.cc\n  intern/sca.cc\n  intern/scene.cc\n  intern/screen.cc\n  intern/shader_fx.cc\n  intern/shrinkwrap.cc\n  intern/softbody.cc\n  intern/sound.cc\n  intern/speaker.cc\n  intern/studiolight.cc\n  intern/subdiv.cc\n  intern/subdiv_ccg.cc\n  intern/subdiv_ccg_mask.cc\n  intern/subdiv_converter.cc\n  intern/subdiv_converter_mesh.cc\n  intern/subdiv_deform.cc\n  intern/subdiv_displacement.cc\n  intern/subdiv_displacement_multires.cc\n  intern/subdiv_eval.cc\n  intern/subdiv_foreach.cc\n  intern/subdiv_mesh.cc\n  intern/subdiv_modifier.cc\n  intern/subdiv_stats.cc\n  intern/subdiv_topology.cc\n  intern/subsurf_ccg.cc\n  intern/text.cc\n  intern/text_suggestions.cc\n  intern/texture.cc\n  intern/tracking.cc\n  intern/tracking_auto.cc\n  intern/tracking_detect.cc\n  intern/tracking_plane_tracker.cc\n  intern/tracking_region_tracker.cc\n  intern/tracking_solver.cc\n  intern/tracking_stabilize.cc\n  intern/tracking_util.cc\n  intern/type_conversions.cc\n  intern/undo_system.cc\n  intern/unit.cc\n  intern/uvproject.cc\n  intern/vfont.cc\n  intern/vfont_curve.cc\n  intern/vfontdata_freetype.cc\n  intern/viewer_path.cc\n  intern/volume.cc\n  intern/volume_grid.cc\n  intern/volume_grid_file_cache.cc\n  intern/volume_render.cc\n  intern/volume_to_mesh.cc\n  intern/wm_runtime.cc\n  intern/workspace.cc\n  intern/world.cc\n\n  BKE_action.hh\n  BKE_addon.h\n  BKE_anim_data.hh\n  BKE_anim_path.h\n  BKE_anim_visualization.h\n  BKE_animsys.h\n  BKE_anonymous_attribute_id.hh\n  BKE_anonymous_attribute_make.hh\n  BKE_appdir.hh\n  BKE_armature.hh\n  BKE_asset.hh\n  BKE_asset_edit.hh\n  BKE_attribute.h\n  BKE_attribute.hh\n  BKE_attribute_filter.hh\n  BKE_attribute_filters.hh\n  BKE_attribute_math.hh\n  BKE_autoexec.hh\n  BKE_bake_data_block_id.hh\n  BKE_bake_data_block_map.hh\n  BKE_bake_geometry_nodes_modifier.hh\n  BKE_bake_geometry_nodes_modifier_pack.hh\n  BKE_bake_items.hh\n  BKE_bake_items_paths.hh\n  BKE_bake_items_serialize.hh\n  BKE_bake_items_socket.hh\n  BKE_blender.hh\n  BKE_blender_cli_command.hh\n  BKE_blender_copybuffer.hh\n  BKE_blender_undo.hh\n  BKE_blender_user_menu.hh\n  BKE_blender_version.h\n  BKE_blendfile.hh\n  BKE_blendfile_link_append.hh\n  BKE_boids.h\n  BKE_bpath.hh\n  BKE_brush.hh\n  BKE_bullet.h\n  BKE_bvhutils.hh\n  BKE_cachefile.hh\n  BKE_callbacks.hh\n  BKE_camera.h\n  BKE_ccg.hh\n  BKE_cloth.hh\n  BKE_collection.hh\n  BKE_collision.h\n  BKE_colorband.hh\n  BKE_colortools.hh\n  BKE_compositor.hh\n  BKE_compute_context_cache.hh\n  BKE_compute_context_cache_fwd.hh\n  BKE_compute_contexts.hh\n  BKE_constraint.h\n  BKE_context.hh\n  BKE_cpp_types.hh\n  BKE_crazyspace.hh\n  BKE_cryptomatte.h\n  BKE_cryptomatte.hh\n  BKE_curve.hh\n  BKE_curve_legacy_convert.hh\n  BKE_curve_to_mesh.hh\n  BKE_curveprofile.h\n  BKE_curves.h\n  BKE_curves.hh\n  BKE_curves_utils.hh\n  BKE_customdata.hh\n  BKE_customdata_file.h\n  BKE_data_transfer.h\n  BKE_deform.hh\n  BKE_displist.h\n  BKE_duplilist.hh\n  BKE_dynamicpaint.h\n  BKE_editlattice.h\n  BKE_editmesh.hh\n  BKE_editmesh_bvh.hh\n  BKE_editmesh_cache.hh\n  BKE_editmesh_tangent.hh\n  BKE_effect.h\n  BKE_fcurve.hh\n  BKE_fcurve_driver.h\n  BKE_file_handler.hh\n  BKE_fluid.h\n  BKE_freestyle.h\n  BKE_geometry_compare.hh\n  BKE_geometry_fields.hh\n  BKE_geometry_nodes_gizmos_transforms.hh\n  BKE_geometry_nodes_reference_set.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation: OpenVDB\nDESCRIPTION: This snippet conditionally includes OpenVDB-related files, libraries and definitions if `WITH_OPENVDB` is enabled. It appends include directories and libraries. It also defines the `WITH_OPENVDB` preprocessor definition, and appends definitions contained in `OPENVDB_DEFINITIONS`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    bf_intern_openvdb\n    ${OPENVDB_LIBRARIES}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries for Logic Bricks\nDESCRIPTION: This snippet defines the libraries that the game engine logic bricks library depends on. It includes Blender's blenlib, dna, and guardedalloc libraries, as well as the ge_expressions library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::intern::guardedalloc\n  ge_expressions\n)\n```\n\n----------------------------------------\n\nTITLE: Animation NLA Strip Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for animation NLA strips using the `bl_animation_nla_strip.py` Python script.  It does not load a .blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n  bl_animation_nla_strip\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_nla_strip.py\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Blender Player Directory\nDESCRIPTION: This snippet conditionally adds the 'source/blenderplayer' subdirectory, which contains the Blender Player source code, if the WITH_PLAYER option is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_144\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PLAYER)\n  add_subdirectory(source/blenderplayer)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting source files\nDESCRIPTION: This snippet defines the source files to be compiled into the libmv library. It uses CMake's `set` and `list(APPEND ...)` commands to specify the list of `.cc` and `.h` files that constitute the library's source code. These source files are then compiled during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  libmv-capi.h\n)\n\nlist(APPEND SRC\n    intern/autotrack.cc\n    intern/camera_intrinsics.cc\n    intern/detector.cc\n    intern/frame_accessor.cc\n    intern/homography.cc\n    intern/image.cc\n    intern/logging.cc\n    intern/reconstruction.cc\n    intern/track_region.cc\n    intern/tracks.cc\n    intern/tracksN.cc\n    libmv/autotrack/autotrack.cc\n    libmv/autotrack/predict_tracks.cc\n    libmv/autotrack/tracks.cc\n    libmv/base/aligned_malloc.cc\n    libmv/image/array_nd.cc\n    libmv/image/convolve.cc\n    libmv/multiview/conditioning.cc\n    libmv/multiview/euclidean_resection.cc\n    libmv/multiview/fundamental.cc\n    libmv/multiview/homography.cc\n    libmv/multiview/panography.cc\n    libmv/multiview/panography_kernel.cc\n    libmv/multiview/projection.cc\n    libmv/multiview/triangulation.cc\n    libmv/numeric/numeric.cc\n    libmv/numeric/poly.cc\n    libmv/simple_pipeline/bundle.cc\n    libmv/simple_pipeline/camera_intrinsics.cc\n    libmv/simple_pipeline/detect.cc\n    libmv/simple_pipeline/distortion_models.cc\n    libmv/simple_pipeline/initialize_reconstruction.cc\n    libmv/simple_pipeline/intersect.cc\n    libmv/simple_pipeline/keyframe_selection.cc\n    libmv/simple_pipeline/modal_solver.cc\n    libmv/simple_pipeline/packed_intrinsics.cc\n    libmv/simple_pipeline/pipeline.cc\n    libmv/simple_pipeline/reconstruction.cc\n    libmv/simple_pipeline/reconstruction_scale.cc\n    libmv/simple_pipeline/resect.cc\n    libmv/simple_pipeline/tracks.cc\n    libmv/tracking/brute_region_tracker.cc\n    libmv/tracking/hybrid_region_tracker.cc\n    libmv/tracking/klt_region_tracker.cc\n    libmv/tracking/pyramid_region_tracker.cc\n    libmv/tracking/retrack_region_tracker.cc\n    libmv/tracking/track_region.cc\n    libmv/tracking/trklt_region_tracker.cc\n\n\n    intern/autotrack.h\n    intern/camera_intrinsics.h\n    intern/detector.h\n    intern/frame_accessor.h\n    intern/homography.h\n    intern/image.h\n    intern/logging.h\n    intern/reconstruction.h\n    intern/region.h\n    intern/track_region.h\n    intern/tracks.h\n    intern/tracksN.h\n    intern/utildefines.h\n    libmv/autotrack/autotrack.h\n    libmv/autotrack/callbacks.h\n    libmv/autotrack/frame_accessor.h\n    libmv/autotrack/marker.h\n    libmv/autotrack/model.h\n    libmv/autotrack/predict_tracks.h\n    libmv/autotrack/quad.h\n    libmv/autotrack/reconstruction.h\n    libmv/autotrack/region.h\n    libmv/autotrack/tracks.h\n    libmv/base/aligned_malloc.h\n    libmv/base/array.h\n    libmv/base/id_generator.h\n    libmv/base/map.h\n    libmv/base/scoped_ptr.h\n    libmv/base/vector.h\n    libmv/base/vector_utils.h\n    libmv/build/build_config.h\n    libmv/image/array_nd.h\n    libmv/image/convolve.h\n    libmv/image/correlation.h\n    libmv/image/image_converter.h\n    libmv/image/image_drawing.h\n    libmv/image/image.h\n    libmv/image/sample.h\n    libmv/image/tuple.h\n    libmv/logging/logging.h\n    libmv/multiview/conditioning.h\n    libmv/multiview/euclidean_resection.h\n    libmv/multiview/fundamental.h\n    libmv/multiview/homography_error.h\n    libmv/multiview/homography.h\n    libmv/multiview/homography_parameterization.h\n    libmv/multiview/nviewtriangulation.h\n    libmv/multiview/panography.h\n    libmv/multiview/panography_kernel.h\n    libmv/multiview/projection.h\n    libmv/multiview/resection.h\n    libmv/multiview/triangulation.h\n    libmv/multiview/two_view_kernel.h\n    libmv/numeric/dogleg.h\n    libmv/numeric/function_derivative.h\n    libmv/numeric/levenberg_marquardt.h\n    libmv/numeric/numeric.h\n    libmv/numeric/poly.h\n    libmv/simple_pipeline/bundle.h\n    libmv/simple_pipeline/callbacks.h\n    libmv/simple_pipeline/camera_intrinsics.h\n    libmv/simple_pipeline/camera_intrinsics_impl.h\n    libmv/simple_pipeline/detect.h\n    libmv/simple_pipeline/distortion_models.h\n    libmv/simple_pipeline/initialize_reconstruction.h\n    libmv/simple_pipeline/intersect.h\n    libmv/simple_pipeline/keyframe_selection.h\n    libmv/simple_pipeline/modal_solver.h\n    libmv/simple_pipeline/packed_intrinsics.h\n    libmv/simple_pipeline/pipeline.h\n    libmv/simple_pipeline/reconstruction.h\n    libmv/simple_pipeline/reconstruction_scale.h\n    libmv/simple_pipeline/resect.h\n    libmv/simple_pipeline/tracks.h\n    libmv/threading/threading.h\n    libmv/threading/parallel_for.h\n    libmv/tracking/brute_region_tracker.h\n    libmv/tracking/hybrid_region_tracker.h\n    libmv/tracking/kalman_filter.h\n    libmv/tracking/klt_region_tracker.h\n    libmv/tracking/pyramid_region_tracker.h\n    libmv/tracking/region_tracker.h\n    libmv/tracking/retrack_region_tracker.h\n    libmv/tracking/track_region.h\n    libmv/tracking/trklt_region_tracker.h\n\n    third_party/msinttypes/inttypes.h\n    third_party/msinttypes/stdint.h\n  )\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT Khronos - old variant License\nDESCRIPTION: This code snippet defines the MIT Khronos license terms, permitting the use, copying, modification, merging, publishing, distribution, sublicensing, and/or selling of the Materials. It includes clauses regarding copyright notices, potential modifications affecting Khronos standards, and a disclaimer of warranty and limitations of liability.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and/or associated documentation files (the \"Materials\"), to deal in the Materials without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Materials, and to permit persons to whom the Materials are furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Materials.\n\nMODIFICATIONS TO THIS FILE MAY MEAN IT NO LONGER ACCURATELY REFLECTS KHRONOS STANDARDS. THE UNMODIFIED, NORMATIVE VERSIONS OF KHRONOS SPECIFICATIONS AND HEADER INFORMATION ARE LOCATED AT https://www.khronos.org/registry/\n\nTHE MATERIALS ARE PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the project, including both public and system include paths. These directories are used to locate header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC ..\n  PUBLIC ${CMAKE_CURRENT_BINARY_DIR}\n  ../../blenlib\n  ../../imbuf\n  ../../imbuf/movie\n)\n\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - Ceres Solver\nDESCRIPTION: Defines the include directories for the Ceres Solver library. This allows the compiler to locate the header files required for building the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/ceres/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  include\n  internal\n  config\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the GPU module, including the local include directory and Python include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/gpu/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ../../editors/include\n)\n\nset(INC_SYS\n  ${PYTHON_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories for internal and external headers. These include directories are used to locate the necessary header files during compilation. It includes internal directories and also system include directories related to Wayland.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/wayland_dynload/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  extern\n\n  # For internal includes.\n  intern\n)\n\nset(INC_SYS\n  ${wayland-client_INCLUDE_DIRS}\n  ${wayland-cursor_INCLUDE_DIRS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the Library\nDESCRIPTION: This snippet defines the bf_editor_screen library using the blender_add_lib macro, specifying the source files, include directories, and libraries to link against.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_screen \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (Empty)\nDESCRIPTION: This snippet defines system include directories, but it's currently empty. It is meant to hold the system-level include paths if needed.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/renderdoc_dynload/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet defines the system include directories required for compiling the game engine logic bricks. It includes paths to external libraries like moto, RecastNavigation, Detour, and Boost.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/GameLogic/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n  ../../../intern/moto/include\n        ../../../extern/recastnavigation/Recast/Include\n        ../../../extern/recastnavigation/Detour/Include\n  ${BOOST_INCLUDE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVDB\nDESCRIPTION: This snippet configures the build for OpenVDB. It appends the OpenVDB include directories and defines the `WITH_OPENVDB` preprocessor definition along with other OpenVDB definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_OPENVDB)\n  list(APPEND INC\n    ../../../../intern/openvdb\n  )\n  list(APPEND INC_SYS\n    ${OPENVDB_INCLUDE_DIRS}\n  )\n  add_definitions(-DWITH_OPENVDB ${OPENVDB_DEFINITIONS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Build Info Target - CMake\nDESCRIPTION: This snippet adds an explicit dependency from the `blenderplayer` target to the `buildinfo_player` target when build information is enabled (`WITH_BUILDINFO`). This ensures that the build information is generated before building the blenderplayer executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  # explicitly say that the executable depends on the buildinfo\n  add_dependencies(blenderplayer buildinfo_player)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building Thumbnailer Appex (macOS)\nDESCRIPTION: This snippet configures the build process for the blender-thumbnailer app extension on macOS. It defines macOS-specific source files, creates an executable with the MACOSX_BUNDLE option, sets platform-specific linker flags and libraries, links bf_blenlib and QuickLookThumbnailing framework, sets the install RPATH, prevents Xcode from overwriting the signature and adds a custom command to code sign the appex after the build.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blendthumb/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(APPLE)\n  # -----------------------------------------------------------------------------\n  # Build `blender-thumbnailer.appex` app extension.\n  set(SRC_APPEX\n    src/thumbnail_provider.h\n    src/thumbnail_provider.mm\n  )\n\n  add_executable(blender-thumbnailer MACOSX_BUNDLE ${SRC} ${SRC_APPEX})\n  setup_platform_linker_flags(blender-thumbnailer)\n  setup_platform_linker_libs(blender-thumbnailer)\n  target_link_libraries(blender-thumbnailer\n    bf_blenlib\n    # Avoid linker error about undefined _main symbol.\n    \"-e _NSExtensionMain\"\n    \"-framework QuickLookThumbnailing\"\n  )\n  # The RPATH here points to the main Blender Resources/lib directory.\n  # Avoid duplicating the large `dylibs` (~300MB).\n  set_target_properties(blender-thumbnailer PROPERTIES\n    INSTALL_RPATH \"@loader_path/../../../../Resources/lib\"\n    # Prevent Xcode from overwriting the signature.\n    XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY \"\"\n  )\n  # CMake needs the target defined in the same file as add_custom_command.\n  # It needs to be code-signed (ad-hoc in this case)\n  # even on developer machine to generate thumbnails.\n  # Command taken from XCode build process.\n  add_custom_command(\n    TARGET blender-thumbnailer POST_BUILD\n    COMMAND codesign --deep --force --sign -\n      --entitlements \"${CMAKE_SOURCE_DIR}/release/darwin/thumbnailer_entitlements.plist\"\n      --timestamp=none $<TARGET_BUNDLE_DIR:blender-thumbnailer>\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing CPU Check Target\nDESCRIPTION: This CMake code snippet conditionally installs the `blender_cpu_check` target to the `./lib` directory.  The installation is performed only if the `WITH_CPU_CHECK` variable is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\n    if(WITH_CPU_CHECK)\n      install(\n        TARGETS blender_cpu_check\n        DESTINATION \"./lib\"\n      )\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Haru Integration\nDESCRIPTION: This snippet conditionally adds Haru support for PDF export. If WITH_HARU is enabled, it appends the relevant source file, include directories, and libraries to the respective lists.  It also links against TIFF to work around Haru < 2.4.0 using TIFF fax codes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/grease_pencil/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_HARU)\n  list(APPEND SRC\n    intern/grease_pencil_io_export_pdf.cc\n  )\n  list(APPEND INC_SYS\n    ${HARU_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${HARU_LIBRARIES}\n\n    # Haru needs `TIFFFaxBlackCodes` & `TIFFFaxWhiteCodes` symbols from TIFF.\n    # Can be removed with Haru 2.4.0. They should be shipping with their own\n    # Fax codes defined by default from that version onward.\n    ${TIFF_LIBRARY}\n  )\n  add_definitions(-DWITH_HARU)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Batched Testing Option\nDESCRIPTION: This option determines whether multiple tests should be run in a single Blender invocation, improving test execution speed. Disabling it is useful for debugging threading and memory issues.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_54\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_TESTS_BATCHED \"\\\nRun multiple tests in a single Blender invocation, for faster test execution\"\n  ON\n)\nmark_as_advanced(WITH_TESTS_BATCHED)\n```\n\n----------------------------------------\n\nTITLE: Listing Vertex Shader Files\nDESCRIPTION: This snippet defines a CMake variable `SRC_GLSL_VERT` containing a list of GLSL vertex shader files. These files are used for rendering vertex data in the GPU pipeline. Each file is a string representing the filename of a vertex shader.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/gpu/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_GLSL_VERT\n  gpu_shader_2D_area_borders_vert.glsl\n  gpu_shader_2D_image_rect_vert.glsl\n  gpu_shader_2D_image_vert.glsl\n  gpu_shader_2D_node_socket_vert.glsl\n  gpu_shader_2D_nodelink_vert.glsl\n  gpu_shader_2D_point_uniform_size_aa_vert.glsl\n  gpu_shader_2D_point_uniform_size_outline_aa_vert.glsl\n  gpu_shader_2D_point_varying_size_varying_color_vert.glsl\n  gpu_shader_2D_vert.glsl\n  gpu_shader_2D_widget_base_vert.glsl\n  gpu_shader_2D_widget_shadow_vert.glsl\n  gpu_shader_3D_clipped_uniform_color_vert.glsl\n  gpu_shader_3D_flat_color_vert.glsl\n  gpu_shader_3D_image_vert.glsl\n  gpu_shader_3D_line_dashed_uniform_color_vert.glsl\n  gpu_shader_3D_normal_vert.glsl\n  gpu_shader_3D_point_uniform_size_aa_vert.glsl\n  gpu_shader_3D_point_varying_size_varying_color_vert.glsl\n  gpu_shader_3D_smooth_color_vert.glsl\n  gpu_shader_display_fallback_vert.glsl\n  gpu_shader_gpencil_stroke_vert.glsl\n  gpu_shader_icon_multi_vert.glsl\n  gpu_shader_icon_vert.glsl\n  gpu_shader_keyframe_shape_vert.glsl\n  gpu_shader_sequencer_strips_vert.glsl\n  gpu_shader_sequencer_thumbs_vert.glsl\n  gpu_shader_text_vert.glsl\n)\n```\n\n----------------------------------------\n\nTITLE: Enable Draw Manager Debug\nDESCRIPTION: This option adds extra debug capabilities to the Draw Manager.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_DRAW_DEBUG \"Add extra debug capabilities to Draw Manager\" OFF)\nmark_as_advanced(WITH_DRAW_DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Adding libmv Library\nDESCRIPTION: This CMake code snippet uses the `blender_add_lib` function to define and build the `bf_intern_libmv` library.  It specifies the library name, the source files to compile (`SRC`), include directories (`INC`, `INC_SYS`), and libraries to link against (`LIB`).  `SRC`, `INC`, `INC_SYS`, and `LIB` are assumed to be previously defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_libmv \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the source files for the GMock library. It lists the `.cc` files that will be compiled to build the library. The commented out files are excluded from the current configuration.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gmock/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  # src/gmock-all.cc\n  # src/gmock_main.cc\n\n  src/gmock.cc\n  src/gmock-cardinalities.cc\n  src/gmock-internal-utils.cc\n  src/gmock-matchers.cc\n  src/gmock-spec-builders.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Windows 7 Compatibility Files (CMake)\nDESCRIPTION: This snippet conditionally installs `bcompat7.dll` and `api-ms-win-core-path-l1-1-0.dll` if `WITH_WINDOWS_7` is enabled. These DLLs are installed to the `${TARGETDIR_EXE}` directory and are configured for `Release`, `RelWithDebInfo`, `MinSizeRel`, and `Debug` configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\n  if(WITH_WINDOWS_7)\n    install(\n      FILES ${LIBDIR}/bcompat7/bin/bcompat7.dll\n            ${LIBDIR}/bcompat7/bin/api-ms-win-core-path-l1-1-0.dll\n      DESTINATION ${TARGETDIR_EXE}\n      CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel;Debug\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet specifies the library dependencies for the launcher.  It uses the `set` command to define the `LIB` variable, which contains a list of libraries to link against. `PRIVATE` indicates that these libraries are only used by this specific target.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Launcher/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::gpu\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n  bf_intern_moto\n  ge_expressions\n  ge_logic_bricks\n  ge_msg_network\n  ge_device\n  ge_blender_routines\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Unit Tests\nDESCRIPTION: This snippet configures unit tests for the `bf_functions` library if the `WITH_GTESTS` option is enabled. It defines the source files, include directories, and library dependencies for the test suite and uses `blender_add_test_suite_lib` to create the test executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/functions/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_INC\n  )\n  set(TEST_SRC\n    tests/FN_field_test.cc\n    tests/FN_lazy_function_test.cc\n    tests/FN_multi_function_procedure_test.cc\n    tests/FN_multi_function_test.cc\n\n    tests/FN_multi_function_test_common.hh\n  )\n  set(TEST_LIB\n    bf_functions\n  )\n  blender_add_test_suite_lib(function \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Node Field Type Inference Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for node field type inference using the `bl_node_field_type_inference.py` Python script. It also specifies the test directory where the node group tests are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_node_field_type_inference\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_node_field_type_inference.py\n    --\n    --testdir \"${TEST_SRC_DIR}/node_group\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Definition\nDESCRIPTION: This snippet conditionally adds a compilation definition, `WITH_LIBC_MALLOC_HOOK_WORKAROUND`, if the `WITH_LIBC_MALLOC_HOOK_WORKAROUND` CMake option is enabled. This definition enables a workaround for potential issues with libc's malloc hook.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libc_compat/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_LIBC_MALLOC_HOOK_WORKAROUND)\n  target_compile_definitions(bf_intern_libc_compat\n    PRIVATE WITH_LIBC_MALLOC_HOOK_WORKAROUND\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure pre-compiled libraries\nDESCRIPTION: This snippet defines options for using pre-compiled libraries on UNIX systems (excluding macOS). `WITH_LIBS_PRECOMPILED` enables detecting and linking against pre-compiled libraries, while `WITH_STATIC_LIBS` tries to link with static libraries for portability. These options affect how external dependencies are handled during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  # Optionally build without pre-compiled libraries.\n  # NOTE: this could be supported on all platforms however in practice UNIX is the only platform\n  # that has good support for detecting installed libraries.\n  option(WITH_LIBS_PRECOMPILED \"\\\nDetect and link against pre-compiled libraries (typically found under \\\"../lib/\\\"). \\\nDisabling this option will use the system libraries although cached paths \\\nthat point to pre-compiled libraries will be left as-is.\" \n    ON\n  )\n  mark_as_advanced(WITH_LIBS_PRECOMPILED)\n\n  option(WITH_STATIC_LIBS \"\\\nTry to link with static libraries, as much as possible, \\\nto make blender more portable across distributions\"\n    OFF\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags (GCC/Clang)\nDESCRIPTION: This snippet sets compiler flags for GCC and Clang compilers to suppress unused result warnings and removes missing declarations warnings.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  add_c_flag(\n    \"-Wno-unused-result\"\n  )\n  remove_cc_flag(\n    \"-Wmissing-declarations\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (CMake)\nDESCRIPTION: This snippet sets the system include directories. Currently, it is empty but can be extended if external libraries are required that need to be included as system headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_node/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This snippet defines the source files for the `bf_intern_clog` library. It includes `clog.c` and `CLG_log.h`, indicating that the library's implementation is in C, and the header file contains the interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/clog/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  clog.c\n\n  CLG_log.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Sub Folder in CMake\nDESCRIPTION: This snippet conditionally sets the `_LIB_SUB_FOLDER` variable to `lib/` if the target platform is not Windows (`WIN32`). This variable is later used to define the output directories for the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32)\n  set(_LIB_SUB_FOLDER \"lib/\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining source files for cycles_subd\nDESCRIPTION: Defines the source files that make up the cycles_subd library. These are stored in the SRC variable. These cpp files contain the implementation of the library's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/subd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  dice.cpp\n  interpolation.cpp\n  osd.cpp\n  patch.cpp\n  split.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Release Notes Script\nDESCRIPTION: This command executes the `create_release_notes.py` script with specific arguments. The `--version` argument specifies the Blender version, and the `--format` argument determines the output format (e.g., HTML).\nSOURCE: https://github.com/upbge/upbge/blob/master/release/lts/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n./create_release_notes.py --version 3.3.2 --format=html\n```\n\n----------------------------------------\n\nTITLE: Initializing Theora Project with CMake\nDESCRIPTION: This snippet initializes the CMake project for Theora, specifying the minimum required CMake version and the project language (C). It also sets the CMake module path to the project source directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.0)\nproject(theora LANGUAGES C)\n\nset(CMAKE_MODULE_PATH \"${PROJECT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Flags for Code Coverage - CMake\nDESCRIPTION: This snippet appends code coverage flags to the CMAKE_C_FLAGS_DEBUG and CMAKE_CXX_FLAGS_DEBUG variables when WITH_COMPILER_CODE_COVERAGE is enabled. This enables code coverage analysis during debug builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_93\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_COMPILER_CODE_COVERAGE)\n  string(APPEND CMAKE_C_FLAGS_DEBUG \" ${COMPILER_CODE_COVERAGE_CFLAGS}\")\n  string(APPEND CMAKE_CXX_FLAGS_DEBUG \" ${COMPILER_CODE_COVERAGE_CXXFLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Test Output Directory\nDESCRIPTION: Creates the test output directory using the `execute_process` command. This ensures that the directory exists before the tests are run, preventing potential errors.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/view_layer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nexecute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${TEST_OUT_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notices to Source Files\nDESCRIPTION: This code snippet illustrates the standard notices that should be added to the start of each source file in a GPL-licensed program. It includes the program's name, copyright information, and a reference to the GNU General Public License. It also specifies that the program is distributed with no warranty.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<one line to give the program's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Adding the NLA Editor Library (blender_add_lib)\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to define and create the `bf_editor_space_nla` library. It passes the source files, include directories, system include directories, and library dependencies as arguments to the macro.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_nla/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_nla \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Set API Source Files\nDESCRIPTION: This snippet sets the list of API source files used for RNA generation.  These files define the API for the RNA system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(APISRC\n  rna_action_api.cc\n  rna_actuator_api.cc\n  rna_animation_api.cc\n  rna_armature_api.cc\n  rna_camera_api.cc\n  rna_controller_api.cc\n  rna_curve_api.cc\n  rna_curves_api.cc\n  rna_fcurve_api.cc\n  rna_grease_pencil_api.cc\n  rna_image_api.cc\n  rna_lattice_api.cc\n  rna_main_api.cc\n  rna_material_api.cc\n  rna_mesh_api.cc\n  rna_meta_api.cc\n  rna_object_api.cc\n  rna_pose_api.cc\n  rna_python_proxy.cc\n  rna_scene_api.cc\n  rna_sensor_api.cc\n  rna_sequencer_api.cc\n  rna_sound_api.cc\n  rna_space_api.cc\n  rna_text_api.cc\n  rna_texture_api.cc\n  rna_ui_api.cc\n  rna_vfont_api.cc\n  rna_wm_api.cc\n  rna_wm_gizmo_api.cc\n  rna_workspace_api.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library with Blender CMake Function\nDESCRIPTION: This code snippet uses the `blender_add_lib` CMake function to create the `ge_physics_dummy` library. It specifies the library name, source files (`SRC`), include directories (`INC`), system include directories (`INC_SYS`), and library dependencies (`LIB`). This function is specific to the Blender build system.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Common/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_physics_dummy \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Interactive Program GPL Notice\nDESCRIPTION: This code describes the short notice that an interactive program should output when it starts. The notice should include the program name, version, copyright information, warranty disclaimer, and instructions on how to view the license details.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/GPL-2.0-or-later.txt#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Installation Directories in CMake\nDESCRIPTION: This snippet sets installation directories based on the operating system (UNIX, Windows, Apple) and whether Blender is built as a Python module. It adjusts paths for bpy modules, libraries, and documentation according to installation type.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  if(WITH_PYTHON_MODULE)\n    if(WITH_INSTALL_PORTABLE)\n      set(TARGETDIR_BPY \"bpy\")\n      set(TARGETDIR_VER \"bpy/${BLENDER_VERSION}\")\n      set(TARGETDIR_LIB \"bpy/lib\")\n    else()\n      set(TARGETDIR_BPY ${PYTHON_SITE_PACKAGES}/bpy)\n      set(TARGETDIR_VER ${PYTHON_SITE_PACKAGES}/bpy/${BLENDER_VERSION})\n      set(TARGETDIR_LIB ${PYTHON_SITE_PACKAGES}/bpy/lib)\n    endif()\n  else()\n    if(WITH_INSTALL_PORTABLE)\n      set(TARGETDIR_VER \"${BLENDER_VERSION}\")\n      set(TARGETDIR_TEXT \".\")\n      set(TARGETDIR_LIB \"lib\")\n    else()\n      set(TARGETDIR_VER \"share/upbge/${BLENDER_VERSION}\")\n      set(TARGETDIR_TEXT \"share/doc/upbge\")\n    endif()\n  endif()\n  set(TARGETDIR_SITE_PACKAGES \"${TARGETDIR_VER}/python/lib/python${PYTHON_VERSION}/site-packages\")\nelif(WIN32)\n  if(WITH_PYTHON_MODULE)\n    set(TARGETDIR_BPY ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy)\n    set(TARGETDIR_VER ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy/${BLENDER_VERSION})\n    # Important the DLL's are next to `__init__.pyd` otherwise it won't load.\n    set(TARGETDIR_LIB ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy)\n    set(TARGETDIR_EXE ${CMAKE_INSTALL_PREFIX_WITH_CONFIG}/bpy)\n  else()\n    set(TARGETDIR_VER \"${BLENDER_VERSION}\")\n    set(TARGETDIR_TEXT \".\")\n    set(TARGETDIR_LIB \"blender.shared\")\n    set(TARGETDIR_EXE \".\")\n  endif()\n  set(TARGETDIR_SITE_PACKAGES \"${TARGETDIR_VER}/python/lib/site-packages\")\nelif(APPLE)\n  if(WITH_PYTHON_MODULE)\n    if(WITH_INSTALL_PORTABLE)\n      set(TARGETDIR_BPY \"bpy\")\n      set(TARGETDIR_VER \"bpy/${BLENDER_VERSION}\")\n      set(TARGETDIR_LIB \"bpy/lib\")\n    else()\n      # Paths defined in terms of `site-packages` since the `site-packages`\n      # directory can be a symbolic-link (brew for example).\n      set(TARGETDIR_BPY ${PYTHON_SITE_PACKAGES}/bpy)\n      set(TARGETDIR_VER ${PYTHON_SITE_PACKAGES}/bpy/${BLENDER_VERSION})\n      set(TARGETDIR_LIB ${PYTHON_SITE_PACKAGES}/bpy/lib)\n    endif()\n  else()\n    set(TARGETDIR_VER \"Blender.app/Contents/Resources/${BLENDER_VERSION}\")\n    set(TARGETDIR_LIB \"Blender.app/Contents/Resources/lib\")\n    set(TARGETDIR_TEXT \"Blender.app/Contents/Resources/text\")\n  endif()\n  set(TARGETDIR_SITE_PACKAGES \"${TARGETDIR_VER}/python/lib/python${PYTHON_VERSION}/site-packages\")\n  # Skip re-linking on CPACK / install.\n  set_target_properties(blender PROPERTIES BUILD_WITH_INSTALL_RPATH true)\n  if(WITH_BLENDER_THUMBNAILER)\n    set_target_properties(blender-thumbnailer PROPERTIES BUILD_WITH_INSTALL_RPATH true)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cycles Render Tests\nDESCRIPTION: This snippet configures Cycles render tests, including handling OSL (Open Shading Language) tests. It iterates through specified test devices, creates test names, and adds render tests using the add_render_test function, setting properties for serial execution on non-CPU devices.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES)\n    set(_cycles_blocklist \"\")\n    set(_cycles_known_test_devices CPU CUDA OPTIX HIP HIP-RT METAL METAL-RT ONEAPI ONEAPI-RT)\n    if((NOT WITH_CYCLES_OSL) OR (WITH_CYCLES_TEST_OSL AND WITH_CYCLES_OSL))\n      # Disable OSL tests if built without OSL or\n      # Disable OSL tests during the \"normal\" test phase to avoid double\n      # testing during the OSL test phase.\n      set(_cycles_blocklist OSL)\n    endif()\n    foreach(_cycles_device ${CYCLES_TEST_DEVICES})\n      if(NOT ${_cycles_device} IN_LIST _cycles_known_test_devices)\n        message(FATAL_ERROR \"Unknown Cycles test device ${_cycles_device}.\"\n            \"Supported devices are: ${_cycles_known_test_devices}\")\n      endif()\n      string(TOLOWER \"${_cycles_device}\" _cycles_device_lower)\n      set(_cycles_render_tests bake;${render_tests};osl)\n\n      foreach(render_test ${_cycles_render_tests})\n        set(_cycles_test_name \"cycles_${render_test}_${_cycles_device_lower}\")\n        if(NOT(WITH_CYCLES_TEST_OSL AND WITH_CYCLES_OSL AND (\"${render_test}\" STREQUAL \"osl\")))\n          # Only run OSL basic tests during this phase if WITH_CYCLES_TEST_OSL isn't enabled\n          add_render_test(\n            ${_cycles_test_name}\n            ${CMAKE_CURRENT_LIST_DIR}/cycles_render_tests.py\n            --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n            --outdir \"${TEST_OUT_DIR}/cycles\"\n            --device ${_cycles_device}\n            --blocklist ${_cycles_blocklist}\n          )\n          if(NOT (\"${_cycles_device_lower}\" STREQUAL \"cpu\"))\n            set_tests_properties(${_cycles_test_name} PROPERTIES RUN_SERIAL TRUE)\n          endif()\n        endif()\n\n        if(WITH_CYCLES_TEST_OSL AND WITH_CYCLES_OSL)\n          # OSL is only supported with CPU and OptiX\n          # TODO: Enable OptiX support once it's more stable\n          if((\"${_cycles_device_lower}\" STREQUAL \"cpu\") OR\n              (\"${_cycles_device_lower}\" STREQUAL \"optix\"))\n            add_render_test(\n              ${_cycles_test_name}_osl\n              ${CMAKE_CURRENT_LIST_DIR}/cycles_render_tests.py\n              --testdir \"${TEST_SRC_DIR}/render/${render_test}\"\n              --outdir \"${TEST_OUT_DIR}/cycles_osl\"\n              --device ${_cycles_device}\n              --osl\n            )\n            if(NOT (\"${_cycles_device_lower}\" STREQUAL \"cpu\"))\n              set_tests_properties(${_cycles_test_name}_osl PROPERTIES RUN_SERIAL TRUE)\n            endif()\n          endif()\n        endif()\n\n        unset(_cycles_test_name)\n      endforeach()\n    endforeach()\n    unset(_cycles_blocklist)\n    unset(_cycles_known_test_devices)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Adding wcwidth Library\nDESCRIPTION: This snippet uses the `blender_add_lib` function to create the wcwidth library. It specifies the target name (`extern_wcwidth`), source files, include directories, system include directories, and library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/wcwidth/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_wcwidth \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the blentranslation library. 'PUBLIC .' specifies the current directory as a public include path. '../makesrna' adds the makesrna directory as another include path. These paths are essential for the compiler to find header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library (bf_editor_undo) - CMake\nDESCRIPTION: This snippet uses the `blender_add_lib` macro to create the 'bf_editor_undo' library. It takes the source files, include directories, system include directories, and library dependencies defined in the previous `set` commands as input, linking the dependencies as PRIVATE.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/undo/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_undo \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining BVH (Bounding Volume Hierarchy) Header Files - CMake\nDESCRIPTION: This CMake code defines the header files related to BVH (Bounding Volume Hierarchy) construction and traversal in the Cycles kernel.  It is used for accelerating ray tracing.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_BVH_HEADERS\n  bvh/bvh.h\n  bvh/nodes.h\n  bvh/shadow_all.h\n  bvh/local.h\n  bvh/traversal.h\n  bvh/types.h\n  bvh/util.h\n  bvh/volume.h\n  bvh/volume_all.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: This snippet sets the include directories for the `msgfmt` target. The `blender_target_include_dirs` function is used to specify the include paths based on the provided include variables.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n)\n\nblender_target_include_dirs(msgfmt ${INC})\n```\n\n----------------------------------------\n\nTITLE: Setting Mantaflow Version and Definitions - CMake\nDESCRIPTION: This snippet sets the Mantaflow version and defines a compiler flag `WITH_FLUID` to enable fluid simulation features. It also initializes variables for managing dependencies and NUMPY support.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/mantaflow/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MANTAVERSION \"0.13\")\n\nadd_definitions(-DWITH_FLUID=1)\n\n# Compile Mantaflow dependencies too (e.g. `cnpy` for NUMPY file IO).\n# Make sure that dependencies exist before enabling this option\n# by updating the source files in `extern/`.\nset(WITH_MANTA_DEPENDENCIES 0)\n\n# Enable Mantaflow NUMPY support.\nset(WITH_MANTA_NUMPY 0)\n```\n\n----------------------------------------\n\nTITLE: Formatting with iostreams\nDESCRIPTION: This snippet demonstrates formatting a floating-point number using iostreams in C++.  It sets the precision to 2 and uses fixed-point notation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nstd::cout << std::setprecision(2) << std::fixed << 1.23456 << \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Conditional Compiler Flag Addition (GCC)\nDESCRIPTION: This code snippet checks if the compiler is GCC (using CMAKE_COMPILER_IS_GNUCXX). If true, it appends the '-fpermissive' flag to the CMAKE_CXX_FLAGS variable. This flag relaxes some C++ standard conformance checks in GCC.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCXX)\n  # Needed for GCC 4.6+.\n  string(APPEND CMAKE_CXX_FLAGS \" -fpermissive\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Compositor Nodes\nDESCRIPTION: This snippet defines the include directories required for compiling the compositor nodes. It includes local directories within the Blender project structure, as well as the generated RNA prototypes directory. These include paths provide access to the necessary header files for the compositor node implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/composite/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../intern\n  ../../editors/include\n  ../../compositor\n  ../../makesrna\n  ../../compositor/algorithms\n  ../../compositor/cached_resources\n  ../../compositor/derived_resources\n  ../../compositor/utilities\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Inclusion with CMake\nDESCRIPTION: Conditionally includes subdirectories for libraries like `bullet2`, `draco`, `binreloc`, `recastnavigation`, `lzo`, and `lzma`, based on the presence of `WITH_*` flags. The inclusion of `bullet2` also considers whether a system-provided version is being used.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BULLET)\n  if(NOT WITH_SYSTEM_BULLET)\n    add_subdirectory(bullet2)\n  endif()\nendif()\n\nif(WITH_DRACO)\n  add_subdirectory(draco)\nendif()\n\nif(WITH_BINRELOC)\n  add_subdirectory(binreloc)\nendif()\n\nif(WITH_GAMEENGINE)\n\tadd_subdirectory(recastnavigation)\nendif()\n\nif(WITH_LZO AND NOT WITH_SYSTEM_LZO)\n  add_subdirectory(lzo)\nendif()\n\nif(WITH_LZMA)\n  add_subdirectory(lzma)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including ExternalProject Module\nDESCRIPTION: Includes the ExternalProject module, which is used to manage external dependencies as part of the build process. This is a crucial module for building external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExternalProject)\n```\n\n----------------------------------------\n\nTITLE: Adding Test Suite Executable (CMake)\nDESCRIPTION: This snippet adds a test suite executable named 'cycles' using the source files, include directories, and libraries defined earlier. It's dependent on `WITH_GTESTS` and `WITH_CYCLES_LOGGING` being enabled. The function `blender_add_test_suite_executable` is likely a custom function provided by the Blender project to simplify the creation of test executables.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS AND WITH_CYCLES_LOGGING)\n  set(INC_SYS )\n  blender_add_test_suite_executable(cycles \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending compiler flag for host task execution\nDESCRIPTION: This snippet conditionally appends a compiler flag to enable oneAPI SYCL host task execution based on a CMake option.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_49\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_ONEAPI_HOST_TASK_EXECUTION)\n    list(APPEND sycl_compiler_flags -DWITH_ONEAPI_SYCL_HOST_TASK)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Defines the system include directories needed for compiling the Moto library. In this instance, it is set to an empty list, indicating no system-level includes are explicitly required.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/moto/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional CUDA/HIP Library Inclusion with CMake\nDESCRIPTION: Conditionally includes `cuew` (CUDA) and `hipew` (HIP) libraries if Cycles or OpenSubdiv are enabled, and if the relevant device support (CUDA/OPTIX or HIP) and dynamic loading options are also enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES OR WITH_OPENSUBDIV)\n  if((WITH_CYCLES_DEVICE_CUDA OR WITH_CYCLES_DEVICE_OPTIX) AND WITH_CUDA_DYNLOAD)\n    add_subdirectory(cuew)\n  endif()\n  if(WITH_CYCLES_DEVICE_HIP AND WITH_HIP_DYNLOAD)\n    add_subdirectory(hipew)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This CMake command defines the source files (`SRC`) that will be compiled into the ITASC library.  It includes both `.cpp` and `.hpp` files for the core ITASC components and KDL.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/itasc/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  Armature.cpp\n  Cache.cpp\n  ConstraintSet.cpp\n  ControlledObject.cpp\n  CopyPose.cpp\n  Distance.cpp\n  FixedObject.cpp\n  MovingFrame.cpp\n  Scene.cpp\n  UncontrolledObject.cpp\n  WDLSSolver.cpp\n  WSDLSSolver.cpp\n  WorldObject.cpp\n  eigen_types.cpp\n\n  kdl/chain.cpp\n  kdl/chainfksolverpos_recursive.cpp\n  kdl/chainjnttojacsolver.cpp\n  kdl/frameacc.cpp\n  kdl/frames.cpp\n  kdl/frames_io.cpp\n  kdl/framevel.cpp\n  kdl/inertia.cpp\n  kdl/jacobian.cpp\n  kdl/jntarray.cpp\n  kdl/jntarrayacc.cpp\n  kdl/jntarrayvel.cpp\n  kdl/joint.cpp\n  kdl/kinfam_io.cpp\n  kdl/segment.cpp\n  kdl/tree.cpp\n  kdl/treefksolverpos_recursive.cpp\n  kdl/treejnttojacsolver.cpp\n  kdl/utilities/error_stack.cpp\n  kdl/utilities/utility.cpp\n  kdl/utilities/utility_io.cpp\n\n  Armature.hpp\n  Cache.hpp\n  ConstraintSet.hpp\n  ControlledObject.hpp\n  CopyPose.hpp\n  Distance.hpp\n  FixedObject.hpp\n  MovingFrame.hpp\n  Object.hpp\n  Scene.hpp\n  Solver.hpp\n  UncontrolledObject.hpp\n  WDLSSolver.hpp\n  WSDLSSolver.hpp\n  WorldObject.hpp\n  eigen_types.hpp\n  kdl/chain.hpp\n  kdl/chainfksolver.hpp\n  kdl/chainfksolverpos_recursive.hpp\n  kdl/chainjnttojacsolver.hpp\n  kdl/frameacc.hpp\n  kdl/frames.hpp\n  kdl/frames_io.hpp\n  kdl/framevel.hpp\n  kdl/inertia.hpp\n  kdl/jacobian.hpp\n  kdl/jntarray.hpp\n  kdl/jntarrayacc.hpp\n  kdl/jntarrayvel.hpp\n  kdl/joint.hpp\n  kdl/kinfam_io.hpp\n  kdl/segment.hpp\n  kdl/tree.hpp\n  kdl/treefksolver.hpp\n  kdl/treefksolverpos_recursive.hpp\n  kdl/treejnttojacsolver.hpp\n  kdl/utilities/error.h\n  kdl/utilities/error_stack.h\n  kdl/utilities/kdl-config.h\n  kdl/utilities/rall1d.h\n  kdl/utilities/rall2d.h\n  kdl/utilities/svd_eigen_HH.hpp\n  kdl/utilities/traits.h\n  kdl/utilities/utility.h\n  kdl/utilities/utility_io.h\n\n  kdl/frameacc.inl\n  kdl/frames.inl\n  kdl/framevel.inl\n)\n```\n\n----------------------------------------\n\nTITLE: Sound/Joystick Options\nDESCRIPTION: This snippet defines options for enabling audio and joystick support using SDL, OpenAL, CoreAudio, JACK, PulseAudio, PipeWire and WASAPI. Platform specific settings are applied as needed.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\n# Sound output/Joysticks\noption(WITH_SDL \"Enable SDL for sound/joysticks\" ON)\noption(WITH_OPENAL \"Enable OpenAL Support (http://www.openal.org)\" ON)\nif(APPLE)\n  option(WITH_COREAUDIO \"Enable CoreAudio for audio support on macOS\" ON)\nelse()\n  set(WITH_COREAUDIO OFF)\nendif()\nif(NOT WIN32)\n  set(_option_default ON)\n  if(APPLE)\n    set(_option_default OFF)\n  endif()\n  option(WITH_JACK \"Enable JACK Support (http://www.jackaudio.org)\" ${_option_default})\n  unset(_option_default)\n  option(WITH_JACK_DYNLOAD \"Enable runtime dynamic JACK libraries loading\" OFF)\nelse()\n  set(WITH_JACK OFF)\nendif()\nif(UNIX AND NOT APPLE)\n  option(WITH_PULSEAUDIO \"Enable PulseAudio for audio support on Linux\" ON)\n  option(WITH_PULSEAUDIO_DYNLOAD \"Enable runtime dynamic PulseAudio libraries loading\" OFF)\n  option(WITH_PIPEWIRE \"Enable Pipewire for audio support on Linux\" ON)\n  option(WITH_PIPEWIRE_DYNLOAD \"Enable runtime dynamic Pipewire libraries loading\" OFF)\nelse()\n  set(WITH_PULSEAUDIO OFF)\n  set(WITH_PIPEWIRE OFF)\nendif()\nif(WIN32)\n  option(WITH_WASAPI \"Enable Windows Audio Sessions API for audio support on Windows\" ON)\nelse()\n  set(WITH_WASAPI OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring LP Test (CMake)\nDESCRIPTION: This snippet configures the build and dependencies for the `lp_test` executable if the LEMON library has LP (Linear Programming) support. It defines dependencies on GLPK, CPLEX, CLP, and SOPLEX libraries, linking them to `lp_test`. It also handles copying DLLs on Windows for GLPK and CPLEX.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_LP)\n  IF(${CMAKE_BUILD_TYPE} STREQUAL \"Maintainer\")\n    ADD_EXECUTABLE(lp_test lp_test.cc)\n  ELSE()\n    ADD_EXECUTABLE(lp_test EXCLUDE_FROM_ALL lp_test.cc)\n  ENDIF()\n\n  SET(LP_TEST_LIBS lemon)\n\n  IF(LEMON_HAVE_GLPK)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${GLPK_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CPLEX)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${ILOG_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_CLP)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${COIN_CLP_LIBRARIES})\n  ENDIF()\n  IF(LEMON_HAVE_SOPLEX)\n    SET(LP_TEST_LIBS ${LP_TEST_LIBS} ${SOPLEX_LIBRARIES})\n  ENDIF()\n\n  TARGET_LINK_LIBRARIES(lp_test ${LP_TEST_LIBS})\n  ADD_TEST(lp_test lp_test)\n  ADD_DEPENDENCIES(check lp_test)\n\n  IF(WIN32 AND LEMON_HAVE_GLPK)\n    GET_TARGET_PROPERTY(TARGET_LOC lp_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET lp_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/glpk.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/libltdl3.dll ${TARGET_PATH}\n      COMMAND ${CMAKE_COMMAND} -E copy ${GLPK_BIN_DIR}/zlib1.dll ${TARGET_PATH}\n    )\n  ENDIF()\n\n  IF(WIN32 AND LEMON_HAVE_CPLEX)\n    GET_TARGET_PROPERTY(TARGET_LOC lp_test LOCATION)\n    GET_FILENAME_COMPONENT(TARGET_PATH ${TARGET_LOC} PATH)\n    ADD_CUSTOM_COMMAND(TARGET lp_test POST_BUILD\n      COMMAND ${CMAKE_COMMAND} -E copy ${ILOG_CPLEX_DLL} ${TARGET_PATH}\n    )\n  ENDIF()\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with WITH_HEADLESS\nDESCRIPTION: This snippet adds a preprocessor definition if the WITH_HEADLESS option is enabled. This allows for conditional compilation based on whether the headless mode is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/screen/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_HEADLESS)\n  add_definitions(-DWITH_HEADLESS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This code sets the include directories for the project. It defines variables for local includes (INC) and system includes (INC_SYS). It initializes INC to the current directory. It sets up include directories for the bf_intern_atomic target.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/atomic/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Information Generation - CMake\nDESCRIPTION: This snippet configures the generation of build information, creating a header file with build details.  It includes setting compiler and linker flags, defining the build system, and using `configure_file` to generate a static header file with escaped quotes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  add_definitions(-DWITH_BUILDINFO)\n  # --------------------------------------------------------------------------\n  # These defines could all be moved into the header below\n\n  # Write strings into a separate header since we can escape C-strings\n  # in a way that's not practical when passing defines.\n  set(BUILD_PLATFORM \"${CMAKE_SYSTEM_NAME}\")\n  set(BUILD_TYPE \"${CMAKE_BUILD_TYPE}\")\n  set(BUILD_CFLAGS \"${CMAKE_C_FLAGS}\")\n  set(BUILD_CXXFLAGS \"${CMAKE_CXX_FLAGS}\")\n  set(BUILD_LINKFLAGS \"${PLATFORM_LINKFLAGS}\")\n  set(BUILD_SYSTEM \"CMake\")\n\n  if(WITH_COMPILER_SHORT_FILE_MACRO)\n    # It's not necessary to include path information\n    # about the system building Blender in the executable.\n    string(REPLACE \"${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\" \" \" BUILD_CFLAGS \"${BUILD_CFLAGS}\")\n    string(REPLACE \"${PLATFORM_CFLAGS_FMACRO_PREFIX_MAP}\" \" \" BUILD_CXXFLAGS \"${BUILD_CXXFLAGS}\")\n  endif()\n\n  # Use `configure_file` instead of definitions since properly\n  # escaping the multiple command line arguments which themselves\n  # contain strings and spaces becomes overly error-prone & complicated.\n  configure_file(\n    \"${CMAKE_SOURCE_DIR}/build_files/cmake/buildinfo_static.h.in\"\n    \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo_static.h\"\n    ESCAPE_QUOTES\n    @ONLY\n  )\n\n  unset(BUILD_PLATFORM)\n  unset(BUILD_TYPE)\n  unset(BUILD_CFLAGS)\n  unset(BUILD_CXXFLAGS)\n  unset(BUILD_LINKFLAGS)\n  unset(BUILD_SYSTEM)\n\n  # --------------------------------------------------------------------------\n  # write header for values that change each build\n  # note, generaed file is in build dir's source/creator\n  #       except when used as an include path.\n\n  add_definitions(-DWITH_BUILDINFO_HEADER)\n\n  # include the output directory, where the buildinfo.h file is generated\n  include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n\n  # XXX, ${buildinfo_h_fake} is used here,\n  # because we rely on that file being detected as missing\n  # every build so that the real header \"buildinfo.h\" is updated.\n  #\n  # Keep this until we find a better way to resolve!\n\n  set(buildinfo_h_real \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo.h\")\n  set(buildinfo_h_fake \"${CMAKE_CURRENT_BINARY_DIR}/buildinfo.h_fake\")\n\n  if(EXISTS ${buildinfo_h_fake})\n    message(FATAL_ERROR \"File \\\"${buildinfo_h_fake}\\\" found, this should never be created, remove!\")\n  endif()\n\n  # From the cmake documentation \"If the output of the custom command is not actually created as a\n  # file on disk it should be marked with the SYMBOLIC source file property.\"\n  #\n  # Not doing this leads to build warnings for the not generated file on windows when using msbuild\n  SET_SOURCE_FILES_PROPERTIES(${buildinfo_h_fake} PROPERTIES SYMBOLIC TRUE)\n\n  # a custom target that is always built\n  add_custom_target(buildinfo_player ALL\n    DEPENDS ${buildinfo_h_fake})\n\n  # creates buildinfo.h using cmake script\n  add_custom_command(\n    OUTPUT\n      ${buildinfo_h_fake}  # ensure we always run\n      ${buildinfo_h_real}\n    COMMAND ${CMAKE_COMMAND}\n    -DSOURCE_DIR=${CMAKE_SOURCE_DIR}\n    # overrides only used when non-empty strings\n    -DBUILD_DATE=${BUILDINFO_OVERRIDE_DATE}\n    -DBUILD_TIME=${BUILDINFO_OVERRIDE_TIME}\n    -P ${CMAKE_SOURCE_DIR}/build_files/cmake/buildinfo.cmake)\n\n  # buildinfo.h is a generated file\n  set_source_files_properties(\n    ${buildinfo_h_real}\n    PROPERTIES GENERATED TRUE\n    HEADER_FILE_ONLY TRUE)\n\n  unset(buildinfo_h_real)\n  unset(buildinfo_h_fake)\n\n  # add deps below, after adding blender\n  # -------------- done with header values.\n\n  list(APPEND SRC\n    ../creator/buildinfo.c\n  )\n\n  # make an object library so can load with it in tests\n  add_library(buildinfoobj_player OBJECT ../creator/buildinfo.c)\n  add_dependencies(buildinfoobj_player buildinfo_player)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Defines the system include directories required to compile the node function source files. In this case, it's empty, suggesting only project-specific includes are needed.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/function/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet defines the include directories for the memory utility library. It sets both public and system include paths using the `set` command. This ensures that the compiler can locate the necessary header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/memutil/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ..\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type in CMake\nDESCRIPTION: This code sets the default build type to \"Release\" if no build type is specified. The build type can be configured by the user and can take values such as Debug, Release, RelWithDebInfo, MinSizeRel, or Maintainer.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nIF(NOT CMAKE_BUILD_TYPE)\n  SET(CMAKE_BUILD_TYPE \"Release\")\nENDIF()\n\nSET( CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING\n    \"Choose the type of build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel Maintainer.\"\n    FORCE )\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command (CMake)\nDESCRIPTION: This snippet adds a custom command that copies the external manifest file to the output directory after the `msgfmt` target is built. This is conditionally executed based on the `WITH_WINDOWS_EXTERNAL_MANIFEST` variable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(WITH_WINDOWS_EXTERNAL_MANIFEST)\n  add_custom_command(TARGET msgfmt POST_BUILD\n    COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_BINARY_DIR}/tests.exe.manifest  $<TARGET_FILE_DIR:msgfmt>/$<TARGET_FILE_NAME:msgfmt>.manifest\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of source files (.cc) that make up the Grease Pencil editor library. These files contain the implementation of various Grease Pencil functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/grease_pencil/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/grease_pencil_add.cc\n  intern/grease_pencil_bake_animation.cc\n  intern/grease_pencil_edit.cc\n  intern/grease_pencil_frames.cc\n  intern/grease_pencil_geom.cc\n  intern/grease_pencil_image_render.cc\n  intern/grease_pencil_join_selection.cc\n  intern/grease_pencil_layers.cc\n  intern/grease_pencil_lineart.cc\n  intern/grease_pencil_material.cc\n  intern/grease_pencil_merge.cc\n  intern/grease_pencil_modes.cc\n  intern/grease_pencil_ops.cc\n  intern/grease_pencil_primitive.cc\n  intern/grease_pencil_randomize.cc\n  intern/grease_pencil_select.cc\n  intern/grease_pencil_trim.cc\n  intern/grease_pencil_undo.cc\n  intern/grease_pencil_utils.cc\n  intern/grease_pencil_vertex_paint.cc\n  intern/grease_pencil_weight_paint.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Memory Duplication with MEM_dupallocN\nDESCRIPTION: This function duplicates an existing memory block. It allocates a new block with the same size as the original and copies the contents. It's analogous to a combination of `malloc()` and `memcpy()`.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/blender-guardedalloc.txt#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid *MEM_dupallocN(void *vmemh);\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: This code snippet defines a CMake variable `SRC` to list the header files that constitute the interface for the physics library. These headers declare the interfaces for constraints, dynamic types, character controllers, motion states, physics controllers, physics environments, and vehicles.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Common/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  PHY_IConstraint.h\n  PHY_DynamicTypes.h\n  PHY_ICharacter.h\n  PHY_IController.h\n  PHY_IGraphicController.h\n  PHY_IMotionState.h\n  PHY_IPhysicsController.h\n  PHY_IPhysicsEnvironment.h\n  PHY_IVehicle.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies with CMake\nDESCRIPTION: This snippet initializes the CMake variable LIB, presumably to store a list of library dependencies required for building the target. As shown, the variable is initialized to an empty state.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n```\n\n----------------------------------------\n\nTITLE: Setting Kernel Runtime Library Target Path - CMake\nDESCRIPTION: This CMake code sets the target path for the kernel runtime libraries, depending on whether the build is for Blender or a standalone Cycles application. If building for Blender, the path is set relative to the Blender executable. If building a standalone version, the path is set relative to the Cycles installation directory, creating a 'lib' subdirectory if necessary.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_35\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_BLENDER)\n  # For the Cycles standalone put libraries next to the Cycles application.\n  set(cycles_kernel_runtime_lib_target_path ${CYCLES_INSTALL_PATH})\nelse()\n  # For Blender put the libraries next to the Blender executable.\n  #\n  # Note that the installation path in the delayed_install is relative to the versioned folder,\n  # which means we need to go one level up.\n  set(cycles_kernel_runtime_lib_target_path \"../\")\nendif()\n\nif(UNIX AND NOT APPLE)\n  set(cycles_kernel_runtime_lib_target_path ${cycles_kernel_runtime_lib_target_path}/lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines the library dependencies for the asset system library. The `LIB` variable lists the other Blender libraries that the asset system library depends on. These include `blenkernel`, `blenlib`, `dna`, `imbuf`, `clog`, and `guardedalloc`.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/asset_system/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::dna\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options CMake\nDESCRIPTION: This snippet sets compiler options for the Vulkan Memory Allocator library. It adds the `-Wno-nullability-completeness` flag to suppress nullability completeness warnings when using GCC or Clang.  This prevents the compiler from issuing warnings related to nullability annotations.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/vulkan_memory_allocator/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_C_COMPILER_ID MATCHES \"Clang\")\n  target_compile_options(extern_vulkan_memory_allocator\n    PRIVATE \"-Wno-nullability-completeness\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding Python Package (Requests)\nDESCRIPTION: This snippet attempts to locate the Python 'requests' package using the `find_python_package` function. It only runs on non-Windows and non-Apple platforms, and only if WITH_PYTHON_INSTALL_REQUESTS is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_133\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 OR APPLE)\n    # Always copy from precompiled libs.\n  elseif(WITH_PYTHON_INSTALL_REQUESTS)\n    find_python_package(requests \"\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files (SRC)\nDESCRIPTION: This snippet lists the source files that make up the NLA editor library. These files likely contain the implementation for NLA editor buttons, drawing, editing operations, selection, track management, and the NLA space itself.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_nla/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  nla_buttons.cc\n  nla_draw.cc\n  nla_edit.cc\n  nla_ops.cc\n  nla_select.cc\n  nla_tracks.cc\n  space_nla.cc\n\n  nla_intern.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS) - CMake\nDESCRIPTION: This snippet defines system include directories needed for the undo system library compilation. Currently, it's an empty set, meaning no specific system include paths are added.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/undo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Hydra Subdirectory\nDESCRIPTION: This snippet conditionally adds the `hydra` subdirectory to the build if WITH_CYCLES_HYDRA_RENDER_DELEGATE is enabled or both WITH_CYCLES_STANDALONE and WITH_USD are enabled.  It integrates Cycles with Hydra.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/CMakeLists.txt#_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_HYDRA_RENDER_DELEGATE OR (WITH_CYCLES_STANDALONE AND WITH_USD))\n  add_subdirectory(hydra)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: This snippet defines the libraries that the ge_converter library depends on. These dependencies are linked during the linking stage of the build process. The `PRIVATE` keyword indicates that these libraries are only needed for building ge_converter and are not exposed to other libraries that link against it.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::animrig\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::draw\n  PRIVATE bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n  ge_physics_dummy\n  ge_physics_bullet\n  ge_ketsji\n  ge_rasterizer\n\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library\nDESCRIPTION: Adds the `bf_imbuf` library using the specified source files, include directories, and library dependencies. `blender_add_lib` is likely a custom CMake function defined elsewhere in the project.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_imbuf \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\nadd_library(bf::imbuf ALIAS bf_imbuf)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Defines system include directories for Eigen. This is currently set to empty, meaning no explicit system include directories are being used. This may rely on default system paths or paths configured elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/eigen/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Physics Cloth Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for the cloth physics simulation. It loads the `cloth_test.blend` file and executes the `physics_cloth.py` Python script. The `--run-all-tests` argument tells the script to execute all defined tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    physics_cloth\n    ${TEST_SRC_DIR}/physics/cloth_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_cloth.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Mantaflow Inclusion with CMake\nDESCRIPTION: Conditionally includes the `mantaflow` library if the `WITH_MOD_FLUID` flag is enabled. This is typically used when the fluid simulation module is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  add_subdirectory(mantaflow)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding OpenEXR Library\nDESCRIPTION: Adds the `bf_imbuf_openexr` library, using the specified source files, include directories, and system include directories, and linked to the libraries defined in LIB.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/openexr/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_imbuf_openexr \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files for BMesh\nDESCRIPTION: This snippet sets the source files that constitute the BMesh library, listing both operators and core implementation files, including header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/bmesh/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  # Naming convention for BMesh operators is: bmo_*action*_*details*.cc\n  operators/bmo_beautify.cc\n  operators/bmo_bevel.cc\n  operators/bmo_bisect_plane.cc\n  operators/bmo_bridge.cc\n  operators/bmo_connect.cc\n  operators/bmo_connect_concave.cc\n  operators/bmo_connect_nonplanar.cc\n  operators/bmo_connect_pair.cc\n  operators/bmo_create.cc\n  operators/bmo_dissolve.cc\n  operators/bmo_dupe.cc\n  operators/bmo_edgenet.cc\n  operators/bmo_extrude.cc\n  operators/bmo_fill_attribute.cc\n  operators/bmo_fill_edgeloop.cc\n  operators/bmo_fill_grid.cc\n  operators/bmo_fill_holes.cc\n  operators/bmo_hull.cc\n  operators/bmo_inset.cc\n  operators/bmo_join_triangles.cc\n  operators/bmo_mesh_convert.cc\n  operators/bmo_mirror.cc\n  operators/bmo_normals.cc\n  operators/bmo_offset_edgeloops.cc\n  operators/bmo_planar_faces.cc\n  operators/bmo_poke.cc\n  operators/bmo_primitive.cc\n  operators/bmo_removedoubles.cc\n  operators/bmo_rotate_edges.cc\n  operators/bmo_smooth_laplacian.cc\n  operators/bmo_split_edges.cc\n  operators/bmo_subdivide.cc\n  operators/bmo_subdivide_edgering.cc\n  operators/bmo_symmetrize.cc\n  operators/bmo_triangulate.cc\n  operators/bmo_unsubdivide.cc\n  operators/bmo_utils.cc\n  operators/bmo_wireframe.cc\n\n  intern/bmesh_callback_generic.cc\n  intern/bmesh_callback_generic.hh\n  intern/bmesh_construct.cc\n  intern/bmesh_construct.hh\n  intern/bmesh_core.cc\n  intern/bmesh_core.hh\n  intern/bmesh_delete.cc\n  intern/bmesh_delete.hh\n  intern/bmesh_edgeloop.cc\n  intern/bmesh_edgeloop.hh\n  intern/bmesh_inline.hh\n  intern/bmesh_interp.cc\n  intern/bmesh_interp.hh\n  intern/bmesh_iterators.cc\n  intern/bmesh_iterators.hh\n  intern/bmesh_iterators_inline.hh\n  intern/bmesh_log.cc\n  intern/bmesh_log.hh\n  intern/bmesh_marking.cc\n  intern/bmesh_marking.hh\n  intern/bmesh_mesh.cc\n  intern/bmesh_mesh.hh\n  intern/bmesh_mesh_convert.cc\n  intern/bmesh_mesh_convert.hh\n  intern/bmesh_mesh_debug.cc\n  intern/bmesh_mesh_debug.hh\n  intern/bmesh_mesh_duplicate.cc\n  intern/bmesh_mesh_duplicate.hh\n  intern/bmesh_mesh_normals.cc\n  intern/bmesh_mesh_normals.hh\n  intern/bmesh_mesh_partial_update.cc\n  intern/bmesh_mesh_partial_update.hh\n  intern/bmesh_mesh_tessellate.cc\n  intern/bmesh_mesh_tessellate.hh\n  intern/bmesh_mesh_validate.cc\n  intern/bmesh_mesh_validate.hh\n  intern/bmesh_mods.cc\n  intern/bmesh_mods.hh\n  intern/bmesh_opdefines.cc\n  intern/bmesh_operator_api_inline.hh\n  intern/bmesh_operators.cc\n  intern/bmesh_operators.hh\n  intern/bmesh_operators_private.hh\n  intern/bmesh_polygon.cc\n  intern/bmesh_polygon.hh\n  intern/bmesh_polygon_edgenet.cc\n  intern/bmesh_polygon_edgenet.hh\n  intern/bmesh_private.hh\n  intern/bmesh_query.cc\n  intern/bmesh_query.hh\n  intern/bmesh_query_inline.hh\n  intern/bmesh_query_uv.cc\n  intern/bmesh_query_uv.hh\n  intern/bmesh_structure.cc\n  intern/bmesh_structure.hh\n  intern/bmesh_structure_inline.hh\n  intern/bmesh_walkers.cc\n  intern/bmesh_walkers.hh\n  intern/bmesh_walkers_impl.cc\n  intern/bmesh_walkers_private.hh\n\n  intern/bmesh_error.hh\n  intern/bmesh_operator_api.hh\n\n  tools/bmesh_beautify.cc\n  tools/bmesh_beautify.hh\n  tools/bmesh_bevel.cc\n  tools/bmesh_bevel.hh\n  tools/bmesh_bisect_plane.cc\n  tools/bmesh_bisect_plane.hh\n  tools/bmesh_boolean.cc\n  tools/bmesh_boolean.hh\n  tools/bmesh_decimate.hh\n  tools/bmesh_decimate_collapse.cc\n  tools/bmesh_decimate_dissolve.cc\n  tools/bmesh_decimate_unsubdivide.cc\n  tools/bmesh_edgenet.cc\n  tools/bmesh_edgenet.hh\n  tools/bmesh_edgesplit.cc\n  tools/bmesh_edgesplit.hh\n  tools/bmesh_intersect.cc\n  tools/bmesh_intersect.hh\n  tools/bmesh_intersect_edges.cc\n  tools/bmesh_intersect_edges.hh\n  tools/bmesh_path.cc\n  tools/bmesh_path.hh\n  tools/bmesh_path_region.cc\n  tools/bmesh_path_region.hh\n  tools/bmesh_path_region_uv.cc\n  tools/bmesh_path_region_uv.hh\n  tools/bmesh_path_uv.cc\n  tools/bmesh_path_uv.hh\n  tools/bmesh_region_match.cc\n  tools/bmesh_region_match.hh\n  tools/bmesh_separate.cc\n  tools/bmesh_separate.hh\n  tools/bmesh_triangulate.cc\n  tools/bmesh_triangulate.hh\n  tools/bmesh_wireframe.cc\n  tools/bmesh_wireframe.hh\n\n  bmesh_class.hh\n\n  # public includes\n  bmesh.hh\n  bmesh_tools.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Grease Pencil Operator Failure Example\nDESCRIPTION: This example showcases an operator failure with `bpy.ops.gpencil.draw`. The error message indicates that Grease Pencil data is missing, implying the operator requires a specific context where Grease Pencil data is available.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_operators.rst#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> bpy.ops.gpencil.draw()\n   RuntimeError: Operator bpy.ops.gpencil.draw.poll() Failed to find Grease Pencil data to draw into\n```\n\n----------------------------------------\n\nTITLE: Defining Metal Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the Metal kernel. These headers include BVH structures, compatibility definitions, context management, function constants, and global definitions.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_METAL_HEADERS\n  device/metal/bvh.h\n  device/metal/compat.h\n  device/metal/context_begin.h\n  device/metal/context_end.h\n  device/metal/function_constants.h\n  device/metal/globals.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet defines the system include directories. In the base setup, it's an empty list, but it can be extended later to include system-level dependencies, such as USD.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/io/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Library\nDESCRIPTION: This snippet creates a shared library named 'libgmpxx' from a list of C++ source files.  The listed .cc files are compiled and linked into the shared library. These files contain the implementation of the libgmpxx library.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_gmpxx.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(libgmpxx SHARED\n  cxx/dummy.cc\n  cxx/isfuns.cc\n  cxx/ismpf.cc\n  cxx/ismpq.cc\n  cxx/ismpz.cc\n  cxx/ismpznw.cc\n  cxx/limits.cc\n  cxx/osdoprnti.cc\n  cxx/osfuns.cc\n  cxx/osmpf.cc\n  cxx/osmpq.cc\n  cxx/osmpz.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Defining NOMINMAX for Windows\nDESCRIPTION: If the target platform is Windows (`WIN32`), it adds the `-DNOMINMAX` definition. This prevents the Windows headers from defining `min` and `max` macros, which can conflict with C++'s `std::min` and `std::max` functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n  add_definitions(-DNOMINMAX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Macro for View Layer Tests\nDESCRIPTION: Defines a CMake macro, `view_layer_test`, that automates the creation of view layer tests. This macro takes a test name as input, constructs a test command that runs a Python script within Blender, and adds the test to the CMake test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/view_layer/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(view_layer_test test_name)\n  # Adds ${CMAKE_CURRENT_LIST_DIR} to sys.path so that the tests can import\n  # things from view_layer_common.py\n  add_test(view_layer_${test_name} ${TEST_BLENDER_EXE}\n    --python-expr \"import sys; sys.path.append('${CMAKE_CURRENT_LIST_DIR}')\"\n    --python-exit-code 1\n    --python ${CMAKE_CURRENT_LIST_DIR}/test_${test_name}.py --\n    --testdir=\"${TEST_SRC_DIR}/layers\"\n  )\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This snippet sets the include directories for the Cycles graph library. It defines two CMake variables, `INC` for project-specific includes and `INC_SYS` for system-level includes.  These variables are then passed to the `include_directories` command.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/graph/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ..\n)\n\nset(INC_SYS\n)\n\ninclude_directories(${INC})\ninclude_directories(SYSTEM ${INC_SYS})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for CUDA Kernels\nDESCRIPTION: This snippet adds a custom target that depends on all compiled CUDA cubin files. It also sets the solution folder for this target.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_39\n\nLANGUAGE: cmake\nCODE:\n```\n  add_custom_target(cycles_kernel_cuda ALL DEPENDS ${cuda_cubins})\n  cycles_set_solution_folder(cycles_kernel_cuda)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Executable Path CMake\nDESCRIPTION: Sets the path to the Python executable, prioritizing a user-specified path (`TEST_PYTHON_EXE`) or falling back to the default `PYTHON_EXECUTABLE`. It checks if the specified path exists and issues a fatal error if not.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT TEST_PYTHON_EXE)\n  set(TEST_PYTHON_EXE ${PYTHON_EXECUTABLE})\n  if(FIRST_RUN)\n    message(STATUS \"Tests: Using Python executable: ${TEST_PYTHON_EXE}\")\n  endif()\nelif(NOT EXISTS ${TEST_PYTHON_EXE})\n  message(FATAL_ERROR \"Tests: TEST_PYTHON_EXE ${TEST_PYTHON_EXE} does not exist\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: Defines the private library dependencies for the simulation library. These dependencies are other Blender libraries or external libraries that the simulation library relies on. Using `PRIVATE` ensures these dependencies are only needed during the compilation of `bf_simulation` and are not propagated to other libraries that link against it.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/simulation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::nodes\n  PRIVATE bf::dependencies::eigen\n)\n```\n\n----------------------------------------\n\nTITLE: Set Library Dependencies - CMake\nDESCRIPTION: This snippet defines the private library dependencies of the bf_editor_lattice library. It lists other Blender libraries that bf_editor_lattice relies on, such as blenkernel, blenlib, depsgraph, dna, clog, guardedalloc, render, and windowmanager. These dependencies will be linked with bf_editor_lattice during the build process.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/lattice/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of source files that make up the GHOST library.  This includes both C++ source files and header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/GHOST_Buttons.cc\n  intern/GHOST_C-api.cc\n  intern/GHOST_CallbackEventConsumer.cc\n  intern/GHOST_Context.cc\n  intern/GHOST_ContextNone.cc\n  intern/GHOST_DisplayManager.cc\n  intern/GHOST_EventManager.cc\n  intern/GHOST_ISystem.cc\n  intern/GHOST_ISystemPaths.cc\n  intern/GHOST_ModifierKeys.cc\n  intern/GHOST_Path-api.cc\n  intern/GHOST_PathUtils.cc\n  intern/GHOST_Rect.cc\n  intern/GHOST_System.cc\n  intern/GHOST_TimerManager.cc\n  intern/GHOST_Window.cc\n  intern/GHOST_WindowManager.cc\n\n  GHOST_C-api.h\n  GHOST_IContext.hh\n  GHOST_IEvent.hh\n  GHOST_IEventConsumer.hh\n  GHOST_ISystem.hh\n  GHOST_ISystemPaths.hh\n  GHOST_ITimerTask.hh\n  GHOST_IWindow.hh\n  GHOST_Path-api.hh\n  GHOST_Rect.hh\n  GHOST_Types.h\n\n  intern/GHOST_Buttons.hh\n  intern/GHOST_CallbackEventConsumer.hh\n  intern/GHOST_Context.hh\n  intern/GHOST_ContextNone.hh\n  intern/GHOST_Debug.hh\n  intern/GHOST_DisplayManager.hh\n  intern/GHOST_Event.hh\n  intern/GHOST_EventButton.hh\n  intern/GHOST_EventCursor.hh\n  intern/GHOST_EventDragnDrop.hh\n  intern/GHOST_EventKey.hh\n  intern/GHOST_EventManager.hh\n  intern/GHOST_EventString.hh\n  intern/GHOST_EventTrackpad.hh\n  intern/GHOST_EventWheel.hh\n  intern/GHOST_ModifierKeys.hh\n  intern/GHOST_PathUtils.hh\n  intern/GHOST_System.hh\n  intern/GHOST_SystemPaths.hh\n  intern/GHOST_TimerManager.hh\n  intern/GHOST_TimerTask.hh\n  intern/GHOST_Util.hh\n  intern/GHOST_Window.hh\n  intern/GHOST_WindowManager.hh\n  intern/GHOST_utildefines.hh\n  intern/GHOST_utildefines_variadic.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Grouping Source Files\nDESCRIPTION: This snippet uses the `source_group` command to organize source files in the project structure, improving readability and maintainability.  It creates groups for various components of the Cycles kernel, such as 'bake', 'bvh', 'camera', and device-specific code (CPU, CUDA, HIP, OptiX, Metal, OneAPI).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\nsource_group(\"bake\" FILES ${SRC_KERNEL_BAKE_HEADERS})\nsource_group(\"bvh\" FILES ${SRC_KERNEL_BVH_HEADERS})\nsource_group(\"camera\" FILES ${SRC_KERNEL_CAMERA_HEADERS})\nsource_group(\"closure\" FILES ${SRC_KERNEL_CLOSURE_HEADERS})\nsource_group(\"device\\\\cpu\" FILES ${SRC_KERNEL_DEVICE_CPU} ${SRC_KERNEL_DEVICE_CPU_HEADERS})\nsource_group(\"device\\\\cuda\" FILES ${SRC_KERNEL_DEVICE_CUDA} ${SRC_KERNEL_DEVICE_CUDA_HEADERS})\nsource_group(\"device\\\\gpu\" FILES ${SRC_KERNEL_DEVICE_GPU_HEADERS})\nsource_group(\"device\\\\hip\" FILES ${SRC_KERNEL_DEVICE_HIP} ${SRC_KERNEL_DEVICE_HIP_HEADERS})\nsource_group(\"device\\\\hiprt\" FILES ${SRC_KERNEL_DEVICE_HIPRT} ${SRC_KERNEL_DEVICE_HIPRT_HEADERS})\nsource_group(\"device\\\\optix\" FILES ${SRC_KERNEL_DEVICE_OPTIX} ${SRC_KERNEL_DEVICE_OPTIX_HEADERS})\nsource_group(\"device\\\\metal\" FILES ${SRC_KERNEL_DEVICE_METAL} ${SRC_KERNEL_DEVICE_METAL_HEADERS})\nsource_group(\"device\\\\oneapi\" FILES ${SRC_KERNEL_DEVICE_ONEAPI} ${SRC_KERNEL_DEVICE_ONEAPI_HEADERS})\nsource_group(\"film\" FILES ${SRC_KERNEL_FILM_HEADERS})\nsource_group(\"geom\" FILES ${SRC_KERNEL_GEOM_HEADERS})\nsource_group(\"integrator\" FILES ${SRC_KERNEL_INTEGRATOR_HEADERS})\nsource_group(\"kernel\" FILES ${SRC_KERNEL_TYPES_HEADERS})\nsource_group(\"light\" FILES ${SRC_KERNEL_LIGHT_HEADERS})\nsource_group(\"osl\" FILES ${SRC_KERNEL_OSL_HEADERS})\nsource_group(\"sample\" FILES ${SRC_KERNEL_SAMPLE_HEADERS})\nsource_group(\"svm\" FILES ${SRC_KERNEL_SVM_HEADERS})\nsource_group(\"util\" FILES ${SRC_KERNEL_UTIL_HEADERS})\n```\n\n----------------------------------------\n\nTITLE: Include Sub-Project CMakeLists.txt\nDESCRIPTION: Includes several CMakeLists.txt files for different sub-projects (ghost, string, numaapi, guardedalloc, gpu, blenfont, wcwidth), creates corresponding libraries and sets the necessary include directories. It also adds definitions for `BLF_STANDALONE` and `GPU_STANDALONE`.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX AND NOT APPLE)\n  set(WITH_GHOST_X11 ON)\nendif()\n\n# BLF needs this to ignore GPU library\nadd_definitions(-DBLF_STANDALONE)\n\n# ghost\ninclude(${CMAKE_SOURCE_DIR}/../CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../\")\ninclude_directories(${INC_NEW})\nadd_library(ghost_lib ${SRC_NEW})\n\n# string\ninclude(${CMAKE_SOURCE_DIR}/../../string/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../string/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../string/\")\ninclude_directories(${INC_NEW})\nadd_library(string_lib ${SRC_NEW})\n\n# `numaapi` (for 'bli_lib').\ninclude(${CMAKE_SOURCE_DIR}/../../numaapi/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../numaapi/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../numaapi/\")\ninclude_directories(${INC_NEW})\nadd_library(numaapi_lib ${SRC_NEW})\n\n# guardedalloc\ninclude(${CMAKE_SOURCE_DIR}/../../guardedalloc/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../guardedalloc/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../guardedalloc/\")\ninclude_directories(${INC_NEW})\nadd_library(guardedalloc_lib ${SRC_NEW})\n\n# `gpu` (used by `blenfont`).\nadd_definitions(-DGPU_STANDALONE)\nset(CMAKE_CURRENT_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../source/blender/gpu\")\ninclude(${CMAKE_SOURCE_DIR}/../../../source/blender/gpu/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../../source/blender/gpu/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../../source/blender/gpu/\")\ninclude_directories(${INC_NEW})\nadd_library(gpu_lib ${SRC_NEW})\nset(CMAKE_CURRENT_SOURCE_DIR \"${_CMAKE_CURRENT_SOURCE_DIR_INIT}\")\n\n# `imbuf` (used by ???).\n# set(CMAKE_CURRENT_SOURCE_DIR \"${CMAKE_SOURCE_DIR}/../../../source/blender/imbuf\")\n# include(${CMAKE_SOURCE_DIR}/../../../source/blender/imbuf/CMakeLists.txt)\n# suffix_relpaths(INC_NEW \"${INC}\" \"../../../source/blender/imbuf/\")\n# suffix_relpaths(SRC_NEW \"${SRC}\" \"../../../source/blender/imbuf/\")\n# include_directories(${INC_NEW})\n# add_library(imbuf_lib ${SRC_NEW})\n# set(CMAKE_CURRENT_SOURCE_DIR \"${_CMAKE_CURRENT_SOURCE_DIR_INIT}\")\n\n# `blenfont`.\ninclude(${CMAKE_SOURCE_DIR}/../../../source/blender/blenfont/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../../source/blender/blenfont/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../../source/blender/blenfont/\")\ninclude_directories(${INC_NEW})\nadd_library(blenfont_lib ${SRC_NEW})\n\n# `wcwidth`.\ninclude(${CMAKE_SOURCE_DIR}/../../../extern/wcwidth/CMakeLists.txt)\nsuffix_relpaths(INC_NEW \"${INC}\" \"../../../extern/wcwidth/\")\nsuffix_relpaths(SRC_NEW \"${SRC}\" \"../../../extern/wcwidth/\")\ninclude_directories(${INC_NEW})\nadd_library(wcwidth_lib ${SRC_NEW})\n```\n\n----------------------------------------\n\nTITLE: Physics Dynamic Paint Test (CMake)\nDESCRIPTION: This CMake snippet sets up a test for dynamic paint physics. It loads the `dynamic_paint_test.blend` file and executes the `physics_dynamic_paint.py` Python script with the `--run-all-tests` argument. This executes all tests defined in the Python script.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    physics_dynamic_paint\n    ${TEST_SRC_DIR}/physics/dynamic_paint_test.blend\n    --python ${TEST_PYTHON_DIR}/physics_dynamic_paint.py\n    --\n    --run-all-tests\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files for IDE Display (CMake 3.19+)\nDESCRIPTION: This snippet adds source files to the interface library specifically for IDE display purposes in CMake versions 3.19 and later.  It defines a list of header files and uses target_sources to associate them with the library. blender_source_group organizes these files within the IDE.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/mikktspace/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${CMAKE_VERSION} VERSION_GREATER_EQUAL \"3.19\")\n  set(SRC\n    mikk_atomic_hash_set.hh\n    mikk_float3.hh\n    mikk_util.hh\n    mikktspace.hh\n  )\n  target_sources(bf_intern_mikktspace PRIVATE ${SRC})\n  blender_source_group(bf_intern_mikktspace ${SRC})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Eigen3 Include Directories - CMake\nDESCRIPTION: This snippet sets the `EIGEN3_INCLUDE_DIRS` variable to the location of the Eigen3 library if `WITH_SYSTEM_EIGEN3` is not enabled. It configures the include directory for the Eigen3 linear algebra library when the system-wide version is not used.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_101\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WITH_SYSTEM_EIGEN3)\n  set(EIGEN3_INCLUDE_DIRS ${CMAKE_SOURCE_DIR}/extern/Eigen3)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Displaying LibTIFF License\nDESCRIPTION: This code snippet defines the terms and conditions for using, copying, modifying, distributing, and selling the LibTIFF software and its documentation. It emphasizes the absence of warranty and limitations of liability.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nPermission to use, copy, modify, distribute, and sell this software and its\ndocumentation for any purpose is hereby granted without fee, provided that (i)\nthe above copyright notices and this permission notice appear in all copies of\nthe software and related documentation, and (ii) the names of Sam Leffler and\nSilicon Graphics may not be used in any advertising or publicity relating to\nthe software without the specific, prior written permission of Sam Leffler and\nSilicon Graphics.\n\nTHE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, EXPRESS,\nIMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF\nMERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n\nIN NO EVENT SHALL SAM LEFFLER OR SILICON GRAPHICS BE LIABLE FOR ANY SPECIAL,\nINCIDENTAL, INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED\nOF THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Adding Library - CMake\nDESCRIPTION: Creates the 'extern_binreloc' library using the specified source files, include directories, and system include directories. The blender_add_lib function encapsulates the standard CMake add_library functionality with Blender-specific settings.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/binreloc/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(extern_binreloc \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Building makesdna Executable\nDESCRIPTION: This snippet defines the source files and dependencies for the `makesdna` executable. It also sets up platform-specific linker flags and libraries. The executable generates the DNA files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesdna/intern/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BLENLIB_SRC\n  ../../blenlib/intern/BLI_assert.cc\n  ../../blenlib/intern/BLI_ghash.cc\n  ../../blenlib/intern/BLI_ghash_utils.cc\n  ../../blenlib/intern/BLI_linklist.cc\n  ../../blenlib/intern/BLI_memarena.cc\n  ../../blenlib/intern/BLI_mempool.cc\n  ../../blenlib/intern/endian_switch.cc\n  ../../blenlib/intern/listbase.cc\n  ../../blenlib/intern/string.cc\n\n  # Dependency of BLI_ghash.cc\n  ../../blenlib/intern/hash_mm2a.cc\n\n  # Dependencies of BLI_mempool.cc when ASAN is enabled.\n  ../../blenlib/intern/gsqueue.cc\n  ../../blenlib/intern/threads.cc\n  ../../blenlib/intern/time.cc\n)\n\nset(SRC\n  dna_utils.cc\n  makesdna.cc\n  ${BLENLIB_SRC}\n  ${dna_header_include_file}\n  ${dna_header_string_file}\n)\n\n# BLI_mempool.cc needs these files for ThreadMutex when\n# compiling in address sanitizer mode.\nif(WITH_COMPILER_ASAN)\n  list(APPEND SRC\n  )\nendif()\n\n# `SRC_DNA_INC` is defined in the parent directory.\n\nadd_cc_flags_custom_test(makesdna)\n\nadd_executable(makesdna ${SRC} ${SRC_DNA_INC})\nsetup_platform_linker_flags(makesdna)\nsetup_platform_linker_libs(makesdna)\nblender_target_include_dirs(makesdna ${INC})\nblender_target_include_dirs_sys(makesdna ${INC_SYS})\ntarget_link_libraries(makesdna ${LIB})\n\nif(WIN32 AND NOT UNIX)\n  if(DEFINED PTHREADS_LIBRARIES)\n    target_link_libraries(makesdna PRIVATE ${PTHREADS_LIBRARIES})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories required for compiling the dual contouring library. It includes local directories like `.` and `intern`, as well as `../guardedalloc`. These directories contain header files necessary for the library's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/dualcon/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  intern\n  ../guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Building Audaspace Demos with CMake\nDESCRIPTION: This snippet configures and builds demo applications for Audaspace. It includes necessary directories, defines a list of demo executables, adds each executable using add_executable, links them to the audaspace library using target_link_libraries, and handles optional dependencies like FFTW and OpenAL. Finally, it installs all demo targets to the specified destination directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_37\n\nLANGUAGE: cmake\nCODE:\n```\nif(BUILD_DEMOS)\n\tinclude_directories(${INCLUDE})\n\n\tset(DEMOS audainfo audaplay audaconvert audaremap signalgen randsounds dynamicmusic playbackmanager)\n\n\tadd_executable(audainfo demos/audainfo.cpp)\n\ttarget_link_libraries(audainfo audaspace)\n\n\tadd_executable(audaplay demos/audaplay.cpp)\n\ttarget_link_libraries(audaplay audaspace)\n\n\tadd_executable(audaconvert demos/audaconvert.cpp)\n\ttarget_link_libraries(audaconvert audaspace)\n\n\tadd_executable(audaremap demos/audaremap.cpp)\n\ttarget_link_libraries(audaremap audaspace)\n\n\tadd_executable(signalgen demos/signalgen.cpp)\n\ttarget_link_libraries(signalgen audaspace)\n\n\tadd_executable(randsounds demos/randsounds.cpp)\n\ttarget_link_libraries(randsounds audaspace)\n\n\tadd_executable(dynamicmusic demos/dynamicmusic.cpp)\n\ttarget_link_libraries(dynamicmusic audaspace)\n\n\tadd_executable(playbackmanager demos/playbackmanager.cpp)\n\ttarget_link_libraries(playbackmanager audaspace)\n\n\tif(WITH_FFTW)\n\t\tlist(APPEND DEMOS convolution binaural)\n\n\t\tadd_executable(convolution demos/convolution.cpp)\n\t\ttarget_link_libraries(convolution audaspace)\n\n\t\tadd_executable(binaural demos/binaural.cpp)\n\t\ttarget_link_libraries(binaural audaspace)\n\tendif()\n\n\tif(WITH_OPENAL)\n\t\tlist(APPEND DEMOS openaldevices)\n\n\t\tadd_executable(openaldevices demos/openaldevices.cpp)\n\t\tif(PLUGIN_OPENAL)\n\t\t\ttarget_link_libraries(openaldevices audaspace audopenal)\n\t\telse()\n\t\t\ttarget_link_libraries(openaldevices audaspace)\n\t\tendif()\n\tendif()\n\n\tinstall(TARGETS ${DEMOS}\n\t\tRUNTIME DESTINATION ${BIN_DESTINATION}\n\t\tLIBRARY DESTINATION ${LIB_DESTINATION}\n\t\tARCHIVE DESTINATION ${LIB_DESTINATION}\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Upload UPBGE Release (Python)\nDESCRIPTION: Executes the `upload-release.py` script to upload the UPBGE release to PyPI. The script requires the version number and Git hash as parameters.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/pypi/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./upload-release.py --version X.X.X --git-hash abcd1234\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet defines the include directories needed for compiling the mask editor source files. `INC` specifies project-specific include paths, while `INC_SYS` is intended for system include paths (though it's empty here).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/mask/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Shader FX Library - CMake\nDESCRIPTION: This snippet uses a custom CMake function `blender_add_lib` to create the shader effects library named `bf_shader_fx`. It takes the source files, include directories, system include directories, and library dependencies as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/shader_fx/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_shader_fx \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Generating Python Binding Documentation with Sphinx\nDESCRIPTION: This snippet checks if Sphinx is installed and configures a custom target to build documentation for Python bindings. It uses `find_package` to locate Sphinx, configures a `conf.py` file from a template, and adds a custom target that executes Sphinx through a Python setup script. The generated documentation is then installed to a specified destination.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/CMakeLists.txt#_snippet_41\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BINDING_DOCS)\n\tfind_package(Sphinx ${PACKAGE_OPTION})\n\n\tif(SPHINX_FOUND)\n\t\tconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/bindings/doc/conf.py.in ${CMAKE_CURRENT_BINARY_DIR}/conf.py @ONLY)\n\n\t\tadd_custom_target(bindings_doc ALL COMMAND ${PYTHON_EXECUTABLE} setup.py --build-docs ${SPHINX_EXECUTABLE} -q -b html -c \"${CMAKE_CURRENT_BINARY_DIR}\" -d \"${CMAKE_CURRENT_BINARY_DIR}/_doctrees\" \"${CMAKE_CURRENT_SOURCE_DIR}/bindings/doc\" \"${CMAKE_CURRENT_BINARY_DIR}/doc/bindings\" DEPENDS pythonmodule COMMENT \"Building C/Python HTML documentation with Sphinx.\")\n\telse()\n\t\tif(AUDASPACE_STANDALONE)\n\t\t\tset(WITH_BINDING_DOCS FALSE CACHE BOOL \"Build C/Python HTML Documentation with Sphinx\" FORCE)\n\t\telse()\n\t\t\tset(WITH_BINDING_DOCS FALSE)\n\t\tendif()\n\t\tmessage(WARNING \"Sphinx not found, binding documentation will not be built.\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disable Strict Compilation Flags in CMake\nDESCRIPTION: This CMake snippet disables strict compilation flags, possibly to avoid warnings or errors during the build process. This may be needed if the code relies on specific compiler behaviors or extensions that are not allowed under strict flags.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/draco/draco/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nremove_strict_flags()\n```\n\n----------------------------------------\n\nTITLE: Adding blenkernel Test Suite\nDESCRIPTION: This snippet conditionally creates a test suite for the `blenkernel` library when `WITH_GTESTS` is enabled. It defines the test source files (`TEST_SRC`), include directories (`TEST_INC`), and libraries (`TEST_LIB`). Then it uses `blender_add_test_suite_lib` to build a test library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    intern/action_test.cc\n    intern/armature_test.cc\n    intern/asset_metadata_test.cc\n    intern/bpath_test.cc\n    intern/cryptomatte_test.cc\n    intern/curves_geometry_test.cc\n    intern/fcurve_test.cc\n    intern/file_handler_test.cc\n    intern/grease_pencil_test.cc\n    intern/idprop_serialize_test.cc\n    intern/image_partial_update_test.cc\n    intern/image_test.cc\n    intern/lattice_deform_test.cc\n    intern/layer_test.cc\n    intern/lib_id_remapper_test.cc\n    intern/lib_id_test.cc\n    intern/lib_query_test.cc\n    intern/lib_remap_test.cc\n    intern/main_test.cc\n    intern/nla_test.cc\n    intern/subdiv_ccg_test.cc\n    intern/tracking_test.cc\n    intern/volume_test.cc\n  )\n  set(TEST_INC\n    # WARNING: this is a bad-level include which is only acceptable for tests\n    # and even then it would be good if the dependency could be removed.\n    ../editors/include\n  )\n  set(TEST_LIB\n    ${LIB}\n    bf_rna  # RNA_prototypes.hh\n  )\n  blender_add_test_suite_lib(blenkernel \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${TEST_LIB}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: Defines system include directories that are used by the GHOST library.  These are typically for external dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines library dependencies for cuew. Currently, it is an empty set, implying no direct dependencies on other libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/cuew/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This code snippet defines CMake variables `INC` and `INC_SYS` to store include directories for the project. `INC` represents the current directory ('.'), while `INC_SYS` specifies a path relative to the project root where system-level include files are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Physics/Common/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n)\n\nset(INC_SYS\n  ../../../../intern/moto/include\n)\n```\n\n----------------------------------------\n\nTITLE: Finding and configuring HIP\nDESCRIPTION: This snippet attempts to find the HIP library with a minimum version of 5.5.0. If the HIP version is 5, it defines a compile definition WITH_HIP_SDK_5 for the extern_hipew target.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/hipew/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(HIP 5.5.0)\nif(HIP_VERSION_MAJOR EQUAL 5)\n  target_compile_definitions(extern_hipew PUBLIC WITH_HIP_SDK_5)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional CLP Integration CMake\nDESCRIPTION: Conditionally includes CLP support. If `LEMON_HAVE_CLP` is true, it adds `clp.cc` to the source files and includes the CoinUtils include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_CLP)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} clp.cc)\n  INCLUDE_DIRECTORIES(${COIN_INCLUDE_DIRS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This section defines system include directories, although it's currently empty.  The `INC_SYS` variable would typically be used to specify paths to system-level header files required by the library. In the provided configuration, no system include paths are explicitly added.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/bullet2/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Asset Bundles (CMake)\nDESCRIPTION: This snippet installs asset bundles, by installing the content of ASSET_BUNDLE_DIR to a subfolder in TARGETDIR_VER if the source directory exists.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_76\n\nLANGUAGE: cmake\nCODE:\n```\nset(ASSET_BUNDLE_DIR ${CMAKE_SOURCE_DIR}/release/datafiles/assets/publish/)\n\nif(EXISTS \"${ASSET_BUNDLE_DIR}\")\n  install(\n    DIRECTORY ${ASSET_BUNDLE_DIR}\n    DESTINATION ${TARGETDIR_VER}/datafiles/assets\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Windows-Specific Sources\nDESCRIPTION: Conditionally appends Windows-specific source files to the SRC variable. This includes header files and COM interface implementation files. The WIN32 macro checks if the target platform is Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/decklink/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n\tlist(APPEND SRC\n\t\twin/DeckLinkAPI_h.h\n\t\twin/DeckLinkAPI_i.c\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing OSL DLLs with Manifests on Windows CMake\nDESCRIPTION: This snippet installs OSL DLLs and their associated manifests on Windows. It checks for the existence of `oslquery.dll` and calls `windows_install_shared_manifest` to install the DLLs for both Release and Debug configurations. Requires the `windows_install_shared_manifest` macro to be defined elsewhere.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  if(EXISTS ${LIBDIR}/osl/bin/oslquery.dll) # 4.1+\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/osl/bin/oslquery.dll\n        ${LIBDIR}/osl/bin/oslcomp.dll\n        ${LIBDIR}/osl/bin/oslexec.dll\n        ${LIBDIR}/osl/bin/oslnoise.dll\n      RELEASE\n    )\n    windows_install_shared_manifest(\n      FILES\n        ${LIBDIR}/osl/bin/oslquery_d.dll\n        ${LIBDIR}/osl/bin/oslcomp_d.dll\n        ${LIBDIR}/osl/bin/oslexec_d.dll\n        ${LIBDIR}/osl/bin/oslnoise_d.dll\n      DEBUG\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories for the CSV import library.  It includes the current directory, the importer subdirectory, the common subdirectory, and the blenkernel subdirectory. These directories likely contain header files needed to compile the source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/csv/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  .\n  importer\n  ../common\n  ../../blenkernel\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the list of source files for the imbuf library.  This includes both C++ source files and header files (.hh and .h) that comprise the library's implementation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/allocimbuf.cc\n  intern/colormanagement.cc\n  intern/colormanagement_inline.h\n  intern/conversion.cc\n  intern/filetype.cc\n  intern/filter.cc\n  intern/format_bmp.cc\n  intern/format_dds.cc\n  intern/format_hdr.cc\n  intern/format_iris.cc\n  intern/format_jpeg.cc\n  intern/format_png.cc\n  intern/format_psd.cc\n  intern/format_svg.cc\n  intern/format_targa.cc\n  intern/format_tiff.cc\n  intern/imageprocess.cc\n  intern/interp.cc\n  intern/metadata.cc\n  intern/module.cc\n  intern/moviecache.cc\n  intern/readimage.cc\n  intern/rectop.cc\n  intern/rotate.cc\n  intern/scaling.cc\n  intern/stereoimbuf.cc\n  intern/thumbs.cc\n  intern/thumbs_blend.cc\n  intern/thumbs_font.cc\n  intern/transform.cc\n  intern/util.cc\n  intern/util_gpu.cc\n  intern/writeimage.cc\n\n  IMB_colormanagement.hh\n  IMB_imbuf.hh\n  IMB_imbuf_enums.h\n  IMB_imbuf_types.hh\n  IMB_interp.hh\n  IMB_metadata.hh\n  IMB_moviecache.hh\n  IMB_openexr.hh\n  IMB_thumbs.hh\n  intern/IMB_allocimbuf.hh\n  intern/IMB_colormanagement_intern.hh\n  intern/IMB_filetype.hh\n  intern/IMB_filter.hh\n  intern/imbuf.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting OSL Header Files - CMake\nDESCRIPTION: This snippet defines the header files required for compiling the OSL shaders. It uses `file(GLOB ...)` to find header files in the `OSL_SHADER_DIR` directory, accounting for variations across OSL releases. Then, it explicitly lists additional header files necessary for shader compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/osl/shaders/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB SRC_OSL_HEADER_DIST ${OSL_SHADER_DIR}/*.h)\n\nset(SRC_OSL_HEADERS\n  node_color.h\n  node_color_blend.h\n  node_fractal_voronoi.h\n  node_fresnel.h\n  node_hash.h\n  node_math.h\n  node_noise.h\n  node_ramp_util.h\n  node_voronoi.h\n  stdcycles.h\n  ${SRC_OSL_HEADER_DIST}\n)\n```\n\n----------------------------------------\n\nTITLE: Finding OGG Dependency using CMake\nDESCRIPTION: This snippet uses CMake's `FIND_PACKAGE` command to locate the OGG library, which is a required dependency for Theora.  The `REQUIRED` keyword ensures that the build will fail if OGG is not found.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFIND_PACKAGE(OGG REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Unsetting _LIB_SUB_FOLDER in CMake\nDESCRIPTION: This snippet unsets the `_LIB_SUB_FOLDER` variable. This is done to clean up the variable after it has been used to define the output directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nunset(_LIB_SUB_FOLDER)\n```\n\n----------------------------------------\n\nTITLE: Test Configuration\nDESCRIPTION: This snippet conditionally adds a test suite based on the `WITH_GTESTS` and `WITH_OPENSUBDIV` flags. If both are enabled, it defines additional definitions and then calls another custom CMake function `blender_add_test_suite_lib` to create the test suite.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/opensubdiv/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS AND WITH_OPENSUBDIV)\n  add_definitions(${GFLAGS_DEFINES})\n  add_definitions(${GLOG_DEFINES})\n\n  set(TEST_SRC\n    internal/topology/mesh_topology_test.cc\n  )\n\n  blender_add_test_suite_lib(intern_opensubdiv \"${TEST_SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB};bf_intern_opensubdiv\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet is used to set system include directories, but is currently empty, suggesting that no additional system-level include paths are required for this specific component.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional GPU Direct Configuration\nDESCRIPTION: This snippet conditionally links the bf_intern_gpudirect library on Windows platforms (WIN32) if the WITH_GAMEENGINE_DECKLINK option is enabled.  This allows for direct GPU access for video textures.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/VideoTexture/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    list(APPEND LIB\n      bf_intern_gpudirect\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Project Name and Version with CMake\nDESCRIPTION: This snippet initializes the project name and attempts to determine the LEMON version using various methods, including reading from a file, environment variable, or querying a Mercurial repository. The version is stored in the LEMON_VERSION variable and cached.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nCMAKE_MINIMUM_REQUIRED(VERSION 3.1)\n\nSET(PROJECT_NAME \"LEMON\")\nPROJECT(${PROJECT_NAME})\n\nINCLUDE(FindPythonInterp)\nINCLUDE(FindWget)\n\nIF(EXISTS ${PROJECT_SOURCE_DIR}/cmake/version.cmake)\n  INCLUDE(${PROJECT_SOURCE_DIR}/cmake/version.cmake)\nELSEIF(DEFINED ENV{LEMON_VERSION})\n  SET(LEMON_VERSION $ENV{LEMON_VERSION} CACHE STRING \"LEMON version string.\")\nELSE()\n  EXECUTE_PROCESS(\n    COMMAND\n    hg log -r. --template \"{latesttag}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    OUTPUT_VARIABLE HG_REVISION_TAG\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  EXECUTE_PROCESS(\n    COMMAND\n    hg log -r. --template \"{latesttagdistance}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    OUTPUT_VARIABLE HG_REVISION_DIST\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n  EXECUTE_PROCESS(\n    COMMAND\n    hg log -r. --template \"{node|short}\"\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n    OUTPUT_VARIABLE HG_REVISION_ID\n    ERROR_QUIET\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n  )\n\n  IF(HG_REVISION_TAG STREQUAL \"\")\n    SET(HG_REVISION_ID \"hg-tip\")\n  ELSE()\n    IF(HG_REVISION_TAG STREQUAL \"null\")\n      SET(HG_REVISION_TAG \"trunk\")\n    ELSEIF(HG_REVISION_TAG MATCHES \"^r\")\n      STRING(SUBSTRING ${HG_REVISION_TAG} 1 -1 HG_REVISION_TAG)\n    ENDIF()\n    IF(HG_REVISION_DIST STREQUAL \"0\")\n      SET(HG_REVISION ${HG_REVISION_TAG})\n    ELSE()\n      SET(HG_REVISION\n\t\"${HG_REVISION_TAG}+${HG_REVISION_DIST}-${HG_REVISION_ID}\")\n    ENDIF()\n  ENDIF()\n\n  SET(LEMON_VERSION ${HG_REVISION} CACHE STRING \"LEMON version string.\")\nENDIF()\n\nSET(PROJECT_VERSION ${LEMON_VERSION})\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This CMake snippet defines the source files for the component. The `SRC` variable is set but currently empty. It is intended to contain the list of source files that make up the component.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/datafiles/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for GLSL\nDESCRIPTION: This snippet defines the include directories required for compiling GLSL shaders.  These include paths are necessary to resolve dependencies within the shader code. These paths point to relevant directories within the GPU module.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/intern/shaders/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_GLSL\n  .\n  ..\n\n  ../../../gpu\n  ../../../gpu/intern\n  ../../../gpu/shaders\n  ../../../gpu/shaders/common\n\n  # For grease pencil.\n  ../../engines/gpencil\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (INC_SYS)\nDESCRIPTION: This snippet defines system include directories. Currently, it's empty, indicating that no external system include directories are explicitly required for this library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_nla/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Python Site-Packages (CMake)\nDESCRIPTION: This snippet conditionally installs specific Python site-packages (MaterialX, OpenImageIO, PyOpenColorIO, oslquery, pxr, and openvdb) to the `${TARGETDIR_SITE_PACKAGES}` directory, if `WITH_PYTHON_MODULE` is enabled, `LIBDIR` is defined, and the target platform is not Windows (`NOT WIN32`). The specific `openvdb` filename is determined based on the operating system (macOS or Linux).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_PYTHON_MODULE AND LIBDIR AND NOT WIN32)\n  # It's possible for a build using LIBDIR to reference a non-standard Python installation.\n  path_is_prefix(LIBDIR PYTHON_INCLUDE_DIR _is_python_in_libdir)\n  if(_is_python_in_libdir)\n    install(\n      DIRECTORY ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/MaterialX\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n    install(\n      DIRECTORY ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/OpenImageIO\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n    install(\n      DIRECTORY ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/PyOpenColorIO\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n    install(\n      DIRECTORY ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/oslquery\n      DESTINATION ${TARGETDIR_SITE_PACKAGES} OPTIONAL\n    )\n    install(\n      DIRECTORY ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/pxr\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n    if(APPLE)\n      set(_openvdb_filename openvdb.cpython-${PYTHON_VERSION_NO_DOTS}-darwin.so)\n    else()\n      set(_openvdb_filename openvdb.cpython-${PYTHON_VERSION_NO_DOTS}-${CMAKE_SYSTEM_PROCESSOR}-linux-gnu.so)\n    endif()\n    install(\n      FILES ${LIBDIR}/python/lib/python${PYTHON_VERSION}/site-packages/${_openvdb_filename}\n      DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    )\n  endif()\n  unset(_is_python_in_libdir)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Performance Test Executable\nDESCRIPTION: Creates the performance test executable using the blender_add_test_performance_executable function.  It specifies the target name (BLI_map_performance), source files (SRC), include directories (INC), system include directories (INC_SYS), and libraries (LIB).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/tests/performance/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_performance_executable(BLI_map_performance \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet sets the source files for the asset system library. The `SRC` variable contains a list of `.cc` and `.hh` files that comprise the library's source code. These files are located in the `intern` directory and its subdirectories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/asset_system/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/asset_catalog.cc\n  intern/asset_catalog_collection.cc\n  intern/asset_catalog_definition_file.cc\n  intern/asset_catalog_path.cc\n  intern/asset_catalog_tree.cc\n  intern/asset_library.cc\n  intern/asset_library_service.cc\n  intern/asset_representation.cc\n  intern/library_types/all_library.cc\n  intern/library_types/essentials_library.cc\n  intern/library_types/on_disk_library.cc\n  intern/library_types/preferences_on_disk_library.cc\n  intern/library_types/runtime_library.cc\n  intern/utils.cc\n\n  AS_asset_catalog.hh\n  AS_asset_catalog_path.hh\n  AS_asset_catalog_tree.hh\n  AS_asset_library.hh\n  AS_asset_representation.hh\n  AS_essentials_library.hh\n  intern/asset_catalog_collection.hh\n  intern/asset_catalog_definition_file.hh\n  intern/asset_library_service.hh\n  intern/library_types/all_library.hh\n  intern/library_types/essentials_library.hh\n  intern/library_types/on_disk_library.hh\n  intern/library_types/preferences_on_disk_library.hh\n  intern/library_types/runtime_library.hh\n  intern/utils.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing CMake Configuration File\nDESCRIPTION: This snippet configures the `LEMONConfig.cmake` file from the `LEMONConfig.cmake.in` template, replacing variables using `@ONLY` syntax. The resulting file is then installed to the appropriate directory (`share/lemon/cmake` on UNIX-like systems, `cmake` on Windows).\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nCONFIGURE_FILE(\n  ${PROJECT_SOURCE_DIR}/cmake/LEMONConfig.cmake.in\n  ${PROJECT_BINARY_DIR}/cmake/LEMONConfig.cmake\n  @ONLY\n)\nIF(UNIX)\n  INSTALL(\n    FILES ${PROJECT_BINARY_DIR}/cmake/LEMONConfig.cmake\n    DESTINATION share/lemon/cmake\n  )\nELSEIF(WIN32)\n  INSTALL(\n    FILES ${PROJECT_BINARY_DIR}/cmake/LEMONConfig.cmake\n    DESTINATION cmake\n  )\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries\nDESCRIPTION: Defines the external libraries required for building the extern_xdnd library. In this case, no external libraries are explicitly specified. It's possible that external libraries are linked implicitly through other CMake configurations or system dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xdnd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Directories in CMake\nDESCRIPTION: This snippet demonstrates how to set link directories using the `LINK_DIRECTORIES` command in CMake. It adds the directory containing the 'lemon' library to the link path, allowing the linker to find the library during the linking stage. The `lemon` library is likely a dependency of the UPBGE project.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/contrib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nLINK_DIRECTORIES(\n  ${PROJECT_BINARY_DIR}/lemon\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenEXR Integration\nDESCRIPTION: Conditionally configures the OpenEXR integration if `WITH_IMAGE_OPENEXR` is enabled. It appends the OpenEXR include directories and libraries to their respective lists. It also adds a preprocessor definition and, if on Windows, checks for the existence of `imath.dll` and adds another definition if it exists.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/openexr/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IMAGE_OPENEXR)\n  list(APPEND INC_SYS\n    ${OPENEXR_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENEXR_LIBRARIES}\n  )\n  add_definitions(-DWITH_IMAGE_OPENEXR)\n  if(WIN32)\n    if(EXISTS ${LIBDIR}/imath/bin/imath.dll)\n      add_definitions(-DIMATH_DLL)\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Definitions with CMake\nDESCRIPTION: This snippet adds compiler definitions to suppress deprecation warnings, specifically related to CRT functions.  This is common in older codebases to maintain compatibility.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-D_CRT_SECURE_NO_DEPRECATE)\nadd_definitions(-D_CRT_NONSTDC_NO_DEPRECATE)\n```\n\n----------------------------------------\n\nTITLE: Setting PLY I/O Tests - CMake\nDESCRIPTION: Configures PLY import tests using `add_blender_test_io`. It imports PLY files from the test directory and stores the output in the specified output directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_50\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_IO_PLY AND TEST_SRC_DIR_EXISTS)\n  add_blender_test_io(\n    io_ply_import\n    --python ${CMAKE_CURRENT_LIST_DIR}/io_ply_import_test.py\n    --\n    --testdir \"${TEST_SRC_DIR}/io_tests/ply\"\n    --outdir \"${TEST_OUT_DIR}/io_ply\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (INC)\nDESCRIPTION: Sets the include directories for the performance test. This includes the current directory (.) and parent directories (.. and ../..).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/tests/performance/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n)\n```\n\n----------------------------------------\n\nTITLE: Appending flag for debug mode\nDESCRIPTION: This snippet conditionally appends a compiler flag to enable debug mode based on the WITH_CYCLES_DEBUG option.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEBUG)\n    list(APPEND sycl_compiler_flags -DWITH_CYCLES_DEBUG)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (Cmake)\nDESCRIPTION: This snippet defines system include directories. In this case, `INC_SYS` is set to empty indicating no specific system include directories are required.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/cineon/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Kernel Source Files\nDESCRIPTION: This snippet uses a custom command `delayed_install` to install various kernel source files and header files into the installation directory (`${CYCLES_INSTALL_PATH}/source/kernel`). This is likely done to enable runtime compilation of the kernel, where the source code needs to be available at runtime.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_BAKE_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/bake)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_BVH_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/bvh)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_CAMERA_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/camera)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_CLOSURE_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/closure)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_CUDA}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/cuda)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_CUDA_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/cuda)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_GPU_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/gpu)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIP}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hip)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIP_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hip)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIPRT}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_HIPRT_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt)\nif(WITH_CYCLES_DEVICE_HIPRT)\n  delayed_install(${HIPRT_INCLUDE_DIR}      \"${SRC_KERNEL_DEVICE_HIPRT_SDK_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt/hiprt)\n  delayed_install(${HIPRT_INCLUDE_DIR}      \"${SRC_KERNEL_DEVICE_HIPRT_SDK}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/hiprt/hiprt/impl)\nendif()\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_OPTIX}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/optix)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_OPTIX_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/optix)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_METAL}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/metal)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_DEVICE_METAL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/device/metal)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_FILM_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/film)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_GEOM_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/geom)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_INTEGRATOR_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/integrator)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_LIGHT_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/light)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_OSL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/osl)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_SAMPLE_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/sample)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_SVM_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/svm)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_TYPES_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_KERNEL_UTIL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/kernel/util)\ndelayed_install(${CMAKE_CURRENT_SOURCE_DIR} \"${SRC_UTIL_HEADERS}\" ${CYCLES_INSTALL_PATH}/source/util)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files\nDESCRIPTION: Defines the list of source files for the Wayland dynamic loading library. These source files contain the implementation for dynamically loading Wayland client, cursor, and utility functions. Header files are also included as sources to ensure they are tracked for dependency changes.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/wayland_dynload/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/wayland_dynload_client.c\n  intern/wayland_dynload_cursor.c\n  intern/wayland_dynload_utils.c\n\n  extern/wayland_dynload_API.h\n  extern/wayland_dynload_client.h\n  extern/wayland_dynload_cursor.h\n  intern/wayland_dynload_utils.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the ITASC Library\nDESCRIPTION: This CMake command uses a custom CMake function `blender_add_lib` to create the `bf_intern_itasc` library. It passes the source files, include directories, system includes, and external libraries as arguments.  This function likely performs platform-specific configurations and builds the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/itasc/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_intern_itasc \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding the Library (blender_add_lib)\nDESCRIPTION: This snippet uses a custom CMake function, `blender_add_lib`, to create the clip editor space library (bf_editor_space_clip). It passes the source files, include directories, system include directories, and library dependencies as arguments.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_clip/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_editor_space_clip \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting pkg-config Variables with CMake\nDESCRIPTION: This snippet sets variables used for generating a pkg-config file, which is used by other projects to find and link against the Theora library. It defines the prefix, executable prefix, library directory, and include directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(prefix ${LIBDIR}/theora)\nset(exec_prefix ${LIBDIR}/theora/bin)\nset(libdir ${LIBDIR}/theora/lib)\nset(includedir ${LIBDIR}/theora/include)\n```\n\n----------------------------------------\n\nTITLE: Defining header files for cycles_subd\nDESCRIPTION: Defines the header files associated with the cycles_subd library, stored in the SRC_HEADERS variable. These header files declare the functions, classes, and other elements that are part of the library's public interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/subd/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC_HEADERS\n  dice.h\n  interpolation.h\n  osd.h\n  patch.h\n  split.h\n  subpatch.h\n)\n```\n\n----------------------------------------\n\nTITLE: Animation FCurves Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for animation F-curves using the `bl_animation_fcurves.py` Python script. The test specifies the test directory where the tests are located.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nif(TEST_SRC_DIR_EXISTS)\n  add_blender_test(\n    bl_animation_fcurves\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_fcurves.py\n    --\n    --testdir \"${TEST_SRC_DIR}/animation\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Theora Source Files - Encoder\nDESCRIPTION: This snippet defines a list of source files that make up the encoder part of the Theora library. These files contain functionalities specific to encoding video.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIBTHEORA_ENC\n  \"lib/analyze.c\"\n  \"lib/encapiwrapper.c\"\n  \"lib/encfrag.c\"\n  \"lib/encinfo.c\"\n  \"lib/encode.c\"\n  \"lib/enquant.c\"\n  \"lib/fdct.c\"\n  \"lib/huffenc.c\"\n  \"lib/mathops.c\"\n  \"lib/mcenc.c\"\n  \"lib/rate.c\"\n  \"lib/tokenize.c\"\n\n  \"lib/x86_vc/mmxencfrag.c\"\n  \"lib/x86_vc/mmxfdct.c\"\n  \"lib/x86_vc/x86enc.c\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Lemon Library CMake\nDESCRIPTION: Links the Lemon library against the external libraries for GLPK, CoinUtils (CLP, CBC), CPLEX and SoPlex if they are enabled. This specifies the dependencies that the Lemon library requires.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nTARGET_LINK_LIBRARIES(lemon\n  ${GLPK_LIBRARIES} ${COIN_LIBRARIES} ${ILOG_LIBRARIES} ${SOPLEX_LIBRARIES}\n  )\n```\n\n----------------------------------------\n\nTITLE: Assigning File Paths to Object Names and Handling Encoding Issues\nDESCRIPTION: This snippet shows how to assign a file path to an object's name while addressing potential encoding issues. It utilizes `os.fsencode()` to convert the path to bytes, decodes it to UTF-8, and then assigns it to the object's name. This avoids `TypeError` exceptions caused by incorrect string types.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_file_paths_and_encoding.rst#_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> bpy.context.object.name = bpy.data.filepath\nTraceback (most recent call last):\n  File \"<blender_console>\", line 1, in <module>\nTypeError: bpy_struct: item.attr= val: Object.name expected a string type, not str\n\n>>> import os\n>>> filepath_bytes = os.fsencode(bpy.data.filepath)\n>>> filepath_utf8 = filepath_bytes.decode('utf-8', \"replace\")\n>>> bpy.context.object.name = filepath_utf8\n```\n\n----------------------------------------\n\nTITLE: Specifying Draw Buffer with glDrawBuffer (bgl)\nDESCRIPTION: Specifies which color buffers are to be drawn into. The 'mode' parameter determines the target buffer for drawing.  This function controls where rendering output is directed.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bgl.rst#_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nbgl.glDrawBuffer(mode)\n```\n\n----------------------------------------\n\nTITLE: Efficient List Modification: List Comprehension (Python)\nDESCRIPTION: Demonstrates a more efficient way to create a new list by filtering elements from an existing list using list comprehension. It creates a new list of polygons, excluding those with 3 vertices (triangles).\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npolygons = [p for p in mesh.polygons if len(p.vertices) != 3]\n```\n\n----------------------------------------\n\nTITLE: Installing pystring Library in CMake\nDESCRIPTION: This snippet defines the installation rules for the pystring library. It specifies the destination directories for the runtime, library, archive, and public headers.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_pystring.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${PROJECT_NAME}\n\tRUNTIME DESTINATION bin\n\tLIBRARY DESTINATION lib\n\tARCHIVE DESTINATION lib\n\tPUBLIC_HEADER DESTINATION include\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories (CMake)\nDESCRIPTION: Defines system include directories, though it's currently empty. It is intended to hold system-level includes if required.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/tests/performance/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Adding OpenImageIO Library\nDESCRIPTION: This snippet uses the blender_add_lib macro to create the bf_imbuf_openimageio library.  It specifies the source files, include directories, and library dependencies needed to build this library. This library provides the interface between Blender and OpenImageIO.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/oiio/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(bf_imbuf_openimageio \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions for MSVC - CMake\nDESCRIPTION: This snippet adds a compiler definition specifically for the Microsoft Visual C++ (MSVC) compiler. The `/DNOMINMAX` definition prevents the compiler from defining min/max macros, which can conflict with other libraries or code that defines its own min/max functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/Converter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n  add_definitions(\n    /DNOMINMAX\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional libdecor Support\nDESCRIPTION: Conditionally adds libdecor-related source files and include directories if the WITH_GHOST_WAYLAND_LIBDECOR option is enabled. This adds support for window decorations using libdecor.  Requires WITH_GHOST_WAYLAND_LIBDECOR to be defined.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/wayland_dynload/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GHOST_WAYLAND_LIBDECOR)\n  list(APPEND INC_SYS\n    ${libdecor_INCLUDE_DIRS}\n  )\n  list(APPEND SRC\n    intern/wayland_dynload_libdecor.c\n\n    extern/wayland_dynload_libdecor.h\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set CMake Policy\nDESCRIPTION: Sets CMake policies to control build behavior, ensuring consistent and predictable results across different CMake versions. These policies cover library linking, string quoting, syntax error handling, and the requirement for CMakeLists.txt in input directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# see \"cmake --help-policy CMP0003\"\n# So library linking is more sane\ncmake_policy(SET CMP0003 NEW)\n\n# So BUILDINFO and BLENDERPATH strings are automatically quoted\ncmake_policy(SET CMP0005 NEW)\n\n# So syntax problems are errors\ncmake_policy(SET CMP0010 NEW)\n\n# Input directories must have `CMakeLists.txt`.\ncmake_policy(SET CMP0014 NEW)\n```\n\n----------------------------------------\n\nTITLE: Animation Armature Test (CMake)\nDESCRIPTION: This CMake snippet configures a test for animation armatures using the `bl_animation_armature.py` Python script. The test does not require loading a blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n  bl_animation_armature\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_armature.py\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Sets the include directories for the GHOST library. This includes both public include directories within the project and external system include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/ghost/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n  ../guardedalloc\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Removal of Strict Flags (Non-Apple)\nDESCRIPTION: This code conditionally removes strict C compiler flags (specifically, `-Wno-error=unused-but-set-variable`) when building on a non-Apple platform. This is similar to a previous conditional flag addition, but focuses on removing a warning rather than adding one.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_116\n\nLANGUAGE: CMake\nCODE:\n```\n  if(NOT APPLE)\n    add_check_c_compiler_flags(\n      C_REMOVE_STRICT_FLAGS\n      C_WARN_NO_ERROR_UNUSED_BUT_SET_VARIABLE -Wno-error=unused-but-set-variable\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries - CMake\nDESCRIPTION: This snippet sets the libraries that the Depsgraph library depends on. It lists the Blender libraries that are required for building.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/depsgraph/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::functions\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::intern::guardedalloc\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Physics Constraint Example Usage in Python\nDESCRIPTION: This example illustrates a basic import of the `bge` and `mathutils` modules, suggesting its inclusion of constraints or physics-related operations (although specific constraints or physics functionalities aren't directly used in the snippet).\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge.constraints.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport bge\nimport mathutils\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This code adds several subdirectories to the build process. The `lemon` subdirectory is always included. The `contrib`, `demo`, `tools`, `doc`, and `test` subdirectories are only included if the current source directory is the same as the project source directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nADD_SUBDIRECTORY(lemon)\nIF(${CMAKE_SOURCE_DIR} STREQUAL ${PROJECT_SOURCE_DIR})\n  ADD_SUBDIRECTORY(contrib)\n  ADD_SUBDIRECTORY(demo)\n  ADD_SUBDIRECTORY(tools)\n  ADD_SUBDIRECTORY(doc)\n  ADD_SUBDIRECTORY(test)\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Include GFlags Header (Old)\nDESCRIPTION: This code snippet demonstrates the old method of including the GFlags header file, which is deprecated in version 1.0. While backwards-compatibility forwarding headers are in place, it is recommended to update the code to use the new method. It includes the header from `/usr/include/google`.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/README.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n   #include <google/gflags.h>\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories - CMake\nDESCRIPTION: This snippet sets the include directories required for compiling the Blender editor space API. It defines the `INC` variable which holds the relative paths to the necessary header files. These paths are used to locate the header files during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_api/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../include\n  ../io\n  ../../makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Adding License Subdirectory using CMake\nDESCRIPTION: This CMake command includes the 'license' directory in the project's build process. It allows CMake to process the CMakeLists.txt file within the 'license' directory and incorporate its contents into the overall build configuration. No specific dependencies are required.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/doc/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(license)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Definitions\nDESCRIPTION: This snippet configures include directories and preprocessor definitions for the project. It adds the current directory, 'cxx', and the GMP include directory to the include path, and defines the '__GMP_WITHIN_GMPXX' preprocessor macro. This ensures the compiler can find necessary header files and correctly compile the source code.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_gmpxx.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(. cxx ${GMP_INCLUDE_DIR})\nadd_definitions(-D__GMP_WITHIN_GMPXX)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies - CMake\nDESCRIPTION: This snippet defines the library dependencies for the spindle encryption library. In this case, the LIB variable is set to empty, indicating that there are no external library dependencies.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/spindle/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Compressing EXR with oiiotool\nDESCRIPTION: This command uses oiiotool to compress an EXR image. It extracts the R, G, and B channels, sets the data type to float, applies DWAB compression with a rate of 300, clamps the values between 0.0 and 32000.0, and saves the output as a new EXR file.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/datafiles/studiolights/world/license.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\noiiotool input.exr --ch R,G,B -d float --compression dwab:300 --clamp:min=0.0:max=32000.0 -o output.exr\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the 'SRC' variable, which lists the source files (.cc and .hh) that make up the 'bf_render_hydra' library. These files include camera, engine, and delegate implementations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  camera.cc\n  engine.cc\n  final_engine.cc\n  light_tasks_delegate.cc\n  preview_engine.cc\n  python.cc\n  render_task_delegate.cc\n  viewport_engine.cc\n\n  camera.hh\n  engine.hh\n  final_engine.hh\n  light_tasks_delegate.hh\n  preview_engine.hh\n  render_task_delegate.hh\n  settings.hh\n  viewport_engine.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting library dependencies (empty)\nDESCRIPTION: This snippet defines a variable for library dependencies, but it is currently empty. This allows adding any external libraries that gflags might depend on in the future.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/gflags/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Adding Google Tests (gtests)\nDESCRIPTION: This snippet conditionally configures and adds Google Tests (gtests) if the `WITH_GTESTS` option is enabled. It defines lists of source files, include directories, and libraries for the tests, then uses `blender_add_test_suite_executable` to create the test executable. Finally, it adds a subdirectory for performance tests.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_GTESTS)\n  set(TEST_SRC\n    tests/BLI_any_test.cc\n    tests/BLI_array_state_test.cc\n    tests/BLI_array_store_test.cc\n    tests/BLI_array_test.cc\n    tests/BLI_array_utils_test.cc\n    tests/BLI_binary_search_test.cc\n    tests/BLI_bit_group_vector_test.cc\n    tests/BLI_bit_ref_test.cc\n    tests/BLI_bit_span_test.cc\n    tests/BLI_bit_vector_test.cc\n    tests/BLI_bitmap_test.cc\n    tests/BLI_bounds_test.cc\n    tests/BLI_build_config_test.cc\n    tests/BLI_color_test.cc\n    tests/BLI_convexhull_2d_test.cc\n    tests/BLI_cpp_type_test.cc\n    tests/BLI_csv_parse_test.cc\n    tests/BLI_delaunay_2d_test.cc\n    tests/BLI_disjoint_set_test.cc\n    tests/BLI_expr_pylike_eval_test.cc\n    tests/BLI_fileops_test.cc\n    tests/BLI_fixed_width_int_test.cc\n    tests/BLI_function_ref_test.cc\n    tests/BLI_generic_array_test.cc\n    tests/BLI_generic_span_test.cc\n    tests/BLI_generic_vector_array_test.cc\n    tests/BLI_ghash_test.cc\n    tests/BLI_hash_mm2a_test.cc\n    tests/BLI_heap_simple_test.cc\n    tests/BLI_heap_test.cc\n    tests/BLI_implicit_sharing_test.cc\n    tests/BLI_index_mask_expression_test.cc\n    tests/BLI_index_mask_test.cc\n    tests/BLI_index_range_test.cc\n    tests/BLI_index_ranges_builder_test.cc\n    tests/BLI_inplace_priority_queue_test.cc\n    tests/BLI_kdopbvh_test.cc\n    tests/BLI_kdtree_test.cc\n    tests/BLI_length_parameterize_test.cc\n    tests/BLI_linear_allocator_chunked_list_test.cc\n    tests/BLI_linear_allocator_test.cc\n    tests/BLI_linklist_lockfree_test.cc\n    tests/BLI_listbase_test.cc\n    tests/BLI_map_test.cc\n    tests/BLI_math_base_safe_test.cc\n    tests/BLI_math_base_test.cc\n    tests/BLI_math_bits_test.cc\n    tests/BLI_math_color_test.cc\n    tests/BLI_math_geom_test.cc\n    tests/BLI_math_half_test.cc\n    tests/BLI_math_interp_test.cc\n    tests/BLI_math_matrix_test.cc\n    tests/BLI_math_matrix_types_test.cc\n    tests/BLI_math_rotation_test.cc\n    tests/BLI_math_rotation_types_test.cc\n    tests/BLI_math_solvers_test.cc\n    tests/BLI_math_time_test.cc\n    tests/BLI_math_vector_test.cc\n    tests/BLI_math_vector_types_test.cc\n    tests/BLI_memiter_test.cc\n    tests/BLI_memory_cache_test.cc\n    tests/BLI_memory_counter_test.cc\n    tests/BLI_memory_utils_test.cc\n    tests/BLI_mesh_boolean_test.cc\n    tests/BLI_mesh_intersect_test.cc\n    tests/BLI_multi_value_map_test.cc\n    tests/BLI_offset_indices_test.cc\n    tests/BLI_path_utils_test.cc\n    tests/BLI_polyfill_2d_test.cc\n    tests/BLI_pool_test.cc\n    tests/BLI_random_access_iterator_mixin_test.cc\n    tests/BLI_ressource_strings.h\n    tests/BLI_serialize_test.cc\n    tests/BLI_session_uid_test.cc\n    tests/BLI_set_test.cc\n    tests/BLI_span_test.cc\n    tests/BLI_stack_cxx_test.cc\n    tests/BLI_stack_test.cc\n    tests/BLI_string_ref_test.cc\n    tests/BLI_string_search_test.cc\n    tests/BLI_string_test.cc\n    tests/BLI_string_utf8_test.cc\n    tests/BLI_string_utils_test.cc\n    tests/BLI_task_graph_test.cc\n    tests/BLI_task_test.cc\n    tests/BLI_tempfile_test.cc\n    tests/BLI_unique_sorted_indices_test.cc\n    tests/BLI_utildefines_test.cc\n    tests/BLI_uuid_test.cc\n    tests/BLI_vector_set_test.cc\n    tests/BLI_vector_test.cc\n    tests/BLI_virtual_array_test.cc\n\n    tests/BLI_exception_safety_test_utils.hh\n  )\n  set(TEST_INC\n    ../imbuf\n  )\n  set(TEST_LIB\n    bf_blenlib\n  )\n  blender_add_test_suite_executable(BLI \"${TEST_SRC}\" \"${INC};${TEST_INC}\" \"${INC_SYS}\" \"${LIB};${TEST_LIB}\")\n\n  add_subdirectory(tests/performance)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Files - CMake\nDESCRIPTION: Defines a variable to hold library files, but the set is empty in this case.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/binreloc/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Call abort() on assertion failure\nDESCRIPTION: This option configures the behavior when an assertion fails using `BLI_assert()`. When enabled, it calls `abort()`, terminating the program. This is useful for debugging.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\noption(WITH_ASSERT_ABORT \"Call abort() when raising an assertion through BLI_assert()\" ON)\nmark_as_advanced(WITH_ASSERT_ABORT)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions\nDESCRIPTION: This snippet adds a compiler definition `-DWITH_CLOG_PTHREADS`, which suggests that the `bf_intern_clog` library is designed to use pthreads for threading.  This definition is disabled for `makesdna` & `makesrna` targets.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/clog/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DWITH_CLOG_PTHREADS)\n```\n\n----------------------------------------\n\nTITLE: Add GNU Compiler Flags\nDESCRIPTION: This snippet checks if the compiler is GNU GCC and appends a compiler flag to treat implicit function declarations as errors. This helps catch potential issues during compilation related to undeclared functions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/makesrna/intern/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_COMPILER_IS_GNUCC)\n  # add here so we fail early.\n  string(APPEND CMAKE_C_FLAGS \" -Werror=implicit-function-declaration\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Buildinfo Object (CMake)\nDESCRIPTION: Conditionally links the `buildinfoobj` library to the `IMB_performance_test` target if `WITH_BUILDINFO` is enabled.  This links in build information into the executable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/tests/performance/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_BUILDINFO)\n  target_link_libraries(IMB_performance_test PRIVATE buildinfoobj)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Python Executable Path\nDESCRIPTION: This snippet defines a CMake cache variable to specify the Python executable used for running unit tests. The variable is marked as advanced, so it will be hidden in standard CMake configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_56\n\nLANGUAGE: cmake\nCODE:\n```\n# NOTE: All callers of this must add `TEST_PYTHON_EXE_EXTRA_ARGS` before any other arguments.\nset(TEST_PYTHON_EXE \"\" CACHE PATH \"Python executable to run unit tests\")\nmark_as_advanced(TEST_PYTHON_EXE)\n```\n\n----------------------------------------\n\nTITLE: Python Callback Example\nDESCRIPTION: This code snippet demonstrates a Python callback function that can be used with the (deprecated) objectCallbacks attribute of the BL_Shader class.  The function takes an object as an argument and prints its name, allowing for per-object shader customization.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/bge_types/bge.types.BL_Shader.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef callback(object):\n    print(\"render object %r\" % object.name)\n```\n\n----------------------------------------\n\nTITLE: Installing Localization Files with CMake\nDESCRIPTION: This snippet handles installation of localization files, including converting `.po` files to `.mo` files using `msgfmt_simple`, creating a custom target to compile the locales, and installing both the language files and the compiled localization files into their respective destination directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\n# localization\nif(WITH_INTERNATIONAL)\n  set(_locale_dir \"${CMAKE_SOURCE_DIR}/locale\")\n  set(_locale_target_dir ${TARGETDIR_VER}/datafiles/locale)\n\n  file(GLOB _po_files \"${_locale_dir}/po/*.po\")\n  foreach(_po_file ${_po_files})\n    msgfmt_simple(${_po_file} _all_mo_files)\n  endforeach()\n\n  # Create a custom target which will compile all `*.po` to `*.mo`.\n  add_custom_target(\n    locales\n    DEPENDS ${_all_mo_files}\n  )\n  add_dependencies(blender locales)\n\n  # Generate INSTALL rules.\n  install(\n    FILES ${_locale_dir}/languages\n    DESTINATION ${_locale_target_dir}\n  )\n\n  foreach(_mo_file ${_all_mo_files})\n    get_filename_component(_locale_name ${_mo_file} NAME_WE)\n    install(\n      FILES ${_mo_file}\n      DESTINATION ${_locale_target_dir}/${_locale_name}/LC_MESSAGES\n      RENAME blender.mo\n    )\n    unset(_locale_name)\n  endforeach()\n\n  unset(_all_mo_files)\n  unset(_po_files)\n  unset(_po_file)\n  unset(_mo_file)\n  unset(_locale_target_dir)\n\n  unset(_locale_dir)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Alembic\nDESCRIPTION: This snippet conditionally includes Alembic support. It appends `../io/alembic` to the include paths (`INC`) and defines `-DWITH_ALEMBIC` to enable the corresponding code paths for Alembic file format support. This allows the software to import and export Alembic scene data.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_ALEMBIC)\n  list(APPEND INC\n    ../io/alembic\n  )\n  add_definitions(-DWITH_ALEMBIC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies - CMake\nDESCRIPTION: Lists the library dependencies of the Render module. These libraries are linked with the module to provide access to their functionalities. The 'PRIVATE' keyword indicates that these libraries are only linked with the Render module and not exposed to other modules.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blentranslation\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::draw\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::imbuf::movie\n  PRIVATE bf::intern::guardedalloc\n  bf_compositor\n  PRIVATE bf::intern::atomic\n  PRIVATE bf::nodes\n  PRIVATE bf::sequencer\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Globbing Header Files with CMake\nDESCRIPTION: This snippet uses the `file(GLOB)` command to collect all header files in the `include/theora` directory. These headers are then used in subsequent steps to define the library's interface.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB HEADERS\n  \"include/theora/codec.h\"\n  \"include/theora/theora.h\"\n  \"include/theora/theoradec.h\"\n  \"include/theora/theoraenc.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories\nDESCRIPTION: This snippet sets system include directories. In this case, it appears to be empty, implying that no specific system include directories are needed for this component.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_console/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Installing PyOpenColorIO Python Packages on Windows CMake\nDESCRIPTION: This snippet installs the PyOpenColorIO Python packages on Windows. It uses the `install` command to copy the PyOpenColorIO directory to `${TARGETDIR_SITE_PACKAGES}` for different configurations (Release, Debug). It distinguishes between debug and non-debug versions.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  install(\n    DIRECTORY ${LIBDIR}/opencolorio/lib/site-packages-debug/PyOpenColorIO\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Debug\n  )\n  install(\n    DIRECTORY ${LIBDIR}/opencolorio/lib/site-packages/PyOpenColorIO\n    DESTINATION ${TARGETDIR_SITE_PACKAGES}\n    CONFIGURATIONS Release;RelWithDebInfo;MinSizeRel\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (Cmake)\nDESCRIPTION: This snippet defines the include directories for the Cineon/DPX image buffer library. The `INC` variable is set to relative paths, likely representing the current directory and parent directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/intern/cineon/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  .\n  ..\n  ../..\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion (Fluid)\nDESCRIPTION: Conditionally adds the 'mantaflow' subdirectory if the WITH_MOD_FLUID flag is enabled.  This incorporates the fluid simulation module.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  add_subdirectory(mantaflow)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (CMake)\nDESCRIPTION: This snippet defines the libraries to link with the `msgfmt` executable. It includes libraries such as `bf::blenlib`, `bf::intern::guardedalloc`, zlib, and platform-specific libraries.  bf_intern_utfconv is added on Windows.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE PRIVATE bf::blenlib\n  PRIVATE bf::intern::guardedalloc\n  ${ZLIB_LIBRARIES}\n  ${PLATFORM_LINKLIBS})\n\nif(WIN32)\n  list(APPEND LIB bf_intern_utfconv)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target properties for blender_cpu_check in CMake\nDESCRIPTION: This snippet sets the output directories for the `blender_cpu_check` library. It defines both the `RUNTIME_OUTPUT_DIRECTORY` and `LIBRARY_OUTPUT_DIRECTORY` properties to be `${CMAKE_BINARY_DIR}/bin/${_LIB_SUB_FOLDER}`. This ensures that the library is built and placed in the appropriate directory.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/cpucheck/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(blender_cpu_check\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin/${_LIB_SUB_FOLDER}\"\n  LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/bin/${_LIB_SUB_FOLDER}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Definitions - CMake\nDESCRIPTION: This snippet adds compiler definitions from the GFLAGS_DEFINES and GLOG_DEFINES variables. This ensures that the compiler uses the correct flags and configurations for gflags and glog during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/glog/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(${GFLAGS_DEFINES})\nadd_definitions(${GLOG_DEFINES})\n```\n\n----------------------------------------\n\nTITLE: Running the bloat test\nDESCRIPTION: This snippet uses the make command to run the bloat test within the format-benchmark repository. This tests the code bloat of the fmt library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/fmtlib/README.rst#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ make bloat-test\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAL Shared Library with CMake\nDESCRIPTION: This snippet installs the OpenAL shared library (`OpenAL32.dll`) using the `windows_install_shared_manifest` function for all build configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_55\n\nLANGUAGE: cmake\nCODE:\n```\nwindows_install_shared_manifest(\n  FILES\n    ${LIBDIR}/openal/lib/OpenAL32.dll\n  ALL\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Blender Target (Portable vs. System)\nDESCRIPTION: This CMake code installs the Blender target, differentiating between portable and system installations based on the `WITH_INSTALL_PORTABLE` variable. If `WITH_INSTALL_PORTABLE` is enabled and `WITH_PYTHON_MODULE` is true, Blender is installed to the `TARGETDIR_BPY` directory; otherwise, the Blender library is installed to the same location. If `WITH_PYTHON_MODULE` is false, the script installs the Blender target directly to the root directory (`.`).\nSOURCE: https://github.com/upbge/upbge/blob/master/source/creator/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\n  if(WITH_PYTHON_MODULE)\n    if(WITH_INSTALL_PORTABLE)\n      install(\n        TARGETS blender\n        DESTINATION ${TARGETDIR_BPY}\n      )\n    else()\n      install(\n        TARGETS blender\n        LIBRARY DESTINATION ${TARGETDIR_BPY}\n      )\n    endif()\n\n    # none of the other files are needed currently\n  elseif(WITH_INSTALL_PORTABLE)\n    set(BLENDER_BIN \"blender\")\n    install(\n      TARGETS blender\n      DESTINATION \".\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with Mantaflow Fluid Solver\nDESCRIPTION: This snippet conditionally includes Mantaflow fluid simulation support if `WITH_MOD_FLUID` is enabled. It adds `bf_intern_mantaflow` to the library list (`LIB`) and defines `-DWITH_FLUID` to enable the corresponding code paths for fluid dynamics.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_MOD_FLUID)\n  list(APPEND LIB\n    bf_intern_mantaflow\n  )\n  add_definitions(-DWITH_FLUID)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding custom command for building on Windows\nDESCRIPTION: This snippet adds a custom command to build the oneAPI kernel library on Windows.  It sets environment variables and runs the SYCL compiler with configuration-specific flags.  It outputs a DLL and LIB file.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    add_custom_command(\n      OUTPUT ${cycles_kernel_oneapi_lib} ${cycles_kernel_oneapi_linker_lib}\n      COMMAND ${CMAKE_COMMAND} -E env\n        # Set `LIB` for the compiler to find `sycl.lib` and in case of `icpx`, `libircmt.lib`.\n        \"LIB=${sycl_compiler_root}/../lib\\;${sycl_compiler_root}/../compiler/lib/intel64_win\"\n        \"PATH=${OCLOC_INSTALL_DIR}\\;${sycl_compiler_root}\"\n        ${SYCL_COMPILER}\n        \"$<$<CONFIG:Release>:${sycl_compiler_flags_Release}>\"\n        \"$<$<CONFIG:RelWithDebInfo>:${sycl_compiler_flags_RelWithDebInfo}>\"\n        \"$<$<CONFIG:Debug>:${sycl_compiler_flags_Debug}>\"\n        \"$<$<CONFIG:MinSizeRel>:${sycl_compiler_flags_Release}>\"\n      COMMAND_EXPAND_LISTS\n      DEPENDS ${cycles_oneapi_kernel_sources} ${SYCL_COMPILER})\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Building Cycles Precompute Executable\nDESCRIPTION: This snippet configures the build process for the cycles_precompute executable if WITH_CYCLES_PRECOMPUTE is enabled. It defines the source files, creates the executable, links libraries, and sets up installation rules.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/app/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_PRECOMPUTE)\n  set(SRC\n    cycles_precompute.cpp\n  )\n\n  add_executable(cycles_precompute ${SRC} ${INC} ${INC_SYS})\n  unset(SRC)\n\n  target_link_libraries(cycles_precompute PRIVATE ${LIB})\n\n  install(\n    TARGETS cycles_precompute\n    DESTINATION ${CMAKE_INSTALL_PREFIX})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL to a new library\nDESCRIPTION: This snippet provides a template for applying the GNU Lesser General Public License to a new software library.  It includes the necessary copyright notice, license terms, warranty disclaimer, and contact information. The user needs to replace the placeholders with the actual library name, year, and author information.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/LGPL2.1-license.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet sets system include directories, but it's currently empty.  It could be used to include system-level headers if needed.  This is typically not required for this specific library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/dualcon/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Animation Bake Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for animation baking.  It specifies the Python script to execute, `bl_animation_bake.py`.  The test doesn't load a .blend file.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n  bl_animation_bake\n  --python ${CMAKE_CURRENT_LIST_DIR}/bl_animation_bake.py\n)\n```\n\n----------------------------------------\n\nTITLE: Game Engine Security Option\nDESCRIPTION: This snippet defines the WITH_GAMEENGINE_SECURITY option, allowing users to disable game engine python debugging tools. This improves security in production builds.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\noption(WITH_GAMEENGINE_SECURITY \"Disable game engine python debugging tools\" OFF)\nmark_as_advanced(WITH_GAMEENGINE_SECURITY)\n```\n\n----------------------------------------\n\nTITLE: Setting System Include Directories - CMake\nDESCRIPTION: This snippet is used to set system include directories. In this particular instance it is an empty set, meaning there are no specific system include directories required for the FBX importer beyond the standard system paths.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/fbx/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC_SYS\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying MIT License\nDESCRIPTION: This code snippet presents the MIT License, granting permission to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the software. It also includes a disclaimer of warranty and limitations of liability.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/license.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nThe MIT License\n---------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to\ndeal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or\nsell copies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions based on CUDA/OptiX (CMake)\nDESCRIPTION: This snippet conditionally adds compiler definitions based on whether CUDA or OptiX devices are enabled. If CUDA dynamic loading is disabled, it defines `CYCLES_CUDA_NVCC_EXECUTABLE` with the path to the CUDA NVCC executable. It also defines `CYCLES_RUNTIME_OPTIX_ROOT_DIR` with the OptiX root directory. These definitions are used during compilation to configure the CUDA and OptiX backends.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/device/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CYCLES_DEVICE_OPTIX OR WITH_CYCLES_DEVICE_CUDA)\n  if(NOT WITH_CUDA_DYNLOAD)\n    add_definitions(-DCYCLES_CUDA_NVCC_EXECUTABLE=\"${CUDA_NVCC_EXECUTABLE}\")\n  endif()\n\n  add_definitions(-DCYCLES_RUNTIME_OPTIX_ROOT_DIR=\"${CYCLES_RUNTIME_OPTIX_ROOT_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories CMake\nDESCRIPTION: Sets the include directories for the `extern_curve_fit_nd` library. `INC` includes the current directory, while `INC_SYS` remains empty in this case. These variables are used later in the `blender_add_lib` function.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/curve_fit_nd/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  PUBLIC .\n)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files (CMake)\nDESCRIPTION: This snippet defines the source files used to build the `msgfmt` executable. In this case, only `msgfmt.cc` is explicitly defined as source, and potentially a manifest file in case of Windows and not using an external manifest.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blentranslation/msgfmt/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  msgfmt.cc\n)\n\nif(WIN32 AND NOT WITH_WINDOWS_EXTERNAL_MANIFEST)\n  LIST(APPEND SRC \"${CMAKE_BINARY_DIR}/tests.exe.manifest\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files - CMake\nDESCRIPTION: This snippet defines the list of source files and header files that constitute the dual contouring library. These files contain the implementation of algorithms like manifold extraction, marching cubes, and octree management, as well as data structures and C API bindings.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/dualcon/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/manifold_table.cpp\n  intern/marching_cubes_table.cpp\n  intern/octree.cpp\n  intern/Projections.cpp\n\n  intern/cubes.h\n  intern/GeoCommon.h\n  intern/manifold_table.h\n  intern/marching_cubes_table.h\n  intern/MemoryAllocator.h\n  intern/ModelReader.h\n  intern/octree.h\n  intern/Projections.h\n  intern/Queue.h\n\n  intern/dualcon_c_api.cpp\n  dualcon.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding libmv test executable\nDESCRIPTION: This CMake code snippet uses the `blender_add_test_executable` function to define and build a test executable.  It specifies the executable name, the source file, include directories (`INC`, `INC_SYS`), and libraries to link against (including `libmv_test_dataset`, `bf_intern_libmv` and other libraries defined by `LIB`).\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_test_executable(\"libmv_klt_region_tracker\" \"./libmv/tracking/klt_region_tracker_test.cc\" \"${INC}\" \"${INC_SYS}\" \"libmv_test_dataset;bf_intern_libmv;${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files with CMake\nDESCRIPTION: This snippet uses the `set` command in CMake to define a variable named `SRC` which contains a list of source files (.cc) for the UPBGE draw engine. These files are compiled to build the engine's functionality.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/draw/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  intern/attribute_convert.cc\n  intern/draw_cache.cc\n  intern/draw_cache_extract_mesh.cc\n  intern/draw_cache_extract_mesh_render_data.cc\n  intern/mesh_extractors/extract_mesh.cc\n  intern/mesh_extractors/extract_mesh_ibo_edituv.cc\n  intern/mesh_extractors/extract_mesh_ibo_fdots.cc\n  intern/mesh_extractors/extract_mesh_ibo_lines.cc\n  intern/mesh_extractors/extract_mesh_ibo_lines_adjacency.cc\n  intern/mesh_extractors/extract_mesh_ibo_lines_paint_mask.cc\n  intern/mesh_extractors/extract_mesh_ibo_points.cc\n  intern/mesh_extractors/extract_mesh_ibo_tris.cc\n  intern/mesh_extractors/extract_mesh_vbo_attributes.cc\n  intern/mesh_extractors/extract_mesh_vbo_edge_fac.cc\n  intern/mesh_extractors/extract_mesh_vbo_edit_data.cc\n  intern/mesh_extractors/extract_mesh_vbo_edituv_data.cc\n  intern/mesh_extractors/extract_mesh_vbo_edituv_stretch_angle.cc\n  intern/mesh_extractors/extract_mesh_vbo_edituv_stretch_area.cc\n  intern/mesh_extractors/extract_mesh_vbo_fdots_edituv_data.cc\n  intern/mesh_extractors/extract_mesh_vbo_fdots_nor.cc\n  intern/mesh_extractors/extract_mesh_vbo_fdots_pos.cc\n  intern/mesh_extractors/extract_mesh_vbo_fdots_uv.cc\n  intern/mesh_extractors/extract_mesh_vbo_lnor.cc\n  intern/mesh_extractors/extract_mesh_vbo_mesh_analysis.cc\n  intern/mesh_extractors/extract_mesh_vbo_orco.cc\n  intern/mesh_extractors/extract_mesh_vbo_pos.cc\n  intern/mesh_extractors/extract_mesh_vbo_sculpt_data.cc\n  intern/mesh_extractors/extract_mesh_vbo_select_idx.cc\n  intern/mesh_extractors/extract_mesh_vbo_skin_roots.cc\n  intern/mesh_extractors/extract_mesh_vbo_tan.cc\n  intern/mesh_extractors/extract_mesh_vbo_uv.cc\n  intern/mesh_extractors/extract_mesh_vbo_vnor.cc\n  intern/mesh_extractors/extract_mesh_vbo_weights.cc\n  intern/draw_attributes.cc\n  intern/draw_cache_impl_curve.cc\n  intern/draw_cache_impl_curves.cc\n  intern/draw_cache_impl_grease_pencil.cc\n  intern/draw_cache_impl_lattice.cc\n  intern/draw_cache_impl_mesh.cc\n  intern/draw_cache_impl_particles.cc\n  intern/draw_cache_impl_pointcloud.cc\n  intern/draw_cache_impl_subdivision.cc\n  intern/draw_cache_impl_volume.cc\n  intern/draw_color_management.cc\n  intern/draw_command.cc\n  intern/draw_context.cc\n  intern/draw_curves.cc\n  intern/draw_debug.cc\n  intern/draw_fluid.cc\n  intern/draw_gpu_context.cc\n  intern/draw_hair.cc\n  intern/draw_manager.cc\n  intern/draw_manager_shader.cc\n  intern/draw_manager_text.cc\n  intern/draw_pbvh.cc\n  intern/draw_pointcloud.cc\n  intern/draw_resource.cc\n  intern/draw_sculpt.cc\n  intern/draw_select_buffer.cc\n  intern/draw_shader.cc\n  intern/draw_view.cc\n  intern/draw_view_c.cc\n  intern/draw_view_data.cc\n  intern/draw_volume.cc\n  engines/compositor/compositor_engine.cc\n  engines/image/image_drawing_mode.cc\n  engines/image/image_engine.cc\n  engines/image/image_shader.cc\n  engines/eevee/eevee_ambient_occlusion.cc\n  engines/eevee/eevee_camera.cc\n  engines/eevee/eevee_cryptomatte.cc\n  engines/eevee/eevee_depth_of_field.cc\n  engines/eevee/eevee_engine.cc\n  engines/eevee/eevee_film.cc\n  engines/eevee/eevee_hizbuffer.cc\n  engines/eevee/eevee_instance.cc\n  engines/eevee/eevee_light.cc\n  engines/eevee/eevee_lightcache.cc\n  engines/eevee/eevee_lightprobe.cc\n  engines/eevee/eevee_lightprobe_planar.cc\n  engines/eevee/eevee_lightprobe_sphere.cc\n  engines/eevee/eevee_lightprobe_volume.cc\n  engines/eevee/eevee_lookdev.cc\n  engines/eevee/eevee_lut.cc\n  engines/eevee/eevee_material.cc\n  engines/eevee/eevee_motion_blur.cc\n  engines/eevee/eevee_pipeline.cc\n  engines/eevee/eevee_precompute.cc\n  engines/eevee/eevee_raytrace.cc\n  engines/eevee/eevee_renderbuffers.cc\n  engines/eevee/eevee_sampling.cc\n  engines/eevee/eevee_shader.cc\n  engines/eevee/eevee_shadow.cc\n  engines/eevee/eevee_subsurface.cc\n  engines/eevee/eevee_sync.cc\n  engines/eevee/eevee_velocity.cc\n  engines/eevee/eevee_view.cc\n  engines/eevee/eevee_volume.cc\n  engines/eevee/eevee_world.cc\n  engines/workbench/workbench_effect_antialiasing.cc\n  engines/workbench/workbench_effect_cavity.cc\n  engines/workbench/workbench_effect_dof.cc\n  engines/workbench/workbench_effect_outline.cc\n  engines/workbench/workbench_engine.cc\n  engines/workbench/workbench_materials.cc\n  engines/workbench/workbench_mesh_passes.cc\n  engines/workbench/workbench_resources.cc\n  engines/workbench/workbench_shader_cache.cc\n  engines/workbench/workbench_shadow.cc\n  engines/workbench/workbench_state.cc\n  engines/workbench/workbench_volume.cc\n  engines/external/external_engine.cc\n  engines/gpencil/gpencil_antialiasing.cc\n  engines/gpencil/gpencil_cache_utils.cc\n  engines/gpencil/gpencil_draw_data.cc\n  engines/gpencil/gpencil_engine_c.cc\n  engines/gpencil/gpencil_render.cc\n  engines/gpencil/gpencil_shader_fx.cc\n  engines/select/select_engine.cc\n  engines/select/select_instance.cc\n  engines/overlay/overlay_armature.cc\n  engines/overlay/overlay_engine.cc\n  engines/overlay/overlay_instance.cc\n  engines/overlay/overlay_shader.cc\n  engines/overlay/overlay_shape.cc\n\n  DRW_engine.hh\n  DRW_pbvh.hh\n  DRW_select_buffer.hh\n  intern/DRW_gpu_wrapper.hh\n  intern/DRW_render.hh\n  intern/attribute_convert.hh\n  intern/draw_attributes.hh\n  intern/draw_cache.hh\n  intern/draw_cache_extract.hh\n  intern/draw_cache_impl.hh\n  intern/draw_cache_inline.hh\n  intern/draw_color_management.hh\n  intern/draw_command.hh\n  intern/draw_common.hh\n  intern/draw_common_c.hh\n  intern/draw_common_shader_shared.hh\n  intern/draw_context_private.hh\n  intern/draw_curves_private.hh\n  intern/draw_debug.hh\n  intern/draw_hair_private.hh\n  intern/draw_handle.hh\n  intern/draw_manager.hh\n  intern/draw_manager_text.hh\n  intern/draw_pass.hh\n  intern/draw_resource.hh\n  intern/draw_sculpt.hh\n  intern/draw_shader.hh\n  intern/draw_shader_shared.hh\n  intern/draw_state.hh\n  intern/draw_subdiv_defines.hh\n  intern/draw_subdiv_shader_shared.hh\n  intern/draw_subdivision.hh\n  intern/draw_view.hh\n  intern/draw_view_c.hh\n  intern/draw_view_data.hh\n  intern/mesh_extractors/extract_mesh.hh\n  engines/compositor/compositor_engine.h\n  engines/eevee/eevee_ambient_occlusion.hh\n  engines/eevee/eevee_camera.hh\n  engines/eevee/eevee_cryptomatte.hh\n  engines/eevee/eevee_depth_of_field.hh\n  engines/eevee/eevee_engine.h\n  engines/eevee/eevee_film.hh\n  engines/eevee/eevee_gbuffer.hh\n  engines/eevee/eevee_hizbuffer.hh\n  engines/eevee/eevee_instance.hh\n  engines/eevee/eevee_light.hh\n  engines/eevee/eevee_lightcache.hh\n  engines/eevee/eevee_lightprobe.hh\n  engines/eevee/eevee_lightprobe_planar.hh\n  engines/eevee/eevee_lightprobe_sphere.hh\n  engines/eevee/eevee_lightprobe_volume.hh\n  engines/eevee/eevee_lookdev.hh\n  engines/eevee/eevee_lut.hh\n  engines/eevee/eevee_material.hh\n  engines/eevee/eevee_motion_blur.hh\n  engines/eevee/eevee_pipeline.hh\n  engines/eevee/eevee_precompute.hh\n  engines/eevee/eevee_raytrace.hh\n  engines/eevee/eevee_renderbuffers.hh\n  engines/eevee/eevee_sampling.hh\n  engines/eevee/eevee_shader.hh\n  engines/eevee/eevee_shadow.hh\n  engines/eevee/eevee_subsurface.hh\n  engines/eevee/eevee_sync.hh\n  engines/eevee/eevee_velocity.hh\n  engines/eevee/eevee_view.hh\n  engines/eevee/eevee_volume.hh\n  engines/eevee/eevee_world.hh\n  engines/external/external_engine.h\n  engines/gpencil/gpencil_engine.hh\n  engines/gpencil/gpencil_engine_private.hh\n  engines/gpencil/gpencil_shader.hh\n  engines/image/image_batches.hh\n  engines/image/image_buffer_cache.hh\n  engines/image/image_drawing_mode.hh\n  engines/image/image_engine.h\n  engines/image/image_enums.hh\n  engines/image/image_instance.hh\n  engines/image/image_partial_updater.hh\n  engines/image/image_private.hh\n  engines/image/image_shader.hh\n  engines/image/image_shader_params.hh\n  engines/image/image_space.hh\n  engines/image/image_space_image.hh\n  engines/image/image_space_node.hh\n  engines/image/image_state.hh\n  engines/image/image_texture_info.hh\n  engines/image/image_usage.hh\n  engines/overlay/overlay_engine.h\n  engines/overlay/overlay_antialiasing.hh\n  engines/overlay/overlay_armature.hh\n  engines/overlay/overlay_attribute_text.hh\n  engines/overlay/overlay_attribute_viewer.hh\n  engines/overlay/overlay_axes.hh\n  engines/overlay/overlay_background.hh\n  engines/overlay/overlay_base.hh\n  engines/overlay/overlay_bounds.hh\n  engines/overlay/overlay_camera.hh\n  engines/overlay/overlay_cursor.hh\n  engines/overlay/overlay_curve.hh\n  engines/overlay/overlay_edit_text.hh\n  engines/overlay/overlay_empty.hh\n  engines/overlay/overlay_facing.hh\n  engines/overlay/overlay_fade.hh\n  engines/overlay/overlay_fluid.hh\n  engines/overlay/overlay_force_field.hh\n  engines/overlay/overlay_grease_pencil.hh\n  engines/overlay/overlay_grid.hh\n  engines/overlay/overlay_image.hh\n  engines/overlay/overlay_instance.hh\n  engines/overlay/overlay_lattice.hh\n  engines/overlay/overlay_light.hh\n  engines/overlay/overlay_lightprobe.hh\n  engines/overlay/overlay_mesh.hh\n  engines/overlay/overlay_metaball.hh\n  engines/overlay/overlay_mode_transfer.hh\n  engines/overlay/overlay_motion_path.hh\n  engines/overlay/overlay_name.hh\n  engines/overlay/overlay_origin.hh\n  engines/overlay/overlay_outline.hh\n  engines/overlay/overlay_paint.hh\n  engines/overlay/overlay_particle.hh\n  engines/overlay/overlay_pointcloud.hh\n  engines/overlay/overlay_prepass.hh\n  engines/overlay/overlay_private.hh\n  engines/overlay/overlay_relation.hh\n  engines/overlay/overlay_sculpt.hh\n  engines/overlay/overlay_speaker.hh\n  engines/overlay/overlay_wireframe.hh\n  engines/overlay/overlay_xray_fade.hh\n  engines/select/select_defines.hh\n  engines/select/select_engine.hh\n  engines/select/select_instance.hh\n  engines/workbench/workbench_defines.hh\n  engines/workbench/workbench_engine.h\n  engines/workbench/workbench_enums.hh\n  engines/workbench/workbench_private.hh\n  engines/workbench/workbench_shader_shared.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries (CMake)\nDESCRIPTION: This snippet defines the libraries to be linked against the BLI library. It distinguishes between PUBLIC and PRIVATE libraries, controlling their visibility to dependent targets. It includes DNA, fmtlib, xxhash, Eigen, guardedalloc, wcwidth, atomic, tbb, Zlib and Zstd libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenlib/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PUBLIC bf::dna\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  bf_intern_eigen\n  PRIVATE bf::intern::guardedalloc\n  extern_wcwidth\n  PRIVATE bf::intern::atomic\n  PRIVATE extern_fmtlib\n  PUBLIC bf::dependencies::optional::tbb\n  PRIVATE bf::dependencies::eigen\n  ${ZLIB_LIBRARIES}\n  ${ZSTD_LIBRARIES}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting libraries\nDESCRIPTION: Specifies the libraries that the nodes library depends on, including internal UPBGE libraries and external libraries.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::blenloader\n  PRIVATE bf::blentranslation\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::functions\n  PRIVATE bf::geometry\n  PRIVATE bf::gpu\n  PRIVATE bf::imbuf\n  PRIVATE bf::intern::guardedalloc\n  bf_nodes_composite\n  bf_nodes_function\n  bf_nodes_geometry\n  bf_nodes_shader\n  bf_nodes_texture\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::extern::xxhash\n  PRIVATE bf::render\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Windows 7 Compatibility Libraries - CMake\nDESCRIPTION: This snippet conditionally inserts libraries into the `LIB` list for Windows builds when `WITH_WINDOWS_7` is enabled.  `${BCOMPAT7_LIBRARIES}` is assumed to be a variable containing a list of libraries needed for Windows 7 compatibility.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blenderplayer/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND WITH_WINDOWS_7)\n  list(INSERT LIB 0 ${BCOMPAT7_LIBRARIES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Button Function and Flags - C\nDESCRIPTION: These functions provide methods for setting a custom function to be called when a button is pressed and released (`uiButSetFunc`), as well as setting a flag to control the button's behavior (`uiButSetFlag`). The example sets the `UI_TEXT_LEFT` flag.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/interface_API.txt#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid uiButSetFunc(uiBut *but, void (*func)(void *arg1, void *arg2), void *arg1, void *arg2)\n\tWhen the button is pressed and released, it calls this function, with the 2 arguments.\n\nvoid uiButSetFlag(uiBut *but, int flag)\n\tset a flag for further control of button behavior:\n\tflag:\n\tUI_TEXT_LEFT\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Defines the source files to be compiled for the extern_xdnd library.  xdnd.c and xdnd.h are listed as the source files for the library.  These files contain the implementation and interface for the library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/xdnd/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  xdnd.c\n  xdnd.h\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency\nDESCRIPTION: This snippet adds a dependency to ensure 'bf_render_hydra' is built after 'bf_rna'.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/render/hydra/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(bf_render_hydra bf_rna)\n```\n\n----------------------------------------\n\nTITLE: Inserting Python Interpreter into Script\nDESCRIPTION: Inserts a Python interpreter directly into a running Blender script, allowing for interactive debugging and variable inspection. Requires the `code` module. The `local=locals()` argument allows access to local variables.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_tips_and_tricks.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport code\ncode.interact(local=locals())\n```\n\n----------------------------------------\n\nTITLE: Applying LGPL to a New Library\nDESCRIPTION: This code snippet provides a template for applying the GNU Lesser General Public License to a new software library. It includes copyright notice, licensing terms, warranty disclaimer, and contact information details to be included at the start of each source file.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/LGPL-2.1-or-later.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<one line to give the library's name and a brief idea of what it does.>\nCopyright (C) <year>  <name of author>\n\nThis library is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense as published by the Free Software Foundation; either\nversion 2.1 of the License, or (at your option) any later version.\n\nThis library is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public\nLicense along with this library; if not, write to the Free Software\nFoundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n```\n\n----------------------------------------\n\nTITLE: Displaying GPL License Notice in Interactive Programs - C\nDESCRIPTION: This code snippet demonstrates how to display a brief GNU General Public License notice when an interactive program starts. It includes the program's name, copyright information, a warranty disclaimer, and instructions on how to view license details using commands 'show w' and 'show c'. This snippet is intended for command-line interface programs, but suggests using an \"about box\" for GUI applications.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/GPL3-license.txt#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories (CMake)\nDESCRIPTION: Defines the include directory for the project.  It sets the `INC` variable to the path `../../`, which likely represents a relative path to the parent directory's parent directory, used to locate header files.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/imbuf/tests/performance/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(INC\n  ../..\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Button Return Value - C\nDESCRIPTION: This function provides a method for getting return value of the ui button.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/interface_API.txt#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint uiButGetRetVal(uiBut *but)\n\tgives return value\n```\n\n----------------------------------------\n\nTITLE: Setting up node discovery path\nDESCRIPTION: Sets the path to the Python script used for discovering and registering nodes.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(DISCOVER_NODES_PATH ${CMAKE_CURRENT_SOURCE_DIR}/intern/discover_nodes.py)\n```\n\n----------------------------------------\n\nTITLE: Vertical UI Layout with Column (Python)\nDESCRIPTION: Demonstrates creating a vertical UI layout using the layout.column() function, displaying properties in a column.  Two properties are added to a column layout.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncol = layout.column()\ncol.prop()\ncol.prop()\n```\n\n----------------------------------------\n\nTITLE: Setting Licenses Variable\nDESCRIPTION: This snippet defines a variable `LICENSES` containing a list of license file names. These files will be installed in a later step.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/doc/license/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(LICENSES\n  Apache2-license.txt\n  BSD-3-Clause-license.txt\n  MIT-license.txt\n  readme.txt\n  SPDX-license-identifiers.txt\n  Zlib-license.txt\n)\n```\n\n----------------------------------------\n\nTITLE: Defining System Include Directories\nDESCRIPTION: This snippet defines the system include directories for the wcwidth library. In this case, no specific system include directories are defined, resulting in an empty set.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/wcwidth/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC_SYS\n\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Library Target in CMake\nDESCRIPTION: This snippet creates the bf_editor_space_buttons library using the blender_add_lib macro. It specifies the library name, source files, include directories, and linked libraries. This macro encapsulates the CMake commands required to compile and link the library, making the build process more concise and maintainable.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_buttons/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nblender_add_lib(bf_editor_space_buttons \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Block Button with a Custom Function - C\nDESCRIPTION: This code snippet demonstrates how to define a 'BLOCK' button in the UPBGE UI system. When pressed, this button creates a new UI block by calling a specified function ('func'). The 'func' argument should point to a function that creates and configures the new UI block, setting up its layout and child buttons. The example shows the creation of an 'importmenu' UI block with various child buttons.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/guides/interface_API.txt#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstatic uiBlock *info_file_importmenu(void *arg_unused)\n\t{\n\t\tuiBlock *block;\n\t\tshort yco = 0, xco = 20;\n\t\n\t\tblock = uiNewBlock(&curarea->uiblocks, \"importmenu\", UI_EMBOSSW, UI_HELV, G.curscreen->mainwin);\n\t\tuiBlockSetXOfs(block, -40);  // offset to parent button\n\t\n\t\t/* flags are defines */\n\t\tuiDefBut(block, LABEL, 0, \"VRML 2.0 options\", xco, yco, 125, 19, NULL, 0.0, 0.0, 0, 0, \"\");\n\t\tuiDefButS(block, TOG|BIT|0, 0, \"SepLayers\", xco, yco-=20, 75, 19, &U.vrmlflag, 0.0, 0.0, 0, 0, \"\");\n\t\tuiDefButS(block, TOG|BIT|1, 0, \"Scale 1/100\", xco, yco-=20, 75, 19, &U.vrmlflag, 0.0, 0.0, 0, 0, \"\");\n\t\tuiDefButS(block, TOG|BIT|2, 0, \"Two Sided\", xco, yco-=20, 75, 19, &U.vrmlflag, 0.0, 0.0, 0, 0, \"\");\n\t\n\t\tuiBlockSetDirection(block, UI_RIGHT);\n\t\tuiTextBoundsBlock(block, 50);  /* checks for fontsize */\n\n\t\treturn block;\n\t}\n```\n\n----------------------------------------\n\nTITLE: Copyright Disclaimer Template\nDESCRIPTION: This code snippet presents a sample copyright disclaimer that an employer or school can sign to relinquish copyright interest in a library. It includes the name of the organization, the library's name, the author's name, and the signature of an authorized representative.\nSOURCE: https://github.com/upbge/upbge/blob/master/release/license/spdx/LGPL-2.1-or-later.txt#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nYoyodyne, Inc., hereby disclaims all copyright interest in the\nlibrary `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n<signature of Ty Coon>, 1 April 1990\nTy Coon, President of Vice\n```\n\n----------------------------------------\n\nTITLE: Adding Clang C++ Compiler Flags\nDESCRIPTION: This code sets up C++ compiler flags specifically for the Clang compiler.  It includes enabling the `-Wall` flag, disabling various warnings with `-Wno-*`, and setting some warnings as errors.  Apple Clang has some flags that are disabled because they are not supported.\nSOURCE: https://github.com/upbge/upbge/blob/master/CMakeLists.txt#_snippet_118\n\nLANGUAGE: CMake\nCODE:\n```\n  add_check_cxx_compiler_flags(\n    CXX_WARNINGS\n\n    CXX_WARN_ALL -Wall\n    # Using C++20 features while having C++17 as the project language isn't allowed by MSVC.\n    CXX_CXX20_DESIGNATOR -Wc++20-designator\n\n    CXX_WARN_NO_AUTOLOGICAL_COMPARE -Wno-tautological-compare\n    CXX_WARN_NO_UNKNOWN_PRAGMAS -Wno-unknown-pragmas\n    CXX_WARN_NO_CHAR_SUBSCRIPTS -Wno-char-subscripts\n\n    # We get a lot of these, if its a problem a dev needs to look into it.\n    CXX_WARN_NO_OVERLOADED_VIRTUAL -Wno-overloaded-virtual\n\n    CXX_WARN_NO_SIGN_COMPARE -Wno-sign-compare\n    CXX_WARN_NO_INVALID_OFFSETOF -Wno-invalid-offsetof\n\n    # Apple Clang (tested on version 12) doesn't support this flag while LLVM Clang 11 does.\n    CXX_WARN_NO_SUGGEST_OVERRIDE -Wno-suggest-override\n\n    CXX_WARN_UNDEF -Wundef\n    CXX_WARN_UNDEF_PREFIX -Wundef-prefix\n    CXX_WARN_UNUSED_PARAMETER -Wunused-parameter\n\n    # Prevents linking errors with MSVC.\n    CXX_WARN_MISMATCHED_TAGS -Wmismatched-tags\n\n    # Gives too many unfixable warnings.\n    # `C_WARN_UNUSED_MACROS -Wunused-macros`\n    # `CXX_WARN_UNUSED_MACROS -Wunused-macros`\n\n    CXX_WARN_ERROR_UNGUARDED_AVAILABILITY_NEW -Werror=unguarded-availability-new\n  )\n```\n\n----------------------------------------\n\nTITLE: Enabling FFMPEG Codec Support\nDESCRIPTION: This snippet adds a preprocessor definition `-DWITH_FFMPEG` if `WITH_CODEC_FFMPEG` is enabled. This indicates that the project should be compiled with FFMPEG support, likely for handling video codecs. This enables video encoding/decoding capabilities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/blenkernel/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_CODEC_FFMPEG)\n  add_definitions(-DWITH_FFMPEG)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Redrawing the Window (Discouraged)\nDESCRIPTION: This code demonstrates a way to force a redraw of the Blender window from within a script. However, this approach is strongly discouraged as it can lead to instability and conflicts with Blender's internal operations. This snippet is provided for informational purposes only and should not be used in production code.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_internal_data_and_python_objects.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nbpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)\n```\n\n----------------------------------------\n\nTITLE: CMake: Setting Source Files for minilzo\nDESCRIPTION: This snippet defines the source files and header files for the minilzo library. These files will be compiled and linked to create the final library. The source file is `minilzo.c`, and the header files provide definitions and configurations.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/lzo/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  minilzo/minilzo.c\n\n  minilzo/lzoconf.h\n  minilzo/lzodefs.h\n  minilzo/minilzo.h\n)\n```\n\n----------------------------------------\n\nTITLE: Conditional Block (WITH_TBB) - CMake\nDESCRIPTION: This snippet starts a conditional block, presumably to include TBB-related configurations. It depends on the `WITH_TBB` variable and the `WIN32` variable. It is currently incomplete.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/nodes/geometry/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_TBB)\n  if(WIN32)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the project.  It specifies both local include paths (INC) and system include paths (INC_SYS). The CMAKE_BINARY_DIR variable is used to reference the build directory, ensuring that generated header files are included during compilation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/editors/space_buttons/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(INC\n  ../include\n  ../../makesrna\n\n  # RNA_prototypes.hh\n  ${CMAKE_BINARY_DIR}/source/blender/makesrna\n)\n```\n\n----------------------------------------\n\nTITLE: Blendfile Library Overrides Test (CMake)\nDESCRIPTION: This CMake snippet defines a test for library overrides. It executes the Python script `bl_blendfile_library_overrides.py` and specifies the output directory and the test directory. This test verifies the correct behavior of library overrides in Blender.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/python/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_blender_test(\n    blendfile_library_overrides\n    --python ${CMAKE_CURRENT_LIST_DIR}/bl_blendfile_library_overrides.py --\n    --output-dir ${TEST_OUT_DIR}/blendfile_io/\n    --test-dir \"${TEST_SRC_DIR}/libraries_and_linking\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Adding GPL Notices to Source Files\nDESCRIPTION: This snippet describes how to add copyright and licensing notices to the beginning of source files to effectively convey the exclusion of warranty and licensing terms under the GNU General Public License.  It includes the program's name, copyright information, and a statement indicating that the program is free software distributed under the GPL. It also provides a reference to where the full license text can be found.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/license/GPL-license.txt#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n```\n\n----------------------------------------\n\nTITLE: Inefficient String Concatenation (Python)\nDESCRIPTION: Illustrates inefficient string concatenation, which should be avoided, especially within loops.  It is the slowest method of joining strings.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_best_practice.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfile.write(str1 + \" \" + str2 + \" \" + str3 + \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Last Selected Pose Bone (Python)\nDESCRIPTION: This snippet shows how to access the last selected pose bone. It's primarily used in Pose-Mode. If no pose bone is selected, this might return None or raise an exception depending on the context.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_armatures_and_bones.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Gets the last selected pose bone (Pose-Mode only).\nbpy.context.active_pose_bone\n```\n\n----------------------------------------\n\nTITLE: Defining Library Dependencies\nDESCRIPTION: This snippet defines the libraries that the Cycles BVH library depends on, including cycles_scene and cycles_util.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/bvh/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n  cycles_scene\n  cycles_util\n)\n```\n\n----------------------------------------\n\nTITLE: Threading with Blender Example (Unsupported Timer)\nDESCRIPTION: This code demonstrates an unsupported way to use threading in Blender by creating a timer that continuously modifies the default cube's location. Because the thread continues running after the script completes, it can lead to random crashes or errors in Blender's drawing code. It's recommended to avoid this approach.\nSOURCE: https://github.com/upbge/upbge/blob/master/doc/python_api/rst/info_gotchas_crashes.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef func():\n    print(\"Running...\")\n    import bpy\n    bpy.data.objects['Cube'].location.x += 0.05\n\ndef my_timer():\n    from threading import Timer\n    t = Timer(0.1, my_timer)\n    t.start()\n    func()\n\nmy_timer()\n```\n\n----------------------------------------\n\nTITLE: Adding Library Definition\nDESCRIPTION: This snippet uses the blender_add_lib macro to define the ge_scenegraph library. It specifies the library name, source files, include directories, and linked libraries. The macro handles the compilation and linking process to create the final library.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/gameengine/SceneGraph/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nblender_add_lib(ge_scenegraph \"${SRC}\" \"${INC}\" \"${INC_SYS}\" \"${LIB}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet defines the source files that are compiled into the bf_intern_libc_compat library. Currently, it specifies `libc_compat.c` as the only source file.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libc_compat/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(SRC\n  libc_compat.c\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Test Installation Directory CMake\nDESCRIPTION: Defines the test installation directory using the `CMAKE_INSTALL_PREFIX_WITH_CONFIG` variable. This ensures tests run from the install path.\nSOURCE: https://github.com/upbge/upbge/blob/master/tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_INSTALL_DIR ${CMAKE_INSTALL_PREFIX_WITH_CONFIG})\n```\n\n----------------------------------------\n\nTITLE: Running QuadriFlow with Sharp Edge Preserving\nDESCRIPTION: This command enables sharp edge preserving in QuadriFlow. It takes an input triangle mesh (`input.obj`) and generates a quad mesh (`output.obj`) with a specified resolution (`-f`). The `-sharp` option enables the sharp edge detection and preservation feature.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./quadriflow -sharp -i input.obj -o output.obj -f [resolution]\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation with OpenImageDenoise\nDESCRIPTION: This snippet conditionally includes OpenImageDenoise headers and libraries if enabled. It adds definitions and appends to the include and library lists.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/compositor/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WITH_OPENIMAGEDENOISE)\n  add_definitions(-DWITH_OPENIMAGEDENOISE)\n  add_definitions(-DOIDN_STATIC_LIB)\n  list(APPEND INC_SYS\n    ${OPENIMAGEDENOISE_INCLUDE_DIRS}\n    ${TBB_INCLUDE_DIRS}\n  )\n  list(APPEND LIB\n    ${OPENIMAGEDENOISE_LIBRARIES}\n    ${TBB_LIBRARIES}\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Libraries (Dependencies)\nDESCRIPTION: Defines any dependent libraries required by the URI conversion library.  Currently, this variable is empty, meaning it doesn't depend on any other pre-built libraries. If external libraries are required, their names would be added to this list.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/uriconvert/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Headers with CMake\nDESCRIPTION: This snippet installs the header files to the `include/theora` directory, making them available for other projects to include.\nSOURCE: https://github.com/upbge/upbge/blob/master/build_files/build_environment/patches/cmakelists_theora.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES ${HEADERS} DESTINATION include/theora)\n```\n\n----------------------------------------\n\nTITLE: Setting Library Dependencies\nDESCRIPTION: This snippet defines any library dependencies. In this case, it's empty, meaning the Recast Navigation library doesn't have any explicit external library dependencies defined here.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/recastnavigation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Lemon PC File CMake\nDESCRIPTION: Installs the generated `lemon.pc` file to the `lib/pkgconfig` directory. This provides package information for `pkg-config` to find and use the Lemon library.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nINSTALL(\n  FILES ${CMAKE_CURRENT_BINARY_DIR}/lemon.pc\n  DESTINATION lib/pkgconfig\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Sequence and Position\nDESCRIPTION: This snippet initializes the position variable to 0 and creates a new aud.Sequence object. These are used in the tetris2.py example to sequence notes.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/audaspace/bindings/doc/tutorials.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nposition = 0\nsequence = aud.Sequence()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Source Files\nDESCRIPTION: This snippet defines the source files for the STL exporter tests.  These tests are compiled and run if WITH_GTESTS is enabled.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_SRC\n    tests/stl_exporter_tests.cc\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional CPLEX Integration CMake\nDESCRIPTION: Conditionally includes CPLEX support. If `LEMON_HAVE_CPLEX` is true, it adds `cplex.cc` to the source files and includes the CPLEX include directories.\nSOURCE: https://github.com/upbge/upbge/blob/master/extern/quadriflow/3rd/lemon-1.3.1/lemon/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nIF(LEMON_HAVE_CPLEX)\n  SET(LEMON_SOURCES ${LEMON_SOURCES} cplex.cc)\n  INCLUDE_DIRECTORIES(${ILOG_INCLUDE_DIRS})\nENDIF()\n```\n\n----------------------------------------\n\nTITLE: Setting Libraries to Link\nDESCRIPTION: This snippet defines the libraries that the STL I/O library depends on.  It specifies both private and public dependencies.  Private dependencies are only used within the STL I/O library, while public dependencies are also exposed to other libraries that use it.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/io/stl/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(LIB\n  PRIVATE bf::blenkernel\n  PRIVATE bf::blenlib\n  PRIVATE bf::bmesh\n  PRIVATE bf::depsgraph\n  PRIVATE bf::dna\n  PRIVATE bf::intern::clog\n  PRIVATE bf::intern::guardedalloc\n  bf_io_common\n  PRIVATE bf::extern::fmtlib\n  PRIVATE bf::windowmanager\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: This snippet specifies all the source files (.cc and .hh files) that make up the geometry library. These files contain the implementation of various geometry-related functionalities.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/geometry/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  intern/add_curves_on_mesh.cc\n  intern/curve_constraints.cc\n  intern/curves_remove_and_split.cc\n  intern/extend_curves.cc\n  intern/extract_elements.cc\n  intern/fillet_curves.cc\n  intern/interpolate_curves.cc\n  intern/join_geometries.cc\n  intern/merge_curves.cc\n  intern/merge_layers.cc\n  intern/mesh_boolean.cc\n  intern/mesh_boolean_manifold.cc\n  intern/mesh_copy_selection.cc\n  intern/mesh_merge_by_distance.cc\n  intern/mesh_primitive_cuboid.cc\n  intern/mesh_primitive_cylinder_cone.cc\n  intern/mesh_primitive_grid.cc\n  intern/mesh_primitive_line.cc\n  intern/mesh_primitive_uv_sphere.cc\n  intern/mesh_selection.cc\n  intern/mesh_split_edges.cc\n  intern/mesh_to_curve_convert.cc\n  intern/mesh_to_volume.cc\n  intern/mesh_triangulate.cc\n  intern/mix_geometries.cc\n  intern/point_merge_by_distance.cc\n  intern/points_to_volume.cc\n  intern/randomize.cc\n  intern/realize_instances.cc\n  intern/reorder.cc\n  intern/resample_curves.cc\n  intern/reverse_uv_sampler.cc\n  intern/separate_geometry.cc\n  intern/set_curve_type.cc\n  intern/simplify_curves.cc\n  intern/smooth_curves.cc\n  intern/subdivide_curves.cc\n  intern/transform.cc\n  intern/trim_curves.cc\n  intern/uv_pack.cc\n  intern/uv_parametrizer.cc\n  intern/volume_grid_resample.cc\n\n  GEO_add_curves_on_mesh.hh\n  GEO_curve_constraints.hh\n  GEO_curves_remove_and_split.hh\n  GEO_extend_curves.hh\n  GEO_extract_elements.hh\n  GEO_fillet_curves.hh\n  GEO_interpolate_curves.hh\n  GEO_join_geometries.hh\n  GEO_merge_curves.hh\n  GEO_merge_layers.hh\n  GEO_mesh_boolean.hh\n  GEO_mesh_copy_selection.hh\n  GEO_mesh_merge_by_distance.hh\n  GEO_mesh_primitive_cuboid.hh\n  GEO_mesh_primitive_cylinder_cone.hh\n  GEO_mesh_primitive_grid.hh\n  GEO_mesh_primitive_line.hh\n  GEO_mesh_primitive_uv_sphere.hh\n  GEO_mesh_selection.hh\n  GEO_mesh_split_edges.hh\n  GEO_mesh_to_curve.hh\n  GEO_mesh_to_volume.hh\n  GEO_mesh_triangulate.hh\n  GEO_mix_geometries.hh\n  GEO_point_merge_by_distance.hh\n  GEO_points_to_volume.hh\n  GEO_randomize.hh\n  GEO_realize_instances.hh\n  GEO_reorder.hh\n  GEO_resample_curves.hh\n  GEO_reverse_uv_sampler.hh\n  GEO_separate_geometry.hh\n  GEO_set_curve_type.hh\n  GEO_simplify_curves.hh\n  GEO_smooth_curves.hh\n  GEO_subdivide_curves.hh\n  GEO_transform.hh\n  GEO_trim_curves.hh\n  GEO_uv_pack.hh\n  GEO_uv_parametrizer.hh\n  GEO_volume_grid_resample.hh\n  intern/mesh_boolean_manifold.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HIPRT Kernel Header Files - CMake\nDESCRIPTION: This CMake code defines the header files required for the HIPRT kernel. These headers include BVH structures, common definitions, global definitions, and HIPRT kernel declarations.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/cycles/kernel/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC_KERNEL_DEVICE_HIPRT_HEADERS\n  device/hiprt/bvh.h\n  device/hiprt/common.h\n  device/hiprt/globals.h\n  device/hiprt/hiprt_kernels.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Source Files\nDESCRIPTION: Specifies the source files for the mathutils module, including both C++ source files (.cc) and header files (.hh). These files contain the implementation of various mathematical utilities such as color manipulation, Euler angles, matrices, quaternions, vectors, BVH trees, geometry operations, interpolation, KD trees, and noise generation.\nSOURCE: https://github.com/upbge/upbge/blob/master/source/blender/python/mathutils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SRC\n  mathutils.cc\n  mathutils_Color.cc\n  mathutils_Euler.cc\n  mathutils_Matrix.cc\n  mathutils_Quaternion.cc\n  mathutils_Vector.cc\n  mathutils_bvhtree.cc\n  mathutils_geometry.cc\n  mathutils_interpolate.cc\n  mathutils_kdtree.cc\n  mathutils_noise.cc\n\n  mathutils.hh\n  mathutils_Color.hh\n  mathutils_Euler.hh\n  mathutils_Matrix.hh\n  mathutils_Quaternion.hh\n  mathutils_Vector.hh\n  mathutils_bvhtree.hh\n  mathutils_geometry.hh\n  mathutils_interpolate.hh\n  mathutils_kdtree.hh\n  mathutils_noise.hh\n)\n```\n\n----------------------------------------\n\nTITLE: Setting library dependencies\nDESCRIPTION: This snippet configures library dependencies for the libmv project.  It uses CMake's `set` and `list(APPEND ...)` commands to define a list of libraries (LIB) that the project depends on. These libraries are then linked during the linking stage to create the final executable or library.\nSOURCE: https://github.com/upbge/upbge/blob/master/intern/libmv/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIB\n\n)\n\nlist(APPEND LIB\n    extern_ceres\n    PUBLIC bf::dependencies::optional::tbb\n\n    ${GLOG_LIBRARIES}\n    ${GFLAGS_LIBRARIES}\n    ${PNG_LIBRARIES}\n\n    PRIVATE bf::dependencies::eigen\n  )\n```"
  }
]