[
  {
    "owner": "zharta",
    "repo": "lotm-renting-protocol-v1",
    "content": "TITLE: Renting Protocol External Functions\nDESCRIPTION: Core external functions of the main renting protocol contract, defining operations for delegation, deposits, rentals, staking, and administrative functions. Each function specifies allowed roles and modifiers.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Roles Allowed | Modifier | Description |\n| --- | :-: | --- | --- |\n| delegate_to_wallet | Owner | Nonpayable | delegates call to each token's vault to perform a delegation to a given hot wallet |\n```\n\n----------------------------------------\n\nTITLE: State Variables Structure for RentingV3 Contract\nDESCRIPTION: Definition of the core state variables used in the renting contract to manage NFT rentals, protocol fees, and administrative functions. Includes immutable addresses, protocol parameters, and dynamic state mappings.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: vyper\nCODE:\n```\nvault_impl_addr: public(address)\npayment_token_addr: public(address)\nnft_contract_addr: public(address)\ndelegation_registry_addr: public(address)\nstaking_addr: public(address)\nrenting_erc721: public(address)\nmax_protocol_fee: public(uint256)\nstaking_pool_id: public(uint256)\nprotocol_wallet: public(address)\nprotocol_fee: public(uint256)\nprotocol_admin: public(address)\nproposed_admin: public(address)\nrental_states: public(HashMap[uint256, bytes32])\nlisting_revocations: public(HashMap[uint256, uint256])\nunclaimed_rewards: public(uint256)\nprotocol_fees_amount: public(uint256)\n```\n\n----------------------------------------\n\nTITLE: Vault External Functions\nDESCRIPTION: External functions of the VaultV3 contract that handle token deposits, withdrawals, delegation and staking operations. Each function includes role permissions and descriptions.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Function | Roles Allowed | Modifier | Description |\n| --- | :-: | --- | --- |\n| initialise | -- | Nonpayable | called by Renting to set up the initial vault state |\n```\n\n----------------------------------------\n\nTITLE: Rental State Structure Definition\nDESCRIPTION: Definition of the Rental struct that maintains the state of active rentals, including rental parameters, participant addresses, and fee information.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: vyper\nCODE:\n```\nstruct Rental:\n    id: bytes32\n    owner: address\n    renter: address\n    delegate: address\n    token_id: uint256\n    start: uint256\n    min_expiration: uint256\n    expiration: uint256\n    amount: uint256\n    protocol_fee: uint256\n    protocol_wallet: address\n```\n\n----------------------------------------\n\nTITLE: Listing Structure Definition\nDESCRIPTION: Definition of the Listing struct used to manage NFT listings, including pricing, duration constraints, and timestamp information.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: vyper\nCODE:\n```\nstruct Listing:\n    token_id: uint256\n    price: uint256\n    min_duration: uint256\n    max_duration: uint256\n    timestamp: uint256\n```\n\n----------------------------------------\n\nTITLE: Vault Implementation State Variables\nDESCRIPTION: State variables for the VaultV3 implementation contract that handles NFT storage and delegation. Includes addresses for key contracts and configuration parameters.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Variable | Type | Mutable | Desciption |\n| --- | --- | :-: | --- |\n| caller | `address` | Yes | address of the Renting contract who deployed and manages the vault |\n```\n\n----------------------------------------\n\nTITLE: Requirements.txt Package Dependencies\nDESCRIPTION: Full listing of Python package dependencies with pinned versions and their dependency relationships, generated automatically by uv package manager from pyproject.toml\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile -o requirements.txt pyproject.toml\naiohttp==3.9.3\n    # via web3\naiosignal==1.3.1\n    # via aiohttp\nannotated-types==0.6.0\n    # via pydantic\nape-alchemy==0.8.7\n    # via lotm-renting-protocol-v1 (pyproject.toml)\nape-arbitrum==0.8.3\n    # via lotm-renting-protocol-v1 (pyproject.toml)\nape-base==0.8.1\n    # via lotm-renting-protocol-v1 (pyproject.toml)\nape-foundry==0.8.7\n    # via lotm-renting-protocol-v1 (pyproject.toml)\nape-optimism==0.8.3\n    # via ape-base\nape-vyper==0.8.9\n    # via lotm-renting-protocol-v1 (pyproject.toml)\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies List\nDESCRIPTION: Specifies Python package dependencies with pinned versions and their dependency chains. Each entry shows which other packages require it as a dependency.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/requirements-dev.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nvyper==0.4.1\n    # via\n    #   lotm-renting-protocol-v1 (pyproject.toml)\n    #   ape-vyper\n    #   titanoboa\nwatchdog==3.0.0\n    # via\n    #   eth-ape\n    #   mkdocs\nwcwidth==0.2.13\n    # via prompt-toolkit\nweb3==7.8.0\n    # via\n    #   ape-alchemy\n    #   ape-foundry\n    #   eth-ape\nwebsockets==13.1\n    # via web3\nwheel==0.45.1\n    # via vyper\nyarl==1.18.3\n    # via\n    #   aiohttp\n    #   ape-foundry\nzipp==3.21.0\n    # via importlib-metadata\n```\n\n----------------------------------------\n\nTITLE: Project Structure for Auxiliary Contracts in Python\nDESCRIPTION: Shows the directory structure for auxiliary mock contracts used in testing and deployment on private networks. These contracts are not part of the main protocol.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ncontracts/\n└── auxiliary\n    ├── ERC20.vy\n    ├── ERC721.vy\n    └── HotWalletMock.vy\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts to Development Environment\nDESCRIPTION: Example command for deploying contracts to the development environment using Make.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmake deploy-dev\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Make\nDESCRIPTION: Command to execute unit tests for the project using Make.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake unit-tests\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Make\nDESCRIPTION: Command to run integration tests for the project using Make.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake integration-tests\n```\n\n----------------------------------------\n\nTITLE: Executing Fuzz Tests with Make\nDESCRIPTION: Command to perform fuzz tests on the project using Make.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake fuzz-tests\n```\n\n----------------------------------------\n\nTITLE: Running Gas Profiling with Make\nDESCRIPTION: Command to execute gas profiling for the project using Make.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmake gas\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Make\nDESCRIPTION: Command to set up the project environment and install necessary dependencies using Make.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake install-dev\n```\n\n----------------------------------------\n\nTITLE: Generating Python Requirements File with UV\nDESCRIPTION: Command to generate the requirements file using the UV package manager, compiling dependencies from pyproject.toml with dev extras.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/requirements-dev.txt#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nuv pip compile -o requirements-dev.txt --extra dev pyproject.toml\n```\n\n----------------------------------------\n\nTITLE: Auto-generated File Comment in Markdown\nDESCRIPTION: Comment indicating that the file was automatically generated by the uv tool.\nSOURCE: https://github.com/zharta/lotm-renting-protocol-v1/blob/main/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n```"
  }
]