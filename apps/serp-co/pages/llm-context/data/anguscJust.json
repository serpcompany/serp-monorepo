[
  {
    "owner": "angus-c",
    "repo": "just",
    "content": "TITLE: Using just-safe-get in JavaScript\nDESCRIPTION: This JavaScript snippet showcases how to use the 'just-safe-get' function to safely access nested properties of an object. It imports the function and demonstrates various scenarios including accessing existing properties, handling undefined parents (returning undefined or a default value), and accessing properties using array paths or symbols. The input is a JavaScript object and a string or array representing the property path, and potentially a default value. The output is the value at the specified path, or undefined if the path is invalid (unless a default value is provided).\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-safe-get/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport get from 'just-safe-get';\n\nconst obj = {a: {aa: {aaa: 2}}, b: 4};\n\nget(obj, 'a.aa.aaa'); // 2\nget(obj, ['a', 'aa', 'aaa']); // 2\n\nget(obj, 'b.bb.bbb'); // undefined\nget(obj, ['b', 'bb', 'bbb']); // undefined\n\nget(obj.a, 'aa.aaa'); // 2\nget(obj.a, ['aa', 'aaa']); // 2\n\nget(obj.b, 'bb.bbb'); // undefined\nget(obj.b, ['bb', 'bbb']); // undefined\n\nget(obj.b, 'bb.bbb', 5); // 5\nget(obj.b, ['bb', 'bbb'], true); // true\n\nget(null, 'a'); // undefined\nget(undefined, ['a']); // undefined\n\nget(null, 'a', 42); // 42\nget(undefined, ['a'], 42); // 42\n\nconst obj = {a: {}};\nconst sym = Symbol();\nobj.a[sym] = 4;\nget(obj.a, sym); // 4\n```\n\n----------------------------------------\n\nTITLE: Safely Setting Nested Object Properties with just-safe-set in JavaScript\nDESCRIPTION: Examples on how to set values deeply in objects safely, creating intermediate objects if missing, with support for symbol keys. Returns true if set successfully. Requires just-safe-set package. Inputs are target object, property path (string or array), and value; output is a boolean confirmation.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nimport set from 'just-safe-set';\n\nconst obj1 = {};\nset(obj1, 'a.aa.aaa', 4); // true\nobj1; // {a: {aa: {aaa: 4}}}\n\nconst obj2 = {};\nset(obj2, ['a', 'aa', 'aaa'], 4); // true\nobj2; // {a: {aa: {aaa: 4}}}\n\nconst obj3 = {a: {aa: {aaa: 2}}};\nset(obj3, 'a.aa.aaa', 3); // true\nobj3; // {a: {aa: {aaa: 3}}}\n\nconst obj5 = {a: {}};\nconst sym = Symbol();\nset(obj5.a, sym, 7); // true\nobj5; // {a: {Symbol(): 7}}\n```\n\n----------------------------------------\n\nTITLE: Checking Deep Property Existence with just-has in JavaScript\nDESCRIPTION: Example of just-has usage to check deeply nested property presence safely, supporting string or array paths and symbols. Returns true if property exists, false otherwise, without throwing errors on undefined parents. Requires just-has package. Input is object and property path; output is boolean.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nimport has from 'just-has';\n\nconst obj = {a: {aa: {aaa: 2}}, b: 4};\n\nhas(obj, 'a.aa.aaa'); // true\nhas(obj, ['a', 'aa', 'aaa']); // true\n\nhas(obj, 'b.bb.bbb'); // false\nhas(obj, ['b', 'bb', 'bbb']); // false\n\nhas(obj.a, 'aa.aaa'); // true\nhas(obj.a, ['aa', 'aaa']); // true\n\nhas(obj.b, 'bb.bbb'); // false\nhas(obj.b, ['bb', 'bbb']); // false\n\nhas(null, 'a'); // false\nhas(undefined, ['a']); // false\n\nconst objSym = {a: {}};\nconst sym = Symbol();\nobjSym.a[sym] = 4;\nhas(objSym.a, sym); // true\n```\n\n----------------------------------------\n\nTITLE: Creating Debounced Functions with just-debounce-it in JavaScript\nDESCRIPTION: Demonstrates wrapping functions with debounce to limit invocation frequency. Supports leading and trailing edge invocation control, offers cancellation and immediate flush of the debounced function. Useful for rate-limiting events like input handlers.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_183\n\nLANGUAGE: javascript\nCODE:\n```\nimport debounce from \"just-debounce-it\";\n\nconst fn1 = debounce(() => console.log(\"Hello\"), 500);\nfn1();\nfn1();\nfn1();\n// 500ms later logs 'hello' once\n\nconst fn2 = debounce(() => console.log(\"Hello\"), 500, true);\nfn2(); // logs hello immediately\nfn2();\nfn2();\n// 500ms later logs 'hello' once\n\nconst fn3 = debounce(() => console.log(\"Hello\"), 500);\nfn3();\nfn3();\nfn3();\nfn3.cancel();\n// function cancelled before 'hello' is logged\n\nconst fn4 = debounce(() => console.log(\"Hello\"), 500);\nfn4();\nfn4();\nfn4();\nfn4.flush();\n// immediately invoke the debounced function\n```\n\n----------------------------------------\n\nTITLE: Using just-compact to Remove Falsey Values (JavaScript)\nDESCRIPTION: This JavaScript snippet showcases the usage of the \"just-compact\" function to filter out falsey values (e.g., null, undefined, NaN, false) from an array. It requires the \"just-compact\" package to be imported. The examples demonstrate how the function removes falsey values while leaving truthy values and other data structures like empty arrays and objects untouched. Input is an array of mixed values, and the output is a new array with falsey values removed. An error is thrown if an object is passed as input.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-compact/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport compact from 'just-compact';\n\ncompact([1, null, 2, undefined, null, NaN, 3, 4, false, 5]); // [1, 2, 3, 4, 5]\ncompact([1, 2, [], 4, {}]); // [1, 2, [], 4, {}]\ncompact([]); // []\ncompact({}); // throws\n```\n\n----------------------------------------\n\nTITLE: Using just-compare Function - JavaScript\nDESCRIPTION: Demonstrates importing and using the just-compare function to compare different JavaScript values. The examples illustrate its recursive comparison logic for arrays and objects, order-independent object property comparison, and handling of special values like NaN.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-compare/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport compare from 'just-compare';\n\n// primitives: value1 === value2\n// functions: value1.toString == value2.toString\n// arrays: if length, sequence and values of properties are identical\n// objects: if length, names and values of properties are identical\ncompare([1, [2, 3]], [1, [2, 3]]); // true\ncompare([1, [2, 3], 4], [1, [2, 3]]); // false\ncompare({a: 2, b: 3}, {a: 2, b: 3}); // true\ncompare({a: 2, b: 3}, {b: 3, a: 2}); // true\ncompare({a: 2, b: 3, c: 4}, {a: 2, b: 3}); // false\ncompare({a: 2, b: 3}, {a: 2, b: 3, c: 4}); // false\ncompare([1, [2, {a: 4}], 4], [1, [2, {a: 4}]]); // false\ncompare([1, [2, {a: 4}], 4], [1, [2, {a: 4}], 4]); // true\ncompare(NaN, NaN); // true\n```\n\n----------------------------------------\n\nTITLE: Extending Objects with just-extend\nDESCRIPTION: This JavaScript code snippet demonstrates the use of the `extend` function from the `just-extend` library.  It imports the `extend` function and then provides examples on how to merge properties from source objects into a target object.  Various scenarios are illustrated, including object mutations and the use of a deep extend flag to control object modification. The target object can be modified or created depending on how it's used.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-extend/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport extend from 'just-extend';\n\nvar obj = {a: 3, b: 5};\nextend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 4, b: 5, c: 8}\n\nvar obj = {a: 3, b: 5};\nextend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 3, b: 5}\n\nvar arr = [1, 2, 3];\nvar obj = {a: 3, b: 5};\nextend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\narr.push(4);\nobj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\nvar arr = [1, 2, 3];\nvar obj = {a: 3, b: 5};\nextend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\narr.push(4);\nobj; // {a: 3, b: 5, c: [1, 2, 3]}\n\nextend({a: 4, b: 5}); // {a: 4, b: 5}\nextend({a: 4, b: 5}, 3); {a: 4, b: 5}\nextend({a: 4, b: 5}, true); {a: 4, b: 5}\nextend('hello', {a: 4, b: 5}); // throws\nextend(3, {a: 4, b: 5}); // throws\n```\n\n----------------------------------------\n\nTITLE: Comparing collections with just-compare in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the 'just-compare' library to compare different collections (arrays and objects) in JavaScript.  It imports the 'compare' function and provides examples showing how it handles primitives, arrays, and objects, returning 'true' if they are considered equal and 'false' otherwise. The comparison logic is based on value equality for primitives and deep equality for collections.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport compare from 'just-compare';\n\n// primitives: value1 === value2\n// functions: value1.toString == value2.toString\n// arrays: if length, sequence and values of properties are identical\n// objects: if length, names and values of properties are identical\ncompare([1, [2, 3]], [1, [2, 3]]); // true\ncompare([1, [2, 3], 4], [1, [2, 3]]); // false\ncompare({a: 2, b: 3}, {a: 2, b: 3}); // true\ncompare({a: 2, b: 3}, {b: 3, a: 2}); // true\ncompare({a: 2, b: 3, c: 4}, {a: 2, b: 3}); // false\ncompare({a: 2, b: 3}, {a: 2, b: 3, c: 4}); // false\ncompare([1, [2, {a: 4}], 4], [1, [2, {a: 4}]]); // false\ncompare([1, [2, {a: 4}], 4], [1, [2, {a: 4}], 4]); // true\ncompare(NaN, NaN); // true\n```\n\n----------------------------------------\n\nTITLE: Deep Cloning Objects and Arrays - JavaScript\nDESCRIPTION: Demonstrates how to use the `clone` function from `just-clone` to create a deep copy of an object containing nested arrays and objects. Modifications to the original nested structures after cloning do not affect the cloned structures, illustrating the deep copy behavior.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-clone/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Deep copies objects and arrays, doesn't clone functions\n\nimport clone from 'just-clone';\n\nvar arr = [1, 2, 3];\nvar subObj = { aa: 1 };\nvar obj = { a: 3, b: 5, c: arr, d: subObj };\nvar objClone = clone(obj);\narr.push(4);\nobjClone.d.bb = 2;\nobj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}\nobjClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}\n```\n\n----------------------------------------\n\nTITLE: Calculating Variance Using just-variance - JavaScript\nDESCRIPTION: This snippet imports the just-variance module and demonstrates several usage patterns for computing variance on either arrays or numeric arguments. The function expects numeric inputs and throws errors if the input contains non-numeric types, is empty, or contains NaN values. The output is the numeric variance of the input numbers. Inputs such as a single-element array, string elements, or only NaN values are not supported and will result in errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-variance/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport variance from 'just-variance';\n\nvariance([1, 2, 3, 2, 4, 1]); // 1.3666666667\nvariance(3, 2, 1); // 1\nvariance([100, 100, 100.1, 100]); // 0.0025\nvariance(1, 2, 3, 4, 5, -6); // 15.5\nvariance([4]); // throws\nvariance(['3', 2]); // throws\nvariance(NaN, NaN); // throws\nvariance(); // throws\n```\n\n----------------------------------------\n\nTITLE: Safely Getting Nested Object Properties with just-safe-get in JavaScript\nDESCRIPTION: Demonstrates how to safely access nested properties without raising exceptions when intermediate properties are undefined. Supports dot notation or array of keys. Allows default fallback values. Requires just-safe-get package. Inputs are object, property path (string or array), and optional default value; output is the resolved value or default.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nimport get from 'just-safe-get';\n\nconst obj = {a: {aa: {aaa: 2}}, b: 4};\n\nget(obj, 'a.aa.aaa'); // 2\nget(obj, ['a', 'aa', 'aaa']); // 2\n\nget(obj, 'b.bb.bbb'); // undefined\nget(obj, ['b', 'bb', 'bbb']); // undefined\n\nget(obj.a, 'aa.aaa'); // 2\nget(obj.a, ['aa', 'aaa']); // 2\n\nget(obj.b, 'bb.bbb'); // undefined\nget(obj.b, ['bb', 'bbb']); // undefined\n\nget(obj.b, 'bb.bbb', 5); // 5\nget(obj.b, ['bb', 'bbb'], true); // true\n\nget(null, 'a'); // undefined\nget(undefined, ['a']); // undefined\n\nget(null, 'a', 42); // 42\nget(undefined, ['a'], 42); // 42\n\nconst objSym = {a: {}};\nconst sym = Symbol();\nobjSym.a[sym] = 4;\nget(objSym.a, sym); // 4\n```\n\n----------------------------------------\n\nTITLE: Using just-replace-all to Replace String Occurrences (JavaScript)\nDESCRIPTION: Demonstrates importing the 'replaceAll' function from the 'just-replace-all' module and using it to replace all occurrences of a substring within a given string. The comments illustrate various usage examples, including edge cases and expected outcomes, such as handling null inputs or missing arguments which result in errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-replace-all/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n  import replaceAll from 'just-replace-all';\n\n/*\n  replaceAll('hello, world', 'l', 'q'); // 'heqqo, worqd'\n  replaceAll('hello, world', 'l', 'qq'); // 'heqqqqo, worqqd'\n  replaceAll('hello, world', 'll', 'q'); // 'heqo, world'\n  replaceAll('hello, world', '', 'q'); // 'hello, world'\n  replaceAll('hello, world', 'l', ''); // 'heo, word'\n  replaceAll('hello, world', null, 'q'); // 'hello, world'\n  replaceAll('hello, world', 'l'); // throw\n  replaceAll('hello, world'); // throw\n  replaceAll(); // throw\n  replaceAll(null, 'l', 'q'); // throw\n  replaceAll('hello, world', null, 'q'); // throw\n  replaceAll('hello, world', 'l', null); // throw\n*/\n```\n\n----------------------------------------\n\nTITLE: Computing standard deviation using just-standard-deviation in JavaScript\nDESCRIPTION: Demonstrates importing the just-standard-deviation module and calling its main function with various numeric inputs. The function accepts either a single array of numbers or multiple numeric arguments. It calculates and returns the standard deviation as a floating-point number. The snippet also shows examples that will throw errors for invalid inputs like single-element arrays, non-numeric values, NaNs, or no arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-standard-deviation/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport standardDeviation from \"just-standard-deviation\";\n\nstandardDeviation([1, 2, 3, 2, 4, 1]); // 1.16904519\nstandardDeviation(3, 2, 1); // 1\nstandardDeviation([100, 100, 100.1, 100]); // 0.05\nstandardDeviation(1, 2, 3, 4, 5, -6); // 3.9370039\nstandardDeviation([4]); // throws\nstandardDeviation([\"3\", 2]); // throws\nstandardDeviation(NaN, NaN); // throws\nstandardDeviation(); // throws\n```\n\n----------------------------------------\n\nTITLE: Using isPrimitive to Check Primitive Types in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the 'isPrimitive' function from the 'just-is-primitive' module. The function checks if a given value is a primitive type such as string, number, boolean, null, undefined, or symbol.  The examples show how to use isPrimitive with different values to determine their type.  There are no parameters except the values that will be checked and the function returns true or false based on the type of variable given.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-primitive/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport isPrimitive from 'just-is-primitive';\nisPrimitive('hi') // true\nisPrimitive(3) // true\nisPrimitive(true) // true\nisPrimitive(false) // true\nisPrimitive(null) // true\nisPrimitive(undefined) // true\nisPrimitive(Symbol()) // true\nisPrimitive({}) // false\nisPrimitive([]) // false\nisPrimitive(function() {}) // false\nisPrimitive(new Date()) // false\nisPrimitive(/a/) // false\n```\n\n----------------------------------------\n\nTITLE: Converting a Method to Standalone Function with just-demethodize in JavaScript\nDESCRIPTION: Demonstrates the conversion of an object's method to a standalone function using 'just-demethodize'. The first argument to the resulting function is bound as the method's 'this' context. Example trims strings within an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_175\n\nLANGUAGE: javascript\nCODE:\n```\nimport demethodize from 'just-demethodize';\n\nconst trimFn = demethodize(''.trim);\n['hello ', ' goodbye', 'hello again'].map(trimFn); // ['hello', 'goodbye', 'hello again']\n```\n\n----------------------------------------\n\nTITLE: Using just-clamp function in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates the use of the `clamp` function from the `just-clamp` library.  It imports the `clamp` function and showcases its behavior with various numerical inputs and edge cases, like `NaN` and `undefined`.  The `clamp` function takes three arguments: a lower bound, a number to clamp, and an upper bound. The function returns the clamped number, ensuring it falls within the specified range.  It also shows the expected behavior when the inputs are invalid. There are no external dependencies other than the 'just-clamp' library.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-clamp/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport clamp from 'just-clamp';\n\nvar n = 5;\nclamp(1, n, 12); // 5\nclamp(3, n, 1); // 3\nclamp(8, n, 9); // 8\nclamp(0, n, 0); // 0\n\nvar n = -5;\nclamp(1, n, 12); // 1\nclamp(-7, n, -8); // -7\n\nclamp(NaN, n, 8); // NaN\nclamp(3, n, NaN); // NaN  \nclamp(3, NaN, 8); // NaN    \n\nclamp(undefined, n, 8); // throws\nclamp(3, n, 'h'); // throws  \nclamp(3, false, 8); // throws\n```\n\n----------------------------------------\n\nTITLE: Indexing Array using just-index in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the just-index utility to transform an array of objects into an object indexed by a specified property (e.g., 'id').  The function takes an array and an id as input and returns a new object.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nimport index from 'just-index';\n\nindex([{id: 'first', val: 1}, {id: 'second', val: 2}], 'id');\n// {first: {id: 'first', val: 1}, second: {id: 'second', val: 2}}\nindex([{id: 'first', val: 1}, null], 'id'); // {first: {id: 'first', val: 1}}\nindex([], 'id'); // {}\nindex([], null); // undefined\nindex({}, 'id'); // undefined\n```\n\n----------------------------------------\n\nTITLE: Flipping Object Keys and Values with just-flip-object (JavaScript)\nDESCRIPTION: Demonstrates how to use the 'just-flip-object' module to invert the keys and values of JavaScript objects. Imports the default function from 'just-flip-object', and applies it to various objects with different value types (strings, numbers, booleans). The function returns a new object where each value becomes a key and each key becomes a value. Input should be a plain object with serializable keys and values. If multiple keys share the same value, only one will appear in the output.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-flip/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport flip from 'just-flip-object';\n\n// flip the key and value\nflip({a: 'x', b: 'y', c: 'z'}); // {x: 'a', y: 'b', z: 'c'}\nflip({a: 1, b: 2, c: 3}); // {'1': 'a', '2': 'b', '3': 'c'}\nflip({a: false, b: true}); // {false: 'a', true: 'b'}\n```\n\n----------------------------------------\n\nTITLE: Merging objects with just-merge in JavaScript\nDESCRIPTION: Demonstrates how to use the 'just-merge' library for shallow merging of JavaScript objects. The code imports the 'merge' function and shows how it assigns properties from source objects to a target object. It modifies the target object directly with the new properties.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport merge from 'just-merge';\n\nlet obj = {a: 3, b: 5};\nmerge(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 4, b: 5, c: 8}\n\nlet obj = {a: 3, b: 5};\nmerge({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 3, b: 5}\n\nlet arr = [1, 2, 3];\nlet obj = {a: 3, b: 5};\nmerge(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\narr.push[4];\nobj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\nmerge({a: 4, b: 5}); // {a: 4, b: 5}\nmerge(3, {a: 4, b: 5}); // throws\nmerge({a: 4, b: 5}, 3); // throws\nmerge({a: 4, b: 5}, {b: 4, c: 5}, 'c'); // throws\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Arrays with just-unique in JavaScript\nDESCRIPTION: Examples show deduplication of primitive values, objects by reference, and optimized deduplication for sorted or string arrays with flags. Requires just-unique package. Input is an array and optional flags; output is array with unique values.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nimport unique from 'just-unique';\n\nunique([1, 2, 3, 2, 3, 4, 3, 2, 1, 3]); // [1, 2, 3, 4]\n\nvar a = {a: 3};\nvar b = {b: 4};\nvar c = {c: 5};\nunique([a, a, b, c, b]); // [a, b, c]\n\nunique([1, '1', 2, '2', 3, 2]); // [1, '1', 2, '2', 3]\n\n// declaring sorted array for performance\nunique([1, 1, '1', 2, 2, 5, '5', '5'], true); // [1, '1', 2, 5, '6']\n\n// declaring strings array for performance\nunique(['a', 'c', 'b', 'c', 'a'], false, true); // ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Using reduce function from just-reduce-object to transform an object\nDESCRIPTION: This code demonstrates importing the 'reduce' function from the 'just-reduce-object' library and applying it to transform an object into a different structure, such as swapping keys and values, or summing values. Dependencies include the 'just-reduce-object' npm package. The snippets show two different reduce operations: one creating a new key-value mapping, and the other calculating a total sum of values.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-reduce/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport reduce from 'just-reduce-object';\n\n// applies a function against an accumulator and each key-value pairs of the object\n// to reduce it to a single value\nreduce({a: 3, b: 5, c: 9}, (acc, key, value, index, keys) => {\n  acc[value] = key;\n  return acc;\n}, {}); // {3: 'a', 5: 'b', 9: 'c'}\n\nreduce({a: 3, b: 5, c: 9}, (acc, key, value, index, keys) => {\n  acc += value;\n  return acc;\n}); // 17\n```\n\n----------------------------------------\n\nTITLE: String Interpolation with just-template (JavaScript)\nDESCRIPTION: Shows how to replace variables in a string with values from a data object using 'just-template'. Requires importing the 'template' function. The first argument is a template string with {{dot.notation}} variable placeholders, and the second is an object containing values to fill. Returns an interpolated string.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_139\n\nLANGUAGE: js\nCODE:\n```\nimport template from 'just-template';\n\nvar data = {\n  a: {\n    aa: {\n      aaa: 'apple',\n      bbb: 'pear'\n    },\n    bb: 'orange'\n  },\n  b: 'plum'\n};\ntemplate('2 {{a.aa.aaa}}s, a {{a.aa.bbb}}, 3 {{a.bb}}s and a {{b}}. Yes 1 {{a.aa.bbb}}.', data);\n// '2 apples, a pear, 3 oranges and a plum. Yes 1 pear.'\n```\n\n----------------------------------------\n\nTITLE: Implementing shallow merge of objects using 'just-merge'\nDESCRIPTION: This snippet demonstrates the primary functionality of 'just-merge', which performs shallow merging of objects. It shows how to merge properties from source objects into a target object, with examples covering overwriting existing keys and handling nested objects and arrays. This utility does not support deep merging, focusing solely on shallow operations.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-merge/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport merge from 'just-merge';\n\nlet obj = {a: 3, b: 5};\nmerge(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 4, b: 5, c: 8}\n\nlet obj = {a: 3, b: 5};\nmerge({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 3, b: 5}\n\nlet arr = [1, 2, 3];\nlet obj = {a: 3, b: 5};\nmerge(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\narr.push[4];\nobj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\nmerge({a: 4, b: 5}); // {a: 4, b: 5}\nmerge(3, {a: 4, b: 5}); // throws\nmerge({a: 4, b: 5}, 3); // throws\nmerge({a: 4, b: 5}, {b: 4, c: 5}, 'c'); // throws\n```\n\n----------------------------------------\n\nTITLE: Computing Skewness Using just-skewness JavaScript Module\nDESCRIPTION: This snippet imports the just-skewness module and demonstrates how to compute the skewness of numbers or numeric arrays using Pearson's second skewness coefficient. It accepts multiple numeric arguments or a single array of numbers and returns a numerical skewness value. The function throws errors when input is invalid, such as non-numeric values, empty inputs, or insufficient data points.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-skewness/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport skewness from \"just-skewness\";\n\n// Using Pearson's second skewness coefficient\nskewness(3, 2, 1); // 0\nskewness([1, 2, 3, 2, 4, 1]); // 0.4276994613841504\nskewness(1, 2, 3, 4, 5, -6); // -0.762000762001143\nskewness([1, 2, 3, 4, 9]); // 0.7705935588815224\nskewness([4]); // throws\nskewness([\"3\", 2]); // throws\nskewness(NaN, NaN); // throws\nskewness(); // throws\n```\n\n----------------------------------------\n\nTITLE: Using demethodize to make a standalone function\nDESCRIPTION: This JavaScript snippet shows how to import and use the `demethodize` function from the 'just-demethodize' package. The `demethodize` function takes a method as input and returns a new function. When the new function is called, it automatically binds the first argument to the `this` context of the original method. This example uses the string `trim` method. Requires the just-demethodize package to be installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-demethodize/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport demethodize from 'just-demethodize';\n\nconst trimFn = demethodize(''.trim);\n['hello ', ' goodbye', 'hello again'].map(trimFn); // ['hello', 'goodbye', 'hello again']\n```\n\n----------------------------------------\n\nTITLE: Using the median function in JavaScript\nDESCRIPTION: Demonstrates how to import and use the median function from the just-median package, showing examples for various array and argument inputs, including valid numerical arrays, separate arguments, and cases that are expected to throw errors (non-numeric values, no arguments).\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-median/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport median from 'just-median';\n\nmedian([1, 2, 3, 4, 5]); // 3\nmedian([3, -1, 2]); // 2\nmedian([9, 14, 14, 200, 15]); // 14\nmedian(1, 2, 4, 3); // 2.5\nmedian(['3', 2, 1]); // throws\nmedian(); // throws\n```\n\n----------------------------------------\n\nTITLE: Extending objects with just-extend in JavaScript\nDESCRIPTION: This code snippet illustrates how to use the 'just-extend' library to extend JavaScript objects. It imports the 'extend' function and provides examples showing how it merges properties from one or more source objects into a target object.  The first argument dictates deep copy behavior: true for deep copy; false or omitted for shallow copy.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport extend from 'just-extend';\n\nvar obj = {a: 3, b: 5};\nextend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 4, b: 5, c: 8}\n\nvar obj = {a: 3, b: 5};\nextend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}\nobj; // {a: 3, b: 5}\n\nvar arr = [1, 2, 3];\nvar obj = {a: 3, b: 5};\nextend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\narr.push(4);\nobj; // {a: 3, b: 5, c: [1, 2, 3, 4]}\n\nvar arr = [1, 2, 3];\nvar obj = {a: 3, b: 5};\nextend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}\narr.push(4);\nobj; // {a: 3, b: 5, c: [1, 2, 3]}\n\nextend({a: 4, b: 5}); // {a: 4, b: 5}\nextend({a: 4, b: 5}, 3); {a: 4, b: 5}\nextend({a: 4, b: 5}, true); {a: 4, b: 5}\nextend('hello', {a: 4, b: 5}); // throws\nextend(3, {a: 4, b: 5}); // throws\n```\n\n----------------------------------------\n\nTITLE: Implementing a simple memoized addition function in JavaScript\nDESCRIPTION: This code demonstrates importing the memoize function from the just-memoize package and creating a memoized function 'sumByOne' that adds 1 to a given value. It showcases how subsequent calls with the same argument retrieve cached results to optimize performance. No dependencies beyond the package are required; the input is a number, and the output is the number incremented by one.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-memoize/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport memoize from 'just-memoize';\n\nconst sumByOne = memoize(function(value) {\n  return value + 1;\n});\n\nsumByOne(10); // Returns value returned by the function\nsumByOne(10); // Cache hit!\n\nsumByOne(20); // Returns value returned by the function\nsumByOne(20); // Cache hit!\n```\n\n----------------------------------------\n\nTITLE: Memoizing Last Function Call Result with just-memoize-last in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the use of the just-memoize-last module for creating a memoized function that caches only the most recent evaluation to optimize repeated computations. It defines maxValue, a memoized function that returns the maximum value in an array. The snippet uses just-compare as a custom comparison function to determine argument equality, ensuring the cache is reused only if input arrays are deeply equal. The example shows how consecutive identical inputs result in cached outputs, improving performance by avoiding redundant calculations.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-memoize-last/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst memoizeLast = require('just-memoize-last')\nconst compare = require('just-compare')\n\nconst maxValue = memoizeLast(function(arr) {\n  return Math.max(...arr)\n}, function(a, b) {\n  return compare(a, b)\n});\n\nmaxValue([1,2,3]) // 3\nmaxValue([1,2,3]) // cache hit!\nmaxValue([1,3,4]) // 4\nmaxValue([1,2,3]) // 3\n```\n\n----------------------------------------\n\nTITLE: Truncating strings with custom suffix - JavaScript\nDESCRIPTION: This snippet demonstrates the usage of the truncate function from the just-truncate module. It shows how to truncate strings to a specified length and add a custom suffix. The function takes the string to truncate, the desired length, and an optional suffix as input. It returns the truncated string with the suffix, if applicable, or the original string if it's shorter than the specified length. The suffix is only applied if the string is truncated.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-truncate/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  truncate('when shall we three meet again', 9); // 'when s...'\n  truncate('when shall we three meet again', 10, ' (etc)'); // 'when (etc)'\n  truncate('when shall we', 15,); // 'when shall we'\n  truncate('when shall we', 15, '(more)'); // 'when shall we'\n  truncate('when shall we', 10, ' (etc etc etc)'); // ' (etc etc etc)'\n```\n\n----------------------------------------\n\nTITLE: Applying Diffs to Objects using just-diff-apply in JavaScript\nDESCRIPTION: Demonstrates importing and using the `diffApply` function from `just-diff-apply` to modify JavaScript objects based on a provided diff array. Examples showcase 'remove', 'replace', 'add', and 'move' operations on simple objects, arrays (using numeric or string keys), and nested objects. It also shows how to apply standard JSON Patches (RFC 6902) by providing the `jsonPatchPathConverter` as an argument.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-diff-apply/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {diffApply} from 'just-diff-apply';\n\nconst obj1 = {a: 3, b: 5};\ndiffApply(obj1,\n  [\n    { \"op\": \"remove\", \"path\": ['b'] },\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n    { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n  ]\n);\nobj1; // {a: 4, c: 5}\n\nconst obj2 = {a: 3, b: 5};\ndiffApply(obj2,\n  [\n    { \"op\": \"move\", \"from\": ['a'], \"path\": ['c']},\n  ]\n);\nobj2; // {b: 5, c: 3}\n\n// using converter to apply jsPatch standard paths\n// see http://jsonpatch.com\nimport {diffApply, jsonPatchPathConverter} from 'just-diff-apply'\nconst obj3 = {a: 3, b: 5};\ndiffApply(obj3, [\n  { \"op\": \"remove\", \"path\": '/b' },\n  { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n  { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n], jsonPatchPathConverter);\nobj3; // {a: 4, c: 5}\n\n// arrays (array key can be string or numeric)\nconst obj4 = {a: 4, b: [1, 2, 3]};\ndiffApply(obj4, [\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n  { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n]);\nobj4; // {a: 3, b: [1, 2, 4, 9]}\n\n// nested paths\nconst obj5 = {a: 4, b: {c: 3}};\ndiffApply(obj5, [\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n  { \"op\": \"remove\", \"path\": ['b', 'c']}\n  { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n]);\nobj5; // {a: 5, b: {d: 4}}\n```\n\n----------------------------------------\n\nTITLE: Using kebabCase function in JavaScript\nDESCRIPTION: Examples demonstrating how to use the kebabCase function to convert various string formats (space-separated, hyphenated, underscore, camelCase, mixed case, etc.) to kebab case format.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-kebab-case/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport kebabCase from 'just-kebab-case';\n\nkebabCase('the quick brown fox'); // 'the-quick-brown-fox'\nkebabCase('the-quick-brown-fox'); // 'the-quick-brown-fox'\nkebabCase('the_quick_brown_fox'); // 'the-quick-brown-fox'\nkebabCase('theQuickBrownFox'); // 'the-quick-brown-fox'\nkebabCase('theQuickBrown Fox'); // 'the-quick-brown-fox'\nkebabCase('thequickbrownfox'); // 'thequickbrownfox'\nkebabCase('the - quick * brown# fox'); // 'the-quick-brown-fox'\nkebabCase('theQUICKBrownFox'); // 'the-q-u-i-c-k-brown-fox'\n```\n\n----------------------------------------\n\nTITLE: Using just-clamp Function in JavaScript\nDESCRIPTION: Demonstrates the `clamp` function from 'just-clamp'. It takes a minimum value, a number, and a maximum value, and returns the number if it's within the range [min, max], otherwise returns the min or max boundary it exceeded. Returns NaN if any input is NaN. Throws errors for non-numeric or undefined inputs.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\nimport clamp from 'just-clamp';\n\nvar n = 5;\nclamp(1, n, 12); // 5\nclamp(3, n, 1); // 3\nclamp(8, n, 9); // 8\nclamp(0, n, 0); // 0\n\nvar n = -5;\nclamp(1, n, 12); // 1\nclamp(-7, n, -8); // -7\n\nclamp(NaN, n, 8); // NaN\nclamp(3, n, NaN); // NaN  \nclamp(3, NaN, 8); // NaN    \n\nclamp(undefined, n, 8); // throws\nclamp(3, n, 'h'); // throws  \nclamp(3, false, 8); // throws \n```\n\n----------------------------------------\n\nTITLE: Grouping Arrays with just-group-by (JavaScript)\nDESCRIPTION: Shows how to use 'just-group-by' to group array elements into an object based on a provided function. Input array and grouping callback required. Returns an object where keys are the result of applying the callback, each mapping to an array of grouped items.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_123\n\nLANGUAGE: js\nCODE:\n```\nimport groupBy from 'just-group-by';\n\ngroupBy([6.1, 4.2, 6.3], Math.floor); // { '4': [4.2], '6': [6.1, 6.3] }\ngroupBy([1,2,3,4,5,6,7,8], function(i) { return i % 2}); // { '0': [2, 4, 6, 8], '1': [1, 3, 5, 7] }\n```\n\n----------------------------------------\n\nTITLE: Installing just-zip-it with npm\nDESCRIPTION: Installs the just-zip-it package using npm. This command adds the package and its dependencies to your project's node_modules directory and package.json file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-zip/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-zip-it\n```\n\n----------------------------------------\n\nTITLE: Using custom cache key with memoized addition function\nDESCRIPTION: This snippet shows how to create a memoized function that sums two arguments 'a' and 'b' with a custom cache key function. The cache key is generated by concatenating 'a' and 'b' with a dash, enabling more granular or specific caching strategies. The function optimizes repeated calls with identical arguments by utilizing the custom key to retrieve cached results.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-memoize/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar sum = memoize(function(a, b) {\n  return a + b;\n}, function(a, b) {\n  return `${a}-${b}`;\n});\n\nsum(10, 10); // Returns value returned by the function\nsum(10, 20); // Returns value returned by the function\nsum(10, 20); // Cache hit!\n```\n\n----------------------------------------\n\nTITLE: Calculating Object Differences with just-diff in JavaScript\nDESCRIPTION: Demonstrates importing and using the `diff` function from the `just-diff` library to calculate the differences between various JavaScript objects and arrays. It shows examples with simple objects, arrays, nested objects, and using the optional `jsonPatchPathConverter` to format paths according to the JSON Patch standard (RFC 6902). The output is an array of operation objects (`add`, `remove`, `replace`).\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-diff/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {diff} from 'just-diff';\n\nconst obj1 = {a: 4, b: 5};\nconst obj2 = {a: 3, b: 5};\nconst obj3 = {a: 4, c: 5};\n\ndiff(obj1, obj2);\n/* Output:\n[\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n]\n*/\n\ndiff(obj2, obj3);\n/* Output:\n[\n  { \"op\": \"remove\", \"path\": ['b'] },\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 }\n  { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n]\n*/\n\n// using converter to generate jsPatch standard paths\nimport {diff, jsonPatchPathConverter} from 'just-diff'\ndiff(obj1, obj2, jsonPatchPathConverter);\n/* Output:\n[\n  { \"op\": \"replace\", \"path\": '/a', \"value\": 3 }\n]\n*/\n\ndiff(obj2, obj3, jsonPatchPathConverter);\n/* Output:\n[\n  { \"op\": \"remove\", \"path\": '/b' },\n  { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n  { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n]\n*/\n\n// arrays\nconst obj4 = {a: 4, b: [1, 2, 3]};\nconst obj5 = {a: 3, b: [1, 2, 4]};\nconst obj6 = {a: 3, b: [1, 2, 4, 5]};\n\ndiff(obj4, obj5);\n/* Output:\n[\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n]\n*/\n\ndiff(obj5, obj6);\n/* Output:\n[\n  { \"op\": \"add\", \"path\": ['b', 3], \"value\": 5 }\n]\n*/\n\n// nested paths\nconst obj7 = {a: 4, b: {c: 3}};\nconst obj8 = {a: 4, b: {c: 4}};\nconst obj9 = {a: 5, b: {d: 4}};\n\ndiff(obj7, obj8);\n/* Output:\n[\n  { \"op\": \"replace\", \"path\": ['b', 'c'], \"value\": 4 }\n]\n*/\n\ndiff(obj8, obj9);\n/* Output:\n[\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n  { \"op\": \"remove\", \"path\": ['b', 'c']}\n  { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing just-extend via npm\nDESCRIPTION: This snippet shows how to install the `just-extend` package using the npm package manager.  The command `npm install just-extend` is executed in the shell to download and install the library and its dependencies. The package is sourced from the npm registry.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-extend/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-extend\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers Using just-random-integer in JavaScript\nDESCRIPTION: Demonstrates usage of the 'just-random-integer' package to generate random integers within specified ranges. Supports calls with zero, one, or two arguments providing inclusive ranges. Arguments can be floating point numbers which are internally coerced to integers. Outputs random integer values within those bounds.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nimport random from 'just-random-integer';\n\nrandom();\n// Returns either 0 or 1\nrandom(5);\n// Returns a random integer between 0 and 5 (inclusively)\nrandom(3, 10);\n// Returns a random integer between 3 and 10 (inclusively)\nrandom(-5.8, 10.4);\n// Returns a random integer between -5 and 10 (inclusively)\n```\n\n----------------------------------------\n\nTITLE: Installing just-memoize via npm\nDESCRIPTION: This snippet shows the command line instructions to install the just-memoize package using npm, a popular package manager for Node.js. It ensures that the library is added as a dependency for project integration.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-memoize/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-memoize\n```\n\n----------------------------------------\n\nTITLE: Installing just-extend via Yarn\nDESCRIPTION: This snippet shows how to install the `just-extend` package using the Yarn package manager.  The command `yarn add just-extend` is executed in the shell to download and install the library and its dependencies. The package is sourced from the npm registry.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-extend/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-extend\n```\n\n----------------------------------------\n\nTITLE: Importing and Using just-in-range in JavaScript\nDESCRIPTION: Demonstrates how to import the `inRange` function from the `just-number-in-range` module (as shown in the provided text) and provides commented examples showing various test cases for checking if a number is within a range. Examples cover valid ranges, implicit ranges, and cases that result in errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-in-range/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  import inRange from 'just-number-in-range'\n\n/*\n  inRange(2, 1, 10); // true\n  inRange(15, 20); // true\n  inRange(20, 21, 30); // false\n  inRange(30, 21, 30); // false\n  inRange(); // throws\n  inRange(100); // throws\n  inRange(\"js\"); // throws\n*/\n\n```\n\n----------------------------------------\n\nTITLE: Using just-unique to Deduplicate Arrays (JavaScript)\nDESCRIPTION: Demonstrates importing and using the 'unique' function from the 'just-unique' library. Examples show deduplication of arrays containing numbers, objects, and mixed types. Optional boolean parameters can be passed to indicate if the input array is already sorted or contains only strings for potential performance improvements.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-unique/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport unique from 'just-unique';\n\nunique([1, 2, 3, 2, 3, 4, 3, 2, 1, 3]); // [1, 2, 3, 4]\n\nvar a = {a: 3};\nvar b = {b: 4};\nvar c = {c: 5};\nunique([a, a, b, c, b]); // [a, b, c]\n\nunique([1, '1', 2, '2', 3, 2]); // [1, '1', 2, '2', 3]\n\n// declaring sorted array for performance\nunique([1, 1, '1', 2, 2, 5, '5', '5'], true); // [1, '1', 2, 5, '6']\n\n// declaring strings array for performance\nunique(['a', 'c', 'b', 'c', 'a'], false, true); // ['a', 'b', 'c']\n```\n\n----------------------------------------\n\nTITLE: Sorting Array of Objects by Property with just-order-by\nDESCRIPTION: This example shows how to sort an array of objects by a simple property (user) using the orderBy function. The objects are sorted based on the user property in ascending order.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-order-by/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\norderBy(\n  [\n    {user: 'fabio', age: 34},\n    {user: 'max', age: 29},\n    {user: 'zacarias', age: 44},\n    {user: 'robert', age: 28},\n    {user: 'klaus', age: 38},\n  ],\n  [\n    {\n      property: 'user',\n    },\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Using just-index to create an object index\nDESCRIPTION: Demonstrates how to use the just-index function imported from the 'just-index' module. It takes an array of objects and a key string, returning a new object where keys are the values from the specified key and values are the original objects. Examples show successful indexing, handling null values in the input array, and expected errors for invalid inputs.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-index/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport index from 'just-index';\n\nindex([{id: 'first', val: 1}, {id: 'second', val: 2}], 'id');\n// {first: {id: 'first', val: 1}, second: {id: 'second', val: 2}}\nindex([{id: 'first', val: 1}, null], 'id'); // {first: {id: 'first', val: 1}}\nindex([], 'id'); // {}\nindex([], null); // throws error\nindex({}, 'id'); // throws error\n```\n\n----------------------------------------\n\nTITLE: Reducing Objects with just-reduce-object in JavaScript\nDESCRIPTION: Illustrates reduction of an object using a reducer function that receives accumulator, key, value, index, and keys array. The function accumulates values or builds new objects. Requires just-reduce-object package. Inputs are an object, reducer callback, and optional initial accumulator; output is the accumulated result.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nimport reduce from 'just-reduce-object';\n\n// applies a function against an accumulator and each key-value pairs of the object\n// to reduce it to a single value\nreduce({a: 3, b: 5, c: 9}, (acc, key, value, index, keys) => {\n  acc[value] = key;\n  return acc;\n}, {}); // {3: 'a', 5: 'b', 9: 'c'}\n\nreduce({a: 3, b: 5, c: 9}, (acc, key, value, index, keys) => {\n  acc += value;\n  return acc;\n}); // 17\n```\n\n----------------------------------------\n\nTITLE: Installing just-variance Module with npm - Shell\nDESCRIPTION: This snippet shows how to install the just-variance package from the npm registry using the npm package manager. You must have Node.js and npm installed on your system to use this command. Running this command will add just-variance as a dependency in your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-variance/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-variance\n```\n\n----------------------------------------\n\nTITLE: Install just-compose using npm\nDESCRIPTION: Installs the 'just-compose' package from the npm registry. This command downloads the module and its dependencies into your project's 'node_modules' directory, making it available for use.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-compose/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-compose\n```\n\n----------------------------------------\n\nTITLE: Installing just-camel-case with yarn\nDESCRIPTION: Command to install the just-camel-case package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-camel-case/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-camel-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-safe-set via Yarn\nDESCRIPTION: Command to install the `just-safe-set` package using the Yarn package manager. Requires Node.js and Yarn to be installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-safe-set/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-safe-set\n```\n\n----------------------------------------\n\nTITLE: Picking keys from objects with just-pick in JavaScript\nDESCRIPTION: Demonstrates how to create a new object containing only the specified keys from an existing object using the 'just-pick' library in JavaScript. The code imports the 'pick' function and provides examples showing how to select specific properties from an object, returning a new object with only those properties.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nimport pick from 'just-pick';\n\nvar obj = { a: 3, b: 5, c: 9 };\npick(obj, ['a', 'c']); // {a: 3, c: 9}\npick(obj, 'a', 'c'); // {a: 3, c: 9}\npick(obj, ['a', 'b', 'd']); // {a: 3, b: 5}\npick(obj, ['a', 'a']); // {a: 3}\n```\n\n----------------------------------------\n\nTITLE: Using just-partition in JavaScript\nDESCRIPTION: Examples demonstrating how to use the partition function to split arrays based on different predicates. Shows numeric filtering, type checking, and edge cases including error scenarios.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-partition/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport partition from 'just-partition';\n\npartition([1, 5, 2, 4, 3], n => n > 3); // [[5, 4],[1, 2, 3]]\npartition(['a', 2, 3, '3'], x => typeof x == 'string'); // [['a', '3'],[2, 3]]\npartition([1, 2, 3, 4], x => typeof x == 'number'); // [[1, 2, 3, 4],[]]\npartition([1, 2, 3, 4], x => typeof x == 'string'); // [[], [1, 2, 3, 4]]\npartition([], n => n > 3); // [[], []]\npartition({a: 1, b: 2}, n => n > 1); // throws\npartition(null, n => n > 1); // throws\npartition(undefined, n => n > 1); // throws\n```\n\n----------------------------------------\n\nTITLE: Using just-throttle to Create Throttled Functions in JavaScript\nDESCRIPTION: Demonstrates various ways to use the `just-throttle` function after importing it. Examples showcase basic throttling, controlling execution timing with `leading` and `trailing` options, cancelling pending invocations using `.cancel()`, and immediately invoking the function using `.flush()`. The `throttle` function takes the target function, interval time (in ms), and an optional options object.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-throttle/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport throttle from 'just-throttle';\n\n// no matter how many times the function is called, only invoke once within the given interval\n// options: \n// `leading`: invoke  before interval\n// `trailing`: invoke afer interval\n\nconst fn1 = throttle(() => console.log('hello'), 500, {leading: true});\nsetInterval(fn1, 400);\n// logs 'hello' immediately and then every 500ms\n\nconst fn2 = throttle(() => console.log('hello'), 500, {trailing: true});\nsetInterval(fn2, 400);\n// logs 'hello' after 500ms and then every 500ms\n\nconst fn3 = throttle(() => console.log('hello'), 500, {leading: true, trailing: true});\n// forces trailing to false\n\nconst fn4 = throttle(() => console.log('hello'), 500, { leading: false });\nfn4();\nfn4();\nfn4();\nfn4.cancel();\n// function cancelled before 'hello' is logged\n\nconst fn5 = throttle(() => console.log(\"Hello\"), 500);\nfn5();\nfn5();\nfn5();\nfn5.flush();\n// immediately invoke the throttled function\n```\n\n----------------------------------------\n\nTITLE: Ordering Array using just-order-by in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to sort an array using the just-order-by utility.  The library takes an array of items, and an array of order parameters, sorting by default in ascending order.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nimport orderBy from 'just-order-by';\n\norderBy([10, 1, 5, 20, 15, 35, 30, 6, 8]); // [1, 5, 6, 8, 10, 15, 20, 30, 35]\n\norderBy(\n  [\n    { user: 'fabio', details: { city: 'Milan', age: 34 } },\n    { user: 'max', details: { city: 'Munich', age: 29 } },\n    { user: 'zacarias', details: { city: 'Sao Paulo', age: 44 } },\n    { user: 'robert', details: { city: 'Manchester', age: 28 } },\n    { user: 'max', details: { city: 'Zurich', age: 38 } },\n  ],\n  [\n    {\n      property(v) {\n        return v.details.age;\n      },\n    },\n  ]\n);\n\n/*\n[\n  {user: 'robert', age: 28},\n  {user: 'max', age: 29},\n  {user: 'fabio', age: 34},\n  {user: 'klaus', age: 38},\n  {user: 'zacarias', age: 44},\n]\n*/\n\norderBy(\n  [\n    {user: 'fabio', age: 34},\n    {user: 'max', age: 29},\n    {user: 'zacarias', age: 44},\n    {user: 'robert', age: 28},\n    {user: 'klaus', age: 38},\n  ],\n  [\n    {\n      property: 'user',\n    },\n  ]\n);\n\n/*\n[\n  {user: 'fabio', age: 34},\n  {user: 'klaus', age: 38},\n  {user: 'max', age: 29},\n  {user: 'robert', age: 28},\n  {user: 'zacarias', age: 44},\n]\n*/\n\norderBy(\n  [\n    { user: 'fabio', age: 34 },\n    { user: 'max', age: 29 },\n    { user: 'zacarias', age: 44 },\n    { user: 'moris', age: 28 },\n    { user: 'max', age: 38 },\n  ],\n  [\n    {\n      property: 'user',\n      order: 'desc',\n    },\n    {\n      property(v) {\n        return v.age;\n      },\n    },\n  ]\n);\n\n/*\n[\n  {\n    user: 'zacarias',\n    age: 44\n  },\n  {\n    user: 'moris',\n    age: 28\n  },\n  {\n    user: 'max',\n    age: 29\n  },\n  {\n    user: 'max',\n    age: 38\n  },\n  {\n    user: 'fabio',\n    age: 34\n  }\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing just-curry-it Module with npm (Shell)\nDESCRIPTION: Provides the command to install the 'just-curry-it' module into a Node.js project using the npm package manager. This is a prerequisite for using the module in your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-curry/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-curry-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-pick with yarn\nDESCRIPTION: This command installs the 'just-pick' package using yarn, another JavaScript package manager. The 'just-pick' package enables the creation of a new object with only the specified keys. This is an alternative to using npm for installing the library.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pick\n```\n\n----------------------------------------\n\nTITLE: Using pick function to extract specific keys from an object in JavaScript\nDESCRIPTION: Examples of using the pick function to create new objects with only specified keys from an existing object. Shows various input formats including array of keys and individual key arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-pick/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport pick from 'just-pick';\n\nvar obj = { a: 3, b: 5, c: 9 };\npick(obj, ['a', 'c']); // {a: 3, c: 9}\npick(obj, 'a', 'c'); // {a: 3, c: 9}\npick(obj, ['a', 'b', 'd']); // {a: 3, b: 5}\npick(obj, ['a', 'a']); // {a: 3}\n```\n\n----------------------------------------\n\nTITLE: Using the union function in JavaScript\nDESCRIPTION: Example of importing and using the union function to combine two arrays while removing duplicate values. Returns a new array containing all unique values from both input arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-union/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport union from 'just-union';\n\nunion([1, 2, 5, 6], [2, 3, 4, 6]); // [1, 2, 5, 6, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Installing just-capitalize via yarn\nDESCRIPTION: Command to install the just-capitalize package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-capitalize/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-capitalize\n```\n\n----------------------------------------\n\nTITLE: Installing just-union with npm\nDESCRIPTION: Command to install the just-union package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-union/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-union\n```\n\n----------------------------------------\n\nTITLE: Getting object entries with just-entries in JavaScript\nDESCRIPTION: Demonstrates how to use the 'just-entries' library to retrieve object entries as an array of [key, value] pairs in JavaScript.  The code imports the 'entries' function and provides examples of how it works with both objects and arrays, returning an array containing key-value pairs.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport entries from 'just-entries';\n\n// Object:\nentries({c: 8, a: 4}); // [['c', 8], ['a', 4]]\nentries({b: {bb: 4}, a: {aa: 2}}); // [['b', {bb: 4}], ['a', {aa: 2}]]\nentries({}); // []\n\n// Array:\nentries([{c: 8}, {a: 4}]); // [[0, {c: 8}], [1, {a: 4}]]\nentries(['À', 'mauvais', 'ouvrier', 'point', 'de', 'bon', 'outil'])\n// [[0, 'À'], [1, 'mauvais'] ... [6, 'outil']]\nentries([]); // []\n```\n\n----------------------------------------\n\nTITLE: Splitting Array using just-split in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to split an array into groups (chunks) of a specified size using the just-split utility.  It imports the 'just-split' module and uses it to divide the input array into sub-arrays, each containing the given number of elements.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nimport split from 'just-split';\n\nsplit([]); // []\nsplit([1, 2, 3, 4, 5]); // [[1, 2, 3, 4, 5]]\nsplit([1, 2, 3, 4, 5, 6, 7, 8, 9], 3); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsplit([1, 2, 3, 4, 5, 6, 7, 8, 9], '3'); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsplit(['a', 'b', 'c', 'd', 'e'], 2); // [['a', 'b'], ['c', 'd'], ['e']]\nsplit([1, 2, 3, 4, 5, 6, 7, 8], 3); // [[1, 2, 3], [4, 5, 6], [7, 8]]\n```\n\n----------------------------------------\n\nTITLE: Installing just-pluck-it using npm - Shell\nDESCRIPTION: This shell command installs the just-pluck-it npm package using npm. No prerequisites are required beyond Node.js and npm being installed. Running this command will add just-pluck-it as a dependency in your current project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-pluck/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pluck-it\n```\n\n----------------------------------------\n\nTITLE: Using just-curry-it to Curry Functions (JavaScript)\nDESCRIPTION: Demonstrates various examples of using the `curry` function from the 'just-curry-it' module. It illustrates currying a function with a fixed number of arguments, handling variadic functions, and using partial application to create new functions with pre-filled arguments. Requires the 'just-curry-it' module to be installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-curry/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport curry from 'just-curry-it';\n\nfunction add(a, b, c) {\n  return a + b + c;\n}\ncurry(add)(1)(2)(3); // 6\ncurry(add)(1)(2)(2); // 5\ncurry(add)(2)(4, 3); // 9\n\nfunction add(...args) {\n  return args.reduce((sum, n) => sum + n, 0)\n}\nvar curryAdd4 = curry(add, 4)\ncurryAdd4(1)(2, 3)(4); // 10\n\nfunction converter(ratio, input) {\n  return (input*ratio).toFixed(1);\n}\nconst curriedConverter = curry(converter)\nconst milesToKm = curriedConverter(1.62);\nmilesToKm(35); // 56.7\nmilesToKm(10); // 16.2\n```\n\n----------------------------------------\n\nTITLE: Installing just-mode via npm (Shell)\nDESCRIPTION: This snippet demonstrates how to install the just-mode package using the npm package manager. Running this command in a shell will add just-mode to your project's dependencies. There are no parameters, and any system with npm installed can use this command.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-mode/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-mode\n```\n\n----------------------------------------\n\nTITLE: Installing just-squash npm package using shell commands\nDESCRIPTION: Shows the commands to install the just-squash package using npm and yarn package managers. These commands should be run in a shell or terminal to add the just-squash utility as a dependency in a JavaScript project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-squash/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-squash\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-squash\n```\n\n----------------------------------------\n\nTITLE: Using just-safe-set to Set Nested Properties in JavaScript\nDESCRIPTION: Demonstrates importing and using the `set` function from `just-safe-set` to assign values to nested properties within JavaScript objects. It handles cases where intermediate properties might not exist by creating them. The examples show usage with both dot-notation strings ('a.aa.aaa') and arrays of property keys (['a', 'aa', 'aaa']), including Symbol keys. The function modifies the object in place and returns `true` on success.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-safe-set/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport set from 'just-safe-set';\n\nconst obj1 = {};\nset(obj1, 'a.aa.aaa', 4); // true\nobj1; // {a: {aa: {aaa: 4}}}\n\nconst obj2 = {};\nset(obj2, ['a', 'aa', 'aaa'], 4); // true\nobj2; // {a: {aa: {aaa: 4}}}\n\nconst obj3 = {a: {aa: {aaa: 2}}};\nset(obj3, 'a.aa.aaa', 3); // true\nobj3; // {a: {aa: {aaa: 3}}}\n\nconst obj5 = {a: {}};\nconst sym = Symbol();\nset(obj5.a, sym, 7); // true\nobj5; // {a: {Symbol(): 7}}\n```\n\n----------------------------------------\n\nTITLE: Generating Array Permutations in JavaScript\nDESCRIPTION: Demonstrates the usage of the 'just-permutations' module in JavaScript. It shows how to import the `permutations` function and call it with an array input to receive an array containing all possible permutations of the input array's elements. The example illustrates the output for a standard array, an empty array (returns an empty array), and clarifies that calling the function without arguments will result in an error.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-permutations/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport permutations from 'just-permutations';\n\npermutations([1, 2, 3]); // [[1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2, 1]]\npermutations([]); // []\npermutations(); // throws\n```\n\n----------------------------------------\n\nTITLE: Splitting Array at Index using just-split-at in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to split an array into two parts at a given index using the just-split-at utility. It imports the 'just-split-at' module and uses it to divide the input array into two separate arrays based on the provided index.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nimport splitAt from 'just-split-at';\n\nsplitAt([1, 2, 3, 4, 5], 2); // [[1, 2], [3, 4, 5]]\nsplitAt([{a: 1}, {b: 1}, {c: 1}], -1); // [[{a: 1}, {b: 1}], [{c: 1}]]\nsplitAt([], 2); // [[], []]\nsplitAt(null, 1); // throws\nsplitAt(undefined, 1); // throws\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Ranges with just-range (JavaScript)\nDESCRIPTION: Shows how to generate arrays representing numeric ranges using 'just-range'. Requires importing the 'range' function. Accepts start, end, and optional step parameters; returns an array of numbers within the specified range.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_115\n\nLANGUAGE: js\nCODE:\n```\nimport range from 'just-range';\n\nrange(1, 5); // [1, 2, 3, 4]\nrange(5); // [0, 1, 2, 3, 4]\nrange(-5); // [0, -1, -2, -3, -4]\nrange(0, 20, 5) // [0, 5, 10, 15]\n```\n\n----------------------------------------\n\nTITLE: Mapping object values with a predicate function in JavaScript\nDESCRIPTION: Examples of using the just-map-values utility to transform object values using predicate functions that can access values, keys, and the original object.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map-values/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport map from 'just-map-values';\n\n// predicate updates values, receives (value, key, obj)\nmap({a: 3, b: 5, c: 9}, (value) => value + 1); // {a: 4, b: 6, c: 10}\nmap({a: 3, b: 5, c: 9}, (value, key) => value + key); // {a: 3a, b: 5b, c: 9c}\nmap({a: 3, b: 5, c: 9}, (value, key, obj) => obj.b); // {a: 5, b: 5, c: 5}\n```\n\n----------------------------------------\n\nTITLE: Installing just-remove with yarn\nDESCRIPTION: Install the just-remove package using yarn. This provides an alternative package manager option for adding the remove function to your JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-remove/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-remove\n```\n\n----------------------------------------\n\nTITLE: Installing just-modulo via Yarn (Shell)\nDESCRIPTION: Shows how to add the 'just-modulo' package to a project using the Yarn package manager. This is an alternative to npm for managing project dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-modulo/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-modulo\n```\n\n----------------------------------------\n\nTITLE: Mapping Object Values with just-map-values in JavaScript\nDESCRIPTION: Provides an example of mapping an object's values with a predicate function that receives value, key, and object as arguments. The function returns new values which compose the resulting object. Requires 'just-map-values' package. Inputs are an object and a predicate callback; output is an object with updated values.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nimport map from 'just-map-values';\n\n// predicate updates values, receives (value, key, obj)\nmap({a: 3, b: 5, c: 9}, (value) => value + 1); // {a: 4, b: 6, c: 10}\nmap({a: 3, b: 5, c: 9}, (value, key) => value + key); // {a: 3a, b: 5b, c: 9c}\nmap({a: 3, b: 5, c: 9}, (value, key, obj) => obj.b); // {a: 5, b: 5, c: 5}\n```\n\n----------------------------------------\n\nTITLE: Sorting Array of Objects by Multiple Properties with just-order-by\nDESCRIPTION: This example demonstrates how to sort an array of objects by multiple properties (user and age) using the orderBy function. The user property is sorted in descending order ('desc'), and the age property is sorted in ascending order.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-order-by/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\norderBy(\n  [\n    { user: 'fabio', age: 34 },\n    { user: 'max', age: 29 },\n    { user: 'zacarias', age: 44 },\n    { user: 'moris', age: 28 },\n    { user: 'max', age: 38 },\n  ],\n  [\n    {\n      property: 'user',\n      order: 'desc',\n    },\n    {\n      property(v) {\n        return v.age;\n      },\n    },\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Installing just-flip with npm\nDESCRIPTION: This snippet shows how to install the just-flip npm package using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-flip/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flip\n```\n\n----------------------------------------\n\nTITLE: Installing just-omit via yarn\nDESCRIPTION: Install the just-omit package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-omit/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-omit\n```\n\n----------------------------------------\n\nTITLE: Using just-omit to create objects with omitted keys in JavaScript\nDESCRIPTION: Examples of using the omit function to create new objects without specified keys. The function accepts either an array of keys to omit or multiple string arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-omit/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport omit from 'just-omit';\n\nvar obj = {a: 3, b: 5, c: 9};\nomit(obj, ['a', 'c']); // {b: 5}\nomit(obj, 'a', 'c'); // {b: 5}\nomit(obj, ['a', 'b', 'd']); // {c: 9}\nomit(obj, ['a', 'a']); // {b: 5, c: 9}\n```\n\n----------------------------------------\n\nTITLE: Calculating Mean with just-mean (JavaScript)\nDESCRIPTION: Uses 'just-mean' to compute the average of an array or numeric arguments. Accepts an array or separate numbers; returns NaN for invalid input and may throw on non-numeric types. Care should be taken with input data types.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_125\n\nLANGUAGE: js\nCODE:\n```\nimport mean from 'just-mean';\n\nmean([1, 2, 3, 2, 4, 1]); // 2.1666666667\nmean(3, 2, 1); // 2\nmean([4]); // 4\nmean(['3', 2]); // throws\nmean(); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-keys with npm\nDESCRIPTION: Command to install the 'just-map-keys' package using the Node Package Manager (npm). This adds the module as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map-keys/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-map-keys\n```\n\n----------------------------------------\n\nTITLE: Using just-has to Check Deep Properties (JavaScript)\nDESCRIPTION: Demonstrates importing and using the `just-has` function to check for the existence of deeply nested properties in JavaScript objects. It shows examples using both dot notation strings (e.g., 'a.aa.aaa') and arrays of keys (e.g., ['a', 'aa', 'aaa']) as paths. The function returns `true` if the full path exists and `false` otherwise, safely handling intermediate undefined properties, null/undefined base objects, and Symbol keys without throwing errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-has/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport has from 'just-has';\n\nconst obj = {a: {aa: {aaa: 2}}, b: 4};\n\nhas(obj, 'a.aa.aaa'); // true\nhas(obj, ['a', 'aa', 'aaa']); // true\n\nhas(obj, 'b.bb.bbb'); // false\nhas(obj, ['b', 'bb', 'bbb']); // false\n\nhas(obj.a, 'aa.aaa'); // true\nhas(obj.a, ['aa', 'aaa']); // true\n\nhas(obj.b, 'bb.bbb'); // false\nhas(obj.b, ['bb', 'bbb']); // false\n\nhas(null, 'a'); // false\nhas(undefined, ['a']); // false\n\n// Note: Redeclaration of 'obj' in original example, adjusted for clarity\nconst objWithSymbol = {a: {}};\nconst sym = Symbol();\nobjWithSymbol.a[sym] = 4;\nhas(objWithSymbol.a, sym); // true\n```\n\n----------------------------------------\n\nTITLE: Using just-map-keys in JavaScript\nDESCRIPTION: Demonstrates importing and utilizing the 'just-map-keys' function. The function takes an object (or array) and a predicate function as arguments. The predicate receives (value, key, object) and should return the new key for the corresponding value in the resulting object.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map-keys/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport map from 'just-map-keys';\n\n// predicate updates keys, receives (value, key, object)\nmap({a: 'cow', b: 'sheep', c: 'pig'}, (value) => value);\n  // {cow: 'cow', sheep: 'sheep', pig: 'pig'}\nmap([4, 5, 6], (value, key) => key + 1); // {1: 4, 2: 5, 3: 6}\nmap({a: 3, b: 5, c: 9}, (value, key) => key + value); // {a3: 3, b5: 5, c9: 9}\nmap({a: 3, b: 5, c: 9}, (value, key, obj) => obj.b + value + key);\n  // {'8a': 3, '10b': 5, '14c': 9}\n```\n\n----------------------------------------\n\nTITLE: Installing just-memoize-last npm Module Using Shell Commands\nDESCRIPTION: This snippet provides shell commands to install the just-memoize-last package via npm and yarn. It assumes a Node.js environment with package managers installed, enabling users to easily add the memoization utility as a dependency for their projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-memoize-last/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-memoize-last\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-memoize-last\n```\n\n----------------------------------------\n\nTITLE: Installing just-random with npm (Shell)\nDESCRIPTION: Provides the command to install the 'just-random' package using the npm package manager. This adds the module as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-random/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install just-random\n```\n\n----------------------------------------\n\nTITLE: Installing just-values with npm\nDESCRIPTION: Installs the 'just-values' package using npm. This package returns the values of an object as an array in JavaScript. This command installs the library.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-values\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects with just-filter-object in JavaScript\nDESCRIPTION: Demonstrates how to filter an object by providing a predicate function that receives both key and value. Returns a new object with only the key-value pairs where the predicate returns truthy. Requires 'just-filter-object' package. Input is an object and a predicate callback, output is a filtered object.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nimport filter from 'just-filter';\n\n// returns a new object containing those original properties for which the predicate returns truthy\nfilter({a: 3, b: 5, c: 9}, (key, value) => value < 6); // {a: 3, b: 5}\nfilter({a1: 3, b1: 5, a2: 9}, (key, value) => key[0] == 'a'); // {a1: 3, a2: 9}\nfilter({a: 3, b: 5, c: null}, (key, value) => value); // {a: 3, b: 5}\n```\n\n----------------------------------------\n\nTITLE: Flattening Nested Arrays with just-flatten-it in JavaScript\nDESCRIPTION: Example shows flattening of deeply nested arrays to a single depth or single level based on optional depth argument. Requires just-flatten-it package. Input is a nested array and optional depth; output is flattened array accordingly.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nimport flatten from 'just-flatten-it';\n\nflatten([[1, [2, 3]], [[4, 5], 6, 7, [8, 9]]]);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nflatten([[1, [2, 3]], [[4, 5], 6, 7, [8, 9]]], 1);\n// [1, [2, 3], [[4, 5], 6, 7, [8, 9]]]\n```\n\n----------------------------------------\n\nTITLE: Installing just-flush via npm (Shell)\nDESCRIPTION: Installs the just-flush package from npm using the npm CLI. This step is required to use just-flush in your JavaScript projects. No additional dependencies are needed beyond a working Node.js and npm environment.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-flush/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flush\n```\n\n----------------------------------------\n\nTITLE: Installing just-debounce-it with npm\nDESCRIPTION: Command to install the `just-debounce-it` package using the Node Package Manager (npm). This adds the library as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-debounce/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-debounce-it\n```\n\n----------------------------------------\n\nTITLE: Mapping Nested Object Values with just-deep-map-values in JavaScript\nDESCRIPTION: Demonstrates usage of the just-deep-map-values module by importing its default export and applying a square function to all numeric values at every nesting level within an object. The snippet shows how to transform deeply nested values safely and returns a new object preserving the original structure but with mapped values.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-deep-map-values/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport deepMapValues from 'just-deep-map-values';\n\nconst squareFn = (number) => number * number;\ndeepMapValues({ a: 1, b: { c: 2, d: { e: 3 } } }, squareFn); // => { a: 1, b: { c: 4, d: { e: 9 } } }\n```\n\n----------------------------------------\n\nTITLE: Splitting Arrays into Groups Using just-split in JavaScript\nDESCRIPTION: Demonstrates the usage of the just-split JavaScript module to split arrays into groups of n items. The snippet imports the split function, then calls it with various arrays and group sizes (including numeric strings), returning nested arrays where each subarray has the specified size, except possibly the last one. It showcases handling of empty arrays, numeric and string size arguments, and works with arrays containing numbers or strings.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-split/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport split from 'just-split';\n\nsplit([]); // []\nsplit([1, 2, 3, 4, 5]); // [[1, 2, 3, 4, 5]]\nsplit([1, 2, 3, 4, 5, 6, 7, 8, 9], 3); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsplit([1, 2, 3, 4, 5, 6, 7, 8, 9], '3'); // [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nsplit(['a', 'b', 'c', 'd', 'e'], 2); // [['a', 'b'], ['c', 'd'], ['e']]\nsplit([1, 2, 3, 4, 5, 6, 7, 8], 3); // [[1, 2, 3], [4, 5, 6], [7, 8]]\n```\n\n----------------------------------------\n\nTITLE: Implementing Throttled Functions with just-throttle in JavaScript\nDESCRIPTION: Demonstrates usage of 'just-throttle' to create functions invoked at most once per specified time interval. Supports options for leading and trailing invocation. Also includes features like cancellation and immediate flush of throttled calls.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_191\n\nLANGUAGE: javascript\nCODE:\n```\nimport throttle from 'just-throttle';\n\n// no matter how many times the function is called, only invoke once within the given interval\n// options: \n// `leading`: invoke  before interval\n// `trailing`: invoke afer interval\n\nconst fn1 = throttle(() => console.log('hello'), 500, {leading: true});\nsetInterval(fn1, 400);\n// logs 'hello' immediately and then every 500ms\n\nconst fn2 = throttle(() => console.log('hello'), 500, {trailing: true});\nsetInterval(fn2, 400);\n// logs 'hello' after 500ms and then every 500ms\n\nconst fn3 = throttle(() => console.log('hello'), 500, {leading: true, trailing: true});\n// forces trailing to false\n\nconst fn4 = throttle(() => console.log('hello'), 500, { leading: false });\nfn4();\nfn4();\nfn4();\nfn4.cancel();\n// function cancelled before 'hello' is logged\n\nconst fn5 = throttle(() => console.log(\"Hello\"), 500);\nfn5();\nfn5();\nfn5();\nfn5.flush();\n// immediately invoke the throttled function\n```\n\n----------------------------------------\n\nTITLE: Installing just-memoize via yarn\nDESCRIPTION: This snippet provides the command to install the just-memoize library using yarn, an alternative package manager. It facilitates adding the library to a project with yarn, enabling its utilities for memoization.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-memoize/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-memoize\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff-apply using npm\nDESCRIPTION: This snippet demonstrates how to install the 'just-diff-apply' package using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-diff-apply\n```\n\n----------------------------------------\n\nTITLE: Installing just-zip-it with yarn\nDESCRIPTION: Installs the just-zip-it package using yarn. Yarn is an alternative package manager for Node.js that can provide faster and more reliable installations.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-zip/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-zip-it\n```\n\n----------------------------------------\n\nTITLE: Installing Package with npm - shell\nDESCRIPTION: Installs the `just-clone` package using the npm package manager. This is a standard method to add the module as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-clone/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-clone\n```\n\n----------------------------------------\n\nTITLE: Debouncing Functions with just-debounce-it in Javascript\nDESCRIPTION: Demonstrates importing and using the `debounce` function from `just-debounce-it`. Shows basic debouncing (executing only after a pause in calls), debouncing with immediate first call (`callFirst=true`), cancelling a pending debounced function call (`cancel`), and immediately invoking a pending debounced function (`flush`). The `debounce` function takes the target function, delay in milliseconds, and an optional boolean `callFirst` parameter.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-debounce/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport debounce from \"just-debounce-it\";\n\nconst fn1 = debounce(() => console.log(\"Hello\"), 500);\nfn1();\nfn1();\nfn1();\n// 500ms later logs 'hello' once\n\nconst fn2 = debounce(() => console.log(\"Hello\"), 500, true);\nfn2(); // logs hello immediately\nfn2();\nfn2();\n// 500ms later logs 'hello' once\n\nconst fn3 = debounce(() => console.log(\"Hello\"), 500);\nfn3();\nfn3();\nfn3();\nfn3.cancel();\n// function cancelled before 'hello' is logged\n\nconst fn4 = debounce(() => console.log(\"Hello\"), 500);\nfn4();\nfn4();\nfn4();\nfn4.flush();\n// immediately invoke the debounced function\n```\n\n----------------------------------------\n\nTITLE: Checking Emptiness of Different Values with just-is-empty - JavaScript\nDESCRIPTION: Provides usage examples for the just-is-empty utility, demonstrating its behavior across various data types including objects, arrays, sets, maps, strings, numbers, booleans, symbols, regular expressions, wrapper objects, null, and undefined. The function returns true if the tested value has no enumerable properties, elements, or contents, and false otherwise. Requires that just-is-empty has been installed in the environment; input values can be primitives or objects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-empty/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport isEmpty from 'just-is-empty';\n isEmpty({a: 3, b: 5}) // false\n isEmpty([1, 2]) // false\n isEmpty(new Set([1, 2, 2])) // false\n isEmpty((new Map()).set('a', 2)) // false\n isEmpty({}) // true\n isEmpty([]) // true\n isEmpty(new Set()) // true\n isEmpty(new Map()) // true\n isEmpty('abc') // false\n isEmpty('') // true\n isEmpty(0) // true\n isEmpty(1) // true\n isEmpty(true) // true\n isEmpty(Symbol('abc')); // true\n isEmpty(//); // true\n isEmpty(new String('abc')); // false\n isEmpty(new String('')); // true\n isEmpty(new Boolean(true)); // true\n isEmpty(null) // true\n isEmpty(undefined) // true\n```\n\n----------------------------------------\n\nTITLE: Intersecting Arrays Using just-intersect - JavaScript\nDESCRIPTION: This JavaScript example shows how to import the just-intersect module and use its default function to compute the intersection between two arrays. Each call to intersect returns a new array containing elements that exist in both input arrays. If elements are repeated in both arrays, the output includes those elements only as many times as they appear in both arrays (i.e., no duplicates beyond shared multiplicity). Dependencies: just-intersect package must be installed. Inputs: two arrays. Outputs: an array with their intersection. The arrays can contain primitives; the function does not handle deep equality for objects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-intersect/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersect from 'just-intersect';\n\nintersect([1, 2, 5, 6], [2, 3, 5, 6]); // [2, 5, 6]\nintersect([1, 2, 2, 4, 5], [3, 2, 2, 5, 7]); // [2, 5]  \n```\n\n----------------------------------------\n\nTITLE: Computing Cartesian Product of Arrays with just-cartesian-product in JavaScript\nDESCRIPTION: Shows how to compute the Cartesian product of an array of arrays, returning all possible combinations. Throws error if called without arguments. Requires just-cartesian-product package. Input is array of arrays; output is array of arrays representing product.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nimport cartesianProduct from 'just-cartesian-product';\n\ncartesianProduct([[1, 2], ['a', 'b']]); // [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\ncartesianProduct([[1, 2], ['a', 'b', 'c']]); // [[1, 'a'], [1, 'b'], [1, 'c'], [2, 'a'], [2, 'b'], [2, 'c']]\ncartesianProduct([]); // []\ncartesianProduct(); // throws\n```\n\n----------------------------------------\n\nTITLE: Using the prune function in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the usage of the `prune` function, which truncates a string to a specified length, preserving whole words and allowing for a custom suffix.  It takes the input string, the desired maximum length, and an optional suffix string as parameters. The examples illustrate different scenarios and parameter combinations to show the function's behavior.  It aims to return a string with the specified truncation.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-prune/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n  prune('when shall we three meet again', 7); // 'when...'\n  prune('when shall we three meet again', 7, ' (more)'; // 'when (more)'\n  prune('when shall we', 15,); // 'when shall we'\n  prune('when shall we', 15, ' (etc)'); // 'when shall we'\n  prune('when shall we', 7, ' (more)'); // ' (more)'\n```\n\n----------------------------------------\n\nTITLE: Using just-sort-by with different sorting scenarios in JavaScript\nDESCRIPTION: Examples demonstrating how to use the just-sort-by utility for sorting arrays by numeric values, object properties using accessor functions, and string property names.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-sort-by/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport sortBy from 'just-sort-by';\n\nsortBy([10, 1, 5, 20, 15, 35, 30, 6, 8]); // [1, 5, 6, 8, 10, 15, 20, 30, 35]\n\nsortBy([\n  {user: 'fabio', details: {city: \"Milan\", age: 34}},\n  {user: 'max', details: {city: \"Munich\", age: 29}},\n  {user: 'zacarias', details: {city: \"Sao Paulo\", age: 44}},\n  {user: 'robert', details: {city: \"Manchester\", age: 28}},\n  {user: 'klaus', details: {city: \"Zurich\", age: 38}},\n], function(o) {\n  return o.details.age;\n});\n\n/*\n[\n  {user: 'robert', age: 28},\n  {user: 'max', age: 29},\n  {user: 'fabio', age: 34},\n  {user: 'klaus', age: 38},\n  {user: 'zacarias', age: 44},\n]\n*/\n\nsortBy([\n  {user: 'fabio', age: 34},\n  {user: 'max', age: 29},\n  {user: 'zacarias', age: 44},\n  {user: 'robert', age: 28},\n  {user: 'klaus', age: 38},\n], 'user');\n/*\n[\n  {user: 'fabio', age: 34},\n  {user: 'klaus', age: 38},\n  {user: 'max', age: 29},\n  {user: 'robert', age: 28},\n  {user: 'zacarias', age: 44},\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Removing Elements with just-remove (JavaScript)\nDESCRIPTION: Illustrates removal of specified elements from an array using 'just-remove'. Imports the 'remove' function; first array contains the initial values, second array lists values to remove. Returns a new array with specified elements removed.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_117\n\nLANGUAGE: js\nCODE:\n```\nimport remove from 'just-remove';\n\nremove([1, 2, 3, 4, 5, 6], [1, 3, 6]); // [2, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Installing just-demethodize using yarn\nDESCRIPTION: This snippet shows how to install the just-demethodize package using yarn. It requires yarn to be installed on the system. The command `yarn add just-demethodize` downloads and installs the package and its dependencies in the current directory.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-demethodize/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-demethodize\n```\n\n----------------------------------------\n\nTITLE: Sorting Array of Objects by Nested Property with just-order-by\nDESCRIPTION: This example demonstrates how to sort an array of objects based on a nested property (details.age) using the orderBy function.  A function is provided to access the nested property. The function returns a new sorted array of objects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-order-by/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\norderBy(\n  [\n    { user: 'fabio', details: { city: 'Milan', age: 34 } },\n    { user: 'max', details: { city: 'Munich', age: 29 } },\n    { user: 'zacarias', details: { city: 'Sao Paulo', age: 44 } },\n    { user: 'robert', details: { city: 'Manchester', age: 28 } },\n    { user: 'max', details: { city: 'Zurich', age: 38 } },\n  ],\n  [\n    {\n      property(v) {\n        return v.details.age;\n      },\n    },\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Using just-left-pad Function in JavaScript\nDESCRIPTION: Demonstrates the `leftPad` function from 'just-left-pad'. It adds characters (defaulting to space) to the left of a string until it reaches a specified total length `n`. Requires the string, target length, and optional padding character(s) as arguments. Throws errors for non-string inputs, non-positive or non-integer lengths.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_147\n\nLANGUAGE: javascript\nCODE:\n```\nimport leftPad from 'just-left-pad';\n\nleftPad('hello', 9); // '    hello'\nleftPad('hello', 3); // 'hello'\nleftPad('hello', 9, '.'); // '....hello'\nleftPad('hello', 9, '..'); // '....hello'\nleftPad('hello', 10, 'ab'); // 'bababhello'\nleftPad('hello', 9, '\\uD83D\\uDC04'); // '🐄🐄🐄🐄hello'\nleftPad('hello', 10, '\\uD83D\\uDC11\\uD83D\\uDC04'), // '🐄🐑🐄🐑🐄hello'\nleftPad('hello', 7, '🐄'), // '🐄🐄hello'\nleftPad(null, 7); // throws\nleftPad([], 4, '*'); // throws\nleftPad('hello', 4, true); // throws\nleftPad('hello', -4, true); // throws  \nleftPad('hello', 2.3, true); // throws    \n```\n\n----------------------------------------\n\nTITLE: Returning all but the first element of an array using just-tail in JavaScript\nDESCRIPTION: This snippet imports the tail function from the just-tail module and demonstrates its use on various input arrays. It returns a new array containing all elements except the first. The snippet covers diverse cases including arrays of numbers, objects, booleans, nested arrays, and empty or undefined inputs, showing that the function returns undefined for no input or null and returns an empty array for an empty array input.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-tail/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport tail from 'just-tail';\n\ntail([1, 2, 3, 4, 5]); // [2, 3, 4, 5]\ntail([{a: 1}, {b: 1}, {c: 1}]); // [{b: 1}, {c: 1}]\ntail([true, false, [true, false]]); // [false, [true, false]]\ntail([]); // []\ntail(); // undefined\ntail(null); // undefined\ntail(undefined); // undefined\n```\n\n----------------------------------------\n\nTITLE: Installing just-random with yarn (Shell)\nDESCRIPTION: Provides the command to install the 'just-random' package using the yarn package manager. This adds the module as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-random/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add just-random\n```\n\n----------------------------------------\n\nTITLE: Sorting Array of Numbers with just-order-by\nDESCRIPTION: This example demonstrates how to sort an array of numbers using the orderBy function. The function sorts the array in ascending order by default.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-order-by/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport orderBy from 'just-order-by';\n\norderBy([10, 1, 5, 20, 15, 35, 30, 6, 8]); // [1, 5, 6, 8, 10, 15, 20, 30, 35]\n```\n\n----------------------------------------\n\nTITLE: Plucking Properties from Collections with just-pluck-it - JavaScript\nDESCRIPTION: This JavaScript snippet imports the pluck function from just-pluck-it and demonstrates retrieving a single property from each object in both an array and an object collection. The first example returns an array of values, while the second returns an object mapping keys to plucked values. Input collections should be either arrays or plain objects containing objects as values. The function expects the property name as a string and returns the mapped values. The utility works with shallow collections and does not support deep property paths.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-pluck/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluck from 'just-pluck-it';\n\npluck([{a:1, b:2}, {a:4, b:3}, {a:2, b:5}], 'a'); // [1, 4, 2]\npluck({x: {a:1, b:2}, y: {a:4, b:3}, z: {a:2, b:5}}, 'a'); // {x: 1, y: 4, z: 2}\n```\n\n----------------------------------------\n\nTITLE: Using just-values Function (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use the `just-values` function after requiring it. It shows various examples, including getting values from objects, arrays, and strings, and notes that it throws exceptions for primitive types like numbers, booleans, undefined, and null. Dependencies: The `just-values` module.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-values/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst values = require('just-values');\n\nvalues({a: 4, c: 8}); // [4, 8]\nvalues({a: {aa: 2}, b: {bb: 4}}); // [{aa: 2}, {bb: 4}]\nvalues({}); // []\nvalues([1, 2, 3]); // [1, 2, 3]\nvalues(function(a, b) {return a + b;}); // []\nvalues(new String('hello')); // ['h', 'e', 'l', 'l', 'o']\nvalues(1); // throws exception\nvalues(true); // throws exception\nvalues(undefined); // throws exception\nvalues(null); // throws exception\n```\n\n----------------------------------------\n\nTITLE: Using camelCase function in JavaScript\nDESCRIPTION: Examples of how to use the camelCase function to convert various string formats to camel case. Demonstrates handling of spaces, underscores, hyphens, existing camel case, and special characters.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-camel-case/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport camelCase from 'just-camel-case';\n\ncamelCase('the quick brown fox'); // 'theQuickBrownFox'\ncamelCase('the_quick_brown_fox'); // 'theQuickBrownFox'\ncamelCase('the-quick-brown-fox'); // 'theQuickBrownFox'\ncamelCase('theQuickBrownFox'); // 'theQuickBrownFox'\ncamelCase('thequickbrownfox'); // 'thequickbrownfox'\ncamelCase('the - quick * brown# fox'); // 'theQuickBrownFox'\ncamelCase('behold theQuickBrownFox'); // 'beholdTheQuickBrownFox'\ncamelCase('Behold theQuickBrownFox'); // 'beholdTheQuickBrownFox'\n// all caps words are camel-cased\ncamelCase('The quick brown FOX'), 'theQuickBrownFox');\n// all caps substrings >= 4 chars are camel-cased\ncamelCase('theQUickBrownFox'); // 'theQUickBrownFox'\ncamelCase('theQUIckBrownFox'); // 'theQUIckBrownFox'\ncamelCase('theQUICKBrownFox'); // 'theQuickBrownFox'\n```\n\n----------------------------------------\n\nTITLE: Flipping Function Arguments with just-flip (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the just-flip module to flip the first two arguments of a function. It imports the `flip` function and provides examples of its usage with `console.log`, `just-map-object`, and `just-partial`.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-flip/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport flip from 'just-flip';\n\nflip(console.log)(1, 2, 3) // 2, 1, 3\n\nimport map from 'just-map-object';\nimport partial from 'just-partial';\n\nconst numbers = {x: 5, y: 10};\nconst flippedMap = flip(map);\nconst double = partial(flippedMap, (undefined, number) => number * 2);\ndouble(numbers) // {x: 10, y: 20];\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-circular using npm\nDESCRIPTION: Command to install the 'just-is-circular' package using the Node Package Manager (npm). This adds the module as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-circular/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-circular\n```\n\n----------------------------------------\n\nTITLE: Calculating Skewness with just-skewness (JavaScript)\nDESCRIPTION: This snippet calculates the skewness of a set of values using Pearson's second skewness coefficient via 'just-skewness'. Input must be numeric; single-element arrays, non-numeric data, or invalid arguments throw errors.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_137\n\nLANGUAGE: js\nCODE:\n```\nimport skewness from \"just-skewness\";\n\n// Using Pearson's second skewness coefficient\nskewness(3, 2, 1); // 0\nskewness([1, 2, 3, 2, 4, 1]); // 0.4276994613841504\nskewness(1, 2, 3, 4, 5, -6); // -0.762000762001143\nskewness([1, 2, 3, 4, 9]); // 0.7705935588815224\nskewness([4]); // throws\nskewness([\"3\", 2]); // throws\nskewness(NaN, NaN); // throws\nskewness(); // throws\n```\n\n----------------------------------------\n\nTITLE: Compacting Array using just-compact in JavaScript\nDESCRIPTION: This JavaScript code demonstrates removing falsey values from an array using the just-compact utility. It imports the 'just-compact' module and filters out falsey values such as null, undefined, NaN, and false from the given array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nimport compact from 'just-compact';\n\ncompact([1, null, 2, undefined, null, NaN, 3, 4, false, 5]); // [1, 2, 3, 4, 5]\ncompact([1, 2, [], 4, {}]); // [1, 2, [], 4, {}]\ncompact([]); // []\ncompact({}); // throws\n```\n\n----------------------------------------\n\nTITLE: Using just-kebab-case Function in JavaScript\nDESCRIPTION: Demonstrates the `kebabCase` function from 'just-kebab-case'. It converts strings separated by spaces, underscores, or camelCase into kebab-case format (words separated by hyphens).\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\n  import kebabCase from 'just-kebab-case';\n\n  kebabCase('the quick brown fox'); // 'the-quick-brown-fox'\n  kebabCase('the-quick-brown-fox'); // 'the-quick-brown-fox'\n  kebabCase('the_quick_brown_fox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrownFox'); // 'the-quick-brown-fox'\n  kebabCase('theQuickBrown Fox'); // 'the-quick-brown-fox'\n  kebabCase('thequickbrownfox'); // 'thequickbrownfox'\n  kebabCase('the - quick * brown# fox'); // 'the-quick-brown-fox'\n  kebabCase('theQUICKBrownFox'); // 'the-q-u-i-c-k-brown-fox'\n```\n\n----------------------------------------\n\nTITLE: Installing just-replace-all using npm (Shell)\nDESCRIPTION: Installs the 'just-replace-all' package using the Node Package Manager (npm). This command downloads and adds the module to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-replace-all/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install just-replace-all\n```\n\n----------------------------------------\n\nTITLE: Shuffling an array with just-shuffle\nDESCRIPTION: Demonstrates how to use the just-shuffle function to randomize the order of elements in an array. It covers basic usage, shuffling all elements to new positions, and handling edge cases like empty arrays, single-element arrays, and invalid inputs.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-shuffle/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport shuffle from 'just-shuffle';\n\nshuffle([1, 2, 3]); \n// array with original elements randomly sorted\nshuffle([1, 2, 3], {shuffleAll: true}); \n// array with original elements randomly sorted and all in new postions\nshuffle([]); // []\nshuffle([1]); // [1]\nshuffle(); // throws\nshuffle(undefined); // throws\nshuffle(null); // throws\nshuffle({}); // throws\n```\n\n----------------------------------------\n\nTITLE: Removing null/undefined Values with just-flush (JavaScript)\nDESCRIPTION: Demonstrates importing just-flush and using it to remove null and undefined values from arrays or objects. The function preserves other falsy values, such as 0, NaN, or false, and returns undefined if the input is not an array or object. Requires the just-flush package to be installed (see installation above). Supported inputs include arrays, objects, and invalid types (returns undefined for the latter).\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-flush/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport flush from 'just-flush';\n\nflush([1, undefined, 2, null, 3, NaN, 0]); // [1, 2, 3, NaN, 0]\nflush([true, null, false, true, [null], undefined]); // [true, false, true, [null]]\nflush({a: 2, b: null, c: 4, d: undefined}); // {a: 2, c: 4}\nflush('something'); // undefined\nflush(); // undefined\n```\n\n----------------------------------------\n\nTITLE: Using isCircular to Detect Circular References in JavaScript\nDESCRIPTION: Demonstrates importing the `isCircular` function from 'just-is-circular' and using it to check various JavaScript objects, arrays, and primitives for circular references. The function takes a single argument (the value to check) and returns true if a circular reference is detected, false otherwise. Note: Not supported in IE or Microsoft Edge.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-circular/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport isCircular from 'just-is-circular';\nconst a = {};\na.b = a;\nisCircular(a); // true\n\nconst a = {};\na.b = {\n  c: a\n};\nisCircular(a); // true\n\nconst a = {};\na.b = {\n  c: 4\n};\nisCircular(a); // false\n\nconst a = [];\na.push(a);\nisCircular(a); // true\n\nisCircular({}); // false\nisCircular('hi'); // false\nisCircular(undefined); // false\n```\n\n----------------------------------------\n\nTITLE: Using the just-modulo function (JavaScript)\nDESCRIPTION: Illustrates how to import and use the 'modulo' function from the 'just-modulo' package. It shows various examples demonstrating its behavior with different numeric and non-numeric inputs, highlighting edge cases and expected outputs.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-modulo/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport modulo from 'just-modulo';\n\nmodulo(7, 5); // 2\nmodulo(17, 23); // 17\nmodulo(16.2, 3.8); // 1\nmodulo(5.8, 3.4); //2.4\nmodulo(4, 0); // 4\nmodulo(-7, 5); // 3\nmodulo(-2, 15); // 13\nmodulo(-5.8, 3.4); // 1\nmodulo(12, -1); // NaN\nmodulo(-3, -8); // NaN\nmodulo(12, 'apple'); // NaN\nmodulo('bee', 9); // NaN\nmodulo(null, undefined); // NaN\n```\n\n----------------------------------------\n\nTITLE: Using flatten function in JavaScript\nDESCRIPTION: Examples demonstrating how to use the flatten function to flatten nested arrays. The first example shows complete flattening, while the second example uses the optional depth parameter to control flattening level.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-flatten/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport flatten from 'just-flatten-it';\n\nflatten([[1, [2, 3]], [[4, 5], 6, 7, [8, 9]]]);\n// [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nflatten([[1, [2, 3]], [[4, 5], 6, 7, [8, 9]]], 1);\n// [1, [2, 3], [[4, 5], 6, 7, [8, 9]]]\n```\n\n----------------------------------------\n\nTITLE: Removing array elements using just-remove\nDESCRIPTION: Demonstrates how to use the just-remove function to remove specific elements from an array. It imports the remove function and provides an example with input and output arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-remove/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport remove from 'just-remove';\n\nremove([1, 2, 3, 4, 5, 6], [1, 3, 6]); // [2, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Installing just-throttle using npm\nDESCRIPTION: Installs the `just-throttle` package using the Node Package Manager (npm). This command downloads and adds the module to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-throttle/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-throttle\n```\n\n----------------------------------------\n\nTITLE: Calculating Cartesian Product with just-cartesian-product (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `just-cartesian-product` function. It imports the function and shows how it takes an array of arrays as input and returns their Cartesian product. The examples illustrate different input scenarios and their corresponding outputs. It handles empty input gracefully, but explicitly states that calling with no arguments throws an error.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-cartesian-product/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport cartesianProduct from 'just-cartesian-product';\n\ncartesianProduct([[1, 2], ['a', 'b']]); // [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\ncartesianProduct([[1, 2], ['a', 'b', 'c']]); // [[1, 'a'], [1, 'b'], [1, 'c'], [2, 'a'], [2, 'b'], [2, 'c']]\ncartesianProduct([]); // []\ncartesianProduct(); // throws\n```\n\n----------------------------------------\n\nTITLE: Generating Permutations with just-permutations (JavaScript)\nDESCRIPTION: This snippet shows how to import and use the 'permutations' function from 'just-permutations' to return all possible orderings of array elements. Accepts a single array as input; throws if called with incorrect arguments. Output is an array of all permutations of the input array elements.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_113\n\nLANGUAGE: js\nCODE:\n```\nimport permutations from 'just-permutations';\n\npermutations([1, 2, 3]); // [[1, 2, 3], [2, 1, 3], [2, 3, 1], [1, 3, 2], [3, 1, 2], [3, 2, 1]]\npermutations([]); // []\npermutations(); // throws\n```\n\n----------------------------------------\n\nTITLE: Flipping Keys and Values of Objects with just-flip-object in JavaScript\nDESCRIPTION: Illustrates using just-flip-object to swap the keys and values of an object, returning a new object with flipped mapping. Requires just-flip-object package. Input is an object; output is an object with values converted to keys and keys converted to values (stringified if necessary).\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nimport flip from 'just-flip-object';\n\n// flip the key and value\nflip({a: 'x', b: 'y', c: 'z'}); // {x: 'a', y: 'b', z: 'c'}\nflip({a: 1, b: 2, c: 3}); // {'1': 'a', '2': 'b', '3': 'c'}\nflip({a: false, b: true}); // {false: 'a', true: 'b'}\n```\n\n----------------------------------------\n\nTITLE: Zipping Arrays with just-zip-it (JavaScript)\nDESCRIPTION: Demonstrates grouping array elements by index using 'just-zip-it'. Takes any number of arrays as input, zips corresponding elements, and returns an array of grouped arrays. Non-array or insufficient inputs yield an empty array; missing or undefined elements are padded as undefined.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_121\n\nLANGUAGE: js\nCODE:\n```\nimport zip from 'just-zip-it';\n\nzip([1, 2, 3]); // [[1], [2], [3]]\nzip([1, 2, 3], ['a', 'b', 'c']); // [[1, 'a'], [2, 'b'], [3, 'c']]\nzip([1, 2], ['a', 'b'], [true, false]); //[[1, 'a', true], [2, 'b', false]]\n\nzip(undefined, {}, false, 1, 'foo'); // []\nzip([1, 2], ['a', 'b'], undefined, {}, false, 1, 'foo'); // [[1, 'a'], [2, 'b']]\n\nzip([1, 2, 3], ['a', 'b'], [true]); // [[1, 'a', true], [2, 'b', undefined], [3, undefined, undefined]]\n```\n\n----------------------------------------\n\nTITLE: Type Inference in JavaScript with just-typeof\nDESCRIPTION: Shows usage of just-typeof to return detailed strings describing the data type of the input including arrays, functions, regexps, dates, null, undefined, and primitives. Requires just-typeof package. Input is any value, output is a string describing the type.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nimport typeOf from 'just-typeof';\n\ntypeOf({}); // 'object'\ntypeOf([]); // 'array'\ntypeOf(function() {}); // 'function'\ntypeOf(/a/); // 'regexp'\ntypeOf(new Date()); // 'date'\ntypeOf(null); // 'null'\ntypeOf(undefined); // 'undefined'\ntypeOf('a'); // 'string'\ntypeOf(1); // 'number'\ntypeOf(true); // 'boolean'\n```\n\n----------------------------------------\n\nTITLE: Using just-replace-all Function in JavaScript\nDESCRIPTION: Demonstrates the `replaceAll` function from 'just-replace-all'. It replaces all occurrences of a search string with a replacement string within a target string. Throws errors if required arguments are missing or null.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\n  import replaceAll from 'just-replace-all';\n\n/*\n  replaceAll('hello, world', 'l', 'q'); // 'heqqo, worqd'\n  replaceAll('hello, world', 'l', 'qq'); // 'heqqqqo, worqqd'\n  replaceAll('hello, world', 'll', 'q'); // 'heqo, world'\n  replaceAll('hello, world', '', 'q'); // 'hello, world'\n  replaceAll('hello, world', 'l', ''); // 'heo, word'\n  replaceAll('hello, world', null, 'q'); // 'hello, world'\n  replaceAll('hello, world', 'l'); // throw\n  replaceAll('hello, world'); // throw\n  replaceAll(); // throw\n  replaceAll(null, 'l', 'q'); // throw\n  replaceAll('hello, world', null, 'q'); // throw\n  replaceAll('hello, world', 'l', null); // throw\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating Random Integers with just-random-integer (JavaScript)\nDESCRIPTION: Demonstrates importing the just-random-integer module and calling its random function with different arguments to generate random integers in JavaScript. No dependencies needed beyond installing just-random-integer. The function can be called with zero, one, or two arguments to set the range, and returns an integer inclusively between the bounds. Inputs: optional lower and upper bounds (numbers, floats are rounded). Output: integer in the specified range. Edge cases such as negative numbers and floating point arguments are handled by rounding bounds.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-random-integer/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport random from 'just-random-integer';\n\nrandom();\n// Returns either 0 or 1\nrandom(5);\n// Returns a random integer between 0 and 5 (inclusively)\nrandom(3, 10);\n// Returns a random integer between 3 and 10 (inclusively)\nrandom(-5.8, 10.4);\n// Returns a random integer between -5 and 10 (inclusively)\n```\n\n----------------------------------------\n\nTITLE: Filtering Object Properties using just-filter\nDESCRIPTION: Import the `filter` function and use it to create a new object containing only properties for which the provided predicate function returns a truthy value. The predicate receives the key and value of each property.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-filter/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport filter from 'just-filter';\n\n// returns a new object containing those original properties for which the predicate returns truthy\nfilter({a: 3, b: 5, c: 9}, (key, value) => value < 6); // {a: 3, b: 5}\nfilter({a1: 3, b1: 5, a2: 9}, (key, value) => key[0] == 'a'); // {a1: 3, a2: 9}\nfilter({a: 3, b: 5, c: null}, (key, value) => value); // {a: 3, b: 5}\n```\n\n----------------------------------------\n\nTITLE: Computing Array Union with just-union (JavaScript)\nDESCRIPTION: Shows how to use 'just-union' to combine two arrays into one containing unique items. Accepts two arrays as parameters, with repeating elements included only once. Output is a single array with unioned elements.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_119\n\nLANGUAGE: js\nCODE:\n```\nimport union from 'just-union';\n\nunion([1, 2, 5, 6], [2, 3, 4, 6]); // [1, 2, 5, 6, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Installing just-flip-object via Yarn (Shell)\nDESCRIPTION: Installs the 'just-flip-object' package from npm using the Yarn package manager. Like npm, this approach requires no additional dependencies. The package aids in inverting object keys and values in JavaScript. Ensure Yarn is installed on the system before running the command.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-flip/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flip-object\n```\n\n----------------------------------------\n\nTITLE: Pruning Strings with just-prune (JavaScript)\nDESCRIPTION: Demonstrates using 'just-prune' to truncate strings without breaking words, appending a custom suffix if content is removed. Takes the string, a character limit, and an optional suffix. If the content fits within the limit, the original string is returned.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_143\n\nLANGUAGE: js\nCODE:\n```\n  prune('when shall we three meet again', 7); // 'when...'\n  prune('when shall we three meet again', 7, ' (more)'; // 'when (more)'\n  prune('when shall we', 15,); // 'when shall we'\n  prune('when shall we', 15, ' (etc)'); // 'when shall we'\n  prune('when shall we', 7, ' (more)'); // ' (more)'\n```\n\n----------------------------------------\n\nTITLE: Calculate Percentiles with just-percentile\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the just-percentile module to calculate percentile values from an array of numbers. It imports the percentile function and provides several examples with different input arrays and percentile values, demonstrating the linear interpolation method. The function throws an error if invalid inputs are provided.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-percentile/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport percentile from 'just-percentile';\n\npercentile([1, 2, 3], 0); // 1\npercentile([1, 2, 3], 0.5); // 2\npercentile([1, 2, 3], 1); // 3\n\n// See https://en.wikipedia.org/wiki/Percentile (linear interpolation method)\npercentile([15, 20, 35, 40, 50], 0.05); // 15\npercentile([15, 20, 35, 40, 50], 0.3); // 20\npercentile([15, 20, 35, 40, 50], 0.4); // 27.5\npercentile([15, 20, 35, 40, 50], 0.95); // 50\n\npercentile(1, 2, 3, 50); // throws\npercentile(['1', 2, 3], 50); // throws\npercentile([], 50); // throws\n```\n\n----------------------------------------\n\nTITLE: Calculating object differences with just-diff\nDESCRIPTION: This JavaScript snippet shows how to use the 'just-diff' module to calculate the differences between two objects. It imports the `diff` function and demonstrates its usage with example objects, showing how to identify changes like replacements, removals and additions. The output is an array of operations.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport {diff} from 'just-diff';\n\nconst obj1 = {a: 4, b: 5};\nconst obj2 = {a: 3, b: 5};\nconst obj3 = {a: 4, c: 5};\n\ndiff(obj1, obj2);\n[\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n]\n\ndiff(obj2, obj3);\n[\n  { \"op\": \"remove\", \"path\": ['b'] },\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 }\n  { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n]\n\n// using converter to generate jsPatch standard paths\nimport {diff, jsonPatchPathConverter} from 'just-diff'\ndiff(obj1, obj2, jsonPatchPathConverter);\n[\n  { \"op\": \"replace\", \"path\": '/a', \"value\": 3 }\n]\n\ndiff(obj2, obj3, jsonPatchPathConverter);\n[\n  { \"op\": \"remove\", \"path\": '/b' },\n  { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n  { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n]\n\n// arrays\nconst obj4 = {a: 4, b: [1, 2, 3]};\nconst obj5 = {a: 3, b: [1, 2, 4]};\nconst obj6 = {a: 3, b: [1, 2, 4, 5]};\n\ndiff(obj4, obj5);\n[\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n  { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n]\n\ndiff(obj5, obj6);\n[\n  { \"op\": \"add\", \"path\": ['b', 3], \"value\": 5 }\n]\n\n// nested paths\nconst obj7 = {a: 4, b: {c: 3}};\nconst obj8 = {a: 4, b: {c: 4}};\nconst obj9 = {a: 5, b: {d: 4}};\n\ndiff(obj7, obj8);\n[\n  { \"op\": \"replace\", \"path\": ['b', 'c'], \"value\": 4 }\n]\n\ndiff(obj8, obj9);\n[\n  { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n  { \"op\": \"remove\", \"path\": ['b', 'c']}\n  { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n]\n```\n\n----------------------------------------\n\nTITLE: Using rightPad function in JavaScript\nDESCRIPTION: Examples of using the rightPad function to add padding to strings. Shows various use cases including padding with spaces, custom characters, emoji, and error cases.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-right-pad/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport rightPad from 'just-right-pad';\n\nrightPad('hello', 9); // 'hello    '\nrightPad('hello', 3); // 'hello'\nrightPad('hello', 9, '.'); // 'hello....'\nrightPad('hello', 9, '..'); // 'hello....'\nrightPad('hello', 10, 'ab'); // 'helloababa'\nrightPad('hello', 9, '\\uD83D\\uDC04'); // 'hello🐄🐄🐄🐄'\nrightPad('hello', 10, '\\uD83D\\uDC11\\uD83D\\uDC04'), // 'hello🐑🐄🐑🐄🐑'\nrightPad('hello', 7, '🐄'), // 'hello🐄🐄'\nrightPad(null, 7); // throws\nrightPad([], 4, '*'); // throws\nrightPad('hello', 4, true); // throws\nrightPad('hello', -4, true); // throws  \nrightPad('hello', 2.3, true); // throws    \n```\n\n----------------------------------------\n\nTITLE: Using just-zip-it to group array elements\nDESCRIPTION: This code demonstrates how to use the just-zip-it library to group elements from multiple arrays. The `zip` function takes any number of arrays as arguments and returns a new array where each element is an array containing the corresponding elements from the input arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-zip/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport zip from 'just-zip-it';\n\nzip([1, 2, 3]); // [[1], [2], [3]]\nzip([1, 2, 3], ['a', 'b', 'c']); // [[1, 'a'], [2, 'b'], [3, 'c']]\nzip([1, 2], ['a', 'b'], [true, false]); //[[1, 'a', true], [2, 'b', false]]\n\nzip(undefined, {}, false, 1, 'foo'); // []\nzip([1, 2], ['a', 'b'], undefined, {}, false, 1, 'foo'); // [[1, 'a'], [2, 'b']]\n\nzip([1, 2, 3], ['a', 'b'], [true]); // [[1, 'a', true], [2, 'b', undefined], [3, undefined, undefined]]\n```\n\n----------------------------------------\n\nTITLE: Installing just-replace-all Package\nDESCRIPTION: Commands to install the 'just-replace-all' package using npm or yarn. This package provides a function to replace all occurrences of a substring.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_160\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-replace-all\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-replace-all\n```\n\n----------------------------------------\n\nTITLE: Installing just-variance Module with yarn - Shell\nDESCRIPTION: This snippet demonstrates installing the just-variance package into your project's dependencies using the yarn package manager. Ensure you have yarn and Node.js installed. This command will update your project's package.json and yarn.lock accordingly.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-variance/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-variance\n```\n\n----------------------------------------\n\nTITLE: Deep Mapping Values in Nested Objects with just-deep-map-values in JavaScript\nDESCRIPTION: Shows usage of just-deep-map-values to recursively map the values of an object at all depth levels, applying a provided function to each value. Requires just-deep-map-values package. Input is a nested object and a mapping function; output is a new deeply mapped object.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nimport deepMapValues from 'just-deep-map-values';\n\nconst squareFn = (number) => number * number;\ndeepMapValues({ a: 1, b: { c: 2, d: { e: 3 } } }, squareFn); // => { a: 1, b: { c: 4, d: { e: 9 } } }\n```\n\n----------------------------------------\n\nTITLE: Installing just-compare with npm\nDESCRIPTION: This command installs the 'just-compare' package using npm, a package manager for JavaScript.  It adds the 'just-compare' library to your project's dependencies, allowing you to use its comparison functionalities. This package can be used to compare two collections.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-compare\n```\n\n----------------------------------------\n\nTITLE: Using just-entries to get object entries\nDESCRIPTION: Demonstrates how to use the `just-entries` function to convert objects and arrays into an array of key-value pairs.  The function takes an object or an array as input and returns a new array where each element is a tuple representing a key-value pair from the input. This is particularly useful when you need to iterate over the properties of an object in a structured manner.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-entries/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport entries from 'just-entries';\n\n// Object:\nentries({c: 8, a: 4}); // [['c', 8], ['a', 4]]\nentries({b: {bb: 4}, a: {aa: 2}}); // [['b', {bb: 4}], ['a', {aa: 2}]]\nentries({}); // []\n\n// Array:\nentries([{c: 8}, {a: 4}]); // [[0, {c: 8}], [1, {a: 4}]]\nentries(['À', 'mauvais', 'ouvrier', 'point', 'de', 'bon', 'outil'])\n// [[0, 'À'], [1, 'mauvais'] ... [6, 'outil']]\nentries([]); // []\n```\n\n----------------------------------------\n\nTITLE: Using just-pipe to pass a value through a pipeline - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the `pipe` function from the just-pipe module in JavaScript. It requires the just-pipe module to be installed and imported. The `pipe` function takes an initial value followed by a series of functions.  Each function transforms the value, and the final result of the pipeline is returned. The examples illustrate the transformations applied to the initial values.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-pipe/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport pipe from 'just-pipe\n\npipe(3, a => a+1, b => b*2) // 8\npipe('John Smith', a => a.split(' '), b => b.reverse(), c => c[0]) // 'Smith'\n```\n\n----------------------------------------\n\nTITLE: Install just-order-by using yarn\nDESCRIPTION: This command installs the just-order-by package using yarn, a package manager.  It adds the package and its dependencies to your project and updates the yarn.lock file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-order-by/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-order-by\n```\n\n----------------------------------------\n\nTITLE: Install just-percentile with npm\nDESCRIPTION: This command installs the just-percentile package using npm. It adds the package and its dependencies to your project's node_modules directory and updates the package.json file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-percentile/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-percentile\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings with just-truncate (JavaScript)\nDESCRIPTION: Uses 'just-truncate' to shorten strings to a specified length, appending an optional custom suffix if truncated. The function takes the string, maximum length, and an optional suffix string. If input is shorter than the limit, no truncation occurs.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_141\n\nLANGUAGE: js\nCODE:\n```\n  truncate('when shall we three meet again', 9); // 'when s...'\n  truncate('when shall we three meet again', 10, ' (etc)'); // 'when (etc)'\n  truncate('when shall we', 15,); // 'when shall we'\n  truncate('when shall we', 15, '(more)'); // 'when shall we'\n  truncate('when shall we', 10, ' (etc etc etc)'); // ' (etc etc etc)'\n```\n\n----------------------------------------\n\nTITLE: Using partial function creation in JavaScript\nDESCRIPTION: Demonstrates how to use the partial function to create new functions with pre-applied arguments. Shows examples of creating a cubedRoot function and a getRoot function using Math.pow.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-partial/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport partial from 'just-partial-it';\n\nconst cubedRoot = partial(Math.pow, _, 1/3);\ncubedRoot(64); // 4\n\nconst getRoot = partial(Math.pow, 64);\ngetRoot(1/2); // 8\n```\n\n----------------------------------------\n\nTITLE: Installing just-flip-object via npm (Shell)\nDESCRIPTION: Installs the 'just-flip-object' package from npm using the npm command-line tool. No other dependencies are required. The package enables key-value flipping in JavaScript objects. The command requires Node.js and npm to be installed on the system.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-flip/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flip-object\n```\n\n----------------------------------------\n\nTITLE: Install just-compose using yarn\nDESCRIPTION: Installs the 'just-compose' package using the yarn package manager. This command fetches the module and its dependencies, integrating it into your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-compose/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-compose\n```\n\n----------------------------------------\n\nTITLE: Installing just-pipe Package Using Shell\nDESCRIPTION: Shell commands for installing 'just-pipe', which allows pipelining a value through multiple functions in a sequence.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_180\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pipe\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pipe\n```\n\n----------------------------------------\n\nTITLE: Using just-squash Function in JavaScript\nDESCRIPTION: Demonstrates the usage of the `squash` function from the 'just-squash' package. It removes all space characters from a given string, and optionally removes escape sequences if the second argument is true.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\n  squash('the cat sat on the mat'); // 'thecatsatonthemat'\n  squash(' the cat sat on the mat '); // 'thecatsatonthemat'\n  squash('\\tthe cat\\n sat \\fon \\vthe \\rmat '); // '\\tthecat\\nsat\\fon\\vthe\\rmat'\n  squash('\\tthe cat\\n sat \\fon \\vthe \\rmat ', true); // 'thecatsatonthemat'\n  squash(`the cat\nsat on the mat`, true); // thecatsatonthemat\n```\n\n----------------------------------------\n\nTITLE: Installing just-random-integer module using yarn (Shell)\nDESCRIPTION: Installs the just-random-integer package into your dependency list using yarn. Yarn must be installed on your system. This allows you to use the just-random-integer functionality in your JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-random-integer/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-random-integer\n```\n\n----------------------------------------\n\nTITLE: Checking for emptiness with just-is-empty in JavaScript\nDESCRIPTION: This code demonstrates how to use the 'just-is-empty' library to determine if an object, array, or other data structure is empty in JavaScript. It imports the 'isEmpty' function and provides examples of how it checks various data types, returning 'true' if the data is considered empty and 'false' otherwise.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nimport isEmpty from 'just-is-empty';\n isEmpty({a: 3, b: 5}) // false\n isEmpty([1, 2]) // false\n isEmpty(new Set([1, 2, 2])) // false\n isEmpty((new Map()).set('a', 2)) // false\n isEmpty({}) // true\n isEmpty([]) // true\n isEmpty(new Set()) // true\n isEmpty(new Map()) // true\n isEmpty('abc') // false\n isEmpty('') // true\n isEmpty(0) // true\n isEmpty(1) // true\n isEmpty(true) // true\n isEmpty(Symbol('abc')); // true\n isEmpty(//); // true\n isEmpty(new String('abc')); // false\n isEmpty(new String('')); // true\n isEmpty(new Boolean(true)); // true\n isEmpty(null) // true\n isEmpty(undefined) // true\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-prime via yarn in Shell\nDESCRIPTION: Shows the command to add just-is-prime to a project using yarn as the package manager. Useful for developers preferring yarn over npm.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-is-prime/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-prime\n```\n\n----------------------------------------\n\nTITLE: Mapping Objects with just-map-object in JavaScript\nDESCRIPTION: Shows how to map over object entries where the predicate function receives key and value, returning new values used in the mapped object. Note that this package is deprecated in favor of just-map-values. Inputs are an object and a callback; output is a new object with mapped values.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nimport map from 'just-map-object';\n\n// DEPRECATED: use just-map-values\nmap({a: 3, b: 5, c: 9}, (key, value) => value + 1); // {a: 4, b: 6, c: 10}\nmap({a: 3, b: 5, c: 9}, (key, value) => key); // {a: 'a', b: 'b', c: 'c'}\nmap({a: 3, b: 5, c: 9}, (key, value) => key + value); // {a: 'a3', b: 'b5', c: 'c9'}\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple JavaScript Functions Using just-compose\nDESCRIPTION: Shows how to use 'just-compose' to create a new function by composing two or more functions. The example composes Math.max, Math.sqrt, and Math.trunc, applying them from right to left to supplied arguments. The composed function returns the truncated square root of the greatest argument.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_171\n\nLANGUAGE: javascript\nCODE:\n```\nimport compose from 'just-compose';\n\nconst sqRootBiggest = compose(Math.max, Math.sqrt, Math.trunc);\nsqRootBiggest(10, 5); // 3\nsqRootBiggest(7, 0, 16); // 4\n```\n\n----------------------------------------\n\nTITLE: Installing just-skewness npm Module Using Shell\nDESCRIPTION: Installation commands for the just-skewness JavaScript module using npm and yarn package managers. These commands enable inclusion of the skewness utility in JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-skewness/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-skewness\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-skewness\n```\n\n----------------------------------------\n\nTITLE: Installing just-range with npm\nDESCRIPTION: This snippet demonstrates how to install the `just-range` module using the npm package manager. It is a prerequisite for using the module within a project. The command installs the module and its dependencies locally in the project's node_modules folder.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-range/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-range\n```\n\n----------------------------------------\n\nTITLE: Installing just-range (Shell)\nDESCRIPTION: Instructions to install the 'just-range' package via npm or yarn for use in JavaScript projects. No extra configuration needed.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_114\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-range\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-range\n```\n\n----------------------------------------\n\nTITLE: Using just-map-object to transform JavaScript objects\nDESCRIPTION: Examples of using the map function to transform objects by passing key and value to predicate functions. Note that using this module for value-only transformations is deprecated in favor of just-map-values.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport map from 'just-map-object';\n\n// DEPRECATED: use just-map-values\nmap({a: 3, b: 5, c: 9}, (key, value) => value + 1); // {a: 4, b: 6, c: 10}\nmap({a: 3, b: 5, c: 9}, (key, value) => key); // {a: 'a', b: 'b', c: 'c'}\nmap({a: 3, b: 5, c: 9}, (key, value) => key + value); // {a: 'a3', b: 'b5', c: 'c9'}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Strings with just-template in JavaScript\nDESCRIPTION: Demonstrates how to use the 'just-template' module in JavaScript. It imports the `template` function and uses it to interpolate a string template with values from a nested data object. Placeholders in the format `{{path.to.value}}` are replaced with the corresponding values from the provided data object.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-template/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport template from 'just-template';\n\nvar data = {\n  a: {\n    aa: {\n      aaa: 'apple',\n      bbb: 'pear'\n    },\n    bb: 'orange'\n  },\n  b: 'plum'\n};\ntemplate('2 {{a.aa.aaa}}s, a {{a.aa.bbb}}, 3 {{a.bb}}s and a {{b}}. Yes 1 {{a.aa.bbb}}.', data);\n// '2 apples, a pear, 3 oranges and a plum. Yes 1 pear.'\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-values with yarn\nDESCRIPTION: Install the just-map-values package using yarn, a zero-dependency utility for mapping object values.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map-values/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-map-values\n```\n\n----------------------------------------\n\nTITLE: Installing just-left-pad with npm\nDESCRIPTION: Installs the `just-left-pad` package from the npm registry using the Node Package Manager (npm). Requires Node.js and npm to be installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-left-pad/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-left-pad\n```\n\n----------------------------------------\n\nTITLE: Installing just-mean with npm\nDESCRIPTION: Command to install the just-mean package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-mean/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-mean\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to PascalCase using just-pascal-case in JavaScript\nDESCRIPTION: Demonstrates how to import and use the 'pascalCase' function from the 'just-pascal-case' library in JavaScript. It shows examples of converting strings with spaces, underscores, hyphens, existing camelCase, lowercase, and special characters into PascalCase. Note the handling of already capitalized segments like 'QUICK'.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-pascal-case/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport pascalCase from 'just-pascal-case';\n\npascalCase('the quick brown fox'); // 'TheQuickBrownFox'\npascalCase('the_quick_brown_fox'); // 'TheQuickBrownFox'\npascalCase('the-quick-brown-fox'); // 'TheQuickBrownFox'\npascalCase('theQuickBrownFox'); // 'TheQuickBrownFox'\npascalCase('thequickbrownfox'); // 'Thequickbrownfox'\npascalCase('the - quick * brown# fox'); // 'TheQuickBrownFox'\npascalCase('theQUICKBrownFox'); // 'TheQUICKBrownFox'\n```\n\n----------------------------------------\n\nTITLE: Deep cloning with just-clone in JavaScript\nDESCRIPTION: Demonstrates deep cloning of objects and arrays using the 'just-clone' library in JavaScript. The code imports the 'clone' function and showcases how it creates a new object with copied values, ensuring that changes to the original object do not affect the clone, and vice versa. Functions are not cloned.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Deep copies objects and arrays, doesn't clone functions\n\nimport clone from 'just-clone';\n\nvar arr = [1, 2, 3];\nvar subObj = { aa: 1 };\nvar obj = { a: 3, b: 5, c: arr, d: subObj };\nvar objClone = clone(obj);\narr.push(4);\nobjClone.d.bb = 2;\nobj; // {a: 3, b: 5, c: [1, 2, 3, 4], d: {aa: 1}}\nobjClone; // {a: 3, b: 5, c: [1, 2, 3], d: {aa: 1, bb: 2}}\n```\n\n----------------------------------------\n\nTITLE: Defining Single-invocation Functions Using just-once in JavaScript\nDESCRIPTION: Shows how to create a function wrapper with 'just-once' that ensures the wrapped function can only be called once, ignoring subsequent calls. Useful for initialization or event handling scenarios where repeated invocation is undesirable.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_193\n\nLANGUAGE: javascript\nCODE:\n```\nimport once from 'just-once';\n\nconst fn = once(() => console.log('hello'));\n\nfn();\n// logs 'hello'\nfn();\n// does nothing\n```\n\n----------------------------------------\n\nTITLE: Installing just-safe-get with npm\nDESCRIPTION: This snippet demonstrates the installation of the 'just-safe-get' package using npm.  It installs the package as a project dependency. No specific parameters are required. The output of the command is the successful installation of the package.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-safe-get/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-safe-get\n```\n\n----------------------------------------\n\nTITLE: Getting object values with just-values in JavaScript\nDESCRIPTION: Demonstrates how to use the 'just-values' library to retrieve the values of an object as an array in JavaScript. The code uses the 'require' function to import the 'just-values' package and shows examples of extracting values from different types of objects and arrays. It throws exceptions on primitives.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst values = require('just-values');\n\nvalues({a: 4, c: 8}); // [4, 8]\nvalues({a: {aa: 2}, b: {bb: 4}}); // [{aa: 2}, {bb: 4}]\nvalues({}); // []\nvalues([1, 2, 3]); // [1, 2, 3]\nvalues(function(a, b) {return a + b;}); // []\nvalues(new String('hello')); // ['h', 'e', 'l', 'l', 'o']\nvalues(1); // throws exception\nvalues(true); // throws exception\nvalues(undefined); // throws exception\nvalues(null); // throws exception\n```\n\n----------------------------------------\n\nTITLE: Installing just-debounce-it with yarn\nDESCRIPTION: Command to install the `just-debounce-it` package using the Yarn package manager. This adds the library as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-debounce/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-debounce-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff with npm\nDESCRIPTION: Installs the `just-diff` package using the Node Package Manager (npm). This command adds the package as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-diff/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-diff\n```\n\n----------------------------------------\n\nTITLE: Using just-modulo Function in JavaScript\nDESCRIPTION: Demonstrates the `modulo` function from 'just-modulo'. It computes the modulo (remainder) of a number `n` divided by a divisor `d`, handling positive and negative numbers correctly according to mathematical definitions. Returns `NaN` for non-numeric inputs or negative/zero divisors.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_167\n\nLANGUAGE: javascript\nCODE:\n```\nimport modulo from 'just-modulo';\n\nmodulo(7, 5); // 2\nmodulo(17, 23); // 17\nmodulo(16.2, 3.8); // 1\nmodulo(5.8, 3.4); //2.4\nmodulo(4, 0); // 4\nmodulo(-7, 5); // 3\nmodulo(-2, 15); // 13\nmodulo(-5.8, 3.4); // 1\nmodulo(12, -1); // NaN\nmodulo(-3, -8); // NaN\nmodulo(12, 'apple'); // NaN\nmodulo('bee', 9); // NaN\nmodulo(null, undefined); // NaN\n```\n\n----------------------------------------\n\nTITLE: Intersecting Arrays using just-intersect in JavaScript\nDESCRIPTION: This JavaScript code demonstrates finding the intersection of two arrays using the just-intersect utility.  It imports the 'just-intersect' module and uses it to find common elements between two input arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nimport intersect from 'just-intersect';\n\nintersect([1, 2, 5, 6], [2, 3, 5, 6]); // [2, 5, 6]\nintersect([1, 2, 2, 4, 5], [3, 2, 2, 5, 7]); // [2, 5]  \n```\n\n----------------------------------------\n\nTITLE: Installing just-template using Yarn\nDESCRIPTION: Installs the 'just-template' package using the Yarn package manager. This command downloads and adds the module to your project's dependencies, similar to npm install.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-template/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-template\n```\n\n----------------------------------------\n\nTITLE: Installing just-throttle using yarn\nDESCRIPTION: Installs the `just-throttle` package using the Yarn package manager. This command downloads and adds the module to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-throttle/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-throttle\n```\n\n----------------------------------------\n\nTITLE: Generating Number Ranges with just-range\nDESCRIPTION: This JavaScript code demonstrates how to use the `just-range` module to create number arrays. The `range()` function is imported and used with different parameters to produce various number sequences. Examples show generating ranges from 1 to 5, from 0 to 4, from 0 to -4 and also with a step value to increment between numbers.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-range/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport range from 'just-range';\n\nrange(1, 5); // [1, 2, 3, 4]\nrange(5); // [0, 1, 2, 3, 4]\nrange(-5); // [0, -1, -2, -3, -4]\nrange(0, 20, 5) // [0, 5, 10, 15]\n```\n\n----------------------------------------\n\nTITLE: Splitting array with just-split-at in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the `just-split-at` module to split an array into two sub-arrays. It imports the `splitAt` function and provides examples of splitting arrays at different indices, including positive, negative, and empty arrays. Null or undefined input array throws error.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-split-at/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport splitAt from 'just-split-at';\n\nsplitAt([1, 2, 3, 4, 5], 2); // [[1, 2], [3, 4, 5]]\nsplitAt([{a: 1}, {b: 1}, {c: 1}], -1); // [[{a: 1}, {b: 1}], [{c: 1}]]\nsplitAt([], 2); // [[], []]\nsplitAt(null, 1); // throws\nsplitAt(undefined, 1); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-extend with yarn\nDESCRIPTION: This command installs the 'just-extend' package using yarn. This provides object extension capabilities to your JavaScript project. This is an alternative installation method to using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-extend\n```\n\n----------------------------------------\n\nTITLE: Installing just-mean with yarn\nDESCRIPTION: Command to install the just-mean package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-mean/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-mean\n```\n\n----------------------------------------\n\nTITLE: Convert string to snake_case with just-snake-case in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the just-snake-case module to convert strings to snake case. The module provides a `snakeCase` function that accepts a string as input and returns the snake_case version. It supports various input formats and converts them to snake_case.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-snake-case/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport snakeCase from 'just-snake-case';\n\n  snakeCase('the quick brown fox'); // 'the_quick_brown_fox'\n  snakeCase('the-quick-brown-fox'); // 'the_quick_brown_fox'\n  snakeCase('the_quick_brown_fox'); // 'the_quick_brown_fox'\n  snakeCase('theQuickBrownFox'); // 'the_quick_brown_fox'\n  snakeCase('thequickbrownfox'); // 'thequickbrownfox'\n  snakeCase('the - quick * brown# fox'); // 'the_quick_brown_fox'\n  snakeCase('theQUICKBrownFox'); // 'the_q_u_i_c_k_brown_fox'\n```\n\n----------------------------------------\n\nTITLE: Omitting keys from objects with just-omit in JavaScript\nDESCRIPTION: Demonstrates how to create a new object by omitting specified keys from an existing object using the 'just-omit' library in JavaScript. The code imports the 'omit' function and provides examples showing how to exclude certain properties from an object, returning a new object without those properties.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nimport omit from 'just-omit';\n\nvar obj = {a: 3, b: 5, c: 9};\nomit(obj, ['a', 'c']); // {b: 5}\nomit(obj, 'a', 'c'); // {b: 5}\nomit(obj, ['a', 'b', 'd']); // {c: 9}\nomit(obj, ['a', 'a']); // {b: 5, c: 9}\n```\n\n----------------------------------------\n\nTITLE: Creating Partially Applied Functions with just-partial-it in JavaScript\nDESCRIPTION: Highlights usage of 'just-partial-it' to create partially applied functions, showing examples of computing cubic roots and extracting powers by binding some arguments ahead.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_179\n\nLANGUAGE: javascript\nCODE:\n```\nimport partial from 'just-partial-it';\n\nconst cubedRoot = partial(Math.pow, _, 1/3);\ncubedRoot(64); // 4\n\nconst getRoot = partial(Math.pow, 64);\ngetRoot(1/2); // 8\n```\n\n----------------------------------------\n\nTITLE: Installing just-partition\nDESCRIPTION: Instructions for installing the just-partition module using either npm or yarn package managers.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-partition/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-partition\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-partition\n```\n\n----------------------------------------\n\nTITLE: Installing just-truncate with yarn\nDESCRIPTION: This command installs the just-truncate package using yarn. It adds the package and its dependencies to your project's node_modules directory and updates the yarn.lock file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-truncate/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-truncate\n```\n\n----------------------------------------\n\nTITLE: Installing just-values with yarn (shell)\nDESCRIPTION: This command installs the `just-values` module using the yarn package manager. It adds the module as a project dependency, similar to `npm install`.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-values/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-values\n```\n\n----------------------------------------\n\nTITLE: Memoizing Functions with just-memoize in JavaScript\nDESCRIPTION: Shows how to use just-memoize to cache function results for repeated inputs, improving performance. Supports optional custom cache key functions for arguments. Demo includes numeric addition with cache hits to avoid recomputation.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_185\n\nLANGUAGE: javascript\nCODE:\n```\nimport memoize from 'just-memoize';\n\nconst sumByOne = memoize(function(value) {\n  return value + 1;\n});\n\nsumByOne(10); // Returns value returned by the function\nsumByOne(10); // Cache hit!\n\nsumByOne(20); // Returns value returned by the function\nsumByOne(20); // Cache hit!\n\n// Custom cache key (key defaults to JSON stringified arguments)\nvar sum = memoize(function(a, b) {\n  return a + b;\n}, function(a, b) {\n  return `${a}-${b}`;\n});\n\nsum(10, 10); // Returns value returned by the function\nsum(10, 20); // Returns value returned by the function\nsum(10, 20); // Cache hit!\n```\n\n----------------------------------------\n\nTITLE: Selecting a Random Element from Array with just-random in JavaScript\nDESCRIPTION: Shows how to use 'just-random' to pick a single random element from an array of values. Useful for random sampling from a known collection.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_189\n\nLANGUAGE: javascript\nCODE:\n```\nimport random from 'just-random';\n\nrandom([1, 2, 3]);\n// one of [1, 2, 3], at random\n```\n\n----------------------------------------\n\nTITLE: Flushing collections with just-flush in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the 'just-flush' library to remove null or undefined values from arrays and objects in JavaScript. It imports the 'flush' function and provides examples showing how it removes null and undefined elements from arrays and objects, returning a new array or object without those values. Non-object/array values passed to flush return undefined.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport flush from 'just-flush';\n\nflush([1, undefined, 2, null, 3, NaN, 0]); // [1, 2, 3, NaN, 0]\nflush([true, null, false, true, [null], undefined]); // [true, false, true, [null]]\nflush({a: 2, b: null, c: 4, d: undefined}); // {a: 2, c: 4}\nflush('something'); // undefined\nflush(); // undefined\n```\n\n----------------------------------------\n\nTITLE: Installing just-pick with npm\nDESCRIPTION: Command to install the just-pick package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-pick/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pick\n```\n\n----------------------------------------\n\nTITLE: Passing Values Through Function Pipelines with just-pipe in JavaScript\nDESCRIPTION: Shows how to use 'just-pipe' for sequentially applying multiple functions to an initial input value. Examples include arithmetic transformations and string manipulations via function chains.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_181\n\nLANGUAGE: javascript\nCODE:\n```\nimport pipe from 'just-pipe'\n\npipe(3, a => a+1, b => b*2) // 8\npipe('John Smith', a => a.split(' '), b => b.reverse(), c => c[0]) // 'Smith'\n```\n\n----------------------------------------\n\nTITLE: Compose Functions with just-compose in JavaScript\nDESCRIPTION: Demonstrates importing and using the 'compose' function to create a new function by combining existing ones. The example composes 'Math.max', 'Math.sqrt', and 'Math.trunc' to find the largest input number, take its square root, and then truncate the result.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-compose/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport compose from 'just-compose';\n\nconst sqRootBiggest = compose(Math.max, Math.sqrt, Math.trunc);\nsqRootBiggest(10, 5); // 3\nsqRootBiggest(7, 0, 16); // 4\n```\n\n----------------------------------------\n\nTITLE: Creating Curried Functions with just-curry-it in JavaScript\nDESCRIPTION: Illustrates how to transform standard functions into curried functions using 'just-curry-it'. It supports currying of fixed and variadic argument functions and allows partial application. Includes examples of summation functions and a converter demonstrating practical usage of currying with functional programming.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_173\n\nLANGUAGE: javascript\nCODE:\n```\nimport curry from 'just-curry-it';\n\nfunction add(a, b, c) {\n  return a + b + c;\n}\ncurry(add)(1)(2)(3); // 6\ncurry(add)(1)(2)(2); // 5\ncurry(add)(2)(4, 3); // 9\n\nfunction add(...args) {\n  return args.reduce((sum, n) => sum + n, 0)\n}\nvar curryAdd4 = curry(add, 4)\ncurryAdd4(1)(2, 3)(4); // 10\n\nfunction converter(ratio, input) {\n  return (input*ratio).toFixed(1);\n}\nconst curriedConverter = curry(converter)\nconst milesToKm = curriedConverter(1.62);\nmilesToKm(35); // 56.7\nmilesToKm(10); // 16.2\n```\n\n----------------------------------------\n\nTITLE: Calculating Percentile with just-percentile (JavaScript)\nDESCRIPTION: Using 'just-percentile', this code finds the value at a given percentile in an array of numbers using linear interpolation. Requires an array and percentile (0..1) argument. Throws on invalid inputs including empty arrays, non-numeric values, or out-of-range percentiles.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_131\n\nLANGUAGE: js\nCODE:\n```\nimport percentile from 'just-percentile';\n\npercentile([1, 2, 3], 0); // 1\npercentile([1, 2, 3], 0.5); // 2\npercentile([1, 2, 3], 1); // 3\n\n// See https://en.wikipedia.org/wiki/Percentile (linear interpolation method)\npercentile([15, 20, 35, 40, 50], 0.05); // 15\npercentile([15, 20, 35, 40, 50], 0.3); // 20\npercentile([15, 20, 35, 40, 50], 0.4); // 27.5\npercentile([15, 20, 35, 40, 50], 0.95); // 50\n\npercentile(1, 2, 3, 50); // throws\npercentile(['1', 2, 3], 50); // throws\npercentile([], 50); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-replace-all using yarn (Shell)\nDESCRIPTION: Installs the 'just-replace-all' package using the Yarn package manager. This command downloads and adds the module to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-replace-all/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add just-replace-all\n```\n\n----------------------------------------\n\nTITLE: Selecting Random Element with just-random (JavaScript)\nDESCRIPTION: Demonstrates how to import and use the 'random' function from the 'just-random' module. The function takes an array as input and returns a single element randomly chosen from that array.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-random/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport random from 'just-random';\n\nrandom([1, 2, 3]);\n// one of [1, 2, 3], at random\n```\n\n----------------------------------------\n\nTITLE: Installing just-compact via yarn\nDESCRIPTION: This snippet shows how to install the \"just-compact\" package using yarn. It requires yarn to be installed on the system. The command downloads and installs the package and its dependencies into the project's `node_modules` directory.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-compact/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-compact\n```\n\n----------------------------------------\n\nTITLE: Installing just-template (Shell)\nDESCRIPTION: Provides npm and yarn commands for installing 'just-template', enabling string interpolation in JavaScript.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_138\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-template\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-template\n```\n\n----------------------------------------\n\nTITLE: Getting Random Element using just-random in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to use the just-random utility to select a random element from an array.  It imports the 'just-random' module and uses it to retrieve a randomly chosen element from the input array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nimport random from 'just-random';\n\nrandom([1, 2, 3]);\n// one of [1, 2, 3], at random\n```\n\n----------------------------------------\n\nTITLE: Removing spaces and optional escape sequences from strings in JavaScript\nDESCRIPTION: Demonstrates the squash function which removes all spaces from a string by default. If the second boolean parameter is true, it also removes common escape sequences such as tabs, newlines, form feeds, vertical tabs, and carriage returns. The inputs include strings with various white space and escape characters, and the outputs are compacted strings without those characters.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-squash/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n  squash('the cat sat on the mat'); // 'thecatsatonthemat'\n  squash(' the cat sat on the mat '); // 'thecatsatonthemat'\n  squash('\\tthe cat\\n sat \\fon \\vthe \\rmat '); // '\\tthecat\\nsat\\fon\\vthe\\rmat'\n  squash('\\tthe cat\\n sat \\fon \\vthe \\rmat ', true); // 'thecatsatonthemat'\n  squash(`the cat\nsat on the mat`, true); // thecatsatonthemat\n```\n\n----------------------------------------\n\nTITLE: Installing just-flush with npm\nDESCRIPTION: This command installs the 'just-flush' package using npm, a package manager for JavaScript. The 'just-flush' package is used to remove null or undefined values from arrays and objects. This command adds the 'just-flush' as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flush\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element using just-last in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the just-last utility to retrieve the last element of an array. It imports the 'just-last' module and calls it with an array, returning the last element of the array, or undefined if the array is empty or not an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nimport last from 'just-last';\n\nlast([1, 2, 3, 4, 5]); // 5\nlast([{a: 1}, {b: 1}, {c: 1}]); // {c: 1}\nlast([true, false, [true, false]]); // [true, false]\nlast(); // undefined\nlast([]); // undefined\nlast(null); // undefined\nlast(undefined); // undefined\n```\n\n----------------------------------------\n\nTITLE: Using capitalize function in JavaScript\nDESCRIPTION: Example showing how to import and use the capitalize function with various string inputs. The function capitalizes the first character of a string while preserving the rest of the string.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-capitalize/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport capitalize from 'just-capitalize';\n\n/*\n  capitalize('capitals'); // 'Capitals'\n  capitalize('Capitals'); // 'Capitals'\n  capitalize('many words'); // 'Many words'\n  capitalize('!exclaim'); // '!exclaim'\n*/\n```\n\n----------------------------------------\n\nTITLE: Using just-once to create a single-execution function (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to use the 'just-once' library. It imports the 'once' function, creates a function 'fn' using 'once', and then calls 'fn' twice. The first call logs 'hello' to the console, but subsequent calls do nothing, demonstrating the single-execution nature of the function. Requires the 'just-once' library as a dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-once/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport once from 'just-once';\n\nconst fn = once(() => console.log('hello'));\n\nfn();\n// logs 'hello'\nfn();\n// does nothing\n```\n\n----------------------------------------\n\nTITLE: Installing just-right-pad with yarn\nDESCRIPTION: Command to install the just-right-pad package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-right-pad/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-right-pad\n```\n\n----------------------------------------\n\nTITLE: Installing just-median with Yarn\nDESCRIPTION: Instructions for installing the just-median package using the Yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-median/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add just-median\n```\n\n----------------------------------------\n\nTITLE: Installing just-last npm Package Using yarn\nDESCRIPTION: This shell snippet shows how to add the just-last library to a project using yarn. It presumes yarn is already installed and configured.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-last/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-last\n```\n\n----------------------------------------\n\nTITLE: Installing just-partition with npm\nDESCRIPTION: This command installs the just-partition package from npm. just-partition is an array utility to partition an array based on a predicate function.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_109\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-partition\n```\n\n----------------------------------------\n\nTITLE: Installing just-flush with yarn\nDESCRIPTION: This command installs the 'just-flush' package using yarn, another popular package manager for JavaScript. This allows removal of null or undefined values from arrays and objects. This is an alternative installation option to using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flush\n```\n\n----------------------------------------\n\nTITLE: Checking for circular references with just-is-circular in JavaScript\nDESCRIPTION: This code demonstrates how to use the 'just-is-circular' library to detect circular references in JavaScript objects. It imports the 'isCircular' function and provides examples of how it identifies circular references, where an object's property refers back to itself or a parent object in the hierarchy. Note: not supported in IE or Microsoft Edge.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nimport isCircular from 'just-is-circular';\nconst a = {};\na.b = a;\nisCircular(a); // true\n\nconst a = {};\na.b = {\n  c: a\n};\nisCircular(a); // true\n\nconst a = {};\na.b = {\n  c: 4\n};\nisCircular(a); // false\n\nconst a = [];\na.push(a);\nisCircular(a); // true\n\nisCircular({}); // false\nisCircular('hi'); // false\nisCircular(undefined); // false\n```\n\n----------------------------------------\n\nTITLE: Installing just-compare Module - Shell (Yarn)\nDESCRIPTION: Installs the just-compare library using the Yarn package manager. This provides an alternative installation method to npm for adding the module to your project dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-compare/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-compare\n```\n\n----------------------------------------\n\nTITLE: Installing just-kebab-case with npm\nDESCRIPTION: Command to install the just-kebab-case module using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-kebab-case/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-kebab-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-right-pad Package\nDESCRIPTION: Commands to install the 'just-right-pad' package using npm or yarn. This package provides a function to pad the end of a string.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_148\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-right-pad\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-right-pad\n```\n\n----------------------------------------\n\nTITLE: Memoizing Most Recent Function Call with just-memoize-last in JavaScript\nDESCRIPTION: Provides an example of caching only the latest function call using just-memoize-last. It uses a custom equality function for comparing arguments to determine cache hits. Demonstrates evaluating the max value of arrays with memoization to avoid recomputing for identical arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_187\n\nLANGUAGE: javascript\nCODE:\n```\nconst memoizeLast = require('just-memoize-last')\nconst compare = require('just-compare')\n\nconst maxValue = memoizeLast(function(arr) {\n  return Math.max(...arr)\n}, function(a, b) {\n  return compare(a, b)\n});\n\nmaxValue([1,2,3]) // 3\nmaxValue([1,2,3]) // cache hit!\nmaxValue([1,3,4]) // 4\nmaxValue([1,2,3]) // 3\n```\n\n----------------------------------------\n\nTITLE: Installing just-omit with yarn\nDESCRIPTION: This command installs the 'just-omit' package using yarn. 'just-omit' creates new objects with specific keys removed. This is an alternative installation using the yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-omit\n```\n\n----------------------------------------\n\nTITLE: Install just-entries with yarn\nDESCRIPTION: Installs the just-entries package using Yarn, another package manager for JavaScript. This command adds the just-entries library as a dependency to your project, allowing you to use its functions within your code. The library provides a utility for converting objects into arrays of key-value pairs.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-entries/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-entries\n```\n\n----------------------------------------\n\nTITLE: Installing Package with Yarn - shell\nDESCRIPTION: Installs the `just-clone` package using the Yarn package manager. This provides an alternative method to add the module as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-clone/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-clone\n```\n\n----------------------------------------\n\nTITLE: Installing just-prune with npm\nDESCRIPTION: This shell command installs the `just-prune` module using npm. The module is downloaded from the npm registry and added as a project dependency.  The module is part of the `just` library and is a zero-dependency npm module that focuses on string pruning.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-prune/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-prune\n```\n\n----------------------------------------\n\nTITLE: Installing just-truncate (Shell)\nDESCRIPTION: Shell instructions for installing 'just-truncate', useful for shortening strings with optional custom suffixes.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_140\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-truncate\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-truncate\n```\n\n----------------------------------------\n\nTITLE: Installing just-left-pad Package\nDESCRIPTION: Commands to install the 'just-left-pad' package using npm or yarn. This package provides a function to pad the beginning of a string.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_146\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-left-pad\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-left-pad\n```\n\n----------------------------------------\n\nTITLE: Installing just-modulo via npm (Shell)\nDESCRIPTION: Demonstrates how to add the 'just-modulo' package to a project's dependencies using the npm package manager. This command downloads the package and its dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-modulo/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-modulo\n```\n\n----------------------------------------\n\nTITLE: Installing just-debounce-it Package Using Shell\nDESCRIPTION: Installation commands to add the just-debounce-it package, which provides functionality to create debounced functions.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_182\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-debounce-it\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-debounce-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-insert with npm\nDESCRIPTION: This command installs the just-insert package from npm. just-insert is a utility for inserting sub-arrays into arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-insert\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff with Yarn\nDESCRIPTION: Installs the `just-diff` package using the Yarn package manager. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-diff/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-diff\n```\n\n----------------------------------------\n\nTITLE: Installing just-merge with yarn\nDESCRIPTION: Installs the 'just-merge' package using yarn, another popular JavaScript package manager. This allows for shallow merging of JavaScript objects.  This is an alternative to using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-merge\n```\n\n----------------------------------------\n\nTITLE: Installing just-flatten-it via Shell\nDESCRIPTION: Shell commands for installing just-flatten-it to flatten nested arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_71\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flatten-it\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flatten-it\n```\n\n----------------------------------------\n\nTITLE: Using just-pascal-case Function in JavaScript\nDESCRIPTION: Demonstrates the `pascalCase` function from 'just-pascal-case'. It converts strings separated by spaces, underscores, or hyphens into PascalCase format (like camelCase, but the first letter is also capitalized).\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_157\n\nLANGUAGE: javascript\nCODE:\n```\n  import pascalCase from 'just-pascal-case';\n\n  pascalCase('the quick brown fox'); // 'TheQuickBrownFox'\n  pascalCase('the_quick_brown_fox'); // 'TheQuickBrownFox'\n  pascalCase('the-quick-brown-fox'); // 'TheQuickBrownFox'\n  pascalCase('theQuickBrownFox'); // 'TheQuickBrownFox'\n  pascalCase('thequickbrownfox'); // 'Thequickbrownfox'\n  pascalCase('the - quick * brown# fox'); // 'TheQuickBrownFox'\n  pascalCase('theQUICKBrownFox'); // 'TheQUICKBrownFox'\n```\n\n----------------------------------------\n\nTITLE: Installing just-split-at with yarn\nDESCRIPTION: This command installs the just-split-at package using yarn. The just-split-at utility divides an array into two sub-arrays at a specific index.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_101\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-split-at\n```\n\n----------------------------------------\n\nTITLE: Partitioning Array using just-partition in JavaScript\nDESCRIPTION: This JavaScript code demonstrates partitioning an array into two arrays based on a predicate function using the just-partition utility. It imports the 'just-partition' module and uses it to split the input array into two arrays: one containing elements that satisfy the predicate, and the other containing the remaining elements.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nimport partition from 'just-partition';\n\npartition([1, 5, 2, 4, 3], n => n > 3); // [[5, 4],[1, 2, 3]]\npartition(['a', 2, 3, '3'], x => typeof x == 'string'); // [['a', '3'],[2, 3]]\npartition([1, 2, 3, 4], x => typeof x == 'number'); // [[1, 2, 3, 4],[]]\npartition([1, 2, 3, 4], x => typeof x == 'string'); // [[], [1, 2, 3, 4]]\npartition([], n => n > 3); // [[], []]\npartition({a: 1, b: 2}, n => n > 1); // throws\npartition(null, n => n > 1); // throws\npartition(undefined, n => n > 1); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-pascal-case Package\nDESCRIPTION: Commands to install the 'just-pascal-case' package using npm or yarn. This package provides a function to convert strings to PascalCase.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_156\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pascal-case\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pascal-case\n```\n\n----------------------------------------\n\nTITLE: Using just-is-prime Function in JavaScript\nDESCRIPTION: Demonstrates the `isPrime` function from 'just-is-prime'. It takes a number as input and returns `true` if the number is a prime number, and `false` otherwise. Throws errors for non-numeric or missing inputs.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_165\n\nLANGUAGE: javascript\nCODE:\n```\n  import isPrime from 'just-is-prime;\n\n/*\n  isPrime(1); // false\n  isPrime(2); // true\n  isPrime(17); // true\n  isPrime(10); // false\n  isPrime(); // throws\n  isPrime(null); // throws\n  isPrime(\"js\"); // throws\n  isPrime({}); // throws\n  isPrime(function() {}); // throws\n  isPrime([]); // throws\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing just-cartesian-product via Shell\nDESCRIPTION: Shell installation commands for just-cartesian-product that computes Cartesian products of arrays of arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_67\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-cartesian-product\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-cartesian-product\n```\n\n----------------------------------------\n\nTITLE: Using just-camel-case Function in JavaScript\nDESCRIPTION: Demonstrates the `camelCase` function from 'just-camel-case'. It converts strings separated by spaces, underscores, or hyphens into camelCase format. Handles existing camelCase, all caps words, and leading capitalization.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\n  import camelCase from 'just-camel-case';\n\n  camelCase('the quick brown fox'); // 'theQuickBrownFox'\n  camelCase('the_quick_brown_fox'); // 'theQuickBrownFox'\n  camelCase('the-quick-brown-fox'); // 'theQuickBrownFox'\n  camelCase('theQuickBrownFox'); // 'theQuickBrownFox'\n  camelCase('thequickbrownfox'); // 'thequickbrownfox'\n  camelCase('the - quick * brown# fox'); // 'theQuickBrownFox'\n  camelCase('behold theQuickBrownFox'); // 'beholdTheQuickBrownFox'\n  camelCase('Behold theQuickBrownFox'); // 'beholdTheQuickBrownFox'\n  // all caps words are camel-cased\n  camelCase('The quick brown FOX'), 'theQuickBrownFox');\n  // all caps substrings >= 4 chars are camel-cased\n  camelCase('theQUickBrownFox'); // 'theQUickBrownFox'\n  camelCase('theQUIckBrownFox'); // 'theQUIckBrownFox'\n  camelCase('theQUICKBrownFox'); // 'theQuickBrownFox'\n```\n\n----------------------------------------\n\nTITLE: Installing just-random-integer Package Using Shell\nDESCRIPTION: Commands to install the just-random-integer package via npm or yarn, allowing usage of its functionality for producing random integers within a given range.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_168\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-random-integer\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-random-integer\n```\n\n----------------------------------------\n\nTITLE: Installing just-split-at using yarn\nDESCRIPTION: This command installs the just-split-at package using yarn. It adds the package as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-split-at/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-split-at\n```\n\n----------------------------------------\n\nTITLE: Installing just-percentile (Shell)\nDESCRIPTION: Instructions for adding 'just-percentile' to a project, useful for finding percentile values in numeric datasets.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_130\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-percentile\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-percentile\n```\n\n----------------------------------------\n\nTITLE: Installing just-permutations via yarn (Shell)\nDESCRIPTION: Installs the 'just-permutations' package using the Yarn package manager. This command downloads the package and adds it to your project's node_modules directory and package.json dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-permutations/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-permutations\n```\n\n----------------------------------------\n\nTITLE: Installing just-remove (Shell)\nDESCRIPTION: Provides command-line instructions for installing 'just-remove' using npm or yarn. Necessary for enabling array removal operations in JavaScript.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_116\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-remove\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-remove\n```\n\n----------------------------------------\n\nTITLE: Installing just-intersect with yarn\nDESCRIPTION: This command installs the just-intersect package using yarn. just-intersect is used to get the common elements from two arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-intersect\n```\n\n----------------------------------------\n\nTITLE: Using just-snake-case Function in JavaScript\nDESCRIPTION: Demonstrates the `snakeCase` function from 'just-snake-case'. It converts strings separated by spaces, hyphens, or camelCase into snake_case format (words separated by underscores).\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_155\n\nLANGUAGE: javascript\nCODE:\n```\n  import snakeCase from 'just-snake-case';\n\n  snakeCase('the quick brown fox'); // 'the_quick_brown_fox'\n  snakeCase('the-quick-brown-fox'); // 'the_quick_brown_fox'\n  snakeCase('the_quick_brown_fox'); // 'the_quick_brown_fox'\n  snakeCase('theQuickBrownFox'); // 'the_quick_brown_fox'\n  snakeCase('thequickbrownfox'); // 'thequickbrownfox'\n  snakeCase('the - quick * brown# fox'); // 'the_quick_brown_fox'\n  snakeCase('theQUICKBrownFox'); // 'the_q_u_i_c_k_brown_fox'\n```\n\n----------------------------------------\n\nTITLE: Installing just-entries with yarn\nDESCRIPTION: Installs the 'just-entries' package using yarn.  This allows the retrieval of object entries as an array of [key, value] pairs in JavaScript. This is an alternative to using npm for the installation.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-entries\n```\n\n----------------------------------------\n\nTITLE: Installing just-partition with yarn\nDESCRIPTION: This command installs the just-partition package using yarn. With just-partition you can split an array into two, based on the outcome of a predicate.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_110\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-partition\n```\n\n----------------------------------------\n\nTITLE: Installing just-compact with yarn\nDESCRIPTION: This command installs the just-compact package using yarn. The just-compact utility removes falsey values from an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-compact\n```\n\n----------------------------------------\n\nTITLE: Installing just-variance (Shell)\nDESCRIPTION: Install instructions for the 'just-variance' package, facilitating variance computations in JavaScript numerical arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_132\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-variance\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-variance\n```\n\n----------------------------------------\n\nTITLE: Installing just-truncate with npm\nDESCRIPTION: This command installs the just-truncate package using npm. It adds the package and its dependencies to your project's node_modules directory and updates the package.json file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-truncate/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-truncate\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-prime Package\nDESCRIPTION: Commands to install the 'just-is-prime' package using npm or yarn. This package provides a function to check if a number is prime.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_164\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-prime\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-prime\n```\n\n----------------------------------------\n\nTITLE: Shuffling Array using just-shuffle in JavaScript\nDESCRIPTION: This JavaScript code demonstrates shuffling the elements of an array using the just-shuffle utility. It imports the 'just-shuffle' module and utilizes it to randomly reorder the elements within the input array, creating a new shuffled array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nimport shuffle from 'just-shuffle';\n\nshuffle([1, 2, 3]); \n// array with original elements randomly sorted\nshuffle([1, 2, 3], {shuffleAll: true}); \n// array with original elements randomly sorted and all in new postions\nshuffle([]); // []\nshuffle([1]); // [1]\nshuffle(); // throws\nshuffle(undefined); // throws\nshuffle(null); // throws\nshuffle({}); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-random with npm\nDESCRIPTION: This command installs the just-random package from npm. This package is useful for randomly selecting elements from an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-random\n```\n\n----------------------------------------\n\nTITLE: Install just-order-by using npm\nDESCRIPTION: This command installs the just-order-by package from npm, making it available for use in your JavaScript project.  It adds the package and its dependencies to your project's node_modules directory and updates your package.json file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-order-by/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-order-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-insert with yarn\nDESCRIPTION: This command installs the just-insert package using yarn. just-insert allows inserting elements or sub-arrays into an existing array at a specific index.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_77\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-insert\n```\n\n----------------------------------------\n\nTITLE: Getting Tail of Array using just-tail in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to get the tail of an array (all elements except the first) using the just-tail utility. It imports the 'just-tail' module and calls it with an array, returning a new array containing all but the first element.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nimport tail from 'just-tail';\n\ntail([1, 2, 3, 4, 5]); // [2, 3, 4, 5]\ntail([{a: 1}, {b: 1}, {c: 1}]); // [{b: 1}, {c: 1}]\ntail([true, false, [true, false]]); // [false, [true, false]]\ntail([]); // []\ntail(); // undefined\ntail(null); // undefined\ntail(undefined); // undefined\n```\n\n----------------------------------------\n\nTITLE: Installing just-shuffle with npm\nDESCRIPTION: This command installs the just-shuffle package from npm.  just-shuffle provides functionality to randomize the order of elements within an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-shuffle\n```\n\n----------------------------------------\n\nTITLE: Installing just-shuffle with yarn\nDESCRIPTION: This command installs the just-shuffle package using yarn. This package shuffles the elements in an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-shuffle\n```\n\n----------------------------------------\n\nTITLE: Installing just-clamp Package\nDESCRIPTION: Commands to install the 'just-clamp' package using npm or yarn. This package provides a function to restrict a number within a specified range.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_162\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-clamp\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-clamp\n```\n\n----------------------------------------\n\nTITLE: Installing just-typeof with Yarn\nDESCRIPTION: Instructions for installing the just-typeof npm module using Yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-typeof/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-typeof\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-empty with npm - Shell\nDESCRIPTION: Demonstrates how to install the just-is-empty npm module using the npm package manager. This step is a prerequisite for utilizing the just-is-empty utility in JavaScript projects. Requires npm to be installed and configured in the environment.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-empty/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-empty\n```\n\n----------------------------------------\n\nTITLE: Sorting Array using just-sort-by in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to sort an array in ascending order using the just-sort-by utility. It imports the 'just-sort-by' module and utilizes it to sort the input array, either numerically or based on a specified property or custom comparison function.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\nimport sortBy from 'just-sort-by';\n\nsortBy([10, 1, 5, 20, 15, 35, 30, 6, 8]); // [1, 5, 6, 8, 10, 15, 20, 30, 35]\n\nsortBy([\n  {user: 'fabio', details: {city: \"Milan\", age: 34}},\n  {user: 'max', details: {city: \"Munich\", age: 29}},\n  {user: 'zacarias', details: {city: \"Sao Paulo\", age: 44}},\n  {user: 'robert', details: {city: \"Manchester\", age: 28}},\n  {user: 'klaus', details: {city: \"Zurich\", age: 38}},\n], function(o) {\n  return o.details.age;\n});\n\n/*\n[\n  {user: 'robert', age: 28},\n  {user: 'max', age: 29},\n  {user: 'fabio', age: 34},\n  {user: 'klaus', age: 38},\n  {user: 'zacarias', age: 44},\n]\n*/\n\nsortBy([\n  {user: 'fabio', age: 34},\n  {user: 'max', age: 29},\n  {user: 'zacarias', age: 44},\n  {user: 'robert', age: 28},\n  {user: 'klaus', age: 38},\n], 'user');\n/*\n[\n  {user: 'fabio', age: 34},\n  {user: 'klaus', age: 38},\n  {user: 'max', age: 29},\n  {user: 'robert', age: 28},\n  {user: 'zacarias', age: 44},\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing just-sort-by with npm\nDESCRIPTION: This command installs the just-sort-by package from npm. The just-sort-by package sorts array elements by a given property in ascending order.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_106\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-sort-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-primitive with yarn\nDESCRIPTION: Installs the 'just-is-primitive' package using yarn, an alternative JavaScript package manager.  This enables checking if a value is primitive.  This is an alternative to using npm for installation.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-primitive\n```\n\n----------------------------------------\n\nTITLE: Installing just-index with yarn\nDESCRIPTION: This command installs the just-index package using yarn.  just-index creates an index object from an array, keyed by a specified value.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_74\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-index\n```\n\n----------------------------------------\n\nTITLE: Installing just-split with npm\nDESCRIPTION: This command installs the just-split package from npm. The just-split package is a utility for splitting an array into chunks of a specified size.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_97\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-split\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Last Element of an Array Using just-last in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates importing the last function from the just-last package and using it to obtain the last element from various array inputs. It handles arrays of numbers, objects, booleans, nested arrays, and gracefully returns undefined for empty arrays, undefined, null, or no arguments without throwing errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-last/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport last from 'just-last';\n\nlast([1, 2, 3, 4, 5]); // 5\nlast([{a: 1}, {b: 1}, {c: 1}]); // {c: 1}\nlast([true, false, [true, false]]); // [true, false]\nlast(); // undefined\nlast([]); // undefined\nlast(null); // undefined\nlast(undefined); // undefined\n```\n\n----------------------------------------\n\nTITLE: Installing just-remove with npm\nDESCRIPTION: Install the just-remove package using npm. This allows you to use the remove function in your JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-remove/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-remove\n```\n\n----------------------------------------\n\nTITLE: Installing just-clamp via yarn\nDESCRIPTION: This code snippet demonstrates how to install the `just-clamp` library using yarn. It provides the command to add the library as a project dependency. It installs the library and its dependencies. It does not have any other dependencies beyond the yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-clamp/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-clamp\n```\n\n----------------------------------------\n\nTITLE: Installing just-zip-it (Shell)\nDESCRIPTION: Commands to install the 'just-zip-it' module, enabling array zipping functionality in JavaScript applications.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_120\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-zip-it\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-zip-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-union (Shell)\nDESCRIPTION: Shell commands to install the 'just-union' package for aggregating unique elements from two arrays. Run in the project directory.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_118\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-union\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-union\n```\n\n----------------------------------------\n\nTITLE: Installing just-split-at with npm\nDESCRIPTION: This command installs the just-split-at package from npm.  just-split-at is an array utility to split an array at a defined position.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_100\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-split-at\n```\n\n----------------------------------------\n\nTITLE: Returning the Mode(s) from Arrays Using just-mode (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates the usage of just-mode to calculate the most frequently occurring number(s) in an array or argument list. It shows expected input types (numbers), handling of ties (returns an array of modes), and error cases (invalid inputs such as mixed types or null throw). The only dependency is the just-mode module, and the function may throw errors for non-numeric or invalid inputs.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-mode/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mode from 'just-mode';\n\nmode([1, 2, 3, 2]); // 2\nmode(4, 4, 1, 4); // 4\nmode(100, 100, 101, 101); // [100, 101]\nmode(4, 3, 2, 1); // [1, 2, 3, 4]\nmode(['1', 2, 2, 1, 2]); // throws\nmode(null); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-kebab-case Package\nDESCRIPTION: Commands to install the 'just-kebab-case' package using npm or yarn. This package provides a function to convert strings to kebab-case.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_152\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-kebab-case\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-kebab-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-has via Shell\nDESCRIPTION: Shell commands to install just-has, which tests for existence of nested properties without throwing errors.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_65\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-has\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-has\n```\n\n----------------------------------------\n\nTITLE: Calculating Mode with just-mode (JavaScript)\nDESCRIPTION: Demonstrates mode calculation with 'just-mode', which finds the most frequently occurring value(s) in an array or argument list. When multiple values have the same count, returns an array. Non-numeric inputs or no arguments results in errors.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_129\n\nLANGUAGE: js\nCODE:\n```\nimport mode from 'just-mode';\n\nmode([1, 2, 3, 2]); // 2\nmode(4, 4, 1, 4); // 4\nmode(100, 100, 101, 101); // [100, 101]\nmode(4, 3, 2, 1); // [1, 2, 3, 4]\nmode(['1', 2, 2, 1, 2]); // throws\nmode(null); // throws\n```\n\n----------------------------------------\n\nTITLE: Importing Lodash Submodules in JavaScript\nDESCRIPTION: Demonstrates two ways to import individual Lodash functions as submodules to reduce bundle size: directly from the Lodash monolith or from Lodash Modularized packages. The code snippets cover importing the camelCase function using both methods, showing how to include only what is needed for performance optimization.\nSOURCE: https://github.com/angus-c/just/blob/master/TRADEOFFS.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport camelCase from 'lodash/camelcase'\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport camelCase from 'lodash.camelcase'\n```\n\n----------------------------------------\n\nTITLE: Installing just-flip Package Using Shell\nDESCRIPTION: Shell commands for installing the just-flip package, used to flip the first two arguments of a function.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_176\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flip\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flip\n```\n\n----------------------------------------\n\nTITLE: Installing just-skewness (Shell)\nDESCRIPTION: Instructions for installing 'just-skewness', used for statistical skewness calculations in JavaScript.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_136\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-skewness\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-skewness\n```\n\n----------------------------------------\n\nTITLE: Installing just-memoize-last Package Using Shell\nDESCRIPTION: Commands to add just-memoize-last, a package offering memoization with caching only the most recent function call and using a custom comparator.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_186\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-memoize-last\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-memoize-last\n```\n\n----------------------------------------\n\nTITLE: Installing just-compare Module - Shell (npm)\nDESCRIPTION: Installs the just-compare library using the npm package manager. This command adds the module to your project's dependencies, making the 'compare' function available for use.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-compare/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-compare\n```\n\n----------------------------------------\n\nTITLE: Installing just-prune with yarn\nDESCRIPTION: This shell command installs the `just-prune` module using yarn. It performs the same function as the npm installation, but uses yarn as the package manager. The module's functionality includes string pruning with whole word considerations and the ability to customize the suffix.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-prune/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-prune\n```\n\n----------------------------------------\n\nTITLE: Installing just-omit with npm\nDESCRIPTION: This command installs the 'just-omit' package using npm. The 'just-omit' package enables creation of a new object with specified keys omitted from an existing object.  This command adds the 'just-omit' to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-omit\n```\n\n----------------------------------------\n\nTITLE: Installing just-index with npm\nDESCRIPTION: This command installs the just-index package from npm. just-index is a utility for creating an index object from an array based on a specified key.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_73\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-index\n```\n\n----------------------------------------\n\nTITLE: Installing just-safe-set via npm\nDESCRIPTION: Command to install the `just-safe-set` package using the Node Package Manager (npm). Requires Node.js and npm to be installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-safe-set/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-safe-set\n```\n\n----------------------------------------\n\nTITLE: Installing just-mean (Shell)\nDESCRIPTION: Instructions for adding 'just-mean' to a project via npm or yarn for basic statistical mean calculations on arrays or arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_124\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-mean\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-mean\n```\n\n----------------------------------------\n\nTITLE: Installing just-union with yarn\nDESCRIPTION: Command to install the just-union package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-union/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-union\n```\n\n----------------------------------------\n\nTITLE: Calculating Standard Deviation with just-standard-deviation (JavaScript)\nDESCRIPTION: Utilizes 'just-standard-deviation' to calculate the standard deviation of numeric arrays or argument lists. It returns the population standard deviation. Throws on insufficient input, non-numeric values, or no arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_135\n\nLANGUAGE: js\nCODE:\n```\nimport standardDeviation from \"just-standard-deviation\";\n\nstandardDeviation([1, 2, 3, 2, 4, 1]); // 1.16904519\nstandardDeviation(3, 2, 1); // 1\nstandardDeviation([100, 100, 100.1, 100]); // 0.05\nstandardDeviation(1, 2, 3, 4, 5, -6); // 3.9370039\nstandardDeviation([4]); // throws\nstandardDeviation([\"3\", 2]); // throws\nstandardDeviation(NaN, NaN); // throws\nstandardDeviation(); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-deep-map-values with npm Shell Commands\nDESCRIPTION: Provides commands for installing the just-deep-map-values package using npm and yarn package managers. These commands should be run in a shell environment to add the package as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-deep-map-values/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-deep-map-values\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-deep-map-values\n```\n\n----------------------------------------\n\nTITLE: Flipping First Two Arguments of Functions with just-flip in JavaScript\nDESCRIPTION: This snippet shows usage of 'just-flip' to reverse the first two arguments of a function. Examples include flipping console.log arguments and adapting a map function over an object to double its values by reversing anticipated argument order.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\nimport flip from 'just-flip';\n\nflip(console.log)(1, 2, 3) // 2, 1, 3\n\nimport map from 'just-map-object';\nimport partial from 'just-partial';\n\nconst numbers = {x: 5, y: 10};\nconst flippedMap = flip(map);\nconst double = partial(flippedMap, (undefined, number) => number * 2);\ndouble(numbers) // {x: 10, y: 20}\n```\n\n----------------------------------------\n\nTITLE: Using just-right-pad Function in JavaScript\nDESCRIPTION: Demonstrates the `rightPad` function from 'just-right-pad'. It adds characters (defaulting to space) to the right of a string until it reaches a specified total length `n`. Requires the string, target length, and optional padding character(s) as arguments. Throws errors for non-string inputs, non-positive or non-integer lengths.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_149\n\nLANGUAGE: javascript\nCODE:\n```\nimport rightPad from 'just-right-pad';\n\nrightPad('hello', 9); // 'hello    '\nrightPad('hello', 3); // 'hello'\nrightPad('hello', 9, '.'); // 'hello....'\nrightPad('hello', 9, '..'); // 'hello....'\nrightPad('hello', 10, 'ab'); // 'helloababa'\nrightPad('hello', 9, '\\uD83D\\uDC04'); // 'hello🐄🐄🐄🐄'\nrightPad('hello', 10, '\\uD83D\\uDC11\\uD83D\\uDC04'), // 'hello🐑🐄🐑🐄🐑'\nrightPad('hello', 7, '🐄'), // 'hello🐄🐄'\nrightPad(null, 7); // throws\nrightPad([], 4, '*'); // throws\nrightPad('hello', 4, true); // throws\nrightPad('hello', -4, true); // throws  \nrightPad('hello', 2.3, true); // throws    \n```\n\n----------------------------------------\n\nTITLE: Inserting into Array using just-insert in JavaScript\nDESCRIPTION: This JavaScript code demonstrates inserting elements into an array using the just-insert utility. It imports the 'just-insert' module and uses it to insert elements or sub-arrays into a given array at a specified index, returning a new array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nimport insert from 'just-insert';\n\ninsert([1, 2, 5, 6], ['a', 'c', 'e'], 2); // [1, 2, 'a', 'c', 'e', 5, 6]\ninsert([1, 2, 5, 6], 'a', 2); // [1, 2, 'a', 5, 6]\ninsert([1, 2, 5, 6], ['a', 'c', 'e'], 0); // ['a', 'c', 'e', 1, 2, 5, 6]\ninsert([1, 2, 5, 6], ['a', 'c', 'e']); // ['a', 'c', 'e', 1, 2, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-object using npm or yarn\nDESCRIPTION: Commands to install the just-map-object utility module using either npm or yarn package managers.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-map-object\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-map-object\n```\n\n----------------------------------------\n\nTITLE: Mapping Object Keys with just-map-keys in JavaScript\nDESCRIPTION: Example usage of just-map-keys where the predicate function returns new keys derived from values, keys, or object context. The function returns an object with keys possibly modified but values preserved. Requires just-map-keys package. Inputs are object and predicate; output is a remapped object with updated keys.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport map from 'just-map-keys';\n\n// predicate updates keys, receives (value, key, object)\nmap({a: 'cow', b: 'sheep', c: 'pig'}, (value) => value);\n  // {cow: 'cow', sheep: 'sheep', pig: 'pig'}\nmap([4, 5, 6], (value, key) => key + 1); // {1: 4, 2: 5, 3: 6}\nmap({a: 3, b: 5, c: 9}, (value, key) => key + value); // {a3: 3, b5: 5, c9: 9}\nmap({a: 3, b: 5, c: 9}, (value, key, obj) => obj.b + value + key);\n  // {'8a': 3, '10b': 5, '14c': 9}\n```\n\n----------------------------------------\n\nTITLE: Installing just-cartesian-product with yarn (Shell)\nDESCRIPTION: This snippet provides instructions on how to install the `just-cartesian-product` package using yarn. It demonstrates the command needed to install the library, making it available for use in a project. It specifies the use of the package manager yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-cartesian-product/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-cartesian-product\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-primitive via npm in Shell\nDESCRIPTION: This snippet demonstrates how to install the 'just-is-primitive' package using npm. The command installs the package as a project dependency, allowing the user to import and use the module in their JavaScript code. No parameters or specific inputs are required for this installation step.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-primitive/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-primitive\n```\n\n----------------------------------------\n\nTITLE: Applying object differences with just-diff-apply\nDESCRIPTION: This JavaScript snippet shows how to use the 'just-diff-apply' module to apply a diff object to an object. It imports the `diffApply` function and demonstrates its usage, showing how to apply modifications like replacements, removals, additions and moves.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n  import {diffApply} from 'just-diff-apply';\n\n  const obj1 = {a: 3, b: 5};\n  diffApply(obj1,\n    [\n      { \"op\": \"remove\", \"path\": ['b'] },\n      { \"op\": \"replace\", \"path\": ['a'], \"value\": 4 },\n      { \"op\": \"add\", \"path\": ['c'], \"value\": 5 }\n    ]\n  );\n  obj1; // {a: 4, c: 5}\n\n  const obj2 = {a: 3, b: 5};\n  diffApply(obj2,\n    [\n      { \"op\": \"move\", \"from\": ['a'], \"path\": ['c']},\n    ]\n  );\n  obj2; // {b: 5, c: 3}\n\n  // using converter to apply jsPatch standard paths\n  // see http://jsonpatch.com\n  import {diffApply, jsonPatchPathConverter} from 'just-diff-apply'\n  const obj3 = {a: 3, b: 5};\n  diffApply(obj3, [\n    { \"op\": \"remove\", \"path\": '/b' },\n    { \"op\": \"replace\", \"path\": '/a', \"value\": 4 }\n    { \"op\": \"add\", \"path\": '/c', \"value\": 5 }\n  ], jsonPatchPathConverter);\n  obj3; // {a: 4, c: 5}\n\n  // arrays (array key can be string or numeric)\n  const obj4 = {a: 4, b: [1, 2, 3]};\n  diffApply(obj4, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 3 }\n    { \"op\": \"replace\", \"path\": ['b', 2], \"value\": 4 }\n    { \"op\": \"add\", \"path\": ['b', 3], \"value\": 9 }\n  ]);\n  obj4; // {a: 3, b: [1, 2, 4, 9]}\n\n  // nested paths\n  const obj5 = {a: 4, b: {c: 3}};\n  diffApply(obj5, [\n    { \"op\": \"replace\", \"path\": ['a'], \"value\": 5 }\n    { \"op\": \"remove\", \"path\": ['b', 'c']}\n    { \"op\": \"add\", \"path\": ['b', 'd'], \"value\": 4 }\n  ]);\n  obj5; // {a: 5, b: {d: 4}}\n```\n\n----------------------------------------\n\nTITLE: Installing just-shuffle with yarn\nDESCRIPTION: Installs the just-shuffle package using yarn, another package manager for JavaScript.  This command adds just-shuffle to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-shuffle/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add just-shuffle\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-prime via npm in Shell\nDESCRIPTION: Demonstrates how to install the just-is-prime package using npm. This snippet is intended for users to add the library as a dependency for their projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-is-prime/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-prime\n```\n\n----------------------------------------\n\nTITLE: Installing just-pipe using npm - Shell\nDESCRIPTION: This snippet shows how to install the just-pipe module using npm. It requires npm to be installed on your system. The command `npm install just-pipe` downloads and installs the module along with its dependencies if any, into the node_modules directory. The output will include details on the installation process and any related warnings or errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-pipe/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pipe\n```\n\n----------------------------------------\n\nTITLE: Install just-percentile with yarn\nDESCRIPTION: This command installs the just-percentile package using Yarn. It adds the package and its dependencies to your project's node_modules directory and updates the yarn.lock file.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-percentile/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-percentile\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-empty with yarn - Shell\nDESCRIPTION: Shows the command to install the just-is-empty module using the yarn package manager. Yarn must be available in the development environment, and this step is required before importing just-is-empty in a project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-empty/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-empty\n```\n\n----------------------------------------\n\nTITLE: Using the mean function in JavaScript\nDESCRIPTION: Examples of how to use the mean function to calculate the average of values. The function accepts an array of numbers or multiple number arguments and throws an error for non-numeric values or when called with no arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-mean/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport mean from 'just-mean';\n\nmean([1, 2, 3, 2, 4, 1]); // 2.1666666667\nmean(3, 2, 1); // 2\nmean([4]); // 4\nmean(['3', 2]); // throws\nmean(); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-filter-object Module\nDESCRIPTION: Use npm or yarn to add the `just-filter-object` module to your project dependencies. This module has zero external dependencies itself.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-filter/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install just-filter-object\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn add just-filter-object\n```\n\n----------------------------------------\n\nTITLE: Installing just-pluck-it using yarn - Shell\nDESCRIPTION: This shell command installs the just-pluck-it npm package using yarn. It requires yarn to be installed in your development environment. The command adds just-pluck-it to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-pluck/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pluck-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-pluck-it with npm\nDESCRIPTION: Installs the 'just-pluck-it' package using npm, allowing you to extract specific properties from collections (arrays and objects) in your JavaScript project. This command adds the 'just-pluck-it' library as a project dependency.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pluck-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-in-range with Yarn\nDESCRIPTION: Installs the `just-in-range` module using the Yarn package manager. This command adds the module as a project dependency, similar to npm, for use in your projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-in-range/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-in-range\n```\n\n----------------------------------------\n\nTITLE: Using the leftPad function in JavaScript\nDESCRIPTION: Demonstrates importing and using the `leftPad` function from the `just-left-pad` module. It shows examples of padding a string to a target length with spaces or specified characters (including repeating patterns and Unicode). It also highlights edge cases like invalid inputs (null, array), non-string padding characters, negative lengths, or non-integer lengths, which result in thrown errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-left-pad/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport leftPad from 'just-left-pad';\n\nleftPad('hello', 9); // '    hello'\nleftPad('hello', 3); // 'hello'\nleftPad('hello', 9, '.'); // '....hello'\nleftPad('hello', 9, '..'); // '....hello'\nleftPad('hello', 10, 'ab'); // 'bababhello'\nleftPad('hello', 9, '\\uD83D\\uDC04'); // '🐄🐄🐄🐄hello'\nleftPad('hello', 10, '\\uD83D\\uDC11\\uD83D\\uDC04'), // '🐄🐑🐄🐑🐄hello'\nleftPad('hello', 7, '🐄'), // '🐄🐄hello'\nleftPad(null, 7); // throws\nleftPad([], 4, '*'); // throws\nleftPad('hello', 4, true); // throws\nleftPad('hello', -4, true); // throws  \nleftPad('hello', 2.3, true); // throws    \n```\n\n----------------------------------------\n\nTITLE: Checking for primitive type with just-is-primitive in JavaScript\nDESCRIPTION: Demonstrates how to use the 'just-is-primitive' library to determine if a value is a primitive type in JavaScript. The code imports the 'isPrimitive' function and provides examples of how it checks various data types, returning 'true' if the value is a primitive (string, number, boolean, null, undefined, symbol) and 'false' otherwise.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport isPrimitive from 'just-is-primitive';\nisPrimitive('hi') // true\nisPrimitive(3) // true\nisPrimitive(true) // true\nisPrimitive(false) // true\nisPrimitive(null) // true\nisPrimitive(undefined) // true\nisPrimitive(Symbol()) // true\nisPrimitive({}) // false\nisPrimitive([]) // false\nisPrimitive(function() {}) // false\nisPrimitive(new Date()) // false\nisPrimitive(/a/) // false\n```\n\n----------------------------------------\n\nTITLE: Installing just-last npm Package Using npm\nDESCRIPTION: This shell snippet demonstrates how to install the just-last package via npm, enabling the use of the last utility function in JavaScript projects. It requires Node.js and npm to be installed beforehand.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-last/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-last\n```\n\n----------------------------------------\n\nTITLE: Installing just-split Using npm in Shell\nDESCRIPTION: Provides the shell command to install the just-split package via npm. This allows users to add the zero-dependency just-split utility to their Node.js projects for array splitting functionality.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-split/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-split\n```\n\n----------------------------------------\n\nTITLE: Installing just-clamp via npm\nDESCRIPTION: This code snippet demonstrates how to install the `just-clamp` library using npm. It provides the necessary command to add the library as a project dependency.  It does not have any other dependencies beyond the npm package manager.  Running this command downloads and installs the library.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-clamp/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-clamp\n```\n\n----------------------------------------\n\nTITLE: Installing just-template using npm\nDESCRIPTION: Installs the 'just-template' package using the Node Package Manager (npm). This command downloads and adds the module to your project's dependencies specified in package.json.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-template/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-template\n```\n\n----------------------------------------\n\nTITLE: Installing just-safe-get with Yarn\nDESCRIPTION: This snippet demonstrates the installation of the 'just-safe-get' package using Yarn. It installs the package as a project dependency. No specific parameters are required. The output of the command is the successful installation of the package.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-safe-get/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-safe-get\n```\n\n----------------------------------------\n\nTITLE: Installing just-filter-object via Shell\nDESCRIPTION: Shell commands to install the just-filter-object package using either npm or yarn package managers, enabling the use of the object filtering utilities in JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-filter-object\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-filter-object\n```\n\n----------------------------------------\n\nTITLE: Using just-typeof\nDESCRIPTION: Examples of how to use the just-typeof module in JavaScript to determine the type of different values. It uses the 'just-typeof' library. It takes a single argument of any type and returns a string representation of its type.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-typeof/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport typeOf from 'just-typeof';\n\ntypeOf({}); // 'object'\ntypeOf([]); // 'array'\ntypeOf(function() {}); // 'function'\ntypeOf(/a/); // 'regexp'\ntypeOf(new Date()); // 'date'\ntypeOf(null); // 'null'\ntypeOf(undefined); // 'undefined'\ntypeOf('a'); // 'string'\ntypeOf(1); // 'number'\ntypeOf(true); // 'boolean'\n```\n\n----------------------------------------\n\nTITLE: Importing and Using just-is-prime to Check Primality in JavaScript\nDESCRIPTION: Illustrates how to import the isPrime function from just-is-prime and use it to check if various values are prime numbers. The function expects a single numerical input and throws errors for non-numeric or invalid inputs, ensuring type safety.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-is-prime/README.md#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport isPrime from 'just-is-prime';\n\n/*\n  isPrime(1); // false\n  isPrime(2); // true\n  isPrime(17); // true\n  isPrime(10); // false\n  isPrime(); // throws\n  isPrime(null); // throws\n  isPrime(\"js\"); // throws\n  isPrime({}); // throws\n  isPrime(function() {}); // throws\n  isPrime([]); // throws\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing just-demethodize Package Using Shell\nDESCRIPTION: Commands to install the just-demethodize package which allows converting methods to standalone functions by extracting the method and binding the this argument as the first parameter.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_174\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-demethodize\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-demethodize\n```\n\n----------------------------------------\n\nTITLE: Installing just-values with npm (shell)\nDESCRIPTION: This command installs the `just-values` module using the npm package manager. It adds the module as a project dependency, making it available for use in the project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-values/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-values\n```\n\n----------------------------------------\n\nTITLE: Installing just-sort-by with npm and yarn\nDESCRIPTION: Commands to install the just-sort-by utility using npm or yarn package managers.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-sort-by/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-sort-by\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-sort-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-has via npm (Shell)\nDESCRIPTION: Installs the 'just-has' npm package using the Node Package Manager (npm). This command adds the package as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-has/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-has\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-values with npm\nDESCRIPTION: Install the just-map-values package using npm, a zero-dependency utility for mapping object values.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map-values/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-map-values\n```\n\n----------------------------------------\n\nTITLE: Calculating Median with just-median (JavaScript)\nDESCRIPTION: Computes the median of an array of numbers or a list of arguments using 'just-median'. Returns median value or average of two middles for even-length inputs. Throws for non-numeric or missing input.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_127\n\nLANGUAGE: js\nCODE:\n```\nimport median from 'just-median';\n\nmedian([1, 2, 3, 4, 5]); // 3\nmedian([3, -1, 2]); // 2\nmedian([9, 14, 14, 200, 15]); // 14\nmedian(1, 2, 4, 3); // 2.5\nmedian(['3', 2, 1]); // throws\nmedian(); // throws\n```\n\n----------------------------------------\n\nTITLE: Calculating Variance with just-variance (JavaScript)\nDESCRIPTION: Computes the variance of numerical data using 'just-variance'. Accepts arrays or argument lists. Throws on single-value arrays, non-numeric input, or missing/NaN arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_133\n\nLANGUAGE: js\nCODE:\n```\nimport variance from 'just-variance';\n\nvariance([1, 2, 3, 2, 4, 1]); // 1.3666666667\nvariance(3, 2, 1); // 1\nvariance([100, 100, 100.1, 100]); // 0.0025\nvariance(1, 2, 3, 4, 5, -6); // 15.5\nvariance([4]); // throws\nvariance(['3', 2]); // throws\nvariance(NaN, NaN); // throws\nvariance(); // throws\n```\n\n----------------------------------------\n\nTITLE: Installing just-flip with Yarn\nDESCRIPTION: This snippet shows how to install the just-flip npm package using Yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-flip/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flip\n```\n\n----------------------------------------\n\nTITLE: Installing just-permutations (Shell)\nDESCRIPTION: Demonstrates how to install the 'just-permutations' package using npm or yarn. No additional dependencies required. Invoke in command-line contexts before using the module in code.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_112\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-permutations\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-permutations\n```\n\n----------------------------------------\n\nTITLE: Installing just-typeof via Shell\nDESCRIPTION: Shell commands for installing just-typeof, a utility to infer precise types beyond native typeof results.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_61\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-typeof\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-typeof\n```\n\n----------------------------------------\n\nTITLE: Installing just-mode (Shell)\nDESCRIPTION: Command instructions to install the 'just-mode' npm package for mode calculations in datasets.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_128\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-mode\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-mode\n```\n\n----------------------------------------\n\nTITLE: Installing just-compact via npm\nDESCRIPTION: This snippet demonstrates installing the \"just-compact\" package using npm. It requires npm to be installed on the system. The command downloads and installs the package and its dependencies into the project's `node_modules` directory.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-compact/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-compact\n```\n\n----------------------------------------\n\nTITLE: Installing just-flatten-it with yarn\nDESCRIPTION: Command to install the just-flatten-it module using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-flatten/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flatten-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-compact with npm\nDESCRIPTION: This command installs the just-compact package from npm.  just-compact is an array utility to remove falsey values.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-compact\n```\n\n----------------------------------------\n\nTITLE: Using just-capitalize Function in JavaScript\nDESCRIPTION: Demonstrates the usage of the `capitalize` function from 'just-capitalize'. It takes a string as input and returns a new string with the first character converted to uppercase. Non-alphabetic first characters remain unchanged.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_159\n\nLANGUAGE: javascript\nCODE:\n```\n  import capitalize from 'just-capitalize';\n\n/*\n  capitalize('capitals'); // 'Capitals'\n  capitalize('Capitals'); // 'Capitals'\n  capitalize('many words'); // 'Many words'\n  capitalize('!exclaim'); // '!exclaim'\n*/\n```\n\n----------------------------------------\n\nTITLE: Installing just-typeof\nDESCRIPTION: Instructions for installing the just-typeof npm module using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-typeof/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-typeof\n```\n\n----------------------------------------\n\nTITLE: Installing just-compare with yarn\nDESCRIPTION: This command installs the 'just-compare' package using yarn, another popular package manager for JavaScript. It adds the 'just-compare' library to your project's dependencies, enabling its comparison functionalities. This is an alternative to using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-compare\n```\n\n----------------------------------------\n\nTITLE: Installing just-flatten-it with npm\nDESCRIPTION: Command to install the just-flatten-it module using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-flatten/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flatten-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff using npm\nDESCRIPTION: This snippet demonstrates how to install the 'just-diff' package using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-diff\n```\n\n----------------------------------------\n\nTITLE: Plucking properties from collections with just-pluck-it in JavaScript\nDESCRIPTION: Demonstrates how to extract a specific property from each member of a collection using the 'just-pluck-it' library in JavaScript. The code imports the 'pluck' function and shows examples of plucking the 'a' property from an array of objects and an object with nested objects. It returns an array or object containing the extracted values.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport pluck from 'just-pluck-it';\n\npluck([{a:1, b:2}, {a:4, b:3}, {a:2, b:5}], 'a'); // [1, 4, 2]\npluck({x: {a:1, b:2}, y: {a:4, b:3}, z: {a:2, b:5}}, 'a'); // {x: 1, y: 4, z: 2}\n```\n\n----------------------------------------\n\nTITLE: Installing just-clone with yarn\nDESCRIPTION: Installs the 'just-clone' package using yarn. This package enables deep cloning of objects, arrays, maps and sets in your JavaScript projects. This is an alternative installation method compared to using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-clone\n```\n\n----------------------------------------\n\nTITLE: Installing just-tail with npm\nDESCRIPTION: This command installs the just-tail package from npm. just-tail is used to get all but the first element of an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-tail\n```\n\n----------------------------------------\n\nTITLE: Installing just-tail with yarn\nDESCRIPTION: This command installs the just-tail package using yarn. The just-tail utility returns all elements of an array except the first one.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_89\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-tail\n```\n\n----------------------------------------\n\nTITLE: Installing just-demethodize using npm\nDESCRIPTION: This snippet demonstrates the installation of the just-demethodize package using npm.  It requires npm to be installed on the system. The command `npm install just-demethodize` downloads and installs the package and its dependencies in the current directory's `node_modules` folder.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-demethodize/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-demethodize\n```\n\n----------------------------------------\n\nTITLE: Installing just-once Library with npm\nDESCRIPTION: This snippet demonstrates how to install the 'just-once' library using npm.  It's a command-line instruction that adds the library as a project dependency. No prior setup is needed, other than having Node.js and npm installed.  The output indicates the successful installation.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-once/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-once\n```\n\n----------------------------------------\n\nTITLE: Installing just-last with npm\nDESCRIPTION: This command installs the just-last package from npm. just-last retrieves the last element of an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_85\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-last\n```\n\n----------------------------------------\n\nTITLE: Installing just-pipe using yarn - Shell\nDESCRIPTION: This snippet shows how to install the just-pipe module using yarn. It requires yarn to be installed on your system. The command `yarn add just-pipe` downloads and installs the module along with its dependencies if any, into the node_modules directory. The output will include details on the installation process and any related warnings or errors.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-pipe/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pipe\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-object via Shell\nDESCRIPTION: Shell commands to install the just-map-object package with npm or yarn to enable object mapping functionalities in JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-map-object\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-map-object\n```\n\n----------------------------------------\n\nTITLE: Installing just-modulo Package\nDESCRIPTION: Commands to install the 'just-modulo' package using npm or yarn. This package provides a function to calculate the mathematical modulo.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_166\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-modulo\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-modulo\n```\n\n----------------------------------------\n\nTITLE: Installing just-flush via yarn (Shell)\nDESCRIPTION: Installs the just-flush package using the yarn package manager. This provides an alternative to npm for adding just-flush to your Node.js project. Requires yarn to be installed globally.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-flush/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flush\n```\n\n----------------------------------------\n\nTITLE: Installing just-compose Package Using Shell\nDESCRIPTION: Shell commands to install the just-compose package, which provides function composition capabilities for JavaScript functions.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_170\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-compose\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-compose\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-keys via Shell\nDESCRIPTION: Installation commands for just-map-keys package using npm or yarn to allow mapping and modifying object keys with access to value, key, and object in the predicate.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-map-keys\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-map-keys\n```\n\n----------------------------------------\n\nTITLE: Installing just-clone with npm\nDESCRIPTION: Installs the 'just-clone' package using npm. This allows deep cloning of objects, arrays, maps and sets in your JavaScript project. Use this command to add the cloning functionality to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-clone\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-circular with yarn\nDESCRIPTION: Installs the 'just-is-circular' package using yarn, enabling detection of circular references in objects. This provides an alternative installation method to using npm.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-circular\n```\n\n----------------------------------------\n\nTITLE: Installing just-standard-deviation (Shell)\nDESCRIPTION: Shell commands for installing 'just-standard-deviation', a package for calculating statistical standard deviation.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_134\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-standard-deviation\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-standard-deviation\n```\n\n----------------------------------------\n\nTITLE: Installing just-capitalize via npm\nDESCRIPTION: Command to install the just-capitalize package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-capitalize/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-capitalize\n```\n\n----------------------------------------\n\nTITLE: Installing just-tail npm module using shell commands\nDESCRIPTION: This snippet shows how to install the just-tail module via npm and yarn package managers. It demonstrates the commands needed to add the module as a dependency in a JavaScript project using shell commands.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-tail/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-tail\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-tail\n```\n\n----------------------------------------\n\nTITLE: Install just-snake-case via Yarn\nDESCRIPTION: This command installs the just-snake-case package using Yarn.  It adds the package to the project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-snake-case/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-snake-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-pascal-case using yarn\nDESCRIPTION: Command to install the 'just-pascal-case' package using the Yarn package manager. This adds the library as a dependency to your Node.js project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-pascal-case/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pascal-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-kebab-case with yarn\nDESCRIPTION: Command to install the just-kebab-case module using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-kebab-case/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-kebab-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-omit via npm\nDESCRIPTION: Install the just-omit package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-omit/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-omit\n```\n\n----------------------------------------\n\nTITLE: Installing just-split with yarn\nDESCRIPTION: This command installs the just-split package using yarn. The just-split utility is useful for dividing an array into smaller sub-arrays of equal size.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_98\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-split\n```\n\n----------------------------------------\n\nTITLE: Installing just-right-pad with npm\nDESCRIPTION: Command to install the just-right-pad package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-right-pad/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-right-pad\n```\n\n----------------------------------------\n\nTITLE: Installing just-once Package Using Shell\nDESCRIPTION: Commands for installation of the just-once package that allows creating functions which can only be invoked a single time.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_192\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-once\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-once\n```\n\n----------------------------------------\n\nTITLE: Installing just-unique via Shell\nDESCRIPTION: Commands to install just-unique for array deduplication using npm or yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_69\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-unique\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-unique\n```\n\n----------------------------------------\n\nTITLE: Installing just-unique via npm (Shell)\nDESCRIPTION: Installs the 'just-unique' package using the Node Package Manager (npm). This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-unique/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-unique\n```\n\n----------------------------------------\n\nTITLE: Installing just-unique via yarn (Shell)\nDESCRIPTION: Installs the 'just-unique' package using the Yarn package manager. This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-unique/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-unique\n```\n\n----------------------------------------\n\nTITLE: Installing just-group-by (Shell)\nDESCRIPTION: Step-by-step installation of 'just-group-by' via npm or yarn to enable object grouping from arrays in JavaScript workflows.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_122\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-group-by\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-group-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-random Package Using Shell\nDESCRIPTION: Shell commands to install the just-random package, which returns a random element from an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_188\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-random\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-random\n```\n\n----------------------------------------\n\nTITLE: Installing just-throttle Package Using Shell\nDESCRIPTION: Installation commands to add the just-throttle package, providing throttling utilities to limit invocation rate of functions.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_190\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-throttle\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-throttle\n```\n\n----------------------------------------\n\nTITLE: Installing just-split-at using npm\nDESCRIPTION: This command installs the just-split-at package from npm. It adds the package as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-split-at/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-split-at\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-circular using yarn\nDESCRIPTION: Command to install the 'just-is-circular' package using the Yarn package manager. This adds the module as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-circular/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-circular\n```\n\n----------------------------------------\n\nTITLE: Installing just-safe-get via Shell\nDESCRIPTION: Shell install commands for just-safe-get which allows safe retrieval of nested properties without throwing errors when parent references are undefined.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_57\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-safe-get\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-safe-get\n```\n\n----------------------------------------\n\nTITLE: Installing just-pick with npm\nDESCRIPTION: This command installs the 'just-pick' package using npm. The 'just-pick' package lets you create a new object containing only the specified keys from the original object. This command adds the necessary library to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pick\n```\n\n----------------------------------------\n\nTITLE: Installing just-pascal-case using npm\nDESCRIPTION: Command to install the 'just-pascal-case' package using the Node Package Manager (npm). This adds the library as a dependency to your Node.js project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-pascal-case/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-pascal-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-snake-case Package\nDESCRIPTION: Commands to install the 'just-snake-case' package using npm or yarn. This package provides a function to convert strings to snake_case.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_154\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-snake-case\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-snake-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-mode via yarn (Shell)\nDESCRIPTION: This snippet shows how to install the just-mode package using the yarn package manager. Executing this command in a shell will add just-mode to your project dependencies. Requires yarn to be installed and does not require additional parameters.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-mode/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-mode\n```\n\n----------------------------------------\n\nTITLE: Installing just-intersect via npm - Shell\nDESCRIPTION: This snippet shows how to install the just-intersect package using the npm package manager. This is a prerequisite for using the just-intersect functionality in a JavaScript project. The command must be run in your project directory and assumes that Node.js and npm are already installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-intersect/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-intersect\n```\n\n----------------------------------------\n\nTITLE: Installing just-sort-by with yarn\nDESCRIPTION: This command installs the just-sort-by package using yarn. This package is a simple utility for sorting arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_107\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-sort-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff-apply using npm\nDESCRIPTION: Installs the `just-diff-apply` package using the npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-diff-apply/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-diff-apply\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff-apply using yarn\nDESCRIPTION: Installs the `just-diff-apply` package using the yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/collection-diff-apply/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-diff-apply\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff-apply using yarn\nDESCRIPTION: This snippet demonstrates how to install the 'just-diff-apply' package using yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-diff-apply\n```\n\n----------------------------------------\n\nTITLE: Install just-entries with npm\nDESCRIPTION: Installs the just-entries package using npm, a package manager for JavaScript. This command adds the just-entries library as a dependency to your project, allowing you to use its functions within your code. The library provides a utility for converting objects into arrays of key-value pairs.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-entries/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-entries\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-values via Shell\nDESCRIPTION: Commands to install just-map-values using npm or yarn which supports mapping over object values with access to value, key, and the entire object in the predicate function.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-map-values\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-map-values\n```\n\n----------------------------------------\n\nTITLE: Installing just-reduce-object via Shell\nDESCRIPTION: Shell commands for installing just-reduce-object package that enables reducing objects to values with a reducer function.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-reduce-object\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-reduce-object\n```\n\n----------------------------------------\n\nTITLE: Installing just-pluck-it with yarn\nDESCRIPTION: Installs the 'just-pluck-it' package using yarn, an alternative JavaScript package manager. This enables the extraction of specific properties from collections (arrays and objects). This is another way of adding the 'just-pluck-it' library to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pluck-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-index with npm\nDESCRIPTION: Provides the command to install the just-index module using the npm package manager. This command adds the module to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-index/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-index\n```\n\n----------------------------------------\n\nTITLE: Installing just-shuffle with npm\nDESCRIPTION: Installs the just-shuffle package using npm, a package manager for JavaScript. This command adds just-shuffle to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-shuffle/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install just-shuffle\n```\n\n----------------------------------------\n\nTITLE: Installing just-cartesian-product (Shell)\nDESCRIPTION: This snippet provides instructions on how to install the `just-cartesian-product` package using npm. It demonstrates the command needed to install the library, making it available for use in a project. It specifies the use of the package manager npm.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-cartesian-product/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-cartesian-product\n```\n\n----------------------------------------\n\nTITLE: Installing just-median with npm\nDESCRIPTION: Instructions for installing the just-median package using the npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-median/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install just-median\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-primitive with npm\nDESCRIPTION: Installs the 'just-is-primitive' package using npm, a package manager for JavaScript. This package determines if a value is a primitive type.  This command adds primitive type validation to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-primitive\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-primitive via yarn in Shell\nDESCRIPTION: This snippet shows how to install the 'just-is-primitive' package using yarn.  The command installs the module as a project dependency, which allows the use of 'just-is-primitive' in a Javascript environment. No parameters are required for installation.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-is-primitive/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-primitive\n```\n\n----------------------------------------\n\nTITLE: Installing just-curry-it Package Using Shell\nDESCRIPTION: Installation commands for 'just-curry-it', a package that enables creation of curried functions in JavaScript.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_172\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-curry-it\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-curry-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-curry-it Module with Yarn (Shell)\nDESCRIPTION: Provides the command to install the 'just-curry-it' module into a Node.js project using the Yarn package manager. This is an alternative prerequisite for using the module.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-curry/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-curry-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-partial-it Package Using Shell\nDESCRIPTION: Commands for installation of the just-partial-it package that supports partial application of function arguments.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_178\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-partial-it\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-partial-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-partial-it with yarn\nDESCRIPTION: Command to install the just-partial-it module using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-partial/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-partial-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-memoize Package Using Shell\nDESCRIPTION: Shell commands for installing the just-memoize package for caching function results to optimize repeated calls.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_184\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-memoize\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-memoize\n```\n\n----------------------------------------\n\nTITLE: Installing just-prune (Shell)\nDESCRIPTION: Installation commands for 'just-prune', a package to trim strings at word boundaries with optional suffixes.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_142\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-prune\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-prune\n```\n\n----------------------------------------\n\nTITLE: Installing just-squash Package\nDESCRIPTION: Commands to install the 'just-squash' package using npm or yarn package managers. This package provides a function to remove spaces from strings.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_144\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-squash\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-squash\n```\n\n----------------------------------------\n\nTITLE: Installing just-left-pad with yarn\nDESCRIPTION: Installs the `just-left-pad` package using the yarn package manager. Requires Node.js and yarn to be installed.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-left-pad/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-left-pad\n```\n\n----------------------------------------\n\nTITLE: Installing just-random-integer module using npm (Shell)\nDESCRIPTION: Installs the just-random-integer package globally or into your project using npm. Requires Node.js and npm to be installed on your system. This makes the random integer utility available for import in JavaScript or Node.js code.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-random-integer/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-random-integer\n```\n\n----------------------------------------\n\nTITLE: Installing just-in-range with npm\nDESCRIPTION: Installs the `just-in-range` module using the npm package manager. This command adds the module as a project dependency, making it available for use in your JavaScript or Node.js projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/number-in-range/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-in-range\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-empty with npm\nDESCRIPTION: Installs the 'just-is-empty' package using npm. The 'just-is-empty' package enables checking if an object has no enumerable key values.  This command adds 'just-is-empty' to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-empty\n```\n\n----------------------------------------\n\nTITLE: Installing just-last with yarn\nDESCRIPTION: This command installs the just-last package using yarn. The just-last utility allows access to the last element of an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_86\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-last\n```\n\n----------------------------------------\n\nTITLE: Installing just-safe-set via Shell\nDESCRIPTION: Commands to install just-safe-set, a package for safely setting nested object properties and creating intermediate objects as needed.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_59\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-safe-set\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-safe-set\n```\n\n----------------------------------------\n\nTITLE: Installing just-entries with npm\nDESCRIPTION: Installs the 'just-entries' package using npm. This package is used to return object entries as an array of [key, value] pairs in JavaScript. This command adds this functionality to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-entries\n```\n\n----------------------------------------\n\nTITLE: Installing just-flip-object via Shell\nDESCRIPTION: Commands to install just-flip-object, which flips keys and values of an object.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_63\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-flip-object\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-flip-object\n```\n\n----------------------------------------\n\nTITLE: Installing just-median (Shell)\nDESCRIPTION: Shell commands to add 'just-median' for calculating the median value of a dataset in JavaScript. No extra dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_126\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-median\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-median\n```\n\n----------------------------------------\n\nTITLE: Installing just-standard-deviation with npm or yarn in shell\nDESCRIPTION: Provides shell commands to install the just-standard-deviation module via npm or yarn package managers. These commands assume a Node.js environment and are prerequisites for usage in JavaScript projects.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-standard-deviation/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-standard-deviation\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-standard-deviation\n```\n\n----------------------------------------\n\nTITLE: Installing just-order-by with yarn\nDESCRIPTION: This command installs the just-order-by package using yarn. just-order-by can sort arrays of objects by multiple properties with specified ordering.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_104\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-order-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-once Library with yarn\nDESCRIPTION: This snippet demonstrates how to install the 'just-once' library using yarn. This command-line instruction adds the library as a project dependency. The prerequisites include having Node.js and yarn installed. The output is the successful installation message.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-once/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-once\n```\n\n----------------------------------------\n\nTITLE: Installing just-has via yarn (Shell)\nDESCRIPTION: Installs the 'just-has' npm package using the Yarn package manager. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-has/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-has\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-circular with npm\nDESCRIPTION: Installs the 'just-is-circular' package using npm, a package manager for JavaScript. The 'just-is-circular' package detects circular references in objects. This command adds the functionality to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-is-circular\n```\n\n----------------------------------------\n\nTITLE: Installing just-diff using yarn\nDESCRIPTION: This snippet shows how to install the 'just-diff' package using yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-diff\n```\n\n----------------------------------------\n\nTITLE: Installing just-random with yarn\nDESCRIPTION: This command installs the just-random package using yarn. just-random provides a simple way to pick a random element from an array.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-random\n```\n\n----------------------------------------\n\nTITLE: Installing just-camel-case Package\nDESCRIPTION: Commands to install the 'just-camel-case' package using npm or yarn. This package provides a function to convert strings to camelCase.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_150\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-camel-case\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-camel-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-intersect with npm\nDESCRIPTION: This command installs the just-intersect package from npm.  just-intersect finds the intersection of two arrays.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-intersect\n```\n\n----------------------------------------\n\nTITLE: Installing just-merge with npm\nDESCRIPTION: Installs the 'just-merge' package using npm, a package manager for JavaScript. The 'just-merge' package offers shallow merging of Javascript objects. This command adds the 'just-merge' functionality to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-merge\n```\n\n----------------------------------------\n\nTITLE: Installing just-capitalize Package\nDESCRIPTION: Commands to install the 'just-capitalize' package using npm or yarn. This package provides a function to capitalize the first character of a string.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_158\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-capitalize\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-capitalize\n```\n\n----------------------------------------\n\nTITLE: Installing just-range with Yarn\nDESCRIPTION: This snippet demonstrates how to install the `just-range` module using the Yarn package manager. It achieves the same result as the npm installation, downloading and configuring the module and its dependencies for use within the project.  This method is an alternative to npm install.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-range/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-range\n```\n\n----------------------------------------\n\nTITLE: Installing just-permutations via npm (Shell)\nDESCRIPTION: Installs the 'just-permutations' package using the Node Package Manager (npm). This command downloads the package and adds it to your project's node_modules directory and package.json dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-permutations/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-permutations\n```\n\n----------------------------------------\n\nTITLE: Installing just-camel-case with npm\nDESCRIPTION: Command to install the just-camel-case package using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-camel-case/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-camel-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-extend with npm\nDESCRIPTION: This command installs the 'just-extend' package using npm. The 'just-extend' library is for extending JavaScript objects. It adds the 'just-extend' library to your project's dependencies, allowing its use for object extension.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-extend\n```\n\n----------------------------------------\n\nTITLE: Installing just-pick with yarn\nDESCRIPTION: Command to install the just-pick package using yarn package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-pick/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-pick\n```\n\n----------------------------------------\n\nTITLE: Installing just-index with yarn\nDESCRIPTION: Provides the command to install the just-index module using the yarn package manager. This command adds the module to your project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-index/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-index\n```\n\n----------------------------------------\n\nTITLE: Installing just-map-keys with yarn\nDESCRIPTION: Command to install the 'just-map-keys' package using the Yarn package manager. This adds the module as a dependency to your project.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/object-map-keys/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-map-keys\n```\n\n----------------------------------------\n\nTITLE: Installing just-deep-map-values via Shell\nDESCRIPTION: Shell commands to install just-deep-map-values package to support deep traversal and mapping of values across nested object structures.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-deep-map-values\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-deep-map-values\n```\n\n----------------------------------------\n\nTITLE: Installing just-values with yarn\nDESCRIPTION: Installs the 'just-values' package using yarn, an alternative package manager for JavaScript.  This allows for obtaining the values of an object as an array. This is another installation method for the same library.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-values\n```\n\n----------------------------------------\n\nTITLE: Installing just-intersect via yarn - Shell\nDESCRIPTION: This snippet demonstrates the installation of the just-intersect package with the yarn package manager, as an alternative to npm. Like the npm command, this should be run in a project directory with yarn properly set up, and is required before importing just-intersect in your JavaScript code.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-intersect/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-intersect\n```\n\n----------------------------------------\n\nTITLE: Installing just-order-by with npm\nDESCRIPTION: This command installs the just-order-by package from npm.  just-order-by orders arrays based on provided property and order.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_103\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-order-by\n```\n\n----------------------------------------\n\nTITLE: Installing just-partial-it with npm\nDESCRIPTION: Command to install the just-partial-it module using npm package manager.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/function-partial/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-partial-it\n```\n\n----------------------------------------\n\nTITLE: Installing just-is-empty with yarn\nDESCRIPTION: Installs the 'just-is-empty' package using yarn. The 'just-is-empty' package allows you to verify if an object is empty (has no enumerable keys). This installation option uses yarn.\nSOURCE: https://github.com/angus-c/just/blob/master/README.md#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-is-empty\n```\n\n----------------------------------------\n\nTITLE: Install just-snake-case via npm\nDESCRIPTION: This command installs the just-snake-case package using npm.  It adds the package to the project's dependencies.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/string-snake-case/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install just-snake-case\n```\n\n----------------------------------------\n\nTITLE: Installing just-split Using yarn in Shell\nDESCRIPTION: Shows the command to add the just-split package to a project using yarn package manager. This command installs the package to enable array splitting features in JavaScript code.\nSOURCE: https://github.com/angus-c/just/blob/master/packages/array-split/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add just-split\n```"
  }
]