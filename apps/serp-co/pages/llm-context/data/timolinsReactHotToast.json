[
  {
    "owner": "timolins",
    "repo": "react-hot-toast",
    "content": "TITLE: Basic implementation of react-hot-toast in a React component\nDESCRIPTION: Example showing how to import and use the toast notification system in a React application. Includes both the Toaster component for rendering notifications and a function to trigger a toast message on button click.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst notify = () => toast('Here is your toast.');\n\nconst App = () => {\n  return (\n    <div>\n      <button onClick={notify}>Make me a toast</button>\n      <Toaster />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of react-hot-toast in a React Component\nDESCRIPTION: Example of how to use react-hot-toast in a React component. It demonstrates importing the library, creating a notification function, and setting up the Toaster component.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport toast, { Toaster } from 'react-hot-toast';\n\nconst notify = () => toast('Here is your toast.');\n\nconst App = () => {\n  return (\n    <div>\n      <button onClick={notify}>Make me a toast</button>\n      <Toaster />\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Options in react-hot-toast\nDESCRIPTION: Shows how to create a toast with custom configuration options including duration, position, styling, custom icons, icon theming, aria properties, and removal delay.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntoast('Hello World', {\n  duration: 4000,\n  position: 'top-center',\n\n  // Styling\n  style: {},\n  className: '',\n\n  // Custom Icon\n  icon: 'üëè',\n\n  // Change colors of success/error/loading icon\n  iconTheme: {\n    primary: '#000',\n    secondary: '#fff',\n  },\n\n  // Aria\n  ariaProps: {\n    role: 'status',\n    'aria-live': 'polite',\n  },\n\n  // Additional Configuration\n  removeDelay: 1000,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Toaster Component in React Hot Toast\nDESCRIPTION: Example configuration of the <Toaster/> component showing all available options including position, reverseOrder, gutter, containerClassName, containerStyle, and toastOptions with defaults and type-specific settings.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toaster.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  position=\"top-center\"\n  reverseOrder={false}\n  gutter={8}\n  containerClassName=\"\"\n  containerStyle={{}}\n  toastOptions={{\n    // Define default options\n    className: '',\n    duration: 5000,\n    removeDelay: 1000,\n    style: {\n      background: '#363636',\n      color: '#fff',\n    },\n\n    // Default options for specific types\n    success: {\n      duration: 3000,\n      iconTheme: {\n        primary: 'green',\n        secondary: 'black',\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Advanced Promise Toast with Dynamic Messages and Custom Options\nDESCRIPTION: Demonstrates advanced usage of promise toast with dynamic messages based on promise results/errors and custom styling options for different toast states.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.promise(\n  myPromise,\n  {\n    loading: 'Loading',\n    success: (data) => `Successfully saved ${data.name}`,\n    error: (err) => `This just happened: ${err.toString()}`,\n  },\n  {\n    style: {\n      minWidth: '250px',\n    },\n    success: {\n      duration: 5000,\n      icon: 'üî•',\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of useToaster with React Hot Toast\nDESCRIPTION: Demonstrates a basic implementation of useToaster to create a custom notification system. The example shows how to access toasts and handlers, filter visible toasts, and create toast notifications.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/use-toaster.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport toast, { useToaster } from 'react-hot-toast/headless';\n\nconst Notifications = () => {\n  const { toasts, handlers } = useToaster();\n  const { startPause, endPause } = handlers;\n\n  return (\n    <div onMouseEnter={startPause} onMouseLeave={endPause}>\n      {toasts\n        .filter((toast) => toast.visible)\n        .map((toast) => (\n          <div key={toast.id} {...toast.ariaProps}>\n            {toast.message}\n          </div>\n        ))}\n    </div>\n  );\n};\n\n// Create toasts anywhere\ntoast('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Using Promise Toast with Async Function\nDESCRIPTION: Shows how to use promise toast with an async function that gets called automatically. Useful for executing and monitoring multi-step asynchronous operations.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.promise(\n  async () => {\n    const { id } = await fetchData1();\n    await fetchData2(id);\n  },\n  {\n    loading: 'Loading',\n    success: 'Got the data',\n    error: 'Error when fetching',\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Toast Renderer with Dismiss Button\nDESCRIPTION: Advanced example demonstrating the custom renderer API to create a customized Toaster component with a dismiss button for non-loading toasts.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { toast, Toaster, ToastBar } from 'react-hot-toast';\n\nconst CustomToaster = () => (\n  <Toaster>\n    {(t) => (\n      <ToastBar toast={t}>\n        {({ icon, message }) => (\n          <>\n            {icon}\n            {message}\n            {t.type !== 'loading' && (\n              <button onClick={() => toast.dismiss(t.id)}>X</button>\n            )}\n          </>\n        )}\n      </ToastBar>\n    )}\n  </Toaster>\n);\n```\n\n----------------------------------------\n\nTITLE: Animated Notifications using useToaster in React Hot Toast\nDESCRIPTION: Illustrates how to implement animated notifications using useToaster. This example shows how to calculate offsets, handle height updates, and animate toasts based on their visibility state.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/use-toaster.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToaster } from 'react-hot-toast/headless';\n\nconst Notifications = () => {\n  const { toasts, handlers } = useToaster();\n  const { startPause, endPause, calculateOffset, updateHeight } = handlers;\n\n  return (\n    <div\n      style={{\n        position: 'fixed',\n        top: 8,\n        left: 8,\n      }}\n      onMouseEnter={startPause}\n      onMouseLeave={endPause}\n    >\n      {toasts.map((toast) => {\n        const offset = calculateOffset(toast, {\n          reverseOrder: false,\n          gutter: 8,\n        });\n\n        const ref = (el) => {\n          if (el && typeof toast.height !== \"number\") {\n            const height = el.getBoundingClientRect().height;\n            updateHeight(toast.id, height);\n          }\n        };\n        return (\n          <div\n            key={toast.id}\n            ref={ref}\n            style={{\n              position: 'absolute',\n              width: '200px',\n              background: 'papayawhip',\n              transition: 'all 0.5s ease-out',\n              opacity: toast.visible ? 1 : 0,\n              transform: `translateY(${offset}px)`,\n            }}\n            {...toast.ariaProps}\n          >\n            {toast.message}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Promise Toast for Simple Async Operations\nDESCRIPTION: Shows how to map a promise to a toast notification that automatically updates when the promise resolves or fails. This provides visual feedback for asynchronous operations.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst myPromise = fetchData();\n\ntoast.promise(myPromise, {\n  loading: 'Loading',\n  success: 'Got the data',\n  error: 'Error when fetching',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ToastBar Content with Dismiss Button in React\nDESCRIPTION: This example shows how to customize the ToastBar content by adding a dismiss button. It demonstrates using a render function to modify the ToastBar's content, including conditional rendering based on the toast type.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast-bar.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { toast, Toaster, ToastBar } from 'react-hot-toast';\n\n<Toaster>\n  {(t) => (\n    <ToastBar toast={t}>\n      {({ icon, message }) => (\n        <>\n          {icon}\n          {message}\n          {t.type !== 'loading' && (\n            <button onClick={() => toast.dismiss(t.id)}>X</button>\n          )}\n        </>\n      )}\n    </ToastBar>\n  )}\n</Toaster>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Components as Toasts with toast.custom() in React\nDESCRIPTION: Examples of using the new toast.custom() API to render custom React components as toasts, including a minimal example and a Tailwind CSS styled toast with animation states.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Minimal Example\ntoast.custom(<div>Minimal Example</div>);\n\n// Tailwind Example\ntoast.custom((t) => (\n  <div\n    className={`bg-white px-6 py-4 shadow-md rounded-full ${\n      t.visible ? 'animate-enter' : 'animate-leave'\n    }`}\n  >\n    Hello TailwindCSS! üëã\n  </div>\n));\n```\n\n----------------------------------------\n\nTITLE: Customizing Enter and Exit Animations in React Hot Toast\nDESCRIPTION: This code demonstrates how to customize the enter and exit animations of toast notifications by providing a render function to the Toaster component.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toaster, ToastBar } from 'react-hot-toast';\n\n<Toaster>\n  {(t) => (\n    <ToastBar\n      toast={t}\n      style={{\n        ...t.style,\n        animation: t.visible\n          ? 'custom-enter 1s ease'\n          : 'custom-exit 1s ease forwards',\n      }}\n    />\n  )}\n</Toaster>;\n```\n\n----------------------------------------\n\nTITLE: Creating Toast with Self-dismissing Function Component\nDESCRIPTION: Demonstrates how to create a toast with a function that receives the toast object, allowing access to the toast ID for creating a self-dismissing button within the toast content.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\ntoast(\n  (t) => (\n    <span>\n      Custom and <b>bold</b>\n      <button onClick={() => toast.dismiss(t.id)}>Dismiss</button>\n    </span>\n  ),\n  {\n    icon: <Icon />,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing ToastBar Animation in React Hot Toast\nDESCRIPTION: Example of adapting the default <ToastBar/> component by modifying its animation style based on toast visibility state. This demonstrates how to extend existing components in the library.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toaster.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toaster, ToastBar } from 'react-hot-toast';\n\n<Toaster>\n  {(t) => (\n    <ToastBar\n      toast={t}\n      style={{\n        ...t.style,\n        animation: t.visible\n          ? 'custom-enter 1s ease'\n          : 'custom-exit 1s ease forwards',\n      }}\n    />\n  )}\n</Toaster>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JSX Toast Notification\nDESCRIPTION: Shows how to create a custom toast notification using JSX without default styles. This allows for complete customization of the toast content.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.custom(<div>Hello World</div>);\n```\n\n----------------------------------------\n\nTITLE: Creating Toast with JSX Content and Custom Icon\nDESCRIPTION: Shows how to create a toast notification with JSX content and a custom icon component. This allows for rich content in toast notifications.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\ntoast(\n  <span>\n    Custom and <b>bold</b>\n  </span>,\n  {\n    icon: <Icon />,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Toast\nDESCRIPTION: Shows how to update an existing toast notification using its ID. This is useful for changing the content or type of a toast, such as updating a loading toast to a success toast.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst toastId = toast.loading('Loading...');\n\n// ...\n\ntoast.success('This worked', {\n  id: toastId,\n});\n```\n\n----------------------------------------\n\nTITLE: Preventing Duplicate Toasts\nDESCRIPTION: Demonstrates how to prevent duplicate toast notifications by providing a unique permanent ID. This ensures that only one toast with a given ID is shown at a time.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.success('Copied to clipboard!', {\n  id: 'clipboard',\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Styles for Specific Toast Types in React Hot Toast\nDESCRIPTION: This code demonstrates how to set default styles for specific types of toast notifications (success and error) using the toastOptions prop.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    success: {\n      style: {\n        background: 'green',\n      },\n    },\n    error: {\n      style: {\n        background: 'red',\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Toast Notifications in React Hot Toast\nDESCRIPTION: This snippet shows how to apply custom styles to a single toast notification when calling the toast function.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\ntoast('I have a border.', {\n  style: {\n    border: '1px solid black',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Loading Toast Notification\nDESCRIPTION: Demonstrates how to create a loading toast notification, typically used to indicate that an operation is in progress. This can be updated later or replaced with a promise toast.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.loading('Waiting...');\n```\n\n----------------------------------------\n\nTITLE: Creating a Success Toast Notification\nDESCRIPTION: Shows how to create a success toast notification with an animated checkmark icon. The icon can be themed using the iconTheme option.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.success('Successfully created!');\n```\n\n----------------------------------------\n\nTITLE: Creating an Error Toast Notification\nDESCRIPTION: Demonstrates how to create an error toast notification with an animated error icon. The icon can be themed using the iconTheme option.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.error('This is an error!');\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Toast Notification\nDESCRIPTION: Demonstrates how to create a simple toast notification without any icon. This is the most basic usage of the toast API.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntoast('Hello World');\n```\n\n----------------------------------------\n\nTITLE: Configuring ToastBar Component in React\nDESCRIPTION: This snippet demonstrates the basic usage of the ToastBar component with available options. It shows how to pass a toast object, override styles, and set the position.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast-bar.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ToastBar\n  toast={t}\n  style={{}} // Overwrite styles\n  position=\"top-center\" // Used to adapt the animation\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Styles for All Toasts in React Hot Toast\nDESCRIPTION: This snippet shows how to set default styles for all toast notifications using the toastOptions prop in the Toaster component.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    className: '',\n    style: {\n      border: '1px solid #713200',\n      padding: '16px',\n      color: '#713200',\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Per-Toast Position in React Hot Toast\nDESCRIPTION: Example of how to set a specific position for an individual toast using the position option when dispatching a toast.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\ntoast.success('Always at the bottom', {\n  position: 'bottom-center',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Toast Remove Delay\nDESCRIPTION: Demonstrates how to configure the remove delay for a toast notification. This determines how long a toast remains in the DOM after being dismissed to allow for exit animations.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.success('Successfully created!', { removeDelay: 500 });\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Toast Remove Delay\nDESCRIPTION: Shows how to configure the remove delay globally for all toast notifications using the Toaster component's options. This applies to all toasts created in the application.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n<Toaster\n  toastOptions={{\n    removeDelay: 500,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Dismissing a Single Toast Programmatically\nDESCRIPTION: Demonstrates how to programmatically dismiss a specific toast notification by its ID. This triggers the exit animation and the toast is removed after the removeDelay period.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst toastId = toast.loading('Loading...');\n\n// ...\n\ntoast.dismiss(toastId);\n```\n\n----------------------------------------\n\nTITLE: Dismissing All Toast Notifications\nDESCRIPTION: Shows how to programmatically dismiss all active toast notifications at once. This triggers the exit animation for all toasts.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.dismiss();\n```\n\n----------------------------------------\n\nTITLE: Removing Toasts Instantly\nDESCRIPTION: Demonstrates how to remove a specific toast or all toasts instantly without any exit animations. This is useful when immediate removal is required.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toast.mdx#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntoast.remove(toastId);\n\n// or\n\ntoast.remove();\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Colors in React Hot Toast\nDESCRIPTION: This snippet shows how to change the icon colors for success toasts using the iconTheme option in toastOptions.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  toastOptions={{\n    success: {\n      iconTheme: {\n        primary: 'green',\n        secondary: 'black',\n      },\n    },\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Toast Offset Position\nDESCRIPTION: Example showing how to modify the offset position of toasts by overriding the top, right, bottom, or left styles in containerStyle.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster containerStyle={{ top: '8px' }} />\n```\n\n----------------------------------------\n\nTITLE: Changing Offset Between Toasts in React Hot Toast\nDESCRIPTION: This code demonstrates how to change the spacing between toast notifications using the gutter prop on the Toaster component.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster gutter={24} />\n```\n\n----------------------------------------\n\nTITLE: Setting Gutter Space Between Toasts\nDESCRIPTION: Example of configuring the space between toast notifications using the gutter prop on the Toaster component.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster gutter={30} />\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative Positioning for Toast Container\nDESCRIPTION: Example showing how to use containerStyle to set relative positioning on the Toaster component instead of the default fixed positioning.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster containerStyle={{ position: 'absolute' }} />\n```\n\n----------------------------------------\n\nTITLE: Changing Toaster Position to Relative in React Hot Toast\nDESCRIPTION: This snippet shows how to change the position of the Toaster component from fixed to relative using the containerStyle prop.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  containerStyle={{\n    position: 'relative',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Changing Toaster Position and Offset in React Hot Toast\nDESCRIPTION: This code demonstrates how to change the position and offset of the Toaster component using the containerStyle prop.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/styling.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Toaster\n  containerStyle={{\n    top: 20,\n    left: 20,\n    bottom: 20,\n    right: 20,\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Toast State Using useToasterStore in React Hot Toast\nDESCRIPTION: This snippet demonstrates how to import and use the useToasterStore hook to access internal toast state data. It provides access to the toasts array and pausedAt property without the additional handlers that useToaster provides.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/use-toaster-store.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToasterStore } from 'react-hot-toast';\n\nconst { toasts, pausedAt } = useToasterStore();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal Custom Render Function in Toaster\nDESCRIPTION: A minimal example of providing a custom render function to the Toaster component. It shows how to access toast properties and use the resolveValue function to handle different message types.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/toaster.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Toaster, resolveValue } from 'react-hot-toast';\n\n// In your app\n<Toaster>\n  {(t) => (\n    <div\n      style={{ opacity: t.visible ? 1 : 0, background: 'white', padding: 8 }}\n    >\n      {resolveValue(t.message, t)}\n    </div>\n  )}\n</Toaster>;\n```\n\n----------------------------------------\n\nTITLE: Importing useToaster from React Hot Toast Headless\nDESCRIPTION: Shows how to import the useToaster hook from the headless version of react-hot-toast. The headless version doesn't include any styles, dependencies, or custom components.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/use-toaster.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useToaster } from 'react-hot-toast/headless';\n```\n\n----------------------------------------\n\nTITLE: Installing react-hot-toast with NPM\nDESCRIPTION: Command to install react-hot-toast using the NPM package manager.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-hot-toast\n```\n\n----------------------------------------\n\nTITLE: Installing react-hot-toast with pnpm\nDESCRIPTION: Command to install react-hot-toast using the pnpm package manager.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react-hot-toast\n```\n\n----------------------------------------\n\nTITLE: Installing react-hot-toast with pnpm\nDESCRIPTION: Command to install the react-hot-toast library using pnpm package manager.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react-hot-toast\n```\n\n----------------------------------------\n\nTITLE: Installing react-hot-toast with npm\nDESCRIPTION: Command to install the react-hot-toast library using npm package manager.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install react-hot-toast\n```\n\n----------------------------------------\n\nTITLE: Installing React Hot Toast 2.0\nDESCRIPTION: Command for installing the latest version of react-hot-toast using pnpm package manager.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/pages/docs/version-2.mdx#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npnpm add react-hot-toast\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using either npm or yarn package managers. After running these commands, the application will be available at localhost:3000.\nSOURCE: https://github.com/timolins/react-hot-toast/blob/main/site/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n```"
  }
]