[
  {
    "owner": "mixpanel",
    "repo": "mixpanel-js",
    "content": "TITLE: Basic Mixpanel Implementation in JavaScript\nDESCRIPTION: Basic example of importing the Mixpanel library, initializing it with a token and options, and tracking an event.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport mixpanel from 'mixpanel-browser';\n\nmixpanel.init(\"YOUR_TOKEN\", {autocapture: true});\nmixpanel.track(\"An event\");\n```\n\n----------------------------------------\n\nTITLE: Tracking Events with Mixpanel\nDESCRIPTION: These examples show how to track custom events with properties. The first example tracks a basic registration event with user properties, while the second demonstrates using the sendBeacon transport method for tracking when users leave a page.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// track an event named 'Registered'\nmixpanel.track('Registered', {'Gender': 'Male', 'Age': 21});\n\n// track an event using navigator.sendBeacon\nmixpanel.track('Left page', {'duration_seconds': 35}, {transport: 'sendBeacon'});\n```\n\n----------------------------------------\n\nTITLE: Initializing Mixpanel Instance in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize a new instance of the Mixpanel tracking object and use it for tracking events. It shows creating a named instance and using it separately from the main mixpanel object.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.init('new token', { your: 'config' }, 'library_name');\n\nmixpanel.library_name.track(...);\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Mixpanel in a JavaScript Module\nDESCRIPTION: Example of a JavaScript module that imports Mixpanel from the browser module and initializes it with configuration options.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/README.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// main.js\nimport mixpanel from 'mixpanel-browser';\n\nmixpanel.init('YOUR_TOKEN', {autocapture: true, debug: true, persistence: 'localStorage'});\n```\n\n----------------------------------------\n\nTITLE: Tracking Page Views with Mixpanel\nDESCRIPTION: Demonstrates various approaches to tracking page views with Mixpanel. Examples include tracking basic page views, adding custom properties, tracking different page types, and using custom event names for specific use cases.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// track a default $mp_web_page_view event\nmixpanel.track_pageview();\n\n// track a page view event with additional event properties\nmixpanel.track_pageview({'ab_test_variant': 'card-layout-b'});\n\n// example approach to track page views on different page types as event properties\nmixpanel.track_pageview({'page': 'pricing'});\nmixpanel.track_pageview({'page': 'homepage'});\n\n// UNCOMMON: Tracking a page view event with a custom event_name option. NOT expected to be used for\n// individual pages on the same site or product. Use cases for custom event_name may be page\n// views on different products or internal applications that are considered completely separate\nmixpanel.track_pageview({'page': 'customer-search'}, {'event_name': '[internal] Admin Page View'});\n```\n\n----------------------------------------\n\nTITLE: Loading Mixpanel Core SDK without Session Recording\nDESCRIPTION: Imports only the core Mixpanel SDK without the session recording functionality, useful for reducing bundle size.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport mixpanel from 'mixpanel-browser/src/loaders/loader-module-core';\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Page View Tracking with Mixpanel\nDESCRIPTION: Shows how to configure automatic page view tracking during Mixpanel initialization. Options include tracking only page loads, tracking all URL changes, tracking URL changes excluding hash changes, or tracking only path changes.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// track only page loads\nmixpanel.init(PROJECT_TOKEN, {track_pageview: true});\n\n// track when the URL changes in any manner\nmixpanel.init(PROJECT_TOKEN, {track_pageview: 'full-url'});\n\n// track when the URL changes, ignoring any changes in the hash part\nmixpanel.init(PROJECT_TOKEN, {track_pageview: 'url-with-path-and-query-string'});\n\n// track when the path changes, ignoring any query parameter or hash changes\nmixpanel.init(PROJECT_TOKEN, {track_pageview: 'url-with-path'});\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixpanel JavaScript SDK Instance\nDESCRIPTION: Shows the default configuration for a Mixpanel JavaScript SDK instance and how to update it using mixpanel.set_config(). The configuration includes various settings for API endpoints, request handling, persistence, and tracking options.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // host for requests (customizable for e.g. a local proxy)\n  api_host: 'https://api-js.mixpanel.com',\n\n  // endpoints for different types of requests\n  api_routes: {\n    track: 'track/',\n    engage: 'engage/',\n    groups: 'groups/',\n  }\n\n  // HTTP method for tracking requests\n  api_method: 'POST'\n\n  // transport for sending requests ('XHR' or 'sendBeacon')\n  // NB: sendBeacon should only be used for scenarios such as\n  // page unload where a \"best-effort\" attempt to send is\n  // acceptable; the sendBeacon API does not support callbacks\n  // or any way to know the result of the request. Mixpanel\n  // tracking via sendBeacon will not support any event-\n  // batching or retry mechanisms.\n  api_transport: 'XHR'\n\n  // request-batching/queueing/retry\n  batch_requests: true,\n\n  // maximum number of events/updates to send in a single\n  // network request\n  batch_size: 50,\n\n  // milliseconds to wait between sending batch requests\n  batch_flush_interval_ms: 5000,\n\n  // milliseconds to wait for network responses to batch requests\n  // before they are considered timed-out and retried\n  batch_request_timeout_ms: 90000,\n\n  // override value for cookie domain, only useful for ensuring\n  // correct cross-subdomain cookies on unusual domains like\n  // subdomain.mainsite.avocat.fr; NB this cannot be used to\n  // set cookies on a different domain than the current origin\n  cookie_domain: ''\n\n  // super properties cookie expiration (in days)\n  cookie_expiration: 365\n\n  // if true, cookie will be set with SameSite=None; Secure\n  // this is only useful in special situations, like embedded\n  // 3rd-party iframes that set up a Mixpanel instance\n  cross_site_cookie: false\n\n  // super properties span subdomains\n  cross_subdomain_cookie: true\n\n  // debug mode\n  debug: false\n\n  // if this is true, the mixpanel cookie or localStorage entry\n  // will be deleted, and no user persistence will take place\n  disable_persistence: false\n\n  // if this is true, Mixpanel will automatically determine\n  // City, Region and Country data using the IP address of\n  //the client\n  ip: true\n\n  // opt users out of tracking by this Mixpanel instance by default\n  opt_out_tracking_by_default: false\n\n  // opt users out of browser data storage by this Mixpanel instance by default\n  opt_out_persistence_by_default: false\n\n  // persistence mechanism used by opt-in/opt-out methods - cookie\n  // or localStorage - falls back to cookie if localStorage is unavailable\n  opt_out_tracking_persistence_type: 'localStorage'\n\n  // customize the name of cookie/localStorage set by opt-in/opt-out methods\n  opt_out_tracking_cookie_prefix: null\n\n  // type of persistent store for super properties (cookie/\n  // localStorage) if set to 'localStorage', any existing\n  // mixpanel cookie value with the same persistence_name\n  // will be transferred to localStorage and deleted\n  persistence: 'cookie'\n\n  // name for super properties persistent store\n  persistence_name: ''\n\n  // names of properties/superproperties which should never\n  // be sent with track() calls\n  property_blacklist: []\n\n  // if this is true, mixpanel cookies will be marked as\n  // secure, meaning they will only be transmitted over https\n  secure_cookie: false\n\n  // disables enriching user profiles with first touch marketing data\n  skip_first_touch_marketing: false\n\n  // the amount of time track_links will\n  // wait for Mixpanel's servers to respond\n  track_links_timeout: 300\n\n  // adds any UTM parameters and click IDs present on the page to any events fired\n  track_marketing: true\n\n  // enables automatic page view tracking using default page view events through\n  // the track_pageview() method\n  track_pageview: false\n\n  // if you set upgrade to be true, the library will check for\n  // a cookie from our old js library and import super\n  // properties from it, then the old cookie is deleted\n  // The upgrade config option only works in the initialization,\n  // so make sure you set it when you create the library.\n  upgrade: false\n\n  // extra HTTP request headers to set for each API request, in\n  // the format {'Header-Name': value}\n  xhr_headers: {}\n\n  // whether to ignore or respect the web browser's Do Not Track setting\n  ignore_dnt: false\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Mixpanel Core SDK with Async Session Recording\nDESCRIPTION: Imports the core Mixpanel SDK with the option to load session recording functionality asynchronously via script tag.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/README.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport mixpanel from 'mixpanel-browser/src/loaders/loader-module-with-async-recorder';\n```\n\n----------------------------------------\n\nTITLE: Setting User Profile Properties with mixpanel.people.set in JavaScript\nDESCRIPTION: Sets properties on a user profile in Mixpanel. You can set a single property with a name and value, or set multiple properties at once using an object. Properties can be strings, integers, dates, or lists.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.people.set('gender', 'm');\n\n// or set multiple properties at once\nmixpanel.people.set({\n    'Company': 'Acme',\n    'Plan': 'Premium',\n    'Upgrade date': new Date()\n});\n// properties can be strings, integers, dates, or lists\n```\n\n----------------------------------------\n\nTITLE: Registering One-Time Super Properties in Mixpanel JavaScript SDK\nDESCRIPTION: Shows how to use mixpanel.register_once() to set super properties only if they haven't been set before. It includes examples of setting properties persistently and for the current page load only.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// register a super property for the first time only\nmixpanel.register_once({\n    'First Login Date': new Date().toISOString()\n});\n\n// register once, only for the current pageload\nmixpanel.register_once({\n    'First interaction time': new Date().toISOString()\n}, 'None', {persistent: false});\n```\n\n----------------------------------------\n\nTITLE: Tracking Events with Groups in Mixpanel\nDESCRIPTION: Demonstrates how to track an event with specific group affiliations. This allows for analyzing data based on group properties in addition to individual user properties.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n mixpanel.track_with_groups('purchase', {'product': 'iphone'}, {'University': ['UCB', 'UCLA']})\n```\n\n----------------------------------------\n\nTITLE: Installing Mixpanel Browser via NPM\nDESCRIPTION: Command to install the Mixpanel browser library via NPM. This distinguishes it from Mixpanel's server-side Node.js library.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save mixpanel-browser\n```\n\n----------------------------------------\n\nTITLE: Registering Super Properties in Mixpanel JavaScript SDK\nDESCRIPTION: Demonstrates how to use mixpanel.register() to set super properties. It shows registering single and multiple properties, as well as setting non-persistent properties for the current page load only.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// register 'Gender' as a super property\nmixpanel.register({'Gender': 'Female'});\n\n// register several super properties when a user signs up\nmixpanel.register({\n    'Email': 'jdoe@example.com',\n    'Account Type': 'Free'\n});\n\n// register only for the current pageload\nmixpanel.register({'Name': 'Pat'}, {persistent: false});\n```\n\n----------------------------------------\n\nTITLE: Setting User Groups in Mixpanel JavaScript SDK\nDESCRIPTION: Demonstrates how to use mixpanel.set_group() to assign a user to one or more groups. It shows examples of setting a single group, multiple groups, and using different data types for group IDs.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.set_group('company', ['mixpanel', 'google']) // an array of IDs\nmixpanel.set_group('company', 'mixpanel')\nmixpanel.set_group('company', 128746312)\n```\n\n----------------------------------------\n\nTITLE: Tracking Form Submissions with Mixpanel\nDESCRIPTION: Demonstrates how to track form submissions using a CSS selector. This method automatically binds to form submission events for the specified form element and tracks them with the given event name.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n// track submission for form id 'register'\nmixpanel.track_forms('#register', 'Created Account');\n```\n\n----------------------------------------\n\nTITLE: Tracking Link Clicks with Mixpanel\nDESCRIPTION: Shows how to track link clicks using a CSS selector. This method automatically binds to click events for the specified elements and tracks them with the given event name.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// track click for link id #nav\nmixpanel.track_links('#nav', 'Clicked Nav Link');\n```\n\n----------------------------------------\n\nTITLE: Timing and Tracking Events with Mixpanel\nDESCRIPTION: This snippet demonstrates how to time an event and then track it with properties. The elapsed time between time_event and track calls is stored in the '$duration' property.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// time an event named 'Registered'\nmixpanel.time_event('Registered');\nmixpanel.track('Registered', {'Gender': 'Male', 'Age': 21});\n```\n\n----------------------------------------\n\nTITLE: Creating Aliases for User IDs in Mixpanel JavaScript SDK\nDESCRIPTION: The alias method creates mappings between IDs, allowing multiple aliases to point to the same identifier. This is typically used when a user first registers for an account.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.alias('new_id', 'existing_id');\n// You can add multiple id aliases to the existing ID\nmixpanel.alias('newer_id', 'existing_id');\n```\n\n----------------------------------------\n\nTITLE: Opting In to Mixpanel Tracking in JavaScript\nDESCRIPTION: This snippet shows how to opt a user into data tracking and cookies/localstorage for a Mixpanel instance. It demonstrates basic usage and advanced configuration with custom event tracking and cookie settings.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// opt user in\nmixpanel.opt_in_tracking();\n\n// opt user in with specific event name, properties, cookie configuration\nmixpanel.opt_in_tracking({\n    track_event_name: 'User opted in',\n    track_event_properties: {\n        'Email': 'jdoe@example.com'\n    },\n    cookie_expiration: 30,\n    secure_cookie: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Group Properties with mixpanel.group.set in JavaScript\nDESCRIPTION: Sets properties on a Mixpanel group. You can set a single property with a name and value, or set multiple properties at once using an object. Properties can be strings, integers, dates, or lists.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.get_group('company', 'mixpanel').set('Location', '405 Howard');\n\n// or set multiple properties at once\nmixpanel.get_group('company', 'mixpanel').set({\n     'Location': '405 Howard',\n     'Founded' : 2009,\n});\n// properties can be strings, integers, dates, or lists\n```\n\n----------------------------------------\n\nTITLE: Setting up Mixpanel with Import Maps in HTML\nDESCRIPTION: HTML setup for using Mixpanel as a browser JavaScript module with import maps, allowing you to specify the CDN location for the module.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/README.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"mixpanel-browser\": \"https://cdn.mxpnl.com/libs/mixpanel-js/dist/mixpanel.module.js\"\n  }\n}\n</script>\n<script type=\"module\" src=\"main.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Incrementing Numeric Properties with mixpanel.people.increment in JavaScript\nDESCRIPTION: Increments or decrements numeric properties on a user profile. You can increment a single property by a specific amount, increment by default value of 1, decrement using negative values, or update multiple properties at once.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.people.increment('page_views', 1);\n\n// or, for convenience, if you're just incrementing a counter by\n// 1, you can simply do\nmixpanel.people.increment('page_views');\n\n// to decrement a counter, pass a negative number\nmixpanel.people.increment('credits_left', -1);\n\n// like mixpanel.people.set(), you can increment multiple\n// properties at once:\nmixpanel.people.increment({\n    counter1: 1,\n    counter2: 6\n});\n```\n\n----------------------------------------\n\nTITLE: Unsetting Group Properties in Mixpanel JavaScript SDK\nDESCRIPTION: Demonstrates how to permanently remove a property from a group using the unset method. This completely removes the specified property from the group profile.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.get_group('company', 'mixpanel').unset('Founded');\n```\n\n----------------------------------------\n\nTITLE: Setting Properties Only Once with mixpanel.people.set_once in JavaScript\nDESCRIPTION: Sets properties on a user profile only if they don't already exist. Unlike people.set(), this won't overwrite existing values. This is useful for recording immutable properties like first login date or initial referral source.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.people.set_once('First Login Date', new Date());\n\n// or set multiple properties at once\nmixpanel.people.set_once({\n    'First Login Date': new Date(),\n    'Starting Plan': 'Premium'\n});\n\n// properties can be strings, integers or dates\n```\n\n----------------------------------------\n\nTITLE: Setting Distinct ID After Library Load in Mixpanel JavaScript SDK\nDESCRIPTION: Example showing how to access the distinct ID after the Mixpanel library has finished loading, using the loaded callback function in the init method.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// set distinct_id after the mixpanel library has loaded\nmixpanel.init('YOUR PROJECT TOKEN', {\n    loaded: function(mixpanel) {\n        distinct_id = mixpanel.get_distinct_id();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Group to a User in Mixpanel JavaScript SDK\nDESCRIPTION: This method adds a user to a group or creates a new group. It requires a group key and group ID as parameters, with an optional callback that will be executed after tracking the event.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.add_group('company', 'mixpanel')\n```\n\n----------------------------------------\n\nTITLE: Tracking Event with Custom Library Name in Mixpanel Wrapper\nDESCRIPTION: Demonstrates how to use the Mixpanel wrapper to track an event named 'Add To Cart' with a custom library name 'myTracker'. The example includes event parameters.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/src/loaders/mixpanel-js-wrapper.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow._mixpanel(\n    'myTracker.track', // Run the track command and utilize the library name \"myTracker\"\n    'Add To Cart', // Event name is the first argument to the track command\n    {product_id: 'shirt123'} // (optional) Event parameters are the second argument to the track command\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Group Properties in Mixpanel JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to get a reference to a Mixpanel group using its key and ID, which can then be used to set or get properties for that group.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.get_group(group_key, group_id)\n```\n\n----------------------------------------\n\nTITLE: Appending Values to User Profile Lists with mixpanel.people.append in JavaScript\nDESCRIPTION: Adds a value to a list-valued property on a user profile, creating the list if it doesn't exist. You can append a single value to a named property or append multiple values to different properties at once.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n// append a value to a list, creating it if needed\nmixpanel.people.append('pages_visited', 'homepage');\n\n// like mixpanel.people.set(), you can append multiple\n// properties at once:\nmixpanel.people.append({\n    list1: 'bob',\n    list2: 123\n});\n```\n\n----------------------------------------\n\nTITLE: Setting People Property in Mixpanel Wrapper\nDESCRIPTION: Demonstrates how to use the 'people' command with the 'set' action to update a user property. This example sets the 'gender' property to 'n/a' for the current user.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/src/loaders/mixpanel-js-wrapper.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Set the \"gender\" property \"n/a\"\nwindow._mixpanel(\n    'people.set',\n    'gender',\n    'n/a'\n);\n```\n\n----------------------------------------\n\nTITLE: Merging Lists with mixpanel.people.union in JavaScript\nDESCRIPTION: Merges values with existing list-valued properties on a user profile, excluding duplicate values. You can merge a single value, multiple values to different lists, or multiple values to a single list at once.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// merge a value to a list, creating it if needed\nmixpanel.people.union('pages_visited', 'homepage');\n\n// like mixpanel.people.set(), you can append multiple\n// properties at once:\nmixpanel.people.union({\n    list1: 'bob',\n    list2: 123\n});\n\n// like mixpanel.people.append(), you can append multiple\n// values to the same list:\nmixpanel.people.union({\n    list1: ['bob', 'billy']\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Group Properties Once with Mixpanel JavaScript SDK\nDESCRIPTION: Demonstrates how to set property values for a group only if they don't exist yet. Properties can be set individually or multiple at once using an object. Supported property types include strings, integers, lists, or dates.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.get_group('company', 'mixpanel').set_once('Location', '405 Howard');\n\n// or set multiple properties at once\nmixpanel.get_group('company', 'mixpanel').set_once({\n     'Location': '405 Howard',\n     'Founded' : 2009,\n});\n// properties can be strings, integers, lists or dates\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Mixpanel Tracking in JavaScript\nDESCRIPTION: This snippet demonstrates how to opt a user out of data tracking and cookies/localstorage for a Mixpanel instance. It shows basic usage and how to configure custom cookie settings when opting out.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// opt user out\nmixpanel.opt_out_tracking();\n\n// opt user out with different cookie configuration from Mixpanel instance\nmixpanel.opt_out_tracking({\n    cookie_expiration: 30,\n    secure_cookie: true\n});\n```\n\n----------------------------------------\n\nTITLE: Config Options Example in JavaScript\nDESCRIPTION: Code example showing configuration options that have been added over time including record_heatmap_data, record_block_class, record_block_selector, record_mask_text_class, persistent, hooks, batch_autostart, cookie_domain, and cross_site_cookie.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  record_heatmap_data: true,\n  record_block_class: \"mp-block\",\n  record_block_selector: \"#private-content\",\n  record_mask_text_class: \"mp-mask\",\n  persistent: false,\n  hooks: [],\n  batch_autostart: false,\n  cookie_domain: \".example.com\",\n  cross_site_cookie: true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Super Properties in Mixpanel JavaScript SDK\nDESCRIPTION: This example shows how to retrieve the value of a super property after the Mixpanel library has loaded, using the loaded callback in the init method.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// grab value for 'user_id' after the mixpanel library has loaded\nmixpanel.init('YOUR PROJECT TOKEN', {\n    loaded: function(mixpanel) {\n        user_id = mixpanel.get_property('user_id');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Group from a User in Mixpanel JavaScript SDK\nDESCRIPTION: Demonstrates how to use mixpanel.remove_group() to remove a user from a specific group. This method takes a group key and group ID as parameters.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.remove_group('company', 'mixpanel')\n```\n\n----------------------------------------\n\nTITLE: Merging Lists with Group Properties in Mixpanel JavaScript SDK\nDESCRIPTION: Shows how to use the union method to merge a given list with a list-valued group property, excluding duplicate values. The method will create the list property if it doesn't exist yet.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// merge a value to a list, creating it if needed\nmixpanel.get_group('company', 'mixpanel').union('Location', ['San Francisco', 'London']);\n```\n\n----------------------------------------\n\nTITLE: Using Group Union Command in Mixpanel Wrapper\nDESCRIPTION: Shows how to use the 'group' command with the 'union' action to add values to a group property. This example unions the 'location' property with new cities for a specific group.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/src/loaders/mixpanel-js-wrapper.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Union a property for a group\nwindow._mixpanel(\n    'group.union',\n    ['my_group_key', 'my_group_id'],\n    'location',\n    ['San Francisco', 'London']\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Opt-in Status in Mixpanel JavaScript SDK\nDESCRIPTION: Method to check whether a user has opted in to data tracking and cookies/localStorage for the current Mixpanel instance, with optional configuration parameters.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar has_opted_in = mixpanel.has_opted_in_tracking();\n// use has_opted_in value\n```\n\n----------------------------------------\n\nTITLE: Checking Opt-out Status in Mixpanel JavaScript SDK\nDESCRIPTION: Method to check whether a user has opted out of data tracking and cookies/localStorage for the current Mixpanel instance, with optional configuration parameters.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nvar has_opted_out = mixpanel.has_opted_out_tracking();\n// use has_opted_out value\n```\n\n----------------------------------------\n\nTITLE: Registering Super Properties with Custom Library in Mixpanel Wrapper\nDESCRIPTION: Shows how to use a custom command ('register') with a specific library name to set super properties. This example registers an 'Account Type' property with the value 'Free'.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/src/loaders/mixpanel-js-wrapper.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nwindow._mixpanel(\n    'my_mixpanel.register',\n    {'Account Type': 'Free'}\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Values from Lists with mixpanel.people.remove in JavaScript\nDESCRIPTION: Removes a specific value from a list-valued property on a user profile. This is useful when you need to update a list by removing particular items while maintaining the rest of the list.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.people.remove('School', 'UCB');\n```\n\n----------------------------------------\n\nTITLE: Deleting User Profiles with mixpanel.people.delete_user in JavaScript\nDESCRIPTION: Permanently deletes the current people analytics profile from Mixpanel using the current distinct_id. This removes all data stored about the current user from Mixpanel's database.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// remove the all data you have stored about the current user\nmixpanel.people.delete_user();\n```\n\n----------------------------------------\n\nTITLE: Unsetting User Profile Properties with mixpanel.people.unset in JavaScript\nDESCRIPTION: Permanently removes properties and their values from a user profile. You can unset a single property by name or unset multiple properties at once by passing an array of property names.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.people.unset('gender');\n\n// or unset multiple properties at once\nmixpanel.people.unset(['gender', 'Company']);\n```\n\n----------------------------------------\n\nTITLE: Removing Properties from Groups with mixpanel.group.remove in JavaScript\nDESCRIPTION: Removes a specific value from a property on a group. This is useful for updating list-valued properties by removing particular items. The value will be ignored if it doesn't exist in the property.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.get_group('company', 'mixpanel').remove('Location', 'London');\n```\n\n----------------------------------------\n\nTITLE: Using Mixpanel Push Method in JavaScript\nDESCRIPTION: This snippet shows how to use the push() method in Mixpanel, which maintains the standard async-array-push behavior after the library is loaded. It's useful for external integrations that don't rely on Mixpanel's convenience methods.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.push(['register', { a: 'b' }]);\n```\n\n----------------------------------------\n\nTITLE: Clearing Opt-in/out Tracking Status in Mixpanel JavaScript SDK\nDESCRIPTION: This method clears a user's opt-in/out status for data tracking and cookies/localStorage. It can be called with or without configuration options.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// clear user's opt-in/out status\nmixpanel.clear_opt_in_out_tracking();\n\n// clear user's opt-in/out status with specific cookie configuration - should match\n// configuration used when opt_in_tracking/opt_out_tracking methods were called.\nmixpanel.clear_opt_in_out_tracking({\n    cookie_expiration: 30,\n    secure_cookie: true\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Groups with mixpanel.group.delete in JavaScript\nDESCRIPTION: Permanently deletes a group from Mixpanel. After calling this method, the group and all its data will be removed from Mixpanel's database. This operation cannot be undone.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.get_group('company', 'mixpanel').delete();\n```\n\n----------------------------------------\n\nTITLE: Chaining Aliases in Mixpanel JavaScript SDK\nDESCRIPTION: Demonstration of how aliases can be chained in Mixpanel, creating a chain of ID mappings that all point to the same user identifier.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.alias('new_id', 'existing_id');\n// chain newer_id - new_id - existing_id\nmixpanel.alias('newer_id', 'new_id');\n```\n\n----------------------------------------\n\nTITLE: Invalid Alias Usage Example in Mixpanel JavaScript SDK\nDESCRIPTION: This example demonstrates an invalid usage of aliases where a single alias tries to point to multiple identifiers, which is not supported in Mixpanel.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/readme.io/javascript-full-api-reference.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmixpanel.alias('new_id', 'existing_id');\n// this is invalid as 'new_id' already points to 'existing_id'\nmixpanel.alias('new_id', 'newer_id');\n```\n\n----------------------------------------\n\nTITLE: Generating Namespace Documentation Template with EJS\nDESCRIPTION: An EJS template that iterates through API namespaces and their methods to generate structured Markdown documentation including method descriptions, usage examples, arguments, and return values.\nSOURCE: https://github.com/mixpanel/mixpanel-js/blob/master/doc/template.md#2025-04-20_snippet_0\n\nLANGUAGE: ejs\nCODE:\n```\n<% for (const namespace of namespaces) { %>\n# <%= namespace.name %>\n\n<% for (const item of namespace.items) { %>\n___\n## <%= item.name %>\n<%= item.description %>\n<% if (item.usage)  { %>\n### Usage:\n<%= item.usage %><% } %>\n<% if (item.notes)  { %>\n### Notes:\n<%= item.notes %><% } %><% if (item.arguments.length) { %>\n\n| Argument | Type | Description |\n| ------------- | ------------- | ----- |<% for (const arg of item.arguments) { %>\n| **<%= arg.name %>** | <span class=\"mp-arg-type\"><%= arg.types %></span></br></span><% if (arg.required) { %><span class=\"mp-arg-required\">required</span><% } else { %><span class=\"mp-arg-optional\">optional</span><% } %> | <%= arg.description %> |<% } %><% } %><% if (item.returns.length) { %>\n#### Returns:\n| Type | Description |\n| ----- | ------------- |<% for (const ret of item.returns) { %>\n| <span class=\"mp-arg-type\"><%= ret.types %></span> | <%= ret.description %> |<% } %><% } %>\n\n<% } %>\n<% } %>\n```"
  }
]