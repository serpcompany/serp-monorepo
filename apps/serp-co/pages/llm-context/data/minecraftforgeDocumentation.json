[
  {
    "owner": "minecraftforge",
    "repo": "documentation",
    "content": "TITLE: Using RegistryObject References in Minecraft Forge\nDESCRIPTION: Shows how to create and use RegistryObject to reference registered game objects, including both standard Forge registries and custom registries.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/registries.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryObject<Item> BOW = RegistryObject.create(ResourceLocation.withDefaultNamespace(\"bow\"), ForgeRegistries.ITEMS);\n\n// assume that 'neomagicae:mana_type' is a valid registry, and 'neomagicae:coffeinum' is a valid object within that registry\npublic static final RegistryObject<ManaType> COFFEINUM = RegistryObject.create(ResourceLocation.fromNamespaceAndPath(\"neomagicae\", \"coffeinum\"), ResourceLocation.fromNamespaceAndPath(\"neomagicae\", \"mana_type\"), \"neomagicae\");\n```\n\n----------------------------------------\n\nTITLE: Registering Data Providers for Model Generation in Minecraft Forge\nDESCRIPTION: This code snippet demonstrates how to register data providers for generating item models and block states in Minecraft Forge. It uses the GatherDataEvent to add providers to the DataGenerator.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    DataGenerator gen = event.getGenerator();\n    ExistingFileHelper efh = event.getExistingFileHelper();\n\n    gen.addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        output -> new MyItemModelProvider(output, MOD_ID, efh)\n    );\n    gen.addProvider(\n        event.includeClient(),\n        output -> new MyBlockStateProvider(output, MOD_ID, efh)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Capability Reference with CapabilityManager in Java\nDESCRIPTION: Demonstrates how to obtain a capability reference using CapabilityManager#get with a CapabilityToken. This pattern maintains soft dependencies while preserving generic type information.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/capabilities.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic static final Capability<IItemHandler> ITEM_HANDLER = CapabilityManager.get(new CapabilityToken<>(){});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Creative Tabs in Minecraft Forge (Java)\nDESCRIPTION: Shows how to register a custom CreativeModeTab using DeferredRegister. The example demonstrates setting the tab's title, icon, and default items. The tab is built using a builder pattern with various customization methods.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/items/index.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Assume we have a DeferredRegister<CreativeModeTab> called REGISTRAR\n// Assume we have RegistryObject<Item> and RegistryObject<Block> called ITEM and BLOCK\npublic static final RegistryObject<CreativeModeTab> EXAMPLE_TAB = REGISTRAR.register(\"example\", () -> CreativeModeTab.builder()\n  // Set name of tab to display\n  .title(Component.translatable(\"item_group.\" + MOD_ID + \".example\"))\n  // Set icon of creative tab\n  .icon(() -> new ItemStack(ITEM.get()))\n  // Add default items to tab\n  .displayItems((params, output) -> {\n    output.accept(ITEM.get());\n    output.accept(BLOCK.get());\n  })\n  .build()\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Multipart Block States with MultiPartBlockStateBuilder in Minecraft Forge (Java)\nDESCRIPTION: Demonstrates how to use MultiPartBlockStateBuilder to create a complex redstone wire block state with conditional model rendering based on multiple property conditions. This example shows different model parts that are displayed based on connection states.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// In some BlockStateProvider#registerStatesAndModels\n\n// Redstone Wire\nthis.getMultipartBuilder(REDSTONE) // Get multipart builder\n  .part() // Create part\n    .modelFile(redstoneDot) // Can show 'redstoneDot'\n    .addModel() // 'redstoneDot' is displayed when...\n    .useOr() // At least one of these conditions are true\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, NONE) // true when WEST_REDSTONE is NONE\n      .condition(EAST_REDSTONE, NONE) // true when EAST_REDSTONE is NONE\n      .condition(SOUTH_REDSTONE, NONE) // true when SOUTH_REDSTONE is NONE\n      .condition(NORTH_REDSTONE, NONE) // true when NORTH_REDSTONE is NONE\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide0) // Can show 'redstoneSide0'\n    .addModel() // 'redstoneSide0' is displayed when...\n    .condition(NORTH_REDSTONE, SIDE, UP) // NORTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt0) // Can show 'redstoneSideAlt0'\n    .addModel() // 'redstoneSideAlt0' is displayed when...\n    .condition(SOUTH_REDSTONE, SIDE, UP) // SOUTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt1) // Can show 'redstoneSideAlt1'\n    .rotationY(270) // Rotates 'redstoneSideAlt1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSideAlt1' is displayed when...\n    .condition(EAST_REDSTONE, SIDE, UP) // EAST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide1) // Can show 'redstoneSide1'\n    .rotationY(270) // Rotates 'redstoneSide1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSide1' is displayed when...\n    .condition(WEST_REDSTONE, SIDE, UP) // WEST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(NORTH_REDSTONE, UP) // NORTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(90) // Rotates 'redstoneUp' 90 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(EAST_REDSTONE, UP) // EAST_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(180) // Rotates 'redstoneUp' 180 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(SOUTH_REDSTONE, UP) // SOUTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(270) // Rotates 'redstoneUp' 270 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(WEST_REDSTONE, UP) // WEST_REDSTONE is UP\n    .end(); // Finish part\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Minecraft Forge mods.toml File\nDESCRIPTION: Example configuration of a mods.toml file that defines mod metadata, dependencies, and loading behavior. Shows required fields like modLoader, loaderVersion, and modId along with optional properties like displayName and description.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/modfiles.md#2025-04-06_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmodLoader=\"javafml\"\nloaderVersion=\"[52,)\"\n\nlicense=\"All Rights Reserved\"\nissueTrackerURL=\"https://github.com/MinecraftForge/MinecraftForge/issues\"\nshowAsResourcePack=false\nclientSideOnly=false\n\n[[mods]]\n  modId=\"examplemod\"\n  version=\"1.0.0.0\"\n  displayName=\"Example Mod\"\n  updateJSONURL=\"https://files.minecraftforge.net/net/minecraftforge/forge/promotions_slim.json\"\n  displayURL=\"https://minecraftforge.net\"\n  logoFile=\"logo.png\"\n  credits=\"I'd like to thank my mother and father.\"\n  authors=\"Author\"\n  description='''\n  Lets you craft dirt into diamonds. This is a traditional mod that has existed for eons. It is ancient. The holy Notch created it. Jeb rainbowfied it. Dinnerbone made it upside down. Etc.\n  '''\n  displayTest=\"MATCH_VERSION\"\n\n[[dependencies.examplemod]]\n  modId=\"forge\"\n  mandatory=true\n  versionRange=\"[52,)\"\n  ordering=\"NONE\"\n  side=\"BOTH\"\n\n[[dependencies.examplemod]]\n  modId=\"minecraft\"\n  mandatory=true\n  versionRange=\"[1.21.1,)\"\n  ordering=\"NONE\"\n  side=\"BOTH\"\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Existing Creative Tabs in Minecraft Forge (Java)\nDESCRIPTION: Demonstrates how to add items to the existing 'Ingredients' creative tab by subscribing to the BuildCreativeModeTabContentsEvent on the mod event bus. Shows how to accept both items and blocks as tab entries.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/items/index.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Registered on the MOD event bus\n// Assume we have RegistryObject<Item> and RegistryObject<Block> called ITEM and BLOCK\n@SubscribeEvent\npublic void buildContents(BuildCreativeModeTabContentsEvent event) {\n  // Add to ingredients tab\n  if (event.getTabKey() == CreativeModeTabs.INGREDIENTS) {\n    event.accept(ITEM);\n    event.accept(BLOCK); // Takes in an ItemLike, assumes block has registered item\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IEntityAdditionalSpawnData Interface in Java\nDESCRIPTION: This interface allows adding extra data to the entity spawn packet. Implement writeSpawnData and readSpawnData methods to control how data is encoded to and decoded from the network buffer.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/networking/entities.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class MyEntity implements IEntityAdditionalSpawnData {\n    @Override\n    public void writeSpawnData(PacketBuffer buffer) {\n        // Write spawn data to buffer\n    }\n\n    @Override\n    public void readSpawnData(PacketBuffer additionalData) {\n        // Read spawn data from buffer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Blocks using DeferredRegister in Minecraft Forge\nDESCRIPTION: Demonstrates how to register a custom block using DeferredRegister, the recommended registration method. Shows initialization of DeferredRegister, creating a registry object, and registering it with the mod event bus.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/registries.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, MODID);\n\npublic static final RegistryObject<Block> ROCK_BLOCK = BLOCKS.register(\"rock\", () -> new Block(BlockBehaviour.Properties.of().mapColor(MapColor.STONE)));\n\npublic ExampleMod(FMLJavaModLoadingContext context) {\n  BLOCKS.register(context.getModEventBus());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Objects using RegisterEvent in Minecraft Forge\nDESCRIPTION: Shows how to register multiple blocks using the RegisterEvent method. This event-based approach allows registering objects by providing the registry key, name, and object instance.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/registries.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SubscribeEvent\npublic void register(RegisterEvent event) {\n  event.register(ForgeRegistries.Keys.BLOCKS,\n    helper -> {\n      helper.register(ResourceLocation.fromNamespaceAndPath(MODID, \"example_block_1\"), new Block(...));\n      helper.register(ResourceLocation.fromNamespaceAndPath(MODID, \"example_block_2\"), new Block(...));\n      helper.register(ResourceLocation.fromNamespaceAndPath(MODID, \"example_block_3\"), new Block(...));\n      // ...\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu for a Mob in Java for Minecraft Forge\nDESCRIPTION: This snippet shows how to implement a menu for a mob by overriding Mob#mobInteract and implementing the MenuProvider interface. It handles both client and server-side interactions.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic class MyMob extends Mob implements MenuProvider {\n  // ...\n\n  @Override\n  public InteractionResult mobInteract(Player player, InteractionHand hand) {\n    if (!this.level.isClientSide && player instanceof ServerPlayer serverPlayer) {\n      serverPlayer.openMenu(this);\n    }\n    return InteractionResult.sidedSuccess(this.level.isClientSide);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default BlockState in Minecraft Forge\nDESCRIPTION: Shows how to register a default BlockState for a block in the constructor. This example is from DoorBlock and sets default values for various properties.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blocks/states.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nthis.registerDefaultState(\n  this.stateDefinition.any()\n    .setValue(FACING, Direction.NORTH)\n    .setValue(OPEN, false)\n    .setValue(HINGE, DoorHingeSide.LEFT)\n    .setValue(POWERED, false)\n    .setValue(HALF, DoubleBlockHalf.LOWER)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Block Properties in Java\nDESCRIPTION: Demonstrates how to create and configure a Block instance using BlockBehaviour$Properties. This snippet shows various methods to set block properties such as strength, sound, light level, and friction.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blocks/index.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nBlock myBlock = new Block(BlockBehaviour$Properties.of()\n    .strength(1.5f, 6.0f) // hardness and resistance\n    .sound(SoundType.STONE)\n    .lightLevel((state) -> 15) // light emission\n    .friction(0.98f) // slipperiness\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Shaped Recipes with ShapedRecipeBuilder in Minecraft Forge\nDESCRIPTION: Shows how to use ShapedRecipeBuilder to generate shaped crafting recipes, including pattern definition and item requirements.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nShapedRecipeBuilder builder = ShapedRecipeBuilder.shaped(RecipeCategory.MISC, result)\n  .pattern(\"a a\") // Create recipe pattern\n  .define('a', item) // Define what the symbol represents\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Registering BlockEntityType in Minecraft Forge\nDESCRIPTION: Demonstrates how to register a BlockEntityType using DeferredRegister and create a BlockEntity constructor.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blockentities/index.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// For some DeferredRegister<BlockEntityType<?>> REGISTER\npublic static final RegistryObject<BlockEntityType<MyBE>> MY_BE = REGISTER.register(\"mybe\", () -> BlockEntityType.Builder.of(MyBE::new, validBlocks).build(null));\n\n// In MyBE, a BlockEntity subclass\npublic MyBE(BlockPos pos, BlockState state) {\n  super(MY_BE.get(), pos, state);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Ticking BlockEntity in Minecraft Forge\nDESCRIPTION: Demonstrates how to implement a ticking BlockEntity by overriding the getTicker method and creating a tick function.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blockentities/index.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Inside some Block subclass\n@Nullable\n@Override\npublic <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState state, BlockEntityType<T> type) {\n  return type == MyBlockEntityTypes.MYBE.get() ? MyBlockEntity::tick : null;\n}\n\n// Inside MyBlockEntity\npublic static void tick(Level level, BlockPos pos, BlockState state, MyBlockEntity blockEntity) {\n  // Do stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Configuration Value with Comments\nDESCRIPTION: Example of creating a configuration value with comments using the define method on a ForgeConfigSpec.Builder.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/config.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// For some ForgeConfigSpec$Builder builder\nConfigValue<T> value = builder.comment(\"Comment\")\n  .define(\"config_value_name\", defaultValue);\n```\n\n----------------------------------------\n\nTITLE: Initializing SimpleChannel in Java for Minecraft Forge\nDESCRIPTION: Creates a SimpleChannel instance for network communication with protocol version checking. Sets up the basic network infrastructure for mod packet handling.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/networking/simpleimpl.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static final String PROTOCOL_VERSION = \"1\";\npublic static final SimpleChannel INSTANCE = NetworkRegistry.newSimpleChannel(\n  ResourceLocation.fromNamespaceAndPath(\"mymodid\", \"main\"),\n  () -> PROTOCOL_VERSION,\n  PROTOCOL_VERSION::equals,\n  PROTOCOL_VERSION::equals\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Basic Item Model with ItemModelProvider\nDESCRIPTION: Demonstrates how to generate a simple item model JSON using ItemModelProvider's basicItem method. This creates an item model that parents from 'minecraft:item/generated' and uses a texture at 'layer0'.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In some ItemModelProvider#registerModels\n\n// Will generate 'assets/<modid>/models/item/example_item.json'\n// Parent will be 'minecraft:item/generated'\n// For the texture key 'layer0'\n//  It will be at 'assets/<modid>/textures/item/example_item.png'\nthis.basicItem(EXAMPLE_ITEM.get());\n```\n\n----------------------------------------\n\nTITLE: Implementing RecipeSerializer in a Custom Recipe Class\nDESCRIPTION: Example of how to implement the getSerializer method in a custom recipe class to return the appropriate RecipeSerializer. Uses a RegistryObject to reference the registered RecipeSerializer.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/custom.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// For some RegistryObject<RecipeSerializer> EXAMPLE_SERIALIZER\n// In ExampleRecipe\n@Override\npublic RecipeSerializer<?> getSerializer() {\n  return EXAMPLE_SERIALIZER.get();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Event Handlers in Minecraft Forge\nDESCRIPTION: Demonstrates how to create event handlers for both mod bus and forge bus events. Shows implementation of direct event listener registration using IEventBus methods.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/events.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In the main mod class ExampleMod\n\n// This event is on the mod bus\nprivate void modEventHandler(RegisterEvent event) {\n\t// Do things here\n}\n\n// This event is on the forge bus\nprivate static void forgeEventHandler(AttachCapabilitiesEvent<Entity> event) {\n\t// ...\n}\n\n// In the mod constructor\nmodEventBus.addListener(this::modEventHandler);\nforgeEventBus.addGenericListener(Entity.class, ExampleMod::forgeEventHandler);\n```\n\n----------------------------------------\n\nTITLE: Creating Block State Variants with PropertyMapping\nDESCRIPTION: Shows how to create a BlockState JSON with different variants based on the AXIS property. Different models are assigned to each axis value, with rotation and weighting applied appropriately.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In some BlockStateProvider#registerStatesAndModels\n\n// EXAMPLE_BLOCK_1: Has Property BlockStateProperties#AXIS\nthis.getVariantBuilder(EXAMPLE_BLOCK_1) // Get variant builder\n  .partialState() // Construct partial state\n  .with(AXIS, Axis.Y) // When BlockState AXIS = Y\n    .modelForState() // Set models when AXIS = Y\n    .modelFile(yModelFile1) // Can show 'yModelFile1'\n    .nextModel() // Adds another model when AXIS = Y\n    .modelFile(yModelFile2) // Can show 'yModelFile2'\n    .weight(2) // Will show 'yModelFile2' 2/3 of the time\n    .addModel() // Finalizes models when AXIS = Y\n  .with(AXIS, Axis.Z) // When BlockState AXIS = Z\n    .modelForState() // Set models when AXIS = Z\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .addModel() // Finalizes models when AXIS = Z\n  .with(AXIS, Axis.X)  // When BlockState AXIS = X\n    .modelForState() // Set models when AXIS = X\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .rotationY(90) // Rotates 'hModelFile' 90 degrees on the Y axis\n    .addModel(); // Finalizes models when AXIS = X\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic KeyMapping with Default Keyboard Input in Minecraft Forge\nDESCRIPTION: Shows how to create a basic KeyMapping with a keyboard input using GLFW key constants. The mapping is assigned to the miscellaneous category in the Controls menu.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew KeyMapping(\n  \"key.examplemod.example1\", // Will be localized using this translation key\n  InputConstants.Type.KEYSYM, // Default mapping is on the keyboard\n  GLFW.GLFW_KEY_P, // Default key is P\n  \"key.categories.misc\" // Mapping will be in the misc category\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Capability with @AutoRegisterCapability in Java\nDESCRIPTION: Demonstrates how to register a capability using the @AutoRegisterCapability annotation on the capability interface.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/capabilities.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@AutoRegisterCapability\npublic interface IExampleCapability {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Data in BlockEntity in Minecraft Forge\nDESCRIPTION: Shows the methods to override for saving and loading data in a BlockEntity.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blockentities/index.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nBlockEntity#saveAdditional(CompoundTag tag)\n\nBlockEntity#load(CompoundTag tag)\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Loot Modifier Generation in Minecraft Forge\nDESCRIPTION: Shows two key implementations for Global Loot Modifiers: registering a provider with the DataGenerator via GatherDataEvent, and adding a specific modifier with conditions in the GlobalLootModifierProvider. The example demonstrates setting up a weather-dependent loot modifier.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/glm.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new MyGlobalLootModifierProvider(output, MOD_ID)\n    );\n}\n\n// In some GlobalLootModifierProvider#start\nthis.add(\"example_modifier\", new ExampleModifier(\n  new LootItemCondition[] {\n    WeatherCheck.weather().setRaining(true).build() // Executes when raining\n  },\n  \"val1\",\n  10,\n  Items.DIRT\n));\n```\n\n----------------------------------------\n\nTITLE: Implementing and Loading SavedData in Minecraft Forge\nDESCRIPTION: Demonstrates how to create, load, and attach a SavedData implementation to a game level. The example shows the pattern for persisting data in a .dat file within a dimension's data folder, specifically for the Nether dimension.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/saveddata.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In some class\npublic ExampleSavedData create() {\n  return new ExampleSavedData();\n}\n\npublic ExampleSavedData load(CompoundTag tag) {\n  ExampleSavedData data = this.create();\n  // Load saved data\n  return data;\n}\n\n// In some method within the class\nnetherDataStorage.computeIfAbsent(this::load, this::create, \"example\");\n```\n\n----------------------------------------\n\nTITLE: Registering BlockEntity Types in Minecraft Forge\nDESCRIPTION: Demonstrates registration of BlockEntityType using a Builder pattern, showing how to register factory classes for block entities.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/registries.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryObject<BlockEntityType<ExampleBlockEntity>> EXAMPLE_BLOCK_ENTITY = REGISTER.register(\n  \"example_block_entity\", () -> BlockEntityType.Builder.of(ExampleBlockEntity::new, EXAMPLE_BLOCK.get()).build(null)\n);\n```\n\n----------------------------------------\n\nTITLE: ContainerData Implementation for Multiple Integer Synchronization\nDESCRIPTION: Demonstrates how to implement ContainerData for synchronizing multiple integer values between server and client in a menu.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// Client menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory, new SimpleContainerData(3));\n}\n\n// Server menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory, ContainerData dataMultiple) {\n  // Check if the ContainerData size is some fixed value\n  checkContainerDataCount(dataMultiple, 3);\n\n  // Add data slots for handled integers\n  this.addDataSlots(dataMultiple);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Configuration with ForgeConfigSpec and Class\nDESCRIPTION: Example of creating a configuration by using ForgeConfigSpec.Builder#configure with a static block and a class constructor to hold configuration values.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/config.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In some config class\nExampleConfig(ForgeConfigSpec.Builder builder) {\n  // Define values here in final fields\n}\n\n// Somewhere the constructor is accessible\nstatic {\n  Pair<ExampleConfig, ForgeConfigSpec> pair = new ForgeConfigSpec.Builder()\n    .configure(ExampleConfig::new);\n  // Store pair values in some constant field\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Packets to Different Targets in Minecraft Forge\nDESCRIPTION: Examples of sending packets to various targets including individual players, chunk tracking players, and all connected players.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/networking/simpleimpl.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Send to one player\nINSTANCE.send(PacketDistributor.PLAYER.with(serverPlayer), new MyMessage());\n\n// Send to all players tracking this level chunk\nINSTANCE.send(PacketDistributor.TRACKING_CHUNK.with(levelChunk), new MyMessage());\n\n// Send to all connected players\nINSTANCE.send(PacketDistributor.ALL.noArg(), new MyMessage());\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Criteria Trigger Instance in Java\nDESCRIPTION: This Java code snippet shows how to create a custom AbstractCriterionTriggerInstance subclass for a custom advancement criteria trigger. It includes constructor, static factory method, JSON serialization, and condition matching.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/advancements.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleTriggerInstance extends AbstractCriterionTriggerInstance {\n  public ExampleTriggerInstance(ContextAwarePredicate player, ItemPredicate item) {\n    super(ID, player);\n    // Store the item condition that must be met\n  }\n\n  public static ExampleTriggerInstance instance(ContextAwarePredicate player, ItemPredicate item) {\n    return new ExampleTriggerInstance(player, item);\n  }\n\n  @Override\n  public JsonObject serializeToJson(SerializationContext context) {\n    JsonObject obj = super.serializeToJson(context);\n    // Write conditions to json\n    return obj;\n  }\n\n  public boolean matches(ItemStack stack) {\n    // Since ItemPredicate matches a stack, a stack is the input\n    return this.item.matches(stack);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Container Screen in Java\nDESCRIPTION: Shows how to register an AbstractContainerScreen with a menu type using MenuScreens.register within the FMLClientSetupEvent.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Event is listened to on the mod event bus\nprivate void clientSetup(FMLClientSetupEvent event) {\n    event.enqueueWork(\n        // Assume RegistryObject<MenuType<MyMenu>> MY_MENU\n        // Assume MyContainerScreen<MyMenu> which takes in three parameters\n        () -> MenuScreens.register(MY_MENU.get(), MyContainerScreen::new)\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering MenuType with MenuSupplier in Java\nDESCRIPTION: Shows how to register a MenuType using a MenuSupplier and implement the basic menu constructor. The MenuSupplier creates menus dynamically with container ID and player inventory parameters.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// For some DeferredRegister<MenuType<?>> REGISTER\npublic static final RegistryObject<MenuType<MyMenu>> MY_MENU = REGISTER.register(\"my_menu\", () -> new MenuType(MyMenu::new, FeatureFlags.DEFAULT_FLAGS));\n\n// In MyMenu, an AbstractContainerMenu subclass\npublic MyMenu(int containerId, Inventory playerInv) {\n  super(MY_MENU.get(), containerId);\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Language File Structure in JSON\nDESCRIPTION: Example of a language file (en_us.json) showing the structure for translating item, block and command names. The file must be located at assets/[namespace]/lang/[locale].json and encoded in UTF-8.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/internationalization.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"item.examplemod.example_item\": \"Example Item Name\",\n  \"block.examplemod.example_block\": \"Example Block Name\",\n  \"commands.examplemod.examplecommand.error\": \"Example Command Errored!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Menu Constructor Pattern Implementation\nDESCRIPTION: Shows the basic pattern for implementing both client and server menu constructors in a menu class, ensuring proper initialization on both sides.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Client menu constructor\npublic MyMenu(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory);\n}\n\n// Server menu constructor\npublic MyMenu(int containerId, Inventory playerInventory) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Capability using RegisterCapabilitiesEvent in Java\nDESCRIPTION: Demonstrates how to register a custom capability using the RegisterCapabilitiesEvent. This event handler registers the capability type class with Forge's capability system.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/capabilities.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@SubscribeEvent\npublic void registerCaps(RegisterCapabilitiesEvent event) {\n  event.register(IExampleCapability.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Datapack Registry Object Lookup and Reference\nDESCRIPTION: Demonstrates how to look up and reference other datapack registry objects using HolderGetter and register placed features with dependencies on configured features.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/datapackregistries.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final ResourceKey<ConfiguredFeature<?, ?>> EXAMPLE_CONFIGURED_FEATURE = ResourceKey.create(\n  Registries.CONFIGURED_FEATURE,\n  ResourceLocation.fromNamespaceAndPath(MOD_ID, \"example_configured_feature\")\n);\n\npublic static final ResourceKey<PlacedFeature> EXAMPLE_PLACED_FEATURE = ResourceKey.create(\n  Registries.PLACED_FEATURE,\n  ResourceLocation.fromNamespaceAndPath(MOD_ID, \"example_placed_feature\")\n);\n\n// In some constant location or argument\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -> {\n    // Register configured features here\n    bootstrap.register(\n      // The resource key for the configured feature\n      EXAMPLE_CONFIGURED_FEATURE,\n      new ConfiguredFeature(/* ... */)\n    );\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -> {\n    // Register placed features here\n\n    // Get configured feature registry\n    HolderGetter<ConfiguredFeature<?, ?>> configured = bootstrap.lookup(Registries.CONFIGURED_FEATURE);\n\n    bootstrap.register(\n      // The resource key for the placed feature\n      EXAMPLE_PLACED_FEATURE,\n      new PlacedFeature(\n        configured.getOrThrow(EXAMPLE_CONFIGURED_FEATURE), // Get the configured feature\n        List.of() // and do nothing to the placement location\n      )\n    )\n  });\n```\n\n----------------------------------------\n\nTITLE: Opening a Menu with SimpleMenuProvider in Java for Minecraft Forge\nDESCRIPTION: This snippet shows how to open a menu using ServerPlayer#openMenu with a SimpleMenuProvider. It demonstrates creating a menu provider with a method reference and a translatable component for the menu title.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// In some implementation\nserverPlayer.openMenu(new SimpleMenuProvider(\n  (containerId, playerInventory, player) -> new MyMenu(containerId, playerInventory),\n  Component.translatable(\"menu.title.examplemod.mymenu\")\n));\n```\n\n----------------------------------------\n\nTITLE: Creating ParticleOptions in Java for Minecraft Forge\nDESCRIPTION: Shows how to implement ParticleOptions, which represents the data for each particle. It includes methods for getting the particle type and writing data to network and string.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/particles.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomParticleOptions implements ParticleOptions {\n    @Override\n    public ParticleType<?> getType() {\n        // Return the particle type\n    }\n\n    @Override\n    public void writeToNetwork(FriendlyByteBuf buffer) {\n        // Write particle data to buffer\n    }\n\n    @Override\n    public String writeToString() {\n        // Convert particle data to string\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Named Render Types in Java\nDESCRIPTION: Example of registering custom render types using the RegisterNamedRenderTypesEvent in Forge. This event handler defines two custom render types: 'special_cutout' and 'special_translucent', with appropriate render types for chunk and entity rendering.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/rendertypes.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void onRegisterNamedRenderTypes(RegisterNamedRenderTypesEvent event)\n{\n  event.register(\"special_cutout\", RenderType.cutout(), Sheets.cutoutBlockSheet());\n  event.register(\"special_translucent\", RenderType.translucent(), Sheets.translucentCullBlockSheet(), Sheets.translucentItemSheet());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleCriterionTrigger in Java\nDESCRIPTION: This Java code snippet demonstrates how to implement a SimpleCriterionTrigger subclass for a custom advancement criteria trigger. It includes methods for creating instances from JSON, triggering the criteria, and checking conditions.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/advancements.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleTrigger extends SimpleCriterionTrigger<ExampleTriggerInstance> {\n  @Override\n  public ExampleTriggerInstance createInstance(JsonObject json, ContextAwarePredicate player, DeserializationContext context) {\n    // Read conditions from JSON: item\n    return new ExampleTriggerInstance(player, item);\n  }\n\n  public void trigger(ServerPlayer player, ItemStack stack) {\n    this.trigger(player,\n      triggerInstance -> triggerInstance.matches(stack)\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Menu for a Block in Java for Minecraft Forge\nDESCRIPTION: This snippet demonstrates how to implement a menu for a block by overriding BlockBehaviour#use and BlockBehaviour#getMenuProvider. It handles both client and server-side interactions.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// In some Block subclass\n@Override\npublic MenuProvider getMenuProvider(BlockState state, Level level, BlockPos pos) {\n  return new SimpleMenuProvider(/* ... */);\n}\n\n@Override\npublic InteractionResult use(BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult result) {\n  if (!level.isClientSide && player instanceof ServerPlayer serverPlayer) {\n    serverPlayer.openMenu(state.getMenuProvider(level, pos));\n  }\n  return InteractionResult.sidedSuccess(level.isClientSide);\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Block Tags to Item Tags in Minecraft Forge\nDESCRIPTION: This snippet illustrates how to use the copy method in ItemTagsProvider to generate item tags with the same entries as block tags.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/tags.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//In ItemTagsProvider#addTags\nthis.copy(EXAMPLE_BLOCK_TAG, EXAMPLE_ITEM_TAG);\n```\n\n----------------------------------------\n\nTITLE: Implementing ParticleType in Java for Minecraft Forge\nDESCRIPTION: Demonstrates how to create a ParticleType, which is the registry object defining a particle type. It includes implementing the required #codec method.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/particles.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomParticleType extends ParticleType<CustomParticleOptions> {\n    public CustomParticleType(boolean overrideLimiter, ParticleOptions.Deserializer<CustomParticleOptions> deserializer) {\n        super(overrideLimiter, deserializer);\n    }\n\n    @Override\n    public Codec<CustomParticleOptions> codec() {\n        // Implement codec logic here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing a Capability in a BlockEntity in Java\nDESCRIPTION: Shows how to expose a capability from a BlockEntity by overriding getCapability and invalidateCaps methods. The example demonstrates proper lifecycle management with LazyOptional.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/capabilities.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Somewhere in your BlockEntity subclass\nLazyOptional<IItemHandler> inventoryHandlerLazyOptional;\n\n// Supplied instance (e.g. () -> inventoryHandler)\n// Ensure laziness as initialization should only happen when needed\ninventoryHandlerLazyOptional = LazyOptional.of(inventoryHandlerSupplier);\n\n@Override\npublic <T> LazyOptional<T> getCapability(Capability<T> cap, Direction side) {\n  if (cap == ForgeCapabilities.ITEM_HANDLER) {\n    return inventoryHandlerLazyOptional.cast();\n  }\n  return super.getCapability(cap, side);\n}\n\n@Override\npublic void invalidateCaps() {\n  super.invalidateCaps();\n  inventoryHandlerLazyOptional.invalidate();\n}\n```\n\n----------------------------------------\n\nTITLE: Ticking Screen Elements in Minecraft Forge\nDESCRIPTION: Shows how to implement the tick method in a screen to update elements like EditBox for cursor blinking. This method is called each frame to perform client-side logic.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\n@Override\npublic void tick() {\n    super.tick();\n\n    // Add ticking logic for EditBox in editBox\n    this.editBox.tick();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DatapackBuiltinEntriesProvider with Event Handler\nDESCRIPTION: Sets up a DatapackBuiltinEntriesProvider by subscribing to the GatherDataEvent. This provider handles datapack registry object generation for server-side data.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/datapackregistries.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new DatapackBuiltinEntriesProvider(\n          output,\n          event.getLookupProvider(),\n          // The builder containing the datapack registry objects to generate\n          new RegistrySetBuilder().add(/* ... */),\n          // Set of mod ids to generate the datapack registry objects of\n          Set.of(MOD_ID)\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Particle Rendering in Java for Minecraft Forge\nDESCRIPTION: Demonstrates how to create a Particle class that handles rendering logic. It includes implementing the required render and getRenderType methods.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/particles.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomParticle extends Particle {\n    public CustomParticle(ClientLevel level, double x, double y, double z) {\n        super(level, x, y, z);\n    }\n\n    @Override\n    public void render(VertexConsumer buffer, Camera renderInfo, float partialTicks) {\n        // Implement rendering logic\n    }\n\n    @Override\n    public ParticleRenderType getRenderType() {\n        return ParticleRenderType.PARTICLE_SHEET_OPAQUE;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Loot Table Generation\nDESCRIPTION: Basic implementation of the generate method in a BlockLootSubProvider subclass for adding loot tables.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void generate() {\n  // Add loot tables here\n}\n```\n\n----------------------------------------\n\nTITLE: Using IConditionBuilder for Conditional Recipes in Minecraft Forge\nDESCRIPTION: Shows how to implement IConditionBuilder to simplify adding conditions to conditional recipes without manually constructing condition instances.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// In ConditionalRecipe$Builder#addCondition\n(\n  // If either 'examplemod:example_item'\n  // OR 'examplemod:example_item2' exists\n  // AND\n  // NOT FALSE\n\n  // Methods are defined by IConditionBuilder\n  and( \n    or(\n      itemExists(\"examplemod\", \"example_item\"),\n      itemExists(\"examplemod\", \"example_item2\")\n    ),\n    not(\n      FALSE()\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Event Subscription Examples in Minecraft Forge\nDESCRIPTION: Demonstrates two approaches for subscribing to mod lifecycle events: using the @EventBusSubscriber annotation and subscribing directly in the mod constructor. Shows handling of the CommonSetupEvent in both cases.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/lifecycle.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@Mod.EventBusSubscriber(modid = \"mymod\", bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class MyModEventSubscriber {\n  @SubscribeEvent\n  static void onCommonSetup(FMLCommonSetupEvent event) { ... }\n}\n\n@Mod(\"mymod\")\npublic class MyMod {\n  public MyMod(FMLModLoadingContext context) {\n    context.getModEventBus().addListener(this::onCommonSetup);\n  } \n\n  private void onCommonSetup(FMLCommonSetupEvent event) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ParticleProvider in Java for Minecraft Forge\nDESCRIPTION: Demonstrates how to register a ParticleProvider using the RegisterParticleProvidersEvent. This should be done on the client side only.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/particles.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Mod.EventBusSubscriber(modid = \"mymod\", value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class ClientSetup {\n    @SubscribeEvent\n    public static void registerParticles(RegisterParticleProvidersEvent event) {\n        event.registerSpecial(MyParticleTypes.CUSTOM_PARTICLE, new CustomParticleProvider());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stonecutting Recipes with SingleItemRecipeBuilder in Minecraft Forge\nDESCRIPTION: Demonstrates how to use SingleItemRecipeBuilder to generate stonecutting recipes and other single-item recipes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nSingleItemRecipeBuilder builder = SingleItemRecipeBuilder.stonecutting(input, RecipeCategory.MISC, result)\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Model Loaders in Minecraft Forge (Java)\nDESCRIPTION: Shows how to use custom model loaders with ModelBuilder. This example demonstrates the OBJ model loader implementation that specifies a model location and texture mappings.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// For some BlockModelBuilder builder\nbuilder.customLoader(ObjModelBuilder::begin) // Custom loader 'forge:obj'\n  .modelLocation(modLoc(\"models/block/model.obj\")) // Set the OBJ model location\n  .flipV(true) // Flips the V coordinate in the supplied .mtl texture\n  .end() // Finish custom loader configuration\n.texture(\"particle\", mcLoc(\"block/dirt\")) // Set particle texture to dirt\n.texture(\"texture0\", mcLoc(\"block/dirt\")); // Set 'texture0' texture to dirt\n```\n\n----------------------------------------\n\nTITLE: Either Codec Implementation\nDESCRIPTION: Demonstrates implementation of a codec that can handle two different types of encoding/decoding.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<Either<Integer, String>> EITHER_CODEC = Codec.either(\n  Codec.INT,\n  Codec.STRING\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Encoded Either$Left<Integer, String>\n5\n\n// Encoded Either$Right<Integer, String>\n\"value\"\n```\n\n----------------------------------------\n\nTITLE: Client-Side Packet Handler Implementation in Minecraft Forge\nDESCRIPTION: Shows the implementation of client-side packet handling using DistExecutor for physical client verification. Ensures packets are processed only on the client side.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/networking/simpleimpl.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In Packet class\npublic static void handle(MyClientMessage msg, Supplier<NetworkEvent.Context> ctx) {\n  ctx.get().enqueueWork(() ->\n    // Make sure it's only executed on the physical client\n    DistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> () -> ClientPacketHandlerClass.handlePacket(msg, ctx))\n  );\n  ctx.get().setPacketHandled(true);\n}\n\n// In ClientPacketHandlerClass\npublic static void handlePacket(MyClientMessage msg, Supplier<NetworkEvent.Context> ctx) {\n  // Do stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Recipe Class with Record in Java\nDESCRIPTION: Example implementation of a custom Recipe using Java record syntax. The recipe contains an Ingredient input, an integer data value, and an ItemStack output.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/custom.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic record ExampleRecipe(Ingredient input, int data, ItemStack output) implements Recipe<Container> {\n  // Implement methods here\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shapeless Recipes with ShapelessRecipeBuilder in Minecraft Forge\nDESCRIPTION: Demonstrates the use of ShapelessRecipeBuilder to generate shapeless crafting recipes with specified ingredients.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nShapelessRecipeBuilder builder = ShapelessRecipeBuilder.shapeless(RecipeCategory.MISC, result)\n  .requires(item) // Add item to the recipe\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Profiler Sections in Minecraft Mod Code\nDESCRIPTION: Code snippet demonstrating how to create custom profiling sections in mod code using the ProfilerFiller interface. The snippet shows the push/pop pattern required to properly measure execution time of code blocks.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/debugprofiler.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nProfilerFiller#push(yourSectionName : String);\n//The code you want to profile\nProfilerFiller#pop();\n```\n\n----------------------------------------\n\nTITLE: Creating ParticleProvider in Java for Minecraft Forge\nDESCRIPTION: Shows how to implement a ParticleProvider, which is a factory for creating particles. It includes the createParticle method for instantiating particles.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/particles.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class CustomParticleProvider implements ParticleProvider<CustomParticleOptions> {\n    @Override\n    public Particle createParticle(CustomParticleOptions options, ClientLevel level, double x, double y, double z, double xSpeed, double ySpeed, double zSpeed) {\n        return new CustomParticle(level, x, y, z);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Model Overrides in JSON\nDESCRIPTION: Example configuration for vanilla JSON item model overrides. Shows how to define multiple property predicates and their corresponding model targets. Each override contains a predicate map with property names and minimum values, along with the target model location.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelloaders/itemoverrides.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Inside a vanilla JSON item model\n  \"overrides\": [\n    {\n      // This is an ItemOverride\n      \"predicate\": {\n        // This is the Map<ResourceLocation, Float>, containing the names of properties and their minimum values\n        \"example1:prop\": 0.5\n      },\n      // This is the 'location', or target model, of the override, which is used if the predicate above matches\n      \"model\": \"example1:item/model\"\n    },\n    {\n      // This is another ItemOverride\n      \"predicate\": {\n        \"example2:prop\": 1\n      },\n      \"model\": \"example2:item/model\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing BlockEntity Data on Block Update in Minecraft Forge\nDESCRIPTION: Shows how to implement methods for synchronizing BlockEntity data on block updates.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blockentities/index.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic CompoundTag getUpdateTag() {\n  CompoundTag tag = new CompoundTag();\n  //Write your data into the tag\n  return tag;\n}\n\n@Override\npublic Packet<ClientGamePacketListener> getUpdatePacket() {\n  // Will get tag from #getUpdateTag\n  return ClientboundBlockEntityDataPacket.create(this);\n}\n\n// Can override IForgeBlockEntity#onDataPacket. By default, this will defer to the #load.\n```\n\n----------------------------------------\n\nTITLE: Implementing IContainerFactory for Enhanced Menu Creation\nDESCRIPTION: Demonstrates creating a MenuType using IContainerFactory to handle additional data through FriendlyByteBuf, allowing for extra information transfer between server and client.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// For some DeferredRegister<MenuType<?>> REGISTER\npublic static final RegistryObject<MenuType<MyMenuExtra>> MY_MENU_EXTRA = REGISTER.register(\"my_menu_extra\", () -> IForgeMenuType.create(MyMenu::new));\n\n// In MyMenuExtra, an AbstractContainerMenu subclass\npublic MyMenuExtra(int containerId, Inventory playerInv, FriendlyByteBuf extraData) {\n  super(MY_MENU_EXTRA.get(), containerId);\n  // Store extra data from buffer\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Data Loading Structure in Minecraft Forge\nDESCRIPTION: JSON structure for conditionally loading recipes or advancements based on specified conditions. The system evaluates each condition set sequentially until it finds one that passes all checks.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  // The type needs to be specified for recipes as they can have custom serializers\n  // Advancements do not need this type\n  \"type\": \"forge:conditional\",\n  \n  \"recipes\": [ // Or 'advancements' for Advancements\n    {\n      // The conditions to check\n      \"conditions\": [\n        // Conditions in the list are ANDed together\n        {\n          // Condition 1\n        },\n        {\n          // Condition 2\n        }\n      ],\n      \"recipe\": { // Or 'advancement' for Advancements\n        // The recipe to use if all conditions succeed\n      }\n    },\n    {\n      // Next condition to check if the previous fails\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing quickMoveStack Method in Java for Minecraft Forge Menu\nDESCRIPTION: This snippet demonstrates the implementation of the quickMoveStack method, which handles shift-clicking items between inventory slots. It includes logic for moving items between data inventory, player inventory, and hotbar slots.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic ItemStack quickMoveStack(Player player, int quickMovedSlotIndex) {\n  // The quick moved slot stack\n  ItemStack quickMovedStack = ItemStack.EMPTY;\n  // The quick moved slot\n  Slot quickMovedSlot = this.slots.get(quickMovedSlotIndex) \n  \n   // If the slot is in the valid range and the slot is not empty\n  if (quickMovedSlot != null && quickMovedSlot.hasItem()) {\n    // Get the raw stack to move\n    ItemStack rawStack = quickMovedSlot.getItem(); \n    // Set the slot stack to a copy of the raw stack\n    quickMovedStack = rawStack.copy();\n\n    /*\n    The following quick move logic can be simplified to if in data inventory,\n    try to move to player inventory/hotbar and vice versa for containers\n    that cannot transform data (e.g. chests).\n    */\n\n    // If the quick move was performed on the data inventory result slot\n    if (quickMovedSlotIndex == 0) {\n      // Try to move the result slot into the player inventory/hotbar\n      if (!this.moveItemStackTo(rawStack, 5, 41, true)) {\n        // If cannot move, no longer quick move\n        return ItemStack.EMPTY;\n      }\n\n      // Perform logic on result slot quick move\n      slot.onQuickCraft(rawStack, quickMovedStack);\n    }\n    // Else if the quick move was performed on the player inventory or hotbar slot\n    else if (quickMovedSlotIndex >= 5 && quickMovedSlotIndex < 41) {\n      // Try to move the inventory/hotbar slot into the data inventory input slots\n      if (!this.moveItemStackTo(rawStack, 1, 5, false)) {\n        // If cannot move and in player inventory slot, try to move to hotbar\n        if (quickMovedSlotIndex < 32) {\n          if (!this.moveItemStackTo(rawStack, 32, 41, false)) {\n            // If cannot move, no longer quick move\n            return ItemStack.EMPTY;\n          }\n        }\n        // Else try to move hotbar into player inventory slot\n        else if (!this.moveItemStackTo(rawStack, 5, 32, false)) {\n          // If cannot move, no longer quick move\n          return ItemStack.EMPTY;\n        }\n      }\n    }\n    // Else if the quick move was performed on the data inventory input slots, try to move to player inventory/hotbar\n    else if (!this.moveItemStackTo(rawStack, 5, 41, false)) {\n      // If cannot move, no longer quick move\n      return ItemStack.EMPTY;\n    }\n\n    if (rawStack.isEmpty()) {\n      // If the raw stack has completely moved out of the slot, set the slot to the empty stack\n      quickMovedSlot.set(ItemStack.EMPTY);\n    } else {\n      // Otherwise, notify the slot that that the stack count has changed\n      quickMovedSlot.setChanged();\n    }\n\n    /*\n    The following if statement and Slot#onTake call can be removed if the\n    menu does not represent a container that can transform stacks (e.g.\n    chests).\n    */\n    if (rawStack.getCount() == quickMovedStack.getCount()) {\n      // If the raw stack was not able to be moved to another slot, no longer quick move\n      return ItemStack.EMPTY;\n    }\n    // Execute logic on what to do post move with the remaining stack\n    quickMovedSlot.onTake(player, rawStack);\n  }\n\n  return quickMovedStack; // Return the slot stack\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Java Mod Entrypoint using @Mod Annotation\nDESCRIPTION: This code shows how to create a Java entrypoint for a Forge mod using the @Mod annotation with the javafml language loader. The class constructor receives the FMLJavaModLoadingContext, which provides access to the mod event bus for registering events and DeferredRegisters.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/modfiles.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Mod(\"examplemod\") // Must match mods.toml\npublic class Example {\n\n  public Example(FMLJavaModLoadingContext context) {\n    // Initialize logic here\n    var modBus = context.getModEventBus();\n\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Container Screen Labels in Java\nDESCRIPTION: Implementation of the label rendering method for container screens, demonstrating how to render text components above the background.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected void renderLabels(GuiGraphics graphics, int mouseX, int mouseY) {\n    super.renderLabels(graphics, mouseX, mouseY);\n\n    // Assume we have some Component 'label'\n    // 'label' is drawn at 'labelX' and 'labelY'\n    graphics.drawString(this.font, this.label, this.labelX, this.labelY, 0x404040);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking KeyMapping Activation During Client Tick in Minecraft Forge\nDESCRIPTION: Shows how to check if a key mapping has been clicked during gameplay by listening to ClientTickEvent on the Forge event bus and using the consumeClick method in a while loop.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Event is on the Forge event bus only on the physical client\npublic void onClientTick(ClientTickEvent event) {\n  if (event.phase == TickEvent.Phase.END) { // Only call code once as the tick event is called twice every tick\n    while (EXAMPLE_MAPPING.get().consumeClick()) {\n      // Execute logic to perform on click here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Game Test Method in Java\nDESCRIPTION: Creates a simple Game Test method using the @GameTest annotation. The method takes a GameTestHelper parameter and doesn't return anything.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleGameTests {\n  @GameTest\n  public static void exampleTest(GameTestHelper helper) {\n    // Do stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BakedModel#applyTransform in Java for Minecraft Forge\nDESCRIPTION: This method is part of the Forge transform system for BakedModels. It takes an ItemDisplayContext, PoseStack, and a boolean for left-hand rendering, returning a BakedModel to be rendered. This method allows for more flexibility than the vanilla transform system.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelloaders/transform.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nBakedModel#applyTransform(ItemDisplayContext context, PoseStack poseStack, boolean leftHand)\n```\n\n----------------------------------------\n\nTITLE: Instance Event Handler with @SubscribeEvent Annotation\nDESCRIPTION: Shows how to create an instance-level event handler using the @SubscribeEvent annotation for handling EntityItemPickupEvent.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/events.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyForgeEventHandler {\n\t@SubscribeEvent\n\tpublic void pickupItem(EntityItemPickupEvent event) {\n\t\tSystem.out.println(\"Item picked up!\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Game Test Method with Annotations in Java\nDESCRIPTION: Demonstrates how to configure a Game Test method using the @GameTest annotation parameters, including setup time and required status.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In some class\n@GameTest(\n  setupTicks = 20L, // The test spends 20 ticks to set up for execution\n  required = false // The failure is logged but does not affect the execution of the batch\n)\npublic static void exampleConfiguredTest(GameTestHelper helper) {\n  // Do stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Smithing Transform Recipes in Minecraft Forge\nDESCRIPTION: Shows how to use SmithingTransformRecipeBuilder to create smithing recipes that transform items.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nSmithingTransformRecipeBuilder builder = SmithingTransformRecipeBuilder.smithing(template, base, addition, RecipeCategory.MISC, result)\n  .unlocks(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer, name); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Implementing RecipeType in a Custom Recipe Class\nDESCRIPTION: Example of how to implement the getType method in a custom recipe class to return the appropriate RecipeType. Uses a RegistryObject to reference the registered RecipeType.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/custom.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// For some RegistryObject<RecipeType> EXAMPLE_TYPE\n// In ExampleRecipe\n@Override\npublic RecipeType<?> getType() {\n  return EXAMPLE_TYPE.get();\n}\n```\n\n----------------------------------------\n\nTITLE: Static Event Handler Implementation\nDESCRIPTION: Demonstrates creating a static event handler using @SubscribeEvent annotation for handling ArrowNockEvent.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/events.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class MyStaticForgeEventHandler {\n\t@SubscribeEvent\n\tpublic static void arrowNocked(ArrowNockEvent event) {\n\t\tSystem.out.println(\"Arrow nocked!\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tags in Java Code\nDESCRIPTION: Examples of creating and using tags in Java code, including creating tag keys for different registry types and checking if objects belong to specific tags.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tags.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final TagKey<Item> myItemTag = ItemTags.create(ResourceLocation.fromNamespaceAndPath(\"mymod\", \"myitemgroup\"));\n\npublic static final TagKey<Potion> myPotionTag = ForgeRegistries.POTIONS.tags().createTagKey(ResourceLocation.fromNamespaceAndPath(\"mymod\", \"mypotiongroup\"));\n\npublic static final TagKey<VillagerType> myVillagerTypeTag = TagKey.create(Registries.VILLAGER_TYPE, ResourceLocation.fromNamespaceAndPath(\"mymod\", \"myvillagertypegroup\"));\n\n// In some method:\n\nItemStack stack = /*...*/;\nboolean isInItemGroup = stack.is(myItemTag);\n\nPotion potion = /*...*/;\nboolean isInPotionGroup  = ForgeRegistries.POTIONS.tags().getTag(myPotionTag).contains(potion);\n\nResourceKey<VillagerType> villagerTypeKey = /*...*/;\nboolean isInVillagerTypeGroup = BuiltInRegistries.VILLAGER_TYPE.getHolder(villagerTypeKey).map(holder -> holder.is(myVillagerTypeTag)).orElse(false);\n```\n\n----------------------------------------\n\nTITLE: Rendering Container Screen Background in Java\nDESCRIPTION: Implementation of the background rendering method for container screens, showing how to set up and render the background texture using resource location.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// In some AbstractContainerScreen subclass\n\n// The location of the background texture (assets/<namespace>/<path>)\nprivate static final ResourceLocation BACKGROUND_LOCATION = new ResourceLocation(MOD_ID, \"textures/gui/container/my_container_screen.png\");\n\n@Override\nprotected void renderBg(GuiGraphics graphics, float partialTick, int mouseX, int mouseY) {\n    /*\n     * Renders the background texture to the screen. 'leftPos' and\n     * 'topPos' should already represent the top left corner of where\n     * the texture should be rendered as it was precomputed from the\n     * 'imageWidth' and 'imageHeight'. The two zeros represent the\n     * integer u/v coordinates inside the 256 x 256 PNG file.\n     */\n    graphics.blit(BACKGROUND_LOCATION, this.leftPos, this.topPos, 0, 0, this.imageWidth, this.imageHeight);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Ingredient Serializer in Java\nDESCRIPTION: Shows how to register a custom ingredient serializer using the RegisterEvent or FMLCommonSetupEvent.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/ingredients.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// In some serializer class\npublic static final ExampleIngredientSerializer INSTANCE = new ExampleIngredientSerializer();\n\n// In some handler class\npublic void registerSerializers(RegisterEvent event) {\n  event.register(ForgeRegistries.Keys.RECIPE_SERIALIZERS,\n    helper -> CraftingHelper.register(registryName, INSTANCE)\n  );\n}\n\n// In some ingredient subclass\n@Override\npublic IIngredientSerializer<? extends Ingredient> getSerializer() {\n  return INSTANCE;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Objects and Tags to a Tag in Minecraft Forge\nDESCRIPTION: This code demonstrates how to add objects and other tags to a tag using the TagAppender in a TagProvider subclass. It also shows how to remove objects from a tag.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/tags.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In some TagProvider#addTags\nthis.tag(EXAMPLE_TAG)\n  .add(EXAMPLE_OBJECT) // Adds an object to the tag\n  .addOptional(ResourceLocation.fromNamespaceAndPath(\"othermod\", \"other_object\")) // Adds an object from another mod to the tag\n\nthis.tag(EXAMPLE_TAG_2)\n  .addTag(EXAMPLE_TAG) // Adds a tag to the tag\n  .remove(EXAMPLE_OBJECT) // Removes an object from this tag\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Trigger in Java\nDESCRIPTION: This Java code snippet shows how to call a custom advancement criteria trigger when a specific action is performed. It demonstrates the integration of the custom trigger into game logic.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/advancements.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic void performExampleAction(ServerPlayer player, ItemStack stack) {\n  // Run code to perform action\n  EXAMPLE_CRITERIA_TRIGGER.trigger(player, stack);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding RecipeProvider to DataGenerator in Minecraft Forge\nDESCRIPTION: Demonstrates how to add a custom RecipeProvider to the DataGenerator for server-side data generation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        MyRecipeProvider::new\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding with NbtOps in Java\nDESCRIPTION: Shows how to use NbtOps to encode Java objects to NBT Tags and decode Tags back to Java objects.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Let exampleCodec represent a Codec<ExampleJavaObject>\n// Let exampleObject be a ExampleJavaObject\n// Let exampleNbt be a Tag\n\n// Encode Java object to Tag\nexampleCodec.encodeStart(JsonOps.INSTANCE, exampleObject);\n\n// Decode Tag into Java object\nexampleCodec.parse(JsonOps.INSTANCE, exampleNbt);\n```\n\n----------------------------------------\n\nTITLE: Implementing Loot Modifier Class in Java\nDESCRIPTION: Example implementation of a LootModifier subclass that defines the modification logic for loot drops. Includes constructor for conditions and properties, and methods for applying modifications.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/glm.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleModifier extends LootModifier {\n\n  public ExampleModifier(LootItemCondition[] conditionsIn, String prop1, int prop2, Item prop3) {\n    super(conditionsIn);\n    // Store the rest of the parameters\n  }\n\n  @NotNull\n  @Override\n  protected ObjectArrayList<ItemStack> doApply(ObjectArrayList<ItemStack> generatedLoot, LootContext context) {\n    // Modify the loot and return the new drops\n  }\n\n  @Override\n  public Codec<? extends IGlobalLootModifier> codec() {\n    // Return the codec used to encode and decode this modifier\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Container Screen Main Method in Java\nDESCRIPTION: Implementation of the main render method for container screens, showing how to render background, call super implementation, and add tooltips.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTick) {\n    this.renderBackground(graphics);\n    super.render(graphics, mouseX, mouseY, partialTick);\n\n    /*\n     * This method is added by the container screen to render\n     * the tooltip of the hovered slot.\n     */\n    this.renderTooltip(graphics, mouseX, mouseY);\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Between NBT and JSON Formats in Java\nDESCRIPTION: Demonstrates how to convert between different encoded formats using DynamicOps, specifically converting from NBT Tag to JsonElement.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Convert Tag to JsonElement\n// Let exampleTag be a Tag\nJsonElement convertedJson = NbtOps.INSTANCE.convertTo(JsonOps.INSTANCE, exampleTag);\n```\n\n----------------------------------------\n\nTITLE: Defining and Using EntityDataAccessor in Java\nDESCRIPTION: This snippet demonstrates how to define and use EntityDataAccessor for synchronizing entity data. It includes creating a static final field, defining synched data, and getting/setting values.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/networking/entities.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class MyEntity extends Entity {\n    private static final EntityDataAccessor<Integer> DATA_PARAM =\n        SynchedEntityData.defineId(MyEntity.class, EntityDataSerializers.INT);\n\n    @Override\n    protected void defineSynchedData() {\n        super.defineSynchedData();\n        this.entityData.define(DATA_PARAM, 0);\n    }\n\n    public void setData(int value) {\n        this.entityData.set(DATA_PARAM, value);\n    }\n\n    public int getData() {\n        return this.entityData.get(DATA_PARAM);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Legacy Metadata Usage in Java for Minecraft Blocks\nDESCRIPTION: Demonstrates the old metadata system for storing block properties using a switch statement. This approach was confusing and limited, as the numbers had no inherent meaning.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blocks/states.md#2025-04-06_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nswitch (meta) {\n  case 0: { ... } // south and on the lower half of the block\n  case 1: { ... } // south on the upper side of the block\n  case 2: { ... } // north and on the lower half of the block\n  case 3: { ... } // north and on the upper half of the block\n  // ... etc. ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DifferenceIngredient in JSON\nDESCRIPTION: Demonstrates creating an ingredient that matches one ingredient but excludes another using the forge:difference type.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/ingredients.md#2025-04-06_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"forge:difference\",\n  \"base\": {\n    // Ingredient the stack is in\n  },\n  \"subtracted\": {\n    // Ingredient the stack is NOT in\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Screen Subclass in Minecraft Forge\nDESCRIPTION: Creates a basic Screen subclass by implementing the constructor that takes in a Component parameter which represents the title of the screen. This title component is used for screen narration in accessibility features.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\npublic MyScreen(Component title) {\n    super(title);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Custom Tag in JSON\nDESCRIPTION: Example of declaring a custom tag in JSON format, demonstrating how to specify values, handle optional entries, and use the 'replace' option.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tags.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"replace\": false,\n  \"values\": [\n    \"minecraft:gold_ingot\",\n    \"mymod:my_ingot\",\n    {\n      \"id\": \"othermod:ingot_other\",\n      \"required\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recipe Unlocking Advancement in JSON\nDESCRIPTION: Shows how to define a recipe advancement using JSON for unlocking recipes in the Recipe Book. This snippet demonstrates how to set up the criteria and requirements for a recipe to be unlocked.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/index.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Within some recipe advancement json\n\"has_the_recipe\": { // Criteria label\n  // Succeeds if examplemod:example_recipe is used\n  \"trigger\": \"minecraft:recipe_unlocked\",\n  \"conditions\": {\n    \"recipe\": \"examplemod:example_recipe\"\n  }\n}\n//...\n\"requirements\": [\n  [\n    \"has_the_recipe\"\n    // ... Other criteria labels to be ORed against to unlock recipe\n  ]\n]\n```\n\n----------------------------------------\n\nTITLE: Menu Access Validation Implementation\nDESCRIPTION: Demonstrates implementing menu access validation using ContainerLevelAccess to check if a player can access the menu based on their proximity to the block.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Client menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory, ContainerLevelAccess.NULL);\n}\n\n// Server menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory, ContainerLevelAccess access) {\n  // ...\n}\n\n// Assume this menu is attached to RegistryObject<Block> MY_BLOCK\n@Override\npublic boolean stillValid(Player player) {\n  return AbstractContainerMenu.stillValid(this.access, player, MY_BLOCK.get());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering ForgeAdvancementProvider in Minecraft Forge Mod\nDESCRIPTION: This snippet shows how to register a ForgeAdvancementProvider with the DataGenerator during the GatherDataEvent. It sets up the provider to run only when server data is being generated and includes multiple sub-providers.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/advancements.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new ForgeAdvancementProvider(\n          output,\n          event.getLookupProvider(),\n          event.getExistingFileHelper(),\n          // Sub providers which generate the advancements\n          List.of(subProvider1, subProvider2, /*...*/)\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Recipes in Minecraft Forge\nDESCRIPTION: Demonstrates how to use ConditionalRecipe.Builder to generate conditional recipes with multiple conditions and recipes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nConditionalRecipe.builder()\n  // Add the conditions for the recipe\n  .addCondition(...)\n  // Add recipe to return when conditions are true\n  .addRecipe(...)\n\n  // Add the next conditions for the next recipe\n  .addCondition(...)\n  // Add next recipe to return when the next conditions are true\n  .addRecipe(...)\n\n  // Create conditional advancement which uses the conditions\n  // and unlocking advancement in the recipes above\n  .generateAdvancement()\n  .build(writer, name);\n```\n\n----------------------------------------\n\nTITLE: Rendering Screen Elements in Minecraft Forge\nDESCRIPTION: Illustrates the render method implementation for screens, including background rendering, widget rendering, and tooltip handling. This method is responsible for drawing all screen elements each frame.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\n\n// mouseX and mouseY indicate the scaled coordinates of where the cursor is in on the screen\n@Override\npublic void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTick) {\n    // Background is typically rendered first\n    this.renderBackground(graphics);\n\n    // Render things here before widgets (background textures)\n\n    // Then the widgets if this is a direct child of the Screen\n    super.render(graphics, mouseX, mouseY, partialTick);\n\n    // Render things after widgets (tooltips)\n}\n```\n\n----------------------------------------\n\nTITLE: Using DistExecutor for Side-Specific Code Execution in Java\nDESCRIPTION: Demonstrates how to use DistExecutor to run methods on specific physical sides (client or server) in Minecraft modding. It shows both unsafe and safe variants for running and calling methods.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/sides.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In a client class: ExampleClass\npublic static void unsafeRunMethodExample(Object param1, Object param2) {\n  // ...\n}\n\npublic static Object safeCallMethodExample() {\n  // ...\n}\n\n// In some common class\nDistExecutor.unsafeRunWhenOn(Dist.CLIENT, () -> ExampleClass.unsafeRunMethodExample(var1, var2));\n\nDistExecutor.safeCallWhenOn(Dist.CLIENT, () -> ExampleClass::safeCallMethodExample);\n```\n\n----------------------------------------\n\nTITLE: Defining a Cutout Block Model in JSON\nDESCRIPTION: An example JSON model for a glass block using the cutout render type. This demonstrates how to specify the render_type at the top level of a block model JSON file.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/rendertypes.md#2025-04-06_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"render_type\": \"minecraft:cutout\",\n  \"parent\": \"block/cube_all\",\n  \"textures\": {\n    \"all\": \"block/glass\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AbstractContainerScreen in Minecraft Forge\nDESCRIPTION: Shows how to set up an AbstractContainerScreen subclass, including setting positioning fields for the background texture and labels. This is used for screens directly attached to a menu.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// In some AbstractContainerScreen subclass\npublic MyContainerScreen(MyMenu menu, Inventory playerInventory, Component title) {\n    super(menu, playerInventory, title);\n\n    this.titleLabelX = 10;\n    this.inventoryLabelX = 10;\n\n    /*\n     * If the 'imageHeight' is changed, 'inventoryLabelY' must also be\n     * changed as the value depends on the 'imageHeight' value.\n     */\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Item Model with Property Overrides for Minecraft Forge\nDESCRIPTION: This JSON snippet demonstrates how to define an item model with property overrides. It shows a hypothetical example where an item changes its model when the custom 'power' property reaches 0.75 or higher. The model includes a parent reference, default texture, and conditional model override.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/client/models/itemproperties.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"item/generated\",\n  \"textures\": {\n    // Default\n    \"layer0\": \"examplemod:items/example_partial\"\n  },\n  \"overrides\": [\n    {\n      // power >= .75\n      \"predicate\": {\n        \"examplemod:power\": 0.75\n      },\n      \"model\": \"examplemod:item/example_powered\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BlockLootSubProvider\nDESCRIPTION: Example constructor implementation for BlockLootSubProvider showing how to configure explosion resistance and feature flags.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic MyBlockLootSubProvider() {\n  super(Collections.emptySet(), FeatureFlags.REGISTRY.allFlags());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Tick in Minecraft Forge\nDESCRIPTION: Demonstrates how to implement the containerTick method in an AbstractContainerScreen subclass. This method is called each frame when the player is alive and looking at the screen.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// In some AbstractContainerScreen subclass\n@Override\nprotected void containerTick() {\n    super.containerTick();\n\n    // Tick things here\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BakedModel Methods Documentation\nDESCRIPTION: Documentation for key methods of the BakedModel interface including getOverrides, useAmbientOcclusion, isGui3d, isCustomRenderer, getParticleIcon, getTransforms, applyTransform, and getQuads. Each method's purpose and behavior is detailed with important notes about implementation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelloaders/bakedmodel.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`BakedModel`\n=============\n\n`BakedModel` is the result of calling `UnbakedModel#bake` for the vanilla model loader or `IUnbakedGeometry#bake` for custom model loaders. Unlike `UnbakedModel` or `IUnbakedGeometry`, which purely represents a shape without any concept of items or blocks, `BakedModel` is not as abstract. It represents geometry that has been optimized and reduced to a form where it is (almost) ready to go to the GPU. It can also process the state of an item or block to change the model.\n\nIn a majority of cases, it is not really necessary to implement this interface manually. One can instead use one of the existing implementations.\n```\n\n----------------------------------------\n\nTITLE: Using True/False Conditions in Minecraft Forge\nDESCRIPTION: Simple boolean condition that always returns true or false. These can be used as basic building blocks or for testing conditional loading.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// For some condition\n{\n  // Will always return true (or false for 'forge:false')\n  \"type\": \"forge:true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Persistent BlockEntity Capability in Java\nDESCRIPTION: Shows how to implement a persistent capability for a BlockEntity by overriding the onContentsChanged method of ItemStackHandler to mark the BlockEntity as dirty when its contents change.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/capabilities.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npublic class MyBlockEntity extends BlockEntity {\n\n  private final IItemHandler inventory = new ItemStackHandler(...) {\n    @Override\n    protected void onContentsChanged(int slot) {\n      super.onContentsChanged(slot);\n      setChanged();\n    }\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: BlockEntityRenderer render Method Parameters\nDESCRIPTION: Method signature showing the parameters required for implementing the render method in a BlockEntityRenderer. The method handles rendering of block entities each frame with parameters for the block entity instance, partial tick time, pose stack, buffer source, lighting, and overlay.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blockentities/ber.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nvoid render(BlockEntity blockEntity, float partialTick, PoseStack poseStack, BufferSource bufferSource, int combinedLight, int combinedOverlay)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Banner Pattern in Java\nDESCRIPTION: This code snippet shows how to register a custom banner pattern in Minecraft Forge. It creates a DeferredRegister for banner patterns and registers a new BannerPattern with a unique identifier.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/incode.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate static final DeferredRegister<BannerPattern> REGISTER = DeferredRegister.create(Registries.BANNER_PATTERN, \"examplemod\");\n\n// Takes in the pattern name to send over the network\npublic static final BannerPattern EXAMPLE_PATTERN = REGISTER.register(\"example_pattern\", () -> new BannerPattern(\"examplemod:ep\"));\n```\n\n----------------------------------------\n\nTITLE: Checking KeyMapping for Mouse Input in GUI in Minecraft Forge\nDESCRIPTION: Shows how to check if a key mapping matches mouse input within a Screen subclass by overriding the mouseClicked method and checking against mouse button inputs.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\n@Override\npublic boolean mouseClicked(double x, double y, int button) {\n  if (EXAMPLE_MAPPING.get().isActiveAndMatches(InputConstants.TYPE.MOUSE.getOrCreate(button))) {\n    // Execute logic to perform on mouse click here\n    return true;\n  }\n  return super.mouseClicked(x, y, button);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model Loader Builders in Minecraft Forge (Java)\nDESCRIPTION: Demonstrates how to create a custom model loader builder by extending CustomLoaderBuilder. This example shows the basic structure with a static factory method and constructor setup.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleLoaderBuilder<T extends ModelBuilder<T>> extends CustomLoaderBuilder<T> {\n  public static <T extends ModelBuilder<T>> ExampleLoaderBuilder<T> begin(T parent, ExistingFileHelper existingFileHelper) {\n    return new ExampleLoaderBuilder<>(parent, existingFileHelper);\n  }\n\n  protected ExampleLoaderBuilder(T parent, ExistingFileHelper existingFileHelper) {\n    super(ResourceLocation.fromNamespaceAndPath(MOD_ID, \"example_loader\"), parent, existingFileHelper);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Codec Implementation\nDESCRIPTION: Demonstrates how to create a codec that supplies an in-code value and encodes to nothing.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<IForgeRegistry<Block>> UNIT_CODEC = Codec.unit(\n  () -> ForgeRegistries.BLOCKS // Can also be a raw value\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Nothing here, will return block registry codec\n```\n\n----------------------------------------\n\nTITLE: Menu Data Synchronization Implementation\nDESCRIPTION: Shows how to implement data synchronization in a menu using ItemHandler slots and DataSlots for both client and server sides.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/menus.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Client menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory) {\n  this(containerId, playerInventory, new ItemStackHandler(5), DataSlot.standalone());\n}\n\n// Server menu constructor\npublic MyMenuAccess(int containerId, Inventory playerInventory, IItemHandler dataInventory, DataSlot dataSingle) {\n  // Check if the data inventory size is some fixed value\n  // Then, add slots for data inventory\n  this.addSlot(new SlotItemHandler(dataInventory, /*...*/));\n\n  // Add slots for player inventory\n  this.addSlot(new Slot(playerInventory, /*...*/));\n\n  // Add data slots for handled integers\n  this.addDataSlot(dataSingle);\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ModelProvider Subclass in Minecraft Forge (Java)\nDESCRIPTION: Demonstrates how to create a custom ModelProvider subclass that generates specific types of models. The constructor specifies the output directory and the ModelBuilder type to use.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleModelProvider extends ModelProvider<ExampleModelBuilder> {\n\n  public ExampleModelProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    // Models will be generated to 'assets/<modid>/models/example' if no 'modid' is specified in '#getBuilder'\n    super(output, modid, \"example\", ExampleModelBuilder::new, existingFileHelper);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Other Namespaces in Gradle Buildscript\nDESCRIPTION: Shows how to configure the Gradle buildscript to enable Game Tests from multiple mod namespaces by setting the forge.enabledGameTestNamespaces property.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_7\n\nLANGUAGE: gradle\nCODE:\n```\n// Inside a run configuration\nproperty 'forge.enabledGameTestNamespaces', 'modid1,modid2,modid3'\n```\n\n----------------------------------------\n\nTITLE: Registering LootTableProvider with DataGenerator\nDESCRIPTION: Shows how to register a custom LootTableProvider with the DataGenerator using GatherDataEvent. The provider is configured with sub-providers and optional registry names.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        event.includeServer(),\n        output -> new MyLootTableProvider(\n          output,\n          Collections.emptySet(),\n          List.of(subProvider1, subProvider2, /*...*/)\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using forAllStatesExcept to Ignore BlockState Properties\nDESCRIPTION: Shows how to use forAllStatesExcept to generate block state variants while ignoring certain properties (like WATERLOGGED) that don't affect the model's appearance.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// EXAMPLE_BLOCK_3: Has Properties BlockStateProperties#HORIZONTAL_FACING, BlockStateProperties#WATERLOGGED\nthis.getVariantBuilder(EXAMPLE_BLOCK_3) // Get variant builder\n  .forAllStatesExcept(state -> // For all HORIZONTAL_FACING states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build(), // Creates the array of configured models\n  WATERLOGGED); // Ignores WATERLOGGED property\n```\n\n----------------------------------------\n\nTITLE: Enabling Game Tests in Custom Run Configurations\nDESCRIPTION: Demonstrates how to enable Game Tests in custom run configurations by setting the forge.enableGameTest property to true in the Gradle buildscript.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_8\n\nLANGUAGE: gradle\nCODE:\n```\n// Inside a run configuration\nproperty 'forge.enableGameTest', 'true'\n```\n\n----------------------------------------\n\nTITLE: Initializing Screen Widgets in Minecraft Forge\nDESCRIPTION: Demonstrates how to initialize a screen by adding widgets in the init method. This method is called when the screen is created and when the game window is resized.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\n@Override\nprotected void init() {\n    super.init();\n\n    // Add widgets and precomputed values\n    this.addRenderableWidget(new EditBox(/* ... */));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Model Consumer Provider in Minecraft Forge (Java)\nDESCRIPTION: Shows how to create a custom model consumer provider that uses a ModelProvider to generate models. This example demonstrates the basic structure of such a provider.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleModelConsumerProvider implements IDataProvider {\n\n  public ExampleModelConsumerProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    this.example = new ExampleModelProvider(output, modid, existingFileHelper);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mod Archive Name in Gradle\nDESCRIPTION: Sets the base archive name for the mod in the Gradle build file. This is typically set to the mod's ID.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/index.md#2025-04-06_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\nbase.archivesName = 'mymod'\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-Item Logic for Custom Recipes\nDESCRIPTION: Example of how to implement custom methods for recipes that don't use items, such as block-based recipes. Includes methods for testing validity with blocks and a utility method to find matching recipes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/custom.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// In some Recipe subimplementation ExampleRecipe\n\n// Checks the block at the position to see if it matches the stored data\nboolean matches(Level level, BlockPos pos);\n\n// Creates the block state to set the block at the specified position to\nBlockState assemble(RegistryAccess access);\n\n// In some manager class\npublic Optional<ExampleRecipe> getRecipeFor(Level level, BlockPos pos) {\n  return level.getRecipeManager()\n    .getAllRecipesFor(exampleRecipeType) // Gets all recipes\n    .stream() // Looks through all recipes for types\n    .filter(recipe -> recipe.matches(level, pos)) // Checks if the recipe inputs are valid\n    .findFirst(); // Finds the first recipe whose inputs match\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing run Method for Model Generation in Minecraft Forge (Java)\nDESCRIPTION: Shows the beginning of a run method implementation for a data provider, where models would be generated using the ModelProvider's generateAll method.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// In ExampleModelConsumerProvider\n@Override\npublic CompletableFuture<?> run(CachedOutput cache) {\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Minecraft and Forge Block Tags in Markdown\nDESCRIPTION: Lists of block tags organized in a hierarchical structure showing ore types and sand variants. This includes both Minecraft and Forge-specific tags with their respective block entries.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n    - `minecraft:emerald_ore`\n    - `minecraft:gold_ore`\n    - `minecraft:iron_ore`\n    - `minecraft:lapis_ore`\n    - `minecraft:redstone_ore`\n- `forge:sand`\n    - `minecraft:red_sand`\n    - `minecraft:sand`\n- `forge:sand/colorless`\n    - `minecraft:sand`\n- `forge:sand/red`\n    - `minecraft:red_sand`\n```\n\n----------------------------------------\n\nTITLE: Alternative Capability Exposure with orEmpty Method in Java\nDESCRIPTION: Shows a simplified approach to exposing a single capability using Capability#orEmpty method, which reduces the need for if/else statements when only one capability is being exposed.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/capabilities.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic <T> LazyOptional<T> getCapability(Capability<T> cap, Direction side) {\n  return ForgeCapabilities.ITEM_HANDLER.orEmpty(cap, inventoryHandlerLazyOptional);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Models and Handling CompletableFutures in Minecraft Forge\nDESCRIPTION: This code snippet demonstrates how to populate a model provider, generate models, and handle CompletableFutures for file writing in Minecraft Forge. It shows the process of generating models asynchronously and combining multiple CompletableFutures for efficient execution.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Populate the model provider\nCompletableFuture<?> exampleFutures = this.example.generateAll(cache); // Generate the models\n\n// Run logic and create CompletableFuture(s) for writing files\n// ...\n\n// Assume we have a new CompletableFuture providerFuture\nreturn CompletableFuture.allOf(exampleFutures, providerFuture);\n```\n\n----------------------------------------\n\nTITLE: Minecraft Color Block IDs\nDESCRIPTION: List of Minecraft namespace identifiers for colored block variants organized by color category. Each entry represents a unique colored block type with its full namespace ID.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- `minecraft:cyan_concrete_powder`\n- `minecraft:cyan_glazed_terracotta`\n- `minecraft:cyan_shulker_box`\n[...truncated for brevity...]\n- `c:dyed/orange`\n    - `minecraft:orange_banner`\n    - `minecraft:orange_bed`\n    - `minecraft:orange_candle`\n    - `minecraft:orange_carpet`\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Loot Condition Types in Minecraft Forge\nDESCRIPTION: Example of registering objects for non-Forge registries using DeferredRegister with a custom registry key specification.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/registries.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nprivate static final DeferredRegister<LootItemConditionType> REGISTER = DeferredRegister.create(Registries.LOOT_CONDITION_TYPE, \"examplemod\");\n\npublic static final RegistryObject<LootItemConditionType> EXAMPLE_LOOT_ITEM_CONDITION_TYPE = REGISTER.register(\"example_loot_item_condition_type\", () -> new LootItemConditionType(...));\n```\n\n----------------------------------------\n\nTITLE: Configuring LootTableProvider SubProviderEntry\nDESCRIPTION: Shows how to create and configure a SubProviderEntry with a specific LootContextParamSet for the LootTableProvider constructor.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nnew LootTableProvider.SubProviderEntry(\n  ExampleSubProvider::new,\n  LootContextParamSets.EMPTY\n)\n```\n\n----------------------------------------\n\nTITLE: Emphasizing Text in Markdown\nDESCRIPTION: This snippet demonstrates how to emphasize text using asterisks in Markdown, making the word 'definitive' italicized.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/README.md#2025-04-06_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n*definitive*\n```\n\n----------------------------------------\n\nTITLE: Implementing LootTableSubProvider\nDESCRIPTION: Example implementation of a LootTableSubProvider class that generates loot tables. Shows the basic structure and required method implementation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleSubProvider implements LootTableSubProvider {\n\n  public ExampleSubProvider() {}\n\n  @Override\n  public void generate(BiConsumer<ResourceLocation, LootTable.Builder> writer) {\n    // Generate loot tables here by calling writer#accept\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom BlockTagsProvider in Minecraft Forge\nDESCRIPTION: This snippet shows how to register a custom BlockTagsProvider with the DataGenerator for server-side data generation in a Minecraft Forge mod.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/tags.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        // Extends net.minecraftforge.common.data.BlockTagsProvider\n        output -> new MyBlockTagsProvider(\n          output,\n          event.getLookupProvider(),\n          MOD_ID,\n          event.getExistingFileHelper()\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing getKnownBlocks with DeferredRegister\nDESCRIPTION: Example implementation of getKnownBlocks method using DeferredRegister to supply registered block entries.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n@Override\nprotected Iterable<Block> getKnownBlocks() {\n  return BLOCK_REGISTRAR.getEntries()\n    .stream()\n    .flatMap(RegistryObject::stream)\n    ::iterator;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TagsProvider for RecipeTypes in Minecraft Forge\nDESCRIPTION: This code shows how to create a custom TagsProvider for RecipeTypes by subclassing TagsProvider and specifying the registry key in the constructor.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/tags.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic RecipeTypeTagsProvider(PackOutput output, CompletableFuture<HolderLookup.Provider> registries, ExistingFileHelper fileHelper) {\n  super(output, Registries.RECIPE_TYPE, registries, MOD_ID, fileHelper);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Game Test Generator Method in Java\nDESCRIPTION: Defines a method that generates multiple TestFunction objects dynamically using the @GameTestGenerator annotation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleGameTests {\n  @GameTestGenerator\n  public static Collection<TestFunction> exampleTests() {\n    // Return a collection of TestFunctions\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an IntrinsicHolderTagsProvider for Attributes in Minecraft Forge\nDESCRIPTION: This snippet demonstrates how to create an IntrinsicHolderTagsProvider for Attributes, allowing objects to add themselves to tags using their ResourceKey.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/tags.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// Subtype of `IntrinsicHolderTagsProvider`\npublic AttributeTagsProvider(PackOutput output, CompletableFuture<HolderLookup.Provider> registries, ExistingFileHelper fileHelper) {\n  super(\n    output,\n    ForgeRegistries.Keys.ATTRIBUTES,\n    registries,\n    attribute -> ForgeRegistries.ATTRIBUTES.getResourceKey(attribute).get(),\n    MOD_ID,\n    fileHelper\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Configuration with ForgeConfigSpec\nDESCRIPTION: Example of registering a configuration with a specified type (COMMON) using ModLoadingContext in the mod constructor.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/config.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In the mod constructor with a ForgeConfigSpec CONFIG and FMLJavaModLoadingContext context\ncontext.registerConfig(Type.COMMON, CONFIG);\n```\n\n----------------------------------------\n\nTITLE: Generating Cooking Recipes with SimpleCookingRecipeBuilder in Minecraft Forge\nDESCRIPTION: Shows how to use SimpleCookingRecipeBuilder to create smelting, blasting, smoking, and campfire cooking recipes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nSimpleCookingRecipeBuilder builder = SimpleCookingRecipeBuilder.smelting(input, RecipeCategory.MISC, result, experience, cookingTime)\n  .unlockedBy(\"criteria\", criteria) // How the recipe is unlocked \n  .save(writer); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Defining Advancement Rewards in JSON\nDESCRIPTION: This JSON snippet demonstrates how to specify rewards for completing an advancement. It includes examples of granting experience, loot tables, recipes, and executing a function as rewards.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/advancements.md#2025-04-06_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewards\": {\n    \"experience\": 10,\n    \"loot\": [\n      \"minecraft:example_loot_table\",\n      \"minecraft:example_loot_table2\"\n    ],\n    \"recipes\": [\n      \"minecraft:example_recipe\",\n      \"minecraft:example_recipe2\"\n    ],\n    \"function\": \"minecraft:example_function\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Smithing Trim Recipes in Minecraft Forge\nDESCRIPTION: Demonstrates the use of SmithingTrimRecipeBuilder to generate smithing recipes for armor trims.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nSmithingTrimRecipe builder = SmithingTrimRecipe.smithingTrim(template, base, addition, RecipeCategory.MISC)\n  .unlocks(\"criteria\", criteria) // How the recipe is unlocked\n  .save(writer, name); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Registering Game Tests with @GameTestHolder Annotation in Java\nDESCRIPTION: Demonstrates how to register Game Tests using the @GameTestHolder annotation, specifying the mod ID for proper registration.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@GameTestHolder(MODID)\npublic class ExampleGameTests {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Special Recipes with SpecialRecipeBuilder in Minecraft Forge\nDESCRIPTION: Shows how to use SpecialRecipeBuilder to create empty JSONs for dynamic recipes that cannot be easily constrained to the recipe JSON format.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/recipes.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// In RecipeProvider#buildRecipes(writer)\nSpecialRecipeBuilder.special(dynamicRecipeSerializer)\n  .save(writer, name); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Defining Named Loot Pool in JSON\nDESCRIPTION: Demonstrates how to name a loot pool in a JSON loot table file. Named pools are easier to identify and manage.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/loottables.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"example_pool\",\n  \"rolls\": {\n    // ...\n  },\n  \"entries\": {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ForgeAdvancementProvider$AdvancementGenerator in Minecraft Forge\nDESCRIPTION: This code demonstrates the implementation of the generate method in a ForgeAdvancementProvider$AdvancementGenerator. It takes in registry lookups, a writer for advancements, and an existing file helper to generate advancements.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/advancements.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In some subclass of ForgeAdvancementProvider$AdvancementGenerator or as a lambda reference\n\n@Override\npublic void generate(HolderLookup.Provider registries, Consumer<Advancement> writer, ExistingFileHelper existingFileHelper) {\n  // Build advancements here\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Loot Modifier Codec\nDESCRIPTION: Example of registering a codec for the loot modifier that handles serialization between JSON and Java objects. Uses RecordCodecBuilder to create the codec structure.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/glm.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic static final RegistryObject<Codec<ExampleModifier>> = REGISTRAR.register(\"example_codec\", () ->\n  RecordCodecBuilder.create(\n    inst -> LootModifier.codecStart(inst).and(\n      inst.group(\n        Codec.STRING.fieldOf(\"prop1\").forGetter(m -> m.prop1),\n        Codec.INT.fieldOf(\"prop2\").forGetter(m -> m.prop2),\n        ForgeRegistries.ITEMS.getCodec().fieldOf(\"prop3\").forGetter(m -> m.prop3)\n      )\n    ).apply(inst, ExampleModifier::new)\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Advancements using Advancement$Builder in Minecraft Forge\nDESCRIPTION: This snippet illustrates how to use Advancement$Builder to create and save an advancement. It adds a criterion for unlocking the advancement and saves it with a specified name using the provided writer and file helper.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/advancements.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// In some ForgeAdvancementProvider$AdvancementGenerator#generate(registries, writer, existingFileHelper)\nAdvancement example = Advancement.Builder.advancement()\n  .addCriterion(\"example_criterion\", triggerInstance) // How the advancement is unlocked\n  .save(writer, name, existingFileHelper); // Add data to builder\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Item Properties in Minecraft Forge\nDESCRIPTION: This Java code shows how to register a custom item property for Minecraft items. It demonstrates using FMLClientSetupEvent to register an 'pulling' property that returns 1.0F when a player is using the item and 0.0F otherwise. The code uses ItemProperties.register in a thread-safe manner.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/client/models/itemproperties.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate void setup(final FMLClientSetupEvent event)\n{\n  event.enqueueWork(() ->\n  {\n    ItemProperties.register(ExampleItems.APPLE, \n      ResourceLocation.fromNamespaceAndPath(ExampleMod.MODID, \"pulling\"), (stack, level, living, id) -> {\n        return living != null && living.isUsingItem() && living.getUseItem() == stack ? 1.0F : 0.0F;\n      });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Extended ItemStack Result in Recipe JSON\nDESCRIPTION: Shows how to define a recipe result with extended properties including NBT data. This format allows specifying not just the item and count but also custom NBT data for the resulting item.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/index.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// In some recipe JSON\n\"result\": {\n  // The name of the registry item to give as a result\n  \"item\": \"examplemod:example_item\",\n  // The number of items to return\n  \"count\": 4,\n  // The tag data of the stack, can also be a string\n  \"nbt\": {\n      // Add tag data here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring sounds.json for Minecraft Forge\nDESCRIPTION: Demonstrates how to define sound events in a sounds.json file, including simple sounds and streaming sounds like music. The file shows both basic and advanced configuration options for sound files.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/sounds.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"open_chest\": {\n    \"subtitle\": \"mymod.subtitle.open_chest\",\n    \"sounds\": [ \"mymod:open_chest_sound_file\" ]\n  },\n  \"epic_music\": {\n    \"sounds\": [\n      {\n        \"name\": \"mymod:music/epic_music\",\n        \"stream\": true\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing EntityLootSubProvider\nDESCRIPTION: Example constructor implementation for EntityLootSubProvider showing how to configure feature flags.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/loottables.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic MyEntityLootSubProvider() {\n  super(FeatureFlags.REGISTRY.allFlags());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BEWLR Client Extensions in Java\nDESCRIPTION: Example showing how to initialize a BlockEntityWithoutLevelRenderer for an item by overriding the initializeClient method and implementing IClientItemExtensions. This setup is required to enable custom rendering for items.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/items/bewlr.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In your item class\n@Override\npublic void initializeClient(Consumer<IClientItemExtensions> consumer) {\n  consumer.accept(new IClientItemExtensions() {\n\n    @Override\n    public BlockEntityWithoutLevelRenderer getCustomRenderer() {\n      return myBEWLRInstance;\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Server-Side Packet Handler Implementation in Minecraft Forge\nDESCRIPTION: Demonstrates how to implement a packet handler for server-side packet processing. Includes thread-safe work handling and packet completion notification.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/networking/simpleimpl.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static void handle(MyMessage msg, Supplier<NetworkEvent.Context> ctx) {\n  ctx.get().enqueueWork(() -> {\n    // Work that needs to be thread-safe (most work)\n    ServerPlayer sender = ctx.get().getSender(); // the client that sent this packet\n    // Do stuff\n  });\n  ctx.get().setPacketHandled(true);\n}\n```\n\n----------------------------------------\n\nTITLE: Client-Only Event Handler with @Mod.EventBusSubscriber\nDESCRIPTION: Example of a client-side only static event handler using @Mod.EventBusSubscriber annotation with specific bus and distribution targeting.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/events.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Mod.EventBusSubscriber(modid = \"mymod\", bus = Bus.FORGE, value = Dist.CLIENT)\npublic class MyStaticClientOnlyEventHandler {\n\t@SubscribeEvent\n\tpublic static void drawLast(RenderLevelStageEvent event) {\n\t\tSystem.out.println(\"Drawing!\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Advancement Requirements in JSON\nDESCRIPTION: This snippet demonstrates how to define criteria and requirements for an advancement in JSON format. It shows how to specify multiple criteria and create logical AND/OR conditions for unlocking the advancement.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/advancements.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"criteria\": {\n    \"example_criterion1\": { },\n    \"example_criterion2\": { },\n    \"example_criterion3\": { },\n    \"example_criterion4\": { }\n  },\n  \"requirements\": [\n    [\n      \"example_criterion1\",\n      \"example_criterion2\"\n    ],\n    [\n      \"example_criterion3\",\n      \"example_criterion4\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Condition Serializers in Minecraft Forge\nDESCRIPTION: Java code for registering custom condition serializers. Shows how to create a static instance and register it during the RegisterEvent for RecipeSerializer or FMLCommonSetupEvent.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n// In some serializer class\npublic static final ExampleConditionSerializer INSTANCE = new ExampleConditionSerializer();\n\n// In some handler class\npublic void registerSerializers(RegisterEvent event) {\n  event.register(ForgeRegistries.Keys.RECIPE_SERIALIZERS,\n    helper -> CraftingHelper.register(INSTANCE)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Loot Modifiers JSON\nDESCRIPTION: Example configuration for global_loot_modifiers.json that specifies the list of loot modifiers to be loaded into the game. Must be placed in data/forge/loot_modifiers/global_loot_modifiers.json.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/glm.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"replace\": false, // Must be present\n  \"entries\": [\n    // Represents a loot modifier in 'data/examplemod/loot_modifiers/example_glm.json'\n    \"examplemod:example_glm\",\n    \"examplemod:example_glm2\"\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IntersectionIngredient in JSON\nDESCRIPTION: Shows how to create an ingredient that requires all supplied ingredients to match using the forge:intersection type.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/ingredients.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"forge:intersection\",\n  \"children\": [\n    {\n      // Ingredient 1\n    },\n    {\n      // Ingredient 2\n    }\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Loot Modifier Properties JSON\nDESCRIPTION: Example JSON configuration for a specific loot modifier, defining its type, conditions, and custom properties. Located in data/examplemod/loot_modifiers/example_glm.json.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/glm.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"examplemod:example_loot_modifier\",\n  \"conditions\": [\n    // Normal loot table conditions\n    // ...\n  ],\n  \"prop1\": \"val1\",\n  \"prop2\": 10,\n  \"prop3\": \"minecraft:dirt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CompoundIngredient in JSON\nDESCRIPTION: Demonstrates how to create a compound ingredient that matches if any of the supplied ingredients match. This is used to replace standard ingredient lists in recipes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/ingredients.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\n    // Ingredient\n  },\n  {\n    // Custom ingredient\n    \"type\": \"examplemod:example_ingredient\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Loot Table ID Condition in JSON\nDESCRIPTION: Shows how to use the Forge-specific loot table ID condition in a loot pool or entry. This condition allows items to generate for a specific loot table.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/loottables.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"condition\": \"forge:loot_table_id\",\n      \"loot_table_id\": \"minecraft:blocks/dirt\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PartialNBTIngredient in JSON\nDESCRIPTION: Demonstrates creating an ingredient that matches specific NBT keys on an ItemStack, allowing for partial NBT matching.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/ingredients.md#2025-04-06_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"forge:partial_nbt\",\n  \"item\": \"examplemod:example_item\",\n  \"items\": [\n    \"examplemod:example_item\",\n    \"examplemod:example_item2\"\n    // ...\n  ],\n  \"nbt\": {\n    \"key1\": \"data1\",\n    \"key2\": {\n      // Data 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Can Tool Perform Action Condition in JSON\nDESCRIPTION: Demonstrates the use of Forge's can_tool_perform_action condition in a loot pool or entry. This condition checks if the tool can perform a specific action.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/loottables.md#2025-04-06_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"condition\": \"forge:can_tool_perform_action\",\n      \"action\": \"axe_strip\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Configured Features with BootstrapContext\nDESCRIPTION: Shows how to register configured features using BootstrapContext, including resource key creation and feature configuration setup.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/datapackregistries.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic static final ResourceKey<ConfiguredFeature<?, ?>> EXAMPLE_CONFIGURED_FEATURE = ResourceKey.create(\n  Registries.CONFIGURED_FEATURE,\n  ResourceLocation.fromNamespaceAndPath(MOD_ID, \"example_configured_feature\")\n);\n\n// In some constant location or argument\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -> {\n    // Register configured features here\n    bootstrap.register(\n      // The resource key for the configured feature\n      EXAMPLE_CONFIGURED_FEATURE,\n      new ConfiguredFeature<>(\n        Feature.ORE, // Create an ore feature\n        new OreConfiguration(\n          List.of(), // Does nothing\n          8 // in veins of at most 8\n        )\n      )\n    );\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -> {\n    // Register placed features here\n  });\n```\n\n----------------------------------------\n\nTITLE: Custom Recipe JSON Structure\nDESCRIPTION: Example JSON structure for defining a custom recipe. The 'type' field specifies the registry name of the recipe serializer, and additional fields are specific to the serializer implementation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/custom.md#2025-04-06_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // The custom serializer registry name\n  \"type\": \"examplemod:example_serializer\",\n  \"input\": {\n    // Some ingredient input\n  },\n  \"data\": 0, // Some data wanted for the recipe\n  \"output\": {\n    // Some stack output\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using RecipeWrapper with IItemHandler in Java\nDESCRIPTION: Demonstrates how to use Forge's RecipeWrapper utility class to wrap an IItemHandler for recipe matching. This allows passing item handlers to methods that require a Container parameter.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/index.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// Within some method with IItemHandlerModifiable handler\nrecipeManger.getRecipeFor(RecipeType.CRAFTING, new RecipeWrapper(handler), level);\n```\n\n----------------------------------------\n\nTITLE: Registering a KeyMapping Using RegisterKeyMappingsEvent in Minecraft Forge\nDESCRIPTION: Demonstrates how to lazily initialize and register a key mapping by listening to the RegisterKeyMappingsEvent on the mod event bus. This should only be done on the physical client.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// In some physical client only class\n\n// Key mapping is lazily initialized so it doesn't exist until it is registered\npublic static final Lazy<KeyMapping> EXAMPLE_MAPPING = Lazy.of(() -> /*...*/);\n\n// Event is on the mod event bus only on the physical client\n@SubscribeEvent\npublic void registerBindings(RegisterKeyMappingsEvent event) {\n  event.register(EXAMPLE_MAPPING.get());\n}\n```\n\n----------------------------------------\n\nTITLE: Registering BlockColor Handlers in Minecraft Forge\nDESCRIPTION: This snippet demonstrates how to register BlockColor handlers using the RegisterColorHandlersEvent.Block event. It allows for coloring block textures dynamically based on various conditions.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/client/models/tinting.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@SubscribeEvent\npublic void registerBlockColors(RegisterColorHandlersEvent.Block event){\n  event.register(myBlockColor, coloredBlock1, coloredBlock2, ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KeyMapping with GUI Context and Mouse Input in Minecraft Forge\nDESCRIPTION: Demonstrates creating a KeyMapping that only works in GUI contexts with a mouse button input. The example also shows how to assign the mapping to a custom category.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nnew KeyMapping(\n  \"key.examplemod.example2\",\n  KeyConflictContext.GUI, // Mapping can only be used when a screen is open\n  InputConstants.Type.MOUSE, // Default mapping is on the mouse\n  GLFW.GLFW_MOUSE_BUTTON_LEFT, // Default mouse input is the left mouse button\n  \"key.categories.examplemod.examplecategory\" // Mapping will be in the new example category\n)\n```\n\n----------------------------------------\n\nTITLE: Registering ItemColor Handlers in Minecraft Forge\nDESCRIPTION: This snippet shows how to register ItemColor handlers using the RegisterColorHandlersEvent.Item event. It enables dynamic coloring of item textures, including BlockItems for colored blocks.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/client/models/tinting.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@SubscribeEvent\npublic void registerItemColors(RegisterColorHandlersEvent.Item event){\n  event.register(myItemColor, coloredItem1, coloredItem2, ...);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KeyMapping with Shift Modifier in Minecraft Forge\nDESCRIPTION: Shows how to create a KeyMapping that requires the Shift key to be held while pressing the mapped key (G in this example). The mapping uses the universal conflict context.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nnew KeyMapping(\n  \"key.examplemod.example3\",\n  KeyConflictContext.UNIVERSAL,\n  KeyModifier.SHIFT, // Default mapping requires shift to be held down\n  InputConstants.Type.KEYSYM, // Default mapping is on the keyboard\n  GLFW.GLFW_KEY_G, // Default key is G\n  \"key.categories.misc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using @ObjectHolder Annotation in Java\nDESCRIPTION: Demonstrates various ways to use the @ObjectHolder annotation in a Java class, including proper usage and examples that would produce compile-time exceptions.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/registries.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclass Holder {\n  @ObjectHolder(registryName = \"minecraft:enchantment\", value = \"minecraft:flame\")\n  public static final Enchantment flame = null;     // Annotation present. [public static] is required. [final] is optional.\n                                                    // Registry name is explicitly defined: \"minecraft:enchantment\"\n                                                    // Resource location is explicitly defined: \"minecraft:flame\"\n                                                    // To inject: \"minecraft:flame\" from the [Enchantment] registry\n\n  public static final Biome ice_flat = null;        // No annotation on the field.\n                                                    // Therefore, the field is ignored.\n\n  @ObjectHolder(\"minecraft:creeper\")\n  public static Entity creeper = null;              // Annotation present. [public static] is required.\n                                                    // The registry has not been specified on the field.\n                                                    // Therefore, THIS WILL PRODUCE A COMPILE-TIME EXCEPTION.\n\n  @ObjectHolder(registryName = \"potion\")\n  public static final Potion levitation = null;     // Annotation present. [public static] is required. [final] is optional.\n                                                    // Registry name is explicitly defined: \"minecraft:potion\"\n                                                    // Resource location is not specified on the field\n                                                    // Therefore, THIS WILL PRODUCE A COMPILE-TIME EXCEPTION.\n}\n```\n\n----------------------------------------\n\nTITLE: Checking KeyMapping for Keyboard Input in GUI in Minecraft Forge\nDESCRIPTION: Demonstrates how to check if a key mapping matches keyboard input within a Screen subclass by overriding the keyPressed method and using isActiveAndMatches.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/keymappings.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\n@Override\npublic boolean keyPressed(int key, int scancode, int mods) {\n  if (EXAMPLE_MAPPING.get().isActiveAndMatches(InputConstants.getKey(key, scancode))) {\n    // Execute logic to perform on key press here\n    return true;\n  }\n  return super.keyPressed(x, y, button);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Anvil Recipe Update Handler in Java\nDESCRIPTION: This code snippet demonstrates how to create a custom anvil recipe handler using the AnvilUpdateEvent in Minecraft Forge. It checks the input items and sets the output, experience cost, and material cost for the recipe.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/incode.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Checks whether the left and right items are correct\n// When true, sets the output, level experience cost, and material amount\npublic void updateAnvil(AnvilUpdateEvent event) {\n  if (event.getLeft().is(...) && event.getRight().is(...)) {\n    event.setOutput(...);\n    event.setCost(...);\n    event.setMaterialCost(...);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Face Data in Elements Model\nDESCRIPTION: Example showing how to specify face data at both element and face levels in a vanilla elements model. Demonstrates setting color, block light, sky light, and ambient occlusion parameters.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/facedata.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elements\": [\n    {\n      \"forge_data\": {\n        \"color\": \"0xFFFF0000\",\n        \"block_light\": 15,\n        \"sky_light\": 15,\n        \"ambient_occlusion\": false\n      },\n      \"faces\": {\n        \"north\": {\n          \"forge_data\": {\n            \"color\": \"0xFFFF0000\",\n            \"block_light\": 15,\n            \"sky_light\": 15,\n            \"ambient_occlusion\": false\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Translation Keys in Minecraft Forge LanguageProvider\nDESCRIPTION: Demonstrates how to add translation key mappings in the LanguageProvider's addTranslations method. Shows mapping for both a Block using the dedicated method and a custom object using the generic add method.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/localization.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In LanguageProvider#addTranslations\nthis.addBlock(EXAMPLE_BLOCK, \"Example Block\");\nthis.add(\"object.examplemod.example_object\", \"Example Object\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Face Data in Generated Item Model\nDESCRIPTION: Example of specifying face data for generated item models using the forge:item_layers loader. Shows how to apply face data to specific texture layers.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/facedata.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"textures\": {\n    \"layer0\": \"minecraft:item/stick\",\n    \"layer1\": \"minecraft:item/glowstone_dust\"\n  },\n  \"forge_data\": {\n    \"1\": {\n      \"color\": \"0xFFFF0000\",\n      \"block_light\": 15,\n      \"sky_light\": 15,\n      \"ambient_occlusion\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Sounds with SoundDefinitionsProvider in Minecraft Forge\nDESCRIPTION: This code demonstrates how to define sounds using SoundDefinitionsProvider in a Minecraft Forge mod. It shows two examples: one with multiple sounds and custom properties, and another referencing an existing sound event.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/sounds.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// In some SoundDefinitionsProvider#registerSounds\nthis.add(EXAMPLE_SOUND_EVENT, definition()\n  .subtitle(\"sound.examplemod.example_sound\") // Set translation key\n  .with(\n    sound(ResourceLocation.fromNamespaceAndPath(MODID, \"example_sound_1\")) // Set first sound\n      .weight(4) // Has a 4 / 5 = 80% chance of playing\n      .volume(0.5), // Scales all volumes called on this sound by half\n    sound(ResourceLocation.fromNamespaceAndPath(MODID, \"example_sound_2\")) // Set second sound\n      .stream() // Streams the sound\n  )\n);\n\nthis.add(EXAMPLE_SOUND_EVENT_2, definition()\n  .subtitle(\"sound.examplemod.example_sound\") // Set translation key\n  .with(\n    sound(EXAMPLE_SOUND_EVENT.getLocation(), SoundType.EVENT) // Adds sounds from 'EXAMPLE_SOUND_EVENT'\n      .pitch(0.5) // Scales all pitches called on this sound by half\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing StrictNBTIngredient in JSON\nDESCRIPTION: Shows how to create an ingredient that matches exact NBT data on an ItemStack using the forge:nbt type.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/recipes/ingredients.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"forge:nbt\",\n  \"item\": \"examplemod:example_item\",\n  \"nbt\": {\n    // Add nbt data (must match exactly what is on the stack)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Special Characters in Minecraft Forge Language Files\nDESCRIPTION: Shows how LanguageProvider handles non-ASCII characters by automatically encoding them into unicode equivalents. The example demonstrates adding an item with a diacritic character.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/localization.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Encdoded as 'Example with a d\\u00EDacritic'\nthis.addItem(\"example.diacritic\", \"Example with a díacritic\");\n```\n\n----------------------------------------\n\nTITLE: Using Not Condition in Minecraft Forge\nDESCRIPTION: Boolean NOT operator that inverts the result of the contained condition. This is used to negate the result of another condition.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// For some condition\n{\n  // Inverts the result of the stored condition\n  \"type\": \"forge:not\",\n  \"value\": {\n    // A condition\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BlockEntityRenderer Generic Type Declaration\nDESCRIPTION: Class declaration showing how to create a BlockEntityRenderer with the correct generic type parameter for the specific BlockEntity being rendered. This ensures type safety when implementing the render method.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/blockentities/ber.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass MyRenderer extends BlockEntityRenderer<MyBlockEntity>\n```\n\n----------------------------------------\n\nTITLE: Using And/Or Conditions in Minecraft Forge\nDESCRIPTION: Boolean AND/OR operators that combine multiple conditions with logical operations. Allows for creating complex condition trees with nested logic.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// For some condition\n{\n  // ANDs the stored conditions together (or ORs for 'forge:or')\n  \"type\": \"forge:and\",\n  \"values\": [\n    {\n      // First condition\n    },\n    {\n      // Second condition to be ANDed (or ORed for 'forge:or')\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BlockState Using forAllStates with HORIZONTAL_FACING\nDESCRIPTION: Demonstrates the forAllStates method to generate a BlockState JSON where models are automatically rotated based on the HORIZONTAL_FACING property value, simplifying directional block configuration.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// EXAMPLE_BLOCK_2: Has Property BlockStateProperties#HORIZONTAL_FACING\nthis.getVariantBuilder(EXAMPLE_BLOCK_2) // Get variant builder\n  .forAllStates(state -> // For all possible states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build() // Creates the array of configured models\n  );\n```\n\n----------------------------------------\n\nTITLE: Using Mod Loaded Condition in Minecraft Forge\nDESCRIPTION: Condition that checks if a specific mod is loaded. Returns true when the specified mod ID is present in the current application.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// For some condition\n{\n  \"type\": \"forge:mod_loaded\",\n   // Returns true if 'examplemod' is loaded\n  \"modid\": \"examplemod\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Test Batching in Java\nDESCRIPTION: Shows how to use batching for Game Tests, including setup methods with the @BeforeBatch annotation and specifying batch names.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleGameTests {\n  @BeforeBatch(batch = \"firstBatch\")\n  public static void beforeTest(ServerLevel level) {\n    // Perform setup\n  }\n\n  @GameTest(batch = \"firstBatch\")\n  public static void exampleTest2(GameTestHelper helper) {\n    // Do stuff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Item Exists Condition in Minecraft Forge\nDESCRIPTION: Condition that checks if a specific item exists in the registry. Returns true when the given item ID has been registered in the current application.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n// For some condition\n{\n  \"type\": \"forge:item_exists\",\n   // Returns true if 'examplemod:example_item' has been registered\n  \"item\": \"examplemod:example_item\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Game Tests using RegisterGameTestsEvent in Java\nDESCRIPTION: Shows how to register game test classes with the mod event bus using the RegisterGameTestsEvent and how to define a simple test method that requires a mod ID template namespace.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// In some class\npublic void registerTests(RegisterGameTestsEvent event) {\n  event.register(ExampleGameTests.class);\n}\n\n// In ExampleGameTests\n@GameTest(templateNamespace = MODID)\npublic static void exampleTest3(GameTestHelper helper) {\n  // Perform setup\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tag Empty Condition in Minecraft Forge\nDESCRIPTION: Condition that checks if an item tag is empty. Returns true when the specified tag has no items associated with it.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/conditional.md#2025-04-06_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// For some condition\n{\n  \"type\": \"forge:tag_empty\",\n   // Returns true if 'examplemod:example_tag' is an item tag with no entries\n  \"tag\": \"examplemod:example_tag\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structure Template Configuration Examples for Game Tests in Java\nDESCRIPTION: Demonstrates different configuration options for structure templates in Game Tests including template namespace, path construction, and prefix handling.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/gametest.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Modid for all structures will be MODID\n@GameTestHolder(MODID)\npublic class ExampleGameTests {\n\n  // Class name is prepended, template name is not specified\n  // Template Location at 'modid:examplegametests.exampletest'\n  @GameTest\n  public static void exampleTest(GameTestHelper helper) { /*...*/ }\n\n  // Class name is not prepended, template name is not specified\n  // Template Location at 'modid:exampletest2'\n  @PrefixGameTestTemplate(false)\n  @GameTest\n  public static void exampleTest2(GameTestHelper helper) { /*...*/ }\n\n  // Class name is prepended, template name is specified\n  // Template Location at 'modid:examplegametests.test_template'\n  @GameTest(template = \"test_template\")\n  public static void exampleTest3(GameTestHelper helper) { /*...*/ }\n\n  // Class name is not prepended, template name is specified\n  // Template Location at 'modid:test_template2'\n  @PrefixGameTestTemplate(false)\n  @GameTest(template = \"test_template2\")\n  public static void exampleTest4(GameTestHelper helper) { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing and Removing Screens in Minecraft Forge\nDESCRIPTION: Demonstrates the implementation of onClose and removed methods for proper screen teardown. These methods handle saving processes, sending packets to the server, and resetting states when the screen is closed.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gui/screens.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// In some Screen subclass\n\n@Override\npublic void onClose() {\n    // Stop any handlers here\n\n    // Call last in case it interferes with the override\n    super.onClose();\n}\n\n@Override\npublic void removed() {\n    // Reset initial states here\n\n    // Call last in case it interferes with the override\n    super.removed();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update JSON Structure for Minecraft Forge Mods\nDESCRIPTION: This JSON structure defines the format for the update checker file. It includes the mod's homepage, version information for different Minecraft versions, changelogs, and latest/recommended version declarations.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/updatechecker.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"homepage\": \"<homepage/download page for your mod>\",\n  \"<mcversion>\": {\n    \"<modversion>\": \"<changelog for this version>\", \n    // List all versions of your mod for the given Minecraft version, along with their changelogs\n    // ...\n  },\n  \"promos\": {\n    \"<mcversion>-latest\": \"<modversion>\",\n    // Declare the latest \"bleeding-edge\" version of your mod for the given Minecraft version\n    \"<mcversion>-recommended\": \"<modversion>\",\n    // Declare the latest \"stable\" version of your mod for the given Minecraft version\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Display Test for One-Sided Mods in Minecraft Forge\nDESCRIPTION: This Java code snippet shows how to register a custom IExtensionPoint$DisplayTest for a one-sided mod. It ensures that the mod's absence on one side doesn't cause compatibility issues, working for both client-only and server-only mods.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/sides.md#2025-04-06_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n//Make sure the mod being absent on the other network side does not cause the client to display the server as incompatible\nModLoadingContext.get().registerExtensionPoint(IExtensionPoint.DisplayTest.class, () -> new IExtensionPoint.DisplayTest(() -> NetworkConstants.IGNORESERVERONLY, (a, b) -> true));\n```\n\n----------------------------------------\n\nTITLE: Configuring WaveFront OBJ Model in JSON for Minecraft Forge\nDESCRIPTION: This snippet demonstrates how to configure a WaveFront OBJ model in a JSON file for Minecraft Forge. It shows how to specify the 'forge:obj' loader, reference the OBJ file, flip the V axis if needed, and define textures that can be referenced in the MTL file.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelloaders/index.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // Add the following line on the same level as a 'model' declaration\n  \"loader\": \"forge:obj\",\n  \"flip_v\": true,\n  \"model\": \"examplemod:models/block/model.obj\",\n  \"textures\": {\n    // Can refer to in .mtl using #texture0\n    \"texture0\": \"minecraft:block/dirt\",\n    \"particle\": \"minecraft:block/dirt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic RegistrySetBuilder Configuration\nDESCRIPTION: Demonstrates the basic setup of a RegistrySetBuilder for handling configured and placed features. Shows how to add multiple registry entries to the builder.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/server/datapackregistries.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -> {\n    // Register configured features here\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -> {\n    // Register placed features here\n  });\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding with JsonOps in Java\nDESCRIPTION: Demonstrates how to use JsonOps to encode Java objects to JsonElements and decode JsonElements back to Java objects, using both regular and compressed formats.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Let exampleCodec represent a Codec<ExampleJavaObject>\n// Let exampleObject be a ExampleJavaObject\n// Let exampleJson be a JsonElement\n\n// Encode Java object to regular JsonElement\nexampleCodec.encodeStart(JsonOps.INSTANCE, exampleObject);\n\n// Encode Java object to compressed JsonElement\nexampleCodec.encodeStart(JsonOps.COMPRESSED, exampleObject);\n\n// Decode JsonElement into Java object\n// Assume JsonElement was parsed normally\nexampleCodec.parse(JsonOps.INSTANCE, exampleJson);\n```\n\n----------------------------------------\n\nTITLE: Handling DataResult in Java for Codec Operations\nDESCRIPTION: Shows how to work with DataResult objects returned by Codec operations, including error handling and result processing.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Let exampleCodec represent a Codec<ExampleJavaObject>\n// Let exampleJson be a JsonElement\n\n// Decode JsonElement into Java object\nDataResult<ExampleJavaObject> result = exampleCodec.parse(JsonOps.INSTANCE, exampleJson);\n\nresult\n  // Get result or partial on error, report error message\n  .resultOrPartial(errorMessage -> /* Do something with error message */)\n  // If result or partial is present, do something\n  .ifPresent(decodedObject -> /* Do something with decoded object */);\n```\n\n----------------------------------------\n\nTITLE: Creating a Record Codec in Java for Custom Object\nDESCRIPTION: Demonstrates how to create a custom Codec for a complex object using RecordCodecBuilder, defining fields and their encoding/decoding behavior.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<SomeObject> RECORD_CODEC = RecordCodecBuilder.create(instance -> // Given an instance\n  instance.group( // Define the fields within the instance\n    Codec.STRING.fieldOf(\"s\").forGetter(SomeObject::s), // String\n    Codec.INT.optionalFieldOf(\"i\", 0).forGetter(SomeObject::i), // Integer, defaults to 0 if field not present\n    Codec.BOOL.fieldOf(\"b\").forGetter(SomeObject::b) // Boolean\n  ).apply(instance, SomeObject::new) // Define how to create the object\n);\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Encoded SomeObject\nDESCRIPTION: Shows the JSON structure of an encoded SomeObject, demonstrating how fields are represented and optional fields are handled.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Encoded SomeObject\n{\n  \"s\": \"value\",\n  \"i\": 5,\n  \"b\": false\n}\n\n// Another encoded SomeObject\n{\n  \"s\": \"value2\",\n  // i is omitted, defaults to 0\n  \"b\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Codec Transformation in Java\nDESCRIPTION: Demonstrates how to transform one codec type into another using xmap with two equivalent classes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// A class\npublic class ClassA {\n\n  public ClassB toB() { /* ... */ }\n}\n\n// Another equivalent class\npublic class ClassB {\n\n  public ClassA toA() { /* ... */ }\n}\n\n// Assume there is some codec A_CODEC\npublic static final Codec<ClassB> B_CODEC = A_CODEC.xmap(ClassA::toB, ClassB::toA);\n```\n\n----------------------------------------\n\nTITLE: String to Integer Codec Transformation\nDESCRIPTION: Shows how to transform a string codec to an integer codec with error handling for invalid conversions.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<Integer> INT_CODEC = Codec.STRING.comapFlatMap(\n  s -> { // Return data result containing error on failure\n    try {\n      return DataResult.success(Integer.valueOf(s));\n    } catch (NumberFormatException e) {\n      return DataResult.error(s + \" is not an integer.\");\n    }\n  },\n  Integer::toString // Regular function\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Will return 5\n\"5\"\n\n// Will error, not an integer\n\"value\"\n```\n\n----------------------------------------\n\nTITLE: Dispatch Codec Implementation\nDESCRIPTION: Shows how to implement a codec that can dispatch to different subcodecs based on a type identifier.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n// Define our object\npublic abstract class ExampleObject {\n\n  // Define the method used to specify the object type for encoding\n  public abstract Codec<? extends ExampleObject> type();\n}\n\n// Create simple object which stores a string\npublic class StringObject extends ExampleObject {\n\n  public StringObject(String s) { /* ... */ }\n\n  public String s() { /* ... */ }\n\n  public Codec<? extends ExampleObject> type() {\n    // A registered registry object\n    // \"string\":\n    //   Codec.STRING.xmap(StringObject::new, StringObject::s)\n    return STRING_OBJECT_CODEC.get();\n  }\n}\n\n// Create complex object which stores a string and integer\npublic class ComplexObject extends ExampleObject {\n\n  public ComplexObject(String s, int i) { /* ... */ }\n\n  public String s() { /* ... */ }\n\n  public int i() { /* ... */ }\n\n  public Codec<? extends ExampleObject> type() {\n    // A registered registry object\n    // \"complex\":\n    //   RecordCodecBuilder.create(instance ->\n    //     instance.group(\n    //       Codec.STRING.fieldOf(\"s\").forGetter(ComplexObject::s),\n    //       Codec.INT.fieldOf(\"i\").forGetter(ComplexObject::i)\n    //     ).apply(instance, ComplexObject::new)\n    //   )\n    return COMPLEX_OBJECT_CODEC.get();\n  }\n}\n\n// Assume there is an IForgeRegistry<Codec<? extends ExampleObject>> DISPATCH\npublic static final Codec<ExampleObject> = DISPATCH.getCodec() // Gets Codec<Codec<? extends ExampleObject>>\n  .dispatch(\n    ExampleObject::type, // Get the codec from the specific object\n    Function.identity() // Get the codec from the registry\n  );\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Simple object\n{\n  \"type\": \"string\", // For StringObject\n  \"value\": \"value\" // Codec type is not augmented from MapCodec, needs field\n}\n\n// Complex object\n{\n  \"type\": \"complex\", // For ComplexObject\n\n  // Codec type is augmented from MapCodec, can be inlined\n  \"s\": \"value\",\n  \"i\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Range Codec Implementation\nDESCRIPTION: Demonstrates implementation of range codecs for integers with bounds checking.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<Integer> RANGE_CODEC = Codec.intRange(0, 4);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Will be valid, inside [0, 4]\n4\n\n// Will error, outside [0, 4]\n5\n```\n\n----------------------------------------\n\nTITLE: Matrix-Based Transform Definition in JSON\nDESCRIPTION: Demonstrates the structure for defining a root transform using a 3x4 transformation matrix in row major order. The matrix combines translation, rotation, scale, and origin transformations.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/transforms.md#2025-04-06_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"transform\": {\n    \"matrix\": [\n        [ 0, 0, 0, 0 ],\n        [ 0, 0, 0, 0 ],\n        [ 0, 0, 0, 0 ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Value Codec\nDESCRIPTION: Shows how to implement a codec with default values for failed encoding/decoding.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<Integer> DEFAULT_CODEC = Codec.INT.orElse(0); // Can also be a supplied value via #orElseGet\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Not an integer, defaults to 0\n\"value\"\n```\n\n----------------------------------------\n\nTITLE: Element-wise Transform Definition in JSON\nDESCRIPTION: Shows how to specify a root transform using individual transformation elements including origin, translation, and rotation properties. This example demonstrates translation and Y-axis rotation with a center origin.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/transforms.md#2025-04-06_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"transform\": {\n        \"origin\": \"center\",\n        \"translation\": [ 0, 0.5, 0 ],\n        \"rotation\": { \"y\": 45 }\n    },\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: List Codec Implementation\nDESCRIPTION: Shows how to create a codec for lists of objects.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n// BlockPos#CODEC is a Codec<BlockPos>\npublic static final Codec<List<BlockPos>> LIST_CODEC = BlockPos.CODEC.listOf();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Encoded List<BlockPos>\n[\n  [1, 2, 3], // BlockPos(1, 2, 3)\n  [4, 5, 6], // BlockPos(4, 5, 6)\n  [7, 8, 9]  // BlockPos(7, 8, 9)\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Part Visibility with JSON in MinecraftForge\nDESCRIPTION: Example showing a composite model configuration with two parts and two child models that override visibility settings. The base model hides part_two, while child models demonstrate different visibility combinations through inheritance.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelextensions/visibility.md#2025-04-06_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"loader\": \"forge:composite\",\n  \"children\": {\n    \"part_one\": {\n      \"parent\": \"mymod:mypartmodel_one\"\n    },\n    \"part_two\": {\n      \"parent\": \"mymod:mypartmodel_two\"\n    }\n  },\n  \"visibility\": {\n    \"part_two\": false\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"mymod:mycompositemodel\",\n  \"visibility\": {\n    \"part_one\": false,\n    \"part_two\": true\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parent\": \"mymod:mycompositemodel\",\n  \"visibility\": {\n    \"part_two\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Codec Implementation\nDESCRIPTION: Demonstrates creation of a codec for maps with string keys and custom value objects.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// BlockPos#CODEC is a Codec<BlockPos>\npublic static final Codec<Map<String, BlockPos>> MAP_CODEC = Codec.unboundedMap(Codec.STRING, BlockPos.CODEC);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Encoded Map<String, BlockPos>\n{\n  \"key1\": [1, 2, 3], // key1 -> BlockPos(1, 2, 3)\n  \"key2\": [4, 5, 6], // key2 -> BlockPos(4, 5, 6)\n  \"key3\": [7, 8, 9]  // key3 -> BlockPos(7, 8, 9)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Methods to Custom Loader Builders in Minecraft Forge (Java)\nDESCRIPTION: Shows how to add chainable configuration methods to a custom loader builder. These methods allow setting properties when configuring the loader instance.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n// In ExampleLoaderBuilder\npublic ExampleLoaderBuilder<T> exampleInt(int example) {\n  // Set int\n  return this;\n}\n\npublic ExampleLoaderBuilder<T> exampleString(String example) {\n  // Set string\n  return this;\n}\n```\n\n----------------------------------------\n\nTITLE: Pair Codec Implementation\nDESCRIPTION: Shows how to create a codec for pairs of objects using field codecs.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datastorage/codecs.md#2025-04-06_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic static final Codec<Pair<Integer, String>> PAIR_CODEC = Codec.pair(\n  Codec.INT.fieldOf(\"left\").codec(),\n  Codec.STRING.fieldOf(\"right\").codec()\n);\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Encoded Pair<Integer, String>\n{\n  \"left\": 5,       // fieldOf looks up 'left' key for left object\n  \"right\": \"value\" // fieldOf looks up 'right' key for right object\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding toJson in Custom Loader Builders in Minecraft Forge (Java)\nDESCRIPTION: Shows how to override the toJson method in a custom loader builder to encode additional properties. This is required when adding custom configuration options to the loader.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n// In ExampleLoaderBuilder\n@Override\npublic JsonObject toJson(JsonObject json) {\n  json = super.toJson(json); // Handle base loader properties\n  // Encode custom loader properties\n  return json;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SoundDefinitionsProvider to DataGenerator in Minecraft Forge\nDESCRIPTION: This snippet shows how to add a custom SoundDefinitionsProvider to the DataGenerator for a Minecraft Forge mod. It uses the GatherDataEvent to register the provider only when client assets are being generated.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/sounds.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        output -> new MySoundDefinitionsProvider(output, MOD_ID, event.getExistingFileHelper())\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom ModelBuilder Subclass in Minecraft Forge (Java)\nDESCRIPTION: Shows how to create a custom ModelBuilder subclass for specialized model types. This class would contain any special properties specific to the model type.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/modelproviders.md#2025-04-06_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleModelBuilder extends ModelBuilder<ExampleModelBuilder> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Language Provider with DataGenerator in Minecraft Forge\nDESCRIPTION: Shows how to add a custom language provider to the DataGenerator during the GatherDataEvent. This sets up localization for American English (en_us) and only runs when client assets are being generated.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/datagen/client/localization.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        // Localizations for American English\n        output -> new MyLanguageProvider(output, MOD_ID, \"en_us\")\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Default ItemTransforms in Java for Minecraft Forge\nDESCRIPTION: This code snippet shows the recommended implementation for the deprecated BakedModel#getTransforms method in Forge. It returns the default NO_TRANSFORMS object, as transform handling should be done through the applyTransform method instead.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/rendering/modelloaders/transform.md#2025-04-06_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nreturn ItemTransforms#NO_TRANSFORMS\n```\n\n----------------------------------------\n\nTITLE: Basic Item Translation Example in JSON\nDESCRIPTION: Demonstrates the translation key format for a basic item, showing how the registry name is converted into the translation key format.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/internationalization.md#2025-04-06_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"item.examplemod.example_item\": \"Example Item Name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Forge Gradle for Eclipse\nDESCRIPTION: Gradle commands to set up the Forge development environment for Eclipse. Run these commands in the terminal from the cloned repository directory.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/forgedev/index.md#2025-04-06_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew setup\n```\n\nLANGUAGE: gradle\nCODE:\n```\n./gradlew genEclipseRuns\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Block IDs for Colored Items\nDESCRIPTION: This snippet provides a structured list of Minecraft block IDs for various colored items such as banners, beds, candles, carpets, concrete, and more. It organizes the IDs by color category and item type.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- `c:dyed/blue`\n    - `minecraft:blue_banner`\n    - `minecraft:blue_bed`\n    - `minecraft:blue_candle`\n    - `minecraft:blue_carpet`\n    - `minecraft:blue_concrete`\n    - `minecraft:blue_concrete_powder`\n    - `minecraft:blue_glazed_terracotta`\n    - `minecraft:blue_shulker_box`\n    - `minecraft:blue_stained_glass`\n    - `minecraft:blue_stained_glass_pane`\n    - `minecraft:blue_terracotta`\n    - `minecraft:blue_wall_banner`\n    - `minecraft:blue_wool`\n```\n\n----------------------------------------\n\nTITLE: ResourceLocation Path Format Example\nDESCRIPTION: Demonstrates the standard format for ResourceLocation paths in Minecraft, showing both the file system structure (assets/<namespace>/<ctx>/<path>) and the string representation (<namespace>:<path>). Used for uniquely identifying resources and objects in the game.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/resources.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nassets/<namespace>/<ctx>/<path>\n```\n\nLANGUAGE: java\nCODE:\n```\n<namespace>:<path>\n```\n\n----------------------------------------\n\nTITLE: Categorizing Minecraft Glass Block IDs\nDESCRIPTION: This snippet lists Minecraft block IDs for various types of glass blocks, including stained glass of different colors, regular glass, and tinted glass. It also provides subcategories for cheap glass blocks and colorless glass.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n- `c:glass_blocks`\n    - `minecraft:black_stained_glass`\n    - `minecraft:blue_stained_glass`\n    - `minecraft:brown_stained_glass`\n    - `minecraft:cyan_stained_glass`\n    - `minecraft:glass`\n    - `minecraft:gray_stained_glass`\n    - `minecraft:green_stained_glass`\n    - `minecraft:light_blue_stained_glass`\n    - `minecraft:light_gray_stained_glass`\n    - `minecraft:lime_stained_glass`\n    - `minecraft:magenta_stained_glass`\n    - `minecraft:orange_stained_glass`\n    - `minecraft:pink_stained_glass`\n    - `minecraft:purple_stained_glass`\n    - `minecraft:red_stained_glass`\n    - `minecraft:tinted_glass`\n    - `minecraft:white_stained_glass`\n    - `minecraft:yellow_stained_glass`\n- `c:glass_blocks/cheap`\n    - `minecraft:black_stained_glass`\n    - `minecraft:blue_stained_glass`\n    - `minecraft:brown_stained_glass`\n    - `minecraft:cyan_stained_glass`\n    - `minecraft:glass`\n    - `minecraft:gray_stained_glass`\n    - `minecraft:green_stained_glass`\n    - `minecraft:light_blue_stained_glass`\n    - `minecraft:light_gray_stained_glass`\n    - `minecraft:lime_stained_glass`\n    - `minecraft:magenta_stained_glass`\n    - `minecraft:orange_stained_glass`\n    - `minecraft:pink_stained_glass`\n    - `minecraft:purple_stained_glass`\n    - `minecraft:red_stained_glass`\n    - `minecraft:white_stained_glass`\n    - `minecraft:yellow_stained_glass`\n- `c:glass_blocks/colorless`\n    - `minecraft:glass`\n- `c:glass_blocks/tinted`\n    - `minecraft:tinted_glass`\n```\n\n----------------------------------------\n\nTITLE: Resource Path Example\nDESCRIPTION: Example showing the standard file path structure for mod resources, using the 'examplemod' namespace as a demonstration. Shows both the assets and data directory structures.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/resources.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nassets/examplemod\n```\n\nLANGUAGE: java\nCODE:\n```\ndata/examplemod\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Forge Tool and Item Tags\nDESCRIPTION: A structured list of Minecraft Forge tool and item tags showing all valid Minecraft item IDs that belong to each category. Includes tools, weapons, blocks, and materials.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nc:tools/bow\n    - minecraft:bow\nc:tools/brush\n    - minecraft:brush\nc:tools/crossbow\n    - minecraft:crossbow\n[...additional tags...]\n```\n\n----------------------------------------\n\nTITLE: Configuring mods.toml for One-Sided Mods in Minecraft Forge\nDESCRIPTION: This TOML snippet demonstrates how to configure the displayTest property in mods.toml for a one-sided mod. It sets the display test to IGNORE_ALL_VERSION, which is appropriate for mods with no server component.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/concepts/sides.md#2025-04-06_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[mods]]\n  # ...\n\n  # MATCH_VERSION means that your mod will cause a red X if the versions on client and server differ. This is the default behaviour and should be what you choose if you have server and client elements to your mod.\n  # IGNORE_SERVER_VERSION means that your mod will not cause a red X if it's present on the server but not on the client. This is what you should use if you're a server only mod.\n  # IGNORE_ALL_VERSION means that your mod will not cause a red X if it's present on the client or the server. This is a special case and should only be used if your mod has no server component.\n  # NONE means that no display test is set on your mod. You need to do this yourself, see IExtensionPoint.DisplayTest for more information. You can define any scheme you wish with this value.\n  # IMPORTANT NOTE: this is NOT an instruction as to which environments (CLIENT or DEDICATED SERVER) your mod loads on. Your mod should load (and maybe do nothing!) wherever it finds itself.\n  displayTest=\"IGNORE_ALL_VERSION\" # MATCH_VERSION is the default if nothing is specified (#optional)\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Forge Biome Tags\nDESCRIPTION: A structured list of Minecraft Forge biome tags showing all valid Minecraft biome IDs categorized by their environmental characteristics like temperature, terrain type, and special features.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nc:is_aquatic\n    - minecraft:cold_ocean\n    - minecraft:deep_cold_ocean\n    - minecraft:deep_frozen_ocean\n[...additional biomes...]\nc:is_cold\n    - minecraft:cold_ocean\n    - minecraft:deep_cold_ocean\n[...additional biomes...]\n```\n\n----------------------------------------\n\nTITLE: Illustrating Module Naming Conflicts in Java\nDESCRIPTION: This example demonstrates how package naming conflicts between different modules can cause the mod loader to crash on startup. It emphasizes the importance of unique top-level package names in modding.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/structuring.md#2025-04-06_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nmodule A\n  - package X\n    - class I\n    - class J\nmodule B\n  - package X // This package will cause the mod loader to crash, as there already is a module with package X being exported\n    - class R\n    - class S\n    - class T\n```\n\n----------------------------------------\n\nTITLE: Defining Particle Textures in JSON\nDESCRIPTION: JSON configuration file that defines particle textures for a custom particle type. The file must be placed in assets/<modid>/particles and named after the particle's registry name. It specifies an array of texture ResourceLocations that point to PNG files in the assets/<modid>/textures/particle directory.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gameeffects/particles.md#2025-04-06_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"textures\": [\n    // Will point to a texture located in\n    // assets/mymod/textures/particle/particle_texture.png\n    \"mymod:particle_texture\",\n    // Textures should by ordered by drawing order\n    // e.g. particle_texture will render first, then particle_texture2\n    //      after some time\n    \"mymod:particle_texture2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Mod Version in Gradle\nDESCRIPTION: Sets the version property in the Gradle build file, following a recommended variation of Maven versioning.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/index.md#2025-04-06_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\nversion = '1.21.1-1.0.0.0'\n```\n\n----------------------------------------\n\nTITLE: Setting Group ID in Gradle\nDESCRIPTION: Sets the group property in the Gradle build file, which should correspond to the top-level package of the mod.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/index.md#2025-04-06_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\ngroup = 'com.example'\n```\n\n----------------------------------------\n\nTITLE: Displaying Documentation Link in Markdown\nDESCRIPTION: This snippet shows how to create a clickable link to the MinecraftForge documentation website using Markdown syntax.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/README.md#2025-04-06_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nhttps://docs.minecraftforge.net\n```\n\n----------------------------------------\n\nTITLE: Sample Debug Profiler Output Format in Minecraft\nDESCRIPTION: An example of the Debug Profiler's output format showing hierarchical timing data for different game components. The output displays nested sections with relative and absolute time percentages.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/misc/debugprofiler.md#2025-04-06_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[00] levels - 96.70%/96.70%\n[01] |   Level Name - 99.76%/96.47%\n[02] |   |   tick - 99.31%/95.81%\n[03] |   |   |   entities - 47.72%/45.72%\n[04] |   |   |   |   regular - 98.32%/44.95%\n[04] |   |   |   |   blockEntities - 0.90%/0.41%\n[05] |   |   |   |   |   unspecified - 64.26%/0.26%\n[05] |   |   |   |   |   minecraft:furnace - 33.35%/0.14%\n[05] |   |   |   |   |   minecraft:chest - 2.39%/0.01%\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for MinecraftForge Documentation\nDESCRIPTION: This snippet lists the Python packages required for building MinecraftForge documentation. It includes pymdown-extensions and specifies a minimum version for mkdocs (1.0) to ensure compatibility with Python 3.7 and overcome limitations in ReadTheDocs' default mkdocs version.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/python-requirements.txt#2025-04-06_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npymdown-extensions\n# ReadTheDocs defaults to mkdocs version 0.17.0 for backwards compatibility reasons\n# It is incompatible with Python 3.7, however, which is why we need to force a newer version\nmkdocs>=1.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Package Naming Conflicts in Java\nDESCRIPTION: This snippet illustrates how naming conflicts can occur when two JAR files contain classes with the same name and package. It shows that only one of the conflicting classes will be loaded, potentially causing crashes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/gettingstarted/structuring.md#2025-04-06_snippet_0\n\nLANGUAGE: java\nCODE:\n```\na.jar\n  - com.example.ExampleClass\nb.jar\n  - com.example.ExampleClass // This class will not normally be loaded\n```\n\n----------------------------------------\n\nTITLE: Minecraft Block Tags Structure Example\nDESCRIPTION: Hierarchical list of block tags and their associated Minecraft blocks, showing the tag naming convention and block identifiers used in Forge.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `c:barrels`\n    - `minecraft:barrel`\n- `c:barrels/wooden`\n    - `minecraft:barrel`\n- `c:bookshelves`\n    - `minecraft:bookshelf`\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Transformer in Gradle\nDESCRIPTION: Gradle configuration to specify the location of the Access Transformer configuration file in a MinecraftForge mod project.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/advanced/accesstransformers.md#2025-04-06_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\nminecraft {\n  accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Glass Pane and Glazed Terracotta IDs\nDESCRIPTION: This snippet provides Minecraft block IDs for glass panes of various colors and glazed terracotta blocks. It includes subcategories for colorless glass panes and lists all available glazed terracotta colors.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n- `c:glass_panes`\n    - `minecraft:black_stained_glass_pane`\n    - `minecraft:blue_stained_glass_pane`\n    - `minecraft:brown_stained_glass_pane`\n    - `minecraft:cyan_stained_glass_pane`\n    - `minecraft:glass_pane`\n    - `minecraft:gray_stained_glass_pane`\n    - `minecraft:green_stained_glass_pane`\n    - `minecraft:light_blue_stained_glass_pane`\n    - `minecraft:light_gray_stained_glass_pane`\n    - `minecraft:lime_stained_glass_pane`\n    - `minecraft:magenta_stained_glass_pane`\n    - `minecraft:orange_stained_glass_pane`\n    - `minecraft:pink_stained_glass_pane`\n    - `minecraft:purple_stained_glass_pane`\n    - `minecraft:red_stained_glass_pane`\n    - `minecraft:white_stained_glass_pane`\n    - `minecraft:yellow_stained_glass_pane`\n- `c:glass_panes/colorless`\n    - `minecraft:glass_pane`\n- `c:glazed_terracottas`\n    - `minecraft:black_glazed_terracotta`\n    - `minecraft:blue_glazed_terracotta`\n    - `minecraft:brown_glazed_terracotta`\n    - `minecraft:cyan_glazed_terracotta`\n    - `minecraft:gray_glazed_terracotta`\n    - `minecraft:green_glazed_terracotta`\n    - `minecraft:light_blue_glazed_terracotta`\n    - `minecraft:light_gray_glazed_terracotta`\n    - `minecraft:lime_glazed_terracotta`\n    - `minecraft:magenta_glazed_terracotta`\n    - `minecraft:orange_glazed_terracotta`\n    - `minecraft:pink_glazed_terracotta`\n    - `minecraft:purple_glazed_terracotta`\n```\n\n----------------------------------------\n\nTITLE: Access Transformer Examples for Minecraft Classes\nDESCRIPTION: Examples showing various Access Transformer directives for modifying Minecraft classes, fields, and methods including visibility changes and final modifier manipulation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/advanced/accesstransformers.md#2025-04-06_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# Makes public the ByteArrayToKeyFunction interface in Crypt\npublic net.minecraft.util.Crypt$ByteArrayToKeyFunction\n\n# Makes protected and removes the final modifier from 'random' in MinecraftServer\nprotected-f net.minecraft.server.MinecraftServer f_129758_ #random\n\n# Makes public the 'makeExecutor' method in Util,\n# accepting a String and returns an ExecutorService\npublic net.minecraft.Util m_137477_(Ljava/lang/String;)Ljava/util/concurrent/ExecutorService; #makeExecutor\n\n# Makes public the 'leastMostToIntArray' method in UUIDUtil,\n# accepting two longs and returning an int[]\npublic net.minecraft.core.UUIDUtil m_235872_(JJ)[I #leastMostToIntArray\n```\n\n----------------------------------------\n\nTITLE: Documenting Minecraft Enchantment Tags in Markdown\nDESCRIPTION: A categorized list of enchantment tags using the 'c:' prefix (likely for common tags) that group various enchantments by their functional purpose, such as movement, defense, and weapon enhancements.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nenchantment\n-----------\n- `c:entity_auxiliary_movement_enhancements`\n    - `minecraft:feather_falling`\n    - `minecraft:frost_walker`\n- `c:entity_defense_enhancements`\n    - `minecraft:blast_protection`\n    - `minecraft:feather_falling`\n    - `minecraft:fire_protection`\n    - `minecraft:projectile_protection`\n    - `minecraft:protection`\n    - `minecraft:respiration`\n- `c:entity_speed_enhancements`\n    - `minecraft:depth_strider`\n    - `minecraft:soul_speed`\n    - `minecraft:swift_sneak`\n- `c:increase_block_drops`\n    - `minecraft:fortune`\n- `c:increase_entity_drops`\n    - `minecraft:looting`\n- `c:weapon_damage_enhancements`\n    - `minecraft:bane_of_arthropods`\n    - `minecraft:impaling`\n    - `minecraft:power`\n    - `minecraft:sharpness`\n    - `minecraft:smite`\n```\n\n----------------------------------------\n\nTITLE: Cloning Minecraft Forge Repository with Git\nDESCRIPTION: Command to clone the forked Minecraft Forge repository to a local directory. Replace <User> with your GitHub username.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/forgedev/index.md#2025-04-06_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/<User>/MinecraftForge\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Entity Type Tags in Markdown\nDESCRIPTION: Documentation of entity type tags that group related entity types such as boats, bosses, and minecarts. It also includes special tags for entities with specific behavior limitations like teleporting.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nentitytype\n-----------\n- `c:boats`\n    - `minecraft:boat`\n    - `minecraft:chest_boat`\n- `c:bosses`\n    - `minecraft:ender_dragon`\n    - `minecraft:wither`\n- `c:capturing_not_supported`\n- `c:minecarts`\n    - `minecraft:chest_minecart`\n    - `minecraft:command_block_minecart`\n    - `minecraft:furnace_minecart`\n    - `minecraft:hopper_minecart`\n    - `minecraft:minecart`\n    - `minecraft:spawner_minecart`\n    - `minecraft:tnt_minecart`\n- `c:teleporting_not_supported`\n```\n\n----------------------------------------\n\nTITLE: Creating a Relative Link in Markdown\nDESCRIPTION: This snippet shows how to create a relative link to the CONTRIBUTING.md file using Markdown syntax.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/README.md#2025-04-06_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n[CONTRIBUTING.md](/CONTRIBUTING.md)\n```\n\n----------------------------------------\n\nTITLE: Documenting Minecraft Fluid Tags in Markdown\nDESCRIPTION: List of fluid tags including both Minecraft and Forge-specific tags. These categorize fluids like water, lava, milk, and other special fluid types for use in game mechanics and recipes.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nfluid\n-----\n- `c:hidden_from_recipe_viewers`\n- `c:honey`\n- `c:lava`\n    - `minecraft:flowing_lava`\n    - `minecraft:lava`\n- `c:milk`\n- `c:water`\n    - `minecraft:flowing_water`\n    - `minecraft:water`\n- `forge:beetroot_soup`\n- `forge:gaseous`\n- `forge:mushroom_stew`\n- `forge:potion`\n- `forge:rabbit_stew`\n- `forge:suspicious_stew`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown Admonition Syntax\nDESCRIPTION: Shows the correct syntax for creating an 'important' admonition block in Markdown. This is used to highlight key information in the documentation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/contributing.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! important\n    Please use **two spaces** to indent, not tabs.\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Item Tags in Markdown\nDESCRIPTION: Extensive categorization of item tags covering animal foods, armors, containers, building materials, and various block types. This provides a detailed hierarchy of how items are grouped for crafting, functionality, and other game mechanics.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\nitem\n----\n- `c:animal_foods`\n    - `minecraft:allium`\n    - `minecraft:apple`\n    - `minecraft:azure_bluet`\n    - `minecraft:bamboo`\n    - `minecraft:beef`\n    - `minecraft:beetroot`\n    - `minecraft:beetroot_seeds`\n    - `minecraft:blue_orchid`\n    - `minecraft:cactus`\n    - `minecraft:carrot`\n    - `minecraft:cherry_leaves`\n    - `minecraft:chicken`\n    - `minecraft:chorus_flower`\n    - `minecraft:cod`\n    - `minecraft:cooked_beef`\n    - `minecraft:cooked_chicken`\n    - `minecraft:cooked_mutton`\n    - `minecraft:cooked_porkchop`\n    - `minecraft:cooked_rabbit`\n    - `minecraft:cornflower`\n    - `minecraft:crimson_fungus`\n    - `minecraft:dandelion`\n    - `minecraft:enchanted_golden_apple`\n    - `minecraft:flowering_azalea`\n    - `minecraft:flowering_azalea_leaves`\n    - `minecraft:glow_berries`\n    - `minecraft:golden_apple`\n    - `minecraft:golden_carrot`\n    - `minecraft:hay_block`\n    - `minecraft:lilac`\n    - `minecraft:lily_of_the_valley`\n    - `minecraft:mangrove_propagule`\n    - `minecraft:melon_seeds`\n    - `minecraft:mutton`\n    - `minecraft:orange_tulip`\n    - `minecraft:oxeye_daisy`\n    - `minecraft:peony`\n    - `minecraft:pink_petals`\n    - `minecraft:pink_tulip`\n    - `minecraft:pitcher_plant`\n    - `minecraft:pitcher_pod`\n    - `minecraft:poppy`\n    - `minecraft:porkchop`\n    - `minecraft:potato`\n    - `minecraft:pumpkin_seeds`\n    - `minecraft:rabbit`\n    - `minecraft:red_tulip`\n    - `minecraft:rose_bush`\n    - `minecraft:rotten_flesh`\n    - `minecraft:salmon`\n    - `minecraft:seagrass`\n    - `minecraft:slime_ball`\n    - `minecraft:spider_eye`\n    - `minecraft:spore_blossom`\n    - `minecraft:sugar`\n    - `minecraft:sunflower`\n    - `minecraft:sweet_berries`\n    - `minecraft:torchflower`\n    - `minecraft:torchflower_seeds`\n    - `minecraft:tropical_fish_bucket`\n    - `minecraft:warped_fungus`\n    - `minecraft:wheat`\n    - `minecraft:wheat_seeds`\n    - `minecraft:white_tulip`\n    - `minecraft:wither_rose`\n- `c:armors`\n    - `minecraft:chainmail_boots`\n    - `minecraft:chainmail_chestplate`\n    - `minecraft:chainmail_helmet`\n    - `minecraft:chainmail_leggings`\n    - `minecraft:diamond_boots`\n    - `minecraft:diamond_chestplate`\n    - `minecraft:diamond_helmet`\n    - `minecraft:diamond_leggings`\n    - `minecraft:golden_boots`\n    - `minecraft:golden_chestplate`\n    - `minecraft:golden_helmet`\n    - `minecraft:golden_leggings`\n    - `minecraft:iron_boots`\n    - `minecraft:iron_chestplate`\n    - `minecraft:iron_helmet`\n    - `minecraft:iron_leggings`\n    - `minecraft:leather_boots`\n    - `minecraft:leather_chestplate`\n    - `minecraft:leather_helmet`\n    - `minecraft:leather_leggings`\n    - `minecraft:netherite_boots`\n    - `minecraft:netherite_chestplate`\n    - `minecraft:netherite_helmet`\n    - `minecraft:netherite_leggings`\n    - `minecraft:turtle_helmet`\n- `c:barrels`\n    - `minecraft:barrel`\n- `c:barrels/wooden`\n    - `minecraft:barrel`\n- `c:bookshelves`\n    - `minecraft:bookshelf`\n- `c:bricks`\n    - `minecraft:brick`\n    - `minecraft:nether_brick`\n- `c:bricks/nether`\n    - `minecraft:nether_brick`\n- `c:bricks/normal`\n    - `minecraft:brick`\n- `c:buckets`\n    - `minecraft:axolotl_bucket`\n    - `minecraft:bucket`\n    - `minecraft:cod_bucket`\n    - `minecraft:lava_bucket`\n    - `minecraft:milk_bucket`\n    - `minecraft:powder_snow_bucket`\n    - `minecraft:pufferfish_bucket`\n    - `minecraft:salmon_bucket`\n    - `minecraft:tadpole_bucket`\n    - `minecraft:tropical_fish_bucket`\n    - `minecraft:water_bucket`\n- `c:buckets/empty`\n    - `minecraft:bucket`\n- `c:buckets/entity_water`\n    - `minecraft:axolotl_bucket`\n    - `minecraft:cod_bucket`\n    - `minecraft:pufferfish_bucket`\n    - `minecraft:salmon_bucket`\n    - `minecraft:tadpole_bucket`\n    - `minecraft:tropical_fish_bucket`\n- `c:buckets/lava`\n    - `minecraft:lava_bucket`\n- `c:buckets/milk`\n    - `minecraft:milk_bucket`\n- `c:buckets/powder_snow`\n    - `minecraft:powder_snow_bucket`\n- `c:buckets/water`\n    - `minecraft:water_bucket`\n- `c:budding_blocks`\n    - `minecraft:budding_amethyst`\n- `c:buds`\n    - `minecraft:large_amethyst_bud`\n    - `minecraft:medium_amethyst_bud`\n    - `minecraft:small_amethyst_bud`\n- `c:chains`\n    - `minecraft:chain`\n- `c:chests`\n    - `minecraft:chest`\n    - `minecraft:ender_chest`\n    - `minecraft:trapped_chest`\n- `c:chests/wooden`\n    - `minecraft:chest`\n    - `minecraft:trapped_chest`\n- `c:clusters`\n    - `minecraft:amethyst_cluster`\n- `c:cobblestones`\n    - `minecraft:cobbled_deepslate`\n    - `minecraft:cobblestone`\n    - `minecraft:infested_cobblestone`\n    - `minecraft:mossy_cobblestone`\n- `c:concrete_powders`\n    - `minecraft:black_concrete_powder`\n    - `minecraft:blue_concrete_powder`\n    - `minecraft:brown_concrete_powder`\n    - `minecraft:cyan_concrete_powder`\n    - `minecraft:gray_concrete_powder`\n    - `minecraft:green_concrete_powder`\n    - `minecraft:light_blue_concrete_powder`\n    - `minecraft:light_gray_concrete_powder`\n    - `minecraft:lime_concrete_powder`\n    - `minecraft:magenta_concrete_powder`\n    - `minecraft:orange_concrete_powder`\n    - `minecraft:pink_concrete_powder`\n    - `minecraft:purple_concrete_powder`\n    - `minecraft:red_concrete_powder`\n    - `minecraft:white_concrete_powder`\n    - `minecraft:yellow_concrete_powder`\n- `c:concretes`\n    - `minecraft:black_concrete`\n    - `minecraft:blue_concrete`\n    - `minecraft:brown_concrete`\n    - `minecraft:cyan_concrete`\n    - `minecraft:gray_concrete`\n    - `minecraft:green_concrete`\n    - `minecraft:light_blue_concrete`\n    - `minecraft:light_gray_concrete`\n    - `minecraft:lime_concrete`\n    - `minecraft:magenta_concrete`\n    - `minecraft:orange_concrete`\n    - `minecraft:pink_concrete`\n    - `minecraft:purple_concrete`\n    - `minecraft:red_concrete`\n    - `minecraft:white_concrete`\n    - `minecraft:yellow_concrete`\n- `c:crops`\n    - `minecraft:beetroot`\n    - `minecraft:cactus`\n    - `minecraft:carrot`\n    - `minecraft:cocoa_beans`\n    - `minecraft:melon`\n    - `minecraft:nether_wart`\n    - `minecraft:potato`\n    - `minecraft:pumpkin`\n    - `minecraft:sugar_cane`\n    - `minecraft:wheat`\n- `c:crops/beetroot`\n    - `minecraft:beetroot`\n- `c:crops/cactus`\n    - `minecraft:cactus`\n- `c:crops/carrot`\n    - `minecraft:carrot`\n- `c:crops/cocoa_bean`\n    - `minecraft:cocoa_beans`\n- `c:crops/melon`\n    - `minecraft:melon`\n- `c:crops/nether_wart`\n    - `minecraft:nether_wart`\n- `c:crops/potato`\n    - `minecraft:potato`\n- `c:crops/pumpkin`\n    - `minecraft:pumpkin`\n- `c:crops/sugar_cane`\n    - `minecraft:sugar_cane`\n- `c:crops/wheat`\n    - `minecraft:wheat`\n- `c:dusts`\n    - `minecraft:glowstone_dust`\n    - `minecraft:redstone`\n- `c:dusts/glowstone`\n    - `minecraft:glowstone_dust`\n- `c:dusts/redstone`\n    - `minecraft:redstone`\n- `c:dyed`\n    - `minecraft:black_banner`\n    - `minecraft:black_bed`\n    - `minecraft:black_candle`\n    - `minecraft:black_carpet`\n    - `minecraft:black_concrete`\n    - `minecraft:black_concrete_powder`\n    - `minecraft:black_glazed_terracotta`\n    - `minecraft:black_shulker_box`\n    - `minecraft:black_stained_glass`\n    - `minecraft:black_stained_glass_pane`\n    - `minecraft:black_terracotta`\n    - `minecraft:black_wool`\n    - `minecraft:blue_banner`\n    - `minecraft:blue_bed`\n    - `minecraft:blue_candle`\n    - `minecraft:blue_carpet`\n    - `minecraft:blue_concrete`\n    - `minecraft:blue_concrete_powder`\n    - `minecraft:blue_glazed_terracotta`\n    - `minecraft:blue_shulker_box`\n    - `minecraft:blue_stained_glass`\n    - `minecraft:blue_stained_glass_pane`\n    - `minecraft:blue_terracotta`\n    - `minecraft:blue_wool`\n    - `minecraft:brown_banner`\n    - `minecraft:brown_bed`\n    - `minecraft:brown_candle`\n    - `minecraft:brown_carpet`\n    - `minecraft:brown_concrete`\n    - `minecraft:brown_concrete_powder`\n    - `minecraft:brown_glazed_terracotta`\n    - `minecraft:brown_shulker_box`\n    - `minecraft:brown_stained_glass`\n    - `minecraft:brown_stained_glass_pane`\n    - `minecraft:brown_terracotta`\n    - `minecraft:brown_wool`\n    - `minecraft:cyan_banner`\n    - `minecraft:cyan_bed`\n    - `minecraft:cyan_candle`\n    - `minecraft:cyan_carpet`\n    - `minecraft:cyan_concrete`\n    - `minecraft:cyan_concrete_powder`\n```\n\n----------------------------------------\n\nTITLE: Referencing JSON Syntax Highlighting in Markdown\nDESCRIPTION: Demonstrates how to specify JSON syntax highlighting for code blocks in Markdown. This ensures proper rendering of JSON snippets in the documentation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/contributing.md#2025-04-06_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```js\n// JSON code block goes here\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Item and Block Categories\nDESCRIPTION: This snippet provides a structured list of Minecraft items and blocks, categorized by type, material, and function. It includes various categories such as glass blocks, ingots, ores, tools, and storage blocks, each containing specific Minecraft item identifiers.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n- `c:glass_blocks/cheap`\n    - `minecraft:black_stained_glass`\n    - `minecraft:blue_stained_glass`\n    - `minecraft:brown_stained_glass`\n    - `minecraft:cyan_stained_glass`\n    - `minecraft:glass`\n    - `minecraft:gray_stained_glass`\n    - `minecraft:green_stained_glass`\n    - `minecraft:light_blue_stained_glass`\n    - `minecraft:light_gray_stained_glass`\n    - `minecraft:lime_stained_glass`\n    - `minecraft:magenta_stained_glass`\n    - `minecraft:orange_stained_glass`\n    - `minecraft:pink_stained_glass`\n    - `minecraft:purple_stained_glass`\n    - `minecraft:red_stained_glass`\n    - `minecraft:white_stained_glass`\n    - `minecraft:yellow_stained_glass`\n- `c:glass_blocks/colorless`\n    - `minecraft:glass`\n- `c:glass_blocks/tinted`\n    - `minecraft:tinted_glass`\n- `c:glass_panes`\n    - `minecraft:black_stained_glass_pane`\n    - `minecraft:blue_stained_glass_pane`\n    - `minecraft:brown_stained_glass_pane`\n    - `minecraft:cyan_stained_glass_pane`\n    - `minecraft:glass_pane`\n    - `minecraft:gray_stained_glass_pane`\n    - `minecraft:green_stained_glass_pane`\n    - `minecraft:light_blue_stained_glass_pane`\n    - `minecraft:light_gray_stained_glass_pane`\n    - `minecraft:lime_stained_glass_pane`\n    - `minecraft:magenta_stained_glass_pane`\n    - `minecraft:orange_stained_glass_pane`\n    - `minecraft:pink_stained_glass_pane`\n    - `minecraft:purple_stained_glass_pane`\n    - `minecraft:red_stained_glass_pane`\n    - `minecraft:white_stained_glass_pane`\n    - `minecraft:yellow_stained_glass_pane`\n- `c:glass_panes/colorless`\n    - `minecraft:glass_pane`\n- `c:glazed_terracottas`\n    - `minecraft:black_glazed_terracotta`\n    - `minecraft:blue_glazed_terracotta`\n    - `minecraft:brown_glazed_terracotta`\n    - `minecraft:cyan_glazed_terracotta`\n    - `minecraft:gray_glazed_terracotta`\n    - `minecraft:green_glazed_terracotta`\n    - `minecraft:light_blue_glazed_terracotta`\n    - `minecraft:light_gray_glazed_terracotta`\n    - `minecraft:lime_glazed_terracotta`\n    - `minecraft:magenta_glazed_terracotta`\n    - `minecraft:orange_glazed_terracotta`\n    - `minecraft:pink_glazed_terracotta`\n    - `minecraft:purple_glazed_terracotta`\n    - `minecraft:red_glazed_terracotta`\n    - `minecraft:white_glazed_terracotta`\n    - `minecraft:yellow_glazed_terracotta`\n- `c:hidden_from_recipe_viewers`\n- `c:ingots`\n    - `minecraft:copper_ingot`\n    - `minecraft:gold_ingot`\n    - `minecraft:iron_ingot`\n    - `minecraft:netherite_ingot`\n- `c:ingots/copper`\n    - `minecraft:copper_ingot`\n- `c:ingots/gold`\n    - `minecraft:gold_ingot`\n- `c:ingots/iron`\n    - `minecraft:iron_ingot`\n- `c:ingots/netherite`\n    - `minecraft:netherite_ingot`\n- `c:leathers`\n    - `minecraft:leather`\n- `c:music_discs`\n    - `minecraft:music_disc_11`\n    - `minecraft:music_disc_13`\n    - `minecraft:music_disc_5`\n    - `minecraft:music_disc_blocks`\n    - `minecraft:music_disc_cat`\n    - `minecraft:music_disc_chirp`\n    - `minecraft:music_disc_creator`\n    - `minecraft:music_disc_creator_music_box`\n    - `minecraft:music_disc_far`\n    - `minecraft:music_disc_mall`\n    - `minecraft:music_disc_mellohi`\n    - `minecraft:music_disc_otherside`\n    - `minecraft:music_disc_pigstep`\n    - `minecraft:music_disc_precipice`\n    - `minecraft:music_disc_relic`\n    - `minecraft:music_disc_stal`\n    - `minecraft:music_disc_strad`\n    - `minecraft:music_disc_wait`\n    - `minecraft:music_disc_ward`\n- `c:nuggets`\n    - `minecraft:gold_nugget`\n    - `minecraft:iron_nugget`\n- `c:nuggets/gold`\n    - `minecraft:gold_nugget`\n- `c:nuggets/iron`\n    - `minecraft:iron_nugget`\n- `c:obsidians`\n    - `minecraft:crying_obsidian`\n    - `minecraft:obsidian`\n- `c:obsidians/crying`\n    - `minecraft:crying_obsidian`\n- `c:obsidians/normal`\n    - `minecraft:obsidian`\n- `c:ores`\n    - `minecraft:ancient_debris`\n    - `minecraft:coal_ore`\n    - `minecraft:copper_ore`\n    - `minecraft:deepslate_coal_ore`\n    - `minecraft:deepslate_copper_ore`\n    - `minecraft:deepslate_diamond_ore`\n    - `minecraft:deepslate_emerald_ore`\n    - `minecraft:deepslate_gold_ore`\n    - `minecraft:deepslate_iron_ore`\n    - `minecraft:deepslate_lapis_ore`\n    - `minecraft:deepslate_redstone_ore`\n    - `minecraft:diamond_ore`\n    - `minecraft:emerald_ore`\n    - `minecraft:gold_ore`\n    - `minecraft:iron_ore`\n    - `minecraft:lapis_ore`\n    - `minecraft:nether_gold_ore`\n    - `minecraft:nether_quartz_ore`\n    - `minecraft:redstone_ore`\n- `c:ores/netherite_scrap`\n    - `minecraft:ancient_debris`\n- `c:ores/quartz`\n    - `minecraft:nether_quartz_ore`\n- `c:player_workstations/crafting_tables`\n    - `minecraft:crafting_table`\n- `c:player_workstations/furnaces`\n    - `minecraft:furnace`\n- `c:raw_materials`\n    - `minecraft:raw_copper`\n    - `minecraft:raw_gold`\n    - `minecraft:raw_iron`\n- `c:raw_materials/copper`\n    - `minecraft:raw_copper`\n- `c:raw_materials/gold`\n    - `minecraft:raw_gold`\n- `c:raw_materials/iron`\n    - `minecraft:raw_iron`\n- `c:rods`\n    - `minecraft:blaze_rod`\n    - `minecraft:breeze_rod`\n    - `minecraft:stick`\n- `c:rods/blaze`\n    - `minecraft:blaze_rod`\n- `c:rods/breeze`\n    - `minecraft:breeze_rod`\n- `c:rods/wooden`\n    - `minecraft:stick`\n- `c:ropes`\n- `c:sandstone/blocks`\n    - `minecraft:chiseled_red_sandstone`\n    - `minecraft:chiseled_sandstone`\n    - `minecraft:cut_red_sandstone`\n    - `minecraft:cut_sandstone`\n    - `minecraft:red_sandstone`\n    - `minecraft:sandstone`\n    - `minecraft:smooth_red_sandstone`\n    - `minecraft:smooth_sandstone`\n- `c:sandstone/red_blocks`\n    - `minecraft:chiseled_red_sandstone`\n    - `minecraft:cut_red_sandstone`\n    - `minecraft:red_sandstone`\n    - `minecraft:smooth_red_sandstone`\n- `c:sandstone/red_slabs`\n    - `minecraft:cut_red_sandstone_slab`\n    - `minecraft:red_sandstone_slab`\n    - `minecraft:smooth_red_sandstone_slab`\n- `c:sandstone/red_stairs`\n    - `minecraft:red_sandstone_stairs`\n    - `minecraft:smooth_red_sandstone_stairs`\n- `c:sandstone/slabs`\n    - `minecraft:cut_red_sandstone_slab`\n    - `minecraft:cut_sandstone_slab`\n    - `minecraft:red_sandstone_slab`\n    - `minecraft:sandstone_slab`\n    - `minecraft:smooth_red_sandstone_slab`\n    - `minecraft:smooth_sandstone_slab`\n- `c:sandstone/stairs`\n    - `minecraft:red_sandstone_stairs`\n    - `minecraft:sandstone_stairs`\n    - `minecraft:smooth_red_sandstone_stairs`\n    - `minecraft:smooth_sandstone_stairs`\n- `c:sandstone/uncolored_blocks`\n    - `minecraft:chiseled_sandstone`\n    - `minecraft:cut_sandstone`\n    - `minecraft:sandstone`\n    - `minecraft:smooth_sandstone`\n- `c:sandstone/uncolored_slabs`\n    - `minecraft:cut_sandstone_slab`\n    - `minecraft:sandstone_slab`\n    - `minecraft:smooth_sandstone_slab`\n- `c:sandstone/uncolored_stairs`\n    - `minecraft:sandstone_stairs`\n    - `minecraft:smooth_sandstone_stairs`\n- `c:shulker_boxes`\n    - `minecraft:black_shulker_box`\n    - `minecraft:blue_shulker_box`\n    - `minecraft:brown_shulker_box`\n    - `minecraft:cyan_shulker_box`\n    - `minecraft:gray_shulker_box`\n    - `minecraft:green_shulker_box`\n    - `minecraft:light_blue_shulker_box`\n    - `minecraft:light_gray_shulker_box`\n    - `minecraft:lime_shulker_box`\n    - `minecraft:magenta_shulker_box`\n    - `minecraft:orange_shulker_box`\n    - `minecraft:pink_shulker_box`\n    - `minecraft:purple_shulker_box`\n    - `minecraft:red_shulker_box`\n    - `minecraft:shulker_box`\n    - `minecraft:white_shulker_box`\n    - `minecraft:yellow_shulker_box`\n- `c:slime_balls`\n    - `minecraft:slime_ball`\n- `c:stones`\n    - `minecraft:andesite`\n    - `minecraft:deepslate`\n    - `minecraft:diorite`\n    - `minecraft:granite`\n    - `minecraft:stone`\n    - `minecraft:tuff`\n- `c:storage_blocks`\n    - `minecraft:bone_block`\n    - `minecraft:coal_block`\n    - `minecraft:copper_block`\n    - `minecraft:diamond_block`\n    - `minecraft:dried_kelp_block`\n    - `minecraft:emerald_block`\n    - `minecraft:gold_block`\n    - `minecraft:hay_block`\n    - `minecraft:iron_block`\n    - `minecraft:lapis_block`\n    - `minecraft:netherite_block`\n    - `minecraft:raw_copper_block`\n    - `minecraft:raw_gold_block`\n    - `minecraft:raw_iron_block`\n    - `minecraft:redstone_block`\n    - `minecraft:slime_block`\n- `c:storage_blocks/bone_meal`\n    - `minecraft:bone_block`\n- `c:storage_blocks/coal`\n    - `minecraft:coal_block`\n- `c:storage_blocks/copper`\n    - `minecraft:copper_block`\n- `c:storage_blocks/diamond`\n    - `minecraft:diamond_block`\n- `c:storage_blocks/dried_kelp`\n    - `minecraft:dried_kelp_block`\n- `c:storage_blocks/emerald`\n    - `minecraft:emerald_block`\n- `c:storage_blocks/gold`\n    - `minecraft:gold_block`\n- `c:storage_blocks/iron`\n    - `minecraft:iron_block`\n- `c:storage_blocks/lapis`\n    - `minecraft:lapis_block`\n- `c:storage_blocks/netherite`\n    - `minecraft:netherite_block`\n- `c:storage_blocks/raw_copper`\n    - `minecraft:raw_copper_block`\n- `c:storage_blocks/raw_gold`\n    - `minecraft:raw_gold_block`\n- `c:storage_blocks/raw_iron`\n    - `minecraft:raw_iron_block`\n- `c:storage_blocks/redstone`\n    - `minecraft:redstone_block`\n- `c:storage_blocks/slime`\n    - `minecraft:slime_block`\n- `c:storage_blocks/wheat`\n    - `minecraft:hay_block`\n- `c:strings`\n    - `minecraft:string`\n- `c:tools`\n    - `minecraft:bow`\n    - `minecraft:brush`\n    - `minecraft:crossbow`\n    - `minecraft:diamond_axe`\n    - `minecraft:diamond_hoe`\n    - `minecraft:diamond_pickaxe`\n    - `minecraft:diamond_shovel`\n    - `minecraft:diamond_sword`\n    - `minecraft:fishing_rod`\n    - `minecraft:flint_and_steel`\n    - `minecraft:golden_axe`\n    - `minecraft:golden_hoe`\n    - `minecraft:golden_pickaxe`\n    - `minecraft:golden_shovel`\n    - `minecraft:golden_sword`\n    - `minecraft:iron_axe`\n    - `minecraft:iron_hoe`\n    - `minecraft:iron_pickaxe`\n    - `minecraft:iron_shovel`\n    - `minecraft:iron_sword`\n    - `minecraft:mace`\n    - `minecraft:netherite_axe`\n    - `minecraft:netherite_hoe`\n    - `minecraft:netherite_pickaxe`\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Contributing Guidelines\nDESCRIPTION: A markdown file containing a heading and a link to the official MinecraftForge contribution documentation.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/CONTRIBUTING.md#2025-04-06_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing Documentation\n\nGuidelines for contributing can be found [on the docs][contributing].\n\n[contributing]: https://docs.minecraftforge.net/en/latest/contributing/\n```\n\n----------------------------------------\n\nTITLE: Listing Minecraft Biome and Structure Tags\nDESCRIPTION: This snippet provides a detailed list of Minecraft biome and structure tags, organized by categories such as climate, rarity, and terrain features. It includes both vanilla Minecraft tags and Forge-specific tags.\nSOURCE: https://github.com/MinecraftForge/Documentation/blob/1.21.x/docs/resources/server/tagslist.md#2025-04-06_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n- `c:is_hot/overworld`\n    - `minecraft:badlands`\n    - `minecraft:desert`\n    - `minecraft:eroded_badlands`\n    - `minecraft:savanna`\n    - `minecraft:savanna_plateau`\n    - `minecraft:warm_ocean`\n    - `minecraft:windswept_savanna`\n    - `minecraft:wooded_badlands`\n- `c:is_wet`\n    - `minecraft:bamboo_jungle`\n    - `minecraft:beach`\n    - `minecraft:deep_dark`\n    - `minecraft:dripstone_caves`\n    - `minecraft:jungle`\n    - `minecraft:lush_caves`\n    - `minecraft:mangrove_swamp`\n    - `minecraft:sparse_jungle`\n    - `minecraft:swamp`\n- `c:is_windswept`\n    - `minecraft:windswept_forest`\n    - `minecraft:windswept_gravelly_hills`\n    - `minecraft:windswept_hills`\n    - `minecraft:windswept_savanna`\n- `c:no_default_monsters`\n    - `minecraft:deep_dark`\n    - `minecraft:mushroom_fields`\n- `forge:is_cold/nether`\n- `forge:is_dense/end`\n- `forge:is_dense/nether`\n- `forge:is_hot/end`\n- `forge:is_lush`\n    - `minecraft:lush_caves`\n- `forge:is_magical`\n- `forge:is_modified`\n- `forge:is_plateau`\n    - `minecraft:meadow`\n    - `minecraft:savanna_plateau`\n    - `minecraft:wooded_badlands`\n- `forge:is_rare`\n    - `minecraft:bamboo_jungle`\n    - `minecraft:deep_dark`\n    - `minecraft:eroded_badlands`\n    - `minecraft:flower_forest`\n    - `minecraft:ice_spikes`\n    - `minecraft:mushroom_fields`\n    - `minecraft:old_growth_birch_forest`\n    - `minecraft:old_growth_spruce_taiga`\n    - `minecraft:savanna_plateau`\n    - `minecraft:sparse_jungle`\n    - `minecraft:sunflower_plains`\n    - `minecraft:windswept_gravelly_hills`\n    - `minecraft:windswept_savanna`\n- `forge:is_sandy`\n    - `minecraft:badlands`\n    - `minecraft:beach`\n    - `minecraft:desert`\n    - `minecraft:wooded_badlands`\n- `forge:is_sparse/end`\n- `forge:is_sparse/nether`\n- `forge:is_spooky`\n    - `minecraft:dark_forest`\n    - `minecraft:deep_dark`\n- `forge:is_wet/end`\n- `forge:is_wet/nether`\n\nworldgen/structure\n------------------\n- `c:hidden_from_displayers`\n- `c:hidden_from_locator_selection`\n```"
  }
]