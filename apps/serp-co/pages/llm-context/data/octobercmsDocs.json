[
  {
    "owner": "octobercms",
    "repo": "docs",
    "content": "TITLE: Creating Plugin with Artisan Command in October CMS\nDESCRIPTION: Command to generate a basic plugin structure with the specified author and plugin name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:plugin Acme.Blog\n```\n\n----------------------------------------\n\nTITLE: Creating New October CMS Project using Composer\nDESCRIPTION: Command to create a new October CMS project using Composer package manager. Creates a new project in a directory called 'myoctober'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project october/october myoctober\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Content Field Class Implementation\nDESCRIPTION: Full implementation of a custom content field class, including form field definition, model extension, and database table extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nnamespace October\\Test\\ContentFields;\n\nuse Tailor\\Classes\\ContentFieldBase;\nuse October\\Contracts\\Element\\FormElement;\n\nclass MyContentField extends ContentFieldBase\n{\n    public function defineFormField(FormElement $form, $context = null)\n    {\n        $form->addFormField($this->fieldName, $this->label)\n            ->useConfig($this->config)\n            ->displayAs('partial')\n            ->path('$/october/test/contentfields/mycontentfield/partials/_field.php');\n    }\n\n    public function extendModelObject($model)\n    {\n        $model->addJsonable($this->fieldName);\n    }\n\n    public function extendDatabaseTable($table)\n    {\n        $table->mediumText($this->fieldName)->nullable();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Template in October CMS\nDESCRIPTION: Demonstrates the simplest home page example with URL configuration and HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Hello, world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Registration Class in October CMS\nDESCRIPTION: Example of a plugin registration file showing basic plugin information and component registration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public function pluginDetails()\n    {\n        return [\n            'name' => 'Blog Plugin',\n            'description' => 'Provides some really cool blog features.',\n            'author' => 'ACME Corporation',\n            'icon' => 'icon-leaf'\n        ];\n    }\n\n    public function registerComponents()\n    {\n        return [\n            \\Acme\\Blog\\Components\\Post::class => 'blogPost'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with Composer\nDESCRIPTION: Commands for creating a new October CMS project using Composer. Shows different installation options including creating in a new directory or current directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project october/october myoctober\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project october/october .\n```\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project october/october . \"^2.0\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Init File Example\nDESCRIPTION: Custom initialization logic for handling application events in a plugin's init.php file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nApp::before({\n    // Logic when the request starts, after routes are registered\n});\n\nApp::after({\n    // Logic the request has finished, after the response is sent\n});\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Exceptions with Attributes API\nDESCRIPTION: Shows how to handle AJAX exceptions using the data attributes API's error callback, which receives the error data as a parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onHandleForm\" data-request-error=\"console.log(data)\">\n```\n\n----------------------------------------\n\nTITLE: Binding Dependencies in OctoberCMS IoC Container\nDESCRIPTION: Demonstrates how to bind a type to the IoC container using a Closure callback that returns a new instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('foo', function($app) {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Page Template with Placeholder Content in October CMS\nDESCRIPTION: A page template example that injects content into the head placeholder using the {% put %} tag and defines its main content. This demonstrates how a page can add content to both placeholders and the main layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/page.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndescription=\"example page\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put head %}\n    <meta name=\"foo\" content=\"bar\">\n{% endput %}\n\n<p>My content.</p>\n```\n\n----------------------------------------\n\nTITLE: Performing Database Migration in October CMS\nDESCRIPTION: This command performs a database migration, creating tables and executing seed scripts provided by the system and plugin version history. It only applies new changes if run multiple times.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/updating-october.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seeder in PHP with October CMS\nDESCRIPTION: This snippet demonstrates how to create a database seeder class in October CMS. It extends the Seeder class and uses a model to create a new user record in the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Users\\Updates;\n\nuse Seeder;\nuse Acme\\Users\\Models\\User;\n\nclass SeedUsersTable extends Seeder\n{\n    public function run()\n    {\n        $user = User::create([\n            'email' => 'user@example.tld',\n            'login' => 'user',\n            'password' => 'password123',\n            'password_confirmation' => 'password123',\n            'first_name' => 'Actual',\n            'last_name' => 'Person',\n            'is_activated' => true\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Table\nDESCRIPTION: Example of adding new columns to an existing database table\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->string('email');\n});\n```\n\n----------------------------------------\n\nTITLE: Using lockForUpdate for Exclusive Pessimistic Locking in PHP\nDESCRIPTION: Demonstrates how to use lockForUpdate to apply an exclusive lock, preventing the selected rows from being modified or selected with another shared lock.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Filtering by Relationship Absence - PHP\nDESCRIPTION: Shows how to find models that don't have any related records using the doesntHave method, which is the inverse of the has method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::doesntHave('comments')->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Class Definition - PHP\nDESCRIPTION: Minimal implementation of a backend controller class extending Backend\\Classes\\Controller. Shows basic structure with namespace and index action method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Posts extends \\Backend\\Classes\\Controller\n{\n    public function index()    // ‚Üê Action method\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration Class in October CMS\nDESCRIPTION: Example of a migration class that creates a blog posts table. It extends the Migration class and implements up() and down() methods to create and drop the table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Updates;\n\nuse Schema;\nuse October\\Rain\\Database\\Updates\\Migration;\n\nclass CreatePostsTable extends Migration\n{\n    public function up()\n    {\n        Schema::create('october_blog_posts', function($table)\n        {\n            $table->engine = 'InnoDB';\n            $table->increments('id');\n            $table->string('title');\n            $table->string('slug')->index();\n            $table->text('excerpt')->nullable();\n            $table->text('content');\n            $table->timestamp('published_at')->nullable();\n            $table->boolean('is_published')->default(false);\n            $table->timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::drop('october_blog_posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Lazy Loaded Counts - PHP\nDESCRIPTION: Demonstrates adding query constraints to lazy loaded relationship counts using a closure, allowing for conditional counting of related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$user->loadCount(['roles' => function ($query) {\n    $query->where('clearance', '>', 5);\n}])\n```\n\n----------------------------------------\n\nTITLE: Performing an Insert Operation in PHP\nDESCRIPTION: This code shows how to execute an INSERT statement using the Db facade in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nDb::insert('insert into users (id, name) values (?, ?)', [1, 'Joe']);\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-One Relationships in PHP\nDESCRIPTION: Example of defining a one-to-one relationship between User and Phone models in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    public $hasOne = [\n        'phone' => \\Acme\\Blog\\Models\\Phone::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing October CMS with Console Commands\nDESCRIPTION: Console commands to cache the system structure and optimize autoloading for improved performance in production environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:optimize\n\ncomposer dump-autoload --optimize\n```\n\n----------------------------------------\n\nTITLE: Authenticating Backend Users\nDESCRIPTION: Shows two methods of authenticating users: using credentials (login/password) and directly with a user model instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/users.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Authenticate user by credentials\n$user = BackendAuth::authenticate([\n    'login' => post('login'),\n    'password' => post('password')\n]);\n\n// Sign in as a specific user\nBackendAuth::login($user);\n```\n\n----------------------------------------\n\nTITLE: Sorting Query Results with orderBy\nDESCRIPTION: Demonstrates how to use the orderBy method to sort query results by a specified column in ascending or descending order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for October CMS\nDESCRIPTION: This snippet provides the Nginx server block configuration for October CMS, including location directives for handling static files and PHP scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation / {\n    # Let OctoberCMS handle everything by default.\n    # The path not resolved by OctoberCMS router will return OctoberCMS's 404 page.\n    # Everything that does not match with the whitelist below will fall into this.\n    rewrite ^/.*$ /index.php last;\n}\n\n# Pass the PHP scripts to FastCGI server\nlocation ~ ^/index.php {\n    # Write your FPM configuration here\n\n}\n\n# Whitelist\n## Let October handle if static file not exists\nlocation ~ ^/favicon\\.ico { try_files $uri /index.php; }\nlocation ~ ^/sitemap\\.xml { try_files $uri /index.php; }\nlocation ~ ^/robots\\.txt { try_files $uri /index.php; }\nlocation ~ ^/humans\\.txt { try_files $uri /index.php; }\n\n## Let nginx return 404 if static file not exists\nlocation ~ ^/storage/app/uploads/public { try_files $uri 404; }\nlocation ~ ^/storage/app/media { try_files $uri 404; }\nlocation ~ ^/storage/app/resized { try_files $uri 404; }\nlocation ~ ^/storage/temp/public { try_files $uri 404; }\n\nlocation ~ ^/modules/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/behaviors/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/behaviors/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/widgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/widgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/formwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/formwidgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/reportwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/reportwidgets/.*/resources { try_files $uri 404; }\n\nlocation ~ ^/plugins/.*/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/behaviors/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/behaviors/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/reportwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/reportwidgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/formwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/formwidgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/widgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/widgets/.*/resources { try_files $uri 404; }\n\nlocation ~ ^/themes/.*/assets { try_files $uri 404; }\nlocation ~ ^/themes/.*/resources { try_files $uri 404; }\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row with Query Builder\nDESCRIPTION: Uses the first method to retrieve only the first row that matches the given condition. Returns a single stdClass object with properties for each column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n\necho $user->name;\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Class Definition in PHP for October CMS\nDESCRIPTION: Shows the basic structure of a controller class in an October CMS plugin. The controller extends the Backend\\Classes\\Controller base class and includes a sample index action method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Posts extends \\Backend\\Classes\\Controller {\n\n    public function index()    // <=== Action method\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Relationship\nDESCRIPTION: Example of defining a hasMany relationship between User and Post models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Navigation Menu Items in PHP\nDESCRIPTION: Example of registering a top-level navigation menu item with two sub-menu items in OctoberCMS. Shows configuration of labels, URLs, icons, permissions and ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function registerNavigation()\n{\n    return [\n        'blog' => [\n            'label' => 'Blog',\n            'url' => Backend::url('acme/blog/posts'),\n            'icon' => 'icon-pencil',\n            'permissions' => ['acme.blog.*'],\n            'order' => 500,\n\n            'sideMenu' => [\n                'posts' => [\n                    'label' => 'Posts',\n                    'icon' => 'icon-copy',\n                    'url' => Backend::url('acme/blog/posts'),\n                    'permissions' => ['acme.blog.access_posts'],\n                ],\n                'categories' => [\n                    'label' => 'Categories',\n                    'icon' => 'icon-copy',\n                    'url' => Backend::url('acme/blog/categories'),\n                    'permissions' => ['acme.blog.access_categories'],\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Solving N+1 Problem with Eager Loading - PHP\nDESCRIPTION: Demonstrates how to use eager loading with the with() method to efficiently load relationships in advance, reducing the number of database queries needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author')->get();\n\nforeach ($books as $book) {\n    echo $book->author->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for a Field in PHP\nDESCRIPTION: Shows how to retrieve all error messages for a specific field. This returns an array of messages that can be iterated through.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nforeach ($messages->get('email') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Controller via Artisan Command - PHP/Bash\nDESCRIPTION: Command to generate a controller, configuration and view files using October CMS artisan command. Requires specifying author, plugin name and controller class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:controller Acme.Blog Posts\n```\n\n----------------------------------------\n\nTITLE: Accessing Pivot Table Data\nDESCRIPTION: Demonstrates how to access pivot table data through relationship models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    echo $role->pivot->created_at;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Job Push in PHP\nDESCRIPTION: Demonstrates how to push a new job onto the queue using Queue::push method with a class and data parameters\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nQueue::push(SendEmail::class, ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plugin Registration File in PHP\nDESCRIPTION: Example of a Plugin registration file that defines the plugin details and registers components. The file should be placed in the plugin's root directory as Plugin.php.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public function pluginDetails()\n    {\n        return [\n            'name' => 'Blog Plugin',\n            'description' => 'Provides some really cool blog features.',\n            'author' => 'ACME Corporation',\n            'icon' => 'icon-leaf'\n        ];\n    }\n\n    public function registerComponents()\n    {\n        return [\n            'Acme\\Blog\\Components\\Post' => 'blogPost'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Relationships in PHP\nDESCRIPTION: Shows how to customize eager loading by adding an order by clause to sort related posts by creation date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->orderBy('created_at', 'desc');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Fields in PHP\nDESCRIPTION: Creates a Validator to validate multiple fields (name, password, email) with different rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$validator = Validator::make(\n    [\n        'name' => 'Joe',\n        'password' => 'lamepassword',\n        'email' => 'email@example.com'\n    ],\n    [\n        'name' => 'required',\n        'password' => 'required|min:8',\n        'email' => 'required|email|unique:users'\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Database Transaction Management\nDESCRIPTION: Shows different methods of handling database transactions including automatic and manual transaction control.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nDb::transaction(function () {\n    Db::table('users')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::beginTransaction();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::rollBack();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::commit();\n```\n\n----------------------------------------\n\nTITLE: Detailed Relationship Definition\nDESCRIPTION: Example of defining relationships with additional parameters like delete behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic $hasMany = [\n    'posts' => [\\Acme\\Blog\\Models\\Post::class, 'delete' => true]\n];\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline Images in Emails with Twig\nDESCRIPTION: Demonstrates how to embed inline images in email content using Twig syntax in October CMS, including handling for queued emails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image:\n\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n\n{# For queued emails #}\n<body>\n    Here is an image:\n    {% set pathToFile = 'storage/app/media/path/to/file.jpg'|app %}\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating an Accessor for Virtual Attributes in PHP\nDESCRIPTION: Shows how to define an accessor method that computes a virtual attribute not stored in the database. This example creates an is_admin attribute from a database field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Get the administrator flag for the user.\n     *\n     * @return bool\n     */\n    public function getIsAdminAttribute()\n    {\n        return $this->attributes['admin'] == 'yes';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Query Scopes in Database Queries\nDESCRIPTION: Demonstrates how to use and chain multiple query scopes when querying the database. Shows the syntax for calling scopes without the 'scope' prefix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = User::popular()->active()->orderBy('created_at')->get();\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments by Reference in Event Firing\nDESCRIPTION: Shows how to pass arguments by reference when firing an event to allow multiple listeners to manipulate the result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('cms.processContent', [&$content]);\n```\n\n----------------------------------------\n\nTITLE: Generating Migration File with Artisan Command\nDESCRIPTION: Command line syntax for creating a new migration file using October CMS artisan command\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:migration Acme.Blog CreatePostsTable\n```\n\n----------------------------------------\n\nTITLE: Grouping Query Results with groupBy and having\nDESCRIPTION: Shows how to use groupBy and having methods to group query results and filter the groups based on aggregate conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler Method in PHP\nDESCRIPTION: PHP implementation of the onTest AJAX handler that processes form input values and assigns the result to a page variable that will be available in the partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onTest()\n{\n    $this->page['result'] = input('value1') + input('value2');\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating the Database for October CMS\nDESCRIPTION: Initializes the database with the required tables and seed data for October CMS to function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\n----------------------------------------\n\nTITLE: Basic Validator Usage in PHP\nDESCRIPTION: Demonstrates how to create a Validator instance with data and rules, and how to check if validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$data = post();\n\n$validator = Validator::make($data, [\n    'name' => 'required|min:5'\n]);\n\nif ($validator->fails()) {\n    // The given data did not pass validation\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for October CMS\nDESCRIPTION: Comprehensive Nginx server configuration for running October CMS, including URL rewriting rules, PHP handling, and static file allowlisting to ensure proper functionality and security.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nlocation / {\n    # Let October CMS handle everything by default.\n    # The path not resolved by October CMS router will return October CMS's 404 page.\n    # Everything that does not match with the allowlist below will fall into this.\n    rewrite ^/.*$ /index.php last;\n}\n\n# Pass the PHP scripts to FastCGI server\nlocation ~ ^/index.php {\n    # Write your FPM configuration here\n}\n\n# Allowlist\nlocation ~ ^/(favicon\\.ico|sitemap\\.xml|robots\\.txt|humans\\.txt) { try_files $uri /index.php; }\n\n# Block all .dotfiles except well-known\nlocation ~ /\\.(?!well-known).* { deny all; }\n\n## Static Files\nlocation ~ ^/storage/app/(uploads/public|media|resources) { try_files $uri 404; }\nlocation ~ ^/storage/temp/public { try_files $uri 404; }\nlocation ~ ^/modules/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/modules/.*/(behaviors|widgets|formwidgets|reportwidgets)/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/(behaviors|reportwidgets|formwidgets|widgets)/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/themes/.*/(?:assets|resources) { try_files $uri 404; }\n```\n\n----------------------------------------\n\nTITLE: Processing Large Result Sets with Chunking\nDESCRIPTION: Shows how to process large result sets in smaller chunks to minimize memory usage, useful for console commands processing many records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->chunk(100, function($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Provider in PHP\nDESCRIPTION: Demonstrates how to create a service provider by extending the October\\Rain\\Support\\ServiceProvider class and implementing the register method to bind services to the IoC container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Support\\ServiceProvider;\n\nclass FooServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        $this->app->bind('foo', function() {\n            return new Foo;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties in October CMS\nDESCRIPTION: Example of defining a component property using the defineProperties method, including validation and display options for the CMS back-end.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'maxItems' => [\n            'title' => 'Max items',\n            'description' => 'The most amount of todo items allowed',\n            'default' => 10,\n            'type' => 'string',\n            'validationPattern' => '^[0-9]+$',\n            'validationMessage' => 'The Max Items property can contain only numeric symbols'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an AJAX Handler in October CMS\nDESCRIPTION: A PHP handler method that processes form input data and passes the result to a page variable for rendering in a partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onTest()\n{\n    $this->page['result'] = input('value1') + input('value2');\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Information Message to Console\nDESCRIPTION: Shows how to output an informational message to the console using the info method. This displays text with appropriate ANSI colors for information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$this->info('Display this on the screen');\n```\n\n----------------------------------------\n\nTITLE: Using Various Comparison Operators in Where Clauses\nDESCRIPTION: Shows how to use different comparison operators like >=, <>, and like in where clauses for more complex filtering conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('votes', '>=', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->where('votes', '<>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->where('name', 'like', 'T%')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with Raw SQL in PHP\nDESCRIPTION: Demonstrates how to run a basic SQL select query with parameterized values using the Db facade. This approach protects against SQL injection by using parameter bindings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::select('select * from users where active = ?', [1]);\n```\n\n----------------------------------------\n\nTITLE: Performance Configuration Settings\nDESCRIPTION: Environment configuration to optimize October CMS performance by disabling debug mode and enabling caching layers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nAPP_DEBUG=false\nCMS_ROUTE_CACHE=true\nCMS_ASSET_CACHE=true\nCMS_TWIG_CACHE=true\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Storage Engine Configuration\nDESCRIPTION: Examples of specifying database connection and storage engine settings\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSchema::connection('foo')->create('users', function ($table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Validator Usage in PHP\nDESCRIPTION: Creates a Validator instance to validate a name field with required and minimum length rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$validator = Validator::make(\n    ['name' => 'Joe'],\n    ['name' => 'required|min:5']\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Mail Template using PHP\nDESCRIPTION: Basic example of sending a mail template using the Mail facade in October CMS. Shows how to pass data and configure the message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMail::send('my-template', $data, function($message) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Component with Artisan Command\nDESCRIPTION: Command to create a new component class and default view using OctoberCMS CLI\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:component Acme.Blog BlogPosts\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Record in PHP using OctoberCMS Model\nDESCRIPTION: This snippet demonstrates how to create a new record in the database by instantiating a model, setting attributes, and calling the save method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$flight = new Flight;\n$flight->name = 'Sydney to Canberra';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationship Counts - PHP\nDESCRIPTION: Shows how to use loadCount to lazily load the count of related records after the model has been retrieved, useful for adding counts to existing models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$user = User::first();\n$user->loadCount('roles');\n```\n\n----------------------------------------\n\nTITLE: Basic Component Class Definition\nDESCRIPTION: Example of a component class definition with required componentDetails method and a custom posts method\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Components;\n\nclass BlogPosts extends \\Cms\\Classes\\ComponentBase\n{\n    public function componentDetails()\n    {\n        return [\n            'name' => 'Blog Posts',\n            'description' => 'Displays a collection of blog posts.',\n            'icon' => 'icon-puzzle-piece'\n        ];\n    }\n\n    /**\n     * posts becomes available on the page as {{ component.posts }}\n     */\n    public function posts()\n    {\n        return ['First Post', 'Second Post', 'Third Post'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Backend User Groups\nDESCRIPTION: Example of finding a user group by code and accessing its users for sending notifications.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/users.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$group = UserGroup::where('code', 'head-office-staff')->first();\n\nMail::sendTo($group->users, 'author.plugin:important_notification');\n```\n\n----------------------------------------\n\nTITLE: Selecting Records with Raw SQL in PHP\nDESCRIPTION: Demonstrates how to execute a SELECT query using the Db facade with parameter binding for SQL injection protection. Returns an array of stdClass objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::select('select * from users where active = ?', [1]);\n```\n\n----------------------------------------\n\nTITLE: Basic Where Clause Operations\nDESCRIPTION: Examples of basic where clause usage including equality checks and different comparison operators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', 100)->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('votes', '>=', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->where('votes', '<>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->where('name', 'like', 'T%')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Mutator in PHP Model Class\nDESCRIPTION: Example of creating a mutator method to format the first_name attribute when it is set on the model. The mutator converts the name to lowercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * setFirstNameAttribute writes to the `first_name` attribute\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Date and Time with carbon() in Twig\nDESCRIPTION: Illustrates the use of the format method with carbon() to apply custom formatting to a date and time value in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\nMeeting starts at {{ carbon(event.start_at).format('H:i') }} in Johannesburg.\n```\n\n----------------------------------------\n\nTITLE: Triggering AJAX Request with HTML Button in October CMS\nDESCRIPTION: Demonstrates how to create a button in HTML that triggers an AJAX request to a backend controller using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/controllers-ajax.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    data-request=\"onDoSomething\"\n    class=\"btn btn-default\">\n    Do something\n</button>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Collection Class in PHP\nDESCRIPTION: Creates a collection instance from an array, maps values to uppercase, and removes empty elements using method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$collection = new October\\Rain\\Support\\Collection(['stewie', 'brian', null]);\n\n$collection = $collection\n    ->map(function ($name) {\n        return strtoupper($name);\n    })\n    ->reject(function ($name) {\n        return empty($name);\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Loading Example\nDESCRIPTION: Complex example showing how to load blog posts from a database and display them using both PHP and Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog\"\n==\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::orderBy('created_at', 'desc')->get();\n}\n==\n<h2>Latest posts</h2>\n<ul>\n    {% for post in posts %}\n        <h3>{{ post.title }}</h3>\n        {{ post.content }}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships with with() in October CMS\nDESCRIPTION: This code shows how to eager load relationships to prevent the N+1 query problem. It loads all books along with their authors in just two database queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author')->get();\n\nforeach ($books as $book) {\n    echo $book->author->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeCreate Event Handler with Validation in PHP\nDESCRIPTION: Example of using the beforeCreate event with validation to prevent saving an invalid model by returning false from the event handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeCreate()\n{\n    if (!$user->isValid()) {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Values in PHP with October CMS\nDESCRIPTION: Demonstrates how to retrieve cookie values using the Cookie facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = Cookie::get('name');\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filters in Twig\nDESCRIPTION: Multiple filters can be applied in succession, with each filter modifying the result of the previous one.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'October Glory'|upper|replace({'October': 'Morning'}) }}\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Error Messages to Validator in PHP\nDESCRIPTION: Shows how to specify custom error messages for validation instead of using the defaults.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = Validator::make($input, $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Validating Request Data in PHP\nDESCRIPTION: Shows how to validate all user input using the Request facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$data = Request::validate($rules);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Related Models\nDESCRIPTION: Demonstrates how to add multiple related models at once using the addMany method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$post->comments()->addMany([\n    new Comment(['message' => 'A new comment.']),\n    new Comment(['message' => 'Another comment.']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in PHP for October CMS\nDESCRIPTION: Examples of defining routes with different HTTP methods (GET, POST, PUT, DELETE) using closures in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return 'Hello World';\n});\n\nRoute::post('foo/bar', function () {\n    return 'Hello World';\n});\n\nRoute::put('foo/bar', function () {\n    //\n});\n\nRoute::delete('foo/bar', function () {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Widget Class in October CMS\nDESCRIPTION: This snippet shows the basic structure of a form widget class in October CMS. The class must extend Backend\\Classes\\FormWidgetBase and include a defaultAlias property and a render method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\FormWidgets;\n\nuse Backend\\Classes\\FormWidgetBase;\n\nclass ColorPicker extends FormWidgetBase\n{\n    /**\n     * @var string defaultAlias to identify this widget.\n     */\n    protected $defaultAlias = 'colorpicker';\n\n    public function render() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Model in OctoberCMS (PHP)\nDESCRIPTION: Demonstrates how to create a new record in the database by instantiating a model, setting attributes, and calling the save method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$flight = new Flight;\n$flight->name = 'Sydney to Canberra';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: Running a Select Query with Parameter Binding in PHP\nDESCRIPTION: This code shows how to run a basic SELECT query using the Db facade in October CMS, with parameter binding for protection against SQL injection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::select('select * from users where active = ?', [1]);\n```\n\n----------------------------------------\n\nTITLE: Component Usage in Template\nDESCRIPTION: Example of using a component in a Twig template with property notation\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in blogPosts.posts %}\n    {{ post }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving an Array of Column Values\nDESCRIPTION: Uses the pluck method to retrieve an array containing values from a single column. Useful for creating lists from database data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n\nforeach ($titles as $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Data in PHP\nDESCRIPTION: Demonstrates using the Request facade to validate all user input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$data = Request::validate($rules);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic JSON API Endpoint in October CMS\nDESCRIPTION: Demonstrates how to create a simple API endpoint that returns a JSON response using the response() Twig function in October CMS. This example shows the page configuration and the Twig markup needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/api/foobar\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({ foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Complete Form Validation Example in HTML\nDESCRIPTION: Provides a complete example of form validation using AJAX, including loading indicators, error messages, and flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onDoSomething\"\n    data-request-validate\n    data-request-flash>\n\n    <div>\n        <input name=\"name\" />\n        <span data-validate-for=\"name\"></span>\n    </div>\n\n    <div>\n        <input name=\"email\" />\n        <span data-validate-for=\"email\"></span>\n    </div>\n\n    <button data-attach-loading>\n        Submit\n    </button>\n\n    <div class=\"alert alert-danger\" data-validate-error>\n        <p data-message></p>\n    </div>\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Updating Database Records\nDESCRIPTION: Shows how to update existing records using raw SQL, returning the number of affected rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::update('update users set votes = 100 where name = ?', ['John']);\n```\n\n----------------------------------------\n\nTITLE: Basic View Template - HTML/PHP\nDESCRIPTION: Example of a simple view file content corresponding to an index action method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hello World</h1>\n```\n\n----------------------------------------\n\nTITLE: Calling Other Commands from OctoberCMS Console Commands\nDESCRIPTION: This snippet shows how to call other console commands from within an OctoberCMS console command using the call method, including passing arguments and options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$this->call('october:migrate');\n\n$this->call('plugin:refresh', ['name' => 'October.Demo']);\n\n$this->call('october:update', ['--force' => true]);\n```\n\n----------------------------------------\n\nTITLE: Cleaning HTML for XSS Prevention with html_clean()\nDESCRIPTION: Shows how to clean HTML content to prevent XSS (Cross-Site Scripting) attacks by removing potentially malicious code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_clean('<script>window.location = \"http://google.com\"</script>') }}\n```\n\n----------------------------------------\n\nTITLE: Asset Injection with Attributes in PHP\nDESCRIPTION: Demonstrates adding custom attributes to injected JavaScript assets using the second parameter of addJs method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js'], ['defer' => true]);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries with PDO Bindings in PHP\nDESCRIPTION: Demonstrates how to perform a raw SQL query using the Db::select method with named parameter binding for security against SQL injection attacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nDb::select('select * from sometable where name = :name', ['name' => 'Charles']);\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration for October CMS\nDESCRIPTION: Comprehensive Nginx server configuration for October CMS, including URL rewrites, FastCGI settings, and static file handling for optimal security and performance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nlocation / {\n    # Let October CMS handle everything by default.\n    # The path not resolved by October CMS router will return October CMS's 404 page.\n    # Everything that does not match with the allowlist below will fall into this.\n    rewrite ^/.*$ /index.php last;\n}\n\n# Pass the PHP scripts to FastCGI server\nlocation ~ ^/index.php {\n    # Write your FPM configuration here\n\n}\n\n# Allowlist\nlocation ~ ^/favicon\\.ico { try_files $uri /index.php; }\nlocation ~ ^/sitemap\\.xml { try_files $uri /index.php; }\nlocation ~ ^/robots\\.txt { try_files $uri /index.php; }\nlocation ~ ^/humans\\.txt { try_files $uri /index.php; }\n\n# Block all .dotfiles except well-known\nlocation ~ /\\.(?!well-known).* { deny all; }\n\n## Let nginx return 404 if static file not exists\nlocation ~ ^/storage/app/uploads/public { try_files $uri 404; }\nlocation ~ ^/storage/app/media { try_files $uri 404; }\nlocation ~ ^/storage/app/resources { try_files $uri 404; }\nlocation ~ ^/storage/temp/public { try_files $uri 404; }\n\nlocation ~ ^/modules/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/behaviors/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/behaviors/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/widgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/widgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/formwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/formwidgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/modules/.*/reportwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/modules/.*/reportwidgets/.*/resources { try_files $uri 404; }\n\nlocation ~ ^/plugins/.*/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/behaviors/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/behaviors/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/reportwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/reportwidgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/formwidgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/formwidgets/.*/resources { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/widgets/.*/assets { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/widgets/.*/resources { try_files $uri 404; }\n\nlocation ~ ^/themes/.*/assets { try_files $uri 404; }\nlocation ~ ^/themes/.*/resources { try_files $uri 404; }\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure Example\nDESCRIPTION: Sample migration class showing the creation of a blog posts table with common column types and methods\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Schema\\Blueprint;\nuse October\\Rain\\Database\\Updates\\Migration;\n\nreturn new class extends Migration\n{\n    public function up()\n    {\n        Schema::create('october_blog_posts', function($table)\n        {\n            $table->increments('id');\n            $table->string('title');\n            $table->string('slug')->index();\n            $table->text('excerpt')->nullable();\n            $table->text('content');\n            $table->timestamp('published_at')->nullable();\n            $table->boolean('is_published')->default(false);\n            $table->timestamps();\n        });\n    }\n\n    public function down()\n    {\n        Schema::drop('october_blog_posts');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Migration\nDESCRIPTION: Command to run database migrations and initialize the database structure for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/installation.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\n----------------------------------------\n\nTITLE: Using the Generic AJAX Handler\nDESCRIPTION: Demonstrates using the built-in onAjax handler that can be used to update page contents without custom code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onAjax\">Do nothing</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Form Macros\nDESCRIPTION: Example demonstrating how to register custom form helper macros to extend Form functionality with reusable custom fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nForm::macro('myField', function() {\n    return '<input type=\"awesome\">';\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Model Insert\nDESCRIPTION: Creating and saving a new model instance to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$flight = new Flight;\n$flight->name = 'Sydney to Canberra';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler in October CMS Backend Controller\nDESCRIPTION: Shows an example of an AJAX handler method in a backend controller. It demonstrates how to handle input, set variables, render a partial, and return response data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/controllers-ajax.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function onOpenTemplate()\n{\n    if (Request::input('someVar') != 'someValue') {\n        throw new ApplicationException('Invalid value');\n    }\n\n    $this->vars['foo'] = 'bar';\n\n    return [\n        'partialContents' => $this->makePartial('some-partial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Crypt Facade in PHP\nDESCRIPTION: Shows how to encrypt sensitive data using the Crypt facade's encrypt method before storing in a database model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/hash-crypt.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->secret = Crypt::encrypt('shhh no telling');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Managing Query Logging in PHP\nDESCRIPTION: This code shows how to enable, retrieve, and disable query logging in October CMS for debugging purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nDb::connection()->enableQueryLog();\n\n$queries = Db::getQueryLog();\n\nDb::connection()->disableQueryLog();\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Join Table in PHP for October CMS\nDESCRIPTION: Demonstrates how to create a join table for a many-to-many relationship between users and roles using a database migration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('role_user', function($table)\n{\n    $table->integer('user_id')->unsigned();\n    $table->integer('role_id')->unsigned();\n    $table->primary(['user_id', 'role_id']);\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Data from AJAX Handlers\nDESCRIPTION: Shows how to return structured data from an AJAX handler that can be consumed by frontend JavaScript.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onFetchDataFromServer()\n{\n    // Some server-side code\n\n    return [\n        'totalUsers' => 1000,\n        'totalProjects' => 937\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Database Transaction Management\nDESCRIPTION: Shows how to manually control database transactions with explicit begin, rollback, and commit operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nDb::beginTransaction();\n```\n\n----------------------------------------\n\nTITLE: Using e() HTML Escaping Helper in PHP\nDESCRIPTION: The e function runs htmlentities over the given string to escape HTML characters. It's essential for securely outputting user-provided data to prevent XSS attacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\necho e('<html>foo</html>');\n\n// &lt;html&gt;foo&lt;/html&gt;\n```\n\n----------------------------------------\n\nTITLE: Counting Multiple Relations with Constraints - PHP\nDESCRIPTION: Demonstrates counting multiple relationships and adding constraints to the count queries, allowing for more specific counting of related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::withCount(['votes', 'comments' => function ($query) {\n    $query->where('content', 'like', 'foo%');\n}])->get();\n\necho $posts[0]->votes_count;\necho $posts[0]->comments_count;\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Fields in PHP\nDESCRIPTION: Shows how to validate multiple fields with different rules using the Validator class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = [\n    'name' => 'Joe',\n    'password' => 'lamepassword',\n    'email' => 'email@example.tld'\n];\n\n$validator = Validator::make($data, [\n    'name' => 'required',\n    'password' => 'required|min:8',\n    'email' => 'required|email|unique:users'\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Relations with Pivot Data in PHP\nDESCRIPTION: Shows how to add many-to-many relationships with additional pivot table data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$pivotData = ['expires' => $expires];\n\n$user->roles()->add($role, $pivotData);\n\n$user->roles()->add($role, $sessionKey, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Calling an AJAX Handler using Attributes and JavaScript APIs\nDESCRIPTION: Demonstrates two methods of calling an AJAX handler: using the data attributes API and the JavaScript API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attributes API -->\n<button data-request=\"onSubmitContactForm\">Go</button>\n\n<!-- JavaScript API -->\n<script> oc.ajax('onSubmitContactForm') </script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Polymorphic Relationships in OctoberCMS (PHP)\nDESCRIPTION: Demonstrates how to retrieve polymorphic relationships in OctoberCMS. Examples show accessing a staff member's photo and retrieving the owner of a polymorphic relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$staff = Staff::find(1);\n\n$photo = $staff->photo;\n\n$photo = Photo::find(1);\n\n$imageable = $photo->imageable;\n```\n\n----------------------------------------\n\nTITLE: Sending Emails with sendTo Method in PHP\nDESCRIPTION: Demonstrates how to use the sendTo method for quick email sending in October CMS. It shows various ways to specify recipients and send both templated and raw messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Send to address using no name\nMail::sendTo('admin@domain.tld', 'acme.blog:message', $params);\n\n// Send using an object's properties\nMail::sendTo($user, 'acme.blog:message', $params);\n\n// Send to multiple addresses\nMail::sendTo(['admin@domain.tld' => 'Admin Person'], 'acme.blog:message', $params);\n\n// Alternatively send a raw message without parameters\nMail::rawTo('admin@domain.tld', 'Hello friend');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Model Records\nDESCRIPTION: Basic query to retrieve all records from a model's database table using the all() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$flights = Flight::all();\n```\n\n----------------------------------------\n\nTITLE: Advanced Where Clause Implementations\nDESCRIPTION: Demonstrates various advanced where clause methods including whereBetween, whereIn, whereNull, and search functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereBetween('votes', [1, 100])->get();\n```\n\nLANGUAGE: php\nCODE:\n```\n$pages = Db::table('posts')\n    ->searchWhere('foo bar', ['title', 'content'])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing One-to-Many Related Models in PHP\nDESCRIPTION: Demonstrates how to access and iterate over related models in a one-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$comments = Post::find(1)->comments;\n\nforeach ($comments as $comment) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Widget Class Definition in PHP\nDESCRIPTION: Demonstrates the basic structure of a form widget class that extends FormWidgetBase with a default alias. This is the minimal implementation required for a form widget in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\FormWidgets;\n\nuse Backend\\Classes\\FormWidgetBase;\n\nclass ColorPicker extends FormWidgetBase\n{\n    /**\n     * @var string defaultAlias to identify this widget.\n     */\n    protected $defaultAlias = 'colorpicker';\n\n    public function render() {}\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relationship Implementation\nDESCRIPTION: Complete example of implementing a one-to-one relationship between User and Phone models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    public $hasOne = [\n        'phone' => 'Acme\\Blog\\Models\\Phone'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Logged Database Queries\nDESCRIPTION: Demonstrates how to retrieve the log of all executed database queries after enabling query logging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$queries = Db::getQueryLog();\n```\n\n----------------------------------------\n\nTITLE: Defining belongsTo Relationship in PHP for October CMS\nDESCRIPTION: Demonstrates how to define a belongsTo relationship in a Comment model to access its parent Post model. It shows the basic syntax and how to customize the foreign key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => [\\Acme\\Blog\\Models\\Post::class, 'key' => 'my_post_id']\n];\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => [Acme\\Blog\\Models\\Post::class, 'key' => 'my_post_id', 'otherKey' => 'my_id']\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Settings Controller Class in October CMS PHP\nDESCRIPTION: Shows how to create a settings controller by extending the SettingsController base class and specifying the settings item code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Posts extends \\Backend\\Classes\\SettingsController\n{\n    public $settingsItemCode = 'location';\n\n    public function index() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend AJAX Handler in PHP\nDESCRIPTION: Demonstrates how to create a backend AJAX handler method in a controller class. The handler processes a POST variable, sets a variable for the view, and returns partial contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/ajax.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onOpenTemplate()\n{\n    if (post('someVar') !== 'someValue') {\n        throw new ApplicationException('Invalid value');\n    }\n\n    $this->vars['foo'] = 'bar';\n\n    return [\n        'partialContents' => $this->makePartial('some-partial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading Relationships in PHP\nDESCRIPTION: Demonstrates how to load relationships after the initial model query using the load method with conditional logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\n\nif ($someCondition) {\n    $books->load('author', 'publisher');\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mail Template in PHP\nDESCRIPTION: Example showing how to send a mail template using Mail::send() method with template code and data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nMail::send('my-template', $data, function($message) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Basic Joins\nDESCRIPTION: Shows how to use the join method to perform SQL inner joins between tables, specifying the join conditions and selecting columns from multiple tables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin via Artisan Command\nDESCRIPTION: Command to generate a new plugin folder and basic files using October CMS CLI.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:plugin Acme.Blog\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading Implementation\nDESCRIPTION: Demonstrates how to load relationships after the parent model has been retrieved using the load method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\n\nif ($someCondition) {\n    $books->load('author', 'publisher');\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship Existence\nDESCRIPTION: Examples of querying models based on relationship existence using has and whereHas methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment...\n$posts = Post::has('comments')->get();\n\n// Retrieve all posts that have three or more comments...\n$posts = Post::has('comments', '>=', 3)->get();\n\n// Retrieve all posts that have at least one comment with votes...\n$posts = Post::has('comments.votes')->get();\n\n// Retrieve all posts with at least one comment containing words like foo%\n$posts = Post::whereHas('comments', function ($query) {\n    $query->where('content', 'like', 'foo%');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Join Statements with Closures in PHP\nDESCRIPTION: Uses a Closure as the second argument to the join method to specify constraints on join clauses. The Closure receives a JoinClause object to define join conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Running the October CMS Installation Command\nDESCRIPTION: Executes the artisan command to install October CMS, setting up the necessary environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:install\n```\n\n----------------------------------------\n\nTITLE: Binding an Interface to an Implementation in IoC Container\nDESCRIPTION: Demonstrates binding an interface to a concrete implementation in the IoC container, allowing for dependency injection of interfaces.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('UserRepositoryInterface', 'DbUserRepository');\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Using Mass Assignment in OctoberCMS (PHP)\nDESCRIPTION: Shows how to use the create method to insert a new record in the database using mass assignment after defining fillable attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::create(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscriber Import Model for October CMS in PHP\nDESCRIPTION: Example of creating an import model by extending Backend\\Models\\ImportModel. This class handles the importing of subscriber data with success and error logging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-model.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    /**\n     * @var array rules to be applied to the data.\n     */\n    public $rules = [];\n\n    public function importData($results, $sessionKey = null)\n    {\n        foreach ($results as $row => $data) {\n\n            try {\n                $subscriber = new Subscriber;\n                $subscriber->fill($data);\n                $subscriber->save();\n\n                $this->logCreated();\n            }\n            catch (Exception $ex) {\n                $this->logError($row, $ex->getMessage());\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Page Assets\nDESCRIPTION: Examples of injecting CSS and JavaScript assets through component PHP code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js', ['defer' => true]);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Form Implementation with Data Attributes API\nDESCRIPTION: A complete example showing an AJAX-enabled form that sends data to a handler and updates a div with the resulting partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- AJAX enabled form -->\n<form data-request=\"onTest\" data-request-update=\"mypartial: '#myDiv'\">\n\n    <!-- Input two values -->\n    <input name=\"value1\"> + <input name=\"value2\">\n\n    <!-- Action button -->\n    <button type=\"submit\">Calculate</button>\n\n</form>\n\n<!-- Result container -->\n<div id=\"myDiv\"></div>\n```\n\n----------------------------------------\n\nTITLE: Caching Query Results in PHP\nDESCRIPTION: Demonstrates how to cache the results of a database query using the remember method. This caches query results for a specified duration, preventing redundant database queries and improving performance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->remember(10)->get();\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships in OctoberCMS Models\nDESCRIPTION: Shows how to query relationships using both the relationship method and dynamic property approaches. It also demonstrates adding additional constraints to relationship queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$posts = $user->posts()->where('is_active', 1)->get();\n\n$post = $user->posts()->first();\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Nested Relationships - PHP\nDESCRIPTION: Demonstrates eager loading nested relationships using dot notation, allowing multiple levels of relationships to be loaded efficiently in a single query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author.contacts')->get();\n```\n\n----------------------------------------\n\nTITLE: Constraining Eager Loads in October CMS\nDESCRIPTION: This code demonstrates how to add constraints to eager loaded relationships. It loads only posts with titles containing 'first' when eager loading user's posts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->where('title', 'like', '%first%');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: System Placeholder Usage\nDESCRIPTION: Using system placeholders for scripts, styles, and meta content injection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% put scripts %}\n    <script type=\"text/javascript\" src=\"/themes/demo/assets/js/menu.js\"></script>\n{% endput %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put styles %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\" />\n{% endput %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put meta %}\n    <meta name=\"turbo-visit-control\" content=\"error\">\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Permissions in October CMS Plugin\nDESCRIPTION: Shows how to register custom backend permissions in a plugin registration class with permission keys and descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_posts' => [\n            'label' => 'Manage the blog posts',\n            'tab' => 'Blog',\n            'order' => 200,\n        ],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Running Handler with Partial Updates\nDESCRIPTION: Example of running 'onCalculate' handler and injecting the rendered 'calcresult' partial into the page element with the 'result' CSS class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    update: { calcresult: '.result' }\n})\n```\n\n----------------------------------------\n\nTITLE: Blog Post Reference Snippet Implementation\nDESCRIPTION: Complete implementation of a blog post reference snippet including configuration and template\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/snippets.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[viewBag]\nsnippetCode = \"blogPostReference\"\nsnippetName = \"Blog Post Reference\"\nsnippetDescription = \"Display a reference to a blog post\"\nsnippetProperties[post_id][title] = \"Blog Post ID\"\nsnippetProperties[post_id][type] = \"string\"\n\n[section post]\nhandle = \"Blog\\Post\"\nidentifier = \"id\"\nvalue = \"{{ post_id }}\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if post is not empty %}\n    <div class=\"card shadow-sm\">\n        <div class=\"card-body\">\n            <h4>{{ post.title }}</h4>\n        </div>\n        <div class=\"card-footer\">\n            <div class=\"d-flex justify-content-between align-items-center\">\n                <a href=\"{{ 'blog/post'|page({ slug: post.slug }) }}\" class=\"stretched-link\">\n                    {{ post.categories.first.title|default('') }}\n                </a>\n                <small class=\"text-muted\">{{ post.published_at_date|date('j M Y') }}</small>\n            </div>\n        </div>\n    </div>\n{% else %}\n    <!-- Post Missing: Unable to Find an Entry -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Adding Relations with Pivot Data\nDESCRIPTION: Demonstrates how to add relationships with additional pivot table data in many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$pivotData = ['expires' => $expires];\n\n$user->roles()->add($role, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sluggable Attributes in PHP Model\nDESCRIPTION: Demonstrates how to use the Sluggable trait to automatically generate unique slugs for model attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sluggable;\n\n    /**\n     * @var array Generate slugs for these attributes.\n     */\n    protected $slugs = ['slug' => 'name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Raw SQL\nDESCRIPTION: Shows how to update existing database records using raw SQL and the Db facade. Returns the number of affected rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::update('update users set votes = 100 where name = ?', ['John']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with Environment Variables in October CMS\nDESCRIPTION: Shows how to set up database connection parameters using environment variables in a .env file for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=database\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Constraining Eager Loads with Query Conditions in PHP\nDESCRIPTION: Example showing how to add query constraints when eager loading relationships using a closure function. Demonstrates filtering posts by title.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->where('title', 'like', '%first%');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Database Tables in October CMS\nDESCRIPTION: Example of using the Schema facade to create a new database table with a primary key. The create method takes the table name and a closure for defining columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('users', function ($table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Models in October CMS PHP\nDESCRIPTION: Shows how to retrieve all records from a model's database table using the 'all' method, which returns a collection of model instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$flights = Flight::all();\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Database Results\nDESCRIPTION: Shows how to loop through database query results and access object properties from the returned stdClass objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Subscriber - PHP\nDESCRIPTION: Example of registering an event subscriber class with the Event::subscribe method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nEvent::subscribe(new UserEventHandler);\n```\n\n----------------------------------------\n\nTITLE: Using Exists Clauses in PHP\nDESCRIPTION: Demonstrates how to use whereExists to create subqueries for filtering results based on the existence of related data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->whereExists(function ($query) {\n        $query->select(Db::raw(1))\n            ->from('orders')\n            ->whereRaw('orders.user_id = users.id');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Joins for Cartesian Products\nDESCRIPTION: Shows how to use crossJoin() to create a cartesian product between two tables, generating all possible combinations of records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n    ->crossJoin('colors')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse One-to-One Relationships in PHP\nDESCRIPTION: Shows how to define the inverse of a one-to-one relationship using the $belongsTo property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Phone extends Model\n{\n    public $belongsTo = [\n        'user' => \\Acme\\Blog\\Models\\User::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating October CMS Core and Plugins\nDESCRIPTION: This command updates the core application and plugin files of October CMS, then performs a database migration. It requests updates from the October gateway.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/updating-october.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:update\n```\n\n----------------------------------------\n\nTITLE: Filtering with Relationship Count Conditions - PHP\nDESCRIPTION: Demonstrates filtering models based on the count of related records, allowing comparison operators to specify minimum or maximum related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have three or more comments...\n$posts = Post::has('comments', '>=', 3)->get();\n```\n\n----------------------------------------\n\nTITLE: Adding Related Models via Relationship Method in PHP\nDESCRIPTION: Examples of adding single and multiple related models using the add and addMany methods in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment(['message' => 'A new comment.']);\n\n$post = Post::find(1);\n\n$comment = $post->comments()->add($comment);\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Query Builder in PHP\nDESCRIPTION: Demonstrates how to update existing records in a database table using the update method. The method accepts an array of column and value pairs and can be constrained using where clauses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->where('id', 1)\n    ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Database Transactions in PHP\nDESCRIPTION: This code shows how to manually control database transactions using begin, rollback, and commit methods in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nDb::beginTransaction();\n\nDb::rollBack();\n\nDb::commit();\n```\n\n----------------------------------------\n\nTITLE: Automatic Model Validation on Save in October CMS\nDESCRIPTION: Illustrates how models automatically validate themselves when the save method is called.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->name = 'Actual Person';\n$user->email = 'a.person@example.tld';\n$user->password = 'passw0rd';\n\n// Returns false if model is invalid\n$success = $user->save();\n```\n\n----------------------------------------\n\nTITLE: Implementing FormController in PHP Controller\nDESCRIPTION: Shows how to implement the FormController behavior in a backend controller class by defining the $implement and $formConfig properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class\n    ];\n\n    public $formConfig = 'config_form.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship Existence in OctoberCMS\nDESCRIPTION: Illustrates how to query for the existence of relationships using the 'has' method and its variations, including nested relationships and custom constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment...\n$posts = Post::has('comments')->get();\n\n// Retrieve all posts that have three or more comments...\n$posts = Post::has('comments', '>=', 3)->get();\n\n// Retrieve all posts that have at least one comment with votes...\n$posts = Post::has('comments.votes')->get();\n\n// Retrieve all posts with at least one comment containing words like foo%\n$posts = Post::whereHas('comments', function ($query) {\n    $query->where('content', 'like', 'foo%');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Registering Global Validation Rules in October CMS Plugin\nDESCRIPTION: Shows how to register a global validation rule in an October CMS plugin by extending the Validator with a custom rule class. This is typically done in the boot() method of the Plugin.php registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Validator::extend('uppercase', UppercaseRule::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Twig For Loop\nDESCRIPTION: Demonstrates how to use the {% for %} tag to iterate over a collection of users and display their usernames.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Upsert for Batch Record Updates in PHP\nDESCRIPTION: Demonstrates how to use the upsert method to insert new records and update existing ones in a single operation, based on unique identifiers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nDb::table('flights')->upsert([\n    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n], ['departure', 'destination'], ['price']);\n```\n\n----------------------------------------\n\nTITLE: Query Ordering and Grouping\nDESCRIPTION: Shows various methods for ordering and grouping query results including random ordering and group by operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic AJAX Handler in PHP\nDESCRIPTION: Creates a simple AJAX handler function that follows the onSomething naming pattern. This function can be defined in a page, partial, layout PHP section, or inside CMS components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContactForm()\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Default Filter Usage in Twig\nDESCRIPTION: Shows various examples of using the |default filter with undefined variables, object properties, array keys, and empty strings. The filter returns a fallback value when the original value is undefined or empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-default.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable|default('The variable is not defined') }}\n\n{{ variable.foo|default('The foo property on variable is not defined') }}\n\n{{ variable['foo']|default('The foo key in variable is not defined') }}\n\n{{ ''|default('The variable is empty') }}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Conditions in PHP\nDESCRIPTION: Demonstrates how to delete records from a database table based on specific conditions using where clauses with the delete method. This allows for targeted deletion of records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '<', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Twig Partial Template\nDESCRIPTION: Partial template that displays the result variable in Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p>The answer is {{ result }}</p>\n```\n\n----------------------------------------\n\nTITLE: Relationship Query Builder Usage\nDESCRIPTION: Demonstrates how to use relationship methods as query builders with method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->posts()->where('is_active', true)->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Failed Validation Rules in PHP\nDESCRIPTION: Shows how to access an array of failed validation rules without their messages. This can be useful for custom handling of specific validation rule failures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$failed = $validator->failed();\n```\n\n----------------------------------------\n\nTITLE: Implementing getSaveValue Method in October CMS Form Widget\nDESCRIPTION: This code shows how to override the getSaveValue method in a form widget to customize the saving behavior. It includes an example of returning a special constant to ignore saving.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getSaveValue($value)\n{\n    return $value;\n}\n\n// Example of ignoring save\npublic function getSaveValue($value)\n{\n    return \\Backend\\Classes\\FormField::NO_SAVE_DATA;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Videos from Tag Model - PHP\nDESCRIPTION: Shows how to retrieve all videos associated with a specific tag using the dynamic property defined in the $morphedByMany relationship on the Tag model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$tag = Tag::find(1);\n\nforeach ($tag->videos as $video) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models\nDESCRIPTION: Shows how to create and attach new related models using the create method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$comment = $post->comments()->create([\n    'message' => 'A new comment.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Querying Related Models in PHP\nDESCRIPTION: Demonstrates how to query related models using the relationship as a method. This example filters active posts for a user.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->posts()->where('is_active', true)->get();\n```\n\n----------------------------------------\n\nTITLE: Constrained Lazy Eager Loading in PHP\nDESCRIPTION: Shows how to add query constraints when lazy loading relationships using a closure function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$books->load([\n    'author' => function ($query) {\n        $query->orderBy('published_date', 'asc');\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Conditional Query with Fallback Using when Method\nDESCRIPTION: Shows how to use the when method with a fallback closure that executes when the condition is false, useful for default sorting or filtering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$sortBy = null;\n\n$users = Db::table('users')\n    ->when($sortBy, function ($query, $sortBy) {\n        return $query->orderBy($sortBy);\n    }, function ($query) {\n        return $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Event Subscription in Plugin Registration\nDESCRIPTION: Example of subscribing to a global event in the plugin's boot method to handle user registration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    public function boot()\n    {\n        Event::listen('rainlab.user.register', function ($user) {\n            // Code to register $user->email to mailing list\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Constraint in PHP with October CMS Schema\nDESCRIPTION: This snippet demonstrates how to create a foreign key constraint using the Schema builder in October CMS. It adds a 'user_id' column to the 'posts' table that references the 'id' column in the 'users' table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->integer('user_id')->unsigned();\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Query Scopes in PHP Model Class\nDESCRIPTION: Example of defining multiple query scopes in a User model class. Shows implementation of scopePopular and scopeActive methods that add common query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * scopePopular query to only include popular users.\n     */\n    public function scopePopular($query)\n    {\n        return $query->where('votes', '>', 100);\n    }\n\n    /**\n     * scopeActive query to only include active users.\n     */\n    public function scopeActive($query)\n    {\n        return $query->where('is_active', 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Basic Form in October CMS\nDESCRIPTION: Example demonstrating how to open and close a form with Form::open and Form::close methods, specifying a URL destination.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['url' => 'foo/bar']) ?>\n    //\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Using WhereRaw with Conditional Logic\nDESCRIPTION: Shows how to use whereRaw() with parameter binding to create complex where conditions with SQL functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining MorphToMany Relationship in Post Model - PHP\nDESCRIPTION: Defines a polymorphic many-to-many relationship for tags on a Post model using the $morphToMany property. This allows posts to be associated with multiple tags through a polymorphic join table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $morphToMany = [\n        'tags' => [\\Acme\\Blog\\Models\\Tag::class, 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Scopes in OctoberCMS Model (PHP)\nDESCRIPTION: Demonstrates how to define query scopes in a model class to encapsulate common query constraints that can be reused throughout the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Scope a query to only include popular users.\n     */\n    public function scopePopular($query)\n    {\n        return $query->where('votes', '>', 100);\n    }\n\n    /**\n     * Scope a query to only include active users.\n     */\n    public function scopeActive($query)\n    {\n        return $query->where('is_active', 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Relationship Definition in PHP Model\nDESCRIPTION: Example showing how to define a basic hasMany relationship in an October CMS model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => \\Acme\\Blog\\Models\\Post::class\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Multiple Tables with Inner Joins\nDESCRIPTION: Shows how to perform inner joins across multiple tables in a single query to combine related data from users, contacts, and orders.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Scheduler Cron Job in October CMS\nDESCRIPTION: Sets up a cron job that runs every minute to execute the October CMS scheduler. This is the core requirement for scheduled tasks to function properly in the system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /october/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Basic Laravel Package Configuration in PHP\nDESCRIPTION: Example of a basic Laravel package configuration file showing common settings with paths and encoding options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'encoding' => 'UTF-8',\n    'finalize' => true,\n    'cachePath' => storage_path('app/purifier'),\n    'cacheFileMode' => 0755,\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeCreate Event Handler in PHP\nDESCRIPTION: Example of using the beforeCreate event to generate a URL slug from a model's name attribute before saving a new record to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Generate a URL slug for this model\n */\npublic function beforeCreate()\n{\n    $this->slug = Str::slug($this->name);\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereBetween for Range Filtering\nDESCRIPTION: Demonstrates the whereBetween method to filter records where a column's value falls within a specified range of values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereBetween('votes', [1, 100])->get();\n```\n\n----------------------------------------\n\nTITLE: Complete Validation Handler Example in October CMS\nDESCRIPTION: PHP code implementing form submission and username validation handlers. It validates form fields with specific rules and checks for taken usernames from a predefined list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitForm()\n{\n    $data = Request::validate([\n        'username' => 'required',\n        'email' => 'required|email',\n    ]);\n\n    $this->onCheckUsername();\n\n    Flash::success('Jobs done!');\n}\n\nfunction onCheckUsername()\n{\n    $username = strtolower(trim(post('username')));\n    $isTaken = in_array($username, ['admin', 'jeff']);\n\n    if ($isTaken) {\n        throw new ValidationException(['username' => 'Username is taken!']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Options Usage in Import Model\nDESCRIPTION: Example showing how to access custom form field values within the import model's importData method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    public function importData($results, $sessionKey = null)\n    {\n        if ($this->auto_create_lists) {\n            // Do something\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Where Conditions to Join Clauses\nDESCRIPTION: Shows how to add where conditions to a join clause to filter joined records based on column values rather than just column equality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n            ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Join Table Schema\nDESCRIPTION: Shows the database schema for creating a many-to-many relationship join table between users and roles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('role_user', function($table) {\n    $table->integer('user_id')->unsigned();\n    $table->integer('role_id')->unsigned();\n    $table->primary(['user_id', 'role_id']);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode in October CMS Production\nDESCRIPTION: Environment variable setting to disable debug mode for production environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nAPP_DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Event Handling in Layout Template\nDESCRIPTION: Shows how to bind to component events within a layout template. Includes component initialization and event handler setup that logs post submissions to the trace log.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[topic]\nslug = \"{{ :slug }}\"\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction onInit()\n{\n    $this->topic->bindEvent('topic.post', function($post, $postUrl) {\n        trace_log('A post has been submitted at '.$postUrl);\n    });\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: AJAX Form Implementation with Data Attributes\nDESCRIPTION: Example of an AJAX-enabled form using data attributes API, demonstrating form structure and result container setup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onTest\" data-request-update=\"{ mypartial: '#myDiv' }\">\n\n    <!-- Input two values -->\n    <input name=\"value1\"> + <input name=\"value2\">\n\n    <!-- Action button -->\n    <button type=\"submit\">Calculate</button>\n\n</form>\n\n<!-- Result container -->\n<div id=\"myDiv\"></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table\nDESCRIPTION: Basic example of creating a new database table using Schema builder\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('users', function ($table) {\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: API Endpoint for Users with Avatar Thumbnails\nDESCRIPTION: A complete example of an API endpoint that returns users with their avatar thumbnails. This demonstrates eager loading relationships, adding custom attributes to models, and formatting the response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n## pages/api/users.htm\nurl = \"/api/users\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['users'] = \\RainLab\\User\\Models\\User::all();\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# Load up the avatar relation #}\n{% do users.load('avatar') %}\n\n{# Set the 'avatar_thumb' attribute on each user #}\n{% for user in users %}\n    {% do user.setAttribute(\n        'avatar_thumb',\n        user.avatar.getThumbUrl(100, 100, {mode: 'crop'})|default(null)\n    ) %}\n{% endfor %}\n\n{# Respond with the user #}\n{% do response({\n    data: users\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tree in PHP Models\nDESCRIPTION: Shows how to use the NestedTree trait to create advanced hierarchical structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\NestedTree;\n}\n```\n\n----------------------------------------\n\nTITLE: User Authentication in October CMS Backend\nDESCRIPTION: Shows two methods for authenticating users: by verifying credentials and by directly logging in as a specific user object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/users.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Authenticate user by credentials\n$user = BackendAuth::authenticate([\n    'login' => post('login'),\n    'password' => post('password')\n]);\n\n// Sign in as a specific user\nBackendAuth::login($user);\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of MIME Validation Rule in PHP\nDESCRIPTION: Demonstrates how to validate that a file has a specific MIME type corresponding to one of the listed extensions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Many-to-Many Relationship in Post Model\nDESCRIPTION: Demonstrates how to define a morphToMany relationship for tags in a Post model using OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $morphToMany = [\n        'tags' => [\\Acme\\Blog\\Models\\Tag::class, 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results with skip and take in PHP\nDESCRIPTION: Demonstrates how to limit the number of results returned from a database query using the skip and take methods, equivalent to SQL LIMIT and OFFSET operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Placeholder Variables\nDESCRIPTION: Demonstrates using fallback values with placeholder variables in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ placeholder('pageTitle', this.page.meta_title) }}</title>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Home Page in October CMS\nDESCRIPTION: The simplest example of a home page in October CMS, consisting of a URL configuration and HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n==\n<h1>Hello, world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript API for Form Submissions\nDESCRIPTION: Demonstrates how to use the oc.request JavaScript function to submit a form with AJAX. This approach programmatically triggers the AJAX request and targets a specific form by its selector.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script> oc.request('#myForm', 'onSubmitContactForm') </script>\n```\n\n----------------------------------------\n\nTITLE: Twig If Statement with Multiple Conditions\nDESCRIPTION: Example showing if/elseif/else statement usage with multiple conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/if.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if kenny.sick %}\n    Kenny is sick.\n{% elseif kenny.dead %}\n    You killed Kenny! You bastard!!!\n{% else %}\n    Kenny looks okay so far.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records with Query Builder\nDESCRIPTION: Uses the query builder to get all records from the 'users' table. The table method returns a fluent query builder instance that allows chaining more constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Values in afterUpdate Event in PHP\nDESCRIPTION: Example of comparing current and original values in the afterUpdate event to detect changes to specific attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function afterUpdate()\n{\n    if ($this->title != $this->original['title']) {\n        // title changed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence with this.session.has in Twig\nDESCRIPTION: Shows how to use the 'this.session.has' method to determine if an item exists in the session.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-session.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.session.has('key') %}\n    <h1>We found key in the session</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Saving a Resized Image in PHP\nDESCRIPTION: Shows how to save a resized image to a new location on disk after processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$image->save('path/to/new/file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Hashing Password with Hash Facade in PHP\nDESCRIPTION: Demonstrates how to hash a user password using the Hash facade's make method. This creates a secure Bcrypt hash of the password for storage in the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/hash-crypt.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->password = Hash::make('mypassword');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Column from All Records\nDESCRIPTION: Shows how to retrieve the values from a single column across all matching records using the pluck() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->pluck('title');\n\nforeach ($titles as $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Form Request in HTML\nDESCRIPTION: Basic example of using the request method within a form's onsubmit handler to process an AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"$(this).request('onProcess'); return false;\">\n    ...\n```\n\n----------------------------------------\n\nTITLE: Using Custom Column Types in YAML Configuration\nDESCRIPTION: Shows how to implement a custom column type in a list column definition using YAML configuration. Demonstrates the usage of the 'uppercase' custom type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Column Definitions\n# ===================================\n\ncolumns:\n    secret_code:\n        label: Secret code\n        type: uppercase\n```\n\n----------------------------------------\n\nTITLE: Performing Update or Insert Operations in PHP\nDESCRIPTION: Shows how to use the updateOrInsert method to update an existing record or create a new one if no matching record exists, based on specified conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.tld', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Basic Relationship Definition in PHP Model\nDESCRIPTION: Demonstrates how to define a basic hasMany relationship in a User model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => \\Acme\\Blog\\Models\\Post::class\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_sort() Function in PHP\nDESCRIPTION: The array_sort method sorts an array by the results of a given Closure. It allows for custom sorting logic to be applied to the array elements based on specific criteria.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    ['name' => 'Desk'],\n    ['name' => 'Chair'],\n];\n\n$array = array_values(array_sort($array, function ($value) {\n    return $value['name'];\n}));\n\n/*\n    [\n        ['name' => 'Chair'],\n        ['name' => 'Desk'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Backend AJAX Handler in PHP\nDESCRIPTION: This snippet demonstrates how to create a backend AJAX handler method in a controller class. It shows error handling, setting variables, and returning partial contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/ajax.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onOpenTemplate()\n{\n    if (post('someVar') !== 'someValue') {\n        throw new ApplicationException('Invalid value');\n    }\n\n    $this->vars['foo'] = 'bar';\n\n    return [\n        'partialContents' => $this->makePartial('some-partial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic API Response in Twig\nDESCRIPTION: Simple example showing how to return a JSON response from a CMS page using the response() Twig function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/building-apis.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/api/foobar\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({ foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation UI with JavaScript Events\nDESCRIPTION: JavaScript code that handles custom styling for invalid fields by listening to AJAX events. It adds an error class to invalid fields and removes it when a new submission starts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:invalid-field', function(event) {\n    const { element, fieldName, errorMsg, isFirst } = event.detail;\n    element.classList.add('has-error');\n});\n\naddEventListener('ajax:promise', function(event) {\n    event.target.closest('form').querySelectorAll('.has-error').forEach(function(el) {\n        el.classList.remove('has-error');\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Models in PHP for October CMS\nDESCRIPTION: Uses the all() method to retrieve all records from the database table associated with the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$flights = Flight::all();\n```\n\n----------------------------------------\n\nTITLE: Inserting Related Models via Relationship Method in PHP\nDESCRIPTION: Demonstrates how to use the 'add' method to associate a new Comment with a Post model. The method automatically sets the appropriate post_id value on the new Comment model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment(['message' => 'A new comment.']);\n\n$post = Post::find(1);\n\n$comment = $post->comments()->add($comment);\n```\n\n----------------------------------------\n\nTITLE: Class-based Event Listener in PHP\nDESCRIPTION: Shows how to use a class as an event listener and specify the method to be called.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', LoginHandler::class);\n\nEvent::listen('auth.login', [LoginHandler::class, 'onLogin']);\n```\n\n----------------------------------------\n\nTITLE: Sending Mail with Mail::send in October CMS\nDESCRIPTION: Example of sending an email using the Mail::send method with a mail view, variables, and recipient configuration via a callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// These variables are available inside the message as Twig\n$vars = ['name' => 'Joe', 'user' => 'Mary'];\n\nMail::send('acme.blog::mail.message', $vars, function($message) {\n\n    $message->to('admin@domain.tld', 'Admin Person');\n    $message->subject('This is a reminder');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Binding a Type to the IoC Container in PHP\nDESCRIPTION: Demonstrates how to bind a type into the IoC container using a Closure callback. This allows for flexible dependency injection at runtime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('foo', function($app) {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading with Constraints in October CMS\nDESCRIPTION: This code shows how to use lazy eager loading with additional query constraints. It loads authors ordered by published date after the books have been retrieved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$books->load([\n    'author' => function ($query) {\n        $query->orderBy('published_date', 'asc');\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Inline Validation HTML Form in October CMS\nDESCRIPTION: HTML form with inline validation enabled using the data-request-validate attribute. Includes a container for displaying validation errors within the form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\" data-request-validate>\n    <div class=\"alert alert-danger\" data-validate-error>\n        <!-- Validation Message -->\n    </div>\n\n    <div>\n        <label>Name</label>\n        <input name=\"name\" />\n    </div>\n\n    <button data-attach-loading>\n        Submit\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Binding a Type to the IoC Container in October CMS\nDESCRIPTION: Demonstrates how to bind a type into the IoC container using a Closure callback, which will be executed when the type is resolved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('foo', function($app) {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Column Querying\nDESCRIPTION: Examples of querying JSON type columns including path access and array operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Records in PHP\nDESCRIPTION: Demonstrates how to insert multiple records into a database table with a single call by passing an array of arrays to the insert method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.tld', 'votes' => 0],\n    ['email' => 'dayle@example.tld', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Exception Handler in PHP\nDESCRIPTION: Demonstrates how to register a custom exception handler for a specific exception type using App::error method. This example handles RuntimeException instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(RuntimeException $exception) {\n    // Handle the exception...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Class Using ExtensionTrait in PHP\nDESCRIPTION: This snippet demonstrates how to create a behavior class using the ExtensionTrait in October CMS. It includes the necessary methods for extensibility.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Behaviours;\n\nclass WaveBehaviour\n{\n    use \\October\\Rain\\Extension\\ExtensionTrait;\n\n    public static function extend(callable $callback)\n    {\n        self::extensionExtendCallback($callback);\n    }\n\n    public function wave()\n    {\n        echo \"*waves*<br>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Dropdown Properties in October CMS\nDESCRIPTION: Example of defining dynamic dropdown properties with dependencies and methods for fetching option lists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title' => 'Country',\n            'type' => 'dropdown',\n            'default' => 'us'\n        ],\n        'state' => [\n            'title' => 'State',\n            'type' => 'dropdown',\n            'default' => 'dc',\n            'depends' => ['country'],\n            'placeholder' => 'Select a state'\n        ]\n    ];\n}\n\npublic function getStateOptions()\n{\n    // Load the country property value from POST\n    $countryCode = post('country');\n\n    $states = [\n        'ca' => ['ab' => 'Alberta', 'bc' => 'British columbia'],\n        'us' => ['al' => 'Alabama', 'ak' => 'Alaska']\n    ];\n\n    return $states[$countryCode];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PHPUnit Configuration for October CMS Plugin Testing\nDESCRIPTION: XML configuration file for PHPUnit that sets up a proper testing environment for October CMS plugins. It defines test suite directories, environment variables, and database settings for testing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/packages/unit-testing.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n    backupStaticAttributes=\"false\"\n    bootstrap=\"../../../modules/system/tests/bootstrap.php\"\n    colors=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Plugin Unit Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n    <php>\n        <env name=\"APP_ENV\" value=\"testing\" />\n        <env name=\"CACHE_DRIVER\" value=\"array\" />\n        <env name=\"SESSION_DRIVER\" value=\"array\" />\n        <env name=\"ACTIVE_THEME\" value=\"test\" />\n        <env name=\"CONVERT_LINE_ENDINGS\" value=\"true\" />\n        <env name=\"CMS_ROUTE_CACHE\" value=\"true\" />\n        <env name=\"CMS_TWIG_CACHE\" value=\"false\" />\n        <env name=\"ENABLE_CSRF\" value=\"false\" />\n        <env name=\"DB_CONNECTION\" value=\"sqlite\" />\n        <env name=\"DB_DATABASE\" value=\":memory:\" />\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Throwing a ValidationException in an AJAX Handler\nDESCRIPTION: PHP code that throws a ValidationException in an AJAX handler when a validation rule fails. This example checks if a name field is empty and returns an appropriate error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmit()\n{\n    if (!post('name')) {\n        throw new ValidationException(['name' => 'You must give a name!']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Service Provider\nDESCRIPTION: Example of creating a custom service provider by extending the base ServiceProvider class and implementing the register method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Support\\ServiceProvider;\n\nclass FooServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        $this->app->bind('foo', function() {\n            return new Foo;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Model in PHP for October CMS\nDESCRIPTION: Creates a basic model class for a blog post, extending the base Model class and specifying the database table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass Post extends Model\n{\n    /**\n     * @var string table associated with the model.\n     */\n    protected $table = 'acme_blog_posts';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Polymorphic Relationships in OctoberCMS\nDESCRIPTION: This snippet demonstrates how to retrieve polymorphic relationships in OctoberCMS, including accessing the polymorphic model and its owner.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$staff = Staff::find(1);\n$photo = $staff->photo;\n\n$photo = Photo::find(1);\n$imageable = $photo->imageable;\n\n$post = Author\\Plugin\\Models\\Post::find(1);\nforeach ($post->comments as $comment) {\n    //\n}\n\n$comment = Author\\Plugin\\Models\\Comment::find(1);\n$commentable = $comment->commentable;\n\n$comment->commentable = $video;\n$comment->save();\n\n$post = Post::find(1);\nforeach ($post->tags as $tag) {\n    //\n}\n\n$tag = Tag::find(1);\nforeach ($tag->videos as $video) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Chunking Database Results in PHP\nDESCRIPTION: Uses the chunk method to process large sets of database records in smaller chunks. This is useful for processing thousands of records efficiently.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->chunk(100, function($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Keys in Many-to-Many Relationship\nDESCRIPTION: Shows how to specify custom key names for both models in a many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'table' => 'acme_blog_role_user',\n        'key' => 'my_user_id',\n        'otherKey' => 'my_role_id'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Failed Method for Queue Job Class in PHP\nDESCRIPTION: PHP code showing how to define a failed method directly on a queue job class. This method will be called when the job fails, allowing for job-specific failure handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function failed($data)\n{\n    // Called when the job is failing...\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Files with Local Driver in October CMS (PHP)\nDESCRIPTION: Example of storing a file using the local disk driver. All file operations are relative to the root directory defined in the configuration file, which defaults to storage/app.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nStorage::disk('local')->put('file.txt', 'Contents');\n```\n\n----------------------------------------\n\nTITLE: Customizing Has One Through Relationship Keys in OctoberCMS Model (PHP)\nDESCRIPTION: Demonstrates how to customize the foreign keys used in a has-one-through relationship definition, allowing for non-standard key names in the relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic $hasOneThrough = [\n    'userHistory' => [\n        \\Acme\\Supplies\\Model\\History::class,\n        'key' => 'supplier_id',\n        'through' => \\Acme\\Supplies\\Model\\User::class,\n        'throughKey' => 'user_id',\n        'otherKey' => 'id',\n        'secondOtherKey' => 'my_country_id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Related Models in PHP\nDESCRIPTION: Demonstrates how to add multiple related models at once using the addMany method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$post->comments()->addMany([\n    new Comment(['message' => 'A new comment.']),\n    new Comment(['message' => 'Another comment.']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Relationship Usage Examples\nDESCRIPTION: PHP code examples showing how to retrieve and manipulate polymorphic relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$staff = Staff::find(1);\n\n$photo = $staff->photo\n```\n\nLANGUAGE: php\nCODE:\n```\n$photo = Photo::find(1);\n\n$imageable = $photo->imageable;\n```\n\nLANGUAGE: php\nCODE:\n```\n$post = Author\\Plugin\\Models\\Post::find(1);\n\nforeach ($post->comments as $comment) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$comment = Author\\Plugin\\Models\\Comment::find(1);\n\n$commentable = $comment->commentable;\n```\n\nLANGUAGE: php\nCODE:\n```\n$comment = Author\\Plugin\\Models\\Comment::find(1);\n$video = Author\\Plugin\\Models\\Video::find(1);\n\n$comment->commentable = $video;\n$comment->save()\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Query Results\nDESCRIPTION: Demonstrates how to loop through query results returned by the query builder. Each result is an instance of PHP's stdClass object with properties corresponding to table columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component in October CMS Twig Template\nDESCRIPTION: This code snippet shows how to render a component in an October CMS Twig template. The 'component' tag is used to render the 'demoTodo' component that was previously initialized in the configuration section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' %}\n```\n\n----------------------------------------\n\nTITLE: Binding Interface to Implementation\nDESCRIPTION: Demonstrates binding an interface to a concrete implementation class in the container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('UserRepositoryInterface', 'DbUserRepository');\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Options in PHP Based on Dependencies\nDESCRIPTION: Shows how to dynamically populate dropdown options based on the selected country. The getStateOptions method returns different state lists depending on the country value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return ['au' => 'Australia', 'ca' => 'Canada'];\n}\n\npublic function getStateOptions()\n{\n    if ($this->country == 'au') {\n        return ['act' => 'Capital Territory', 'qld' => 'Queensland', ...];\n    }\n    elseif ($this->country == 'ca') {\n        return ['bc' => 'British Columbia', 'on' => 'Ontario', ...];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Console Command Class in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates the structure of a basic console command class in OctoberCMS. It includes the essential methods for defining the command name, description, and handling logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Console;\n\nuse Illuminate\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass MyCommand extends Command\n{\n    /**\n     * @var string The console command name.\n     */\n    protected $name = 'acme:mycommand';\n\n    /**\n     * @var string The console command description.\n     */\n    protected $description = 'Does something cool.';\n\n    /**\n     * Execute the console command.\n     * @return void\n     */\n    public function handle()\n    {\n        $this->output->writeln('Hello world!');\n    }\n\n    /**\n     * Get the console command arguments.\n     * @return array\n     */\n    protected function getArguments()\n    {\n        return [];\n    }\n\n    /**\n     * Get the console command options.\n     * @return array\n     */\n    protected function getOptions()\n    {\n        return [];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Widget Partials in PHP\nDESCRIPTION: This snippet demonstrates two methods of passing variables to widget partials: using the $vars property and passing variables directly to the makePartial() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['var'] = 'value';\n\n    return $this->makePartial('list');\n}\n\npublic function render()\n{\n    return $this->makePartial('list', ['var' => 'value']);\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Class - PHP\nDESCRIPTION: Example of an event subscriber class that can subscribe to multiple events from within the class itself.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nclass UserEventHandler\n{\n    /**\n     * Handle user login events.\n     */\n    public function userLogin($event)\n    {\n        // ...\n    }\n\n    /**\n     * Handle user logout events.\n     */\n    public function userLogout($event)\n    {\n        // ...\n    }\n\n    /**\n     * Register the listeners for the subscriber.\n     *\n     * @param  Illuminate\\Events\\Dispatcher  $events\n     * @return array\n     */\n    public function subscribe($events)\n    {\n        $events->listen('auth.login', 'UserEventHandler@userLogin');\n\n        $events->listen('auth.logout', 'UserEventHandler@userLogout');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Provider in PHP for October CMS\nDESCRIPTION: Demonstrates how to create a service provider by extending the ServiceProvider class and implementing the register method for IoC bindings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Support\\ServiceProvider;\n\nclass FooServiceProvider extends ServiceProvider\n{\n    public function register()\n    {\n        $this->app->bind('foo', function() {\n            return new Foo;\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission Access in PHP\nDESCRIPTION: Example showing how to check if the current user has permission to access a specific area using the BackendAuth class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Returns true if the user has permission\n$permissionGranted = BackendAuth::userHasAccess('utilities.logs');\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns with Aliasing\nDESCRIPTION: Shows how to select specific columns from a database table and use column aliasing in the query builder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Operations\nDESCRIPTION: Examples of basic cache operations including retrieving items with default values and checking item existence.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::get('key');\n\n$value = Cache::get('key', 'default');\n\n$value = Cache::get('key', function() {\n    return Db::table(...)->get();\n});\n\nif (Cache::has('key')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Form to a Model\nDESCRIPTION: Example showing how to populate a form based on a model's data using Form::model. This binds model values to form fields matching their names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::model($user, ['id' => 'userForm']) ?>\n```\n\n----------------------------------------\n\nTITLE: Throwing an AJAX Exception with Response Data\nDESCRIPTION: Demonstrates how to throw an AjaxException that treats the response as an error while still sending structured data back to the client. This allows for error handling while maintaining the ability to update partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException([\n    'error' => 'Not enough questions',\n    'questionsNeeded' => 2\n]);\n```\n\n----------------------------------------\n\nTITLE: Resolving a Type from the IoC Container in PHP\nDESCRIPTION: Shows how to resolve a previously bound type from the IoC container using the App::make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = App::make('foo');\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Raw SQL\nDESCRIPTION: Demonstrates inserting new records into a database table using parameterized values with the Db facade's insert method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nDb::insert('insert into users (id, name) values (?, ?)', [1, 'Joe']);\n```\n\n----------------------------------------\n\nTITLE: Performing a Delete Operation in PHP\nDESCRIPTION: This code shows how to execute a DELETE statement using the Db facade in October CMS, returning the number of deleted rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$deleted = Db::delete('delete from users');\n```\n\n----------------------------------------\n\nTITLE: Executing an Update Query in PHP\nDESCRIPTION: This snippet demonstrates how to perform an UPDATE operation using the Db facade in October CMS, returning the number of affected rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::update('update users set votes = 100 where name = ?', ['John']);\n```\n\n----------------------------------------\n\nTITLE: Adding Related Models via Relationship Method\nDESCRIPTION: Examples of adding single and multiple related models using the add and addMany methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment(['message' => 'A new comment.']);\n\n$post = Post::find(1);\n\n$comment = $post->comments()->add($comment);\n```\n\n----------------------------------------\n\nTITLE: Defining Default Models for Belongs-To Relationships in PHP\nDESCRIPTION: Demonstrates how to set up a default model for a belongs-to relationship when the related model is null.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'user' => [\n        \\Acme\\Blog\\Models\\User::class,\n        'default' => ['name' => 'Guest']\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationships via Dynamic Properties\nDESCRIPTION: Demonstrates lazy loading of relationships using dynamic properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->posts as $post) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calling AJAX Handlers via HTML\nDESCRIPTION: Shows how to call AJAX handlers using both data attributes API and JavaScript API in HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attributes API -->\n<button data-request=\"onSubmitContactForm\">Go</button>\n\n<!-- JavaScript API -->\n<script> $.request('onSubmitContactForm') </script>\n```\n\n----------------------------------------\n\nTITLE: Using Cache Remember Method in PHP\nDESCRIPTION: Using the remember method to retrieve an item from cache or store a default value if it doesn't exist, with a specified expiration time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::remember('users', $seconds, function() {\n    return Db::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Component Definition for Dashboard Widget\nDESCRIPTION: Client-side Vue component implementation with configuration methods and data management for the dashboard widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nVue.component('plugin-author-component-mycustomwidget', {\n    extends: Vue.options.components['backend-component-dashboard-widget-base'],\n    data: function () {\n        return {\n        }\n    },\n    methods: {\n        useCustomData: function () {\n            return true;\n        },\n\n        makeDefaultConfigAndData: function () {\n            Vue.set(this.widget.configuration, 'title', 'My Custom Widget');\n        },\n\n        getSettingsConfiguration: function () {\n            const result = [{\n                property: \"title\",\n                title: \"Title\",\n                type: \"string\",\n            }];\n\n            return result;\n        }\n    },\n    template: '#plugin_author_vuecomponents_mycustomwidget'\n});\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relationship Management\nDESCRIPTION: Examples of attaching, detaching, and syncing many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->detach([1, 2, 3]);\n\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Extending Form Fields Globally in PHP for October CMS\nDESCRIPTION: This PHP code snippet demonstrates how to extend form fields globally by listening to the backend.form.extendFields event and adding new fields to a specific form in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.form.extendFields', function($form) {\n    if (\n        !$form->getController() instanceof \\System\\Controllers\\Settings ||\n        !$form->getModel() instanceof \\System\\Models\\MailSetting\n    ) {\n        return;\n    }\n\n    $form->addFields([\n        'my_field' => [\n            'label' => 'My Field',\n            'comment' => 'This is a custom field I have added.',\n        ],\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Permissions in Plugin\nDESCRIPTION: Demonstrates how to register backend user permissions in a plugin registration file, including permission labels, tabs, and role assignments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_posts' => [\n            'label' => 'Manage the blog posts',\n            'tab' => 'Blog',\n            'order' => 200,\n        ],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Queries on Many-to-Many Relationships in OctoberCMS (PHP)\nDESCRIPTION: Shows how to chain additional query constraints on a many-to-many relationship by accessing the relationship as a method instead of a property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$roles = User::find(1)->roles()->orderBy('name')->get();\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication in OctoberCMS\nDESCRIPTION: Shows how to check if a user is signed in, retrieve the signed-in user model, and find a user by their login name using BackendAuth methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Returns true if signed in.\n$loggedIn = BackendAuth::check();\n\n// Returns the signed in user\n$user = BackendAuth::getUser();\n\n// Returns the signed in user from a controller\n$user = $this->user;\n\n$user = BackendAuth::findUserByLogin('someuser');\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Widget Properties in PHP\nDESCRIPTION: This code shows how to define configurable properties for a form widget and how to populate them using the fillFromConfig method in the init method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass DatePicker extends FormWidgetBase\n{\n    public $mode = 'datetime';\n    public $minDate = null;\n    public $maxDate = null;\n\n    protected $defaultAlias = 'datepicker';\n\n    public function init()\n    {\n        $this->fillFromConfig([\n            'mode',\n            'minDate',\n            'maxDate',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships with Constraints\nDESCRIPTION: Shows how to query relationships with additional constraints using relationship methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$posts = $user->posts()->where('is_active', 1)->get();\n\n$post = $user->posts()->first();\n```\n\n----------------------------------------\n\nTITLE: Combining Aggregate Methods with Clauses\nDESCRIPTION: Shows how to combine aggregate methods with other clauses like where to calculate values on a filtered subset of records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$price = Db::table('orders')\n    ->where('is_finalized', 1)\n    ->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Implementing Encryptable Attributes in PHP Models\nDESCRIPTION: Shows how to use the Encryptable trait to automatically encrypt and decrypt sensitive attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Encryptable;\n\n    protected $encryptable = ['api_key', 'api_secret'];\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Related Fields in PHP\nDESCRIPTION: Examples of eager loading relations and creating related field entries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$records->load('categories');\n\n$records->load(['categories', 'author']);\n\n$post = EntryRecord::inSection('Blog\\Post')->first();\n\n$post->categories()->create(['title' => 'Test', 'price' => '100']);\n\n$category = $post->categories()->make();\n\n$post = EntryRecord::inSection('Blog\\Post')->first();\n$category = EntryRecord::inSection('Blog\\Category')->first();\n\n$post->categories()->add($category);\n```\n\n----------------------------------------\n\nTITLE: Defining MorphToMany Relationship in October CMS Models\nDESCRIPTION: This snippet shows how to define a polymorphic many-to-many relationship in a Post model. The morphToMany property establishes that a Post can have multiple tags associated with it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $morphToMany = [\n        'tags' => [\\Acme\\Blog\\Models\\Tag::class, 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for File Uploads in PHP\nDESCRIPTION: Demonstrates how to check if a file was uploaded in the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nif (Input::hasFile('photo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Database Uniqueness Validation in PHP\nDESCRIPTION: Examples of using the unique validation rule with various options and conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users'\n'email' => 'unique:users,email_address'\n'email' => 'unique:users,email_address,10'\n'email' => 'unique:users,email_address,NULL,id,account_id,1'\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in October CMS\nDESCRIPTION: Examples of how to define routes for different HTTP verbs (GET, POST, PUT, DELETE) using the Route facade and closures. Shows how to return basic responses from route handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function () {\n    return 'Hello World';\n});\n\nRoute::post('foo/bar', function () {\n    return 'Hello World';\n});\n\nRoute::put('foo/bar', function () {\n    //\n});\n\nRoute::delete('foo/bar', function () {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Caching Database Query Results\nDESCRIPTION: Shows how to cache the results of a database query for a specified duration using the remember method with the Cache service.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->remember(10)->get();\n```\n\n----------------------------------------\n\nTITLE: Using the search() Method in PHP Collections\nDESCRIPTION: The search method finds the key of a specified value in the collection. By default, it uses loose comparison, but strict comparison can be enabled. It can also use a callback for custom search criteria.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([2, 4, 6, 8]);\n\n$collection->search(4);\n\n// 1\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->search('4', true);\n\n// false\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->search(function ($item, $key) {\n    return $item > 5;\n});\n\n// 2\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Lifecycle Methods in PHP\nDESCRIPTION: Demonstrates how to define onStart and onEnd lifecycle methods in a partial's PHP section, and inject variables into the Twig environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n==\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n==\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Validating Multiple Fields with Different Rules in PHP\nDESCRIPTION: Shows how to validate multiple fields at once, each with different validation rules. The example validates name, password, and email fields with appropriate rules for each.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(\n    [\n        'name' => 'Joe',\n        'password' => 'lamepassword',\n        'email' => 'email@example.com'\n    ],\n    [\n        'name' => 'required',\n        'password' => 'required|min:8',\n        'email' => 'required|email|unique:users'\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating Database Query Results in PHP\nDESCRIPTION: Demonstrates how to paginate database query results using the paginate method on the query builder. This method automatically handles pagination based on the current page requested by the user.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Models with Order and Conditions in PHP\nDESCRIPTION: Example of defining a many-to-many relationship with additional filtering parameters like 'order' and 'conditions'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'categories' => [\n        \\Acme\\Blog\\Models\\Category::class,\n        'order' => 'name desc',\n        'conditions' => 'is_active = 1'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Components in October CMS Plugin\nDESCRIPTION: Example of registering a component in the Plugin registration class by overriding the registerComponents method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function registerComponents()\n{\n    return [\n        \\October\\Demo\\Components\\Todo::class => 'demoTodo'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Advanced Settings Model with Additional Properties\nDESCRIPTION: Comprehensive example of registering a settings model with additional properties like permissions, keywords, and order. Shows full configuration options for model-based settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'settings' => [\n            'label' => 'User Settings',\n            'description' => 'Manage user based settings.',\n            'category' => 'Users',\n            'icon' => 'icon-cog',\n            'class' => \\Acme\\User\\Models\\UserSetting::class,\n            'order' => 500,\n            'keywords' => 'security location',\n            'permissions' => ['acme.users.access_settings']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Pivot Table Data in PHP for October CMS\nDESCRIPTION: Demonstrates how to access data from the intermediate pivot table in a many-to-many relationship and how to specify additional pivot columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    echo $role->pivot->created_at;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'pivot' => ['column1', 'column2']\n    ]\n];\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'timestamps' => true\n    ]\n];\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'pivotModel' => \\Acme\\Blog\\Models\\UserRolePivot::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown in PHP\nDESCRIPTION: Demonstrates how to use the Markdown facade to parse Markdown syntax into HTML in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$html = Markdown::parse($markdown);\n```\n\n----------------------------------------\n\nTITLE: whereJsonContains with Multiple Values in MySQL/PostgreSQL\nDESCRIPTION: Demonstrates how to use whereJsonContains with multiple values in an array for MySQL and PostgreSQL databases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', ['en', 'de'])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using a Variable as the Partial Name\nDESCRIPTION: Demonstrates how to use a variable to specify the partial name, allowing for dynamic partial selection based on runtime conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set tabName = \"profile\" %}\n{% partial tabName %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Partial Update using Attributes API\nDESCRIPTION: Shows how to update a partial using the data attributes API with data-request-update\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/update-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefreshTime\"\n    data-request-update=\"{ mytime: '#myDiv' }\">\n    Go\n</button>\n```\n\n----------------------------------------\n\nTITLE: Debugging and Logging Functions in PHP\nDESCRIPTION: Helper functions for debugging and logging in OctoberCMS including trace logging and SQL query monitoring\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\ndd($value);\ntrace_log('This code has passed...');\ntrace_log($value1, $value2, $exception, '...');\ntrace_sql();\nDb::table('users')->count();\n```\n\n----------------------------------------\n\nTITLE: Accessing Snippet Properties in Twig\nDESCRIPTION: Shows how to access snippet properties defined in the partial settings within the partial markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nThe country name is {{ country }}\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence in PHP\nDESCRIPTION: Uses the exists and doesntExist methods to determine if any records match the query's constraints. These methods are alternatives to using the count method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Adding Regular Expression Constraints to Route Parameters\nDESCRIPTION: Demonstrates how to apply regular expression constraints to route parameters using the where method, limiting what types of values can be matched.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{name}', function ($name) {\n    //\n})->where('name', '[A-Za-z]+');\n\nRoute::get('user/{id}', function ($id) {\n    //\n})->where('id', '[0-9]+');\n\nRoute::get('user/{id}/{name}', function ($id, $name) {\n    //\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed Snippet Implementation\nDESCRIPTION: Complete implementation of a YouTube video embed snippet with URL parsing and time conversion\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/snippets.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[viewBag]\nsnippetCode = \"youtubeVideo\"\nsnippetName = \"YouTube Video\"\nsnippetDescription = \"Embed a Youtube Video on the page\"\nsnippetProperties[url][title] = \"Video URL\"\nsnippetProperties[url][type] = \"string\"\nsnippetProperties[start_at][title] = \"Start At\"\nsnippetProperties[start_at][type] = \"string\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction urlToCode($link = '')\n{\n    $parts = parse_url($link);\n    if (isset($parts['query'])) {\n        parse_str($parts['query'], $qs);\n        if (isset($qs['v'])){\n            return $qs['v'];\n        }\n        elseif (isset($qs['vi'])){\n            return $qs['vi'];\n        }\n    }\n    if (isset($parts['path'])){\n        $path = explode('/', trim($parts['path'], '/'));\n        return $path[count($path)-1];\n    }\n    return null;\n}\n\nfunction timeToSeconds($time = '')\n{\n    $parts = explode(':', $time);\n    if (count($parts) === 3) {\n        return $parts[0] * 3600 + $parts[1] * 60 + $parts[2];\n    }\n    elseif (count($parts) === 2) {\n        return $parts[0] * 60 + $parts[1];\n    }\n    return $time ?: 0;\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if url %}\n    <iframe\n        width=\"560\"\n        height=\"315\"\n        src=\"https://www.youtube.com/embed/{{ this.urlToCode(url) }}?start={{ this.timeToSeconds(start_at) }}\"\n        title=\"YouTube video player\"\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n        allowfullscreen></iframe>\n{% else %}\n    <!-- Video URL Missing -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Sending Raw String Emails in PHP\nDESCRIPTION: Shows how to send raw string emails using the Mail::raw method in October CMS, with options for Markdown parsing and Twig variable parsing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nMail::raw('Text to e-mail', function ($message) {\n    //\n});\n\n// With Twig parsing\nMail::send(['raw' => 'Text to email'], $vars, function ($message) {\n    //\n});\n\n// Explicit raw HTML and text\nMail::raw([\n    'text' => 'This is plain text',\n    'html' => '<strong>This is HTML</strong>'\n], function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Widget Class in PHP\nDESCRIPTION: This snippet shows how to define a generic widget class that extends the WidgetBase class. It includes the class definition and a render method for producing the widget markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\Widgets;\n\nuse Backend\\Classes\\WidgetBase;\n\nclass Lists extends WidgetBase\n{\n    /**\n     * @var string A unique alias to identify this widget.\n     */\n    protected $defaultAlias = 'list';\n\n    // ...\n}\n\npublic function render()\n{\n    return $this->makePartial('list');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row from a Table in PHP\nDESCRIPTION: Uses the first method to retrieve a single row from the database table. This method returns a single stdClass object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n\necho $user->name;\n```\n\n----------------------------------------\n\nTITLE: Querying Nested Relationship Existence in October CMS\nDESCRIPTION: This example shows how to query for models based on nested relationship existence using dot notation. It retrieves posts that have at least one comment with votes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment with votes...\n$posts = Post::has('comments.votes')->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic One-to-Many Relationships in OctoberCMS Models (PHP)\nDESCRIPTION: Illustrates how to define polymorphic one-to-many relationships in OctoberCMS models. The example shows a Comment model that can belong to either a Post or Video model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    public $morphTo = [\n        'commentable' => []\n    ];\n}\n\nclass Post extends Model\n{\n    public $morphMany = [\n        'comments' => [\\Acme\\Blog\\Models\\Comment::class, 'name' => 'commentable']\n    ];\n}\n\nclass Product extends Model\n{\n    public $morphMany = [\n        'comments' => [\\Acme\\Blog\\Models\\Comment::class, 'name' => 'commentable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Clauses in PHP\nDESCRIPTION: Demonstrates how to use the when method to conditionally apply query constraints based on input or other conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n\n$sortBy = null;\n\n$users = Db::table('users')\n    ->when($sortBy, function ($query, $sortBy) {\n        return $query->orderBy($sortBy);\n    }, function ($query) {\n        return $query->orderBy('name');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Record in PHP using OctoberCMS Model\nDESCRIPTION: This example shows how to update an existing record by retrieving it, modifying attributes, and calling the save method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::find(1);\n$flight->name = 'Darwin to Adelaide';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with filter()\nDESCRIPTION: The filter() method filters the collection by a given callback, keeping only items that pass a given truth test.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$filtered = $collection->filter(function ($item) {\n    return $item > 2;\n});\n\n$filtered->all();\n\n// [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Twig\nDESCRIPTION: Shows how to display the first validation error for a field in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Restricting Backend Controller Access with Required Permissions\nDESCRIPTION: Example showing how to restrict access to backend controller pages by specifying required permissions in a controller class property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nuse Backend\\Classes\\BackendController;\n\nclass Posts extends BackendController\n{\n    public $requiredPermissions = ['acme.blog.access_posts'];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Additional Columns to Select\nDESCRIPTION: Shows how to add more columns to an existing select clause using the addSelect method, useful when building queries conditionally.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Restricting Backend Controller Access\nDESCRIPTION: Example of how to restrict access to backend controller pages using required permissions property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/permissions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nuse Backend\\Classes\\BackendController;\n\nclass Posts extends BackendController\n{\n    public $requiredPermissions = ['acme.blog.access_posts'];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering CMS Content Block with Twig\nDESCRIPTION: Demonstrates how to use the {% content %} tag to display a CMS content block on a page. It shows examples of rendering content from the root directory and subdirectories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"contacts.htm\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"sidebar/content.htm\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Advanced Where Clauses in PHP\nDESCRIPTION: Demonstrates various advanced where methods like whereBetween, whereIn, whereNull, and their negations for more specific filtering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereBetween('votes', [1, 100])->get();\n\n$users = Db::table('users')\n    ->whereNotBetween('votes', [1, 100])\n    ->get();\n\n$users = Db::table('users')\n    ->whereIn('id', [1, 2, 3])\n    ->get();\n\n$users = Db::table('users')\n    ->whereNotIn('id', [1, 2, 3])\n    ->get();\n\n$users = Db::table('users')\n    ->whereNull('updated_at')\n    ->get();\n\n$users = Db::table('users')\n    ->whereNotNull('updated_at')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Input Values in PHP with October CMS\nDESCRIPTION: Examples of retrieving user input using the Input facade or input helper function, with options for default values and checking if input exists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name');\n\n$name = input('name');\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Action in PHP for October CMS\nDESCRIPTION: This PHP code snippet demonstrates how to override a controller action method (update in this case) while still calling the parent FormController behavior method in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function update($recordId, $context = null)\n{\n    //\n    // Do any custom code here\n    //\n\n    // Call the FormController behavior update() method\n    return $this->asExtension('FormController')->update($recordId, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a One-to-Many Relationship in PHP\nDESCRIPTION: Example of defining a one-to-many relationship in an October CMS model class. This snippet shows how to set up a 'hasMany' relationship between a User model and Post models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => \\Acme\\Blog\\Models\\Post::class\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Constrained Lazy Eager Loading\nDESCRIPTION: Shows how to add query constraints to lazy eager loaded relationships using a closure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$books->load([\n    'author' => function ($query) {\n        $query->orderBy('published_date', 'asc');\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Form View in PHP\nDESCRIPTION: Shows how to create a form view for the Create page in October CMS, including form rendering and button configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class'=>'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div class=\"loading-indicator-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"close:true\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                data-load-indicator=\"Creating Category...\"\n                class=\"btn btn-default\">\n                Create and Close\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependency Definition\nDESCRIPTION: Example showing how to define plugin dependencies in the registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    /**\n     * @var array require these plugins\n     */\n    public $require = ['Acme.User'];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Public Directory with October Mirror Command\nDESCRIPTION: Command to create a public folder for improved security in production environments, ensuring only specific directories can be accessed. This creates symbolic links to assets and resources.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:mirror\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Transactions\nDESCRIPTION: Demonstrates how to manually roll back a database transaction when needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nDb::rollBack();\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect in AJAX Handlers\nDESCRIPTION: Demonstrates how to redirect the browser from an AJAX handler by returning a Redirect response object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onRedirectMe()\n{\n    return Redirect::to('http://google.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Complete PHP AJAX Event Handler with Validation\nDESCRIPTION: PHP code for an AJAX event handler that processes form data, applies validation rules, and returns appropriate responses for success or validation failure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nfunction onDoSomething()\n{\n    $data = post();\n\n    $rules = [\n        'name' => 'required',\n        'email' => 'required|email',\n    ];\n\n    $validation = Validator::make($data, $rules);\n\n    if ($validation->fails()) {\n        throw new ValidationException($validation);\n    }\n\n    Flash::success('Jobs done!');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic One-to-Many Relationships in OctoberCMS Models\nDESCRIPTION: This snippet demonstrates how to define polymorphic one-to-many relationships in Comment, Post, and Product models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    public $morphTo = [\n        'commentable' => []\n    ];\n}\n\nclass Post extends Model\n{\n    public $morphMany = [\n        'comments' => ['Acme\\Blog\\Models\\Comment', 'name' => 'commentable']\n    ];\n}\n\nclass Product extends Model\n{\n    public $morphMany = [\n        'comments' => ['Acme\\Blog\\Models\\Comment', 'name' => 'commentable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Cron Job for October CMS Scheduler\nDESCRIPTION: Configures a cron job to run the October CMS task scheduler every minute. The cron job executes the artisan schedule:run command and redirects output to /dev/null.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/scheduler.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /october/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Registration in PHP\nDESCRIPTION: Example of a basic plugin registration file showing core plugin details and component registration in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public function pluginDetails()\n    {\n        return [\n            'name' => 'Blog Plugin',\n            'description' => 'Provides some really cool blog features.',\n            'author' => 'ACME Corporation',\n            'icon' => 'icon-leaf'\n        ];\n    }\n\n    public function registerComponents()\n    {\n        return [\n            \\Acme\\Blog\\Components\\Post::class => 'blogPost'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Model Properties Example\nDESCRIPTION: Example showing common model properties including primary key, timestamps, and attribute definitions\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'id';\n\n    public $exists = false;\n\n    protected $dates = ['last_seen_at'];\n\n    public $timestamps = true;\n\n    protected $jsonable = ['permissions'];\n\n    protected $guarded = ['*'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereExists for Subquery Existence Checks\nDESCRIPTION: Demonstrates how to use whereExists to filter records based on the existence of related records in another table using a subquery.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->whereExists(function ($query) {\n        $query->select(Db::raw(1))\n            ->from('orders')\n            ->whereRaw('orders.user_id = users.id');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Running Queue Worker with Retry Attempts\nDESCRIPTION: Artisan command to start a queue worker with a specified number of retry attempts before marking a job as failed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work connection-name --tries=3\n```\n\n----------------------------------------\n\nTITLE: Filtering for NULL Values with whereNull\nDESCRIPTION: Demonstrates how to use whereNull to filter records where a specified column contains NULL values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereNull('updated_at')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Storing Items in Cache in PHP\nDESCRIPTION: Examples of storing items in the cache using 'put', 'add', and 'forever' methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nCache::put('key', 'value', $seconds);\n\n$expiresAt = Carbon::now()->addMinutes(10);\nCache::put('key', 'value', $expiresAt);\n\nCache::add('key', 'value', $seconds);\n\nCache::forever('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Form Field Filtering in PHP with October CMS\nDESCRIPTION: Shows how to extend a User model to implement conditional form field visibility based on the source_type value. The code demonstrates hiding/showing source_url and git_branch fields depending on whether the source type is 'http', 'git', or another value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.form.filterFields', function ($formWidget, $fields, $context) use ($model) {\n        if ($model->source_type === 'http') {\n            $fields->source_url->hidden = false;\n            $fields->git_branch->hidden = true;\n        }\n        elseif ($model->source_type === 'git') {\n            $fields->source_url->hidden = false;\n            $fields->git_branch->hidden = false;\n        }\n        else {\n            $fields->source_url->hidden = true;\n            $fields->git_branch->hidden = true;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Behavior Implementation Example\nDESCRIPTION: Full example showing behavior class definition, implementation, and usage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyNamespace\\Behaviors;\n\nclass FormController extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $controller;\n\n    public function __construct($controller)\n    {\n        $this->controller = $controller;\n    }\n\n    public function someMethod()\n    {\n        return \"I come from the FormController Behavior!\";\n    }\n\n    public function otherMethod()\n    {\n        return \"You might not see me...\";\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace;\n\nclass Controller extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        \\MyNamespace\\Behaviors\\FormController::class\n    ];\n\n    public function otherMethod()\n    {\n        return \"I come from the main Controller!\";\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$controller = new MyNamespace\\Controller;\n\necho $controller->someMethod();\necho $controller->otherMethod();\necho $controller->asExtension('FormController')->otherMethod();\n```\n\n----------------------------------------\n\nTITLE: Performing Subquery Joins with joinSub Method\nDESCRIPTION: Shows how to join a query to a subquery using joinSub method. The example joins users table with a subquery that finds the latest post for each user.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function ($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Implementation\nDESCRIPTION: Example of implementing a one-to-many relationship for blog posts and comments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $hasMany = [\n        'comments' => 'Acme\\Blog\\Models\\Comment'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Single Field Validation with Track Input\nDESCRIPTION: HTML form setup for validating a single field when its value changes using the data-track-input attribute. This triggers an AJAX request as the user types in the field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request-validate>\n    <div>\n        <label>Username</label>\n        <input name=\"username\" data-request=\"onCheckUsername\" data-track-input />\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Purgeable Trait in October CMS Model\nDESCRIPTION: Demonstrates how to use the Purgeable trait to prevent specific attributes from being saved to the database during model creation or updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Purgeable;\n\n    /**\n        * @var array List of attributes to purge.\n        */\n    protected $purgeable = ['password_confirmation'];\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships in PHP\nDESCRIPTION: Examples of attaching, detaching, and syncing many-to-many relationships with additional pivot data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->attach($roleId);\n\n$user->roles()->attach($roleId, ['expires' => $expires]);\n\n// Detach a single role from the user...\n$user->roles()->detach($roleId);\n\n// Detach all roles from the user...\n$user->roles()->detach();\n\n$user->roles()->detach([1, 2, 3]);\n\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\n\n$user->roles()->sync([1, 2, 3]);\n\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Executing General SQL Statements\nDESCRIPTION: Shows how to execute general SQL statements that don't return values, such as dropping tables or altering schemas.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::statement('drop table users');\n```\n\n----------------------------------------\n\nTITLE: Simplified Where Clause for Equality Check\nDESCRIPTION: Demonstrates the shorthand syntax for equality checks in where clauses, where the operator is omitted and assumed to be equals.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', 100)->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Model Event in PHP using OctoberCMS\nDESCRIPTION: This snippet demonstrates how to implement a model event (beforeCreate) to generate a URL slug before saving a new model instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Generate a URL slug for this model\n */\npublic function beforeCreate()\n{\n    $this->slug = Str::slug($this->name);\n}\n```\n\n----------------------------------------\n\nTITLE: Halting Event Propagation in PHP\nDESCRIPTION: Shows how to stop the propagation of an event to other listeners by returning false from the listener function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($event) {\n    // Handle the event\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Field Dependencies in YAML\nDESCRIPTION: Demonstrates how to set up a basic field dependency where a state dropdown depends on a country selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: dropdown\n\nstate:\n    label: State\n    type: dropdown\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Using the pluck() Method in PHP Collections\nDESCRIPTION: The pluck method retrieves all values for a specified key from a collection of arrays or objects. An optional second parameter allows specifying a key to use for the resulting collection's keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product_id' => 'prod-100', 'name' => 'Chair'],\n    ['product_id' => 'prod-200', 'name' => 'Desk'],\n]);\n\n$plucked = $collection->pluck('name');\n\n$plucked->all();\n\n// ['Chair', 'Desk']\n```\n\nLANGUAGE: php\nCODE:\n```\n$plucked = $collection->pluck('name', 'product_id');\n\n$plucked->all();\n\n// ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n```\n\n----------------------------------------\n\nTITLE: Running October CMS Installation\nDESCRIPTION: Command to run the October CMS installation process which sets up the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:install\n```\n\n----------------------------------------\n\nTITLE: Using Database Transactions with Closure\nDESCRIPTION: Demonstrates running database operations within a transaction using a closure. Automatically handles commits and rollbacks based on exceptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nDb::transaction(function () {\n    Db::table('users')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Role-Specific Permissions in October CMS\nDESCRIPTION: Example demonstrating how to register permissions with role assignments. The 'roles' option specifies which system roles automatically receive this permission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_categories' => [\n            'label' => 'Manage the blog categories',\n            'tab' => 'Blog',\n            'order' => 200,\n            'roles' => ['developer']\n        ]\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Trait in PHP Model\nDESCRIPTION: Shows how to use the Sortable trait to maintain sort order of models in a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relationship Definition\nDESCRIPTION: Example of defining a one-to-one relationship between User and Phone models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    public $hasOne = [\n        'phone' => \\Acme\\Blog\\Models\\Phone::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting Multiple Records with Query Builder in PHP\nDESCRIPTION: Demonstrates how to insert multiple records into a database table with a single query using the insert method. The method accepts an array of arrays, where each inner array represents a row to be inserted.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.com', 'votes' => 0],\n    ['email' => 'dayle@example.com', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Widget Data in October CMS\nDESCRIPTION: This snippet shows how to prepare variables for rendering a form widget in October CMS. It sets up the id, name, and value variables to be used in the widget partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['id'] = $this->getId();\n    $this->vars['name'] = $this->getFieldName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('myformwidget');\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Collection in PHP\nDESCRIPTION: Demonstrates how to loop over a collection of User models retrieved from the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('is_active', true)->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Save Operation in PHP for October CMS Model Event\nDESCRIPTION: This code shows how to cancel a save or update operation by returning false from a model event. In this case, it checks if the user is valid before allowing the creation to proceed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeCreate()\n{\n    if (!$user->isValid()) {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying On Delete Action for Foreign Key in PHP with October CMS Schema\nDESCRIPTION: This snippet demonstrates how to specify the 'on delete' action for a foreign key constraint using the Schema builder in October CMS. In this case, it sets the action to 'cascade'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$table->foreign('user_id')\n    ->references('id')\n    ->on('users')\n    ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Using sort() Method in PHP Collections\nDESCRIPTION: The sort method sorts the collection elements. By default, it preserves keys, but you can use values() to reset keys to consecutively numbered indexes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([5, 3, 1, 2, 4]);\n\n$sorted = $collection->sort();\n\n$sorted->values()->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Using Arrays to Specify Validation Rules in PHP\nDESCRIPTION: Demonstrates how to specify multiple validation rules as an array instead of using the pipe delimiter. This approach can be more readable for complex validation requirements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(\n    ['name' => 'Joe'],\n    ['name' => ['required', 'min:5']]\n);\n```\n\n----------------------------------------\n\nTITLE: Collection Filtering and Mapping in PHP\nDESCRIPTION: Shows how to chain collection methods to filter active users and map to their names using closure callbacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::get();\n\n$names = $users->filter(function ($user) {\n        return $user->is_active === true;\n    })\n    ->map(function ($user) {\n        return $user->name;\n    });\n```\n\n----------------------------------------\n\nTITLE: Making GET Request with Query Parameters\nDESCRIPTION: Shows how to make a GET request with query parameters that will be appended to the URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nHttp::get('https://octobercms.com', [\n    'page' => '1'\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Has Many Through Relation in Country Model\nDESCRIPTION: PHP code showing how to define a Has Many Through relationship in a Country model to access posts through users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass Country extends Model\n{\n    public $hasManyThrough = [\n        'posts' => [\n            \\Acme\\Blog\\Models\\Post::class,\n            'through' => \\Acme\\Blog\\Models\\User::class\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Iteration in PHP\nDESCRIPTION: Demonstrates how to iterate over an Eloquent collection using a foreach loop to access model properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('is_active', true)->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Properties in October CMS PHP\nDESCRIPTION: Demonstrates how to loop through a collection of model instances and access their property values, which correspond to database column values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Field Dependencies\nDESCRIPTION: Demonstrates field definitions with dependencies. The source_url and git_branch fields depend on the source_type field and will refresh when it changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsource_type:\n    label: Source Type\n    type: dropdown\n    options:\n        git: Git\n        http: Http\n        upload: Upload\n\nsource_url:\n    label: Source URL\n    type: text\n    dependsOn: source_type\n\ngit_branch:\n    label: Git Branch\n    type: text\n    dependsOn: source_type\n```\n\n----------------------------------------\n\nTITLE: Accessing Many-to-Many Relationships - PHP\nDESCRIPTION: Demonstrates different ways to access roles related to a user through many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$roles = User::find(1)->roles()->orderBy('name')->get();\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Validation Rule Class\nDESCRIPTION: Illustrates the implementation of a global validation rule class with validate and message methods. The validate method determines if the rule passes, while the message method returns a custom error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nclass UppercaseRule\n{\n    /**\n     * validate determines if the validation rule passes.\n     * @param string $attribute\n     * @param mixed $value\n     * @param array $params\n     * @return bool\n     */\n    public function validate($attribute, $value, $params)\n    {\n        return strtoupper($value) === $value;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be uppercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data and Handling Exceptions in PHP\nDESCRIPTION: Code demonstrating how to decrypt previously encrypted data using the Crypt facade's decrypt method, with error handling for invalid decryption attempts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/hashing-encryption.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\n\ntry {\n    $decrypted = Crypt::decrypt($encryptedValue);\n}\ncatch (DecryptException $ex) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying UI Elements Based on Permissions\nDESCRIPTION: Example showing how to conditionally display a delete button in a backend form based on whether the user has the required permission to delete categories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php if (BackendAuth::userHasAccess('acme.blog.delete_categories')): ?>\n    <button\n        type=\"button\"\n        class=\"oc-icon-trash-o btn-icon danger\"\n        data-request=\"onDelete\"\n        data-load-indicator=\"Deleting Category...\"\n        data-request-confirm=\"Do you really want to delete this category?\">\n    </button>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Conditional UI Element Display Based on Permissions\nDESCRIPTION: Shows how to conditionally display UI elements in backend views based on user permissions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/permissions.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php if (BackendAuth::userHasAccess('acme.blog.delete_categories')): ?>\n    <button\n        type=\"button\"\n        class=\"oc-icon-trash-o btn-icon danger\"\n        data-request=\"onDelete\"\n        data-load-indicator=\"Deleting Category...\"\n        data-request-confirm=\"Do you really want to delete this category?\">\n    </button>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in PHP\nDESCRIPTION: Redis connection configuration in database.php file, defining cluster mode, default server with host, port, and database settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'cluster' => false,\n\n    'default' => [\n        'host'     => '127.0.0.1',\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n],\n```\n\n----------------------------------------\n\nTITLE: Relationship Definition with Filtering\nDESCRIPTION: Example of defining relationships with ordering and condition parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'categories' => [\n        \\Acme\\Blog\\Models\\Category::class,\n        'order' => 'name desc',\n        'conditions' => 'is_active = 1'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Inserting and Retrieving Auto-incrementing ID in PHP\nDESCRIPTION: Shows how to insert a record and retrieve the auto-incrementing ID in one operation using the insertGetId method. This is particularly useful when you need the ID of the newly inserted record for further operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Session using Session Facade in PHP\nDESCRIPTION: Demonstrates how to store a key-value pair in the session using the Session facade's put method. Also shows how to push a new value onto an array stored in the session.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/session.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSession::put('key', 'value');\n```\n\nLANGUAGE: php\nCODE:\n```\nSession::push('user.teams', 'developers');\n```\n\n----------------------------------------\n\nTITLE: Bulk Updating Records in PHP using OctoberCMS Query Builder\nDESCRIPTION: This snippet demonstrates how to perform bulk updates on multiple records that match certain criteria using the query builder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nFlight::where('is_active', true)\n    ->where('destination', 'Perth')\n    ->update(['delayed' => true]);\n```\n\n----------------------------------------\n\nTITLE: Combining Where Clauses with OR Condition\nDESCRIPTION: Shows how to use the orWhere method to create OR conditions in queries, allowing for more flexible filtering logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('votes', '>', 100)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Model Class in PHP\nDESCRIPTION: Basic implementation of a settings model class that extends System\\Models\\SettingModel. The class requires settingsCode for database storage and settingsFields for form definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/model-settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Demo\\Models;\n\nclass UserSetting extends \\System\\Models\\SettingModel\n{\n    public $settingsCode = 'acme_demo_settings';\n\n    public $settingsFields = 'fields.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscription with Callable Object in October CMS - PHP\nDESCRIPTION: Example of subscribing to an event using a reference to a callable object instead of a closure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', [$this, 'LoginHandler']);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Value from a Row\nDESCRIPTION: Demonstrates how to extract a single column value from a database record using the value() method with a where condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Storing User Avatars with Default Disk (PHP)\nDESCRIPTION: Example of storing a user avatar on the default disk using the Storage facade. When methods are called on the Storage facade without specifying a disk, the default disk is used.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find($id);\n\nStorage::put(\n    'avatars/'.$user->id,\n    file_get_contents(Request::file('avatar')->getRealPath())\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Component URL Configuration\nDESCRIPTION: Basic component configuration showing URL and component declaration in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/todo\"\n\n[demoTodo]\n```\n\n----------------------------------------\n\nTITLE: Defining Model Properties in October CMS PHP\nDESCRIPTION: Illustrates common properties that can be configured in an October CMS model, including primary key, timestamps, JSON fields, and mass assignment settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'id';\n\n    public $exists = false;\n\n    protected $dates = ['last_seen_at'];\n\n    public $timestamps = true;\n\n    protected $jsonable = ['permissions'];\n\n    protected $guarded = ['*'];\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Data from AJAX Handler\nDESCRIPTION: Shows how to return structured data from an AJAX handler and access it in the success callback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onFetchDataFromServer()\n{\n    /* Some server-side code */\n\n    return [\n        'totalUsers' => 1000,\n        'totalProjects' => 937\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Command using init.php in OctoberCMS Plugin\nDESCRIPTION: Shows how to register a console command using the init.php file in an OctoberCMS plugin directory. This uses the Artisan::add method to register the command instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nArtisan::add(new Acme\\Blog\\Console\\MyCommand);\n```\n\n----------------------------------------\n\nTITLE: Debugging Database Queries in PHP\nDESCRIPTION: Shows how to debug database queries using the dd and dump methods. The dd method displays debug information and stops execution, while dump displays debug information but allows the request to continue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\n\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Creating a Many-to-Many Join Table in OctoberCMS Migration (PHP)\nDESCRIPTION: Creates a join table for a many-to-many relationship between users and roles with appropriate foreign keys and a composite primary key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('role_user', function($table)\n{\n    $table->integer('user_id')->unsigned();\n    $table->integer('role_id')->unsigned();\n    $table->primary(['user_id', 'role_id']);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Has Many Through Relationship in OctoberCMS Model (PHP)\nDESCRIPTION: Demonstrates how to define a has-many-through relationship in an OctoberCMS model, allowing access to distant relations through an intermediate model. The example shows a Country model accessing Post models through a User model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass Country extends Model\n{\n    public $hasManyThrough = [\n        'posts' => [\n            \\Acme\\Blog\\Models\\Post::class,\n            'through' => \\Acme\\Blog\\Models\\User::class\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Behavior AJAX Handler in PHP\nDESCRIPTION: This PHP code demonstrates how to override an AJAX handler in a controller while still calling the original behavior's handler using the asExtension method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/ajax.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction onDoSomething()\n{\n    // Custom logic here\n    // ...\n\n    // Call the extension handler\n    return $this->asExtension('FormController')->doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregate Values from Models in October CMS PHP\nDESCRIPTION: Demonstrates how to use aggregate functions like count, sum, and max on model queries to retrieve scalar values instead of model instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$count = Flight::where('active', 1)->count();\n\n$max = Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Processing Large Log Files with LazyCollection in PHP\nDESCRIPTION: This example demonstrates using LazyCollection to process a large log file without loading the entire file into memory at once. It reads the file line by line using a generator function, chunks the data, and processes it efficiently.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_83\n\nLANGUAGE: php\nCODE:\n```\nuse App\\LogEntry;\nuse Illuminate\\Support\\LazyCollection;\n\nLazyCollection::make(function () {\n    $handle = fopen('log.txt', 'r');\n\n    while (($line = fgets($handle)) !== false) {\n        yield $line;\n    }\n})->chunk(4)->map(function ($lines) {\n    return LogEntry::fromLines($lines);\n})->each(function (LogEntry $logEntry) {\n    // Process the log entry...\n});\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from CMS Method in PHP\nDESCRIPTION: Demonstrates how to return a simple string response from a CMS page, layout, or component method. This will halt the process and display the string instead of the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onStart()\n{\n    return 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_first() Function in PHP\nDESCRIPTION: The array_first method returns the first element of an array that passes a given truth test callback function. It can also accept a default value to return if no matching element is found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, 200, 300];\n\n$value = array_first($array, function ($key, $value) {\n    return $value >= 150;\n});\n\n// 200\n```\n\n----------------------------------------\n\nTITLE: Defining a HasManyThrough Relationship in OctoberCMS (PHP)\nDESCRIPTION: Shows how to define a hasManyThrough relationship to access distant models through an intermediate model, allowing a Country model to access Posts through Users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass Country extends Model\n{\n    public $hasManyThrough = [\n        'posts' => [\n            'Acme\\Blog\\Models\\Post',\n            'through' => 'Acme\\Blog\\Models\\User'\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Block in Twig\nDESCRIPTION: Example of rendering a content block named 'contacts.html' within a Twig template. This snippet demonstrates how to include a Content Block in a page layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/content.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/contacts\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"contacts\">\n    {% content 'contacts.html' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering View with Data in PHP\nDESCRIPTION: Shows how to render a view and pass data to it using the View::make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn View::make('acme.blog::greeting', ['name' => 'Charlie']);\n```\n\n----------------------------------------\n\nTITLE: Upserting Multiple Records with Unique Constraints\nDESCRIPTION: Demonstrates the upsert method which inserts new rows and updates existing ones based on unique constraints. Requires columns with primary or unique indexes on most databases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nDb::table('flights')->upsert([\n    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n], ['departure', 'destination'], ['price']);\n```\n\n----------------------------------------\n\nTITLE: Creating Mail View Content with Twig\nDESCRIPTION: Illustrates the structure of a mail view file using Twig, including configuration, plain text, and HTML markup sections. The example shows how to use basic Twig tags and expressions in the content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\nsubject = \"Your product has been added to OctoberCMS project\"\n==\n\nHi {{ name }},\n\nGood news! User {{ user }} just added your product \"{{ product }}\" to a project.\n\nThis message was sent using no formatting (plain text)\n==\n\n<p>Hi {{ name }},</p>\n\n<p>Good news! User {{ user }} just added your product <strong>{{ product }}</strong> to a project.</p>\n\n<p>This email was sent using formatting (HTML)</p>\n```\n\n----------------------------------------\n\nTITLE: Using array_only Helper Function in PHP\nDESCRIPTION: The array_only function returns a new array containing only the specified key/value pairs from the original array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100, 'orders' => 10];\n\n$array = array_only($array, ['name', 'price']);\n\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Dispatching Browser Events from AJAX Handlers\nDESCRIPTION: Shows how to dispatch custom JavaScript events from AJAX handlers using the dispatchBrowserEvent method. These events are triggered in the browser after the AJAX request completes but before partials are updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction onPerformAction()\n{\n    $this->dispatchBrowserEvent('app:update-profile');\n\n    $this->dispatchBrowserEvent('app:update-profile', ['name' => 'Jeff']);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Method in API Endpoints\nDESCRIPTION: Shows how to implement conditional logic based on the HTTP request method using the this.request.method Twig property. This is useful for creating RESTful API endpoints that respond differently to different methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.request.method == 'GET' %}\n    <!-- Do GET Logic -->\n{% else %}\n    <!-- Method Unsupported -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeCreate Event in PHP for October CMS Model\nDESCRIPTION: This snippet demonstrates how to use the beforeCreate event to generate a URL slug for a model when it's first created. It uses the Str::slug helper to create the slug from the name attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Generate a URL slug for this model\n */\npublic function beforeCreate()\n{\n    $this->slug = Str::slug($this->name);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Local Events by Extending Models\nDESCRIPTION: Example of extending a model to bind to a local event, allowing more targeted functionality specific to that model instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('user.register', function () use ($model) {\n        // Code to register $model->email to mailing list\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Join Clauses\nDESCRIPTION: Demonstrates advanced join syntax using a Closure to define complex join conditions with multiple constraints connected by OR conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Job-Specific Failure Handling\nDESCRIPTION: PHP method implementation for job-specific failure handling. This method is called when a specific job fails and receives the original job data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function failed($data)\n{\n    // Called when the job is failing...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models in PHP\nDESCRIPTION: Shows how to use the 'create' method to create and associate a new Comment model with a Post model using an array of attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$comment = $post->comments()->create([\n    'message' => 'A new comment.',\n]);\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Using Layout Middleware\nDESCRIPTION: Shows how to create an API endpoint that uses a layout with middleware. The layout conditions will be applied before the page logic executes, allowing for centralized authentication or other checks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nlayout = \"api\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({ success: true }) %}\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Class in PHP for October CMS\nDESCRIPTION: Example of a basic report widget class definition that extends the ReportWidgetBase class and implements the render method to display a traffic sources widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace RainLab\\GoogleAnalytics\\ReportWidgets;\n\nuse Backend\\Classes\\ReportWidgetBase;\n\nclass TrafficSources extends ReportWidgetBase\n{\n    public function render()\n    {\n        return $this->makePartial('widget');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence\nDESCRIPTION: Uses the exists and doesntExist methods to determine if any records match a given set of constraints without retrieving the actual records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Paginating Filtered Model Results in PHP\nDESCRIPTION: Shows how to apply query constraints before pagination, filtering users with more than 100 votes and displaying 15 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Relationships in PHP\nDESCRIPTION: Example of defining a one-to-many relationship between Post and Comment models in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $hasMany = [\n        'comments' => \\Acme\\Blog\\Models\\Comment::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections Based on Keys in PHP\nDESCRIPTION: The diffKeys method compares the collection against another collection or a plain PHP array based on its keys. It returns the key/value pairs in the original collection that are not present in the given collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'one' => 10,\n    'two' => 20,\n    'three' => 30,\n    'four' => 40,\n    'five' => 50,\n]);\n\n$diff = $collection->diffKeys([\n    'two' => 2,\n    'four' => 4,\n    'six' => 6,\n    'eight' => 8,\n]);\n\n$diff->all();\n\n// ['one' => 10, 'three' => 30, 'five' => 50]\n```\n\n----------------------------------------\n\nTITLE: Calling Multiple Seeders in PHP with October CMS\nDESCRIPTION: This snippet demonstrates how to call multiple seeder classes within the DatabaseSeeder class in October CMS. It uses the call method to execute additional seed classes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $this->call(\\Acme\\Users\\Updates\\UserTableSeeder::class);\n    $this->call(\\Acme\\Users\\Updates\\PostsTableSeeder::class);\n    $this->call(\\Acme\\Users\\Updates\\CommentsTableSeeder::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Controller Class Definition in PHP\nDESCRIPTION: Demonstrates the most basic representation of a Controller class used inside a Plugin in October CMS. The controller extends the \\Backend\\Classes\\Controller class and includes an index action method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/controllers-ajax.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Posts extends \\Backend\\Classes\\Controller\n{\n    public function index()    // <=== Action method\n    {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SettingsModel Behavior in PHP\nDESCRIPTION: This snippet demonstrates how to create a settings model class that extends Model and implements the SettingsModel behavior. It includes properties for setting the unique settings code and specifying the fields configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Demo\\Models;\n\nuse Model;\n\nclass UserSetting extends Model\n{\n    /**\n     * @var array implement these behaviors\n     */\n    public $implement = [\n        \\System\\Behaviors\\SettingsModel::class\n    ];\n\n    /**\n     * @var string settingsCode unique to this model\n     */\n    public $settingsCode = 'acme_demo_settings';\n\n    /**\n     * @var string settingsFields configuration\n     */\n    public $settingsFields = 'fields.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request Without Form Element\nDESCRIPTION: Shows how to make an AJAX request without a form element using the global $.request method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$.request('onCalculate', {\n    success: function() {\n        console.log('Finished!');\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Results with Constraints\nDESCRIPTION: Example showing how to paginate model results after applying where clauses or other constraints to the query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Relationships - PHP\nDESCRIPTION: Shows how to eager load multiple different relationships in a single query by passing multiple arguments to the with() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author', 'publisher')->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Model Definition in PHP\nDESCRIPTION: Basic model class definition showing table name specification\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass Post extends Model\n{\n    protected $table = 'acme_blog_posts';\n}\n```\n\n----------------------------------------\n\nTITLE: Global AJAX Configuration Setup\nDESCRIPTION: Sets up global configurations for all AJAX requests including flash message handling, loading indicator, and error message handling. This configuration is applied through the ajaxSetup event handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).on('ajaxSetup', function(event, context) {\n    // Enable AJAX handling of Flash messages on all AJAX requests\n    context.options.flash = true\n\n    // Enable the StripeLoadIndicator on all AJAX requests\n    context.options.loading = $.oc.stripeLoadIndicator\n\n    // Handle Error Messages by triggering a flashMsg of type error\n    context.options.handleErrorMessage = function(message) {\n        $.oc.flashMsg({ text: message, class: 'error' })\n    }\n\n    // Handle Flash Messages by triggering a flashMsg of the message type\n    context.options.handleFlashMessage = function(message, type) {\n        $.oc.flashMsg({ text: message, class: type })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Guarded Attributes in PHP using OctoberCMS Model\nDESCRIPTION: This example shows how to use the $guarded property to specify attributes that are not mass assignable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * The attributes that aren't mass assignable.\n     *\n     * @var array\n     */\n    protected $guarded = ['price'];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Model Properties in PHP for October CMS\nDESCRIPTION: Demonstrates common model properties like primary key, timestamps, JSON fields, and mass assignment protection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'id';\n\n    public $exists = false;\n\n    protected $dates = ['last_seen_at'];\n\n    public $timestamps = true;\n\n    protected $jsonable = ['permissions'];\n\n    protected $guarded = ['*'];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules for OctoberCMS Model\nDESCRIPTION: Shows how to set up validation rules for an OctoberCMS model using the Validation trait and $rules property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $rules = [\n        'name'                  => 'required|between:4,16',\n        'email'                 => 'required|email',\n        'password'              => 'required|alpha_num|between:4,8|confirmed',\n        'password_confirmation' => 'required|alpha_num|between:4,8'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Plugin Publication in October CMS\nDESCRIPTION: The minimum required JSON configuration in composer.json for publishing an October CMS plugin. The package name must end with -plugin and include composer/installers as a dependency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/blog-plugin\",\n    \"type\": \"october-plugin\",\n    \"description\": \"Enter a meaningful description here\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Validation Rules in PHP\nDESCRIPTION: Demonstrates how to conditionally apply validation rules using the 'sometimes' rule modifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Unique Rule Implementation\nDESCRIPTION: Shows how to implement basic unique validation for database fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users'\n```\n\n----------------------------------------\n\nTITLE: Basic Form Widget Save Value Method in PHP\nDESCRIPTION: Demonstrates how to override the getSaveValue method in a form widget to process or transform the form input value before saving to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getSaveValue($value)\n{\n    return $value;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Injection in October CMS\nDESCRIPTION: Demonstrates how to inject variables into the Twig environment using the onStart lifecycle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Bulk Model Deletion\nDESCRIPTION: Methods for deleting multiple records using destroy() and query-based deletion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nFlight::destroy(1);\n\nFlight::destroy([1, 2, 3]);\n\nFlight::destroy(1, 2, 3);\n\n$deletedRows = Flight::where('active', 0)->delete();\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Example in October CMS\nDESCRIPTION: Demonstrates basic usage of the Log facade to write information to log files stored in storage/logs directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/log.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\nLog::info('Showing user profile for user: '.$user->name);\n```\n\n----------------------------------------\n\nTITLE: Defining Mass Assignable Attributes in OctoberCMS Model (PHP)\nDESCRIPTION: Demonstrates how to define mass assignable attributes using the $fillable property in a model class to protect against mass-assignment vulnerabilities.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: API Route with Model Finding\nDESCRIPTION: Example of using findOrFail in an API route for automatic 404 handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/api/flights/{id}', function ($id) {\n    return Flight::findOrFail($id);\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Models to JSON in PHP\nDESCRIPTION: Demonstrates how to convert a model to JSON using the toJson method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->toJson();\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Tree Migration\nDESCRIPTION: Migration script to add columns required for implementing nested set model hierarchies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('categories', function ($table) {\n    $table->integer('parent_id')->nullable()->unsigned();\n    $table->integer('nest_left')->nullable();\n    $table->integer('nest_right')->nullable();\n    $table->integer('nest_depth')->nullable();\n});\n```\n\n----------------------------------------\n\nTITLE: Subquery Join Operations in PHP\nDESCRIPTION: Demonstrates how to join a subquery to get latest posts for users using joinSub method. Creates a derived table of latest posts and joins it with users table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function ($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Accessor Method in PHP Model\nDESCRIPTION: Shows how to create a getter accessor method that transforms the first_name attribute value when accessed. The accessor automatically capitalizes the first letter of the name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * getFirstNameAttribute is available as `first_name` on the model\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Manual File Import with PHP in October CMS\nDESCRIPTION: Examples showing how to manually process an import using the importFile method. Demonstrates importing from a local file path or from an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-model.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$importModel = new MyImportClass;\n\n$importModel->file_format = 'json';\n\n$importModel->importFile('/path/to/import/file.json');\n```\n\nLANGUAGE: php\nCODE:\n```\n$importModel->importFile(\n    Input::file('file')->getRealPath()\n);\n```\n\n----------------------------------------\n\nTITLE: Backend User Authentication Methods in October CMS\nDESCRIPTION: Shows various methods for checking authentication status and retrieving user information using BackendAuth facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Returns true if signed in.\n$loggedIn = BackendAuth::check();\n\n// Returns the signed in user\n$user = BackendAuth::getUser();\n\n// Returns the signed in user from a controller\n$user = $this->user;\n```\n\n----------------------------------------\n\nTITLE: Request and Response Helper Functions in PHP\nDESCRIPTION: Helper functions for handling HTTP requests and responses, including input handling, redirects, and URL generation\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$value = input('key', $default = null);\n$value = get('key', $default = null);\n$value = post('key', $default = null);\n$value = files('key', $default = null);\nreturn redirect('/home');\n$referer = request()->header('referer');\nreturn response('Hello World', 200, $headers);\n$url = route('routeName', ['id' => 1]);\n$url = asset('img/photo.jpg');\necho secure_asset('foo/bar.zip', $title, $attributes = []);\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response Methods\nDESCRIPTION: Demonstrates various methods available for handling HTTP response including body access, status code, and headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$result = Http::post('https://octobercms.com');\necho $result->body();                  // Outputs: <html><head><title>...\necho $result->status();                // Outputs: 200\necho $result->header('Content-Type');  // Outputs: text/html; charset=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Searching within Related Models - PHP\nDESCRIPTION: Demonstrates the searchWhereRelation method for performing case-insensitive LIKE searches on columns within related models using a specified search term.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::searchWhereRelation('foo bar', 'author', ['name', 'bio'])->get();\n```\n\n----------------------------------------\n\nTITLE: Converting OctoberCMS Model to Array\nDESCRIPTION: Demonstrates how to convert a model and its loaded relationships to an array using the toArray() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::with('roles')->first();\n\nreturn $user->toArray();\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Single Field in AJAX Handler\nDESCRIPTION: Demonstrates how to refresh a specific field from an AJAX handler using the formRefreshFields method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function onChangeContent()\n{\n    return $this->formRefreshFields('is_positive');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Database Connections\nDESCRIPTION: Demonstrates how to access different database connections and the underlying PDO instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::connection('foo')->select(...);\n```\n\nLANGUAGE: php\nCODE:\n```\n$pdo = Db::connection()->getPdo();\n```\n\n----------------------------------------\n\nTITLE: Plugin Boot Method with Model Extension\nDESCRIPTION: Example showing how to extend models in the boot method of a plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    User::extend(function($model) {\n        $model->hasOne['author'] = \\Acme\\Blog\\Models\\Author::class;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Handler in Controller\nDESCRIPTION: Demonstrates how to create an AJAX handler method in a controller that returns data, handles exceptions, and renders partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function onOpenTemplate()\n{\n    if (Request::input('someVar') != 'someValue') {\n        throw new ApplicationException('Invalid value');\n    }\n\n    $this->vars['foo'] = 'bar';\n\n    return [\n        'partialContents' => $this->makePartial('some-partial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key-Value Pairs with Pluck\nDESCRIPTION: Demonstrates how to use pluck with a custom key column, returning an associative array where keys come from one column and values from another.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Raw SQL\nDESCRIPTION: Demonstrates deleting records from the database using raw SQL. Returns the number of deleted rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$deleted = Db::delete('delete from users');\n```\n\n----------------------------------------\n\nTITLE: Creating Model with Deferred Bindings in PHP\nDESCRIPTION: Demonstrates using the create method with deferred bindings using a session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::create(['title' => 'First blog post'], $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Lazy Loaded Relationships\nDESCRIPTION: This code shows how to add query constraints to lazy loaded relationships using a closure function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$books->load([\n    'author' => function ($query) {\n        $query->orderBy('published_date', 'asc');\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Query Scopes in OctoberCMS Model (PHP)\nDESCRIPTION: Demonstrates how to create a dynamic query scope that accepts parameters, allowing for more flexible and reusable query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Scope a query to only include users of a given type.\n     */\n    public function scopeApplyType($query, $type)\n    {\n        return $query->where('type', $type);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Validation Form Example in October CMS\nDESCRIPTION: A comprehensive HTML form example with validation, flash messages, and loading indicators. Includes fields with individual validation messages and a general error container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSubmitForm\"\n    data-request-validate\n    data-request-flash>\n    <div>\n        <label>Username</label>\n        <input name=\"username\"\n            data-request=\"onCheckUsername\"\n            data-track-input\n            data-attach-loading />\n        <span data-validate-for=\"username\"></span>\n    </div>\n\n    <div>\n        <label>Email</label>\n        <input name=\"email\" />\n        <span data-validate-for=\"email\"></span>\n    </div>\n\n    <button data-attach-loading>\n        Submit\n    </button>\n\n    <div class=\"alert alert-danger\" data-validate-error>\n        <p data-message></p>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: October CMS Installation and Setup Commands\nDESCRIPTION: Essential commands for completing the October CMS installation, including running the installer, migrating the database, and serving the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:install\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Wildcard Event Listener in PHP\nDESCRIPTION: Illustrates how to use wildcard listeners to handle multiple events with a single listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('foo.*', function($event, $params) {\n    // Handle the event...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Scopes in PHP with OctoberCMS\nDESCRIPTION: This example shows how to use a dynamic scope with parameters when querying a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$users = User::applyType('admin')->get();\n```\n\n----------------------------------------\n\nTITLE: Managing Flash Data in Session using PHP\nDESCRIPTION: Illustrates how to store, reflash, and keep specific flash data in the session for short-term use.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nSession::flash('key', 'value');\n\nSession::reflash();\n\nSession::keep(['username', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Responses in API Endpoints\nDESCRIPTION: Demonstrates how to abort a request with a 404 response when a resource is not found using the abort() Twig function. This pattern implements proper error handling for API endpoints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if post %}\n    {% do response(post) %}\n{% else %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Model Event Handler Example\nDESCRIPTION: Example of implementing a model event handler for beforeCreate event\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeCreate()\n{\n    $this->slug = Str::slug($this->name);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models via Relationship in PHP\nDESCRIPTION: Demonstrates creating and associating a new related model using the create method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$comment = $post->comments()->create([\n    'message' => 'A new comment.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Executing General SQL Statements\nDESCRIPTION: Shows how to execute SQL statements that don't return values using the statement method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::statement('drop table users');\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Validation Messages in PHP\nDESCRIPTION: Shows how to define custom validation messages when creating a validator instance. The messages array allows overriding default validation messages with custom ones.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = Validator::make($input, $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Registering Exception Handler with Response in PHP\nDESCRIPTION: Shows how to register an exception handler that returns a response. When a handler returns a response, it's sent to the browser and no other error handlers are called.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(InvalidUserException $exception) {\n    return 'Sorry! Something is wrong with this account!';\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Dependencies in October CMS\nDESCRIPTION: Example of how to define plugin dependencies using the $require property in the Plugin class. This ensures that dependent plugins are installed before the current plugin can function properly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    /**\n     * @var array Plugin dependencies\n     */\n    public $require = ['Acme.User'];\n\n    [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Default Filter with Method Calls in Twig\nDESCRIPTION: Demonstrates how to properly chain the default filter when using method calls that may have undefined variables. Shows nested usage of the default filter for safer variable handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-default.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable.method(foo|default('bar'))|default('bar') }}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Columns with Arrow Operator\nDESCRIPTION: Demonstrates how to query JSON column types in databases that support them, using the -> operator to access JSON properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Nginx Server Configuration\nDESCRIPTION: Nginx server configuration for handling October CMS routing and static files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlocation / {\n    rewrite ^/.*$ /index.php last;\n}\n\nlocation ~ ^/index.php {\n}\n\nlocation ~ ^/(favicon\\.ico|sitemap\\.xml|robots\\.txt|humans\\.txt) { try_files $uri /index.php; }\n\nlocation ~ /\\.(?!well-known).* { deny all; }\n\nlocation ~ ^/storage/app/(uploads/public|media|resources) { try_files $uri 404; }\nlocation ~ ^/storage/temp/public { try_files $uri 404; }\nlocation ~ ^/modules/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/modules/.*/(behaviors|widgets|formwidgets|reportwidgets)/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/plugins/.*/.*/(behaviors|reportwidgets|formwidgets|widgets)/.*/(assets|resources) { try_files $uri 404; }\nlocation ~ ^/themes/.*/(?:assets|resources) { try_files $uri 404; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Locks in Database Queries with PHP\nDESCRIPTION: Demonstrates how to implement pessimistic locking using sharedLock method. A shared lock prevents the selected rows from being modified until the transaction commits, allowing for safer concurrent operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Defining Option Shortcuts in Console Command Signature\nDESCRIPTION: Shows how to define option shortcuts in the command signature. Shortcuts provide a shorter syntax when triggering an option, prefixed with a single pipe character.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user} {--Q|queue}';\n```\n\n----------------------------------------\n\nTITLE: Chunking Results by ID for Updates\nDESCRIPTION: Uses chunkById to safely update records while chunking through results. This method paginates based on the record's primary key to avoid inconsistencies when records are modified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('active', false)\n    ->chunkById(100, function ($users) {\n        foreach ($users as $user) {\n            Db::table('users')\n                ->where('id', $user->id)\n                ->update(['active' => true]);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Column Values\nDESCRIPTION: Shows how to update a specific key in a JSON column using arrow syntax. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n    ->where('id', 1)\n    ->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Restricting Access to Backend Pages in OctoberCMS\nDESCRIPTION: Shows how to restrict access to backend pages by specifying required permissions in a backend controller class using the $requiredPermissions property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Controllers;\n\nuse Backend\\Classes\\BackendController;\n\nclass Posts extends BackendController\n{\n    public $requiredPermissions = ['acme.blog.access_posts'];\n}\n```\n\n----------------------------------------\n\nTITLE: Firing an Event in October CMS - PHP\nDESCRIPTION: Example of firing an event with the Event::fire method, passing the user object as a parameter to make the logic extensible.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('auth.login', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections in PHP\nDESCRIPTION: The filter method filters the collection by a given callback, keeping only those items that pass a given truth test.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$filtered = $collection->filter(function ($item) {\n    return $item > 2;\n});\n\n$filtered->all();\n\n// [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Advanced Event Handling with Confirmation\nDESCRIPTION: Demonstrates advanced event handling in JavaScript to prompt the user and conditionally resend an AJAX request with additional data. This pattern is useful for handling concurrent edit conflicts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('app:stale-document', function (event) {\n    if (confirm('Another user has updated this document, proceed?')) {\n        oc.request(event.target, 'onUpdate', { data: {\n            force: true\n        }});\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Exceptions with JavaScript API\nDESCRIPTION: Demonstrates how to handle AJAX exceptions using the JavaScript API's error callback function, providing more control over error handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"oc.request(this, 'onHandleForm', {\n        error: function(data) {\n            console.log(data);\n        }\n    }); return false\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using each Method in PHP Collections\nDESCRIPTION: The each method iterates over collection items and passes each to a callback function. The iteration can be stopped by returning false from the callback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$collection->each(function ($item, $key) {\n    //\n});\n\n$collection->each(function ($item, $key) {\n    if (/* some condition */) {\n        return false;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Column Values in PHP\nDESCRIPTION: Shows how to increment or decrement the value of a database column using the increment and decrement methods. These methods provide a more expressive interface compared to manual update statements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Querying One-to-Many Relationships with Constraints in PHP\nDESCRIPTION: Shows how to add additional constraints when querying related models in a one-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$comments = Post::find(1)->comments()->where('title', 'foo')->first();\n```\n\n----------------------------------------\n\nTITLE: Extending Twig with Custom Filters and Functions in October CMS\nDESCRIPTION: Example of registering custom Twig filters and functions using the registerMarkupTags method. Demonstrates how to register global functions, local methods, static method calls, and inline closures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function registerMarkupTags()\n{\n    return [\n        'filters' => [\n            // A global function, i.e str_plural()\n            'plural' => 'str_plural',\n\n            // A local method, i.e $this->makeTextAllCaps()\n            'uppercase' => [$this, 'makeTextAllCaps']\n        ],\n        'functions' => [\n            // A static method call, i.e Form::open()\n            'form_open' => ['October\\Rain\\Html\\Form', 'open'],\n\n            // Using an inline closure\n            'helloWorld' => function() { return 'Hello World!'; }\n        ]\n    ];\n}\n\npublic function makeTextAllCaps($text)\n{\n    return strtoupper($text);\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing ValidationException with Validator Instance in PHP\nDESCRIPTION: Shows how to throw a ValidationException using a validator instance. This is useful when working with the validation service.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$validation = Validator::make(...);\n\nif ($validation->fails()) {\n    throw new ValidationException($validation);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scalar Values from Database\nDESCRIPTION: Shows how to retrieve a single scalar value from a database query, useful for count queries or other aggregation functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$count = Db::scalar('select count(*) as count from menu_items');\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship in User Model\nDESCRIPTION: Shows how to define a many-to-many relationship to roles in the User model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $belongsToMany = [\n        'roles' => \\Acme\\Blog\\Models\\Role::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Behavior Implementation\nDESCRIPTION: Demonstrates how to implement behaviors in an October CMS class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        \\October\\Rain\\UtilityFunctions::class,\n        \\October\\Rain\\DeferredBinding::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Many-to-Many Related Models in OctoberCMS (PHP)\nDESCRIPTION: Demonstrates two ways to access roles related to a user - either through a dynamic property for direct access or through a method for query chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Has One Through Relationship in OctoberCMS Model\nDESCRIPTION: This snippet shows how to define a has-one-through relationship in a Supplier model, linking it to a History model through a User model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass Supplier extends Model\n{\n    public $hasOneThrough = [\n        'userHistory' => [\n            'Acme\\Supplies\\Model\\History',\n            'through' => 'Acme\\Supplies\\Model\\User'\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Date Mutators in PHP\nDESCRIPTION: Demonstrates how to work with date mutators, including setting dates and accessing Carbon instance methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->disabled_at = Carbon::now();\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Detailed Relationship Definition with Parameters in PHP\nDESCRIPTION: Demonstrates a more detailed relationship definition using an array with additional parameters like 'delete' for cascading deletes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic $hasMany = [\n    'posts' => [\\Acme\\Blog\\Models\\Post::class, 'delete' => true]\n];\n```\n\n----------------------------------------\n\nTITLE: Calling Commands with Arguments from Console Command\nDESCRIPTION: Shows how to call other Artisan commands with arguments from within a console command. Arguments are passed as an associative array to the call method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$this->call('plugin:refresh', ['name' => 'October.Demo']);\n```\n\n----------------------------------------\n\nTITLE: Basic Contact Form Snippet\nDESCRIPTION: A snippet that displays a basic contact form and provides a way to handle the submission logic, with AJAX enabled for form handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n## partials/snippets/contact-form.htm\n\n[viewBag]\nsnippetCode = \"contactForm\"\nsnippetName = \"Contact Form\"\nsnippetDescription = \"Display a contact form\"\nsnippetAjax = 1\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContact()\n{\n    $this['submitted'] = true;\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if not submitted %}\n    <h3>Tell us what you think!</h3>\n    <form data-request=\"onSubmitContact\" data-request-update=\"{ _self: true }\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <div class=\"form-floating mb-3\">\n                    <input name=\"name\" type=\"text\" class=\"form-control\">\n                    <label>Name</label>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"form-floating mb-3\">\n                    <input name=\"email\" type=\"email\" class=\"form-control\">\n                    <label>Email Address</label>\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-3 form-floating\">\n            <textarea class=\"form-control h-100\"></textarea>\n            <label>Message</label>\n        </div>\n        <div class=\"form-buttons d-flex pt-2\">\n            <div>\n                <button type=\"submit\" class=\"btn btn-primary btn-pill\">Submit</button>\n            </div>\n        </div>\n    </form>\n{% else %}\n    <div class=\"alert alert-success\">\n        Thanks for contacting us!\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Column Values\nDESCRIPTION: Demonstrates various ways to increment or decrement column values, including specifying the amount and updating additional columns in the same operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Using Classes as Event Listeners in PHP\nDESCRIPTION: Demonstrates how to use classes as event listeners, including subscribing to individual methods and entire classes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', 'LoginHandler');\n\nclass LoginHandler\n{\n    public function handle($data)\n    {\n        // ...\n    }\n}\n\n// Subscribing to specific method\nEvent::listen('auth.login', 'LoginHandler@onLogin');\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating a Collection in PHP\nDESCRIPTION: This example demonstrates creating a Collection instance with array data, then using map() to transform elements and reject() to filter elements in a fluent chain.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$collection = new October\\Rain\\Support\\Collection(['stewie', 'brian', null]);\n\n$collection = $collection\n    ->map(function ($name) {\n        return strtoupper($name);\n    })\n    ->reject(function ($name) {\n        return empty($name);\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship with Additional Constraints - PHP\nDESCRIPTION: Demonstrates how to access relationships as query builders, allowing additional constraints to be applied to relationship queries before execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$posts = $user->posts()->where('is_active', 1)->get();\n\n$post = $user->posts()->first();\n```\n\n----------------------------------------\n\nTITLE: Using Named Error Bags in PHP\nDESCRIPTION: Demonstrates how to use named error bags for multiple forms on a single page. This allows you to separate validation errors for different forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('register')->withErrors($validator, 'login');\n```\n\n----------------------------------------\n\nTITLE: Using dd() Function in Twig\nDESCRIPTION: The dd() function dumps variables and terminates the process immediately. It's useful for stopping execution at a specific point while debugging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/dump.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dd('dump and die') }}\n```\n\n----------------------------------------\n\nTITLE: Validating Uploaded Files\nDESCRIPTION: Demonstrates how to check if an uploaded file is valid before processing it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nif (Input::file('photo')->isValid()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Meta Data in Twig\nDESCRIPTION: Shows how to inject raw markup to the {% meta %} tag using the meta anonymous placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{% put meta %}\n    <meta name=\"turbo-visit-control\" content=\"error\">\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: AJAX-Enabled Form with Data Attributes in HTML\nDESCRIPTION: Example of an AJAX-enabled form using data attributes API that submits to an onTest handler and updates a target div with the mypartial partial. Form data is automatically sent with the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- AJAX enabled form -->\n<form data-request=\"onTest\" data-request-update=\"{ mypartial: '#myDiv' }\">\n\n    <!-- Input two values -->\n    <input name=\"value1\"> + <input name=\"value2\">\n\n    <!-- Action button -->\n    <button type=\"submit\">Calculate</button>\n\n</form>\n\n<!-- Result container -->\n<div id=\"myDiv\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using AJAX Partials in OctoberCMS\nDESCRIPTION: Example of using the {% ajaxPartial %} tag to enable AJAX handlers within partials. This overcomes the limitations of regular partials by allowing AJAX functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial \"contact-form\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Customization Fields in YAML\nDESCRIPTION: Example of defining a customization field for the theme in the theme.yaml file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Theme\n# [...]\n\nform:\n    fields:\n        site_name:\n            label: Site name\n            comment: The website name as it should appear on the front-end\n            default: My Amazing Site!\n```\n\n----------------------------------------\n\nTITLE: Using array_get() Function in PHP\nDESCRIPTION: The array_get method retrieves a value from a deeply nested array using 'dot' notation. This simplifies accessing deeply nested array values without having to check if each level exists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$array = ['products' => ['desk' => ['price' => 100]]];\n\n$value = array_get($array, 'products.desk');\n\n// ['price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Upserting Multiple Records in OctoberCMS (PHP)\nDESCRIPTION: Shows how to use the upsert method to insert or update multiple records in a single database call, specifying unique identifiers and updatable columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nMyVendor\\MyPlugin\\Models\\Flight::upsert([\n    ['departure' => 'Oakland', 'destination' => 'San Diego', 'price' => 99],\n    ['departure' => 'Chicago', 'destination' => 'New York', 'price' => 150]\n], ['departure', 'destination'], ['price']);\n```\n\n----------------------------------------\n\nTITLE: Injecting Content into a Placeholder in Twig\nDESCRIPTION: Shows how to inject content into a previously defined placeholder using the {% put %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% put name %}\n    <p>Place this text in the name placeholder</p>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML in PHP\nDESCRIPTION: Examples of using the YAML facade to parse YAML strings and files into PHP arrays and render arrays back to YAML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$array = Yaml::parse($yamlString);\n```\n\nLANGUAGE: php\nCODE:\n```\n$array = Yaml::parseFile($filePath);\n```\n\nLANGUAGE: php\nCODE:\n```\n$yamlString = Yaml::render($array);\n```\n\n----------------------------------------\n\nTITLE: Array Validation in PHP\nDESCRIPTION: Examples of validating array inputs using dot notation and wildcards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(input(), [\n    'photos.profile' => 'required|image',\n]);\n\n$validator = Validator::make(input(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n\n$validator = Validator::make(input(), [\n    'photos[profile]' => 'required|image',\n    'person[][email]' => 'email|unique:users',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using array_except() Function in PHP\nDESCRIPTION: The array_except method removes specified key/value pairs from an array. It takes the original array and an array of keys to remove, returning the filtered array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100];\n\n$array = array_except($array, ['price']);\n\n// ['name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Queueing Mail for Background Sending in October CMS\nDESCRIPTION: Example of queueing an email for background sending using the Mail::queue method to improve application response time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nMail::queue('acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationships as Dynamic Properties in October CMS\nDESCRIPTION: This example demonstrates accessing relationships as dynamic properties, which uses lazy loading to fetch the related records only when accessed. This is simpler syntax when no additional constraints are needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->posts as $post) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching and Detaching Many-to-Many Relationships in PHP\nDESCRIPTION: Shows how to use the 'attach' and 'detach' methods to manage many-to-many relationships, such as between User and Role models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->attach($roleId);\n\n$user->roles()->attach($roleId, ['expires' => $expires]);\n\n// Detach a single role from the user...\n$user->roles()->detach($roleId);\n\n// Detach all roles from the user...\n$user->roles()->detach();\n\n$user->roles()->detach([1, 2, 3]);\n\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Converting Models to Arrays in PHP\nDESCRIPTION: Demonstrates how to convert a model and its loaded relationships to an array using the toArray method. This code retrieves a User model with related roles and converts it to an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::with('roles')->first();\n\nreturn $user->toArray();\n```\n\n----------------------------------------\n\nTITLE: Binding an Interface to an Implementation in PHP\nDESCRIPTION: Demonstrates binding an interface to a concrete implementation in the IoC container, allowing for dependency injection of the implementation when requesting the interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('UserRepositoryInterface', 'DbUserRepository');\n```\n\n----------------------------------------\n\nTITLE: Defining belongsToMany Relationship in PHP for October CMS\nDESCRIPTION: Shows how to define a belongsToMany relationship in a User model to access related Role models. It also demonstrates how to customize the join table and foreign keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $belongsToMany = [\n        'roles' => \\Acme\\Blog\\Models\\Role::class\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\\Acme\\Blog\\Models\\Role::class, 'table' => 'acme_blog_role_user']\n];\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'table'    => 'acme_blog_role_user',\n        'key'      => 'my_user_id',\n        'otherKey' => 'my_role_id'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Registration in PHP\nDESCRIPTION: Example of a plugin registration file showing core plugin information and component registration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public function pluginDetails()\n    {\n        return [\n            'name' => 'Blog Plugin',\n            'description' => 'Provides some really cool blog features.',\n            'author' => 'ACME Corporation',\n            'icon' => 'icon-leaf'\n        ];\n    }\n\n    public function registerComponents()\n    {\n        return [\n            \\Acme\\Blog\\Components\\Post::class => 'blogPost'\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Field Implementation in YAML for October CMS\nDESCRIPTION: A simple implementation of a text field for a blog title. This demonstrates the basic usage with type and label properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-text.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblog_title:\n    type: text\n    label: Blog Title\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Polymorphic Relationships in OctoberCMS (PHP)\nDESCRIPTION: Shows how to access and update polymorphic relationships in OctoberCMS. Examples include iterating through comments on a post and updating the owner of a polymorphic relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$post = Author\\Plugin\\Models\\Post::find(1);\n\nforeach ($post->comments as $comment) {\n    //\n}\n\n$comment = Author\\Plugin\\Models\\Comment::find(1);\n\n$commentable = $comment->commentable;\n\n$comment = Author\\Plugin\\Models\\Comment::find(1);\n$video = Author\\Plugin\\Models\\Video::find(1);\n\n$comment->commentable = $video;\n$comment->save()\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Lists with Custom Columns\nDESCRIPTION: Example of listening to the backend.list.extendColumns event to modify the columns displayed in a backend list, including adding and removing columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Extend all backend list usage\nEvent::listen('backend.list.extendColumns', function ($widget) {\n    // Only for the User controller\n    if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n        return;\n    }\n\n    // Only for the User model\n    if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n        return;\n    }\n\n    // Add an extra birthday column\n    $widget->addColumns([\n        'birthday' => [\n            'label' => 'Birthday'\n        ],\n    ]);\n\n    // Remove a Surname column\n    $widget->removeColumn('surname');\n});\n```\n\n----------------------------------------\n\nTITLE: Using GroupByRaw for Raw Grouping\nDESCRIPTION: Demonstrates the groupByRaw method for specifying raw SQL in the group by clause when grouping by multiple columns or expressions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->select('city', 'state')\n    ->groupByRaw('city, state')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Input in October CMS\nDESCRIPTION: Examples of how to access user input using the Input facade in October CMS. These methods work the same way regardless of the HTTP verb used in the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name');\n```\n\n----------------------------------------\n\nTITLE: Calling AJAX Handlers using HTML and JavaScript\nDESCRIPTION: Shows different methods of calling AJAX handlers using both data attributes API and JavaScript API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attributes API -->\n<button data-request=\"onSubmitContactForm\">Go</button>\n\n<!-- JavaScript API -->\n<script> $.request('onSubmitContactForm') </script>\n```\n\n----------------------------------------\n\nTITLE: Server-side Partial Update Handler\nDESCRIPTION: PHP handler example showing how to push partial updates from the server side\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/update-partials.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onRefreshTime()\n{\n    return [\n        '#myDiv' => $this->renderPartial('mypartial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Model Mass Assignment Protection\nDESCRIPTION: Defining fillable attributes for mass assignment protection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * @var array fillable attributes that are mass assignable.\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Relationships in PHP\nDESCRIPTION: This code demonstrates how to eager load multiple relationships in a single database query using the with() method in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author', 'publisher')->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Properties in October CMS\nDESCRIPTION: Examples of how to access component property values within the component class and Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->property('maxItems');\n\n$this->property('maxItems', 6);\n\n$properties = $this->getProperties();\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ __SELF__.property('maxItems') }}\n```\n\n----------------------------------------\n\nTITLE: Completely Disabling PJAX with Meta Tag\nDESCRIPTION: This HTML meta tag completely disables PJAX functionality for both incoming and outgoing requests across the entire website.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"turbo-visit-control\" content=\"disable\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Attribute Accessor\nDESCRIPTION: Shows how to define an accessor for a computed attribute that will be included in serialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Get the administrator flag for the user.\n     *\n     * @return bool\n     */\n    public function getIsAdminAttribute()\n    {\n        return $this->attributes['admin'] == 'yes';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Other Commands\nDESCRIPTION: Examples of calling other console commands from within a command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->call('october:migrate');\n\n$this->call('plugin:refresh', ['name' => 'October.Demo']);\n\n$this->call('october:update', ['--force' => true]);\n```\n\n----------------------------------------\n\nTITLE: Basic Validator Usage in PHP\nDESCRIPTION: Demonstrates how to create a Validator instance, apply rules, and check validation results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$data = post();\n\n$validator = Validator::make($data, [\n    'name' => 'required|min:5'\n]);\n\nif ($validator->fails()) {\n    // The given data did not pass validation\n}\n\n$messages = $validator->messages();\n```\n\n----------------------------------------\n\nTITLE: Running Queue Worker as Daemon in October CMS\nDESCRIPTION: Command to run the queue worker as a continuous daemon process. This approach keeps the queue worker running permanently rather than executing it at intervals.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Events in PHP\nDESCRIPTION: Demonstrates how to fire both local and global events from within a Topic component class. The component fires a local event 'topic.post' and a global event 'rainlab.forum.topic.post' when a post is created.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Topic extends ComponentBase\n{\n    public function onPost()\n    {\n        // ...\n\n        $this->fireEvent('topic.post', [$post, $postUrl]);\n\n        Event::fire('rainlab.forum.topic.post', [$this, $post, $postUrl]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in PHP Model\nDESCRIPTION: Demonstrates how to use the Validation trait to add automatic validation rules to a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $rules = [\n        'name' => 'required|between:4,16',\n        'email' => 'required|email',\n        'password' => 'required|alpha_num|between:4,8|confirmed',\n        'password_confirmation' => 'required|alpha_num|between:4,8'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Trait Implementation\nDESCRIPTION: Example of implementing the Emitter trait for object-specific event handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass UserManager\n{\n    use \\October\\Rain\\Support\\Traits\\Emitter;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutator in PHP for OctoberCMS Model\nDESCRIPTION: This snippet shows how to define a mutator method in a User model to format the first_name attribute. The mutator automatically converts the name to lowercase when set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/mutators.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * Set the user's first name.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with where() Method in PHP\nDESCRIPTION: The where() method filters the collection by a given key/value pair. It supports optional comparison operators and uses 'loose' comparisons by default.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->where('price', 100);\n\n$filtered->all();\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Jim', 'deleted_at' => '2019-01-01 00:00:00'],\n    ['name' => 'Sally', 'deleted_at' => '2019-01-02 00:00:00'],\n    ['name' => 'Sue', 'deleted_at' => null],\n]);\n\n$filtered = $collection->where('deleted_at', '!=', null);\n\n$filtered->all();\n```\n\n----------------------------------------\n\nTITLE: Basic Event Listener Registration in PHP\nDESCRIPTION: Shows how to register a basic event listener that updates a user's last login date when they sign in.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($user) {\n    $user->last_login = new DateTime;\n    $user->save();\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Clauses with when Method\nDESCRIPTION: Demonstrates how to use the when method to conditionally apply where clauses based on input values, providing cleaner code for optional filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Working with Array Casted Attributes\nDESCRIPTION: Example showing how to access, modify and save an array-casted attribute. The attribute is automatically deserialized from JSON when accessed and serialized back to JSON when saved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$options = $user->options;\n\n$options['key'] = 'value';\n\n$user->options = $options;\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Extending Relation Configuration\nDESCRIPTION: PHP method to dynamically modify relation configuration based on model properties, allowing different configurations for different scenarios.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendConfig($config, $field, $model)\n{\n    // Make sure the model and field matches those you want to manipulate\n    if (!$model instanceof MyModel || $field != 'myField')\n        return;\n\n    // Show a different list for business customers\n    if ($model->mode == 'b2b') {\n        $config->view['list'] = '$/author/plugin_name/models/mymodel/b2b_columns.yaml';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering View with Data in PHP\nDESCRIPTION: Shows how to render a view and pass data to it using the View::make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nreturn View::make('acme.blog::greeting', ['name' => 'Charlie']);\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Errors with Callback in PHP\nDESCRIPTION: Demonstrates how to use the onError method to execute a callback if a client or server error occurs during an HTTP request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response->onError(callable $callback);\n```\n\n----------------------------------------\n\nTITLE: Registering Static Function\nDESCRIPTION: Example of registering a Twig function that maps to a static class method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'functions' => [\n    'form_open' => [Form::class, 'open']\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing a Component in a CMS Template\nDESCRIPTION: This snippet demonstrates how to initialize a component called 'demoTodo' with a configuration property in an October CMS template file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"Components demonstration\"\nurl = \"/components\"\n\n[demoTodo]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Log Levels in October CMS\nDESCRIPTION: Shows all available RFC 5424 logging levels: emergency, alert, critical, error, warning, notice, info, and debug.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/log.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLog::emergency($error);\nLog::alert($error);\nLog::critical($error);\nLog::error($error);\nLog::warning($error);\nLog::notice($error);\nLog::info($error);\nLog::debug($error);\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation Implementation\nDESCRIPTION: Examples of implementing conditional validation rules using the sometimes method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'required|email',\n    'games' => 'required|numeric',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with Advanced Options\nDESCRIPTION: Demonstrates using data and confirmation options with AJAX forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_ajax('onDelete', { data: { id: 2 }, confirm: 'Really delete this record?' }) }}\n\n{{ form_ajax('onRefresh', { update: { statistics: '#statsPanel' } }) }}\n```\n\n----------------------------------------\n\nTITLE: Requesting Confirmation Before Deletion\nDESCRIPTION: Shows how to implement a confirmation dialog before sending a delete request, with redirection after successful completion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onDelete', {\n    confirm: 'Are you sure?',\n    redirect: '/dashboard'\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Values in PHP\nDESCRIPTION: This code shows how to override a plugin's configuration file by creating a local configuration file. It also demonstrates using the env() helper for environment-specific configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => env('ACME_TODO_MAX_ITEMS', 25)\n];\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments to Emails\nDESCRIPTION: Example of attaching a file to an email message using the attach method in the message callback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog::mail.welcome', $data, function ($message) {\n    //\n\n    $message->attach($pathToFile);\n});\n```\n\n----------------------------------------\n\nTITLE: Partitioning Collection Based on Condition in PHP\nDESCRIPTION: The partition method separates elements that pass a given truth test from those that don't. It returns two collections that can be destructured using the list function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6]);\n\nlist($underThree, $equalOrAboveThree) = $collection->partition(function ($i) {\n    return $i < 3;\n});\n\n$underThree->all();\n\n// [1, 2]\n\n$equalOrAboveThree->all();\n\n// [3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Session using PHP\nDESCRIPTION: Example of storing data in the session using the Session facade's put method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSession::put('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scalar Values from Database\nDESCRIPTION: Shows how to fetch a single scalar value from a database query using the scalar method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$count = Db::scalar('select count(*) as count from menu_items');\n```\n\n----------------------------------------\n\nTITLE: Listing Deferred Bindings in PHP\nDESCRIPTION: Shows how to retrieve all records including deferred bindings using the withDeferred method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->withDeferred($sessionKey)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Record with Mass Assignment in PHP using OctoberCMS\nDESCRIPTION: This snippet demonstrates how to create a new record using mass assignment with the create method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::create(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with Log Facade in PHP\nDESCRIPTION: Demonstrates how to use the Log facade to write information to the logs in October CMS. This example shows logging user profile information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/log.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\nLog::info('Showing user profile for user: '.$user->name);\n```\n\n----------------------------------------\n\nTITLE: Constraining Eager Loads in OctoberCMS\nDESCRIPTION: Shows how to add constraints to eager loaded relationships using closure functions, allowing for more specific data retrieval.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->where('title', 'like', '%first%');\n    }\n])->get();\n\n$users = User::with([\n    'posts' => function ($query) {\n        $query->orderBy('created_at', 'desc');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Using Not Found Exceptions in PHP for October CMS\nDESCRIPTION: Shows how to use findOrFail() and firstOrFail() methods to throw exceptions when models are not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model = Flight::findOrFail(1);\n\n$model = Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Performing Subquery Joins in PHP\nDESCRIPTION: Demonstrates how to use joinSub to join a subquery to the main query. The subquery selects the latest post date for each user, which is then joined to the users table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$latestPosts = Db::table('posts')\n    ->select('user_id', Db::raw('MAX(created_at) as last_post_created_at'))\n    ->where('is_published', true)\n    ->groupBy('user_id');\n\n$users = Db::table('users')\n    ->joinSub($latestPosts, 'latest_posts', function ($join) {\n        $join->on('users.id', '=', 'latest_posts.user_id');\n    })->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only Specific Input Values\nDESCRIPTION: Examples of retrieving only certain input fields or excluding specific input fields from the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::only('username', 'password');\n\n$input = Input::except('credit_card');\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Storage in October CMS\nDESCRIPTION: Example configuration for the filesystems.php config file to use Amazon S3 as the Media Manager storage provider. Includes required parameters like API credentials, region, bucket name, and URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/providers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'disks' => [\n    // ...\n    'media' => [\n        'driver' => 's3',\n        'key'    => 'XXXXXXXXXXXXXXXXXXXX',\n        'secret' => 'xxxXxXX+XxxxxXXxXxxxxxxXxxXXXXXXXxxxX9Xx',\n        'region' => 'us-west-2',\n        'bucket' => 'my-bucket',\n        'url' => 'https://s3-us-west-2.amazonaws.com/your-bucket-name',\n        'visibility' => 'public',\n        'throw' => false\n    ],\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Returned Data with JavaScript API\nDESCRIPTION: Shows how to access data returned from an AJAX handler using the JavaScript API's success callback function, providing more control over the request handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"oc.request(this, 'onHandleForm', {\n        success: function(data) {\n            console.log(data);\n        }\n    }); return false\"\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Field Dependencies in YAML Configuration\nDESCRIPTION: Demonstrates how to set up a dependency between a state dropdown field and a country field in YAML configuration. When the country field changes, the state field will refresh.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: dropdown\n\nstate:\n    label: State\n    type: dropdown\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Converting Collection to Array with toArray() Method in PHP\nDESCRIPTION: The toArray() method converts a collection into a plain PHP array. If the collection contains database models, the models will also be converted to arrays. This method also converts nested objects to arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'Desk', 'price' => 200]);\n\n$collection->toArray();\n\n/*\n    [\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Paginating Collection Results in October CMS\nDESCRIPTION: Example of applying pagination to a collection using the 'paginate()' method, showing how to paginate posts at 10 per page and display the pagination navigation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set authorPosts = posts.whereRelation(...).paginate(10) %}\n\n{{ pager(authorPosts) }}\n```\n\n----------------------------------------\n\nTITLE: Taking Items from Collection in PHP\nDESCRIPTION: Demonstrates how to use the take() method to return a new collection with a specified number of items, either from the beginning or end of the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(3);\n\n$chunk->all();\n\n// [0, 1, 2]\n\n$collection = new Collection([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(-2);\n\n$chunk->all();\n\n// [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Field in YAML\nDESCRIPTION: Demonstrates various ways to configure a dropdown field in YAML, including static options and dynamic options from a model method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n    default: published\n    options:\n        draft: Draft\n        published: Published\n        archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Appending Virtual Attributes to JSON Serialization in PHP\nDESCRIPTION: Demonstrates how to add virtual attributes to the model's JSON representation by adding them to the $appends property array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming Database Indexes\nDESCRIPTION: Method for renaming existing database indexes\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$table->renameIndex('from', 'to')\n```\n\n----------------------------------------\n\nTITLE: Defining Import Model in PHP\nDESCRIPTION: Example of an import model class that extends Backend\\Models\\ImportModel. Implements the importData method to process imported data and create new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    /**\n     * @var array The rules to be applied to the data.\n     */\n    public $rules = [];\n\n    public function importData($results, $sessionKey = null)\n    {\n        foreach ($results as $row => $data) {\n\n            try {\n                $subscriber = new Subscriber;\n                $subscriber->fill($data);\n                $subscriber->save();\n\n                $this->logCreated();\n            }\n            catch (\\Exception $ex) {\n                $this->logError($row, $ex->getMessage());\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tags from Post with Dynamic Property - PHP\nDESCRIPTION: Demonstrates how to access all tags for a post using the dynamic property approach. This leverages lazy loading to fetch related tags only when needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\nforeach ($post->tags as $tag) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Duplicate Values from Collections in PHP\nDESCRIPTION: The duplicates method retrieves and returns duplicate values from the collection. It can also check for duplicates in specific keys of arrays or objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['a', 'b', 'a', 'c', 'b']);\n\n$collection->duplicates();\n\n// [2 => 'a', 4 => 'b']\n\n$employees = new Collection([\n    ['email' => 'samantha@example.tld', 'position' => 'Developer'],\n    ['email' => 'john@example.tld', 'position' => 'Designer'],\n    ['email' => 'elaine@example.tld', 'position' => 'Developer'],\n])\n\n$employees->duplicates('position');\n\n// [2 => 'Developer']\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Job Push in PHP\nDESCRIPTION: Demonstrates how to push a new job onto the queue using Queue::push method with a class and data parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nQueue::push(SendEmail::class, ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Data Source Class in PHP\nDESCRIPTION: Demonstrates the basic structure of a report data source class extending ReportDataSourceBase. This class must implement fetchData method and register dimensions and metrics in the constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Db;\nuse Carbon\\Carbon;\nuse Backend\\Classes\\ReportMetric;\nuse Backend\\Classes\\ReportDimension;\nuse Backend\\Classes\\ReportDimensionField;\nuse Backend\\Classes\\ReportDataSourceBase;\nuse Backend\\Classes\\ReportFetchData;\nuse Backend\\Classes\\ReportFetchDataResult;\nuse Backend\\Classes\\ReportDataOrderRule;\nuse Backend\\Classes\\ReportDataPaginationParams;\nuse Backend\\Classes\\ReportDataQueryBuilder;\n\nclass MyReportDataSource extends ReportDataSourceBase\n{\n    public function __construct()\n    {\n        // Register dimensions and metrics here\n    }\n\n    protected function fetchData(ReportFetchData $data): ReportFetchDataResult\n    {\n        // Construct and return a ReportFetchDataResult object,\n        // or use the ReportDataQueryBuilder class to do the hard work.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Query Builder Results in PHP\nDESCRIPTION: Example showing how to paginate results from a database query using the paginate method on the query builder. This limits the results to 15 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Filtering Unique Items with unique() Method in PHP Collections\nDESCRIPTION: The unique() method returns all unique items in the collection. It can operate on simple values, or when dealing with arrays or objects, you can specify a key or provide a custom callback to determine uniqueness. It uses loose comparison by default.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 1, 2, 2, 3, 4, 2]);\n\n$unique = $collection->unique();\n\n$unique->values()->all();\n\n// [1, 2, 3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'iPhone 5', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n    ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n    ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n]);\n\n$unique = $collection->unique('brand');\n\n$unique->values()->all();\n\n/*\n    [\n        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$unique = $collection->unique(function ($item) {\n    return $item['brand'].$item['type'];\n});\n\n$unique->values()->all();\n\n/*\n    [\n        ['name' => 'iPhone 6', 'brand' => 'Apple', 'type' => 'phone'],\n        ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n        ['name' => 'Galaxy S6', 'brand' => 'Samsung', 'type' => 'phone'],\n        ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Deleting All Failed Jobs with Artisan Command in Bash\nDESCRIPTION: Artisan command to delete all failed jobs in the queue. This command flushes all failed jobs from the failed jobs table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:flush\n```\n\n----------------------------------------\n\nTITLE: Using whereHas for Conditional Relationship Queries in OctoberCMS\nDESCRIPTION: Example showing how to use whereHas method to add constraints to relationship existence queries. This retrieves posts with comments containing specific content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts with at least one comment containing words like foo%\\n$posts = Post::whereHas('comments', function ($query) {\\n    $query->where('content', 'like', 'foo%');\\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Defining the Inverse of a Many-to-Many Relationship (PHP)\nDESCRIPTION: Shows how to define the inverse of a many-to-many relationship on the related model, creating a bidirectional relationship between User and Role models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass Role extends Model\n{\n    public $belongsToMany = [\n        'users' => 'Acme\\Blog\\Models\\User'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Accessor in PHP Model\nDESCRIPTION: Example of creating a getter method to format the first_name attribute value when it's retrieved from the model. The accessor automatically capitalizes the first letter of the name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * Get the user's first name.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Collection Items in PHP\nDESCRIPTION: The each method iterates over the items in the collection and passes each item to a callback. The iteration can be stopped by returning false from the callback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$collection->each(function ($item, $key) {\n    //\n});\n\n$collection->each(function ($item, $key) {\n    if (/* some condition */) {\n        return false;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Property Access for Relationships\nDESCRIPTION: Shows how to access relationships as properties in October CMS models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->posts;\n```\n\n----------------------------------------\n\nTITLE: Defining Mutator Method in PHP Model\nDESCRIPTION: Shows how to create a setter mutator method that transforms the first_name attribute value before storage. The mutator converts the name to lowercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * setFirstNameAttribute writes to the `first_name` attribute\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Related Models in PHP\nDESCRIPTION: Examples of removing model relationships using remove and dissociate methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->remove($comment);\n\n$post->categories()->remove($category);\n\n$post->author()->dissociate();\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Validation Rule\nDESCRIPTION: Shows how to create a validation rule that accepts and processes parameters with custom message replacement.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass BetwixtRule\n{\n    /**\n     * validate between start and end parameters.\n     */\n    public function validate($attribute, $value, $params)\n    {\n        [$start, $end] = $params;\n\n        return strlen($value) > $start && strlen($value) < $end;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be between :start and :end.';\n    }\n\n    /**\n     * replace defines custom placeholder replacements.\n     * @return string\n     */\n    public function replace($message, $attribute, $rule, $params)\n    {\n        [$start, $end] = $params;\n\n        $message = str_replace(':start', $start, $message);\n\n        $message = str_replace(':end', $end, $message);\n\n        return $message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Error Handling in PHP\nDESCRIPTION: Demonstrates how to decrypt data using the Crypt facade's decrypt method with proper exception handling for invalid decryption attempts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/hash-crypt.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\n\ntry {\n    $decrypted = Crypt::decrypt($encryptedValue);\n}\ncatch (DecryptException $ex) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events (PHP)\nDESCRIPTION: Examples of how to handle both global and local events, showing the parameter structure for each type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Global\nEvent::listen('acme.blog.post.beforePost', function ($post, $param1, $param2) {\n    Log::info($post->name . 'posted. Parameters: ' . $param1 . ' ' . $param2);\n});\n\n// Local\n$post->bindEvent('post.beforePost', function ($param1, $param2) use ($post) {\n    Log::info($post->name . 'posted. Parameters: ' . $param1 . ' ' . $param2);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Content Field Class Structure in PHP\nDESCRIPTION: Basic structure of a content field class extending ContentFieldBase. It includes methods for defining config, form field, list column, filter scope, and extending model and database table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\ContentFields;\n\nuse Tailor\\Classes\\ContentFieldBase;\nuse October\\Contracts\\Element\\FormElement;\nuse October\\Contracts\\Element\\ListElement;\nuse October\\Contracts\\Element\\FilterElement;\n\nclass MyContentField extends ContentFieldBase\n{\n    public function defineConfig(array $config) {}\n\n    public function defineFormField(FormElement $form, $context = null) {}\n\n    public function defineListColumn(ListElement $list, $context = null) {}\n\n    public function defineFilterScope(FilterElement $filter, $context = null) {}\n\n    public function extendModelObject($model) {}\n\n    public function extendDatabaseTable($table) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing with Additional Column Updates in PHP\nDESCRIPTION: Demonstrates how to increment a column value while simultaneously updating other columns in the same operation. This allows for more efficient updates when multiple columns need modification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship Existence in PHP with OctoberCMS\nDESCRIPTION: Example showing how to query for posts that have at least one comment using the has() method. This demonstrates filtering model results based on relationship existence.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment...\\n$posts = Post::has('comments')->get();\n```\n\n----------------------------------------\n\nTITLE: Wildcard Event Listener\nDESCRIPTION: Example of using wildcard patterns to listen for multiple events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('foo.*', function($event, $params) {\n    // Handle the event...\n});\n```\n\n----------------------------------------\n\nTITLE: Widget Render Method Implementation\nDESCRIPTION: Shows how to implement the render() method in a widget class to produce widget markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    return $this->makePartial('list');\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Mapping Methods in PHP\nDESCRIPTION: Various mapping methods including map, mapInto, mapSpread, mapToGroups, and mapWithKeys for transforming collection items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$multiplied = $collection->map(function ($item, $key) {\n    return $item * 2;\n});\n```\n\n----------------------------------------\n\nTITLE: Manual File Import in PHP\nDESCRIPTION: Examples of manually importing files using importFile method, including handling uploaded files through the Input facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$importModel = new MyImportClass;\n\n$importModel->file_format = 'json';\n\n$importModel->importFile('/path/to/import/file.json');\n```\n\nLANGUAGE: php\nCODE:\n```\n$importModel->importFile(\n    Input::file('file')->getRealPath()\n);\n```\n\n----------------------------------------\n\nTITLE: Binding To The IoC Container in PHP\nDESCRIPTION: Demonstrates how to bind a type into the IoC container using a Closure callback that returns a new instance of FooBar.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('foo', function($app) {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Behavior with YAML\nDESCRIPTION: Example of a typical form behavior configuration file in YAML format, defining basic properties like name, form fields location, and model class along with page-specific settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config_form.yaml\nname: Blog Category\nform: $/acme/blog/models/post/fields.yaml\nmodelClass: Acme\\Blog\\Post\n\ncreate:\n    title: New Blog Post\n\nupdate:\n    title: Edit Blog Post\n\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Creating Named Routes in October CMS\nDESCRIPTION: Example of specifying a name for a route using the 'as' key when defining the route for easier URL generation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/profile', ['as' => 'profile', function () {\n    //\n}]);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Validation Rule Class\nDESCRIPTION: Shows how to create a custom validation rule class with validate and message methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass UppercaseRule\n{\n    /**\n     * validate determines if the validation rule passes.\n     * @param string $attribute\n     * @param mixed $value\n     * @param array $params\n     * @return bool\n     */\n    public function validate($attribute, $value, $params)\n    {\n        return strtoupper($value) === $value;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be uppercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Form Fields Based on Source Type in OctoberCMS (PHP)\nDESCRIPTION: This code snippet demonstrates how to dynamically filter form fields in OctoberCMS based on the 'source_type' of a User model. It uses the 'model.form.filterFields' event to show or hide specific fields depending on the selected source type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.form.filterFields', function ($formWidget, $fields, $context) use ($model) {\n        if ($model->source_type === 'http') {\n            $fields->source_url->hidden = false;\n            $fields->git_branch->hidden = true;\n        }\n        elseif ($model->source_type === 'git') {\n            $fields->source_url->hidden = false;\n            $fields->git_branch->hidden = false;\n        }\n        else {\n            $fields->source_url->hidden = true;\n            $fields->git_branch->hidden = true;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component in a Twig Template\nDESCRIPTION: This snippet shows how to render a component named 'demoTodo' in a Twig template using the component tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' %}\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Confirmation with Promise in JavaScript\nDESCRIPTION: This code demonstrates how to handle an AJAX confirmation message using a promise. It prevents the default behavior and resolves or rejects the promise based on user confirmation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:confirm-message', function(event) {\n    const { message, promise } = event.detail;\n\n    // Prevent default behavior\n    event.preventDefault();\n\n    // Handle promise\n    if (confirm(message)) {\n        promise.resolve();\n    }\n    else {\n        promise.reject();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Local Rule Object\nDESCRIPTION: Shows how to create a local rule object by implementing Laravel's Rule contract. This approach requires defining passes and message methods to validate input and provide error messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nclass LowercaseRule implements \\Illuminate\\Contracts\\Validation\\Rule\n{\n    /**\n     * passes checks if the rule is successful\n     * @param  string  $attribute\n     * @param  mixed  $value\n     * @return bool\n     */\n    public function passes($attribute, $value)\n    {\n        return strtolower($value) === $value;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be lowercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Hooks in OctoberCMS Scheduler\nDESCRIPTION: Example of using before and after hooks to execute code before and after a scheduled task runs. This allows for setup and cleanup operations around scheduled tasks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('emails:send')\n         ->daily()\n         ->before(function () {\n             // Task is about to start...\n         })\n         ->after(function () {\n             // Task is complete...\n         });\n```\n\n----------------------------------------\n\nTITLE: Defining AJAX Handlers in OctoberCMS Components\nDESCRIPTION: Demonstrates how to define an AJAX handler method within a component class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function onAddItem()\n{\n    $value1 = post('value1');\n    $value2 = post('value2');\n    $this->page['result'] = $value1 + $value2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cache RememberForever Method in PHP\nDESCRIPTION: Using rememberForever to retrieve an item from cache or store it permanently if it doesn't exist.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::rememberForever('users', function() {\n    return Db::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dropdown Lists\nDESCRIPTION: Example demonstrating how to generate a select dropdown with options using key-value pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('size', ['L' => 'Large', 'S' => 'Small']) ?>\n```\n\n----------------------------------------\n\nTITLE: Form Handling Example\nDESCRIPTION: Demonstrates form handling using both Twig templates for the form markup and PHP for processing the submission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ request: 'onHandleForm' }) }}\n    Please enter a string: <input type=\"text\" name=\"value\"/>\n    <input type=\"submit\" value=\"Submit me!\"/>\n{{ form_close() }}\n<p>Last submitted value: {{ lastValue }}</p>\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onHandleForm()\n{\n    $this['lastValue'] = post('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Behavior Implementation\nDESCRIPTION: Example showing how to implement behaviors in a class by extending Extendable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        \\October\\Rain\\UtilityFunctions::class,\n        \\October\\Rain\\DeferredBinding::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Load More Pagination Implementation\nDESCRIPTION: Demonstrates implementation of a load more button pattern using AJAX and self-updating partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set posts = blog.paginate(10) %}\n\n<div>\n    {% for post in posts %}\n        <h2>{{ post.title }}</h2>\n    {% endfor %}\n</div>\n\n{% if posts.hasMorePages %}\n    <button\n        data-request=\"onAjax\"\n        data-request-update=\"{ _self: '@' }\"\n        data-request-success=\"this.remove()\"\n        data-request-data=\"{ page: {{ posts.currentPage + 1 }} }\"\n        data-attach-loading>\n        Load More\n    </button>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Update Button Implementation\nDESCRIPTION: Examples of implementing update buttons that refresh partial content using data attributes API. Shows usage of _self reference and content append/prepend symbols.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/ajax-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefresh\"\n    data-request-update=\"{ contact-form: true }\">\n    Refresh\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefresh\"\n    data-request-update=\"{ _self: true }\">\n    Refresh\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefresh\"\n    data-request-update=\"{ _self: '@' }\">\n    Append\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using beforeUpdate Callback\nDESCRIPTION: Demonstrates how to execute custom code before page elements are updated from the AJAX response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    update: { calcresult: '.result' },\n    beforeUpdate: function() { /* do something */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework with Extra Features in October CMS\nDESCRIPTION: Demonstrates how to include the framework with extras parameter for additional features like form validation and loading indicators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras %}\n```\n\n----------------------------------------\n\nTITLE: Using html_limit() to Truncate HTML Content\nDESCRIPTION: Shows how to limit HTML content to a specific length while maintaining proper tag handling and structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<p>Post content...</p>'|html_limit(100) }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Has Many Through Relationship Keys in OctoberCMS Model (PHP)\nDESCRIPTION: Shows how to customize the foreign keys used in a has-many-through relationship definition. This allows for non-standard key names to be used in the relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic $hasManyThrough = [\n    'posts' => [\n        \\Acme\\Blog\\Models\\Post::class,\n        'key' => 'my_country_id',\n        'through' => \\Acme\\Blog\\Models\\User::class,\n        'throughKey' => 'my_user_id',\n        'otherKey' => 'my_id',\n        'secondOtherKey' => 'my_country_id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereNotIn Method in PHP\nDESCRIPTION: The whereNotIn method filters a collection by excluding items where a specified key's value is in a given array. It uses loose comparisons for value checking.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereNotIn('price', [150, 200]);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Chair', 'price' => 100],\n        ['product' => 'Door', 'price' => 100],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Basic List Behavior Configuration (YAML)\nDESCRIPTION: Example configuration file for the ListController behavior. The file defines the title, column definitions, model class, and URL for record links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\ntitle: Blog Posts\nlist: ~/plugins/acme/blog/models/post/columns.yaml\nmodelClass: Acme\\Blog\\Models\\Post\nrecordUrl: acme/blog/posts/update/:id\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Example Using Validator Class in PHP\nDESCRIPTION: Shows how to create a basic validator instance with a single validation rule. The example validates that a 'name' field is both required and has a minimum length of 5 characters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(\n    ['name' => 'Joe'],\n    ['name' => 'required|min:5']\n);\n```\n\n----------------------------------------\n\nTITLE: Using Basic Where Clauses in PHP\nDESCRIPTION: Demonstrates various ways to use the where method for filtering query results. Includes examples of equality, comparison, and LIKE operators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n\n$users = Db::table('users')->where('votes', 100)->get();\n\n$users = Db::table('users')\n    ->where('votes', '>=', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->where('votes', '<>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->where('name', 'like', 'T%')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from the Session with this.session in Twig\nDESCRIPTION: Shows how to retrieve a value from the session using the get method with a specific key. This returns the stored value if it exists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-session.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.get('key') }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Foreign Keys in One-to-One Relationships in PHP\nDESCRIPTION: Demonstrates how to customize the foreign key and local key in a one-to-one relationship definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic $hasOne = [\n    'phone' => [\\Acme\\Blog\\Models\\Phone::class, 'key' => 'my_user_id', 'otherKey' => 'my_id']\n];\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML in PHP\nDESCRIPTION: Shows how to use the YAML facade to parse YAML syntax into a PHP array and vice versa.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$array = Yaml::parse($yamlString);\n\n$array = Yaml::parseFile($filePath);\n\n$yamlString = Yaml::render($array);\n```\n\n----------------------------------------\n\nTITLE: Extending a Model with a Relationship in PHP\nDESCRIPTION: Example of extending the Backend\\Models\\User model to include a has-one relationship with a Profile model using the static extend method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\Models\\User::extend(function($model) {\n    $model->hasOne['profile'] = ['Acme\\Demo\\Models\\Profile', 'key' => 'user_id'];\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Session in PHP\nDESCRIPTION: Shows different ways to retrieve data from the session, including with default values and closures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::get('key');\n\n$value = Session::get('key', 'default');\n\n$value = Session::get('key', function() { return 'default'; });\n```\n\n----------------------------------------\n\nTITLE: Sending Mail with Variables\nDESCRIPTION: Example showing how to send an email with variables and configure the recipient and subject.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// These variables are available inside the message as Twig\n$vars = ['name' => 'Joe', 'user' => 'Mary'];\n\nMail::send('acme.blog:message', $vars, function($message) {\n    $message->to('admin@domain.tld', 'Admin Person');\n    $message->subject('This is a reminder');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Column Definition in YAML\nDESCRIPTION: Demonstrates the basic structure for defining a list column with a specific type in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    mycolumn:\n        type: number\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Including Related Record Counts - PHP\nDESCRIPTION: Shows how to include the count of related records as a dynamic property on the model using withCount, useful for displaying counts without additional queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$users = User::withCount('roles')->get();\n\nforeach ($users as $user) {\n    echo $user->roles_count;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Primary Key in PHP using OctoberCMS\nDESCRIPTION: This snippet demonstrates how to delete models by their primary keys using the destroy method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nFlight::destroy(1);\n\nFlight::destroy([1, 2, 3]);\n\nFlight::destroy(1, 2, 3);\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule Objects in Models\nDESCRIPTION: Shows how to use rule objects directly in models by overriding the beforeValidate method. This allows for dynamic rule assignment based on model state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeValidate()\n{\n    $this->rules['name'] = ['required', new LowercaseRule];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Forms (PHP)\nDESCRIPTION: Example of how to extend a backend form by listening to the form.extendFields event to add or remove fields conditionally for a specific controller and model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    [...]\n\n    public function boot()\n    {\n        // Extend all backend form usage\n        Event::listen('backend.form.extendFields', function($widget) {\n            // Only apply this listener when the Users controller is being used\n            if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n                return;\n            }\n\n            // Only apply this listener when the User model is being modified\n            if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n                return;\n            }\n\n            // Only apply this listener when the Form widget in question is a root-level\n            // Form widget (not a repeater, nestedform, etc)\n            if ($widget->isNested) {\n                return;\n            }\n\n            // Add an extra birthday field\n            $widget->addFields([\n                'birthday' => [\n                    'label'   => 'Birthday',\n                    'comment' => 'Select the users birthday',\n                    'type'    => 'datepicker'\n                ]\n            ]);\n\n            // Remove a Surname field\n            $widget->removeField('surname');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown in Twig Templates\nDESCRIPTION: Shows how to use the 'md' filter to parse Markdown syntax in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\n----------------------------------------\n\nTITLE: Checking Password Rehash Requirements in PHP\nDESCRIPTION: Demonstrates how to check if a password needs to be rehashed due to work factor changes using the Hash facade's needsRehash method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/hash-crypt.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::needsRehash($hashed)) {\n    $hashed = Hash::make('plain-text');\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Component with Custom Events\nDESCRIPTION: Example of declaring and firing both local and global events from within a component, allowing other code to hook into the component's functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass Topic extends ComponentBase\n{\n    public function onPost()\n    {\n        // ...\n\n        /*\n         * Extensibility\n         */\n        $this->fireEvent('topic.post', [$post, $postUrl]);\n        Event::fire('rainlab.forum.topic.post', [$this, $post, $postUrl]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Model Records\nDESCRIPTION: Methods for deleting model instances and bulk deletion operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::find(1);\n$flight->delete();\n```\n\n----------------------------------------\n\nTITLE: Sending Additional Data with AJAX Request\nDESCRIPTION: Shows how to include extra data when making an AJAX request to a handler, beyond the standard form data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', { data: { value: 55 } })\n```\n\n----------------------------------------\n\nTITLE: Using Component Unique Identifiers in Twig\nDESCRIPTION: Examples showing how to access and use the unique identifier of component instances when multiple instances are used on the same page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_24\n\nLANGUAGE: twig\nCODE:\n```\n{{__SELF__.id}}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<!-- ID: demoTodo527c532e9161b -->\n{% component 'demoTodo' %}\n\n<!-- ID: demoTodo527c532ec4c33 -->\n{% component 'demoTodo' %}\n```\n\n----------------------------------------\n\nTITLE: Array Casting Configuration in PHP Model\nDESCRIPTION: Shows how to set up array casting for JSON-serialized fields using the $casts property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * @var array casts attributes to native types.\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Event Emitter Trait in PHP\nDESCRIPTION: Demonstrates how to use the Emitter trait to implement a local event system within a class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass UserManager\n{\n    use \\October\\Rain\\Support\\Traits\\Emitter;\n}\n\n$manager = new UserManager;\n$manager->bindEvent('user.beforeRegister', function($user) {\n    // Check if the $user is a spammer\n});\n\n$manager = new UserManager;\n$manager->fireEvent('user.beforeRegister', [$user]);\n```\n\n----------------------------------------\n\nTITLE: File Download Response\nDESCRIPTION: Demonstrates various ways to generate file download responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::download($pathToFile);\n\nreturn Response::download($pathToFile, $name, $headers);\n\nreturn Response::download($pathToFile)->deleteFileAfterSend(true);\n```\n\n----------------------------------------\n\nTITLE: Using Different Logging Levels in PHP\nDESCRIPTION: Shows the eight logging levels defined in RFC 5424 that are available in October CMS: emergency, alert, critical, error, warning, notice, info, and debug.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/log.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nLog::emergency($error);\nLog::alert($error);\nLog::critical($error);\nLog::error($error);\nLog::warning($error);\nLog::notice($error);\nLog::info($error);\nLog::debug($error);\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Worker Cron Job in October CMS\nDESCRIPTION: Sets up a cron job that processes a single queued job at a time using the database queue driver. This runs every minute and processes the first available job in the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /october/artisan queue:work --once >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Response in October CMS\nDESCRIPTION: Shows examples of how to override responses in backend controllers, including setting response headers, status codes, and entire responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/controllers-ajax.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\\Author\\Plugin\\Controllers\\SomeController::extend(function($controller) {\n    $controller->setResponseHeader('Test-Header', 'Test');\n});\n\n$this->setResponseHeader('Test-Header', 'Test');\n\n$this->setStatusCode(404);\n\n$this->setResponse('Page Not Found');\n\n$this->setResponse(Response::make(...));\n```\n\n----------------------------------------\n\nTITLE: Basic Soft Component Implementation\nDESCRIPTION: Demonstrates the basic syntax for implementing a soft component using the @ prefix in a page definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_8\n\nLANGUAGE: markup\nCODE:\n```\nurl = \"mypage\"\n\n[@channel]\n==\n{% component \"channel\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Error Messages in PHP Models\nDESCRIPTION: Shows how to define custom error messages for validation rules in an October CMS model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $customMessages = [\n        'required' => 'The :attribute field is required.',\n        ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Updating AJAX Partial with Twig\nDESCRIPTION: Shows how to use the ajaxPartial tag for self-updating partial content\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/update-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'mytime' %}\n```\n\n----------------------------------------\n\nTITLE: Running Raw SQL Queries in OctoberCMS\nDESCRIPTION: Executes a raw SQL query with parameter binding for protection against SQL injection. This example selects all records from 'sometable' where the name equals 'Charles'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nDb::select('select * from sometable where name = :name', ['name' => 'Charles']);\n```\n\n----------------------------------------\n\nTITLE: Using Named Parameter Bindings in SQL Queries\nDESCRIPTION: Demonstrates using named parameters in SQL queries instead of positional parameters, making queries more readable and maintainable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$results = Db::select('select * from users where id = :id', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Component Initialization Method Implementation\nDESCRIPTION: Example of overriding the init method in a component class to handle initialization logic before the page execution lifecycle begins.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function init()\n{\n    $this->addComponent('Acme\\Blog\\Components\\BlogPosts', 'blogPosts');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Query Scopes\nDESCRIPTION: Shows how to create a query scope that accepts parameters. Implements scopeApplyType method that filters users by a specified type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Scope a query to only include users of a given type.\n     */\n    public function scopeApplyType($query, $type)\n    {\n        return $query->where('type', $type);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queuing Events in PHP\nDESCRIPTION: Demonstrates how to queue events for later processing using Event::queue and Event::flush methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nEvent::queue('foo', [$user]);\n\nEvent::flush('foo');\n```\n\n----------------------------------------\n\nTITLE: Form Fields Definition in YAML\nDESCRIPTION: Example of defining form fields in a YAML configuration file, showing fields in the outside area with labels and descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# fields.yaml\nfields:\n    blog_title:\n        label: Blog Title\n        description: The title for this blog\n\n    published_at:\n        label: Published date\n        description: When this blog post was published\n        type: datepicker\n\n    # [...]\n\ntabs:\n    fields:\n        # [...]\n\nsecondaryTabs:\n    fields:\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Attaching Models in Many-to-Many Relationships in OctoberCMS\nDESCRIPTION: Example showing how to attach a role to a user in a many-to-many relationship. This creates entries in the pivot table to link the models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\\n\\n$user->roles()->attach($roleId);\n```\n\n----------------------------------------\n\nTITLE: Implementing Hashable Attributes in PHP Models\nDESCRIPTION: Shows how to use the Hashable trait to automatically hash sensitive attributes when they are set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Hashable;\n\n    protected $hashable = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Twig Templates\nDESCRIPTION: Shows how to access and display validation errors in Twig templates. The errors variable is automatically available in all views when validation errors exist in the session.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Practical Example of sortBy() Method\nDESCRIPTION: Practical demonstration of using sortBy() to sort a collection of user data by age and then loop through to display the names in the sorted order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n// Output: John David\n{% set data = [{'name': 'David', 'age': 31}, {'name': 'John', 'age': 28}] %}\n\n{% for item in collect(data).sortBy('age') %}\n    {{ item.name }}&nbsp;\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Truncating a Database Table in PHP\nDESCRIPTION: Shows how to truncate a database table using the truncate method. This removes all rows and resets the auto-incrementing ID to zero, effectively emptying the table completely.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Generating File Download Response in PHP\nDESCRIPTION: Shows different ways to generate a file download response, including specifying the filename and additional headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::download($pathToFile);\n\nreturn Response::download($pathToFile, $name, $headers);\n\nreturn Response::download($pathToFile)->deleteFileAfterSend(true);\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Class in PHP\nDESCRIPTION: Illustrates how to create an event subscriber class that can subscribe to multiple events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass UserEventHandler\n{\n    public function subscribe($events)\n    {\n        $events->listen('auth.login', [static::class, 'userLogin']);\n\n        $events->listen('auth.logout', [static::class, 'userLogout']);\n    }\n\n    public function userLogin($event)\n    {\n        // ...\n    }\n\n    public function userLogout($event)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queueing Mail Messages in PHP\nDESCRIPTION: Demonstrates how to queue email messages for background sending in October CMS using the Mail::queue method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nMail::queue('acme.blog:welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Chunking Large Results in October CMS PHP\nDESCRIPTION: Demonstrates how to process large numbers of database records in chunks to conserve memory, by providing a callback function to process each chunk of results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nFlight::chunk(200, function ($flights) {\n    foreach ($flights as $flight) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Fields Based on Model Data in PHP\nDESCRIPTION: Demonstrates how to override the filterFields method to manipulate field visibility based on model data. This example shows/hides URL and branch fields depending on the selected source type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($this->source_type === 'http') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = true;\n    }\n    elseif ($this->source_type === 'git') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = false;\n    }\n    else {\n        $fields->source_url->hidden = true;\n        $fields->git_branch->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text and HTML Emails\nDESCRIPTION: Examples of sending emails with both HTML and plain text versions, or plain text only using array syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nMail::send(['acme.blog::mail.html', 'acme.blog::mail.text'], $data, $callback);\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Collection in PHP\nDESCRIPTION: This snippet shows how to create a new Collection instance by passing an array to its constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$collection = new October\\Rain\\Support\\Collection([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Delayed Message Queueing in PHP\nDESCRIPTION: Shows how to delay the delivery of queued email messages in October CMS using the Mail::later method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nMail::later(5, 'acme.blog:welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Finding First Element with Given Key/Value Pair in PHP Collections\nDESCRIPTION: The firstWhere method returns the first element in the collection with the given key/value pair. It can also use operators for comparison.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Regena', 'age' => null],\n    ['name' => 'Linda', 'age' => 14],\n    ['name' => 'Diego', 'age' => 23],\n    ['name' => 'Linda', 'age' => 84],\n]);\n\n$collection->firstWhere('name', 'Linda');\n\n// ['name' => 'Linda', 'age' => 14]\n\n$collection->firstWhere('age', '>=', 18);\n\n// ['name' => 'Diego', 'age' => 23]\n\n$collection->firstWhere('age');\n\n// ['name' => 'Linda', 'age' => 14]\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Disks with Storage Facade (PHP)\nDESCRIPTION: Examples showing how to access different disks using the disk method on the Storage facade, and how to chain methods for execution on specific disks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$disk = Storage::disk('s3');\n\n$contents = Storage::disk('local')->get('file.jpg')\n```\n\n----------------------------------------\n\nTITLE: Creating Import Model in PHP\nDESCRIPTION: Example of creating an import model class that extends Backend\\Models\\ImportModel. Shows implementation of importData method and logging functions for handling subscriber data import.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    /**\n     * @var array rules to be applied to the data.\n     */\n    public $rules = [];\n\n    public function importData($results, $sessionKey = null)\n    {\n        foreach ($results as $row => $data) {\n\n            try {\n                $subscriber = new Subscriber;\n                $subscriber->fill($data);\n                $subscriber->save();\n\n                $this->logCreated();\n            }\n            catch (Exception $ex) {\n                $this->logError($row, $ex->getMessage());\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs-to-Many Relation with Basic View\nDESCRIPTION: YAML configuration for a belongs-to-many relation named 'roles', defining the label and specifying view and manage lists along with a pivot form configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n    pivot:\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Fired Event Name in October CMS - PHP\nDESCRIPTION: Example of determining which specific event was fired within a wildcard event listener using Event::firing method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('foo.*', function($event, $params) {\n    if (Event::firing() === 'foo.bar') {\n        // ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Keys in Has Many Through Relation\nDESCRIPTION: Example of customizing foreign key names in a Has Many Through relationship definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic $hasManyThrough = [\n    'posts' => [\n        \\Acme\\Blog\\Models\\Post::class,\n        'key' => 'my_country_id',\n        'through' => \\Acme\\Blog\\Models\\User::class,\n        'throughKey' => 'my_user_id',\n        'otherKey' => 'my_id',\n        'secondOtherKey' => 'my_country_id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs to Many Relation with Pivot Data in OctoberCMS YAML\nDESCRIPTION: Example YAML configuration for a Belongs to Many relation with pivot data between User and Roles. It includes pivot form configuration for additional data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n    pivot:\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Element from Collections in PHP\nDESCRIPTION: The first method returns the first element in the collection that passes a given truth test. If called without arguments, it returns the first element of the collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4])->first(function ($value, $key) {\n    return $value > 2;\n});\n\n// 3\n\nnew Collection([1, 2, 3, 4])->first();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Model Form Binding\nDESCRIPTION: Shows how to bind a model to a form for automatic value population.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::model($user, ['id' => 'userForm']) ?>\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relationship Definition\nDESCRIPTION: Example of defining a one-to-one relationship between User and Phone models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    public $hasOne = [\n        'phone' => \\Acme\\Blog\\Models\\Phone::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Request Input in October CMS\nDESCRIPTION: Examples of filtering request input to get only specific fields or exclude certain fields from the input data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::only('username', 'password');\n\n$input = Input::except('credit_card');\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Instances of a Component\nDESCRIPTION: Shows how to use multiple instances of the same component on a page using aliases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo todoA]\nmaxItems = 10\n[demoTodo todoB]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Conditional Processing with when() Method in PHP Collections\nDESCRIPTION: The when() method executes a given callback when the first argument evaluates to true. It provides a readable way to implement conditional logic when working with collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$collection->when(true, function ($collection) {\n    return $collection->push(4);\n});\n\n$collection->when(false, function ($collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Creating Form Widget with October CMS Artisan Command\nDESCRIPTION: Generates a backend form widget with view and asset files. Requires plugin identifier and widget class name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:formwidget Acme.Blog CategorySelector\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Action Method in PHP for October CMS\nDESCRIPTION: Shows how to override a controller action while still calling the FormController behavior's implementation, allowing custom logic before or after the standard form processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\npublic function update($recordId, $context = null)\n{\n    //\n    // Do any custom code here\n    //\n\n    // Call the FormController behavior update() method\n    return $this->asExtension('FormController')->update($recordId, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Model-based Validation for Number Fields in October CMS\nDESCRIPTION: Implementing server-side validation for a number field using the $rules property in an October CMS model. This applies the numeric validation rule to ensure the input is a valid number.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-number.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic $rules = [\n    'your_age' => ['numeric'],\n];\n```\n\n----------------------------------------\n\nTITLE: Overriding Form Save Data in PHP for October CMS\nDESCRIPTION: This PHP code snippet shows how to override the form save data by implementing the formBeforeSave method and using formSetSaveValue to change field values before saving in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic function formBeforeSave($model)\n{\n    // When locale dropdown is set to \"custom\", override with the _custom_locale text field\n    if (post('MyModel[locale]') === 'custom') {\n        $this->formSetSaveValue('locale', post('MyModel[_custom_locale]'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Relationship in Book Model - PHP\nDESCRIPTION: Demonstrates defining a belongs-to relationship where a Book belongs to an Author using the $belongsTo property on the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nclass Book extends Model\n{\n    public $belongsTo = [\n        'author' => \\Acme\\Blog\\Models\\Author::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query in PHP\nDESCRIPTION: Demonstrates how to perform a query using plain SQL with the Db::select method. This method allows for custom SQL queries with parameter binding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nDb::select('select * from sometable where name = :name', ['name' => 'Charles']);\n```\n\n----------------------------------------\n\nTITLE: Extending Models in PHP for October CMS\nDESCRIPTION: This snippet demonstrates how to extend models in October CMS using the static extend method. It adds a hasOne relationship to the Backend\\Models\\User model, referencing the Acme\\Demo\\Models\\Profile model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\Models\\User::extend(function($model) {\n    $model->hasOne['profile'] = ['Acme\\Demo\\Models\\Profile', 'key' => 'user_id'];\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Event in October CMS - PHP\nDESCRIPTION: Basic example of subscribing to an authentication login event, allowing you to update a user's last login date when they sign in.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($user) {\n    $user->last_login = new DateTime;\n    $user->save();\n});\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Events with JavaScript\nDESCRIPTION: Shows how to hook into AJAX events to detect when requests start and end using JavaScript event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nformElement.addEventListener('ajax:promise', function() {\n    // A new request has started\n});\n\nformElement.addEventListener('ajax:always', function() {\n    // A request has ended\n});\n```\n\n----------------------------------------\n\nTITLE: Using the only() Method in PHP Collections\nDESCRIPTION: The only method returns a new collection containing only the items with the specified keys from the original collection. It's useful for extracting specific fields from a dataset.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'name' => 'Desk', 'price' => 100, 'discount' => false]);\n\n$filtered = $collection->only(['product_id', 'name']);\n\n$filtered->all();\n\n// ['product_id' => 1, 'name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Registering Package Service Providers and Aliases in PHP\nDESCRIPTION: Implementation of the register() method to manually register Laravel package service providers and aliases in an October CMS plugin. This ensures the package functionality is properly initialized.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function register()\n{\n    // Register the aliases provided by the packages used by your plugin\n    App::registerClassAlias('Purifier', \\Mews\\Purifier\\Facades\\Purifier::class);\n\n    // Register the service providers provided by the packages used by your plugin\n    App::register(\\Mews\\Purifier\\PurifierServiceProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Belongs-To Relation Configuration in OctoberCMS\nDESCRIPTION: YAML configuration for a belongs-to relationship (phone belonging to a person). Includes view form and toolbar buttons for linking/unlinking records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\nperson:\n    label: ‰∫∫Âëò\n    view:\n        form: $/acme/user/models/person/fields.yaml\n        toolbarButtons: link|unlink\n    manage:\n        form: $/acme/user/models/person/fields.yaml\n        list: $/acme/user/models/person/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Validating File Uploads in PHP\nDESCRIPTION: PHP code that demonstrates validating uploaded files using October CMS's Request facade. It checks that files are valid images and under 1MB in size for both single and multiple file uploads.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onUploadFiles()\n{\n    Request::validate([\n        'single_file' => 'required|image|max:1024',\n        'multi_file.*' => 'required|image|max:1024',\n    ]);\n\n    Flash::success('Files are valid!');\n}\n```\n\n----------------------------------------\n\nTITLE: Processing DataFeed Results in PHP\nDESCRIPTION: Shows how to process the results from a DataFeed by checking the tag_name attribute to differentiate between record types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nforeach ($results as $result) {\n\n    if ($result->tag_name == 'post')\n        echo \"New Blog Post: \" . $record->title;\n\n    elseif ($result->tag_name == 'comment')\n        echo \"New Comment: \" . $record->content;\n\n    elseif ($result->tag_name == 'user')\n        echo \"New User: \" . $record->name;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Error Messages from Validator in PHP\nDESCRIPTION: Demonstrates how to retrieve all error messages from a validator after validation has failed. Returns a MessageBag instance containing all validation error messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$messages = $validator->messages();\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Columns in MySQL or PostgreSQL with PHP\nDESCRIPTION: Demonstrates how to update values within a JSON column using the -> syntax. This operation is supported on MySQL 5.7+ and PostgreSQL 9.5+ and allows for updating specific keys in a JSON object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n    ->where('id', 1)\n    ->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Listening for Database Queries\nDESCRIPTION: Demonstrates setting up a listener to capture all SQL queries executed by the application, useful for debugging and logging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nDb::listen(function($sql, $bindings, $time) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Conditions\nDESCRIPTION: Shows how to delete records that match specific conditions by adding where clauses before calling the delete method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '<', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Extending Media Manager with Global Event Listener\nDESCRIPTION: Shows how to listen for Media Manager events globally using the Event facade, with each event being prefixed with 'media.'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('media.file.rename', function($widget, $originalPath, $newPath) {\n    // Update custom references to path here\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Email Attachments\nDESCRIPTION: Examples of attaching files to emails including specifying display names and MIME types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog:welcome', $data, function ($message) {\n    //\n    $message->attach($pathToFile);\n});\n\n$message->attach($pathToFile, ['as' => $display, 'mime' => $mime]);\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions\nDESCRIPTION: Demonstrates various aggregate methods available in the query builder such as count, max, min, avg, and sum for performing calculations on database values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n\n$price = Db::table('orders')->max('price');\n```\n\n----------------------------------------\n\nTITLE: Registering Form Widgets in the Plugin Registration File\nDESCRIPTION: Shows how to register form widgets in the plugin registration file by implementing the registerFormWidgets method. This maps widget classes to their short codes for use in form field definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerFormWidgets()\n{\n    return [\n        \\Backend\\FormWidgets\\ColorPicker::class => 'colorpicker',\n        \\Backend\\FormWidgets\\DatePicker::class => 'datepicker'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Joins in PHP Queries\nDESCRIPTION: Demonstrates how to perform various types of joins (inner join, left join, right join, cross join) using the query builder. Shows examples of joining multiple tables and specifying join conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->join('contacts', 'users.id', '=', 'contacts.user_id')\n    ->join('orders', 'users.id', '=', 'orders.user_id')\n    ->select('users.*', 'contacts.phone', 'orders.price')\n    ->get();\n\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n\n$users = Db::table('sizes')\n    ->crossJoin('colors')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Reading from a Settings Model in PHP\nDESCRIPTION: This snippet demonstrates how to read values from a settings model using the static 'get' method and by accessing properties directly after instantiating the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Outputs: ABCD\necho UserSetting::instance()->api_key;\n\n// Get a single value\necho UserSetting::get('api_key');\n\n// Get a value and return a default value if it doesn't exist\necho UserSetting::get('is_activated', true);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Orphaned Bindings in October CMS (PHP)\nDESCRIPTION: This snippet demonstrates how to destroy all bindings that have not been committed and are older than 1 day using the DeferredBinding model in October CMS. It's noted that October CMS automatically destroys deferred bindings older than 5 days when a backend user logs in.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nOctober\\Rain\\Database\\Models\\DeferredBinding::cleanUp(1);\n```\n\n----------------------------------------\n\nTITLE: Extending Protected Properties in PHP for October CMS Model\nDESCRIPTION: This snippet demonstrates various methods to extend protected model properties in October CMS. It shows how to add cast attributes, date attributes, fillable fields, and jsonable fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\Models\\User::extend(function($model) {\n    // Add cast attributes\n    $model->addCasts([\n        'some_extended_field' => 'int',\n    ]);\n\n    // Add a date attribute\n    $model->addDateAttribute('updated_at');\n\n    // Adds fillable or jsonable fields\n    $model->addFillable('first_name');\n    $model->addJsonable('some_data');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Backend User in October CMS\nDESCRIPTION: Demonstrates how to register a new administrator user account using the BackendAuth facade. Shows required fields like name, login, email and password.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = BackendAuth::register([\n    'first_name' => 'Some',\n    'last_name' => 'User',\n    'login' => 'someuser',\n    'email' => 'some@website.tld',\n    'password' => 'changeme',\n    'password_confirmation' => 'changeme'\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Single Entry Blueprint in YAML\nDESCRIPTION: This example demonstrates how to create a single entry blueprint for a homepage. It includes a welcome message field and uses the 'single' type to ensure only one instance exists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Homepage\ntype: single\nname: Homepage Content\n\nfields:\n    welcome_message:\n        label: Welcome Message\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Defining Form Fields in YAML\nDESCRIPTION: Example of defining form fields in a YAML configuration file. It shows how to define fields in the outside area, primary tabs, and secondary tabs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Form Field Definitions\n# ===================================\n\nfields:\n    blog_title:\n        label: Blog Title\n        description: The title for this blog\n\n    published_at:\n        label: Published date\n        description: When this blog post was published\n        type: datepicker\n\n    # [...]\n\ntabs:\n    fields:\n        # [...]\n\nsecondaryTabs:\n    fields:\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Instance in October CMS Control\nDESCRIPTION: This snippet shows how to create a Vue instance within an October CMS control. It initializes a Vue instance in the connect method and destroys it in the disconnect method. The control includes a button that triggers a greeting alert when clicked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"my-vue-control\">\n    <div data-vue-template>\n        <button @click=\"greet\">Greet</button>\n    </div>\n</div>\n\n<script>\noc.registerControl('my-vue-control', class extends oc.ControlBase {\n    connect() {\n        this.vm = new Vue({\n            el: this.element.querySelector('[data-vue-template]'),\n            data: {\n                name: 'October CMS'\n            },\n            methods: {\n                greet: this.greet\n            }\n        });\n    }\n\n    disconnect() {\n        this.vm.$destroy();\n    }\n\n    greet(event) {\n        alert('Hello ' + this.name + '!')\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Deferred Binding\nDESCRIPTION: Demonstrates how to implement deferred binding for postponing model relationship associations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment;\n$comment->content = \"Hello world!\";\n$comment->save();\n\n$post = new Post;\n$post->comments()->add($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Making Basic GET Request with PHP HTTP Client\nDESCRIPTION: Demonstrates how to make a basic GET request using the Http class to fetch data from a URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::get('https://octobercms.com');\n```\n\n----------------------------------------\n\nTITLE: Handling Returned Data with Attributes API\nDESCRIPTION: Shows how to access data returned from an AJAX handler using the data attributes API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onHandleForm\" data-request-success=\"console.log(data)\">\n```\n\n----------------------------------------\n\nTITLE: Using Option Shortcuts in Artisan Command\nDESCRIPTION: Demonstrates how to call a command using option shortcuts. Shortcuts are prefixed with a single hyphen and don't use equal signs to supply values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan mail:send 1 -Qdefault\n```\n\n----------------------------------------\n\nTITLE: Converting Paginator to JSON in a Route\nDESCRIPTION: Example showing how to return a paginator instance from a route, which will automatically be converted to JSON for API responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::paginate();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Layout Name in Twig\nDESCRIPTION: Demonstrates how to retrieve the layout name used by the current page using the this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.page.layout }}\n```\n\n----------------------------------------\n\nTITLE: Plugin Directory Structure for Updates in October CMS\nDESCRIPTION: Illustrates the typical directory structure for plugin updates, including the version.yaml file and migration scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/updates.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugins/\n  author/\n    myplugin/\n      updates/                      <=== Updates directory\n        version.yaml                <=== Plugin version file\n        create_tables.php           <=== Database scripts\n        seed_the_database.php       <=== Migration file\n        create_another_table.php    <=== Migration file\n```\n\n----------------------------------------\n\nTITLE: Handling Page Render Events in Turbo Router using JavaScript\nDESCRIPTION: Shows how to use the 'render' event handler to execute code every time the page loads or updates, including AJAX updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('render', function() {\n    // Page has rendered something new\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Dialog to Delete Button in HTML\nDESCRIPTION: This example shows how to add a confirmation dialog to a delete button before sending an AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form ... >\n    ...\n    <button data-request=\"onDelete\" data-request-confirm=\"Are you sure?\">Delete</button>\n```\n\n----------------------------------------\n\nTITLE: Making AJAX Requests Without Form Element\nDESCRIPTION: Demonstrates using oc.ajax method to execute AJAX requests without requiring a form element as the context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\noc.ajax('onCalculate', {\n    success: function() {\n        console.log('Finished!');\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Order in October CMS Sortable Models\nDESCRIPTION: Demonstrates how to set the sort order for single or multiple records using the setSortableOrder method. This can update a single model's order or multiple models at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Sets the order of the user to 1...\n$user->setSortableOrder($user->id, 1);\n\n// Sets the order of records 1, 2, 3 to 3, 2, 1 respectively...\n$user->setSortableOrder([1, 2, 3], [3, 2, 1]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with env() in PHP\nDESCRIPTION: Demonstrates the PHP equivalent of using the env() function to access the 'APP_ENV' environment variable, with a default value of 'production' if the variable is not set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/config.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?= env('APP_ENV', 'production') ?>\n```\n\n----------------------------------------\n\nTITLE: Basic String Response in CMS Method\nDESCRIPTION: Demonstrates returning a simple string response from a CMS page method that will halt the process and display the string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onStart()\n{\n    return 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Form Field in Content Field Class\nDESCRIPTION: Implementation of the defineFormField method to specify how the content field should appear in a form. It uses the addFormField method to create the field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineFormField(FormElement $form, $context = null)\n{\n    $form->addFormField($this->fieldName, $this->label)->useConfig($this->config);\n}\n```\n\n----------------------------------------\n\nTITLE: Using trace_log() Debugging Helper in PHP\nDESCRIPTION: The trace_log function writes a trace message to the log file. It supports passing exceptions, arrays, objects, and multiple arguments to trace multiple messages, making it useful for debugging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\ntrace_log('This code has passed...');\n\ntrace_log($exception);\n\ntrace_log($array);\n\ntrace_log($object);\n\ntrace_log($value1, $value2, $exception, '...');\n```\n\n----------------------------------------\n\nTITLE: Constraining Eager Loads with Conditions in OctoberCMS\nDESCRIPTION: Example showing how to add constraints to eager loaded relationships. This loads users with their posts, but only the posts that have 'first' in their title.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\\n    'posts' => function ($query) {\\n        $query->where('title', 'like', '%first%');\\n    }\\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Visible Attributes in JSON Serialization in PHP\nDESCRIPTION: Demonstrates defining a whitelist of attributes that should be included in the model's array and JSON representation using the $visible property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Aggregate Functions in PHP\nDESCRIPTION: Demonstrates the use of aggregate methods like count, max, min, avg, and sum in the query builder. These methods can be called after constructing the query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n\n$price = Db::table('orders')->max('price');\n\n$price = Db::table('orders')\n    ->where('is_finalized', 1)\n    ->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Accessing Localization Strings in PHP\nDESCRIPTION: Demonstrates how to use the __() helper function to access localization strings in PHP, including parameter replacement.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho __('I love programming.');\n\necho __(':name loves programming.', ['name' => 'Jeff']);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Related Models in PHP\nDESCRIPTION: Shows how to use the 'addMany' method to save multiple related Comment models to a Post model simultaneously.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$post->comments()->addMany([\n    new Comment(['message' => 'A new comment.']),\n    new Comment(['message' => 'Another comment.']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Disabling Database Query Logging\nDESCRIPTION: Shows how to disable query logging to prevent memory issues when executing many database operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nDb::connection()->disableQueryLog();\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Row with Conditions\nDESCRIPTION: Shows how to retrieve a single row from the database using the first() method with a where condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')->where('name', 'John')->first();\n\necho $user->name;\n```\n\n----------------------------------------\n\nTITLE: Debugging Variables with dump() Function in Twig\nDESCRIPTION: The dump() function outputs detailed information about a template variable. It can be used with single or multiple variables, or without arguments to dump all variables in the current context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/dump.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user, categories) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Relationship in User Model - PHP\nDESCRIPTION: Shows how to define a one-to-many relationship using the $hasMany property, where a User model has many Post models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Definition\nDESCRIPTION: Example of defining a one-to-many relationship for blog posts and comments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $hasMany = [\n        'comments' => \\Acme\\Blog\\Models\\Comment::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in PHP for OctoberCMS Model\nDESCRIPTION: This snippet shows how to customize the date format for storing and serializing date attributes in a Flight model. It sets the format to a Unix timestamp.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/mutators.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * The storage format of the model's date columns.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Twig\nDESCRIPTION: Shows how to access and display validation error messages in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework in Twig Template\nDESCRIPTION: Demonstrates how to include the AJAX framework in a CMS theme using the {% framework %} tag, along with jQuery.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ 'assets/javascript/jquery.js'|theme }}\"></script>\n\n{% framework %}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Call in Twig\nDESCRIPTION: Shows the basic syntax for calling functions in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ function() }}\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse belongsToMany Relationship in PHP for October CMS\nDESCRIPTION: Shows how to define the inverse of a belongsToMany relationship on the related Role model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass Role extends Model\n{\n    public $belongsToMany = [\n        'users' => \\Acme\\Blog\\Models\\User::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Binding a Shared Type to the IoC Container in October CMS\nDESCRIPTION: Demonstrates how to register a singleton binding, where the same instance is returned on subsequent resolutions from the container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nApp::singleton('foo', function() {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Queueing Email Messages for Background Sending\nDESCRIPTION: Example of queueing an email message for background sending using the Mail::queue method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nMail::queue('acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing ValidationException with Error Array in PHP\nDESCRIPTION: Demonstrates throwing a ValidationException with an array of field errors. This exception is used for form submission validation errors and works with the AJAX framework.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nthrow new ValidationException(['username' => 'Sorry that username is already taken!']);\n```\n\n----------------------------------------\n\nTITLE: Using afterUpdate Callback with AJAX Request\nDESCRIPTION: Example of running 'onCalculate' handler with a custom callback function that executes after the page elements are updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    afterUpdate: function() { /* do something */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Form Request in HTML\nDESCRIPTION: Demonstrates the basic usage of the request method within an HTML form element using the onsubmit event handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"$(this).request('onProcess'); return false;\">\n    ...\n```\n\n----------------------------------------\n\nTITLE: Rendering Update Form in PHP for October CMS\nDESCRIPTION: This snippet demonstrates the structure of a typical update.php view file in October CMS. It includes form opening and closing tags, form rendering, and buttons for saving, closing, and deleting records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'd-flex flex-column h-100']) ?>\n\n    <div class=\"flex-grow-1\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div data-control=\"loader-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"{ close: true }\"\n                data-request-message=\"Saving Category...\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                class=\"btn btn-default\">\n                Save and Close\n            </button>\n            <button\n                type=\"button\"\n                class=\"oc-icon-trash-o btn-icon danger pull-right\"\n                data-request=\"onDelete\"\n                data-request-message=\"Deleting Category...\"\n                data-request-confirm=\"Do you really want to delete this category?\">\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Dropdown Options in PHP\nDESCRIPTION: This snippet demonstrates how to define a dropdown property with static options in the defineProperties method of a component. It includes configuration for title, type, default value, placeholder, and option list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dropdown.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'unit' => [\n            'title' => 'Unit',\n            'type' => 'dropdown',\n            'default' => 'imperial',\n            'placeholder' => 'Select units',\n            'options' => ['metric' => 'Metric', 'imperial' => 'Imperial']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Export Behavior in YAML\nDESCRIPTION: Example YAML configuration for the Import Export Behavior. Defines settings for both import and export functionality, including model classes and column definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Import/Export Behavior Config\n# ===================================\n\nimport:\n    title: Import subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberImport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n\nexport:\n    title: Export subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberExport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Filter Dependencies Configuration\nDESCRIPTION: Example showing how to configure filter dependencies between country and city scopes with corresponding PHP implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: group\n    conditions: country_id in (:filtered)\n    modelClass: October\\Test\\Models\\Location\n    options: getCountryOptions\n\ncity:\n    label: City\n    type: group\n    conditions: city_id in (:filtered)\n    modelClass: October\\Test\\Models\\Location\n    options: getCityOptions\n    dependsOn: country\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return Country::lists('name', 'id');\n}\n\npublic function getCityOptions($scopes = null)\n{\n    if (!empty($scopes['country']->value)) {\n        return City::whereIn('country_id', array_keys($scopes['country']->value))\n            ->lists('name', 'id')\n        ;\n    }\n    else {\n        return City::lists('name', 'id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Purging Database Theme in October CMS\nDESCRIPTION: Command to import a database theme to the filesystem while also purging database templates using the --purge-db option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/database-themes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo --import-db --purge-db\n```\n\n----------------------------------------\n\nTITLE: Registering Permissions in OctoberCMS Plugin\nDESCRIPTION: Shows how to register backend user permissions in an OctoberCMS plugin by overriding the registerPermissions method in the Plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_posts' => [\n            'label' => 'Manage the blog posts',\n            'tab' => 'Blog',\n            'order' => 200,\n        ],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: N+1 Problem Demonstration - PHP\nDESCRIPTION: Shows the N+1 query problem where accessing a relationship property inside a loop leads to inefficient database queries, one for each parent record.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\n\nforeach ($books as $book) {\n    echo $book->author->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Rules in PHP\nDESCRIPTION: Shows how to add validation rules to a model in PHP for server-side validation of form fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var array Validation rules\n */\npublic $rules = [\n    'your_age' => 'numeric',\n];\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relationship Implementation\nDESCRIPTION: Shows how to implement a one-to-many relationship between Post and Comment models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $hasMany = [\n        'comments' => \\Acme\\Blog\\Models\\Comment::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript for Validation Error Styling\nDESCRIPTION: JavaScript event handlers that add and remove CSS classes to form fields when validation errors occur and when a new request starts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n$(window).on('ajaxInvalidField', function(event, fieldElement, fieldName, errorMsg, isFirst) {\n    $(fieldElement).closest('.form-group').addClass('has-error');\n});\n\n$(document).on('ajaxPromise', '[data-request]', function() {\n    $(this).closest('form').find('.form-group.has-error').removeClass('has-error');\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Extension Class\nDESCRIPTION: Example showing how to create a Behavior class by extending ExtensionBase with methods and constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Behaviors;\n\nclass FormController extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    /**\n     * @var Reference to the extended object.\n     */\n    protected $controller;\n\n    /**\n     * Constructor\n     */\n    public function __construct($controller)\n    {\n        $this->controller = $controller;\n    }\n\n    public function someMethod()\n    {\n        return \"I come from the FormController Behavior!\";\n    }\n\n    public function otherMethod()\n    {\n        return \"You might not see me...\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Failed Job Event Handler in PHP\nDESCRIPTION: PHP code example showing how to register a callback function that will be triggered when a queue job fails, allowing for notifications or custom error handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nQueue::failing(function($connection, $job, $data) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs to Many Relation in OctoberCMS YAML\nDESCRIPTION: Example YAML configuration for a Belongs to Many relation between User and Roles. It specifies the view and management options for the relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n        toolbarButtons: add|remove\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dropdown Options Method in PHP\nDESCRIPTION: Demonstrates how to implement a custom method in a model class to provide dynamic options with icons or colors for a dropdown field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($fieldName, $value, $formData)\n{\n    return [\n        'published' => ['Published', 'icon-check-circle'],\n        'unpublished' => ['Unpublished', 'icon-minus-circle'],\n        'draft' => ['Draft', 'icon-clock-o']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating BelongsTo Relationships with associate() in OctoberCMS\nDESCRIPTION: Example showing how to update a belongsTo relationship. This associates a user with an account by setting the foreign key automatically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$account = Account::find(10);\\n\\n$user->account()->associate($account);\\n\\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Cache Items in PHP\nDESCRIPTION: Using the pull method to retrieve an item from cache and then delete it in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::pull('key');\n```\n\n----------------------------------------\n\nTITLE: Building Mail Messages with Callback\nDESCRIPTION: Example of building a mail message using a callback function to specify various options like from, to, and cc addresses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog:welcome', $vars, function($message) {\n    $message->from('us@example.tld', 'October');\n    $message->to('foo@example.tld')->cc('bar@example.tld');\n});\n```\n\n----------------------------------------\n\nTITLE: Database Structure for Has One Through Relation\nDESCRIPTION: SQL table structure required for implementing a Has One Through relationship between Supplier, User, and History models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nusers\n    id - integer\n    supplier_id - integer\n\nsuppliers\n    id - integer\n\nhistory\n    id - integer\n    user_id - integer\n```\n\n----------------------------------------\n\nTITLE: Server-side Partial Update Handler\nDESCRIPTION: Shows how to push partial updates from a server-side AJAX handler by returning an array with selectors and content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/update-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onRefreshTime()\n{\n    return [\n        '#myDiv' => $this->renderPartial('mypartial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Type Validation Implementation\nDESCRIPTION: Example of validating file MIME types using the mimes rule.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: Transforming Collection Items with map() Method in PHP\nDESCRIPTION: The map method iterates through the collection and passes each value to a callback function. The callback can modify the item and return it, creating a new collection of transformed items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$multiplied = $collection->map(function ($item, $key) {\n    return $item * 2;\n});\n\n$multiplied->all();\n\n// [2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Filtering Models by Relationship Existence - PHP\nDESCRIPTION: Shows how to retrieve models based on the existence of a relationship using the has() method, optionally with count operators and conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment...\n$posts = Post::has('comments')->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Console Command via Artisan\nDESCRIPTION: Command to generate a new console command class using the October CMS scaffolding tool.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:command Acme.Blog MyCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection\nDESCRIPTION: Redis server configuration settings including host, port and database selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'cluster' => false,\n\n    'default' => [\n        'host'     => '127.0.0.1',\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n],\n```\n\n----------------------------------------\n\nTITLE: Complete Form Validation Example with AJAX\nDESCRIPTION: Comprehensive HTML example of a form that implements validation, loading indicators, and flash messages using the AJAX framework extras.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onDoSomething\"\n    data-request-validate\n    data-request-flash>\n\n    <div>\n        <input name=\"name\" />\n        <span data-validate-for=\"name\"></span>\n    </div>\n\n    <div>\n        <input name=\"email\" />\n        <span data-validate-for=\"email\"></span>\n    </div>\n\n    <button data-attach-loading>\n        Submit\n    </button>\n\n    <div class=\"alert alert-danger\" data-validate-error>\n        <p data-message></p>\n    </div>\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Required Route Parameters\nDESCRIPTION: Demonstrates how to capture segments of the URI as parameters using curly brackets, which are then passed to the route handler. Multiple parameters can be defined in a single route.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{id}', function ($id) {\n    return 'User '.$id;\n});\n\nRoute::get('posts/{post}/comments/{comment}', function ($postId, $commentId) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Form Widget HTML Input Template in PHP\nDESCRIPTION: Shows a basic HTML input element that can be used in a form widget partial to display and capture user input, using the prepared variables from the render method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<input id=\"<?= $id ?>\" name=\"<?= $name ?>\" value=\"<?= e($value) ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Information Widget in YAML for October CMS\nDESCRIPTION: Illustrates the configuration for a sensitive information widget in YAML. This widget renders a password field that can be toggled between visible and hidden states, suitable for API keys, passwords, or other sensitive data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napi_secret:\n    type: sensitive\n    allowCopy: false\n    hideOnTabChange: true\n```\n\n----------------------------------------\n\nTITLE: Paginating Filtered Model Results in PHP\nDESCRIPTION: Shows how to apply conditions to a model query before paginating the results. This example filters users who have more than 100 votes before paginating.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results with skip and take in PHP\nDESCRIPTION: Demonstrates how to limit the number of results returned from a database query using the skip and take methods. The skip method allows offsetting results, while take limits the number of records returned.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Query Scopes in OctoberCMS (PHP)\nDESCRIPTION: Shows how to use a dynamic query scope by passing parameters when calling the scope method on a model query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = User::applyType('admin')->get();\n```\n\n----------------------------------------\n\nTITLE: Backend Form Extension\nDESCRIPTION: Demonstrates extending backend forms by adding and removing fields through event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.form.extendFields', function($widget) {\n    if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n        return;\n    }\n    if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n        return;\n    }\n    if ($widget->isNested) {\n        return;\n    }\n    $widget->addFields([\n        'birthday' => [\n            'label' => 'Birthday',\n            'comment' => 'Select the users birthday',\n            'type' => 'datepicker'\n        ]\n    ]);\n    $widget->removeField('surname');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Relationship Definition in PHP Model\nDESCRIPTION: Demonstrates how to define a basic hasMany relationship in a User model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => 'Acme\\Blog\\Models\\Post'\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Fields Based on Model Data\nDESCRIPTION: Demonstrates how to use the filterFields method to dynamically show or hide fields based on another field's value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($this->source_type === 'http') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = true;\n    }\n    elseif ($this->source_type === 'git') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = false;\n    }\n    else {\n        $fields->source_url->hidden = true;\n        $fields->git_branch->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a Related Model with save() Method in OctoberCMS\nDESCRIPTION: Example demonstrating how to save a related model through a relationship. This creates a new comment and associates it with a post automatically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment(['message' => 'A new comment.']);\\n\\n$post = Post::find(1);\\n\\n$comment = $post->comments()->save($comment);\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Session using Session Facade in PHP\nDESCRIPTION: Shows how to store a key-value pair in the session using the Session facade's put method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSession::put('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereNull Method in PHP\nDESCRIPTION: The whereNull method filters a collection by keeping only the items where the specified key's value is null.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk'],\n    ['name' => null],\n    ['name' => 'Bookcase'],\n]);\n\n$filtered = $collection->whereNull('name');\n\n$filtered->all();\n\n/*\n    [\n        ['name' => null],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a Custom Event in PHP\nDESCRIPTION: Illustrates how to listen for a custom event 'acme.blog.myevent' using Event::listen, with a closure that accepts two arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('acme.blog.myevent', function($arg1, $arg2) {\n    // Do something\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Values with Input Facade in PHP\nDESCRIPTION: Examples of retrieving user input using the Input facade in October CMS. Shows how to get single values, set default values, check if input exists, and retrieve all or specific input values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/request-input.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name');\n```\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name', 'Sally');\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Input::has('name')) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::all();\n```\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::only('username', 'password');\n\n$input = Input::except('credit_card');\n```\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::get('products.0.name');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Models in PHP for October CMS\nDESCRIPTION: Demonstrates retrieving single model instances using find() and first() methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve a model by its primary key\n$flight = Flight::find(1);\n\n// Retrieve the first model matching the query constraints\n$flight = Flight::where('active', 1)->first();\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Query Scopes\nDESCRIPTION: Example of how to call a query scope that accepts parameters. Shows passing 'admin' as a parameter to the applyType scope.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = User::applyType('admin')->get();\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements in PHP Collection\nDESCRIPTION: The skip method returns a new collection without the first given amount of items. It takes an integer argument specifying how many items to skip.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$collection = $collection->skip(4);\n\n$collection->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Formatted Error Messages in PHP\nDESCRIPTION: Shows how to retrieve all error messages with a custom format using the all() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nforeach ($messages->all('<li>:message</li>') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing a BelongsTo Relationship Through Dynamic Property (PHP)\nDESCRIPTION: Shows how to retrieve a Post model associated with a Comment using the dynamic property defined in the belongsTo relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\necho $comment->post->title;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Site in PHP\nDESCRIPTION: Example of getting the currently active site for frontend theme rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$site = Site::getActiveSite();\n```\n\n----------------------------------------\n\nTITLE: Extending Relation Configuration in OctoberCMS PHP\nDESCRIPTION: PHP method example for extending relation configuration, demonstrating how to modify the configuration based on model properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendConfig($config, $field, $model)\n{\n    // Make sure the model and field matches those you want to manipulate\n    if (!$model instanceof MyModel || $field !== 'myField') {\n        return;\n    }\n\n    // Show a different list for business customers\n    if ($model->mode == 'b2b') {\n        $config->view['list'] = '$/author/plugin_name/models/mymodel/b2b_columns.yaml';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Method When Opening Forms\nDESCRIPTION: Example showing how to specify an HTTP method (PUT, DELETE, etc.) when opening a form. Non-standard methods are spoofed with a hidden _method field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'method' => 'put'])\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereInstanceOf() Method - PHP\nDESCRIPTION: Demonstrates filtering collection items by class type using whereInstanceOf().\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_80\n\nLANGUAGE: php\nCODE:\n```\nuse App\\User;\nuse App\\Post;\n\n$collection = collect([\n    new User,\n    new User,\n    new Post,\n]);\n\n$filtered = $collection->whereInstanceOf(User::class);\n\n$filtered->all();\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Scope for Filtering States in PHP\nDESCRIPTION: Shows the PHP implementation of a model scope method used to filter states based on the selected country.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeFilterStates($query, $model)\n{\n    if ($countryId = $model->country_id) {\n        $query->where('country_id', $countryId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Layout Lifecycle Methods in PHP\nDESCRIPTION: Example of PHP code defining lifecycle methods for handling page execution in a layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['myVariable'] = 'foo';\n}\n\nfunction myMethod()\n{\n    return 'bar';\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Filtering Based on Model Data in PHP\nDESCRIPTION: Implementing the filterFields method in a model to dynamically modify form field properties based on the model's data, such as showing or hiding fields based on a selected option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($this->source_type == 'http') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = true;\n    }\n    elseif ($this->source_type == 'git') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = false;\n    }\n    else {\n        $fields->source_url->hidden = true;\n        $fields->git_branch->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Mass Assignable Attributes in PHP using OctoberCMS Model\nDESCRIPTION: This example shows how to define mass assignable attributes using the $fillable property in a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * The attributes that are mass assignable.\n     *\n     * @var array\n     */\n    protected $fillable = ['name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sluggable Attributes in PHP Models\nDESCRIPTION: Demonstrates using the Sluggable trait to automatically generate URL-friendly slugs from model attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sluggable;\n\n    protected $slugs = ['slug' => 'name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Search Queries in PHP\nDESCRIPTION: Demonstrates how to use searchWhere for performing case-insensitive search queries across multiple columns with different search modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$pages = Db::table('posts')\n    ->searchWhere('foo bar', ['title', 'content'])\n    ->get();\n\n$query->searchWhere('foo bar', ['title', 'content'], 'exact');\n```\n\n----------------------------------------\n\nTITLE: Performing Left and Right Joins\nDESCRIPTION: Demonstrates how to use leftJoin and rightJoin methods for SQL left and right outer joins, which have the same signature as the regular join method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Listening for Dispatched Events in JavaScript\nDESCRIPTION: Demonstrates how to listen for custom events dispatched from AJAX handlers using addEventListener. The event data is available through the event.detail object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('app:update-profile', function (event) {\n    alert('Profile updated with name: ' + event.detail.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Event in PHP\nDESCRIPTION: Demonstrates how to listen for an auth.login event and update the user's last login date when the event is fired.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($user) {\n    $user->last_login = new DateTime;\n    $user->save();\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Values in Collections using wrap Method in PHP\nDESCRIPTION: Shows how to use the static wrap method to convert various input types into a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$collection = Collection::wrap('John Doe');\n\n$collection->all();\n\n// ['John Doe']\n\n$collection = Collection::wrap(['John Doe']);\n\n$collection->all();\n\n// ['John Doe']\n\n$collection = Collection::wrap(new Collection('John Doe'));\n\n$collection->all();\n\n// ['John Doe']\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Records in a Single Operation\nDESCRIPTION: Demonstrates how to insert multiple records into a database table with a single call by passing an array of arrays to the insert method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert([\n    ['email' => 'taylor@example.tld', 'votes' => 0],\n    ['email' => 'dayle@example.tld', 'votes' => 0]\n]);\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection by Column Value in October CMS\nDESCRIPTION: Example of performing a database query on a collection to filter entries by a field value, specifically showing only entries where the 'color' field is 'blue'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set bluePosts = posts.where('color', 'blue').get() %}\n```\n\n----------------------------------------\n\nTITLE: Creating Compound Where Clauses in PHP\nDESCRIPTION: Shows how to create more complex where clauses using nested closures for grouping conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->where('name', '=', 'John')\n    ->orWhere(function ($query) {\n        $query->where('votes', '>', 100)\n            ->where('title', '<>', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Deleting All Records from a Table in PHP\nDESCRIPTION: Shows how to delete all records from a database table using the delete method of the query builder. This performs a DELETE SQL operation without any constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n```\n\n----------------------------------------\n\nTITLE: Implementing User Tracking for Revisions\nDESCRIPTION: Shows how to track which user made each revision by implementing the getRevisionableUser method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\npublic function getRevisionableUser()\n{\n    return BackendAuth::getUser()->id;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Post from Comment - PHP\nDESCRIPTION: Demonstrates how to retrieve the parent Post model from a Comment using the relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\necho $comment->post->title;\n```\n\n----------------------------------------\n\nTITLE: Firing an Event in PHP\nDESCRIPTION: Shows how to fire the auth.login event with a user object as a parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('auth.login', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Complex Raw Filter Usage with Expressions\nDESCRIPTION: Shows how to properly use the |raw filter with conditional expressions and HTML content variables in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/raw.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set hello = '<strong>Hello</strong>' %}\n{% set hola = '<strong>Hola</strong>' %}\n\n{{ false ? '<strong>Hola</strong>' : hello|raw }}\n\n{# The above will not render the same as #}\n{{ false ? hola : hello|raw }}\n\n{# But renders the same as #}\n{{ (false ? hola : hello)|raw }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving or Updating Cache Items in PHP\nDESCRIPTION: Examples of using 'remember' and 'rememberForever' methods to retrieve or update cache items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::remember('users', $seconds, function() {\n    return Db::table('users')->get();\n});\n\n$value = Cache::rememberForever('users', function() {\n    return Db::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Failed Jobs with Artisan Commands in October CMS\nDESCRIPTION: Various Artisan commands for viewing, retrying, deleting, and flushing failed jobs. These commands allow developers to list failed jobs, retry specific jobs, forget individual jobs, or clear all failed jobs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:failed\n\nphp artisan queue:retry 5\n\nphp artisan queue:forget 5\n\nphp artisan queue:flush\n```\n\n----------------------------------------\n\nTITLE: Implementing Configurable Properties in October CMS Form Widget\nDESCRIPTION: This example demonstrates how to define configurable properties in a form widget class and populate them using the fillFromConfig method in the init method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass DatePicker extends FormWidgetBase\n{\n    //\n    // Configurable properties\n    //\n\n    /**\n     * @var string mode for display: datetime, date, time.\n     */\n    public $mode = 'datetime';\n\n    /**\n     * @var string minDate is the minimum/earliest date that can be selected.\n     * eg: 2000-01-01\n     */\n    public $minDate = null;\n\n    /**\n     * @var string maxDate is the maximum/latest date that can be selected.\n     * eg: 2020-12-31\n     */\n    public $maxDate = null;\n\n    //\n    // Object properties\n    //\n\n    /**\n     * {@inheritDoc}\n     */\n    protected $defaultAlias = 'datepicker';\n\n    /**\n     * {@inheritDoc}\n     */\n    public function init()\n    {\n        $this->fillFromConfig([\n            'mode',\n            'minDate',\n            'maxDate',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in Queries\nDESCRIPTION: Demonstrates how to use raw SQL expressions within a query using Db::raw. This allows for custom SQL functions and expressions not directly supported by the query builder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->select(Db::raw('count(*) as user_count, status'))\n    ->where('status', '<>', 1)\n    ->groupBy('status')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Query Scopes in Relationship Definitions in PHP\nDESCRIPTION: Demonstrates how to use query scopes to filter related models in a relationship definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $belongsToMany = [\n        'categories' => [\n            \\Acme\\Blog\\Models\\Category::class,\n            'scope' => 'isActive'\n        ]\n    ];\n}\n\nclass Category extends Model\n{\n    public function scopeIsActive($query)\n    {\n        return $query->where('is_active', true)->orderBy('name', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Many-to-Many Relationship in OctoberCMS (PHP)\nDESCRIPTION: Shows how to define a belongsToMany relationship in a User model to establish a many-to-many relationship with Role models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $belongsToMany = [\n        'roles' => 'Acme\\Blog\\Models\\Role'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple File Attachments in PHP Model\nDESCRIPTION: Shows how to define multiple file attachments in an October CMS model using the $attachMany property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic $attachMany = [\n    'photos' => 'System\\Models\\File'\n];\n```\n\n----------------------------------------\n\nTITLE: Generating URL Slug in PHP\nDESCRIPTION: The str_slug function generates a URL friendly \"slug\" from the given string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_25\n\nLANGUAGE: PHP\nCODE:\n```\n$title = str_slug(\"October CMS\", \"-\");\n\n// october-cms\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Content Field in Plugin.php\nDESCRIPTION: Example of registering the custom content field in the plugin registration file using the registerContentFields method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function registerContentFields()\n{\n    return [\n        \\October\\Test\\ContentFields\\MyContentField::class => 'mycontentfield'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler in Component\nDESCRIPTION: Example of defining an AJAX handler method in a component to process form values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function onAddItem()\n{\n    $value1 = post('value1');\n    $value2 = post('value2');\n    $this->page['result'] = $value1 + $value2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationController in PHP Controller\nDESCRIPTION: Example showing how to implement the RelationController behavior in a controller class by defining the $implement and config properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Projects\\Controllers;\n\nclass Projects extends Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class,\n        \\Backend\\Behaviors\\RelationController::class\n    ];\n\n    public $formConfig = 'config_form.yaml';\n    public $relationConfig = 'config_relation.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Dependencies in October CMS\nDESCRIPTION: The 'plugin:check' command performs a system-wide check of installed plugin dependencies and attempts to install missing requirements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:check\n```\n\n----------------------------------------\n\nTITLE: Deferred Binding Implementation\nDESCRIPTION: Demonstrates how to implement deferred binding for postponing relationship associations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment;\n$comment->content = \"Hello world!\";\n$comment->save();\n\n$post = new Post;\n$post->comments()->add($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Quick Mail Sending Methods in PHP\nDESCRIPTION: Examples of using the sendTo method for sending mail to different recipient types including single addresses, multiple recipients, and raw messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Send to address using no name\nMail::sendTo('admin@domain.tld', 'acme.blog:message', $params);\n\n// Send using an object's properties\nMail::sendTo($user, 'acme.blog:message', $params);\n\n// Send to multiple addresses\nMail::sendTo(['admin@domain.tld' => 'Admin Person'], 'acme.blog:message', $params);\n\n// Alternatively send a raw message without parameters\nMail::rawTo('admin@domain.tld', 'Hello friend');\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Permissions in October CMS\nDESCRIPTION: Example showing how to register backend permission items in a plugin registration file. Permissions are defined with keys, descriptions, tabs, and order properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_posts' => [\n            'label' => 'Manage the blog posts',\n            'tab' => 'Blog',\n            'order' => 200,\n        ],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Conditions to Relationship Absence Checks - PHP\nDESCRIPTION: Demonstrates how to use whereDoesntHave to find models that don't have related records matching specific conditions, providing more refined filtering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::whereDoesntHave('comments', function ($query) {\n    $query->where('content', 'like', 'code%');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Plugin with October CMS Artisan Command\nDESCRIPTION: Creates a new plugin folder structure with basic files. Requires author and plugin name in the format Author.PluginName.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:plugin Acme.Blog\n```\n\n----------------------------------------\n\nTITLE: Scheduling Console and System Commands in OctoberCMS\nDESCRIPTION: Examples of scheduling both console commands and operating system commands with the command scheduler. The command method schedules OctoberCMS console commands while exec runs system commands.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('cache:clear')->daily();\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->exec('node /home/acme/script.js')->daily();\n```\n\n----------------------------------------\n\nTITLE: Specifying Select Clauses in PHP\nDESCRIPTION: Demonstrates how to use the select method to specify custom select clauses for the query. Shows examples of selecting specific columns and using aliases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->select('name', 'email as user_email')->get();\n\n$users = Db::table('users')->distinct()->get();\n\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Triggering AJAX Request with HTML Button\nDESCRIPTION: This HTML snippet shows how to create a button that triggers an AJAX request using data attributes in the backend of October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/ajax.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    data-request=\"onDoSomething\"\n    class=\"btn btn-default\">\n    Do Something\n</button>\n```\n\n----------------------------------------\n\nTITLE: Binding External Event in PHP for October CMS Model Instance\nDESCRIPTION: This code shows how to bind an external event to a single instance of a model using the bindEvent method. It demonstrates creating a slug for the name attribute before the model is created.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$flight = new Flight;\n$flight->bindEvent('model.beforeCreate', function() use ($model) {\n    $model->slug = Str::slug($model->name);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete in OctoberCMS Model\nDESCRIPTION: Shows how to enable soft deleting for an OctoberCMS model using the SoftDelete trait and $dates property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SoftDelete;\n\n    protected $dates = ['deleted_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Job Handler in PHP\nDESCRIPTION: Shows the structure of a job handler class with the required fire method. The handler receives the job instance and data that was pushed to the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SendEmail\n{\n    public function fire($job, $data)\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Filter Scopes Using Global Event in PHP\nDESCRIPTION: This PHP snippet demonstrates how to extend filter scopes using the backend.filter.extendScopes global event. It adds a new scope and adjusts CSS classes for the event log filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.filter.extendScopes', function($filter) {\n    if (\n        !$filter->getController() instanceof \\System\\Controllers\\EventLogs ||\n        !$filter->getModel() instanceof \\System\\Models\\EventLog\n    ) {\n        return;\n    }\n\n    // Add a new scope\n    $filter->addScopes([\n        'my_scope' => [\n            'label' => 'My Filter Scope'\n        ]\n    ]);\n\n    // Add custom CSS classes to the filter widget\n    $filter->cssClasses = array_merge(\n        $filter->cssClasses,\n        ['my-array', 'of-classes']\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Markup Body Content Within a Partial\nDESCRIPTION: Shows how to output the markup content passed as the 'body' variable within a partial. The raw filter prevents HTML escaping.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ body|raw }}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic AJAX Forms\nDESCRIPTION: Example demonstrating how to create an AJAX-enabled form using Form::ajax with a handler method name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave')\n```\n\n----------------------------------------\n\nTITLE: Defining a Placeholder in Twig\nDESCRIPTION: Demonstrates how to define a basic placeholder in a layout using the {% placeholder %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder name %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin Test Case in PHP\nDESCRIPTION: This PHP code demonstrates how to create a test case for an October CMS plugin. It extends the PluginTestCase class and includes a sample test method for creating a blog post.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/unit-testing.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php namespace Acme\\Blog\\Tests\\Models;\n\nuse Acme\\Blog\\Models\\Post;\nuse PluginTestCase;\n\nclass PostTest extends PluginTestCase\n{\n    public function testCreateFirstPost()\n    {\n        $post = Post::create(['title' => 'Hi!']);\n        $this->assertEquals(1, $post->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a LazyCollection Instance in PHP\nDESCRIPTION: This example demonstrates how to create a lazy collection instance by passing a PHP generator function to the collection's make method. The generator reads a log file line by line.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_85\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\LazyCollection;\n\nLazyCollection::make(function () {\n    $handle = fopen('log.txt', 'r');\n\n    while (($line = fgets($handle)) !== false) {\n        yield $line;\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Has Many Through Model Definition\nDESCRIPTION: PHP model class showing how to define a Has Many Through relationship with custom key configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nclass Country extends Model\n{\n    public $hasManyThrough = [\n        'posts' => [\n            \\Acme\\Blog\\Models\\Post::class,\n            'through' => \\Acme\\Blog\\Models\\User::class\n        ],\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $hasManyThrough = [\n    'posts' => [\n        \\Acme\\Blog\\Models\\Post::class,\n        'key' => 'my_country_id',\n        'through' => \\Acme\\Blog\\Models\\User::class,\n        'throughKey' => 'my_user_id',\n        'otherKey' => 'my_id',\n        'secondOtherKey' => 'my_country_id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Committing Deferred Bindings on Create\nDESCRIPTION: This snippet demonstrates how to commit deferred bindings when creating a model with the create method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::create(['title' => 'First blog post'], $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Adding Complex Conditions to Relationship Existence Checks - PHP\nDESCRIPTION: Demonstrates using whereHas to add custom conditions to relationship existence checks, allowing for more precise filtering based on related record attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts with at least one comment containing words like foo%\n$posts = Post::whereHas('comments', function ($query) {\n    $query->where('content', 'like', 'foo%');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Basic Image Resizing with Twig Filter in OctoberCMS\nDESCRIPTION: Demonstrates the basic usage of the '|resize' Twig filter to resize an image to 100x100 pixels. The filter returns a URL to the resized image.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-resize.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'image.jpg'|resize(100, 100) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Input in PHP Handler\nDESCRIPTION: Shows how to access form input values within an AJAX handler using the input() function. This allows you to process form data submitted through an AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContactForm()\n{\n    $firstName = input('first_name');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Handlers in Widget HTML\nDESCRIPTION: This snippet shows how to implement AJAX handlers in widget partials using the getEventHandler method to return the widget's handler name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    data-request=\"<?= $this->getEventHandler('onPaginate') ?>\"\n    title=\"Next page\">Next</a>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Results\nDESCRIPTION: Demonstrates how to use the distinct() method to retrieve unique results from a database query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Localization Strings in PHP for OctoberCMS\nDESCRIPTION: Example of overriding plugin localization strings without modifying plugin files. This code shows how to selectively override specific strings while keeping the rest of the original translations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/localization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'app' => [\n        'name' => 'October CMS!'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Navigation Menu in October CMS\nDESCRIPTION: Example of registering a top-level navigation menu with sub-menu items in October CMS plugin registration file. Includes configuration for labels, URLs, icons, permissions and ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function registerNavigation()\n{\n    return [\n        'blog' => [\n            'label' => 'Blog',\n            'url' => Backend::url('acme/blog/posts'),\n            'icon' => 'icon-pencil',\n            'permissions' => ['acme.blog.*'],\n            'order' => 500,\n\n            'sideMenu' => [\n                'posts' => [\n                    'label' => 'Posts',\n                    'icon' => 'icon-copy',\n                    'url' => Backend::url('acme/blog/posts'),\n                    'permissions' => ['acme.blog.access_posts'],\n                ],\n                'categories' => [\n                    'label' => 'Categories',\n                    'icon' => 'icon-copy',\n                    'url' => Backend::url('acme/blog/categories'),\n                    'permissions' => ['acme.blog.access_categories'],\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using withCount with Multiple Relations and Constraints in October CMS\nDESCRIPTION: This snippet demonstrates counting multiple related records with additional query constraints. It counts votes and filtered comments for posts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::withCount(['votes', 'comments' => function ($query) {\n    $query->where('content', 'like', 'foo%');\n}])->get();\n\necho $posts[0]->votes_count;\necho $posts[0]->comments_count;\n```\n\n----------------------------------------\n\nTITLE: Prompting for Confirmation in Console Command\nDESCRIPTION: Shows how to prompt the user for confirmation in a console command using the confirm method. This returns true if the user confirms, false otherwise.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nif ($this->confirm('Do you wish to continue? [yes|no]')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Assets with Resources Component in October CMS\nDESCRIPTION: Demonstrates how to inject CSS, SCSS, LESS, and JavaScript assets into a page using the resources component. The assets are bundled and combined into single script/style references.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[resources]\ncss[] = \"blocks/carousel.css\"\nscss[] = \"blocks/carousel.scss\"\nless[] = \"blocks/carousel.less\"\njs[] = \"blocks/carousel.js\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Carousel Contents Here -->\n```\n\n----------------------------------------\n\nTITLE: Returning Models Directly from Routes in PHP\nDESCRIPTION: Demonstrates how returning model objects directly from routes will automatically convert them to JSON. This example returns all User models from a route.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Messages in Language Files in PHP\nDESCRIPTION: Demonstrates how to define custom validation messages in a language file for reusability.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'required' => 'We need to know your e-mail address!',\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Route Parameters in October CMS\nDESCRIPTION: Example of capturing multiple segments from the URI by defining multiple route parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('posts/{post}/comments/{comment}', function ($postId, $commentId) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Where Clause in PHP\nDESCRIPTION: Shows how to delete records that match specific conditions by adding where clauses before calling the delete method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '<', 100)->delete();\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Relationship in October CMS User Model\nDESCRIPTION: This snippet demonstrates how to define a hasMany relationship in a User model. The User model has a relationship with multiple Post models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $hasMany = [\n        'posts' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Partial in October CMS\nDESCRIPTION: Demonstrates how to render a basic partial view in October CMS backend using the makePartial method with optional variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->makePartial('sidebar', ['showHeader' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Validation in PHP\nDESCRIPTION: Example of complex conditional validation with dynamic rules based on input values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'required|email',\n    'games' => 'required|numeric',\n]);\n\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Form Widget Registration\nDESCRIPTION: Demonstrates how to register form widgets in the plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function registerFormWidgets()\n{\n    return [\n        'Backend\\FormWidgets\\CodeEditor' => 'codeeditor',\n        'Backend\\FormWidgets\\RichEditor' => 'richeditor'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Boot Method with Model Extension\nDESCRIPTION: Example showing how to extend models in the boot method of a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    User::extend(function($model) {\n        $model->hasOne['author'] = \\Acme\\Blog\\Models\\Author::class;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in AJAX Handlers\nDESCRIPTION: Demonstrates how to redirect the browser to another location from an AJAX handler by returning a Redirect response object. The framework will handle the redirect as soon as the response is received.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onRedirectMe()\n{\n    return Redirect::to('http://google.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Object in OctoberCMS Twig\nDESCRIPTION: This snippet demonstrates how to access the current controller object in OctoberCMS Twig templates. The this.controller property returns an instance of the Cms\\Classes\\Controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.controller }}\n```\n\n----------------------------------------\n\nTITLE: Finding Records with Exceptions\nDESCRIPTION: Using findOrFail and firstOrFail methods to throw exceptions when records are not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$model = Flight::findOrFail(1);\n\n$model = Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Implementing FormController in a Backend Controller\nDESCRIPTION: Example of how to implement the FormController behavior in an October CMS backend controller class by adding it to the $implement property and specifying the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class\n    ];\n\n    public $formConfig = 'config_form.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Cache in PHP\nDESCRIPTION: Examples of retrieving items from cache using the Cache facade's get method with default values and closures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::get('key');\n\n$value = Cache::get('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Implementing Subdomain Routing with Route Groups\nDESCRIPTION: Shows how to use route groups for wildcard subdomains, capturing a portion of the subdomain as a parameter to be used in routes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['domain' => '{account}.example.com'], function () {\n    Route::get('user/{id}', function ($account, $id) {\n        //\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to an Event in PHP\nDESCRIPTION: Demonstrates how to listen for an auth.login event and update the user's last login date using the Event::listen method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($user) {\n    $user->last_login = new DateTime;\n    $user->save();\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Mutators in PHP for OctoberCMS Model\nDESCRIPTION: This snippet demonstrates how to customize which fields are automatically mutated to Carbon date objects in a User model. It adds a 'disabled_at' field to the default date mutators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/mutators.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be mutated to dates.\n     *\n     * @var array\n     */\n    protected $dates = ['created_at', 'updated_at', 'disabled_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Partial Updates using HTML Data Attributes\nDESCRIPTION: Shows how to update partials using October CMS data attributes API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefreshTime\"\n    data-request-update=\"{ mytime: '#myDiv' }\">\n    Go\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Cast Attributes in PHP\nDESCRIPTION: Demonstrates how to work with cast attributes, showing automatic type conversion when accessing properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nif ($user->is_admin) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Has One Through in Supplier Model\nDESCRIPTION: PHP code demonstrating how to define a Has One Through relationship in a Supplier model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass Supplier extends Model\n{\n    public $hasOneThrough = [\n        'userHistory' => [\n            \\Acme\\Supplies\\Model\\History::class,\n            'through' => \\Acme\\Supplies\\Model\\User::class\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in API Responses\nDESCRIPTION: Demonstrates how to implement pagination in API responses using the pager() Twig function. This creates a structured response with data, links for navigation, and meta information about the pagination.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set posts = blog.paginate(3) %}\n\n{% set pager = pager(posts) %}\n\n{% do response({\n    data: posts,\n    links: pager.links,\n    meta: pager.meta\n}) %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler Implementation\nDESCRIPTION: Example of implementing an AJAX handler method in a component\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function onAddItem()\n{\n    $value1 = post('value1');\n    $value2 = post('value2');\n    $this->page['result'] = $value1 + $value2;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Relation Controller in PHP\nDESCRIPTION: Example of implementing the RelationController behavior in a controller class along with form controller\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Projects\\Controllers;\n\nclass Projects extends Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class,\n        \\Backend\\Behaviors\\RelationController::class\n    ];\n\n    public $formConfig = 'config_form.yaml';\n    public $relationConfig = 'config_relation.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Polymorphic Relationships in October CMS Tag Model\nDESCRIPTION: This code demonstrates how to define the inverse of a polymorphic relationship in the Tag model. The morphedByMany property specifies that Tags can belong to multiple Posts and Videos.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass Tag extends Model\n{\n    public $morphedByMany = [\n        'posts'  => [\\Acme\\Blog\\Models\\Post::class, 'name' => 'taggable'],\n        'videos' => [\\Acme\\Blog\\Models\\Video::class, 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Records with Conditions\nDESCRIPTION: Shows how to update an existing record or insert a new one if it doesn't exist using the updateOrInsert method with condition and value arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.tld', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flash Data in PHP\nDESCRIPTION: Demonstrates how to redirect to a new URL while also flashing data to the session in a single method chain.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login')->with('message', 'Login Failed');\n```\n\n----------------------------------------\n\nTITLE: Using firstWhere Method in PHP Collections\nDESCRIPTION: The firstWhere method returns the first element in the collection with the given key/value pair, optionally with a comparison operator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Regena', 'age' => null],\n    ['name' => 'Linda', 'age' => 14],\n    ['name' => 'Diego', 'age' => 23],\n    ['name' => 'Linda', 'age' => 84],\n]);\n\n$collection->firstWhere('name', 'Linda');\n\n// ['name' => 'Linda', 'age' => 14]\n\n$collection->firstWhere('age', '>=', 18);\n\n// ['name' => 'Diego', 'age' => 23]\n\n$collection->firstWhere('age');\n\n// ['name' => 'Linda', 'age' => 14]\n```\n\n----------------------------------------\n\nTITLE: Chunking Results by ID for Safe Updates\nDESCRIPTION: Shows how to use chunkById for safely updating records while chunking, which paginates results based on record primary key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('active', false)\n    ->chunkById(100, function ($users) {\n        foreach ($users as $user) {\n            Db::table('users')\n                ->where('id', $user->id)\n                ->update(['active' => true]);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Converting Paginator to JSON in PHP Route\nDESCRIPTION: Demonstrates how to convert pagination results to JSON by returning a paginator instance directly from a route handler. This is useful for API endpoints that require paginated data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::paginate();\n});\n```\n\n----------------------------------------\n\nTITLE: Removing HTML Tags with html_strip()\nDESCRIPTION: Demonstrates how to use the html_strip() function to remove HTML tags from a string, returning only the plain text content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip('<strong>Hello world</strong>') }}\n```\n\n----------------------------------------\n\nTITLE: Detecting AJAX Requests in PHP\nDESCRIPTION: Demonstrates how to check if the current request was made via AJAX.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nif (Request::ajax()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping a Collection in PHP\nDESCRIPTION: Shows how to filter active users and map their names using collection methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::get();\n\n$names = $users->filter(function ($user) {\n        return $user->is_active === true;\n    })\n    ->map(function ($user) {\n        return $user->name;\n    });\n```\n\n----------------------------------------\n\nTITLE: Detailed Relationship Definition with Parameters\nDESCRIPTION: Shows how to define a relationship with additional parameters like delete behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic $hasMany = [\n    'posts' => [\\Acme\\Blog\\Models\\Post::class, 'delete' => true]\n];\n```\n\n----------------------------------------\n\nTITLE: Using unique() Method on PHP Collections\nDESCRIPTION: The unique() method returns all unique items in a collection. It can be used with simple arrays or nested arrays/objects, and allows custom callback functions for determining uniqueness.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 1, 2, 2, 3, 4, 2]);\n\n$unique = $collection->unique();\n\n$unique->values()->all();\n\n// [1, 2, 3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'iPhone 12', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'iPhone 13', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n    ['name' => 'Galaxy S21', 'brand' => 'Samsung', 'type' => 'phone'],\n    ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n]);\n\n$unique = $collection->unique('brand');\n\n$unique->values()->all();\n```\n\nLANGUAGE: php\nCODE:\n```\n$unique = $collection->unique(function ($item) {\n    return $item['brand'].$item['type'];\n});\n\n$unique->values()->all();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Cache in PHP\nDESCRIPTION: Examples of retrieving items from the cache using the Cache facade, including default values and closures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::get('key');\n\n$value = Cache::get('key', 'default');\n\n$value = Cache::get('key', function() {\n    return Db::table(...)->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Tree Structure in PHP Model\nDESCRIPTION: Shows how to use the NestedTree trait to create advanced hierarchical relationships between models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\NestedTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Attributes in PHP Models\nDESCRIPTION: Demonstrates how to use the Nullable trait to automatically set empty attributes to NULL in a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Product extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Nullable;\n\n    protected $nullable = ['sku'];\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Collection Items with transform() Method in PHP\nDESCRIPTION: The transform() method iterates over the collection and calls a given callback with each item, replacing the original values with the values returned by the callback. Unlike map(), transform() modifies the collection itself rather than creating a new one.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->transform(function ($item, $key) {\n    return $item * 2;\n});\n\n$collection->all();\n\n// [2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Basic Event Subscription in October CMS - PHP\nDESCRIPTION: Simple event subscription using Event::listen with a custom event name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('acme.blog.myevent', ...);\n```\n\n----------------------------------------\n\nTITLE: Creating a New October CMS Project with Composer\nDESCRIPTION: Uses Composer's create-project command to initialize a new October CMS installation in a directory called 'myoctober'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project october/october myoctober\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Polymorphic Types\nDESCRIPTION: Demonstrates how to set up custom polymorphic type mappings using morphMap.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Relations\\Relation;\n\nRelation::morphMap([\n    'staff' => \\Acme\\Blog\\Models\\Staff::class,\n    'product' => \\Acme\\Blog\\Models\\Product::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Related Models with Pivot Data in PHP\nDESCRIPTION: Demonstrates how to use the 'add' method to associate a Role with a User model while including additional pivot table data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$pivotData = ['expires' => $expires];\n\n$user->roles()->add($role, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Entries using EntryRecord Model in PHP\nDESCRIPTION: Demonstrates how to retrieve multiple entries using the EntryRecord model with inSection and inSectionUuid methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$records = EntryRecord::inSection('Blog\\Post')->get();\n\n$records = EntryRecord::inSectionUuid('a63fabaf-7c0b-4c74-b36f-7abf1a3ad1c1')->get();\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in Queries\nDESCRIPTION: Demonstrates how to use raw SQL expressions in a query builder statement for complex operations like counting and grouping.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->select(Db::raw('count(*) as user_count, status'))\n    ->where('status', '<>', 1)\n    ->groupBy('status')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Conditions in Group Filter\nDESCRIPTION: Example of using custom SQL conditions in a group filter where :value represents the filtered value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Role\n    type: group\n    conditions: role in (:value)\n```\n\n----------------------------------------\n\nTITLE: Preventing Partial Updates with Event Listener\nDESCRIPTION: Shows how to prevent partial updates by calling preventDefault on the event object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('app:stale-document', function (event) {\n    event.preventDefault();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Pivot Table Columns to Retrieve (PHP)\nDESCRIPTION: Shows how to configure a many-to-many relationship to include additional columns from the pivot table beyond just the foreign keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        'Acme\\Blog\\Models\\Role',\n        'pivot' => ['column1', 'column2']\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Cookie Attachment to Response\nDESCRIPTION: Demonstrates attaching cookies to a response with various configuration options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)->withCookie('name', 'value');\n\n->withCookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)\n```\n\n----------------------------------------\n\nTITLE: Using toArray() Method in PHP Collections\nDESCRIPTION: The toArray method converts the collection into a plain PHP array. If the collection contains model instances, they will also be converted to arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_64\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'Desk', 'price' => 200]);\n\n$collection->toArray();\n\n/*\n    [\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating Console Command with Artisan in OctoberCMS\nDESCRIPTION: Creates a new command class file using OctoberCMS's scaffolding tool. The first argument specifies the author and plugin name, and the second argument specifies the command name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:command Acme.Blog MyCommand\n```\n\n----------------------------------------\n\nTITLE: Unique Rule Implementation Examples\nDESCRIPTION: Various examples of implementing unique validation rules including basic usage, custom columns, and additional where clauses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users'\n```\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address,10'\n```\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address,NULL,id,account_id,1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Session using Session Facade in PHP\nDESCRIPTION: Shows various ways to retrieve data from the session, including getting a value with a default, using a closure as default, and retrieving all session data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/session.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::get('key');\n\n$value = Session::get('key', 'default');\n\n$value = Session::get('key', function() { return 'default'; });\n```\n\nLANGUAGE: php\nCODE:\n```\n$data = Session::all();\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Session::has('users')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Partials\nDESCRIPTION: Different methods for rendering component partials in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'demoTodo::pagination' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial '@pagination' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial '@shared' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<form data-request=\"{{__SELF__}}::onEventHandler\">\n    [...]\n</form>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for item in __SELF__.items() %}\n    {{ item }}\n{% endfor %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial __SELF__~\"::screenshot-list\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating an Extendable Class Using ExtendableTrait in PHP\nDESCRIPTION: This snippet shows how to create a class that can implement behaviors using the ExtendableTrait in October CMS. It includes all necessary methods for extensibility.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass AI\n{\n    use \\October\\Rain\\Extension\\ExtendableTrait;\n\n    public $implement;\n\n    public function __construct()\n    {\n        $this->extendableConstruct();\n    }\n    public function __get($name)\n    {\n        return $this->extendableGet($name);\n    }\n    public function __set($name, $value)\n    {\n        $this->extendableSet($name, $value);\n    }\n    public function __call($name, $params)\n    {\n        return $this->extendableCall($name, $params);\n    }\n    public static function __callStatic($name, $params)\n    {\n        return self::extendableCallStatic($name, $params);\n    }\n    public static function extend(callable $callback)\n    {\n        self::extendableExtendCallback($callback);\n    }\n\n    public function youGotBrains()\n    {\n        echo \"I've got an AI!<br>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Request with HTTP Exception in PHP\nDESCRIPTION: Demonstrates how to abort a request with a specific HTTP error code using the App::abort method. This can be used to generate HTTP error responses from anywhere in the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(404);\n```\n\n----------------------------------------\n\nTITLE: Using Validation Rules with Parameters\nDESCRIPTION: Demonstrates how to use validation rules that accept parameters and handle them in the validation logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'name' => 'betwixt:1,6',\n]);\n```\n\n----------------------------------------\n\nTITLE: Removing Related Models\nDESCRIPTION: Shows various methods for removing model relationships including remove and dissociate methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->remove($comment);\n\n$post->categories()->remove($category);\n\n$post->author()->dissociate();\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Message Override Example\nDESCRIPTION: Demonstrates how to override specific validation messages and attribute names in a custom language file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'required' => 'Sorry, we need that field (:attribute) you gave!',\n\n    'attributes' => [\n        'email' => 'email address'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Passing Sub-View to View in PHP\nDESCRIPTION: Demonstrates how to pass a sub-view into another view using the nest method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$view = View::make('acme.blog::greeting')->nest('child', 'acme.blog::child.view');\n\n$view = View::make('acme.blog::greeting')->nest('child', 'acme.blog::child.view', $data);\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Partial in October CMS\nDESCRIPTION: Demonstrates how to render a partial view using the makePartial method with optional variables passed to the partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/views-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->makePartial('sidebar', ['showHeader' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Calling AJAX Handlers with Attributes and JavaScript APIs\nDESCRIPTION: Demonstrates how to call an AJAX handler using either the data attributes API or the JavaScript API. Both methods specify the handler name to be executed on the server.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Attributes API -->\n<button data-request=\"onSubmitContactForm\">Go</button>\n\n<!-- JavaScript API -->\n<script> oc.ajax('onSubmitContactForm') </script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collections in OctoberCMS Models\nDESCRIPTION: Demonstrates how to override the newCollection method in a model to use a custom Collection object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Create a new Collection instance.\n     */\n    public function newCollection(array $models = [])\n    {\n        return new CustomCollection($models);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting Directories in PHP\nDESCRIPTION: Shows how to create a new directory, including any needed subdirectories, and how to delete a directory and all its contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nStorage::makeDirectory($directory);\n\nStorage::deleteDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Update Page Configuration in YAML\nDESCRIPTION: Configuration for the Update page in the form behavior, specifying title and redirect path after saving changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nupdate:\n    title: Edit Blog Post\n    redirect: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Parsing Twig Templates in PHP\nDESCRIPTION: Illustrates how to use the Twig facade to parse Twig syntax into HTML in PHP, including passing variables to the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$html = Twig::parse($twig);\n\n$html = Twig::parse($twig, ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Registering Singleton Dependencies\nDESCRIPTION: Demonstrates binding a shared instance that should only be resolved once and reused for subsequent calls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nApp::singleton('foo', function() {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Results in PHP\nDESCRIPTION: Example of paginating database model queries with the User model, displaying 15 items per page. The syntax is similar to paginating query builder results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Records from a Table with Query Builder\nDESCRIPTION: Shows how to use the fluent query builder to retrieve all records from the 'users' table using the table() and get() methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->get();\n```\n\n----------------------------------------\n\nTITLE: Defining an Accessor in PHP for OctoberCMS Model\nDESCRIPTION: This snippet demonstrates how to define an accessor method in a User model to format the first_name attribute. The accessor automatically capitalizes the first letter of the name when retrieved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/mutators.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * Get the user's first name.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Models in PHP\nDESCRIPTION: Shows how to use the Sortable trait to maintain sort order of models in a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n}\n```\n\n----------------------------------------\n\nTITLE: Class-based Event Handler\nDESCRIPTION: Demonstrates using a class to handle events with a default handle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass LoginHandler\n{\n    public function handle($data)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting a Model to JSON in PHP\nDESCRIPTION: Demonstrates how to convert a model to JSON using the toJson() method. Like toArray(), this method recursively converts all attributes and relations to JSON format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->toJson();\n```\n\n----------------------------------------\n\nTITLE: Using whereNotIn for Exclusion List Filtering\nDESCRIPTION: Shows how to use whereNotIn to filter records where a column's value does not match any value in a specified array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereNotIn('id', [1, 2, 3])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Results in PHP\nDESCRIPTION: Demonstrates how to paginate model query results by calling the paginate method directly on a model class. This example paginates the User model with 15 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Class in PHP\nDESCRIPTION: Demonstrates the basic structure of a migration class file in OctoberCMS. Shows proper namespace usage, class naming convention, and inheritance from the Migration base class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Updates;\n\nuse Schema;\nuse October\\Rain\\Database\\Updates\\Migration;\n\n/**\n * some_upgrade_file.php\n */\nclass SomeUpgradeFile extends Migration\n{\n    ///\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Scopes in PHP\nDESCRIPTION: Shows how to define and use query scopes to encapsulate common query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/model.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public function scopePopular($query)\n    {\n        return $query->where('votes', '>', 100);\n    }\n\n    public function scopeActive($query)\n    {\n        return $query->where('is_active', 1);\n    }\n}\n\n$users = User::popular()->active()->orderBy('created_at')->get();\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Event Listeners in PHP\nDESCRIPTION: Illustrates how to use wildcard listeners to handle multiple events with a single listener function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('foo.*', function($event, $params) {\n    // Handle the event...\n});\n```\n\n----------------------------------------\n\nTITLE: Layout with Placeholder\nDESCRIPTION: Shows how to define a placeholder in a layout template that can be filled by pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    ...\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Encryptable Trait in October CMS Model\nDESCRIPTION: Demonstrates how to use the Encryptable trait to automatically encrypt and decrypt sensitive attributes like API keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Encryptable;\n\n    /**\n        * @var array List of attributes to encrypt.\n        */\n    protected $encryptable = ['api_key', 'api_secret'];\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Computed Attributes\nDESCRIPTION: Demonstrates how to include computed attributes in serialization using the $appends property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with url() Helper in PHP\nDESCRIPTION: The url() function generates fully qualified URLs to a given path. It can take an optional array of parameters to include in the URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\necho url('user/profile');\n\necho url('user/profile', [1]);\n```\n\n----------------------------------------\n\nTITLE: Preventing Task Overlap in OctoberCMS Scheduler\nDESCRIPTION: Example of using the withoutOverlapping method to prevent a task from running if the previous instance is still executing. This is useful for tasks with variable execution times.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('emails:send')->withoutOverlapping();\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Views in PHP\nDESCRIPTION: Demonstrates different ways to pass data to views, including using the with method and magic methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// Using conventional approach\n$view = View::make('acme.blog::greeting')->with('name', 'Steve');\n\n// Using magic methods\n$view = View::make('acme.blog::greeting')->withName('steve');\n```\n\n----------------------------------------\n\nTITLE: Custom Relation Class Implementation\nDESCRIPTION: Demonstrates how to specify a custom relation class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'users' => [\n        \\Backend\\Models\\User::class,\n        'relationClass' => \\Backend\\Classes\\MyBelongsToMany::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin in October CMS\nDESCRIPTION: Command to destroy a plugin's database tables and delete its files from the filesystem.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:remove AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Caching Query Results in PHP\nDESCRIPTION: Shows how to cache the results of a database query for a specified duration using the remember method, reducing database load for frequently accessed data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->remember(10)->get();\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated Results in PHP Templates\nDESCRIPTION: Example showing how to display paginated results in a PHP template by iterating through the paginator and rendering the pagination links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n    <?php foreach ($users as $user): ?>\n        <?= $user->name ?>\n    <?php endforeach ?>\n</div>\n\n<?= $users->links() ?>\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Handler Reference in OctoberCMS\nDESCRIPTION: Demonstrates the basic syntax for referencing an AJAX handler defined within a component using the data-request attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\ndata-request=\"onMyComponentHandler\"\n```\n\n----------------------------------------\n\nTITLE: Printing Variables in Twig Templates\nDESCRIPTION: Shows how to display template variables on the page using double curly brackets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisor for October CMS Queue Workers\nDESCRIPTION: A Supervisor configuration file example that sets up and monitors 8 queue:work processes. The configuration includes auto-restart capabilities and logging setup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_10\n\nLANGUAGE: conf\nCODE:\n```\n[program:october-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /path/to/october/artisan queue:work --sleep=3 --tries=3\nautostart=true\nautorestart=true\nuser=october\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/path/to/october/worker.log\n```\n\n----------------------------------------\n\nTITLE: Event Firing with Parameters in October CMS - PHP\nDESCRIPTION: Example of firing an event with parameters that will be passed to the event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.myevent', [$arg1, $arg2]);\n```\n\n----------------------------------------\n\nTITLE: Using For Update Locks in Database Queries\nDESCRIPTION: Demonstrates how to implement 'for update' locks that prevent rows from being modified or selected with another shared lock during a transaction.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Model Extension Example\nDESCRIPTION: Demonstrates how to extend models with additional relationships and event bindings\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/models.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function($model) {\n    $model->hasOne['profile'] = [Profile::class, 'key' => 'user_id'];\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Building\nDESCRIPTION: Demonstrates conditional query building using the when method for dynamic query construction.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$role = $request->input('role');\n\n$users = Db::table('users')\n    ->when($role, function ($query, $role) {\n        return $query->where('role_id', $role);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Checking Console Execution Context\nDESCRIPTION: Shows how to check if code is running in command line interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInConsole();\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Indicator to Form Buttons in HTML\nDESCRIPTION: Demonstrates how to add a loading indicator to form buttons using the data-attach-loading attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\">\n    <button data-attach-loading>\n        Submit\n    </button>\n</form>\n\n<a\n    href=\"#\"\n    data-request=\"onDoSomething\"\n    data-attach-loading>\n    Do something\n</a>\n```\n\n----------------------------------------\n\nTITLE: Complete Behavior Implementation Example\nDESCRIPTION: Full example showing behavior definition, class extension, and usage patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyNamespace\\Behaviors;\n\nclass FormController extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $controller;\n\n    public function __construct($controller)\n    {\n        $this->controller = $controller;\n    }\n\n    public function someMethod()\n    {\n        return \"I come from the FormController Behavior!\";\n    }\n\n    public function otherMethod()\n    {\n        return \"You might not see me...\";\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace;\n\nclass Controller extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        \\MyNamespace\\Behaviors\\FormController::class\n    ];\n\n    public function otherMethod()\n    {\n        return \"I come from the main Controller!\";\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$controller = new MyNamespace\\Controller;\n\n// Prints: I come from the FormController Behavior!\necho $controller->someMethod();\n\n// Prints: I come from the main Controller!\necho $controller->otherMethod();\n\n// Prints: You might not see me...\necho $controller->asExtension('FormController')->otherMethod();\n```\n\n----------------------------------------\n\nTITLE: PHP Form Close Equivalent\nDESCRIPTION: Shows the PHP equivalent of the Twig form_close() function using Form class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Initializing Relation Model in OctoberCMS PHP\nDESCRIPTION: PHP code snippet demonstrating how to initialize a relation model in a controller before displaying the relation manager.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::where('id', 7)->first();\n$this->initRelation($post);\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Settings Model in October CMS\nDESCRIPTION: Example of registering a settings model in a plugin registration file. Demonstrates basic configuration with label, description, category and model class definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'settings' => [\n            'label' => 'User Settings',\n            'description' => 'Manage user based settings.',\n            'category' => 'CATEGORY_USERS',\n            'icon' => 'icon-cog',\n            'class' => \\Acme\\User\\Models\\UserSetting::class,\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing belongsToMany Relationship in PHP for October CMS\nDESCRIPTION: Demonstrates how to access related models through a belongsToMany relationship and how to add query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$roles = User::find(1)->roles()->orderBy('name')->get();\n```\n\n----------------------------------------\n\nTITLE: Delayed Queue Job Execution\nDESCRIPTION: Demonstrates how to delay a queue job execution using Queue::later method with Carbon datetime\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$date = Carbon::now()->addMinutes(15);\n\nQueue::later($date, 'SendEmail', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Using Component Aliases in October CMS\nDESCRIPTION: Illustrates how to use component aliases to resolve naming conflicts or use multiple instances of the same component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[October\\Demo\\Components\\Todo demoTodoAlias]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: One-to-Many Relation Configuration in OctoberCMS\nDESCRIPTION: YAML configuration for a one-to-many relationship (comments belonging to a blog post). Defines both view and manage options with forms and lists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\ncomments:\n    label: ËØÑËÆ∫\n    manage:\n        form: $/acme/blog/models/comment/fields.yaml\n        list: $/acme/blog/models/comment/columns.yaml\n    view:\n        list: $/acme/blog/models/comment/columns.yaml\n        toolbarButtons: create|delete\n```\n\n----------------------------------------\n\nTITLE: Migration File Structure in October CMS\nDESCRIPTION: Shows the basic structure of a migration file in October CMS, including namespace, class name, and file naming conventions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/updates.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Updates;\n\nuse Schema;\nuse October\\Rain\\Database\\Updates\\Migration;\n\n/**\n * some_upgrade_file.php\n */\nclass SomeUpgradeFile extends Migration\n{\n    ///\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from a Subdirectory\nDESCRIPTION: Shows how to render a partial that is located within a subdirectory using the {% partial %} tag. In this example, the 'menu' partial is inside the 'sidebar' subdirectory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"sidebar/menu\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration File in PHP for October CMS\nDESCRIPTION: This PHP snippet shows the basic structure of a migration file in October CMS. It includes the namespace, necessary imports, and an empty class that extends the Migration class. The file name should be in snake_case, while the class name should be in CamelCase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Updates;\n\nuse Schema;\nuse October\\Rain\\Database\\Updates\\Migration;\n\n/**\n * some_upgrade_file.php\n */\nclass SomeUpgradeFile extends Migration\n{\n    ///\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Polymorphic Relationships in October CMS Models\nDESCRIPTION: This example shows how to retrieve all tags associated with a post using the dynamic property syntax. This accesses the morphToMany relationship defined in the Post model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\nforeach ($post->tags as $tag) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Event Listener with Conditional Request\nDESCRIPTION: Demonstrates a more complex event listener that conditionally triggers a new AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('app:stale-document', function (event) {\n    if (confirm('Another user has updated this document, proceed?')) {\n        oc.request(event.target, 'onUpdate', { data: {\n            force: true\n        }});\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Database Exists Rule Implementation\nDESCRIPTION: Examples of using the exists validation rule to check database records, including basic usage and custom column specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states'\n```\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states,abbreviation'\n```\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'exists:staff,email,account_id,1'\n```\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'exists:staff,email,deleted_at,NULL'\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Permissions for Controller Access\nDESCRIPTION: Example showing how to use the asterisk symbol to indicate 'all permissions' condition for controller access, allowing users with any permission starting with the specified prefix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic $requiredPermissions = ['acme.blog.*'];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input in OctoberCMS Console Commands\nDESCRIPTION: This snippet demonstrates various methods to retrieve input values (arguments and options) within an OctoberCMS console command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$value = $this->argument('name');\n\n$arguments = $this->argument();\n\n$value = $this->option('name');\n\n$options = $this->option();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Response Macro in PHP\nDESCRIPTION: Demonstrates how to define a custom response macro for reuse in routes and controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nResponse::macro('caps', function($value) {\n    return Response::make(strtoupper($value));\n});\n\nreturn Response::caps('foo');\n```\n\n----------------------------------------\n\nTITLE: Registering Failed Job Event Handler in PHP\nDESCRIPTION: PHP code to register an event handler for failed queue jobs. This allows for custom actions like notifications when a job fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nQueue::failing(function($connection, $job, $data) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Request Event Handlers in October CMS\nDESCRIPTION: Demonstrates how to register callbacks to execute before and after a request is routed in the application lifecycle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::before(function ($request) {\n    // Code to execute before the request is routed\n});\n\nApp::after(function ($request) {\n    // Code to execute after the request is routed\n});\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Form Request with Partial Update in HTML\nDESCRIPTION: Example of a form that triggers the onCalculate handler when submitted and updates an element with ID 'result' with the calcresult partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onCalculate\" data-request-update=\"{ calcresult: '#result' }\">\n```\n\n----------------------------------------\n\nTITLE: Triggering Flash Messages with JavaScript\nDESCRIPTION: Shows how to display flash messages programmatically using the oc.flashMsg JavaScript function, with options for message type and display duration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\noc.flashMsg({\n    message: 'Record has been successfully saved. This message will disappear in 1 second.',\n    type: 'success',\n    interval: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Routes for Multiple HTTP Verbs\nDESCRIPTION: Demonstrates how to register a route that responds to multiple HTTP verbs using the match method, or to all HTTP verbs using the any method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::match(['get', 'post'], '/', function () {\n    return 'Hello World';\n});\n\nRoute::any('foo', function () {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Design in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure the form design in the behavior configuration of an October CMS controller, specifying the display mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndesign:\n    displayMode: basic\n```\n\n----------------------------------------\n\nTITLE: Using External Property Values in Components\nDESCRIPTION: Demonstrates how to initialize component properties with values from external parameters like URL or partial parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ maxItems }}\n==\n```\n\n----------------------------------------\n\nTITLE: Using the pull() Method in PHP Collections\nDESCRIPTION: The pull method removes and returns an item from the collection by its key, modifying the original collection. Similar to PHP's array_pull but returns the value directly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 'prod-100', 'name' => 'Desk']);\n\n$collection->pull('name');\n\n// 'Desk'\n\n$collection->all();\n\n// ['product_id' => 'prod-100']\n```\n\n----------------------------------------\n\nTITLE: Using trace_sql() for Database Logging in PHP\nDESCRIPTION: The trace_sql() function enables database logging and begins to monitor all SQL output. It's useful for debugging database queries during development.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\ntrace_sql();\n\nDb::table('users')->count();\n\n// select count(*) as aggregate from users\n```\n\n----------------------------------------\n\nTITLE: Generating Form Security Tokens\nDESCRIPTION: Shows how to generate CSRF token and session key fields for forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::token() ?>\n\n<?= Form::sessionKey() ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Options with Default Values in Console Command Signature\nDESCRIPTION: Shows how to define options with default values in the command signature. Default values are specified after an equal sign and are used when the option is specified without a value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user} {--queue=default}';\n```\n\n----------------------------------------\n\nTITLE: Component Properties Definition\nDESCRIPTION: Example of defining component properties with validation and default values\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'maxItems' => [\n            'title' => 'Max items',\n            'description' => 'The most amount of todo items allowed',\n            'default' => 10,\n            'type' => 'string',\n            'validation' => [\n                'regex' => [\n                    'message' => 'The Max Items property can contain only numeric symbols.',\n                    'pattern' => '^[0-9]+$'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhereRaw for Raw Where Clauses\nDESCRIPTION: Shows how to use whereRaw and orWhereRaw to inject raw SQL conditions into the where clause, with support for parameter bindings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence on S3 Storage\nDESCRIPTION: Example showing how to check if a file exists on an S3 storage disk using the exists method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$exists = Storage::disk('s3')->exists('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Compound Where Clauses with Closure\nDESCRIPTION: Shows how to create complex where conditions using closure functions and nested constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->where('name', '=', 'John')\n    ->orWhere(function ($query) {\n        $query->where('votes', '>', 100)\n            ->where('title', '<>', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Filtering Form Fields in PHP\nDESCRIPTION: Implementation of filterFields method to manipulate field visibility based on model data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($this->source_type === 'http') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = true;\n    }\n    elseif ($this->source_type === 'git') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = false;\n    }\n    else {\n        $fields->source_url->hidden = true;\n        $fields->git_branch->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing One-to-One Related Models in PHP\nDESCRIPTION: Shows how to retrieve a related model in a one-to-one relationship using dynamic properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$phone = User::find(1)->phone;\n```\n\n----------------------------------------\n\nTITLE: Basic Form Submission with oc.request in HTML\nDESCRIPTION: Demonstrates how to use oc.request method directly in a form's onsubmit attribute to handle form submission and AJAX processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"oc.request(this, 'onProcess'); return false;\">\n    ...\n```\n\n----------------------------------------\n\nTITLE: Checking for Record Existence\nDESCRIPTION: Demonstrates how to use exists() and doesntExist() methods to check whether records matching certain criteria exist in the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn Db::table('orders')->where('finalized', 1)->exists();\n\nreturn Db::table('orders')->where('finalized', 1)->doesntExist();\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship in User Model - PHP\nDESCRIPTION: Shows how to define a belongsToMany relationship for roles in a User model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $belongsToMany = [\n        'roles' => \\Acme\\Blog\\Models\\Role::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX-Enabled Form with Data Attributes in HTML\nDESCRIPTION: Demonstrates an AJAX-enabled form using data attributes to define the handler and update target.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- AJAX enabled form -->\n<form data-request=\"onTest\" data-request-update=\"mypartial: '#myDiv'\">\n\n    <!-- Input two values -->\n    <input name=\"value1\"> + <input name=\"value2\">\n\n    <!-- Action button -->\n    <button type=\"submit\">Calculate</button>\n\n</form>\n\n<!-- Result container -->\n<div id=\"myDiv\"></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing SortableRelation Trait in PHP for October CMS\nDESCRIPTION: This PHP code snippet demonstrates the use of the SortableRelation trait in a model class. It also shows how to define a belongsToMany relationship with a pivotSortable property for sorting records in a pivot table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/structures.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SortableRelation;\n\n    /**\n     * @var array belongsToMany\n     */\n    public $belongsToMany = [\n        'roles' => [\n            Role::class,\n            'table' => 'users_roles',\n            'pivotSortable' => 'sort_order',\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with File Upload in HTML\nDESCRIPTION: Form that includes file upload capability by using the data-request-files attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\" data-request-files>\n    <input type=\"file\" name=\"photo\" accept=\"image/*\" />\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Dependencies in YAML\nDESCRIPTION: Example of defining dependent filter scopes where city options depend on the selected country.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filters.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: group\n    conditions: country_id in (:value)\n    modelClass: October\\Test\\Models\\Location\n    options: getCountryOptions\n\ncity:\n    label: City\n    type: group\n    conditions: city_id in (:value)\n    modelClass: October\\Test\\Models\\Location\n    options: getCityOptions\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Mail Template Structure in Twig\nDESCRIPTION: Example of a mail template structure with configuration, plain text, and HTML sections using Twig templating.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\nsubject = \"Your product has been added to October CMS project\"\n==\n\nHi {{ name }},\n\nGood news! User {{ user }} just added your product \"{{ product }}\" to a project.\n\nThis message was sent using no formatting (plain text)\n==\n\n<p>Hi {{ name }},</p>\n\n<p>Good news! User {{ user }} just added your product <strong>{{ product }}</strong> to a project.</p>\n\n<p>This email was sent using formatting (HTML)</p>\n```\n\n----------------------------------------\n\nTITLE: Grouping by Multiple Columns with groupBy\nDESCRIPTION: Demonstrates how to use groupBy with multiple column arguments to create more complex grouping logic in database queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping Eloquent Collection in PHP\nDESCRIPTION: Shows how to use the filter and map methods on a collection to filter active users and then map the results to get only their names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::get();\n\n$names = $users->filter(function ($user) {\n        return $user->is_active === true;\n    })\n    ->map(function ($user) {\n        return $user->name;\n    });\n```\n\n----------------------------------------\n\nTITLE: Model Creation Methods\nDESCRIPTION: Various methods for creating model instances including firstOrCreate and firstOrNew.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve the flight by the attributes, otherwise create it\n$flight = Flight::firstOrCreate(['name' => 'Flight 10']);\n\n// Retrieve the flight by the attributes, or instantiate a new instance\n$flight = Flight::firstOrNew(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: Using route() URL Helper in PHP\nDESCRIPTION: The route function generates a URL for a named route. It accepts the route name and optional parameters, making it easier to generate links to application routes without hardcoding URLs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$url = route('routeName');\n\nif the route accepts parameters, you may pass them as the second argument to the method:\n\n$url = route('routeName', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Column Type in YAML\nDESCRIPTION: Shows how to set up a number column with custom formatting in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nprice:\n    label: Price\n    type: number\n    format: \"$%.2f\"\n```\n\n----------------------------------------\n\nTITLE: Regenerating Session ID using Session Facade in PHP\nDESCRIPTION: Shows how to regenerate the session ID and optionally remove all session data using the regenerate and invalidate methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/session.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSession::regenerate();\n```\n\nLANGUAGE: php\nCODE:\n```\nSession::invalidate();\n```\n\n----------------------------------------\n\nTITLE: Enabling Flash Messages in HTML Forms\nDESCRIPTION: Shows how to enable flash messages for AJAX requests in HTML forms using the data-request-flash attribute. This allows the display of flash messages on completed AJAX requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSuccess\"\n    data-request-flash>\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions with If-Elseif-Else in Twig\nDESCRIPTION: Shows how to use multiple conditions with if, elseif, and else statements. This example checks different states of a 'kenny' object and displays appropriate messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-if.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if kenny.sick %}\n    Kenny is sick.\n{% elseif kenny.dead %}\n    You killed Kenny! You bastard!!!\n{% else %}\n    Kenny looks okay so far.\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Report Widget Class in PHP\nDESCRIPTION: Example of a basic report widget class that extends ReportWidgetBase and implements the render method to display a traffic sources widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace RainLab\\GoogleAnalytics\\ReportWidgets;\n\nuse Backend\\Classes\\ReportWidgetBase;\n\nclass TrafficSources extends ReportWidgetBase\n{\n    public function render()\n    {\n        return $this->makePartial('widget');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Examples\nDESCRIPTION: Demonstrates creating JSON responses with automatic content-type headers and JSONP support.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA']);\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA'])\n    ->setCallback(Input::get('callback'));\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables into Twig Templates in October CMS\nDESCRIPTION: Example showing how to inject variables from the PHP section into the Twig template using the onStart lifecycle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/\"\n==\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n==\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Reading Values from Settings Model in PHP\nDESCRIPTION: Shows different methods for reading values from a settings model, including direct property access and the static get method with default values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/model-settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Outputs: ABCD\necho UserSetting::instance()->api_key;\n\n// Get a single value\necho UserSetting::get('api_key');\n\n// Get a value and return a default value if it doesn't exist\necho UserSetting::get('is_activated', true);\n```\n\n----------------------------------------\n\nTITLE: Using response() Helper in PHP\nDESCRIPTION: The response function creates a response instance or obtains an instance of the response factory. It can be used to generate HTTP responses with custom content, status codes, and headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nreturn response('Hello World', 200, $headers);\n\nreturn response()->json(['foo' => 'bar'], 200, $headers);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Entry with Constraints in PHP\nDESCRIPTION: Shows how to retrieve a single entry record using where constraints and findSingleForSection methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$record = EntryRecord::inSection('Blog\\Post')->where('slug', 'first-post')->first();\n\n$record = EntryRecord::findSingleForSection('Homepage');\n\n$record = EntryRecord::findSingleForSectionUuid('3328c303-7989-462e-b866-27e7037ba275');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Variable Example\nDESCRIPTION: Shows how to inject variables into the Twig environment from the PHP section using the onStart lifecycle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/\"\n==\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n==\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global AJAX Settings in JavaScript\nDESCRIPTION: This snippet sets up global configurations for all AJAX requests. It enables flash message handling, disables the progress bar, and defines custom handlers for error and flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:setup', function(event) {\n    const { options } = event.detail.context;\n\n    // Enable AJAX handling of Flash messages on all AJAX requests\n    options.flash = true;\n\n    // Disable the progress bar for all AJAX requests\n    options.progressBar = false;\n\n    // Handle Error Messages by triggering a flashMsg of type error\n    options.handleErrorMessage = function(message) {\n        oc.flashMsg({ message: message, type: 'error' });\n    }\n\n    // Handle Flash Messages by triggering a flashMsg of the message type\n    options.handleFlashMessage = function(message, type) {\n        oc.flashMsg({ message: message, type: type });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Calling AJAX Handlers in API Endpoints\nDESCRIPTION: Demonstrates how to call an AJAX handler inside an API endpoint using the ajaxHandler() Twig function. This example shows how to handle authentication in an API using an existing component handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/api/signin\n\n[account]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set result = ajaxHandler('onSignin') %}\n\n{% if result.error %}\n    {% do response({ message: 'Login Failed' }, 401) %}\n{% else %}\n    {% do response({ success: true }) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Validation Messages in PHP\nDESCRIPTION: Shows how to specify a custom validation message for a specific field and rule combination.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Log Channel Mode in October CMS\nDESCRIPTION: This snippet demonstrates how to configure different logging drivers in the logging.php configuration file. It shows how to set the default channel to 'daily' instead of the default 'single' file mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/errors-logging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('LOG_CHANNEL', 'daily'),\n```\n\n----------------------------------------\n\nTITLE: Accessing Inverse Polymorphic Relationship\nDESCRIPTION: Shows how to access videos related to a tag using dynamic properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$tag = Tag::find(1);\n\nforeach ($tag->videos as $video) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a BelongsTo Relationship in OctoberCMS (PHP)\nDESCRIPTION: Demonstrates how to define a basic belongsTo relationship in a Comment model to reference its parent Post. This allows a child model to access its parent through a dynamic property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    public $belongsTo = [\n        'post' => 'Acme\\Blog\\Models\\Post'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: File Download CMS Page Implementation\nDESCRIPTION: Complete CMS page implementation for downloading a model file attachment with validation and custom filename support.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n## pages/download-file.htm\n\ntitle = \"Download File\"\nurl = \"/download-file/:id/:disk_name/:file_name?\"\nlayout = \"default\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $file = System\\Models\\File::find($this->param('id'));\n    if (!$file || !$file->isPublic()) {\n        throw new NotFoundException;\n    }\n\n    if ($file->disk_name !== $this->param('disk_name')) {\n        throw new NotFoundException;\n    }\n\n    $customFileName = $this->param('file_name');\n    if ($customFileName) {\n        $file->file_name = $customFileName;\n    }\n\n    return $file->download();\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Many-to-Many Relationships in PHP\nDESCRIPTION: Demonstrates how to use the 'sync' method to efficiently update many-to-many relationships, ensuring only specified IDs exist in the intermediate table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1, 2, 3]);\n\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Basic Component Rendering in a CMS Template\nDESCRIPTION: This snippet shows a complete example of rendering a blog component in a CMS template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[blog]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'blog' %}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Validator Resolver in PHP\nDESCRIPTION: Shows how to define a custom validator resolver for handling multiple custom validation rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nValidator::resolver(function($translator, $data, $rules, $messages, $customAttributes) {\n    return new CustomValidator($translator, $data, $rules, $messages, $customAttributes);\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Relation Configuration in PHP\nDESCRIPTION: PHP code demonstrating how to extend and modify relation behavior configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendConfig($config, $field, $model)\n{\n    if (!$model instanceof MyModel || $field != 'myField') {\n        return;\n    }\n\n    if ($model->mode == 'b2b') {\n        $config->view['list'] = '$/author/plugin_name/models/mymodel/b2b_columns.yaml';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Attributes to JSON Serialization\nDESCRIPTION: Examples showing how to add custom attributes to JSON output using accessors and the $appends property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Get the administrator flag for the user.\n     *\n     * @return bool\n     */\n    public function getIsAdminAttribute()\n    {\n        return $this->attributes['admin'] == 'yes';\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Failed Job Event Handler in October CMS\nDESCRIPTION: PHP code to register an event handler for failed queue jobs. This allows custom actions to be performed when a job fails, such as sending notifications.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nQueue::failing(function($connection, $job, $data) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Raw String Emails with Markdown Parsing\nDESCRIPTION: Example of sending an email with raw string content that will be parsed by Markdown.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nMail::raw('Text to e-mail', function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns\nDESCRIPTION: Uses the select method to specify which columns to retrieve, including the ability to alias columns with custom names using 'as'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->select('name', 'email as user_email')->get();\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Partials in October CMS\nDESCRIPTION: Shows how to render a partial from a component using its fully qualified name in October CMS Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'componentName::component-partial' %}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Resources Component for Variables in October CMS\nDESCRIPTION: Demonstrates how to create a new variable 'activeNav' using the resources component and access it in Twig templates. The variable is defined in the component parameters and becomes available in the page lifecycle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[resources]\nvars[activeNav] = 'blog'\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if activeNav == 'blog' %}\n    <p>The blog is active!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing API Middleware with Layouts\nDESCRIPTION: Shows how to create layout-based middleware for API endpoints using October CMS layouts with priority mode. This example demonstrates conditional logic that can be applied to multiple API endpoints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"API Authentication\"\nis_priority = 1\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if someCondition %}\n    {% page %}\n{% else %}\n    {% do response({ message: 'Condition not met' }, 400) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Contextual Logging in October CMS\nDESCRIPTION: Example of logging with additional contextual data provided as an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/log.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nLog::info('User failed to login.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: One-to-One Relation Configuration in OctoberCMS\nDESCRIPTION: YAML configuration for a one-to-one relationship (person having one phone). Shows form view with update and delete toolbar buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\nphone:\n    label: ÁîµËØù\n    view:\n        form: $/acme/user/models/phone/fields.yaml\n        toolbarButtons: update|delete\n    manage:\n        form: $/acme/user/models/phone/fields.yaml\n        list: $/acme/user/models/phone/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Extending User Model with Event Handlers (PHP)\nDESCRIPTION: Practical example of how to extend a User model by binding to its local events to modify attribute access behavior, with two different approaches.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    [...]\n\n    public function boot()\n    {\n        // Local event hook that affects all users\n        User::extend(function ($model) {\n            $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n                if ($attribute === 'foo') {\n                    return 'bar';\n                }\n            });\n        });\n\n        // Double event hook that affects user #2 only\n        User::extend(function ($model) {\n            $model->bindEvent('model.afterFetch', function () use ($model) {\n                if ($model->id !== 2) {\n                    return;\n                }\n\n                $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n                    if ($attribute === 'foo') {\n                        return 'bar';\n                    }\n                });\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Weekly Schedule in PHP for October CMS\nDESCRIPTION: This example shows how to create a more complex schedule that runs a task weekly on Mondays at 13:00 using method chaining in the October CMS command scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$schedule->call(function () {\n    // Runs once a week on Monday at 13:00...\n})->weekly()->mondays()->at('13:00');\n```\n\n----------------------------------------\n\nTITLE: Implementing Number Filter Scope Method in PHP\nDESCRIPTION: Demonstrates the implementation of a custom scope method in PHP for handling different number filter conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-number.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction scopeNumberFilter($query, $scope)\n{\n    if ($scope->condition === 'equals') {\n        $query->where('age', $scope->value);\n    }\n    elseif ($scope->condition === 'between') {\n        $query\n            ->where('age', '>=', $scope->min)\n            ->where('age', '<=', $scope->max);\n    }\n    elseif ($scope->condition === 'greater') {\n        $query->where('age', '>=', $scope->value);\n    }\n    else {\n        $query->where('age', '<=', $scope->value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Query Results\nDESCRIPTION: Demonstrates how to iterate through the results returned by the query builder, accessing properties on each result object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Markup Tags Base Structure\nDESCRIPTION: Basic structure for registering custom Twig filters and functions through the registerMarkupTags method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMarkupTags()\n{\n    return [\n        'filters' => [\n            // ...Filters defined here\n        ],\n        'functions' => [\n            // ...Functions defined here\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Route Groups in October CMS\nDESCRIPTION: Example of applying middleware to a group of routes using the middleware parameter in the group definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['middleware' => 'Path\\To\\Your\\Middleware'], function() {\n    Route::get('info', 'Acme\\News@info');\n});\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler with Validation in PHP\nDESCRIPTION: Example of an AJAX handler that performs validation and redirects with errors if validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function onRegister()\n{\n    $rules = [];\n\n    $validator = Validator::make(Input::all(), $rules);\n\n    if ($validator->fails()) {\n        return Redirect::to('register')->withErrors($validator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships on Unsaved Models\nDESCRIPTION: This code shows how relationships can be defined on unsaved models, with the association being deferred until the model is saved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\n$post = new Post;\n\n$post->comments = [$comment];\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Views with fireViewEvent\nDESCRIPTION: Example of using the fireViewEvent method in a backend view to create extension points for other plugins to inject HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"footer-area-extension\">\n    <?= $this->fireViewEvent('backend.auth.extendSigninView', [$firstParam]) ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Authentication to HTTP Request\nDESCRIPTION: Shows how to add basic authentication credentials to an HTTP request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nHttp::withBasicAuth('user', 'password')->post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Selectively Flashing Input to Session in PHP\nDESCRIPTION: Shows how to selectively flash only specific input fields to the session or exclude certain fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nInput::flashOnly('username', 'email');\n\nInput::flashExcept('password');\n```\n\n----------------------------------------\n\nTITLE: Wildcard Event Listeners in October CMS - PHP\nDESCRIPTION: Example of subscribing to multiple events using wildcard patterns, where the listener receives the event name and parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('foo.*', function($event, $params) {\n    // Handle the event...\n});\n```\n\n----------------------------------------\n\nTITLE: Deferring Relation Binding in PHP\nDESCRIPTION: Demonstrates how to use deferred binding to postpone model relationship binding until the master record is saved, using a session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$sessionKey = uniqid('session_key', true);\n\n$comment = new Comment;\n$comment->content = \"Hello world!\";\n$comment->save();\n\n$post = new Post;\n$post->comments()->add($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Implementing unless() Method in PHP Collections\nDESCRIPTION: The unless() method executes a given callback unless the first argument evaluates to true. It's useful for conditional operations on collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_69\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$collection->unless(true, function ($collection) {\n    return $collection->push(4);\n});\n\n$collection->unless(false, function ($collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Creating an AJAX Handler in a Component\nDESCRIPTION: Example of implementing an AJAX handler method in a component class to process form submissions with two values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function onAddItem()\n{\n    $value1 = post('value1');\n    $value2 = post('value2');\n    $this->page['result'] = $value1 + $value2;\n}\n```\n\n----------------------------------------\n\nTITLE: Using str_contains() String Helper in PHP\nDESCRIPTION: The str_contains function determines if the given string contains the given value. It returns a boolean indicating whether the string contains the specified substring.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$value = str_contains('The bird goes tweet', 'bird');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Inserting Related Models in OctoberCMS\nDESCRIPTION: Shows how to insert related models using relationship methods, including adding single and multiple related models, and working with pivot data in many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment(['message' => 'A new comment.']);\n\n$post = Post::find(1);\n\n$comment = $post->comments()->add($comment);\n\n// Adding multiple related models\n$post->comments()->addMany([\n    new Comment(['message' => 'A new comment.']),\n    new Comment(['message' => 'Another comment.']),\n]);\n\n// Adding with pivot data\n$user = User::find(1);\n\n$pivotData = ['expires' => $expires];\n\n$user->roles()->add($role, $pivotData);\n\n// Using deferred binding\n$user->roles()->add($role, $sessionKey, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Running Queue Worker with Retry Limit in Bash\nDESCRIPTION: Artisan command to start a queue worker with a specified number of retry attempts. This command runs the queue worker for a specific connection and sets the maximum number of job retry attempts to 3.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work connection-name --tries=3\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Navigation Menu in October CMS Plugin (PHP)\nDESCRIPTION: This snippet demonstrates how to register a top-level navigation menu item with two sub-menu items in an October CMS plugin. It includes options for labels, URLs, icons, permissions, ordering, and counters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function registerNavigation()\n{\n    return [\n        'blog' => [\n            'label'       => 'Blog',\n            'url'         => Backend::url('acme/blog/posts'),\n            'icon'        => 'icon-pencil',\n            'permissions' => ['acme.blog.*'],\n            'order'       => 500,\n            'counter'     => ['\\Author\\Plugin\\Classes\\MyMenuCounterService', 'getBlogMenuCount'],\n            'counterLabel'=> 'Label describing a dynamic menu counter',\n            'badge'       => 'New'\n\n            'sideMenu' => [\n                'posts' => [\n                    'label'       => 'Posts',\n                    'icon'        => 'icon-copy',\n                    'url'         => Backend::url('acme/blog/posts'),\n                    'permissions' => ['acme.blog.access_posts'],\n                    'counter'     => 2,\n                    'counterLabel'=> 'Label describing a static menu counter',\n                ],\n                'categories' => [\n                    'label'       => 'Categories',\n                    'icon'        => 'icon-copy',\n                    'url'         => Backend::url('acme/blog/categories'),\n                    'permissions' => ['acme.blog.access_categories'],\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a File Using the Local Disk in October CMS\nDESCRIPTION: Example of how to store a file using the local disk driver. When using the local driver, all file operations are relative to the root directory defined in your configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nStorage::disk('local')->put('file.txt', 'Contents');\n```\n\n----------------------------------------\n\nTITLE: Registering Advanced Settings Model with Keywords in October CMS PHP\nDESCRIPTION: Shows how to register a settings model with additional configuration options including keywords for search, permissions, and custom ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'settings' => [\n            'label' => 'User Settings',\n            'description' => 'Manage user based settings.',\n            'category' => 'Users',\n            'icon' => 'icon-cog',\n            'class' => \\Acme\\User\\Models\\UserSetting::class,\n            'order' => 500,\n            'keywords' => 'security location',\n            'permissions' => ['acme.users.access_settings']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Visible Attributes in Model Serialization\nDESCRIPTION: Example of specifying which attributes should be visible in serialization using the $visible property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Media Assets with Twig Filter\nDESCRIPTION: Demonstrates how to generate URLs for media assets using the |media Twig filter, which converts relative paths in the media directory to complete URLs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'relative/path/to/asset.jpg'|media }}\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Dropdown Properties in PHP\nDESCRIPTION: This snippet shows how to create dropdown properties with dependencies. It defines two properties where the second one (state) depends on the selection of the first one (country).\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dropdown.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title' => 'Country',\n            'type' => 'dropdown',\n            'default' => 'us'\n        ],\n        'state' => [\n            'title' => 'State',\n            'type' => 'dropdown',\n            'default' => 'dc',\n            'depends' => ['country'],\n            'placeholder' => 'Select a state'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Passwords Against Hash in PHP\nDESCRIPTION: Using the Hash facade's check method to verify that a plain-text password matches a previously hashed password. Returns boolean true if passwords match.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/hashing-encryption.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::check('plain-text', $hashedPassword)) {\n    // The passwords match...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Console Command Structure in OctoberCMS\nDESCRIPTION: Template for creating a console command named 'acme:mycommand'. Includes required properties like signature and description, and the handle method that executes when the command is called.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Console;\n\nuse Illuminate\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass MyCommand extends Command\n{\n    /**\n     * @var string signature for the console command.\n     */\n    protected $signature = 'acme:mycommand {user}';\n\n    /**\n     * @var string description for the console command.\n     */\n    protected $description = 'Does something cool.';\n\n    /**\n     * handle executes the console command.\n     */\n    public function handle()\n    {\n        $username = $this->argument('user');\n\n        $this->output->writeln(\"Hello {$username}!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Templates in PHP\nDESCRIPTION: Method implementation for registering mail templates in a plugin registration file\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailTemplates()\n{\n    return [\n        'rainlab.user:activate' => 'rainlab.user::mail.activate',\n        'rainlab.user:restore' => 'rainlab.user::mail.restore',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Events in PHP\nDESCRIPTION: Demonstrates how to fire an event with parameters using the Event::fire method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('auth.login', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Multiple Validation Rules in PHP\nDESCRIPTION: Demonstrates using array syntax to specify multiple validation rules for a field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$validator = Validator::make(\n    ['name' => 'Joe'],\n    ['name' => ['required', 'min:5']]\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Middleware via Kernel in October CMS\nDESCRIPTION: Example of registering custom middleware directly into the HTTP Kernel in October CMS. This approach allows adding middleware to the beginning or end of the middleware stack using the prependMiddleware or pushMiddleware methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    // Add a new middleware to beginning of the stack.\n    $this->app[\\Illuminate\\Contracts\\Http\\Kernel::class]\n            ->prependMiddleware('Path\\To\\Custom\\Middleware');\n\n    // Add a new middleware to end of the stack.\n    $this->app[\\Illuminate\\Contracts\\Http\\Kernel::class]\n            ->pushMiddleware('Path\\To\\Custom\\Middleware');\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Attributes from JSON Serialization in PHP\nDESCRIPTION: Shows how to hide specific attributes (like passwords) from appearing in JSON or array representations by defining a $hidden property in the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Flash Messages with Validation\nDESCRIPTION: Shows how to display both validation errors and flash messages simultaneously by including the 'validate' type with the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request-validate\n    data-request-flash=\"success,error,validate\">\n```\n\n----------------------------------------\n\nTITLE: Update or Insert Records with updateOrInsert in PHP\nDESCRIPTION: Shows how to update an existing record or create it if no matching record exists using the updateOrInsert method. The method takes two arrays: conditions to find the record and column-value pairs to update.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->updateOrInsert(\n        ['email' => 'john@example.com', 'name' => 'John'],\n        ['votes' => '2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Event in PHP\nDESCRIPTION: Demonstrates how to fire a custom event with arguments and handle the result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Single result, event halted\n$result = Event::fire('acme.blog.myevent', [...], true);\n\n// Multiple results, all events fired\n$results = Event::fire('acme.blog.myevent', [...]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic List Controller\nDESCRIPTION: Shows how to implement the ListController behavior in a basic controller class with configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ListController::class\n    ];\n\n    public $listConfig = 'list_config.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Class Constructors\nDESCRIPTION: Example showing how to extend a class constructor dynamically using the static extend method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMyNamespace\\Controller::extend(function($controller) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Queue Worker Command Line Usage\nDESCRIPTION: Various command line options for running queue workers using artisan commands\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work\n```\n\n----------------------------------------\n\nTITLE: Programmatically Overriding Localization Strings in PHP\nDESCRIPTION: Demonstrates how to use the Lang::set method to override localization strings in PHP, including specifying a locale.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nLang::set('I love programming.', 'Coding is the best!');\n\nLang::set('I love programming.', 'Le codage est le meilleur!', 'fr');\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Usage in Twig\nDESCRIPTION: Demonstrates the basic syntax for applying filters to variables using the pipe symbol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'string'|filter }}\n```\n\n----------------------------------------\n\nTITLE: Executing AJAX Request with Flash Message in JavaScript\nDESCRIPTION: This code shows how to make an AJAX request using the 'oc.ajax' method. It includes a custom flash message handler that displays the message using 'oc.flashMsg'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\noc.ajax('onDoSomething', {\n    flash: true,\n    handleFlashMessage: function(message, type) {\n        oc.flashMsg({ message: message, type: type });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Conditional Validation Example\nDESCRIPTION: Implementation of complex conditional validation with static and dynamic rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'required|email',\n    'games' => 'required|numeric',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Using str_camel() Function in Twig\nDESCRIPTION: Demonstrates how to use the str_camel() function in Twig, which is equivalent to Str::camel() in PHP. This function converts a string to camelCase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Str::camel() ?>\n```\n\n----------------------------------------\n\nTITLE: Conditional Navigation Items in PHP\nDESCRIPTION: Example of creating conditional primary navigation buttons using visibleOn property to show/hide based on active submenu.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'people_create' => [\n    'label' => 'New Person',\n    'icon' => 'icon-plus',\n    'url' => Backend::url('acme/blog/people/create'),\n    'itemType' => 'primary',\n    'visibleOn' => 'people',\n],\n'post_create' => [\n    'label' => 'New Post',\n    'icon' => 'icon-plus',\n    'url' => Backend::url('acme/blog/people/create'),\n    'itemType' => 'primary',\n    'visibleOn' => 'posts',\n],\n```\n\n----------------------------------------\n\nTITLE: Example Paginated API Response Structure\nDESCRIPTION: Shows the JSON structure output by a paginated API response. This includes the data array, navigation links (first, last, prev, next), and metadata about the pagination state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {},\n    \"links\": {\n        \"first\": \"https://yoursite.tld/api/blog/posts?page=1\",\n        \"last\": \"https://yoursite.tld/api/blog/posts?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\": {\n        \"path\": \"https://yoursite.tld/api/blog/posts\",\n        \"per_page\": 3,\n        \"total\": 2,\n        \"current_page\": 1,\n        \"last_page\": 1,\n        \"from\": 1,\n        \"to\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Options Method for Dropdown Filter\nDESCRIPTION: Shows how to configure a dropdown filter to use a dynamic options method defined in the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: dropdown\n    optionsMethod: getStatusOptions\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Priorities with Multiple Connections\nDESCRIPTION: Demonstrates how to set queue priorities by passing a comma-delimited list of queue connections to the work command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work --once --queue=high,low\n```\n\n----------------------------------------\n\nTITLE: Using Named Error Bags in PHP\nDESCRIPTION: Shows how to use named error bags for multiple forms on a single page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('register')->withErrors($validator, 'login');\n```\n\n----------------------------------------\n\nTITLE: Creating File Instance from Raw Data in PHP\nDESCRIPTION: Illustrates how to create a File instance directly from raw data in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$file = (new System\\Models\\File)->fromData('Some content', 'sometext.txt');\n```\n\n----------------------------------------\n\nTITLE: Keying Collection by Specified Value with keyBy() in PHP\nDESCRIPTION: The keyBy method keys the collection by a given attribute key. If multiple items have the same key, only the last one will appear in the new collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product_id' => 'prod-100', 'name' => 'chair'],\n    ['product_id' => 'prod-200', 'name' => 'desk'],\n]);\n\n$keyed = $collection->keyBy('product_id');\n\n$keyed->all();\n\n/*\n    [\n        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Chair'],\n        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Desk'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Input Macro with Parameters in Twig\nDESCRIPTION: Example of a macro function that creates an HTML input element with customizable parameters for name, value, type, and size.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input(name, value, type, size) %}\n    <input\n        type=\"{{ type|default('text') }}\"\n        name=\"{{ name }}\"\n        value=\"{{ value|e }}\"\n        size=\"{{ size|default(20) }}\" />\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript API with Form\nDESCRIPTION: Demonstrates how to trigger an AJAX request on a form using the JavaScript API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script> oc.request('#myForm', 'onSubmitContactForm') </script>\n```\n\n----------------------------------------\n\nTITLE: Implementing onRun Method for Page Execution Cycle\nDESCRIPTION: Example of implementing the onRun method in a component class to inject variables into the Twig environment during page loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    // This code will be executed when the page or layout is\n    // loaded and the component is attached to it.\n\n    $this->page['var'] = 'value'; // Inject some variable to the page\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in PHP AJAX Handlers\nDESCRIPTION: Demonstrates various ways to handle file downloads in PHP AJAX handlers, including downloading local files, streaming content, and using storage services.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/downloads.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function onExport()\n{\n    return Response::download(base_path('app/files/installer.zip'));\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function onExport()\n{\n    return Response::streamDownload(function() {\n        echo 'CSV Contents...';\n    }, 'export.csv');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function onExport()\n{\n    return Storage::disk('media')->download('archive.zip');\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function onDownload()\n{\n    // ...\n\n    return $model->avatar->download();\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving a Type from the IoC Container in October CMS\nDESCRIPTION: Shows how to resolve a previously bound type from the IoC container, which executes the associated Closure callback and returns the result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = App::make('foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing SettingsModel Behavior in PHP\nDESCRIPTION: Example of creating a settings model that extends the Model class and implements the SettingsModel behavior for database-stored plugin settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Demo\\Models;\n\nuse Model;\n\nclass Settings extends Model\n{\n    public $implement = [\\System\\Behaviors\\SettingsModel::class];\n\n    // Áã¨‰∏ÄÊó†‰∫åÁöÑÊ†áËØÜÁ¨¶\n    public $settingsCode = 'acme_demo_settings';\n\n    // ÂèÇËÄÉÂ≠óÊÆµÈÖçÁΩÆ\n    public $settingsFields = 'fields.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Sub-view in Parent View with Twig\nDESCRIPTION: Shows how to render a nested sub-view within a parent view using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello!</h1>\n        {{ child|raw }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Registering an Event Subscriber from IoC Container - PHP\nDESCRIPTION: Example of registering an event subscriber by class name, allowing the Application IoC container to resolve it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nEvent::subscribe('UserEventHandler');\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Promise Chain\nDESCRIPTION: Demonstrates how to chain additional promises after the default success handler completes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {success: function(data) {\n    this.success(data).done(function() {\n        //... do something after parent success() is finished ...\n    });\n}})\n```\n\n----------------------------------------\n\nTITLE: Delayed Mail Queue Implementation in PHP\nDESCRIPTION: Demonstrates how to delay email delivery using the Mail::later method with a specified time delay in seconds.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nMail::later(5, 'acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting Collection Items in PHP\nDESCRIPTION: Shows how to use the sort() method to sort the items in a collection. It also mentions advanced sorting using callbacks and sorting nested arrays or objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([5, 3, 1, 2, 4]);\n\n$sorted = $collection->sort();\n\n$sorted->values()->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Individual Routes in October CMS\nDESCRIPTION: Example of registering middleware for a single route instead of globally across all routes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('info', 'Acme\\News@info')->middleware('Path\\To\\Your\\Middleware');\n```\n\n----------------------------------------\n\nTITLE: Implementing Touchable Relationships\nDESCRIPTION: Shows how to set up automatic timestamp updates on parent models when related models are modified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    protected $touches = ['post'];\n\n    public $belongsTo = [\n        'post' => ['Acme\\Blog\\Models\\Post']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Column Value\nDESCRIPTION: Uses the value method to extract a single column value from a record matching the specified condition without retrieving the entire row.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Configuring a Form Widget in YAML\nDESCRIPTION: Example of configuring a form widget in a form field definition using YAML syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\nborn_at:\n    label: Âá∫ÁîüÊó•Êúü\n    type: datepicker\n    mode: date\n    minDate: 1984-04-12\n    maxDate: 2014-04-23\n```\n\n----------------------------------------\n\nTITLE: Registering New Backend User in October CMS\nDESCRIPTION: Example of registering a new administrator user account using the BackendAuth facade. Shows required fields including first name, last name, login, email and password.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/users.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = BackendAuth::register([\n    'first_name' => 'Some',\n    'last_name' => 'User',\n    'login' => 'someuser',\n    'email' => 'some@website.tld',\n    'password' => 'changeme',\n    'password_confirmation' => 'changeme'\n]);\n```\n\n----------------------------------------\n\nTITLE: Registering Global Vue Component in October CMS\nDESCRIPTION: Demonstrates how to register a global Vue component using Vue.component within an October CMS control. The component template is derived from the control element and hidden after initialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"my-vue-component\">\n    <button @click=\"greet\">Greet</button>\n</div>\n\n<script>\noc.registerControl('my-vue-component', class extends oc.ControlBase {\n    init() {\n        Vue.component('my-vue-component', {\n            template: this.element,\n            methods: {\n                greet: this.greet\n            }\n        });\n    }\n\n    connect() {\n        this.element.style.display = 'none';\n    }\n\n    greet(event) {\n        alert('Hello!');\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Incrementing Values with Additional Updates in PHP\nDESCRIPTION: Shows how to increment a column value while simultaneously updating other columns in the same operation, providing a more efficient way to perform multiple updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: String Length Limitation Functions\nDESCRIPTION: Functions for limiting string length by characters or words, with optional custom suffixes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/str.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100) }}\n{{ str_limit('The quick brown fox...', 100, '... Read more!') }}\n{{ str_words('The quick brown fox...', 100) }}\n{{ str_words('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Models in PHP\nDESCRIPTION: Demonstrates how to insert new records and update existing ones using model instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/model.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$flight = new Flight;\n$flight->name = 'ÊÇâÂ∞ºÈ£ûÂæÄÂ†™ÂüπÊãâ';\n$flight->save();\n\n$flight = Flight::find(1);\n$flight->name = '‰∏äÊµ∑È£ûÂæÄÂåó‰∫¨';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: Overriding Behavior AJAX Handler in PHP\nDESCRIPTION: Illustrates how to override an AJAX handler from a behavior in the controller, allowing custom logic before calling the original behavior method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/ajax.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction onDoSomething()\n{\n    // Custom logic here\n    // ...\n\n    // Call the extension handler\n    return $this->asExtension('FormController')->doSomething();\n}\n```\n\n----------------------------------------\n\nTITLE: Localization and Configuration Functions in PHP\nDESCRIPTION: Helper functions for accessing translations, configuration values and environment variables in OctoberCMS\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\necho trans('validation.required');\n$value = trans_choice('foo.bar', $count);\n$value = config('app.timezone');\nconfig(['app.debug' => true]);\n$env = env('APP_ENV', 'production');\n```\n\n----------------------------------------\n\nTITLE: Creating Forms That Point to Handler Methods\nDESCRIPTION: Example showing how to open a form that points to a handler method in a page or component using the request option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['request' => 'onSave'])\n```\n\n----------------------------------------\n\nTITLE: Creating File Attachments from Input\nDESCRIPTION: Various methods for creating file attachments from user input or file paths.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/attachments.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar = Input::file('file_input');\n\n$model->avatar = '/path/to/somefile.jpg';\n\n$file = (new System\\Models\\File)->fromData('Some content', 'sometext.txt');\n```\n\n----------------------------------------\n\nTITLE: Registering Role-Based Permissions in October CMS\nDESCRIPTION: Demonstrates registering permissions with specific role assignments for system roles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_categories' => [\n            'label' => 'Manage the blog categories',\n            'tab' => 'Blog',\n            'order' => 200,\n            'roles' => ['developer']\n        ]\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Naming Foreign Key Constraint in PHP with October CMS Schema\nDESCRIPTION: This code shows how to manually specify a name for a foreign key constraint when creating it using the Schema builder in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$table->foreign('user_id', 'user_foreign')\n    ->references('id')\n    ->on('users');\n```\n\n----------------------------------------\n\nTITLE: Event Subscriber Class Implementation\nDESCRIPTION: Shows how to create an event subscriber class that handles multiple events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass UserEventHandler\n{\n    public function subscribe($events)\n    {\n        $events->listen('auth.login', [static::class, 'userLogin']);\n\n        $events->listen('auth.logout', [static::class, 'userLogout']);\n    }\n\n    public function userLogin($event)\n    {\n        // ...\n    }\n\n    public function userLogout($event)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Scopes in PHP using OctoberCMS Model\nDESCRIPTION: This snippet demonstrates how to define a dynamic scope that accepts parameters in a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Scope a query to only include users of a given type.\n     */\n    public function scopeApplyType($query, $type)\n    {\n        return $query->where('type', $type);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Partial Rendering in Twig\nDESCRIPTION: Shows the equivalent partial rendering syntax for the {% component %} tag, which renders the default.htm partial of the 'blogPosts' component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-component.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blogPosts::default\" %}\n```\n\n----------------------------------------\n\nTITLE: Modifying Referenced Arguments in Event Listeners - PHP\nDESCRIPTION: Example of event listeners that modify a variable passed by reference, with each listener building on the changes of the previous one.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('cms.processContent', function (&$content) {\n    $content = $content . 'A';\n});\n\nEvent::listen('cms.processContent', function (&$content) {\n    $content = $content . 'B';\n});\n```\n\n----------------------------------------\n\nTITLE: Limiting Query Results with skip and take in PHP\nDESCRIPTION: Demonstrates how to limit the number of results returned from a database query using skip (offset) and take (limit) methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->skip(10)->take(5)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Associative Arrays with mapWithKeys() in PHP\nDESCRIPTION: The mapWithKeys method transforms a collection into an associative array by having each callback return a key/value pair. This is useful for restructuring data into a new format with custom keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    [\n        'name' => 'John',\n        'department' => 'Sales',\n        'email' => 'john@example.tld'\n    ],\n    [\n        'name' => 'Jane',\n        'department' => 'Marketing',\n        'email' => 'jane@example.tld'\n    ]\n]);\n\n$keyed = $collection->mapWithKeys(function ($item) {\n    return [$item['email'] => $item['name']];\n});\n\n$keyed->all();\n\n/*\n    [\n        'john@example.tld' => 'John',\n        'jane@example.tld' => 'Jane',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Accessing Relationship as Dynamic Property - PHP\nDESCRIPTION: Shows how to lazily load relationship data by accessing it as a dynamic property, which simplifies code but may lead to N+1 query problems without eager loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->posts as $post) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Columns in PHP\nDESCRIPTION: Shows various methods for querying JSON columns, including simple key access, nested key access, and array operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('options->language', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->where('preferences->dining->meal', 'salad')\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', ['en', 'de'])\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', 0)\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler Integration\nDESCRIPTION: Example of calling AJAX handlers in API endpoints and handling responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/building-apis.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/api/signin\n\n[account]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set result = ajaxHandler('onSignin') %}\n\n{% if result.error %}\n    {% do response({ message: 'Login Failed' }, 401) %}\n{% else %}\n    {% do response({ success: true }) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Direct AJAX Request Without Form\nDESCRIPTION: Example of making an AJAX request without a form element using the global $.request method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n$.request('onCalculate', {\n    success: function() {\n        console.log('Finished!');\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Updating Elements with AJAX Form Submission in HTML\nDESCRIPTION: This snippet demonstrates how to trigger the onCalculate handler when a form is submitted and update an element with ID 'result' with the 'calcresult' partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onCalculate\" data-request-update=\"calcresult: '#result'\">\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping Values in Collections with wrap Method in PHP\nDESCRIPTION: The static wrap method creates a new collection by wrapping the given value. If the value is already a collection, it returns it unchanged.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$collection = Collection::wrap('John Doe');\n\n$collection->all();\n\n// ['John Doe']\n\n$collection = Collection::wrap(['John Doe']);\n\n$collection->all();\n\n// ['John Doe']\n\n$collection = Collection::wrap(new Collection('John Doe'));\n\n$collection->all();\n\n// ['John Doe']\n```\n\n----------------------------------------\n\nTITLE: Mail Template Registration in PHP\nDESCRIPTION: Demonstrates how to register mail templates, partials, and layouts in a plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailTemplates()\n{\n    return [\n        'rainlab.user::mail.activate',\n        'rainlab.user::mail.restore'\n    ];\n}\n\npublic function registerMailPartials()\n{\n    return [\n        'tracking'  => 'acme.blog::partials.tracking',\n        'promotion' => 'acme.blog::partials.promotion',\n    ];\n}\n\npublic function registerMailLayouts()\n{\n    return [\n        'marketing'    => 'acme.blog::layouts.marketing',\n        'notification' => 'acme.blog::layouts.notification',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Jobs with Artisan\nDESCRIPTION: Artisan command to retry a specific failed job by its ID. The example shows retrying a job with ID 5.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:retry 5\n```\n\n----------------------------------------\n\nTITLE: Disabling Deferred Binding in PHP\nDESCRIPTION: Shows how to disable deferred binding for a model by setting sessionKey to null in the constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct(...func_get_args());\n\n    $this->bindEvent('model.saveInternal', function () {\n        $this->sessionKey = null;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming and Dropping Tables\nDESCRIPTION: Methods for renaming an existing table or dropping tables from the database schema. The dropIfExists method safely removes a table only if it exists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSchema::rename($from, $to);\n```\n\nLANGUAGE: php\nCODE:\n```\nSchema::drop('users');\n\nSchema::dropIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Managing Flash Data in Session using PHP\nDESCRIPTION: Examples of storing and managing flash data that persists only for the next request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nSession::flash('key', 'value');\n\nSession::reflash();\n\nSession::keep(['username', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Widget in YAML for October CMS\nDESCRIPTION: Shows the configuration for a file upload widget in YAML. This widget can handle image or regular file uploads, with options for specifying dimensions, file types, and other upload parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Â§¥ÂÉè\n    type: fileupload\n    mode: image\n    imageHeight: 260\n    imageWidth: 260\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Method in PHP\nDESCRIPTION: Shows how to get the HTTP method of the current request and check for specific methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$method = Request::method();\n\nif (Request::isMethod('post')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Database Transactions\nDESCRIPTION: Shows how to manually commit a database transaction when operations complete successfully.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nDb::commit();\n```\n\n----------------------------------------\n\nTITLE: Queueing a Closure in PHP\nDESCRIPTION: Demonstrates how to push a Closure (anonymous function) onto the queue for simple tasks, including how to delete the job when complete.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nQueue::push(function($job) use ($id) {\n    Account::delete($id);\n\n    $job->delete();\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Cache Values in PHP\nDESCRIPTION: Examples of incrementing and decrementing integer values stored in cache, with optional amount parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nCache::increment('key');\n\nCache::increment('key', $amount);\n\nCache::decrement('key');\n\nCache::decrement('key', $amount);\n```\n\n----------------------------------------\n\nTITLE: Managing File Uploads in October CMS with PHP\nDESCRIPTION: Examples of working with uploaded files in October CMS. Shows how to retrieve file objects, validate uploads, move files to new locations, and access file metadata.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/request-input.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$file = Input::file('photo');\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Input::hasFile('photo')) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Input::file('photo')->isValid()) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nInput::file('photo')->move($destinationPath);\n\nInput::file('photo')->move($destinationPath, $fileName);\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = Input::file('photo')->getRealPath();\n```\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::file('photo')->getClientOriginalName();\n```\n\nLANGUAGE: php\nCODE:\n```\n$extension = Input::file('photo')->getClientOriginalExtension();\n```\n\nLANGUAGE: php\nCODE:\n```\n$size = Input::file('photo')->getSize();\n```\n\nLANGUAGE: php\nCODE:\n```\n$mime = Input::file('photo')->getMimeType();\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Response in Twig\nDESCRIPTION: Demonstrates how to return a simple JSON response using the response() function. This will automatically set the content-type to application/json.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/response.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({ foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Both Validation Errors and Flash Messages\nDESCRIPTION: Form configuration to display both validation errors and flash messages simultaneously by using a wildcard with the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request-validate\n    data-request-flash=\"*\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Message Replacer in PHP\nDESCRIPTION: Shows how to define custom placeholder replacements for validation error messages using the replacer method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Validator::replacer('foo', function ($message, $attribute, $rule, $parameters) {\n        return str_replace(':column', $parameters[0], $message);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Routing Parameters in PHP Components\nDESCRIPTION: Code example showing how to access URL segment values in an OctoberCMS component using the param() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Returns the URL segment value, eg: /page/:post_id\n$postId = $this->param('post_id');\n```\n\n----------------------------------------\n\nTITLE: Union Queries in Database Operations\nDESCRIPTION: Shows how to combine two queries using union operations. Demonstrates both basic union and unionAll functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n    ->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Firing Both Local and Global Events (PHP)\nDESCRIPTION: Best practice for firing both local and global events, with the local event taking priority. The global event includes the object instance as the first parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->fireEvent('post.beforePost', [$firstParam, $secondParam]);\nEvent::fire('rainlab.blog.beforePost', [$this, $firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Using html_clean() to Prevent XSS Attacks\nDESCRIPTION: Shows how to use html_clean() to sanitize HTML and prevent cross-site scripting (XSS) attacks by removing dangerous content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<script>window.location = \"http://google.com\"</script>'|html_clean }}\n```\n\n----------------------------------------\n\nTITLE: Specifying Page Number in Model Pagination\nDESCRIPTION: Example showing how to specify the page number when paginating model results by passing it as the second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15, 2);\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Relationships in OctoberCMS\nDESCRIPTION: Demonstrates how to use eager loading to optimize database queries when accessing related models. It covers basic, multiple, and nested eager loading scenarios.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author')->get();\n\nforeach ($books as $book) {\n    echo $book->author->name;\n}\n\n// Eager loading multiple relationships\n$books = Book::with('author', 'publisher')->get();\n\n// Nested eager loading\n$books = Book::with('author.contacts')->get();\n```\n\n----------------------------------------\n\nTITLE: Halting Event Propagation in October CMS - PHP\nDESCRIPTION: Example of stopping the propagation of an event to other listeners by returning false from the event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($event) {\n    // Handle the event\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic One-to-One Relationships in OctoberCMS Models\nDESCRIPTION: This snippet shows how to define polymorphic one-to-one relationships in Photo, Staff, and Product models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass Photo extends Model\n{\n    public $morphTo = [\n        'imageable' => []\n    ];\n}\n\nclass Staff extends Model\n{\n    public $morphOne = [\n        'photo' => ['Acme\\Blog\\Models\\Photo', 'name' => 'imageable']\n    ];\n}\n\nclass Product extends Model\n{\n    public $morphOne = [\n        'photo' => ['Acme\\Blog\\Models\\Photo', 'name' => 'imageable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Available Methods on Message Builder in PHP\nDESCRIPTION: Lists the available methods on the $message message builder instance for customizing email properties in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$message->from($address, $name = null);\n$message->sender($address, $name = null);\n$message->to($address, $name = null);\n$message->cc($address, $name = null);\n$message->bcc($address, $name = null);\n$message->replyTo($address, $name = null);\n$message->subject($subject);\n$message->priority($level);\n$message->attach($pathToFile, array $options = []);\n\n// Attach a file from a raw $data string...\n$message->attachData($data, $name, array $options = []);\n```\n\n----------------------------------------\n\nTITLE: Component Registration in Plugin\nDESCRIPTION: Example of registering a component in the plugin registration file\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerComponents()\n{\n    return [\n        \\October\\Demo\\Components\\Todo::class => 'demoTodo'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Indexes\nDESCRIPTION: Examples of creating different types of database indexes\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$table->string('email')->unique();\n\n$table->unique('email');\n\n$table->index(['account_id', 'created_at']);\n\n$table->index(['account_id', 'created_at'], 'account_created');\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Provider at Runtime in PHP\nDESCRIPTION: Shows how to dynamically register a service provider at runtime using the App::register method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nApp::register('FooServiceProvider');\n```\n\n----------------------------------------\n\nTITLE: Creating Objects from Collection Values with mapInto() in PHP\nDESCRIPTION: The mapInto method iterates over the collection, creating new instances of a specified class by passing each value to the class constructor. This facilitates object creation from collection data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nclass Currency\n{\n    /**\n     * Create a new currency instance.\n     *\n     * @param  string  $code\n     * @return void\n     */\n    function __construct(string $code)\n    {\n        $this->code = $code;\n    }\n}\n\n$collection = new Collection(['AUD', 'USD', 'GBP']);\n\n$currencies = $collection->mapInto(Currency::class);\n\n$currencies->all();\n\n// [Currency('AUD'), Currency('USD'), Currency('GBP')]\n```\n\n----------------------------------------\n\nTITLE: Self-Updating Ajax Partial\nDESCRIPTION: Example of using the ajaxPartial tag for self-updating partial content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'mytime' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Revisionable Trait in October CMS Model\nDESCRIPTION: Shows how to set up revision history tracking in a model by implementing the Revisionable trait and configuring monitored attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Revisionable;\n\n    protected $revisionable = ['name', 'email'];\n\n    public $morphMany = [\n        'revision_history' => [\\System\\Models\\Revision::class, 'name' => 'revisionable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Attributes in Model Serialization\nDESCRIPTION: Shows how to exclude sensitive attributes from JSON/array serialization using the $hidden property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeater Widget in YAML\nDESCRIPTION: Configuration for a repeater widget that creates repeatable form field sets with support for grouping and different display styles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    titleFrom: title_when_collapsed\n    form:\n        fields:\n            added_at:\n                label: Date added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n            title_when_collapsed:\n                label: This field is the title when collapsed\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response in PHP\nDESCRIPTION: Shows how to create a JSON response, which automatically sets the Content-Type header and encodes the given array as JSON.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA']);\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments by Reference in PHP Events\nDESCRIPTION: Shows how to pass arguments by reference in events, allowing multiple listeners to manipulate the result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('cms.processContent', [&$content]);\n\nEvent::listen('cms.processContent', function (&$content) {\n    $content = $content . 'A';\n});\n\nEvent::listen('cms.processContent', function (&$content) {\n    $content = $content . 'B';\n});\n```\n\n----------------------------------------\n\nTITLE: Event Listeners with Reference Arguments\nDESCRIPTION: Illustrates how to define event listeners that accept arguments by reference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('cms.processContent', function (&$content) {\n    $content = $content . 'A';\n});\n\nEvent::listen('cms.processContent', function (&$content) {\n    $content = $content . 'B';\n});\n```\n\n----------------------------------------\n\nTITLE: Binding an Existing Instance to the IoC Container in PHP\nDESCRIPTION: Shows how to bind an already instantiated object into the IoC container using the instance method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = new Foo;\n\nApp::instance('foo', $foo);\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Entries in PHP\nDESCRIPTION: Example of creating and updating entry records using the EntryRecord model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$post = EntryRecord::inSection('Blog\\Post');\n$post->title = 'Imported Post';\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple List Definitions in PHP\nDESCRIPTION: Demonstrates how to set up multiple list configurations in an October CMS controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic $listConfig = [\n    'templates' => 'config_templates_list.yaml',\n    'layouts' => 'config_layouts_list.yaml'\n];\n```\n\n----------------------------------------\n\nTITLE: Working with Array-Cast Attributes\nDESCRIPTION: Demonstrates manipulating an array-cast attribute that is automatically serialized to JSON\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$options = $user->options;\n\n$options['key'] = 'value';\n\n$user->options = $options;\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Throwing AjaxException in PHP\nDESCRIPTION: Illustrates throwing an AjaxException, which is a 'smart error' that returns HTTP code 406. It allows passing response contents as if they were a successful response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException(['#flashMessages' => $this->renderPartial(...)]);\n```\n\n----------------------------------------\n\nTITLE: Firing Custom Events in PHP\nDESCRIPTION: Demonstrates how to fire custom events using Event::fire, including passing arguments and specifying halting behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.myevent', [$arg1, $arg2]);\n\n// With halting\nEvent::fire('acme.blog.myevent', [...], true);\n```\n\n----------------------------------------\n\nTITLE: Creating Month Dropdowns with Selected Value and Empty Option\nDESCRIPTION: Example demonstrating how to create a month dropdown with a pre-selected month and a blank option at the top.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectMonth('month', 2, ['emptyOption' => 'Choose month...']) ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing filterFields Method in PHP for October CMS\nDESCRIPTION: Shows how to implement the filterFields method in a model to dynamically show or hide fields based on the values of other fields, working in conjunction with the dependsOn property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    $displayedVendors = strtolower($this->dnsprovider->name . $this->registrar->name);\n    if (str_contains($displayedVendors, 'provider1')) {\n        $fields->{'specificfields[for][provider1]'}->hidden = false;\n    }\n    if (str_contains($displayedVendors, 'provider2')) {\n        $fields->{'specificfields[for][provider2]'}->hidden = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Remember Operations\nDESCRIPTION: Methods for retrieving cached items with automatic storage of default values if not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::remember('users', $seconds, function() {\n    return Db::table('users')->get();\n});\n\n$value = Cache::rememberForever('users', function() {\n    return Db::table('users')->get();\n});\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Chained Success Handler\nDESCRIPTION: Example of running custom code after the default success handler completes using promise chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {success: function(data) {\n    this.success(data).done(function() {\n        //... do something after parent success() is finished ...\n    });\n}})\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in OctoberCMS Controller\nDESCRIPTION: Demonstrates how to check user permissions in a controller to limit functionality based on user access rights using the hasAccess and hasPermission methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif ($this->user->hasAccess('acme.blog.*')) {\n    // ...\n}\n\nif ($this->user->hasPermission([\n    'acme.blog.access_posts',\n    'acme.blog.access_categories'\n])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Collections in PHP\nDESCRIPTION: The forget method removes an item from the collection by its key. Unlike most other collection methods, forget modifies the collection it is called on.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$collection->forget('name');\n\n$collection->all();\n\n// ['platform' => 'october']\n```\n\n----------------------------------------\n\nTITLE: Attribute Casting in PHP for OctoberCMS Model\nDESCRIPTION: This snippet demonstrates how to use attribute casting in a User model. It casts the 'is_admin' attribute to a boolean and the 'options' attribute to an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/mutators.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be casted to native types.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n        'options' => 'array',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Error Messages Display\nDESCRIPTION: HTML container for displaying multiple error messages using the data-message attribute to replicate elements for each error.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-danger\" data-validate-error>\n    <p data-message></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Referencing a Component with an Alias in Twig\nDESCRIPTION: This snippet shows how to reference a component with an alias in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' %}\n```\n\n----------------------------------------\n\nTITLE: Adding Regular Expression Constraints to Route Parameters in October CMS\nDESCRIPTION: Examples of constraining route parameters using regular expressions with the where method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{name}', function ($name) {\n    //\n})->where('name', '[A-Za-z]+');\n\nRoute::get('user/{id}', function ($id) {\n    //\n})->where('id', '[0-9]+');\n\nRoute::get('user/{id}/{name}', function ($id, $name) {\n    //\n})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);\n```\n\n----------------------------------------\n\nTITLE: Disposing Event Listeners on Page Unload\nDESCRIPTION: This JavaScript example shows how to properly clean up event listeners when navigating away from a page, preventing memory leaks and event listener accumulation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_23\n\nLANGUAGE: js\nCODE:\n```\naddEventListener('page:unload', function() {\n    removeEventListener('keydown', myKeyDownFunction);\n}, { once: true });\n```\n\n----------------------------------------\n\nTITLE: Custom Response with Status Code\nDESCRIPTION: Creates a custom response with specific content and HTTP status code using Response::make().\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = 'Page not found';\n$statusCode = 404;\nreturn Response::make($contents, $statusCode);\n```\n\n----------------------------------------\n\nTITLE: Making an AJAX Request with Flash Message Handling\nDESCRIPTION: Shows how to execute a single AJAX request that triggers the 'onDoSomething' handler and displays a flash message with custom handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$.request('onDoSomething', {\n    flash: 1,\n    handleFlashMessage: function(message, type) {\n        $.oc.flashMsg({ text: message, class: type })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Fully Customized BelongsTo Relationship with otherKey Parameter (PHP)\nDESCRIPTION: Shows how to customize both the foreign key on the child model and the referenced key on the parent model using 'key' and 'otherKey' parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => ['Acme\\Blog\\Models\\Post', 'key' => 'my_post_id', 'otherKey' => 'my_id']\n];\n```\n\n----------------------------------------\n\nTITLE: Named Parameter Binding in SQL Queries\nDESCRIPTION: Demonstrates using named parameters in SQL queries instead of question mark placeholders.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$results = Db::select('select * from users where id = :id', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Including Custom Flash Messages in Forms with AJAX\nDESCRIPTION: Shows how to include a custom flash message partial in a form using the ajaxPartial tag and update it through AJAX requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<form>\n    {% ajaxPartial 'flash-messages' %}\n\n    <label>Title</label>\n    <input name=\"title\" />\n\n    <button\n        data-request=\"onSave\"\n        data-request-update=\"{ flash-messages: true }\">\n        Save\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Plugin Test Case\nDESCRIPTION: Example of a PHP test case for an October CMS plugin model. Demonstrates basic test structure and assertions using the PluginTestCase base class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/unit-testing.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Tests\\Models;\n\nuse Acme\\Blog\\Models\\Post;\nuse PluginTestCase;\n\nclass PostTest extends PluginTestCase\n{\n    public function testCreateFirstPost()\n    {\n        $post = Post::create(['title' => 'Hi!']);\n        $this->assertEquals(1, $post->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Form Widgets in October CMS Plugin\nDESCRIPTION: This code snippet demonstrates how to register form widgets in an October CMS plugin by overriding the registerFormWidgets method in the plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerFormWidgets()\n{\n    return [\n        \\Backend\\FormWidgets\\ColorPicker::class => 'colorpicker',\n        \\Backend\\FormWidgets\\DatePicker::class => 'datepicker'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Response in Twig\nDESCRIPTION: Basic example of returning a JSON response using the response() function. This will return the payload with application/json content type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/response.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({ foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Grouping Collection Items with groupBy Method in PHP\nDESCRIPTION: Groups collection items by a specified key or callback function. Can group by direct key access or custom logic via callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n    ['account_id' => 'account-x10', 'product' => 'Chair'],\n    ['account_id' => 'account-x11', 'product' => 'Desk'],\n]);\n\n$grouped = $collection->groupBy('account_id');\n```\n\n----------------------------------------\n\nTITLE: Using Flash Facade in PHP for Different Message Types\nDESCRIPTION: Shows how to use the Flash facade in PHP to display different types of messages (success, error, warning, info) after a request completes, typically in AJAX handlers or component logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction onSave()\n{\n    // Sets a successful message\n    Flash::success('Settings successfully saved!');\n\n    // Sets an error message\n    Flash::error('Something went wrong...');\n\n    // Sets a warning message\n    Flash::warning('Please confirm your email address soon');\n\n    // Sets an informative message\n    Flash::info('The export is still processing. Please try again in a minute.');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Options for Autocomplete in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to implement dynamic options for the autocomplete inspector type in OctoberCMS. It defines a property and a method to provide options dynamically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-autocomplete.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'sortColumn' => [\n            'title' => 'Sort by Column',\n            'type' => 'autocomplete',\n            // ...\n        ],\n    ];\n}\n\npublic function getSortColumnOptions()\n{\n    return [\n        'create' => 'Create',\n        'update' => 'Update',\n        'delete' => 'Delete',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Backend Controller Access in October CMS\nDESCRIPTION: Example of implementing permission-based access control in backend controllers using required permissions property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Controllers;\n\nuse Backend\\Classes\\BackendController;\n\nclass Posts extends BackendController\n{\n    public $requiredPermissions = ['acme.blog.access_posts'];\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Worker Daemon Command\nDESCRIPTION: Command to run the queue worker as a continuous daemon process for processing queued jobs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/scheduler.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Casting in Model\nDESCRIPTION: Shows how to configure automatic type casting for model attributes\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * @var array casts attributes to native types.\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Template in Twig\nDESCRIPTION: Demonstrates the simplest possible layout implementation with the page tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Contact Form Snippet Implementation\nDESCRIPTION: Complete implementation of a basic contact form snippet with AJAX handling\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/snippets.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[viewBag]\nsnippetCode = \"contactForm\"\nsnippetName = \"Contact Form\"\nsnippetDescription = \"Display a contact form\"\nsnippetAjax = 1\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContact()\n{\n    $this['submitted'] = true;\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if not submitted %}\n    <h3>Tell us what you think!</h3>\n    <form data-request=\"onSubmitContact\" data-request-update=\"{ _self: true }\">\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <div class=\"form-floating mb-3\">\n                    <input name=\"name\" type=\"text\" class=\"form-control\">\n                    <label>Name</label>\n                </div>\n            </div>\n            <div class=\"col-md-6\">\n                <div class=\"form-floating mb-3\">\n                    <input name=\"email\" type=\"email\" class=\"form-control\">\n                    <label>Email Address</label>\n                </div>\n            </div>\n        </div>\n        <div class=\"mb-3 form-floating\">\n            <textarea class=\"form-control h-100\"></textarea>\n            <label>Message</label>\n        </div>\n        <div class=\"form-buttons d-flex pt-2\">\n            <div>\n                <button type=\"submit\" class=\"btn btn-primary btn-pill\">Submit</button>\n            </div>\n        </div>\n    </form>\n{% else %}\n    <div class=\"alert alert-success\">\n        Thanks for contacting us!\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Global Rule with Parameters\nDESCRIPTION: Demonstrates a complete implementation of a global validation rule that accepts parameters. Includes methods for validation, error message customization, and parameter replacement in error messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nclass BetwixtRule\n{\n    /**\n     * validate between start and end parameters.\n     */\n    public function validate($attribute, $value, $params)\n    {\n        [$start, $end] = $params;\n\n        return strlen($value) > $start && strlen($value) < $end;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be between :start and :end.';\n    }\n\n    /**\n     * replace defines custom placeholder replacements.\n     * @return string\n     */\n    public function replace($message, $attribute, $rule, $params)\n    {\n        [$start, $end] = $params;\n\n        $message = str_replace(':start', $start, $message);\n\n        $message = str_replace(':end', $end, $message);\n\n        return $message;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting LESS/SCSS Assets\nDESCRIPTION: Shows how to inject and compile LESS/SCSS assets using the combiner.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/less/base.less']);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Nested Twig Macros\nDESCRIPTION: Illustrates how to define and use nested macros within the same template. The example shows an input macro and a wrapped_input macro that uses the input macro.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/macro.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input(name, value, type, size) %}\n    <input\n        type=\"{{ type|default('text') }}\"\n        name=\"{{ name }}\"\n        value=\"{{ value|e }}\"\n        size=\"{{ size|default(20) }}\" />\n{% endmacro %}\n\n{% macro wrapped_input(name, value, type, size) %}\n    {% import _self as form %}\n\n    <div class=\"field\">\n        {{ form.input(name, value, type, size) }}\n    </div>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Appending Query Parameters to Pagination Links in PHP\nDESCRIPTION: Demonstrates how to append additional query string parameters to pagination links using the appends method. This is useful when preserving filter parameters across pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho $users->appends(['sort' => 'votes'])->render();\n```\n\n----------------------------------------\n\nTITLE: Defining Arguments with Default Values in Console Command Signature\nDESCRIPTION: Shows how to define arguments with default values in the command signature. Default values are specified after an equal sign and are used when the argument is not provided.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user=foo}';\n```\n\n----------------------------------------\n\nTITLE: Using unless() Method in PHP Collections\nDESCRIPTION: Shows how to conditionally execute code on a collection using the unless method when a condition is false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$collection->unless(true, function ($collection) {\n    return $collection->push(4);\n});\n\n$collection->unless(false, function ($collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Customizing Many-to-Many Join Table - PHP\nDESCRIPTION: Shows how to customize the join table name and key columns in a many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'table' => 'acme_blog_role_user',\n        'key' => 'my_user_id',\n        'otherKey' => 'my_role_id'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Model Attribute for Custom Link Display in PHP\nDESCRIPTION: Defines a model attribute modifier that creates a website_link attribute combining URL and name fields for use with linkage columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-linkage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getWebsiteLinkAttribute()\n{\n    return [$this->url, $this->name];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mail::sendTo Method in October CMS\nDESCRIPTION: Examples of using the simplified Mail::sendTo method for sending emails to various recipient types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Send to address using no name\nMail::sendTo('admin@domain.tld', 'acme.blog::mail.message', $params);\n\n// Send using an object's properties\nMail::sendTo($user, 'acme.blog::mail.message', $params);\n\n// Send to multiple addresses\nMail::sendTo(['admin@domain.tld' => 'Admin Person'], 'acme.blog::mail.message', $params);\n\n// Alternatively send a raw message without parameters\nMail::rawTo('admin@domain.tld', 'Hello friend');\n```\n\n----------------------------------------\n\nTITLE: Using File Upload Field in OctoberCMS\nDESCRIPTION: Shows how to implement a file upload field in OctoberCMS forms for uploading files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{fileupload name=\"logo\" label=\"Logo\"}defaultlogo.png{/fileupload}\n```\n\n----------------------------------------\n\nTITLE: Extracting a Single Value from a Record in PHP\nDESCRIPTION: Uses the value method to extract a single value from a record. This method returns the value of the specified column directly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$email = Db::table('users')->where('name', 'John')->value('email');\n```\n\n----------------------------------------\n\nTITLE: Splicing Collection in PHP\nDESCRIPTION: Shows how to use the splice() method to remove and return a slice of items from a collection, optionally replacing them with new items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2);\n\n$chunk->all();\n\n// [3, 4, 5]\n\n$collection->all();\n\n// [1, 2]\n\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1, [10, 11]);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 10, 11, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Customizing Component Markup in a Theme Partial\nDESCRIPTION: Demonstrates how to customize component markup by moving it to a theme partial and replacing the __SELF__ variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ blogPost.post.title }}</h1>\n<p>{{ blogPost.post.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin in OctoberCMS\nDESCRIPTION: The create:plugin command generates a plugin folder and basic files for the plugin. The parameter specifies the author and plugin name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:plugin Acme.Blog\n```\n\n----------------------------------------\n\nTITLE: Using Not Found Exceptions with Models in October CMS PHP\nDESCRIPTION: Demonstrates methods that throw exceptions when records are not found, useful for routes and controllers to automatically generate 404 responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$model = Flight::findOrFail(1);\n\n$model = Flight::where('legs', '>', 100)->firstOrFail();\n```\n\n----------------------------------------\n\nTITLE: Basic File Upload Form in HTML with October CMS\nDESCRIPTION: HTML form setup for uploading a single file using October CMS AJAX framework. The form includes the data-request-files attribute to enable file uploads and connects to an onUploadFiles AJAX handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onUploadFiles\" data-request-files>\n    <div>\n        <label>Single File</label>\n        <input name=\"single_file\" type=\"file\">\n    </div>\n\n    <button data-attach-loading>\n        Upload\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Constructor Extension Example\nDESCRIPTION: Demonstrates how to extend a class constructor using the static extend method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMyClass::extend(function($controller) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing ValidationException with Error Messages\nDESCRIPTION: Example of throwing a ValidationException with an array of field-specific error messages in OctoberCMS. Used for form validation failures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nthrow new ValidationException(['username' => 'Sorry that username is already taken!']);\n```\n\n----------------------------------------\n\nTITLE: Array Validation Implementation\nDESCRIPTION: Examples of validating array inputs using dot notation and wildcards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(input(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(input(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(input(), [\n    'photos[profile]' => 'required|image',\n    'person[][email]' => 'email|unique:users',\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Form View for Update Page in October CMS\nDESCRIPTION: Shows an example of an update.htm view file for the Update page in October CMS. It includes form rendering, save and delete buttons with AJAX handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class'=>'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div class=\"loading-indicator-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"close:true\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                data-load-indicator=\"Saving Category...\"\n                class=\"btn btn-default\">\n                Save and Close\n            </button>\n            <button\n                type=\"button\"\n                class=\"oc-icon-trash-o btn-icon danger pull-right\"\n                data-request=\"onDelete\"\n                data-load-indicator=\"Deleting Category...\"\n                data-request-confirm=\"Do you really want to delete this category?\">\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Custom Pivot Model Definition\nDESCRIPTION: Shows how to specify a custom pivot model for a many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'pivotModel' => \\Acme\\Blog\\Models\\UserRolePivot::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Media Provider in October CMS\nDESCRIPTION: PHP configuration for using Amazon S3 as the media provider in October CMS. This includes settings for API credentials, bucket information, region, and URL configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/providers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'disks' => [\n    // ...\n    'media' => [\n        'driver' => 's3',\n        'key'    => 'XXXXXXXXXXXXXXXXXXXX',\n        'secret' => 'xxxXxXX+XxxxxXXxXxxxxxxXxxXXXXXXXxxxX9Xx',\n        'region' => 'us-west-2',\n        'bucket' => 'my-bucket',\n        'url' => 'https://s3-us-west-2.amazonaws.com/your-bucket-name',\n        'visibility' => 'public',\n        'throw' => false\n    ],\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget for Multiple Image Selection in YAML\nDESCRIPTION: This example demonstrates how to set up the Media Finder widget for selecting multiple images. It uses the 'maxItems' property to limit the number of selectable items to 10.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-mediafinder.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_gallery:\n    label: Image\n    type: mediafinder\n    mode: image\n    maxItems: 10\n```\n\n----------------------------------------\n\nTITLE: Storing Items in Cache with Expiration in PHP\nDESCRIPTION: Examples of storing items in cache using the put method with different expiration time formats.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nCache::put('key', 'value', $seconds);\n```\n\n----------------------------------------\n\nTITLE: Outputting Injected Assets in October CMS Templates\nDESCRIPTION: This snippet shows how to output the injected CSS and JavaScript assets in a Twig template using the styles and scripts tags. These tags render all assets that have been added with the addCss and addJs methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Form Fields Definition in YAML\nDESCRIPTION: Example of defining form fields with labels, descriptions, and field types in YAML format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# fields.yaml\nfields:\n    blog_title:\n        label: Blog Title\n        description: The title for this blog\n\n    published_at:\n        label: Published date\n        description: When this blog post was published\n        type: datepicker\n\ntabs:\n    fields:\n        # [...]\n\nsecondaryTabs:\n    fields:\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Has One Through Model Definition\nDESCRIPTION: PHP model class showing how to define a Has One Through relationship with custom key configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nclass Supplier extends Model\n{\n    public $hasOneThrough = [\n        'userHistory' => [\n            \\Acme\\Supplies\\Model\\History::class,\n            'through' => \\Acme\\Supplies\\Model\\User::class\n        ],\n    ];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic $hasOneThrough = [\n    'userHistory' => [\n        \\Acme\\Supplies\\Model\\History::class,\n        'key' => 'supplier_id',\n        'through' => \\Acme\\Supplies\\Model\\User::class,\n        'throughKey' => 'user_id',\n        'otherKey' => 'id',\n        'secondOtherKey' => 'my_country_id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying a Relation Manager\nDESCRIPTION: PHP code demonstrating how to initialize a model for relation management and render a relation manager on a page, with an option to set it as read-only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::where('id', 7)->first();\n$this->initRelation($post);\n```\n\n----------------------------------------\n\nTITLE: Defining Has One Through Relationship in OctoberCMS Model (PHP)\nDESCRIPTION: Illustrates how to define a has-one-through relationship in an OctoberCMS model. This relationship links models through a single intermediate relation, such as a Supplier accessing a user's history through the User model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass Supplier extends Model\n{\n    public $hasOneThrough = [\n        'userHistory' => [\n            \\Acme\\Supplies\\Model\\History::class,\n            'through' => \\Acme\\Supplies\\Model\\User::class\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Form Helper Usage Between PHP and Twig in October CMS\nDESCRIPTION: Examples showing how to convert Form helper function calls between PHP and Twig syntax in October CMS. In Twig, functions are prefixed with 'form_' and use snake_case naming.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n// PHP\n<?= Form::open(..) ?>\n\n// Twig\n{{ form_open(...) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Exception Handler with Response in October CMS\nDESCRIPTION: Shows how to create an exception handler that returns a response. When a handler returns a response, it's sent to the browser and no other error handlers are called.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(InvalidUserException $exception) {\n    return 'Sorry! Something is wrong with this account!';\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Form Field in YAML\nDESCRIPTION: Demonstrates the basic structure for defining a form field in YAML format with a type property, which is the fundamental way to configure field elements in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    myfield:\n        type: textarea\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Relation Controller in PHP\nDESCRIPTION: Basic controller setup showing how to implement relation behavior alongside form behavior in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Projects\\Controllers;\n\nclass Projects extends Controller\n{\n    public $implement = [\n        'Backend.Behaviors.FormController',\n        'Backend.Behaviors.RelationController',\n    ];\n\n    public $formConfig = 'config_form.yaml';\n    public $relationConfig = 'config_relation.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Twig Macro with Parameters\nDESCRIPTION: Shows how to define a macro with multiple parameters. This example creates an input macro that accepts name, value, type, and size parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/macro.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input(name, value, type, size) %}\n    <input\n        type=\"{{ type|default('text') }}\"\n        name=\"{{ name }}\"\n        value=\"{{ value|e }}\"\n        size=\"{{ size|default(20) }}\" />\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Rule Objects in PHP\nDESCRIPTION: Shows how to create and use a local validation rule object that implements the Rule contract.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass LowercaseRule implements \\Illuminate\\Contracts\\Validation\\Rule\n{\n    /**\n     * passes checks if the rule is successful\n     * @param  string  $attribute\n     * @param  mixed  $value\n     * @return bool\n     */\n    public function passes($attribute, $value)\n    {\n        return strtolower($value) === $value;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be lowercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Conditions in Database\nDESCRIPTION: Demonstrates how to update existing records in a database table using conditions with the where method followed by the update method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->where('id', 1)\n    ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with Attributes in Twig\nDESCRIPTION: Demonstrates adding HTML attributes to an AJAX form by passing them as the second parameter to form_ajax().\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_ajax('onSave', { class: 'form-horizontal'}) }}\n```\n\n----------------------------------------\n\nTITLE: Creating File Attachment from Local Path in PHP\nDESCRIPTION: Shows how to create a file attachment from a local file path in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar = '/path/to/somefile.jpg';\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Forms with Custom Fields\nDESCRIPTION: Example of listening to the backend.form.extendFields event to add custom fields to a backend form when specific conditions are met, including adding and removing fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Extend all backend form usage\nEvent::listen('backend.form.extendFields', function($widget) {\n    // Only apply this listener when the Users controller is being used\n    if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n        return;\n    }\n\n    // Only apply this listener when the User model is being modified\n    if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n        return;\n    }\n\n    // Only apply this listener when the Form widget in question is a root-level\n    // Form widget (not a repeater, nestedform, etc)\n    if ($widget->isNested) {\n        return;\n    }\n\n    // Add an extra birthday field\n    $widget->addFields([\n        'birthday' => [\n            'label'   => 'Birthday',\n            'comment' => 'Select the users birthday',\n            'type'    => 'datepicker'\n        ]\n    ]);\n\n    // Remove a Surname field\n    $widget->removeField('surname');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Model in October CMS PHP\nDESCRIPTION: Shows methods for retrieving a single model instance by primary key or query constraints, rather than a collection of models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// Retrieve a model by its primary key\n$flight = Flight::find(1);\n\n// Retrieve the first model matching the query constraints\n$flight = Flight::where('active', 1)->first();\n```\n\n----------------------------------------\n\nTITLE: Triggering Global Events\nDESCRIPTION: Example of how to trigger global events that can be listened to anywhere in the application. Global events should be properly namespaced.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.post.beforePost', [$firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Binding Local Event Handlers to DOM Objects\nDESCRIPTION: Shows how to bind event handlers to specific DOM objects that were previously selected.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    init() {\n        this.$name = this.element.querySelector('input.name');\n    }\n\n    connect() {\n        this.listen('click', this.$name, this.onClickNameInput);\n    }\n\n    onClickNameInput() {\n        console.log('You clicked the name input inside the control!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Column Type in YAML\nDESCRIPTION: Demonstrates how to set up a select column using a custom SQL statement in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Returning Models Directly from Routes in PHP\nDESCRIPTION: Demonstrates how models and collections are automatically converted to JSON when returned directly from routes, AJAX handlers, or controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Default Values for Placeholder Variables in Twig\nDESCRIPTION: Shows how to provide a default value when accessing a placeholder variable using the placeholder() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% set active = placeholder('activeNav', 'home') }} %}\n```\n\n----------------------------------------\n\nTITLE: Creating Export Model in PHP\nDESCRIPTION: Example of creating an export model class that extends Backend\\Models\\ExportModel, showing implementation of exportData method for subscriber data export.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberExport extends \\Backend\\Models\\ExportModel\n{\n    public function exportData($columns, $sessionKey = null)\n    {\n        $subscribers = Subscriber::all();\n\n        $subscribers->each(function($subscriber) use ($columns) {\n            $subscriber->addVisible($columns);\n        });\n\n        return $subscribers->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Widget in YAML\nDESCRIPTION: Configuration for a relation widget that displays either a dropdown or checkbox list for model relationships with custom label options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n    nameFrom: title\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Component in October CMS\nDESCRIPTION: Example showing how to configure a global component using a Blog\\Config handle and access its fields in the template. The component makes a global record available using the blogConfig alias.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/global.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[global blogConfig]\nhandle = \"Blog\\Config\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ blogConfig.about_this_blog }}</p>\n```\n\n----------------------------------------\n\nTITLE: Authenticating User in OctoberCMS\nDESCRIPTION: Demonstrates how to authenticate a user by their credentials and how to sign in as a specific user using BackendAuth methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Authenticate user by credentials\n$user = BackendAuth::authenticate([\n    'login' => post('login'),\n    'password' => post('password')\n]);\n\n// Sign in as a specific user\nBackendAuth::login($user);\n```\n\n----------------------------------------\n\nTITLE: Throwing AjaxException in OctoberCMS\nDESCRIPTION: Example of throwing an AjaxException which returns HTTP code 406 with response contents. This allows for refreshing specific partials when an error occurs in AJAX requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException(['#flashMessages' => $this->renderPartial(...)]);\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework in Twig\nDESCRIPTION: Shows how to include the basic AJAX framework in an October CMS theme using a Twig tag that adds a reference to the frontend JavaScript library.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% framework %}\n```\n\n----------------------------------------\n\nTITLE: Using Media Twig Filter in OctoberCMS Templates\nDESCRIPTION: Demonstrates how to use the |media Twig filter to generate URLs for media assets in templates. The filter returns a URL relative to the media manager's public path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/media.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media }}\" />\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Related Records in Collections in October CMS\nDESCRIPTION: Example showing how to eager load related records for performance optimization using the 'load' method, loading the 'categories' relation for all posts in the collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% do authorPosts.load('categories') %}\n```\n\n----------------------------------------\n\nTITLE: Registering Container Events in October CMS\nDESCRIPTION: Shows how to register event listeners for when the IoC container resolves objects, allowing for object modification before they are returned.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::resolving(function ($object, $app) {\n    // Called when container resolves object of any type...\n});\n\nApp::resolving('foo', function ($fooBar, $app) {\n    // Called when container resolves objects using hint \"foo\"...\n});\n\nApp::resolving('Acme\\Blog\\Classes\\FooBar', function ($fooBar, $app) {\n    // Called when container resolves objects of type \"FooBar\"...\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor for Queue Management\nDESCRIPTION: Commands to update Supervisor configuration and start the queue worker processes after creating the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsudo supervisorctl reread\n\nsudo supervisorctl update\n\nsudo supervisorctl start october-worker:*\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs to Many Relation in YAML\nDESCRIPTION: YAML configuration for a basic Belongs to Many relationship showing the list and role management structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n        toolbarButtons: add|remove\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with BeforeUpdate Callback\nDESCRIPTION: Example of running custom code before page elements are updated from the server response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {\n    update: {calcresult: '.result'},\n    beforeUpdate: function() { /* do something */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Dependencies in PHP\nDESCRIPTION: Example of setting plugin dependencies in the plugin registration file. The Acme.Blog plugin requires Acme.User to be updated first.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/updates.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public $require = ['Acme.User'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeTense Column in October CMS\nDESCRIPTION: This configuration sets up a timetense column in October CMS, which displays time and day using grammatical tense relative to the current date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: timetense\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for All Fields in PHP\nDESCRIPTION: Demonstrates how to iterate over all error messages for all fields from the MessageBag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nforeach ($messages->all() as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Images with Absolute Paths for Queued Emails\nDESCRIPTION: Example of embedding an image with an absolute path using the app filter, which is necessary for queued emails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image:\n    {% set pathToFile = 'storage/app/media/path/to/file.jpg'|app %}\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Debugging HTTP Request with dd()\nDESCRIPTION: Shows how to debug an HTTP request by dumping its contents and terminating execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHttp::dd()->get('https://octobercms.com');\n```\n\n----------------------------------------\n\nTITLE: Global Validation Message Override in PHP\nDESCRIPTION: Shows how to override default validation messages globally in the system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'required' => 'The :attribute field is required!',\n    // ...\n\n    'custom' => [\n        // ...\n    ],\n\n    'attributes' => [\n        // ...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: PHP AJAX Handler for Calculation\nDESCRIPTION: An AJAX handler method in PHP that performs a calculation based on input values and assigns the result to a page variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onTest()\n{\n    $this->page['result'] = input('value1') + input('value2');\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Merging Configuration for Dynamic Behaviors\nDESCRIPTION: Example showing how to safely merge configuration when dynamically implementing a behavior to avoid conflicts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nUsersController::extend(function($controller) {\n\n    // Implement the list controller behavior dynamically\n    $controller->implementClassWith(\\Backend\\Behaviors\\RelationController::class);\n\n    // Define property if not already defined\n    $controller->addDynamicProperty('relationConfig');\n\n    // Splice in configuration safely\n    $controller->relationConfig = $controller->mergeConfig(\n        $controller->relationConfig,\n        '$/myvendor/myplugin/controllers/users/config_relation.yaml'\n    );\n\n});\n```\n\n----------------------------------------\n\nTITLE: Sorting PHP Collection by Key\nDESCRIPTION: The sortBy method sorts the collection by the given key. It can also use a custom callback for determining how to sort the collection values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk', 'price' => 200],\n    ['name' => 'Chair', 'price' => 100],\n    ['name' => 'Bookcase', 'price' => 150],\n]);\n\n$sorted = $collection->sortBy('price');\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'price' => 100],\n        ['name' => 'Bookcase', 'price' => 150],\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$sorted = $collection->sortBy(function ($product, $key) {\n    return count($product['colors']);\n});\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'colors' => ['Black']],\n        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Routes for All HTTP Verbs in October CMS\nDESCRIPTION: Demonstrates using the any method to register a route that responds to all HTTP verbs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::any('foo', function () {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with Laravel Sail\nDESCRIPTION: Command to download and install October CMS using Laravel Sail. Replace 'example-app' with the desired directory name for the installation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/using-laravel-sail.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://octobercms.com/api/laravelsail/example-app\" | bash\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Menu Labels in OctoberCMS (PHP)\nDESCRIPTION: This code snippet demonstrates how to extend the backend menu in OctoberCMS by replacing the labels for CMS and Pages items. It uses an event listener to modify the main menu and side menu items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    [...]\n\n    public function boot()\n    {\n        Event::listen('backend.menu.extendItems', function($manager) {\n\n            $manager->addMainMenuItems('October.Cms', [\n                'cms' => [\n                    'label' => '...'\n                ]\n            ]);\n\n            $manager->addSideMenuItems('October.Cms', 'cms', [\n                'pages' => [\n                    'label' => '...'\n                ]\n            ]);\n\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Validator with Rule Object in PHP\nDESCRIPTION: Shows how to extend the Validator with a Rule object class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nValidator::extend('uppercase', Uppercase::class);\n```\n\n----------------------------------------\n\nTITLE: Injecting Basic CSS and JavaScript Assets in October CMS\nDESCRIPTION: This snippet demonstrates how to inject individual CSS and JavaScript files into a page using the onStart function in the PHP section of a page or layout template. The paths are relative to the theme unless they begin with a slash.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Application Environment in October CMS\nDESCRIPTION: Demonstrates how to determine the current application environment using the App::environment method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// production\nApp::environment();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Polymorphic Types with morphMap - PHP\nDESCRIPTION: Demonstrates how to define a custom morph map to decouple database type values from class names. This improves maintainability by using simple identifiers instead of fully qualified class names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Relations\\Relation;\n\nRelation::morphMap([\n    'staff' => \\Acme\\Blog\\Models\\Staff::class,\n    'product' => \\Acme\\Blog\\Models\\Product::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: SQL Result of Grouped Where Conditions\nDESCRIPTION: Shows the resulting SQL query from using grouped where conditions with parentheses for complex filtering logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users where name = 'John' or (votes > 100 and title <> 'Admin')\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Layout Template with Page Tag in OctoberCMS\nDESCRIPTION: Example showing how to structure a basic layout template using the {% page %} tag and placeholders. The layout defines the HTML structure and includes a head placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\ndescription=\"example layout\"\n==\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    <body>\n        {% page %}\n        ...\n```\n\n----------------------------------------\n\nTITLE: Permissions Configuration for Form Controller\nDESCRIPTION: Configuration to restrict form controller actions based on user permissions, supporting both single permissions and arrays of permissions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    modelCreate: admins.manage.create\n    modelDelete: admins.manage.delete\n```\n\n----------------------------------------\n\nTITLE: RelationController YAML Configuration\nDESCRIPTION: Example YAML configuration for the RelationController behavior showing common options for managing related items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\nitems:\n    label: Invoice Line Item\n    view:\n        list: $/acme/pay/models/invoiceitem/columns.yaml\n        toolbarButtons: create|delete\n        recordsPerPage: 10\n    manage:\n        form: $/acme/pay/models/invoiceitem/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking for JSON Content\nDESCRIPTION: Demonstrates how to determine if the request has JSON content type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nif (Request::isJson()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Dissociating BelongsTo Relationships\nDESCRIPTION: This snippet demonstrates how to dissociate a belongsTo relationship without needing to pass the related model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$post->author()->dissociate();\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in init.php - PHP\nDESCRIPTION: Alternative approach for registering event listeners using an init.php file in the plugin directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nEvent::listen(...);\n```\n\n----------------------------------------\n\nTITLE: Defining a Behavior in October CMS\nDESCRIPTION: Example showing how a Behavior is defined by extending ExtensionBase class with constructor and methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UtilityFunctions extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $parent;\n\n    public function __construct($parent)\n    {\n        $this->parent = $parent;\n    }\n\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this->parent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to AJAX Forms\nDESCRIPTION: Example showing how to add attributes to an AJAX form, such as confirmation prompts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave', ['confirm' => 'Are you sure?'])\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Crypt Facade in PHP\nDESCRIPTION: Shows how to encrypt sensitive data using the Crypt facade's encrypt method before storing in a database model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/hash-crypt.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->secret = Crypt::encrypt('shhh no telling');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Tree in PHP Models\nDESCRIPTION: Demonstrates using the SimpleTree trait to create parent-child relationships between models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SimpleTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Successful AJAX Request in HTML\nDESCRIPTION: This code shows how to redirect to another page after a successful AJAX request, specifically redirecting to the admin page after login.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-redirect=\"/admin\">\n\n```\n\n----------------------------------------\n\nTITLE: Using Component Aliases in October CMS\nDESCRIPTION: This code snippet demonstrates how to create a component alias in October CMS. This is useful when there are two plugins with components of the same name, or when you need multiple instances of the same component on a page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[October\\Demo\\Components\\Todo demoTodoAlias]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Specifying Partials to Update in AJAX Forms\nDESCRIPTION: Example demonstrating how to specify which partials should be updated after an AJAX form submission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave', ['update' => [\n        'control-panel' => '#controlPanel',\n        'layout/sidebar' => '#layoutSidebar'\n    ]\n])\n```\n\n----------------------------------------\n\nTITLE: Verifying Passwords Against Hashed Values in PHP\nDESCRIPTION: Example demonstrating how to verify a plain-text password against a previously hashed password using the Hash facade's check method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/hashing-encryption.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::check('plain-text', $hashedPassword)) {\n    // The passwords match...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for a Field in PHP\nDESCRIPTION: Shows how to iterate over all error messages for a specific field from the MessageBag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\nforeach ($messages->get('email') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Callable Object Event Listener\nDESCRIPTION: Shows how to use a callable object as an event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', [$this, 'LoginHandler']);\n```\n\n----------------------------------------\n\nTITLE: Array Validation Examples\nDESCRIPTION: Demonstrates various methods for validating array inputs using dot notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(Input::all(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(Input::all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(Input::all(), [\n    'photos[profile]' => 'required|image',\n    'person[][email]' => 'email|unique:users',\n]);\n```\n\n----------------------------------------\n\nTITLE: Reading Values from Settings Model in PHP\nDESCRIPTION: Examples of different methods to read values from a settings model, including direct property access and the static get method with default values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/model-settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Outputs: ABCD\necho UserSetting::instance()->api_key;\n\n// Get a single value\necho UserSetting::get('api_key');\n\n// Get a value and return a default value if it doesn't exist\necho UserSetting::get('is_activated', true);\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Key Constraints in PHP Schema Builder\nDESCRIPTION: Demonstrates how to create foreign key constraints using the Schema builder in October CMS. Shows basic foreign key creation and options for customizing constraint behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->integer('user_id')->unsigned();\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Converting a Model to an Array in PHP\nDESCRIPTION: Demonstrates how to convert a model and its loaded relationships to an array using the toArray() method. This recursively converts all attributes and relations to arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::with('roles')->first();\n\nreturn $user->toArray();\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Redirect in PHP for October CMS\nDESCRIPTION: This PHP code snippet demonstrates how to override the redirect URL after saving a form by implementing the formGetRedirectUrl method in an October CMS controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic function formGetRedirectUrl($context = null, $model = null)\n{\n    return 'https://octobercms.com';\n}\n```\n\n----------------------------------------\n\nTITLE: User Authentication in October CMS Backend\nDESCRIPTION: Examples of authenticating users either by credentials or direct user model login.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Authenticate user by credentials\n$user = BackendAuth::authenticate([\n    'login' => post('login'),\n    'password' => post('password')\n]);\n\n// Sign in as a specific user\nBackendAuth::login($user);\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Named Routes in October CMS\nDESCRIPTION: Example of passing parameters to named routes when generating URLs with the route method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{id}/profile', ['as' => 'profile', function ($id) {\n    //\n}]);\n\n$url = Url::route('profile', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Building Email Messages with Advanced Options\nDESCRIPTION: Example of building an email message with advanced options like CC recipients and sender information using the callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n    Mail::send('acme.blog::mail.welcome', $vars, function($message) {\n\n        $message->from('us@example.com', 'October');\n        $message->to('foo@example.com')->cc('bar@example.com');\n\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing NestedTree Trait in PHP\nDESCRIPTION: This PHP code snippet shows how to use the NestedTree trait in a model class to enable fixed structure support with parent-child relationships and specific ordering of records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/reorder.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\NestedTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Database Migration in October CMS\nDESCRIPTION: The october:migrate command creates database tables and executes seed scripts from the system and plugin version history. It only applies new changes and can be run multiple times safely.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/updating-october.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Messages with JavaScript\nDESCRIPTION: Demonstrates how to display a flash message using JavaScript. This method allows for programmatic control over message content, type, and display duration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\noc.flashMsg({\n    message: 'Record has been successfully saved. This message will disappear in 1 second.',\n    type: 'success',\n    interval: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Programmatically Rendering Component Partials in PHP\nDESCRIPTION: Examples showing how to render component partials from PHP code using the renderPartial method with and without view variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$content = $this->renderPartial('@component-partial.htm');\n\n$content = $this->renderPartial('@component-partial.htm', [\n    'name' => 'John Smith'\n]);\n```\n\n----------------------------------------\n\nTITLE: PHP Event Registration for Custom Page Types\nDESCRIPTION: Shows how to register event listeners for extending page finder functionality in a plugin's boot method\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Event::listen('cms.pageLookup.listTypes', function() {\n        // ...\n    });\n\n    Event::listen('cms.pageLookup.getTypeInfo', function($type) {\n        // ...\n    });\n\n    Event::listen('cms.pageLookup.resolveItem', function($type, $item, $url, $theme) {\n        // ...\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handler Class with Default Method - PHP\nDESCRIPTION: Example of an event handler class that uses the default 'handle' method to process the event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nclass LoginHandler\n{\n    public function handle($data)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with Environment Variables\nDESCRIPTION: Sets up database connection parameters using environment variables in the .env file, which can override values specified in the config directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=database\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Response Headers Management\nDESCRIPTION: Shows how to attach multiple headers to a response using method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)\n    ->header('Content-Type', $type)\n    ->header('X-Header-One', 'Header Value')\n    ->header('X-Header-Two', 'Header Value');\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Scopes in YAML\nDESCRIPTION: This example demonstrates how to define various filter scopes in a YAML configuration file, including different types of filters such as category, status, date, and boolean filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filters.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# scopes.yaml\nscopes:\n\n    category:\n        label: Category\n        modelClass: Acme\\Blog\\Models\\Category\n        conditions: category_id in (:value)\n        nameFrom: name\n\n    status:\n        label: Status\n        type: group\n        conditions: status in (:value)\n        options:\n            pending: Pending\n            active: Active\n            closed: Closed\n\n    published:\n        label: Hide published\n        type: checkbox\n        default: 1\n        conditions: is_published <> true\n\n    approved:\n        label: Approved\n        type: switch\n        default: 2\n        conditions:\n            - is_approved <> true\n            - is_approved = true\n\n    created_at:\n        label: Date\n        type: date\n        conditions:\n            after: created_at >= ':value'\n            between: created_at >= ':after' AND created_at <= ':before'\n```\n\n----------------------------------------\n\nTITLE: Creating Component with October CMS Artisan Command\nDESCRIPTION: Generates a new component class and default component view. Requires plugin identifier and component class name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:component Acme.Blog Post\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Global Events in Plugin Boot Method (PHP)\nDESCRIPTION: Example of how to subscribe to a global event in a plugin's boot method. This snippet shows listening for a user registration event to add the user to a mailing list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Event::listen('rainlab.user.register', function ($user) {\n        // Code to register $user->email to mailing list\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Partial Template\nDESCRIPTION: Shows how to access variables passed to a partial using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/update-partials.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Hello world! -->\n{{ result }}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Model Scope in YAML and PHP\nDESCRIPTION: Shows how to define a custom model scope in YAML and implement it in PHP. This allows for applying custom constraints to the filter query using a model scope method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter-scopes.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmyfilter:\n    label: My Filter\n    type: group\n    modelScope: applyMyFilter\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeApplyMyFilter($query, $scope)\n{\n    return $query->whereIn('my_filter_attribute', (array) $scope->value);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Different Log Levels in October CMS\nDESCRIPTION: Demonstrates the eight logging levels defined in RFC 5424: emergency, alert, critical, error, warning, notice, info, and debug. Each level represents a different severity.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nLog::emergency($error);\nLog::alert($error);\nLog::critical($error);\nLog::error($error);\nLog::warning($error);\nLog::notice($error);\nLog::info($error);\nLog::debug($error);\n```\n\n----------------------------------------\n\nTITLE: Disabling Deferred Binding for a Model in October CMS (PHP)\nDESCRIPTION: This snippet shows how to disable deferred binding for a specific model in October CMS. It overrides the constructor to bind to the 'model.saveInternal' event, setting the sessionKey to null. This is useful when loading a model from a separate database connection. Note that this disables deferred binding entirely for any model with this override.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_60\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    $result = parent::__construct(...func_get_args());\n\n    $this->bindEvent('model.saveInternal', function () {\n        $this->sessionKey = null;\n    });\n\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Relationship Definition with Parameters\nDESCRIPTION: Shows how to define a relationship with additional parameters like delete behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic $hasMany = [\n    'posts' => ['Acme\\Blog\\Models\\Post', 'delete' => true]\n];\n```\n\n----------------------------------------\n\nTITLE: Processing Multiple File Uploads in PHP\nDESCRIPTION: PHP code for handling multiple file uploads in an AJAX handler. It iterates through each uploaded file in the array and stores them individually, collecting the file paths in an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onUploadFiles()\n{\n    $filePaths = [];\n\n    foreach (files('multi_file') as $file) {\n        $filePaths[] = $file->store('userfiles');\n    }\n\n    // ...\n\n    Flash::success('File saved');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Responses with Customized Items\nDESCRIPTION: Demonstrates how to build a collection for a JSON response using the collect() Twig function. This pattern allows for customizing each item in the collection before sending the response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set result = collect() %}\n\n{% for post in posts %}\n    {% do result.push({\n        id: post.id,\n        title: post.title,\n        email: post.author.email,\n        created_at: post.created_at,\n        updated_at: post.updated_at\n    }) %}\n{% endfor %}\n\n{% do response(result) %}\n```\n\n----------------------------------------\n\nTITLE: Redirect with HTTP Status Code in Twig\nDESCRIPTION: Shows how to specify a custom HTTP status code when performing a redirect. This example performs a permanent redirect (301) to an external URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/redirect.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('https://octobercms.com', 301) %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Timestamps on Pivot Table\nDESCRIPTION: Shows how to enable automatic timestamp maintenance on the pivot table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'timestamps' => true\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Hashable Trait in October CMS Model\nDESCRIPTION: Shows how to implement the Hashable trait to automatically hash sensitive attributes like passwords when they are set on the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Hashable;\n\n    /**\n     * @var array List of attributes to hash.\n     */\n    protected $hashable = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Page Links with the |page Filter in Twig\nDESCRIPTION: Demonstrates how to create a basic link to a page using the |page filter with a page file name as parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Enabling Native Error Pages with Turbo Router in HTML\nDESCRIPTION: Demonstrates how to enable native error page handling for PJAX requests by including the 'turbo-visit-control' meta tag with the 'error' value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"turbo-visit-control\" content=\"error\">\n```\n\n----------------------------------------\n\nTITLE: Using afterUpdate Callback\nDESCRIPTION: Shows how to run custom code after the page elements have been updated following a successful AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    afterUpdate: function() { /* do something */ }\n})\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Access in October CMS\nDESCRIPTION: Shows how to access URL parameters from a page's PHP section using the param() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $postId = $this->param('post_id');\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Optimizing October CMS Performance with Environment Configuration\nDESCRIPTION: Environment configuration settings that disable debug mode and enable various caching layers to drastically improve page load time in production environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nAPP_DEBUG=false\nCMS_ROUTE_CACHE=true\nCMS_ASSET_CACHE=true\nCMS_TWIG_CACHE=true\n```\n\n----------------------------------------\n\nTITLE: Dynamically Implementing a Behavior in October CMS\nDESCRIPTION: Example of how to dynamically implement a behavior in a controller by extending it and adding the behavior to the $implement property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Extend the RainLab.Users controller to include the RelationController behavior too\n */\nRainLab\\Users\\Controllers\\Users::extend(function($controller) {\n\n    // Implement the list controller behavior dynamically\n    $controller->implement[] = 'Backend.Behaviors.RelationController';\n\n    // Declare the relationConfig property dynamically for the RelationController behavior to use\n    $controller->addDynamicProperty('relationConfig', '$/myvendor/myplugin/controllers/users/config_relation.yaml');\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Middleware in October CMS Plugin (PHP)\nDESCRIPTION: This snippet shows two methods for registering custom middleware in an October CMS plugin. The first method extends a Controller class, while the second pushes the middleware directly into the Kernel.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    \\Cms\\Classes\\CmsController::extend(function($controller) {\n        $controller->middleware('Path\\To\\Custom\\Middleware');\n    });\n\n    // Add a new middleware to beginning of the stack.\n    $this->app['Illuminate\\Contracts\\Http\\Kernel']\n         ->prependMiddleware('Path\\To\\Custom\\Middleware');\n\n    // Add a new middleware to end of the stack.\n    $this->app['Illuminate\\Contracts\\Http\\Kernel']\n         ->pushMiddleware('Path\\To\\Custom\\Middleware');\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Intersection Between Collections with intersect() in PHP\nDESCRIPTION: The intersect method removes values from the collection that are not present in the given array or collection. The resulting collection preserves the original collection's keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Desk', 'Sofa', 'Chair']);\n\n$intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n\n$intersect->all();\n\n// [0 => 'Desk', 2 => 'Chair']\n```\n\n----------------------------------------\n\nTITLE: Creating Directories in Storage\nDESCRIPTION: Example showing how to create a directory and any needed subdirectories using the makeDirectory method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nStorage::makeDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Querying Relationships via Method in October CMS\nDESCRIPTION: This code shows how to access relationships using a method call, which allows adding constraints to the relationship query. This technique provides access to the query builder for additional filtering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$posts = $user->posts()->where('is_active', 1)->get();\n\n$post = $user->posts()->first();\n```\n\n----------------------------------------\n\nTITLE: Using SelectRaw for Raw Expressions\nDESCRIPTION: Uses the selectRaw method as a cleaner alternative to addSelect(Db::raw()), with support for parameter bindings to safely include values in the expression.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Returning Paginated Results as JSON in PHP\nDESCRIPTION: Demonstrates how to return paginated results as JSON directly from a route handler, converting the paginator instance to JSON automatically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::paginate();\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Constructors in October CMS\nDESCRIPTION: Example of how to extend a class constructor using the static extend method, allowing for dynamic modification of class behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMyNamespace\\Controller::extend(function($controller) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validation Error Messages in PHP\nDESCRIPTION: Demonstrates how to retrieve error messages from the Validator after validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$messages = $validator->messages();\n```\n\n----------------------------------------\n\nTITLE: Optimizing Performance with Environment Variables\nDESCRIPTION: Environment variable configuration for improving performance in October CMS by disabling debug mode and enabling various caching mechanisms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nAPP_DEBUG=false\nCMS_ROUTE_CACHE=true\nCMS_ASSET_CACHE=true\nCMS_TWIG_CACHE=true\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Queue Workers\nDESCRIPTION: Example configuration file for Supervisor to monitor and manage queue worker processes\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[program:october-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /path/to/october/artisan queue:work --sleep=3 --tries=3\nautostart=true\nautorestart=true\nuser=october\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/path/to/october/worker.log\n```\n\n----------------------------------------\n\nTITLE: Implementing ListController in a Controller Class (PHP)\nDESCRIPTION: Basic implementation of the ListController behavior in a controller class. The class implements the behavior and references a configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ListController::class\n    ];\n\n    public $listConfig = 'config_list.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Widget in YAML\nDESCRIPTION: Example configuration for a file upload widget that handles avatar image uploads with specific dimensions. The widget is configured for image mode with a 260x260 pixel constraint.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-fileupload.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: fileupload\n    mode: image\n    imageHeight: 260\n    imageWidth: 260\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Date Filter Scope Method in Model\nDESCRIPTION: PHP implementation of a custom date filter scope method. This method handles different conditions (equals, notEquals, between, after, before) and applies the appropriate query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction scopeDateFilter($query, $scope)\n{\n    if ($scope->condition === 'equals') {\n        $query->where('created_at', $scope->value);\n    }\n    elseif ($scope->condition === 'notEquals') {\n        $query->where('created_at', '<>', $scope->value);\n    }\n    elseif ($scope->condition === 'between') {\n        $query\n            ->where('created_at', '>=', $scope->after)\n            ->where('created_at', '<=', $scope->before);\n    }\n    elseif ($scope->condition === 'after') {\n        $query->where('created_at', '>=', $scope->value);\n    }\n    else {\n        $query->where('created_at', '<=', $scope->value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Component Aliases in Multiple Instances\nDESCRIPTION: Demonstrates how to use multiple instances of the same component with different aliases and configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo todoA]\nmaxItems = 10\n[demoTodo todoB]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Checking Table and Column Existence\nDESCRIPTION: Methods to check if a table or column exists in the database\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    //\n}\n\nif (Schema::hasColumn('users', 'email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Error Handling in PHP\nDESCRIPTION: Example showing how to decrypt data using the Crypt facade's decrypt method with proper exception handling. Catches DecryptException if the value cannot be properly decrypted (e.g., invalid MAC).\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/hashing-encryption.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\n\ntry {\n    $decrypted = Crypt::decrypt($encryptedValue);\n}\ncatch (DecryptException $ex) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data using PHP\nDESCRIPTION: Shows how to remove specific data or all data from the session using forget and flush methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSession::forget('key');\n\nSession::flush();\n```\n\n----------------------------------------\n\nTITLE: Using a Composable Partial with Content Sections\nDESCRIPTION: Shows how to use a composable partial by providing content for both the 'header' placeholder and the 'body' section using the {% put %} tag inside the partial call.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" body %}\n    {% put header %}\n        <h2>This is the card header</h2>\n    {% endput %}\n    <p>This is the card contents</p>\n{% endpartial %}\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Cookies in PHP\nDESCRIPTION: Shows how to create cookies that will last indefinitely (or for a very long time).\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$cookie = Cookie::forever('name', 'value');\n```\n\n----------------------------------------\n\nTITLE: Queue Job Handler Class Implementation\nDESCRIPTION: Shows how to create a job handler class with the required fire method that processes the queued job\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SendEmail\n{\n    public function fire($job, $data)\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Relation Count Number Column Configuration in YAML for OctoberCMS\nDESCRIPTION: Illustrates how to set up a number column to count related records. This configuration counts the number of users associated with the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-number.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nusers_count:\n    label: Users\n    type: number\n    relation: users\n    relationCount: true\n```\n\n----------------------------------------\n\nTITLE: Confirmation Dialog Before Delete Request\nDESCRIPTION: Example showing how to request a confirmation dialog before sending an 'onDelete' request and redirecting to the dashboard afterward.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onDelete', {\n    confirm: 'Are you sure?',\n    redirect: '/dashboard'\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Many-to-Many Relationships with Additional Attributes in OctoberCMS\nDESCRIPTION: Example showing how to save a many-to-many relationship with pivot table attributes. This associates a role with a user and sets an expiration date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nUser::find(1)->roles()->save($role, ['expires' => $expires]);\n```\n\n----------------------------------------\n\nTITLE: Opening Form with HTML Attributes\nDESCRIPTION: Example of opening a form with additional HTML class attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'class' => 'pretty-form'])\n```\n\n----------------------------------------\n\nTITLE: Using array_pull() Function in PHP\nDESCRIPTION: The array_pull method returns and removes a key/value pair from an array. It retrieves the value and simultaneously removes it from the original array in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100];\n\n$name = array_pull($array, 'name');\n\n// $name: Desk\n\n// $array: ['price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Permission Masks for Shared Hosting\nDESCRIPTION: Environment variable configuration for setting default file and folder permission masks in October CMS for improved security on shared hosting environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nDEFAULT_FILE_MASK=644\nDEFAULT_FOLDER_MASK=755\n```\n\n----------------------------------------\n\nTITLE: Using Validation Placeholders in Custom Messages in PHP\nDESCRIPTION: Demonstrates using placeholders in custom validation messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'same' => 'The :attribute and :other must match.',\n    'size' => 'The :attribute must be exactly :size.',\n    'between' => 'The :attribute must be between :min - :max.',\n    'in' => 'The :attribute must be one of the following types: :values',\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Vue Instance in October CMS Control\nDESCRIPTION: Creates a Vue instance within an October CMS control that manages a button click event. The control handles the lifecycle of the Vue instance, including proper cleanup on disconnect.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"my-vue-control\">\n    <div data-vue-template>\n        <button @click=\"greet\">Greet</button>\n    </div>\n</div>\n\n<script>\noc.registerControl('my-vue-control', class extends oc.ControlBase {\n    connect() {\n        this.vm = new Vue({\n            el: this.element.querySelector('[data-vue-template]'),\n            data: {\n                name: 'October CMS'\n            },\n            methods: {\n                greet: this.greet\n            }\n        });\n    }\n\n    disconnect() {\n        this.vm.$destroy();\n    }\n\n    greet(event) {\n        alert('Hello ' + this.name + '!')\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form with Sidebar Layout\nDESCRIPTION: Complete example of implementing a form with sidebar layout structure using content blocks and layout inheritance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<!-- Primary content -->\n<?php Block::put('form-contents') ?>\n    Main content\n<?php Block::endPut() ?>\n\n<!-- Complimentary sidebar -->\n<?php Block::put('form-sidebar') ?>\n    Side content\n<?php Block::endPut() ?>\n\n<!-- Layout execution -->\n<?php Block::put('body') ?>\n    <?= Form::open(['class'=>'layout stretch']) ?>\n        <?= $this->makeLayout('form-with-sidebar') ?>\n    <?= Form::close() ?>\n<?php Block::endPut() ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments in OctoberCMS Console Commands\nDESCRIPTION: This snippet shows how to define arguments for an OctoberCMS console command using the getArguments method. It demonstrates setting up a required argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the console command arguments.\n * @return array\n */\nprotected function getArguments()\n{\n    return [\n        ['example', InputArgument::REQUIRED, 'An example argument.'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Record and Retrieving Auto-Incrementing ID\nDESCRIPTION: Shows how to insert a record and retrieve the auto-incrementing ID in a single operation using the insertGetId method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.tld', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Widget Properties in PHP\nDESCRIPTION: Example of defining configurable properties in a filter widget class and initializing them from the configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Discount extends FormWidgetBase\n{\n    /**\n     * @var bool allowSearch show the search input in the dropdown\n     */\n    public $allowSearch = false;\n\n    /**\n     * init the widget\n     */\n    public function init()\n    {\n        $this->fillFromConfig([\n            'allowSearch',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Deferred Bindings on Save in PHP\nDESCRIPTION: Shows how to commit deferred bindings when saving a model by providing the session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_75\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post;\n$post->title = \"First blog post\";\n$post->save(['sessionKey' => $sessionKey]);\n```\n\n----------------------------------------\n\nTITLE: Updating Partials using JavaScript API\nDESCRIPTION: Demonstrates updating partials using the JavaScript API with the update configuration option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/update-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$.request('onRefreshTime', {\n    update: { mytime: '#myDiv' }\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Records Collection in PHP\nDESCRIPTION: This PHP snippet shows how to extend the collection of records used by the list by overriding the listExtendRecords method in the controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function listExtendRecords($records)\n{\n    return $records->sort(function ($a, $b) {\n        return $a->computedVal() > $b->computedVal();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Validation Rules\nDESCRIPTION: Shows how to register a custom validation rule globally in a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function register()\n{\n    $this->registerValidationRule('uppercase', UppercaseRule::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded Files with Storage Service in PHP\nDESCRIPTION: Shows how to store uploaded files using the storage service with optional disk specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$file->store($folder);\n\n$file->store($folder, 's3');\n```\n\n----------------------------------------\n\nTITLE: AJAX Event Handler with Validation in PHP\nDESCRIPTION: Demonstrates a PHP AJAX event handler that performs validation on form fields and returns either a validation exception or a success message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction onDoSomething()\n{\n    $data = post();\n\n    $rules = [\n        'name' => 'required',\n        'email' => 'required|email',\n    ];\n\n    $validation = Validator::make($data, $rules);\n\n    if ($validation->fails()) {\n        throw new ValidationException($validation);\n    }\n\n    Flash::success('Jobs done!');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Structure in YAML for October CMS\nDESCRIPTION: YAML configuration for enabling record sorting and structuring in the List Controller. It defines properties like showTree, showReorder, showSorting, and maxDepth to control the sorting behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/structures.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\n\n# ...\n\nstructure:\n    showTree: true\n    showReorder: true\n    showSorting: false\n    maxDepth: 2\n```\n\n----------------------------------------\n\nTITLE: Chunking Large Result Sets in PHP for October CMS\nDESCRIPTION: Uses the chunk() method to process large numbers of records in smaller batches to conserve memory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nFlight::chunk(200, function ($flights) {\n    foreach ($flights as $flight) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Flash Messages by Type in October CMS\nDESCRIPTION: Shows how to use the type variable to style flash messages differently based on their type (success, error, info, or warning).\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/flash.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <div class=\"alert alert-{{ type }}\">\n        {{ message }}\n    </div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Pushing Values to Array Session Data in PHP\nDESCRIPTION: Demonstrates how to push a new value onto a session value that is an array using the push method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSession::push('user.teams', 'developers');\n```\n\n----------------------------------------\n\nTITLE: Checking Method Existence in Extendable Classes\nDESCRIPTION: Example showing how to check if a method exists in an Extendable class, including dynamically added methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicMethod('getTagsAttribute', function () use ($model) {\n        return $this->tagsCache;\n    });\n});\n\n$post = new Post;\n\n$post->methodExists('getTagsAttribute'); // true\n$post->methodExists('missingMethod'); // false\n```\n\n----------------------------------------\n\nTITLE: Hiding Attributes in JSON Serialization in PHP\nDESCRIPTION: Shows how to exclude sensitive attributes like passwords from model serialization by defining a $hidden property in the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Widget Properties (PHP)\nDESCRIPTION: Demonstrates how to define configurable properties for a filter widget and populate them using the fillFromConfig method in the init method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Discount extends FormWidgetBase\n{\n    /**\n     * @var bool allowSearch show the search input in the dropdown\n     */\n    public $allowSearch = false;\n\n    /**\n     * init the widget\n     */\n    public function init()\n    {\n        $this->fillFromConfig([\n            'allowSearch',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Localization Strings in PHP\nDESCRIPTION: Demonstrates how to use the __() helper function to access localized strings, including parameter replacement.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho __('I love programming.');\n\necho __(':name loves programming.', ['name' => 'Jeff']);\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler with Validation in PHP\nDESCRIPTION: Shows an example AJAX handler that performs validation and redirects with errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function onRegister()\n{\n    $rules = [];\n\n    $validator = Validator::make(input(), $rules);\n\n    if ($validator->fails()) {\n        return Redirect::to('register')->withErrors($validator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Validation Rule in Model Rules Array\nDESCRIPTION: Example of adding a custom validation rule to a model's rules definition array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic $rules = [\n    'field' => 'foo'\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Text Input Fields\nDESCRIPTION: Example demonstrating how to generate a basic text input field in a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::text('username') ?>\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission in October CMS\nDESCRIPTION: Example of a PHP handler function that processes form data and sets a page variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nfunction onHandleForm()\n{\n    $this['lastValue'] = post('value');\n}\n```\n\n----------------------------------------\n\nTITLE: Form Fields with Tabs Configuration in YAML\nDESCRIPTION: Example showing how to organize form fields into tabs with user and group fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntabs:\n    fields:\n        username:\n            type: text\n            label: Username\n            tab: User\n\n        groups:\n            type: relation\n            label: Groups\n            tab: Groups\n```\n\n----------------------------------------\n\nTITLE: Swapping Keys and Values in PHP Collections\nDESCRIPTION: The flip method swaps the collection's keys with their corresponding values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$flipped = $collection->flip();\n\n$flipped->all();\n\n// ['peter' => 'name', 'october' => 'platform']\n```\n\n----------------------------------------\n\nTITLE: Accessing Uploaded Files in October CMS\nDESCRIPTION: How to retrieve an uploaded file from the request using the Input facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$file = Input::file('photo');\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Partial Implementation\nDESCRIPTION: Demonstrates lazy loading functionality with ajaxPartial tag, including initial content display and automatic AJAX loading after page load.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/ajax-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' lazy %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' lazy body %}\n    <p>Loading posts...</p>\n{% endpartial %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div\n    data-request=\"onAjax\"\n    data-request-update=\"{ _self: true }\"\n    data-auto-submit>\n    <p>Loading posts...</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the Event Emitter Trait - PHP\nDESCRIPTION: Example of implementing the Emitter trait to enable instance-specific event binding and firing within a class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass UserManager\n{\n    use \\October\\Rain\\Support\\Traits\\Emitter;\n}\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Error Message Display\nDESCRIPTION: HTML structure for displaying validation errors for a specific field using the data-validate-for attribute with the field name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<!-- Input field -->\n<input name=\"phone\" />\n\n<!-- Validation message for the field -->\n<div data-validate-for=\"phone\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using filter Method in PHP Collections\nDESCRIPTION: The filter method filters the collection using a callback, keeping only items that pass the given truth test.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$filtered = $collection->filter(function ($item) {\n    return $item > 2;\n});\n\n$filtered->all();\n\n// [3, 4]\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationController in a Controller Class (PHP)\nDESCRIPTION: Example of how to implement the RelationController behavior in an OctoberCMS backend controller class by specifying it in the $implement array and defining a configuration file path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Projects\\Controllers;\n\nclass Projects extends Controller\n{\n    public $implement = [\n        'Backend.Behaviors.FormController',\n        'Backend.Behaviors.RelationController',\n    ];\n\n    public $formConfig = 'config_form.yaml';\n    public $relationConfig = 'config_relation.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Flashing Input to Session in October CMS\nDESCRIPTION: How to persist input data from the current request to the next request using the Input facade's flash methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nInput::flash();\n```\n\n----------------------------------------\n\nTITLE: Basic Form AJAX Request with Partial Update\nDESCRIPTION: Demonstrates triggering the onCalculate handler when a form is submitted and updating an element with ID 'result' with the calcresult partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onCalculate\" data-request-update=\"calcresult: '#result'\">\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to GET Request in PHP\nDESCRIPTION: Illustrates how to include query parameters in a GET request by passing an array as the second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nHttp::get('https://octobercms.com', [\n    'page' => '1'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using trace_log Helper Function\nDESCRIPTION: Examples of using the trace_log helper function to log different types of data including strings, arrays, and exceptions to the system log.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Write a string value\n$val = 'Hello world';\ntrace_log('The value is '.$val);\n\n// Dump an array value\n$val = ['Some', 'array', 'data'];\ntrace_log($val);\n\n// Trace an exception\ntry {\n    //\n}\ncatch (Exception $ex) {\n    trace_log($ex);\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Filter Value (PHP)\nDESCRIPTION: Implements the getActiveValue method to capture and process the filter form values, including handling the clear action.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getActiveValue()\n{\n    if (post('clearScope')) {\n        return null;\n    }\n\n    if (!$this->hasPostValue('value')) {\n        return null;\n    }\n\n    return post('Filter');\n}\n```\n\n----------------------------------------\n\nTITLE: French Translation JSON Example\nDESCRIPTION: Shows a basic JSON structure for French translations in October CMS localization files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"j'adore programmer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global AJAX Settings in October CMS\nDESCRIPTION: Applies global configurations to all AJAX requests through the ajaxSetup event. Sets up flash message handling, loading indicators, and error message handling for consistent behavior across the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).on('ajaxSetup', function(event, context) {\n    // Enable AJAX handling of Flash messages on all AJAX requests\n    context.options.flash = true\n\n    // Enable the StripeLoadIndicator on all AJAX requests\n    context.options.loading = $.oc.stripeLoadIndicator\n\n    // Handle Error Messages by triggering a flashMsg of type error\n    context.options.handleErrorMessage = function(message) {\n        $.oc.flashMsg({ text: message, class: 'error' })\n    }\n\n    // Handle Flash Messages by triggering a flashMsg of the message type\n    context.options.handleFlashMessage = function(message, type) {\n        $.oc.flashMsg({ text: message, class: type })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Mail Templates with Twig\nDESCRIPTION: Example of accessing variables passed to a mail template using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Helper Function Usage in Twig\nDESCRIPTION: Demonstrates the basic syntax for calling HTML helper functions in Twig templates. The helper maps directly to the PHP Html class methods, converting camelCase to snake_case.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Html::strip() ?>\n```\n\n----------------------------------------\n\nTITLE: Pull and Delete Session Data in PHP\nDESCRIPTION: Demonstrates retrieving and simultaneously deleting session data using the pull method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::pull('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Tree Structure in PHP Model\nDESCRIPTION: Demonstrates how to use the SimpleTree trait to create parent-child relationships between models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SimpleTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Models from Many-to-Many Relationships\nDESCRIPTION: This code shows how to remove a model from a many-to-many relationship collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$post->categories()->remove($category);\n```\n\n----------------------------------------\n\nTITLE: Implementing Purgeable Attributes in PHP Models\nDESCRIPTION: Demonstrates using the Purgeable trait to prevent certain attributes from being saved to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Purgeable;\n\n    protected $purgeable = ['password_confirmation'];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Form Widgets in PHP\nDESCRIPTION: This code shows how to register form widgets by overriding the registerFormWidgets method in the Plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function registerFormWidgets()\n{\n    return [\n        \\Backend\\FormWidgets\\ColorPicker::class => 'colorpicker',\n        \\Backend\\FormWidgets\\DatePicker::class => 'datepicker'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Pivot Table Data in Many-to-Many Relationships (PHP)\nDESCRIPTION: Demonstrates how to access the intermediate pivot table data using the automatically assigned pivot attribute on related models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nforeach ($user->roles as $role) {\n    echo $role->pivot->created_at;\n}\n```\n\n----------------------------------------\n\nTITLE: API Layout Middleware Example\nDESCRIPTION: Shows how to use a CMS layout as middleware for API authentication and request handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/building-apis.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"API Authentication\"\nis_priority = 1\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if someCondition %}\n    {% page %}\n{% else %}\n    {% do response({ message: 'Condition not met' }, 400) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Checking if Request Wants JSON Response in PHP\nDESCRIPTION: Demonstrates how to check if the request is asking for a JSON response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\nif (Request::wantsJson()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Disk in Filesystem Configuration for PHP\nDESCRIPTION: Example configuration for the S3 disk in October CMS's filesystem.php. This includes the API credentials, region, and bucket settings needed to connect to Amazon S3.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/providers.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'disks' => [\n    // ...\n    's3' => [\n        'driver' => 's3',\n        'key'    => 'XXXXXXXXXXXXXXXXXXXX',\n        'secret' => 'xxxXxXX+XxxxxXXxXxxxxxxXxxXXXXXXXxxxX9Xx',\n        'region' => 'us-west-2',\n        'bucket' => 'my-bucket'\n    ],\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Flash Messages with AJAX Form\nDESCRIPTION: Demonstrates how to enable built-in flash message support in AJAX forms using the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSuccess\"\n    data-request-flash>\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Repeater with Tabs Configuration\nDESCRIPTION: Example of a repeater field using tabs to organize input fields into different sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    useTabs: true\n    form:\n        added_at:\n            label: Date added\n            type: datepicker\n            tab: Date\n        details:\n            label: Details\n            type: textarea\n            tab: Details\n```\n\n----------------------------------------\n\nTITLE: Creating Named Routes\nDESCRIPTION: Shows how to assign names to routes using the 'as' parameter when defining routes, which allows for convenient URL generation later.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/profile', ['as' => 'profile', function () {\n    //\n}]);\n```\n\n----------------------------------------\n\nTITLE: Adding Many-to-Many Relationships with Pivot Data\nDESCRIPTION: This code shows how to add a related model to a many-to-many relationship with additional pivot table data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$pivotData = ['expires' => $expires];\n\n$user->roles()->add($role, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Using Tags in Twig Templates\nDESCRIPTION: Tags are wrapped with {% %} characters and provide template logic structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% tag %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Headers in PHP\nDESCRIPTION: Shows how to access HTTP headers from the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::header('Content-Type');\n```\n\n----------------------------------------\n\nTITLE: File Display Response\nDESCRIPTION: Examples of displaying files directly in the browser instead of downloading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::file($pathToFile);\n\nreturn Response::file($pathToFile, $headers);\n```\n\n----------------------------------------\n\nTITLE: Managing Many-to-Many Relationships\nDESCRIPTION: Examples of attaching, detaching, and syncing many-to-many relationships between users and roles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->attach($roleId);\n\n// With additional data\n$user->roles()->attach($roleId, ['expires' => $expires]);\n\n// Detaching\n$user->roles()->detach($roleId);\n\n// Detach all\n$user->roles()->detach();\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Widget Class (PHP)\nDESCRIPTION: Shows the basic structure of a filter widget class extending FilterWidgetBase. It includes placeholder methods for rendering the widget and its form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\FilterWidgets;\n\nuse Backend\\Classes\\FilterWidgetBase;\n\nclass Discount extends FilterWidgetBase\n{\n    public function render() {}\n\n    public function renderForm() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Prepending and Appending to Files in PHP\nDESCRIPTION: Demonstrates how to insert content at the beginning or end of a file using the 'prepend' and 'append' methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nStorage::prepend('file.log', 'Prepended Text');\n\nStorage::append('file.log', 'Appended Text');\n```\n\n----------------------------------------\n\nTITLE: Binding a Singleton to the IoC Container in PHP\nDESCRIPTION: Demonstrates how to bind a shared instance (singleton) to the container that will be resolved only once and reused on subsequent calls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nApp::singleton('foo', function() {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Rules in October CMS Model\nDESCRIPTION: Demonstrates how to define validation rules for a User model using the Validation trait and $rules property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $rules = [\n        'name' => ['required', 'between:4,16'],\n        'email' => ['required', 'email'],\n        'password' => ['required', 'alpha_num', 'between:4,8', 'confirmed'],\n        'password_confirmation' => ['required', 'alpha_num', 'between:4,8']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping and Flattening Collections with flatMap() and flatten()\nDESCRIPTION: flatMap() modifies items and flattens the result, while flatten() flattens a multi-dimensional collection into a single dimension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['name' => 'Sally'],\n    ['school' => 'Arkansas'],\n    ['age' => 28]\n]);\n\n$flattened = $collection->flatMap(function ($values) {\n    return array_map('strtoupper', $values);\n});\n\n$flattened->all();\n\n// ['name' => 'SALLY', 'school' => 'ARKANSAS', 'age' => '28'];\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'languages' => ['php', 'javascript']]);\n\n$flattened = $collection->flatten();\n\n$flattened->all();\n\n// ['peter', 'php', 'javascript'];\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated Content with Navigation\nDESCRIPTION: Shows how to loop through paginated records and display pagination links using the pager function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    {% for post in posts %}\n        <h2>{{ post.title }}</h2>\n    {% endfor %}\n</div>\n\n<nav>\n    {{ pager(posts) }}\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Sending Mail with Mail::send in October CMS\nDESCRIPTION: Example of sending an email using the Mail::send method with a view, variables, and a callback function to customize the message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// These variables are available inside the message as Twig\n$vars = ['name' => 'Joe', 'user' => 'Mary'];\n\nMail::send('acme.blog::mail.message', $vars, function($message) {\n\n    $message->to('admin@domain.tld', 'Admin Person');\n    $message->subject('This is a reminder');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Tag List Widget in YAML for October CMS\nDESCRIPTION: Demonstrates the setup for a tag list widget in YAML. This widget renders a field for inputting a list of tags, with options for customizing the input mode, separator, and tag options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    separator: space\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Individual Routes\nDESCRIPTION: Demonstrates how to apply middleware to a single route using the middleware method, allowing for request filtering specific to that route.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('info', 'Acme\\News@info')->middleware('Path\\To\\Your\\Middleware');\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete in PHP Models\nDESCRIPTION: Demonstrates how to enable soft deletes for a model in October CMS by using the SoftDelete trait and defining the deleted_at column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SoftDelete;\n\n    protected $dates = ['deleted_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with File Download in HTML\nDESCRIPTION: Button that triggers a file download response from the server.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onDownloadFile\" data-request-download>\n    Download\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Collection Chunks with Bootstrap Grid in Twig Templates\nDESCRIPTION: This example demonstrates how to use the chunk() method in Twig templates to display products in a responsive Bootstrap grid system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for chunk in products.chunk(3) %}\n    <div class=\"row\">\n        {% for product in chunk %}\n            <div class=\"col-xs-4\">{{ product.name }}</div>\n        {% endfor %}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Eager Loading with with() Method in OctoberCMS\nDESCRIPTION: Example demonstrating eager loading to solve the N+1 query problem. This loads all books and their authors in just two database queries using the with() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author')->get();\\n\\nforeach ($books as $book) {\\n    echo $book->author->name;\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a belongsTo Relationship in OctoberCMS Model\nDESCRIPTION: Example showing how to define a belongsTo relationship in a Book model that relates to an Author model. This establishes the relationship between the two models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass Book extends Model\\n{\\n    public $belongsTo = [\\n        'author' => ['Acme\\\\Blog\\\\Models\\\\Author']\\n    ];\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Disks in PHP\nDESCRIPTION: Demonstrates how to access multiple disks using the Storage facade. It shows accessing an S3 disk and retrieving contents from a local disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$disk = Storage::disk('s3');\n\n$contents = Storage::disk('local')->get('file.jpg')\n```\n\n----------------------------------------\n\nTITLE: Binding Widgets to Controllers in PHP\nDESCRIPTION: This code demonstrates how to bind a widget to a backend controller in the controller's constructor, and how to access the widget in the controller's view or partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $myWidget = new MyWidgetClass($this);\n    $myWidget->alias = 'myWidget';\n    $myWidget->bindToController();\n}\n\n<?= $this->widget->myWidget->render() ?>\n```\n\n----------------------------------------\n\nTITLE: Resizing and Serving an Image via URL in PHP\nDESCRIPTION: Demonstrates how to resize an image and generate a URL to serve it directly to the browser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$url = \\System\\Classes\\ResizeImages::resize($image, $width, $height, $options);\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Field Options in YAML for OctoberCMS\nDESCRIPTION: This code demonstrates how to configure a basic form field with a label and type in YAML format for OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nblog_title:\n    label: Blog Title\n    type: text\n```\n\n----------------------------------------\n\nTITLE: Element Toggle During AJAX\nDESCRIPTION: Example of toggling element visibility during AJAX requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onPay\"\n    data-request-loading=\".is-loading\">\n    Pay Now\n</button>\n\n<div style=\"display:none\" class=\"is-loading\">\n    Processing Payment...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Changing Backend User Password via Command Line in October CMS\nDESCRIPTION: Shows how to use the october:passwd artisan command to change a backend administrator's password from the command line, useful for account recovery.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/users.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:passwd username password\n```\n\n----------------------------------------\n\nTITLE: Using forget Method in PHP Collections\nDESCRIPTION: The forget method removes an item from the collection by its key. Unlike most collection methods, forget modifies the original collection rather than returning a new one.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$collection->forget('name');\n\n$collection->all();\n\n// ['platform' => 'october']\n```\n\n----------------------------------------\n\nTITLE: Registering Custom List Column Types in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to register custom list column types in the plugin registration file. It shows two methods: using a local method and an inline closure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic function registerListColumnTypes()\n{\n    return [\n        // A local method, i.e $this->evalUppercaseListColumn()\n        'uppercase' => [$this, 'evalUppercaseListColumn'],\n\n        // Using an inline closure\n        'loveit' => function($value) { return \"I love {$value}\"; }\n    ];\n}\n\npublic function evalUppercaseListColumn($value, $column, $record)\n{\n    return strtoupper($value);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Structure Entry Blueprint in YAML\nDESCRIPTION: Creates a structure entry blueprint for documentation articles with a content field. Structure type allows for parent-child relationships between entries with sortable ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Docs\\Article\ntype: structure\nname: Documentation Article\n\nfields:\n    content:\n        label: Article Content\n        type: markdown\n```\n\n----------------------------------------\n\nTITLE: Building Email Messages in PHP\nDESCRIPTION: Illustrates how to build complex email messages using a closure in October CMS, including setting from address, recipients, and carbon copies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog:welcome', $vars, function($message) {\n    $message->from('us@example.tld', 'October');\n    $message->to('foo@example.tld')->cc('bar@example.tld');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Returned Data with JavaScript API\nDESCRIPTION: Demonstrates how to access data returned from an AJAX handler using the JavaScript API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"oc.request(this, 'onHandleForm', {\n        success: function(data) {\n            console.log(data);\n        }\n    }); return false\"\n>\n```\n\n----------------------------------------\n\nTITLE: Adding Field Validation in October CMS Tailor\nDESCRIPTION: Example of adding validation rules directly to a field definition. This applies the 'required' and 'min:15' rules to ensure the field has valid content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    myfield:\n        label: Featured Text\n        validation: \"required|min:15\"\n```\n\n----------------------------------------\n\nTITLE: Working with Array Cast Attributes in PHP\nDESCRIPTION: Demonstrates how to work with array-cast attributes, including automatic JSON serialization and deserialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$options = $user->options;\n\n$options['key'] = 'value';\n\n$user->options = $options;\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Settings Page in PHP\nDESCRIPTION: This code shows how to register a backend settings page by overriding the registerSettings method in the Plugin registration class. It demonstrates creating a link to a specific backend page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'location' => [\n            'label' => 'Locations',\n            'description' => 'Manage available user countries and states.',\n            'category' => 'Users',\n            'icon' => 'icon-globe',\n            'url' => Backend::url('acme/user/locations'),\n            'order' => 500,\n            'keywords' => 'geography place placement'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Firing an Instance Event with Emitter Trait - PHP\nDESCRIPTION: Example of firing an event on a specific instance of a class using the fireEvent method from the Emitter trait.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$manager = new UserManager;\n$manager->fireEvent('user.beforeRegister', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation for Multiple Fields in PHP\nDESCRIPTION: Shows how to add conditional validations for several fields at once using the sometimes method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes(['reason', 'cost'], 'required', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Error Message for a Field in PHP\nDESCRIPTION: Demonstrates how to get the first error message for a specific field from the MessageBag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho $messages->first('email');\n```\n\n----------------------------------------\n\nTITLE: Injecting Content into a Placeholder in Twig\nDESCRIPTION: Shows how to inject content into a previously defined placeholder using the {% put %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% put name %}\n    <p>Place this text in the name placeholder</p>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Using dump() Function in Twig\nDESCRIPTION: The dump() function outputs detailed information about a template variable for debugging purposes. It can accept single or multiple variables as arguments, or no arguments to dump the entire context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/dump.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user, categories) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Transforming Nested Items with mapSpread() Method in PHP\nDESCRIPTION: The mapSpread method iterates over collection items, passing each nested item value into the given callback. This is particularly useful when working with chunked data that needs processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n$chunks = $collection->chunk(2);\n\n$sequence = $chunks->mapSpread(function ($even, $odd) {\n    return $even + $odd;\n});\n\n$sequence->all();\n\n// [1, 5, 9, 13, 17]\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Design in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure the form design in the behavior configuration of an October CMS controller. It sets the display mode to 'basic'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndesign:\n    displayMode: basic\n```\n\n----------------------------------------\n\nTITLE: Users API with Avatar Thumbnails\nDESCRIPTION: Complete example showing how to return users with avatar thumbnails, including PHP component code and Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/building-apis.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n## pages/api/users.htm\nurl = \"/api/users\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['users'] = \\RainLab\\User\\Models\\User::all();\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# Load up the avatar relation #}\n{% do users.load('avatar') %}\n\n{# Set the 'avatar_thumb' attribute on each user #}\n{% for user in users %}\n    {% do user.setAttribute(\n        'avatar_thumb',\n        user.avatar.getThumbUrl(100, 100, {mode: 'crop'})|default(null)\n    ) %}\n{% endfor %}\n\n{# Respond with the user #}\n{% do response({\n    data: users\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Building Arrays with collect() Using push\nDESCRIPTION: Using the collect() function to create a collection object and add items with the push method. This provides a cleaner alternative to the merge filter approach.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = collect() %}\n{% for item in items %}\n    {% do array.push({ title: item.title, ... }) %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using abort() with Conditional Check\nDESCRIPTION: Shows how to conditionally abort a request when a record is not found, displaying the 404 page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/abort.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if record.notFound %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value with max() Method in PHP\nDESCRIPTION: The max method returns the maximum value of a given key in the collection. When used without a key, it finds the maximum value across all items in a collection of simple values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$max = new Collection([['foo' => 10], ['foo' => 20]])->max('foo');\n\n// 20\n\n$max = new Collection([1, 2, 3, 4, 5])->max();\n\n// 5\n```\n\n----------------------------------------\n\nTITLE: Redirect Response Examples\nDESCRIPTION: Various examples of creating redirect responses with flash data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login');\n\nreturn Redirect::to('user/login')->with('message', 'Login Failed');\n\nreturn Redirect::back();\n\nreturn Redirect::back()->withInput();\n\nreturn Redirect::refresh();\n```\n\n----------------------------------------\n\nTITLE: Initializing collect() with Prepopulated Data\nDESCRIPTION: Creating a collection with data already populated by passing an array as the first argument to the collect() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = collect([\n    { title: item.title, ... },\n    { title: item.title, ... }\n]) %}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from Subdirectory in October CMS\nDESCRIPTION: Shows the Twig syntax for rendering a partial template from a subdirectory within an October CMS theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blog/category-list\" %}\n```\n\n----------------------------------------\n\nTITLE: Toolbar Button Partial\nDESCRIPTION: Example of a toolbar button partial that adds a 'New Post' button linking to the create form action.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/lists.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<div data-control=\"toolbar\">\n    <a\n        href=\"<?= Backend::url('acme/blog/posts/create') ?>\"\n        class=\"btn btn-primary oc-icon-plus\">\n        Êñ∞Â∏ñÂ≠ê\n   </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Grouping Collection Items with mapToGroups() in PHP\nDESCRIPTION: The mapToGroups method organizes collection items into groups based on callback return values. The callback should return an associative array with a single key/value pair defining the group structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    [\n        'name' => 'John Doe',\n        'department' => 'Sales',\n    ],\n    [\n        'name' => 'Jane Doe',\n        'department' => 'Sales',\n    ],\n    [\n        'name' => 'Johnny Doe',\n        'department' => 'Marketing',\n    ]\n]);\n\n$grouped = $collection->mapToGroups(function ($item, $key) {\n    return [$item['department'] => $item['name']];\n});\n\n$grouped->toArray();\n\n/*\n    [\n        'Sales' => ['John Doe', 'Jane Doe'],\n        'Marketing' => ['Johnny Doe'],\n    ]\n*/\n\n$grouped->get('Sales')->all();\n\n// ['John Doe', 'Jane Doe']\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Validation Messages with Multiple Placeholders\nDESCRIPTION: Demonstrates how to create validation messages using various placeholders like :attribute, :other, :size, :min, :max, and :values for different validation scenarios.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'same' => 'The :attribute and :other must match.',\n    'size' => 'The :attribute must be exactly :size.',\n    'between' => 'The :attribute must be between :min - :max.',\n    'in' => 'The :attribute must be one of the following types: :values',\n];\n```\n\n----------------------------------------\n\nTITLE: Using Simple Pagination in PHP\nDESCRIPTION: Shows how to use the simplePaginate method for more efficient queries when only next/previous links are needed. This is useful for large datasets where showing every page number isn't necessary.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Behavior in October CMS Models\nDESCRIPTION: Shows how to implement the Sortable behavior in a model class. This behavior manages the sort order of models in a collection using a sort_order column in the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $implement = [\n        'October.Rain.Database.Behaviors.Sortable'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Trait in October CMS Model\nDESCRIPTION: Demonstrates how to use the Sortable trait to maintain the sort order of models in a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Uploaded Files with Custom Names in PHP\nDESCRIPTION: Demonstrates storing uploaded files with custom names using the storage service and public visibility options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$file->storeAs($folder, 'avatar');\n\n$file->storeAs($folder, 'avatar', 's3');\n\n$file->storePublicly($folder, 's3');\n\n$file->storePubliclyAs($folder, 'avatar', 's3');\n```\n\n----------------------------------------\n\nTITLE: Using URL Parameters in Component Properties\nDESCRIPTION: Demonstrates how to use URL parameters to set component property values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ :maxItems }}\n==\n```\n\n----------------------------------------\n\nTITLE: Checking if Password Needs Rehashing in PHP\nDESCRIPTION: Example using Hash facade's needsRehash method to determine if a password needs rehashing due to work factor changes. Useful when password hashing settings are updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/hashing-encryption.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::needsRehash($hashed)) {\n    $hashed = Hash::make('plain-text');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Polymorphic Relationships in Tag Model - PHP\nDESCRIPTION: Configures the inverse side of the polymorphic relationship in the Tag model using the $morphedByMany property. This allows a tag to retrieve all related posts and videos through a polymorphic relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nclass Tag extends Model\n{\n    public $morphedByMany = [\n        'posts'  => [\\Acme\\Blog\\Models\\Post::class, 'name' => 'taggable'],\n        'videos' => [\\Acme\\Blog\\Models\\Video::class, 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic Many-to-Many Table Structure\nDESCRIPTION: SQL table structure for implementing polymorphic many-to-many relationships between posts, videos, and tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nposts\n    id - integer\n    name - string\n\nvideos\n    id - integer\n    name - string\n\ntags\n    id - integer\n    name - string\n\ntaggables\n    tag_id - integer\n    taggable_id - integer\n    taggable_type - string\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Column Values in PHP\nDESCRIPTION: Demonstrates the use of increment and decrement methods to modify numeric column values, with options to specify the increment amount.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes');\n\nDb::table('users')->increment('votes', 5);\n\nDb::table('users')->decrement('votes');\n\nDb::table('users')->decrement('votes', 5);\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Messages for Specific Attributes in PHP\nDESCRIPTION: Shows how to specify custom error messages for specific field attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Column Definition in YAML\nDESCRIPTION: Basic implementation of a switch column type for boolean values with default on/off states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-switch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenabled:\n    label: Enabled\n    type: switch\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading in OctoberCMS\nDESCRIPTION: Example demonstrating lazy eager loading to load relationships after the main query. This allows conditionally loading relationships based on runtime conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\\n\\nif ($someCondition) {\\n    $books->load('author', 'publisher');\\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Error Handling in PHP\nDESCRIPTION: Demonstrates decrypting data using the Crypt facade with proper error handling for invalid encrypted values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/hash-crypt.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Encryption\\DecryptException;\n\ntry {\n    $decrypted = Crypt::decrypt($encryptedValue);\n}\ncatch (DecryptException $ex) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Updating October CMS Core and Plugins\nDESCRIPTION: The october:update command updates the core application and plugin files, then performs a database migration to ensure all system components are current.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/updating-october.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:update\n```\n\n----------------------------------------\n\nTITLE: View Template Examples\nDESCRIPTION: Examples of view templates using both Twig and PHP syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello, {{ name }}</h1>\n    </body>\n</html>\n```\n\nLANGUAGE: php\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello, <?= $name ?></h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Keying Collections with keyBy() Method in PHP\nDESCRIPTION: The keyBy() method keys the collection by a given key or callback function. If multiple items have the same key, only the last one will appear in the new collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product_id' => 'prod-100', 'name' => 'chair'],\n    ['product_id' => 'prod-200', 'name' => 'desk'],\n]);\n\n$keyed = $collection->keyBy('product_id');\n\n$keyed->all();\n\n/*\n    [\n        'prod-100' => ['product_id' => 'prod-100', 'name' => 'Chair'],\n        'prod-200' => ['product_id' => 'prod-200', 'name' => 'Desk'],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$keyed = $collection->keyBy(function ($item) {\n    return strtoupper($item['product_id']);\n});\n\n$keyed->all();\n\n/*\n    [\n        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Chair'],\n        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Desk'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Constraining Eager Loads in PHP Models\nDESCRIPTION: Demonstrates how to apply additional query constraints when eager loading relationships. Shows filtering posts by title and ordering by creation date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n    $users = User::with([\n        'posts' => function ($query) {\n            $query->where('title', 'like', '%first%');\n        }\n    ])->get();\n```\n\n----------------------------------------\n\nTITLE: Inserting Records and Retrieving Auto-Incrementing IDs in PHP\nDESCRIPTION: Shows how to insert a record and retrieve the auto-incrementing ID using the insertGetId method, useful when you need the ID of the newly created record.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$id = Db::table('users')->insertGetId(\n    ['email' => 'john@example.tld', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Validating Nested Array Fields Using Dot Notation in PHP\nDESCRIPTION: Demonstrates how to validate attributes within an array using dot notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(Input::all(), [\n    'photos.profile' => 'required|image',\n]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Design in PHP for October CMS\nDESCRIPTION: This PHP snippet demonstrates how to render a form design inside view files using the formRenderDesign method in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->formRenderDesign() ?>\n```\n\n----------------------------------------\n\nTITLE: Calling Component-Specific AJAX Handlers\nDESCRIPTION: Shows how to target an AJAX handler that is defined within a specific component by prefixing the handler name with the component's short name or alias.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"mycomponent::onSubmitContactForm\">Go</button>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Components in Twig\nDESCRIPTION: This snippet demonstrates how to pass variables to a component when rendering it. In this example, the 'postsPerPage' parameter is passed to the 'blogPosts' component with a value of '5'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-component.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" postsPerPage=\"5\" %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode in Production for October CMS\nDESCRIPTION: Shows how to disable debug mode in production by setting the APP_DEBUG environment variable to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nAPP_DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Dispatching Browser Events from AJAX Handlers\nDESCRIPTION: Shows how to dispatch custom JavaScript events from an AJAX handler to the browser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nfunction onPerformAction()\n{\n    $this->dispatchBrowserEvent('app:update-profile');\n\n    $this->dispatchBrowserEvent('app:update-profile', ['name' => 'Jeff']);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling HTTP Response in PHP\nDESCRIPTION: Illustrates how to work with the response object returned by an HTTP request. It shows how to access the response body, status code, and headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$result = Http::post('https://octobercms.com');\necho $result->body();                  // Outputs: <html><head><title>...\necho $result->status();                // Outputs: 200\necho $result->header('Content-Type');  // Outputs: text/html; charset=UTF-8\n```\n\n----------------------------------------\n\nTITLE: Using AJAX Handlers in October CMS Components\nDESCRIPTION: Illustrates how to reference AJAX handlers from components in October CMS. It shows both the shorthand and fully qualified naming conventions for handling potential naming conflicts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_22\n\nLANGUAGE: html\nCODE:\n```\ndata-request=\"onMyComponentHandler\"\n```\n\nLANGUAGE: html\nCODE:\n```\ndata-request=\"componentName::onMyComponentHandler\"\n```\n\n----------------------------------------\n\nTITLE: Conditional UI Elements Based on Permissions\nDESCRIPTION: Shows how to conditionally display UI elements based on user permissions in backend views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/users.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($this->user->hasAccess('acme.blog.delete_categories')): ?>\n    <button\n        type=\"button\"\n        class=\"oc-icon-trash-o btn-icon danger pull-right\"\n        data-request=\"onDelete\"\n        data-load-indicator=\"Deleting Category...\"\n        data-request-confirm=\"Do you really want to delete this category?\">\n    </button>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Global Events in Plugin Registration\nDESCRIPTION: Example of subscribing to a global event in a plugin's boot method, which allows hooking into events from other plugins, such as user registration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    // ...\n\n    public function boot()\n    {\n        Event::listen('rainlab.user.register', function ($user) {\n            // Code to register $user->email to mailing list\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirect Response Examples\nDESCRIPTION: Various examples of creating redirect responses with and without flash data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login');\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login')->with('message', 'Login Failed');\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::back();\n\nreturn Redirect::back()->withInput();\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::refresh();\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Model in OctoberCMS (PHP)\nDESCRIPTION: Shows how to update an existing model by retrieving it, modifying attributes, and saving the changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::find(1);\n$flight->name = 'Darwin to Adelaide';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationships\nDESCRIPTION: This snippet demonstrates lazy loading relationships after the parent models have been retrieved, loading author and publisher relationships conditionally.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\n\nif ($someCondition) {\n    $books->load('author', 'publisher');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Relations in PHP\nDESCRIPTION: PHP code showing how to initialize and render a relation manager in a controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::where('id', 7)->first();\n$this->initRelation($post);\n\n<?= $this->formRenderPreview() ?>\n\n<?= $this->relationRender('comments') ?>\n\n<?= $this->relationRender('comments', ['readOnly' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Response with JavaScript\nDESCRIPTION: Example of handling AJAX response data using JavaScript API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form\n    onsubmit=\"$(this).request('onHandleForm', {\n        success: function(data) {\n            console.log(data);\n        }\n    }); return false;\">\n```\n\n----------------------------------------\n\nTITLE: Verifying Password Hash in PHP\nDESCRIPTION: Shows how to verify a plain-text password against a stored hash using the Hash facade's check method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/hash-crypt.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::check('plain-text', $hashedPassword)) {\n    // The passwords match...\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereJsonContains for JSON Array Queries\nDESCRIPTION: Shows how to use whereJsonContains to check if a JSON array contains specific values. This feature is not supported in SQLite.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonContains('options->languages', 'en')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using trace_sql Helper for Database Logging\nDESCRIPTION: Example of using the trace_sql helper function to enable logging of all database queries. The queries will appear in the system.log file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ntrace_sql();\n\nDb::table('users')->count();\n\n// select count(*) as aggregate from users\n```\n\n----------------------------------------\n\nTITLE: Advanced Tab Properties Configuration in YAML\nDESCRIPTION: Comprehensive example of tab configuration including stretch, lazy loading, CSS classes, and icons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntabs:\n    stretch: true\n    defaultTab: User\n    cssClass: text-blue\n\n    lazy:\n        - Groups\n\n    paneCssClass:\n        1: first-tab\n        2: second-tab\n\n    icons:\n        User: icon-user\n        Groups: icon-group\n\n    identifiers:\n        User: userTab\n\n    fields:\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Has-one Relation\nDESCRIPTION: YAML configuration for a 'phone' has-one relation, specifying form and list configurations with update/delete toolbar buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nphone:\n    label: Phone\n    view:\n        form: $/acme/user/models/phone/fields.yaml\n        toolbarButtons: update|delete\n    manage:\n        form: $/acme/user/models/phone/fields.yaml\n        list: $/acme/user/models/phone/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Priority-based Event Registration\nDESCRIPTION: Demonstrates how to register event listeners with different priorities.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Run first\nEvent::listen('auth.login', function() { ... }, 10);\n\n// Run second\nEvent::listen('auth.login', function() { ... }, 5);\n```\n\n----------------------------------------\n\nTITLE: Grouping Collection Items with groupBy() Method in PHP\nDESCRIPTION: The groupBy() method groups collection items by a specified key or a callback function. It creates a new collection where the keys are the values of the specified attribute and the values are arrays of items with that attribute value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n    ['account_id' => 'account-x10', 'product' => 'Chair'],\n    ['account_id' => 'account-x11', 'product' => 'Desk'],\n]);\n\n$grouped = $collection->groupBy('account_id');\n\n$grouped->toArray();\n\n/*\n    [\n        'account-x10' => [\n            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n            ['account_id' => 'account-x10', 'product' => 'Chair'],\n        ],\n        'account-x11' => [\n            ['account_id' => 'account-x11', 'product' => 'Desk'],\n        ],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$grouped = $collection->groupBy(function ($item, $key) {\n    return substr($item['account_id'], -3);\n});\n\n$grouped->toArray();\n\n/*\n    [\n        'x10' => [\n            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n            ['account_id' => 'account-x10', 'product' => 'Chair'],\n        ],\n        'x11' => [\n            ['account_id' => 'account-x11', 'product' => 'Desk'],\n        ],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Registering Content Fields in Plugin Registration File\nDESCRIPTION: Override the registerContentFields method in the plugin registration file to register custom content fields. Return an array with the widget class as key and widget short code as value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerContentFields()\n{\n    return [\n        \\Acme\\Blog\\ContentFields\\MyContentField::class => 'mycontentfield'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to HTTP Request in PHP\nDESCRIPTION: Demonstrates how to include custom headers in an HTTP request using the withHeaders method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nHttp::withHeaders([\n    'Rest-Key' => '...'\n])->post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Expressions in Twig Variables\nDESCRIPTION: Variables can represent expressions in Twig, allowing for conditional output based on variable values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ isAjax ? 'Yes' : 'No' }}\n```\n\n----------------------------------------\n\nTITLE: Constructor Extension Example\nDESCRIPTION: Shows how to extend a class constructor using the static extend method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMyClass::extend(function($controller) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Obfuscating Email Addresses with html_email()\nDESCRIPTION: Demonstrates using html_email() to obfuscate an email address to prevent spam-bots from detecting it while keeping it functional for human users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_email('a@b.c') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Submit Buttons\nDESCRIPTION: Shows how to generate submit buttons for forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::submit('Click Me!') ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Placeholder Content in Twig\nDESCRIPTION: Demonstrates how to define default content for a placeholder that can be overridden or complemented by a page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder sidebar default %}\n    <p><a href=\"/contacts\">Contact us</a></p>\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Partial in HTML\nDESCRIPTION: Demonstrates the simplest possible partial in October CMS, containing only HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Resizing Media Image with Aspect Ratio in OctoberCMS Twig\nDESCRIPTION: Shows how to resize a media image 'banner.jpg' to a specific aspect ratio (1920x1080) using the '|resize' filter in combination with the '|media' filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-resize.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media|resize(1920, 1080) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Injected Assets in October CMS\nDESCRIPTION: This example demonstrates how to add HTML attributes to injected assets using the second parameter of addCss and addJs methods. Here, the defer attribute is added to JavaScript files to improve page loading performance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js'], ['defer' => true]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Export Button to List Toolbar in PHP\nDESCRIPTION: Shows how to add an export button to the list toolbar when using List behavior integration. The button links to the export action of the controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<a\n    href=\"<?= Backend::url('acme/campaign/subscribers/export') ?>\"\n    class=\"btn btn-default oc-icon-download\">\n    Export Records\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Mutators in Model\nDESCRIPTION: Example of customizing which fields should be automatically mutated to Carbon instances\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * @var array dates return as \\Carbon\\Carbon instances\n     */\n    protected $dates = ['created_at', 'updated_at', 'disabled_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Has One Relation in OctoberCMS YAML\nDESCRIPTION: Example YAML configuration for a Has One relation between Person and Phone. It specifies view and management options for the relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\nphone:\n    label: Phone\n    view:\n        form: $/acme/user/models/phone/fields.yaml\n        toolbarButtons: update|delete\n    manage:\n        form: $/acme/user/models/phone/fields.yaml\n        list: $/acme/user/models/phone/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Collection Class in PHP\nDESCRIPTION: Shows how to define a custom collection class that extends the base OctoberCMS collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Collection as CollectionBase;\n\nclass CustomCollection extends CollectionBase\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Class as an Event Listener - PHP\nDESCRIPTION: Example of registering a class to handle an event instead of a closure, which allows for dependency injection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', 'LoginHandler');\n```\n\n----------------------------------------\n\nTITLE: Executing AJAX Request with Flash Message in JavaScript\nDESCRIPTION: This code shows how to make a single AJAX request using the 'oc.ajax' method. It includes a flash message handler that displays the message using 'oc.flashMsg'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\noc.ajax('onDoSomething', {\n    flash: true,\n    handleFlashMessage: function(message, type) {\n        oc.flashMsg({ message: message, type: type });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models in OctoberCMS\nDESCRIPTION: Demonstrates how to create and associate a new comment model with a post using the create() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$comment = $post->comments()->create([\n    'message' => 'A new comment.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation Rules\nDESCRIPTION: Shows how to implement conditional validation using the sometimes rule.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Resizing Media Image with HTML Tag\nDESCRIPTION: Example showing how to resize a media image to specific dimensions and use it in an HTML img tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media|resize(1920, 1080) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining the init Method for Components\nDESCRIPTION: Shows how to define an init method in a CMS component class to run code before any AJAX handler executes within that component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction init()\n{\n    // From a component or widget class\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to snake_case in PHP\nDESCRIPTION: The snake_case function converts the given string to snake_case format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\n$snake = snake_case('fooBar');\n\n// foo_bar\n```\n\n----------------------------------------\n\nTITLE: Registering Request Events in October CMS\nDESCRIPTION: Demonstrates how to register before and after request events in October CMS for executing code before and after routing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::before(function ($request) {\n    // Code to execute before the request is routed\n});\n\nApp::after(function ($request) {\n    // Code to execute after the request is routed\n});\n```\n\n----------------------------------------\n\nTITLE: Converting OctoberCMS Model to JSON\nDESCRIPTION: Demonstrates converting a model to JSON using the toJson() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->toJson();\n```\n\n----------------------------------------\n\nTITLE: Advanced Editor Options Configuration in YAML\nDESCRIPTION: Example of using the editorOptions property to customize the rich editor's behavior with advanced settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    editorOptions:\n        imageDefaultWidth: 0\n```\n\n----------------------------------------\n\nTITLE: Parsing Twig Templates in PHP\nDESCRIPTION: Demonstrates how to use the Twig facade to parse Twig templates, including passing variables to the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$html = Twig::parse($twig);\n```\n\nLANGUAGE: php\nCODE:\n```\n$html = Twig::parse($twig, ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Using array_where Helper Function in PHP\nDESCRIPTION: The array_where function filters an array using a callback function, returning only the elements that satisfy the provided condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, '200', 300, '400', 500];\n\n$array = array_where($array, function ($value, $key) {\n    return is_string($value);\n});\n\n// [1 => 200, 3 => 400]\n```\n\n----------------------------------------\n\nTITLE: Defining Migration and Seed Files in YAML for October CMS Updates\nDESCRIPTION: This YAML snippet demonstrates how to specify migration and seed files to be executed during an update in October CMS. It includes a version number, a description comment, and the names of the files to be run.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nv1.1.1:\n    - This update will execute the two scripts below.\n    - some_upgrade_file.php\n    - some_seeding_file.php\n```\n\n----------------------------------------\n\nTITLE: Asset Injection with Attributes in October CMS Component\nDESCRIPTION: Shows how to inject a JavaScript file with additional attributes including the build version for cache busting and defer loading. The attributes are passed as an array in the second parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js', [\n        'build' => 'Acme.Test',\n        'defer' => true\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Protection Token to Forms\nDESCRIPTION: Example showing how to manually add a CSRF token to a form for protection against cross-site request forgery attacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::token() ?>\n```\n\n----------------------------------------\n\nTITLE: Filtering for Non-NULL Values with whereNotNull\nDESCRIPTION: Shows how to use whereNotNull to filter records where a specified column does not contain NULL values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereNotNull('updated_at')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Conditional Validation Rules in PHP\nDESCRIPTION: Examples of applying validation rules conditionally using the sometimes method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'sometimes|required|email',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Function\nDESCRIPTION: Example of using a custom Twig function in a template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ hello_world() }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Filter Widget State in PHP\nDESCRIPTION: Implementation of the render method to display the initial state of the filter widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['scope'] = $this->filterScope;\n    $this->vars['name'] = $this->getScopeName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('discount');\n}\n```\n\n----------------------------------------\n\nTITLE: Working with User Groups in October CMS\nDESCRIPTION: Demonstrates how to find a user group by its code and access all users within that group, for purposes like sending group-wide notifications.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/users.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$group = UserGroup::where('code', 'head-office-staff')->first();\n\nMail::sendTo($group->users, 'author.plugin:important_notification');\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Dropdown Options in PHP\nDESCRIPTION: Shows how to define option methods that respond to field dependencies, loading different state options based on country selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return ['au' => 'Australia', 'ca' => 'Canada'];\n}\n\npublic function getStateOptions()\n{\n    if ($this->country == 'au') {\n        return ['act' => 'Capital Territory', 'qld' => 'Queensland', ...];\n    }\n    elseif ($this->country == 'ca') {\n        return ['bc' => 'British Columbia', 'on' => 'Ontario', ...];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filters in Twig\nDESCRIPTION: Shows how to apply multiple filters in succession to transform a variable in multiple ways.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'October Glory'|upper|replace({'October': 'Morning'}) }}\n```\n\n----------------------------------------\n\nTITLE: Multiple Pagination Instances Configuration\nDESCRIPTION: Demonstrates how to handle multiple pagination instances on the same page using custom page parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n\n[collection blog]\nhandle = \"Blog\\Post\"\n\n[collection category]\nhandle = \"Blog\\Category\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set posts = blog.paginateCustom(10, 'postPage') %}\n\n{% set comments = comments.paginateCustom(10, 'commentPage') %}\n```\n\n----------------------------------------\n\nTITLE: Mail View Template Structure\nDESCRIPTION: Example of a complete mail view file structure including configuration, plain text, and HTML sections. Shows how to use Twig variables in templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsubject = \"Your product has been added to October CMS project\"\n```\n\nLANGUAGE: twig\nCODE:\n```\nHi {{ name }},\n\nGood news! User {{ user }} just added your product \"{{ product }}\" to a project.\n\nThis message was sent using no formatting (plain text)\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hi {{ name }},</p>\n\n<p>\n    <strong>Good news!</strong>\n    User {{ user }} just added your product \"{{ product }}\" to a project.\n</p>\n\n<p>This email was sent using formatting (HTML)</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin from Local Directory\nDESCRIPTION: Command to install a plugin from a local directory in the same project. Uses the --from option to specify the local path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=./plugins/acme/blog\n```\n\n----------------------------------------\n\nTITLE: Creating View Response in PHP\nDESCRIPTION: Shows how to return a view as the response content while still having access to Response class methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::view('acme.blog::hello')->header('Content-Type', $type);\n```\n\n----------------------------------------\n\nTITLE: Registering Custom List Column Types in PHP\nDESCRIPTION: Demonstrates how to register custom list column types using the registerListColumnTypes method in a plugin registration class. Shows both local method and closure implementations for column type handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\npublic function registerListColumnTypes()\n{\n    return [\n        // A local method, i.e $this->evalUppercaseListColumn()\n        'uppercase' => [$this, 'evalUppercaseListColumn'],\n\n        // Using an inline closure\n        'loveit' => function($value) { return 'I love '. $value; }\n    ];\n}\n\npublic function evalUppercaseListColumn($value, $column, $record)\n{\n    return strtoupper($value);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Collections in October CMS\nDESCRIPTION: Code showing how to check if a collection has at least one record available to display using Twig's 'is empty' or 'is not empty' expressions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if posts is not empty %}\n    {# ... #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Bucket Policy for Public Access\nDESCRIPTION: JSON policy configuration to make an S3 bucket publicly accessible. This policy grants read-only access to all files in the bucket. Replace BUCKETNAME with your actual bucket name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/providers.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2008-10-17\",\n    \"Id\": \"Policy1397632521960\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1397633323327\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::BUCKETNAME/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Container Events in PHP\nDESCRIPTION: Shows how to listen for IoC container resolution events using the resolving method, allowing code to be executed when specific types of objects are resolved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::resolving(function ($object, $app) {\n    // Called when container resolves object of any type...\n});\n\nApp::resolving('foo', function ($fooBar, $app) {\n    // Called when container resolves objects using hint \"foo\"...\n});\n\nApp::resolving('Acme\\Blog\\Classes\\FooBar', function ($fooBar, $app) {\n    // Called when container resolves objects of type \"FooBar\"...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Form Submission with oc.request in HTML\nDESCRIPTION: Example of how to use the oc.request method on a form element to trigger an AJAX request to the 'onProcess' handler when the form is submitted.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"oc.request(this, 'onProcess'); return false;\">\n    ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Rule Using Closure in PHP\nDESCRIPTION: Demonstrates how to extend the Validator with a custom rule using a Closure. The rule checks if a value equals 'foo'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nuse Validator;\n\npublic function boot()\n{\n    Validator::extend('foo', function($attribute, $value, $parameters) {\n        return $value == 'foo';\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Emails Using Mail Templates in PHP\nDESCRIPTION: Demonstrates how to send an email using a mail template in PHP. The example uses a template with the code 'this.is.my.email'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nMail::send('this.is.my.email', $data, function($message) use ($user)\n{\n    [...]\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Default Success Handler in AJAX Request\nDESCRIPTION: Example of running 'onCalculate' handler with a custom success function that calls the default success handler and then executes additional code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    success: function(data) {\n        this.success(data).done(function() {\n            // ... do something after parent success() is finished ...\n        });\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Parsing INI in PHP\nDESCRIPTION: Illustrates how to use the INI facade to parse INI syntax into a PHP array and vice versa.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$array = Ini::parse($iniString);\n\n$array = Ini::parseFile($filePath);\n\n$iniString = Ini::render($array);\n```\n\n----------------------------------------\n\nTITLE: Preventing Form Widget Data from Being Saved in PHP\nDESCRIPTION: Shows how to prevent a form widget from saving data to the database by returning a special constant from the getSaveValue method, useful for display-only widgets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function getSaveValue($value)\n{\n    return \\Backend\\Classes\\FormField::NO_SAVE_DATA;\n}\n```\n\n----------------------------------------\n\nTITLE: Event Registration with Named Event\nDESCRIPTION: Shows how to register an event listener with a specific event name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('acme.blog.myevent', ...);\n```\n\n----------------------------------------\n\nTITLE: Using the Component Tag in Twig Templates\nDESCRIPTION: Example showing how to insert a component with its default markup into a page using the component Twig tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/todo\"\n\n[demoTodo]\n==\n{% component 'demoTodo' %}\n```\n\n----------------------------------------\n\nTITLE: Writing Output in OctoberCMS Console Commands\nDESCRIPTION: This snippet shows different methods for writing output to the console in OctoberCMS commands, including informational and error messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->info('Display this on the screen');\n\n$this->error('Something went wrong!');\n```\n\n----------------------------------------\n\nTITLE: Form Fields Configuration in YAML\nDESCRIPTION: Example of form fields configuration in YAML format, showing how to define custom checkbox option for import/export functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# fields.yaml\nfields:\n\n    auto_create_lists:\n        label: Automatically create lists\n        type: checkbox\n        default: true\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with Composer\nDESCRIPTION: Command to create a new October CMS project using Composer, installing v1.1 (Laravel 6) to the specified directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project october/october:1.1.* myoctober\n```\n\n----------------------------------------\n\nTITLE: Storing File Using Local Driver in PHP\nDESCRIPTION: Demonstrates how to store a file using the local driver in October CMS. The operation is relative to the root directory defined in the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nStorage::disk('local')->put('file.txt', 'Contents');\n```\n\n----------------------------------------\n\nTITLE: Prepending and Appending to Files (PHP)\nDESCRIPTION: Examples of inserting content at the beginning or end of a file using the prepend and append methods, which is useful for log files or similar scenarios.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nStorage::prepend('file.log', 'Prepended Text');\n\nStorage::append('file.log', 'Appended Text');\n```\n\n----------------------------------------\n\nTITLE: Configuring List Structure in YAML for October CMS\nDESCRIPTION: This YAML snippet demonstrates how to configure the structure property in a list configuration file. It shows options for displaying a tree hierarchy, enabling reordering, and setting a maximum depth for the structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/structures.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\n\n# ...\n\nstructure:\n    showTree: true\n    showReorder: true\n    showSorting: false\n    maxDepth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple List Definitions (PHP)\nDESCRIPTION: Setting up multiple list definitions in a controller by defining the $listConfig property as an array with named configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic $listConfig = [\n    'templates' => 'config_templates_list.yaml',\n    'layouts' => 'config_layouts_list.yaml'\n];\n```\n\n----------------------------------------\n\nTITLE: Adding Session Key for Deferred Binding\nDESCRIPTION: Example demonstrating how to manually add a session key to a form for deferred binding functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::sessionKey() ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Revisionable Trait in October CMS Model\nDESCRIPTION: Demonstrates how to use the Revisionable trait to track and store changes to model attributes over time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Revisionable;\n\n    /**\n        * @var array Monitor these attributes for changes.\n        */\n    protected $revisionable = ['name', 'email'];\n\n    /**\n        * @var array Relations\n        */\n    public $morphMany = [\n        'revision_history' => ['System\\Models\\Revision', 'name' => 'revisionable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Rows from a Table in PHP\nDESCRIPTION: Uses the Db facade's table method to get all records from a table. The get method returns an array of results where each result is an instance of the PHP stdClass object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->get();\n```\n\n----------------------------------------\n\nTITLE: Component Usage in a Blog Post Page\nDESCRIPTION: This snippet demonstrates how to use a blog post component in a page template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"blog/post\"\n\n[blogPost]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPost\" %}\n```\n\n----------------------------------------\n\nTITLE: Chunking Results by ID in PHP\nDESCRIPTION: Uses the chunkById method to paginate results based on the record's primary key. This is useful when updating records while chunking to avoid unexpected changes in chunk results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('active', false)\n    ->chunkById(100, function ($users) {\n        foreach ($users as $user) {\n            Db::table('users')\n                ->where('id', $user->id)\n                ->update(['active' => true]);\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing NestedTree Trait in October CMS Model\nDESCRIPTION: Shows how to use the NestedTree trait to implement the nested set model for advanced hierarchical relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\NestedTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding an Interface to a Concrete Implementation in October CMS\nDESCRIPTION: Demonstrates how to bind an interface to a specific implementation class, allowing for dependency injection of concrete classes when interfaces are type-hinted.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nApp::bind('UserRepositoryInterface', 'DbUserRepository');\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables for Mail Templates in PHP\nDESCRIPTION: Shows how to register variables that are globally available to all mail templates using the 'View::share' method in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nView::share('site_name', 'OctoberCMS');\n```\n\n----------------------------------------\n\nTITLE: Form Behavior Configuration in YAML\nDESCRIPTION: Basic configuration for the form behavior including model class, form field definitions, and page titles for create, update and preview modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config_form.yaml\nname: Blog Category\nform: $/acme/blog/models/post/fields.yaml\nmodelClass: Acme\\Blog\\Post\n\ncreate:\n    title: New Blog Post\n\nupdate:\n    title: Edit Blog Post\n\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Attribute with Accessor\nDESCRIPTION: Demonstrates how to retrieve a value that uses an accessor method\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$firstName = $user->first_name;\n```\n\n----------------------------------------\n\nTITLE: Running Queue Worker in Daemon Mode\nDESCRIPTION: Shows different ways to start a queue worker in daemon mode (continuous processing), with various options for sleep time and retry attempts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work connection\n\nphp artisan queue:work connection --sleep=3\n\nphp artisan queue:work connection --sleep=3 --tries=3\n```\n\n----------------------------------------\n\nTITLE: Translating Text with Parameters using |trans Filter in Twig\nDESCRIPTION: Shows how to use the |trans filter with parameters to translate a string with variable content in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/trans.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ ':name loves programming.'|trans({ name: 'Jeff' }) }}\n```\n\n----------------------------------------\n\nTITLE: Basic Repeater Field Configuration in YAML\nDESCRIPTION: Basic implementation of a repeater field with date picker and textarea inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    form:\n        fields:\n            added_at:\n                label: Date Added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n```\n\n----------------------------------------\n\nTITLE: Filtering Input Values in PHP\nDESCRIPTION: Examples of retrieving only specific input values or excluding certain inputs from the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::only('username', 'password');\n\n$input = Input::except('credit_card');\n```\n\n----------------------------------------\n\nTITLE: Basic Radio List Configuration in YAML\nDESCRIPTION: Shows basic configuration of a radio list field with static options. Includes field type, label and option definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-radio.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    options:\n        all: All\n        registered: Registered only\n        guests: Guests only\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Controller in OctoberCMS\nDESCRIPTION: Demonstrates how to access the current controller object in OctoberCMS. The 'this.controller' property returns an instance of the Cms\\Classes\\Controller class, providing access to the current controller's functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# this.controller\n\nYou can access the current controller object via `this.controller` and it returns the object `Cms\\Classes\\Controller`.\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Example in October CMS\nDESCRIPTION: Shows how to load blog posts from a database and display them using Twig templating.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::orderBy('created_at', 'desc')->get();\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h2>Latest posts</h2>\n<ul>\n    {% for post in posts %}\n        <h3>{{ post.title }}</h3>\n        {{ post.content }}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Building Complex Mail Messages in October CMS\nDESCRIPTION: Example of using the callback function to build a more complex email with from, to, and cc fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog::mail.welcome', $vars, function($message) {\n    $message->from('us@example.com', 'October');\n    $message->to('foo@example.com')->cc('bar@example.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Using array_where() Function in PHP\nDESCRIPTION: The array_where function filters an array using a given Closure. It allows filtering array elements based on custom criteria, returning only those elements where the callback returns true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, '200', 300, '400', 500];\n\n$array = array_where($array, function ($value, $key) {\n    return is_string($value);\n});\n\n// [1 => 200, 3 => 400]\n```\n\n----------------------------------------\n\nTITLE: Migration File Class Structure in PHP\nDESCRIPTION: Example of a migration file class structure with proper namespace and class naming conventions. The file should use snake_case while the class uses CamelCase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Updates;\n\nuse Schema;\nuse October\\Rain\\Database\\Updates\\Migration;\n\n/**\n * some_upgrade_file.php\n */\nclass SomeUpgradeFile extends Migration\n{\n    ///\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Queue Name for Job in PHP\nDESCRIPTION: Shows how to direct a job to a specific queue or tube by providing a third parameter to the Queue::push method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message], 'emails');\n```\n\n----------------------------------------\n\nTITLE: Cross Joining Collections with crossJoin()\nDESCRIPTION: The crossJoin() method cross joins the collection's values with given arrays or collections, returning a Cartesian product with all possible permutations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Using the shift() Method in PHP Collections\nDESCRIPTION: The shift method removes and returns the first item from the collection, modifying the original collection. Similar to PHP's array_shift function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->shift();\n\n// 1\n\n$collection->all();\n\n// [2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachment from URL in PHP\nDESCRIPTION: Demonstrates how to add a file attachment from a URL in PHP, requiring the cURL PHP Extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$file = new System\\Models\\File;\n$file->fromUrl('https://example.com/uploads/public/path/to/avatar.jpg');\n\n$user->avatar()->add($file);\n```\n\n----------------------------------------\n\nTITLE: Sharing POST Parameters Across Multiple Elements\nDESCRIPTION: Shows how to share common POST parameters across multiple AJAX requests by using a parent element with data-request-data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-request-data=\"id: 7\">\n    <button data-request=\"onDelete\">Delete</button>\n    <button data-request=\"onSave\">Update</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using str_slug() String Helper in PHP\nDESCRIPTION: The str_slug function generates a URL-friendly 'slug' from the given string. It removes special characters, replaces spaces with the specified separator, and ensures the result is suitable for use in URLs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$title = str_slug(\"October CMS\", \"-\");\n\n// october-cms\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Environment Variables\nDESCRIPTION: Sets the necessary environment variables to configure an October CMS application to use an SQLite database. Requires specifying the database connection type and the absolute path to the SQLite database file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/database-config.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDB_CONNECTION=sqlite\nDB_DATABASE=/absolute/path/to/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Menu Items in PHP\nDESCRIPTION: Examples of modifying existing navigation items using the backend.menu.extendItems event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n    $manager->getMainMenuItem('October.Editor', 'editor')->label('Code Editor');\n});\n```\n\n----------------------------------------\n\nTITLE: Streamed Download Response\nDESCRIPTION: Shows how to create a downloadable response from a string without writing to disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::streamDownload(function() {\n    echo 'CSV Contents...';\n}, 'export.csv');\n```\n\n----------------------------------------\n\nTITLE: Storing User Avatar with Default Disk\nDESCRIPTION: Example of storing a user's avatar on the default disk using the Storage facade without explicitly specifying a disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find($id);\n\nStorage::put(\n    'avatars/'.$user->id,\n    file_get_contents(Request::file('avatar')->getRealPath())\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Only Soft Deleted Models - PHP\nDESCRIPTION: Demonstrates how to query for only soft deleted models using the onlyTrashed method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = User::onlyTrashed()->where('account_id', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Ignoring ID in Unique Rule Validation in PHP\nDESCRIPTION: Demonstrates how to force a unique rule to ignore a specific ID when validating uniqueness.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address,10'\n```\n\n----------------------------------------\n\nTITLE: Implementing a Behavior in a Class\nDESCRIPTION: Example showing how to implement a behavior in a class and override one of its methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace;\n\nclass Controller extends \\October\\Rain\\Extension\\Extendable\n{\n\n    /**\n     * ÂÆûÁé∞ FormController Ë°å‰∏∫\n     */\n    public $implement = [\n        'MyNamespace.Behaviors.FormController'\n    ];\n\n    public function otherMethod()\n    {\n        return \"ÊàëÊù•Ëá™‰∏ªÊéßÂà∂Âô®ÔºÅ\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Templates in PHP\nDESCRIPTION: Shows how to register mail views as templates that can be automatically generated in the back-end. This is done by overriding the 'registerMailTemplates' method in the Plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailTemplates()\n{\n    return [\n        'rainlab.user::mail.activate',\n        'rainlab.user::mail.restore'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Aggregate Functions with Conditions\nDESCRIPTION: Shows how to use an aggregate function (avg) with where conditions to calculate the average price of finalized orders.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$price = Db::table('orders')\n    ->where('is_finalized', 1)\n    ->avg('price');\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Record into Database Table\nDESCRIPTION: Shows how to insert a single record into a database table using the insert method with an array of column names and values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.tld', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Dropdown Options in PHP\nDESCRIPTION: This example illustrates how to create a dropdown property with dynamic options. It defines the property in the defineProperties method and implements a separate method to fetch the options dynamically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dropdown.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title' => 'Country',\n            'type' => 'dropdown',\n            'default' => 'us'\n        ]\n    ];\n}\n\npublic function getCountryOptions()\n{\n    return ['us' => 'United states', 'ca' => 'Canada'];\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Models in OctoberCMS (PHP)\nDESCRIPTION: Demonstrates how to perform updates on multiple models that match a given query using the where and update methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nFlight::where('is_active', true)\n    ->where('destination', 'Perth')\n    ->update(['delayed' => true]);\n```\n\n----------------------------------------\n\nTITLE: Detecting AJAX Requests in Twig\nDESCRIPTION: Shows how to detect if the current request was made using AJAX by checking the this.request.ajax property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-request.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.request.ajax %}\n    Request was submitted via AJAX\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Storing Files with Content or Resource (PHP)\nDESCRIPTION: Examples showing how to store files using the put method, which accepts either file contents as a string or a PHP resource. Using streams is recommended for large files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nStorage::put('file.jpg', $contents);\n\nStorage::put('file.jpg', $resource);\n```\n\n----------------------------------------\n\nTITLE: Custom Collection Implementation\nDESCRIPTION: Shows how to create and use custom collection classes by overriding the newCollection method in models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/collection.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Create a new Collection instance.\n     */\n    public function newCollection(array $models = [])\n    {\n        return new CustomCollection($models);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereNotNull Method in PHP\nDESCRIPTION: Shows how to filter a collection by removing items where a specified key's value is null.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk'],\n    ['name' => null],\n    ['name' => 'Bookcase'],\n]);\n\n$filtered = $collection->whereNotNull('name');\n\n$filtered->all();\n\n/*\n    [\n        ['name' => 'Desk'],\n        ['name' => 'Bookcase'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Halting Exceptions\nDESCRIPTION: Shows how to dispatch events while halting the AJAX process with an exception.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function onUpdate()\n{\n    $this->dispatchBrowserEvent('app:stale-document');\n\n    throw new AjaxException;\n}\n```\n\n----------------------------------------\n\nTITLE: Validating File Uploads in PHP\nDESCRIPTION: Shows how to verify that a file was uploaded successfully without errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nif ($file->isValid()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Section Display Type in PHP\nDESCRIPTION: Example of creating a navigation section using itemType property set to 'section'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'_section1' => [\n    'itemType' => 'section',\n    'label' => 'Advanced',\n],\n```\n\n----------------------------------------\n\nTITLE: Conditional Processing on Empty Collections with whenEmpty() Method in PHP\nDESCRIPTION: The whenEmpty() method executes a given callback when the collection is empty. It can also take an optional second callback to execute when the collection is not empty, providing a fluent interface for conditional logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_76\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['michael', 'tom']);\n\n$collection->whenEmpty(function ($collection) {\n    return $collection->push('adam');\n});\n\n$collection->all();\n\n// ['michael', 'tom']\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect();\n\n$collection->whenEmpty(function ($collection) {\n    return $collection->push('adam');\n});\n\n$collection->all();\n\n// ['adam']\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['michael', 'tom']);\n\n$collection->whenEmpty(function ($collection) {\n    return $collection->push('adam');\n}, function ($collection) {\n    return $collection->push('taylor');\n});\n\n$collection->all();\n\n// ['michael', 'tom', 'taylor']\n```\n\n----------------------------------------\n\nTITLE: Data Table Widget in YAML\nDESCRIPTION: Configuration for data table widget with editing capabilities and display options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    type: datatable\n    adding: true\n    deleting: true\n    columns: []\n    recordsPerPage: false\n    searching: false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Properties\nDESCRIPTION: Examples showing how to retrieve dynamically added properties from an extendable object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model->getDynamicProperties();\n```\n\nLANGUAGE: php\nCODE:\n```\n$model->getDynamicProperties()[$key];\n```\n\n----------------------------------------\n\nTITLE: Injecting JavaScript Files Programmatically in PHP\nDESCRIPTION: Example of how to programmatically inject JavaScript files through PHP in an onStart() method. This approach can be used in components or pages to add JavaScript assets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Multisite Synchronization Options\nDESCRIPTION: Defines detailed synchronization behavior including sync scope, deletion rules, and excluded attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nprotected $propagatableSync = [\n    'sync' => 'all',\n    'delete' => false,\n    'except' => [\n        'description'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Behaviors in October CMS\nDESCRIPTION: Example of how to implement behaviors in a class by extending Extendable and defining the behaviors in the $implement property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        'October.Rain.UtilityFunctions',\n        'October.Rain.DeferredBinding',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Output of |app filter for favicon in HTML\nDESCRIPTION: Shows the resulting HTML output when using the |app filter for a favicon, assuming the website address is https://octobercms.com. The filter generates an absolute URL to the favicon.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/app.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"https://octobercms.com/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Contextual Information to Logs in PHP\nDESCRIPTION: Demonstrates how to include contextual data with log messages, which will be formatted and displayed alongside the message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/log.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nLog::info('User failed to login.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget for Image Selection in YAML\nDESCRIPTION: This example shows how to set up the Media Finder widget for image selection. It uses the 'mode' property set to 'image' to enable image preview functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-mediafinder.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbackground_image:\n    label: Background Image\n    type: mediafinder\n    mode: image\n```\n\n----------------------------------------\n\nTITLE: Extending a User Model with Event Listeners\nDESCRIPTION: Examples of extending a User model by binding to its getAttribute event to modify attribute values, including a targeted modification for a specific user.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Local event hook that affects all users\nUser::extend(function ($model) {\n    $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n        if ($attribute === 'foo') {\n            return 'bar';\n        }\n    });\n});\n\n// Double event hook that affects user #2 only\nUser::extend(function ($model) {\n    $model->bindEvent('model.afterFetch', function () use ($model) {\n        if ($model->id !== 2) {\n            return;\n        }\n\n        $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n            if ($attribute === 'foo') {\n                return 'bar';\n            }\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Page Initialization Handler\nDESCRIPTION: Example of implementing an initialization function that runs before AJAX handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction onInit()\n{\n    // From a page or layout PHP code section\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Context Variables in Twig Macros\nDESCRIPTION: Demonstrates how to handle context variables in macros. Since macros don't have access to current page variables by default, the _context variable can be passed to provide access.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% macro myFunction(vars) %}\n    {{ vars.site_name }}\n{% endmacro %}\n\n{% import _self as form %}\n\n<!-- October CMS -->\n{{ form.myFunction(_context) }}\n```\n\n----------------------------------------\n\nTITLE: Defining an AJAX Handler in PHP\nDESCRIPTION: Shows how to define an AJAX handler named onResetPassword in PHP, which assigns a variable to the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onResetPassword()\n{\n    $this['someVariable'] = 'someValue';\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from Session using Session Facade in PHP\nDESCRIPTION: Demonstrates how to remove specific items or all data from the session using the pull, forget, and flush methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/session.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::pull('key', 'default');\n```\n\nLANGUAGE: php\nCODE:\n```\nSession::forget('key');\n\nSession::flush();\n```\n\n----------------------------------------\n\nTITLE: Generating File Download Response in PHP\nDESCRIPTION: Demonstrates different ways to generate a file download response, including specifying a custom filename and deleting the file after sending.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::download($pathToFile);\n\nreturn Response::download($pathToFile, $name, $headers);\n\nreturn Response::download($pathToFile)->deleteFileAfterSend(true);\n```\n\n----------------------------------------\n\nTITLE: PHP Model Scope Implementation\nDESCRIPTION: PHP implementation of the textFilter scope method handling both equals and contains conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-text.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction scopeTextFilter($query, $scope)\n{\n    if ($scope->condition === 'equals') {\n        $query->where('username', $scope->value);\n    }\n    else {\n        $query->where('username', 'LIKE', \"%{$scope->value}%\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Output Example\nDESCRIPTION: Example of the JSON output returned by the basic response function call.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/response.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"foo\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Local Event in PHP for October CMS Model Extension\nDESCRIPTION: This code shows how to bind to local events when extending a model. It listens for the model.beforeSave event and executes a custom function when triggered.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\Models\\User::extend(function($model) {\n    $model->bindEvent('model.beforeSave', function() use ($model) {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Polling in Twig\nDESCRIPTION: Twig template showing how to conditionally stop polling based on a variable state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/polling.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if not launchDone %}\n    <div\n        data-request=\"onAjax\"\n        data-request-update=\"{ _self: true }\"\n        data-auto-submit=\"2000\"></div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edit Site in PHP\nDESCRIPTION: Demonstrates how to get the site selected in the admin panel using the getEditSite method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$site = Site::getEditSite();\n```\n\n----------------------------------------\n\nTITLE: Import Page YAML Configuration\nDESCRIPTION: Shows detailed YAML configuration for the import page including title, model class, list columns and redirect.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n    title: Import Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberImport\n    list: $/acme/campaign/models/subscriberimport/columns.yaml\n    redirect: acme/campaign/subscribers\n```\n\n----------------------------------------\n\nTITLE: Extending a Model with Local Events (PHP)\nDESCRIPTION: Example of how to extend a model to bind a local event. This allows for listening to events on a specific model instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('user.register', function () use ($model) {\n        // Code to register $model->email to mailing list\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Page Redirect with Parameters in Twig\nDESCRIPTION: Shows how to redirect to a CMS page while passing additional parameters. This example redirects to a 'docs' page with a slug parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/redirect.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('docs', { slug: 'home' }) %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregates in PHP for October CMS\nDESCRIPTION: Demonstrates using aggregate functions like count() and max() on model queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$count = Flight::where('active', 1)->count();\n\n$max = Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Creating Model with Artisan Command\nDESCRIPTION: Command to generate new model files using October CMS artisan command\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/models.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:model Acme.Blog Post\n```\n\n----------------------------------------\n\nTITLE: Flashing Input to Session\nDESCRIPTION: Methods for flashing input data to the session for retrieval during the next request, useful for form validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nInput::flash();\n```\n\n----------------------------------------\n\nTITLE: Creating Submit Buttons\nDESCRIPTION: Example showing how to generate a submit button for form submission with custom text.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::submit('Click Me!') ?>\n```\n\n----------------------------------------\n\nTITLE: Registering Settings Model Link in October CMS\nDESCRIPTION: Example of registering a settings link to a settings model in the Plugin registration class by overriding the registerSettings method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'settings' => [\n            'label'       => 'User Settings',\n            'description' => 'Manage user based settings.',\n            'category'    => 'Users',\n            'icon'        => 'icon-cog',\n            'class'       => 'Acme\\\\User\\\\Models\\\\Settings',\n            'order'       => 500,\n            'keywords'    => 'security location',\n            'permissions' => ['acme.users.access_settings']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Download Button with AJAX in HTML\nDESCRIPTION: Shows how to create a download button using HTML and AJAX attributes. It demonstrates basic usage, custom filename specification, and opening downloads in a new window.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/downloads.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onExport\" data-request-download>\n    Download\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onExport\" data-request-download=\"data.csv\">\n    Download Document\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onExport\" data-request-download data-browser-target=\"_blank\">\n    Open in New Window\n</button>\n```\n\n----------------------------------------\n\nTITLE: Using Where Clauses in Joins\nDESCRIPTION: Shows how to use where and orWhere methods in join clauses to compare column values against specific values rather than comparing two columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n            ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using html_clean() Twig Function in OctoberCMS\nDESCRIPTION: Shows how to use the html_clean() function in Twig templates to clean HTML and prevent most XSS attacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/html.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<script>window.location = \"http://google.com\"</script>'|html_clean }}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Template Structure in HTML/Twig\nDESCRIPTION: Demonstrates the simplest possible layout template with the page tag for content injection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/layouts.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: String Padding and Manipulation Functions\nDESCRIPTION: Functions for padding strings with characters and other string manipulations like repetition and reversal.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/str.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'xxx'|str_pad_both(7, 'o') }}\n{{ 'xxx'|str_pad_left(5, 'o') }}\n{{ 'xxx'|str_pad_right(5, 'o') }}\nWe are the {{ 'best '|str_repeat(3) }}!\n{{ 'Hello world!'|str_reverse }}\n```\n\n----------------------------------------\n\nTITLE: Tailor Field Validation Configuration\nDESCRIPTION: Adding server-side numeric validation to a number field using the validation property in Tailor fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-number.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    validation: numeric\n```\n\n----------------------------------------\n\nTITLE: Using Reverse Routing with URL Parameters\nDESCRIPTION: Shows how to use reverse routing by passing URL parameters when linking to pages with dynamic URLs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page({ post_id: 10 }) }}\">\n    Blog post #10\n</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Import View in PHP\nDESCRIPTION: Example of an import view file (import.htm) that renders the import form and submission button. Uses the importRender() method provided by the behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->importRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onImportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Import records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Basic Currency Field Configuration - YAML\nDESCRIPTION: Basic YAML configuration for implementing a currency input field in an OctoberCMS form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-currency.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Total amount\n    type: currency\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color List Method in PHP\nDESCRIPTION: PHP model method implementation for providing dynamic color options to the color picker widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-colorpicker.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function myColorList($fieldName, $value, $formData)\n{\n    return ['#000000', '#111111', '#222222']\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Context in Controller Constructor\nDESCRIPTION: Example of setting the navigation context in a controller constructor to determine active menu and submenu items in the backend.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller {\n\npublic function __construct()\n{\n    parent::__construct();\n\n    BackendMenu::setContext('Acme.Blog', 'blog', 'categories');\n}\n```\n\n----------------------------------------\n\nTITLE: Length Validation Implementation\nDESCRIPTION: Shows how to implement length validation with minimum and maximum constraints for strings or arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector-types.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'name' => [\n            'title' => 'Name',\n            'type' => 'string',\n            'validation' => [\n                'length' => [\n                    'min' => [\n                        'value' => 2,\n                        'message' => 'The name should not be shorter than two letters.'\n                    ],\n                    'max' => [\n                        'value' => 10,\n                        'message' => 'The name should not be longer than 10 letters.'\n                    ]\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for SQLite Connection\nDESCRIPTION: Environment variable configuration required to use an SQLite database in October CMS, specifying the connection type and absolute path to the database file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/database-config.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nDB_CONNECTION=sqlite\nDB_DATABASE=/absolute/path/to/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Configuring Metrics Query with Join Operation\nDESCRIPTION: Implementation of metric configuration using onConfigureMetrics to join sales table with products table for accessing metric data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$reportQueryBuilder->onConfigureMetrics(\n    function(Builder $query, ReportDimension $dimension, array $metrics) {\n        $query->leftJoin('acme_shop_sales', function($join) {\n            $join->on('acme_shop_sales.product_id', '=', 'acme_shop_products.id');\n        });\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Results in PHP\nDESCRIPTION: Example showing how to paginate a model query with 15 items per page, which is similar to paginating query builder results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Database Results in PHP\nDESCRIPTION: Shows how to loop through database query results returned as an array of PHP stdClass objects, accessing the properties of each result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Popup Form Button in HTML for October CMS\nDESCRIPTION: This HTML snippet demonstrates how to create a button that opens a popup form using the onLoadPopupForm AJAX handler in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    data-control=\"popup\"\n    data-handler=\"onLoadPopupForm\"\n    class=\"btn btn-primary\">\n    New Item\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Required Route Parameters in October CMS\nDESCRIPTION: Example of capturing URI segments as route parameters that are required for the route to match.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{id}', function ($id) {\n    return 'User '.$id;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Behavior Class in October CMS\nDESCRIPTION: Complete example of how to define a behavior/extension class with methods that will be mixed into the implementing class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Behaviors;\n\nclass FormController extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    /**\n     * @var Reference to the extended object.\n     */\n    protected $controller;\n\n    /**\n     * Constructor\n     */\n    public function __construct($controller)\n    {\n        $this->controller = $controller;\n    }\n\n    public function someMethod()\n    {\n        return \"I come from the FormController Behavior!\";\n    }\n\n    public function otherMethod()\n    {\n        return \"You might not see me...\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: External Mutator Definition Using Event\nDESCRIPTION: Demonstrates how to define a mutator externally using the model.setAttribute event binding\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.setAttribute', function ($attribute, $value) use ($model) {\n        if ($attribute === 'first_name') {\n            $model->attributes['first_name'] = strtolower($value);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Tabbed Nested Form Configuration in YAML\nDESCRIPTION: Illustrates how to implement tabs within a nested form by placing fields under the tabs property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-nestedform.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntabbed_content:\n    type: nestedform\n    form:\n        tabs:\n            fields:\n                # ...\n```\n\n----------------------------------------\n\nTITLE: Getting All Input Values in PHP\nDESCRIPTION: Shows how to retrieve all input values from the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::all();\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values with Config Facade in October CMS\nDESCRIPTION: Demonstrates how to access configuration values using the Config facade. The format follows plugin.name::key pattern with an optional default value if the configuration doesn't exist.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/file-settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$maxItems = Config::get('acme.demo::maxItems', 50);\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Context in PHP Controllers\nDESCRIPTION: PHP code for setting the navigation context within a controller using the BackendMenu facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nBackendMenu::setTailorContext('Blog\\Post', 'testimonials');\n\nBackendMenu::setTailorContextUuid('edcd102e-0525-4e4d-b07e-633ae6c18db6', 'testimonials');\n```\n\n----------------------------------------\n\nTITLE: Generating Filter Widget Files with Artisan (Bash)\nDESCRIPTION: Uses the create:filterwidget Artisan command to generate the necessary files for a new filter widget. This command creates the widget class, view, and basic asset files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:filterwidget Acme.Blog Discount\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Route Parameters in October CMS\nDESCRIPTION: Examples of making route parameters optional by adding a question mark after the parameter name with default values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{name?}', function ($name = null) {\n    return $name;\n});\n\nRoute::get('user/{name?}', function ($name = 'John') {\n    return $name;\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with where() Method - PHP\nDESCRIPTION: Demonstrates using the where() method to filter collections by key/value pairs with support for loose comparisons and optional comparison operators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_78\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->where('price', 100);\n\n$filtered->all();\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget for Folder Selection in YAML\nDESCRIPTION: This snippet illustrates how to configure the Media Finder widget to select a media folder path. It uses the 'mode' property set to 'folder' to restrict selection to folders only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-mediafinder.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_folder:\n    label: Media Folder\n    type: mediafinder\n    mode: folder\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Boot Method for Model Extension in PHP\nDESCRIPTION: Example of using the boot method in a plugin registration file to extend models. This method is called right before a request is routed and is ideal for functionality that depends on other plugins.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function boot()\n{\n    User::extend(function($model) {\n        $model->hasOne['author'] = ['Acme\\Blog\\Models\\Author'];\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Queue Workers\nDESCRIPTION: Shows a complete Supervisor configuration file example that starts and monitors multiple queue worker processes, ensuring they automatically restart if they fail.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[program:october-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /path/to/october/artisan queue:work --sleep=3 --tries=3\nautostart=true\nautorestart=true\nuser=october\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/path/to/october/worker.log\n```\n\n----------------------------------------\n\nTITLE: Searching Collection Records in October CMS\nDESCRIPTION: Example showing how to search collection records using the 'searchWhere()' method to perform case-insensitive searches across multiple columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set foundPages = pages.searchWhere(searchTerm, ['title', 'content']).get() %}\n```\n\n----------------------------------------\n\nTITLE: Create Page Configuration in YAML\nDESCRIPTION: Configuration specifically for the create page, including title and redirect options after saving.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreate:\n    title: New Blog Post\n    redirect: acme/blog/posts/update/:id\n    redirectClose: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Plugin Version File Structure in YAML\nDESCRIPTION: Example of a version.yaml file with version numbers, update comments, and references to migration scripts. Shows both simple version updates and complex migrations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: Á¨¨‰∏ÄÁâà\nv1.0.2: Á¨¨‰∫åÁâà\nv1.0.3:\n    - ‰ΩøÁî®ËøÅÁßªÂíåÁßçÂ≠êÊõ¥Êñ∞\n    - create_tables.php\n    - seed_the_database.php\nv2.0.0: ÈáçË¶ÅÊõ¥Êñ∞\nv2.0.1: ÊúÄÊñ∞ÁâàÊú¨\n```\n\n----------------------------------------\n\nTITLE: Writing to a Settings Model in PHP\nDESCRIPTION: This code snippet shows different ways to write values to a settings model, including using the static 'set' method for individual or multiple values, and using standard model features for setting properties and saving.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Demo\\Models\\UserSetting;\n\n// Set a single value\nUserSetting::set('api_key', 'ABCD');\n\n// Set an array of values\nUserSetting::set(['api_key' => 'ABCD']);\n\n// Set object values\n$settings = UserSetting::instance();\n$settings->api_key = 'ABCD';\n$settings->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Cache Items in PHP\nDESCRIPTION: Example of using the 'pull' method to retrieve and delete a cache item in one operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::pull('key');\n```\n\n----------------------------------------\n\nTITLE: Registering Failed Job Event Handler in PHP\nDESCRIPTION: PHP code to register an event handler for failed queue jobs. This snippet demonstrates how to use the Queue::failing method to set up a callback function that will be called when a queue job fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nQueue::failing(function($connection, $job, $data) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Local Event Binding in User Model\nDESCRIPTION: Demonstrates extending a user model by binding to a local registration event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('user.register', function () use ($model) {\n        // Code to register $model->email to mailing list\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Array Intersection with intersect Method in PHP\nDESCRIPTION: Removes values not present in given array/collection while preserving original keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Desk', 'Sofa', 'Chair']);\n\n$intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n\n$intersect->all();\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to Routes with the Url Facade\nDESCRIPTION: Shows how to generate URLs to defined routes using the Url facade's to method, which creates a proper URL based on the route definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$url = Url::to('foo');\n```\n\n----------------------------------------\n\nTITLE: Throwing AJAX Exception in October CMS\nDESCRIPTION: Shows how to throw an AjaxException, which returns HTTP code 406 but allows passing response contents as if it were a successful response. It's used with the AJAX framework.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException(['#flashMessages' => $this->renderPartial(...)]);\n```\n\n----------------------------------------\n\nTITLE: Mail View Template Structure\nDESCRIPTION: Example of a complete mail view file structure with configuration, plain text, and HTML sections\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nsubject = \"Your product has been added to October CMS project\"\n```\n\nLANGUAGE: twig\nCODE:\n```\nHi {{ name }},\n\nGood news! User {{ user }} just added your product \"{{ product }}\" to a project.\n\nThis message was sent using no formatting (plain text)\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hi {{ name }},</p>\n\n<p>\n    <strong>Good news!</strong>\n    User {{ user }} just added your product \"{{ product }}\" to a project.\n</p>\n\n<p>This email was sent using formatting (HTML)</p>\n```\n\n----------------------------------------\n\nTITLE: Cache Storage Operations\nDESCRIPTION: Methods for storing items in the cache with expiration times and permanent storage options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nCache::put('key', 'value', $seconds);\n\n$expiresAt = Carbon::now()->addMinutes(10);\n\nCache::put('key', 'value', $expiresAt);\n\nCache::add('key', 'value', $seconds);\n\nCache::forever('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Escaping\nDESCRIPTION: Comprehensive example showing how to configure output escaping for various types of Twig extensions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMarkupTags()\n{\n    return [\n        'functions' => [\n            // Escaped Functions\n            'input' => ['input', true],\n\n            // Raw Functions\n            'link_to' => 'link_to',\n\n            // Escaped Classes\n            'str_*' => [\\Str::class, '*', true],\n\n            // Raw Classes\n            'url_*' => [\\Url::class, '*'],\n        ],\n        'filters' => [\n            // Escaped Filters\n            'display_name' => [fn ($user) => $user->getDisplayName(), true],\n\n            // Raw Filters\n            'avatar_url' => [fn ($user) => $user->getAvatarUrl()],\n\n            // Escaped Classes\n            'str_*' => [\\Str::class, '*', true],\n\n            // Raw Classes\n            'url_*' => [\\Url::class, '*'],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Read/Write Database Connections in October CMS\nDESCRIPTION: Example configuration for setting up separate read and write database connections in October CMS. This allows using different database servers for SELECT operations versus INSERT/UPDATE/DELETE operations, while sharing other connection parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/database-config.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => [\n    'read' => [\n        'host' => '192.168.1.1',\n    ],\n    'write' => [\n        'host' => '196.168.1.2'\n    ],\n    'driver'    => 'mysql',\n    'database'  => 'database',\n    'username'  => 'root',\n    'password'  => '',\n    'charset'   => 'utf8',\n    'collation' => 'utf8_unicode_ci',\n    'prefix'    => '',\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Dictionary Properties in OctoberCMS PHP\nDESCRIPTION: Example of how to define a dictionary property in a component's defineProperties method. This code creates an 'options' property with dictionary type and a default key-value pair.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dictionary.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'options' => [\n            'title' => 'Options',\n            'type' => 'dictionary',\n            'default' => ['option1' => 'Option 1'],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Dropdown Options in PHP\nDESCRIPTION: Defines a method in the model class to provide dynamic options for a dropdown field. This method should return an array of options in the format key => label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusOptions($keyValue = null)\n{\n    return ['all' => 'All', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Models with Constraints in PHP for October CMS\nDESCRIPTION: Demonstrates adding constraints to model queries using methods like where(), orderBy(), and take().\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$flights = Flight::where('active', 1)\n    ->orderBy('name', 'desc')\n    ->take(10)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple HTTP Verb Routes in October CMS\nDESCRIPTION: Shows how to register routes that respond to multiple HTTP verbs using the match method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nRoute::match(['get', 'post'], '/', function () {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscriber Export Model for October CMS in PHP\nDESCRIPTION: Example of creating an export model by extending Backend\\Models\\ExportModel. This class handles exporting subscriber data by making selected columns visible.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-model.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberExport extends \\Backend\\Models\\ExportModel\n{\n    public function exportData($columns, $sessionKey = null)\n    {\n        $subscribers = Subscriber::all();\n\n        $subscribers->each(function($subscriber) use ($columns) {\n            $subscriber->addVisible($columns);\n        });\n\n        return $subscribers->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Binding Implementation in PHP\nDESCRIPTION: Example of implementing deferred binding with a session key for relationship management.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$sessionKey = uniqid('session_key', true);\n\n$comment = new Comment;\n$comment->content = \"Hello world!\";\n$comment->save();\n\n$post = new Post;\n$post->comments()->add($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Counting Related Records with withCount in October CMS\nDESCRIPTION: This example shows how to count related records using the withCount method. It adds a roles_count column to the retrieved user models containing the count of related roles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = User::withCount('roles')->get();\n\nforeach ($users as $user) {\n    echo $user->roles_count;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Runtime Exception Handler in October CMS\nDESCRIPTION: Demonstrates how to register a custom exception handler for RuntimeException instances. The handler is called based on the type-hint of the exception it handles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(RuntimeException $exception) {\n    // Handle the exception...\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Rendering with Twig\nDESCRIPTION: Demonstrates basic partial rendering inside a div element using the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div id=\"myDiv\">\n    {% partial 'mytime' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Component Property Values from URL Parameters\nDESCRIPTION: This snippet demonstrates how to load component property values from URL parameters using the colon syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ :maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Record with Query Builder in PHP\nDESCRIPTION: Shows how to insert a single record into a database table using the insert method of the query builder. The method accepts an array of column names and values to insert.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.com', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Component Default Markup with __SELF__ Reference in October CMS\nDESCRIPTION: This code shows the default markup of a component with references to the __SELF__ variable. The __SELF__ variable refers to the component object and provides access to its properties and methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ __SELF__.post.title }}</h1>\n<p>{{ __SELF__.post.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Class in October CMS\nDESCRIPTION: Basic class definition for a report widget that extends ReportWidgetBase. The render method is overridden to display the widget content using a partial view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/report-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace RainLab\\GoogleAnalytics\\ReportWidgets;\n\nuse Backend\\Classes\\ReportWidgetBase;\n\nclass TrafficSources extends ReportWidgetBase\n{\n    public function render()\n    {\n        return $this->makePartial('widget');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple File Attachments in PHP Model\nDESCRIPTION: Shows how to define multiple file attachments using $attachMany property in a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/attachments.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic $attachMany = [\n    'photos' => 'System\\Models\\File'\n];\n```\n\n----------------------------------------\n\nTITLE: Using oc.ajax for Requests Without Form Element\nDESCRIPTION: Example of using the oc.ajax method to execute a request without a FORM element, with a success callback that logs to console.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\noc.ajax('onCalculate', {\n    success: function() {\n        console.log('Finished!');\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Component as Snippet in PHP\nDESCRIPTION: Demonstrates how to register a CMS component as a snippet using the registerPageSnippets method in a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPageSnippets()\n{\n    return [\n        \\RainLab\\Weather\\Components\\Weather::class => 'weather'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Relation Field Conditions in YAML\nDESCRIPTION: Demonstrates how to use parameters in relation field conditions, allowing for dynamic filtering based on parent model attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: relation\n\nstate:\n    label: State\n    type: relation\n    dependsOn: country\n    conditions: custom_country_id = :country_id\n```\n\n----------------------------------------\n\nTITLE: Returning a Model Resource in API\nDESCRIPTION: Demonstrates how to return a model resource wrapped in a 'data' attribute for consistent API design. This example uses a Section CMS component to fetch a blog post by slug.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/api/blog/post/:slug\"\n\n[section post]\nhandle = \"Blog\\Post\"\nidentifier = \"slug\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if post %}\n    {% do response({\n        data: post\n    }) %}\n{% else %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Currency Field Form Widget Definition in YAML\nDESCRIPTION: Simple YAML configuration for creating a currency input field in an October CMS form. This creates a basic currency input with a label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-currency.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Total amount\n    type: currency\n```\n\n----------------------------------------\n\nTITLE: Delayed Queue Job Execution\nDESCRIPTION: Demonstrates how to delay a queue job execution using Queue::later method with Carbon datetime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$date = Carbon::now()->addMinutes(15);\n\nQueue::later($date, 'SendEmail', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Message in PHP AJAX Handler\nDESCRIPTION: Demonstrates how to set a flash message in a PHP AJAX event handler using the Flash facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onSuccess()\n{\n    Flash::success('You did it!');\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Command Registration\nDESCRIPTION: Example of registering a command using Artisan::add in the init.php file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nArtisan::add(new Acme\\Blog\\Console\\MyCommand);\n```\n\n----------------------------------------\n\nTITLE: Resetting Array Keys with values() Method in PHP Collections\nDESCRIPTION: The values() method returns a new collection with the keys reset to consecutive integers. This is useful when you need a zero-based numerically indexed array after operations that may have altered the original keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    10 => ['product' => 'Desk', 'price' => 200],\n    11 => ['product' => 'Desk', 'price' => 200]\n]);\n\n$values = $collection->values();\n\n$values->all();\n\n/*\n    [\n        0 => ['product' => 'Desk', 'price' => 200],\n        1 => ['product' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Resizing a Media Library Image for Browser Output in OctoberCMS\nDESCRIPTION: Resolves a media library path and resizes the image using the ResizeImages class, returning a URL to the resized version for browser access.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$image = \\Media\\Classes\\MediaLibrary::url('relative/path/to/asset.jpg');\n\n$url = \\System\\Classes\\ResizeImages::resize($image, $width, $height, $options);\n```\n\n----------------------------------------\n\nTITLE: Pruning Unused Tailor Data\nDESCRIPTION: Command to remove unused database columns and tables that are no longer associated with blueprints. This helps keep the database clean.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:prune\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Display with Twig\nDESCRIPTION: Demonstrates basic usage of the pager() function to display paginated records and render page links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"container\">\n    {% for user in users %}\n        {{ user.name }}\n    {% endfor %}\n</div>\n\n{{ pager(users) }}\n```\n\n----------------------------------------\n\nTITLE: Multiple Trigger Actions in YAML\nDESCRIPTION: Demonstrates how to combine multiple trigger actions using the pipe symbol. Shows configuration for both showing and emptying an input based on a condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show|empty\n    condition: checked\n    field: name\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Configuration in Twig Templates\nDESCRIPTION: Retrieves configuration values from the theme.yaml file using the theme.config property. This example accesses the description property to set a meta tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/this-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.theme.config.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Extending List Columns Inside Controller Class in PHP\nDESCRIPTION: This PHP code shows how to extend list columns by overriding the listExtendColumns method inside the controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ListController::class\n    ];\n\n    public function listExtendColumns($list)\n    {\n        $list->addColumns([...]);\n\n        $list->getColumn(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_add Helper Function in PHP\nDESCRIPTION: The array_add function adds a key/value pair to an array if the key doesn't already exist. It returns the modified array with the new element added.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$array = array_add(['name' => 'Desk'], 'price', 100);\n\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Creating and Transforming Collections in PHP\nDESCRIPTION: Example of creating a Collection instance and chaining methods to transform data. This snippet demonstrates mapping values to uppercase and rejecting empty elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$collection = new October\\Rain\\Support\\Collection(['stewie', 'brian', null]);\n\n$collection = $collection\n    ->map(function ($name) {\n        return strtoupper($name);\n    })\n    ->reject(function ($name) {\n        return empty($name);\n    })\n;\n```\n\n----------------------------------------\n\nTITLE: Extended List Integration Configuration in YAML\nDESCRIPTION: Demonstrates an extended configuration for list integration, specifying a particular list definition and enabling raw attribute output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList:\n        definition: orders\n        raw: true\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Theme in Environment Variables for October CMS\nDESCRIPTION: Shows how to define a fallback theme using the ACTIVE_THEME environment variable for cases when database connection fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nACTIVE_THEME=my-theme\n```\n\n----------------------------------------\n\nTITLE: Adding a Soft Delete Column to a Database Table - PHP\nDESCRIPTION: Demonstrates how to add a soft delete column to an existing database table using Laravel's Schema builder in a migration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->softDeletes();\n});\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Methods in October CMS\nDESCRIPTION: Example of how to retrieve a list of all available methods in an extendable class using the getClassMethods method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicMethod('getTagsAttribute', function () use ($model) {\n        return $this->tagsCache;\n    });\n});\n\n$post = new Post;\n\n$methods = $post->getClassMethods();\n\n/**\n * $methods = [\n *   0 => '__construct',\n *   1 => 'extend',\n *   2 => 'getTagsAttribute',\n *   ...\n * ];\n */\n```\n\n----------------------------------------\n\nTITLE: Resolving an Interface Implementation in PHP\nDESCRIPTION: Shows how to resolve a previously bound interface implementation from the IoC container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = App::make('UserRepositoryInterface');\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Configuration in .env File\nDESCRIPTION: Shows how to enable or disable debug mode in October CMS through the APP_DEBUG environment variable, which affects error display and other debugging features.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAPP_DEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Defining Global Validation Rule Class in PHP\nDESCRIPTION: Demonstrates how to create a custom validation rule class with validate and message methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass UppercaseRule\n{\n    /**\n     * validate determines if the validation rule passes.\n     * @param string $attribute\n     * @param mixed $value\n     * @param array $params\n     * @return bool\n     */\n    public function validate($attribute, $value, $params)\n    {\n        return strtoupper($value) === $value;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be uppercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Query Builder Results in PHP\nDESCRIPTION: Demonstrates how to use the paginate method on a database query to display 15 items per page. This method automatically handles setting the proper limit and offset based on the current page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Confirmation Prompt in Console Command\nDESCRIPTION: Shows how to set a default value for a confirmation prompt in a console command. The second parameter to the confirm method sets the default answer (true or false).\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$this->confirm($question, true);\n```\n\n----------------------------------------\n\nTITLE: Using Model Mutator in PHP\nDESCRIPTION: Demonstrates how to set a model attribute that uses a mutator. The mutator is called implicitly when setting the property value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->first_name = 'Sally';\n```\n\n----------------------------------------\n\nTITLE: Configuring Has Many Relation in OctoberCMS YAML\nDESCRIPTION: Example YAML configuration for a Has Many relation between Blog Post and Comments. It defines the management and view options for the relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\ncomments:\n    label: Comment\n    manage:\n        form: $/acme/blog/models/comment/fields.yaml\n        list: $/acme/blog/models/comment/columns.yaml\n    view:\n        list: $/acme/blog/models/comment/columns.yaml\n        toolbarButtons: create|delete\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachments with Custom Display Name and MIME Type\nDESCRIPTION: Example of attaching a file to an email with custom display name and MIME type specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$message->attach($pathToFile, ['as' => $display, 'mime' => $mime]);\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP Error with Custom Message\nDESCRIPTION: Example of using App::abort to generate an HTTP error response with a custom message and specific status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(403, 'Unauthorized action.');\n```\n\n----------------------------------------\n\nTITLE: Implementing fetchData Method with ReportDataQueryBuilder\nDESCRIPTION: Basic implementation of fetchData method using ReportDataQueryBuilder class to fetch product data from an ecommerce database. Shows initial setup with main table configuration and validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function fetchData(ReportFetchData $data): ReportFetchDataResult\n{\n    if ($dimension->getCode() !== self::DIMENSION_PRODUCT) {\n        throw new SystemException('Invalid dimension');\n    }\n\n    $reportQueryBuilder = new ReportDataQueryBuilder(\n        'acme_shop_products',\n        $data->dimension,\n        $data->metrics,\n        $data->orderRule,\n        $data->dimensionFilters,\n        $data->limit,\n        $data->paginationParams,\n        $data->groupInterval,\n        $data->hideEmptyDimensionValues,\n        $data->dateStart,\n        $data->dateEnd,\n        $data->startTimestamp,\n        'acme_shop_sales.sale_date',\n        null,\n        $data->totalsOnly\n    );\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Directories (PHP)\nDESCRIPTION: Examples of retrieving all directories within a directory using the directories method, or recursively from all subdirectories using the allDirectories method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$directories = Storage::directories($directory);\n\n// Recursive...\n$directories = Storage::allDirectories($directory);\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Scope for Filtering States in PHP\nDESCRIPTION: Shows the implementation of a model scope method used to filter states based on the selected country in a relation field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeFilterStates($query, $model)\n{\n    if ($countryId = $model->country_id) {\n        $query->where('country_id', $countryId);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Settings Model in PHP\nDESCRIPTION: Example of creating a settings model class that extends System\\Models\\SettingModel. The model requires a settingsCode for database storage and settingsFields for form definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/model-settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Demo\\Models;\n\nclass UserSetting extends \\System\\Models\\SettingModel\n{\n    public $settingsCode = 'acme_demo_settings';\n\n    public $settingsFields = 'fields.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Full Slug for Structured Entries in October CMS\nDESCRIPTION: Shows how to use the full slug for structured entries, including setting up the component and handling redirects for URL changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/wiki/:fullslug*/:id\"\n\n[section article]\nhandle = \"Wiki\\Article\"\nidentifier = \"id\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if article is empty %}\n    {% do abort(404) %}\n{% elseif article.fullslug != this.param.fullslug %}\n    {% do redirect(this|page({ fullslug: article.fullslug }), 301) %}\n{% endif %}\n\n<!-- Contents here -->\n```\n\n----------------------------------------\n\nTITLE: Customizing Paginator URL Path in PHP\nDESCRIPTION: Example showing how to customize the base URL path used by the paginator when generating links using the setPath method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n$users->setPath('custom/url');\necho $users->render();\n```\n\n----------------------------------------\n\nTITLE: Extending Form Configuration in PHP for October CMS\nDESCRIPTION: This PHP code snippet shows how to extend the form configuration dynamically by overriding the formGetConfig method in an October CMS controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function formGetConfig()\n{\n    $config = $this->asExtension('FormController')->formGetConfig();\n\n    $config->form = $this->makeConfig($config->form);\n\n    // Set the active tab dynamically\n    $config->form->tabs['activeTab'] = 'Activities';\n\n    return $config;\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Database Events in PHP\nDESCRIPTION: This snippet demonstrates how to listen for and log each SQL query executed by the application in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nDb::listen(function($sql, $bindings, $time) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Storing File Contents in PHP\nDESCRIPTION: Examples of using the put method to store file contents or a PHP resource stream to disk, recommended for large files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nStorage::put('file.jpg', $contents);\n\nStorage::put('file.jpg', $resource);\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text Emails\nDESCRIPTION: Examples of sending plain text emails using different methods including raw strings and explicit text/html content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nMail::send(['text' => 'acme.blog:text'], $data, $callback);\n\nMail::raw('Text to e-mail', function ($message) {\n    //\n});\n\nMail::raw([\n    'text' => 'This is plain text',\n    'html' => '<strong>This is HTML</strong>'\n], function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Options for Autocomplete Inspector Type in PHP\nDESCRIPTION: Example of implementing dynamic options for an autocomplete inspector by defining a property and a corresponding method that returns available options. This approach allows for programmatically generated option lists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-autocomplete.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'sortColumn' => [\n            'title' => 'Sort by Column',\n            'type' => 'autocomplete',\n            // ...\n        ],\n    ];\n}\n\npublic function getSortColumnOptions()\n{\n    return [\n        'create' => 'Create',\n        'update' => 'Update',\n        'delete' => 'Delete',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Behavior in YAML\nDESCRIPTION: Example of a typical Form Behavior configuration file in YAML format. It includes basic settings like form name, model class, and configurations for create, update, and preview pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Form Behavior Config\n# ===================================\n\nname: Blog Category\nform: $/acme/blog/models/post/fields.yaml\nmodelClass: Acme\\Blog\\Post\n\ncreate:\n    title: New Blog Post\n\nupdate:\n    title: Edit Blog Post\n\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Waiting for Object Availability with Promise\nDESCRIPTION: This JavaScript function returns a promise that resolves when a specific object or variable becomes available, useful for waiting on dependencies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_18\n\nLANGUAGE: js\nCODE:\n```\noc.waitFor(() => window.propName).then(() => [\n    // window.propName is now available\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing Twig Macros from External Files\nDESCRIPTION: Shows how to import macros from theme partials or system view files. Examples include importing from a theme partial and a plugin view file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/macro.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% import 'macros/form' as form %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% import 'acme.blog::macros' as form %}\n```\n\n----------------------------------------\n\nTITLE: Converting Models to JSON in PHP\nDESCRIPTION: Demonstrates how to convert a model to JSON using the toJson method. This example finds a specific User model by ID and converts it to a JSON string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->toJson();\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation to AJAX Forms\nDESCRIPTION: Shows how to add a confirmation dialog to an AJAX form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave', ['confirm' => '‰Ω†Á°ÆÂÆöÂêó?'])\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Plugin Boot Method - PHP\nDESCRIPTION: Example of registering event listeners in the boot method of a plugin registration file, which is a common place to set up event subscriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    // ...\n\n    public function boot()\n    {\n        Event::listen(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component Partial in Twig\nDESCRIPTION: Example showing how to display a component partial in a Twig template using the partial tag with explicit component reference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'demoTodo::pagination' %}\n```\n\n----------------------------------------\n\nTITLE: Create View Template for Form\nDESCRIPTION: PHP template for the Create page view, including the form rendering, buttons for saving, and cancel link.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'd-flex flex-column h-100']) ?>\n\n    <div class=\"flex-grow-1\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div data-control=\"loader-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"{ close: true }\"\n                data-request-message=\"Creating Category...\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                class=\"btn btn-default\">\n                Create and Close\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Firing Local Events in October CMS\nDESCRIPTION: Example of how to fire local events on objects that implement the Emitter trait, allowing specific object instances to notify listeners of state changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->fireEvent('post.beforePost', [$firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeater Widget in YAML for October CMS\nDESCRIPTION: Demonstrates the setup for a repeater widget in YAML. This widget renders a set of repeating form fields for related records or jsonable attributes, with options for grouping and customizing the interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    titleFrom: title_when_collapsed\n    form:\n        fields:\n            added_at:\n                label: Ê∑ªÂä†Êó•Êúü\n                type: datepicker\n            details:\n                label: ËØ¶ÊÉÖ\n                type: textarea\n            title_when_collapsed:\n                label: Ê≠§Â≠óÊÆµÊòØÊäòÂè†Êó∂ÁöÑÊ†áÈ¢ò\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Returning Paginated Results as JSON in PHP Route\nDESCRIPTION: Shows how to return a paginator instance directly from a route to convert pagination results to JSON. The paginator automatically implements the JsonableInterface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::paginate();\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic AJAX Change Handler\nDESCRIPTION: Demonstrates how to create a simple AJAX handler that displays a success message when a field changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function onChangeContent()\n{\n    Flash::success('Great job!');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Self-Updating Partial with {% ajaxPartial %} in Twig\nDESCRIPTION: Demonstrates the basic usage of the {% ajaxPartial %} tag to render a self-updating partial named 'contact-form'. The tag wraps the partial content in a div with a data-ajax-partial attribute on the first load.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/ajax-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial \"contact-form\" %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-ajax-partial=\"contact-form\">\n    ... Contents go here ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Option Groups Configuration\nDESCRIPTION: PHP method demonstrating how to create grouped options in a dropdown using optgroup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getDetailedFieldOptions()\n{\n    return [\n        'Option Group' => [\n            'optgroup' => true,\n            'children' => [\n                1 => 'Option 1',\n                2 => 'Option 2',\n                // ...\n            ]\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Page Properties in PHP Code in October CMS\nDESCRIPTION: Example demonstrating how to access and modify page properties in the PHP section using the page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction onEnd()\n{\n    $this->page->title = 'A different page title';\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling Template Implementation\nDESCRIPTION: HTML template code for handling button click events in the widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n    class=\"btn btn-primary\"\n    :disabled=\"loadingButtonData\"\n    @click.stop.prevent=\"onButtonClick\"\n>Click me</button>\n<span v-text=\"buttonClickResult\"></span>\n```\n\n----------------------------------------\n\nTITLE: Using Model Accessor in PHP\nDESCRIPTION: Demonstrates how to access a model attribute that uses an accessor. The accessor is called implicitly when accessing the property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$firstName = $user->first_name;\n```\n\n----------------------------------------\n\nTITLE: Tapping into Collection in PHP\nDESCRIPTION: Shows how to use the tap() method to perform an operation on a collection without affecting the collection itself.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_65\n\nLANGUAGE: php\nCODE:\n```\ncollect([2, 4, 3, 1, 5])\n    ->sort()\n    ->tap(function ($collection) {\n        Log::debug('Values after sorting', $collection->values()->toArray());\n    })\n    ->shift();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items with get() Method in PHP Collections\nDESCRIPTION: The get() method retrieves an item from a collection at a specified key. If the key doesn't exist, it returns null or a specified default value which can be a static value or a callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$value = $collection->get('name');\n\n// peter\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$value = $collection->get('foo', 'default-value');\n\n// default-value\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->get('email', function () {\n    return 'default-value';\n});\n\n// default-value\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Join on Collections in PHP\nDESCRIPTION: The crossJoin method cross joins the collection's values among the given arrays or collections, returning a Cartesian product with all possible permutations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/\n\n$collection = new Collection([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Messages in PHP\nDESCRIPTION: PHP code showing how to set different types of flash messages using the Flash class methods including success, error, warning, and info types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-flash.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onSave()\n{\n    // Sets a successful message\n    Flash::success('Settings successfully saved!');\n\n    // Sets an error message\n    Flash::error('Error saving settings');\n\n    // Sets a warning message\n    Flash::warning('There was a problem but no worries');\n\n    // Sets an informative message\n    Flash::info('Just a heads up about the settings');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeater Widget in YAML\nDESCRIPTION: This snippet demonstrates the configuration of a Repeater widget in YAML. It shows how to define repeating form fields, including nested fields and group mode configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    titleFrom: title_when_collapsed\n    form:\n        fields:\n            added_at:\n                label: Date added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n            title_when_collapsed:\n                label: This field is the title when collapsed\n                type: text\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: repeater\n    prompt: Add content block\n    groups: $/acme/blog/config/repeater_fields.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntextarea:\n    name: Textarea\n    description: Basic text field\n    icon: icon-file-text-o\n    fields:\n        text_area:\n            label: Text Content\n            type: textarea\n            size: large\n\nquote:\n    name: Quote\n    description: Quote item\n    icon: icon-quote-right\n    fields:\n        quote_position:\n            span: auto\n            label: Quote Position\n            type: radio\n            options:\n                left: Left\n                center: Center\n                right: Right\n        quote_content:\n            span: auto\n            label: Details\n            type: textarea\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence with 404 Handling\nDESCRIPTION: Example of how to display a 404 page when a record cannot be found in a section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if author is empty %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Triggering Local Events\nDESCRIPTION: Example of how to trigger local events in objects that implement the Emitter trait. Local events are scoped to a specific object instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->fireEvent('post.beforePost', [$firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Basic Report Widget Class Definition in PHP\nDESCRIPTION: Example of a minimal report widget class implementation extending ReportWidgetBase with a render method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/report-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace RainLab\\GoogleAnalytics\\ReportWidgets;\n\nuse Backend\\Classes\\ReportWidgetBase;\n\nclass TrafficSources extends ReportWidgetBase\n{\n    public function render()\n    {\n        return $this->makePartial('widget');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dropdown Model Method in PHP\nDESCRIPTION: Implements a model method that provides dropdown options. The method name matches the field name in TitleCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusTypeOptions($value, $formData)\n{\n    return ['all' => 'All', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget for Images in October CMS\nDESCRIPTION: Example configuration for the media finder widget in image mode to select and preview images.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nbackground_image:\n    label: Background Image\n    type: mediafinder\n    mode: image\n```\n\n----------------------------------------\n\nTITLE: Manipulating Collection Keys with flip() and forget()\nDESCRIPTION: flip() swaps keys with values, while forget() removes an item by its key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$flipped = $collection->flip();\n\n$flipped->all();\n\n// ['peter' => 'name', 'october' => 'platform']\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$collection->forget('name');\n\n$collection->all();\n\n// ['platform' => 'october']\n```\n\n----------------------------------------\n\nTITLE: Collection Contains Method Usage\nDESCRIPTION: Examples of using the contains method to check if a model exists in a collection by ID or model instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users->contains(1);\n\n$users->contains(User::find(1));\n```\n\n----------------------------------------\n\nTITLE: Rendering a Read-only Relation Manager\nDESCRIPTION: PHP code demonstrating how to render a relation manager in read-only mode by passing options as the second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->relationRender('comments', ['readOnly' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Recipient for Mail in October CMS\nDESCRIPTION: PHP configuration code for setting a universal recipient for all emails in the config/mail.php file. Useful for development environments to redirect all emails to a single address.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'to' => [\n    'address' => 'dev@example.tld',\n    'name' => 'Dev Example'\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Pivot Data Fields in OctoberCMS YAML\nDESCRIPTION: Example YAML configuration showing how to define pivot data fields in both list and form contexts for a Teams relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\nteams:\n    label: Team\n    view:\n        list:\n            columns:\n                name:\n                    label: Name\n                pivot[team_color]:\n                    label: Team color\n    manage:\n        list:\n            columns:\n                name:\n                    label: Name\n    pivot:\n        form:\n            fields:\n                pivot[team_color]:\n                    label: Team color\n```\n\n----------------------------------------\n\nTITLE: Dynamically Implementing Purgeable Behavior in October CMS\nDESCRIPTION: Demonstrates how to dynamically implement the Purgeable behavior by extending an existing model class. This approach allows adding behaviors without modifying the original class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Extend the RainLab.User user model to implement the purgeable behavior.\n */\nRainLab\\User\\Models\\User::extend(function($model) {\n\n    // Implement the purgeable behavior dynamically\n    $model->implement[] = 'October.Rain.Database.Behaviors.Purgeable';\n\n    // Declare the purgeable property dynamically for the purgeable behavior to use\n    $model->addDynamicProperty('purgeable', []);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Field Dependencies in YAML for October CMS\nDESCRIPTION: Demonstrates how to set up field dependencies using the dependsOn property, which refreshes the state dropdown field when the country field changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: dropdown\n\nstate:\n    label: State\n    type: dropdown\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Fields\nDESCRIPTION: Example showing how to create a file input field for uploading files. The form must have files=true set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::file('image') ?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in PHP\nDESCRIPTION: Demonstrates how to remove specific data from the session or flush all session data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSession::forget('key');\n\nSession::flush();\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of the partial Twig Tag\nDESCRIPTION: Demonstrates how to render a basic partial called 'footer.htm' using the {% partial %} tag. The partial name is passed as a quoted string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"footer\" %}\n```\n\n----------------------------------------\n\nTITLE: Converting Models to JSON in OctoberCMS\nDESCRIPTION: Examples of converting models to JSON format using toJson() method or string casting. Shows direct model return in routes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->toJson();\n```\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn (string) $user;\n```\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Component Implementation\nDESCRIPTION: Basic implementation of the Collection component for displaying Blog Posts using the default collection variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[collection]\nhandle = \"Blog\\Post\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in collection %}\n    <h1>{{ post.title }}</h1>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Behavior in PHP Controller\nDESCRIPTION: Shows how to implement the List behavior in an October CMS controller class by adding it to the $implement property and specifying the $listConfig file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = ['Backend.Behaviors.ListController'];\n\n    public $listConfig = 'list_config.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Validation Status with fails() Method in PHP\nDESCRIPTION: Shows how to check if validation has failed using the fails() method on the validator instance. This is typically used in conditional statements to handle validation failures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ($validator->fails()) {\n    // The given data did not pass validation\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Localization Strings in PHP with OctoberCMS Lang Class\nDESCRIPTION: Example showing how to access localization strings using the Lang class in OctoberCMS. The code demonstrates the naming convention for accessing strings from a specific plugin's language file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/localization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho Lang::get('acme.blog::lang.app.name');\n```\n\n----------------------------------------\n\nTITLE: Event Listener with Multiple Parameters\nDESCRIPTION: Example of registering an event listener that accepts multiple arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('acme.blog.myevent', function($arg1, $arg2) {\n    // Do something\n});\n```\n\n----------------------------------------\n\nTITLE: Simple Home Page Template in October CMS\nDESCRIPTION: Basic example of a home page template showing required configuration and Twig sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Hello, world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Conditional UI Element in OctoberCMS Backend View\nDESCRIPTION: Shows how to conditionally display a UI element (delete button) in an OctoberCMS backend view based on user permissions using the hasAccess method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($this->user->hasAccess('acme.blog.delete_categories')): ?>\n    <button\n        type=\"button\"\n        class=\"oc-icon-trash-o btn-icon danger pull-right\"\n        data-request=\"onDelete\"\n        data-load-indicator=\"Deleting Category...\"\n        data-request-confirm=\"Do you really want to delete this category?\">\n    </button>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with Data in PHP\nDESCRIPTION: Demonstrates how to send a POST request with data. By default, the data is sent as JSON.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nHttp::post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple File Attachments in PHP\nDESCRIPTION: Demonstrates how to create multiple file attachments using the create method on the relationship in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar()->create(['data' => Input::file('file_input')]);\n```\n\n----------------------------------------\n\nTITLE: Transforming Collections with map() Method in PHP\nDESCRIPTION: The map() method iterates through the collection and passes each value to a given callback. The callback can modify items to create a new collection of modified items while preserving the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$multiplied = $collection->map(function ($item, $key) {\n    return $item * 2;\n});\n\n$multiplied->all();\n\n// [2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Advanced Color Picker Configuration in YAML\nDESCRIPTION: Shows an advanced configuration of the color picker with preset colors and custom color selection disabled. It sets available colors to specific hex values and disallows custom color selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-colorpicker.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: ['#000000', '#111111', '#222222']\n    allowCustom: false\n```\n\n----------------------------------------\n\nTITLE: Event Listener with Specific Method - PHP\nDESCRIPTION: Example of specifying which method to call on an event listener class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', 'LoginHandler@onLogin');\n```\n\n----------------------------------------\n\nTITLE: Registering Request Event Handlers\nDESCRIPTION: Demonstrates registering before and after request event handlers using closure callbacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::before(function ($request) {\n    // Code to execute before the request is routed\n});\n\nApp::after(function ($request) {\n    // Code to execute after the request is routed\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Handler Method Specification\nDESCRIPTION: Example of specifying a custom handler method when pushing a job to the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Injecting CSS and JavaScript Assets Programmatically\nDESCRIPTION: Shows how to add CSS and JavaScript files to a page using the controller's addCss and addJs methods in the onStart function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Job Process Commands\nDESCRIPTION: Various console commands for processing queue jobs using artisan CLI.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work\nphp artisan queue:work --once\nphp artisan queue:work --once connection\nphp artisan queue:work --once --queue=high,low\nphp artisan queue:work --once --timeout=60\nphp artisan queue:work --once --sleep=5\n```\n\n----------------------------------------\n\nTITLE: Getting Uploaded File Extension in PHP\nDESCRIPTION: Shows how to get the original extension of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$extension = $file->getClientOriginalExtension();\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Crypt Facade in PHP\nDESCRIPTION: Example showing how to encrypt sensitive data using the Crypt facade's encrypt method before storing it in a database model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/hashing-encryption.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->secret = Crypt::encrypt('shhh no telling');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Naming Routes within Route Groups\nDESCRIPTION: Demonstrates how to use the 'as' keyword in route groups to set a common prefix for all route names within the group.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['as' => 'admin::'], function () {\n    Route::get('dashboard', ['as' => 'dashboard', function () {\n        // Route named \"admin::dashboard\"\n    }]);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Database Connections in PHP\nDESCRIPTION: This code shows how to access different database connections and retrieve the underlying PDO instance in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::connection('foo')->select(...);\n\n$pdo = Db::connection()->getPdo();\n```\n\n----------------------------------------\n\nTITLE: Halting Event Propagation\nDESCRIPTION: Shows how to stop event propagation by returning false from a listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($event) {\n    // Handle the event\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Filter Widget Class in PHP\nDESCRIPTION: Basic structure of a filter widget class extending FilterWidgetBase with render and renderForm methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\FilterWidgets;\n\nuse Backend\\Classes\\FilterWidgetBase;\n\nclass Discount extends FilterWidgetBase\n{\n    public function render() {}\n\n    public function renderForm() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to Named Routes\nDESCRIPTION: Shows how to generate URLs to named routes using the Url::route method. Also demonstrates passing parameters to routes with placeholders.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$url = Url::route('profile');\n\n$redirect = Response::redirect()->route('profile');\n```\n\n----------------------------------------\n\nTITLE: Mass Assignment Creation\nDESCRIPTION: Creating new model instances using mass assignment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::create(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: Defining Job-Specific Failure Method in PHP\nDESCRIPTION: PHP method to define job-specific actions when a failure occurs. This allows for customized handling of failures for individual job types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function failed($data)\n{\n    // Called when the job is failing...\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Results with Raw Group By Expressions\nDESCRIPTION: Demonstrates how to use groupByRaw() to group query results by multiple columns in a single expression.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->select('city', 'state')\n    ->groupByRaw('city, state')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Custom Column Unique Validation\nDESCRIPTION: Demonstrates unique validation with a custom column name specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Controller Middleware with Except Modifier\nDESCRIPTION: Shows how to apply middleware to all controller actions except specific ones using the except() modifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $this->middleware(function ($request, $response) {\n        // Middleware functionality\n    })->except('index');\n}\n```\n\n----------------------------------------\n\nTITLE: Touching Parent Timestamps Configuration\nDESCRIPTION: Shows how to configure automatic parent timestamp updates when child models are modified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_70\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    /**\n     * All of the relationships to be touched.\n     */\n    protected $touches = ['post'];\n\n    /**\n     * Relations\n     */\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection by Keys in PHP\nDESCRIPTION: The only method returns the items in the collection with the specified keys. It creates a new collection containing only the specified key-value pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['product_id' => 1, 'name' => 'Desk', 'price' => 100, 'discount' => false]);\n\n$filtered = $collection->only(['product_id', 'name']);\n\n$filtered->all();\n\n// ['product_id' => 1, 'name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Creating Route Prefixes in October CMS\nDESCRIPTION: Example of prefixing route URIs within a group using the prefix parameter to avoid repetition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['prefix' => 'admin'], function () {\n    Route::get('users', function () {\n        // Matches The \"/admin/users\" URL\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flash Messages in Twig\nDESCRIPTION: Shows how to create a custom flash message partial using Twig syntax. This allows for complete customization of the flash message markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <div class=\"alert alert-{{ type }}\">\n        {{ message }}\n    </div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Converting Models to Array in OctoberCMS\nDESCRIPTION: Examples showing how to convert a model and its relationships to an array using the toArray() method. Demonstrates usage with both single models and collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::with('roles')->first();\n\nreturn $user->toArray();\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\nreturn $users->toArray();\n```\n\n----------------------------------------\n\nTITLE: Soft Definition Implementation\nDESCRIPTION: Example of implementing a behavior with soft definition to suppress class not found errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        '@'.\\RainLab\\Translate\\Behaviors\\TranslatableModel::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Files with Local Driver in PHP\nDESCRIPTION: Example of using the local storage driver to write content to a file. The operation is relative to the root directory defined in the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nStorage::disk('local')->put('file.txt', 'Contents');\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Prefixes in Route Groups in October CMS\nDESCRIPTION: Example of specifying common parameters for grouped routes using the prefix parameter with variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['prefix' => 'accounts/{account_id}'], function () {\n    Route::get('detail', function ($account_id) {\n        // Matches The accounts/{account_id}/detail URL\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Single File Attachment in PHP Model\nDESCRIPTION: Demonstrates how to define a single file attachment relationship in an October CMS model using the $attachOne property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic $attachOne = [\n    'avatar' => 'System\\Models\\File'\n];\n```\n\n----------------------------------------\n\nTITLE: Blog Posts Display in October CMS\nDESCRIPTION: Example of loading and displaying blog posts from a database using PHP and Twig templating.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::orderBy('created_at', 'desc')->get();\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h2>Latest posts</h2>\n<ul>\n    {% for post in posts %}\n        <h3>{{ post.title }}</h3>\n        {{ post.content }}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Available Index Types in Schema Builder\nDESCRIPTION: Examples of different index types available in the Schema builder, including primary keys, composite keys, unique indexes, and basic indexes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$table->primary('id');  //  Add a primary key.\n$table->primary(['first', 'last']);  //  Add composite keys.\n$table->unique('email');  //  Add a unique index.\n$table->index('state');  //  Add a basic index.\n```\n\n----------------------------------------\n\nTITLE: Using Query Scopes in OctoberCMS (PHP)\nDESCRIPTION: Shows how to utilize defined query scopes when querying a model, including chaining multiple scopes and ordering results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$users = User::popular()->active()->orderBy('created_at')->get();\n```\n\n----------------------------------------\n\nTITLE: Complex Query Constraints\nDESCRIPTION: Example of adding multiple query constraints using where clauses, ordering, and limiting results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$flights = Flight::where('active', 1)\n    ->orderBy('name', 'desc')\n    ->take(10)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Handler Implementation in PHP\nDESCRIPTION: Demonstrates a simple AJAX event handler function definition. Handler names should follow the onName pattern.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContactForm()\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Option Methods in PHP for October CMS\nDESCRIPTION: Shows how to create getter methods for dropdown field options, which respond to the model's current values to display context-appropriate options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return ['au' => 'Australia', 'ca' => 'Canada'];\n}\n\npublic function getStateOptions()\n{\n    if ($this->country == 'au') {\n        return ['act' => 'Capital Territory', 'qld' => 'Queensland', ...];\n    }\n    elseif ($this->country == 'ca') {\n        return ['bc' => 'British Columbia', 'on' => 'Ontario', ...];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Field Dependencies in YAML\nDESCRIPTION: Example of defining form field dependencies between country and state dropdown fields using YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: dropdown\n\nstate:\n    label: State\n    type: dropdown\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Custom Join Table in Many-to-Many Relationship\nDESCRIPTION: Demonstrates how to specify a custom join table name in a many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\\Acme\\Blog\\Models\\Role::class, 'table' => 'acme_blog_role_user']\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships via Dynamic Properties in PHP\nDESCRIPTION: Demonstrates how to set relationships directly using dynamic properties, including assigning multiple related models and using primary keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$post->author = $author;\n\n$post->comments = [$comment1, $comment2];\n\n$post->save();\n\n// Assign to author with ID of 3\n$post->author = 3;\n\n// Assign comments with IDs of 1, 2 and 3\n$post->comments = [1, 2, 3];\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Widget Class in PHP\nDESCRIPTION: Example of defining a form widget class that extends Backend\\Classes\\FormWidgetBase, including configurable properties and initialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nclass DatePicker extends FormWidgetBase\n{\n    //\n    // Configurable properties\n    //\n\n    /**\n     * @var bool Display mode: datetime, date, time.\n     */\n    public $mode = 'datetime';\n\n    /**\n     * @var string Earliest date that can be selected.\n     * eg: 2000-01-01\n     */\n    public $minDate = null;\n\n    /**\n     * @var string Latest date that can be selected.\n     * eg: 2020-12-31\n     */\n    public $maxDate = null;\n\n    //\n    // Object properties\n    //\n\n    /**\n     * {@inheritDoc}\n     */\n    protected $defaultAlias = 'datepicker';\n\n    /**\n     * {@inheritDoc}\n     */\n    public function init()\n    {\n        $this->fillFromConfig([\n            'mode',\n            'minDate',\n            'maxDate',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Property Access for Relationships\nDESCRIPTION: Demonstrates accessing a relationship as a property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->posts;\n```\n\n----------------------------------------\n\nTITLE: Using Local Rule Objects in Validation\nDESCRIPTION: Demonstrates how to use local rule objects in validation rules and model validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'name' => ['required', new LowercaseRule],\n]);\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Range Operator\nDESCRIPTION: Demonstrates how to use the .. operator to iterate over a range of numbers in a Twig for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in 0..10 %}\n    - {{ i }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining Protected File Attachment in PHP Model\nDESCRIPTION: Example of defining a protected file attachment that is not publicly accessible.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/attachments.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic $attachOne = [\n    'avatar' => ['System\\Models\\File', 'public' => false]\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Error Handler for RuntimeException\nDESCRIPTION: Example of registering a custom error handler for RuntimeException using App::error in OctoberCMS. This allows for custom handling of specific exception types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(RuntimeException $exception) {\n    // Handle the exception...\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value in Checkbox List\nDESCRIPTION: Example showing how to set a default selected value for a checkbox list using the default property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkboxlist.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    default: open_account\n```\n\n----------------------------------------\n\nTITLE: Using Route Prefixes for Groups\nDESCRIPTION: Demonstrates how to prefix all routes in a group with a given URI using the 'prefix' parameter, making route definitions more concise.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['prefix' => 'admin'], function () {\n    Route::get('users', function () {\n        // Matches The \"/admin/users\" URL\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Password Rehash Requirements in PHP\nDESCRIPTION: Demonstrates how to check if a password needs to be rehashed due to work factor changes using the Hash facade's needsRehash method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/hash-crypt.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::needsRehash($hashed)) {\n    $hashed = Hash::make('plain-text');\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Model with Propagation in October CMS\nDESCRIPTION: Demonstrates how to save a model while ensuring propagation rules are applied using the savePropagate method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$model->savePropagate();\n```\n\n----------------------------------------\n\nTITLE: Conditional Display Based on Environment in OctoberCMS Twig\nDESCRIPTION: This snippet demonstrates how to use the this.environment property to conditionally display content based on the current environment. It checks if the environment is 'test' and displays a banner if true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-environment.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.environment == 'test' %}\n\n    <div class=\"banner\">Test Environment</div>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Context Variable Usage in Twig Macros\nDESCRIPTION: Shows how to handle context variables within macros using the _context variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% macro myFunction(vars) %}\n    {{ vars.site_name }}\n{% endmacro %}\n\n{% import _self as form %}\n\n<!-- October CMS -->\n{{ form.myFunction(_context) }}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Variables in Twig\nDESCRIPTION: Shows how to combine variables with text strings using the tilde (~) character for concatenation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Your name: ' ~ name }}\n```\n\n----------------------------------------\n\nTITLE: External Form Definition Reference in YAML\nDESCRIPTION: Shows how to reference an external YAML file for form field definitions using the form property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-nestedform.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    label: Profile\n    type: nestedform\n    form: $/october/demo/models/profile/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Activating Global Context in PHP\nDESCRIPTION: Shows how to activate the global context using the withGlobalContext method, making all models available regardless of site.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nSite::withGlobalContext(function() {\n    // All models are available in here.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Read/Write Database Connections in PHP\nDESCRIPTION: This snippet demonstrates how to configure separate read and write database connections in the October CMS database configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => [\n    'read' => [\n        'host' => '192.168.1.1',\n    ],\n    'write' => [\n        'host' => '196.168.1.2'\n    ],\n    'driver'    => 'mysql',\n    'database'  => 'database',\n    'username'  => 'root',\n    'password'  => '',\n    'charset'   => 'utf8',\n    'collation' => 'utf8_unicode_ci',\n    'prefix'    => '',\n],\n```\n\n----------------------------------------\n\nTITLE: Using request() Helper in PHP\nDESCRIPTION: The request function returns the current request instance, providing access to request headers, input data, and other request-related information. This enables inspection and manipulation of the current HTTP request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$referer = request()->header('referer');\n```\n\n----------------------------------------\n\nTITLE: Basic Pagination Setup in October CMS\nDESCRIPTION: Demonstrates basic pagination setup using a Tailor component to paginate blog posts with 10 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n\n[collection]\nhandle = \"Blog\\Post\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set posts = collection.paginate(10) %}\n```\n\n----------------------------------------\n\nTITLE: Summing PHP Collection\nDESCRIPTION: The sum method returns the sum of all items in the collection. It can handle nested arrays or objects by specifying a key or using a custom callback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4, 5])->sum();\n\n// 15\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n]);\n\n$collection->sum('pages');\n\n// 1272\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$collection->sum(function ($product) {\n    return count($product['colors']);\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Advanced Controller Display Mode Configuration\nDESCRIPTION: Configuration for advanced record management using controller display mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    displayMode: controller\n    toolbarButtons: create|add|remove|delete\n    customMessages:\n        buttonCreate: New Author\n        titleUpdateForm: Update Author\n        titleCreateForm: Create Author\n```\n\n----------------------------------------\n\nTITLE: Defining Required Arguments in Console Command Signature\nDESCRIPTION: Shows how to define required arguments in the command signature. Arguments are defined within curly braces and are required parameters passed to the command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user}';\n```\n\n----------------------------------------\n\nTITLE: Regenerating Session ID using PHP\nDESCRIPTION: Demonstrates how to regenerate the session ID for security purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSession::regenerate();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Form Macros\nDESCRIPTION: Shows how to register a custom form macro to create reusable form components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nForm::macro('myField', function() {\n    return '<input type=\"awesome\">';\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Purged Values in PHP Models\nDESCRIPTION: Shows methods for accessing purged values after model save operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn $user->getOriginalPurgeValue('password_confirmation');\n```\n\nLANGUAGE: php\nCODE:\n```\n$user->restorePurgedValues();\n```\n\n----------------------------------------\n\nTITLE: Adding Complex Conditional Validation in PHP\nDESCRIPTION: Demonstrates using the sometimes method to conditionally add validation rules based on custom logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$v->sometimes('reason', 'required|max:500', function($input) {\n    return $input->games >= 100;\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Flash Messages with CSS\nDESCRIPTION: Provides CSS examples for styling different types of flash messages (success, error, warning, info, loading) by targeting the .oc-flash-message class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.oc-flash-message.success {\n    background: green;\n}\n.oc-flash-message.error {\n    background: red;\n}\n.oc-flash-message.warning {\n    background: orange;\n}\n.oc-flash-message.info {\n    background: aqua;\n}\n.oc-flash-message.loading {\n    background: aqua;\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Collections in PHP\nDESCRIPTION: The forPage method returns a new collection containing the items that would be present on a given page number. It requires the page number and the number of items to show per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9])->forPage(2, 3);\n\n$collection->all();\n\n// [4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship Existence with has() Method in October CMS\nDESCRIPTION: This code demonstrates how to query for models based on the existence of related records. It retrieves posts that have at least one comment using the has() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment...\n$posts = Post::has('comments')->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Report Widget with October CMS Artisan Command\nDESCRIPTION: Creates a backend report widget with view and asset files. Requires plugin identifier and widget class name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:reportwidget Acme.Blog TopPosts\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Twig\nDESCRIPTION: Demonstrates how to display validation errors in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Laravel Package Registration in Plugin\nDESCRIPTION: Example of registering Laravel package service providers and aliases in an October CMS plugin\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/using-composer.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App;\nuse Illuminate\\Foundation\\AliasLoader;\nuse System\\Classes\\Plugin as PluginBase;\n\nclass Plugin extends PluginBase\n{\n    public function register()\n    {\n        // Instantiate the AliasLoader\n        $aliasLoader = AliasLoader::getInstance();\n\n        // Register the aliases provided by the packages used by your plugin\n        $aliasLoader->alias('Purifier', \\Mews\\Purifier\\Facades\\Purifier::class);\n\n        // Register the service providers provided by the packages used by your plugin\n        App::register(\\Mews\\Purifier\\PurifierServiceProvider::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Expressions in PHP Queries\nDESCRIPTION: Demonstrates the use of Db::raw to include raw expressions in queries. This is useful for complex SQL operations that can't be expressed using the query builder methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->select(Db::raw('count(*) as user_count, status'))\n    ->where('status', '<>', 1)\n    ->groupBy('status')\n    ->get();\n\nDb::raw(\"(first_name, ' ', last_name) as full_name\");\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Plugin Migrations\nDESCRIPTION: Command to rollback a plugin's migrations, optionally stopping at a specified version number.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:rollback AuthorName.PluginName 1.2.3\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in PHP Model\nDESCRIPTION: Shows how to customize the date format for storage and serialization by setting the $dateFormat property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * @var string dateFormat for storage of the model's date columns.\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files from Storage\nDESCRIPTION: Examples showing how to delete a single file or multiple files from storage using the delete method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nStorage::delete('file.jpg');\n\nStorage::delete(['file1.jpg', 'file2.jpg']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Scope Method in PHP\nDESCRIPTION: Demonstrates the PHP implementation of a custom model scope method for the dropdown filter. It handles 'active' and 'deleted' statuses using query scopes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeApplyStatusCode($query, $scope)\n{\n    if ($scope->value === 'active') {\n        return $query->withoutTrashed();\n    }\n\n    if ($scope->value === 'deleted') {\n        return $query->onlyTrashed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Many-to-Many Join Table Schema - PHP\nDESCRIPTION: Defines the database schema for a many-to-many relationship join table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('role_user', function($table) {\n    $table->integer('user_id')->unsigned();\n    $table->integer('role_id')->unsigned();\n    $table->primary(['user_id', 'role_id']);\n});\n```\n\n----------------------------------------\n\nTITLE: Including Page Variables in AJAX Response\nDESCRIPTION: Demonstrates how to include page variables in the AJAX response using the withPageVars() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% do response(ajaxHandler('onResetPassword').withPageVars()) %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Component in OctoberCMS\nDESCRIPTION: The create:component command creates a new component class and the default component view. It requires two parameters: the author and plugin name, and the component class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:component Acme.Blog Post\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Properties\nDESCRIPTION: Demonstrates how to iterate through model instances and access their property values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($flights as $flight) {\n    echo $flight->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SortableRelation Trait for Many-to-Many Relations in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to use the SortableRelation trait in a model class to enable sorting of records in a pivot table for many-to-many relationships. It includes the definition of a sortable column in the relationship configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/reorder.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SortableRelation;\n\n    /**\n     * @var array belongsToMany\n     */\n    public $belongsToMany = [\n        'roles' => [\n            Role::class,\n            'table' => 'users_roles',\n            'pivotSortable' => 'sort_order',\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Related Records in Collections in October CMS\nDESCRIPTION: Example showing how to count related records using the 'withCount' function, creating a 'post_count' attribute on each category record to display the number of related posts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set categories = collection.withCount('posts').get() %}\n{% for category in categories %}\n    <h5>{{ category.title }} ({{ category.post_count }} posts)</h5>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Plugin Boot Method Event Registration\nDESCRIPTION: Example of registering events in a plugin's boot method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    // ...\n\n    public function boot()\n    {\n        Event::listen(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Abort with Message in Twig\nDESCRIPTION: Demonstrates aborting a request with a custom status code (403) and an error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/abort.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(403, 'Access Denied') %}\n```\n\n----------------------------------------\n\nTITLE: Registering Report Widgets in October CMS Plugin\nDESCRIPTION: This PHP code shows how to register report widgets in an October CMS plugin. It defines the widget classes, labels, contexts, and required permissions for each widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/report-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficOverview::class => [\n            'label' => 'Google Analytics traffic overview',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanalytics.widgets.traffic_overview',\n            ],\n        ],\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficSources::class => [\n            'label' => 'Google Analytics traffic sources',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanaltyics.widgets.traffic_sources',\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events in October CMS\nDESCRIPTION: Examples showing how to handle both global and local events, including accessing parameters passed when the event was fired.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Global\nEvent::listen('acme.blog.post.beforePost', function ($post, $param1, $param2) {\n    Log::info($post->name . 'posted. Parameters: ' . $param1 . ' ' . $param2);\n});\n\n// Local\n$post->bindEvent('post.beforePost', function ($param1, $param2) use ($post) {\n    Log::info($post->name . 'posted. Parameters: ' . $param1 . ' ' . $param2);\n});\n```\n\n----------------------------------------\n\nTITLE: Code Editor Widget in YAML\nDESCRIPTION: Configuration for code editor widget with language and display options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ncss_content:\n    type: codeeditor\n    size: huge\n    language: html\n```\n\n----------------------------------------\n\nTITLE: Registering a Console Command in OctoberCMS Plugin\nDESCRIPTION: This snippet demonstrates how to register a custom console command within an OctoberCMS plugin. It shows the use of the registerConsoleCommand method in the plugin's registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/development.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Blog extends PluginBase\n{\n    public function pluginDetails()\n    {\n        [...]\n    }\n\n    public function register()\n    {\n        $this->registerConsoleCommand('acme.mycommand', 'Acme\\Blog\\Console\\MyConsoleCommand');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collections in PHP\nDESCRIPTION: Demonstrates how to override the newCollection method in a model to use a custom collection class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Create a new Collection instance.\n     */\n    public function newCollection(array $models = [])\n    {\n        return new CustomCollection($models);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Property Values in PHP\nDESCRIPTION: Code showing how to retrieve a component property value and the routing parameter name in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->property('id');\n```\n\nLANGUAGE: php\nCODE:\n```\n$this->paramName('id'); // Returns \"my_custom_parameter\"\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request with JSON Data\nDESCRIPTION: Shows how to send a POST request with JSON data using the default content type application/json.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nHttp::post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: String Word Limiting Function\nDESCRIPTION: Functions to limit the number of words in a string with optional custom suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_words('The quick brown fox...', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_words('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Resizing an Image with Crop Mode in OctoberCMS\nDESCRIPTION: Resizes an image to specified dimensions using the crop mode, which maintains the target dimensions while fitting as much of the image as possible.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$image->resize(800, 600, ['mode' => 'crop']);\n```\n\n----------------------------------------\n\nTITLE: Defining Basic AJAX Handler in PHP\nDESCRIPTION: Demonstrates how to define a basic AJAX event handler function with the onName pattern in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContactForm()\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Dynamic Syntax in PHP\nDESCRIPTION: Demonstrates how to use the Dynamic Syntax Parser class to parse and render templates in both view and editor modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Parse\\Syntax\\Parser as SyntaxParser;\n\n$syntax = SyntaxParser::parse($content);\n\necho $syntax->render();\n\necho $syntax->render(['websiteName' => 'October CMS']);\n\necho $syntax->toTwig();\n\n$array = $syntax->toEditor();\n\n$form = [\n    'fields' => $syntax->toEditor()\n];\n\nFile::put('fields.yaml', Yaml::render($form));\n```\n\n----------------------------------------\n\nTITLE: Response with Custom Headers in Twig\nDESCRIPTION: Example of returning a response with both a custom status code and custom HTTP headers specified as the third argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/response.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do response('Bad Request', 400, {'X-Failure-Reason': 'Not wearing shoes'}) %}\n```\n\n----------------------------------------\n\nTITLE: Image Format Conversion with Resizing\nDESCRIPTION: Demonstrates how to convert image format while resizing by specifying a different extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, {\n    filename: 'my-seo-friendly-name',\n    extension: 'png'\n}) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Translating with Inflection in PHP\nDESCRIPTION: The trans_choice function translates the given language line with inflection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_28\n\nLANGUAGE: PHP\nCODE:\n```\n$value = trans_choice('foo.bar', $count);\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Editor Configuration in YAML\nDESCRIPTION: Demonstrates the basic setup of a richeditor field in a YAML configuration file. This snippet shows how to define a rich text editor field with a label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    label: Contents\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Options Method in PHP\nDESCRIPTION: Shows how to implement a method in a model class to provide dynamic options for a dropdown field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusTypeOptions($value, $formData)\n{\n    return ['all' => 'All', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Dependency Methods in PHP\nDESCRIPTION: PHP methods for handling filter dependencies, showing how to generate options for country and city filters based on selected values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return Country::lists('name', 'id');\n}\n\npublic function getCityOptions($scopes = null)\n{\n    if (!empty($scopes['country']->value)) {\n        return City::whereIn('country_id', array_keys($scopes['country']->value))->lists('name', 'id');\n    } else {\n        return City::lists('name', 'id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Models to Strings for JSON Conversion in PHP\nDESCRIPTION: Shows how to implicitly convert a model to JSON by casting it to a string. This automatically calls the toJson method under the hood.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn (string) $user;\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data in PHP\nDESCRIPTION: Examples of removing specific items or all data from the session using forget and flush methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSession::forget('key');\n\nSession::flush();\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Context - PHP\nDESCRIPTION: Example of setting up navigation context in a controller constructor to determine active backend menu and submenu.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller {\n\npublic function __construct()\n{\n    parent::__construct();\n\n    BackendMenu::setContext('Acme.Blog', 'blog', 'categories');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Filter Widget Form (PHP)\nDESCRIPTION: Implements the renderForm method to display the filter form, including setting up variables for the partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function renderForm()\n{\n    $this->vars['allowSearch'] = $this->allowSearch;\n    $this->vars['scope'] = $this->filterScope;\n    $this->vars['name'] = $this->getScopeName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('discount_form');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Tables for Has Many Through Relation\nDESCRIPTION: SQL table structure showing the required columns for implementing a Has Many Through relationship between Country, User and Post models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\ncountries\n    id - integer\n    name - string\n\nusers\n    id - integer\n    country_id - integer\n    name - string\n\nposts\n    id - integer\n    user_id - integer\n    title - string\n```\n\n----------------------------------------\n\nTITLE: Using All Method in PHP Collection\nDESCRIPTION: Demonstrates the all() method which returns the underlying array of the collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$collection->all();\n\n// [1, 2, 3]\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Partials in Twig\nDESCRIPTION: Shows how to pass variables to a partial when rendering it using the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"blog-posts\" posts=posts %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Specifying Config Cache Path in Environment Variables for October CMS\nDESCRIPTION: Shows how to set a custom path for cached configuration files to ensure correct values for each environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nAPP_CONFIG_CACHE=storage/framework/config-staging.php\n```\n\n----------------------------------------\n\nTITLE: External Accessor Definition using Event Binding\nDESCRIPTION: Shows how to define an accessor externally by extending the model.getAttribute event. This allows adding accessors without modifying the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n        if ($attribute === 'first_name') {\n            return ucfirst($value);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Using temp_path() Helper in PHP\nDESCRIPTION: The temp_path function returns the fully qualified path to a writable directory for temporary files. It optionally accepts a relative path parameter to generate a path to a specific file within the temp directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$path = temp_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = temp_path('app/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Example Paginator JSON Output\nDESCRIPTION: Shows the structure of JSON output created when returning a paginator instance. The response includes metadata like total, current_page, and pagination links, with results in the data key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 50,\n    \"per_page\": 15,\n    \"current_page\": 1,\n    \"last_page\": 4,\n    \"next_page_url\": \"http://octobercms.app?page=2\",\n    \"prev_page_url\": null,\n    \"from\": 1,\n    \"to\": 15,\n    \"data\":[\n        {\n            // Result Object\n        },\n        {\n            // Result Object\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resizing Image with Specific Dimensions in PHP\nDESCRIPTION: Resizes an image to specific dimensions using the crop mode parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/resizer.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$image->resize(800, 600, ['mode' => 'crop']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Options Method in PHP Model Class\nDESCRIPTION: Shows how to define dropdown options using a method in the model class that matches the field name pattern or with the global getDropdownOptions method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusTypeOptions($value, $formData)\n{\n    return ['all' => 'All', ...];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function getDropdownOptions($fieldName, $value, $formData)\n{\n    if ($fieldName == 'status') {\n        return ['all' => 'All', ...];\n    }\n    else {\n        return ['' => '-- none --'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Content with Default Placeholder in Twig\nDESCRIPTION: Shows how to inject content into a placeholder with default content, using the {% default %} tag to specify where default content should appear.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    <p><a href=\"/services\">Services</a></p>\n    {% default %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic One-to-One Model Definitions\nDESCRIPTION: PHP code showing model definitions for implementing polymorphic one-to-one relationships between Photo, Staff, and Product models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nclass Photo extends Model\n{\n    public $morphTo = [\n        'imageable' => []\n    ];\n}\n\nclass Staff extends Model\n{\n    public $morphOne = [\n        'photo' => [\\Acme\\Blog\\Models\\Photo::class, 'name' => 'imageable']\n    ];\n}\n\nclass Product extends Model\n{\n    public $morphOne = [\n        'photo' => [\\Acme\\Blog\\Models\\Photo::class, 'name' => 'imageable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Column Values in PHP\nDESCRIPTION: Demonstrates how to access column values from the result set using a foreach loop. Each column's value is accessed as a property of the object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Visiting Links with Turbo Router\nDESCRIPTION: This JavaScript function allows programmatic navigation using the Turbo Router, which performs PJAX-based navigation without a full page reload.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\noc.visit(location);\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Page Number in PHP\nDESCRIPTION: Demonstrates how to manually specify a page number using paginateAtPage and simplePaginateAtPage methods, instead of relying on the URL query string to determine the current page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$recordsPerPage = 15;\n$currentPage = 1;\n\n$users = Db::table('users')->paginateAtPage($recordsPerPage, $currentPage);\n\n$users = Db::table('users')->simplePaginateAtPage($recordsPerPage, $currentPage);\n```\n\n----------------------------------------\n\nTITLE: Registering Command in Plugin Registration\nDESCRIPTION: Example of registering a console command in a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Blog extends PluginBase\n{\n    public function pluginDetails()\n    {\n        // ...\n    }\n\n    public function register()\n    {\n        $this->registerConsoleCommand('acme.mycommand', \\Acme\\Blog\\Console\\MyConsoleCommand::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing the Join Table Name in Many-to-Many Relationships (PHP)\nDESCRIPTION: Demonstrates how to override the default join table name convention in a belongsToMany relationship using the 'table' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => ['Acme\\Blog\\Models\\Role', 'table' => 'acme_blog_role_user']\n];\n```\n\n----------------------------------------\n\nTITLE: Single Field Validation AJAX Handler\nDESCRIPTION: PHP handler for validating a single field. This example throws a ValidationException if a specific condition is met, indicating the username is already taken.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onCheckUsername()\n{\n    if (true) {\n        throw new ValidationException(['username' => 'Username is taken!']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Partials in Different Contexts\nDESCRIPTION: These PHP snippets demonstrate how to pass variables to partials in different contexts: from a page or layout PHP section, from a component class, and from a backend controller or widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/update-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// From page or layout PHP code section\n$this['result'] = 'Hello world!';\n\n// From a component class\n$this->page['result'] = 'Hello world!';\n\n// From a backend controller or widget\n$this->vars['result'] = 'Hello world!';\n```\n\n----------------------------------------\n\nTITLE: Previewing Form View in PHP\nDESCRIPTION: Shows how to create a form view for the Preview page in October CMS, rendering the form in read-only mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"form-preview\">\n    <?= $this->formRenderPreview() ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resetting Keys with values() Method in PHP Collections\nDESCRIPTION: The values() method returns a new collection with keys reset to consecutive integers, useful for reindexing array-like collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    10 => ['product' => 'Desk', 'price' => 200],\n    11 => ['product' => 'Desk', 'price' => 200]\n]);\n\n$values = $collection->values();\n\n$values->all();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Twig Macro\nDESCRIPTION: Demonstrates the basic syntax for defining a macro in Twig. The macro can be defined with or without including the name after the end tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/macro.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro input %}\n```\n\n----------------------------------------\n\nTITLE: First-time October CMS Setup\nDESCRIPTION: Command to run the installation wizard that guides through setting up October CMS, configuring database, URL, encryption key and administrator details.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:install\n```\n\n----------------------------------------\n\nTITLE: Injecting Content into Layout Placeholders using Page Template\nDESCRIPTION: Demonstrates how to inject content into a layout's placeholder using the {% put %} tag in a page template. Shows meta tag injection into the head placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ndescription=\"example page\"\n==\n{% put head %}\n    <meta name=\"foo\" content=\"bar\">\n{% endput %}\n\n<p>My content.</p>\n```\n\n----------------------------------------\n\nTITLE: Using Model Attribute with Mutator\nDESCRIPTION: Shows how to set a value that uses a mutator method\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->first_name = 'Sally';\n```\n\n----------------------------------------\n\nTITLE: Column Modifiers Usage\nDESCRIPTION: Examples of using column modifiers when defining table columns\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->string('email')->nullable();\n});\n```\n\n----------------------------------------\n\nTITLE: Email Validation in PHP Model\nDESCRIPTION: Demonstrates how to implement email validation rules in a PHP model using the $rules property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-email.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic $rules = [\n    'user_email' => ['email'],\n];\n```\n\n----------------------------------------\n\nTITLE: Collection Key Manipulation Methods in PHP\nDESCRIPTION: Methods for manipulating collection keys including keyBy for custom keying and keys for extracting all keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product_id' => 'prod-100', 'name' => 'chair'],\n    ['product_id' => 'prod-200', 'name' => 'desk'],\n]);\n\n$keyed = $collection->keyBy('product_id');\n```\n\n----------------------------------------\n\nTITLE: PHP Model Relation Definition\nDESCRIPTION: PHP code showing how to define a hasMany relation for repeater items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic $hasMany = [\n    'extra_information' => [\n        RepeaterItem::class,\n        'key' => 'parent_id',\n        'delete' => true\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Task Schedule in OctoberCMS Plugin Registration\nDESCRIPTION: Example of overriding the registerSchedule method in a plugin registration class to schedule a database cleanup task using a Closure that runs daily at midnight.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    [...]\n\n    public function registerSchedule($schedule)\n    {\n        $schedule->call(function () {\n            \\Db::table('recent_users')->delete();\n        })->daily();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Locks in Database Queries with PHP\nDESCRIPTION: Shows how to use lockForUpdate for exclusive row locking. This prevents rows from being modified or selected with another shared lock, ensuring exclusive access during a transaction.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->lockForUpdate()->get();\n```\n\n----------------------------------------\n\nTITLE: Implementing Multisite Functionality in October CMS Model\nDESCRIPTION: Shows how to enable multisite functionality in a model using the Multisite trait and defining propagatable attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Multisite;\n\n    protected $propagatable = ['api_code'];\n}\n```\n\n----------------------------------------\n\nTITLE: YouTube Video Embed Snippet\nDESCRIPTION: A snippet that implements a YouTube embed video as a CMS partial, including methods for extracting the YouTube code and converting time to seconds.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n## partials/snippets/youtube-video.htm\n\n[viewBag]\nsnippetCode = \"youtubeVideo\"\nsnippetName = \"YouTube Video\"\nsnippetDescription = \"Embed a Youtube Video on the page\"\nsnippetProperties[url][title] = \"Video URL\"\nsnippetProperties[url][type] = \"string\"\nsnippetProperties[start_at][title] = \"Start At\"\nsnippetProperties[start_at][type] = \"string\"\n```\n\nLANGUAGE: php\nCODE:\n```\n// Converts https://www.youtube.com/watch?v=k_H2zJ7UZfs to k_H2zJ7UZfs\nfunction urlToCode($link = '')\n{\n    $parts = parse_url($link);\n    if (isset($parts['query'])) {\n        parse_str($parts['query'], $qs);\n        if (isset($qs['v'])){\n            return $qs['v'];\n        }\n        elseif (isset($qs['vi'])){\n            return $qs['vi'];\n        }\n    }\n    if (isset($parts['path'])){\n        $path = explode('/', trim($parts['path'], '/'));\n        return $path[count($path)-1];\n    }\n    return null;\n}\n\n// Converts 15:00 to 900\nfunction timeToSeconds($time = '')\n{\n    $parts = explode(':', $time);\n    if (count($parts) === 3) {\n        return $parts[0] * 3600 + $parts[1] * 60 + $parts[2];\n    }\n    elseif (count($parts) === 2) {\n        return $parts[0] * 60 + $parts[1];\n    }\n    return $time ?: 0;\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if url %}\n    <iframe\n        width=\"560\"\n        height=\"315\"\n        src=\"https://www.youtube.com/embed/{{ this.urlToCode(url) }}?start={{ this.timeToSeconds(start_at) }}\"\n        title=\"YouTube video player\"\n        frameborder=\"0\"\n        allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n        allowfullscreen></iframe>\n{% else %}\n    <!-- Video URL Missing -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Plugin Version File Structure\nDESCRIPTION: Example of a version.yaml file showing version history with migrations and updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: First version\nv1.0.2: Second version\nv1.0.3:\n    - Update with a migration and seed\n    - create_tables.php\n    - seed_the_database.php\nv2.0.0: Important update\nv2.0.1: Latest version\n```\n\n----------------------------------------\n\nTITLE: Alternative Ways to Set File Attributes on Models\nDESCRIPTION: PHP code showing different methods to set file attributes on models using the File class. Examples include creating files from local paths, raw data, or URLs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar = (new File)->fromFile('/path/to/somefile.jpg');\n\n$model->avatar = (new File)->fromData('Some content', 'sometext.txt');\n\n$model->avatar = (new File)->fromUrl('https://example.tld/path/to/avatar.jpg');\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Route Groups\nDESCRIPTION: Shows how to apply middleware to a group of routes using the middleware parameter in the group array, filtering all routes in the group.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['middleware' => 'Path\\To\\Your\\Middleware'], function() {\n    Route::get('info', 'Acme\\News@info');\n});\n```\n\n----------------------------------------\n\nTITLE: Touching Parent Timestamps Configuration in PHP\nDESCRIPTION: Shows how to configure automatic timestamp updates on parent models when related models are modified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    /**\n     * All of the relationships to be touched.\n     */\n    protected $touches = ['post'];\n\n    /**\n     * Relations\n     */\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Confirmation Dialog\nDESCRIPTION: Shows how to implement a delete confirmation dialog that appears before sending the AJAX request when a button is clicked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form ... >\n    ...\n    <button data-request=\"onDelete\" data-request-confirm=\"Are you sure?\">Delete</button>\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler String Response\nDESCRIPTION: Demonstrates returning a string from an AJAX handler, which adds the string to the response collection using 'result' as the default key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function onDoSomething()\n{\n    return 'Hello World';\n    // ['result' => 'Hello World']\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Report Widgets in Plugin Registration File\nDESCRIPTION: PHP method for the plugin registration file that registers report widgets. The method defines widget classes, labels, groups, and required permissions for the widgets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/report-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficOverview::class => [\n            'label' => 'Google Analytics traffic overview',\n            'group' => 'Widgets',\n            'permissions' => [\n                'rainlab.googleanalytics.widgets.traffic_overview',\n            ],\n        ],\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficSources::class => [\n            'label' => 'Google Analytics traffic sources',\n            'group' => 'Widgets',\n            'permissions' => [\n                'rainlab.googleanaltyics.widgets.traffic_sources',\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Crypt Facade in PHP\nDESCRIPTION: Example of encrypting sensitive data using the Crypt facade's encrypt method before storing it in a database model. Uses OpenSSL with AES-256-CBC cipher and includes MAC authentication.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/hashing-encryption.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->secret = Crypt::encrypt('shhh no telling');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Processing Uploaded File and Attaching to Model in PHP\nDESCRIPTION: Shows how to process an uploaded file and attach it to a model in PHP for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\nif (Input::hasFile('example_file')) {\n    $post->featured_image = Input::file('example_file');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Behavior in a Controller\nDESCRIPTION: Example showing how to implement a Behavior in a controller class and override one of its methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace;\n\nclass Controller extends \\October\\Rain\\Extension\\Extendable\n{\n\n    /**\n     * Implement the FormController behavior\n     */\n    public $implement = [\n        \\MyNamespace\\Behaviors\\FormController::class\n    ];\n\n    public function otherMethod()\n    {\n        return \"I come from the main Controller!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships via Dynamic Properties\nDESCRIPTION: Shows how to set relationships directly through model properties and using primary keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$post->author = $author;\n\n$post->comments = [$comment1, $comment2];\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Opening Model-Bound Forms\nDESCRIPTION: Demonstrates how to create a form bound to a model with the Form::model method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::model($user, ['id' => 'userForm']) ?>\n```\n\n----------------------------------------\n\nTITLE: Soft Definition of Behaviors\nDESCRIPTION: Example showing how to implement a behavior conditionally using soft definition with the @ symbol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        '@'\\RainLab\\Translate\\Behaviors\\TranslatableModel::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments by Reference in Events - PHP\nDESCRIPTION: Example of passing a variable by reference to an event, allowing multiple listeners to manipulate the same variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('cms.processContent', [&$content]);\n```\n\n----------------------------------------\n\nTITLE: Overriding Page Response with Rendered Partial\nDESCRIPTION: Example showing how to override the entire page response by returning a custom XML response with rendered component content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $content = $this->renderPartial('@default.htm');\n    return Response::make($content)->header('Content-Type', 'text/xml');\n}\n```\n\n----------------------------------------\n\nTITLE: Using an Extended Class with Behaviors in October CMS\nDESCRIPTION: Example of how to use a class extended with behaviors, including accessing the original behavior method using the asExtension method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$controller = new MyNamespace\\Controller;\n\n// Prints: I come from the FormController Behavior!\necho $controller->someMethod();\n\n// Prints: I come from the main Controller!\necho $controller->otherMethod();\n\n// Prints: You might not see me...\necho $controller->asExtension('FormController')->otherMethod();\n```\n\n----------------------------------------\n\nTITLE: External Accessor Definition Using Event\nDESCRIPTION: Shows how to define an accessor externally using the model.getAttribute event binding\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n        if ($attribute === 'first_name') {\n            return ucfirst($value);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Behavior Class Definition\nDESCRIPTION: Shows how to define a behavior class in October CMS with constructor and methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UtilityFunctions extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $parent;\n\n    public function __construct($parent)\n    {\n        $this->parent = $parent;\n    }\n\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this->parent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Local Rule Objects with Validator\nDESCRIPTION: Demonstrates how to use a local rule object instance with the Validator service. Rules are passed as instances in an array alongside other validation rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'name' => ['required', new LowercaseRule],\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Cache Table in PHP\nDESCRIPTION: DynamoDB cache configuration example specifying the table name for storing cached data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'dynamodb' => [\n    'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),\n],\n```\n\n----------------------------------------\n\nTITLE: Checking if session data exists in October CMS Twig templates\nDESCRIPTION: Shows how to determine if an item exists in the session using the 'has' method. This conditional check verifies the existence of a key in the session before performing actions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-session.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.session.has('key') %}\n    <h1>we found it in the session</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Google Maps Integration Example\nDESCRIPTION: Demonstrates how to integrate a third-party library (Google Maps) with proper initialization and cleanup to prevent memory leaks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"google-map\"></div>\n\n<script>\noc.registerControl('google-map', class extends oc.ControlBase {\n    connect() {\n        this.map = new Map(this.element, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8\n        });\n    }\n\n    disconnect() {\n        this.map.destroy();\n        this.map = null;\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Servers in PHP\nDESCRIPTION: Example configuration for Memcached servers using TCP/IP. Specifies host, port, and weight for each server.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    'servers' => [\n        [\n            'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n            'port' => env('MEMCACHED_PORT', 11211),\n            'weight' => 100,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Directory (PHP)\nDESCRIPTION: Examples of retrieving all files within a directory using the files method, or recursively from all subdirectories using the allFiles method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in October CMS with PHP\nDESCRIPTION: Examples of working with cookies in October CMS. Shows how to retrieve cookie values, create new cookies, queue cookies for the next response, and create persistent cookies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/request-input.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = Cookie::get('name');\n```\n\nLANGUAGE: php\nCODE:\n```\n$response = Response::make('Hello World');\n\n$response->withCookie(Cookie::make('name', 'value', $minutes));\n```\n\nLANGUAGE: php\nCODE:\n```\nCookie::queue($name, $value, $minutes);\n```\n\nLANGUAGE: php\nCODE:\n```\n$cookie = Cookie::forever('name', 'value');\n```\n\nLANGUAGE: php\nCODE:\n```\n'unencrypt_cookies' => [\n    'my_cookie',\n],\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::push('system.unencrypt_cookies', 'my_cookie');\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Relationships\nDESCRIPTION: This code shows how to order eager loaded relationships using query builder methods inside a closure function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->orderBy('created_at', 'desc');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Searching Collection Items in PHP\nDESCRIPTION: Shows how to use the search() method to find an item in a collection and return its key. It also demonstrates strict comparison and custom callbacks for searching.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([2, 4, 6, 8]);\n\n$collection->search(4);\n\n// 1\n\n$collection->search('4', true);\n\n// false\n\n$collection->search(function ($item, $key) {\n    return $item > 5;\n});\n\n// 2\n```\n\n----------------------------------------\n\nTITLE: Refreshing Multiple Fields in an AJAX Handler\nDESCRIPTION: Demonstrates how to refresh multiple fields simultaneously from an AJAX change handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function onChangeContent()\n{\n    return $this->formRefreshFields(['is_positive', 'internal_comments']);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Relation Field Configuration in YAML\nDESCRIPTION: Demonstrates the simplest configuration for a relation field in a form, specifying the field type and label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n```\n\n----------------------------------------\n\nTITLE: Setting Custom SQL Conditions for Dropdown Filter\nDESCRIPTION: Shows how to set custom SQL conditions for the dropdown filter. The :value placeholder represents the selected filter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    type: dropdown\n    conditions: status = :value\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Markdown Editor Widget in YAML for October CMS\nDESCRIPTION: Illustrates the configuration for a Markdown editor widget in YAML. This widget provides a basic editor for Markdown-formatted text, with options for size and display mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmd_content:\n    type: markdown\n    size: huge\n    mode: split\n```\n\n----------------------------------------\n\nTITLE: Queueing Closure Example\nDESCRIPTION: Demonstrates how to push a Closure onto the queue for simple tasks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nQueue::push(function($job) use ($id) {\n    Account::delete($id);\n\n    $job->delete();\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Options Method in PHP\nDESCRIPTION: PHP method implementation for providing dynamic dropdown options in a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusTypeOptions($value, $formData)\n{\n    return ['all' => 'All', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Job Handler Class Definition\nDESCRIPTION: Shows how to create a job handler class with the required fire method that processes queue jobs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SendEmail\n{\n    public function fire($job, $data)\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Validation Exception with Error Messages in October CMS\nDESCRIPTION: Shows how to throw a ValidationException with an array of field-specific error messages. This is used for form submission validation errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nthrow new ValidationException(['username' => 'Sorry that username is already taken!']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Site Switcher Dropdown in Twig\nDESCRIPTION: This snippet shows how to create a dropdown menu for switching between different sites using the sitePicker component and Twig templating.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/sitepicker.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<select class=\"form-control\" onchange=\"window.location.assign(this.value)\">\n    {% for site in sitePicker.sites %}\n        <option value=\"{{ site.url }}\" {{ this.site.code == site.code ? 'selected' }}>\n            {{ site.name }}\n        </option>\n    {% endfor %}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Number Field with Min and Max Constraints in YAML for October CMS\nDESCRIPTION: Implementing a number field with minimum and maximum value constraints. This configuration limits user input to values between 1 and 100.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-number.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    min: 1\n    max: 100\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Flash Message Handler\nDESCRIPTION: Shows how to make an AJAX request that handles flash messages using a custom handler function. The request calls 'onDoSomething' method and displays flash messages using the oc.flashMsg component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n$.request('onDoSomething', {\n    flash: 1,\n    handleFlashMessage: function(message, type) {\n        $.oc.flashMsg({ text: message, class: type })\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events with Priority in PHP\nDESCRIPTION: Demonstrates how to specify priority when subscribing to events, with higher priority listeners running first.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Run first\nEvent::listen('auth.login', function() { ... }, 10);\n\n// Run second\nEvent::listen('auth.login', function() { ... }, 5);\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection by Relation in October CMS\nDESCRIPTION: Example of using the 'whereRelation' query method to filter a collection based on related data, showing posts assigned to an author with a specific slug.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set authorPosts = posts.whereRelation('author', 'slug', 'bella-vista').get() %}\n```\n\n----------------------------------------\n\nTITLE: Using base_path() Function in PHP\nDESCRIPTION: The base_path function returns the fully qualified path to the project root. It can also generate a path to a specific file or directory relative to the project root.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$path = base_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = base_path('vendor/bin');\n```\n\n----------------------------------------\n\nTITLE: Using array_get Helper Function in PHP\nDESCRIPTION: The array_get function retrieves a value from a deeply nested array using dot notation. It accepts an optional default value to return if the specified key doesn't exist.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$array = ['products' => ['desk' => ['price' => 100]]];\n\n$value = array_get($array, 'products.desk');\n\n// ['price' => 100]\n\n$value = array_get($array, 'names.john', 'default');\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Columns\nDESCRIPTION: Examples of modifying existing column properties using the change method\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->string('name', 50)->change();\n});\n\nSchema::table('users', function ($table) {\n    $table->string('name', 50)->nullable()->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters in October CMS Twig Template\nDESCRIPTION: This example demonstrates how to access a URL parameter when the parameter name is stored in a variable. It uses array syntax to retrieve the 'post_id' parameter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-param.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/account/:post_id\"\n==\n{% set name = 'post_id' %}\n\n<p>The post ID is: {{ this.param[name] }}</p>\n```\n\n----------------------------------------\n\nTITLE: Getting File Size (PHP)\nDESCRIPTION: Example of retrieving the size of a file in bytes using the size method on the Storage facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$size = Storage::size('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Detecting and Safely Extending with Behaviors in October CMS\nDESCRIPTION: Example of how to check if a class is already extended with a behavior using isClassExtendedWith and safely extend it without conflicts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nUsersController::extend(function($controller) {\n\n    // Implement behavior if not already implemented\n    if (!$controller->isClassExtendedWith('Backend.Behaviors.RelationController')) {\n        $controller->implement[] = 'Backend.Behaviors.RelationController';\n    }\n\n    // Define property if not already defined\n    if (!isset($controller->relationConfig)) {\n        $controller->addDynamicProperty('relationConfig');\n    }\n\n    // Splice in configuration safely\n    $myConfigPath = '$/myvendor/myplugin/controllers/users/config_relation.yaml';\n\n    $controller->relationConfig = $controller->mergeConfig(\n        $controller->relationConfig,\n        $myConfigPath\n    );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Method-based Twig Filter\nDESCRIPTION: Example of registering a Twig filter that maps to a local class method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'filters' => [\n    'uppercase' => [$this, 'makeTextAllCaps']\n]\n```\n\n----------------------------------------\n\nTITLE: HTML Output of AJAX Form\nDESCRIPTION: Shows the HTML output generated by the form_ajax() helper with a handler name and class attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSave\" class=\"form-horizontal\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Mail Templates with Twig\nDESCRIPTION: Example of using Twig syntax to access variables passed to a mail template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Removing Theme\nDESCRIPTION: Command to delete a theme completely from the filesystem, removing all its files and directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:remove rainlab-vanilla\n```\n\n----------------------------------------\n\nTITLE: Container Resolution Event Handlers\nDESCRIPTION: Shows how to register event handlers for container object resolution events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::resolving(function ($object, $app) {\n    // Called when container resolves object of any type...\n});\n\nApp::resolving('foo', function ($fooBar, $app) {\n    // Called when container resolves objects using hint \"foo\"...\n});\n\nApp::resolving('Acme\\Blog\\Classes\\FooBar', function ($fooBar, $app) {\n    // Called when container resolves objects of type \"FooBar\"...\n});\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Functions in Queries\nDESCRIPTION: Demonstrates using count() aggregate method to count the number of records in the users table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->count();\n\n$price = Db::table('orders')->max('price');\n```\n\n----------------------------------------\n\nTITLE: Binding an Existing Instance to the IoC Container in PHP\nDESCRIPTION: Shows how to bind an already instantiated object into the IoC container using the instance method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = new Foo;\n\nApp::instance('foo', $foo);\n```\n\n----------------------------------------\n\nTITLE: Advanced Dictionary Validation in PHP\nDESCRIPTION: Demonstrates comprehensive validation rules for dictionary properties, including required fields, length constraints, and regex patterns for both keys and values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dictionary.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'options' => [\n            'title' => 'Options',\n            'type' => 'dictionary',\n            'validation' => [\n                'required' => [\n                    'message' => 'Please create options'\n                ],\n                'length' => [\n                    'min' => [\n                        'value' => 2,\n                        'message' => 'Create at least two options.'\n                    ]\n                ]\n            ],\n            'validationKey' => [\n                'regex' => [\n                    'pattern' => '^[a-z]+$',\n                    'message' => 'Keys can contain only lowercase Latin letters'\n                ]\n            ],\n            'validationValue' => [\n                'regex' => [\n                    'pattern' => '^[a-zA-Z0-9]+$',\n                    'message' => 'Values can contain only Latin letters and digits'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Test Case with Plugin Dependencies\nDESCRIPTION: Extended base test case class that handles plugin registration and dependencies for testing. Includes setUp and tearDown methods for proper plugin initialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/unit-testing.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse System\\Classes\\PluginManager;\n\nclass BaseTestCase extends PluginTestCase\n{\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        // Get the plugin manager\n        $pluginManager = PluginManager::instance();\n\n        // Register the plugins to make features like file configuration available\n        $pluginManager->registerAll(true);\n\n        // Boot all the plugins to test with dependencies of this plugin\n        $pluginManager->bootAll(true);\n    }\n\n    public function tearDown(): void\n    {\n        parent::tearDown();\n\n        // Get the plugin manager\n        $pluginManager = PluginManager::instance();\n\n        // Ensure that plugins are registered again for the next test\n        $pluginManager->unregisterAll();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Cursor Method with LazyCollection for Efficient Database Queries in PHP\nDESCRIPTION: This example shows how to use the cursor method to create a LazyCollection for database queries, loading only one model in memory at a time. It demonstrates the difference between traditional collections and lazy collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_84\n\nLANGUAGE: php\nCODE:\n```\n$users = App\\User::all()->filter(function ($user) {\n    return $user->id > 500;\n});\n```\n\nLANGUAGE: php\nCODE:\n```\n$users = App\\User::cursor()->filter(function ($user) {\n    return $user->id > 500;\n});\n\nforeach ($users as $user) {\n    echo $user->id;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Field Translation in Multisite\nDESCRIPTION: Demonstrates how to configure specific fields as non-translatable in a multisite-enabled blueprint. This keeps the field value synchronized across all sites.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\nmultisite: true\n\nfields:\n    name:\n        label: Full Name\n        type: text\n        translatable: false\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleTree Trait in PHP for October CMS\nDESCRIPTION: PHP code snippet demonstrating the use of the SimpleTree trait in a model class. This trait is used for basic parent-child relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/structures.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SimpleTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML using |md Filter in Twig\nDESCRIPTION: Shows how to convert Markdown formatted text to HTML using October CMS's |md filter in Twig templates. The filter transforms basic Markdown syntax like bold text (**) into corresponding HTML tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-md.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\nLANGUAGE: html\nCODE:\n```\n<strong>Text</strong> is bold.\n```\n\n----------------------------------------\n\nTITLE: Using AJAX Handlers in October CMS Components\nDESCRIPTION: Demonstrates how to reference AJAX handlers defined by components in October CMS. It shows both the standard and fully qualified naming conventions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_22\n\nLANGUAGE: html\nCODE:\n```\ndata-request=\"onMyComponentHandler\"\n```\n\nLANGUAGE: html\nCODE:\n```\ndata-request=\"componentName::onMyComponentHandler\"\n```\n\n----------------------------------------\n\nTITLE: Server-side Partial Update Handler\nDESCRIPTION: PHP handler example showing how to push partial updates from the server side to the client.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onRefreshTime()\n{\n    return [\n        '#myDiv' => $this->renderPartial('mypartial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining URL Parameters for Component Properties in October CMS\nDESCRIPTION: This code shows how to define a URL parameter in the page configuration that can be used by components. The ':maxItems' parameter in the URL will be available to components on the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/todo/:maxItems\"\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Additional POST Parameters in HTML\nDESCRIPTION: Form that sends a POST parameter 'mode' with value 'update' along with the AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onUpdate\" data-request-data=\"{ mode: 'update' }\">\n```\n\n----------------------------------------\n\nTITLE: Setting S3 Bucket Policy for Public Access in JSON\nDESCRIPTION: Amazon S3 bucket policy configuration that grants public read-only access to all files in the bucket. This policy must be applied to make media files publicly accessible.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/providers.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2008-10-17\",\n    \"Id\": \"Policy1397632521960\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1397633323327\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::BUCKETNAME/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Dropdown in October CMS\nDESCRIPTION: Demonstrates three ways to create dropdown form fields: with simple options, with independent values and labels, and with options from a static class method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{dropdown name=\"dropdown\" label=\"Pick one\" options=\"One|Two\"}{/dropdown}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{dropdown name=\"dropdown\" label=\"Pick one\" options=\"one:One|two:Two\"}{/dropdown}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{dropdown name=\"dropdown\" label=\"Pick one\" options=\"\\Path\\To\\Class::method\"}{/dropdown}\n```\n\n----------------------------------------\n\nTITLE: Resolving Interface Implementation\nDESCRIPTION: Shows how to resolve a previously bound interface to get its concrete implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = App::make('UserRepositoryInterface');\n```\n\n----------------------------------------\n\nTITLE: Joining Simple Values with implode() Method in PHP\nDESCRIPTION: For collections containing simple strings or numeric values, the implode method requires only the glue string to join the items together.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4, 5])->implode('-');\n\n// '1-2-3-4-5'\n```\n\n----------------------------------------\n\nTITLE: Setting Default Input Values in October CMS\nDESCRIPTION: How to provide a default value when retrieving input if the specified key doesn't exist in the request data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name', 'Sally');\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Lists with Additional Columns\nDESCRIPTION: Example showing how to extend backend lists by listening to the backend.list.extendColumns event to add or remove list columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Êâ©Â±ïÊâÄÊúâÂêéÁ´ØÂàóË°®‰ΩøÁî®\nEvent::listen('backend.list.extendColumns', function ($widget) {\n    // ‰ªÖÁî®‰∫éUserÊéßÂà∂Âô®\n    if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n        return;\n    }\n\n    // ‰ªÖÈÄÇÁî®‰∫éUserÊ®°Âûã\n    if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n        return;\n    }\n\n    // Ê∑ªÂä†È¢ùÂ§ñÁöÑÁîüÊó•Âàó\n    $widget->addColumns([\n        'birthday' => [\n            'label' => 'ÁîüÊó•'\n        ],\n    ]);\n\n    // Âà†Èô§ÂßìÊ∞èÂàó\n    $widget->removeColumn('ÂßìÊ∞è');\n});\n```\n\n----------------------------------------\n\nTITLE: Supervisor Configuration for Queue Workers\nDESCRIPTION: Example configuration file for Supervisor to monitor and manage queue worker processes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[program:october-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /path/to/october/artisan queue:work --sleep=3 --tries=3\nautostart=true\nautorestart=true\nuser=october\nnumprocs=8\nredirect_stderr=true\nstdout_logfile=/path/to/october/worker.log\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Mode in OctoberCMS\nDESCRIPTION: Configuration snippet for enabling or disabling debug mode in OctoberCMS. When debug is true, detailed error messages with stack traces are shown; when false, a generic error page is displayed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Application Debug Mode\n|--------------------------------------------------------------------------\n|\n| When your application is in debug mode, detailed error messages with\n| stack traces will be shown on every error that occurs within your\n| application. If disabled, a simple generic error page is shown.\n|\n*/\n\n'debug' => false,\n```\n\n----------------------------------------\n\nTITLE: Updating October CMS via Command Line\nDESCRIPTION: Command to update October CMS core files and plugins from the October gateway, also performing database migrations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:update\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Request in PHP\nDESCRIPTION: The request function returns the current request instance, allowing access to request data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_37\n\nLANGUAGE: PHP\nCODE:\n```\n$referer = request()->header('referer');\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectList Properties in OctoberCMS PHP\nDESCRIPTION: Example of how to define properties using the objectList inspector type with itemProperties and titleProperty configurations, allowing users to create multiple structured objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-objectlist.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'objectList',\n            'titleProperty' => 'fullName',\n            'itemProperties' => [\n                'fullName' => [\n                    'title' => 'Full Name',\n                    'type' => 'string'\n                ],\n                'address' => [\n                    'title' => 'Address',\n                    'type' => 'string'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Flash Messages in AJAX Forms\nDESCRIPTION: HTML form markup showing how to enable flash messages on successful AJAX requests using the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSuccess\"\n    data-request-flash>\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Initializing Site Picker Component in INI\nDESCRIPTION: Basic initialization of the sitePicker component in a CMS template using INI syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/sitepicker.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[sitePicker]\n```\n\n----------------------------------------\n\nTITLE: Extending List Columns Internally in PHP\nDESCRIPTION: Shows how to extend list columns internally by overriding the listExtendColumns method in the controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    [...]\n\n    public function listExtendColumns($list)\n    {\n        $list->addColumns([...]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Timestamps on Pivot Tables in OctoberCMS (PHP)\nDESCRIPTION: Demonstrates how to enable automatic timestamp maintenance on pivot tables using the 'timestamps' parameter in the relationship definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => ['Acme\\Blog\\Models\\Role', 'timestamps' => true]\n];\n```\n\n----------------------------------------\n\nTITLE: Accessing a Model Attribute with Accessor\nDESCRIPTION: Example showing how to access the first_name attribute that has an accessor defined. The accessor is automatically called when the attribute is accessed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$firstName = $user->first_name;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Behavior Implementation\nDESCRIPTION: Examples of dynamically implementing and checking behaviors at runtime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nUsersController::extend(function($controller) {\n    $controller->implementClassWith(\\Backend\\Behaviors\\RelationController::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Response Creation\nDESCRIPTION: Demonstrates creating a custom Response object with status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = 'Page not found';\n$statusCode = 404;\nreturn Response::make($contents, $statusCode);\n```\n\n----------------------------------------\n\nTITLE: Enabling Security Policy for Safe Mode in October CMS\nDESCRIPTION: Configuration option to enable a more relaxed Twig security policy that blocks unsafe methods, as an alternative to strict safe mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nCMS_SECURITY_POLICY_V1=true\n```\n\n----------------------------------------\n\nTITLE: Asset Output Template in Twig\nDESCRIPTION: Shows how to output injected assets in a page layout using Twig style and script tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Registering Report Widgets in October CMS Plugin Class\nDESCRIPTION: Example of the registerReportWidgets method implementation in a plugin registration class that registers multiple widgets with labels, contexts, and required permissions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        'RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficOverview' => [\n            'label'   => 'Google Analytics traffic overview',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanalytics.widgets.traffic_overview',\n            ],\n        ],\n        'RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficSources' => [\n            'label'   => 'Google Analytics traffic sources',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanaltyics.widgets.traffic_sources',\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: XML Response Example\nDESCRIPTION: Example of returning an XML response with appropriate content type header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($xmlString)->header('Content-Type', 'text/xml');\n```\n\n----------------------------------------\n\nTITLE: Using array_first() with Default Value in PHP\nDESCRIPTION: The array_first function can take a default value as a third parameter, which will be returned if no values pass the truth test. This provides a fallback value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = array_first($array, $callback, $default);\n```\n\n----------------------------------------\n\nTITLE: Processing Uploaded File and Attaching to Model in PHP\nDESCRIPTION: Shows how to process an uploaded file and attach it to a model in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\nif (Input::hasFile('example_file')) {\n    $post->featured_image = Input::file('example_file');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Routes in a Plugin for October CMS\nDESCRIPTION: Example of custom routing logic that can be placed in a routes.php file within the plugin directory. This allows the plugin to define API endpoints or custom routes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::group(['prefix' => 'api_acme_blog'], function() {\n\n    Route::get('cleanup_posts', function(){ return Posts::cleanUp(); });\n\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Multisite Synchronization in PHP Model\nDESCRIPTION: Enables automatic synchronization of model records across all sites by setting the propagatableSync property to true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nprotected $propagatableSync = true;\n```\n\n----------------------------------------\n\nTITLE: Getting Request URI in October CMS\nDESCRIPTION: How to retrieve the current request URI using the Request class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$uri = Request::path();\n```\n\n----------------------------------------\n\nTITLE: Using Field Facades with Underscore Prefix\nDESCRIPTION: Demonstrates how to create field facades using an underscore prefix, which prevents the field from being submitted while still displaying it in the form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naddress:\n    label: Title\n    type: text\n\n_map:\n    label: Point your address on the map\n    type: mapviewer\n```\n\n----------------------------------------\n\nTITLE: Using trans_choice for Pluralization in PHP\nDESCRIPTION: Demonstrates how to use the trans_choice function to process pluralized values in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\necho __('There is one apple|There are many apples', 3);\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Expression Range\nDESCRIPTION: Shows how to use expressions with the .. operator in a for loop range.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'|upper..'z'|upper %}\n    - {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Selecting Nth Elements from Collection in PHP\nDESCRIPTION: The nth method creates a new collection consisting of every n-th element from the original collection. It can also accept an optional offset.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->nth(4);\n\n// ['a', 'e']\n\n$collection->nth(4, 1);\n\n// ['b', 'f']\n```\n\n----------------------------------------\n\nTITLE: Getting Request Method\nDESCRIPTION: Demonstrates how to retrieve the HTTP method used for the request and check for specific methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$method = Request::method();\n\nif (Request::isMethod('post')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring a Specific October CMS Version in composer.json\nDESCRIPTION: JSON configuration to specify a minimum version requirement for October CMS. This example requires version 3.1 or above of the platform.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"october/rain\": \">=3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Response in PHP\nDESCRIPTION: Shows how to create a custom Response object with specific content and status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = 'Page not found';\n$statusCode = 404;\nreturn Response::make($contents, $statusCode);\n```\n\n----------------------------------------\n\nTITLE: Comparing YAML to PHP Syntax for Content Fields in October CMS\nDESCRIPTION: Examples showing how YAML syntax translates to PHP method chains in content field definitions. This demonstrates how YAML properties are converted to PHP method calls in content field implementations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nautoFocus: true\n```\n\nLANGUAGE: php\nCODE:\n```\n->autoFocus()\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlabel: my field\n```\n\nLANGUAGE: php\nCODE:\n```\n->label('my field')\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: partial\n```\n\nLANGUAGE: php\nCODE:\n```\n->displayAs('partial')\n```\n\n----------------------------------------\n\nTITLE: Using whereJsonLength for JSON Array Length Checks\nDESCRIPTION: Shows how to use whereJsonLength to query JSON arrays based on their length, with examples of equality and comparison checks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', 0)\n    ->get();\n\n$users = Db::table('users')\n    ->whereJsonLength('options->languages', '>', 1)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Console Command in PHP for October CMS\nDESCRIPTION: This example shows how to schedule a console command to run daily using the command scheduler in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('cache:clear')->daily();\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content Block in Twig\nDESCRIPTION: Example of rendering a Markdown content block named 'my-markdown.md' using Twig syntax. This demonstrates how to include a Markdown-formatted Content Block in a template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'my-markdown.md' %}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Methods in PHP Queries\nDESCRIPTION: Demonstrates the use of various raw methods like selectRaw, whereRaw, havingRaw, orderByRaw, and groupByRaw. These methods allow for more flexibility in constructing complex queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n\n$orders = Db::table('orders')\n    ->whereRaw('price > IF(state = \"TX\", ?, 100)', [200])\n    ->get();\n\n$orders = Db::table('orders')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n\n$orders = Db::table('orders')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n\n$orders = Db::table('orders')\n    ->select('city', 'state')\n    ->groupByRaw('city, state')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Create Page in YAML\nDESCRIPTION: Configuration options for the Create page in Form Behavior. It includes settings for title, redirect, and redirectClose.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreate:\n    title: New Blog Post\n    redirect: acme/blog/posts/update/:id\n    redirectClose: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Checking Table and Column Existence in Schema\nDESCRIPTION: Methods to check if a table or column exists in the database before performing operations. These can be used as conditionals before modifying database structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Schema::hasTable('users')) {\n    //\n}\n\nif (Schema::hasColumn('users', 'email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Hint Partial with Key\nDESCRIPTION: Shows how to create a hideable hint panel in the backend using makeHintPartial with a unique key and custom variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->makeHintPartial('my_hint_key', 'my_hint_partial', ['foo' => 'bar']) ?>\n```\n\n----------------------------------------\n\nTITLE: Nested Field Selection in YAML\nDESCRIPTION: Shows how to access and save nested field values, which will be interpreted as accessing a property of a related object or an array index in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\navatar[name]:\n    label: Avatar\n    comment: will be saved in the Avatar table\n```\n\n----------------------------------------\n\nTITLE: Creating File-Based Configuration in October CMS\nDESCRIPTION: Example of a plugin configuration file that defines and returns an array of configuration values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => 10,\n    'display' => 5\n];\n```\n\n----------------------------------------\n\nTITLE: Basic Import Export YAML Configuration\nDESCRIPTION: Demonstrates the basic YAML configuration for import and export functionality, including model class and list column definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config_import_export.yaml\nimport:\n    title: Import Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberImport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n\nexport:\n    title: Export Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberExport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple CSS Files with |theme Filter in Twig\nDESCRIPTION: Illustrates how to use the |theme filter to combine multiple CSS files by passing an array of file paths.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/theme.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<link href=\"{{ [\n    'assets/css/styles1.css',\n    'assets/css/styles2.css'\n]|theme }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Attributes in PHP Model\nDESCRIPTION: Demonstrates how to use the Nullable trait to automatically set empty attributes to NULL in a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Product extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Nullable;\n\n    /**\n     * @var array Nullable attributes.\n     */\n    protected $nullable = ['sku'];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Form View in PHP\nDESCRIPTION: Demonstrates how to create a form view for the Update page in October CMS, including form rendering, save, and delete buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class'=>'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div class=\"loading-indicator-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"close:true\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                data-load-indicator=\"Saving Category...\"\n                class=\"btn btn-default\">\n                Save and Close\n            </button>\n            <button\n                type=\"button\"\n                class=\"oc-icon-trash-o btn-icon danger pull-right\"\n                data-request=\"onDelete\"\n                data-load-indicator=\"Deleting Category...\"\n                data-request-confirm=\"Do you really want to delete this category?\">\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Soft Definition Implementation\nDESCRIPTION: Shows how to implement conditional behavior loading using the @ symbol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        '@'.\\RainLab\\Translate\\Behaviors\\TranslatableModel::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_set() Function in PHP\nDESCRIPTION: The array_set method sets a value within a deeply nested array using 'dot' notation. This allows modifying specific nested values without manually traversing the array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$array = ['products' => ['desk' => ['price' => 100]]];\n\narray_set($array, 'products.desk.price', 200);\n\n// ['products' => ['desk' => ['price' => 200]]]\n```\n\n----------------------------------------\n\nTITLE: Preventing Task Overlaps in PHP for October CMS Scheduler\nDESCRIPTION: This snippet demonstrates how to prevent a scheduled task from running if the previous instance is still running, using the withoutOverlapping method in the October CMS command scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('emails:send')->withoutOverlapping();\n```\n\n----------------------------------------\n\nTITLE: Defining a Mutator in PHP Model\nDESCRIPTION: Example of creating a setter method to format the first_name attribute value before it's stored in the model. This mutator converts the name to lowercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * Set the user's first name.\n     *\n     * @param  string  $value\n     * @return string\n     */\n    public function setFirstNameAttribute($value)\n    {\n        $this->attributes['first_name'] = strtolower($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Messages Configuration\nDESCRIPTION: Configuration to override default messages used by the Form Controller, including context-specific overrides.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncustomMessages:\n    notFound: Did not find the thing\n    flashCreate: New thing created\n    flashUpdate: Updated that thing\n    flashDelete: Thing is gone\n```\n\nLANGUAGE: yaml\nCODE:\n```\nupdate:\n    customMessages:\n        notFound: Nothing found when updating\n```\n\n----------------------------------------\n\nTITLE: Service Provider and Alias Registration\nDESCRIPTION: Implementation of the register() method showing how to register package service providers and aliases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function register()\n{\n    // Register the aliases provided by the packages used by your plugin\n    App::registerClassAlias('Purifier', \\Mews\\Purifier\\Facades\\Purifier::class);\n\n    // Register the service providers provided by the packages used by your plugin\n    App::register(\\Mews\\Purifier\\PurifierServiceProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Collection Chunk Method with Bootstrap Grid in Twig\nDESCRIPTION: Example of using the chunk() method in a Twig template to create a grid layout. This is useful for displaying items in rows with a specific number of columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for chunk in products.chunk(3) %}\n    <div class=\"row\">\n        {% for product in chunk %}\n            <div class=\"col-xs-4\">{{ product.name }}</div>\n        {% endfor %}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining Required Command Argument\nDESCRIPTION: Example of defining a required argument in the command signature.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user}';\n```\n\n----------------------------------------\n\nTITLE: Custom Route Definition in PHP\nDESCRIPTION: Example of defining custom routes in an October CMS plugin routes.php file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('api_acme_blog/cleanup_posts', function() {\n    return Posts::cleanUp();\n});\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework in Twig\nDESCRIPTION: Basic implementation of the AJAX framework in an October CMS theme using Twig tags. Shows both basic implementation and extra features inclusion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% framework %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras turbo %}\n```\n\n----------------------------------------\n\nTITLE: Splicing PHP Collection\nDESCRIPTION: The splice method removes and returns a slice of items starting at the specified index. It can also limit the size of the resulting chunk and replace removed items with new ones.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2);\n\n$chunk->all();\n\n// [3, 4, 5]\n\n$collection->all();\n\n// [1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 4, 5]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1, [10, 11]);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 10, 11, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Defining a Service Provider in October CMS\nDESCRIPTION: Demonstrates how to create a service provider by extending October's ServiceProvider class and implementing the register method to perform IoC bindings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Support\\ServiceProvider;\n\nclass FooServiceProvider extends ServiceProvider\n{\n\n    public function register()\n    {\n        $this->app->bind('foo', function() {\n            return new Foo;\n        });\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Negation in Twig If Statements\nDESCRIPTION: Example of using the 'not' keyword to check for false conditions. This snippet checks if a user is not subscribed and displays a notification message accordingly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-if.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if not user.subscribed %}\n    <p>ÊÇ®Ê≤°ÊúâËÆ¢ÈòÖÊàë‰ª¨ÁöÑÈÇÆ‰ª∂ÂàóË°®.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Returning a Collection Resource in API\nDESCRIPTION: Shows how to return a collection resource wrapped in a 'data' attribute. This example uses a Collection CMS component to fetch all blog posts for the API endpoint.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/api/blog/posts\"\n\n[collection posts]\nhandle = \"Blog\\Post\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({\n    data: posts\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Model Relationship Definition in PHP\nDESCRIPTION: Example showing how to define a hasMany relationship in a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Invoice extends Model\n{\n    public $hasMany = [\n        'items' => \\Acme\\Pay\\Models\\InvoiceItem::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Behaviors Example\nDESCRIPTION: Example showing how to implement behaviors in a class that extends the Extendable base class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        \\October\\Rain\\UtilityFunctions::class,\n        \\October\\Rain\\DeferredBinding::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Creating and Associating File Attachment in PHP\nDESCRIPTION: Demonstrates manually creating a File model and associating it with the relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$file = new System\\Models\\File;\n$file->data = Input::file('file_input');\n$file->is_public = true;\n$file->save();\n\n$model->avatar()->add($file);\n```\n\n----------------------------------------\n\nTITLE: Using Cast Attributes\nDESCRIPTION: Example of using a boolean-cast attribute in conditional logic\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nif ($user->is_admin) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dimension Field Query\nDESCRIPTION: Implementation of query configuration for dimension fields using onConfigureQuery to join categories table and select additional fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$reportQueryBuilder->onConfigureQuery(\n    function(Builder $query, ReportDimension $dimension, array $metrics) {\n        $query->leftJoin('acme_shop_categories', function($join) {\n            $join->on('acme_shop_categories.id', '=', 'acme_shop_products.category_id');\n        });\n\n        $query->addSelect([\n            Db::raw('max(acme_shop_products.brand) as oc_field_brand'),\n            Db::raw('max(acme_shop_categories.category_name) as oc_field_category'),\n        ]);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Comment with Parent Timestamp Touch in PHP\nDESCRIPTION: Demonstrates how updating a child model automatically updates the parent's timestamp.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\n$comment->text = 'Edit to this comment!';\n\n$comment->save();\n```\n\n----------------------------------------\n\nTITLE: Disposing Controls in Turbo Router using JavaScript\nDESCRIPTION: Demonstrates how to properly dispose of controls and events when navigating between pages using the 'page:unload' event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:unload', function() {\n    removeEventListener('keydown', myKeyDownFunction);\n}, { once: true });\n```\n\n----------------------------------------\n\nTITLE: Grouping Where Conditions with Closures\nDESCRIPTION: Demonstrates how to create nested parameter grouping for complex conditions using closures with the orWhere method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->where('name', '=', 'John')\n    ->orWhere(function ($query) {\n        $query->where('votes', '>', 100)\n            ->where('title', '<>', 'Admin');\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Passing Markup as a Variable to Partials in October CMS\nDESCRIPTION: Demonstrates how to pass markup content to a partial using the 'body' attribute in the partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" body %}\n    This is the card contents\n{% endpartial %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ body|raw }}\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Form Configuration in YAML\nDESCRIPTION: Demonstrates basic setup of a nested form with multiple field types including datepicker, textarea, and text input fields. Shows how to disable the panel container using showPanel property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-nestedform.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: nestedform\n    showPanel: false\n    form:\n        fields:\n            added_at:\n                label: Date Added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n            title:\n                label: This the title\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Detecting and Extending with Behaviors\nDESCRIPTION: Examples showing how to check for behavior implementations and dynamically extend classes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$controller->isClassExtendedWith(\\Backend\\Behaviors\\RelationController::class);\n```\n\nLANGUAGE: php\nCODE:\n```\n$controller->extendClassWith(\\Backend\\Behaviors\\RelationController::class);\n```\n\nLANGUAGE: php\nCODE:\n```\n$controller->implementClassWith(\\Backend\\Behaviors\\RelationController::class);\n```\n\n----------------------------------------\n\nTITLE: Soft Component with Alias\nDESCRIPTION: Shows how to implement a soft component using an alias name for the component reference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_9\n\nLANGUAGE: markup\nCODE:\n```\nurl = \"mypage\"\n\n[@channel channelSection]\n==\n{% component \"channelSection\" %}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in October CMS\nDESCRIPTION: Examples of removing files from a disk using the delete method. Shows both single file deletion and multiple file deletion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nStorage::delete('file.jpg');\n\nStorage::delete(['file1.jpg', 'file2.jpg']);\n```\n\n----------------------------------------\n\nTITLE: Stream Download Response in PHP\nDESCRIPTION: PHP code for creating a downloadable response from a string without writing to disk using the Response::streamDownload method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function onExport()\n{\n    return Response::streamDownload(function() {\n        echo 'CSV Contents...';\n    }, 'export.csv');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Distinct Results\nDESCRIPTION: Uses the distinct method to force the query to return only unique result rows, eliminating duplicates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->distinct()->get();\n```\n\n----------------------------------------\n\nTITLE: Queue Job with Custom Method\nDESCRIPTION: Example of pushing a job to the queue with a specific method name other than the default 'fire' method\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: String Manipulation Functions in PHP\nDESCRIPTION: Helper functions for string manipulation including case conversion, HTML entities encoding, string checking and transformation operations\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$camel = camel_case('foo_bar');\n$class = class_basename('Foo\\Bar\\Baz');\necho e('<html>foo</html>');\n$value = ends_with('This is my name', 'name');\n$snake = snake_case('fooBar');\n$value = str_limit('The CMS platform that gets back to basics.', 6);\n$value = starts_with('The cow goes moo', 'The');\n$string = str_finish('this/string', '/');\n$plural = str_plural('car');\n$string = str_random(40);\n$title = str_slug(\"October CMS\", \"-\");\n$value = studly_case('foo_bar');\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Disks in October CMS\nDESCRIPTION: Example of accessing multiple disks using the disk method on the Storage facade. This shows how to access a specific disk for file operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$disk = Storage::disk('s3');\n\n$contents = Storage::disk('local')->get('file.jpg')\n```\n\n----------------------------------------\n\nTITLE: Array Casting for JSON Data in PHP Model\nDESCRIPTION: Example of using array casting to automatically serialize and deserialize JSON data stored in a TEXT field when accessing the attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be casted to native types.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Behavior in YAML\nDESCRIPTION: Example of a typical List Behavior configuration file in YAML format, specifying title, list columns, model class, and record URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Behavior Config\n# ===================================\n\ntitle: Blog Posts\nlist: ~/plugins/acme/blog/models/post/columns.yaml\nmodelClass: Acme\\Blog\\Models\\Post\nrecordUrl: acme/blog/posts/update/:id\n```\n\n----------------------------------------\n\nTITLE: Implementing Dictionary Validation in OctoberCMS PHP\nDESCRIPTION: Advanced example showing how to implement validation for dictionary properties. Includes validation for the entire dictionary set as well as separate validation rules for keys and values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dictionary.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'options' => [\n            'title' => 'Options',\n            'type' => 'dictionary',\n            'validation' => [\n                'required' => [\n                    'message' => 'Please create options'\n                ],\n                'length' => [\n                    'min' => [\n                        'value' => 2,\n                        'message' => 'Create at least two options.'\n                    ]\n                ]\n            ],\n            'validationKey' => [\n                'regex' => [\n                    'pattern' => '^[a-z]+$',\n                    'message' => 'Keys can contain only lowercase Latin letters'\n                ]\n            ],\n            'validationValue' => [\n                'regex' => [\n                    'pattern' => '^[a-zA-Z0-9]+$',\n                    'message' => 'Values can contain only Latin letters and digits'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Mail Templates with Twig\nDESCRIPTION: Example of embedding an image in an email template using the message.embed method in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image:\n\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Checking Validation Results in PHP\nDESCRIPTION: Shows how to check if validation failed using the fails() method on the Validator instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($validator->fails()) {\n    // The given data did not pass validation\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Rich Editor in October CMS\nDESCRIPTION: Shows how to create a WYSIWYG text input for rich content and how to render it in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{richeditor name=\"content\" label=\"Main content\"}Default text{/richeditor}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ content|raw }}\n```\n\n----------------------------------------\n\nTITLE: Using str_camel() Function for camelCase Conversion\nDESCRIPTION: Shows how to use str_camel() function to convert a string to camelCase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel('hello world') }}\n```\n\n----------------------------------------\n\nTITLE: Creating URL Endpoint for Artisan Commands in October CMS\nDESCRIPTION: PHP code for a route definition that creates a web-accessible endpoint to run Artisan commands. This provides an alternative when direct command line access is not available through hosting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/scheduler.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/campaign-run', function () {\n    return Artisan::call('campaign:run');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Global Validation Rules\nDESCRIPTION: Demonstrates how to use a globally registered validation rule in validation rules array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nValidator::make($data, [\n    'shoutout' => 'required|uppercase',\n]);\n```\n\n----------------------------------------\n\nTITLE: Fetching Control Instances with Selector and Name\nDESCRIPTION: Demonstrates fetching a specific control by selector and control name when multiple controls may be bound to the same element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchControl = oc.fetchControl('[data-control=search]', 'search');\n```\n\n----------------------------------------\n\nTITLE: Accessing External Variables in Dynamic Partials in October CMS\nDESCRIPTION: Demonstrates how to access externally assigned variables in PHP within a dynamic partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?\nfunction onStart()\n{\n    $this['location'] = $this->city . ', ' . $this->country;\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ location }} is the same as {{ city }}, {{ country }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Customizing Keys in a HasManyThrough Relationship (PHP)\nDESCRIPTION: Demonstrates how to fully customize a hasManyThrough relationship by specifying custom key names for all tables involved in the relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic $hasManyThrough = [\n    'posts' => [\n        'Acme\\Blog\\Models\\Post',\n        'key'        => 'my_country_id',\n        'through'    => 'Acme\\Blog\\Models\\User',\n        'throughKey' => 'my_user_id',\n        'otherKey'   => 'my_id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Layouts in PHP\nDESCRIPTION: Method implementation for registering mail layouts in a plugin registration file\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailLayouts()\n{\n    return [\n        'marketing' => 'acme.blog::layouts.marketing',\n        'notification' => 'acme.blog::layouts.notification',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Scope Filter in YAML\nDESCRIPTION: Demonstrates how to configure a basic dropdown scope filter using YAML. It includes options for pending, active, and closed statuses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    type: dropdown\n    options:\n        pending: Pending\n        active: Active\n        closed: Closed\n```\n\n----------------------------------------\n\nTITLE: Using Custom SQL Select for Relation Label in YAML\nDESCRIPTION: Illustrates how to use a custom SQL select statement to populate the label for related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Route Definition Response\nDESCRIPTION: Example of returning a string response from a route definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function() {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamically Implementing Sortable Behavior in October CMS\nDESCRIPTION: Demonstrates how to dynamically implement the Sortable behavior by extending an existing model class. This approach allows adding behaviors without modifying the original class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Extend the RainLab.User user model to implement the sortable behavior.\n */\nRainLab\\User\\Models\\User::extend(function($model) {\n\n    // Implement the sortable behavior dynamically\n    $model->implement[] = 'October.Rain.Database.Behaviors.Sortable';\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Partial with Component\nDESCRIPTION: This snippet demonstrates how to pass parameters to a partial that contains a component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'my-todo-partial' maxItems='10' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Mail Recipient\nDESCRIPTION: PHP configuration for setting up a universal recipient for all emails during development\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'to' => [\n    'address' => 'dev@example.tld',\n    'name' => 'Dev Example'\n],\n```\n\n----------------------------------------\n\nTITLE: Dropdown Field with Default Value\nDESCRIPTION: Configuration showing how to set a default value for a dropdown field using the key of the desired option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n    default: published\n```\n\n----------------------------------------\n\nTITLE: Using Named Routes with Route Groups in October CMS\nDESCRIPTION: Example of setting a common route name prefix for all routes within a group using the 'as' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['as' => 'admin::'], function () {\n    Route::get('dashboard', ['as' => 'dashboard', function () {\n        // Route named \"admin::dashboard\"\n    }]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Forms\nDESCRIPTION: Shows how to create a form that accepts file uploads by adding the files option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'files' => true])\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection by Entry Type in October CMS\nDESCRIPTION: Example showing how to filter records by their entry type using the 'content_group' attribute, displaying only posts with the entry type code 'featured_post'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set featuredPosts = posts.where('content_group', 'featured_post').get() %}\n```\n\n----------------------------------------\n\nTITLE: Keying Collection with Callback Function in PHP\nDESCRIPTION: Using keyBy with a callback function to process each item before determining the key. This example transforms product IDs to uppercase before using them as keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$keyed = $collection->keyBy(function ($item) {\n    return strtoupper($item['product_id']);\n});\n\n$keyed->all();\n\n/*\n    [\n        'PROD-100' => ['product_id' => 'prod-100', 'name' => 'Chair'],\n        'PROD-200' => ['product_id' => 'prod-200', 'name' => 'Desk'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: File Attachment Validation Example\nDESCRIPTION: Demonstrates how to implement validation rules for file attachments in a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/attachments.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse System\\Models\\File;\nuse Model;\n\nclass Gallery extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $attachMany = [\n        'photos' => File::class\n    ];\n\n    public $rules = [\n        'photos'   => 'required',\n        'photos.*' => 'image|max:1000|dimensions:min_width=100,min_height=100'\n    ];\n\n    /* some other code */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-selected Checkboxes and Radio Buttons\nDESCRIPTION: Example showing how to create checkbox and radio button inputs that are pre-selected when the form loads.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::checkbox('name', 'value', true) ?>\n\n<?= Form::radio('name', 'value', true) ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Read/Write Database Connections in PHP\nDESCRIPTION: Example configuration for separate read and write database connections in the database.php configuration file. This allows using different hosts for SELECT vs INSERT/UPDATE/DELETE operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/database-config.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => [\n    'read' => [\n        'host' => '192.168.1.1',\n    ],\n    'write' => [\n        'host' => '196.168.1.2'\n    ],\n    'driver'    => 'mysql',\n    'database'  => 'database',\n    'username'  => 'root',\n    'password'  => '',\n    'charset'   => 'utf8',\n    'collation' => 'utf8_unicode_ci',\n    'prefix'    => '',\n],\n```\n\n----------------------------------------\n\nTITLE: Reading from a Settings Model in October CMS\nDESCRIPTION: Examples of different ways to read values from a settings model, including direct property access and using the static get method with default values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Outputs: ABCD\necho Settings::instance()->api_key;\n\n// Get a single value\necho Settings::get('api_key');\n\n// Get a value and return a default value if it doesn't exist\necho Settings::get('is_activated', true);\n```\n\n----------------------------------------\n\nTITLE: Using the mode() Method in PHP Collections\nDESCRIPTION: The mode method returns the statistical mode (most frequently occurring value) from a collection. It works with both simple values and arrays of objects when a key is provided.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$mode = new Collection([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])->mode('foo');\n\n// [10]\n\n$mode = new Collection([1, 1, 2, 4])->mode();\n\n// [1]\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Field Configuration in YAML\nDESCRIPTION: Simple dropdown field configuration with static options for a blog post status selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    type: dropdown\n    label: Blog Post Status\n    options:\n        draft: Draft\n        published: Published\n        archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Sending Additional POST Parameters with AJAX Request in HTML\nDESCRIPTION: This example shows how to include additional POST parameters with an AJAX request, sending a 'mode' parameter with value 'update'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onUpdate\" data-request-data=\"mode: 'update'\">\n\n```\n\n----------------------------------------\n\nTITLE: Creating Settings Controller Class in October CMS\nDESCRIPTION: Example of creating a settings controller by extending the SettingsController base class and defining the settings item code for navigation context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Posts extends \\Backend\\Classes\\SettingsController\n{\n    public $settingsItemCode = 'location';\n\n    public function index() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Collection Values with implode Method in PHP\nDESCRIPTION: Joins collection items into a string using specified glue. Handles both simple values and arrays/objects by specifying key to join.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['account_id' => 1, 'product' => 'Chair'],\n    ['account_id' => 2, 'product' => 'Desk'],\n]);\n\n$collection->implode('product', ', ');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Formatted Error Message in PHP\nDESCRIPTION: Demonstrates retrieving an error message with a custom format using the first() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\necho $messages->first('email', '<p>:message</p>');\n```\n\n----------------------------------------\n\nTITLE: Using Functions in Twig Templates\nDESCRIPTION: Demonstrates the basic syntax for calling functions within Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ function() }}\n```\n\n----------------------------------------\n\nTITLE: Copying a Theme in October CMS\nDESCRIPTION: Command to duplicate an existing theme to create a new one, including child themes if present.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy <source-theme> [destination-theme]\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Handlers in Self-Updating Partials\nDESCRIPTION: Illustrates how to use AJAX handlers within self-updating partials, including a simple contact form example and usage with CMS components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/ajax-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Self Updating Partial\"\n```\n\nLANGUAGE: php\nCODE:\n```\n<?\nfunction onSubmitContactForm()\n{\n    $this['submitted'] = true;\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if submitted %}\n    <p>Thank you for contacting us!</p>\n{% endif %}\n\n<button\n    data-request=\"onSubmitContactForm\"\n    data-request-update=\"{ _self: true }\">\n    Submit\n</button>\n```\n\nLANGUAGE: ini\nCODE:\n```\n[contactForm]\n```\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"contactForm::onSubmit\"\n    data-request-update=\"{ _self: true }\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: XSS Prevention with HTML Clean\nDESCRIPTION: Example of using html_clean() to sanitize HTML and prevent XSS attacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-html.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_clean('<script>window.location = \"http://google.com\"</script>') }}\n```\n\n----------------------------------------\n\nTITLE: Reducing Collection to Single Value in PHP\nDESCRIPTION: The reduce method reduces the collection to a single value, passing the result of each iteration into the subsequent iteration. An initial value can be specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$total = $collection->reduce(function ($carry, $item) {\n    return $carry + $item;\n});\n\n// 6\n\n$collection->reduce(function ($carry, $item) {\n    return $carry + $item;\n}, 4);\n\n// 10\n```\n\n----------------------------------------\n\nTITLE: Custom Messages Configuration in YAML\nDESCRIPTION: Configuration for overriding default form controller messages and context-specific messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncustomMessages:\n    notFound: Did not find the thing\n    flashCreate: New thing created\n    flashUpdate: Updated that thing\n    flashDelete: Thing is gone\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Attribute Names in PHP Models\nDESCRIPTION: Demonstrates how to define custom attribute names for validation in an October CMS model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $attributeNames = [\n        'email' => 'Email Address',\n        ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Component in October CMS Template Configuration\nDESCRIPTION: This code snippet demonstrates how to initialize a component in an October CMS template configuration section. The example shows a 'demoTodo' component being added to a page with a 'maxItems' property set to 20.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"Components demonstration\"\nurl = \"/components\"\n\n[demoTodo]\nmaxItems = 20\n```\n\nLANGUAGE: twig\nCODE:\n```\n<!-- HTML Content Here -->\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Markup with {% component %} Tag in Twig\nDESCRIPTION: Demonstrates how to use the {% component %} tag to parse and display the default markup content for a CMS component. This tag is equivalent to rendering the component's default.htm partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/component.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Option for Dropdown Filter\nDESCRIPTION: Demonstrates how to set an empty option for the dropdown filter, which serves as the default state when no selection is made.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    type: dropdown\n    emptyOption: Select Status\n    # ...\n```\n\n----------------------------------------\n\nTITLE: External Fields Definition Structure in YAML\nDESCRIPTION: Example of the structure of an external fields.yaml file that defines customizable theme settings, showing field definitions separated from the main theme config.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    site_name:\n        label: Site name\n        comment: The website name as it should appear on the front-end\n        default: My Amazing Site!\n```\n\n----------------------------------------\n\nTITLE: Twig Translation Filter Usage\nDESCRIPTION: Examples of using the trans Twig filter to output translated strings in theme templates, showing both direct string and code-based key translations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/localization.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<!-- j'adore programmer -->\n{{ 'I love programming.'|trans }}\n\n<!-- October CMS -->\n{{ 'theme.options.website_name'|trans }}\n```\n\n----------------------------------------\n\nTITLE: Copying Files (PHP)\nDESCRIPTION: Example of copying an existing file to a new location on the disk using the copy method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nStorage::copy('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Extending User Model with Local Events\nDESCRIPTION: Examples of extending the User model by binding to its local events, demonstrating how to modify attribute values and add custom validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// ÂΩ±ÂìçÊâÄÊúâÁî®Êà∑ÁöÑÊú¨Âú∞‰∫ã‰ª∂Èí©Â≠ê\nUser::extend(function ($model) {\n    $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n        if ($attribute === 'foo') {\n            return 'bar';\n        }\n    });\n});\n\n// ‰ªÖÂΩ±ÂìçÁî®Êà∑ #2 ÁöÑÂèåÈáç‰∫ã‰ª∂Èí©Â≠ê\nUser::extend(function ($model) {\n    $model->bindEvent('model.afterFetch', function () use ($model) {\n        if ($model->id !== 2) {\n            return;\n        }\n\n        $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n            if ($attribute === 'foo') {\n                return 'bar';\n            }\n        });\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Logging with Contextual Data in October CMS\nDESCRIPTION: Shows how to include contextual data when logging. The contextual data is formatted and displayed with the log message to provide additional information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nLog::info('User failed to login.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: Using Plugin View Template in YAML\nDESCRIPTION: Example showing how to pass a view template code as the path to access view service templates inside a plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-partial.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: acme.blog::formfields.content\n```\n\n----------------------------------------\n\nTITLE: Defining Single File Attachment in PHP Model\nDESCRIPTION: Demonstrates how to define a single file attachment relationship using $attachOne property in a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/attachments.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic $attachOne = [\n    'avatar' => 'System\\Models\\File'\n];\n```\n\n----------------------------------------\n\nTITLE: Multiple File Upload Input in HTML\nDESCRIPTION: HTML input field configuration for uploading multiple files simultaneously. The input includes the multiple attribute and uses array notation in the name attribute to handle multiple file inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n    <label>Multi File</label>\n    <input name=\"multi_file[]\" type=\"file\" multiple>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Menu Items in October CMS\nDESCRIPTION: Examples of modifying existing menu items using event listeners to update labels and add counters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n    $manager->getMainMenuItem('October.Editor', 'editor')->label('Code Editor');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Selectable Column Definition in YAML\nDESCRIPTION: Basic implementation of a selectable column for displaying status values. This minimal configuration requires options to be defined elsewhere.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-selectable.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: selectable\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Form Configuration in YAML\nDESCRIPTION: Demonstrates basic nested form configuration with multiple field types including datepicker, textarea and text input fields. Shows how to disable the panel container with showPanel property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-nestedform.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: nestedform\n    showPanel: false\n    form:\n        fields:\n            added_at:\n                label: Date Added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n            title:\n                label: This the title\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag List Field in YAML\nDESCRIPTION: Demonstrates how to configure a tag list form field using YAML, including options for separator and predefined choices.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    separator: space\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    options:\n        - Red\n        - Blue\n        - Orange\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    mode: relation\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Policy for Reverse Proxies\nDESCRIPTION: Configuration settings to ensure consistent link generation when using reverse proxies like CloudFlare, forcing secure HTTPS links or using a specific URL for all links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nLINK_POLICY=secure\n```\n\n----------------------------------------\n\nTITLE: Modified Component Markup with Component Alias in October CMS\nDESCRIPTION: This code shows how to modify component markup by replacing the __SELF__ reference with the component alias. This allows the markup to work directly in a theme partial or page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ blogPost.post.title }}</h1>\n<p>{{ blogPost.post.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Updating Partials with AJAX Forms\nDESCRIPTION: Shows how to update multiple page elements when submitting an AJAX form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave', ['update' => [\n        'control-panel' => '#controlPanel',\n        'layout/sidebar' => '#layoutSidebar'\n    ]\n])\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins in October CMS\nDESCRIPTION: Commands for installing plugins with various options including version specification and remote sources\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --want=1.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git --want=dev-develop\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git --oc\n```\n\n----------------------------------------\n\nTITLE: Defining Command Arguments in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to define arguments for a console command in OctoberCMS. It shows the structure of the getArguments method and how to specify required arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/development.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the console command arguments.\n * @return array\n */\nprotected function getArguments()\n{\n    return [\n        ['example', InputArgument::REQUIRED, 'An example argument.'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading in October CMS\nDESCRIPTION: This example demonstrates lazy eager loading, which loads relationships after the model has been retrieved. This is useful for conditionally loading relationships based on runtime conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\n\nif ($someCondition) {\n    $books->load('author', 'publisher');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trigger Events in YAML\nDESCRIPTION: Shows how to configure trigger events to show or hide form fields based on the state of other fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nis_delayed:\n    label: Send later\n    comment: Place a tick in this box if you want to send this message at a later time.\n    type: checkbox\n\nsend_at:\n    label: Send date\n    type: datepicker\n    cssClass: field-indent\n    trigger:\n        action: show\n        field: is_delayed\n        condition: checked\n```\n\n----------------------------------------\n\nTITLE: Using Filters with Arguments in Twig\nDESCRIPTION: Demonstrates how to apply filters with arguments to modify variables in specific ways.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ price|currency('USD') }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a CMS Content Block with Twig\nDESCRIPTION: Demonstrates how to use the {% content %} tag to display a CMS content block named 'contacts.htm' on the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"contacts.htm\" %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in PHP\nDESCRIPTION: The env function gets the value of an environment variable or returns a default value if the variable doesn't exist.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_32\n\nLANGUAGE: PHP\nCODE:\n```\n$env = env('APP_ENV');\n\n// Return a default value if the variable doesn't exist...\n$env = env('APP_ENV', 'production');\n```\n\n----------------------------------------\n\nTITLE: Form Label Generation\nDESCRIPTION: Examples of generating form labels with various attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::label('email', 'E-Mail Address') ?>\n\n<?= Form::label('email', 'E-Mail Address', ['class' => 'awesome']) ?>\n```\n\n----------------------------------------\n\nTITLE: Using PHP Traits Example\nDESCRIPTION: Example showing how standard PHP traits are implemented in a class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    use \\October\\Rain\\UtilityFunctions;\n    use \\October\\Rain\\DeferredBinding;\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying Email Delivery in PHP\nDESCRIPTION: Demonstrates how to delay the delivery of a queued email message using the 'later' method in PHP. The method takes the delay time in seconds as the first argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nMail::later(5, 'acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Quick Select for Checkbox List in YAML for October CMS\nDESCRIPTION: Shows how to explicitly enable the quick select menu with 'Select All' and 'Select None' buttons for a checkbox list field, regardless of the number of options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkboxlist.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    quickselect: true\n```\n\n----------------------------------------\n\nTITLE: SQL Result of whereExists Subquery\nDESCRIPTION: Shows the resulting SQL query from using the whereExists method with a subquery for filtering based on related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users where exists (\n    select 1 from orders where orders.user_id = users.id\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Twig Macros from System View\nDESCRIPTION: Demonstrates how to import macros from a system view file using path hints. The example imports from plugins/acme/blog/views/macros.htm.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% import 'acme.blog::macros' as form %}\n```\n\n----------------------------------------\n\nTITLE: Programmatically Overriding Localization Strings in PHP\nDESCRIPTION: Demonstrates how to override language strings programmatically using the Lang::set method in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nLang::set('I love programming.', 'Coding is the best!');\n\nLang::set('I love programming.', 'Le codage est le meilleur!', 'fr');\n```\n\n----------------------------------------\n\nTITLE: Using Verbatim Tag to Prevent Twig Parsing\nDESCRIPTION: This snippet shows how to use the {% verbatim %} tag to prevent Twig from parsing a section of the template. It's useful when you want to display Twig-like syntax without it being processed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-verbatim.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% verbatim %}<p>Hello, {{ name }}</p>{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in PHP\nDESCRIPTION: Demonstrates how to return an XML response by setting the appropriate Content-Type header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($xmlString)->header('Content-Type', 'text/xml');\n```\n\n----------------------------------------\n\nTITLE: Creating Idempotent Controls for Turbo Router in JavaScript\nDESCRIPTION: Shows how to create idempotent JavaScript functions that can be safely applied multiple times without changing the result beyond the initial application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:loaded', function() {\n    // Find my control\n    var myControl = document.querySelector('.my-control');\n\n    // Check if control has already been initialized\n    if (!myControl.dataset.hasMyControl) {\n        myControl.dataset.hasMyControl = true;\n\n        // Initialize since this is the first time\n        initializeMyControl(myControl);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Else Block\nDESCRIPTION: Illustrates how to use an else block within a for loop to handle empty collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}</li>\n    {% else %}\n        <li><em>There are no users found</em></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Widget in October CMS\nDESCRIPTION: Example configuration for the date picker form widget, setting the mode to 'date' for selecting dates only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\npublished_at:\n    label: Published\n    type: datepicker\n    mode: date\n```\n\n----------------------------------------\n\nTITLE: Basic Taglist Configuration in YAML\nDESCRIPTION: Basic configuration for a taglist form widget with space separator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-taglist.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    separator: space\n```\n\n----------------------------------------\n\nTITLE: Passing Variables with Content Function in Twig\nDESCRIPTION: Demonstrates passing variables when using the content function\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm', { foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: XML Response Example\nDESCRIPTION: Demonstrates returning an XML response with appropriate content type header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($xmlString)->header('Content-Type', 'text/xml');\n```\n\n----------------------------------------\n\nTITLE: Keeping Dropdown Open After Selection in YAML\nDESCRIPTION: Configures a taglist field to keep the dropdown open after an item has been selected by setting the close-on-select attribute to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    type: taglist\n    attributes:\n        data-close-on-select: false\n```\n\n----------------------------------------\n\nTITLE: Moving Files in Storage\nDESCRIPTION: Example showing how to move an existing file to a new location using the move method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nStorage::move('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Collection Shuffle Method Usage\nDESCRIPTION: Demonstrating the shuffle() method to randomize collection items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ collect(songs).shuffle() }}\n```\n\n----------------------------------------\n\nTITLE: Using sortBy() Method with collect()\nDESCRIPTION: Example of the sortBy() method to sort a collection by a specific field or key. This shows the basic syntax of the method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\ncollect(data).sortBy('age')\n```\n\n----------------------------------------\n\nTITLE: Implementing Cascading Soft Deletes - PHP\nDESCRIPTION: Shows how to set up cascading soft deletion for related models using the softDelete option in relationship definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SoftDelete;\n\n    public $hasMany = [\n        'comments' => ['Acme\\Blog\\Models\\Comment', 'softDelete' => true]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Item to End of Collection in PHP\nDESCRIPTION: The push method appends an item to the end of the collection. It modifies the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$collection->push(5);\n\n$collection->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Defining Validation Messages in Language Files\nDESCRIPTION: Demonstrates how to define custom validation messages in a language file for internationalization support.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'required' => 'We need to know your e-mail address!',\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Old Input Data in PHP\nDESCRIPTION: Shows how to retrieve previously flashed input data in the next request, either individually or all at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nInput::old('username');\n```\n\n----------------------------------------\n\nTITLE: Using dd() Debugging Helper in PHP\nDESCRIPTION: The dd (dump and die) function dumps the given variable and ends execution of the script. This is an essential debugging tool for inspecting variables during development.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\ndd($value);\n```\n\n----------------------------------------\n\nTITLE: Implementing Purgeable Behavior in October CMS Models\nDESCRIPTION: Shows how to implement the Purgeable behavior in a model class. This behavior prevents specified attributes from being saved to the database when a model is created or updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    public $implement = [\n        'October.Rain.Database.Behaviors.Purgeable'\n    ];\n\n    /**\n     * @var array List of attributes to purge.\n     */\n    public $purgeable = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing External Variables in PHP\nDESCRIPTION: Shows how to access externally assigned variables in a partial's PHP section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n==\nfunction onStart()\n{\n    $this['location'] = $this->city . ', ' . $this->country;\n}\n==\n{{ location }} is the same as {{ city }}, {{ country }}.\n```\n\n----------------------------------------\n\nTITLE: Defining AJAX Change Handler in YAML\nDESCRIPTION: Shows how to configure a field to call a custom AJAX handler when its value changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: textarea\n    changeHandler: onChangeContent\n```\n\n----------------------------------------\n\nTITLE: Organizing Theme with Subdirectories in October CMS\nDESCRIPTION: Demonstrates how to organize a larger website using subdirectories within an October CMS theme. Shows the structure with subdirectories for blog pages, partials, and home content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nthemes/\n  website/\n    pages/\n      home.htm\n      blog/                  <=== Page Subdirectory\n        archive.htm\n        category.htm\n    partials/\n      sidebar.htm\n      blog/                  <=== Partial Subdirectory\n        category-list.htm\n    content/\n      footer-contacts.txt\n      home/                  <=== Content Subdirectory\n        intro.htm\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining Autocomplete Property in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to define a property using the autocomplete inspector type in OctoberCMS. It shows the basic structure and options for the autocomplete type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-autocomplete.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'condition' => [\n            'title' => 'Condition',\n            'type' => 'autocomplete',\n            'options' => ['start' => 'Start', 'end' => 'End']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Function Usage in Twig\nDESCRIPTION: Demonstrates the basic usage of string functions in Twig templates and their PHP equivalents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/str.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Str::camel() ?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|str_camel }}\n```\n\n----------------------------------------\n\nTITLE: Permanently Deleting Soft Deleted Models - PHP\nDESCRIPTION: Demonstrates how to permanently delete soft deleted models using the forceDelete method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏\n$user->forceDelete();\n\n// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n$user->posts()->forceDelete();\n```\n\n----------------------------------------\n\nTITLE: Syncing Records by Locale\nDESCRIPTION: Shows how to configure a blueprint to sync records across all sites that share the same locale. This is useful for language-specific content structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmultisite: locale\n```\n\n----------------------------------------\n\nTITLE: Managing Global Event Handlers\nDESCRIPTION: Demonstrates how to add and remove global event listeners, ensuring proper cleanup to prevent memory leaks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    connect() {\n        addEventListener('keydown', this.proxy(this.onKeyDown));\n    }\n\n    disconnect() {\n        removeEventListener('keydown', this.proxy(this.onKeyDown));\n    }\n\n    onKeyDown(event) => {\n        if (event.key === 'Escape') {\n            // Escape button was pressed\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Settings Model in October CMS PHP\nDESCRIPTION: Demonstrates how to register a settings model by implementing the registerSettings method in a plugin registration file. Configures basic properties like label, description, category and model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'settings' => [\n            'label' => 'User Settings',\n            'description' => 'Manage user based settings.',\n            'category' => 'CATEGORY_USERS',\n            'icon' => 'icon-cog',\n            'class' => \\Acme\\User\\Models\\UserSetting::class,\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Component Implementation in October CMS\nDESCRIPTION: Basic usage of the collection component to display a collection of Blog\\Post entries on a page. The component outputs a default 'collection' variable that can be looped through in the Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[collection]\nhandle = \"Blog\\Post\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in collection %}\n    <h1>{{ post.title }}</h1>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Sending Form Data in PHP HTTP Request\nDESCRIPTION: Shows how to send data as form-urlencoded content type using the asForm() method before making the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nHttp::asForm()->post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Site in PHP\nDESCRIPTION: Shows how to get the active site that is used when rendering CMS pages using the getActiveSite method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$site = Site::getActiveSite();\n```\n\n----------------------------------------\n\nTITLE: Form with Change Monitor\nDESCRIPTION: Example of adding the change monitor attribute to a form to track unsaved changes and display a warning when navigating away.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => '...', 'data-change-monitor' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Returning AJAX Handler Response in Twig\nDESCRIPTION: Shows how to return the AJAX handler response directly using the response() Twig function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do response(ajaxHandler('onResetPassword')) %}\n```\n\n----------------------------------------\n\nTITLE: Extending Pivot Widget in OctoberCMS PHP\nDESCRIPTION: PHP method example for extending the pivot widget in a relation, allowing customization of the pivot data management interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendPivotWidget($widget, $field, $model)\n{\n    // Make sure the field is the expected one\n    if ($field !== 'myField') {\n        return;\n    }\n\n    // Manipulate widget as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Commands in October CMS\nDESCRIPTION: Various utility commands for cache clearing, removing demo data, mirroring public directory, and other miscellaneous tasks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan cache:clear\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:fresh\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:mirror\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:mirror mypublicfolder\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util compile assets\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util compile lang\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util compile js\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util compile less\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util compile js --debug\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util git pull\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util purge thumbs\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util purge uploads\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util purge orphans\n```\n\n----------------------------------------\n\nTITLE: Creating JSONP Response in PHP\nDESCRIPTION: Shows how to create a JSONP response by using the json method with setCallback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA'])\n    ->setCallback(Input::get('callback'));\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework with Extra Features in Twig\nDESCRIPTION: Demonstrates including the AJAX framework with extras parameter that adds additional StyleSheet and JavaScript files for features like form validation, loading indicators, and flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras %}\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Directory in October CMS\nDESCRIPTION: Examples of retrieving all files in a directory using the files and allFiles methods. The allFiles method also includes files in sub-directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);\n```\n\n----------------------------------------\n\nTITLE: Accessing Returned Data with Attributes API\nDESCRIPTION: Demonstrates how to access data returned from an AJAX handler using the data attributes API's success callback, which receives the data as a parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onHandleForm\" data-request-success=\"console.log(data)\">\n```\n\n----------------------------------------\n\nTITLE: Slicing PHP Collection\nDESCRIPTION: The slice method returns a slice of the collection starting at the given index. It can also limit the size of the returned slice with an optional second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$slice = $collection->slice(4);\n\n$slice->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\nLANGUAGE: php\nCODE:\n```\n$slice = $collection->slice(4, 2);\n\n$slice->all();\n\n// [5, 6]\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw JavaScript Content Using Placeholders in Twig\nDESCRIPTION: Example of using the {% put %} tag with the 'scripts' placeholder to directly inject raw JavaScript content into the page. This allows adding JavaScript content directly from Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put scripts %}\n    <script type=\"text/javascript\" src=\"/themes/demo/assets/js/menu.js\"></script>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Permission Access Check Examples\nDESCRIPTION: Demonstrates different methods to check user permissions in controller code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/permissions.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (BackendAuth::userHasAccess('acme.blog.*')) {\n    // ...\n}\n\nif (BackendAuth::userHasPermission([\n    'acme.blog.access_posts',\n    'acme.blog.access_categories'\n])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Update Event in JavaScript\nDESCRIPTION: Demonstrates how to bind an event handler to the ajaxUpdate event on elements with class 'calcresult'. The handler logs a message to the console when the element is updated via AJAX.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n$('.calcresult').on('ajaxUpdate', function() {\n    console.log('Updated!');\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Entire Cache in PHP\nDESCRIPTION: Using the flush method to clear the entire cache, regardless of cache prefix, which removes all entries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nCache::flush();\n```\n\n----------------------------------------\n\nTITLE: Creating a Toolbar Partial for List (PHP)\nDESCRIPTION: Example of a toolbar partial file that defines a New Post button. The button links to the create action provided by the form behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<div data-control=\"toolbar\">\n    <a href=\"<?= Backend::url('acme/blog/posts/create') ?>\"\n        class=\"btn btn-primary oc-icon-plus\">\n        New Post\n    </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Regenerating Session ID in PHP\nDESCRIPTION: Shows how to regenerate the session ID for security purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSession::regenerate();\n```\n\n----------------------------------------\n\nTITLE: Tabbed Nested Form Configuration in YAML\nDESCRIPTION: Illustrates how to implement tabs in a nested form widget using the tabs property in the form definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-nestedform.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntabbed_content:\n    type: nestedform\n    form:\n        tabs:\n            fields:\n                # ...\n```\n\n----------------------------------------\n\nTITLE: JSON Response Handling\nDESCRIPTION: Examples of creating JSON and JSONP responses with appropriate headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA']);\n\nreturn Response::json(['name' => 'Steve', 'state' => 'CA'])\n    ->setCallback(Input::get('callback'));\n```\n\n----------------------------------------\n\nTITLE: Implementing Local Rule Object\nDESCRIPTION: Shows how to create a local validation rule object implementing the Rule contract with passes and message methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nclass LowercaseRule implements \\Illuminate\\Contracts\\Validation\\Rule\n{\n    /**\n     * passes checks if the rule is successful\n     * @param  string  $attribute\n     * @param  mixed  $value\n     * @return bool\n     */\n    public function passes($attribute, $value)\n    {\n        return strtolower($value) === $value;\n    }\n\n    /**\n     * message gets the validation error message.\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be lowercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form with Event Handler in October CMS\nDESCRIPTION: Example showing how to create a form in Twig that triggers an event handler when submitted.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ request: 'onHandleForm' }) }}\n    Please enter a string: <input type=\"text\" name=\"value\"/>\n    <input type=\"submit\" value=\"Submit me!\"/>\n{{ form_close() }}\n<p>Last submitted value: {{ lastValue }}</p>\n```\n\n----------------------------------------\n\nTITLE: Executing a General Database Statement in PHP\nDESCRIPTION: This snippet demonstrates how to run a general database statement that doesn't return a value, such as dropping a table, using the Db facade in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nDb::statement('drop table users');\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Trait in PHP for October CMS\nDESCRIPTION: This PHP code snippet shows how to use the Sortable trait in a model class. This trait is used when records need to be displayed in a specific order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/structures.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Attribute Casting in PHP Model\nDESCRIPTION: Example of using the $casts property to automatically cast attribute values to specific data types when accessing them from the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be casted to native types.\n     *\n     * @var array\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Configuration in YAML\nDESCRIPTION: Shows how to configure a switch form field with custom labels for true/false states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: switch\n    comment: Flick this switch to display content\n```\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: switch\n    options:\n        - Nope\n        - Yeah\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading Relationships in PHP\nDESCRIPTION: This code shows how to use dot notation to eager load nested relationships in October CMS, loading books with their authors and the authors' contact information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author.contacts')->get();\n```\n\n----------------------------------------\n\nTITLE: Storage Service Download in PHP\nDESCRIPTION: Example of downloading files from the media library or other storage engines using the Storage facade's disk and download methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function onExport()\n{\n    return Storage::disk('media')->download('archive.zip');\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Trigger Button with AJAX\nDESCRIPTION: Implements a button that triggers the modal and loads content via AJAX, targeting a specific element for content updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/modals.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    class=\"btn btn-primary\"\n    data-request=\"onAjax\"\n    data-request-update=\"{ 'my-modal-content': '#siteModalContent' }\"\n    data-bs-toggle=\"modal\"\n    data-bs-target=\"#siteModal\">\n    Launch demo modal\n</button>\n```\n\n----------------------------------------\n\nTITLE: Sorting Results with Raw Order By Expressions\nDESCRIPTION: Shows how to use orderByRaw() to sort query results using complex SQL expressions that combine columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Customizing Redirect URL After Form Submission in PHP\nDESCRIPTION: Demonstrates how to customize the redirect URL after a form is submitted by overriding the formGetRedirectUrl method in the controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\npublic function formGetRedirectUrl($context = null, $model = null)\n{\n    return 'https://octobercms.com';\n}\n```\n\n----------------------------------------\n\nTITLE: Returning XML Response in PHP\nDESCRIPTION: Shows how to return an XML response by setting the appropriate Content-Type header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($xmlString)->header('Content-Type', 'text/xml');\n```\n\n----------------------------------------\n\nTITLE: Storing Avatar Using Default Disk in PHP\nDESCRIPTION: Shows how to store an avatar file on the default disk using the Storage facade. This example uses the 'put' method to store the file in a specific path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find($id);\n\nStorage::put(\n    'avatars/'.$user->id,\n    file_get_contents(Request::file('avatar')->getRealPath())\n);\n```\n\n----------------------------------------\n\nTITLE: Controller beforeDisplay Method - PHP\nDESCRIPTION: Implementation of the beforeDisplay method for handling initialization logic after permission checks, such as widget initialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeDisplay()\n{\n    // Initialize widgets, handle file uploads, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Generic onAjax Handler\nDESCRIPTION: Demonstrates the use of the built-in onAjax handler which can be used when you only need to update page contents without executing custom code on the server.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onAjax\">Do nothing</button>\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence on S3 in PHP\nDESCRIPTION: Demonstrates how to check if a file exists on an S3 disk using the 'exists' method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$exists = Storage::disk('s3')->exists('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Regenerating Session ID in PHP\nDESCRIPTION: Example of regenerating the session ID for security purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSession::regenerate();\n```\n\n----------------------------------------\n\nTITLE: Collection Search Implementation\nDESCRIPTION: Examples of implementing search functionality in collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set foundPages = pages.searchWhere(searchTerm, ['title', 'content']).get() %}\n\n{% set foundPages = pages.searchWhereRelation(searchTerm, 'author', ['title']).get() %}\n```\n\n----------------------------------------\n\nTITLE: Using plugins_path() Helper in PHP\nDESCRIPTION: The plugins_path function returns the fully qualified path to the application plugin directory. It optionally accepts a relative path parameter to generate a path to a specific file within the plugins directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$path = plugins_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = plugins_path('author/plugin/routes.php');\n```\n\n----------------------------------------\n\nTITLE: Moving Files (PHP)\nDESCRIPTION: Example of moving an existing file to a new location on the disk using the move method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nStorage::move('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Custom Value Selection for List Columns in YAML\nDESCRIPTION: Shows how to use the valueFrom property to source a column value from another column in the YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nother_name:\n    label: Something Great\n    valueFrom: name\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Form Widget with Inline Fields in October CMS\nDESCRIPTION: Example of configuring a nested form widget with inline field definitions including date picker, textarea and text inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: nestedform\n    showPanel: false\n    form:\n        fields:\n            added_at:\n                label: Date added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n            title:\n                label: This the title\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Checking if Running in Console in October CMS\nDESCRIPTION: Shows how to determine if the current code is executing within the command line interface rather than during a web request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInConsole();\n```\n\n----------------------------------------\n\nTITLE: Enabling a Plugin in October CMS\nDESCRIPTION: Command to enable a previously disabled plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:enable AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field with Default Value in OctoberCMS\nDESCRIPTION: Configuring a checkbox field with a default value of true, which will check the box by default for new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    type: checkbox\n    label: Display content\n    default: true\n```\n\n----------------------------------------\n\nTITLE: String Inspector Output Format in JSON\nDESCRIPTION: Shows the JSON output format for a string inspector property value. Demonstrates how the value is stored and returned.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-string.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"firstName\": \"Sam\"\n```\n\n----------------------------------------\n\nTITLE: Using last() Function in PHP\nDESCRIPTION: The last function returns the last element in a given array. It provides a simple way to access the final item without having to determine the array length.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, 200, 300];\n\n$last = last($array);\n\n// 300\n```\n\n----------------------------------------\n\nTITLE: Overriding Column Click Behavior\nDESCRIPTION: Shows how to override the onclick behavior for list records by returning a custom onclick handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\npublic function listOverrideRecordUrl($record, $definition = null)\n{\n    if ($record->is_banned) {\n        return ['onclick' => \"alert('Unable to click')\", 'url' => null];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookie to Response in PHP\nDESCRIPTION: Demonstrates how to attach a cookie to a response using the withCookie method, including optional parameters for customization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)->withCookie('name', 'value');\n\n->withCookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)\n```\n\n----------------------------------------\n\nTITLE: Moving Uploaded Files in PHP\nDESCRIPTION: Examples of moving uploaded files to a local destination path with optional custom filenames.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$file->move($destinationPath);\n\n$file->move($destinationPath, $fileName);\n```\n\n----------------------------------------\n\nTITLE: Has One Relation Configuration\nDESCRIPTION: YAML configuration for a Has One relationship between Person and Phone models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nphone:\n    label: Phone\n    view:\n        form: $/acme/user/models/phone/fields.yaml\n        toolbarButtons: update|delete\n    manage:\n        form: $/acme/user/models/phone/fields.yaml\n        list: $/acme/user/models/phone/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating an Extendable Class with ExtendableTrait in PHP\nDESCRIPTION: This code demonstrates creating a base class that can implement behaviors using the ExtendableTrait. The AI class includes all necessary methods required by the ExtendableTrait to handle dynamic properties, method calls, and extension points.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass AI\n{\n    use \\October\\Rain\\Extension\\ExtendableTrait;\n\n    /**\n     * @var array Extensions implemented by this class.\n     */\n    public $implement;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $this->extendableConstruct();\n    }\n\n    public function __get($name)\n    {\n        return $this->extendableGet($name);\n    }\n\n    public function __set($name, $value)\n    {\n        $this->extendableSet($name, $value);\n    }\n\n    public function __call($name, $params)\n    {\n        return $this->extendableCall($name, $params);\n    }\n\n    public static function __callStatic($name, $params)\n    {\n        return self::extendableCallStatic($name, $params);\n    }\n\n    public static function extend(callable $callback)\n    {\n        self::extendableExtendCallback($callback);\n    }\n\n    public function youGotBrains()\n    {\n        echo \"I've got an AI!<br>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Nested Items with mapSpread() Method in PHP Collections\nDESCRIPTION: The mapSpread() method iterates over the collection's items, passing each nested item value into the given callback as separate arguments. It's particularly useful for working with chunked collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\n\n$chunks = $collection->chunk(2);\n\n$sequence = $chunks->mapSpread(function ($even, $odd) {\n    return $even + $odd;\n});\n\n$sequence->all();\n\n// [1, 5, 9, 13, 17]\n```\n\n----------------------------------------\n\nTITLE: Calling an AJAX Handler in Twig\nDESCRIPTION: Demonstrates how to call the onResetPassword AJAX handler using the ajaxHandler() function in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set result = ajaxHandler('onResetPassword') %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flash Messages by Type in October CMS\nDESCRIPTION: Shows how to retrieve all flash messages organized by type using the flash('all') function, which returns an array of types with each type containing an array of messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/flash.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set allMessages = flash('all') %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pretend Mail Mode in October CMS\nDESCRIPTION: PHP code to dynamically enable pretend mode for the mail service. In pretend mode, emails are written to log files instead of being sent to recipients.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nMail::pretend();\n```\n\n----------------------------------------\n\nTITLE: Iterating Over a Collection in PHP\nDESCRIPTION: Demonstrates how to loop over a collection of User models as if it were a simple PHP array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('is_active', true)->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Model Form Binding\nDESCRIPTION: Demonstrates how to bind a model to a form for auto-populating fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::model($user, ['id' => 'userForm']) ?>\n```\n\n----------------------------------------\n\nTITLE: Installing an October CMS Plugin from a Remote Source\nDESCRIPTION: Command to install a plugin from a remote Git repository using the --from option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git\n```\n\n----------------------------------------\n\nTITLE: Using sortBy() Method in PHP Collections\nDESCRIPTION: The sortBy method sorts the collection by a specific key or using a custom callback function. It's useful for sorting nested arrays or objects based on specific criteria.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk', 'price' => 200],\n    ['name' => 'Chair', 'price' => 100],\n    ['name' => 'Bookcase', 'price' => 150],\n]);\n\n$sorted = $collection->sortBy('price');\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'price' => 100],\n        ['name' => 'Bookcase', 'price' => 150],\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$sorted = $collection->sortBy(function ($product, $key) {\n    return count($product['colors']);\n});\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'colors' => ['Black']],\n        ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n        ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Page Template with Layout Reference\nDESCRIPTION: Shows how to reference a layout in a page template with configuration and content sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\nlayout = \"default\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello, world!</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Month Name Dropdown Lists\nDESCRIPTION: Example showing how to generate a dropdown list populated with month names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectMonth('month') ?>\n```\n\n----------------------------------------\n\nTITLE: Adding URL Fragments to Pagination\nDESCRIPTION: Demonstrates adding URL hash fragments to pagination links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ pager(records, { fragment: 'foo' }) }}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form Tag\nDESCRIPTION: Shows the resulting HTML output from form_open() with attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"form-horizontal\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Options Fetching in PHP\nDESCRIPTION: This code demonstrates how to implement the method for fetching dependent options. It retrieves the selected country from the POST data and returns the corresponding list of states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dropdown.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getStateOptions()\n{\n    // Load the country property value from POST\n    $countryCode = post('country');\n\n    $states = [\n        'ca' => ['ab' => 'Alberta', 'bc' => 'British columbia'],\n        'us' => ['al' => 'Alabama', 'ak' => 'Alaska']\n    ];\n\n    return $states[$countryCode];\n}\n```\n\n----------------------------------------\n\nTITLE: Opening an Uploaded File for Resizing in PHP\nDESCRIPTION: Demonstrates how to use an uploaded file from page request input as the source for image resizing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$image = Resizer::open(Input::file('field_name'));\n```\n\n----------------------------------------\n\nTITLE: Controlling Script Execution in Turbo Router using HTML\nDESCRIPTION: Demonstrates how to control script execution in PJAX requests using the 'data-turbo-eval' and 'data-turbo-eval-once' attributes on script tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <script data-turbo-eval=\"false\" src=\"{{ ['@framework.bundle']|theme }}\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Using input() Request Helper in PHP\nDESCRIPTION: The input function obtains an input item from the request, including both GET and POST variables. It accepts a key name and an optional default value to return if the key is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$value = input('key', $default = null)\n```\n\n----------------------------------------\n\nTITLE: Counting Occurrences in a Collection using countBy()\nDESCRIPTION: The countBy() method counts occurrences of values in a collection. It can be used without arguments to count all elements, or with a callback for custom counting logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([1, 2, 2, 2, 3]);\n\n$counted = $collection->countBy();\n\n$counted->all();\n\n// [1 => 1, 2 => 3, 3 => 1]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\n\n$counted = $collection->countBy(function ($email) {\n    return substr(strrchr($email, \"@\"), 1);\n});\n\n$counted->all();\n\n// ['gmail.com' => 2, 'yahoo.com' => 1]\n```\n\n----------------------------------------\n\nTITLE: Setting Key-Value Pair in Collection in PHP\nDESCRIPTION: The put method sets the given key and value in the collection. It modifies the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'name' => 'Desk']);\n\n$collection->put('price', 100);\n\n$collection->all();\n\n// ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Twig Templates\nDESCRIPTION: Demonstrates how to set local variables within a Twig template using the set tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set activePage = 'blog' %}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Partial Content in Twig\nDESCRIPTION: Twig partial template that implements conditional rendering with lazy loading using data-auto-submit.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/polling.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if results %}\n    <h3>Found results</h3>\n    {{ d(results) }}\n{% else %}\n    <h3>Loading the results...</h3>\n    <div\n        data-request=\"onFetchResults\"\n        data-request-update=\"{ _self: true }\"\n        data-auto-submit>\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Partial UI Element in YAML\nDESCRIPTION: Shows how to include a partial view in the form with custom path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: $/acme/blog/models/comments/_content_field.htm\n```\n\n----------------------------------------\n\nTITLE: Demonstrating N+1 Query Problem in OctoberCMS\nDESCRIPTION: Example showing the N+1 query problem when accessing relationships. This loads all books and then queries each book's author separately, resulting in many database queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\\n\\nforeach ($books as $book) {\\n    echo $book->author->name;\\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Partial Updates from PHP Handler\nDESCRIPTION: This PHP code shows how to push a partial update from a server-side AJAX handler. It updates the '#myDiv' element with the contents of the 'mypartial' partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/update-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onRefreshTime()\n{\n    return [\n        '#myDiv' => $this->renderPartial('mypartial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Localized Date and Time Formatting with carbon() in Twig\nDESCRIPTION: Demonstrates the use of the formatLocalized method with carbon() to format a date and time according to locale settings in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon(article.created_at).formatLocalized('%d.%m.%Y %H:%M:%S') }}\n```\n\n----------------------------------------\n\nTITLE: Early Termination of Chunked Processing\nDESCRIPTION: Demonstrates how to stop processing chunks early by returning false from the chunk callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->chunk(100, function($users) {\n    // Process the records...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Belongs To Relation Configuration\nDESCRIPTION: YAML configuration for a Belongs To relationship between Phone and Person models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nperson:\n    label: Person\n    view:\n        form: $/acme/user/models/person/fields.yaml\n        toolbarButtons: link|unlink\n    manage:\n        form: $/acme/user/models/person/fields.yaml\n        list: $/acme/user/models/person/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Throwing NotFoundException in PHP\nDESCRIPTION: Illustrates throwing a NotFoundException, used when a missing record is encountered. This exception changes the response to display the nearest not found page with a 404 status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nthrow new NotFoundException('Record not found');\n```\n\n----------------------------------------\n\nTITLE: Binding External Events to a Model Instance in PHP\nDESCRIPTION: Example of binding an external event handler to a model instance using the bindEvent method, which allows attaching behaviors without extending the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$flight = new Flight;\n$flight->bindEvent('model.beforeCreate', function() use ($model) {\n    $model->slug = Str::slug($model->name);\n})\n```\n\n----------------------------------------\n\nTITLE: Overriding Controller Index Action\nDESCRIPTION: Shows how to override the index action method in a controller while still utilizing the ListController behavior's functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function index()\n{\n    //\n    // Do any custom code here\n    //\n\n    // Call the ListController behavior index() method\n    $this->asExtension('ListController')->index();\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Validation Exception in PHP AJAX Handler\nDESCRIPTION: Demonstrates how to throw a ValidationException in a PHP AJAX handler to make a field invalid and provide an error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmit()\n{\n    throw new ValidationException(['name' => 'You must give a name!']);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Field Values in YAML\nDESCRIPTION: Shows how to reference fields that store multiple values using array notation in the field name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show\n    condition: value[red][green]\n    field: colors[]\n```\n\n----------------------------------------\n\nTITLE: Using flatten Method in PHP Collections\nDESCRIPTION: The flatten method flattens a multi-dimensional collection into a single dimension by recursively joining nested arrays into the parent array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'languages' => ['php', 'javascript']]);\n\n$flattened = $collection->flatten();\n\n$flattened->all();\n\n// ['peter', 'php', 'javascript'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Directive in Markdown for October CMS Documentation\nDESCRIPTION: A Markdown redirect directive that automatically forwards users from the October CMS 1.0 documentation page to the CMS themes documentation section. This is likely used as part of the documentation structure to ensure users are directed to the current or most relevant documentation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"cms/themes\" />\n```\n\n----------------------------------------\n\nTITLE: Refreshing Plugins in October CMS\nDESCRIPTION: Commands for refreshing plugin database tables with optional rollback functionality\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName --rollback\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName --rollback=1.0.3\n```\n\n----------------------------------------\n\nTITLE: Simplified Debugging with d() Function in Twig\nDESCRIPTION: The d() function provides a shorter syntax for debugging in Twig. It shows less detail than dump() but makes values easier to see at a glance. It can be used with single or multiple variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/dump.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ d(user) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ d(variable1, variable2) }}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers with Resources Component for XML Content\nDESCRIPTION: Demonstrates how to use the resources component to set custom HTTP headers. This example shows setting the Content-Type header to 'text/xml' for an RSS feed page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/rss\"\n\n[resources]\nheaders[Content-Type] = 'text/xml'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <!-- RSS contents here -->\n</rss>\n```\n\n----------------------------------------\n\nTITLE: Enabling Multisite Support in Blueprint\nDESCRIPTION: Shows how to enable multisite capabilities in a blueprint. When enabled, records can be unique to each configured site in the October CMS installation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: entry\n# ...\nmultisite: true\n```\n\n----------------------------------------\n\nTITLE: Defining Twig Macro with Arguments\nDESCRIPTION: Shows how to define a Twig macro that accepts arguments. This example creates an input field generator that takes name, value, type, and size parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input(name, value, type, size) %}\n    <input\n        type=\"{{ type|default('text') }}\"\n        name=\"{{ name }}\"\n        value=\"{{ value|e }}\"\n        size=\"{{ size|default(20) }}\" />\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Combining Content Blocks with Layout Placeholders in OctoberCMS\nDESCRIPTION: Shows how to use content blocks within layout placeholders using the {% put %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    {% content 'sidebar-content.htm' %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Path in PHP\nDESCRIPTION: The storage_path function returns the fully qualified path to the storage directory. It can also generate a path to a specific file within the storage directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$path = storage_path();\n\n$path = storage_path('app/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Programmatically Navigating with Turbo Router in JavaScript\nDESCRIPTION: Demonstrates how to programmatically navigate to a new location using the Turbo Router. The 'oc.visit' function is used to trigger a PJAX-like page load.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noc.visit(location);\n```\n\n----------------------------------------\n\nTITLE: Conditional Required Validation in October CMS Tailor\nDESCRIPTION: Using the 'required:create' modifier to make a field required only during record creation but not during updates. This is useful for fields like passwords that might only be required when creating new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npassword:\n    label: Password\n    validation: \"required:create\"\n```\n\n----------------------------------------\n\nTITLE: Basic Entries Field Configuration in YAML\nDESCRIPTION: Basic configuration for the entries field type that links to other entries using UUID or handle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    label: Author\n    type: entries\n    source: <uuid|handle>\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Successful AJAX Request in HTML\nDESCRIPTION: This snippet illustrates how to redirect to another page after a successful AJAX request using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-redirect=\"/admin\">\n```\n\n----------------------------------------\n\nTITLE: Page Template with Placeholder Content\nDESCRIPTION: Demonstrates how to inject content into a layout placeholder from a page template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/my-page\"\nlayout = \"default\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put head %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\">\n{% endput %}\n\n<p>The page content goes here.</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Context in October CMS Backend Controller\nDESCRIPTION: Demonstrates how to set the navigation context in a backend controller's constructor. This determines which backend menu and submenu are active for the current page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/controllers-ajax.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller {\n\npublic function __construct()\n{\n    parent::__construct();\n\n    BackendMenu::setContext('Acme.Blog', 'blog', 'categories');\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Task Hooks in PHP for October CMS Scheduler\nDESCRIPTION: This snippet demonstrates how to use the before and after hooks to execute code before and after a scheduled task runs in the October CMS command scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('emails:send')\n    ->daily()\n    ->before(function () {\n        // Task is about to start...\n    })\n    ->after(function () {\n        // Task is complete...\n    });\n```\n\n----------------------------------------\n\nTITLE: Injecting Combined CSS and JavaScript Assets in October CMS\nDESCRIPTION: This example shows how to inject multiple CSS and JavaScript files as arrays for combining. This approach helps optimize performance by reducing the number of HTTP requests made by the browser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/css/hello.css', 'assets/css/goodbye.css']);\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js']);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Root Path for Turbo Router in HTML\nDESCRIPTION: Shows how to set a root path for PJAX routing using the 'turbo-root' meta tag, which restricts PJAX to a specific subdirectory of the website.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"turbo-root\" content=\"/app\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Performing Database Migration with Error Skipping in October CMS\nDESCRIPTION: This command performs a database migration while ignoring any exceptions that occur during the process. It's useful when tables already exist but version information should still be applied.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/updating-october.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate --skip-errors\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Contents in PHP\nDESCRIPTION: Shows how to retrieve the contents of a file using the 'get' method of the Storage facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = Storage::get('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in October CMS\nDESCRIPTION: Example of using the Config class to access configuration values defined in a plugin's configuration file, with support for default values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Config;\n\n// ...\n\n$maxItems = Config::get('acme.demo::maxItems', 50);\n```\n\n----------------------------------------\n\nTITLE: Basic Twig For Loop Implementation\nDESCRIPTION: Demonstrates the basic usage of for loop to iterate over a collection of users and display usernames in an unordered list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Extending Protected Model Properties in PHP\nDESCRIPTION: Example of extending a model to add cast attributes, date attributes, and fillable or jsonable fields using dedicated methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\Models\\User::extend(function($model) {\n    // add cast attributes\n    $model->addCasts([\n        'some_extended_field' => 'int',\n    ]);\n\n    // add a date attribute\n    $model->addDateAttribute('updated_at');\n\n    // add fillable or jsonable fields\n    // these methods accept one or more strings, or an array of strings\n    $model->addFillable('first_name');\n    $model->addJsonable('some_data');\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Method Implementation for Dropdown in PHP\nDESCRIPTION: Implements a custom method for providing dropdown options, specified explicitly in the field configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($fieldName, $value, $formData)\n{\n    return ['published' => 'Published', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding the Index Action in a Controller (PHP)\nDESCRIPTION: Example of overriding the index action in a controller to add custom logic before calling the parent ListController index method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function index()\n{\n    //\n    // Do any custom code here\n    //\n\n    // Call the ListController behavior index() method\n    $this->asExtension('ListController')->index();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Toolbar in List Configuration (YAML)\nDESCRIPTION: Configuration for adding a toolbar to a list, with buttons and search functionality defined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntoolbar:\n    buttons: list_toolbar\n    search:\n        prompt: Find records\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Widget in OctoberCMS\nDESCRIPTION: The create:formwidget command generates a back-end form widget, view and basic asset files. It requires two parameters: the author and plugin name, and the form widget class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:formwidget Acme.Blog CategorySelector\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from a Subdirectory in Twig\nDESCRIPTION: Demonstrates how to render a partial template located in a subdirectory using Twig syntax in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/themes.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blog/category-list\" %}\n```\n\n----------------------------------------\n\nTITLE: Using where() Method in PHP Collections\nDESCRIPTION: Shows how to filter collections using key/value pairs and comparison operators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->where('price', 100);\n\n$filtered->all();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Option Value in Console Command\nDESCRIPTION: Shows how to retrieve the value of a specific option in a console command using the option method with the option name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$value = $this->option('name');\n```\n\n----------------------------------------\n\nTITLE: Manually Committing Deferred Bindings\nDESCRIPTION: This code shows how to manually commit deferred bindings using the commitDeferred method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$post->commitDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Declaring Extension Events in Components\nDESCRIPTION: Example showing how to declare both global and local events in a component's method to allow for extensibility.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass Topic extends ComponentBase\n{\n    public function onPost()\n    {\n        // ...\n\n        /*\n         * ÂèØÊâ©Â±ïÊÄß\n         */\n        $this->fireEvent('topic.post', [$post, $postUrl]);\n        Event::fire('rainlab.forum.topic.post', [$this, $post, $postUrl]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete fetchData Implementation\nDESCRIPTION: Full implementation of fetchData method combining query builder setup, metrics configuration, and result retrieval.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function fetchData(ReportFetchData $data): ReportFetchDataResult\n{\n    if ($dimension->getCode() !== self::DIMENSION_PRODUCT) {\n        throw new SystemException('Invalid dimension');\n    }\n\n    $reportQueryBuilder = new ReportDataQueryBuilder(\n        'acme_shop_products',\n        $data->dimension,\n        $data->metrics,\n        $data->orderRule,\n        $data->dimensionFilters,\n        $data->limit,\n        $data->paginationParams,\n        $data->groupInterval,\n        $data->hideEmptyDimensionValues,\n        $data->startDate,\n        $data->endDate,\n        $data->startTimestamp,\n        'acme_shop_sales.sale_date',\n        null,\n        $data->totalsOnly\n    );\n\n    $reportQueryBuilder->onConfigureMetrics(\n        function(Builder $query, ReportDimension $dimension, array $metrics) {\n            $query->leftJoin('acme_shop_sales', function($join) {\n                $join->on('acme_shop_sales.product_id', '=', 'acme_shop_products.id');\n            });\n        }\n    );\n\n    return $reportQueryBuilder->getFetchDataResult($data->metricsConfiguration);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Form Field Widget Type\nDESCRIPTION: Demonstrates how to use a PHP class name to specify a custom form field widget type instead of using the built-in types, allowing for extended functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nblog_content:\n    type: Backend\\FormWidgets\\RichEditor\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Basic Balloon Selector Configuration in YAML\nDESCRIPTION: A basic example showing how to configure a gender selection using the balloon-selector field type. This creates a selector with female and male options where only one can be selected at a time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-balloon.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    type: balloon-selector\n    label: Gender\n    options:\n        female: Female\n        male: Male\n```\n\n----------------------------------------\n\nTITLE: Multiple Value Conditions in YAML\nDESCRIPTION: Shows how to configure multiple value conditions using array notation to check for multiple specific values in a field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show\n    condition: value[csv][csv_custom]\n    field: file_format\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Tags in Twig\nDESCRIPTION: Demonstrates how to use if-else conditional logic blocks in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if stormCloudComing %}\n    Stay inside\n{% else %}\n    Go outside and play\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Record Finder in Tailor with Inverse Relation in YAML\nDESCRIPTION: Configuration for a recordfinder in Tailor that specifies an inverse relation, which changes how the relation is defined based on the maxItems setting and relation type of the related model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    label: Tags\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Tag\n    inverse: tags\n```\n\n----------------------------------------\n\nTITLE: Component Usage in Page Template\nDESCRIPTION: Example of component initialization in a page template using INI syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n\n[blogPosts]\n==\n```\n\n----------------------------------------\n\nTITLE: Deleting All Records from a Table in PHP\nDESCRIPTION: Demonstrates how to delete all records from a database table using the delete method without any constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n```\n\n----------------------------------------\n\nTITLE: Calling Other Commands from Console Command\nDESCRIPTION: Shows how to call other Artisan commands from within a console command using the call method with the command name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$this->call('october:migrate');\n```\n\n----------------------------------------\n\nTITLE: Truncating a Database Table\nDESCRIPTION: Demonstrates how to completely empty a table and reset auto-incrementing IDs to zero using the truncate method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Custom List Container View Override\nDESCRIPTION: Example of overriding the default list container view to add a sidebar layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($toolbar): ?>\n    <?= $toolbar->render() ?>\n<?php endif ?>\n\n<?php if ($filter): ?>\n    <?= $filter->render() ?>\n<?php endif ?>\n\n<div class=\"row row-flush\">\n    <div class=\"col-sm-3\">\n        [Insert sidebar here]\n    </div>\n    <div class=\"col-sm-9 list-with-sidebar\">\n        <?= $list->render() ?>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: PHP Scope Helper Class Implementation\nDESCRIPTION: PHP class definition for a scope helper that can be used to apply custom query constraints to an entries field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Classes;\n\nclass ScopeHelper\n{\n    public static function applyScope($query)\n    {\n        return $query->where('is_featured', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Column Name for Unique Rule in PHP\nDESCRIPTION: Shows how to specify a custom column name when using the unique validation rule.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address'\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering 404 Errors in Routes\nDESCRIPTION: Shows how to manually trigger a 404 error from a route using the App::abort helper function, which throws an HttpException with the specified status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(404);\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler String Response\nDESCRIPTION: Shows how returning a string from an AJAX handler adds the string to the response collection with 'result' key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function onDoSomething()\n{\n    return 'Hello World';\n    // ['result' => 'Hello World']\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Short Update Syntax for AJAX Partials in HTML\nDESCRIPTION: Shows how to use the short update syntax with data attributes to refresh an AJAX partial. It demonstrates updating the current partial and appending content using special symbols.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/ajax-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefresh\"\n    data-request-update=\"{ contact-form: true }\">\n    Refresh\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefresh\"\n    data-request-update=\"{ _self: true }\">\n    Refresh\n</button>\n```\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefresh\"\n    data-request-update=\"{ _self: '@' }\">\n    Append\n</button>\n```\n\n----------------------------------------\n\nTITLE: Creating Permanent Cookies in October CMS\nDESCRIPTION: How to create a persistent cookie that lasts indefinitely using the Cookie facade's forever method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$cookie = Cookie::forever('name', 'value');\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Global Validation Rules\nDESCRIPTION: Shows how to pass parameters to a globally registered validation rule. Parameters are separated by commas and appended to the rule name with a colon.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'name' => 'betwixt:1,6',\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Custom Attributes with Placeholders in Twig\nDESCRIPTION: Demonstrates how to use custom attributes like 'title' and 'type' with the {% placeholder %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering title=\"Ordering information\" type=\"text\" %}\n```\n\n----------------------------------------\n\nTITLE: Resizing Image Attachment in PHP\nDESCRIPTION: Shows how to resize an image attachment using the getThumb method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\necho $model->avatar->getThumb(100, 100, ['mode' => 'crop']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Validation Rules in PHP Models\nDESCRIPTION: Shows how to apply dynamic validation rules by overriding the beforeValidate method in an October CMS model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeValidate()\n{\n    if (!$this->is_remote) {\n        $this->rules['latitude'] = 'required';\n        $this->rules['longitude'] = 'required';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for AJAX Update Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to add an event listener for the 'ajax:update' event on a specific element. It logs a message to the console when the event is triggered.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#result').addEventListener('ajax:update', function() {\n    console.log('Updated!');\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for AJAX Update Event in JavaScript\nDESCRIPTION: This snippet demonstrates how to add an event listener for the 'ajax:update' event on a DOM element. It logs a message to the console when the event is triggered.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.querySelector('#result').addEventListener('ajax:update', function() {\n    console.log('Updated!');\n});\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Access in October CMS\nDESCRIPTION: Demonstrates how to access URL parameters from a page's PHP section using the param() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $postId = $this->param('post_id');\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Nested Field Selection in YAML\nDESCRIPTION: Example of accessing nested field values using array notation in form field definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\navatar[name]:\n    label: Avatar\n    comment: will be saved in the Avatar table\n```\n\n----------------------------------------\n\nTITLE: Defining Content Groups in Entry Blueprint\nDESCRIPTION: Creates a blog post blueprint with two content groups: regular posts and featured posts. Each group can have its own set of fields and is tracked via the content_group attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: stream\nname: Blog Post\n\ngroups:\n    regular_post:\n        name: Regular Post\n        fields:\n            # ...\n\n    featured_post:\n        name: Featured Post\n        fields:\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Loading Partials with Injected Assets in October CMS\nDESCRIPTION: Shows how to load a partial that has assets injected through the resources component. The assets are automatically added to the page when the partial is included.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Assets for the carousel are injected automatically -->\n{% partial 'blocks/carousel' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sluggable Trait in October CMS Model\nDESCRIPTION: Shows how to use the Sluggable trait to automatically generate URL-friendly slugs from model attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sluggable;\n\n    /**\n        * @var array Generate slugs for these attributes.\n        */\n    protected $slugs = ['slug' => 'name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown to HTML in PHP\nDESCRIPTION: This code demonstrates how to use the Markdown facade to convert Markdown syntax to HTML output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$html = Markdown::parse($markdown);\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Parameters in URLs for October CMS\nDESCRIPTION: Example of using a wildcard parameter that can match multiple URL segments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/:category*/:slug\"\n```\n\n----------------------------------------\n\nTITLE: Using Different Log Levels\nDESCRIPTION: Examples of using various logging levels (emergency, alert, critical, error, warning, notice, info, debug) with the Log facade in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nLog::emergency($error);\nLog::alert($error);\nLog::critical($error);\nLog::error($error);\nLog::warning($error);\nLog::notice($error);\nLog::info($error);\nLog::debug($error);\n```\n\n----------------------------------------\n\nTITLE: Adding Related Models Through Associations\nDESCRIPTION: This snippet demonstrates how to add a related model through an association method, automatically setting the foreign key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment(['message' => 'A new comment.']);\n\n$post = Post::find(1);\n\n$comment = $post->comments()->add($comment);\n```\n\n----------------------------------------\n\nTITLE: Using Validation Placeholders in PHP\nDESCRIPTION: Demonstrates the use of various placeholders in validation messages, including :attribute, :other, :size, :min, :max, and :values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'same' => 'The :attribute and :other must match.',\n    'size' => 'The :attribute must be exactly :size.',\n    'between' => 'The :attribute must be between :min - :max.',\n    'in' => 'The :attribute must be one of the following types: :values',\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Object Inspector Type\nDESCRIPTION: Example of setting default values for an object inspector type. The 'default' parameter should match the structure defined in 'properties'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-object.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'object',\n            'properties' => [/*...*/],\n            'default' => [\n                'streetAddress' => '321-210 Second ave',\n                'city' => 'Springfield',\n                'country' => 'us'\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NestedTree Trait in PHP for October CMS\nDESCRIPTION: PHP code snippet showing how to use the NestedTree trait in a model class. This trait is used when a fixed structure with parent-child relationships is needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/structures.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\NestedTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Related Models with saveMany() in OctoberCMS\nDESCRIPTION: Example showing how to save multiple related models at once. This creates and associates multiple comments with a post in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\\n\\n$post->comments()->saveMany([\\n    new Comment(['message' => 'A new comment.']),\\n    new Comment(['message' => 'Another comment.']),\\n]);\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Text with |trans_choice Filter in Twig\nDESCRIPTION: Illustrates the use of the |trans_choice filter for pluralizing text based on a count value in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/trans.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'There is one apple|There are many apples'|trans_choice(3) }}\n```\n\n----------------------------------------\n\nTITLE: Creating AJAX-Powered Modal Trigger Button in HTML\nDESCRIPTION: This code shows how to create a button that triggers both a Bootstrap modal and an AJAX request. The button uses data attributes to specify the AJAX handler and update target, linking the partial update to the modal content container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/modals.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    class=\"btn btn-primary\"\n    data-request=\"onAjax\"\n    data-request-update=\"{ 'my-modal-content': '#siteModalContent' }\"\n    data-bs-toggle=\"modal\"\n    data-bs-target=\"#siteModal\">\n    Launch demo modal\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Meta Description for SEO in Twig\nDESCRIPTION: Demonstrates using the meta_description field in a meta tag for SEO.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.page.meta_description }}\">\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Partial in Twig\nDESCRIPTION: Demonstrates how to render a basic CMS partial named 'footer.htm' using the {% partial %} tag in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"footer\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Plugin Publishing in October CMS\nDESCRIPTION: Minimum required JSON content for the composer.json file when publishing a plugin in October CMS. The package name must end with -plugin and include composer/installers as a dependency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/blog-plugin\",\n    \"type\": \"october-plugin\",\n    \"description\": \"Enter a meaningful description here\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Tables in List Query\nDESCRIPTION: Shows how to join additional tables to the list query to aid with searching and sorting by adding select statements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\npublic function listExtendQuery($query, $definition = null)\n{\n    $query->leftJoin('post_statuses', 'posts.status_id', 'post_statuses.id');\n\n    $query->addSelect(\n        'post_statuses.sort_order as status_sort_order',\n        'post_statuses.name as status_name'\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listener in Plugin Boot Method\nDESCRIPTION: Shows how to register an event listener in the boot method of a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    // ...\n\n    public function boot()\n    {\n        Event::listen(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Polymorphic Types in OctoberCMS\nDESCRIPTION: Demonstrates how to create a custom polymorphic type mapping using the Relation::morphMap method. This allows decoupling the database from the application's internal structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Relations\\Relation;\n\nRelation::morphMap([\n    'staff' => 'Acme\\Blog\\Models\\Staff',\n    'product' => 'Acme\\Blog\\Models\\Product',\n]);\n```\n\n----------------------------------------\n\nTITLE: Storing All Flash Messages in a Variable in October CMS\nDESCRIPTION: Shows how to store all flash messages in a Twig variable using the flash() function, allowing for custom manipulation before display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/flash.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set messages = flash() %}\n```\n\n----------------------------------------\n\nTITLE: Extending Form Fields Internally in PHP for October CMS\nDESCRIPTION: Demonstrates how to extend form fields from within a controller by overriding the formExtendFields method to add additional fields to a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    [...]\n\n    public function formExtendFields($form)\n    {\n        $form->addFields([...]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereNull Method in PHP\nDESCRIPTION: Demonstrates how to filter a collection to keep only items where a specified key's value is null.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk'],\n    ['name' => null],\n    ['name' => 'Bookcase'],\n]);\n\n$filtered = $collection->whereNull('name');\n\n$filtered->all();\n\n/*\n    [\n        ['name' => null],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Using tap() Method in PHP Collections\nDESCRIPTION: The tap method allows you to inspect the collection at a specific point in a method chain without affecting the collection itself. It's useful for debugging or logging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_62\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([2, 4, 3, 1, 5])\n    ->sort()\n    ->tap(function ($collection) {\n        Log::debug('Values after sorting', $collection->values()->toArray());\n    })\n    ->shift();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Dropdown Lists\nDESCRIPTION: Example demonstrating how to generate a select dropdown with option groups for better organization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('animal', [\n    'Cats' => ['leopard' => 'Leopard'],\n    'Dogs' => ['spaniel' => 'Spaniel'],\n]) ?>\n```\n\n----------------------------------------\n\nTITLE: Generating URL for Named Route in PHP\nDESCRIPTION: The route function generates a URL for the given named route. It can also handle routes with parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_39\n\nLANGUAGE: PHP\nCODE:\n```\n$url = route('routeName');\n\n$url = route('routeName', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Prepending and Appending to Files in October CMS\nDESCRIPTION: Examples of inserting content at the beginning or end of a file using the prepend and append methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nStorage::prepend('file.log', 'Prepended Text');\n\nStorage::append('file.log', 'Appended Text');\n```\n\n----------------------------------------\n\nTITLE: Using forPage Method in PHP Collections\nDESCRIPTION: The forPage method returns a new collection containing the items that would be present on a given page number based on a specified per-page count.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9])->forPage(2, 3);\n\n$collection->all();\n\n// [4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Attaching and Detaching Multiple Models in OctoberCMS\nDESCRIPTION: Example showing how to attach and detach multiple models at once. This demonstrates batch operations for many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\\n\\n$user->roles()->detach([1, 2, 3]);\\n\\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining Global Blueprint in YAML\nDESCRIPTION: Creates a global blueprint for footer configuration with a social media link field. Global blueprints define content available throughout the entire website.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Site\\Footer\ntype: global\nname: Footer Config\n\nfields:\n    facebook_link:\n        label: Facebook Link\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Locks for Pessimistic Locking in PHP\nDESCRIPTION: Shows how to use sharedLock to apply a 'shared lock' on selected rows, preventing modification until the transaction commits.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Updating HTTP Kernel\nDESCRIPTION: Updates the HTTP Kernel class to use October's Kernel implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n// File app/Http/Kernel.php\n\n// Replace\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\n// With\nuse October\\Rain\\Foundation\\Http\\Kernel as HttpKernel;\n```\n\n----------------------------------------\n\nTITLE: Responding to View Extension Events\nDESCRIPTION: Example of listening to a view extension event to inject custom HTML into a backend view, such as adding login options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.auth.extendSigninView', function ($controller, $firstParam) {\n    return '<a href=\"#\">Sign in with Google!</a>';\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Widget in YAML\nDESCRIPTION: This snippet demonstrates the configuration of a Sensitive widget in YAML. It shows options for controlling copy functionality and visibility behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\napi_secret:\n    type: sensitive\n    allowCopy: false\n    hideOnTabChange: true\n```\n\n----------------------------------------\n\nTITLE: Complex Unique Validation with Where Clauses\nDESCRIPTION: Demonstrates unique validation with additional where clauses for specific conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address,NULL,id,account_id,1'\n```\n\n----------------------------------------\n\nTITLE: Using a Variable for Partial Name in Twig\nDESCRIPTION: Illustrates how to use a variable to specify the name of the partial to be rendered.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set tabName = \"profile\" %}\n{% partial tabName %}\n```\n\n----------------------------------------\n\nTITLE: PHP View Template\nDESCRIPTION: Example of a PHP template view file with variable echo.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello, <?= $name ?></h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Aborting Request with Custom Message in PHP\nDESCRIPTION: Shows how to abort a request with a custom HTTP error code and message using the App::abort method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(403, 'Unauthorized action.');\n```\n\n----------------------------------------\n\nTITLE: Injecting Custom CSS Row Classes\nDESCRIPTION: Demonstrates how to inject custom CSS classes to list rows based on record data by implementing the listInjectRowClass method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nclass Lessons extends \\Backend\\Classes\\Controller\n{\n    // ...\n\n    public function listInjectRowClass($lesson, $definition = null)\n    {\n        // Strike through past lessons\n        if ($lesson->lesson_date->lt(Carbon::today())) {\n            return 'strike';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dynamic Unencrypted Cookies in Plugins for PHP\nDESCRIPTION: Shows how to dynamically add cookie names to the unencrypted cookies list from a plugin's boot method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::push('system.unencrypt_cookies', 'my_cookie');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox List Field in YAML for October CMS\nDESCRIPTION: Demonstrates the basic configuration of a checkbox list field with label, type, and options. The field is named 'permissions' and offers three checkbox options for account-related actions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkboxlist.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    options:\n        open_account: Open account\n        close_account: Close account\n        modify_account: Modify account\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Trait in PHP for October CMS\nDESCRIPTION: PHP code snippet showing how to use the Sortable trait in a model class. This trait is used when records need to be displayed in a specific order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/structures.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n}\n```\n\n----------------------------------------\n\nTITLE: Hours-Only Time Picker Configuration in YAML\nDESCRIPTION: Illustrates the configuration for a simplified time picker that only allows hour selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datepicker.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbirth_hour:\n    label: Hour Born\n    type: datepicker\n    mode: time\n    hoursOnly: true\n```\n\n----------------------------------------\n\nTITLE: Response with Custom Headers in Twig\nDESCRIPTION: Demonstrates returning a response with both a custom status code and custom HTTP headers passed as the third parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/response.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do response('Bad Request', 400, {'X-Failure-Reason': 'Not wearing shoes'}) %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tab Options in YAML\nDESCRIPTION: Shows how to set various options for tabs in a form, including stretch, default tab, active tab, icons, lazy loading, and CSS classes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntabs:\n    stretch: true\n    defaultTab: User\n    cssClass: text-blue\n    lazy:\n        - Groups\n    paneCssClass:\n        1: first-tab\n        2: second-tab\n    icons:\n        User: icon-user\n        Groups: icon-group\n\n    fields:\n        username:\n            type: text\n            label: Username\n            tab: User\n\n        groups:\n            type: relation\n            label: Groups\n            tab: Groups\n```\n\n----------------------------------------\n\nTITLE: Database Seeder Class Implementation\nDESCRIPTION: Example of a database seeder class that creates a new user using the User model with specified attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Users\\Updates;\n\nuse Seeder;\nuse Acme\\Users\\Models\\User;\n\nclass SeedUsersTable extends Seeder\n{\n    public function run()\n    {\n        $user = User::create([\n            'email'                 => 'user@example.com',\n            'login'                 => 'user',\n            'password'              => 'password123',\n            'password_confirmation' => 'password123',\n            'first_name'            => 'Actual',\n            'last_name'             => 'Person',\n            'is_activated'          => true\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Functions in Twig Templates\nDESCRIPTION: Demonstrates the basic syntax for calling functions in Twig templates, which execute logic and return results as variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ function() }}\n```\n\n----------------------------------------\n\nTITLE: Extending the List Model Query\nDESCRIPTION: Shows how to modify the database query used by the list by overriding the listExtendQuery method to include soft-deleted records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\npublic function listExtendQuery($query)\n{\n    $query->withTrashed();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hard-Coded Component Properties in INI\nDESCRIPTION: Example of setting up a hard-coded blog post ID in the component configuration within a page file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/hard-coded-page\"\n\n[blogPost]\nid = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Defining Component Properties in OctoberCMS\nDESCRIPTION: Illustrates how to define configurable properties for a component using the defineProperties method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'maxItems' => [\n            'title' => 'Max items',\n            'description' => 'The most amount of todo items allowed',\n            'default' => 10,\n            'type' => 'string',\n            'validationPattern' => '^[0-9]+$',\n            'validationMessage' => 'The Max Items property can contain only numeric symbols'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Storage Disks\nDESCRIPTION: Shows how to access specific disks when using multiple storage locations, such as accessing both S3 and local storage in the same code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$disk = Storage::disk('s3');\n\n$contents = Storage::disk('local')->get('file.jpg')\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Collections with unwrap() Static Method in PHP\nDESCRIPTION: The static unwrap() method returns the collection's underlying items from the given value when applicable. It can extract items from a collection, an array, or return a scalar value unchanged.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_73\n\nLANGUAGE: php\nCODE:\n```\nCollection::unwrap(collect('John Doe'));\n\n// ['John Doe']\n\nCollection::unwrap(['John Doe']);\n\n// ['John Doe']\n\nCollection::unwrap('John Doe');\n\n// 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Chaining Where Clauses with Or Conditions in PHP\nDESCRIPTION: Shows how to chain multiple where conditions using orWhere to create more complex queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->where('votes', '>', 100)\n    ->orWhere('name', 'John')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query String for Pagination\nDESCRIPTION: Examples showing how to use a custom query string parameter name for pagination instead of the default 'page' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$recordsPerPage = 15;\n\n$users = Db::table('users')->paginateCustom($recordsPerPage, 'secondPage');\n\n$users = Db::table('users')->simplePaginateCustom($recordsPerPage, 'secondPage');\n```\n\n----------------------------------------\n\nTITLE: Importing a Default Dashboard in October CMS\nDESCRIPTION: This code snippet demonstrates how to import a custom dashboard JSON file into October CMS using the Dashboard model's import function. It's typically used in a plugin's seeding process to create default dashboards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/dash-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Backend\\Models\\Dashboard;\n\n...\n\n$content = file_get_contents(__DIR__.'/default-dashboard.json');\nDashboard::import($content, null, true);\n```\n\n----------------------------------------\n\nTITLE: Creating New Item Button in HTML for October CMS\nDESCRIPTION: This HTML snippet demonstrates how to create a button that opens a popup form for creating a new item in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    data-control=\"popup\"\n    data-handler=\"onLoadPopupForm\"\n    class=\"btn btn-primary\">\n    New Item\n</button>\n```\n\n----------------------------------------\n\nTITLE: Partial with Configuration Section\nDESCRIPTION: Shows how to add a configuration section to a partial with a description parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ndescription = \"Demo partial\"\n==\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Loading Database Records for a Blog Page in October CMS\nDESCRIPTION: Example demonstrating how to load blog posts from the database and display them in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog\"\n==\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::orderBy('created_at', 'desc')->get();\n}\n==\n<h2>Latest posts</h2>\n<ul>\n    {% for post in posts %}\n        <h3>{{ post.title }}</h3>\n        {{ post.content }}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Attaching Models to Many-to-Many Relationships\nDESCRIPTION: This snippet demonstrates how to attach a model to a many-to-many relationship by inserting a record in the pivot table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->attach($roleId);\n```\n\n----------------------------------------\n\nTITLE: Extracting Values from Collection in PHP\nDESCRIPTION: The pluck method retrieves all values for a given key from the collection. It can also specify how the resulting collection should be keyed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product_id' => 'prod-100', 'name' => 'Chair'],\n    ['product_id' => 'prod-200', 'name' => 'Desk'],\n]);\n\n$plucked = $collection->pluck('name');\n\n$plucked->all();\n\n// ['Chair', 'Desk']\n\n$plucked = $collection->pluck('name', 'product_id');\n\n$plucked->all();\n\n// ['prod-100' => 'Desk', 'prod-200' => 'Chair']\n```\n\n----------------------------------------\n\nTITLE: Translating URL Parameters in PHP for October CMS\nDESCRIPTION: This PHP code demonstrates how to use the cms.sitePicker.overrideParams event to translate URL parameters for different sites, typically used in a CMS Component class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/sitepicker.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$myModel = MyModel::find(1);\n$otherModels = $myModel->newOtherSiteQuery()->get();\n\nEvent::listen('cms.sitePicker.overrideParams', function($page, $params, $currentSite, $proposedSite) use ($otherModels) {\n    $otherModel = $otherModels->where('site_id', $proposedSite->id)->first();\n    if ($otherModel) {\n        $params['id'] = $otherModel->id;\n        $params['slug'] = $otherModel->slug;\n        $params['fullslug'] = $otherModel->fullslug;\n    }\n    return $params;\n});\n```\n\n----------------------------------------\n\nTITLE: Translating Language Lines in PHP\nDESCRIPTION: The trans function translates the given language line using your localization files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_27\n\nLANGUAGE: PHP\nCODE:\n```\necho trans('validation.required');\n```\n\n----------------------------------------\n\nTITLE: Replacing Current URL in Navigation History\nDESCRIPTION: This code shows how to navigate to a new URL without adding it to the browser's navigation history, similar to window.history.replaceState.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\noc.visit(location, { action: 'replace' });\n```\n\n----------------------------------------\n\nTITLE: Selectively Flashing Input Values\nDESCRIPTION: Shows how to flash only specific input values or exclude certain values when flashing to the session.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nInput::flashOnly('username', 'email');\n\nInput::flashExcept('password');\n```\n\n----------------------------------------\n\nTITLE: Traffic Sources Widget Partial HTML Template\nDESCRIPTION: HTML markup for a traffic sources widget showing a pie chart with traffic data visualization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/report-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Traffic sources</h3>\n\n    <div\n        class=\"control-chart\"\n        data-control=\"chart-pie\"\n        data-size=\"200\"\n        data-center-text=\"180\">\n        <ul>\n            <li>Direct <span>1000</span></li>\n            <li>Social networks <span>800</span></li>\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Flashing Input with Redirects\nDESCRIPTION: Demonstrates how to combine flashing input with redirects, which is common after form validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('form')->withInput();\n\nreturn Redirect::to('form')->withInput(Input::except('password'));\n```\n\n----------------------------------------\n\nTITLE: Running Queue Worker with Retry Limit in October CMS\nDESCRIPTION: Artisan command to start a queue worker with a specified number of retry attempts. This command runs the queue worker for a specific connection and sets the maximum number of job retry attempts to 3.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work connection-name --tries=3\n```\n\n----------------------------------------\n\nTITLE: Field Definitions in Tabs\nDESCRIPTION: Shows how to organize form fields into tabs, making forms more organized and manageable for complex data structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntabs:\n    fields:\n        username:\n            type: text\n            label: Username\n            tab: User\n\n        groups:\n            type: relation\n            label: Groups\n            tab: Groups\n```\n\n----------------------------------------\n\nTITLE: Debugging Query Building with dd and dump Methods in PHP\nDESCRIPTION: Demonstrates how to debug database queries using the dd and dump methods to display query bindings and SQL during query construction.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\n\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: Building Arrays with Twig Merge Filter\nDESCRIPTION: Traditional approach to building arrays in Twig using the |merge filter. This demonstrates the verbose process that the collect() function aims to simplify.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = [] %}\n{% for item in items %}\n    {% set array = array|merge([{ title: item.title, ... }]) %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Preventing Partial Updates with Event Handler\nDESCRIPTION: Shows how to prevent the default behavior of updating partials as part of an AJAX response by calling preventDefault() on the event object in a JavaScript event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('app:stale-document', function (event) {\n    event.preventDefault();\n});\n```\n\n----------------------------------------\n\nTITLE: Using the replaceRecursive() Method in PHP Collections\nDESCRIPTION: The replaceRecursive method works like replace(), but recursively applies the same replacement process to nested arrays. This allows deep replacement of values in multidimensional arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['George', 'Scott', ['James', 'Victoria', 'Finn']]);\n\n$replaced = $collection->replaceRecursive(['Charlie', 2 => [1 => 'King']]);\n\n$replaced->all();\n\n// ['Charlie', 'Scott', ['James', 'King', 'Finn']]\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Image Resizing\nDESCRIPTION: Demonstrates how to resize an image using the PHP ResizeImages class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nResizeImages::resize('path/to/asset.jpg');\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Errors with Attributes API\nDESCRIPTION: Shows how to handle AJAX errors using the data attributes API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onHandleForm\" data-request-error=\"console.log(data)\">\n```\n\n----------------------------------------\n\nTITLE: Injecting Content into Extended Views (PHP)\nDESCRIPTION: Example of how to listen for a view extension event and return HTML markup to be injected into the extended view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.auth.extendSigninView', function ($controller, $firstParam) {\n    return '<a href=\"#\">Sign in with Google!</a>';\n});\n```\n\n----------------------------------------\n\nTITLE: Joining Collection Values with join() Method in PHP\nDESCRIPTION: The join method concatenates collection values with a specified delimiter and optional final delimiter for the last item. This provides flexible string formatting options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nnew Collection(['a', 'b', 'c'])->join(', '); // 'a, b, c'\nnew Collection(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\nnew Collection(['a', 'b'])->join(', ', ' and '); // 'a and b'\nnew Collection(['a'])->join(', ', ' and '); // 'a'\nnew Collection([])->join(', ', ' and '); // ''\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar with HTML Attributes\nDESCRIPTION: Shows how to disable the default AJAX progress bar for a specific request by setting the data-request-progress-bar attribute to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onDoSomething\"\n    data-request-progress-bar=\"false\">\n    Do something\n</button>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom CSS Properties\nDESCRIPTION: Example of using a custom CSS property defined from theme data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_7\n\nLANGUAGE: css\nCODE:\n```\na {\n    color: var(--my-color);\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with Advanced Options in Twig\nDESCRIPTION: Shows how to use data and confirmation options with the form_ajax() helper for more complex AJAX functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_ajax('onDelete', { data: { id: 2 }, confirm: 'Really delete this record?' }) }}\n\n{{ form_ajax('onRefresh', { update: { statistics: '#statsPanel' } }) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Finder Settings in Blueprint\nDESCRIPTION: Defines custom replacement mappings for URL parameters in the page finder. This example maps author and category URL parameters to their corresponding fields in the entry.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npagefinder:\n    replacements:\n        author: author.slug\n        category: categories.0.slug\n```\n\n----------------------------------------\n\nTITLE: Outputting Error Message to Console\nDESCRIPTION: Shows how to output an error message to the console using the error method. This displays text with appropriate ANSI colors for errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$this->error('Something went wrong!');\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Flash Message During Request\nDESCRIPTION: Demonstrates how to show a loading message while an AJAX request is processing using the data-request-message attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onSubmit\"\n    data-request-message=\"Please wait while we process your request...\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: String Case Transformation Functions\nDESCRIPTION: Functions for changing character case in strings, including uppercase, lowercase, and first character case changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/str.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\nHello I'm {{ 'Jack'|str_upper }}\nHello I'm {{ 'JACK'|str_lower }}\nHello I'm {{ 'jack'|str_ucfirst }}\nHello I'm {{ 'Jack'|str_lcfirst }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Parameter Access with Variable Names\nDESCRIPTION: Shows how to access URL parameters using array syntax when the parameter name is stored in a variable. Uses a dynamic post_id parameter in the URL pattern.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-param.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/account/:post_id\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set name = 'post_id' %}\n\n<p>The post ID is: {{ this.param[name] }}</p>\n```\n\n----------------------------------------\n\nTITLE: Safe Markdown Processing with md_safe Filter\nDESCRIPTION: Shows how the |md_safe filter escapes HTML and prevents JavaScript execution for security purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/md.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<a href=\"javascript:alert(1)\">click me</a>'|md_safe }}\n```\n\n----------------------------------------\n\nTITLE: Simplified Input Preset Configuration in YAML\nDESCRIPTION: Shows a simplified way to configure an input preset converter using just the field name. In this case, the type defaults to 'slug'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nslug:\n    label: Slug\n    preset: title\n```\n\n----------------------------------------\n\nTITLE: Converting Collections to Arrays in PHP\nDESCRIPTION: Shows how to convert a collection of models to an array using the toArray method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\nreturn $users->toArray();\n```\n\n----------------------------------------\n\nTITLE: Rendering Non-hideable Hint Partial\nDESCRIPTION: Example of creating a permanent hint panel that cannot be hidden by passing null as the key parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->makeHintPartial(null, 'my_hint_partial') ?>\n```\n\n----------------------------------------\n\nTITLE: Including a Mixin Field with Handle in YAML\nDESCRIPTION: Shows how to include a mixin field using a blueprint handle as the source. This example references a location fields mixin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-mixin.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_location_fields:\n    type: mixin\n    source: Fields\\Location\n```\n\n----------------------------------------\n\nTITLE: Using first Method in PHP Collections\nDESCRIPTION: The first method returns the first element in the collection that passes a given truth test, or just the first element if no callback is provided.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4])->first(function ($value, $key) {\n    return $value > 2;\n});\n\n// 3\n\nnew Collection([1, 2, 3, 4])->first();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Configuration in Twig Template\nDESCRIPTION: Shows how to access theme configuration values from the theme.yaml file using the this.theme.config property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.theme.config.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Theme Sync to Database Target\nDESCRIPTION: Command to sync theme changes from filesystem to database, useful after changing theme files that need to be applied to the site.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:sync --target=database\n```\n\n----------------------------------------\n\nTITLE: Extending Form Fields Internally in PHP for October CMS\nDESCRIPTION: This PHP code snippet shows how to extend form fields internally by overriding the formExtendFields method within an October CMS controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class\n    ];\n\n    public function formExtendFields($form)\n    {\n        $form->addFields([...]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Base Test Case for Plugin Dependencies in PHP\nDESCRIPTION: This PHP class creates a base test case that registers and boots all plugins, allowing for testing with plugin dependencies. It extends PluginTestCase and overrides setUp and tearDown methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/unit-testing.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse System\\Classes\\PluginManager;\n\nclass BaseTestCase extends PluginTestCase\n{\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        // Get the plugin manager\n        $pluginManager = PluginManager::instance();\n\n        // Register the plugins to make features like file configuration available\n        $pluginManager->registerAll(true);\n\n        // Boot all the plugins to test with dependencies of this plugin\n        $pluginManager->bootAll(true);\n    }\n\n    public function tearDown(): void\n    {\n        parent::tearDown();\n\n        // Get the plugin manager\n        $pluginManager = PluginManager::instance();\n\n        // Ensure that plugins are registered again for the next test\n        $pluginManager->unregisterAll();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Sites in PHP\nDESCRIPTION: Shows how to list all sites, including disabled ones, using the listSites method which returns a collection of site objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$sites = Site::listSites();\n```\n\n----------------------------------------\n\nTITLE: Pluralization in JSON Localization Files\nDESCRIPTION: Shows how to define pluralized strings in JSON localization files using the | character and complex pluralization rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"There is one apple|There are many apples\": \"Il y a une pomme|Il y a beaucoup de pommes\",\n    \"{0} There are none|[1,19] There are some|[20,*] There are many\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uploads Path in PHP\nDESCRIPTION: The uploads_path function returns the fully qualified path to the application uploads directory. It can also generate a path to a specific file within the uploads directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n$path = uploads_path();\n\n$path = uploads_path('public/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component in Twig Template\nDESCRIPTION: Shows how to render a component named 'demoTodo' in a Twig template using the component tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Widget Properties in YAML\nDESCRIPTION: This YAML snippet shows how to set properties for a form widget in the form field definition. It sets the label, type, mode, minDate, and maxDate for a datepicker widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nborn_at:\n    label: Date of Birth\n    type: datepicker\n    mode: date\n    minDate: 1984-04-12\n    maxDate: 2014-04-23\n```\n\n----------------------------------------\n\nTITLE: Overriding Localization Strings in JSON\nDESCRIPTION: Shows how to override existing localization strings by creating a custom JSON file in the app/lang directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"Coding is the best!\",\n    \"rainlab.blog::lang.post_label\": \"Article\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Methods\nDESCRIPTION: Example showing how to add methods dynamically to an extendable object using addDynamicMethod.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicProperty('tagsCache', null);\n\n    $model->addDynamicMethod('getTagsAttribute', function() use ($model) {\n        if ($this->tagsCache) {\n            return $this->tagsCache;\n        } else {\n            return $this->tagsCache = $model->tags()->lists('name');\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Roles Relation in YAML\nDESCRIPTION: Configuration example for managing user roles using Belongs To Many relationship type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n        toolbarButtons: add|remove\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Using array_dot Helper Function in PHP\nDESCRIPTION: The array_dot function flattens a multi-dimensional array into a single level array using dot notation to represent nested elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$array = array_dot(['foo' => ['bar' => 'baz']]);\n\n// ['foo.bar' => 'baz'];\n```\n\n----------------------------------------\n\nTITLE: Defining File Attachment Relationship in PHP Model\nDESCRIPTION: Demonstrates how to define a file attachment relationship in a PHP model for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $attachOne = [\n        'featured_image' => 'System\\Models\\File'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Functions in Twig Templates\nDESCRIPTION: Functions execute logic and return results that can be used as variables in the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ function() }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Contents in October CMS\nDESCRIPTION: Example of retrieving the contents of a file using the get method. This returns the raw string contents of the file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = Storage::get('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Specifying Visible Attributes in JSON Serialization in PHP\nDESCRIPTION: Demonstrates how to define a whitelist of attributes that should be included in serialization using the $visible property in the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Integer Validation with Range Constraints\nDESCRIPTION: Shows how to implement integer validation with minimum and maximum value constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector-types.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'numOfColumns' => [\n            'title' => 'Number of Columns',\n            'type' => 'string',\n            'validation' => [\n                'integer' => [\n                    'message' => 'The Number of Columns field should contain an integer value',\n                    'allowNegative' => true,\n                    'min' => [\n                        'value' => -10,\n                        'message' => 'The number of columns should not be less than -10.'\n                    ],\n                    'max' => [\n                        'value' => 10,\n                        'message' => 'The number of columns should not be greater than 10.'\n                    ]\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Default Values Configuration in Group Filter\nDESCRIPTION: Shows how to set default selected values in a group filter using an array of keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    # ...\n    default:\n        - developer\n        - publisher\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Error Message for a Field in PHP\nDESCRIPTION: Demonstrates how to get only the first error message for a specific field from a MessageBag instance. This is useful when you only need to display one error at a time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\necho $messages->first('email');\n```\n\n----------------------------------------\n\nTITLE: Record Finder Field Configuration in YAML\nDESCRIPTION: YAML configuration for a record finder widget that displays related record details with search popup functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    list: $/rainlab/user/models/user/columns.yaml\n    prompt: Click the %s button to find a user\n    nameFrom: name\n    descriptionFrom: email\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to a Partial with Component in October CMS\nDESCRIPTION: This code shows how to call a partial and pass parameters that will be used by components within that partial. The 'maxItems' parameter is passed with a value of 10.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'my-todo-partial' maxItems='10' %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key-Value Pairs with Pluck Method\nDESCRIPTION: Demonstrates how to retrieve key-value pairs from the database using the pluck method with both column and key parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$roles = Db::table('roles')->pluck('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Metrics in Data Source\nDESCRIPTION: Shows how to register metrics in a data source constructor. The example registers two metrics for tracking sales data with SUM aggregation function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nconst METRIC_TOTAL_AMOUNT = 'total_amount';\nconst METRIC_TOTAL_QUANTITY = 'total_quantity';\n\npublic function __construct()\n{\n    ...\n\n    $this->registerMetric(new ReportMetric(\n        self::METRIC_TOTAL_AMOUNT,\n        'acme_shop_sales.total',\n        'Total amount',\n        ReportMetric::AGGREGATE_SUM\n    ));\n\n    $this->registerMetric(new ReportMetric(\n        self::METRIC_TOTAL_QUANTITY,\n        'acme_shop_sales.quantity',\n        'Quantity',\n        ReportMetric::AGGREGATE_SUM\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Relation Unbinding in PHP\nDESCRIPTION: Demonstrates how to defer unbinding a comment from a post until the post is saved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n$post = Post::find(1);\n$post->comments()->remove($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Date Picker with Disabled Days Configuration in YAML\nDESCRIPTION: Illustrates how to disable specific days in the date picker, including weekends and a particular date. This is useful for booking systems or scheduling applications.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datepicker.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbooking_date:\n    label: Booking Date\n    type: datepicker\n    mode: date\n    disableDays:\n        - 0 # Sundays\n        - 6 # Saturdays\n        - \"2023-08-10\" # Specific date\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs To Relation in OctoberCMS YAML\nDESCRIPTION: Example YAML configuration for a Belongs To relation between Phone and Person. It defines view and management options for the relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config_relation.yaml\nperson:\n    label: Person\n    view:\n        form: $/acme/user/models/person/fields.yaml\n        toolbarButtons: link|unlink\n    manage:\n        form: $/acme/user/models/person/fields.yaml\n        list: $/acme/user/models/person/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Method Existence in October CMS\nDESCRIPTION: Example of how to check if a method exists in an extendable class using the methodExists method, which works for both standard and dynamic methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicMethod('getTagsAttribute', function () use ($model) {\n        return $this->tagsCache;\n    });\n});\n\n$post = new Post;\n\n$post->methodExists('getTagsAttribute'); // true\n$post->methodExists('missingMethod'); // false\n```\n\n----------------------------------------\n\nTITLE: Creating Toolbar Buttons in PHP Partial\nDESCRIPTION: Example of a toolbar partial with a 'New Post' button, typically used in conjunction with the List Behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<div data-control=\"toolbar\">\n    <a href=\"<?= Backend::url('acme/blog/posts/create') ?>\"\n        class=\"btn btn-primary oc-icon-plus\">\n        New Post\n    </a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Injection in October CMS\nDESCRIPTION: Shows how to inject variables into the Twig environment using the onStart lifecycle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Components at Render Time\nDESCRIPTION: This snippet demonstrates how to pass variables to a component at the time it is rendered, overriding its properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' maxItems='7' %}\n```\n\n----------------------------------------\n\nTITLE: Using base_path Helper Function in PHP\nDESCRIPTION: The base_path function returns the fully qualified path to the project root. It can also generate paths to files relative to the project root directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$path = base_path();\n\n$path = base_path('vendor/bin');\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Dropdown Properties in OctoberCMS Components\nDESCRIPTION: Demonstrates how to create dynamic dropdown properties for components with dependencies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title' => 'Country',\n            'type' => 'dropdown',\n            'default' => 'us'\n        ],\n        'state' => [\n            'title' => 'State',\n            'type' => 'dropdown',\n            'default' => 'dc',\n            'depends' => ['country'],\n            'placeholder' => 'Select a state'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Manager Options in OctoberCMS\nDESCRIPTION: This PHP snippet demonstrates how to configure additional options for the Media Manager in OctoberCMS. It includes settings for ignored files, cache TTL, and file extensions for different media types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n'storage' => [\n    // ...\n\n    'media' => [\n        // ...\n        'ignore' => ['.svn', '.git', '.DS_Store']\n    ]\n],\n```\n\n----------------------------------------\n\nTITLE: Displaying Field-Specific Validation Messages in HTML\nDESCRIPTION: Shows how to display validation messages for individual form fields using the data-validate-for attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- Input field -->\n<input name=\"phone\" />\n\n<!-- Validation message for the field -->\n<div data-validate-for=\"phone\"></div>\n```\n\n----------------------------------------\n\nTITLE: Returning Structured Data from AJAX Handlers\nDESCRIPTION: Shows how to return structured data from an AJAX handler that can be consumed by JavaScript. The handler returns an array that will be converted to JSON for client-side use.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onFetchDataFromServer()\n{\n    // Some server-side code\n\n    return [\n        'totalUsers' => 1000,\n        'totalProjects' => 937\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Radio List with Descriptions in YAML\nDESCRIPTION: Advanced radio list configuration that includes both option labels and descriptions. Each option provides an array containing the label and a descriptive text explaining the option's purpose.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-radio.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    options:\n        all: [All, Guests and customers will be able to access this page.]\n        registered: [Registered only, Only logged in member will be able to access this page.]\n        guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in PHP\nDESCRIPTION: This snippet demonstrates how to use the Config class to access configuration values defined in a plugin's configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$maxItems = Config::get('acme.demo::maxItems', 50);\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Locks for Pessimistic Locking\nDESCRIPTION: Shows how to use shared locks in database queries to prevent selected rows from being modified until the transaction commits.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->sharedLock()->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in October CMS\nDESCRIPTION: This code snippet shows how to configure the debug mode in the app.php configuration file. When set to true, detailed error messages with stack traces will be displayed, while false shows a generic error page in production.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/errors-logging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Application Debug Mode\n|--------------------------------------------------------------------------\n|\n| When your application is in debug mode, detailed error messages with\n| stack traces will be shown on every error that occurs within your\n| application. If disabled, a simple generic error page is shown.\n|\n*/\n\n'debug' => false,\n```\n\n----------------------------------------\n\nTITLE: Equivalent Implementation of Soft Definition in PHP\nDESCRIPTION: This snippet shows the equivalent implementation of soft definition without using the '@' symbol. It checks if the class exists before implementing it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [];\n\n    public function __construct()\n    {\n        if (class_exists('RainLab\\Translate\\Behaviors\\TranslatableModel')) {\n            $this->implement[] = 'RainLab.Translate.Behaviors.TranslatableModel';\n        }\n\n        parent::__construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Reference in AJAX Form\nDESCRIPTION: Shows how to reference a component's alias in form_ajax() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set targetPartial = \"'\" ~ __SELF__ ~ \"::statistics': '#statsPanel'\" %}\n{{ form_ajax('onUpdate', { update: targetPartial }) }}\n```\n\n----------------------------------------\n\nTITLE: Custom Field Type Definition in YAML\nDESCRIPTION: YAML configuration for a custom content field type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmyfield:\n    label: My Field\n    type: mycontentfield\n```\n\n----------------------------------------\n\nTITLE: Using Parameters in Relation Conditions in YAML\nDESCRIPTION: Shows how to use simple parameters parsed from parent model attributes in relation conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: relation\n\nstate:\n    label: State\n    type: relation\n    dependsOn: country\n    conditions: custom_country_id = :country_id\n```\n\n----------------------------------------\n\nTITLE: Managing Task Output in OctoberCMS Scheduler\nDESCRIPTION: Examples of handling task output by saving it to a file and emailing it. The sendOutputTo method writes output to a file, while emailOutputTo sends the output to a specified email address.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('emails:send')\n         ->daily()\n         ->sendOutputTo($filePath);\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('foo')\n         ->daily()\n         ->sendOutputTo($filePath)\n         ->emailOutputTo('foo@example.com');\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Attribute Names\nDESCRIPTION: PHP code demonstrating how to customize attribute names in validation error messages while keeping the default message format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$attributeNames = [\n    'email' => 'e-mail address'\n];\n\n$data = Request::validate($rules, [], $attributeNames);\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Properties\nDESCRIPTION: PHP code showing how to define customizable properties for a report widget using the defineProperties method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'title' => [\n            'title' => 'Widget title',\n            'default' => 'Top Pages',\n            'type' => 'string',\n            'validationPattern' => '^.+$',\n            'validationMessage' => 'The Widget Title is required.'\n        ],\n        'days' => [\n            'title' => 'Number of days to display data for',\n            'default' => '7',\n            'type' => 'string',\n            'validationPattern' => '^[0-9]+$'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Repeater in October CMS\nDESCRIPTION: Demonstrates how to create a repeating section with other fields inside and how to render it in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{repeater name=\"content_sections\" prompt=\"Add another content section\"}\n    <h2>{text name=\"title\" label=\"Title\"}Title{/text}</h2>\n    <p>{textarea name=\"content\" label=\"Content\"}Content{/textarea}</p>\n{/repeater}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for fields in repeater %}\n    <h2>{{ fields.title }}</h2>\n    <p>{{ fields.content|raw }}</p>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-language Support for Validation Messages\nDESCRIPTION: Demonstrates how to implement multi-language support for validation error messages using event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Event::listen('translator.beforeResolve', function ($key, $replaces, $locale) {\n        if ($key === 'validation.uppercase') {\n            return Lang::get('plugin.name::lang.validation.uppercase');\n        }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Collection is Empty with isEmpty() in PHP\nDESCRIPTION: The isEmpty method returns true if the collection has no items; otherwise, it returns false. This is useful for conditional logic based on collection contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([])->isEmpty();\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Field Implementation in YAML\nDESCRIPTION: Basic implementation of a textarea field for blog contents with required type and label properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-textarea.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblog_contents:\n    type: textarea\n    label: Contents\n```\n\n----------------------------------------\n\nTITLE: Response Macro Definition\nDESCRIPTION: Demonstrates how to define and use custom response macros.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nResponse::macro('caps', function($value) {\n    return Response::make(strtoupper($value));\n});\n\nreturn Response::caps('foo');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Messages for Array Validation in PHP\nDESCRIPTION: Illustrates how to set custom error messages for array-based validation rules in an October CMS model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $rules = [\n        'links.*.url' => 'required|url',\n        'links.*.anchor' => 'required'\n    ];\n\n    public $customMessages = [\n        'links.*.url.required' => 'The url is required',\n        'links.*.url.*' => 'The url needs to be a valid url'\n        'links.*.anchor.required' => 'The anchor text is required',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Error Messages for All Fields in PHP\nDESCRIPTION: Demonstrates how to retrieve all validation error messages across all fields. This returns a flat array of all messages regardless of which field they belong to.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nforeach ($messages->all() as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Backend User by Login\nDESCRIPTION: Demonstrates how to look up a backend user by their login name using the BackendAuth facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/users.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = BackendAuth::findUserByLogin('someuser');\n```\n\n----------------------------------------\n\nTITLE: File-based Configuration in PHP\nDESCRIPTION: This code snippet shows an example of a file-based configuration file for a plugin. It defines and returns an array of configuration values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => 10,\n    'display' => 5\n];\n```\n\n----------------------------------------\n\nTITLE: Creating View Response in PHP\nDESCRIPTION: Demonstrates how to return a view as a response while still having access to Response class methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::view('acme.blog::hello')->header('Content-Type', $type);\n```\n\n----------------------------------------\n\nTITLE: Component Snippet Registration in PHP\nDESCRIPTION: Shows how to register a component as a snippet in a plugin registration file\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/snippets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPageSnippets()\n{\n    return [\n        \\RainLab\\Weather\\Components\\Weather::class => 'weather'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Opening a Basic Form\nDESCRIPTION: Demonstrates how to open a basic form using the Form::open method with URL parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['url' => 'foo/bar']) ?>\n    //\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Slicing Collection in PHP\nDESCRIPTION: Demonstrates the usage of the slice() method to return a slice of the collection starting at a given index, with an optional limit on the size of the returned slice.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$slice = $collection->slice(4);\n\n$slice->all();\n\n// [5, 6, 7, 8, 9, 10]\n\n$slice = $collection->slice(4, 2);\n\n$slice->all();\n\n// [5, 6]\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Strings in PHP for OctoberCMS Plugins\nDESCRIPTION: Example of a lang.php file that defines localization strings in an array structure for OctoberCMS plugins. The file returns an array of nested strings that can be accessed via the Lang class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/localization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'app' => [\n        'name' => 'October CMS',\n        'tagline' => 'Getting Back to Basics'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Content Fields in YAML for October CMS Tailor Module\nDESCRIPTION: A basic example of defining content fields with a text field type in a Tailor blueprint. This shows the minimal configuration needed to create a field with a label and type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    name:\n        label: Full Name\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Checking PJAX Requests in Twig\nDESCRIPTION: Illustrates how to determine if the current request was made using the Turbo Router (PJAX) by checking this.request.pjax property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-request.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.request.pjax %}\n    Page was loaded via PJAX\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lighttpd for October CMS\nDESCRIPTION: This snippet shows the Lighttpd configuration for October CMS, including URL rewrite rules for handling assets and routing requests to index.php.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: lighttpd\nCODE:\n```\n$HTTP[\"host\"] =~ \"domain.example.com\" {\n    server.document-root = \"/var/www/example/\"\n\n    url.rewrite-once = (\n        \"^/(plugins|modules/(system|backend|cms))/(([\\w-]+/)+|/|)assets/([\\w-]+/)+[-\\w^&'@{}[\\],$=!#().%+~/ ]+\\.(jpg|jpeg|gif|png|svg|swf|avi|mpg|mpeg|mp3|flv|ico|css|js|woff|ttf)(\\?.*|)$\" => \"$0\",\n        \"^/(system|themes/[\\w-]+)/assets/([\\w-]+/)+[-\\w^&'@{}[\\],$=!#().%+~/ ]+\\.(jpg|jpeg|gif|png|svg|swf|avi|mpg|mpeg|mp3|flv|ico|css|js|woff|ttf)(\\?.*|)$\" => \"$0\",\n        \"^/storage/app/uploads/public/[\\w-]+/.*$\" => \"$0\",\n        \"^/storage/app/media/.*$\" => \"$0\",\n        \"^/storage/app/resized/.*$\" => \"$0\",\n        \"^/storage/temp/public/[\\w-]+/.*$\" => \"$0\",\n        \"^/(favicon\\.ico)$\" => \"$0\",\n        \"(.*)\" => \"/index.php$1\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Deferred Bindings in PHP\nDESCRIPTION: Demonstrates how to cancel all deferred bindings to prevent orphaned objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$post->cancelDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Registering Request Events in PHP\nDESCRIPTION: Demonstrates how to register callbacks to be executed before and after a request is routed in the application lifecycle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::before(function ($request) {\n    // Code to execute before the request is routed\n});\n\nApp::after(function ($request) {\n    // Code to execute after the request is routed\n});\n```\n\n----------------------------------------\n\nTITLE: Firing Both Local and Global Events\nDESCRIPTION: Best practice for firing both local and global events in sequence, passing the object instance to the global event for context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->fireEvent('post.beforePost', [$firstParam, $secondParam]);\nEvent::fire('rainlab.blog.beforePost', [$this, $firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Checking Session Item Existence in PHP\nDESCRIPTION: Shows how to check if an item exists in the session using the has method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Session::has('users')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Mail SendTo Method Signature\nDESCRIPTION: Complete signature of the sendTo method showing all available parameters including recipient, message, params, callback and options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nMail::sendTo($recipient, $message, $params, $callback, $options);\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Special Loop Variable\nDESCRIPTION: Shows how to access and use the special loop variable within a Twig for loop to get iteration information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users %}\n    {{ loop.index }} - {{ user.username }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Extending Media Manager with Event Facade\nDESCRIPTION: Example of how to listen globally to Media Manager events via the Event facade, using the media.file.rename event to update custom references to a path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('media.file.rename', function($widget, $originalPath, $newPath) {\n    // Update custom references to path here\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a File Upload Widget for Avatar Images in OctoberCMS\nDESCRIPTION: This YAML configuration sets up a file upload field for an avatar image with specific dimensions. It includes a label and restricts the uploader to image files with a fixed display size of 260x260 pixels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-fileupload.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: fileupload\n    mode: image\n    imageHeight: 260\n    imageWidth: 260\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers and Server Variables in October CMS\nDESCRIPTION: How to retrieve HTTP headers and $_SERVER variables from the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::header('Content-Type');\n\n$value = Request::server('PATH_INFO');\n```\n\n----------------------------------------\n\nTITLE: External URL Redirect in Twig\nDESCRIPTION: Demonstrates redirecting to an external URL using the redirect() function. This example redirects to the October CMS website.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/redirect.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('https://octobercms.com') %}\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Scope Manipulation in PHP\nDESCRIPTION: Example of customizing filter scope visibility using the filterScopes method in a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filters.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function filterScopes($scopes, $context = null)\n{\n    if ($scopes->disable_roles->value) {\n        $scopes->roles->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional 404 Abort in Twig\nDESCRIPTION: Demonstrates how to conditionally abort a request with a 404 status code when a record is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/abort.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if record.notFound %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Site by Locale in PHP\nDESCRIPTION: Demonstrates how to look up a site using its locale code with the getSiteForLocale method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$frenchSite = Site::getSiteForLocale('fr');\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering a Channel Component in October CMS\nDESCRIPTION: This code demonstrates how to initialize a 'channel' component in a page configuration and render it. This example is used to show how component partials can be overridden.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"mypage\"\n\n[channel]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"channel\" %}\n```\n\n----------------------------------------\n\nTITLE: Plugin Boot Method Example in PHP\nDESCRIPTION: Demonstrates using the boot method to extend models in an October CMS plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    User::extend(function($model) {\n        $model->hasOne['author'] = \\Acme\\Blog\\Models\\Author::class;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic One-to-One Relationships in OctoberCMS Models (PHP)\nDESCRIPTION: Shows how to define polymorphic one-to-one relationships in OctoberCMS models. The example demonstrates a Photo model that can belong to either a Staff or Product model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass Photo extends Model\n{\n    public $morphTo = [\n        'imageable' => []\n    ];\n}\n\nclass Staff extends Model\n{\n    public $morphOne = [\n        'photo' => [\\Acme\\Blog\\Models\\Photo::class, 'name' => 'imageable']\n    ];\n}\n\nclass Product extends Model\n{\n    public $morphOne = [\n        'photo' => [\\Acme\\Blog\\Models\\Photo::class, 'name' => 'imageable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Model Query in PHP\nDESCRIPTION: This PHP code demonstrates how to extend the lookup query for the list database model by overriding the listExtendQuery method in the controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic function listExtendQuery($query)\n{\n    $query->withTrashed();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Model Scope Implementation in PHP\nDESCRIPTION: Provides an example of implementing a custom model scope in PHP. This method, 'scopeTextFilter', handles both 'equals' and 'contains' conditions for filtering username fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-text.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction scopeTextFilter($query, $scope)\n{\n    if ($scope->condition === 'equals') {\n        $query->where('username', $scope->value);\n    }\n    else {\n        $query->where('username', 'LIKE', \"%{$scope->value}%\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connect and Disconnect Methods\nDESCRIPTION: Shows how to implement the connect and disconnect lifecycle methods that are triggered when a control is added to or removed from the DOM.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    connect() {\n        // Element has appeared in DOM\n    }\n\n    disconnect() {\n        // Element was removed from DOM\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Global Context in PHP\nDESCRIPTION: Example of checking if the global state is currently activated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$global = Site::hasGlobalContext();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Column Selection in YAML\nDESCRIPTION: Shows how to retrieve a column value from a nested data structure in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncontent[title]:\n    name: Title\n    sortable: false\n```\n\n----------------------------------------\n\nTITLE: Lighttpd Configuration for October CMS\nDESCRIPTION: Lighttpd server configuration for running October CMS, including URL rewriting rules for static assets and ensuring proper routing of requests to the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n$HTTP[\"host\"] =~ \"domain.example.tld\" {\n    server.document-root = \"/var/www/example/\"\n\n    url.rewrite-once = (\n        \"^/(plugins|modules/(system|backend|cms))/(([\\w-]+/)+|/|)assets/([\\w-]+/)+[-\\w^&'@{}[\\],$=!#().%+~/ ]+\\.(jpg|jpeg|gif|png|svg|swf|avi|mpg|mpeg|mp3|flv|ico|css|js|woff|ttf)(\\?.*|)$\" => \"$0\",\n        \"^/(system|themes/[\\w-]+)/assets/([\\w-]+/)+[-\\w^&'@{}[\\],$=!#().%+~/ ]+\\.(jpg|jpeg|gif|png|svg|swf|avi|mpg|mpeg|mp3|flv|ico|css|js|woff|ttf)(\\?.*|)$\" => \"$0\",\n        \"^/storage/app/uploads/public/[\\w-]+/.*$\" => \"$0\",\n        \"^/storage/app/media/.*$\" => \"$0\",\n        \"^/storage/app/resources/.*$\" => \"$0\",\n        \"^/storage/temp/public/[\\w-]+/.*$\" => \"$0\",\n        \"^/(favicon\\.ico)$\" => \"$0\",\n        \"(.*)\" => \"/index.php$1\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form with AJAX Redirect\nDESCRIPTION: HTML form structure with AJAX request handling for signup functionality with loading state indicator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSignup\">\n    <div>\n        <label>Email</label>\n        <input name=\"email\" />\n    </div>\n\n    <button data-attach-loading>\n        Sign Up\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Request Input in October CMS\nDESCRIPTION: How to get all input data from the current request as an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::all();\n```\n\n----------------------------------------\n\nTITLE: Deleting Nodes in October CMS Nested Tree Models\nDESCRIPTION: Demonstrates how to delete nodes in a nested tree, which will also delete all descendant nodes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$child1->delete();\n```\n\n----------------------------------------\n\nTITLE: Registering Event Listeners in Plugin Boot Method\nDESCRIPTION: Shows how to register event listeners in the boot method of a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    [...]\n\n    public function boot()\n    {\n        Event::listen(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Dropdown Properties in PHP\nDESCRIPTION: Shows how to define dropdown properties that depend on other property values, using the 'depends' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dropdown.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title' => 'Country',\n            'type' => 'dropdown',\n            'default' => 'us'\n        ],\n        'state' => [\n            'title' => 'State',\n            'type' => 'dropdown',\n            'default' => 'dc',\n            'depends' => ['country'],\n            'placeholder' => 'Select a state'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Template in Twig\nDESCRIPTION: Simplest example of a home page template in October CMS showing the minimal required configuration and content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/\"\n==\n<h1>Hello, world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Component Page Cycle Handler\nDESCRIPTION: Implementation of onRun() method to inject variables during page execution cycle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    // This code will be executed when the page or layout is\n    // loaded and the component is attached to it.\n\n    $this->page['var'] = 'value'; // Inject some variable to the page\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Specific List Definition in PHP\nDESCRIPTION: Shows how to render a specific list definition in an October CMS controller view file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->listRender('templates') ?>\n```\n\n----------------------------------------\n\nTITLE: Form Field Filtering Extension in PHP\nDESCRIPTION: Implementation of form field filtering using model extension and event binding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.form.filterFields', function ($formWidget, $fields, $context) use ($model) {\n        if ($model->source_type === 'http') {\n            $fields->source_url->hidden = false;\n            $fields->git_branch->hidden = true;\n        }\n        elseif ($model->source_type === 'git') {\n            $fields->source_url->hidden = false;\n            $fields->git_branch->hidden = false;\n        }\n        else {\n            $fields->source_url->hidden = true;\n            $fields->git_branch->hidden = true;\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Models to Arrays in PHP\nDESCRIPTION: Demonstrates how to convert a model and its loaded relationships to an array using the toArray method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = User::with('roles')->first();\n\nreturn $user->toArray();\n```\n\n----------------------------------------\n\nTITLE: Using url() URL Helper in PHP\nDESCRIPTION: The url function generates a fully qualified URL to the given path. It can include route parameters and is useful for creating links to specific pages within the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\necho url('user/profile');\n\necho url('user/profile', [1]);\n```\n\n----------------------------------------\n\nTITLE: Rendering CMS Content Block with Twig\nDESCRIPTION: Demonstrates how to use the {% content %} tag to display a CMS content block on a page. It shows basic usage and how to render content from subdirectories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"contacts.htm\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"sidebar/content.htm\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in October CMS\nDESCRIPTION: Sets the debug configuration option that controls error detail display in the application. When true, detailed error messages are shown; when false, generic error messages appear.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Application Debug Mode\n|--------------------------------------------------------------------------\n|\n| When your application is in debug mode, detailed error messages with\n| stack traces will be shown on every error that occurs within your\n| application. If disabled, a simple generic error page is shown.\n|\n*/\n\n'debug' => false,\n```\n\n----------------------------------------\n\nTITLE: Resizing Plugin Image with Twig Resize Filter\nDESCRIPTION: Shows how to resize an image located in a plugin's assets directory using the resize filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ '/plugins/acme/blog/assets/images/someimage.png'|resize(...) }}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Loading Message in HTML\nDESCRIPTION: Button that displays a flash message while the AJAX request is loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onUpdate\" data-request-message=\"Loading...\">\n    Save Changes\n</button>\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to Query in PHP\nDESCRIPTION: Implementation of the applyScopeToQuery method to modify the database query based on the filter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function applyScopeToQuery($query)\n{\n    $hasDiscount = $this->filterScope->value;\n\n    if ($hasDiscount) {\n        $query->where('discount', '>', 0);\n    }\n    else {\n        $query->where('discount', 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Template Structure in October CMS\nDESCRIPTION: Shows the three-section structure of an October CMS template (configuration, PHP code, and Twig markup) used in a blog archive page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n==\nfunction onStart()\n{\n    $this['posts'] = ...;\n}\n==\n<h3>Blog archive</h3>\n{% for post in posts %}\n    <h4>{{ post.title }}</h4>\n    {{ post.content }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Display Value Customization using displayFrom Property\nDESCRIPTION: Demonstrates how to keep the source column value but display a different value from the model attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_code:\n    label: Status\n    displayFrom: status_label\n```\n\n----------------------------------------\n\nTITLE: Current Page URL in PHP\nDESCRIPTION: Demonstrates how to get the current page URL in PHP component code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?\\nfunction onStart()\\n{\\n    $this['currentUrl'] = $this->pageUrl();\\n}\\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ currentUrl }}\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration of Relation Controller in YAML\nDESCRIPTION: Shows how to specify inline configuration for the Relation Controller behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    tab: Products\n    type: relation\n    controller:\n        label: Product\n        list: $/october/test/models/product/columns.yaml\n        form: $/october/test/models/product/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Column in October CMS List\nDESCRIPTION: Configuration for a datetime column which displays date and time in formatted form. Supports custom formats and timezone handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    format: l jS \\of F Y h:i:s A\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    ignoreTimezone: true\n```\n\n----------------------------------------\n\nTITLE: Completely Disabling Turbo Router in HTML\nDESCRIPTION: Demonstrates how to completely disable PJAX routing for all incoming and outgoing requests by setting the 'turbo-visit-control' meta tag content to 'disable'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"turbo-visit-control\" content=\"disable\" />\n```\n\n----------------------------------------\n\nTITLE: Using array_flatten() Function in PHP\nDESCRIPTION: The array_flatten method flattens a multi-dimensional array into a single level array. This is useful when you need to process all values regardless of their nesting level.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Joe', 'languages' => ['PHP', 'Ruby']];\n\n$array = array_flatten($array);\n\n// ['Joe', 'PHP', 'Ruby'];\n```\n\n----------------------------------------\n\nTITLE: Including the AJAX Framework in October CMS Themes\nDESCRIPTION: Shows how to include the October front-end JavaScript library with jQuery dependency in a theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ 'assets/javascript/jquery.js'|theme }}\"></script>\n\n{% framework %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Filter Widget Form (HTML/PHP)\nDESCRIPTION: HTML/PHP partial for the filter form, including dropdown options and apply/clear buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"filter-box\">\n    <div class=\"filter-facet\">\n        <div class=\"facet-item is-grow\">\n            <select name=\"Filter[value]\" class=\"form-control form-control-sm custom-select <?= $allowSearch ? '' : 'select-no-search' ?>\">\n                <option value=\"1\" <?= $scope->value === '1' ? 'selected=\"selected\"' : '' ?>>has a discount</option>\n                <option value=\"0\" <?= $scope->value === '0' ? 'selected=\"selected\"' : '' ?>>does not have a discount</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"filter-buttons\">\n        <button class=\"btn btn-sm btn-primary\" data-filter-action=\"apply\">\n            Apply\n        </button>\n        <div class=\"flex-grow-1\"></div>\n        <button class=\"btn btn-sm btn-secondary\" data-filter-action=\"clear\">\n            Clear\n        </button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Supporting Trashed Slugs in Sluggable Models\nDESCRIPTION: Shows how to configure a sluggable model to consider soft-deleted records when generating unique slugs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprotected $allowTrashedSlugs = true;\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Language with Hard Locale\nDESCRIPTION: Shows how to set the HTML lang attribute using the hard_locale property, which always returns a value by falling back to the default locale when none is specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-site.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<html lang=\"{{ this.site.hard_locale }}\">\n```\n\n----------------------------------------\n\nTITLE: Sample Laravel Package Configuration File Structure in PHP\nDESCRIPTION: Example of a basic Laravel package configuration file that needs to be duplicated to a plugin directory. This shows the structure of configuration values that should be maintained in the plugin's copy.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'encoding' => 'UTF-8',\n    'finalize' => true,\n    'cachePath' => storage_path('app/purifier'),\n    'cacheFileMode' => 0755,\n];\n```\n\n----------------------------------------\n\nTITLE: Using |raw Filter in Twig Expressions with Caution\nDESCRIPTION: This example shows how the |raw filter behaves differently when used inside expressions versus outside. It illustrates the importance of applying the filter to the entire expression when needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/raw.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set hello = '<strong>Hello</strong>' %}\n{% set hola = '<strong>Hola</strong>' %}\n\n{{ false ? '<strong>Hola</strong>' : hello|raw }}\n\n{# The above will not render the same as #}\n{{ false ? hola : hello|raw }}\n\n{# But renders the same as #}\n{{ (false ? hola : hello)|raw }}\n```\n\n----------------------------------------\n\nTITLE: Basic Selectable Column Definition in YAML\nDESCRIPTION: Shows the minimal YAML configuration needed to implement a selectable column with the label 'Status'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-selectable.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: selectable\n```\n\n----------------------------------------\n\nTITLE: Using Combiner Aliases with |theme Filter in Twig\nDESCRIPTION: Demonstrates the use of combiner aliases to include common framework assets along with custom JavaScript files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-theme.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ [\n    '@jquery',\n    '@framework',\n    '@framework.extras',\n    'assets/javascript/app.js'\n]|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties in Stylesheets\nDESCRIPTION: Example of using CSS custom properties defined from theme settings in a stylesheet, showing how to reference the variables using the var() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_9\n\nLANGUAGE: css\nCODE:\n```\na {\n    color: var(--my-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate and firstOrNew Methods in PHP with OctoberCMS\nDESCRIPTION: This snippet demonstrates the usage of firstOrCreate and firstOrNew methods for finding or creating model instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve the flight by the attributes, otherwise create it\n$flight = Flight::firstOrCreate(['name' => 'Flight 10']);\n\n// Retrieve the flight by the attributes, or instantiate a new instance\n$flight = Flight::firstOrNew(['name' => 'Flight 10']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Form Fields in October CMS\nDESCRIPTION: Demonstrates three ways to create dropdown fields: with simple options, with value-label pairs, and with options from a static class method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{dropdown name=\"dropdown\" label=\"Pick one\" options=\"One|Two\"}{/dropdown}\n```\n\nLANGUAGE: html\nCODE:\n```\n{dropdown name=\"dropdown\" label=\"Pick one\" options=\"one:One|two:Two\"}{/dropdown}\n```\n\nLANGUAGE: html\nCODE:\n```\n{dropdown name=\"dropdown\" label=\"Pick one\" options=\"Path\\To\\Class::method\"}{/dropdown}\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Filter Configuration in YAML\nDESCRIPTION: Defines a basic dropdown filter scope that allows filtering by status with three options: pending, active, and closed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    type: dropdown\n    options:\n        pending: Pending\n        active: Active\n        closed: Closed\n```\n\n----------------------------------------\n\nTITLE: Setting Variables with Twig Tags\nDESCRIPTION: The set tag allows variables to be defined within the template itself, useful for creating local template variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set activePage = 'blog' %}\n```\n\n----------------------------------------\n\nTITLE: Mapping and Flattening Collections in PHP\nDESCRIPTION: The flatMap method iterates through the collection, passes each value to a callback, and then flattens the result by one level.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Sally'],\n    ['school' => 'Harvard'],\n    ['age' => 28]\n]);\n\n$flattened = $collection->flatMap(function ($values) {\n    return array_map('strtoupper', $values);\n});\n\n$flattened->all();\n\n// ['name' => 'SALLY', 'school' => 'HARVARD', 'age' => '28'];\n```\n\n----------------------------------------\n\nTITLE: PHP Model Relation Definition for Repeater\nDESCRIPTION: Example of defining a hasMany relation in a PHP model for use with a repeater widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic $hasMany = [\n    'extra_information' => [\n        RepeaterItem::class,\n        'key' => 'parent_id',\n        'delete' => true\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Storing Data in Session using PHP\nDESCRIPTION: Demonstrates how to store a key-value pair in the session using the Session facade's put method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nSession::put('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial with Unqualified Path in YAML\nDESCRIPTION: Demonstrates configuring a partial field with an unqualified file name, which will be resolved to the model or controller directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: field_for_content\n```\n\n----------------------------------------\n\nTITLE: Using array_pull Helper Function in PHP\nDESCRIPTION: The array_pull function retrieves a value from an array and removes it from the array in a single operation, returning the extracted value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100];\n\n$name = array_pull($array, 'name');\n\n// $name: Desk\n\n// $array: ['price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Installing a Private Plugin from Remote Repository with Branch Specification\nDESCRIPTION: Artisan command to install a private plugin from a specific branch in a remote Git repository using both --from and --want options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=git@github.com:acme/blog-plugin.git --want=dev-develop\n```\n\n----------------------------------------\n\nTITLE: Validating File Attachments in PHP Model\nDESCRIPTION: Shows how to validate file attachments using array validation in a PHP model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nuse System\\Models\\File;\nuse Model;\n\nclass Gallery extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $attachMany = [\n        'photos' => File::class\n    ];\n\n    public $rules = [\n        'photos'   => 'required',\n        'photos.*' => 'image|max:1000|dimensions:min_width=100,min_height=100'\n    ];\n\n    /* ÂÖ∂‰ªñ‰∏Ä‰∫õ‰ª£Á†Å */\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Data Table Widget Configuration in YAML\nDESCRIPTION: Basic configuration example for the datatable form widget showing core properties for adding, deleting, column configuration, pagination and search functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datatable.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    type: datatable\n    adding: true\n    deleting: true\n    columns: []\n    recordsPerPage: false\n    searching: false\n```\n\n----------------------------------------\n\nTITLE: Handling Form Context in Field Filtering\nDESCRIPTION: Shows how to use the context parameter in filterFields to handle different form contexts. This example sets a field value during refresh without affecting the saved value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($context === 'refresh' && $this->parent) {\n        $fields->parent_name->value = $this->parent->name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Model Scope Method for Date Filter in PHP\nDESCRIPTION: Implements the custom 'scopeDateFilter' method in PHP to handle various date filtering conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction scopeDateFilter($query, $scope)\n{\n    if ($scope->condition === 'equals') {\n        $query->where('created_at', $scope->value);\n    }\n    elseif ($scope->condition === 'notEquals') {\n        $query->where('created_at', '<>', $scope->value);\n    }\n    elseif ($scope->condition === 'between') {\n        $query\n            ->where('created_at', '>=', $scope->after)\n            ->where('created_at', '<=', $scope->before);\n    }\n    elseif ($scope->condition === 'after') {\n        $query->where('created_at', '>=', $scope->value);\n    }\n    else {\n        $query->where('created_at', '<=', $scope->value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Middleware Method for Route Groups in October CMS\nDESCRIPTION: Example of using the middleware method to assign a group of middleware to a single route for more flexibility.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware(['Path\\To\\Your\\Middleware'])->group(function() {\n    Route::get('info', 'Acme\\News@info');\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing Data with All Views in PHP\nDESCRIPTION: Demonstrates how to share a piece of data with all views using the View::share method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nView::share('name', 'Steve');\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Custom Title\nDESCRIPTION: Configuration example showing how to customize the popup title in the recordfinder widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    title: Find A User\n```\n\n----------------------------------------\n\nTITLE: Best Practice for Triggering Both Local and Global Events\nDESCRIPTION: Example of how to fire both local and global events for the same action, following best practices like firing local events first and providing the local object in the global event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$this->fireEvent('post.beforePost', [$firstParam, $secondParam]);\nEvent::fire('rainlab.blog.beforePost', [$this, $firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Defining String Properties in PHP for October CMS\nDESCRIPTION: Demonstrates how to define properties using the string inspector type within a component or widget. Shows configuration of title, type and default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-string.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'firstName' => [\n            'title' => 'First Name',\n            'type' => 'string',\n            'default' => 'John'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Combiner Aliases with |theme Filter in Twig\nDESCRIPTION: Shows how to use combiner aliases, including @jquery, @framework, and @framework.extras, along with a custom JavaScript file in the |theme filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-theme.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ [\n    '@jquery',\n    '@framework',\n    '@framework.extras',\n    'assets/javascript/app.js'\n]|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List of Column Values in PHP\nDESCRIPTION: Uses the lists method to retrieve an array containing the values of a single column. Demonstrates retrieval with and without a custom key column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$titles = Db::table('roles')->lists('title');\n\nforeach ($titles as $title) {\n    echo $title;\n}\n\n$roles = Db::table('roles')->lists('title', 'name');\n\nforeach ($roles as $name => $title) {\n    echo $title;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Disk Media Provider in October CMS\nDESCRIPTION: PHP configuration for the default local disk media provider in October CMS. This setup uses the storage/app/media directory of the installation as the media storage location.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/providers.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'media' => [\n    'driver' => 'local',\n    'root' => storage_path('app/media'),\n    'url' => '/storage/app/media',\n    'visibility' => 'public',\n    'throw' => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Using Inline Relationship Existence Queries - PHP\nDESCRIPTION: Shows a more concise way to check relationship existence with a single condition using whereRelation, which simplifies commonly used whereHas patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$posts = Post::whereRelation('comments', 'is_approved', false)->get();\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component with a Custom Theme Partial\nDESCRIPTION: This snippet shows how to render a component using a custom theme partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[blog]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'blog-default' %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Form Widget with Artisan Command in PHP\nDESCRIPTION: Uses the artisan command to generate a backend form widget, view, and basic asset files for October CMS. The command requires the author/plugin name and the form widget class name as arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:formwidget Acme.Blog ColorPicker\n```\n\n----------------------------------------\n\nTITLE: Field Facade Implementation in YAML\nDESCRIPTION: Demonstrates how to create a facade field that won't be saved to the model using underscore prefix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\naddress:\n    label: Title\n    type: text\n\n_map:\n    label: Point your address on the map\n    type: mapviewer\n```\n\n----------------------------------------\n\nTITLE: Creating Form Labels\nDESCRIPTION: Example demonstrating how to generate a label element for a form field, associating it with the specified form control.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::label('email', 'E-Mail Address') ?>\n```\n\n----------------------------------------\n\nTITLE: Outputting Injected Assets in Templates\nDESCRIPTION: Shows how to output injected assets using the styles and scripts tags in templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Defining Variables with Resources Component in October CMS\nDESCRIPTION: Shows how to define variables using the resources component. This makes the variables available to layouts and templates as Twig variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[resources]\nvars[activeNav] = 'blog'\n```\n\n----------------------------------------\n\nTITLE: Using Tags in Twig Templates\nDESCRIPTION: Demonstrates the basic syntax for Twig tags which provide template logic functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% tag %}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Messages Implementation\nDESCRIPTION: Shows different ways to implement custom error messages in validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = Validator::make($input, $rules, $messages);\n```\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'required' => 'We need to know your e-mail address!',\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\nLANGUAGE: php\nCODE:\n```\nValidator::make($formValues, $validations, Lang::get('acme.blog::validation'));\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Widget Values in PHP\nDESCRIPTION: Demonstrates how to prepare variables for rendering a form widget, including setting up the field ID, name, and value for use in the widget partial template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['id'] = $this->getId();\n    $this->vars['name'] = $this->getFieldName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('myformwidget');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic If Condition in Twig Templates\nDESCRIPTION: A simple example of using an if statement to conditionally display content based on a boolean variable. This snippet checks if the 'online' variable is false and displays a maintenance message if true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-if.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if online == false %}\n    <p>ËØ•ÁΩëÁ´ôÂ§Ñ‰∫éÁª¥Êä§Ê®°Âºè„ÄÇ</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Partial Template with Dynamic Result in Twig\nDESCRIPTION: A simple Twig partial that displays the result variable passed from the AJAX handler. This partial would be rendered and injected into the target element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<p>The answer is {{ result }}</p>\n```\n\n----------------------------------------\n\nTITLE: Dumping a Single Variable with dump() in Twig\nDESCRIPTION: This snippet demonstrates how to use the dump() function to output information about a single template variable named 'user'. This is useful for inspecting the contents of a variable during template debugging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-dump.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user) }}\n```\n\n----------------------------------------\n\nTITLE: Using Functions with Arguments in Twig\nDESCRIPTION: Shows how to pass arguments to functions in Twig templates, enabling more complex operations and data manipulation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(variable) }}\n```\n\n----------------------------------------\n\nTITLE: Getting File Last Modified Timestamp\nDESCRIPTION: Example showing how to get the UNIX timestamp of when a file was last modified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$time = Storage::lastModified('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Attribute Accessor for Link Data in PHP\nDESCRIPTION: Model method that creates a custom attribute accessor to provide both URL and display text for a linkage column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-linkage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getWebsiteLinkAttribute()\n{\n    return [$this->url, $this->name];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keys and Values in Twig For Loop\nDESCRIPTION: Shows how to access both the key and value when iterating through a collection in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for key, user in users %}\n        <li>{{ key }}: {{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Widget Variable Passing Examples\nDESCRIPTION: Demonstrates different methods of passing variables to widget partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['var'] = 'value';\n\n    return $this->makePartial('list');\n}\n\npublic function render()\n{\n    return $this->makePartial('list', ['var' => 'value']);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Unique Database Rule in PHP\nDESCRIPTION: Demonstrates how to validate that a field must be unique in a database table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Object Inspector Type\nDESCRIPTION: This JSON snippet shows the structure of the output generated by the 'object' inspector type. It includes the values for street address, city, and country properties of an address object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-object.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"address\": {\n    \"streetAddress\": \"321-210 Second ave\",\n    \"city\": \"Springfield\",\n    \"country\": \"us\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using flatMap Method in PHP Collections\nDESCRIPTION: The flatMap method iterates through the collection, passes each value to a callback for modification, and then flattens the result by one level.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Sally'],\n    ['school' => 'Harvard'],\n    ['age' => 28]\n]);\n\n$flattened = $collection->flatMap(function ($values) {\n    return array_map('strtoupper', $values);\n});\n\n$flattened->all();\n\n// ['name' => 'SALLY', 'school' => 'HARVARD', 'age' => '28'];\n```\n\n----------------------------------------\n\nTITLE: Binding a Shared Type to the IoC Container in PHP\nDESCRIPTION: Demonstrates binding a singleton type to the IoC container, ensuring only one instance is created and reused for subsequent calls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nApp::singleton('foo', function() {\n    return new FooBar;\n});\n```\n\n----------------------------------------\n\nTITLE: Extending AI Class with WaveBehaviour in PHP\nDESCRIPTION: This snippet demonstrates how to extend the AI class and implement the WaveBehaviour in October CMS. It shows the usage of the $implement property to include the behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Classes;\n\nclass Robot extends AI\n{\n    public $implement = [\n        'MyNamespace.Behaviours.WaveBehaviour'\n    ];\n\n    public function identify()\n    {\n        echo \"I'm a Robot<br>\";\n        echo $this->youGotBrains();\n        echo $this->wave();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Requested Response Format in PHP\nDESCRIPTION: Shows how to determine the requested response format based on HTTP Accept header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\nif (Request::format() == 'json') {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Parameters in Resources Component Variables\nDESCRIPTION: Demonstrates how to use page route parameters in resource component variables. The example shows using the ':slug' parameter from the page URL to set the 'activeNav' variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"mypage/:slug\"\n\n[resources]\nvars[activeNav] = '{{ :slug }}'\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Label with nameFrom Property in YAML\nDESCRIPTION: Shows how to customize the label used for related records using the nameFrom property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n    nameFrom: title\n```\n\n----------------------------------------\n\nTITLE: Detaching Models in Many-to-Many Relationships in OctoberCMS\nDESCRIPTION: Example showing how to detach models in a many-to-many relationship. This removes links between a user and its roles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// Detach a single role from the user...\\n$user->roles()->detach($roleId);\\n\\n// Detach all roles from the user...\\n$user->roles()->detach();\n```\n\n----------------------------------------\n\nTITLE: Extending Filter Widgets for Relations\nDESCRIPTION: PHP methods to extend the filter widgets for both view and manage modes of relation controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendViewFilterWidget($widget, $field, $model)\n{\n    // Extends the view filter widget\n}\n\npublic function relationExtendManageFilterWidget($widget, $field, $model)\n{\n    // Extends the manage filter widget\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ajaxPartial Tag Usage\nDESCRIPTION: Basic example of using the ajaxPartial tag to render a partial with AJAX support. The partial contents are automatically wrapped with a div containing the data-ajax-partial attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/ajax-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial \"contact-form\" %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div data-ajax-partial=\"contact-form\">\n    ... Contents go here ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resizing a Media Library Image for Browser Display in PHP\nDESCRIPTION: Shows how to resize a media library asset and generate a URL for browser display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$image = \\Media\\Classes\\MediaLibrary::url('relative/path/to/asset.jpg');\n\n$url = \\System\\Classes\\ResizeImages::resize($image, $width, $height, $options);\n```\n\n----------------------------------------\n\nTITLE: Accessing Server Variables in PHP\nDESCRIPTION: Demonstrates how to retrieve values from the $_SERVER array using the Request facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::server('PATH_INFO');\n```\n\n----------------------------------------\n\nTITLE: Implementing Encryptable Attributes in PHP Model\nDESCRIPTION: Shows how to use the Encryptable trait to automatically encrypt and decrypt specific attributes in a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Encryptable;\n\n    /**\n     * @var array List of attributes to encrypt.\n     */\n    protected $encryptable = ['api_key', 'api_secret'];\n}\n```\n\n----------------------------------------\n\nTITLE: Validating File Attachments in PHP Model\nDESCRIPTION: Demonstrates how to validate file attachments in a PHP model for October CMS using array validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Traits\\Validation;\nuse System\\Models\\File;\nuse Model;\n\nclass Gallery extends Model\n{\n    use Validation;\n\n    public $attachMany = [\n        'photos' => File::class\n    ];\n\n    public $rules = [\n        'photos'   => 'required',\n        'photos.*' => 'image|max:1000|dimensions:min_width=100,min_height=100'\n    ];\n\n    /* some other code */\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination with Query Builder in PHP\nDESCRIPTION: Shows how to use the simplePaginate method to perform a more efficient query that only displays Next and Previous links. This is useful for large datasets when you don't need page number links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Arguments in Console Command\nDESCRIPTION: Shows how to retrieve all arguments passed to a console command by calling the argument method without parameters, which returns an array of all arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$arguments = $this->argument();\n```\n\n----------------------------------------\n\nTITLE: Using unique() Method in PHP Collections\nDESCRIPTION: Demonstrates how to get unique items from a collection, including handling nested arrays and custom uniqueness logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 1, 2, 2, 3, 4, 2]);\n\n$unique = $collection->unique();\n\n$unique->values()->all();\n\n// [1, 2, 3, 4]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'iPhone 12', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'iPhone 13', 'brand' => 'Apple', 'type' => 'phone'],\n    ['name' => 'Apple Watch', 'brand' => 'Apple', 'type' => 'watch'],\n    ['name' => 'Galaxy S21', 'brand' => 'Samsung', 'type' => 'phone'],\n    ['name' => 'Galaxy Gear', 'brand' => 'Samsung', 'type' => 'watch'],\n]);\n\n$unique = $collection->unique('brand');\n\n$unique->values()->all();\n```\n\n----------------------------------------\n\nTITLE: Refreshing a Single Field in an AJAX Handler\nDESCRIPTION: Shows how to refresh a specific field from an AJAX change handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function onChangeContent()\n{\n    return $this->formRefreshFields('is_positive');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing onRender Method for Component Markup\nDESCRIPTION: Example of implementing the onRender method in a component class to perform actions before the default markup is rendered.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function onRender()\n{\n    // This code will be executed before the default component\n    // markup is rendered on the page or layout.\n\n    $this->page['var'] = 'Maximum items allowed: ' . $this->property('maxItems');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Context in PHP\nDESCRIPTION: Example of activating the global context for accessing all models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nSite::withGlobalContext(function() {\n    // All models are available in here.\n});\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning Item by Key from Collection in PHP\nDESCRIPTION: The pull method removes and returns an item from the collection by its key. It modifies the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 'prod-100', 'name' => 'Desk']);\n\n$collection->pull('name');\n\n// 'Desk'\n\n$collection->all();\n\n// ['product_id' => 'prod-100']\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Properties in October CMS\nDESCRIPTION: This PHP code demonstrates how to define properties for a report widget in October CMS. It includes properties for the widget title and the number of days to display data for, with validation rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/report-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'title' => [\n            'title' => 'Widget title',\n            'default' => 'Top Pages',\n            'type' => 'string',\n            'validation' => [\n                'required' => [\n                    'message' => 'The Widget Title is required.'\n                ],\n            ]\n        ],\n        'days' => [\n            'title' => 'Number of days to display data for',\n            'default' => '7',\n            'type' => 'string',\n            'validation' => [\n                'regex' => [\n                    'message' => 'The days property can contain only numeric symbols.',\n                    'pattern' => '^[0-9]+$'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Event Subscription with Parameters in October CMS - PHP\nDESCRIPTION: Example of subscribing to an event with a closure that accepts parameters passed from the firing event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('acme.blog.myevent', function($arg1, $arg2) {\n    // Do something\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Container Resolution Events in October CMS\nDESCRIPTION: Shows how to listen for events when objects are resolved from the IoC container, allowing for modification of objects after resolution but before they're provided to consumers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::resolving(function ($object, $app) {\n    // Called when container resolves object of any type...\n});\n\nApp::resolving('foo', function ($fooBar, $app) {\n    // Called when container resolves objects using hint \"foo\"...\n});\n\nApp::resolving('Acme\\Blog\\Classes\\FooBar', function ($fooBar, $app) {\n    // Called when container resolves objects of type \"FooBar\"...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Currency Metric Formatting\nDESCRIPTION: Example of registering a metric with currency formatting options using the Intl.NumberFormat configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$this->registerMetric(new ReportMetric(\n    self::METRIC_TOTAL_AMOUNT,\n    'acme_shop_sales.total',\n    'Total amount',\n    ReportMetric::AGGREGATE_SUM,\n    [\n        'style' => 'currency',\n        'currency' => 'USD',\n    ]\n));\n```\n\n----------------------------------------\n\nTITLE: Basic Dropdown Configuration in YAML\nDESCRIPTION: Configures a dropdown field with static options for blog post status, showing the basic structure with key-value pairs for options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    type: dropdown\n    label: Blog Post Status\n    options:\n        draft: Draft\n        published: Published\n        archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Defining a Placeholder in Twig\nDESCRIPTION: Demonstrates how to define a placeholder in a layout template using the {% placeholder %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder name %}\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework with Turbo Router in Twig\nDESCRIPTION: Shows how to include the AJAX framework with both extras and turbo parameters, which enables turbo-charged routing on every page in addition to extra features.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras turbo %}\n```\n\n----------------------------------------\n\nTITLE: Basic Tag Syntax in Twig\nDESCRIPTION: Shows the basic syntax for Twig tags using curly brace percentage notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% tag %}\n```\n\n----------------------------------------\n\nTITLE: Formatting All Error Messages in PHP\nDESCRIPTION: Shows how to format all error messages with HTML. Each message will be wrapped in the provided format string, with :message replaced by the actual error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nforeach ($messages->all('<li>:message</li>') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_set Helper Function in PHP\nDESCRIPTION: The array_set function sets a value within a deeply nested array using dot notation to specify the location.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$array = ['products' => ['desk' => ['price' => 100]]];\n\narray_set($array, 'products.desk.price', 200);\n\n// ['products' => ['desk' => ['price' => 200]]]\n```\n\n----------------------------------------\n\nTITLE: Using the reverse() Method in PHP Collections\nDESCRIPTION: The reverse method reverses the order of items in the collection, returning a new collection with the reversed order. Similar to PHP's array_reverse function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$reversed = $collection->reverse();\n\n$reversed->all();\n\n// [5, 4, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Using array_sort_recursive() Function in PHP\nDESCRIPTION: The array_sort_recursive function recursively sorts an array using the sort function. It will sort both the outer array and any nested arrays it contains using PHP's default sorting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    [\n        'Brian',\n        'Shannon',\n        'Alec',\n    ],\n    [\n        'PHP',\n        'Ruby',\n        'JavaScript',\n    ],\n];\n\n$array = array_sort_recursive($array);\n\n/*\n    [\n        [\n            'Alec',\n            'Brian',\n            'Shannon',\n        ],\n        [\n            'JavaScript',\n            'PHP',\n            'Ruby',\n        ]\n    ];\n*/\n```\n\n----------------------------------------\n\nTITLE: Processing Results in Chunks\nDESCRIPTION: Processes large result sets in smaller chunks to conserve memory. This method retrieves a small portion of results at a time and processes each chunk with a callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->chunk(100, function($users) {\n    foreach ($users as $user) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Making a Basic GET Request with PHP HTTP Client\nDESCRIPTION: Demonstrates how to make a simple GET request using the HTTP Client. The response object is returned for further processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$response = Http::get('https://octobercms.com');\n```\n\n----------------------------------------\n\nTITLE: Collection SortBy Method Basic Usage\nDESCRIPTION: Basic example of using sortBy() method to sort collection by a specific field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\ncollect(data).sortBy('age')\n```\n\n----------------------------------------\n\nTITLE: Media Manager Configuration Options in PHP\nDESCRIPTION: Shows the configuration options available in the config/media.php file to fine-tune the Media Manager, specifically for ignoring certain files and patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Ignored Files and Patterns\n|--------------------------------------------------------------------------\n|\n| The media manager wil ignore file names and patterns specified here\n|\n*/\n\n'ignore_files' => ['.svn', '.git', '.DS_Store', '.AppleDouble'],\n\n'ignore_patterns' => ['^\\\\.*'],\n```\n\n----------------------------------------\n\nTITLE: Basic Page Template with Layout Reference\nDESCRIPTION: Shows how to reference a layout file in a page template using the layout configuration parameter\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/\"\nlayout = \"default\"\n==\n<p>Hello, world!</p>\n```\n\n----------------------------------------\n\nTITLE: Specifying Default Form Values\nDESCRIPTION: Example showing how to specify a default value for a form field when using Form::value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::value('name', 'John Travolta') ?>\n```\n\n----------------------------------------\n\nTITLE: Regex Validation Configuration\nDESCRIPTION: Example of configuring regex validation with pattern and modifiers for a string property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector-types.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'name' => [\n            'title' => 'Name',\n            'type' => 'string',\n            'validation' => [\n                'regex' => [\n                    'message' => 'The Name field can contain only Latin letters',\n                    'pattern' => '^[a-z]+$',\n                    'modifiers' => 'i'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Backend Menu Items in October CMS using PHP\nDESCRIPTION: This snippet demonstrates how to remove menu items from the October CMS backend menu. It uses the backend.menu.extendItems event to remove entire main menu sections, individual side menu items, or multiple side menu items at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n\n    // Remove all items\n    $manager->removeMainMenuItem('October.Cms', 'cms');\n\n    // Remove single item\n    $manager->removeSideMenuItem('October.Cms', 'cms', 'pages');\n\n    // Remove two items\n    $manager->removeSideMenuItems('October.Cms', 'cms', [\n        'pages',\n        'partials'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Pinging URLs for Task Notifications in PHP for October CMS Scheduler\nDESCRIPTION: This example shows how to use the pingBefore and thenPing methods to notify an external service before and after a scheduled task runs in the October CMS command scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('emails:send')\n    ->daily()\n    ->pingBefore($url)\n    ->thenPing($url);\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Class with ExtensionTrait in PHP\nDESCRIPTION: This snippet shows how to create a behavior class using the ExtensionTrait in October CMS. The WaveBehaviour class implements the required extend method and provides a wave method that will be available to classes that implement this behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Behaviors;\n\nclass WaveBehaviour\n{\n    use \\October\\Rain\\Extension\\ExtensionTrait;\n\n    /**\n     * When using the Extensiontrait, your behaviour also has to implement this method\n     * @see \\October\\Rain\\Extension\\ExtensionBase\n     */\n    public static function extend(callable $callback)\n    {\n        self::extensionExtendCallback($callback);\n    }\n\n    public function wave()\n    {\n        echo \"*waves*<br>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Reference Snippet\nDESCRIPTION: A snippet that displays a blog post summary from a Tailor entry record, including a section component and external property values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n## partials/snippets/blog-post-reference.htm\n\n[viewBag]\nsnippetCode = \"blogPostReference\"\nsnippetName = \"Blog Post Reference\"\nsnippetDescription = \"Display a reference to a blog post\"\nsnippetProperties[post_id][title] = \"Blog Post ID\"\nsnippetProperties[post_id][type] = \"string\"\n\n[section post]\nhandle = \"Blog\\Post\"\nidentifier = \"id\"\nvalue = \"{{ post_id }}\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if post is not empty %}\n    <div class=\"card shadow-sm\">\n        <div class=\"card-body\">\n            <h4>{{ post.title }}</h4>\n        </div>\n        <div class=\"card-footer\">\n            <div class=\"d-flex justify-content-between align-items-center\">\n                <a href=\"{{ 'blog/post'|page({ slug: post.slug }) }}\" class=\"stretched-link\">\n                    {{ post.categories.first.title|default('') }}\n                </a>\n                <small class=\"text-muted\">{{ post.published_at_date|date('j M Y') }}</small>\n            </div>\n        </div>\n    </div>\n{% else %}\n    <!-- Post Missing: Unable to Find an Entry -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Purgeable Attributes in PHP Model\nDESCRIPTION: Demonstrates how to use the Purgeable trait to prevent specific attributes from being saved to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Purgeable;\n\n    /**\n     * @var array List of attributes to purge.\n     */\n    protected $purgeable = ['password_confirmation'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Specific Scheduler Cron Job in October CMS\nDESCRIPTION: Example of setting up a cron job with a specific user (alice) in /etc/cron.d for the October CMS scheduler. This approach is required when adding entries to the system crontab files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * alice php /october/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Deleting a Processed Job in PHP\nDESCRIPTION: Shows how to delete a job from the queue after it has been processed, using the delete method on the job instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function fire($job, $data)\n{\n    // Process the job...\n\n    $job->delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Lists (PHP)\nDESCRIPTION: Example of how to extend a backend list by listening to the list.extendColumns event to add or remove columns conditionally for a specific controller and model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    [...]\n\n    public function boot()\n    {\n        // Extend all backend list usage\n        Event::listen('backend.list.extendColumns', function ($widget) {\n            // Only for the User controller\n            if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n                return;\n            }\n\n            // Only for the User model\n            if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n                return;\n            }\n\n            // Add an extra birthday column\n            $widget->addColumns([\n                'birthday' => [\n                    'label' => 'Birthday'\n                ],\n            ]);\n\n            // Remove a Surname column\n            $widget->removeColumn('surname');\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferred Relationship Binding in PHP\nDESCRIPTION: Shows how to defer relationship binding until the parent model is saved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\n$post = new Post;\n\n$post->comments = [$comment];\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Confirm Message with Promise in JavaScript\nDESCRIPTION: This code demonstrates how to handle the 'ajax:confirm-message' event. It uses the supplied promise to resolve or reject based on the user's confirmation response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:confirm-message', function(event) {\n    const { message, promise } = event.detail;\n\n    // Prevent default behavior\n    event.preventDefault();\n\n    // Handle promise\n    if (confirm(message)) {\n        promise.resolve();\n    }\n    else {\n        promise.reject();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Route Parameters in PHP Component\nDESCRIPTION: Shows how to access URL segment values from within a component using the param() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$postId = $this->param('post_id');\n```\n\n----------------------------------------\n\nTITLE: Applying String Functions as Twig Filters\nDESCRIPTION: Shows how to apply string functions as Twig filters, using str_camel as an example.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|str_camel }}\n```\n\n----------------------------------------\n\nTITLE: Component Response Handling\nDESCRIPTION: Examples of returning responses from onRun() method including access denied and 404 responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    if (true) {\n        return Response::make('Access denied!', 403);\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    if (true) {\n        $this->setStatusCode(404);\n        return $this->controller->run('404');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Relation Widget in YAML for October CMS\nDESCRIPTION: Shows the configuration for a relation widget in YAML. This widget renders a dropdown or checkbox list based on the field relationship type, with options for customizing the display and filtering of related items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Á±ªÂà´\n    type: relation\n    nameFrom: title\n```\n\n----------------------------------------\n\nTITLE: Configuring Boxes Field in Tailor Backend Form\nDESCRIPTION: YAML configuration to define a boxes field in an October CMS Tailor backend form. The field uses adaptive span to ensure proper display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-boxes.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    boxes_content:\n        label: Boxes Content\n        span: adaptive  # This makes sure the Boxes Editor looks good in Tailor.\n        type: boxes     # This loads the Boxes Editor.\n```\n\n----------------------------------------\n\nTITLE: Customizing List Body Row Markup\nDESCRIPTION: Example of a custom list/_list_body_row.htm file that modifies the markup for each row in the list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<tr>\n    <?php foreach ($columns as $key => $column): ?>\n        <td><?= $this->getColumnValue($record, $column) ?></td>\n    <?php endforeach ?>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Updating JSON Columns in MySQL and PostgreSQL with PHP\nDESCRIPTION: Shows how to update values in a JSON column using -> syntax to access specific keys within JSON objects, supported in MySQL 5.7+ and PostgreSQL 9.5+.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$affected = Db::table('users')\n    ->where('id', 1)\n    ->update(['options->enabled' => true]);\n```\n\n----------------------------------------\n\nTITLE: Truncating Database Tables in PHP\nDESCRIPTION: Demonstrates how to completely truncate a database table, removing all rows and resetting auto-incrementing IDs to zero.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->truncate();\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Key-Value Access\nDESCRIPTION: Shows how to access both keys and values when iterating over a collection in a Twig for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for key, user in users %}\n        <li>{{ key }}: {{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Flash Messages in AJAX Handler\nDESCRIPTION: Shows how to use flash messages in an AJAX handler using PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onTest()\n{\n    Flash::success('Test successful');\n}\n```\n\n----------------------------------------\n\nTITLE: Checkbox List Configuration in YAML\nDESCRIPTION: Demonstrates various ways to configure checkbox lists including inline options and quick select functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    options:\n        open_account: Open account\n        close_account: Close account\n        modify_account: Modify account\n```\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    options: listPermissions\n```\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    cssClass: inline-options\n```\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    quickselect: true\n```\n\n----------------------------------------\n\nTITLE: Word Count Limiting in Twig\nDESCRIPTION: Limits the number of words in a string with optional custom suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_words('The quick brown fox...', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_words('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Value Conditions for Form Field Triggers in YAML\nDESCRIPTION: Shows how to use the value[] condition to check for multiple values in a form field trigger. The example checks if the file_format field matches either 'csv' or 'csv_custom'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show\n    condition: value[csv][csv_custom]\n    field: file_format\n```\n\n----------------------------------------\n\nTITLE: Database Schema for Repeater Items\nDESCRIPTION: PHP code defining the database table structure for repeater items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('acme_blog_repeater_items', function($table) {\n    $table->increments('id');\n    $table->integer('parent_id')->unsigned()->nullable()->index();\n    $table->mediumText('value')->nullable();\n    $table->integer('sort_order')->nullable();\n    $table->timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Properties with StringList Inspector Type in PHP\nDESCRIPTION: Example of how to define a property using the stringList inspector type in a PHP component. The code shows a defineProperties method with a 'items' property that has a title, type set to 'stringList', and a default array of strings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-stringlist.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'items' => [\n            'title' => 'Items',\n            'type' => 'stringList',\n            'default' => ['String 1', 'String 2']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Soft Deleted Models - PHP\nDESCRIPTION: Shows different ways to restore soft deleted models back to their active state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user->restore();\n\n// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å —Å account_id=1\nUser::withTrashed()->where('account_id', 1)->restore();\n\n// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏\n$user->posts()->restore();\n```\n\n----------------------------------------\n\nTITLE: Implementing List Behavior in PHP Controller\nDESCRIPTION: Shows how to implement the List Behavior in an October CMS backend controller by adding it to the $implement property and specifying the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ListController::class\n    ];\n\n    public $listConfig = 'list_config.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic DateTime Column in October CMS\nDESCRIPTION: Defines a list column that displays date and time values in a standard format. This will show dates in the format 'Thu, Dec 25, 1975 2:15 PM' and automatically applies the backend timezone preference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n```\n\n----------------------------------------\n\nTITLE: Basic Macro Definition in Twig\nDESCRIPTION: Shows the basic syntax for defining a macro function in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Custom Toolbar Buttons Configuration in YAML\nDESCRIPTION: Configuration example showing how to specify custom toolbar buttons for the rich editor using the toolbarButtons property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    label: Contents\n    toolbarButtons: bold|italic|underline\n```\n\n----------------------------------------\n\nTITLE: Rendering Plain Text and Markdown Content with Twig\nDESCRIPTION: Shows how to use the {% content %} tag to render plain text and Markdown content blocks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"readme.txt\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"changelog.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Logging Information with Context\nDESCRIPTION: Example of logging user information with the Log facade and including contextual data in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\nLog::info('Showing user profile for user: '.$user->name);\n```\n\n----------------------------------------\n\nTITLE: Merging Collections in PHP\nDESCRIPTION: Demonstrates the use of the merge() method to combine collections, overwriting existing keys or appending numeric keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->merge(['price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => 1, 'price' => 200, 'discount' => false]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Desk', 'Chair']);\n\n$merged = $collection->merge(['Bookcase', 'Door']);\n\n$merged->all();\n\n// ['Desk', 'Chair', 'Bookcase', 'Door']\n```\n\n----------------------------------------\n\nTITLE: Calling Component-Specific AJAX Handlers\nDESCRIPTION: Shows how to target a component's handler by prefixing with the component alias.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"mycomponent::onSubmitContactForm\">Go</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Dialog Before AJAX Request in HTML\nDESCRIPTION: This example shows how to add a confirmation dialog when a Delete button is clicked before sending an AJAX request to the server.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form ... >\n    ...\n    <button data-request=\"onDelete\" data-request-confirm=\"Are you sure?\">Delete</button>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete in October CMS Model\nDESCRIPTION: Shows how to enable soft delete functionality in a model by using the SoftDelete trait and defining the deleted_at column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SoftDelete;\n\n    protected $dates = ['deleted_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Form Custom Macro Definition\nDESCRIPTION: Demonstrates how to create and use custom form macros for reusable form elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nForm::macro('myField', function() {\n    return '<input type=\"awesome\">';\n})\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::myField() ?>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field with Default Value in YAML\nDESCRIPTION: Example of a checkbox field configuration that includes a default checked state set to true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    type: checkbox\n    label: Display content\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Scopes in YAML\nDESCRIPTION: Comprehensive example of filter scope definitions including various filter types like category, status groups, checkboxes, switches, and date filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filters.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# scopes.yaml\nscopes:\n\n    category:\n        label: Category\n        modelClass: Acme\\Blog\\Models\\Category\n        conditions: category_id in (:value)\n        nameFrom: name\n\n    status:\n        label: Status\n        type: group\n        conditions: status in (:value)\n        options:\n            pending: Pending\n            active: Active\n            closed: Closed\n\n    published:\n        label: Hide published\n        type: checkbox\n        default: 1\n        conditions: is_published <> true\n\n    approved:\n        label: Approved\n        type: switch\n        default: 2\n        conditions:\n            - is_approved <> true\n            - is_approved = true\n\n    created_at:\n        label: Date\n        type: date\n        conditions:\n            after: created_at >= ':value'\n            between: created_at >= ':after' AND created_at <= ':before'\n```\n\n----------------------------------------\n\nTITLE: Creating a Backend Controller in OctoberCMS\nDESCRIPTION: The create:controller command generates a controller, configuration and view files. It requires two parameters: the author and plugin name, and the controller class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:controller Acme.Blog Posts\n```\n\n----------------------------------------\n\nTITLE: Configuring Boxes Field in Tailor Backend Form\nDESCRIPTION: YAML configuration to add a Boxes field to a Tailor backend form. The 'span: adaptive' setting ensures proper display, and 'type: boxes' loads the Boxes Editor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-boxes.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    boxes_content:\n        label: Boxes Content\n        span: adaptive  # This makes sure the Boxes Editor looks good in Tailor.\n        type: boxes     # This loads the Boxes Editor.\n```\n\n----------------------------------------\n\nTITLE: Installing a Plugin from Local Directory\nDESCRIPTION: Artisan command to install a plugin using the local directory path as the source, useful for development or private plugins.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=./plugins/acme/blog\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree Structure with Twig in October CMS\nDESCRIPTION: Demonstrates how to recursively render a hierarchical tree structure using Twig macros.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{% macro renderChildren(item) %}\n    {% import _self as SELF %}\n    {% if item.children is not empty %}\n        <ul>\n            {% for child in item.children %}\n                <li>{{ child.name }}{{ SELF.renderChildren(child)|raw }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n{% endmacro %}\n\n{% import _self as SELF %}\n{{ SELF.renderChildren(category)|raw }}\n```\n\n----------------------------------------\n\nTITLE: Basic List Controller Implementation in PHP\nDESCRIPTION: Shows the basic setup of a Categories controller implementing the ListController behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = ['Backend.Behaviors.ListController'];\n\n    public $listConfig = 'list_config.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Theme in October CMS\nDESCRIPTION: This command creates a new child theme named 'demo-child' that inherits from the 'demo' parent theme. Using the --child flag ensures the proper parent-child relationship is established.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/child-themes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo demo-child --child\n```\n\n----------------------------------------\n\nTITLE: External Form Definition Reference in YAML\nDESCRIPTION: Shows how to reference an external YAML file for form field definitions instead of defining fields inline.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-nestedform.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    label: Profile\n    type: nestedform\n    form: $/october/demo/models/profile/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Opening Basic Form with Attributes\nDESCRIPTION: Demonstrates how to open and close a basic form with URL attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['url' => 'foo/bar']) ?>\n    //\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Editor Widget in YAML for October CMS\nDESCRIPTION: This snippet demonstrates how to configure a Code Editor widget in an October CMS form using YAML. It sets up a field named 'css_content' with a huge size and HTML language setting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-codeeditor.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncss_content:\n    type: codeeditor\n    size: huge\n    language: html\n```\n\n----------------------------------------\n\nTITLE: Opening an Uploaded Image for Resizing in OctoberCMS\nDESCRIPTION: Opens an uploaded file from form input for resizing using the Resizer facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$image = Resizer::open(Input::file('field_name'));\n```\n\n----------------------------------------\n\nTITLE: Canceling Deferred Bindings in PHP\nDESCRIPTION: Demonstrates how to cancel all deferred bindings to prevent orphaned objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$post->cancelDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Checking Turbo Router Availability in JavaScript\nDESCRIPTION: Demonstrates how to check if the Turbo Router is enabled and should be used. This can be useful for conditional logic based on PJAX availability.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (oc.useTurbo && oc.useTurbo()) {\n    // Use PJAX\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Files and Using Streams in PHP\nDESCRIPTION: Demonstrates different ways to store files, including using PHP resources for stream support, which is recommended for large files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nStorage::put('file.jpg', $contents);\n\nStorage::put('file.jpg', $resource);\n```\n\n----------------------------------------\n\nTITLE: Detecting Global AJAX Requests with CSS\nDESCRIPTION: Shows how to detect when any AJAX request is in progress using CSS selectors that target the data-ajax-progress attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nhtml[data-ajax-progress] {\n    /* Display loading indicators */\n}\n```\n\n----------------------------------------\n\nTITLE: Pluralization in JSON Localization\nDESCRIPTION: Shows how to define pluralized strings in JSON localization files, including complex pluralization rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"There is one apple|There are many apples\": \"Il y a une pomme|Il y a beaucoup de pommes\",\n    \"{0} There are none|[1,19] There are some|[20,*] There are many\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Object in October CMS\nDESCRIPTION: Demonstrates how to access the current controller object in October CMS. The this.controller reference returns an instance of the Cms\\Classes\\Controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nthis.controller\n```\n\n----------------------------------------\n\nTITLE: Displaying Variables in Twig Templates\nDESCRIPTION: Variables in Twig are printed using double curly brackets. This allows for displaying dynamic content on the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Argument Value in Console Command\nDESCRIPTION: Shows how to retrieve the value of a specific argument in a console command using the argument method with the argument name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$value = $this->argument('name');\n```\n\n----------------------------------------\n\nTITLE: Basic Blueprint Structure in YAML\nDESCRIPTION: Demonstrates the fundamental structure of a Tailor blueprint with required fields including UUID, handle, type, and name. This forms the foundation of any content structure in Tailor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuuid: edcd102e-0525-4e4d-b07e-633ae6c18db6\nhandle: Blog\\Post\ntype: entry\nname: Post\n\nfields:\n    # [...]\n```\n\n----------------------------------------\n\nTITLE: Deferring Relationship Unbinding\nDESCRIPTION: This snippet demonstrates how to defer unbinding a relationship until the parent model is saved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n$post = Post::find(1);\n$post->comments()->remove($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Overriding List Body Row Markup in PHP\nDESCRIPTION: This PHP snippet shows how to modify the list body row markup by creating a _list_body_row.php file in the controller directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<tr>\n    <?php foreach ($columns as $key => $column): ?>\n        <td><?= $this->getColumnValue($record, $column) ?></td>\n    <?php endforeach ?>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Using transform() Method in PHP Collections\nDESCRIPTION: The transform method iterates over the collection and modifies it in place by replacing items with values returned by the callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->transform(function ($item, $key) {\n    return $item * 2;\n});\n\n$collection->all();\n\n// [2, 4, 6, 8, 10]\n```\n\n----------------------------------------\n\nTITLE: Foreign Key Constraint with Delete Action\nDESCRIPTION: Demonstrates creating a foreign key constraint with a specified onDelete action for handling referential integrity.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$table->foreign('user_id')\n      ->references('id')\n      ->on('users')\n      ->onDelete('cascade');\n```\n\n----------------------------------------\n\nTITLE: Appending Query Parameters to Pagination Links\nDESCRIPTION: Example showing how to append additional query string parameters to pagination links using the appends method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho $users->appends(['sort' => 'votes'])->render();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with this.session.get in Twig\nDESCRIPTION: Demonstrates how to retrieve data from the session using the 'this.session.get' method. It shows basic usage and how to provide a default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-session.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.get('key') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.get('key', 'default') }}\n```\n\n----------------------------------------\n\nTITLE: Calculating Mode in PHP Collections\nDESCRIPTION: Shows how to use the mode() method to find the most frequent value(s) in a collection, either by a specific key or overall.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$mode = new Collection([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])->mode('foo');\n\n// [10]\n\n$mode = new Collection([1, 1, 2, 4])->mode();\n\n// [1]\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Trait Usage Example\nDESCRIPTION: Shows traditional PHP trait implementation for comparison with behaviors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    use \\October\\Rain\\UtilityFunctions;\n    use \\October\\Rain\\DeferredBinding;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a File Using Local Storage Driver\nDESCRIPTION: This snippet demonstrates how to use the local storage driver to store a file. All file operations are relative to the root directory defined in the configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nStorage::disk('local')->put('file.txt', 'Contents');\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated Results in PHP View\nDESCRIPTION: Demonstrates how to display paginated results in a PHP view, iterating through the results and rendering pagination links with the links() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"container\">\n    <?php foreach ($users as $user): ?>\n        <?= $user->name ?>\n    <?php endforeach ?>\n</div>\n\n<?= $users->links() ?>\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Page ID in OctoberCMS Twig\nDESCRIPTION: Shows how to create a CSS-friendly identifier for the current page using the this.page.id property, which combines the page file name and folder name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"page-{{ this.page.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Collection Instance in PHP\nDESCRIPTION: Simple example of creating a Collection instance with a numeric array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$collection = new October\\Rain\\Support\\Collection([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Twig Macros\nDESCRIPTION: Shows how to define and use nested macros within the same template. When using a macro inside another macro, it needs to be imported locally.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input(name, value, type, size) %}\n    <input\n        type=\"{{ type|default('text') }}\"\n        name=\"{{ name }}\"\n        value=\"{{ value|e }}\"\n        size=\"{{ size|default(20) }}\" />\n{% endmacro %}\n\n{% macro wrapped_input(name, value, type, size) %}\n    {% import _self as form %}\n\n    <div class=\"field\">\n        {{ form.input(name, value, type, size) }}\n    </div>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Google Maps Integration Control Example\nDESCRIPTION: Example showing integration with Google Maps API, including proper cleanup in disconnect method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"google-map\"></div>\n\n<script>\noc.registerControl('google-map', class extends oc.ControlBase {\n    connect() {\n        this.map = new Map(this.element, {\n            center: { lat: -34.397, lng: 150.644 },\n            zoom: 8\n        });\n    }\n\n    disconnect() {\n        this.map.destroy();\n        this.map = null;\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using External Combiner Paths with |theme Filter in Twig\nDESCRIPTION: Demonstrates how to use an external combiner path with the |theme filter to include a file from outside the theme directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-theme.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ ['~/modules/system/assets/js/framework.js']|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Copying and Moving Files in PHP\nDESCRIPTION: Shows how to copy an existing file to a new location and move a file to a new location using the Storage facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nStorage::copy('old/file1.jpg', 'new/file1.jpg');\n\nStorage::move('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Writing Values to Settings Model in PHP\nDESCRIPTION: Examples of different methods to write values to a settings model, including static set method and direct property assignment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/model-settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Demo\\Models\\UserSetting;\n\n// Set a single value\nUserSetting::set('api_key', 'ABCD');\n\n// Set an array of values\nUserSetting::set(['api_key' => 'ABCD']);\n\n// Set object values\n$settings = UserSetting::instance();\n$settings->api_key = 'ABCD';\n$settings->save();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Error Messages in PHP\nDESCRIPTION: Example of defining custom error messages for validation rules in the language file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n\"foo\" => \"Your input was invalid!\",\n\n\"accepted\" => \"The :attribute must be accepted.\",\n```\n\n----------------------------------------\n\nTITLE: Rendering Boxes Content in Frontend Templates\nDESCRIPTION: Example of how to render boxes content in a frontend template. This includes the section declaration and the Twig code to display the rendered HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-boxes.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[section yourSectionVar]\nhandle = \"Your\\Handle\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ yourSectionVar.boxes_content.render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Switch Options in Artisan Command\nDESCRIPTION: Demonstrates how to call a command with a boolean switch option. The --queue option is passed to the command, which will set its value to true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan mail:send 1 --queue\n```\n\n----------------------------------------\n\nTITLE: Using the {% styles %} Tag in October CMS\nDESCRIPTION: Example showing how to properly implement the {% styles %} tag in an HTML head section. This tag renders CSS links that have been injected into the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-styles.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Form Labels\nDESCRIPTION: Example showing how to add HTML attributes such as classes to form labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::label('email', 'E-Mail Address', ['class' => 'awesome']) ?>\n```\n\n----------------------------------------\n\nTITLE: Registering Global Variables for Content Blocks in PHP\nDESCRIPTION: This PHP snippet demonstrates how to register global variables that are available to all content blocks using the View::share method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/content.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nView::share('site_name', 'October CMS');\n```\n\n----------------------------------------\n\nTITLE: Extending List Columns Using Global Event in PHP\nDESCRIPTION: This PHP code demonstrates how to extend list columns using the backend.list.extendColumns global event. It adds a new column and modifies an existing one for the event log list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.list.extendColumns', function($list) {\n    if (\n        !$list->getController() instanceof \\System\\Controllers\\EventLogs ||\n        !$list->getModel() instanceof \\System\\Models\\EventLog\n    ) {\n        return;\n    }\n\n    // Add a new column\n    $list->addColumns([\n        'my_column' => [\n            'label' => 'My Column'\n        ]\n    ]);\n\n    // Modify an existing column\n    $list->getColumn('title')->useConfig([\n        'path' => 'column_title'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking String Contains in PHP\nDESCRIPTION: The str_contains function determines if the given string contains the given value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_19\n\nLANGUAGE: PHP\nCODE:\n```\n$value = str_contains('The bird goes tweet', 'bird');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Structure Option\nDESCRIPTION: Configuration example showing how to disable the structure display mode in the recordfinder widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    structure: false\n```\n\n----------------------------------------\n\nTITLE: Queue Job with Custom Method\nDESCRIPTION: Shows how to specify a custom method when pushing a job to the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Scope Method for Dropdown Filter in PHP\nDESCRIPTION: PHP implementation of the scopeApplyStatusCode method that handles 'active' and 'deleted' statuses by applying appropriate query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeApplyStatusCode($query, $scope)\n{\n    if ($scope->value === 'active') {\n        return $query->withoutTrashed();\n    }\n\n    if ($scope->value === 'deleted') {\n        return $query->onlyTrashed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Navigation Items with Counter in PHP\nDESCRIPTION: Example of changing navigation label and adding a counter using the backend.menu.extendItems event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n    $manager->getMainMenuItem('Acme.Blog', 'blog')\n        ->getSideMenuItem('posts')\n        ->label('News')\n        ->counter(9);\n});\n```\n\n----------------------------------------\n\nTITLE: Merging Collections with zip Method in PHP\nDESCRIPTION: The zip method merges the values of the given array with the values of the original collection at corresponding indexes, creating pairs of values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Chair', 'Desk']);\n\n$zipped = $collection->zip([100, 200]);\n\n$zipped->all();\n\n// [['Chair', 100], ['Desk', 200]]\n```\n\n----------------------------------------\n\nTITLE: Extending Model Query for Form Lookup in PHP\nDESCRIPTION: Shows how to extend the database query used by the form by overriding the formExtendQuery method, in this case to include soft-deleted records in the query results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\npublic function formExtendQuery($query)\n{\n    $query->withTrashed();\n}\n```\n\n----------------------------------------\n\nTITLE: Using the min() Method in PHP Collections\nDESCRIPTION: The min method returns the minimum value from a collection. When a key is provided, it returns the minimum value for that key across all items in the collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$min = new Collection([['foo' => 10], ['foo' => 20]])->min('foo');\n\n// 10\n\n$min = new Collection([1, 2, 3, 4, 5])->min();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Failed Method in Queue Job Class in October CMS\nDESCRIPTION: PHP method to handle job-specific actions when a failure occurs. This method is called automatically when a job fails and receives the original job data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic function failed($data)\n{\n    // Called when the job is failing...\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Resized Image in PHP\nDESCRIPTION: Saves the resized image to a new file location.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/resizer.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$image->save('path/to/new/file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Debugging and Terminating with dd() Function in Twig\nDESCRIPTION: The dd() function dumps the values and then terminates the process. It's useful for stopping execution at a specific point for debugging purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/dump.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dd('dump and die') }}\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Loop Variable\nDESCRIPTION: Shows how to use the loop variable to access iteration information within a for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users %}\n    {{ loop.index }} - {{ user.username }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Display Value Modification for List Columns in YAML\nDESCRIPTION: Illustrates using the displayFrom property to show a different value while maintaining the original source value in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_code:\n    label: Status\n    displayFrom: status_label\n```\n\n----------------------------------------\n\nTITLE: Updating Partials with Data Attributes API\nDESCRIPTION: HTML code using the Data Attributes API to update a partial. When the button is clicked, it requests the 'onRefreshTime' handler and updates the 'mytime' partial in the '#myDiv' element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/ajax/update-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefreshTime\"\n    data-request-update=\"mytime: '#myDiv'\">\n    Go\n</button>\n```\n\n----------------------------------------\n\nTITLE: Option Groups for Dropdown in PHP\nDESCRIPTION: Creates dropdown option groups (optgroup) using a detailed option definition structure with nested children options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function getDetailedFieldOptions()\n{\n    return [\n        'Option Group' => [\n            'optgroup' => true,\n            'children' => [\n                1 => 'Option 1',\n                2 => 'Option 2',\n                // ...\n            ]\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling Twig Macros\nDESCRIPTION: Demonstrates how to import macros using the {% import %} tag and then call them. The example shows importing from the same template and calling the input macro.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/macro.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% import _self as form %}\n\n<p>{{ form.input('username') }}</p>\n<p>{{ form.input('password', null, 'password') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Page Redirection with Parameters in Twig\nDESCRIPTION: Shows how to redirect to a CMS page while passing additional parameters in the URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-redirect.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('docs', { slug: 'home' }) %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Flash Messages with Twig in October CMS\nDESCRIPTION: Demonstrates the basic usage of the {% flash %} tag to render flash messages from the user session. The message variable contains the flash message text, and the markup repeats for multiple messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/flash.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% flash %}\n        <li>{{ message }}</li>\n    {% endflash %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using slice() Method in PHP Collections\nDESCRIPTION: The slice method returns a portion of the collection starting at the given index. It can optionally limit the size of the returned slice with a second parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$slice = $collection->slice(4);\n\n$slice->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\nLANGUAGE: php\nCODE:\n```\n$slice = $collection->slice(4, 2);\n\n$slice->all();\n\n// [5, 6]\n```\n\n----------------------------------------\n\nTITLE: Basic Model-Based Group Filter Configuration in YAML\nDESCRIPTION: Demonstrates basic setup of a group filter scope using a related model with nameFrom and modelClass properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n```\n\n----------------------------------------\n\nTITLE: Using array_except Helper Function in PHP\nDESCRIPTION: The array_except function removes specified key/value pairs from an array and returns the filtered result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100];\n\n$array = array_except($array, ['price']);\n\n// ['name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Throwing ApplicationException in OctoberCMS\nDESCRIPTION: Example of throwing an ApplicationException for simple application failures. This exception type displays simplified error messages without sensitive information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nthrow new ApplicationException('You must be logged in to do that!');\n```\n\n----------------------------------------\n\nTITLE: Using an Extended Class with Behavior in PHP\nDESCRIPTION: This snippet shows how to instantiate and use the Robot class that implements a behavior. It demonstrates calling a method that internally uses both inherited and behavior-provided functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$robot = new Robot();\n$robot->identify();\n```\n\n----------------------------------------\n\nTITLE: Checking Multisite Feature Status in PHP\nDESCRIPTION: Example of checking if a specific multisite feature is enabled using the hasFeature method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$useMultisite = Site::hasFeature('cms_maintenance_setting');\n```\n\n----------------------------------------\n\nTITLE: Navigation Ruler Display Type in PHP\nDESCRIPTION: Example of adding a navigation divider using itemType property set to 'ruler'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'_ruler1' => [\n    'itemType' => 'ruler',\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Arguments in Console Command Signature\nDESCRIPTION: Shows how to define optional arguments in the command signature by adding a question mark after the argument name. This makes the argument optional when executing the command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user?}';\n```\n\n----------------------------------------\n\nTITLE: Controller Middleware with Only Modifier\nDESCRIPTION: Demonstrates how to restrict middleware execution to only specific controller actions using the only() modifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $this->middleware(function ($request, $response) {\n        // Middleware functionality\n    })->only('index');\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Database Queries with dd and dump\nDESCRIPTION: Demonstrates how to debug database queries using the dd method (which stops execution) and the dump method (which allows execution to continue).\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->where('votes', '>', 100)->dd();\n\nDb::table('users')->where('votes', '>', 100)->dump();\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Pager Variables\nDESCRIPTION: Shows the JSON structure of the object returned by the pager() function, including links and meta information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"links\": {\n        \"first\": \"https://yoursite.tld/api/blog/posts?page=1\",\n        \"last\": \"https://yoursite.tld/api/blog/posts?page=1\",\n        \"prev\": null,\n        \"next\": null\n    },\n    \"meta\": {\n        \"path\": \"https://yoursite.tld/api/blog/posts\",\n        \"per_page\": 3,\n        \"total\": 2,\n        \"current_page\": 1,\n        \"last_page\": 1,\n        \"from\": 1,\n        \"to\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Flash Data in Session using Session Facade in PHP\nDESCRIPTION: Demonstrates how to store and manage flash data in the session, which persists only for the next request, and how to extend its lifetime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/session.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nSession::flash('key', 'value');\n```\n\nLANGUAGE: php\nCODE:\n```\nSession::reflash();\n\nSession::keep(['username', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Disabling Turbo Router for Specific Links in HTML\nDESCRIPTION: Shows how to disable PJAX routing for specific links by adding the 'data-turbo=\"false\"' attribute to the link or its parent container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/\" data-turbo=\"false\">Disabled</a>\n```\n\n----------------------------------------\n\nTITLE: Updating Application Container\nDESCRIPTION: Code changes required in bootstrap/app.php to replace Illuminate Application with October Rain Application\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// File bootstrap/app.php\n\n// Replace\n$app = new Illuminate\\Foundation\\Application(\n    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)\n);\n\n// With\n$app = new October\\Rain\\Foundation\\Application(\n    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)\n);\n```\n\n----------------------------------------\n\nTITLE: Dropdown Options with Colors in PHP\nDESCRIPTION: Provides dropdown options with custom colors using a multidimensional array format with [label-text, label-color].\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($fieldName, $value, $formData)\n{\n    return [\n        'published' => ['Published', '#666666'],\n        'unpublished' => ['Unpublished', '#ff9999'],\n        'draft' => ['Draft', '#ff0000']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Customization with Form Fields in YAML\nDESCRIPTION: Example of defining customizable theme settings using the form field definition directly in the theme.yaml file, allowing for configuration of theme properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Theme\n# [...]\n\nform:\n    fields:\n        site_name:\n            label: Site name\n            comment: The website name as it should appear on the front-end\n            default: My Amazing Site!\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Forms\nDESCRIPTION: Example demonstrating how to create a form that accepts file uploads by setting the files option to true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'files' => true])\n```\n\n----------------------------------------\n\nTITLE: Theme Localization in PHP\nDESCRIPTION: Example of defining localization strings in a theme's lang.php file\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'options' => [\n        'website_name' => 'October CMS'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Validating Files in PHP\nDESCRIPTION: Shows how to include file validation in the Validator class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = files() + post();\n\n$validator = Validator::make($data, [...]);\n```\n\n----------------------------------------\n\nTITLE: PHP AJAX Handler Implementation\nDESCRIPTION: Server-side AJAX handler method that processes form inputs and returns a result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onTest()\n{\n    $this->page['result'] = input('value1') + input('value2');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Counters in October CMS\nDESCRIPTION: Example showing how to implement navigation counters in October CMS back-end menu items. The counter uses a service class method to dynamically calculate the count and includes a label describing the counter's purpose.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'blog' => [\n    // ...\n    'counter' => [\\Author\\Plugin\\Classes\\MyMenuCounterService::class, 'getCounterMethod'],\n    'counterLabel' => 'Label describing a dynamic menu counter',\n],\n```\n\n----------------------------------------\n\nTITLE: Color Picker with Text Input in YAML\nDESCRIPTION: Sets up a color picker with a text input for direct hex color entry. This configuration disables the available colors and focuses on custom color input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-colorpicker.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Primary Color\n    type: colorpicker\n    showInput: true\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Blueprint in YAML\nDESCRIPTION: This snippet shows how to define a global blueprint for footer configuration. It includes a field for a Facebook link and uses the 'global' type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Site\\Footer\ntype: global\nname: Footer Config\n\nfields:\n    facebook_link:\n        label: Facebook Link\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Creating Range Dropdowns with Selected Value and Empty Option\nDESCRIPTION: Example demonstrating how to create a numeric range dropdown with a pre-selected value and a blank option at the top.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectRange('number', 10, 20, 2, ['emptyOption' => 'Choose...']) ?>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Console Command in PHP for OctoberCMS\nDESCRIPTION: This snippet shows the basic structure of a console command class in OctoberCMS. It includes the necessary namespace, imports, and methods for defining the command name, description, and execution logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/development.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Console;\n\nuse Illuminate\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass MyCommand extends Command\n{\n    /**\n     * @var string The console command name.\n     */\n    protected $name = 'acme:mycommand';\n\n    /**\n     * @var string The console command description.\n     */\n    protected $description = 'Does something cool.';\n\n    /**\n     * Execute the console command.\n     * @return void\n     */\n    public function handle()\n    {\n        $this->output->writeln('Hello world!');\n    }\n\n    /**\n     * Get the console command arguments.\n     * @return array\n     */\n    protected function getArguments()\n    {\n        return [];\n    }\n\n    /**\n     * Get the console command options.\n     * @return array\n     */\n    protected function getOptions()\n    {\n        return [];\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Nested Relationship Queries in OctoberCMS\nDESCRIPTION: Example demonstrating how to use dot notation to query nested relationships. This retrieves posts that have at least one comment that has votes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment with votes...\\n$posts = Post::has('comments.votes')->get();\n```\n\n----------------------------------------\n\nTITLE: Using post() Request Helper in PHP\nDESCRIPTION: The post function obtains an input item from the request, restricted to POST variables only. It accepts a key name and an optional default value to return if the key is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$value = post('key', $default = null)\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Messages\nDESCRIPTION: PHP code showing how to specify custom validation error messages when using the Request validate method. The keys follow the attribute.rule format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'email.required' => 'Please type something for the email...',\n    'email.email' => 'That email is not an email...!'\n];\n\n$data = Request::validate($rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Event Subscription with Priority in October CMS - PHP\nDESCRIPTION: Example of subscribing to events with priority, where listeners with higher priority run first, and listeners with same priority run in order of subscription.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Run first\nEvent::listen('auth.login', function() { ... }, 10);\n\n// Run second\nEvent::listen('auth.login', function() { ... }, 5);\n```\n\n----------------------------------------\n\nTITLE: Storing User Avatar Using Default Disk in October CMS\nDESCRIPTION: Example of storing a user avatar on the default disk using the Storage facade without explicitly specifying a disk. This demonstrates automatic routing to the default disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find($id);\n\nStorage::put(\n    'avatars/'.$user->id,\n    file_get_contents(Request::file('avatar')->getRealPath())\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced YAML Options with Descriptions\nDESCRIPTION: Demonstrates defining options with additional descriptions for radio lists, where each option includes a label and description.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/define-options.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    all: [All, Guests and customers will be able to access this page.]\n    registered: [Registered only, Only logged in member will be able to access this page.]\n    guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Extending Relation Widget Refresh Results in PHP for OctoberCMS\nDESCRIPTION: This method allows injecting additional containers when the view widget is refreshed. It checks if the field matches the expected one and returns an array with extra values to send to the browser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendRefreshResults($field)\n{\n    // Make sure the field is the expected one\n    if ($field !== 'myField') {\n        return;\n    }\n\n    return ['#myCounter' => 'Total records: 6'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using str_replace Filter in Twig\nDESCRIPTION: Demonstrates the str_replace filter, which replaces all occurrences of a search string with a replacement string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Alice'|str_replace('Alice', 'Bob') }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values using Config Facade in PHP\nDESCRIPTION: Demonstrates how to use the Config facade to access configuration values, including specifying a default value if the configuration parameter doesn't exist.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/file-settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$maxItems = Config::get('acme.demo::maxItems', 50);\n```\n\n----------------------------------------\n\nTITLE: Accessing Revision History in October CMS\nDESCRIPTION: Demonstrates how to access and iterate through a model's revision history records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$history = User::find(1)->revision_history;\n\nforeach ($history as $record) {\n    echo $record->field . ' updated ';\n    echo 'from ' . $record->old_value;\n    echo 'to ' . $record->new_value;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing and Returning Last Item from Collection in PHP\nDESCRIPTION: The pop method removes and returns the last item from the collection. It modifies the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->pop();\n\n// 5\n\n$collection->all();\n\n// [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Using array_dot() Function in PHP\nDESCRIPTION: The array_dot function flattens a multi-dimensional array into a single level array using 'dot' notation to indicate depth. This is useful for accessing nested array values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$array = array_dot(['foo' => ['bar' => 'baz']]);\n\n// ['foo.bar' => 'baz'];\n```\n\n----------------------------------------\n\nTITLE: Array Building with collect() Function\nDESCRIPTION: Using collect() function to create a collection object and push elements into it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = collect() %}\n{% for item in items %}\n    {% do array.push({ title: item.title, ... }) %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Basic Variable Output in Twig\nDESCRIPTION: Demonstrates how to output template variables using double curly brackets syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable }}\n```\n\n----------------------------------------\n\nTITLE: Placeholder Existence Check\nDESCRIPTION: Using hasPlaceholder() function to check if placeholder content exists and generate conditional markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasPlaceholder('sidemenu') %}\n    <!-- Markup for a page with a sidebar -->\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            {% placeholder sidemenu %}\n        </div>\n        <div class=\"col-md-9\">\n            {% page %}\n        </div>\n    </div>\n{% else %}\n    <!-- Markup for a page without a sidebar -->\n    {% page %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Image Resizer Options Configuration in YAML\nDESCRIPTION: YAML configuration showing how to set resizer options for an image column, specifically setting image quality to 80.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-image.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    options:\n        quality: 80\n```\n\n----------------------------------------\n\nTITLE: PHP Link Object Resolution\nDESCRIPTION: Demonstrates how to resolve page links to PageLookupItem objects using the PageManager class in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/link.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$page = Cms\\Classes\\PageManager::resolve('october://cms-page@link/about');\n\necho $page->url;\n```\n\n----------------------------------------\n\nTITLE: Registering Laravel Package Aliases and Service Providers\nDESCRIPTION: Example of registering Laravel package aliases and service providers in an October CMS plugin. This code should be placed in the plugin's register() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function register()\n{\n    // Register the aliases provided by the packages used by your plugin\n    App::registerClassAlias('Purifier', \\Mews\\Purifier\\Facades\\Purifier::class);\n\n    // Register the service providers provided by the packages used by your plugin\n    App::register(\\Mews\\Purifier\\PurifierServiceProvider::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Getting File Last Modified Time (PHP)\nDESCRIPTION: Example of retrieving the UNIX timestamp of when a file was last modified using the lastModified method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$time = Storage::lastModified('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Header-Only Abort in Twig\nDESCRIPTION: Shows how to set an HTTP status code in the header without modifying the response content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/abort.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(404, false) %}\n```\n\n----------------------------------------\n\nTITLE: Using trace_sql() Debugging Helper in PHP\nDESCRIPTION: The trace_sql function enables database logging and begins to monitor all SQL output. This is invaluable for debugging database queries and optimizing database operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\ntrace_sql();\n\nDb::table('users')->count();\n\n// select count(*) as aggregate from users\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin in October CMS\nDESCRIPTION: The 'plugin:install' command downloads and installs a plugin by its name. Additional options allow installing from remote sources and specifying versions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git --want=dev-develop\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git --oc\n```\n\n----------------------------------------\n\nTITLE: Extending the Records Collection\nDESCRIPTION: Shows how to modify the collection of records used by the list by overriding the listExtendRecords method to apply custom sorting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\npublic function listExtendRecords($records)\n{\n    return $records->sort(function ($a, $b) {\n        return $a->computedVal() > $b->computedVal();\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Repeater Fields in October CMS\nDESCRIPTION: Demonstrates repeater field implementation with nested fields and its various rendering options including PHP array structure and YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n{repeater name=\"content_sections\" prompt=\"Add another content section\"}\n    <h2>{text name=\"title\" label=\"Title\"}Title{/text}</h2>\n    <p>{textarea name=\"content\" label=\"Content\"}Content{/textarea}</p>\n{/repeater}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for fields in repeater %}\n    <h2>{{ fields.title }}</h2>\n    <p>{{ fields.content|raw }}</p>\n{% endfor %}\n```\n\nLANGUAGE: php\nCODE:\n```\n'repeater' => [\n    'label' => 'Website name',\n    'type' => 'repeater',\n    'fields' => [\n\n        'title' => [\n            'label' => 'Title',\n            'default' => 'Title',\n            'type' => 'text'\n        ],\n        'content' => [\n            'label' => 'Content',\n            'default' => 'Content',\n            'type' => 'textarea'\n        ]\n\n    ]\n]\n```\n\nLANGUAGE: html\nCODE:\n```\n{variable name=\"sections\" type=\"repeater\" prompt=\"Add another section\" tab=\"Sections\"\n        groups=\"$/author/plugin/repeater_fields.yaml\"}{/variable}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nquote:\n    name: Quote\n    description: Quote item\n    icon: icon-quote-right\n    fields:\n        quote_position:\n            span: auto\n            label: Quote Position\n            type: radio\n            options:\n                left: Left\n                center: Center\n                right: Right\n        quote_content:\n            span: auto\n            label: Details\n            type: textarea\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Value with config() in Twig\nDESCRIPTION: This snippet demonstrates how to use the config() function in a Twig template to retrieve the value of the 'app.locale' configuration setting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/config.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ config('app.locale') }}\n```\n\n----------------------------------------\n\nTITLE: Relation Behavior Configuration in YAML\nDESCRIPTION: Example YAML configuration for relation behavior showing view and manage options for invoice items\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nitems:\n    label: Invoice Line Item\n    view:\n        list: $/acme/pay/models/invoiceitem/columns.yaml\n        toolbarButtons: create|delete\n    manage:\n        form: $/acme/pay/models/invoiceitem/fields.yaml\n        recordsPerPage: 10\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Filters in Twig\nDESCRIPTION: Shows how to apply multiple filters in succession to a single variable or string in Twig, allowing for complex transformations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'October Glory'|upper|replace({'October': 'Morning'}) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Flash Messages in HTML Forms\nDESCRIPTION: Demonstrates how to include a custom flash message partial in an HTML form and update it using AJAX. This allows for more flexibility in displaying flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<form>\n    {% ajaxPartial 'flash-messages' %}\n\n    <label>Title</label>\n    <input name=\"title\" />\n\n    <button\n        data-request=\"onSave\"\n        data-request-update=\"{ flash-messages: true }\">\n        Save\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Limiting HTML Content Length with html_limit()\nDESCRIPTION: Shows how to limit HTML content to a specific length while maintaining proper tag handling. This ensures HTML is not broken when truncated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Post content...</p>', 100) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Asset Variables in YAML\nDESCRIPTION: Example of defining an asset variable in the theme.yaml file for use with combined assets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nform:\n    fields:\n        # [...]\n\n        link_color:\n            label: Link color\n            type: colorpicker\n            assetVar: 'link-color'\n```\n\n----------------------------------------\n\nTITLE: Getting Last Modified Time\nDESCRIPTION: Example of how to get the last modified time of a file as a UNIX timestamp.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$time = Storage::lastModified('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Blocks in Twig\nDESCRIPTION: This snippet illustrates how to pass variables to a content block using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'welcome.htm' name='John' %}\n```\n\n----------------------------------------\n\nTITLE: Create View Implementation in PHP\nDESCRIPTION: Example of a create view file implementing form rendering and save buttons with AJAX handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'd-flex flex-column h-100']) ?>\n\n    <div class=\"flex-grow-1\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div data-control=\"loader-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"{ close: true }\"\n                data-request-message=\"Creating Category...\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                class=\"btn btn-default\">\n                Create and Close\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Using the pop() Method in PHP Collections\nDESCRIPTION: The pop method removes and returns the last item from the collection, modifying the original collection. Similar to PHP's array_pop function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->pop();\n\n// 5\n\n$collection->all();\n\n// [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Seeding a Theme Using Artisan Command in October CMS\nDESCRIPTION: These Bash commands demonstrate how to seed a theme using the Artisan CLI in October CMS. The first command seeds a theme normally, while the second uses the --root option to import blueprints into the root directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/seeding-themes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:seed <theme name>\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:seed <theme name> --root\n```\n\n----------------------------------------\n\nTITLE: Creating Checkboxes and Radio Buttons\nDESCRIPTION: Example demonstrating how to generate checkbox and radio button input fields with their values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::checkbox('name', 'value') ?>\n\n<?= Form::radio('name', 'value') ?>\n```\n\n----------------------------------------\n\nTITLE: PHP Page Type Registration Example\nDESCRIPTION: Example of registering new page types with and without nested subitems support\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('cms.pageLookup.listTypes', function() {\n    return [\n        'blog-post' => 'Blog Post'\n    ];\n});\n\nEvent::listen('cms.pageLookup.listTypes', function() {\n    return [\n        'blog-posts' => ['All Blog Posts', true]\n    ];\n});\n```\n\n----------------------------------------\n\nTITLE: Using DateTime for Cache Expiration in PHP\nDESCRIPTION: Example of using a DateTime instance (Carbon) to specify cache expiration time instead of seconds.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$expiresAt = Carbon::now()->addMinutes(10);\n\nCache::put('key', 'value', $expiresAt);\n```\n\n----------------------------------------\n\nTITLE: Pivot Data Column and Field Configuration\nDESCRIPTION: YAML configuration showing how to reference pivot data in list columns and form fields for a teams relationship, including team color stored in the pivot table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\nteams:\n    label: Âõ¢Èòü\n    view:\n        list:\n            columns:\n                name:\n                    label: ÂêçÁß∞\n                pivot[team_color]:\n                    label: Âõ¢ÈòüÈ¢úËâ≤\n    manage:\n        list:\n            columns:\n                name:\n                    label: ÂêçÁß∞\n    pivot:\n        form:\n            fields:\n                pivot[team_color]:\n                    label: Âõ¢ÈòüÈ¢úËâ≤\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections with diff(), diffAssoc(), and diffKeys()\nDESCRIPTION: These methods compare collections against other collections or arrays. diff() compares values, diffAssoc() compares key-value pairs, and diffKeys() compares keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$diff = $collection->diff([2, 4, 6, 8]);\n\n$diff->all();\n\n// [1, 3, 5]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    'color' => 'orange',\n    'type' => 'fruit',\n    'remain' => 6\n]);\n\n$diff = $collection->diffAssoc([\n    'color' => 'yellow',\n    'type' => 'fruit',\n    'remain' => 3,\n    'used' => 6,\n]);\n\n$diff->all();\n\n// ['color' => 'orange', 'remain' => 6]\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    'one' => 10,\n    'two' => 20,\n    'three' => 30,\n    'four' => 40,\n    'five' => 50,\n]);\n\n$diff = $collection->diffKeys([\n    'two' => 2,\n    'four' => 4,\n    'six' => 6,\n    'eight' => 8,\n]);\n\n$diff->all();\n\n// ['one' => 10, 'three' => 30, 'five' => 50]\n```\n\n----------------------------------------\n\nTITLE: Listing Deferred Bindings in PHP\nDESCRIPTION: Shows how to retrieve all records including deferred bindings using the withDeferred method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_73\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->withDeferred($sessionKey)->get();\n```\n\n----------------------------------------\n\nTITLE: Intersecting Collections by Keys with intersectByKeys() in PHP\nDESCRIPTION: The intersectByKeys method removes keys from the original collection that are not present in the given array or collection. It maintains the values from the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'serial' => 'UX301', 'type' => 'screen', 'year' => 2009\n]);\n\n$intersect = $collection->intersectByKeys([\n    'reference' => 'UX404', 'type' => 'tab', 'year' => 2011\n]);\n\n$intersect->all();\n\n// ['type' => 'screen', 'year' => 2009]\n```\n\n----------------------------------------\n\nTITLE: Primary Navigation Link in PHP\nDESCRIPTION: Example of creating a primary action button in navigation using itemType property set to 'primary'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'people_create' => [\n    'label' => 'New Person',\n    'icon' => 'icon-plus',\n    'url' => Backend::url('acme/blog/people/create'),\n    'itemType' => 'primary',\n],\n```\n\n----------------------------------------\n\nTITLE: Throwing Validation Exceptions in PHP AJAX Handler\nDESCRIPTION: PHP code for an AJAX handler that throws a ValidationException to indicate field validation errors that will be displayed in the form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmit()\n{\n    throw new ValidationException(['name' => 'You must give a name!']);\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Version Update Example in YAML\nDESCRIPTION: Shows a simple version update without any migration scripts, containing only a comment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: ‰∏ç‰ΩøÁî®Êõ¥Êñ∞ËÑöÊú¨ÁöÑÂçï‰∏™Ê≥®Èáä„ÄÇ\n```\n\n----------------------------------------\n\nTITLE: Handler Method Form\nDESCRIPTION: Shows how to create a form that points to handler methods in pages or components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['request' => 'onSave'])\n```\n\n----------------------------------------\n\nTITLE: File Display Response\nDESCRIPTION: Examples of displaying files directly in the browser instead of downloading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::file($pathToFile);\n\nreturn Response::file($pathToFile, $headers);\n```\n\n----------------------------------------\n\nTITLE: Removing Backend Menu Items in OctoberCMS (PHP)\nDESCRIPTION: This code snippet shows how to remove menu items from the backend in OctoberCMS. It uses an event listener to remove individual main menu and side menu items, as well as multiple side menu items at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n\n    $manager->removeMainMenuItem('October.Cms', 'cms');\n    $manager->removeSideMenuItem('October.Cms', 'cms', 'pages');\n\n    $manager->removeSideMenuItems('October.Cms', 'cms', [\n        'pages',\n        'partials'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Theme ID in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'id' property of 'this.theme' to generate a CSS class name based on the theme directory name. It converts the theme directory name to a CSS friendly identifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"theme-{{ this.theme.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Defining a Placeholder with Custom Attributes in Twig\nDESCRIPTION: Illustrates how to define a placeholder with custom title and type attributes for additional functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering title=\"Ordering information\" type=\"text\" %}\n```\n\n----------------------------------------\n\nTITLE: Using View Templates for Partial Column in OctoberCMS YAML\nDESCRIPTION: Demonstrates how to use a view template code as the 'path' to access view service templates inside the plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-partial.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: acme.blog::listcolumns.content\n```\n\n----------------------------------------\n\nTITLE: Extracting Collection Keys with keys() Method in PHP\nDESCRIPTION: The keys method returns all the collection's keys as a new collection. This is useful for retrieving or analyzing the keys independently of their values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'prod-100' => ['product_id' => 'prod-100', 'name' => 'Chair'],\n    'prod-200' => ['product_id' => 'prod-200', 'name' => 'Desk'],\n]);\n\n$keys = $collection->keys();\n\n$keys->all();\n\n// ['prod-100', 'prod-200']\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependency Definition\nDESCRIPTION: Example showing how to define plugin dependencies in the registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    /**\n     * @var array require these plugins\n     */\n    public $require = ['Acme.User'];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Dimension Fields\nDESCRIPTION: Implementation of dimension field registration for additional product data including brand and category information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$this->registerDimension(new ReportDimension(\n    self::DIMENSION_PRODUCT,\n    'acme_shop_products.id',\n    'Product',\n    'product_name'\n))->addDimensionField(new ReportDimensionField(\n    'oc_field_brand',\n    'Brand',\n    'brand',\n    true,\n    true\n))->addDimensionField(new ReportDimensionField(\n    'oc_field_category',\n    'Category',\n    'acme_shop_categories.category_name',\n    true,\n    true\n));\n```\n\n----------------------------------------\n\nTITLE: Component onRender Method Implementation\nDESCRIPTION: PHP implementation of the onRender method to handle component properties before rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function onRender()\n{\n    // This code will be executed before the default component\n    // markup is rendered on the page or layout.\n\n    $this->page['var'] = 'Maximum items allowed: ' . $this->property('maxItems');\n}\n```\n\n----------------------------------------\n\nTITLE: Halting Event Propagation in PHP\nDESCRIPTION: Shows how to stop event propagation by returning false from an event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('auth.login', function($event) {\n    // Handle the event\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Binding for File Attachment in PHP\nDESCRIPTION: Demonstrates using deferred binding to delay the association of a file attachment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$fileFromPost = Input::file('example_file');\n\nif ($fileFromPost) {\n    $post->featured_image()->create(['data' => $fileFromPost], $sessionKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Hello World Control Example\nDESCRIPTION: Full example demonstrating a basic form control with name input and greeting functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"hello-world\">\n    <input type=\"text\" class=\"name\" />\n\n    <button class=\"greet\">\n        Greet\n    </button>\n\n    <span class=\"output\">\n    </span>\n</div>\n\n<script>\noc.registerControl('hello-world', class extends oc.ControlBase {\n    init() {\n        this.$name = this.element.querySelector('input.name');\n        this.$output = this.element.querySelector('span.output');\n    }\n\n    connect() {\n        this.listen('click', 'button.greet', this.onGreet);\n    }\n\n    onGreet() {\n        this.$output.textContent = `Hello, ${this.$name.value}!`;\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using array_undot() Function in PHP\nDESCRIPTION: The array_undot function is the counter-part to array_dot, converting a dot-notated array back into a standard multi-dimensional associative array. This reverses the flattening process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$array = array_undot([\n    'foo.bar' => 'baz'\n]);\n\n// [\n//    'foo' => [\n//        'bar' => 'baz'\n//    ]\n// ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Content Blocks\nDESCRIPTION: This example shows how to access variables passed to a content block using basic curly bracket syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/content.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>This is a demo for {name}</h1>\n```\n\n----------------------------------------\n\nTITLE: Global Event Listening for Media Manager in OctoberCMS\nDESCRIPTION: This PHP snippet demonstrates how to listen for Media Manager events globally using the Event facade in OctoberCMS. It shows how to handle the 'file.rename' event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('media.file.rename', function($widget, $originalPath, $newPath) {\n    // Update custom references to path here\n});\n```\n\n----------------------------------------\n\nTITLE: Registering Report Widgets\nDESCRIPTION: PHP code demonstrating how to register report widgets in the plugin registration class with their configurations and permissions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficOverview::class => [\n            'label' => 'Google Analytics traffic overview',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanalytics.widgets.traffic_overview',\n            ],\n        ],\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficSources::class => [\n            'label' => 'Google Analytics traffic sources',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanaltyics.widgets.traffic_sources',\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Worker Cron Job Configuration\nDESCRIPTION: Sets up a cron job to process a single queued job using the queue:work command with the --once flag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/scheduler.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * php /october/artisan queue:work --once >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request URI\nDESCRIPTION: Shows how to get the current request path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$uri = Request::path();\n```\n\n----------------------------------------\n\nTITLE: Importing Twig Macros from Theme Partial\nDESCRIPTION: Shows how to import macros from a theme partial file. The example imports macros from a file named macros/form.htm.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% import 'macros/form' as form %}\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Menu Items\nDESCRIPTION: Example showing how to modify backend menu items by listening to the backend.menu.extendItems event to replace labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n\n    // Ê∑ªÂä†‰∏ªËèúÂçïÈ°π\n    $manager->addMainMenuItems('October.Cms', [\n        'cms' => [\n            'label' => '...'\n        ]\n    ]);\n\n    // Ê∑ªÂä†‰æßËæπËèúÂçïÈ°π\n    $manager->addSideMenuItems('October.Cms', 'cms', [\n        'pages' => [\n            'label' => '...'\n        ]\n    ]);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Radio Options in PHP\nDESCRIPTION: PHP method for dynamically generating radio list options with descriptions. This method returns an array of arrays where each inner array contains a label and description for the option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-radio.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function listAccessLevels($fieldName, $value, $formData)\n{\n    return [\n        'all' => ['All', 'Guests and customers will be able to access this page.'],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in OctoberCMS Plugin Registration\nDESCRIPTION: This snippet demonstrates how to register a console command in an OctoberCMS plugin's registration file using the registerConsoleCommand helper method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Blog extends PluginBase\n{\n    public function pluginDetails()\n    {\n        // ...\n    }\n\n    public function register()\n    {\n        $this->registerConsoleCommand('acme.mycommand', \\Acme\\Blog\\Console\\MyConsoleCommand::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Model Validation through Events\nDESCRIPTION: Example showing how to add custom validation to a model by hooking into the beforeValidate event and throwing a ValidationException.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.beforeValidate', function () use ($model) {\n        if (!$model->billing_first_name) {\n            throw new \\ValidationException(['billing_first_name' => 'ÂêçÂ≠ó‰∏∫ÂøÖÂ°´È°π']);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Current URL without Adding to History in JavaScript\nDESCRIPTION: Shows how to replace the current URL without adding it to the browser's navigation history, similar to window.history.replaceState. This is done by setting the 'action' option to 'replace'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noc.visit(location, { action: 'replace' });\n```\n\n----------------------------------------\n\nTITLE: Preview Page Configuration in YAML\nDESCRIPTION: Basic configuration for the preview page functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Handler for Fetching Results in PHP\nDESCRIPTION: Simple PHP handler that defines an AJAX endpoint to load results into a page variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/polling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onFetchResults()\n{\n    $this['results'] = [1, 2, 3];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File for October CMS\nDESCRIPTION: Example of setting environment variables in the .env file to override plugin configuration values at runtime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/file-settings.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nACME_TODO_MAX_ITEMS=10\n```\n\n----------------------------------------\n\nTITLE: Extending Rich Editor Asset Loading in PHP\nDESCRIPTION: Shows how to extend the RichEditor class to add custom JavaScript assets. This is useful when adding custom functionality to the editor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\FormWidgets\\RichEditor::extend(function($controller) {\n    $controller->addJs('/plugins/october/test/assets/js/custom-button.js');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Empty Collections with Else in Twig For Loop\nDESCRIPTION: Demonstrates how to provide fallback content when a collection is empty using the else tag within a for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}</li>\n    {% else %}\n        <li><em>There are no users found</em></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Form Options in Import Model\nDESCRIPTION: Example showing how to access custom form field values inside the importData method of an import model. Form fields defined in fields.yaml become properties of the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-model.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    public function importData($results, $sessionKey = null)\n    {\n        if ($this->auto_create_lists) {\n            // Do something\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Field with Custom Method in YAML\nDESCRIPTION: Defines a dropdown select field in a form using YAML configuration. The 'type' property is set to 'dropdown' and specifies a custom method 'listStatuses' to provide options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options: listStatuses\n```\n\n----------------------------------------\n\nTITLE: Using Language-Based Validation Messages\nDESCRIPTION: Shows how to use language-based validation messages with the Validator::make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nValidator::make($formValues, $validations, Lang::get('acme.blog::validation'));\n```\n\n----------------------------------------\n\nTITLE: PHP Equivalent of html_strip() in OctoberCMS\nDESCRIPTION: Shows the PHP equivalent of the html_strip() Twig function using the Html class in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Html::strip() ?>\n```\n\n----------------------------------------\n\nTITLE: Handling Task Output in PHP for October CMS Scheduler\nDESCRIPTION: This example shows how to send the output of a scheduled task to a file and then email it, using the sendOutputTo and emailOutputTo methods in the October CMS command scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$schedule->command('foo')\n    ->daily()\n    ->sendOutputTo($filePath)\n    ->emailOutputTo('foo@example.com');\n```\n\n----------------------------------------\n\nTITLE: Using str_finish() String Helper in PHP\nDESCRIPTION: The str_finish function adds a single instance of the given value to a string if it doesn't already end with that value. This is useful for ensuring strings end with a specific character like a slash.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$string = str_finish('this/string', '/');\n\n// this/string/\n```\n\n----------------------------------------\n\nTITLE: Applying |raw Filter to Prevent Variable Escaping in Twig\nDESCRIPTION: This snippet demonstrates how to use the |raw filter to output a variable without escaping in October CMS. The filter marks the value as 'safe' and prevents automatic escaping.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/raw.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# This variable won't be escaped #}\n{{ variable|raw }}\n```\n\n----------------------------------------\n\nTITLE: Extending List Columns Externally in PHP\nDESCRIPTION: Demonstrates how to extend list columns from outside the controller using the extendListColumns method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nCategories::extendListColumns(function($list, $model)\n{\n    if (!$model instanceof MyModel) {\n        return;\n    }\n\n    $list->addColumns([\n        'my_column' => [\n            'label' => 'My Column'\n        ]\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Keys with keys() Method in PHP\nDESCRIPTION: The keys() method returns all of the collection's keys as a new collection. This allows you to extract and work with just the keys of the collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'prod-100' => ['product_id' => 'prod-100', 'name' => 'Chair'],\n    'prod-200' => ['product_id' => 'prod-200', 'name' => 'Desk'],\n]);\n\n$keys = $collection->keys();\n\n$keys->all();\n\n// ['prod-100', 'prod-200']\n```\n\n----------------------------------------\n\nTITLE: Implementing Hashable Attributes in PHP Model\nDESCRIPTION: Shows how to use the Hashable trait to automatically hash specific attributes when they are set on the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Hashable;\n\n    /**\n     * @var array List of attributes to hash.\n     */\n    protected $hashable = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdown Lists with Selected Values\nDESCRIPTION: Example showing how to create a dropdown list with a pre-selected default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('size', ['L' => 'Large', 'S' => 'Small'], 'S') ?>\n```\n\n----------------------------------------\n\nTITLE: Firing an Event in PHP\nDESCRIPTION: Shows how to fire the auth.login event using the Event::fire method, passing the $user object as an argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('auth.login', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Prompting for Secret Input in Console Command\nDESCRIPTION: Shows how to prompt the user for secret input (like passwords) in a console command using the secret method. This hides the user's input as they type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$password = $this->secret('What is the password?');\n```\n\n----------------------------------------\n\nTITLE: Setting Date Range Constraints in Date Scope\nDESCRIPTION: YAML configuration for a date filter with minimum and maximum date constraints. This restricts users to selecting dates within the specified range.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n    minDate: '2001-01-23'\n    maxDate: '2030-10-13'\n```\n\n----------------------------------------\n\nTITLE: Concatenating Columns with Raw Expressions\nDESCRIPTION: Shows how to use raw expressions to concatenate columns or strings together, creating derived columns in the result set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nDb::raw(\"(first_name, ' ', last_name) as full_name\");\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in HTML Content Block\nDESCRIPTION: Demonstrates how to use a globally registered variable 'site_name' within an HTML content block.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/content.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>Welcome to {site_name}</p>\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereNotNull Method in PHP\nDESCRIPTION: The whereNotNull method filters a collection by keeping only the items where the specified key's value is not null.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_74\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk'],\n    ['name' => null],\n    ['name' => 'Bookcase'],\n]);\n\n$filtered = $collection->whereNotNull('name');\n\n$filtered->all();\n\n/*\n    [\n        ['name' => 'Desk'],\n        ['name' => 'Bookcase'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Shared Hosting Security Configuration\nDESCRIPTION: Environment settings for file and folder permissions in shared hosting environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nDEFAULT_FILE_MASK=644\nDEFAULTFOLDER_MASK=755\n```\n\n----------------------------------------\n\nTITLE: Retrieving Random Records with inRandomOrder\nDESCRIPTION: Demonstrates how to use inRandomOrder method to sort query results randomly, useful for selecting random items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$randomUser = Db::table('users')\n    ->inRandomOrder()\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text Emails in PHP\nDESCRIPTION: Demonstrates how to send plain text emails using the Mail::send method in October CMS, with options for HTML and text-only messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog:message', $data, $callback);\n\n// Send text-only email\nMail::send(['text' => 'acme.blog:text'], $data, $callback);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Creating Methods in October CMS\nDESCRIPTION: Example of how to dynamically add both properties and methods to an extendable class using addDynamicProperty and addDynamicMethod.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicProperty('tagsCache', null);\n\n    $model->addDynamicMethod('getTagsAttribute', function() use ($model) {\n        if ($this->tagsCache) {\n            return $this->tagsCache;\n        } else {\n            return $this->tagsCache = $model->tags()->lists('name');\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Column Type Registration in PHP\nDESCRIPTION: Demonstrates how to register custom list column types in the plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\npublic function registerListColumnTypes()\n{\n    return [\n        // A local method, i.e $this->evalUppercaseListColumn()\n        'uppercase' => [$this, 'evalUppercaseListColumn'],\n\n        // Using an inline closure\n        'loveit' => function($value) { return 'I love '. $value; }\n    ];\n}\n\npublic function evalUppercaseListColumn($value, $column, $record)\n{\n    return strtoupper($value);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Short Syntax __ Filter for Pluralization in Twig\nDESCRIPTION: Demonstrates the use of the __ filter as a shorter syntax alternative to |trans_choice for pluralization with parameters in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/trans.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ '{1} :value minute ago|[2,*] :value minutes ago'|__(1, { value: 1 }) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Relation Manager in OctoberCMS PHP\nDESCRIPTION: PHP code snippets showing how to render a relation manager on a page, including an example with read-only mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->formRenderPreview() ?>\n\n<?= $this->relationRender('comments') ?>\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->relationRender('comments', ['readOnly' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Email Validation in PHP Model\nDESCRIPTION: Implementation of email validation rules in a PHP model using the $rules property for server-side validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-email.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic $rules = [\n    'user_email' => ['email'],\n];\n```\n\n----------------------------------------\n\nTITLE: Using every Method in PHP Collections\nDESCRIPTION: The every method creates a new collection consisting of every n-th element from the original collection, with an optional offset parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->every(4);\n\n// ['a', 'e']\n\n$collection->every(4, 1);\n\n// ['b', 'f']\n```\n\n----------------------------------------\n\nTITLE: Repeater Field with File Upload Configuration\nDESCRIPTION: YAML definition for a repeater field with title, switch, and file upload capabilities.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    form:\n        fields:\n            title:\n                label: title\n            is_enabled:\n                label: Enabled\n                type: switch\n            photos:\n                label: Photos\n                type: fileupload\n                mode: image\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Services in October CMS\nDESCRIPTION: PHP configuration code for the Postmark services in the config/services.php file. Sets up the Postmark token from environment variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'postmark' => [\n    'token' => env('POSTMARK_TOKEN'),\n],\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Templates via Environment Variable in October CMS\nDESCRIPTION: Configuration setting to globally enable database-driven themes for all themes in October CMS using an environment variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/database-themes.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCMS_DB_TEMPLATES=true\n```\n\n----------------------------------------\n\nTITLE: Joining Collection Values with implode() Method in PHP\nDESCRIPTION: The implode() method joins the items in a collection. For arrays/objects, it requires a key attribute and a glue string. For simple values, only the glue string is needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['account_id' => 1, 'product' => 'Chair'],\n    ['account_id' => 2, 'product' => 'Desk'],\n]);\n\n$collection->implode('product', ', ');\n\n// Chair, Desk\n```\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4, 5])->implode('-');\n\n// '1-2-3-4-5'\n```\n\n----------------------------------------\n\nTITLE: Sharing Data Across All Views in PHP\nDESCRIPTION: Shows how to share a piece of data across all views using the View::share method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nView::share('name', 'Steve');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query String Name for Pagination in PHP\nDESCRIPTION: Shows how to use a custom query string parameter name for pagination instead of the default 'page' parameter using paginateCustom and simplePaginateCustom methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$recordsPerPage = 15;\n\n$users = Db::table('users')->paginateCustom($recordsPerPage, 'secondPage');\n\n$users = Db::table('users')->simplePaginateCustom($recordsPerPage, 'secondPage');\n```\n\n----------------------------------------\n\nTITLE: Checking if File Exists in October CMS\nDESCRIPTION: Example of checking if a file exists on a disk using the exists method. This shows how to check an S3 disk specifically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$exists = Storage::disk('s3')->exists('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Flashing Input with Redirects in PHP\nDESCRIPTION: Examples of chaining input flashing with redirects to maintain input data across requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('form')->withInput();\n\nreturn Redirect::to('form')->withInput(Input::except('password'));\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in PHP and Twig Sections\nDESCRIPTION: Demonstrates different methods of setting and accessing variables in both PHP and Twig sections of a CMS template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/themes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Write via array\n$this['foo'] = 'bar';\n\n// Read via array\necho $this['foo'];\n\n// Read-only via object\necho $this->foo;\n```\n\n----------------------------------------\n\nTITLE: Finding a Backend User by Login Name in October CMS\nDESCRIPTION: Demonstrates how to look up a user by their login name using the BackendAuth::findUserByLogin method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/users.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user = BackendAuth::findUserByLogin('someuser');\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variable with env() in Twig\nDESCRIPTION: This example demonstrates the use of the env() function in a Twig template to access the 'APP_ENV' environment variable, with a default value of 'production' if the variable is not set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/config.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ env('APP_ENV', 'production') }}\n```\n\n----------------------------------------\n\nTITLE: Triggering 404 Errors in October CMS Routes\nDESCRIPTION: Example of manually triggering a 404 error from a route using the App::abort helper.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(404);\n```\n\n----------------------------------------\n\nTITLE: Model Accessor for List Column Display in PHP\nDESCRIPTION: Demonstrates creating a PHP model accessor to modify the display value of a list column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusLabelAttribute()\n{\n    return title_case($this->status_code);\n}\n```\n\n----------------------------------------\n\nTITLE: Checking User Permission Access in PHP\nDESCRIPTION: Example code demonstrating how to check if the current backend user has permission to access a specific area using the BackendAuth::userHasAccess method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Returns true if the user has permission\n$permissionGranted = BackendAuth::userHasAccess('utilities.logs');\n```\n\n----------------------------------------\n\nTITLE: Generating Media URL with |media Filter in Twig\nDESCRIPTION: Demonstrates how to use the |media filter in a Twig template to generate a URL for an image file stored in the media manager. This filter returns an address relative to the public path of the media manager library.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-media.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media }}\" />\n```\n\n----------------------------------------\n\nTITLE: HTML View File Example for October CMS Backend\nDESCRIPTION: Demonstrates a simple HTML view file that would correspond to the index action method in a controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<h1>Hello World</h1>\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Field Filtering in PHP Model Class\nDESCRIPTION: Example of implementing the filterFields() method in a model class to dynamically show/hide form fields based on the source_type attribute. The method takes a fields object and context parameter, allowing conditional manipulation of field visibility.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($this->source_type == 'http') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = true;\n    }\n    elseif ($this->source_type == 'git') {\n        $fields->source_url->hidden = false;\n        $fields->git_branch->hidden = false;\n    }\n    else {\n        $fields->source_url->hidden = true;\n        $fields->git_branch->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced PHP Image Resizing with Options\nDESCRIPTION: Shows how to resize an image using PHP with custom width, height, and cropping options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nResizeImages::resize('path/to/asset.jpg', 800, 600, ['mode' => 'crop']);\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP Error Response\nDESCRIPTION: Example of using App::abort to generate an HTTP error response with a specific status code from anywhere in the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(404);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multisite Support in Settings Model\nDESCRIPTION: Example of extending a settings model to support multisite configuration by incorporating the Multisite trait and defining propagatable fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/model-settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Demo\\Models;\n\nclass UserSetting extends \\System\\Models\\SettingModel\n{\n    use \\October\\Rain\\Database\\Traits\\Multisite;\n\n    public $settingsCode = 'acme_demo_settings';\n\n    public $settingsFields = 'fields.yaml';\n\n    protected $propagatable = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Theme Publishing in October CMS\nDESCRIPTION: Minimum required JSON content for the composer.json file when publishing a theme in October CMS. The package name must end with -theme and include composer/installers as a dependency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/boilerplate-theme\",\n    \"type\": \"october-theme\",\n    \"description\": \"Enter a meaningful description here\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener with Custom Event Name in PHP\nDESCRIPTION: Illustrates how to subscribe to a custom event named acme.blog.myevent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('acme.blog.myevent', function($arg1, $arg2) {\n    // Do something\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugins Path in PHP\nDESCRIPTION: The plugins_path function returns the fully qualified path to the application plugin directory. It can also generate a path to a specific file within the plugins directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$path = plugins_path();\n\n$path = plugins_path('author/plugin/routes.php');\n```\n\n----------------------------------------\n\nTITLE: Binding a Widget to a Controller in PHP\nDESCRIPTION: Example of binding a widget to a backend controller in the constructor method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $myWidget = new MyWidgetClass($this);\n    $myWidget->alias = 'myWidget';\n    $myWidget->bindToController();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Custom Validation Messages in PHP\nDESCRIPTION: Shows how to define custom validation messages when creating a validator instance. The messages array allows overriding default validation messages using attribute placeholders.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'required' => 'The :attribute field is required.',\n];\n\n$validator = Validator::make($input, $rules, $messages);\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to an Existing Query\nDESCRIPTION: Shows how to add additional columns to an existing query using the addSelect() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$query = Db::table('users')->select('name');\n\n$users = $query->addSelect('age')->get();\n```\n\n----------------------------------------\n\nTITLE: Extending Media Manager with Class Extension Method\nDESCRIPTION: Demonstrates how to hook into Media Manager events by extending the Media\\Widgets\\MediaManager class directly, shown with a file.rename event example.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nMedia\\Widgets\\MediaManager::extend(function($widget) {\n    $widget->bindEvent('file.rename', function ($originalPath, $newPath) {\n        // Update custom references to path here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Invalidating Session using PHP\nDESCRIPTION: Shows how to regenerate the session ID and remove all data from the session in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nSession::invalidate();\n```\n\n----------------------------------------\n\nTITLE: Form Opening with Request Handler\nDESCRIPTION: Shows how to specify an AJAX handler when opening a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ request: 'onUpdate' }) }}\n```\n\n----------------------------------------\n\nTITLE: Pausing Page Render Animation in JavaScript\nDESCRIPTION: Demonstrates how to pause the page:before-render event to animate elements before loading a new page. Uses async/await pattern to handle animation completion before resuming the render process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:before-render', async (event) => {\n    event.preventDefault();\n\n    await animateOut();\n\n    event.detail.resume();\n});\n```\n\n----------------------------------------\n\nTITLE: Committing Deferred Bindings on Save in PHP\nDESCRIPTION: Shows how to commit deferred bindings when saving a model by providing the session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post;\n$post->title = \"First blog post\";\n$post->save(['sessionKey' => $sessionKey]);\n```\n\n----------------------------------------\n\nTITLE: PHP Dynamic Options Method Implementation\nDESCRIPTION: Implementation of a method that dynamically provides filter options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getRoleGroupOptions()\n{\n    return $this->whereNull('parent_id')->pluck('name', 'id')->all();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Relationship for File Model in PHP\nDESCRIPTION: Shows how to define a polymorphic relationship for the File model to access its owner in PHP for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic $morphTo = [\n    'attachment' => []\n];\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination with Model Filters in PHP\nDESCRIPTION: Demonstrates using simplePaginate on a filtered model query for more efficient pagination when only next/previous navigation is needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Queueing Cookies for Future Responses in PHP\nDESCRIPTION: Demonstrates how to queue cookies to be attached to the final response from the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCookie::queue($name, $value, $minutes);\n```\n\n----------------------------------------\n\nTITLE: Moving Uploaded Files in October CMS\nDESCRIPTION: Examples of how to move an uploaded file to a destination path with or without specifying a filename.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nInput::file('photo')->move($destinationPath);\n\nInput::file('photo')->move($destinationPath, $fileName);\n```\n\n----------------------------------------\n\nTITLE: Event Listener with Priority in PHP\nDESCRIPTION: Demonstrates how to set priority for event listeners to control their execution order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Run first\nEvent::listen('auth.login', function() { ... }, 10);\n\n// Run second\nEvent::listen('auth.login', function() { ... }, 5);\n```\n\n----------------------------------------\n\nTITLE: Extending List Filter Query\nDESCRIPTION: Demonstrates how to modify the database query used by specific list filters by overriding the listFilterExtendQuery method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\npublic function listFilterExtendQuery($query, $scope)\n{\n    if ($scope->scopeName == 'status') {\n        $query->where('status', '<>', 'all');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting File Size in October CMS\nDESCRIPTION: Example of retrieving the size of a file in bytes using the size method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$size = Storage::size('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Behavior with YAML\nDESCRIPTION: Example YAML configuration for the relation behavior. Shows how to define a 'has-many' relationship for invoice items with custom labels, list configuration, and toolbar buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\nitems:\n    label: ÂèëÁ•®\n    view:\n        list: $/acme/pay/models/invoiceitem/columns.yaml\n        toolbarButtons: create|delete\n    manage:\n        form: $/acme/pay/models/invoiceitem/fields.yaml\n        recordsPerPage: 10\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment with Set Tag in Twig\nDESCRIPTION: Shows how to assign values to variables within templates using the set tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set activePage = 'blog' %}\n```\n\n----------------------------------------\n\nTITLE: Firing Global Events in October CMS\nDESCRIPTION: Example of firing global events using the Event service, which allows any part of the application to listen for specific actions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.post.beforePost', [$firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Inserting Nodes in October CMS Nested Tree Models\nDESCRIPTION: Shows how to insert new nodes into a nested tree structure as children of existing nodes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$child1 = $root->children()->create(['name' => 'Child 1']);\n\n// Alternative method for existing nodes\n$child2 = Category::create(['name' => 'Child 2']);\n$child2->makeChildOf($root);\n```\n\n----------------------------------------\n\nTITLE: Passing User Variables to Content in Twig\nDESCRIPTION: Shows how to pass user variables to content blocks\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" name=user.name %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table Columns in October CMS\nDESCRIPTION: Example of configuring columns for a data table widget in October CMS, defining ID and Name columns with validation rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    id:\n        type: string\n        title: ID\n        validation:\n            integer:\n                message: Please enter a number\n    name:\n        type: string\n        title: Name\n```\n\n----------------------------------------\n\nTITLE: Converting OctoberCMS Collections to Array\nDESCRIPTION: Shows how to convert a collection of models to an array format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\nreturn $users->toArray();\n```\n\n----------------------------------------\n\nTITLE: Using str_studly() Function for StudlyCase Conversion\nDESCRIPTION: Demonstrates the str_studly() function, which converts a string to StudlyCase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_studly('hello world') }}\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Variables in Twig\nDESCRIPTION: Filters modify variables for a single instance and are applied using a pipe symbol followed by the filter name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'string'|filter }}\n```\n\n----------------------------------------\n\nTITLE: Component with Custom Alias for Override Directory\nDESCRIPTION: This snippet demonstrates how to assign a custom alias to a component, which changes the override directory name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[channel foobar]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"foobar\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Horizontal Rule in October CMS Forms\nDESCRIPTION: A simple example showing how to add a horizontal rule to break up sections in an October CMS form. The ruler element requires only a field name (with underscore prefix) and the type declaration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-ruler.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_ruler1:\n    type: ruler\n```\n\n----------------------------------------\n\nTITLE: Configuring Fields with Dependencies in YAML\nDESCRIPTION: Shows how to define fields with dependencies on a source_type field that will trigger the filterFields method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsource_type:\n    label: Source Type\n    type: dropdown\n    options:\n        git: Git\n        http: Http\n        upload: Upload\n\nsource_url:\n    label: Source URL\n    type: text\n    dependsOn: source_type\n\ngit_branch:\n    label: Git Branch\n    type: text\n    dependsOn: source_type\n```\n\n----------------------------------------\n\nTITLE: Inline Radio List Options in YAML\nDESCRIPTION: Demonstrates how to configure radio list options to display horizontally instead of vertically using the inlineOptions property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-radio.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    inlineOptions: true\n```\n\n----------------------------------------\n\nTITLE: Generating Media URLs in PHP\nDESCRIPTION: Shows how to generate media URLs programmatically using the MediaLibrary class in PHP. Uses the url() method to generate paths to media assets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/media.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Media\\Classes\\MediaLibrary::url('relative/path/to/asset.jpg');\n```\n\n----------------------------------------\n\nTITLE: Throwing Validation Exception in PHP\nDESCRIPTION: Shows how to use the validate method to throw a ValidationException if validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$data = Validator::validate($data, $rules);\n```\n\n----------------------------------------\n\nTITLE: Export Model Definition in PHP\nDESCRIPTION: Example implementation of an export model class that extends Backend\\Models\\ExportModel to handle data export logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberExport extends \\Backend\\Models\\ExportModel\n{\n    public function exportData($columns, $sessionKey = null)\n    {\n        $subscribers = Subscriber::all();\n        $subscribers->each(function($subscriber) use ($columns) {\n            $subscriber->addVisible($columns);\n        });\n        return $subscribers->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flashed Input in October CMS\nDESCRIPTION: How to chain input flashing with a redirect to the previous page, making it easy to repopulate forms after validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('form')->withInput();\n\nreturn Redirect::to('form')->withInput(Input::except('password'));\n```\n\n----------------------------------------\n\nTITLE: Opening Form with Handler Methods\nDESCRIPTION: Demonstrates opening a form that points to handler methods in pages or components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['request' => 'onSave'])\n```\n\n----------------------------------------\n\nTITLE: Composable Partials Example\nDESCRIPTION: Demonstrates how to create composable partials with multiple content areas.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" image=\"img.jpg\" body %}\n    {% put header %}\n        <h2>This is the card header</h2>\n    {% endput %}\n    This is the card contents\n{% endpartial %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"header\">\n    <div class=\"image\">\n        <img src=\"{{ image }}\" />\n    </div>\n    {% placeholder header %}\n</div>\n<div class=\"body\">\n    {{ body|raw }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Calling Commands with Options from Console Command\nDESCRIPTION: Shows how to call other Artisan commands with options from within a console command. Options are passed as an associative array to the call method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$this->call('october:update', ['--force' => true]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached UNIX Socket Connection in PHP\nDESCRIPTION: Configuration array for setting up Memcached cache driver using a UNIX socket path instead of TCP/IP, with port set to 0.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    [\n        'host' => '/var/run/memcached/memcached.sock',\n        'port' => 0,\n        'weight' => 100\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Using Content Blocks with Layout Placeholders in Twig\nDESCRIPTION: Demonstrates how to combine content blocks with layout placeholders in OctoberCMS Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    {% content 'sidebar-content.htm' %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Storage Disks in PHP\nDESCRIPTION: Examples showing how to access specific disks using the disk method on the Storage facade and chaining methods for file operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$disk = Storage::disk('s3');\n\n$contents = Storage::disk('local')->get('file.jpg')\n```\n\n----------------------------------------\n\nTITLE: Form with Sidebar Layout Implementation\nDESCRIPTION: Complex example showing how to implement a form with sidebar layout using content blocks and layout execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/views-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<!-- Primary content -->\n<?php Block::put('form-contents') ?>\n    Main content\n<?php Block::endPut() ?>\n\n<!-- Complimentary sidebar -->\n<?php Block::put('form-sidebar') ?>\n    Side content\n<?php Block::endPut() ?>\n\n<!-- Layout execution -->\n<?php Block::put('body') ?>\n    <?= Form::open(['class'=>'layout stretch']) ?>\n        <?= $this->makeLayout('form-with-sidebar') ?>\n    <?= Form::close() ?>\n<?php Block::endPut() ?>\n```\n\n----------------------------------------\n\nTITLE: Using Content Blocks with Layout Placeholders in Twig\nDESCRIPTION: Demonstrates how to combine content blocks with layout placeholders in OctoberCMS themes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    {% content 'sidebar-content.htm' %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Implementing AJAX Controller Methods in PHP\nDESCRIPTION: Demonstrates the exception to PSR-2 standard allowing single underscore in controller method names for AJAX handlers in October CMS backend controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\npublic function index()\n{\n    // This is the index page (index action)\n}\n\npublic function index_onDoSomething()\n{\n    // AJAX handler only works on the index action\n}\n\npublic function onDoSomethingElse()\n{\n    // AJAX handler works globally for all actions\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Page Load Event Listener in JavaScript\nDESCRIPTION: Shows how to add an event listener for the page:loaded event, which is triggered after the initial page load and when a page is visited, waiting for all newly added scripts to load.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:loaded', function() {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using the shuffle() Method in PHP Collections\nDESCRIPTION: The shuffle method randomly reorders the items in the collection, returning a new collection with the shuffled order. Similar to PHP's shuffle function but non-destructive.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$shuffled = $collection->shuffle();\n\n$shuffled->all();\n\n// [3, 2, 5, 1, 4] (generated randomly)\n```\n\n----------------------------------------\n\nTITLE: Runtime Service Provider Registration\nDESCRIPTION: Shows how to register a service provider at runtime using the register() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nApp::register('FooServiceProvider');\n```\n\n----------------------------------------\n\nTITLE: Category Post Count Implementation\nDESCRIPTION: Example of counting related posts for categories using withCount.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% set categories = collection.withCount('posts').get() %}\n{% for category in categories %}\n    <h5>{{ category.title }} ({{ category.post_count }} posts)</h5>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Custom Placeholder Attributes\nDESCRIPTION: Using title and type attributes for customizing placeholder behavior and content handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering title=\"Ordering information\" type=\"text\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering default title=\"Ordering information\" type=\"text\" %}\n    There is no ordering information for this product.\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Component Partial\nDESCRIPTION: This snippet demonstrates how to render a custom component partial from a theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'blog-post' %}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Declaring Properties in Extendable Classes\nDESCRIPTION: Example demonstrating how to dynamically declare properties in extendable objects using addDynamicProperty method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicProperty('tagsCache', null);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Checkbox and Radio Inputs\nDESCRIPTION: Shows how to generate checkbox and radio button inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::checkbox('name', 'value') ?>\n\n<?= Form::radio('name', 'value') ?>\n```\n\n----------------------------------------\n\nTITLE: Using Basic Tags in Twig\nDESCRIPTION: Demonstrates the basic syntax for Twig tags, which are wrapped in {% %} characters and used to implement template logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% tag %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Select Column in October CMS List\nDESCRIPTION: Configuration for a select column which allows using a custom SQL SELECT statement to generate the column value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Views with fireViewEvent\nDESCRIPTION: Example showing how to create an extension point in a backend view file that allows other plugins to inject HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"footer-area-extension\">\n    <?= $this->fireViewEvent('backend.auth.extendSigninView', [$firstParam]) ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Recursive Merging of Collections in PHP\nDESCRIPTION: Shows how to use the mergeRecursive() method to combine collections recursively, merging nested arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->mergeRecursive(['product_id' => 2, 'price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n```\n\n----------------------------------------\n\nTITLE: Creating Traffic Sources Report Widget Partial in HTML\nDESCRIPTION: HTML markup for a pie chart widget that displays traffic sources. The markup includes the widget container, heading, and a chart element with data values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/report-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Traffic sources</h3>\n\n    <div\n        class=\"control-chart\"\n        data-control=\"chart-pie\"\n        data-size=\"200\"\n        data-center-text=\"180\">\n        <ul>\n            <li>Direct <span>1000</span></li>\n            <li>Social networks <span>800</span></li>\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Code-Based Keys in October CMS Theme Localization\nDESCRIPTION: Example of using code-based keys in a localization JSON file for theme-specific options, allowing for more structured and maintainable translations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/localization.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"theme.options.website_name\": \"October CMS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sortable Trait in PHP\nDESCRIPTION: This PHP code snippet shows how to use the Sortable trait in a model class to enable specific ordering of records without hierarchical relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/reorder.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending View Widget in OctoberCMS PHP\nDESCRIPTION: PHP method example for extending the view widget in a relation, showing how to modify widget properties based on model attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendViewWidget($widget, $field, $model)\n{\n    // Make sure the model and field matches those you want to manipulate\n    if (!$model instanceof MyModel || $field !== 'myField') {\n        return;\n    }\n\n    if ($model->constant) {\n        $widget->showCheckboxes = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTML Attributes for Linkage Column\nDESCRIPTION: Example showing how to add custom HTML attributes to the anchor element in a linkage column, such as opening links in a new tab.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-linkage.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwebsite:\n    label: Website\n    type: linkage\n    attributes:\n        target: _blank\n```\n\n----------------------------------------\n\nTITLE: Text Field with Placeholder in YAML\nDESCRIPTION: Illustrates setting up a text field with placeholder text that appears when the field is empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-text.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npoint_summary:\n    type: text\n    label: Point\n    placeholder: Type some key points are you trying to make\n```\n\n----------------------------------------\n\nTITLE: Collection Query Examples\nDESCRIPTION: Various query examples including filtering by color and author relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set bluePosts = posts.where('color', 'blue').get() %}\n\n{% set authorPosts = posts.whereRelation('author', 'slug', 'bella-vista').get() %}\n\n{% set featuredPosts = posts.where('content_group', 'featured_post').get() %}\n```\n\n----------------------------------------\n\nTITLE: External Configuration of Columns and Scopes in October CMS Tailor\nDESCRIPTION: Defining list columns and filter scopes separately from form fields in a blueprint. This approach allows for more customized control over different display contexts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nscopes:\n    myfield:\n        label: Filter Label\n        # [...]\n\ncolumns:\n    myfield:\n        label: List Label\n        # [...]\n\nfields:\n    myfield:\n        label: Form Label\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading AJAX Partial in Twig\nDESCRIPTION: Twig markup demonstrating how to implement lazy loading for AJAX partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/polling.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' lazy %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Attributes in OctoberCMS Model\nDESCRIPTION: Shows how to use the Nullable trait to set certain attributes to NULL when left empty in an OctoberCMS model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nclass Product extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Nullable;\n\n    /**\n        * @var array Nullable attributes.\n        */\n    protected $nullable = ['sku'];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating File Download Response in PHP\nDESCRIPTION: Demonstrates how to create a response that forces the user's browser to download a file, with options for custom filename and headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::download($pathToFile);\n\nreturn Response::download($pathToFile, $name, $headers);\n\nreturn Response::download($pathToFile)->deleteFileAfterSend(true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from Collections in PHP\nDESCRIPTION: The get method returns the item at a given key. If the key does not exist, null is returned. An optional default value or callback can be provided.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$value = $collection->get('name');\n\n// peter\n\n$value = $collection->get('foo', 'default-value');\n\n// default-value\n\n$collection->get('email', function () {\n    return 'default-value';\n});\n\n// default-value\n```\n\n----------------------------------------\n\nTITLE: View Response with Headers\nDESCRIPTION: Shows how to return a view response with custom headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::view('acme.blog::hello')->header('Content-Type', $type);\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Update Events in JavaScript\nDESCRIPTION: Demonstrates how to execute JavaScript code when the ajaxUpdate event is triggered on an element with the class 'calcresult'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n$('.calcresult').on('ajaxUpdate', function() {\n    console.log('Updated!');\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing All Session Data with this.session in Twig\nDESCRIPTION: Demonstrates how to remove all data from the session using the flush method. This completely empties the session of all stored values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-session.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.flush() }}\n```\n\n----------------------------------------\n\nTITLE: Registering Wildcard Static Functions\nDESCRIPTION: Example of registering wildcard Twig functions that map to multiple static methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'functions' => [\n    'url_*' => [Url::class, '*'],\n]\n```\n\n----------------------------------------\n\nTITLE: Localized Date Formatting in Twig\nDESCRIPTION: Shows how to format dates according to locale settings using formatLocalized().\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/carbon.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon(article.created_at).formatLocalized('%d.%m.%Y %H:%M:%S') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox and Checkbox List Fields in October CMS\nDESCRIPTION: Examples of configuring single checkboxes and checkbox lists with various options including quickselect functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: checkbox\n    default: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    # set to true to explicitly enable the \"Select All\", \"Select None\" options\n    # on lists that have <=10 items (>10 automatically enables it)\n    quickselect: true\n    default: open_account\n    options:\n        open_account: Open account\n        close_account: Close account\n        modify_account: Modify account\n```\n\n----------------------------------------\n\nTITLE: Responsive Video Source Template\nDESCRIPTION: Advanced Twig template for responsive video sources based on screen size.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<video controls>\n    <source\n        src=\"{{ src }}\"\n        media=\"only screen and (min-device-width: 568px)\"></source>\n    <source\n        src=\"{{ src|replace({'.mp4': '.iphone.mp4'}) }}\"\n        media=\"only screen and (max-device-width: 568px)\"></source>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Using str_pad_both Filter for Padding on Both Sides\nDESCRIPTION: Demonstrates the str_pad_both filter, which pads a string to a certain length with another string from both sides.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'xxx'|str_pad_both(7, 'o') }}\n```\n\n----------------------------------------\n\nTITLE: Removing a Column from Relation List\nDESCRIPTION: PHP method showing how to properly remove a column from a relation list widget by binding to the list.extendColumns event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendViewWidget($widget, $field, $model)\n{\n    // Make sure the model and field matches those you want to manipulate\n    if (!$model instanceof MyModel || $field != 'myField')\n        return;\n\n    // Will not work!\n    $widget->removeColumn('my_column');\n\n    // This will work\n    $widget->bindEvent('list.extendColumns', function () use($widget) {\n        $widget->removeColumn('my_column');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Redirect in Twig\nDESCRIPTION: Demonstrates conditional redirection to a CMS page using the redirect() function. This example redirects to a '404' page when a record is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/redirect.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if record.notFound %}\n    {% do redirect('404') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Record Finder Configuration in YAML\nDESCRIPTION: Basic configuration example for the recordfinder form widget that displays a user selection field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    list: ~/plugins/rainlab/user/models/user/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Halting Page Execution with a Response in onRun\nDESCRIPTION: Example showing how to return an early response from a component's onRun method to halt the page execution cycle with an access denied message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    if (true) {\n        return Response::make('Access denied!', 403);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Column in October CMS List\nDESCRIPTION: Configuration for a relation column which displays related data. Supports both displaying a related attribute and showing a count of related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ngroup:\n    label: Group\n    relation: groups\n    select: name\n```\n\nLANGUAGE: yaml\nCODE:\n```\nusers_count:\n    label: Users\n    relation: users\n    useRelationCount: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\ngroup_name:\n    label: Group\n    relation: group\n    select: name\n```\n\n----------------------------------------\n\nTITLE: Error Handling in HTTP Requests\nDESCRIPTION: Demonstrates various methods for checking HTTP response status and handling errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Status code is >= 200 and < 300\n$response->successful();\n\n// Status code is >= 400\n$response->failed();\n\n// Response has a 400 level status code\n$response->clientError();\n\n// Response has a 500 level status code\n$response->serverError();\n```\n\n----------------------------------------\n\nTITLE: Reverse Routing with URL Parameters in Twig\nDESCRIPTION: Shows how to use reverse routing with the |page filter by passing an array of URL parameters. This is useful for pages with defined URL parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page({ post_id: 10 }) }}\">\n    Blog post #10\n</a>\n```\n\n----------------------------------------\n\nTITLE: Customizing Filter Scope Visibility in PHP\nDESCRIPTION: This PHP method shows how to override the filterScopes method in a Model to manipulate the visibility of filter scopes based on other scope values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filters.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function filterScopes($scopes, $context = null)\n{\n    if ($scopes->disable_roles->value) {\n        $scopes->roles->hidden = true;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Form Field in YAML\nDESCRIPTION: Example configuration for a sensitive field widget showing common properties. Demonstrates setting visibility options and copy restrictions for sensitive data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-sensitive.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napi_secret:\n    type: sensitive\n    allowCopy: false\n    hideOnTabChange: true\n```\n\n----------------------------------------\n\nTITLE: Mail Pretend Mode Activation in PHP\nDESCRIPTION: Shows how to enable pretend mode for mail testing where messages are logged instead of sent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nMail::pretend();\n```\n\n----------------------------------------\n\nTITLE: Retrieving session data in October CMS Twig templates\nDESCRIPTION: Demonstrates how to retrieve data from the current session using the 'get' method. This method accesses a value from the session store by its key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-session.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.get('key') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Field in YAML\nDESCRIPTION: Basic configuration of a partial field in form definition. This example sets up a content field as a partial and specifies a custom path to the partial file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: field_content\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Controller Behavior in PHP\nDESCRIPTION: Example of implementing form behavior in a controller class by adding it to the $implement property and defining a $formConfig property that references a YAML configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = ['Backend.Behaviors.FormController'];\n\n    public $formConfig = 'config_form.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Class with Traits and Implementing Behaviors\nDESCRIPTION: Example showing how to extend a class that uses ExtendableTrait and implement a behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Classes;\n\nclass Robot extends AI\n{\n    public $implement = [\n        \\MyNamespace\\Behaviors\\WaveBehaviour::class\n    ];\n\n    public function identify()\n    {\n        echo \"ÊàëÊòØÊú∫Âô®‰∫∫<br>\";\n        echo $this->youGotBrains();\n        echo $this->wave();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Behavior Implementation Equivalent\nDESCRIPTION: Example showing the equivalent code for conditional behavior implementation with class existence check.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [];\n\n    public function __construct()\n    {\n        if (class_exists(\\RainLab\\Translate\\Behaviors\\TranslatableModel::class)) {\n            $this->implement[] = \\RainLab\\Translate\\Behaviors\\TranslatableModel::class;\n        }\n\n        parent::__construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown with Empty Option\nDESCRIPTION: Configuration demonstrating how to include a selectable empty option in a dropdown field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    emptyOption: -- no status --\n```\n\n----------------------------------------\n\nTITLE: Clean Markdown Processing with md_clean Filter\nDESCRIPTION: Demonstrates the |md_clean filter which provides more HTML support than md_safe while still sanitizing potentially dangerous code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/md.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<script>alert(1)</script>'|md_clean }}\n```\n\n----------------------------------------\n\nTITLE: Placeholder Implementation\nDESCRIPTION: Shows how to define and use placeholders in layouts and pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    ...\n</html>\n```\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/my-page\"\nlayout = \"default\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put head %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\">\n{% endput %}\n\n<p>The page content goes here.</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Flash Messages with Twig\nDESCRIPTION: Shows how to render inline flash messages using the flash Twig tag, which is necessary to display messages when browser redirects occur.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <p\n        data-control=\"flash-message\"\n        data-type=\"{{ type }}\"\n        data-interval=\"5\">\n        {{ message }}\n    </p>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Conditional Polling Implementation in Twig\nDESCRIPTION: Example of conditional polling that can be stopped based on a variable state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/polling.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if not launchDone %}\n    <div\n        data-request=\"onAjax\"\n        data-request-update=\"{ _self: true }\"\n        data-auto-submit=\"2000\"></div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Mutators in PHP Model\nDESCRIPTION: Example of overriding the $dates property to customize which attributes should be treated as dates and automatically converted to Carbon instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be mutated to dates.\n     *\n     * @var array\n     */\n    protected $dates = ['created_at', 'updated_at', 'disabled_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Values\nDESCRIPTION: Example demonstrating how to manually access form values using Form::value, which handles priority between session flash data, explicit values, and model attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<input type=\"text\" name=\"name\" value=\"<?= Form::value('name') ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Sub-domain Routing in October CMS\nDESCRIPTION: Example of using route groups to handle wildcard sub-domains, capturing portions of the sub-domain as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['domain' => '{account}.example.com'], function () {\n    Route::get('user/{id}', function ($account, $id) {\n        //\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Template with PHP Namespace Usage\nDESCRIPTION: Shows how to use PHP namespaces and define functions within a template's PHP section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/themes.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::get();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Template Structure with Configuration and PHP\nDESCRIPTION: Demonstrates the three-section template structure including configuration, PHP code, and Twig markup sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/themes.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['posts'] = [...];\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>Blog archive</h3>\n{% for post in posts %}\n    <h4>{{ post.title }}</h4>\n    {{ post.content }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Capturing Filter Values in PHP\nDESCRIPTION: Implementation of the getActiveValue method to capture and process filter form values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getActiveValue()\n{\n    if (post('clearScope')) {\n        return null;\n    }\n\n    if (!$this->hasPostValue('value')) {\n        return null;\n    }\n\n    return post('Filter');\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Events in a Component (PHP)\nDESCRIPTION: Example of how to declare both local and global events in a component class, making the component extensible by other code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass Topic extends ComponentBase\n{\n    public function onPost()\n    {\n        [...]\n\n        /*\n            * Extensibility\n            */\n        $this->fireEvent('topic.post', [$post, $postUrl]);\n        Event::fire('rainlab.forum.topic.post', [$this, $post, $postUrl]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving First Elements with first() and firstWhere()\nDESCRIPTION: These methods retrieve the first element in a collection. first() can use a truth test, while firstWhere() finds the first element with a given key/value pair.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nnew Collection([1, 2, 3, 4])->first(function ($value, $key) {\n    return $value > 2;\n});\n\n// 3\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect([\n    ['name' => 'Regena', 'age' => null],\n    ['name' => 'Linda', 'age' => 14],\n    ['name' => 'Diego', 'age' => 23],\n    ['name' => 'Linda', 'age' => 84],\n]);\n\n$collection->firstWhere('name', 'Linda');\n\n// ['name' => 'Linda', 'age' => 14]\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline Images with Absolute Paths for Queued Emails\nDESCRIPTION: Example of embedding an inline image with absolute path using the app filter, suitable for queued emails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image:\n    {% set pathToFile = 'storage/app/media/path/to/file.jpg'|app %}\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Appending Virtual Attributes to JSON in PHP\nDESCRIPTION: Demonstrates how to include accessor-defined virtual attributes in serialized output by adding them to the $appends property in the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The accessors to append to the model's array form.\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Trace Log Helper Functions in October CMS\nDESCRIPTION: Demonstrates the trace_log helper function, which is an alias for Log::info with support for using arrays and exceptions as the message. It simplifies logging.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// Write a string value\n$val = 'Hello world';\ntrace_log('The value is '.$val);\n\n// Dump an array value\n$val = ['Some', 'array', 'data'];\ntrace_log($val);\n\n// Trace an exception\ntry {\n    //\n}\ncatch (Exception $ex) {\n    trace_log($ex);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw Markup to {% scripts %} in Twig\nDESCRIPTION: Demonstrates how to inject raw markup to the {% scripts %} tag using the scripts anonymous placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% put scripts %}\n    <script type=\"text/javascript\" src=\"/themes/demo/assets/js/menu.js\"></script>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Widget in YAML\nDESCRIPTION: YAML configuration for a file upload widget that handles image or file uploads with support for image resizing and thumbnail generation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: fileupload\n    mode: image\n    imageHeight: 260\n    imageWidth: 260\n    thumbOptions:\n        mode: crop\n        offset:\n            - 0\n            - 0\n        quality: 90\n        sharpen: 0\n        interlace: false\n        extension: auto\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Variables in Twig\nDESCRIPTION: Shows the basic syntax for applying filters to modify variables in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'string'|filter }}\n```\n\n----------------------------------------\n\nTITLE: Paginating Collections with forPage()\nDESCRIPTION: The forPage() method returns a new collection containing the items that would be present on a given page number.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9])->forPage(2, 3);\n\n$collection->all();\n\n// [4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Enabling SQL Query Logging in October CMS\nDESCRIPTION: Shows how to use the trace_sql function to enable database logging. This logs every command sent to the database, but the logs only appear in the system.log file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ntrace_sql();\n\nDb::table('users')->count();\n\n// select count(*) as aggregate from users\n```\n\n----------------------------------------\n\nTITLE: Listing Directories in Storage\nDESCRIPTION: Examples showing how to get arrays of all directories within a given directory, with an option for recursive listing using allDirectories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$directories = Storage::directories($directory);\n\n// Recursive...\n$directories = Storage::allDirectories($directory);\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown with Twig Filter\nDESCRIPTION: Shows how to use the |md filter to parse Markdown syntax within Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\n----------------------------------------\n\nTITLE: Queue Job with Specific Queue Name\nDESCRIPTION: Shows how to push a job to a specific named queue or tube\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message], 'emails');\n```\n\n----------------------------------------\n\nTITLE: Updating Page Elements with Partial Content\nDESCRIPTION: Demonstrates how to run a handler and update a specific page element with the rendered partial received from the server.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    update: { calcresult: '.result' }\n})\n```\n\n----------------------------------------\n\nTITLE: Managing Flash Data in Session in PHP\nDESCRIPTION: Demonstrates how to store flash data that persists only for the next request, and how to extend its lifetime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nSession::flash('key', 'value');\n\nSession::reflash();\n\nSession::keep(['username', 'email']);\n```\n\n----------------------------------------\n\nTITLE: Installing Mailgun Dependencies\nDESCRIPTION: Command to install Symfony Mailgun Mailer transport and HTTP client via Composer\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/mailgun-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Throwing ApplicationException in PHP\nDESCRIPTION: Demonstrates how to throw an ApplicationException, which is used for simple application condition failures. The error message is simplified and excludes sensitive information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nthrow new ApplicationException('You must be logged in to do that!');\n```\n\n----------------------------------------\n\nTITLE: Basic Section Component Configuration with Twig Template\nDESCRIPTION: Basic usage example of the Section component to define a section for a Blog\\Author entry using the default :slug URL parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/:slug\"\n\n[section]\nhandle = \"Blog\\\\Author\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Posts by {{ section.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Resolving an Interface Implementation from IoC Container\nDESCRIPTION: Shows how to resolve a previously bound interface implementation from the IoC container.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = App::make('UserRepositoryInterface');\n```\n\n----------------------------------------\n\nTITLE: Implementing a Behavior in an Extended Class in PHP\nDESCRIPTION: This snippet demonstrates extending the AI class to create a Robot class that implements the WaveBehaviour. The Robot class can access both its own methods, parent class methods, and methods from the implemented behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyNamespace\\Classes;\n\nclass Robot extends AI\n{\n    public $implement = [\n        \\MyNamespace\\Behaviors\\WaveBehaviour::class\n    ];\n\n    public function identify()\n    {\n        echo \"I'm a Robot<br>\";\n        echo $this->youGotBrains();\n        echo $this->wave();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Localization Strings in October CMS\nDESCRIPTION: Example of a lang.php file that defines localization strings for an October CMS plugin. The file returns an array with nested key-value pairs representing translatable strings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/localization.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'app' => [\n        'name' => 'OctoberCMS',\n        'tagline' => 'Getting back to basics'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Asset Injection with String Build Parameter in PHP Component\nDESCRIPTION: Simplified version of asset injection using a string parameter for build version instead of an array. This is a shorthand when only the build version needs to be specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js', 'Acme.Test');\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown with Default Value in YAML\nDESCRIPTION: Configures a dropdown field with a default selected value, where the default is the key of the option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n    default: published\n```\n\n----------------------------------------\n\nTITLE: Fetching Control Instances with Element Reference\nDESCRIPTION: Shows how to retrieve a control instance from an existing DOM element using oc.fetchControl.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchControl = oc.fetchControl(element);\n```\n\n----------------------------------------\n\nTITLE: Using Pluralized Translations in PHP\nDESCRIPTION: Demonstrates how to use the __() function with pluralized strings in PHP code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\necho __('There is one apple|There are many apples', 3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Page in YAML\nDESCRIPTION: Configuration options for the Preview page in Form Behavior. It includes the title setting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence using PHP\nDESCRIPTION: Shows how to check if an item exists in the session using the has method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (Session::has('users')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Balloon Selector Configuration in YAML\nDESCRIPTION: Basic example showing how to configure a gender selection using the balloon-selector field type with simple options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-balloon.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    type: balloon-selector\n    label: Gender\n    options:\n        female: Female\n        male: Male\n```\n\n----------------------------------------\n\nTITLE: Using Error Callback in HTTP Requests\nDESCRIPTION: Shows how to implement an error callback handler for HTTP requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$response->onError(callable $callback);\n```\n\n----------------------------------------\n\nTITLE: Date Range Filter with Default Values\nDESCRIPTION: Example showing how to configure a date range filter with default values using PHP controller extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n\\MyController::extendListFilterScopes(function($filter) {\n    $widget->addScopes([\n        'Date Test' => [\n            'label' => 'Date Test',\n            'type' => 'daterange',\n            'default' => $this->myDefaultTime(),\n            'conditions' => \"created_at >= ':after' AND created_at <= ':before'\"\n        ],\n    ]);\n});\n\n// Return value must be instance of carbon\npublic function myDefaultTime()\n{\n    return [\n        0 => Carbon::parse('2012-02-02'),\n        1 => Carbon::parse('2012-04-02'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Polymorphic One-to-One Table Structure\nDESCRIPTION: SQL table structure for implementing polymorphic one-to-one relationships with photos relating to both staff and products.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nstaff\n    id - integer\n    name - string\n\nproducts\n    id - integer\n    price - integer\n\nphotos\n    id - integer\n    path - string\n    imageable_id - integer\n    imageable_type - string\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Many-to-Many Relationships in OctoberCMS Models\nDESCRIPTION: This snippet shows how to define polymorphic many-to-many relationships in Post, Video, and Tag models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $morphToMany = [\n        'tags' => ['Acme\\Blog\\Models\\Tag', 'name' => 'taggable']\n    ];\n}\n\nclass Tag extends Model\n{\n    public $morphedByMany = [\n        'posts'  => ['Acme\\Blog\\Models\\Post', 'name' => 'taggable'],\n        'videos' => ['Acme\\Blog\\Models\\Video', 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Cache in PHP\nDESCRIPTION: Examples of removing individual items or flushing the entire cache.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nCache::forget('key');\n\nCache::flush();\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Content for Rich Editor in PHP\nDESCRIPTION: PHP event handler code to respond to custom button clicks and load modal content using a partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.ajax.beforeRunHandler', function ($controller, $handler) {\n    if ($handler === 'onLoadPopup') {\n        return $controller->makePartial('~/path/to/my/partials/_popup_form.php');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Closure as Default Value in Cache Retrieval\nDESCRIPTION: Example of using a Closure as the default value when retrieving cache items, which will execute only if the item doesn't exist in cache.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value = Cache::get('key', function() {\n    return Db::table(...)->get();\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Sort Order Column in October CMS Sortable Behavior\nDESCRIPTION: Shows how to modify the column name used for sorting when implementing the Sortable behavior. This allows using a custom column name instead of the default sort_order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nconst SORT_ORDER = 'my_sort_order_column';\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Controller Code\nDESCRIPTION: Examples showing how to check user permissions in controller code using userHasAccess and userHasPermission methods to limit functionality based on user permissions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/permissions.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (BackendAuth::userHasAccess('acme.blog.*')) {\n    // ...\n}\n\nif (BackendAuth::userHasPermission([\n    'acme.blog.access_posts',\n    'acme.blog.access_categories'\n])) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence with has() Method in PHP Collections\nDESCRIPTION: The has() method determines if a given key exists in the collection. It returns true if the key exists, otherwise false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['account_id' => 1, 'product' => 'Desk']);\n\n$collection->has('email');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Switch Options in Console Command Signature\nDESCRIPTION: Shows how to define a boolean switch option in the command signature. Options are prefixed with -- and when specified, they return true; otherwise, they return false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user} {--queue}';\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Twig Tags\nDESCRIPTION: Tags can be used to implement conditional logic in templates, allowing different content to be displayed based on conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if stormCloudComing %}\n    Stay inside\n{% else %}\n    Go outside and play\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Queue Job Handler Class Implementation\nDESCRIPTION: Example of a job handler class with the required fire method that processes the queued job.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass SendEmail\n{\n    public function fire($job, $data)\n    {\n        //\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Multiple Fields in AJAX Handler\nDESCRIPTION: Shows how to refresh multiple fields at once by passing an array to the formRefreshFields method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function onChangeContent()\n{\n    return $this->formRefreshFields(['is_positive', 'internal_comments']);\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Configuration of Relation Controller in YAML\nDESCRIPTION: Shows how to provide inline configuration for the Relation Controller behavior directly in the relation field definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    tab: Products\n    type: relation\n    controller:\n        label: Product\n        list: $/october/test/models/product/columns.yaml\n        form: $/october/test/models/product/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding Asset Attributes in PHP\nDESCRIPTION: Demonstrates how to add additional attributes to injected assets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js'], ['defer' => true]);\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with GET Parameters in HTML\nDESCRIPTION: Button that adds a GET parameter 'page' with value '6' to the current request URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onSetPage\" data-request-query=\"{ page: 6 }\">\n    Page 6\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for Plugin Testing in XML\nDESCRIPTION: This XML configuration sets up PHPUnit for testing an October CMS plugin. It defines test suite locations, environment variables, and other testing parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/unit-testing.md#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n         backupStaticAttributes=\"false\"\n         bootstrap=\"../../../tests/bootstrap.php\"\n         colors=\"true\"\n         convertErrorsToExceptions=\"true\"\n         convertNoticesToExceptions=\"true\"\n         convertWarningsToExceptions=\"true\"\n         processIsolation=\"false\"\n         stopOnFailure=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Plugin Unit Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n    <php>\n        <env name=\"APP_ENV\" value=\"testing\"/>\n        <env name=\"CACHE_DRIVER\" value=\"array\"/>\n        <env name=\"SESSION_DRIVER\" value=\"array\"/>\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Key-Value Pairs\nDESCRIPTION: Shows how to access both keys and values while iterating over a collection using for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for key, user in users %}\n        <li>{{ key }}: {{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Record Finder in Tailor with Model Class\nDESCRIPTION: Example of recordfinder configuration in Tailor content fields with explicit model class specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Product\n    list: $/october/test/models/product/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Form Widget Configuration in YAML\nDESCRIPTION: Demonstrates how to configure a form widget in a form field definition YAML file, setting various properties defined in the widget class such as mode, minDate, and maxDate.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nborn_at:\n    label: Date of Birth\n    type: datepicker\n    mode: date\n    minDate: 1984-04-12\n    maxDate: 2014-04-23\n```\n\n----------------------------------------\n\nTITLE: Multiple Items Media Finder Configuration\nDESCRIPTION: Configuration for a Media Finder field that allows selection of multiple images with a maximum limit of 10 items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-mediafinder.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_gallery:\n    label: Image\n    type: mediafinder\n    mode: image\n    maxItems: 10\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic AJAX Handler in PHP\nDESCRIPTION: Shows how to create a simple AJAX handler function using the onSomething naming pattern in the PHP section of a page, partial, or layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContactForm()\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Repeater with Title Configuration\nDESCRIPTION: Configuration for a repeater field that specifies which field to use as the title when collapsed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    titleFrom: title_when_collapsed\n    form:\n        fields:\n            # ...\n            title_when_collapsed:\n                label: This field is the title when collapsed\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Configuring List Controller in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure the list controller to open records in a popup when clicked in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\nrecordOnClick: popup\n```\n\n----------------------------------------\n\nTITLE: Hashing Password with Hash Facade in PHP\nDESCRIPTION: Demonstrates how to hash a user password using the Hash facade's make method before saving to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/hash-crypt.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->password = Hash::make('mypassword');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Changing Backend User Password via CLI\nDESCRIPTION: Command line interface command for changing a backend administrator's password using the october:passwd artisan command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/users.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:passwd username password\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Component Rendering\nDESCRIPTION: Example of passing variables directly to a component during rendering to override component properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' maxItems='7' %}\n```\n\n----------------------------------------\n\nTITLE: Working with Error Messages in PHP\nDESCRIPTION: Demonstrates various methods for working with error messages using the MessageBag instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\necho $messages->first('email');\n\nforeach ($messages->get('email') as $message) {\n    //\n}\n\nforeach ($messages->all() as $message) {\n    //\n}\n\nif ($messages->has('email')) {\n    //\n}\n\necho $messages->first('email', '<p>:message</p>');\n\nforeach ($messages->all('<li>:message</li>') as $message) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Markup as a Variable to a Partial\nDESCRIPTION: Demonstrates how to pass HTML markup to a partial using the body attribute. Content between the partial tags becomes available as the 'body' variable inside the partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" body %}\n    This is the card contents\n{% endpartial %}\n```\n\n----------------------------------------\n\nTITLE: Working with Optional Route Parameters\nDESCRIPTION: Shows how to define optional parameters in routes by adding a question mark after the parameter name. Default values can be provided for optional parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{name?}', function ($name = null) {\n    return $name;\n});\n\nRoute::get('user/{name?}', function ($name = 'John') {\n    return $name;\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page Filter with Persistent Parameters\nDESCRIPTION: Demonstrates how to leverage persistent URL parameters across pages, creating links that maintain the current context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post-edit'|page }}\">\n    Edit this post\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Preset Converter for Form Fields in YAML\nDESCRIPTION: Demonstrates how to use the preset property to automatically convert and fill a field based on the value of another field. The example shows URL generation based on a title field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntitle:\n    label: Title\n\nurl:\n    label: URL\n    preset:\n        field: title\n        type: url\n```\n\n----------------------------------------\n\nTITLE: Basic List Filter Configuration\nDESCRIPTION: Example YAML configuration showing various filter scope definitions including category, status, published state, approval, and date filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n# Filter Scope Definitions\n# ===================================\n\nscopes:\n\n    category:\n        label: Category\n        modelClass: Acme\\Blog\\Models\\Category\n        conditions: category_id in (:filtered)\n        nameFrom: name\n\n    status:\n        label: Status\n        type: group\n        conditions: status in (:filtered)\n        options:\n            pending: Pending\n            active: Active\n            closed: Closed\n\n    published:\n        label: Hide published\n        type: checkbox\n        default: 1\n        conditions: is_published <> true\n\n    approved:\n        label: Approved\n        type: switch\n        default: 2\n        conditions:\n            - is_approved <> true\n            - is_approved = true\n\n    created_at:\n        label: Date\n        type: date\n        conditions: created_at >= ':filtered'\n\n    published_at:\n        label: Date\n        type: daterange\n        conditions: created_at >= ':after' AND created_at <= ':before'\n```\n\n----------------------------------------\n\nTITLE: Color Picker Model Method Implementation in PHP\nDESCRIPTION: PHP implementation of a model method that provides available colors for the color picker widget. Returns an array of hex color codes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\npublic function myColorList($fieldName, $value, $formData)\n{\n    return ['#000000', '#111111', '#222222']\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Last Modified Time of a File in October CMS\nDESCRIPTION: Example of retrieving the last modified timestamp of a file using the lastModified method. This returns a UNIX timestamp.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$time = Storage::lastModified('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Setting Sort Order in October CMS Models\nDESCRIPTION: Demonstrates how to set the sort order for individual or multiple records using the setSortableOrder method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Sets the order of the user to 1...\n$user->setSortableOrder($user->id, 1);\n\n// Sets the order of records 1, 2, 3 to 3, 2, 1 respectively...\n$user->setSortableOrder([1, 2, 3], [3, 2, 1]);\n```\n\n----------------------------------------\n\nTITLE: Using the {% meta %} System Placeholder in Twig\nDESCRIPTION: Demonstrates how to use the {% meta %} system placeholder to render meta content, such as open graph information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    {% meta %}\n    ...\n</head>\n```\n\n----------------------------------------\n\nTITLE: Email Field Validation in YAML\nDESCRIPTION: Shows how to add email validation to a form field using the validation property in Tailor fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-email.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuser_email:\n    label: Email Address\n    type: email\n    validation: email\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Letter Range\nDESCRIPTION: Shows how to use the .. operator to iterate over a range of letters in a Twig for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'..'z' %}\n    - {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration File\nDESCRIPTION: Example .env file content for setting the application environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nAPP_ENV=dev\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Action Navigation Item in October CMS\nDESCRIPTION: Example of adding a primary-type navigation item for prominent actions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'people_create' => [\n    'label' => 'New Person',\n    'icon' => 'icon-plus',\n    'url' => Backend::url('acme/blog/people/create'),\n    'itemType' => 'primary',\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uploaded File Information in October CMS\nDESCRIPTION: Various methods for getting information about an uploaded file, such as its path, name, extension, size, and MIME type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$path = Input::file('photo')->getRealPath();\n\n$name = Input::file('photo')->getClientOriginalName();\n\n$extension = Input::file('photo')->getClientOriginalExtension();\n\n$size = Input::file('photo')->getSize();\n\n$mime = Input::file('photo')->getMimeType();\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output\nDESCRIPTION: The final HTML output showing how the layout and page templates are combined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/page.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <meta name=\"foo\" content=\"bar\">\n    </head>\n    <body>\n        <p>My content.</p>\n        ...\n```\n\n----------------------------------------\n\nTITLE: Using Theme Data in CSS with Custom Properties\nDESCRIPTION: Example of using theme customization data in CSS using custom properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    :root {\n        --my-color: {{ this.theme.link_color }};\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Behavior Configuration in YAML\nDESCRIPTION: Example of a typical form behavior configuration file that defines the form name, fields file location, and model class, along with settings for the Create, Update, and Preview pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Form Behavior Config\n# ===================================\n\nname: Blog Category\nform: $/acme/blog/models/post/fields.yaml\nmodelClass: Acme\\Blog\\Post\n\ncreate:\n    title: New Blog Post\n\nupdate:\n    title: Edit Blog Post\n\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Radio List in YAML\nDESCRIPTION: Configuration for a radio list with a default selected value. The default property sets the initial selected option to 'guests' when creating new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-radio.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    default: guests\n```\n\n----------------------------------------\n\nTITLE: Queueing Mail Messages\nDESCRIPTION: Examples of queueing mail messages for background sending, including delayed delivery and specific queue targeting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nMail::queue('acme.blog:welcome', $data, function ($message) {\n    //\n});\n\nMail::later(5, 'acme.blog:welcome', $data, function ($message) {\n    //\n});\n\nMail::queueOn('queue-name', 'acme.blog:welcome', $data, function ($message) {\n    //\n});\n\nMail::laterOn('queue-name', 5, 'acme.blog:welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Entry Content Groups\nDESCRIPTION: Shows how to handle different content types using the content_group attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.content_group == 'markdown_post' %}\n    <!-- Render content as Markdown -->\n    {{ post.content|md }}\n{% else %}\n    <!-- Render content as HTML -->\n    {{ post.content|raw }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Flash Validation HTML Form in October CMS\nDESCRIPTION: A simple HTML form structure for flash validation in October CMS. It includes the data-request-flash attribute for displaying validation messages and a button with loading indicator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\" data-request-flash>\n    <div>\n        <label>Name</label>\n        <input name=\"name\" />\n    </div>\n\n    <button data-attach-loading>\n        Submit\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Code Without Changing Response in Twig\nDESCRIPTION: Demonstrates how to set the HTTP code in the header without altering the response contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-abort.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(404, false) %}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Filter with Dynamic Options Method in YAML\nDESCRIPTION: Configuration for a dropdown filter that uses a model method to dynamically generate the list of options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: dropdown\n    optionsMethod: getStatusOptions\n```\n\n----------------------------------------\n\nTITLE: Static Method for Dropdown Options in PHP\nDESCRIPTION: Implements a static method on an external helper class to provide dropdown options, receiving model and form field objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic static function staticMethodOptions($model, $formField)\n{\n    return ['published' => 'Published', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Attributes in Model Serialization\nDESCRIPTION: Example of configuring hidden attributes in model serialization using the $hidden property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/serialization.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * The attributes that should be hidden for arrays.\n     *\n     * @var array\n     */\n    protected $hidden = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Component Usage with Override Directory Example\nDESCRIPTION: This snippet shows how to use a component and set up the structure for overriding its partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"mypage\"\n\n[channel]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"channel\" %}\n```\n\n----------------------------------------\n\nTITLE: Using the Bracket Parser in PHP\nDESCRIPTION: Shows how to use the Bracket template parser, which is an alternative to Twig for simpler template parsing needs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Parse\\Bracket;\n\n$html = Bracket::parse($content, ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Instances of the Same Component\nDESCRIPTION: This snippet demonstrates how to define multiple instances of the same component on a page by using aliases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo todoA]\nmaxItems = 10\n[demoTodo todoB]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Checking if Input Value Exists in PHP\nDESCRIPTION: Demonstrates how to determine if a specific input value is present in the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Input::has('name')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response in PHP\nDESCRIPTION: Shows how to create a redirect response to another URL using the Redirect facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login');\n```\n\n----------------------------------------\n\nTITLE: Controller Action Override in PHP\nDESCRIPTION: Example of overriding the update action in a controller while maintaining form behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\npublic function update($recordId, $context = null)\n{\n    //\n    // Do any custom code here\n    //\n\n    // Call the FormController behavior update() method\n    return $this->asExtension('FormController')->update($recordId, $context);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Template in Twig\nDESCRIPTION: Demonstrates the simplest possible layout structure with the page tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Switch Column in October CMS\nDESCRIPTION: Basic implementation of a switch column to display boolean values. This creates a toggle switch for an 'enabled' column with default on/off states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-switch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenabled:\n    label: Enabled\n    type: switch\n```\n\n----------------------------------------\n\nTITLE: Creating Model with Deferred Bindings in PHP\nDESCRIPTION: Demonstrates creating a new model while committing deferred bindings using the create method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::create(['title' => 'First blog post'], $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Combining Twig and AngularJS Templates\nDESCRIPTION: This example demonstrates how to use the {% verbatim %} tag to combine Twig and AngularJS templates in the same file. It allows you to control which variables are parsed by Twig and which are left for AngularJS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-verbatim.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello {{ name }}, this is parsed by Twig</p>\n\n{% verbatim %}\n    <p>Hello {{ name }}, this is parsed by AngularJS</p>\n{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Limiting Selectable Items in Entries Field\nDESCRIPTION: Configuration example showing how to limit the number of selectable items using the maxItems property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    maxItems: 1\n```\n\n----------------------------------------\n\nTITLE: Mixin Field with UUID Reference\nDESCRIPTION: Shows how to include a mixin using a UUID as the source reference for more robust field inclusion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-mixin.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_blog_fields:\n    type: mixin\n    source: 6d6a5efa-3ce7-4b9d-bddc-ac48867552cb\n```\n\n----------------------------------------\n\nTITLE: Assigning New Variables in Partial Rendering\nDESCRIPTION: Demonstrates how to assign new variables when rendering a partial using the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" city=\"Vancouver\" country=\"Canada\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Image Column with Resizer Options in YAML for October CMS\nDESCRIPTION: Defines an image column with custom resizer options. This example sets the image quality to 80%, demonstrating how to customize the image processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-image.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    options:\n        quality: 80\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Injection in PHP\nDESCRIPTION: Shows how to inject CSS and JavaScript files using the onStart function in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Column in October CMS List\nDESCRIPTION: Configuration for a partial column which renders a custom partial file for displaying complex column content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: ~/plugins/acme/blog/models/comment/_content_column.htm\n```\n\n----------------------------------------\n\nTITLE: Registering Permissions with Role Assignment\nDESCRIPTION: Shows how to register permissions with specific role assignments using the roles option array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/permissions.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_categories' => [\n            'label' => 'Manage the blog categories',\n            'tab' => 'Blog',\n            'order' => 200,\n            'roles' => ['developer']\n        ]\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to the partial() Function\nDESCRIPTION: Shows how to pass variables to a partial when using the partial() function to capture output in a variable. Variables are passed as a second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% set cardPartial = partial('my-cards/card', { foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Input for Form Widget in October CMS\nDESCRIPTION: This PHP snippet demonstrates how to create an HTML input element using the variables prepared in the render method of a form widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<input id=\"<?= $id ?>\" name=\"<?= $name ?>\" value=\"<?= e($value) ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Applying Cache-Busting Timestamp to Image URL in Twig\nDESCRIPTION: Shows how to apply a cache-busting timestamp generated with carbon() to an image URL in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'assets/images/image_file.jpg'|theme }}?{{ carbon('now').format('m.d.y.H.i.s') }}\" alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing State-Country Dependent Dropdowns\nDESCRIPTION: PHP code demonstrating field dependencies between country and state dropdowns with dynamic options loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return ['au' => 'Australia', 'ca' => 'Canada'];\n}\n\npublic function getStateOptions()\n{\n    if ($this->country == 'au') {\n        return ['act' => 'Capital Territory', 'qld' => 'Queensland', ...];\n    }\n    elseif ($this->country == 'ca') {\n        return ['bc' => 'British Columbia', 'on' => 'Ontario', ...];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using |default Filter in Twig Templates\nDESCRIPTION: Demonstrates the usage of the |default filter in Twig templates. The filter returns a default value if the filtered value is undefined or empty. It can be used with variables, object properties, and array keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-default.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable|default('The variable is not defined') }}\n\n{{ variable.foo|default('The foo property on variable is not defined') }}\n\n{{ variable['foo']|default('The foo key in variable is not defined') }}\n\n{{ ''|default('The variable is empty') }}\n```\n\n----------------------------------------\n\nTITLE: Registering Back-end Navigation Menus in October CMS\nDESCRIPTION: Example implementation of the registerNavigation method in a Plugin registration class to add back-end navigation items. This creates a top-level 'Blog' menu with two sub-menu items ('Posts' and 'Categories'), including permissions, icons, and ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function registerNavigation()\n{\n    return [\n        'blog' => [\n            'label' => 'Blog',\n            'url' => Backend::url('acme/blog/posts'),\n            'icon' => 'icon-pencil',\n            'permissions' => ['acme.blog.*'],\n            'order' => 500,\n\n            'sideMenu' => [\n                'posts' => [\n                    'label' => 'Posts',\n                    'icon' => 'icon-copy',\n                    'url' => Backend::url('acme/blog/posts'),\n                    'permissions' => ['acme.blog.access_posts'],\n                ],\n                'categories' => [\n                    'label' => 'Categories',\n                    'icon' => 'icon-copy',\n                    'url' => Backend::url('acme/blog/categories'),\n                    'permissions' => ['acme.blog.access_categories'],\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Layout PHP Implementation\nDESCRIPTION: Example of PHP methods for handling layout execution lifecycle and variable access.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['myVariable'] = 'foo';\n}\n\nfunction myMethod()\n{\n    return 'bar';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Export Button to List Toolbar\nDESCRIPTION: PHP/HTML code for adding an export button to the list toolbar that triggers the export functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<a\n    href=\"<?= Backend::url('acme/campaign/subscribers/export') ?>\"\n    class=\"btn btn-default oc-icon-download\">\n    Export Records\n</a>\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Options Definition\nDESCRIPTION: Demonstrates how to define basic key-value options using YAML syntax for field definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/define-options.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    draft: Draft\n    published: Published\n    archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Using array_sort_recursive Helper Function in PHP\nDESCRIPTION: The array_sort_recursive function recursively sorts all nested arrays using PHP's sort function, maintaining the hierarchy while ordering elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    [\n        'Brian',\n        'Shannon',\n        'Alec',\n    ],\n    [\n        'PHP',\n        'Ruby',\n        'JavaScript',\n    ],\n];\n\n$array = array_sort_recursive($array);\n\n/*\n    [\n        [\n            'Alec',\n            'Brian',\n            'Shannon',\n        ],\n        [\n            'JavaScript',\n            'PHP',\n            'Ruby',\n        ]\n    ];\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Messages in PHP\nDESCRIPTION: Demonstrates how to set various types of flash messages (success, error, warning, info) using the Flash facade in PHP. This is typically done in AJAX handlers, component logic, or PHP sections of pages/layouts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction onSave()\n{\n    // Sets a successful message\n    Flash::success('Settings successfully saved!');\n\n    // Sets an error message\n    Flash::error('Something went wrong...');\n\n    // Sets a warning message\n    Flash::warning('Please confirm your email address soon');\n\n    // Sets an informative message\n    Flash::info('The export is still processing. Please try again in a minute.');\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Default Filter with Method Calls in Twig\nDESCRIPTION: Example showing how to properly chain the default filter when using method calls with variables that might be undefined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/default.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable.method(foo|default('bar'))|default('bar') }}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Partial Exists\nDESCRIPTION: Demonstrates how to check if a partial exists before attempting to render it using the hasPartial() function, with conditional fallback content if not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasPartial('my-cards/card') %}\n    {% partial 'my-cards/card' %}\n{% else %}\n    <p>Card not found!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Styling Cached Pages in Turbo Router using CSS\nDESCRIPTION: Shows how to apply specific styles to pages loaded from cache using the 'data-turbo-preview' attribute selector in CSS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nhtml[data-turbo-preview] {\n    /* Hide overlays from previous view */\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Committing Deferred Bindings in PHP\nDESCRIPTION: Shows how to manually commit deferred bindings when session key cannot be provided during save.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$post->commitDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Cookie Attachment to Response\nDESCRIPTION: Examples of attaching cookies to responses with basic and advanced configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)->withCookie('name', 'value');\n```\n\nLANGUAGE: php\nCODE:\n```\n->withCookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)\n```\n\n----------------------------------------\n\nTITLE: Defining URL Parameters in October CMS\nDESCRIPTION: Demonstrates how to define a URL with a parameter in the October CMS page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-param.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/account/:tab\"\n```\n\n----------------------------------------\n\nTITLE: Releasing a Job Back to Queue in PHP\nDESCRIPTION: Demonstrates how to release a job back onto the queue if it cannot be processed, using the release method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function fire($job, $data)\n{\n    // Process the job...\n\n    $job->release();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Navigation in YAML\nDESCRIPTION: Basic configuration for navigation items in a blueprint file, setting an icon and display order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    icon: icon-pencil\n    order: 200\n```\n\n----------------------------------------\n\nTITLE: Throwing Not Found Exception in October CMS\nDESCRIPTION: Demonstrates how to throw a NotFoundException when a record is missing. This changes the response to display the nearest not found page with a 404 status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nthrow new NotFoundException('Record not found');\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Input Values\nDESCRIPTION: Shows how to get all input values from the request at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::all();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Response with Headers in PHP\nDESCRIPTION: Shows how to create a custom Response object with status code and multiple headers using method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)\n            ->header('Content-Type', $type)\n            ->header('X-Header-One', 'Header Value')\n            ->header('X-Header-Two', 'Header Value');\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Cache Server\nDESCRIPTION: Configuration settings for Memcached cache driver using TCP/IP connection with host, port and weight settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    'servers' => [\n        [\n            'host' => env('MEMCACHED_HOST', '127.0.0.1'),\n            'port' => env('MEMCACHED_PORT', 11211),\n            'weight' => 100,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Binding an Instance Event with Emitter Trait - PHP\nDESCRIPTION: Example of binding an event to a specific instance of a class using the bindEvent method from the Emitter trait.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$manager = new UserManager;\n$manager->bindEvent('user.beforeRegister', function($user) {\n    // Check if the $user is a spammer\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Options Method for Dropdown Filter in PHP\nDESCRIPTION: PHP implementation of the getStatusOptions method that returns an array of status options for use in a dropdown filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusOptions()\n{\n    return [\n        'active' => 'Active',\n        'deleted' => 'Deleted',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Model is Soft Deleted - PHP\nDESCRIPTION: Shows how to check if a model instance has been soft deleted using the trashed method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($user->trashed()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Twig Templates in PHP\nDESCRIPTION: Demonstrates how to use the Twig facade to parse Twig syntax into HTML, with optional variable passing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$html = Twig::parse($twig);\n\n$html = Twig::parse($twig, ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Processing a Single Queue Job\nDESCRIPTION: Demonstrates the command to process only the first job on the queue and then exit, using the --once flag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work --once\n```\n\n----------------------------------------\n\nTITLE: Creating Base Test Case for Testing Plugin Dependencies\nDESCRIPTION: Extended PHP test class that registers and boots all plugins to test plugin dependencies. It overrides setUp and tearDown methods to ensure proper plugin registration and cleanup between tests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/packages/unit-testing.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse System\\Classes\\PluginManager;\n\nclass BaseTestCase extends PluginTestCase\n{\n    public function setUp(): void\n    {\n        parent::setUp();\n\n        // Ëé∑ÂèñÊèí‰ª∂ÁÆ°ÁêÜÂô®\n        $pluginManager = PluginManager::instance();\n\n        // Ê≥®ÂÜåÊèí‰ª∂‰ª•‰ΩøÊñá‰ª∂ÈÖçÁΩÆÁ≠âÂäüËÉΩÂèØÁî®\n        $pluginManager->registerAll(true);\n\n        // ÂêØÂä®ÊâÄÊúâÊèí‰ª∂‰ª•ÊµãËØïÊ≠§Êèí‰ª∂ÁöÑ‰æùËµñÈ°π\n        $pluginManager->bootAll(true);\n    }\n\n    public function tearDown(): void\n    {\n        parent::tearDown();\n\n        // Ëé∑ÂèñÊèí‰ª∂ÁÆ°ÁêÜÂô®\n        $pluginManager = PluginManager::instance();\n\n        // Á°Æ‰øùÊèí‰ª∂ÂÜçÊ¨°Ê≥®ÂÜå‰ª•ËøõË°å‰∏ã‰∏ÄÊ¨°ÊµãËØï\n        $pluginManager->unregisterAll();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching with Pivot Table Data\nDESCRIPTION: This code shows how to attach a model to a many-to-many relationship with additional pivot table data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->attach($roleId, ['expires' => $expires]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Design in PHP for October CMS\nDESCRIPTION: This PHP code snippet demonstrates how to render the form design inside view files using the formRenderDesign() method in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->formRenderDesign() ?>\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with Attributes\nDESCRIPTION: Shows how to add HTML attributes to an AJAX-enabled form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_ajax('onSave', { class: 'form-horizontal'}) }}\n```\n\n----------------------------------------\n\nTITLE: Aborting Request with Custom Message in October CMS\nDESCRIPTION: Demonstrates how to abort a request with a specific HTTP status code and custom message. This can be used to terminate the request at any point in the lifecycle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(403, 'Unauthorized action.');\n```\n\n----------------------------------------\n\nTITLE: Opening an Image for Resizing in OctoberCMS\nDESCRIPTION: Opens an image file from disk for resizing using the Resizer facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$image = Resizer::open('path/to/image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Flash Data in PHP\nDESCRIPTION: Shows how to redirect to a new URL while also flashing data to the session in a single method chain.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login')->with('message', 'Login Failed');\n```\n\n----------------------------------------\n\nTITLE: Rendering Plain Text and Markdown Content with Twig\nDESCRIPTION: Shows how to use the {% content %} tag to render plain text and Markdown content blocks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"readme.txt\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"changelog.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to Query (PHP)\nDESCRIPTION: Implements the applyScopeToQuery method to modify the database query based on the filter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function applyScopeToQuery($query)\n{\n    $hasDiscount = $this->filterScope->value;\n\n    if ($hasDiscount) {\n        $query->where('discount', '>', 0);\n    }\n    else {\n        $query->where('discount', 0);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Daily Scheduled Task in PHP for October CMS\nDESCRIPTION: This snippet demonstrates how to define a daily scheduled task using a Closure in the Plugin registration class. The task deletes records from the 'recent_users' table at midnight each day.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    // ...\n\n    public function registerSchedule($schedule)\n    {\n        $schedule->call(function () {\n            Db::table('recent_users')->delete();\n        })->daily();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Field with Step Increment\nDESCRIPTION: Setting up a number field with specific step increments of 10 units.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-number.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    step: 10\n```\n\n----------------------------------------\n\nTITLE: Deleting Models by Query in PHP using OctoberCMS\nDESCRIPTION: This example shows how to delete multiple models that match a specific query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$deletedRows = Flight::where('active', 0)->delete();\n```\n\n----------------------------------------\n\nTITLE: PHP Redirect Handler\nDESCRIPTION: AJAX handler implementation for redirecting to a specific URL after form submission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onSignup()\n{\n    return Redirect::to('/signup-complete');\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Failed Job with Artisan Command in Bash\nDESCRIPTION: Artisan command to delete a specific failed job using its job ID. This example deletes the failed job with ID 5.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:forget 5\n```\n\n----------------------------------------\n\nTITLE: Checkbox and Radio Input Generation\nDESCRIPTION: Demonstrates generating checkbox and radio button inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::checkbox('name', 'value') ?>\n\n<?= Form::radio('name', 'value') ?>\n\n<?= Form::checkbox('name', 'value', true) ?>\n\n<?= Form::radio('name', 'value', true) ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Actions for Form Field Triggers in YAML\nDESCRIPTION: Demonstrates how to combine multiple actions in a form field trigger using the pipe symbol. The example shows both displaying and emptying an input when a condition is met.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show|empty\n    condition: checked\n    field: name\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs-to-Many Relation with Pivot Data in Columns\nDESCRIPTION: YAML configuration for a 'teams' relation that demonstrates how to include pivot data in list columns and form fields using the pivot[field_name] syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nteams:\n    label: Team\n    view:\n        list:\n            columns:\n                name:\n                    label: Name\n                pivot[team_color]:\n                    label: Team color\n    manage:\n        list:\n            columns:\n                name:\n                    label: Name\n    pivot:\n        form:\n            fields:\n                pivot[team_color]:\n                    label: Team color\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Balloon Selector (HTML/PHP)\nDESCRIPTION: Example of an inline balloon selector filter widget, displaying multiple options as clickable elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<?php\n    $activeValue = $scope->scopeValue !== null ? $scope->value : $scope->default;\n?>\n<div\n    data-scope-name=\"<?= $scope->scopeName ?>\"\n    data-control=\"balloon-selector\"\n    data-selector-allow-empty\n    class=\"filter-scope scope-inline control-balloon-selector form-control-sm\">\n    <ul class=\"list-unstyled m-0\">\n        <?php foreach ((array) $scope->options as $key => $value): ?>\n            <li\n                data-value=\"<?= $key ?>\"\n                class=\"small <?= $key === $activeValue ? 'active' : '' ?>\"\n                data-filter-action=\"apply\">\n                <?= $value ?>\n            </li>\n        <?php endforeach ?>\n    </ul>\n    <!-- Hidden input to store the selected filter value -->\n    <input type=\"hidden\" name=\"<?= $name ?>[value]\" value=\"<?= $activeValue ?>\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Record Finder Configuration in YAML\nDESCRIPTION: The basic configuration for a recordfinder field that allows selecting a user from a related model using a popup interface. The list property specifies the column definition file for displaying records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    list: ~/plugins/rainlab/user/models/user/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Nested Relations Configuration in YAML\nDESCRIPTION: Example showing how to configure nested relationships using the RelationController.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncountries:\n    label: Country\n    form: $/acme/location/models/country/fields.yaml\n    list: $/acme/location/models/country/columns.yaml\n\ncountries[cities]:\n    label: City\n    form: $/acme/location/models/city/fields.yaml\n    list: $/acme/location/models/city/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: User Model Attribute Extension\nDESCRIPTION: Example of extending user model attributes through event binding and validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.getAttribute', function ($attribute, $value) {\n        if ($attribute === 'foo') {\n            return 'bar';\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Directory\nDESCRIPTION: Examples of how to get a list of all files in a directory, with options to recursively include files in subdirectories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);\n```\n\n----------------------------------------\n\nTITLE: Section Component with ID Identifier\nDESCRIPTION: Example of changing the lookup identifier from slug to ID in the Section component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/:id\"\n\n[section]\nhandle = \"Blog\\\\Author\"\nidentifier = \"id\"\n```\n\n----------------------------------------\n\nTITLE: Scheduling an Operating System Command in PHP for October CMS\nDESCRIPTION: This snippet demonstrates how to schedule an operating system command to run daily using the exec method in the October CMS command scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$schedule->exec('node /home/acme/script.js')->daily();\n```\n\n----------------------------------------\n\nTITLE: Creating a Composable Partial with Placeholders\nDESCRIPTION: Demonstrates how to create a composable partial that defines sections where content can be dynamically inserted using placeholders. This partial defines header and body regions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"header\">\n    {% placeholder header %}\n</div>\n<div class=\"body\">\n    {{ body|raw }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Teams Relation Configuration with Pivot Data\nDESCRIPTION: YAML configuration showing how to access pivot data in forms and list columns for a teams relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nteams:\n    label: Team\n    view:\n        list:\n            columns:\n                name:\n                    label: Name\n                pivot[team_color]:\n                    label: Team color\n    manage:\n        list:\n            columns:\n                name:\n                    label: Name\n    pivot:\n        form:\n            fields:\n                pivot[team_color]:\n                    label: Team color\n```\n\n----------------------------------------\n\nTITLE: Basic String Helper Usage in Twig and PHP\nDESCRIPTION: Demonstrates the basic usage of string helpers in both Twig template syntax and PHP equivalent code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Str::camel() ?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|str_camel }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Lists in October CMS Controller\nDESCRIPTION: PHP and HTML code for configuring and rendering multiple lists in a single controller using named definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic $listConfig = [\n    'templates' => 'config_templates_list.yaml',\n    'layouts' => 'config_layouts_list.yaml'\n];\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->listRender('templates') ?>\n```\n\n----------------------------------------\n\nTITLE: Using Nested External Properties for Components in October CMS\nDESCRIPTION: This code shows how to access a deeply nested value from an external parameter using dot notation in October CMS. The 'maxItems' property is set to a value from the nested 'data.maxItems' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ data.maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Options in Console Command\nDESCRIPTION: Shows how to retrieve all options passed to a console command by calling the option method without parameters, which returns an array of all options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$options = $this->option();\n```\n\n----------------------------------------\n\nTITLE: Displaying Uploaded File in PHP\nDESCRIPTION: Shows how to display an uploaded file or use a default image if not present.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\nif ($post->featured_image) {\n    $featuredImage = $post->featured_image->getPath();\n}\nelse {\n    $featuredImage = 'http://placehold.it/220x300';\n}\n\n<img src=\"<?= $featuredImage ?>\" alt=\"Featured Image\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring cURL Certificate Path in PHP\nDESCRIPTION: PHP configuration setting to resolve SSL certificate issues during installation by specifying the path to the certificate authority file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl.cainfo = \"/path/to/cacert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial in Twig\nDESCRIPTION: Demonstrates how to render a partial named 'sidebar-contacts' using the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using |md_safe filter for safe Markdown parsing in Twig\nDESCRIPTION: The |md_safe filter parses Markdown with safe mode enabled, escaping all HTML except for basic Markdown-generated HTML. It prevents execution of potentially harmful scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/md.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<a href=\"javascript:alert(1)\">click me</a>'|md_safe }}\n```\n\n----------------------------------------\n\nTITLE: Reversing Collection Order in PHP\nDESCRIPTION: Demonstrates how to use the reverse() method to reverse the order of items in a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$reversed = $collection->reverse();\n\n$reversed->all();\n\n// [5, 4, 3, 2, 1]\n```\n\n----------------------------------------\n\nTITLE: Extending List Configuration Dynamically (PHP)\nDESCRIPTION: Example of extending the list configuration dynamically by overriding the listGetConfig method to add structure properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function listGetConfig($definition)\n{\n    $config = $this->asExtension('ListController')->listGetConfig($definition);\n\n    // Implement structure dynamically\n    $config->structure = [\n        'showTree' => true\n    ];\n\n    return $config;\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Media Assets with Twig Filter\nDESCRIPTION: Demonstrates how to generate URLs for media assets using the |media filter in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'relative/path/to/asset.jpg'|media }}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Collection Class in PHP\nDESCRIPTION: Shows how to create a custom collection class that extends the base collection provided by October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Collection as CollectionBase;\n\nclass CustomCollection extends CollectionBase\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables Within Partials in Twig\nDESCRIPTION: Example of how to access variables passed to a partial from the parent template. Variables can be accessed like any other markup variable within the partial content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {{ country }}, city: {{ city }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Storing Session Data with this.session.put in Twig\nDESCRIPTION: Demonstrates how to store data in the session using the 'this.session.put' method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-session.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do this.session.put('my-preference', 'value') %}\n```\n\n----------------------------------------\n\nTITLE: Throwing AJAX Exception\nDESCRIPTION: Shows how to throw an AJAX exception with custom response data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException([\n    'error' => 'Not enough questions',\n    'questionsNeeded' => 2\n]);\n```\n\n----------------------------------------\n\nTITLE: Asset Injection with Attributes in PHP Component\nDESCRIPTION: Example of injecting a JavaScript file with additional attributes including build version for cache management and defer loading. Uses an array as the second parameter to specify multiple attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js', [\n        'build' => 'Acme.Test',\n        'defer' => true\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Imported Twig Macros\nDESCRIPTION: Shows how to call previously imported macro functions. The macros are called like normal functions with the assigned variable name as prefix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ form.input('username') }}</p>\n<p>{{ form.input('password', null, 'password') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Listing All Deferred Bindings\nDESCRIPTION: This code shows how to list all records including deferred ones using the withDeferred method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->withDeferred($sessionKey)->get();\n```\n\n----------------------------------------\n\nTITLE: Referencing Parent Fields in Nested Forms with YAML\nDESCRIPTION: Shows how to reference fields in parent forms or repeater widgets using the caret symbol. The example demonstrates a nested form where a field is shown based on the value of a parent field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    type:\n        label: Type\n        type: dropdown\n        options:\n            1: Simple\n            2: Complex\n\n    content:\n        label: Content\n        type: nestedform\n        form:\n            fields:\n                colors:\n                    label: Colors\n                    type: colorpicker\n                    trigger:\n                        action: show\n                        field: ^type\n                        condition: value[2]\n```\n\n----------------------------------------\n\nTITLE: Balloon Selector with Empty Selection in YAML\nDESCRIPTION: Configuration example showing how to allow empty selection by setting the allowEmpty property to true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-balloon.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    type: balloon-selector\n    label: Gender\n    allowEmpty: true\n```\n\n----------------------------------------\n\nTITLE: Custom Folder Names with Twig Resize Filter\nDESCRIPTION: Demonstrates how to specify a custom folder name (group) when using the resize filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, {\n    filename: 'my-seo-friendly-name',\n    group: '2024-banners'\n}) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Basic If Statement in Twig\nDESCRIPTION: Demonstrates a simple if statement checking for a false condition. This snippet shows how to display a maintenance message when the 'online' variable is false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-if.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if online == false %}\n    <p>The website is in maintenance mode.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: External Group Configuration File\nDESCRIPTION: Example of an external YAML file defining repeater groups that reference other field definition files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n    textarea: $/acme/blog/config/fields_textarea.yaml\n    quote: $/acme/blog/config/fields_quote.yaml\n```\n\n----------------------------------------\n\nTITLE: Listening for Page Render Events\nDESCRIPTION: This JavaScript event listener executes code whenever new content is rendered on the page, including both initial page loads and AJAX updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_16\n\nLANGUAGE: js\nCODE:\n```\naddEventListener('render', function() {\n    // Page has rendered something new\n});\n```\n\n----------------------------------------\n\nTITLE: Checking User Authentication Status in October CMS\nDESCRIPTION: Shows how to verify if a user is signed in and how to retrieve the currently signed in user model using BackendAuth helper methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/users.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Returns true if signed in.\n$loggedIn = BackendAuth::check();\n\n// Returns the signed in user\n$user = BackendAuth::getUser();\n```\n\n----------------------------------------\n\nTITLE: Mail Configuration for Development in PHP\nDESCRIPTION: Configuration example for setting up universal mail recipient during development.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'to' => [\n    'address' => 'dev@example.com',\n    'name' => 'Dev Example'\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Data Import in YAML for October CMS Theme Seeding\nDESCRIPTION: This YAML snippet defines the structure for importing blog post and category data into the database. It specifies the import model, data file, and blueprint UUID for each data set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/seeding-themes.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-\n    name: Blog Post Data\n    class: Tailor\\Models\\RecordImport\n    file: seeds/data/blog-posts.json\n    attributes:\n        file_format: json\n        blueprint_uuid: edcd102e-0525-4e4d-b07e-633ae6c18db6\n-\n    name: Blog Category Data\n    class: Tailor\\Models\\RecordImport\n    file: seeds/data/blog-categories.json\n    attributes:\n        file_format: json\n        blueprint_uuid: b022a74b-15e6-4c6b-9eb9-17efc5103543\n```\n\n----------------------------------------\n\nTITLE: Twig Partial for Displaying AJAX Result\nDESCRIPTION: A simple Twig partial that displays the result of an AJAX calculation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\nThe result is {{ result }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Configurable Form Widget Properties in PHP\nDESCRIPTION: Shows how to define configurable properties in a form widget class and initialize them from the form field configuration. This allows customization of the widget behavior through YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass DatePicker extends FormWidgetBase\n{\n    //\n    // Configurable properties\n    //\n\n    /**\n     * @var string mode for display: datetime, date, time.\n     */\n    public $mode = 'datetime';\n\n    /**\n     * @var string minDate is the minimum/earliest date that can be selected.\n     * eg: 2000-01-01\n     */\n    public $minDate = null;\n\n    /**\n     * @var string maxDate is the maximum/latest date that can be selected.\n     * eg: 2020-12-31\n     */\n    public $maxDate = null;\n\n    //\n    // Object properties\n    //\n\n    /**\n     * {@inheritDoc}\n     */\n    protected $defaultAlias = 'datepicker';\n\n    /**\n     * {@inheritDoc}\n     */\n    public function init()\n    {\n        $this->fillFromConfig([\n            'mode',\n            'minDate',\n            'maxDate',\n        ]);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Changing File Extension with Twig Resize Filter\nDESCRIPTION: Shows how to change the file extension when resizing an image using the resize filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, {\n    filename: 'my-seo-friendly-name',\n    extension: 'png'\n}) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Microsoft IIS Configuration for October CMS\nDESCRIPTION: Web.config file configuration for running October CMS on Microsoft IIS, including URL rewriting rules to handle static assets and route requests properly to the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <rewrite>\n            <rules>\n                <clear />\n                <rule name=\"October CMS to handle all non-allowlisted URLs\" stopProcessing=\"true\">\n                    <match url=\"^(.*)$\" ignoreCase=\"false\" />\n                    <conditions logicalGrouping=\"MatchAll\">\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/.well-known/*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/uploads/public/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/media/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/resources/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/temp/public/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/themes/.*/(assets|resources)/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/plugins/.*/(assets|resources)/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/modules/.*/(assets|resources)/.*\" negate=\"true\" />\n                    </conditions>\n                    <action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"true\" />\n                </rule>\n            </rules>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Updating Console Kernel\nDESCRIPTION: Code changes required in app/Console/Kernel.php to update Console Kernel inheritance\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n// File app/Console/Kernel.php\n\n// Replace\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n\n// With\nuse October\\Rain\\Foundation\\Console\\Kernel as ConsoleKernel;\n```\n\n----------------------------------------\n\nTITLE: Updating a Model with Touch Functionality\nDESCRIPTION: This code shows how updating a model with touches property will automatically update the parent model's timestamp.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\n$comment->text = 'ÁºñËæëÊ≠§ËØÑËÆ∫!';\n\n$comment->save();\n```\n\n----------------------------------------\n\nTITLE: Create Page Configuration in YAML\nDESCRIPTION: Configuration options for the Create page including title, redirect paths for different scenarios, and custom flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreate:\n    title: New Blog Post\n    redirect: acme/blog/posts/update/:id\n    redirectClose: acme/blog/posts\n    flashSave: Post has been created!\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Custom Success Handler\nDESCRIPTION: Demonstrates overriding the default success handler while still maintaining default functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {success: function(data) {\n    //... do something ...\n    this.success(data);\n}})\n```\n\n----------------------------------------\n\nTITLE: Theme Options Translation JSON Example\nDESCRIPTION: JSON translation file example demonstrating how to use code-based keys for theme-specific translations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/localization.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"theme.options.website_name\": \"October CMS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Field Configuration in YAML\nDESCRIPTION: Demonstrates the basic setup of a text input field with a label property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-text.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblog_title:\n    type: text\n    label: Blog Title\n```\n\n----------------------------------------\n\nTITLE: Adding Multisite Columns in October CMS Migration\nDESCRIPTION: Illustrates how to add multisite-related columns to a database table using a migration in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->integer('site_id')->nullable()->index();\n    $table->integer('site_root_id')->nullable()->index();\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Default Markup with the {% component %} Tag in Twig\nDESCRIPTION: This snippet demonstrates how to use the {% component %} tag to render the default markup for a CMS component called 'blogPosts'. The component tag will look for and display the default.htm partial from the component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-component.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Public Directory Mirror in October CMS\nDESCRIPTION: Command to create a public directory with symbolic links to assets and resources for enhanced security.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:mirror\n```\n\n----------------------------------------\n\nTITLE: Dumping Single Variable in Twig\nDESCRIPTION: This snippet demonstrates how to use the dump() function to inspect a single template variable named 'user'. This is useful for debugging the contents of a specific variable in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-dump.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in PHP\nDESCRIPTION: Redis configuration example specifying cluster settings, host, port, and database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'cluster' => false,\n\n    'default' => [\n        'host'     => '127.0.0.1',\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n],\n```\n\n----------------------------------------\n\nTITLE: Detecting JSON Content Type Requests in PHP\nDESCRIPTION: Shows how to determine if the request has JSON content type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nif (Request::isJson()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Title Layout\nDESCRIPTION: Layout template demonstrating how to implement a dynamic page title using page properties\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>{{ this.page.meta_title }} - October CMS</title>\n    </head>\n    <body>\n        {% page %}\n    </body>\n<html>\n```\n\n----------------------------------------\n\nTITLE: Syncing Records Across All Sites\nDESCRIPTION: Demonstrates how to configure a blueprint to sync records across all sites, regardless of site groups. Useful for global content types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmultisite: all\n```\n\n----------------------------------------\n\nTITLE: Reversing Database Migrations\nDESCRIPTION: Command to reverse all migrations, dropping database tables and deleting data. Use with caution as it will remove all data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:down\n```\n\n----------------------------------------\n\nTITLE: Checking Content Existence in Twig\nDESCRIPTION: Shows how to check if a content file exists before rendering\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasContent('welcome.htm') %}\n    {% content 'welcome.htm' %}\n{% else %}\n    <p>Welcome content not found!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Behavior for Sorting in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the List Behavior to enable sorting and restructuring of records. It includes options for showing a tree hierarchy, enabling reordering, and setting a maximum depth for nested structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/reorder.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Behavior Config\n# ===================================\n\n# ...\n\nstructure:\n    showTree: true\n    showReorder: true\n    maxDepth: 2\n```\n\n----------------------------------------\n\nTITLE: Configuring pager() Function with Options in Twig\nDESCRIPTION: Shows how to use the pager() function with various configuration options such as withQuery, appends, and fragment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pager(records, { withQuery: true }) }}\n\n{{ pager(records, { appends: { sort: 'votes' } }) }}\n\n{{ pager(records, { fragment: 'foo' }) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Secondary Navigation Items\nDESCRIPTION: Configuration for placing an item as a secondary navigation item under a specific parent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    parent: <handle|uuid>\n```\n\n----------------------------------------\n\nTITLE: AJAX Partial Implementation in Twig\nDESCRIPTION: Basic Twig markup for including an AJAX-enabled partial on a page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/polling.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' %}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to a Partial with Component\nDESCRIPTION: Shows how to pass variables to a partial that contains a component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'my-todo-partial' maxItems='10' %}\n```\n\n----------------------------------------\n\nTITLE: Collection Empty Check\nDESCRIPTION: Twig conditional check to verify if a collection contains records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if posts is not empty %}\n    {# ... #}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Title for SEO in Twig\nDESCRIPTION: Demonstrates accessing the meta_title property, which is an alternative title field intended for SEO purposes, typically used in the HTML title tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ this.page.meta_title }}</title>\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Join Clauses with Closures\nDESCRIPTION: Demonstrates how to use a Closure with the join method to create complex join conditions with multiple constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')->orOn(...);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Package in October CMS Plugin\nDESCRIPTION: Example of configuring a Laravel package (Purifier) in an October CMS plugin. This code should be placed in the plugin's boot() method to transfer configuration values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::set('purifier', Config::get('acme.blog::purifier'));\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Message Container for Form Validation\nDESCRIPTION: HTML element with the data-validate-error attribute that will display validation error messages when validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-validate-error></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Widget in YAML\nDESCRIPTION: YAML configuration for a date picker widget that renders a text field for selecting dates and times with various formatting options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\npublished_at:\n    label: Published\n    type: datepicker\n    mode: date\n```\n\n----------------------------------------\n\nTITLE: Component Access in Twig Template\nDESCRIPTION: Shows how to access component data in a Twig template using the component variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in blogPosts.posts %}\n    {{ post }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Managing Plugin Status in October CMS\nDESCRIPTION: Commands for listing, enabling, disabling, and removing plugins\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:list\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:disable AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:enable AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:remove AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Custom Keys in belongsTo Relationship\nDESCRIPTION: Demonstrates how to specify both custom foreign and local keys in a belongs-to relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => [Acme\\Blog\\Models\\Post::class, 'key' => 'my_post_id', 'otherKey' => 'my_id']\n];\n```\n\n----------------------------------------\n\nTITLE: Converting String to Singular in PHP\nDESCRIPTION: The str_singular function converts a string to its singular form. This function currently only supports the English language.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_24\n\nLANGUAGE: PHP\nCODE:\n```\n$singular = str_singular('cars');\n\n// car\n```\n\n----------------------------------------\n\nTITLE: Accessing Carbon Methods on Date Attributes\nDESCRIPTION: Example of accessing a Carbon instance method on a date attribute after retrieving it from the model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->disabled_at->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Basic Translation Filter in Twig\nDESCRIPTION: Demonstrates the basic usage of the trans filter to translate a simple string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/trans.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'I love programming.'|trans }};\n```\n\n----------------------------------------\n\nTITLE: JavaScript API for Partial Updates\nDESCRIPTION: Demonstrates partial updates using the October CMS JavaScript API with update configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#mybutton', 'onRefreshTime', {\n    update: { mytime: '#myDiv' }\n});\n```\n\n----------------------------------------\n\nTITLE: Throwing Application Exception in October CMS\nDESCRIPTION: Demonstrates how to throw an ApplicationException, which is used for simple application condition failures. The error message is simplified and never includes sensitive information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nthrow new ApplicationException('You must be logged in to do that!');\n```\n\n----------------------------------------\n\nTITLE: Rendering View in PHP\nDESCRIPTION: Demonstrates how to render a view and pass data to it using the View::make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nreturn View::make('acme.blog::greeting', ['name' => 'Charlie']);\n```\n\n----------------------------------------\n\nTITLE: Rendering Variable Field in October CMS\nDESCRIPTION: Demonstrates how to use the variable tag to set a form field type exactly as defined in the 'type' attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{variable type=\"text\" name=\"name\" label=\"Name\"}John{/variable}\n```\n\n----------------------------------------\n\nTITLE: Managing Plugins in October CMS\nDESCRIPTION: Commands for listing, disabling, enabling, and removing plugins in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:list\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:disable AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:enable AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:remove AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Using the {% scripts %} System Placeholder in Twig\nDESCRIPTION: Demonstrates how to use the {% scripts %} system placeholder to insert JavaScript file references injected by the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Redirecting to an External URL in Twig\nDESCRIPTION: This example demonstrates how to redirect to an external URL by passing a fully qualified address to the redirect() function instead of a CMS page name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/redirect.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('https://octobercms.com') %}\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Link Text and URL from PHP Model\nDESCRIPTION: Example of how to return an array from a model containing both the URL and custom link text for a linkage column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-linkage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n['https://octobercms.com', 'October CMS']\n```\n\n----------------------------------------\n\nTITLE: Configuring String Length for MySQL/MariaDB in October CMS\nDESCRIPTION: Configuration snippet for setting maximum varchar length in MySQL/MariaDB connections for October CMS. This is required for older versions of MySQL (< 5.7.7) or MariaDB (< 10.2.2) when using utf8mb4 character set to ensure proper index creation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/database-config.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => [\n    // ...\n    'varcharmax' => 191,\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uploaded Files in PHP with October CMS\nDESCRIPTION: Shows how to access uploaded files using the Input facade or files helper function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$file = Input::file('photo');\n\n$file = files('photo');\n```\n\n----------------------------------------\n\nTITLE: Using a Global Validation Rule\nDESCRIPTION: Demonstrates how to use a globally registered validation rule in a validator instance. The example uses the 'uppercase' rule that was registered globally.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'shoutout' => 'required|uppercase',\n]);\n```\n\n----------------------------------------\n\nTITLE: Including Extra Features in Twig Template\nDESCRIPTION: Demonstrates how to include additional StyleSheet and JavaScript files for AJAX framework features in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Media Finder in October CMS\nDESCRIPTION: Shows how to create a file selector for media library items and how to render the selected file in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{mediafinder name=\"logo\" label=\"Logo\"}defaultlogo.png{/mediafinder}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ logo|media }}\n```\n\n----------------------------------------\n\nTITLE: Entries Field with MaxItems Limitation\nDESCRIPTION: Configuration to limit the number of selectable items in an entries field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    maxItems: 1\n```\n\n----------------------------------------\n\nTITLE: Variable Access in PHP Section\nDESCRIPTION: Shows different methods of accessing and setting variables in the PHP section of an October CMS template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/themes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Write via array\n$this['foo'] = 'bar';\n\n// Read via array\necho $this['foo'];\n\n// Read-only via object\necho $this->foo;\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Dependencies in YAML\nDESCRIPTION: Example showing how to define filter scopes with dependencies using YAML configuration. Demonstrates country and city filters where city depends on country selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: group\n    conditions: country_id in (:filtered)\n    modelClass: October\\Test\\Models\\Location\n    options: getCountryOptions\n\ncity:\n    label: City\n    type: group\n    conditions: city_id in (:filtered)\n    modelClass: October\\Test\\Models\\Location\n    options: getCityOptions\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Sample version.yaml File for October CMS Plugin\nDESCRIPTION: Demonstrates the structure of a version.yaml file, including version numbers, update messages, and references to migration scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/updates.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n1.0.1: \"First version\"\n1.0.2: \"Second version\"\n1.0.3:\n    - \"Third version\"\n    - \"which has a lot of changes\"\n    - \"including this one\"\n1.1.0: \"!!! Important update\"\n1.1.1:\n    - \"Update with a migration and seed\"\n    - \"and here's the migration\"\n    - create_tables.php\n    - \"and here's the seed\"\n    - seed_the_database.php\n```\n\n----------------------------------------\n\nTITLE: Basic Nested Items Configuration in YAML\nDESCRIPTION: Basic configuration for a 'nesteditems' field that creates a menu items interface with a title field. This shows the minimum required properties to set up a functional nested items field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-nesteditems.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nitems:\n    label: Menu Items\n    type: nesteditems\n    span: adaptive\n    form:\n        fields:\n            title:\n                label: Title\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Adding List Filtering (YAML)\nDESCRIPTION: Configuration to enable list filtering by referencing a filter configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nfilter: $/acme/blog/models/post/scopes.yaml\n```\n\n----------------------------------------\n\nTITLE: Cropping Image with Twig Resize Filter\nDESCRIPTION: Demonstrates how to use the resize filter with the 'crop' mode option to crop an image to 800x600 pixels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { mode: 'crop' }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Pagination Template in HTML\nDESCRIPTION: Shows the HTML structure of the default pagination template used by the pager() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"pagination\">\n    <li class=\"page-item first\">\n        <span class=\"page-link\">&larr;</span>\n    </li>\n    <li class=\"page-item\">\n        <a class=\"page-link\" href=\"?page=1\">1</a>\n    </li>\n    <li class=\"page-item last\">\n        <a class=\"page-link\" href=\"?page=2\">&rarr;</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Variables in Content\nDESCRIPTION: Shows how to access array variables within content blocks\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    {likes}\n        <li>{name}</li>\n    {/likes}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Class Implementation\nDESCRIPTION: Shows a basic component class implementation with component details and a posts method that returns data to the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Components;\n\nclass BlogPosts extends \\Cms\\Classes\\ComponentBase\n{\n    public function componentDetails()\n    {\n        return [\n            'name' => 'Blog Posts',\n            'description' => 'Displays a collection of blog posts.'\n        ];\n    }\n\n    // This array becomes available on the page as {{ component.posts }}\n    public function posts()\n    {\n        return ['First Post', 'Second Post', 'Third Post'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Job Deletion Example\nDESCRIPTION: Shows how to delete a processed job from the queue using the delete method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function fire($job, $data)\n{\n    // Process the job...\n\n    $job->delete();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Date Value in Date Scope\nDESCRIPTION: YAML configuration for a date filter with a default value. The default date must be wrapped in quotes to represent a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    default: '2020-01-02'\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Field in YAML for OctoberCMS\nDESCRIPTION: This code shows how to configure an email input field in YAML format for OctoberCMS forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nuser_email:\n    label: Email Address\n    type: email\n```\n\n----------------------------------------\n\nTITLE: Basic Default Filter Usage in Twig\nDESCRIPTION: Examples showing different ways to use the default filter to handle undefined or empty values in Twig templates. Demonstrates usage with direct variables, object properties, array keys, and empty strings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/default.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable|default('The variable is not defined') }}\n\n{{ variable.foo|default('The foo property on variable is not defined') }}\n\n{{ variable['foo']|default('The foo key in variable is not defined') }}\n\n{{ ''|default('The variable is empty') }}\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Title for SEO in Twig\nDESCRIPTION: Shows how to set a more descriptive meta title for SEO purposes using the meta_title property of the this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ this.page.meta_title }}</title>\n```\n\n----------------------------------------\n\nTITLE: SQL Tracing in October CMS\nDESCRIPTION: Shows how to enable SQL query logging using the trace_sql helper function which logs database commands to system.log file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/log.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntrace_sql();\n\nDb::table('users')->count();\n\n// select count(*) as aggregate from users\n```\n\n----------------------------------------\n\nTITLE: Filtering and Mapping a Collection in PHP\nDESCRIPTION: Shows how to filter active users and map their names using collection methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::get();\n\n$names = $users->filter(function ($user) {\n        return $user->is_active === true;\n    })\n    ->map(function ($user) {\n        return $user->name;\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Model Scope for Number Filter in YAML\nDESCRIPTION: Shows how to specify a custom model scope method for the Number Scope filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-number.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    modelScope: numberFilter\n```\n\n----------------------------------------\n\nTITLE: Storing Files with Content or Resource\nDESCRIPTION: Shows two ways to store files: by passing file contents directly or by using a PHP resource for streaming large files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nStorage::put('file.jpg', $contents);\n\nStorage::put('file.jpg', $resource);\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Model Scope for Date Filter\nDESCRIPTION: YAML configuration that defines a custom modelScope named 'dateFilter' for the date filter. This connects the filter to a PHP method in the model for custom filtering logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    modelScope: dateFilter\n```\n\n----------------------------------------\n\nTITLE: Scoped Relationship Definition\nDESCRIPTION: Example of using scope parameters in relationship definitions with a corresponding scope method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $belongsToMany = [\n        'categories' => [\n            \\Acme\\Blog\\Models\\Category::class,\n            'scope' => 'isActive'\n        ]\n    ];\n}\n\nclass Category extends Model\n{\n    public function scopeIsActive($query)\n    {\n        return $query->where('is_active', true)->orderBy('name', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Localization Strings with Lang Class in October CMS\nDESCRIPTION: Example of using the Lang class to access a localization string in October CMS. The example demonstrates the syntax for loading a string from a plugin's language file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/localization.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\necho Lang::get('acme.blog::lang.app.name');\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Definition\nDESCRIPTION: Shows how to define URL parameters in a page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n```\n\n----------------------------------------\n\nTITLE: Using splice() Method in PHP Collections\nDESCRIPTION: The splice method removes and returns a slice of items starting at a specified index. Additional parameters can limit the size of the chunk and replace removed items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2);\n\n$chunk->all();\n\n// [3, 4, 5]\n\n$collection->all();\n\n// [1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 4, 5]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$chunk = $collection->splice(2, 1, [10, 11]);\n\n$chunk->all();\n\n// [3]\n\n$collection->all();\n\n// [1, 2, 10, 11, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Creating Route Groups with Middleware\nDESCRIPTION: Demonstrates an alternative approach to applying middleware to a group of routes using the middleware method followed by group.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nRoute::middleware(['Path\\To\\Your\\Middleware'])->group(function() {\n    Route::get('info', 'Acme\\News@info');\n});\n```\n\n----------------------------------------\n\nTITLE: Simple HTML View for Backend Controller in October CMS\nDESCRIPTION: Shows an example of a basic HTML view file (index.htm) that corresponds to the index action method in a backend controller. It simply displays a 'Hello World' heading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/controllers-ajax.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hello World</h1>\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Custom Download Filename and New Window in HTML\nDESCRIPTION: Button that triggers a file download with a specified filename and opens it in a new browser window/tab.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onDownloadFile\"\n    data-request-download=\"sample.pdf\"\n    data-browser-target=\"_blank\">\n    Download\n</button>\n```\n\n----------------------------------------\n\nTITLE: Saving a Resized Image in OctoberCMS\nDESCRIPTION: Saves a resized image to a specified file path on disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$image->save('path/to/new/file.jpg');\n```\n\n----------------------------------------\n\nTITLE: PHP Form with Attributes\nDESCRIPTION: Demonstrates adding attributes to a form using PHP Form class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(array('id' => 'example', 'class' => 'something')) ?>\n    // ..\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Repeater Groups in October CMS\nDESCRIPTION: Shows an example of the repeater_fields.yaml group configuration file for use with the repeater field in group mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nquote:\n    name: Quote\n    description: Quote item\n    icon: icon-quote-right\n    fields:\n        quote_position:\n            span: auto\n            label: Quote Position\n            type: radio\n            options:\n                left: Left\n                center: Center\n                right: Right\n        quote_content:\n            span: auto\n            label: Details\n            type: textarea\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request URI in PHP\nDESCRIPTION: Demonstrates how to get the current request path using the Request facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$uri = Request::path();\n```\n\n----------------------------------------\n\nTITLE: Text Input Generation\nDESCRIPTION: Shows various ways to generate text input fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::text('username') ?>\n\n<?= Form::text('email', 'emailaddress@example.com') ?>\n\n<?= Form::password('password') ?>\n\n<?= Form::email($name, $value = null, $attributes = []) ?>\n<?= Form::file($name, $attributes = []) ?>\n```\n\n----------------------------------------\n\nTITLE: Waiting for Variable Availability in Turbo Router using JavaScript\nDESCRIPTION: Shows how to use the 'oc.waitFor' function to wait for an object or variable to exist before executing code, with an optional timeout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\noc.waitFor(() => window.propName, 2000).then(() => {\n    console.log('Found the variable!')\n}).catch(() => {\n    console.error('Gave up waiting...')\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Relation Manager in a View\nDESCRIPTION: PHP code showing how to render a relation manager for 'comments' in a view file, including an example of setting the read-only option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->formRenderPreview() ?>\n\n<?= $this->relationRender('comments') ?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Session Data with this.session.forget and this.session.flush in Twig\nDESCRIPTION: Shows how to delete a single key from the session using 'this.session.forget' and how to remove all session data using 'this.session.flush'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-session.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do this.session.forget('key') %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do this.session.flush() %}\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Settings Page in October CMS\nDESCRIPTION: Example of registering a settings link to a backend page in the Plugin registration class by overriding the registerSettings method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'location' => [\n            'label'       => 'Locations',\n            'description' => 'Manage available user countries and states.',\n            'category'    => 'Users',\n            'icon'        => 'icon-globe',\n            'url'         => Backend::url('acme/user/locations'),\n            'order'       => 500,\n            'keywords'    => 'geography place placement'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Success Handlers in HTML\nDESCRIPTION: Examples of handling returned data in success callbacks using both data attributes and JavaScript APIs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onHandleForm\" data-request-success=\"console.log(data)\">\n\n<form\n    onsubmit=\"$(this).request('onHandleForm', {\n        success: function(data) {\n            console.log(data);\n        }\n    }); return false;\">\n```\n\n----------------------------------------\n\nTITLE: Queue Job with Specific Queue Name\nDESCRIPTION: Example of pushing a job to a specific named queue or tube.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message], 'emails');\n```\n\n----------------------------------------\n\nTITLE: View Response Creation\nDESCRIPTION: Shows how to create a response from a view with additional headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::view('acme.blog::hello')->header('Content-Type', $type);\n```\n\n----------------------------------------\n\nTITLE: Using sum() Method in PHP Collections\nDESCRIPTION: The sum method returns the sum of all items in the collection. For collections with nested arrays or objects, you can specify a key to sum or provide a custom callback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_60\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4, 5])->sum();\n\n// 15\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n]);\n\n$collection->sum('pages');\n\n// 1272\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$collection->sum(function ($product) {\n    return count($product['colors']);\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Component Tag Equivalent Partial Syntax\nDESCRIPTION: Shows the equivalent partial syntax that the component tag uses internally to render the default.htm partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/component.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blogPosts::default\" %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Values in October CMS\nDESCRIPTION: How to access cookie values using the Cookie facade. By default, all October CMS cookies are encrypted and signed with an authentication code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = Cookie::get('name');\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Results with Where Clause in PHP\nDESCRIPTION: Demonstrates paginating model results with additional query constraints like where clauses. This example paginates User records where votes are greater than 100.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Applying Model Scope to Relation Field in YAML\nDESCRIPTION: Illustrates how to use a model scope to filter relation results using the modelScope property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    modelScope: withTrashed\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Database Connections\nDESCRIPTION: Demonstrates how to access different database connections when working with multiple databases in an application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::connection('foo')->select(...);\n\n```\n\n----------------------------------------\n\nTITLE: Using 'not' Operator in Twig Conditions\nDESCRIPTION: Demonstrates the use of the 'not' operator to check for false conditions. This snippet displays a message if a user is not subscribed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-if.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if not user.subscribed %}\n    <p>You are not subscribed to our mailing list.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Inverse Relationship Configuration\nDESCRIPTION: Configuration examples for setting up inverse relationships between blueprints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    type: entries\n    source: Blog\\Category\n```\n\nLANGUAGE: yaml\nCODE:\n```\nposts:\n    type: entries\n    source: Blog\\Post\n    inverse: categories\n    hidden: true\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Migration in October CMS\nDESCRIPTION: This command reverses all migrations, dropping database tables and deleting data. It should be used with caution as it can result in data loss.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/updating-october.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate --rollback\n```\n\n----------------------------------------\n\nTITLE: Using Component Variables in Resources Component\nDESCRIPTION: Shows how to use component variables within the resources component. This example uses an author component's ID value to create a page variable named 'authorIdPage'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/resources.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/author/:slug\"\n\n[section author]\nhandle = \"Blog\\Author\"\nidentifier = \"slug\"\n\n[resources]\nvars[authorIdPage] = 'Author ID is: {{ author.id }}'\n```\n\n----------------------------------------\n\nTITLE: Flattening Multi-Dimensional Collections in PHP\nDESCRIPTION: The flatten method flattens a multi-dimensional collection into a single dimension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'languages' => ['php', 'javascript']]);\n\n$flattened = $collection->flatten();\n\n$flattened->all();\n\n// ['peter', 'php', 'javascript'];\n```\n\n----------------------------------------\n\nTITLE: Defining List Columns in YAML\nDESCRIPTION: Example of defining list columns in a YAML file, specifying column names and labels for a blog post model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Column Definitions\n# ===================================\n\ncolumns:\n    name: Name\n    email: Email\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Title Layout\nDESCRIPTION: Layout template implementing dynamic page titles using meta properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>{{ this.page.meta_title }} - October CMS</title>\n    </head>\n    <body>\n        {% page %}\n    </body>\n<html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Display Mode in YAML for October CMS\nDESCRIPTION: This YAML snippet demonstrates how to configure the popup display mode and set the size for form management in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndesign:\n    displayMode: popup\n    size: 750\n```\n\n----------------------------------------\n\nTITLE: Displaying Resized Image in Twig\nDESCRIPTION: Demonstrates how to display a resized image attachment in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ model.avatar.getThumb(100, 100, {'mode':'exact', 'quality': 80, 'extension': 'webp'}) }}\" alt=\"Description Image\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Static Class Method as Model Scope\nDESCRIPTION: Example showing how to implement a model scope as a static method on a custom PHP class when specified in the YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter-scopes.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nclass MyCustomClass\n{\n    public static function applyMyFilter($query, $scope)\n    {\n        return $query->whereIn('my_filter_attribute', (array) $scope->value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple View in Twig\nDESCRIPTION: Demonstrates a simple view file using Twig syntax, stored in the plugin's views directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n<!-- View stored in plugins/acme/blog/views/greeting.htm -->\n\n<html>\n    <body>\n        <h1>Hello, {{ name }}</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Up User-Specific Cron Job\nDESCRIPTION: Example of configuring a cron job for a specific user (alice) in /etc/cron.d directory to run the October CMS scheduler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/scheduler.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n* * * * * alice php /october/artisan schedule:run >> /dev/null 2>&1\n```\n\n----------------------------------------\n\nTITLE: Retrieving POST Request Variables in PHP\nDESCRIPTION: The post function obtains an input item from the request, restricted to POST variables only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_35\n\nLANGUAGE: PHP\nCODE:\n```\n$value = post('key', $default = null)\n```\n\n----------------------------------------\n\nTITLE: Comments Relation Configuration in YAML\nDESCRIPTION: Example YAML configuration for managing blog post comments relationship\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\ncomments:\n    label: Comment\n    manage:\n        form: $/acme/blog/models/comment/fields.yaml\n        list: $/acme/blog/models/comment/columns.yaml\n    view:\n        list: $/acme/blog/models/comment/columns.yaml\n        toolbarButtons: create|delete\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Model in October CMS PHP\nDESCRIPTION: Shows the basic structure of a model class in October CMS. The model extends the base Model class and defines the database table to use.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass Post extends Model\n{\n    /**\n     * The table associated with the model.\n     *\n     * @var string\n     */\n    protected $table = 'acme_blog_posts';\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Picker Configuration in YAML\nDESCRIPTION: Demonstrates the basic configuration of a date picker field for selecting a publication date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datepicker.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npublished_at:\n    label: Published\n    type: datepicker\n    mode: date\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Component Properties with External Values in INI\nDESCRIPTION: Example showing how to reference URL parameters dynamically in component properties using external property value syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/:my_custom_parameter\"\n\n[blogPost]\nid = \"{{ :my_custom_parameter }}\"\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Errors with JavaScript API\nDESCRIPTION: Demonstrates how to handle AJAX errors using the JavaScript API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<form onsubmit=\"oc.request(this, 'onHandleForm', {\n        error: function(data) {\n            console.log(data);\n        }\n    }); return false\"\n>\n```\n\n----------------------------------------\n\nTITLE: Binding to Component Events in CMS Pages\nDESCRIPTION: Example of binding to a component's local event from within a CMS page's PHP section, allowing custom code to execute when specific component actions occur.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[topic]\nslug = \"{{ :slug }}\"\n==\nfunction onInit()\n{\n    $this->topic->bindEvent('topic.post', function($post, $postUrl) {\n        trace_log('A post has been submitted at '.$postUrl);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Linkage Column Configuration in YAML\nDESCRIPTION: Basic implementation of a linkage column that displays a website URL as a clickable link in an October CMS list definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-linkage.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebsite:\n    label: Website\n    type: linkage\n```\n\n----------------------------------------\n\nTITLE: Balloon Selector with Default Value in YAML\nDESCRIPTION: Example showing how to set a default value for the balloon-selector field using the default property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-balloon.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    type: balloon-selector\n    label: Gender\n    default: female\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Information in YAML\nDESCRIPTION: Example of theme.yaml configuration file showing basic theme metadata including name, description, author, and other required fields\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"October CMS Demo\"\ndescription: \"Demonstrates the basic concepts of the front-end theming.\"\nauthor: \"October CMS\"\nhomepage: \"https://octobercms.com\"\ncode: \"Demo\"\nauthorCode: \"Acme\"\n```\n\n----------------------------------------\n\nTITLE: Using Verbatim Tag in Twig\nDESCRIPTION: Demonstrates how to use the {% verbatim %} tag to prevent Twig from parsing a section of code. This is useful when you want to display Twig-like syntax without it being processed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-verbatim.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% verbatim %}<p>Hello, {{ name }}</p>{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Syncing Many-to-Many Relationships in OctoberCMS\nDESCRIPTION: Example demonstrating the sync method to update many-to-many relationships. This replaces all existing relationships with the new ones specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Partials in October CMS\nDESCRIPTION: Shows how to pass variables to a partial when rendering it using the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"blog-posts\" posts=posts %}\n</div>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" city=\"Vancouver\" country=\"Canada\" %}\n</div>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {{ country }}, city: {{ city }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Field Implementation in YAML\nDESCRIPTION: Basic implementation of a switch field with label and type properties for October CMS forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-switch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display Content\n    type: switch\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin via Command Line\nDESCRIPTION: Command to download and install a plugin by its author and name from the October marketplace. Requires a project binding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Global Media Event Listener\nDESCRIPTION: Example of listening to Media Manager events globally using the Event facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\\Event::listen('media.file.rename', function($widget, $originalPath, $newPath) {\n    // Update custom references to path here\n});\n```\n\n----------------------------------------\n\nTITLE: Collection SortBy Method Complete Example\nDESCRIPTION: Detailed example of sorting a collection of objects by age and displaying names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set data = [{'name': 'David', 'age': 31}, {'name': 'John', 'age': 28}] %}\n\n{% for item in collect(data).sortBy('age') %}\n    {{ item.name }}&nbsp;\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Filters with Arguments in Twig\nDESCRIPTION: Filters can accept arguments like functions, allowing for more flexible modifications of variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ price|currency('USD') }}\n```\n\n----------------------------------------\n\nTITLE: Moving Uploaded Files\nDESCRIPTION: Shows how to move uploaded files to a permanent location, with optional custom filename.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nInput::file('photo')->move($destinationPath);\n\nInput::file('photo')->move($destinationPath, $fileName);\n```\n\n----------------------------------------\n\nTITLE: Creating Page List Properties in October CMS\nDESCRIPTION: Example of defining a property for selecting pages, useful for components that need to create links to other pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n        return [\n            'postPage' => [\n                'title' => 'Post page',\n                'type' => 'dropdown',\n                'default' => 'blog/post'\n            ]\n        ];\n}\n\npublic function getPostPageOptions()\n{\n    return Page::sortBy('baseFileName')->lists('baseFileName', 'baseFileName');\n}\n```\n\n----------------------------------------\n\nTITLE: Using External Partial Variables for Component Properties\nDESCRIPTION: This code demonstrates how to initialize component properties with values loaded from partial parameters in October CMS. The 'maxItems' property will be loaded from a partial variable using the mustache syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeSince Column in October CMS List\nDESCRIPTION: Configuration for a timesince column which displays a human readable time difference from the value to the current time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: timesince\n```\n\n----------------------------------------\n\nTITLE: AJAX Form Opening Basic\nDESCRIPTION: Demonstrates basic usage of form_ajax() function for AJAX-enabled forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_ajax('onUpdate') }}\n```\n\n----------------------------------------\n\nTITLE: Using Theme Variables in LESS Stylesheets\nDESCRIPTION: Example of using theme-defined variables in a LESS stylesheet, showing how assetVar values become LESS variables that can be used throughout styles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_12\n\nLANGUAGE: less\nCODE:\n```\na { color: @link-color }\n```\n\n----------------------------------------\n\nTITLE: Binding Events in Extended Models in PHP\nDESCRIPTION: Example of extending a model to bind to the model.beforeSave event using the static extend method and bindEvent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\Models\\User::extend(function($model) {\n    $model->bindEvent('model.beforeSave', function() use ($model) {\n        // ...\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic AJAX Handler in PHP\nDESCRIPTION: Shows a simple AJAX handler implementation that displays a success message when a field changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function onChangeContent()\n{\n    Flash::success('Great job!');\n}\n```\n\n----------------------------------------\n\nTITLE: Appending to String in PHP\nDESCRIPTION: The str_finish function adds a single instance of the given value to a string if it doesn't already end with it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_20\n\nLANGUAGE: PHP\nCODE:\n```\n$string = str_finish('this/string', '/');\n\n// this/string/\n```\n\n----------------------------------------\n\nTITLE: Basic Placeholder Usage in Twig\nDESCRIPTION: Basic syntax for defining and using placeholders in Twig templates, along with injecting content using the put tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder name %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put name %}\n    <p>Place this text in the name placeholder</p>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Using displayFrom Property for Custom Link Presentation\nDESCRIPTION: Configuration showing how to use the displayFrom property to maintain sorting and searching on the database value while displaying a link using a custom attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-linkage.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwebsite:\n    label: Website\n    type: linkage\n    displayFrom: website_link\n```\n\n----------------------------------------\n\nTITLE: Processing Config in Content Field Class\nDESCRIPTION: Example of processing a custom config item 'secondaryTitle' in the content field class. The config is defined as a property and filled using the defineConfig method override.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass MyContentField extends ContentFieldBase\n{\n    public $secondaryTitle;\n\n    public function defineConfig(array $config)\n    {\n        if (isset($config['secondaryTitle'])) {\n            $this->secondaryTitle = $config['secondaryTitle'];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using cache_path() Helper in PHP\nDESCRIPTION: The cache_path function returns the fully qualified path to the application cache directory. It optionally accepts a relative path parameter to generate a path to a specific file within the cache directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$path = cache_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = cache_path('cms/cachefile.json');\n```\n\n----------------------------------------\n\nTITLE: Passing Variable Collections to Content Blocks in OctoberCMS\nDESCRIPTION: Demonstrates how to pass variable collections as arrays to content blocks and iterate over them within the content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-content.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" likes=[\n    {name:'Dogs'},\n    {name:'Fishing'},\n    {name:'Golf'}\n] %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n    {likes}\n        <li>{name}</li>\n    {/likes}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Column in October CMS\nDESCRIPTION: This configuration sets up a time column in an October CMS list view, displaying the time in a standard format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: time\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Column in October CMS List\nDESCRIPTION: Configuration for a text column which displays content aligned to the left. The example shows basic usage and custom formatting options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    type: text\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    type: text\n    format: Admin:%s (active)\n```\n\n----------------------------------------\n\nTITLE: Accessing Pager Variables in Twig\nDESCRIPTION: Demonstrates how to extract paginated links and meta data from a paginated query using the pager() function in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set records = postModel.paginate(3) %}\n\n{% set paginator = pager(records) %}\n\n<a href=\"{{ paginator.links.first }}\"></a>\n```\n\n----------------------------------------\n\nTITLE: Form Closing Tag Output in Twig\nDESCRIPTION: Shows the form_close() helper and its HTML output for closing a form tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_close() }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Values for Optional Parameters in October CMS\nDESCRIPTION: Example of defining a default value for an optional URL parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/category/:category_id?10\"\n```\n\n----------------------------------------\n\nTITLE: Array-Based Group Filter Configuration in YAML\nDESCRIPTION: Shows how to configure a group filter using predefined options array instead of a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Role\n    type: group\n    options:\n        developer: Developer\n        publisher: Publisher\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Count with Constraints in October CMS\nDESCRIPTION: This example demonstrates lazy loading the count of related records with additional query constraints. It counts only the roles with a specific clearance level.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$user->loadCount(['roles' => function ($query) {\n    $query->where('clearance', '>', 5);\n}])\n```\n\n----------------------------------------\n\nTITLE: Sending POST Parameters Across Multiple Elements in HTML\nDESCRIPTION: This example illustrates how to send a POST parameter across multiple elements using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-request-data=\"{ id: 7 }\">\n    <button data-request=\"onDelete\">Delete</button>\n    <button data-request=\"onSave\">Update</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dumping Multiple Variables in Twig\nDESCRIPTION: This example shows how to use dump() to inspect multiple variables simultaneously. It dumps information about both 'user' and 'categories' variables, allowing for efficient debugging of multiple template variables at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-dump.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user, categories) }}\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Bucket Policy for Specific Directory\nDESCRIPTION: JSON resource pattern for restricting public access to a specific folder within an S3 bucket. This can be used to limit public access to only the media directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/providers.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"arn:aws:s3:::BUCKETNAME/media/*\"\n```\n\n----------------------------------------\n\nTITLE: Managing Database Transactions in PHP\nDESCRIPTION: This snippet demonstrates how to run a set of operations within a database transaction using the Db facade in October CMS. It automatically handles commit and rollback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::transaction(function () {\n    Db::table('users')->update(['votes' => 1]);\n\n    Db::table('posts')->delete();\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Checking HTTP Method in October CMS\nDESCRIPTION: How to get the current HTTP request method and check if it matches a specific method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$method = Request::method();\n\nif (Request::isMethod('post')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using themes_path() Helper in PHP\nDESCRIPTION: The themes_path function returns the fully qualified path to the themes directory. It optionally accepts a relative path parameter to generate a path to a specific file within the themes directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$path = themes_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = themes_path('mytheme/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Configuring Popup Display Mode in YAML for October CMS\nDESCRIPTION: This YAML snippet demonstrates how to configure a form to use the popup display mode with a specific size in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndesign:\n    displayMode: popup\n    size: 750\n```\n\n----------------------------------------\n\nTITLE: Stripping HTML Tags with html_strip()\nDESCRIPTION: Demonstrates the html_strip() function which removes all HTML tags from a string, returning only the text content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip('<strong>Hello world</strong>') }}\n```\n\n----------------------------------------\n\nTITLE: Advanced Relationship Configuration with Filters\nDESCRIPTION: Example of defining relationships with ordering and conditions filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'categories' => [\n        'Acme\\Blog\\Models\\Category',\n        'order'      => 'name desc',\n        'conditions' => 'is_active = 1'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Stopping Chunk Processing Early\nDESCRIPTION: Shows how to stop processing further chunks by returning false from the callback function, useful when you've found what you're looking for.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->chunk(100, function($users) {\n    // Process the records...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Dropping Columns from Tables\nDESCRIPTION: Examples of removing one or multiple columns from an existing database table using the dropColumn method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->dropColumn('votes');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->dropColumn(['votes', 'avatar', 'location']);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a French Localization JSON File in October CMS Theme\nDESCRIPTION: Example of a French localization file (fr.json) that translates a simple phrase from English to French using the original phrase as the key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/localization.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"j'adore programmer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using App Filter for Navigation\nDESCRIPTION: Shows how to use the |app filter to generate absolute URLs for navigation links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/app.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ '/about-us'|app }}\">\n    About Us\n</a>\n```\n\n----------------------------------------\n\nTITLE: CSRF Protection Configuration in .env File\nDESCRIPTION: Shows how to enable or disable Cross-Site Request Forgery protection using the ENABLE_CSRF environment variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nENABLE_CSRF=true\n```\n\n----------------------------------------\n\nTITLE: Defining Page List Properties in PHP\nDESCRIPTION: This example shows how to create a dropdown property for selecting pages. It defines the property in the defineProperties method and implements a method to fetch the list of pages dynamically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dropdown.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'postPage' => [\n            'title' => 'Post page',\n            'type' => 'dropdown',\n            'default' => 'blog/post'\n        ]\n    ];\n}\n\npublic function getPostPageOptions()\n{\n    return Page::sortBy('baseFileName')->lists('baseFileName', 'baseFileName');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Pagination Results in Twig Template\nDESCRIPTION: Shows how to display paginated results in a Twig template. This example iterates through user objects and renders pagination links at the bottom using the render method with the raw filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"container\">\n    {% for user in users %}\n        {{ user.name }}\n    {% endfor %}\n</div>\n\n{{ users.render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Variable Placeholders\nDESCRIPTION: Using placeholders as variables for setting and accessing values across templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% put activeNav = 'home' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set active = placeholder('activeNav') %}\n\n<ul>\n    <li class=\"{{ active == 'home' ? 'active' }}\">Home</li>\n    <li class=\"{{ active == 'blog' ? 'active' }}\">Blog</li>\n    <li class=\"{{ active == 'contact' ? 'active' }}\">Contact</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: BelongsToMany with Pivot Data Configuration (YAML)\nDESCRIPTION: YAML configuration for a BelongsToMany relationship with pivot data, showing how to set up the 'roles' relationship with pivot fields for additional relationship data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n    pivot:\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Collections with each() and every()\nDESCRIPTION: The each() method iterates over items and passes each to a callback. The every() method creates a new collection with every n-th element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n$collection->each(function ($item, $key) {\n    //\n});\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = new Collection(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->every(4);\n\n// ['a', 'e']\n```\n\n----------------------------------------\n\nTITLE: Finding Maximum Value in Collection in PHP\nDESCRIPTION: The max method returns the maximum value of a given key in the collection. It can be used with associative arrays or simple numeric arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$max = collect([['foo' => 10], ['foo' => 20]])->max('foo');\n\n// 20\n\n$max = collect([1, 2, 3, 4, 5])->max();\n\n// 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Tags Relationship\nDESCRIPTION: Example of accessing tags for a post using dynamic properties in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\nforeach ($post->tags as $tag) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: StudlyCase String Conversion in Twig\nDESCRIPTION: Converts a string to StudlyCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_studly('hello world') }}\n```\n\n----------------------------------------\n\nTITLE: CSS Selector for Specific AJAX Handler\nDESCRIPTION: Demonstrates CSS selectors that target specific AJAX handlers to show loading indicators only for particular requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.is-payment-loading {\n    display: none;\n}\n\nform[data-ajax-progress=onPay] .is-payment-loading {\n    display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Report Widgets in Plugin Registration\nDESCRIPTION: Example of registering report widgets in a plugin registration file with labels, context, and permissions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/report-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficOverview::class => [\n            'label' => 'Google Analytics traffic overview',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanalytics.widgets.traffic_overview',\n            ],\n        ],\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficSources::class => [\n            'label' => 'Google Analytics traffic sources',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanaltyics.widgets.traffic_sources',\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using html_strip() Twig Function in OctoberCMS\nDESCRIPTION: Demonstrates the usage of the html_strip() function in Twig templates to remove HTML from a string. It can be used as both a function and a filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/html.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip() }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|html_strip }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<strong>Hello world</strong>'|html_strip }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<p><b>Text</b></p>'|html_strip('<p>') }}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Form Fields in October CMS\nDESCRIPTION: Demonstrates the variable tag usage which sets a form field type explicitly through the type attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{variable type=\"text\" name=\"name\" label=\"Name\"}John{/variable}\n```\n\n----------------------------------------\n\nTITLE: Text Filter with Equals Condition in YAML\nDESCRIPTION: YAML configuration for text filter that only allows exact matching using the equals condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-text.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n    conditions:\n        equals: true\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleTree Trait in PHP for October CMS\nDESCRIPTION: This PHP code snippet demonstrates the use of the SimpleTree trait in a model class. This trait is used when a basic parent-child relationship is required.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/structures.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SimpleTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial with Description in October CMS\nDESCRIPTION: Shows how to create a partial with a description in the configuration section, which is displayed in the back-end user interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ndescription = \"Demo partial\"\n==\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Detailed Options in PHP\nDESCRIPTION: Illustrates how to create a detailed option definition in PHP, specifying advanced properties like labels, comments, and disabled states for each option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getDetailedFieldOptions()\n{\n    return [\n        1 => [\n            'label' => 'Option 1',\n            'comment' => 'This is option one'\n        ],\n        2 => [\n            'label' => 'Option 2',\n            'comment' => 'This is option two',\n            'disabled' => true\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Title in OctoberCMS Twig\nDESCRIPTION: Illustrates how to output the page title as defined in the configuration using the this.page.title property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ this.page.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to a Partial in Twig\nDESCRIPTION: Demonstrates how to pass variables to a partial when rendering it using the {% partial %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blog-posts\" posts=posts %}\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message Abort\nDESCRIPTION: Shows how to abort with a custom HTTP code and error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/abort.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(403, 'Access Denied') %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Pagination Template\nDESCRIPTION: Template for AJAX-enabled pagination controls with data-request attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"pagination\">\n    <li class=\"page-item first\">\n        <span class=\"page-link\">&larr;</span>\n    </li>\n    <li class=\"page-item\">\n        <a\n            class=\"page-link\"\n            data-request=\"onAjax\"\n            data-request-data=\"{ page: 1 }\"\n            data-request-update=\"{ _self: true }\">1</a>\n    </li>\n    <li class=\"page-item last\">\n        <a\n            class=\"page-link\"\n            data-request=\"onAjax\"\n            data-request-data=\"{ page: 2 }\"\n            data-request-update=\"{ _self: true }\">&rarr;</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Component Aliases with Fully Qualified Class Names\nDESCRIPTION: This snippet demonstrates how to attach a component using its fully qualified class name and assigning it an alias to avoid naming conflicts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[October\\Demo\\Components\\Todo demoTodoAlias]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Registering Backend User in OctoberCMS\nDESCRIPTION: Demonstrates how to register a new administrator user account using the BackendAuth facade in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = BackendAuth::register([\n    'first_name' => 'Some',\n    'last_name' => 'User',\n    'login' => 'someuser',\n    'email' => 'some@website.tld',\n    'password' => 'changeme',\n    'password_confirmation' => 'changeme'\n]);\n```\n\n----------------------------------------\n\nTITLE: ÂêëÂ∏¶ÈªòËÆ§ÂÜÖÂÆπÁöÑÂç†‰ΩçÁ¨¶Ê≥®ÂÖ•ÂÜÖÂÆπ\nDESCRIPTION: ÊºîÁ§∫Â¶Ç‰ΩïÂú®‰øùÁïôÂç†‰ΩçÁ¨¶ÈªòËÆ§ÂÜÖÂÆπÁöÑÂêåÊó∂ÂêëÂÖ∂Ê≥®ÂÖ•ÈôÑÂä†ÂÜÖÂÆπÔºå‰ΩøÁî®{% default %}Ê†áÁ≠æÊåáÂÆöÈªòËÆ§ÂÜÖÂÆπÁöÑ‰ΩçÁΩÆ„ÄÇ\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-placeholder.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    <p><a href=\"/services\">Services</a></p>\n    {% default %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Property Validation with Required and Regex Rules\nDESCRIPTION: Shows how to implement required and regex validation rules for a component property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector-types.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'name' => [\n            'title' => 'Name',\n            'type' => 'string',\n            'validation' => [\n                'required' => [\n                    'message' => 'The Name field is required'\n                ],\n                'regex' => [\n                    'message' => 'The Name field can contain only Latin letters.',\n                    'pattern' => '^[a-zA-Z]+$'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Sites in PHP\nDESCRIPTION: Demonstrates how to list only enabled sites using the listEnabled method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$sites = Site::listEnabled();\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Indicator to Form Buttons\nDESCRIPTION: Demonstrates how to add a loading indicator to buttons inside a form during AJAX request submission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\">\n    <button data-attach-loading>\n        Submit\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Concatenating Variables in Twig\nDESCRIPTION: Variables can be concatenated using the tilde (~) character, which joins strings together.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Your name: ' ~ name }}\n```\n\n----------------------------------------\n\nTITLE: Using skip() Method in PHP Collections\nDESCRIPTION: The skip method returns a new collection without the first given amount of items. This example demonstrates skipping the first 4 elements of a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$collection = $collection->skip(4);\n\n$collection->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\n----------------------------------------\n\nTITLE: Custom Form Widget Implementation in YAML\nDESCRIPTION: Shows how to use a custom form widget by specifying the PHP class name directly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nblog_content:\n    type: Backend\\FormWidgets\\RichEditor\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Nesting Views in PHP\nDESCRIPTION: Shows how to pass a sub-view to another view using the nest method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$view = View::make('acme.blog::greeting')->nest('child', 'acme.blog::child.view');\n\n$view = View::make('acme.blog::greeting')->nest('child', 'acme.blog::child.view', $data);\n```\n\n----------------------------------------\n\nTITLE: Extending Database Table in Content Field Class\nDESCRIPTION: Example of extending the database table by specifying the column type and modifiers in the extendDatabaseTable method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function extendDatabaseTable($table)\n{\n    $table->mediumText($this->fieldName)->nullable();\n}\n```\n\n----------------------------------------\n\nTITLE: CMS Page URL Generation\nDESCRIPTION: PHP code to generate a CMS page URL with parameters as a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$postPage = Cms::pageUrl('blog/post', ['slug' => 'foobar']);\n```\n\n----------------------------------------\n\nTITLE: Basic Data Table Configuration in YAML\nDESCRIPTION: Basic configuration example for a data table widget showing core properties including adding/deleting capabilities and column configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datatable.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    type: datatable\n    adding: true\n    deleting: true\n    columns: []\n    recordsPerPage: false\n    searching: false\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Variables in Twig Templates\nDESCRIPTION: Demonstrates how to set placeholder variables using the {% put %} tag in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% put pageTitle = 'Yet another page title' %}\n```\n\n----------------------------------------\n\nTITLE: Moving Files in October CMS\nDESCRIPTION: Example of moving an existing file to a new location using the move method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nStorage::move('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Proportional Image Resizing in OctoberCMS\nDESCRIPTION: Resizes an image with automatic proportional scaling by setting one dimension to null, allowing the system to calculate the other dimension based on the original aspect ratio.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$image->resize(800, null, [...]);\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response in PHP\nDESCRIPTION: Shows how to create a JSON response with automatic Content-Type header setting and JSON encoding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA']);\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading in OctoberCMS\nDESCRIPTION: Demonstrates how to use lazy eager loading to load relationships after the initial model retrieval, including adding query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::all();\n\nif ($someCondition) {\n    $books->load('author', 'publisher');\n}\n\n$books->load([\n    'author' => function ($query) {\n        $query->orderBy('published_date', 'asc');\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a CMS Page with Parameters in Twig\nDESCRIPTION: This example shows how to redirect to a CMS page ('docs') while passing page parameters as a second argument. The parameters are passed as an associative array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/redirect.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('docs', { slug: 'home' }) %}\n```\n\n----------------------------------------\n\nTITLE: Checking Content File Existence in Twig\nDESCRIPTION: Shows how to use the hasContent() function to check if a content file exists before rendering it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasContent('welcome.htm') %}\n    {% content 'welcome.htm' %}\n{% else %}\n    <p>Welcome content not found!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using split() Method in PHP Collections\nDESCRIPTION: The split method breaks a collection into a given number of groups. This creates multiple sub-collections from the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$groups = $collection->split(3);\n\n$groups->toArray();\n\n// [[1, 2], [3, 4], [5]]\n```\n\n----------------------------------------\n\nTITLE: Parsing INI Configuration in PHP\nDESCRIPTION: Shows how to use the INI facade to parse INI files and strings into PHP arrays and render arrays back to INI.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$array = Ini::parse($iniString);\n```\n\nLANGUAGE: php\nCODE:\n```\n$array = Ini::parseFile($filePath);\n```\n\nLANGUAGE: php\nCODE:\n```\n$iniString = Ini::render($array);\n```\n\n----------------------------------------\n\nTITLE: Basic Image Column Definition in YAML for October CMS\nDESCRIPTION: Defines a basic image column named 'avatar' with a label. This is the minimal configuration needed to display an image column in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-image.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n```\n\n----------------------------------------\n\nTITLE: Using array_get() with Default Value in PHP\nDESCRIPTION: The array_get function also accepts a default value as the third parameter, which will be returned if the specified key is not found. This provides a fallback value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$value = array_get($array, 'names.john', 'default');\n```\n\n----------------------------------------\n\nTITLE: External Class Method for Dropdown Options in YAML\nDESCRIPTION: Configures a dropdown to use a static method on an external class to provide options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options: MyAuthor\\MyPlugin\\Helpers\\FormHelper::staticMethodOptions\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookies to HTTP Responses in October CMS\nDESCRIPTION: How to create and attach a cookie to an HTTP response using the Cookie facade's make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = Response::make('Hello World');\n\n$response->withCookie(Cookie::make('name', 'value', $minutes));\n```\n\n----------------------------------------\n\nTITLE: Radio List with Descriptions in YAML\nDESCRIPTION: Shows how to configure a radio list with additional descriptions for each option using nested arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-radio.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    options:\n        all: [All, Guests and customers will be able to access this page.]\n        registered: [Registered only, Only logged in member will be able to access this page.]\n        guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Throwing Validation Exception with Validator in October CMS\nDESCRIPTION: Demonstrates how to throw a ValidationException using a validation service instance. This is used when a validation process fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$validation = Validator::make(...);\n\nif ($validation->fails()) {\n    throw new ValidationException($validation);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Flysystem S3 Package for October CMS\nDESCRIPTION: Command to install the Flysystem AWS S3 package required for using Amazon S3 with October CMS Media Manager.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3 \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Updating October CMS System and Plugins\nDESCRIPTION: The 'october:update' command updates the core application and plugin files, then performs a database migration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:update\n```\n\n----------------------------------------\n\nTITLE: Using str_lower() Filter for Lowercase Conversion\nDESCRIPTION: Demonstrates the str_lower() filter, which converts a string to lowercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\nHello I'm {{ 'JACK'|str_lower }}\n```\n\n----------------------------------------\n\nTITLE: Adding Toolbar to List Configuration in YAML\nDESCRIPTION: Shows how to add a toolbar configuration to the List behavior YAML file, including buttons and search options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntoolbar:\n    buttons: list_toolbar\n    search:\n        prompt: Find records\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading in October CMS\nDESCRIPTION: This example shows how to eager load nested relationships using dot notation. It loads books along with their authors and the authors' contacts in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author.contacts')->get();\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Control Configuration\nDESCRIPTION: Shows how to pass configuration values to a control using data attributes in HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"hello\" data-favorite-color=\"red\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Body Class in Controller\nDESCRIPTION: Demonstrates how to add custom CSS classes to the body tag using the $bodyClass property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var string Body CSS class to add to the layout.\n */\npublic $bodyClass = 'compact-container';\n```\n\n----------------------------------------\n\nTITLE: Uploading Files to Models in PHP\nDESCRIPTION: PHP code showing how to attach uploaded files to model attributes that use file attachments. The example demonstrates setting a file attribute directly using the files() helper function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onUploadFiles()\n{\n    $model = new MyModel;\n\n    $model->avatar = files('single_file');\n\n    $model->save();\n\n    // ...\n\n    Flash::success('File saved');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment-Specific Configuration\nDESCRIPTION: Demonstrates how to specify a different environment (staging) using a server-level environment variable, which will load a different .env file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: apache\nCODE:\n```\nSetEnv APP_ENV \"staging\"\n```\n\n----------------------------------------\n\nTITLE: Form Widget Class Definition\nDESCRIPTION: Example of a form widget class extending FormWidgetBase with configuration properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\Widgets;\n\nuse Backend\\Classes\\FormWidgetBase;\n\nclass CodeEditor extends FormWidgetBase\n{\n    /**\n     * @var string A unique alias to identify this widget.\n     */\n    protected $defaultAlias = 'codeeditor';\n\n    public function render() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Refreshing Current Page in PHP\nDESCRIPTION: Demonstrates how to refresh the current page using the refresh method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::refresh();\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component in Twig\nDESCRIPTION: Demonstrates how to use the {% component %} tag to render a CMS component called 'blogPosts' in an October CMS Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-component.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" %}\n```\n\n----------------------------------------\n\nTITLE: Generating Media URLs in PHP\nDESCRIPTION: Illustrates how to generate media URLs in PHP using the Media\\Classes\\MediaLibrary class and its url method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/media.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\Media\\Classes\\MediaLibrary::url('relative/path/to/asset.jpg');\n```\n\n----------------------------------------\n\nTITLE: Sample Blog Categories JSON Data\nDESCRIPTION: JSON data file containing sample blog category records with ID, title, and slug fields for importing into the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/seeding-themes.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 1,\n        \"title\": \"Announcements\",\n        \"slug\": \"announcements\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"News\",\n        \"slug\": \"news\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Default Non-Associative JSON Output for ObjectList\nDESCRIPTION: Example of the default JSON output generated by the objectList inspector type, showing a non-associative array of objects with their defined properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-objectlist.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"people\": [\n    {\"fullName\": \"John Smith\", \"address\": \"Palo Alto\"},\n    {\"fullName\": \"Bart Simpson\", \"address\": \"Springfield\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values in PHP\nDESCRIPTION: The config function gets the value of a configuration variable. It supports dot notation for accessing nested values and can set configuration values at runtime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_30\n\nLANGUAGE: PHP\nCODE:\n```\n$value = config('app.timezone');\n\n$value = config('app.timezone', $default);\n\nconfig(['app.debug' => true]);\n```\n\n----------------------------------------\n\nTITLE: Logging with Contextual Data\nDESCRIPTION: Example of logging a message with additional contextual data that will be formatted and displayed with the log message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nLog::info('User failed to login.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: Entries Field with PHP Query Scope\nDESCRIPTION: Configuration showing how to apply PHP query scopes to entries field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbasic_entries:\n    label: Basic Entry\n    type: entries\n    source: Basic\\Entry\n    scope: App\\Classes\\ScopeHelper::applyScope\n```\n\n----------------------------------------\n\nTITLE: Text Field with Placeholder in YAML for October CMS\nDESCRIPTION: Example of a text field with placeholder text. This shows how to provide users with hints about what kind of content should be entered in the field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-text.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npoint_summary:\n    type: text\n    label: Point\n    placeholder: Type some key points are you trying to make\n```\n\n----------------------------------------\n\nTITLE: Redirecting to a CMS Page in Twig\nDESCRIPTION: This example demonstrates how to conditionally redirect to a 404 page when a record is not found. The redirect() function is used with a CMS page name as the destination.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/redirect.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if record.notFound %}\n    {% do redirect('404') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Page with Content Block - OctoberCMS Template\nDESCRIPTION: Example demonstrating how to define a page URL and render a content block using the content tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/content.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/contacts\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"contacts\">\n    {% content 'contacts.html' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using the random() Method in PHP Collections\nDESCRIPTION: The random method returns one or more random items from the collection. When an integer is passed, it returns that number of random items as a new collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->random();\n\n// 4 - (retrieved randomly)\n```\n\nLANGUAGE: php\nCODE:\n```\n$random = $collection->random(3);\n\n$random->all();\n\n// [2, 4, 5] - (retrieved randomly)\n```\n\n----------------------------------------\n\nTITLE: Form Fields Definition in YAML\nDESCRIPTION: Example of form fields definition with fields in the outside area, demonstrating field types, labels, and descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Form Field Definitions\n# ===================================\n\nfields:\n    blog_title:\n        label: Blog Title\n        description: The title for this blog\n\n    published_at:\n        label: Published date\n        description: When this blog post was published\n        type: datepicker\n\n    [...]\n\ntabs:\n    fields:\n        [...]\n\nsecondaryTabs:\n    fields:\n        [...]\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Conditional Filtering\nDESCRIPTION: Demonstrates how to filter items in a for loop using conditional statements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        {% if user.active %}\n            <li>{{ user.username }}</li>\n        {% endif %}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Ordering DataFeed Results in PHP\nDESCRIPTION: Demonstrates how to order the results of a DataFeed by specifying ordering columns for each dataset and a default direction.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Ordered by updated_at if it exists, otherwise created_at\n$feed->add('user', new User, 'ifnull(updated_at, created_at)');\n\n// Ordered by id\n$feed->add('comments', new Comment, 'id');\n\n// Ordered by name (specified default below)\n$feed->add('posts', new Post);\n\n// Specifies the default column and the direction\n$feed->orderBy('name', 'asc')->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Field Selection in YAML\nDESCRIPTION: Demonstrates how to configure a nested field for a relation using the 'relation[field]' syntax in YAML. This allows accessing and saving values from related models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\navatar[name]:\n    label: Avatar\n    comment: will be saved in the Avatar table\n```\n\n----------------------------------------\n\nTITLE: Viewing Failed Jobs with Artisan Command in Bash\nDESCRIPTION: Artisan command to view all failed jobs in the queue. This command lists the job ID, connection, queue, and failure time for each failed job.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:failed\n```\n\n----------------------------------------\n\nTITLE: Extending Model Query for Reorder Behavior\nDESCRIPTION: Example of extending the model query to include soft deleted records in the reorder list by implementing the reorderExtendQuery method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/reorder.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function reorderExtendQuery($query)\n{\n    $query->withTrashed();\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Refresh with Flash Message\nDESCRIPTION: AJAX handler that refreshes the current page and displays a flash message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction onSignup()\n{\n    Flash::success('Signup complete!');\n\n    return Redirect::refresh();\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form Element Naming Conventions\nDESCRIPTION: Demonstrates proper naming conventions for HTML form elements including input names, IDs, and classes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<input name=\"first_name\">\n\n<input name=\"ForumMember[first_name]\">\n<input name=\"forum_member[first_name]\">\n\n<div id=\"firstNameGroup\">\n    <input id=\"firstName\">\n</div>\n\n<div id=\"first-name-group\">\n    <input id=\"first-name\">\n</div>\n\n<div class=\"form-group\">\n    <input class=\"form-control\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Opening AJAX-enabled Forms\nDESCRIPTION: Shows various ways to open AJAX-enabled forms with different attributes and update targets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave')\n\nForm::ajax('onSave', ['confirm' => 'Are you sure?'])\n\nForm::ajax('onSave', ['update' => [\n        'control-panel' => '#controlPanel',\n        'layout/sidebar' => '#layoutSidebar'\n    ]\n])\n```\n\n----------------------------------------\n\nTITLE: Resizing an Image for Browser Output in OctoberCMS\nDESCRIPTION: Uses the ResizeImages class to resize an image and return a URL to the resized version, suitable for direct browser access.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/resizer.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$url = \\System\\Classes\\ResizeImages::resize($image, $width, $height, $options);\n```\n\n----------------------------------------\n\nTITLE: Returning a Custom Response from Lifecycle Methods in October CMS\nDESCRIPTION: Example showing how to halt the normal page processing and return a custom string response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    return 'Hello world!';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom SQL Select for Relation Label in YAML\nDESCRIPTION: Demonstrates how to use a custom SQL select statement to generate labels for related records in a relation field. This example concatenates first and last names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Implementing Widget AJAX Handler in HTML\nDESCRIPTION: This HTML snippet shows how to create a link that triggers a widget's AJAX handler using the getEventHandler method in an October CMS backend widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/ajax.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    data-request=\"<?= $this->getEventHandler('onPaginate') ?>\"\n    title=\"Next page\">Next</a>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Nesting Level in PHP\nDESCRIPTION: Demonstrates how to get the nesting level (depth) of a node using the getLevel() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n// 0 when root\n$node->getLevel()\n```\n\n----------------------------------------\n\nTITLE: Entries Field with SQL Query Conditions\nDESCRIPTION: Configuration showing how to apply SQL conditions to limit related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: entries\n    source: Blog\\Category\n    conditions: is_featured = true\n```\n\n----------------------------------------\n\nTITLE: Toolbar Button Separator Configuration in YAML\nDESCRIPTION: Example showing how to add separators between toolbar button groups using the double-pipe syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntoolbarButtons: bold|italic|underline||insertPageLink||undo|redo||clearFormatting\n```\n\n----------------------------------------\n\nTITLE: Cleaning HTML to Prevent XSS Attacks\nDESCRIPTION: Shows how to sanitize HTML content to prevent cross-site scripting (XSS) attacks by removing potentially malicious code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_clean('<script>window.location = \"http://google.com\"</script>') }}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Success Callback\nDESCRIPTION: Shows how to execute JavaScript code (displaying an alert) after a successful AJAX request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-success=\"alert('Yay!')\">\n```\n\n----------------------------------------\n\nTITLE: Rich Editor Size Configuration in YAML\nDESCRIPTION: Configuration example showing how to set a custom size for the rich editor field using the size property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    label: Contents\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Configuring Inline Options for Checkbox List in YAML for October CMS\nDESCRIPTION: Demonstrates how to display checkbox options inline instead of stacked. The 'inlineOptions' property is set to true to enable this feature when there are less than 10 options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkboxlist.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    inlineOptions: true\n```\n\n----------------------------------------\n\nTITLE: Installing a Private Plugin from Remote Repository\nDESCRIPTION: Artisan command to install a private plugin from a remote Git repository, specifying the source location using the --from option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=git@github.com:acme/blog-plugin.git\n```\n\n----------------------------------------\n\nTITLE: Transferring Plugin Configuration to Package Configuration in PHP\nDESCRIPTION: Code for the boot() method that transfers configuration values from a plugin's configuration to the package configuration. This ensures the package uses the plugin's configuration values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::set('purifier', Config::get('acme.blog::purifier'));\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Flash Messages in HTML Form\nDESCRIPTION: Shows how to enable flash messages for successful AJAX requests using the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSuccess\"\n    data-request-flash>\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: View Data Passing Examples\nDESCRIPTION: Various methods of passing data to views including conventional and magic methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nreturn View::make('acme.blog::greeting', ['name' => 'Charlie']);\n\n// Using conventional approach\n$view = View::make('acme.blog::greeting')->with('name', 'Steve');\n\n// Using magic methods\n$view = View::make('acme.blog::greeting')->withName('steve');\n\n$view = View::make('acme.blog::greeting', $data);\n\nView::share('name', 'Steve');\n```\n\n----------------------------------------\n\nTITLE: BelongsToMany Relationship Configuration Example (YAML)\nDESCRIPTION: YAML configuration for a BelongsToMany relationship type, demonstrating how to set up the 'roles' relationship for a user with appropriate toolbar buttons and list/form definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n        toolbarButtons: add|remove\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Hiding the Title Field in October CMS Tailor\nDESCRIPTION: Configuration to hide the title field when it's not needed, such as in single blueprints. This also disables the built-in validation for the title field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    title:\n        hidden: true\n```\n\n----------------------------------------\n\nTITLE: Textarea Field with Placeholder in YAML\nDESCRIPTION: Example demonstrating how to add placeholder text to a textarea field using the placeholder property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-textarea.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npoint_summary:\n    type: textarea\n    label: Point\n    placeholder: Type some key points are you trying to make\n```\n\n----------------------------------------\n\nTITLE: Retrying Failed Job with Artisan in Bash\nDESCRIPTION: Artisan command to retry a specific failed job using its ID. This allows for manual intervention to reprocess failed jobs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:retry 5\n```\n\n----------------------------------------\n\nTITLE: Adding Navigation Ruler in October CMS\nDESCRIPTION: Example of adding a ruler/divider element to the navigation menu.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'_ruler1' => [\n    'itemType' => 'ruler',\n],\n```\n\n----------------------------------------\n\nTITLE: List Behavior Configuration File\nDESCRIPTION: Example of a list behavior configuration file in YAML format, showing basic required fields like title, list columns definition path, and model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/lists.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Behavior Config[ÂàóË°®Ë°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\ntitle: ÂçöÂÆ¢ÊñáÁ´†\nlist: ~/plugins/acme/blog/models/post/columns.yaml\nmodelClass: Acme\\Blog\\Models\\Post\nrecordUrl: acme/blog/posts/update/:id\n```\n\n----------------------------------------\n\nTITLE: Accessing Translated Strings in Twig Templates\nDESCRIPTION: Example of how to use the 'trans' Twig filter to access localized strings in theme templates, demonstrating both phrase-based and code-based key approaches.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/localization.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<!-- j'adore programmer -->\n{{ 'I love programming.'|trans }}\n\n<!-- October CMS -->\n{{ 'theme.options.website_name'|trans }}\n```\n\n----------------------------------------\n\nTITLE: Cancelling All Deferred Bindings\nDESCRIPTION: This snippet demonstrates how to cancel all deferred bindings for a model using a session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$post->cancelDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Dropdown Output Format in JSON\nDESCRIPTION: Shows the output format of a dropdown selection value when serialized to JSON.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dropdown.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"unit\": \"metric\"\n```\n\n----------------------------------------\n\nTITLE: Apache RewriteBase Configuration for Subdirectory Installation\nDESCRIPTION: Modified RewriteBase directive for when October CMS is installed in a subdirectory, enabling URLs like example.tld/subdirectory/page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n# RewriteBase /subdirectory/\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form Widget Input in HTML\nDESCRIPTION: Example of rendering a form widget input element using prepared variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<input id=\"<?= $id ?>\" name=\"<?= $name ?>\" value=\"<?= e($value) ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Attribute Casting in PHP Model\nDESCRIPTION: Shows how to define attribute casting rules using the $casts property to automatically convert attributes to specific types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * @var array casts attributes to native types.\n     */\n    protected $casts = [\n        'is_admin' => 'boolean',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Columns in YAML\nDESCRIPTION: Shows the structure of a YAML file used to define list columns for the List Behavior, specifying column names and labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Column Definitions\n# ===================================\n\ncolumns:\n    name: Name\n    email: Email\n```\n\n----------------------------------------\n\nTITLE: Outputting Current Date and Time with carbon() in Twig\nDESCRIPTION: Demonstrates how to use the carbon() function to output the current date and time in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon('now') }}\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Fields\nDESCRIPTION: Shows how to generate file input fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::file('image') ?>\n```\n\n----------------------------------------\n\nTITLE: Using Simple Pagination in PHP\nDESCRIPTION: Example demonstrating the simplePaginate method for more efficient pagination when only 'Next' and 'Previous' links are needed, without page numbers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Creating Dropdowns with Selected Values\nDESCRIPTION: Shows how to create a dropdown with a pre-selected option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('size', ['L' => 'Â§ßÁöÑ', 'S' => 'Â∞èÁöÑ'], 'S') ?>\n```\n\n----------------------------------------\n\nTITLE: Regex Validation Configuration\nDESCRIPTION: Demonstrates how to configure regex validation with pattern and modifiers for a string property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector-types.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'name' => [\n            'title' => 'Name',\n            'type' => 'string',\n            'validation' => [\n                'regex' => [\n                    'message' => 'The Name field can contain only Latin letters',\n                    'pattern' => '^[a-z]+$',\n                    'modifiers' => 'i'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Progress Bar Globally with CSS\nDESCRIPTION: Shows how to completely disable the progress bar for all AJAX requests site-wide by setting its visibility to hidden via CSS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.oc-progress-bar {\n    visibility: hidden;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Filter Form in PHP\nDESCRIPTION: Implementation of the renderForm method to display the filter form for user input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function renderForm()\n{\n    $this->vars['allowSearch'] = $this->allowSearch;\n    $this->vars['scope'] = $this->filterScope;\n    $this->vars['name'] = $this->getScopeName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('discount_form');\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration Files in October CMS\nDESCRIPTION: Shows how to access configuration values from a non-standard configuration file (custom.php). The filename is included in the configuration key path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/file-settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$maxItems = Config::get('acme.demo::custom.maxItems', 50);\n```\n\n----------------------------------------\n\nTITLE: Navigation Output Example\nDESCRIPTION: Shows the HTML output when the |app filter is applied to a navigation link with example domain octobercms.com\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/app.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://octobercms.com/about-us\">\n    About us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Enabling Timezone Conversion for Date Column in October CMS\nDESCRIPTION: This snippet demonstrates how to enable timezone conversion for a date column in October CMS when the date includes a time component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n    useTimezone: true\n```\n\n----------------------------------------\n\nTITLE: Basic Page Finder YAML Configuration\nDESCRIPTION: Basic YAML configuration for implementing a page finder form field that allows selecting page links\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfeatured_page:\n    label: Featured Page\n    type: pagefinder\n```\n\n----------------------------------------\n\nTITLE: Using a Theme Partial for Component Markup in October CMS\nDESCRIPTION: This code shows how to render a component's markup using a theme partial. The theme partial 'blog-default' contains customized markup for the blog component, allowing for theme-specific customization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[blog]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'blog-default' %}\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URL for Favicon Using |app Filter in Twig\nDESCRIPTION: Demonstrates how to use the |app filter to create an absolute URL for a favicon. This snippet shows how to apply the filter to a relative path, resulting in a full URL including the domain and protocol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-app.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<link rel=\"icon\" href=\"{{ '/favicon.ico'|app }}\" />\n```\n\n----------------------------------------\n\nTITLE: Using array_add() Function in PHP\nDESCRIPTION: The array_add function adds a given key/value pair to an array if the key doesn't already exist. It takes the original array, the key to add, and the value to associate with the key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$array = array_add(['name' => 'Desk'], 'price', 100);\n\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin from External Local Directory\nDESCRIPTION: Command to install a plugin from an external local or network directory. Uses the --from option to specify the absolute path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=/home/sam/private-plugins/acme-blog\n```\n\n----------------------------------------\n\nTITLE: Configuring Trigger Events in YAML for October CMS Form Fields\nDESCRIPTION: Example of trigger events in form field configuration. Demonstrates how to make a field appear only when a checkbox is checked, using the trigger option with action, field, and condition parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nis_delayed:\n    label: Send later\n    comment: Place a tick in this box if you want to send this message at a later time.\n    type: checkbox\n\nsend_at:\n    label: Send date\n    type: datepicker\n    cssClass: field-indent\n    trigger:\n        action: show\n        field: is_delayed\n        condition: checked\n```\n\n----------------------------------------\n\nTITLE: Converting Collections to Arrays in PHP\nDESCRIPTION: Shows how to convert model collections to arrays using the toArray() method. This converts all models in the collection to array format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\nreturn $users->toArray();\n```\n\n----------------------------------------\n\nTITLE: Rendering Preview Form in PHP for October CMS\nDESCRIPTION: This snippet shows the structure of a typical preview.php view file in October CMS. It demonstrates how to render a form in read-only mode for previewing existing records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"form-preview\">\n    <?= $this->formRenderPreview() ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Modal Loading State with CSS\nDESCRIPTION: CSS rules to handle the visibility of loading state based on AJAX updating status using the data-ajax-updating attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/modals.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.modal-dialog[data-ajax-updating],\n.modal-dialog:not([data-ajax-updating]) + .modal-loading {\n    display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Using sortKeys() Method in PHP Collections\nDESCRIPTION: The sortKeys method sorts the collection by the keys of the underlying associative array in ascending order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'id' => 22345,\n    'first' => 'John',\n    'last' => 'Doe',\n]);\n\n$sorted = $collection->sortKeys();\n\n$sorted->all();\n\n/*\n    [\n        'first' => 'John',\n        'id' => 22345,\n        'last' => 'Doe',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Revision History Limit in October CMS\nDESCRIPTION: Configures the maximum number of revision records to keep for a model using the revisionableLimit property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var int revisionableLimit as the maximum number records to keep.\n */\npublic $revisionableLimit = 8;\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Export Behavior in PHP Controller\nDESCRIPTION: Shows how to add the Import Export Behavior to an OctoberCMS controller class. This enables importing and exporting functionality for the controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Shop\\Controllers;\n\nclass Products extends Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ImportExportController::class\n    ];\n\n    public $importExportConfig = 'config_import_export.yaml';\n\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Definition for Behaviors in PHP\nDESCRIPTION: This snippet demonstrates how to use soft definition for behaviors in October CMS. It shows how to suppress 'Class not found' errors by prefixing the class name with an '@' symbol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = ['@RainLab.Translate.Behaviors.TranslatableModel'];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Page List Dropdown Properties in PHP\nDESCRIPTION: Shows how to implement a dropdown that lists website pages for selection, using the Page class to generate options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dropdown.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'postPage' => [\n            'title' => 'Post page',\n            'type' => 'dropdown',\n            'default' => 'blog/post'\n        ]\n    ];\n}\n\npublic function getPostPageOptions()\n{\n    return Page::sortBy('baseFileName')->lists('baseFileName', 'baseFileName');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Update Scripts in YAML\nDESCRIPTION: Shows how to specify migration and seed files to be executed during an update in the version.yaml file. The example demonstrates defining multiple update scripts with a descriptive comment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nv1.1.1:\n    - This update will execute the two scripts below.\n    - some_upgrade_file.php\n    - some_seeding_file.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached TCP/IP Connection in PHP\nDESCRIPTION: Configuration array for setting up Memcached cache driver using TCP/IP connection, specifying host, port, and weight parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    [\n        'host' => '127.0.0.1',\n        'port' => 11211,\n        'weight' => 100\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Variables in Twig\nDESCRIPTION: Shows the basic syntax for applying filters to variables or strings in Twig using the pipe symbol, which modifies the output in specified ways.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'string'|filter }}\n```\n\n----------------------------------------\n\nTITLE: Firing Global Events (PHP)\nDESCRIPTION: Example of how to fire a global event using the Event service. Global events should be namespaced with the vendor name to avoid conflicts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.post.beforePost', [$firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Using AJAX Partials in October CMS\nDESCRIPTION: Shows how to use the ajaxPartial tag to allow AJAX handlers to be called inside a partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial \"contact-form\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining URL with Post ID Parameter in October CMS\nDESCRIPTION: Shows how to define a URL with a post_id parameter in the October CMS page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-param.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/account/:post_id\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving File MIME Type\nDESCRIPTION: Demonstrates how to get the MIME type of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$mime = Input::file('photo')->getMimeType();\n```\n\n----------------------------------------\n\nTITLE: Form Field Trigger Events in YAML\nDESCRIPTION: Example of conditional field visibility using trigger events based on checkbox state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nis_delayed:\n    label: Send later\n    comment: Place a tick in this box if you want to send this message at a later time.\n    type: checkbox\n\nsend_at:\n    label: Send date\n    type: datepicker\n    cssClass: field-indent\n    trigger:\n        action: show\n        field: is_delayed\n        condition: checked\n```\n\n----------------------------------------\n\nTITLE: Controller Middleware Adding HTTP Header\nDESCRIPTION: Example of controller middleware that adds a custom header to the HTTP response before it's sent to the browser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $this->middleware(function ($request, $response) {\n        $response->headers->set('Test-Header', 'Test');\n        return $response;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for HTTPS Requests\nDESCRIPTION: Demonstrates how to determine if the current request was made via HTTPS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nif (Request::secure()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Setting a Model Attribute with Mutator\nDESCRIPTION: Example showing how to set the first_name attribute that has a mutator defined. The mutator is automatically called when the attribute is set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->first_name = 'Sally';\n```\n\n----------------------------------------\n\nTITLE: Limiting HTML Content Length with Proper Tag Handling\nDESCRIPTION: Shows how to limit HTML content to a specific character length while properly handling HTML tags, ensuring they are not truncated incorrectly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Post content...</p>', 100) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Behavior Export\nDESCRIPTION: YAML configuration for enabling list behavior integration with the export functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList: true\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Delete Column in PHP Database Migration\nDESCRIPTION: Shows how to add a soft delete column to a database table using a migration in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->softDeletes();\n});\n```\n\n----------------------------------------\n\nTITLE: PHP Model Scope Implementation\nDESCRIPTION: PHP implementation of the numberFilter scope method handling different filtering conditions for age.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-number.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction scopeNumberFilter($query, $scope)\n{\n    if ($scope->condition === 'equals') {\n        $query->where('age', $scope->value);\n    }\n    elseif ($scope->condition === 'between') {\n        $query\n            ->where('age', '>=', $scope->min)\n            ->where('age', '<=', $scope->max);\n    }\n    elseif ($scope->condition === 'greater') {\n        $query->where('age', '>=', $scope->value);\n    }\n    else {\n        $query->where('age', '<=', $scope->value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Namespaced Event Firing in October CMS - PHP\nDESCRIPTION: Example of firing an event with a plugin-namespaced name to prevent collisions with other plugins.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.myevent');\n```\n\n----------------------------------------\n\nTITLE: Configuring Survey Display Mode in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure the survey display mode and set the size of the page container in the form design configuration for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndesign:\n    displayMode: survey\n    size: 950\n```\n\n----------------------------------------\n\nTITLE: Specifying Option Methods in YAML\nDESCRIPTION: Demonstrates how to use the optionsMethod property to specify a callable PHP method for requesting available options. It can be a local model method or a static method on any object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\noptionsMethod: getMyOptionsFromModel\n```\n\nLANGUAGE: yaml\nCODE:\n```\noptionsMethod: MyAuthor\\MyPlugin\\Helpers\\FormHelper::getMyStaticMethodOptions\n```\n\n----------------------------------------\n\nTITLE: Selectable Column with Explicit Options in YAML\nDESCRIPTION: Demonstrates how to define a selectable column with explicit options directly in the YAML configuration, providing key-value pairs for pending and active states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-selectable.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: selectable\n    options:\n        pending: Pending\n        active: Active\n```\n\n----------------------------------------\n\nTITLE: Disabling Relation Controller Integration in YAML\nDESCRIPTION: Demonstrates how to disable the automatic integration with the Relation Controller behavior for a relation field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncountries:\n    label: Categories\n    type: relation\n    useController: false\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial from Subdirectory in Twig\nDESCRIPTION: Shows how to reference and render a partial template located in a subdirectory using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/themes.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blog/category-list\" %}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Aliased Component in Twig\nDESCRIPTION: Demonstrates how to render a component with an alias in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' %}\n```\n\n----------------------------------------\n\nTITLE: Multiple Seeder Execution in DatabaseSeeder\nDESCRIPTION: Shows how to organize and execute multiple seeder classes using the call method within the DatabaseSeeder class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Run the database seeds.\n *\n * @return void\n */\npublic function run()\n{\n    Model::unguard();\n\n    $this->call('Acme\\Users\\Updates\\UserTableSeeder');\n    $this->call('Acme\\Users\\Updates\\PostsTableSeeder');\n    $this->call('Acme\\Users\\Updates\\CommentsTableSeeder');\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Version File Structure\nDESCRIPTION: Example of a version.yaml file showing version history with migrations and updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/plugins.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: First version\nv1.0.2: Second version\nv1.0.3:\n    - Update with a migration and seed\n    - create_tables.php\n    - seed_the_database.php\nv2.0.0: Important update\nv2.0.1: Latest version\n```\n\n----------------------------------------\n\nTITLE: Configuring Summary Column Type in YAML\nDESCRIPTION: Demonstrates how to set up a summary column with custom options in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n    limitWords: 10\n    endChars: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Passed Variables Within a Partial\nDESCRIPTION: Shows how variables passed to a partial can be accessed within the partial template using standard Twig variable syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {{ country }}, city: {{ city }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections with Keys and Values in PHP\nDESCRIPTION: The diffAssoc method compares the collection against another collection or a plain PHP array based on its keys and values. It returns the key/value pairs in the original collection that are not present in the given collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'color' => 'orange',\n    'type' => 'fruit',\n    'remain' => 6\n]);\n\n$diff = $collection->diffAssoc([\n    'color' => 'yellow',\n    'type' => 'fruit',\n    'remain' => 3,\n    'used' => 6,\n]);\n\n$diff->all();\n\n// ['color' => 'orange', 'remain' => 6]\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Layout in Twig\nDESCRIPTION: Demonstrates how to access the layout name used by the current page. This returns the layout name as defined in the page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.page.layout }}\n```\n\n----------------------------------------\n\nTITLE: Manually Associating File Attachment in PHP\nDESCRIPTION: Shows how to manually prepare a File model and associate it with the relationship in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$file = new System\\Models\\File;\n$file->data = Input::file('file_input');\n$file->is_public = true;\n$file->save();\n\n$model->avatar()->add($file);\n```\n\n----------------------------------------\n\nTITLE: File Download Response in PHP\nDESCRIPTION: PHP code for an AJAX handler that returns a file download response using the Response::download method with a local file path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function onExport()\n{\n    return Response::download(base_path('app/files/installer.zip'));\n}\n```\n\n----------------------------------------\n\nTITLE: Date Scope with Custom SQL Conditions\nDESCRIPTION: Demonstrates how to use custom SQL statements for specific date conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    conditions:\n        before: created_at <= :value\n        between: created_at >= :after AND created_at <= :before\n```\n\n----------------------------------------\n\nTITLE: Creating a Structure Entry Blueprint in YAML\nDESCRIPTION: This snippet shows how to define a structure entry blueprint for documentation articles. It uses the 'structure' type to allow parent-child relationships and includes a markdown content field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Docs\\Article\ntype: structure\nname: Documentation Article\n\nfields:\n    content:\n        label: Article Content\n        type: markdown\n```\n\n----------------------------------------\n\nTITLE: Grouped Repeater with External Configuration\nDESCRIPTION: Configuration for a grouped repeater field that references external field definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: repeater\n    prompt: Add content block\n    groups: $/acme/blog/config/fields_repeater.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic Number Column Configuration in October CMS\nDESCRIPTION: Basic configuration for displaying a number column in an October CMS list. The 'number' type aligns the content to the right by default.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-number.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n```\n\n----------------------------------------\n\nTITLE: Using displayFrom Property with Custom Link Attribute in YAML\nDESCRIPTION: Configures a linkage column to use a custom attribute for display while maintaining sorting and searching on the original database field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-linkage.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nwebsite:\n    label: Website\n    type: linkage\n    displayFrom: website_link\n```\n\n----------------------------------------\n\nTITLE: Creating Numeric Range Dropdown Lists\nDESCRIPTION: Example showing how to generate a dropdown list with a range of numeric options from start to end values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectRange('number', 10, 20) ?>\n```\n\n----------------------------------------\n\nTITLE: Modifying Existing Columns\nDESCRIPTION: Examples of modifying existing columns using the change method to alter column properties like size and nullability.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->string('name', 50)->change();\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->string('name', 50)->nullable()->change();\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Carbon Dates in Twig\nDESCRIPTION: Demonstrates how to format datetime values using the format() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/carbon.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nMeeting starts at {{ carbon(event.start_at).format('H:i') }} in Johannesburg.\n```\n\n----------------------------------------\n\nTITLE: Export Page YAML Configuration\nDESCRIPTION: Shows detailed YAML configuration for the export page including title, model class, list columns and redirect.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    title: Export Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberExport\n    list: $/acme/campaign/models/subscriberexport/columns.yaml\n    redirect: acme/campaign/subscribers\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw PDO Instance\nDESCRIPTION: Shows how to access the underlying PDO instance from a database connection for low-level operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$pdo = Db::connection()->getPdo();\n```\n\n----------------------------------------\n\nTITLE: Record Finder in Tailor with Model Class in YAML\nDESCRIPTION: Configuration for using recordfinder within Tailor content fields, which requires specifying the modelClass property to define the related model. The list property points to the columns definition file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Product\n    list: $/october/test/models/product/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown with Custom Method in October CMS\nDESCRIPTION: Examples of defining dropdown fields with specific method references, including direct method calls and static method references.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options: listStatuses\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($fieldName, $value, $formData)\n{\n    return ['published' => 'Published', ...];\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options: \\MyAuthor\\MyPlugin\\Classes\\FormHelper::staticMethodOptions\n```\n\nLANGUAGE: php\nCODE:\n```\npublic static function staticMethodOptions($formWidget, $formField)\n{\n    return ['published' => 'Published', ...];\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options: [\\MyAuthor\\MyPlugin\\Classes\\FormHelper, staticMethodOptions]\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Binding for File Attachment in PHP\nDESCRIPTION: Illustrates how to use deferred binding to attach a file to a model in PHP for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$fileFromPost = Input::file('example_file');\n\nif ($fileFromPost) {\n    $post->featured_image()->create(['data' => $fileFromPost], $sessionKey);\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Busting with Carbon Timestamps\nDESCRIPTION: Demonstrates how to generate cache-busting URLs using Carbon formatted timestamps.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/carbon.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\ncarbon('now').format('m.d.y.H.i.s')\n```\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'assets/images/image_file.jpg'|theme }}?{{ carbon('now').format('m.d.y.H.i.s') }}\" alt=\"\" />\n```\n\n----------------------------------------\n\nTITLE: Syncing with Pivot Table Data\nDESCRIPTION: This code shows how to synchronize a many-to-many relationship with additional pivot table data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Using AJAX Handlers in Widgets with HTML\nDESCRIPTION: Example of using an AJAX handler in a widget by referencing it with the getEventHandler method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    data-request=\"<?= $this->getEventHandler('onPaginate') ?>\"\n    title=\"Next page\">‰∏ã‰∏ÄÈ°µ</a>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Layout with {% page %} Tag in October CMS\nDESCRIPTION: A layout template example that includes a head placeholder and the {% page %} tag. The {% page %} tag will render the content from a page template into this location.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/page.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndescription=\"example layout\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    <body>\n        {% page %}\n        ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Records in PHP\nDESCRIPTION: Shows how to retrieve global records using the GlobalRecord model with findForGlobal methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nGlobalRecord::findForGlobal('Blog\\Config');\n\nGlobalRecord::findForGlobalUuid('7b193500-ac0b-481f-a79c-2a362646364d');\n```\n\n----------------------------------------\n\nTITLE: Extending Rich Editor to Include Custom JavaScript in PHP\nDESCRIPTION: PHP code showing how to extend the Rich Editor widget to include custom JavaScript files for button functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\\Backend\\FormWidgets\\RichEditor::extend(function($controller) {\n    $controller->addJs('/plugins/october/test/assets/js/custom-button.js');\n});\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relation Configuration in OctoberCMS\nDESCRIPTION: YAML configuration for a many-to-many relationship (users belonging to roles). Configures list views and form management options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\nroles:\n    label: ËßíËâ≤\n    view:\n        list: $/acme/user/models/role/columns.yaml\n        toolbarButtons: add|remove\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Trait\nDESCRIPTION: Example showing how a standard PHP trait is defined with a method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrait UtilityFunctions\n{\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Available Sites in Twig\nDESCRIPTION: Retrieves the list of available sites from the sitePicker component and stores it in a variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/sitepicker.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set availableSites = sitePicker.sites %}\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Error Handler\nDESCRIPTION: Example of registering a handler for PHP fatal errors using App::fatal in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nApp::fatal(function($exception) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Important Update with Breaking Changes in YAML\nDESCRIPTION: Example of marking a major version update (v2) that contains breaking changes, which won't be automatically deployed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/updates.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nv2.1.0: This is an important update from v1 that contains breaking changes.\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Object Inspector Type in PHP\nDESCRIPTION: This PHP code snippet shows how to set default values for an object inspector type. It demonstrates setting default values for street address, city, and country properties of an address object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-object.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'object',\n            'properties' => [/*...*/],\n            'default' => [\n                'streetAddress' => '321-210 Second ave',\n                'city' => 'Springfield',\n                'country' => 'us'\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining October CMS Development Dependencies in Composer\nDESCRIPTION: Composer dependency configuration for using October CMS development branches\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/using-composer.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"october/rain\": \"dev-develop as 1.1\",\n\"october/system\": \"dev-develop\",\n\"october/backend\": \"dev-develop\",\n\"october/cms\": \"dev-develop\",\n\"laravel/framework\": \"~6.0\"\n```\n\n----------------------------------------\n\nTITLE: Running October CMS Migration\nDESCRIPTION: Command to run October CMS database migrations\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\n----------------------------------------\n\nTITLE: Sending Mail with Variables in PHP\nDESCRIPTION: Example showing how to send mail with variables and customize message properties\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// These variables are available inside the message as Twig\n$vars = ['name' => 'Joe', 'user' => 'Mary'];\n\nMail::send('acme.blog:message', $vars, function($message) {\n    $message->to('admin@domain.tld', 'Admin Person');\n    $message->subject('This is a reminder');\n});\n```\n\n----------------------------------------\n\nTITLE: Match Mode Configuration in Group Filter\nDESCRIPTION: Demonstrates how to configure the match mode for controlling how the filter is applied.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    # ...\n    matchMode: toggle\n```\n\n----------------------------------------\n\nTITLE: Using the nth() Method in PHP Collections\nDESCRIPTION: The nth method creates a new collection with every n-th element from the original collection. An optional offset parameter can be provided to change the starting position.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->nth(4);\n\n// ['a', 'e']\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->nth(4, 1);\n\n// ['b', 'f']\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereNotIn Method in PHP\nDESCRIPTION: Demonstrates how to filter a collection by excluding items where a specified key's value is in a given array. Uses loose comparison for value matching.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 100],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereNotIn('price', [150, 200]);\n\n$filtered->all();\n\n/*\n    [\n        ['product' => 'Chair', 'price' => 100],\n        ['product' => 'Door', 'price' => 100],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating a Warning Hint with Label and Comment in YAML for October CMS\nDESCRIPTION: This snippet illustrates how to define a hint field with a 'warning' mode, along with a label and comment. It showcases the use of different visual display modes for hints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-hint.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_warning1:\n    type: hint\n    mode: warning\n    label: Always wash your hands\n    comment: This is good for stopping the spread of germs.\n```\n\n----------------------------------------\n\nTITLE: Using str_limit() Function in Twig\nDESCRIPTION: Demonstrates the str_limit() function, which limits the number of characters in a string. It also shows how to add a custom suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Backend Controller with October CMS Artisan Command\nDESCRIPTION: Creates a controller with configuration and view files. Requires plugin identifier and controller class name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:controller Acme.Blog Posts\n```\n\n----------------------------------------\n\nTITLE: Verifying Password Hash in PHP\nDESCRIPTION: Shows how to verify a plain-text password against a stored hash using the Hash facade's check method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/hash-crypt.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::check('plain-text', $hashedPassword)) {\n    // The passwords match...\n}\n```\n\n----------------------------------------\n\nTITLE: Backend View Extension Implementation\nDESCRIPTION: Shows how to implement extensible areas in backend views using fireViewEvent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"footer-area-extension\">\n    <?= $this->fireViewEvent('backend.auth.extendSigninView', [$firstParam]) ?>\n</div>\n```\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.auth.extendSigninView', function ($controller, $firstParam) {\n    return '<a href=\"#\">Sign in with Google!</a>';\n});\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Methods in Extendable Classes\nDESCRIPTION: Shows how to list all available methods in an Extendable class, including dynamic methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicMethod('getTagsAttribute', function () use ($model) {\n        return $this->tagsCache;\n    });\n});\n\n$post = new Post;\n\n$methods = $post->getClassMethods();\n\n/**\n * $methods = [\n *   0 => '__construct',\n *   1 => 'extend',\n *   2 => 'getTagsAttribute',\n *   ...\n * ];\n */\n```\n\n----------------------------------------\n\nTITLE: Extending the View Widget\nDESCRIPTION: PHP method to modify the relation view widget based on model properties, in this example toggling the checkbox display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendViewWidget($widget, $field, $model)\n{\n    // Make sure the model and field matches those you want to manipulate\n    if (!$model instanceof MyModel || $field != 'myField')\n        return;\n\n    if ($model->constant) {\n        $widget->showCheckboxes = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: File Input Generation\nDESCRIPTION: Shows how to generate a file input field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::file('image') ?>\n```\n\n----------------------------------------\n\nTITLE: File Upload Field Configuration in YAML\nDESCRIPTION: YAML configuration for a file uploader widget that handles images or regular files using attachOne/attachMany relations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: fileupload\n    mode: image\n    imageHeight: 260\n    imageWidth: 260\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Export Controller in PHP\nDESCRIPTION: Shows how to implement the ImportExportController behavior in a controller class by defining the $implement and $importExportConfig properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Shop\\Controllers;\n\nclass Products extends Controller\n{\n    public $implement = [\n        'Backend.Behaviors.ImportExportController',\n    ];\n\n    public $importExportConfig = 'config_import_export.yaml';\n\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Tag List Field Configuration in YAML\nDESCRIPTION: YAML configuration examples for tag list input field with various options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    separator: space\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    options:\n        - Red\n        - Blue\n        - Orange\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    mode: relation\n```\n\n----------------------------------------\n\nTITLE: Defining Model Scope for Dropdown Filter in YAML\nDESCRIPTION: Shows how to configure a dropdown filter that uses a custom model scope method for filtering. It includes options for active and deleted statuses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: dropdown\n    modelScope: applyStatusCode\n    options:\n        active: Active\n        deleted: Deleted\n```\n\n----------------------------------------\n\nTITLE: AJAX Data Return Handler\nDESCRIPTION: Demonstrates returning structured data from an AJAX handler and how to handle it client-side.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onFetchDataFromServer()\n{\n    /* Some server-side code */\n\n    return [\n        'totalUsers' => 1000,\n        'totalProjects' => 937\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting PHP Collection\nDESCRIPTION: The sort method sorts the collection. It can be used with a custom callback for advanced sorting needs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([5, 3, 1, 2, 4]);\n\n$sorted = $collection->sort();\n\n$sorted->values()->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Generating Secure Asset URL in PHP\nDESCRIPTION: The secure_asset function generates a URL for an asset using HTTPS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_40\n\nLANGUAGE: PHP\nCODE:\n```\necho secure_asset('foo/bar.zip', $title, $attributes = []);\n```\n\n----------------------------------------\n\nTITLE: Scoped Relationship Definition\nDESCRIPTION: Shows how to use query scopes in relationship definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $belongsToMany = [\n        'categories' => [\n            \\Acme\\Blog\\Models\\Category::class,\n            'scope' => 'isActive'\n        ]\n    ];\n}\n\nclass Category extends Model\n{\n    public function scopeIsActive($query)\n    {\n        return $query->where('is_active', true)->orderBy('name', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Options with Icons\nDESCRIPTION: PHP method showing how to include custom icons with dropdown options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($fieldName, $value, $formData)\n{\n    return [\n        'published' => ['Published', 'icon-check-circle'],\n        'unpublished' => ['Unpublished', 'icon-minus-circle'],\n        'draft' => ['Draft', 'icon-clock-o']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Unsetting Relationships by Assigning Null\nDESCRIPTION: This snippet demonstrates how to unset relationships by assigning null to the relationship property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$post->author = null;\n\n$post->comments = null;\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookie to Response in PHP\nDESCRIPTION: Shows how to attach a cookie to the response using the withCookie method. Additional parameters can be used to further customize the cookie.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)->withCookie('name', 'value');\n\n->withCookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)\n```\n\n----------------------------------------\n\nTITLE: Countdown Timer with Auto-Update in Twig\nDESCRIPTION: Twig template implementing a countdown timer with automatic updates every 2 seconds using data-auto-submit.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/polling.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    {% set launchDate = carbon('2025-01-01') %}\n    {% set days = launchDate.diffInDays %}\n    {% set hours = launchDate.subDays(days).diffInHours %}\n    {% set minutes = launchDate.subHours(hours).diffInMinutes %}\n    {% set seconds = launchDate.subMinutes(minutes).diffInSeconds %}\n\n    <h2>\n        Launch in...\n        {{ days }} days,\n        {{ hours }} hours,\n        {{ minutes }} minutes,\n        {{ seconds }} seconds\n    </h2>\n</div>\n\n<div\n    data-request=\"onAjax\"\n    data-request-update=\"{ _self: true }\"\n    data-auto-submit=\"2000\"></div>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Assets in PHP\nDESCRIPTION: Demonstrates how to inject multiple CSS and JavaScript files as arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/css/hello.css', 'assets/css/goodbye.css']);\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js']);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Unique Validation Rule in October CMS Tailor\nDESCRIPTION: Example of applying the 'unique' validation rule to ensure the field value doesn't already exist in the database. The rule is automatically configured without needing to specify a table name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nunique_field:\n    label: Unique Field\n    validation: unique\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Value Selection in YAML\nDESCRIPTION: Shows how to use valueFrom and displayFrom options to customize column values in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nother_name:\n    label: Something Great\n    valueFrom: name\n\nstatus_code:\n    label: Status\n    displayFrom: status_label\n```\n\n----------------------------------------\n\nTITLE: Rendering Color Picker in October CMS\nDESCRIPTION: Shows how to create a color picker widget for color selection, with optional available colors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{colorpicker name=\"bg_color\" label=\"Background colour\" allowEmpty=\"true\" availableColors=\"#ffffff|#000000\"}{/colorpicker}\n```\n\n----------------------------------------\n\nTITLE: Column Renaming and Dropping\nDESCRIPTION: Methods for renaming and dropping table columns\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->renameColumn('from', 'to');\n});\n\nSchema::table('users', function ($table) {\n    $table->dropColumn('votes');\n});\n\nSchema::table('users', function ($table) {\n    $table->dropColumn(['votes', 'avatar', 'location']);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Error Messages Display Container\nDESCRIPTION: HTML structure for displaying multiple validation error messages using data-validate-error and data-message attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-danger\" data-validate-error>\n    <p data-message></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Combiner Aliases with |theme Filter in Twig\nDESCRIPTION: Demonstrates the use of combiner aliases, such as @framework.extras, along with regular asset paths in the |theme filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/theme.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ [\n    '@framework.extras',\n    'assets/javascript/app.js'\n]|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Bucket Policy in JSON\nDESCRIPTION: This JSON snippet defines the bucket policy for allowing public read-only access to all folders and directories in an Amazon S3 bucket. It's essential for making the bucket publicly accessible for Media Manager use.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2008-10-17\",\n    \"Id\": \"Policy1397632521960\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1397633323327\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::BUCKETNAME/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional URL Parameter Access in October CMS\nDESCRIPTION: Demonstrates how to check the value of a URL parameter named 'tab' and display different content based on its value. The URL pattern includes a dynamic tab parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-param.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/account/:tab\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.param.tab == 'details' %}\n\n    <p>Here are all your details</p>\n\n{% elseif this.param.tab == 'history' %}\n\n    <p>You are viewing a blast from the past</p>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Conditions in Text Filter\nDESCRIPTION: YAML configuration showing how to implement custom SQL conditions for both equals and contains matching.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-text.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n    conditions:\n        equals: username = :value\n        contains: username like %:value%\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown to HTML Conversion with md Filter\nDESCRIPTION: Demonstrates the basic Markdown to HTML conversion using the |md filter, which transforms bold Markdown syntax into HTML strong tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/md.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\nLANGUAGE: html\nCODE:\n```\n<strong>Text</strong> is bold.\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Tooltip to List Columns in YAML\nDESCRIPTION: Demonstrates how to add a simple tooltip to a list column for providing additional context in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncount:\n    label: Count\n    type: number\n    tooltip: Number of users in the group\n```\n\n----------------------------------------\n\nTITLE: Selecting Every Nth Element in PHP Collections\nDESCRIPTION: Demonstrates the use of the nth() method to create a new collection with every n-th element from the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->nth(4);\n\n// ['a', 'e']\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->nth(4, 1);\n\n// ['b', 'f']\n```\n\n----------------------------------------\n\nTITLE: Taglist with Predefined Options in YAML\nDESCRIPTION: Configuration for a taglist with predefined color options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-taglist.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    options:\n        - Red\n        - Blue\n        - Orange\n```\n\n----------------------------------------\n\nTITLE: Twig View Template\nDESCRIPTION: Example of a Twig template view file with variable interpolation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello, {{ name }}</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using str_plural() Function for Pluralization\nDESCRIPTION: Demonstrates the str_plural() function, which gets the plural form of an English word.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_plural('chicken') }}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Partial View for OctoberCMS PHP\nDESCRIPTION: Example content of a partial view file (_content_column.php) showing how to conditionally render the column value based on a model property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($record->is_active): ?>\n    <?= e($value) ?>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Registering Closure Function\nDESCRIPTION: Example of registering a Twig function using a closure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'functions' => [\n    'hello_world' => function() { return 'Hello World!'; }\n]\n```\n\n----------------------------------------\n\nTITLE: Counting Related Records with Number Column in October CMS\nDESCRIPTION: Configuration for using a number column to display a count of related records. This example counts the number of users associated with the model through the 'users' relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-number.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nusers_count:\n    label: Users\n    type: number\n    relation: users\n    relationCount: true\n```\n\n----------------------------------------\n\nTITLE: Array-Based Group Filter Configuration in YAML\nDESCRIPTION: Shows how to set up a group filter using predefined options in an array format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Role\n    type: group\n    options:\n        developer: Developer\n        publisher: Publisher\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Field in YAML\nDESCRIPTION: Defines a single checkbox field in a form using YAML configuration. The 'type' property is set to 'checkbox' and includes a 'default' value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: checkbox\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Checking If an Item Exists in the Session with this.session in Twig\nDESCRIPTION: Demonstrates how to check if a specific key exists in the session using the has method. This can be used in conditional statements to make decisions based on session data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-session.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.session.has('key') %}\n    <h1>we found it in the session</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins\nDESCRIPTION: Command to display a list of all plugins installed in the October CMS instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:list\n```\n\n----------------------------------------\n\nTITLE: Retrieving URI Segments\nDESCRIPTION: Shows how to access specific segments of the request URI.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$segment = Request::segment(1);\n```\n\n----------------------------------------\n\nTITLE: Basic Pluralization with trans_choice\nDESCRIPTION: Demonstrates using the trans_choice filter for basic pluralization with a count parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/trans.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'There is one apple|There are many apples'|trans_choice(3) }}\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Using Query Builder in PHP with October CMS\nDESCRIPTION: This code shows an alternative method of seeding the database in October CMS using the Db::table query builder method instead of a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $user = Db::table('users')->insert([\n        'email' => 'user@example.tld',\n        'login' => 'user',\n        // ...\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Execution with when() Method in PHP Collections\nDESCRIPTION: The when() method executes a given callback when the first argument evaluates to true. It's useful for conditional operations on collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_71\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$collection->when(true, function ($collection) {\n    return $collection->push(4);\n});\n\n$collection->when(false, function ($collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Basic Number Filter Configuration in YAML\nDESCRIPTION: Basic YAML configuration for a number filter scope with age filtering using greater than condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-number.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    conditions:\n        greater: true\n```\n\n----------------------------------------\n\nTITLE: Tag List Widget with Predefined Options in YAML\nDESCRIPTION: Example showing how to configure the taglist widget with predefined color options that users can select from.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-taglist.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    options:\n        - Red\n        - Blue\n        - Orange\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Scope Filter in YAML for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to define a checkbox scope filter in OctoberCMS. It shows the basic structure including the label, type, and conditions properties. The filter is used to hide published items when checked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nis_published:\n    label: Hide Published\n    type: checkbox\n    conditions: is_published <> true\n```\n\n----------------------------------------\n\nTITLE: Injecting Assets with Resources Component in October CMS\nDESCRIPTION: Shows how to inject various types of assets (CSS, SCSS, LESS, JS) using the resources component. The assets are specified in the component configuration and will be automatically included when the partial is used.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/resources.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[resources]\ncss[] = \"blocks/carousel.css\"\nscss[] = \"blocks/carousel.scss\"\nless[] = \"blocks/carousel.less\"\njs[] = \"blocks/carousel.js\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<!-- Carousel Contents Here -->\n```\n\n----------------------------------------\n\nTITLE: Rolling Back an October CMS Plugin Database\nDESCRIPTION: Command to destroy a plugin's database tables without recreating them using the --rollback option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName --rollback\n```\n\n----------------------------------------\n\nTITLE: Configuring Global AJAX Settings in JavaScript\nDESCRIPTION: This snippet sets up global configurations for all AJAX requests. It enables flash message handling, disables the progress bar, and defines custom handlers for error and flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:setup', function(event) {\n    const { options } = event.detail.context;\n\n    // Enable AJAX handling of Flash messages on all AJAX requests\n    options.flash = true;\n\n    // Disable the progress bar for all AJAX requests\n    options.progressBar = false;\n\n    // Handle Error Messages by triggering a flashMsg of type error\n    options.handleErrorMessage = function(message) {\n        oc.flashMsg({ message: message, type: 'error' });\n    }\n\n    // Handle Flash Messages by triggering a flashMsg of the message type\n    options.handleFlashMessage = function(message, type) {\n        oc.flashMsg({ message: message, type: type });\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Language with Hard Locale\nDESCRIPTION: Demonstrates using the hard_locale attribute to always get a locale value, falling back to the default locale when none is specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-site.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<html lang=\"{{ this.site.hard_locale }}\">\n```\n\n----------------------------------------\n\nTITLE: Defining a Standard Relationship in Entries Field\nDESCRIPTION: Example configuration for defining a standard relationship from a blog post to categories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    type: entries\n    source: Blog\\Category\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Services in October CMS\nDESCRIPTION: PHP configuration code for Amazon SES services in the config/services.php file. Includes key, secret, and region settings for connecting to SES.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => 'your-ses-key',\n    'secret' => 'your-ses-secret',\n    'region' => 'ses-region',  // e.g. us-east-1\n],\n```\n\n----------------------------------------\n\nTITLE: Using str_is() String Helper in PHP\nDESCRIPTION: The str_is function determines if a given string matches a given pattern. Asterisks may be used as wildcards to match any number of characters, making it useful for pattern matching.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$value = str_is('foo*', 'foobar');\n\n// true\n\n$value = str_is('baz*', 'foobar');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Configuring ColorPicker Column in October CMS List\nDESCRIPTION: Configuration for a colorpicker column which displays a color from a colorpicker field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel 9/10 Project\nDESCRIPTION: Creates a new Laravel project using Composer.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel:^9.0 mylaravel\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Sync\nDESCRIPTION: Command to synchronize a theme's content between the filesystem and database when database templates are enabled.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:sync\n```\n\n----------------------------------------\n\nTITLE: Updating Partial with Data Attributes API in HTML\nDESCRIPTION: This code shows how to use the data attributes API to update a partial named 'mytime' inside the '#myDiv' element when a button is clicked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/update-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefreshTime\"\n    data-request-update=\"mytime: '#myDiv'\">\n    Go\n</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing NestedTree Trait in PHP for October CMS\nDESCRIPTION: This PHP code snippet shows how to use the NestedTree trait in a model class. This trait is used when a fixed structure with parent-child relationships is needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/structures.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\NestedTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Contents (PHP)\nDESCRIPTION: Example of retrieving the contents of a file using the get method, which returns the raw string contents of the file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$contents = Storage::get('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Using class_basename() String Helper in PHP\nDESCRIPTION: The class_basename function returns the class name of the given class with the namespace removed. It takes a fully qualified class name and returns just the class name portion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$class = class_basename('Foo\\Bar\\Baz');\n\n// Baz\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor for Queue Management in Bash\nDESCRIPTION: Commands to update Supervisor configuration and start October CMS worker processes. These commands reread the configuration, update Supervisor, and start the October worker processes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo supervisorctl reread\n\nsudo supervisorctl update\n\nsudo supervisorctl start october-worker:*\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters when Generating URLs to Named Routes\nDESCRIPTION: Demonstrates how to pass parameters when generating URLs to named routes that have defined parameters. The parameters are automatically inserted into the URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('user/{id}/profile', ['as' => 'profile', function ($id) {\n    //\n}]);\n\n$url = Url::route('profile', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Creating Relative Symbolic Links for Public Directory\nDESCRIPTION: Command to create a mirrored copy with relative symbolic links instead of absolute links for better portability.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:mirror public --relative\n```\n\n----------------------------------------\n\nTITLE: Refreshing Plugin in October CMS\nDESCRIPTION: The 'plugin:refresh' command destroys and recreates a plugin's database tables. The --rollback option allows destroying tables without recreating them.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName --rollback\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName --rollback=1.0.3\n```\n\n----------------------------------------\n\nTITLE: Basic Page Link Creation with Twig Filter\nDESCRIPTION: Demonstrates how to create a basic page link using the |page filter in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Text Filter with Custom Model Scope in YAML\nDESCRIPTION: Shows how to configure a text filter to use a custom model scope. This snippet defines a 'modelScope' property that references a method to be implemented in the PHP model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-text.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n    modelScope: textFilter\n```\n\n----------------------------------------\n\nTITLE: Implementing Revisionable Trait in PHP Models\nDESCRIPTION: Illustrates how to use the Revisionable trait to record change history for model attributes in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Revisionable;\n\n    /**\n     * @var array Monitor these attributes for changes.\n     */\n    protected $revisionable = ['name', 'email'];\n\n    /**\n     * @var array Relations\n     */\n    public $morphMany = [\n        'revision_history' => [\\System\\Models\\Revision::class, 'name' => 'revisionable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget in YAML\nDESCRIPTION: Configuration for a media finder widget that allows selecting files from the media manager library. Supports image and file modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nbackground_image:\n    label: Background image\n    type: mediafinder\n    mode: image\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Field Values in Form Field Triggers with YAML\nDESCRIPTION: Illustrates how to reference fields that store multiple values (like Checkbox List or Tag List) in form field triggers. The example checks if the colors field contains either 'red' or 'green'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show\n    condition: value[red][green]\n    field: colors[]\n```\n\n----------------------------------------\n\nTITLE: Creating Page Links with |page Filter in Twig\nDESCRIPTION: Demonstrates how to use the |page filter to create links to pages in Twig templates. It shows linking to a page in the root directory and a page in a subdirectory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'about'|page }}\">About Us</a>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ 'contacts/about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Import/Export Configuration with Custom Form Options in YAML\nDESCRIPTION: Configuration example showing how to define custom form fields for import and export operations using YAML configuration files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-model.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config_import_export.yaml\nimport:\n    # ...\n    form: $/acme/campaign/models/subscriberimport/fields.yaml\n\nexport:\n    # ...\n    form: $/acme/campaign/models/subscriberexport/fields.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# fields.yaml\nfields:\n\n    auto_create_lists:\n        label: Automatically create lists\n        type: checkbox\n        default: true\n```\n\n----------------------------------------\n\nTITLE: Installing Theme in October CMS\nDESCRIPTION: The 'theme:install' command downloads and installs a theme. Additional options allow installing from remote sources and specifying versions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/themename-theme.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/themename-theme.git --want=dev-develop\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/oc-themename-theme.git --oc\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Label with nameFrom Property in YAML\nDESCRIPTION: Shows how to customize the label used for related records in a relation field using the 'nameFrom' property. This example uses the 'title' attribute for the label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n    nameFrom: title\n```\n\n----------------------------------------\n\nTITLE: Defining a Partial with Configuration in October CMS\nDESCRIPTION: Shows how to create a partial with a configuration section that includes a description parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Demo partial\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Composable Partials with Placeholders\nDESCRIPTION: Advanced example of creating composable partials by combining the body attribute with placeholders. This allows for multiple content areas within a single partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" image=\"img.jpg\" body %}\n    {% put header %}\n        <h2>This is the card header</h2>\n    {% endput %}\n    This is the card contents\n{% endpartial %}\n```\n\n----------------------------------------\n\nTITLE: Database Seeding Using Query Builder\nDESCRIPTION: Alternative approach to seeding database using the Db::table query builder method instead of models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function run()\n{\n    $user = Db::table('users')->insert([\n        'email'                 => 'user@example.com',\n        'login'                 => 'user',\n        [...]\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Twig Template Page Link Usage\nDESCRIPTION: Examples of using Twig filters to convert page finder values into URLs and process HTML content\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ featured_page|link }}\n\n{{ blog_html|content }}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Command in OctoberCMS Plugin\nDESCRIPTION: Shows how to register a console command in an OctoberCMS plugin using the registerConsoleCommand helper method in the plugin's register method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass Blog extends PluginBase\n{\n    public function pluginDetails()\n    {\n        // ...\n    }\n\n    public function register()\n    {\n        $this->registerConsoleCommand('acme.mycommand', \\Acme\\Blog\\Console\\MyConsoleCommand::class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single File Attachment in PHP\nDESCRIPTION: Demonstrates how to create a single file attachment using Input::file method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar = Input::file('file_input');\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline Images in Email Templates\nDESCRIPTION: Example of embedding an inline image in an email template using Twig and the message.embed method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image:\n\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Composable Card Partial\nDESCRIPTION: The implementation of a composable card partial that accepts an image variable and two content areas (header and body). Shows how the placeholder and body content integrate.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"header\">\n    <div class=\"image\">\n        <img src=\"{{ image }}\" />\n    </div>\n    {% placeholder header %}\n</div>\n<div class=\"body\">\n    {{ body|raw }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dumping Collection Items and Ending Execution in PHP\nDESCRIPTION: The dd method dumps the collection's items and ends execution of the script. It's useful for debugging purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['John Doe', 'Jane Doe']);\n\n$collection->dd();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Layout with Placeholder\nDESCRIPTION: Layout template showing how to define a placeholder in the head section\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression in Twig\nDESCRIPTION: Shows how to use ternary operators for conditional expressions in template variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ isAjax ? 'Yes' : 'No' }}\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Property in OctoberCMS (PHP)\nDESCRIPTION: A PHP example showing how to define a checkbox property in the defineProperties method. This defines an 'enabled' property with a title, type set to 'checkbox', and a default value of true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'enabled' => [\n            'title' => 'Enabled',\n            'type' => 'checkbox',\n            'default' => true\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Number Field Implementation in YAML for October CMS\nDESCRIPTION: A simple implementation of a number field for collecting age data in an October CMS form. This basic configuration only includes the label property and specifies the field type as number.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-number.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Form Controller in PHP for October CMS\nDESCRIPTION: Example of a basic controller class that implements the FormController behavior with a configuration file reference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = ['Backend.Behaviors.FormController'];\n\n    public $formConfig = 'config_form.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Media URL\nDESCRIPTION: Shows the resulting HTML output after the |media filter has been applied. This example assumes the media manager address is https://cdn.octobercms.com.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-media.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://cdn.octobercms.com/banner.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Partials from Different Contexts\nDESCRIPTION: PHP code examples showing how to pass variables to partials from different contexts: from a page or layout PHP section, from a component class, and from a backend controller or widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/ajax/update-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// ‰ªéÈ°µÈù¢ÊàñÂ∏ÉÂ±Ä PHP ‰ª£Á†ÅÈÉ®ÂàÜ\n$this['result'] = 'Hello world!';\n\n// ‰ªéÁªÑ‰ª∂Á±ª\n$this->page['result'] = 'Hello world!';\n\n// ‰ªéÂêéÁ´ØÊéßÂà∂Âô®ÊàñÂ∞èÈÉ®‰ª∂\n$this->vars['result'] = 'Hello world!';\n```\n\n----------------------------------------\n\nTITLE: Model Scope Configuration in YAML\nDESCRIPTION: Configuration for using a custom model scope in the group filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n    modelScope: groupFilter\n```\n\n----------------------------------------\n\nTITLE: Configuring Unencrypted Cookies in PHP\nDESCRIPTION: Examples of specifying cookies that should not be encrypted or decrypted in October CMS configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'unencrypt_cookies' => [\n    'my_cookie',\n],\n```\n\n----------------------------------------\n\nTITLE: Using whereNotBetween for Exclusion Filtering\nDESCRIPTION: Shows how to use whereNotBetween to filter records where a column's value falls outside a specified range of values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereNotBetween('votes', [1, 100])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Formatted Number Column with Currency in October CMS\nDESCRIPTION: Configuration for displaying a number column with custom formatting. This example shows how to format a price with a dollar sign and two decimal places.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-number.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprice:\n    label: Price\n    type: number\n    format: \"$%.2f\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Inverse Relationship in Entries Field\nDESCRIPTION: Configuration for defining an inverse relationship that links back to the source blueprint.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nposts:\n    type: entries\n    source: Blog\\Post\n    inverse: categories\n    hidden: true\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Values in PHP for October CMS Plugins\nDESCRIPTION: Example of a basic configuration file structure for an October CMS plugin. The configuration is defined as a PHP array that is returned from the file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/file-settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'maxItems' => 10,\n    'display' => 5\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Argument with Default Value\nDESCRIPTION: Example of defining an argument with a default value in the command signature.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user=foo}';\n```\n\n----------------------------------------\n\nTITLE: Default Placeholder Content\nDESCRIPTION: Defining default content for placeholders that can be replaced or complemented by pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder sidebar default %}\n    <p><a href=\"/contacts\">Contact us</a></p>\n{% endplaceholder %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    <p><a href=\"/services\">Services</a></p>\n    {% default %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Creating Text Input Fields with Default Values\nDESCRIPTION: Example showing how to create a text input field with a pre-defined value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::text('email', 'emailaddress@example.tld') ?>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Form with Class Attribute\nDESCRIPTION: Shows the HTML output generated by the form_open() helper when passing a class attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form class=\"form-horizontal\">\n```\n\n----------------------------------------\n\nTITLE: Checking View Existence in PHP\nDESCRIPTION: Demonstrates how to check if a view exists using the View::exists method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nif (View::exists('acme.blog::mail.customer')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using |app filter for favicon in Twig\nDESCRIPTION: Demonstrates how to use the |app filter to generate an absolute URL for a favicon.ico file. This ensures the favicon is correctly referenced regardless of the current page URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/app.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<link rel=\"icon\" href=\"{{ '/favicon.ico'|app }}\" />\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookies to Responses in PHP\nDESCRIPTION: Shows how to attach new cookies to a response when creating the response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = Response::make('Hello World');\n\n$response->withCookie(Cookie::make('name', 'value', $minutes));\n```\n\n----------------------------------------\n\nTITLE: Configuring List Filter in YAML\nDESCRIPTION: Example configuration for enabling list filtering in the List Controller behavior configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filters.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\n\n# ...\n\n# Displays the list filter\nfilter: $/october/test/models/user/scopes.yaml\n```\n\n----------------------------------------\n\nTITLE: Using array_divide Helper Function in PHP\nDESCRIPTION: The array_divide function splits an array into two separate arrays - one containing the keys and another containing the values from the original array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nlist($keys, $values) = array_divide(['name' => 'Desk']);\n\n// $keys: ['name']\n\n// $values: ['Desk']\n```\n\n----------------------------------------\n\nTITLE: Disabling PJAX for Specific Links\nDESCRIPTION: This HTML example shows how to disable PJAX routing for a specific link by using the data-turbo attribute set to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/\" data-turbo=\"false\">Disabled</a>\n```\n\n----------------------------------------\n\nTITLE: Named Collection Component Implementation\nDESCRIPTION: Implementation of the Collection component with a custom alias 'posts' for accessing the collection variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[collection posts]\nhandle = \"Blog\\Post\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in posts %}\n    <h1>{{ post.title }}</h1>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Deferring Relationship Binding in OctoberCMS\nDESCRIPTION: Example demonstrating deferred binding of relationships. This shows how to associate a comment with a post that hasn't been saved yet.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment;\\n$comment->content = \"Hello world!\";\\n$comment->save();\\n\\n$post = new Post;\\n$post->comments()->add($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Tabbed Nested Items Configuration in YAML\nDESCRIPTION: Configuration for a 'nesteditems' field that uses tabs to organize form fields. This allows for a more organized interface when dealing with complex nested item structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-nesteditems.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntabbed_content:\n    type: nesteditems\n    form:\n        tabs:\n            fields:\n                # ...\n```\n\n----------------------------------------\n\nTITLE: Using |theme Filter for JavaScript in Twig\nDESCRIPTION: Demonstrates how to use the |theme filter to include a JavaScript file from the theme's assets directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<script type=\"text/javascript\" src=\"{{ 'assets/js/menu.js'|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Logic with If-Else in Twig\nDESCRIPTION: Shows how to use conditional if-else statements in Twig templates to control what content is displayed based on conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if stormCloudComing %}\n    Stay inside\n{% else %}\n    Go outside and play\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: External Mutator Definition using Event Binding\nDESCRIPTION: Shows how to define a mutator externally by extending the model.setAttribute event. This allows adding mutators without modifying the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.setAttribute', function ($attribute, $value) use ($model) {\n        if ($attribute === 'first_name') {\n            $model->attributes['first_name'] = strtolower($value);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Plugin Composer Configuration Example\nDESCRIPTION: Example composer.json configuration for an October CMS plugin, including required metadata and dependencies\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/using-composer.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"october/oc-demo-plugin\",\n    \"type\": \"october-plugin\",\n    \"description\": \"Demo OctoberCMS plugin\",\n    \"keywords\": [\"october\", \"cms\", \"demo\", \"plugin\"],\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Alexey Bobkov\",\n            \"email\": \"hello@octobercms.com\",\n            \"role\": \"Co-founder\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.2\",\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Blocks with Twig\nDESCRIPTION: Demonstrates how to pass variables to content blocks using the {% content %} tag, including user-defined variables and arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-content.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" name=user.name %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"location.htm\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" likes=[\n    {name:'Dogs'},\n    {name:'Fishing'},\n    {name:'Golf'}\n] %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Settings in Twig Templates\nDESCRIPTION: Example of accessing custom theme settings in a Twig template using the this.theme global variable, which exposes all theme configuration values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Welcome to {{ this.theme.site_name }}!</h1>\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Configuration Values in October CMS\nDESCRIPTION: Example of overriding specific configuration values from a plugin at the application level. Only the values that need to be changed are included in the override file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/file-settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'maxItems' => 20\n];\n```\n\n----------------------------------------\n\nTITLE: Using array_forget() Function in PHP\nDESCRIPTION: The array_forget method removes a key/value pair from a deeply nested array using 'dot' notation. This allows removing specific nested items without manually traversing the array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$array = ['products' => ['desk' => ['price' => 100]]];\n\narray_forget($array, 'products.desk');\n\n// ['products' => []]\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variable with env() in PHP\nDESCRIPTION: This snippet shows the PHP equivalent of using the env() function to access the 'APP_ENV' environment variable, with a default value of 'production' if the variable is not set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/config.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?= env('APP_ENV', 'production') ?>\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins in October CMS\nDESCRIPTION: Command to display a list of installed plugins and their version numbers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:list\n```\n\n----------------------------------------\n\nTITLE: Accessing belongsTo Relationship in PHP for October CMS\nDESCRIPTION: Shows how to access the parent Post model from a Comment model using the defined belongsTo relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\necho $comment->post->title;\n```\n\n----------------------------------------\n\nTITLE: Example Array Format for Selectable Column Options in PHP\nDESCRIPTION: Demonstrates the array format used to define options for a selectable column, where keys are stored values and values are display labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-selectable.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['open' => 'Open', 'closed' => 'Closed']\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data in PHP\nDESCRIPTION: Examples of retrieving session data with default values and closure callbacks using the get method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::get('key');\n\n$value = Session::get('key', 'default');\n\n$value = Session::get('key', function() { return 'default'; });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primary Site in PHP\nDESCRIPTION: Example of getting the primary site definition using getPrimarySite method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$site = Site::getPrimarySite();\n```\n\n----------------------------------------\n\nTITLE: Intersecting Collection Keys with intersectByKeys() Method in PHP\nDESCRIPTION: The intersectByKeys() method removes any keys from the original collection that are not present in the given array or collection, preserving only common keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    'serial' => 'UX301', 'type' => 'screen', 'year' => 2009\n]);\n\n$intersect = $collection->intersectByKeys([\n    'reference' => 'UX404', 'type' => 'tab', 'year' => 2011\n]);\n\n$intersect->all();\n\n// ['type' => 'screen', 'year' => 2009]\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Counters in PHP\nDESCRIPTION: Example showing how to add numeric counters to navigation items using counter and counterLabel properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'blog' => [\n    // ...\n    'counter' => [\\Author\\Plugin\\Classes\\MyMenuCounterService::class, 'getCounterMethod'],\n    'counterLabel' => 'Label describing a dynamic menu counter',\n],\n```\n\n----------------------------------------\n\nTITLE: Using link() Function\nDESCRIPTION: Shows how to use the link() function to get detailed information about a page link including its URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/link.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set resolved = link('october://cms-page@link/about') %}\n\n{{ resolved.url }}\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS without cURL\nDESCRIPTION: Alternative quick start installation method for systems without cURL, using PHP to download and install October CMS v1.0.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp -r \"eval('?>'.file_get_contents('https://octobercms.com/api/installer'));\"\n```\n\n----------------------------------------\n\nTITLE: Using Site Service for Context-Specific Model Retrieval in October CMS\nDESCRIPTION: This PHP code demonstrates how to use the Site facade to retrieve a model in the context of a specific site (with ID 2) using the withContext method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/multisite.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$model = Site::withContext(2, function() {\n    return Model::find(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Bracket Syntax in PHP\nDESCRIPTION: Demonstrates how to use the Bracket parser to parse simple bracket syntax templates in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Parse\\Bracket;\n\n$html = Bracket::parse($content, ['foo' => 'bar']);\n```\n\n----------------------------------------\n\nTITLE: Using unwrap() Method in PHP Collections\nDESCRIPTION: Demonstrates how to unwrap collection items to their underlying values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_59\n\nLANGUAGE: php\nCODE:\n```\nCollection::unwrap(new Collection('John Doe'));\n\n// ['John Doe']\n\nCollection::unwrap(['John Doe']);\n\n// ['John Doe']\n\nCollection::unwrap('John Doe');\n\n// 'John Doe'\n```\n\n----------------------------------------\n\nTITLE: Delaying a Released Job in PHP\nDESCRIPTION: Shows how to specify a delay in seconds before a released job becomes available again in the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$job->release(5);\n```\n\n----------------------------------------\n\nTITLE: Record Finder in Tailor with Single Item Limit\nDESCRIPTION: Configuration example for Tailor showing how to limit the recordfinder to a single item selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Tag\n    maxItems: 1\n```\n\n----------------------------------------\n\nTITLE: Creating HTML View in OctoberCMS\nDESCRIPTION: Shows an example of a simple HTML view file with Twig-style variable interpolation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!-- View stored in plugins/acme/blog/views/greeting.htm -->\n\n<html>\n    <body>\n        <h1>Hello, {{ name }}</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Resizing an Image with Crop Mode in PHP\nDESCRIPTION: Shows how to resize an image to specific dimensions using the 'crop' mode, which maintains aspect ratio while filling the target dimensions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$image->resize(800, 600, ['mode' => 'crop']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Filter Widget in October CMS\nDESCRIPTION: Command to generate a backend filter widget, view, and basic asset files using the 'create:filterwidget' artisan command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:filterwidget Acme.Blog Discount\n```\n\n----------------------------------------\n\nTITLE: Configuring Balloon Selector Fields in October CMS\nDESCRIPTION: Shows how to configure balloon selector fields which render a list where only one item can be selected at a time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    label: Gender\n    type: balloon-selector\n    default: female\n    options:\n        female: Female\n        male: Male\n```\n\n----------------------------------------\n\nTITLE: Retrieving Themes Path in PHP\nDESCRIPTION: The themes_path function returns the fully qualified path to the themes directory. It can also generate a path to a specific file within the themes directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n$path = themes_path();\n\n$path = themes_path('mytheme/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Rendering Filter Widget State (PHP)\nDESCRIPTION: Implements the render method to display the initial state of the filter widget, including the current value and label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['scope'] = $this->filterScope;\n    $this->vars['name'] = $this->getScopeName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('discount');\n}\n```\n\n----------------------------------------\n\nTITLE: Basic French Translation JSON Example\nDESCRIPTION: Simple JSON translation file example showing how to translate a basic English phrase to French using direct string mapping.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/localization.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"j'adore programmer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default Pagination Template\nDESCRIPTION: The default HTML template used for rendering pagination controls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"pagination\">\n    <li class=\"page-item first\">\n        <span class=\"page-link\">&larr;</span>\n    </li>\n    <li class=\"page-item\">\n        <a class=\"page-link\" href=\"?page=1\">1</a>\n    </li>\n    <li class=\"page-item last\">\n        <a class=\"page-link\" href=\"?page=2\">&rarr;</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Fully Qualified Path for Partial in YAML\nDESCRIPTION: Specifying a fully qualified path to access partials outside the model or controller directories, useful for sharing partials between definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: $/acme/blog/partials/_field_content.php\n```\n\n----------------------------------------\n\nTITLE: Template Variable Access Methods\nDESCRIPTION: Demonstrates different ways to access template variables in PHP code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/themes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Write via array\n$this['foo'] = 'bar';\n\n// Read via array\necho $this['foo'];\n\n// Read-only via object\necho $this->foo;\n```\n\n----------------------------------------\n\nTITLE: Custom App-Level Validation Messages in PHP\nDESCRIPTION: Demonstrates how to override system validation messages at the application level.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'required' => 'Sorry, we need that field (:attribute) you gave!',\n\n    'attributes' => [\n        'email' => 'email address'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Inline Grouped Repeater Configuration\nDESCRIPTION: Example of defining repeater groups inline with textarea and quote field options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n    textarea:\n        name: Textarea\n        description: Basic text field\n        icon: icon-file-text-o\n        fields:\n            text_area:\n                label: Text Content\n                type: textarea\n                size: large\n\n    quote:\n        name: Quote\n        description: Quote item\n        icon: icon-quote-right\n        fields:\n            quote_position:\n                span: auto\n                label: Quote Position\n                type: radio\n                options:\n                    left: Left\n                    center: Center\n                    right: Right\n            quote_content:\n                span: auto\n                label: Details\n                type: textarea\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple File Attachments in PHP\nDESCRIPTION: Defines multiple file attachment relationships on a model using $attachMany.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic $attachMany = [\n    'photos' => 'System\\Models\\File'\n];\n```\n\n----------------------------------------\n\nTITLE: Refreshing Current Page in PHP\nDESCRIPTION: Shows how to refresh the current page using the refresh method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::refresh();\n```\n\n----------------------------------------\n\nTITLE: Searching Related Records in Collections in October CMS\nDESCRIPTION: Example of using the 'searchWhereRelation()' method to search for terms in related records, useful for complex search functionality across relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% set foundPages = pages.searchWhereRelation(searchTerm, 'author', ['title']).get() %}\n```\n\n----------------------------------------\n\nTITLE: Setting Project License Key in October CMS\nDESCRIPTION: Command to set the license key for the current installation\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Customizing Rich Editor Toolbar Buttons in YAML\nDESCRIPTION: Demonstrates how to customize the toolbar buttons displayed in the rich editor. This example shows how to specify a limited set of formatting options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    label: Contents\n    toolbarButtons: bold|italic|underline\n```\n\n----------------------------------------\n\nTITLE: Disabling Secondary Navigation\nDESCRIPTION: Configures a primary navigation item without creating child items, effectively disabling secondary navigation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprimaryNavigation:\n    label: Page\n    icon: icon-magic\n    order: 500\n```\n\n----------------------------------------\n\nTITLE: Page Template with Head Content\nDESCRIPTION: Example page template demonstrating how to inject content into the head placeholder and define page content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/page.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndescription=\"example page\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put head %}\n    <meta name=\"foo\" content=\"bar\">\n{% endput %}\n\n<p>My content.</p>\n```\n\n----------------------------------------\n\nTITLE: Using |default Filter with Method Calls in Twig\nDESCRIPTION: Shows how to use the |default filter when working with expressions that involve method calls on variables. It's important to apply the filter to any variable that might be undefined to prevent errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-default.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable.method(foo|default('bar'))|default('bar') }}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Implementing Behaviors\nDESCRIPTION: Example demonstrating how to dynamically implement behaviors in a class by extending its constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Êâ©Â±ï RainLab.Users ÊéßÂà∂Âô®Ôºå‰ΩøÂÖ∂ÂåÖÂê´ RelationController Ë°å‰∏∫\n */\n\\RainLab\\Users\\Controllers\\Users::extend(function($controller) {\n\n    // Âä®ÊÄÅÂÆûÁé∞ÂàóË°®ÊéßÂà∂Âô®Ë°å‰∏∫\n    $controller->implementClassWith(\\Backend\\Behaviors\\RelationController::class);\n\n    // Âä®ÊÄÅÂ£∞ÊòéË¶Å‰ΩøÁî®ÁöÑ RelationController Ë°å‰∏∫ÁöÑ relationConfig Â±ûÊÄß\n    $controller->addDynamicProperty('relationConfig', '$/myvendor/myplugin/controllers/users/config_relation.yaml');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Twig Tags\nDESCRIPTION: Shows how to use if/else conditional logic within Twig templates to display different content based on conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if stormCloudComing %}\n    Stay inside\n{% else %}\n    Go outside and play\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Translation Syntax\nDESCRIPTION: Demonstrates the shorthand syntax using _ and __ filters as alternatives to trans and trans_choice.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/trans.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'I love programming.'|_ }}\n\n{{ '{1} :value minute ago|[2,*] :value minutes ago'|__(1, { value: 1 }) }}\n```\n\n----------------------------------------\n\nTITLE: Grouping Collection Items with Callback Function in PHP\nDESCRIPTION: Using the groupBy method with a callback function to process each item before determining the group key. This example groups items by the last three characters of the account_id value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$grouped = $collection->groupBy(function ($item, $key) {\n    return substr($item['account_id'], -3);\n});\n\n$grouped->toArray();\n\n/*\n    [\n        'x10' => [\n            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n            ['account_id' => 'account-x10', 'product' => 'Chair'],\n        ],\n        'x11' => [\n            ['account_id' => 'account-x11', 'product' => 'Desk'],\n        ],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Markdown Redirect in October CMS Documentation\nDESCRIPTION: A markdown redirect directive that automatically forwards users from the October CMS 2.0 documentation root to the setup/installation page. This is used to ensure users land on the installation guide when accessing the main documentation page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"setup/installation\" />\n```\n\n----------------------------------------\n\nTITLE: Conditional Page Redirection in Twig\nDESCRIPTION: Demonstrates how to perform a conditional redirect to a 404 error page when a record is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-redirect.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if record.notFound %}\n    {% do redirect('404') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Implementing a Behavior\nDESCRIPTION: Example showing how to implement a behavior dynamically by extending a controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Extend the RainLab.Users controller to include the RelationController behavior too\n */\n\\RainLab\\Users\\Controllers\\Users::extend(function($controller) {\n\n    // Implement the list controller behavior dynamically\n    $controller->implementClassWith(\\Backend\\Behaviors\\RelationController::class);\n\n    // Declare the relationConfig property dynamically for the RelationController behavior to use\n    $controller->addDynamicProperty('relationConfig', '$/myvendor/myplugin/controllers/users/config_relation.yaml');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Specifying Page Number in PHP\nDESCRIPTION: Shows how to specify a specific page number (page 2) when paginating model results with 15 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15, 2);\n```\n\n----------------------------------------\n\nTITLE: Checking View Existence in PHP\nDESCRIPTION: Shows how to check if a view exists using the View::exists method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nif (View::exists('acme.blog::mail.customer')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using Mail::sendTo for Simplified Email Sending\nDESCRIPTION: Examples of using the Mail::sendTo method for simpler email sending with various recipient formats and raw message sending.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Send to address using no name\nMail::sendTo('admin@domain.tld', 'acme.blog::mail.message', $params);\n\n// Send using an object's properties\nMail::sendTo($user, 'acme.blog::mail.message', $params);\n\n// Send to multiple addresses\nMail::sendTo(['admin@domain.tld' => 'Admin Person'], 'acme.blog::mail.message', $params);\n\n// Alternatively send a raw message without parameters\nMail::rawTo('admin@domain.tld', 'Hello friend');\n```\n\n----------------------------------------\n\nTITLE: Accessing Job ID in PHP\nDESCRIPTION: Shows how to access the unique identifier of a job in the queue system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$job->getJobId();\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Options for Set Inspector in PHP for October CMS\nDESCRIPTION: Example showing how to dynamically specify items for a 'set' inspector type by creating a method that retrieves options from a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-set.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getContextOptions()\n{\n    return ContextModel::pluck('name', 'code')->all();\n}\n```\n\n----------------------------------------\n\nTITLE: Plain Text Content Rendering in Twig\nDESCRIPTION: Example of rendering plain text content blocks\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"readme.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Human-Readable Time Difference with carbon() in Twig\nDESCRIPTION: Shows how to use the diffForHumans method with carbon() to display a human-readable time difference in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon(post.published_at).diffForHumans() }}\n```\n\n----------------------------------------\n\nTITLE: Setting Index Length for MySQL/MariaDB Compatibility\nDESCRIPTION: Configuration addition required for older MySQL (pre-5.7.7) or MariaDB (pre-10.2.2) versions to handle index length limitations with utf8mb4 character sets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/database-config.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'mysql' => [\n    // ...\n    'varcharmax' => 191,\n],\n```\n\n----------------------------------------\n\nTITLE: Basic Page Link Creation with Twig\nDESCRIPTION: Demonstrates how to create a basic page link using the |page filter with a page filename.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework Extras in Twig\nDESCRIPTION: Shows how to include the AJAX framework with extras features in a Twig template, enabling loading indicators, validation, and other enhanced functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras %}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Conditions in YAML\nDESCRIPTION: YAML configuration demonstrating custom SQL conditions for age filtering with placeholders for values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-number.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    conditions:\n        greater: age >= :value\n        between: age >= :min and age <= :max\n```\n\n----------------------------------------\n\nTITLE: Create Page Configuration in YAML\nDESCRIPTION: Configuration for the Create page in the form behavior, including title and redirect options after saving a record.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreate:\n    title: New Blog Post\n    redirect: acme/blog/posts/update/:id\n    redirectClose: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Using Phosphor Icons in HTML - October CMS\nDESCRIPTION: Example of how to use a Phosphor icon in HTML. Phosphor Icons provide a flexible collection of icons for everyday use in the administration panel.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/available-icons.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"ph ph-laptop\"></i>\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Polymorphic Relationships in Tag Model\nDESCRIPTION: Shows how to define inverse morphedByMany relationships for posts and videos in a Tag model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nclass Tag extends Model\n{\n    public $morphedByMany = [\n        'posts'  => [\\Acme\\Blog\\Models\\Post::class, 'name' => 'taggable'],\n        'videos' => [\\Acme\\Blog\\Models\\Video::class, 'name' => 'taggable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Comments Relation in YAML\nDESCRIPTION: Configuration example for managing blog post comments using Has Many relationship type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\ncomments:\n    label: Comment\n    manage:\n        form: $/acme/blog/models/comment/fields.yaml\n        list: $/acme/blog/models/comment/columns.yaml\n    view:\n        list: $/acme/blog/models/comment/columns.yaml\n        toolbarButtons: create|delete\n```\n\n----------------------------------------\n\nTITLE: Requiring Another Theme in Composer\nDESCRIPTION: Example of including a dependency on another theme in the composer.json file. This snippet requires version 1.2 or compatible of the acme/vanilla-theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"acme/vanilla-theme\": \"^1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using DataFeed in PHP\nDESCRIPTION: Demonstrates how to combine multiple model classes into a single collection using the DataFeed class, with limit applied.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$feed = new October\\Rain\\Database\\DataFeed;\n$feed->add('user', new User);\n$feed->add('post', Post::where('category_id', 7));\n\n$feed->add('comment', function() {\n    $comment = new Comment;\n    return $comment->where('approved', true);\n});\n\n$results = $feed->limit(10)->get();\n```\n\n----------------------------------------\n\nTITLE: Setting October CMS Project License Key with Artisan Command\nDESCRIPTION: Command to set up the October CMS project license key using the artisan CLI tool, which creates necessary authentication files for Composer.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Theme Version File Structure in YAML\nDESCRIPTION: Example of a version.yaml file that tracks theme versions and their changelog entries, showing the proper format for defining version history.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: Theme initialization\nv1.0.2: Added more features\nv1.0.3: Some features are removed\n```\n\n----------------------------------------\n\nTITLE: Rich Editor Field Configuration in YAML\nDESCRIPTION: YAML configuration for WYSIWYG rich text editor with toolbar customization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    toolbarButtons: bold|italic\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with cURL\nDESCRIPTION: Quick start installation command that uses cURL to download and install the latest copy of October CMS v1.0 (Laravel 5.5).\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s https://octobercms.com/api/installer | php\n```\n\n----------------------------------------\n\nTITLE: Requiring a Theme Dependency in composer.json\nDESCRIPTION: JSON configuration snippet showing how to declare a dependency on another theme package with version constraints in composer.json.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"acme/vanilla-theme\": \"^1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Rich Editor Button in JavaScript\nDESCRIPTION: JavaScript code for registering a custom button in the rich editor toolbar with a callback function to insert custom HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_4\n\nLANGUAGE: js\nCODE:\n```\noc.richEditorRegisterButton('insertCustomThing', {\n    title: 'Insert Something',\n    icon: '<i class=\"icon-star\"></i>',\n    undo: true,\n    focus: true,\n    refreshOnCallback: true,\n    callback: function () {\n        this.html.insert('<strong>My Custom Thing!</strong>');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial in Twig\nDESCRIPTION: A Twig snippet showing how to render a partial named 'mytime' inside a div with the id 'myDiv'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/ajax/update-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div id=\"myDiv\">{% partial 'mytime' %}</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Flash Message Template with Twig\nDESCRIPTION: Demonstrates how to create a custom partial for flash messages using Bootstrap-style alerts within a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <div class=\"alert alert-{{ type }}\">\n        {{ message }}\n    </div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Making Columns Unclickable\nDESCRIPTION: Demonstrates how to make specific records completely unclickable by setting the clickable flag to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\npublic function listOverrideRecordUrl($record, $definition = null)\n{\n    if ($record->is_disabled) {\n        return ['clickable' => false];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Response Object in PHP\nDESCRIPTION: Demonstrates creating a custom Response object for more robust solutions. This example creates a 404 Not Found response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = 'Page not found';\n$statusCode = 404;\nreturn Response::make($contents, $statusCode);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Messages in PHP for OctoberCMS\nDESCRIPTION: Example of a validation.php file for custom validation messages in OctoberCMS. This file structure allows specifying custom validation error messages that can be localized.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/localization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'required' => 'We need to know your xxx!',\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Creating a Report Widget in OctoberCMS\nDESCRIPTION: The create:reportwidget command generates a back-end report widget, view and basic asset files. It requires two parameters: the author and plugin name, and the report widget class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:reportwidget Acme.Blog TopPosts\n```\n\n----------------------------------------\n\nTITLE: Complete Vanilla JS Control Example\nDESCRIPTION: A complete example showing a form control that handles user input and updates the display when a button is clicked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"hello-world\">\n    <input type=\"text\" class=\"name\" />\n\n    <button class=\"greet\">\n        Greet\n    </button>\n\n    <span class=\"output\">\n    </span>\n</div>\n\n<script>\noc.registerControl('hello-world', class extends oc.ControlBase {\n    init() {\n        this.$name = this.element.querySelector('input.name');\n        this.$output = this.element.querySelector('span.output');\n    }\n\n    connect() {\n        this.listen('click', 'button.greet', this.onGreet);\n    }\n\n    onGreet() {\n        this.$output.textContent = `Hello, ${this.$name.value}!`;\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Plugin Initialization File\nDESCRIPTION: Example of an init.php file containing custom initialization logic for request handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/plugins.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nApp::before({\n    // Logic when the request starts, after routes are registered\n});\n\nApp::after({\n    // Logic the request has finished, after the response is sent\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Markdown Editor Field in OctoberCMS\nDESCRIPTION: This YAML snippet demonstrates how to set up a Markdown editor field in OctoberCMS. It creates a field named 'md_content' with the type 'markdown' and sets its size to 'huge'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmd_content:\n    type: markdown\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Dumping Variables and Ending Execution in PHP\nDESCRIPTION: The dd function dumps the given variable and ends execution of the script.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_31\n\nLANGUAGE: PHP\nCODE:\n```\ndd($value);\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Confirmation Dialog in HTML\nDESCRIPTION: Button that triggers a confirmation dialog before sending an AJAX request to delete something.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form ... >\n    ...\n    <button data-request=\"onDelete\" data-request-confirm=\"Are you sure?\">Delete</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Column in YAML\nDESCRIPTION: Demonstrates how to configure a partial column in a list definition YAML file. The 'path' property specifies the partial view file to use for rendering the column content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: content_column\n```\n\n----------------------------------------\n\nTITLE: Using |app filter for static URLs in Twig\nDESCRIPTION: Illustrates how to use the |app filter to generate absolute URLs for static pages or content. This example creates a link to an 'About Us' page with a full URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/app.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ '/about-us'|app }}\">\n    About Us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Model Scope in PHP\nDESCRIPTION: Example of a PHP model scope method that applies custom filtering constraints when a filter is used. This method receives the query builder and scope definition as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter-scopes.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeApplyMyFilter($query, $scope)\n{\n    return $query->whereIn('my_filter_attribute', (array) $scope->value);\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Column Selection in YAML\nDESCRIPTION: Shows how to retrieve a column value from a nested data structure like a model relationship or jsonable array in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent[title]:\n    name: Title\n    sortable: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Editor Size in YAML\nDESCRIPTION: Shows how to specify the size of the richeditor field using the 'size' property. This can be used to adjust the visual size of the editor in the form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    label: Contents\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Finder Widget in YAML\nDESCRIPTION: This snippet demonstrates how to configure a Record Finder widget in YAML. It shows various options like label, type, list configuration, records per page, title, prompt, and name/description sources.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    list: ~/plugins/rainlab/user/models/user/columns.yaml\n    recordsPerPage: 10\n    title: Find Record\n    prompt: Click the Find button to find a user\n    nameFrom: name\n    descriptionFrom: email\n```\n\n----------------------------------------\n\nTITLE: Twig Conditional Redirect\nDESCRIPTION: Twig markup for conditional page redirection based on a success flag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if success %}\n    {% do redirect('/signup-complete') %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Date Picker with Disabled Days Configuration in YAML\nDESCRIPTION: Demonstrates how to disable specific days (weekends and a particular date) in a date picker field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datepicker.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbooking_date:\n    label: Booking Date\n    type: datepicker\n    mode: date\n    disableDays:\n        - 0 # Sundays\n        - 6 # Saturdays\n        - \"2023-08-10\" # Specific date\n```\n\n----------------------------------------\n\nTITLE: Custom Error Page with Message in Twig\nDESCRIPTION: Illustrates how to display a custom error page with a specific HTTP code and optional message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-abort.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(403, 'Access Denied') %}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from Layout and Page Combination\nDESCRIPTION: The final HTML output that results from combining the layout and page templates. This shows how the {% page %} tag is replaced with the page content and how the placeholder content is injected into the head section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/page.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <meta name=\"foo\" content=\"bar\">\n    </head>\n    <body>\n        <p>My content.</p>\n        ...\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Description\nDESCRIPTION: Example of a layout template that includes a configuration section with a description parameter\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\ndescription = \"Basic layout example\"\n==\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Editor Field in October CMS\nDESCRIPTION: Demonstrates how to set up a rich editor (WYSIWYG) field in an October CMS form. It shows options for customizing toolbar buttons and field size.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    toolbarButtons: bold|italic\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Messages to Twig Variables in OctoberCMS\nDESCRIPTION: These examples show how to use the flash() function to set flash messages to Twig variables. This allows for manipulation of the messages before display. It includes examples of getting all messages, messages of a specific type, and all messages grouped by type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/flash.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set messages = flash() %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set successMessage = flash('success') %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set allMessages = flash('all') %}\n```\n\n----------------------------------------\n\nTITLE: Checking Site Availability in PHP\nDESCRIPTION: Example of checking if any enabled site is available using the hasAnySite method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Site::hasAnySite()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ImportExportController in PHP\nDESCRIPTION: Shows how to implement the ImportExportController behavior in a controller class. The behavior is added to the $implement property, and the configuration file is specified in the $importExportConfig property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Shop\\Controllers;\n\nclass Products extends Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ImportExportController::class\n    ];\n\n    public $importExportConfig = 'config_import_export.yaml';\n\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Partial Example\nDESCRIPTION: Demonstrates the simplest possible partial implementation in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination with Model and Where Clause in PHP\nDESCRIPTION: Shows how to use the simplePaginate method with models after setting query constraints. This provides Next/Previous links only for more efficient pagination.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Creating File Attachment from Input in PHP\nDESCRIPTION: Demonstrates how to create a file attachment directly from user input in PHP using the Input::file method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar = Input::file('file_input');\n```\n\n----------------------------------------\n\nTITLE: Float Validation Configuration\nDESCRIPTION: Example of implementing float validation for numeric values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector-types.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'amount' => [\n            'title' => 'Amount',\n            'type' => 'string',\n            'validation' => [\n                'float' => [\n                    'message' => 'The Amount field should contain a positive floating point value'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Model Relationships in PHP\nDESCRIPTION: Demonstrates eager loading relationships for all models in a collection using the load method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users->load('comments', 'posts');\n\n$users->load('comments.author');\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Status in Twig Template\nDESCRIPTION: A Twig template example that demonstrates how to conditionally display content based on the current environment configuration. This snippet shows how to check if the application is running in a test environment and display a banner accordingly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-environment.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.environment == 'test' %}\n\n    <div class=\"banner\">Test Environment</div>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to Named Routes in October CMS\nDESCRIPTION: Examples of generating URLs or redirects to named routes using the Url::route method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$url = Url::route('profile');\n\n$redirect = Response::redirect()->route('profile');\n```\n\n----------------------------------------\n\nTITLE: Importing Twig Macros from Same Template\nDESCRIPTION: Demonstrates how to import macros defined in the same template using the _self variable. This makes the macro functions available through the assigned variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% import _self as form %}\n```\n\n----------------------------------------\n\nTITLE: Defining Numeric Options Array in YAML\nDESCRIPTION: Shows how to define options using integer keys with their corresponding labels in YAML format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    1: Simple\n    2: Complex\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal from Custom Rich Editor Button in JavaScript\nDESCRIPTION: JavaScript code showing how to trigger a modal window from a custom rich editor button using oc.popup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\noc.popup({\n    handler: 'onLoadPopup'\n});\n```\n\n----------------------------------------\n\nTITLE: Redirecting with a Specific Status Code in Twig\nDESCRIPTION: This example shows how to include a redirect status code as the second or third argument. In this case, a permanent redirect (301) is used instead of the default temporary redirect (302).\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/redirect.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('https://octobercms.com', 301) %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Form Opening Tag in Twig\nDESCRIPTION: Shows how to create an AJAX-enabled form using the form_ajax() helper with a handler name parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_ajax('onUpdate') }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content - OctoberCMS Twig\nDESCRIPTION: Example showing how to render a Markdown content block using the content tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'my-markdown.md' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Services in October CMS\nDESCRIPTION: PHP configuration code for the Mailgun services in the config/services.php file. Includes domain, secret key, and API endpoint settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'mailgun' => [\n    'domain' => 'your-mailgun-domain',\n    'secret' => 'your-mailgun-key',\n    'endpoint' => 'api.mailgun.net', // api.eu.mailgun.net for EU\n],\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Functions in PHP and Twig Sections\nDESCRIPTION: Shows how to define a function in the PHP section and call it from both PHP and Twig sections of a CMS template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/themes.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['foo'] = $this->doSomething();\n}\n\nfunction doSomething()\n{\n    return 'bar';\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ this.doSomething() }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Using array_pluck Helper Function in PHP\nDESCRIPTION: The array_pluck function extracts a list of values from an array of nested items, using dot notation to access nested values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    ['developer' => ['name' => 'Brian']],\n    ['developer' => ['name' => 'Stewie']]\n];\n\n$array = array_pluck($array, 'developer.name');\n\n// ['Brian', 'Stewie'];\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Field in YAML\nDESCRIPTION: Defines a single line text input field in a form using YAML configuration. The 'type' property is set to 'text', which is the default if not specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblog_title:\n    label: Blog Title\n    type: text\n```\n\n----------------------------------------\n\nTITLE: Defining a General Widget Class in PHP\nDESCRIPTION: Example of defining a general widget class that extends Backend\\Classes\\WidgetBase. It includes a defaultAlias property and a render method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Backend\\Widgets;\n\nuse Backend\\Classes\\WidgetBase;\n\nclass Lists extends WidgetBase\n{\n    /**\n     * @var string A unique alias to identify this widget.\n     */\n    protected $defaultAlias = 'list';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Error Message Container\nDESCRIPTION: Simple HTML element with the data-validate-error attribute that will display the first validation error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div data-validate-error></div>\n```\n\n----------------------------------------\n\nTITLE: Including File Uploads in AJAX Request in HTML\nDESCRIPTION: This snippet illustrates how to include file uploads with an AJAX request using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\" data-request-files>\n    <input type=\"file\" name=\"photo\" accept=\"image/*\" />\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Fields in YAML for October CMS\nDESCRIPTION: Examples of defining dropdown fields in YAML configuration with different options formats, including value-only and key-value pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n    default: published\n    options:\n        draft\n        published\n        archived\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n    default: published\n    options:\n        draft: Draft\n        published: Published\n        archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Markup for Report Widget in October CMS\nDESCRIPTION: This HTML snippet demonstrates how to structure the content of a report widget partial in October CMS. It includes a title and a pie chart using the chart-pie control.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/report-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Traffic sources</h3>\n\n    <div\n        class=\"control-chart\"\n        data-control=\"chart-pie\"\n        data-size=\"200\"\n        data-center-text=\"180\">\n        <ul>\n            <li>Direct <span>1000</span></li>\n            <li>Social networks <span>800</span></li>\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Parameter Substitution in Twig Translation\nDESCRIPTION: Shows how to translate a string with parameter substitution by passing an object with named parameters prefixed with ':'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/trans.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ ':name loves programming.'|trans({ name: 'Jeff' }) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page URLs in PHP Components\nDESCRIPTION: Demonstrates how to generate page URLs within PHP components using the pageUrl() method and passing them to the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n==\n<?php\nfunction onStart() {\n    $this['newsPage'] = $this->pageUrl('blog/overview');\n}\n?>\n==\n{{ newsPage }}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Checkbox Scope Filter in YAML for OctoberCMS\nDESCRIPTION: This example shows how to set a default value for a checkbox scope filter. By setting the 'default' property to 1, the filter will be checked by default when the list view loads.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nis_published:\n    label: Hide Published\n    type: checkbox\n    default: 1\n```\n\n----------------------------------------\n\nTITLE: Using Unqualified Path for Partial Column in YAML\nDESCRIPTION: Shows how to use an unqualified file name as the 'path' for a partial column. This approach looks for the partial file in the model or controller directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: column_for_content\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Dropdown Options in PHP\nDESCRIPTION: Demonstrates how to define properties with a dynamic dropdown that fetches options from a method instead of using static options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dropdown.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title' => 'Country',\n            'type' => 'dropdown',\n            'default' => 'us'\n        ]\n    ];\n}\n\npublic function getCountryOptions()\n{\n    return ['us' => 'United states', 'ca' => 'Canada'];\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional AJAX Loading with Auto-Submit in Twig\nDESCRIPTION: Twig markup that implements conditional content loading with auto-submit functionality for lazy loading results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/polling.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if results %}\n    <h3>Found results</h3>\n    {{ d(results) }}\n{% else %}\n    <h3>Loading the results...</h3>\n    <div\n        data-request=\"onFetchResults\"\n        data-request-update=\"{ _self: true }\"\n        data-auto-submit>\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Page URL in PHP\nDESCRIPTION: Demonstrates how to get the URL of the current page in PHP using the pageUrl() method with an empty string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n==\n<?php\nfunction onStart() {\n    $this['currentUrl'] = $this->pageUrl('');\n}\n?>\n==\n{{ currentUrl }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers\nDESCRIPTION: Demonstrates how to retrieve values from the request headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::header('Content-Type');\n```\n\n----------------------------------------\n\nTITLE: Piping Collection Through Callback in PHP\nDESCRIPTION: The pipe method passes the collection to a given callback and returns the result. It allows for custom operations to be performed on the entire collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$piped = $collection->pipe(function ($collection) {\n    return $collection->sum();\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies From The IoC Container in PHP\nDESCRIPTION: Shows how to resolve a previously bound dependency from the IoC container using the App::make method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = App::make('foo');\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Version of an October CMS Plugin\nDESCRIPTION: Command to install a specific version of a plugin using the --want option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --want=1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Field in October CMS\nDESCRIPTION: Shows the configuration for a sensitive field in October CMS, used for handling sensitive information like API keys. It includes options for allowing copying and hiding on tab change.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\napi_secret:\n    type: sensitive\n    allowCopy: false\n    hideOnTabChange: true\n```\n\n----------------------------------------\n\nTITLE: Detecting Cache-Loaded Pages with JavaScript\nDESCRIPTION: This JavaScript code checks if the current page was loaded from the cache by detecting the data-turbo-preview attribute on the HTML element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nif (document.documentElement.hasAttribute('data-turbo-preview')) {\n    // Page shown is loaded from cache\n}\n```\n\n----------------------------------------\n\nTITLE: Updating S3 Configuration in OctoberCMS Filesystem\nDESCRIPTION: This PHP code snippet shows how to configure the S3 disk in the OctoberCMS filesystem configuration. It includes settings for the API key, secret, region, and bucket name required for S3 integration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'disks' => [\n    // ...\n    's3' => [\n        'driver' => 's3',\n        'key'    => 'XXXXXXXXXXXXXXXXXXXX',\n        'secret' => 'xxxXxXX+XxxxxXXxXxxxxxxXxxXXXXXXXxxxX9Xx',\n        'region' => 'us-west-2',\n        'bucket' => 'my-bucket'\n    ],\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Using the remember Method with LazyCollection in PHP\nDESCRIPTION: This example demonstrates the remember method which returns a new lazy collection that remembers values already enumerated and won't retrieve them again when the collection is enumerated again, improving performance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_87\n\nLANGUAGE: php\nCODE:\n```\n$users = User::cursor()->remember();\n\n// No query has been executed yet...\n\n$users->take(5)->all();\n\n// The query has been executed and the first 5 users have been hydrated from the database...\n\n$users->take(20)->all();\n\n// First 5 users come from the collection's cache... The rest are hydrated from the database...\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleTree Trait in PHP\nDESCRIPTION: This PHP code snippet demonstrates the use of the SimpleTree trait in a model class to enable basic parent-child relationships for database records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/reorder.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SimpleTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Link Resolution with Site URLs\nDESCRIPTION: Demonstrates using the link() function with sites option to get URLs for different sites.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/link.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set resolved = link('october://...', { sites: true }) %}\n\n{% for site in resolved.sites %}\n    {{ site.url }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Adding SEO-friendly Meta Description in OctoberCMS Twig\nDESCRIPTION: Illustrates how to set a meta description using the this.page.meta_description property, which is usually more detailed for SEO purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.page.meta_description }}\">\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw Data in Email Templates\nDESCRIPTION: Example of embedding raw data as an image in an email template using the message.embedData method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image from raw data:\n\n    <img src=\"{{ message.embedData(data, name) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Registering Filter Widgets in PHP\nDESCRIPTION: Method to register filter widgets in the plugin registration file, mapping widget classes to their short codes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerFilterWidgets()\n{\n    return [\n        \\Backend\\FilterWidgets\\Discount::class => 'discount',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Month Dropdowns\nDESCRIPTION: Shows how to create a month dropdown with selected value and empty option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectMonth('month', 2, ['emptyOption' => 'ÈÄâÊã©Êúà‰ªΩ...']) ?>\n```\n\n----------------------------------------\n\nTITLE: Overriding Validation in PHP Models\nDESCRIPTION: Demonstrates how to use the forceSave method to save a model without validation in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n\n// Creates a user without validation\n$user->forceSave();\n```\n\n----------------------------------------\n\nTITLE: Using Named Error Bags in PHP\nDESCRIPTION: Demonstrates passing a named error bag when redirecting with validation errors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn Redirect::to('register')->withErrors($validator, 'login');\n```\n\n----------------------------------------\n\nTITLE: Model Accessor for Display Value Customization\nDESCRIPTION: Shows a PHP model accessor that can be used with the displayFrom property to modify how a value is displayed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusLabelAttribute()\n{\n    return title_case($this->status_code);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Ready Promise in Turbo Router with JavaScript\nDESCRIPTION: Demonstrates how to use the 'oc.pageReady' function to execute code when the page and scripts are fully loaded, returning a promise.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\noc.pageReady().then(() => {\n    // Page has finished loading scripts\n});\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output from String List\nDESCRIPTION: This snippet shows the JSON output format generated by the stringList inspector type. The output is an array of string values, each representing a line from the text input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-stringlist.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"items\": [\"String 1\", \"String 2\", \"String 3\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Toolbar Buttons Partial in HTML\nDESCRIPTION: Example of a toolbar partial file containing a button to create a new post, typically used with the List behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"toolbar\">\n    <a\n        href=\"<?= Backend::url('acme/blog/posts/create') ?>\"\n        class=\"btn btn-primary oc-icon-plus\">New Post</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Word-Limited Summary Column with Custom Suffix in YAML\nDESCRIPTION: Sets up a summary column that limits content to 10 words and uses custom end characters (...) as a suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-summary.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n    limitWords: 10\n    endChars: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Grouping Query Results in PHP\nDESCRIPTION: Demonstrates how to use groupBy and having methods to group query results and filter grouped results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->groupBy('account_id')\n    ->having('account_id', '>', 100)\n    ->get();\n\n$users = Db::table('users')\n    ->groupBy('first_name', 'status')\n    ->having('account_id', '>', 100)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Navigation Items\nDESCRIPTION: Configuration for creating a primary navigation item with a label, icon, and order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprimaryNavigation:\n    label: Blog\n    icon: icon-copy\n    order: 500\n\nnavigation:\n    label: Main Menu Item\n```\n\n----------------------------------------\n\nTITLE: Using array_pluck() Function in PHP\nDESCRIPTION: The array_pluck method extracts a list of key/value pairs from a multi-dimensional array. It's useful for extracting a specific property from each item in a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    ['developer' => ['name' => 'Brian']],\n    ['developer' => ['name' => 'Stewie']]\n];\n\n$array = array_pluck($array, 'developer.name');\n\n// ['Brian', 'Stewie'];\n```\n\n----------------------------------------\n\nTITLE: Repeater Field Configuration in YAML\nDESCRIPTION: YAML configuration for repeater field that renders repeating form field sets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    form:\n        fields:\n            added_at:\n                label: Date added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field with Comment in YAML\nDESCRIPTION: Configuration of a checkbox field that includes a label and explanatory comment text below the checkbox.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkbox.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nis_active:\n    type: checkbox\n    label: Active\n    comment: Check this box to make the record active.\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Driver in October CMS\nDESCRIPTION: Configuration settings required for the Amazon SES mail driver in the services.php file, including key, secret, and region information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => 'your-ses-key',\n    'secret' => 'your-ses-secret',\n    'region' => 'ses-region',  // e.g. us-east-1\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Form Field Values in PHP Import Model\nDESCRIPTION: Demonstrates how to access the value of a custom form field within the importData method of an import model. This allows for conditional logic based on user input during the import process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    public function importData($results, $sessionKey = null)\n    {\n        if ($this->auto_create_lists) {\n            // Do something\n        }\n\n        [...]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Dispatched Browser Events\nDESCRIPTION: Demonstrates how to listen for custom events dispatched from AJAX handlers using addEventListener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('app:update-profile', function (event) {\n    alert('Profile updated with name: ' + event.detail.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Settings in Twig Templates\nDESCRIPTION: Example of how to access a custom theme setting in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Welcome to {{ this.theme.site_name }}!</h1>\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Structure Option in YAML\nDESCRIPTION: Configuration for a recordfinder field that explicitly disables the structure mode. By default, structure mode is enabled when a model structure is detected.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    structure: false\n```\n\n----------------------------------------\n\nTITLE: Combining CSS Files with |theme Filter in Twig\nDESCRIPTION: Demonstrates how to use the |theme filter to combine multiple CSS files into a single URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-theme.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<link href=\"{{ [\n    'assets/css/styles1.css',\n    'assets/css/styles2.css'\n]|theme }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Asset Injection in October CMS Component\nDESCRIPTION: Demonstrates how to inject a JavaScript file into a page using the onRun method of a component. The path begins with a forward slash, making it relative to the website root.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Using env() Environment Helper in PHP\nDESCRIPTION: The env function gets the value of an environment variable or returns a default value if the variable doesn't exist. This allows configuration to be set via environment variables for better security and flexibility.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$env = env('APP_ENV');\n\n// Return a default value if the variable doesn't exist...\n$env = env('APP_ENV', 'production');\n```\n\n----------------------------------------\n\nTITLE: HTML output from |md filter conversion\nDESCRIPTION: This snippet shows the resulting HTML output after applying the |md filter to Markdown syntax. It demonstrates how the Markdown bold syntax is converted to HTML strong tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-md.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<strong>Text</strong> is bold.\n```\n\n----------------------------------------\n\nTITLE: ViewBag Component Configuration\nDESCRIPTION: Shows how to use the special ViewBag component to define ad hoc properties accessible in the markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"About\"\nurl = \"/about.html\"\nlayout = \"default\"\n\n[viewBag]\nactiveMenu = \"about\"\n==\n\n<p>Page content...</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Suffix with html_limit()\nDESCRIPTION: Demonstrates adding a custom suffix to truncated HTML content using the third parameter of html_limit(). By default, the suffix is '...'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Post content...</p>', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Replacing Placeholder Content in Twig\nDESCRIPTION: Demonstrates how to replace existing placeholder content using the 'replace' attribute with the {% put %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put name replace %}\n    <p>Replace all the content inside with this</p>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Checkbox List in YAML for October CMS\nDESCRIPTION: Shows how to set a default value for a checkbox list field. The 'default' property is used to preselect an option when creating new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkboxlist.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    default: open_account\n```\n\n----------------------------------------\n\nTITLE: Detecting Form-Specific AJAX Requests with CSS\nDESCRIPTION: Demonstrates how to detect when a form is submitting an AJAX request using CSS selectors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nform[data-ajax-progress] {\n    /* The form is loading */\n}\n```\n\n----------------------------------------\n\nTITLE: Mixin Reference in YAML\nDESCRIPTION: Example of referencing a blueprint mixin using UUID.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_blog_content:\n    source: edcd102e-0525-4e4d-b07e-633ae6c18db6\n    type: mixin\n```\n\n----------------------------------------\n\nTITLE: Finding Last Element with Condition Using last() in PHP\nDESCRIPTION: The last method returns the last element in the collection that passes a given truth test. This allows filtering while traversing the collection from start to end.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4])->last(function ($key, $value) {\n    return $value < 3;\n});\n\n// 2\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Relationship in Comment Model - PHP\nDESCRIPTION: Shows how to define a belongsTo relationship in a Comment model to access its parent Post model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Interface Messages in YAML\nDESCRIPTION: This example shows how to override default interface messages using the 'customMessages' property in a blueprint.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncustomMessages:\n    buttonCreate: Create New Event\n```\n\n----------------------------------------\n\nTITLE: Displaying Filter Widget State (HTML/PHP)\nDESCRIPTION: HTML/PHP partial for displaying the filter widget state, including the label and current value indicator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    class=\"filter-scope <?= $value ? 'active' : '' ?>\"\n    data-scope-name=\"<?= $name ?>\"\n>\n    <span class=\"filter-label\"><?= e(trans($scope->label)) ?></span>\n    <?php if ($value): ?>\n        <span class=\"filter-setting\">1</span>\n    <?php endif ?>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML using |md filter in Twig\nDESCRIPTION: This snippet demonstrates how to use the |md filter in a Twig template to convert Markdown syntax to HTML. It shows a simple example of bolding text.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-md.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\n----------------------------------------\n\nTITLE: Controlling Progress Bar with JavaScript\nDESCRIPTION: Demonstrates how to manually show and hide the progress bar using JavaScript functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\noc.progressBar.show();\n\noc.progressBar.hide();\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hint Field in YAML for October CMS Forms\nDESCRIPTION: This snippet shows how to define a basic hint field in a YAML configuration file for October CMS forms. It specifies the type as 'hint' and provides a path to the content field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-hint.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_hint1:\n    type: hint\n    path: content_field\n```\n\n----------------------------------------\n\nTITLE: Using Custom Twig Filter\nDESCRIPTION: Example of using a custom Twig filter in a template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'my text'|uppercase }}\n```\n\n----------------------------------------\n\nTITLE: Listing Git Tags for Version Management\nDESCRIPTION: Command to list existing Git tags for your package. Tags are used by Composer to determine the available versions of your package.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag\nv1.0\nv2.0\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Observable Control in JavaScript\nDESCRIPTION: Shows how to register a control with a unique name that extends the oc.ControlBase class, which is the foundation for creating observable controls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noc.registerControl('hello', class extends oc.ControlBase {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Properties with Inspector Configuration\nDESCRIPTION: PHP method that defines configurable properties for a report widget using the inspector. Properties include a title field and days selector with validation rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/report-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'title' => [\n            'title' => 'Widget title',\n            'default' => 'Top Pages',\n            'type' => 'string',\n            'validation' => [\n                'required' => [\n                    'message' => 'The Widget Title is required.'\n                ],\n            ]\n        ],\n        'days' => [\n            'title' => 'Number of days to display data for',\n            'default' => '7',\n            'type' => 'string',\n            'validation' => [\n                'regex' => [\n                    'message' => 'The days property can contain only numeric symbols.',\n                    'pattern' => '^[0-9]+$'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Format Options in YAML\nDESCRIPTION: Shows how to override default format options for import/export operations. In this example, it sets the file format to JSON.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultFormatOptions:\n    fileFormat: json\n```\n\n----------------------------------------\n\nTITLE: Disabling Timezone Conversion for DateTime Column in October CMS\nDESCRIPTION: This snippet shows how to disable automatic timezone conversion for a datetime column in October CMS using the useTimezone option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    useTimezone: false\n```\n\n----------------------------------------\n\nTITLE: Accessing Layout Description in Twig\nDESCRIPTION: Demonstrates how to access the layout description property defined in the configuration and use it in a meta description tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.layout.description }}\">\n```\n\n----------------------------------------\n\nTITLE: HTML Control with Child Elements\nDESCRIPTION: Shows how to structure HTML with child elements that will be manipulated by the control class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"hello\">\n    <input class=\"name\" disabled />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Phosphor Icons in YAML Definition - October CMS\nDESCRIPTION: Example of how to define a Phosphor icon in YAML configuration. When used as an icon definition, both the 'ph' class and 'ph-' prefix must be included.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/available-icons.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nicon: ph ph-laptop\n```\n\n----------------------------------------\n\nTITLE: File Upload Form Configuration\nDESCRIPTION: Demonstrates how to configure a form for file uploads.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'files' => true])\n```\n\n----------------------------------------\n\nTITLE: Number Field with Min/Max Constraints\nDESCRIPTION: Configuration of a number field with minimum and maximum value constraints, limiting input between 1 and 100.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-number.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    min: 1\n    max: 100\n```\n\n----------------------------------------\n\nTITLE: Passing Theme Data to CSS Variables in HTML\nDESCRIPTION: Example of a CMS partial that defines CSS custom properties using theme settings, allowing dynamic theme values to be used in stylesheets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    :root {\n        --my-color: {{ this.theme.link_color }};\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Using |default Filter with Method Calls in Twig\nDESCRIPTION: Shows how to use the |default filter when working with expressions that involve method calls on variables. It emphasizes the importance of using |default for each part of the expression that could potentially be undefined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/default.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable.method(foo|default('bar'))|default('bar') }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Modal Container with Loading State in HTML\nDESCRIPTION: This snippet defines a reusable modal container with two dialog elements - one for the actual content and another for the loading state. The container is designed to work with dynamic content loaded via AJAX requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/modals.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal\" id=\"siteModal\">\n    <div class=\"modal-dialog modal-dialog-centered\" id=\"siteModalContent\">\n        <!-- Partial Contents Will Go Here -->\n    </div>\n\n    <div class=\"modal-dialog modal-dialog-centered modal-loading\">\n        <div class=\"spinner-border text-light mx-auto\"></div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Model Scope Configuration in YAML\nDESCRIPTION: YAML configuration for implementing a custom model scope filter named textFilter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-text.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n    modelScope: textFilter\n```\n\n----------------------------------------\n\nTITLE: Basic String Response in CMS Method\nDESCRIPTION: Shows how to return a simple string response from a CMS page, layout or component method, which will halt the process and override default behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onStart()\n{\n    return 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial in AJAX Handler Response\nDESCRIPTION: Example showing how to return a rendered component partial as part of an AJAX handler response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nfunction onGetTemplate()\n{\n    return ['#someDiv' => $this->renderPartial('@component-partial.htm')];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Location Mixin in YAML for October CMS\nDESCRIPTION: This snippet demonstrates how to create a Location mixin with Country and State fields. It includes the handle, type, name, and field definitions for the mixin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Fields\\Location\ntype: mixin\nname: Location\n\nfields:\n    country_code:\n        label: Country\n        type: text\n\n    state_code:\n        label: State\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Limiting HTML Content with Custom Suffix\nDESCRIPTION: Demonstrates limiting HTML content length with a custom suffix instead of the default ellipsis.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Post content...</p>', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Using shuffle() Method in a Foreach Loop\nDESCRIPTION: Demonstration of using the shuffle() method with a collection inside a foreach loop to iterate through shuffled items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for fruit in collect(['apple', 'banana', 'orange']).shuffle() %}\n    {{ fruit }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Disabled Days Configuration in YAML\nDESCRIPTION: Shows how to use a PHP function to dynamically set disabled days for a date picker field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datepicker.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbooking_date:\n    type: datepicker\n    disableDays: App\\Classes\\BookingManager::getDisabledBookingDates\n```\n\n----------------------------------------\n\nTITLE: Defining Filter Scope in Content Field Class\nDESCRIPTION: Implementation of the defineFilterScope method to specify how the content field should appear in a filter. It uses the defineScope method to create the scope.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function defineFilterScope(FilterElement $filter, $context = null)\n{\n    $filter->defineScope($this->fieldName, $this->label)->displayAs('switch');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Report Widgets in PHP\nDESCRIPTION: Example of registering report widgets in a plugin registration class by overriding the registerReportWidgets method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficOverview::class => [\n            'label' => 'Ë∞∑Ê≠åÊµÅÈáèÂàÜÊûêÊ¶ÇËßà',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanalytics.widgets.traffic_overview',\n            ],\n        ],\n        \\RainLab\\GoogleAnalytics\\ReportWidgets\\TrafficSources::class => [\n            'label' => 'Ë∞∑Ê≠åÊµÅÈáèÂàÜÊûêÊù•Ê∫ê',\n            'context' => 'dashboard',\n            'permissions' => [\n                'rainlab.googleanaltyics.widgets.traffic_sources',\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Title for SEO in Twig\nDESCRIPTION: Shows how to use the meta_title field for SEO purposes in the page title.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ this.page.meta_title }}</title>\n```\n\n----------------------------------------\n\nTITLE: Using the reduce() Method in PHP Collections\nDESCRIPTION: The reduce method reduces the collection to a single value by iteratively applying a callback function. The result of each iteration is passed to the next as the carry parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$total = $collection->reduce(function ($carry, $item) {\n    return $carry + $item;\n});\n\n// 6\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection->reduce(function ($carry, $item) {\n    return $carry + $item;\n}, 4);\n\n// 10\n```\n\n----------------------------------------\n\nTITLE: Control Configuration Example\nDESCRIPTION: Example of accessing control configuration from data attributes via this.config property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    init() {\n        this.favoriteColor = this.config.favoriteColor || 'green';\n    }\n\n    connect() {\n        console.log(`Favorite color? ${this.favoriteColor}!`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Column URL in PHP\nDESCRIPTION: This PHP code shows how to override the click action for a column record by implementing the listOverrideRecordUrl method in the controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\npublic function listOverrideRecordUrl($record, $definition = null)\n{\n    if ($record->is_active) {\n        return \"acme/test/services/preview/{$record->id}\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Forgetting Session Data in PHP\nDESCRIPTION: Demonstrates how to retrieve a value from the session and delete it in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::pull('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Schema for Duplicate Relations\nDESCRIPTION: Shows the database schema for allowing duplicate relations with an incrementing primary key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('role_user', function($table) {\n    $table->increments('id');\n    $table->integer('user_id')->unsigned();\n    $table->integer('role_id')->unsigned();\n});\n```\n\n----------------------------------------\n\nTITLE: Using public_path() Helper in PHP\nDESCRIPTION: The public_path function returns the fully qualified path to the public directory. It takes no parameters and returns a string path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$path = public_path();\n```\n\n----------------------------------------\n\nTITLE: Configuring Export with Multiple List Definitions in YAML\nDESCRIPTION: Demonstrates how to specify a particular list definition for export when using multiple list definitions. This configuration also sets the output file name for the exported data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList: orders\n    fileName: orders.csv\n```\n\n----------------------------------------\n\nTITLE: Rendering Snippets with Twig Filter\nDESCRIPTION: Demonstrates how to use the |content Twig filter to process and render snippets in page content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ blog_html|content }}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Validation Rules in PHP\nDESCRIPTION: Shows how to register a custom validation rule globally in the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function register()\n{\n    $this->registerValidationRule('uppercase', UppercaseRule::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Model-Based Group Filter Configuration in YAML\nDESCRIPTION: Demonstrates how to configure a basic group filter scope using a related model with nameFrom and modelClass properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n```\n\n----------------------------------------\n\nTITLE: Using snake_case() String Helper in PHP\nDESCRIPTION: The snake_case function converts the given string to snake_case format. It takes a string parameter and returns the transformed string with underscores between words.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$snake = snake_case('fooBar');\n\n// foo_bar\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in PHP Model\nDESCRIPTION: Example of setting the $dateFormat property to customize how dates are stored in the database and serialized to arrays or JSON.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * The storage format of the model's date columns.\n     *\n     * @var string\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Page Configuration with Layout Reference\nDESCRIPTION: Shows how to reference a layout in a page's configuration section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/layouts.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nurl = \"/\"\nlayout = \"default\"\n==\n<p>Hello, world!</p>\n```\n\n----------------------------------------\n\nTITLE: Invoice Relationship Model Definition in PHP\nDESCRIPTION: Example of defining a hasMany relationship in an Invoice model class\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Invoice\n{\n    public $hasMany = [\n        'items' => \\Acme\\Pay\\Models\\InvoiceItem::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Model Scopes to Relation Field in YAML\nDESCRIPTION: Shows how to use model scopes to filter results in a relation field. This example uses the 'withTrashed' scope.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    modelScope: withTrashed\n```\n\n----------------------------------------\n\nTITLE: Displaying Related Record Count\nDESCRIPTION: Shows how to display the number of related records using the relationCount property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nusers_count:\n    label: Users\n    type: number\n    relation: users\n    relationCount: true\n```\n\n----------------------------------------\n\nTITLE: Managing Themes in October CMS\nDESCRIPTION: Commands for checking theme protection, listing, enabling, removing, and copying themes\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:check\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:list\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:use rainlab-vanilla\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:remove rainlab-vanilla\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy <source-theme> [destination-theme]\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Settings Link to a Model in PHP\nDESCRIPTION: Example showing how to register a backend settings link that points to a settings model by overriding the registerSettings method in a plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'settings' => [\n            'label' => 'Áî®Êà∑ËÆæÁΩÆ',\n            'description' => 'ÁÆ°ÁêÜÂü∫‰∫éÁî®Êà∑ÁöÑËÆæÁΩÆ„ÄÇ',\n            'category' => 'Users',\n            'icon' => 'icon-cog',\n            'class' => \\Acme\\User\\Models\\Settings::class,\n            'order' => 500,\n            'keywords' => 'Ë¥¶Âè∑ Â§¥ÂÉè ‰ºöÂëò‰ø°ÊÅØ',\n            'permissions' => ['acme.users.access_settings']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Files in a Directory\nDESCRIPTION: Examples showing how to retrieve arrays of files within a directory, including options to get all files recursively using allFiles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Theme Asset\nDESCRIPTION: Shows the resulting HTML output when the theme filter is processed, assuming website address is https://octobercms.com and active theme is 'website'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/theme.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"http://october.com/themes/website/assets/js/menu.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom List Container View\nDESCRIPTION: Example of a custom _list_container.htm file that adds a sidebar to the list display by overriding the default view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($toolbar): ?>\n    <?= $toolbar->render() ?>\n<?php endif ?>\n\n<?php if ($filter): ?>\n    <?= $filter->render() ?>\n<?php endif ?>\n\n<div class=\"row row-flush\">\n    <div class=\"col-sm-3\">\n        [Insert sidebar here]\n    </div>\n    <div class=\"col-sm-9 list-with-sidebar\">\n        <?= $list->render() ?>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Site Dropdown Selector in Twig\nDESCRIPTION: Generates a dropdown menu that allows users to switch between different sites, highlighting the current site.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/sitepicker.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<select class=\"form-control\" onchange=\"window.location.assign(this.value)\">\n    {% for site in sitePicker.sites %}\n        <option value=\"{{ site.url }}\" {{ this.site.code == site.code ? 'selected' }}>\n            {{ site.name }}\n        </option>\n    {% endfor %}\n</select>\n```\n\n----------------------------------------\n\nTITLE: External Asset Combination with Theme Filter\nDESCRIPTION: Shows how to combine assets from outside the theme directory using path symbols.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/theme.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ ['~/modules/system/assets/js/framework.js']|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Set Inspector Properties in PHP for October CMS\nDESCRIPTION: Example code showing how to define properties using the 'set' inspector type in October CMS. This demonstrates setting up multiple selection options with static items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-set.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'units' => [\n            'title' => 'Select Muitple Units',\n            'type' => 'set',\n            'items' => [\n                'metric' => 'Metric',\n                'imperial' => 'Imperial'\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Media Filter in Twig Templates\nDESCRIPTION: Demonstrates how to use the |media filter to generate a URL for an image file. The filter transforms a simple filename into a complete URL by prepending the media manager's public path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-media.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media }}\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced Video Player with Responsive Sources in Twig\nDESCRIPTION: A more complex example showing how to use Twig in a custom video player partial to provide different video sources based on device screen size.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<video controls>\n    <source\n        src=\"{{ src }}\"\n        media=\"only screen and (min-device-width: 568px)\"></source>\n    <source\n        src=\"{{ src|replace({'.mp4': '.iphone.mp4'}) }}\"\n        media=\"only screen and (max-device-width: 568px)\"></source>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Creating Links to the Current Page\nDESCRIPTION: Shows how to create a link to the current page using an empty string with the |page filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ ''|page }}\">Refresh page</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Column in YAML for OctoberCMS\nDESCRIPTION: Demonstrates how to define a partial column in a list definition YAML file. The 'path' property specifies the partial view file to be used for rendering the column content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: content_column\n```\n\n----------------------------------------\n\nTITLE: Disabling PJAX for Incoming Requests with Meta Tag\nDESCRIPTION: This HTML meta tag disables PJAX routing for incoming requests only, triggering a full page reload when navigating to the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"turbo-visit-control\" content=\"reload\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Site Properties in Twig\nDESCRIPTION: Demonstrates how to access fundamental site properties like ID, name, code, locale, timezone, and theme using the this.site object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-site.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.site.id }}\n{{ this.site.name }}\n{{ this.site.code }}\n{{ this.site.locale }}\n{{ this.site.timezone }}\n{{ this.site.theme }}\n```\n\n----------------------------------------\n\nTITLE: Using whereIn for List-Based Filtering\nDESCRIPTION: Demonstrates the whereIn method to filter records where a column's value matches any value in a specified array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->whereIn('id', [1, 2, 3])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data in PHP\nDESCRIPTION: Shows how to retrieve all data from the session using the all method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/session.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = Session::all();\n```\n\n----------------------------------------\n\nTITLE: Adding URL Fragments to Pagination Links in PHP\nDESCRIPTION: Shows how to append a URL fragment (hash) to pagination links using the fragment method, useful for linking to specific sections of a page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\necho $users->fragment('foo')->render();\n```\n\n----------------------------------------\n\nTITLE: Cumulative Checkbox Selection\nDESCRIPTION: Configuration for enabling cumulative selection behavior in nested checkbox lists where selecting a parent checks all children.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkboxlist.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    cumulative: true\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with BeforeUpdate Callback\nDESCRIPTION: Example of using beforeUpdate callback to execute code before page elements are updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {\n    update: {calcresult: '.result'},\n    beforeUpdate: function() { /* do something */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Example Plugin Update Directory Structure\nDESCRIPTION: Shows the typical directory structure for plugin updates, including the version file and migration scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugins/\n  author/\n    myplugin/\n      updates/                    <=== Êõ¥Êñ∞ÁõÆÂΩï\n        version.yaml                <=== Êèí‰ª∂ÁâàÊú¨Êñá‰ª∂\n        create_tables.php           <=== Êï∞ÊçÆÂ∫ìËÑöÊú¨\n        seed_the_database.php       <=== ËøÅÁßªÊñá‰ª∂\n        create_another_table.php    <=== ËøÅÁßªÊñá‰ª∂\n```\n\n----------------------------------------\n\nTITLE: Setting a Root Path for PJAX Navigation\nDESCRIPTION: This HTML meta tag restricts PJAX navigation to a specific subdirectory, useful when your application lives in a subdirectory of the domain.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"turbo-root\" content=\"/app\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Settings\nDESCRIPTION: PHP configuration array for Amazon SES service including key, secret and region settings\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => 'your-ses-key',\n    'secret' => 'your-ses-secret',\n    'region' => 'ses-region',  // e.g. us-east-1\n],\n```\n\n----------------------------------------\n\nTITLE: Dropdown Options with Icons in PHP\nDESCRIPTION: Provides dropdown options with custom icons using a multidimensional array format with [label-text, label-icon].\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($fieldName, $value, $formData)\n{\n    return [\n        'published' => ['Published', 'icon-check-circle'],\n        'unpublished' => ['Unpublished', 'icon-minus-circle'],\n        'draft' => ['Draft', 'icon-clock-o']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hint Field in YAML\nDESCRIPTION: Defines a hint field in a form using YAML configuration. The 'type' property is set to 'hint' and includes a 'path' to the content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: hint\n    path: content_field\n```\n\n----------------------------------------\n\nTITLE: Changing Site Context in PHP\nDESCRIPTION: Demonstrates how to change the context to a different site using the withContext method, which restricts lookups to that site automatically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSite::withContext(2, function() {\n    // Models in site 2 are now available.\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Column in October CMS List\nDESCRIPTION: Configuration for a switch column which displays an on or off state for boolean values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nenabled:\n    label: Enabled\n    type: switch\n```\n\n----------------------------------------\n\nTITLE: Pruning Data for Specific Blueprint\nDESCRIPTION: Command to prune data for a specific blueprint by specifying its handle. This allows for targeted cleanup of specific content structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:prune --blueprint=\"Blog\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Page Tag\nDESCRIPTION: Example layout template showing the basic structure with head placeholder and page tag implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/page.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ndescription=\"example layout\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    <body>\n        {% page %}\n        ...\n```\n\n----------------------------------------\n\nTITLE: Fallback Dropdown Options Method in PHP\nDESCRIPTION: Implements a catch-all method for dropdown options when specific methods aren't defined, receiving the field name as first parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getDropdownOptions($fieldName, $value, $formData)\n{\n    if ($fieldName == 'status') {\n        return ['all' => 'All', ...];\n    }\n    else {\n        return ['' => '-- none --'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget in YAML for October CMS\nDESCRIPTION: Demonstrates the setup for a media finder widget in YAML. This widget allows selecting items from the media library, with options for specifying the file type and display properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbackground_image:\n    label: ËÉåÊôØÂõæ\n    type: mediafinder\n    mode: image\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in OctoberCMS Service Providers\nDESCRIPTION: This snippet demonstrates how to register console commands from within an OctoberCMS service provider using the commands method in the boot method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    $this->app->singleton('acme.mycommand', function() {\n        return new \\Acme\\Blog\\Console\\MyConsoleCommand;\n    });\n\n    $this->commands('acme.mycommand');\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional For Loop in Twig\nDESCRIPTION: Demonstrates how to filter a collection during iteration by adding an if condition to the for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users if user.active %}\n        <li>{{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Basic Property Definition in PHP\nDESCRIPTION: Demonstrates how to define a basic string property for a CMS component using the defineProperties method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector-types.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'maxItems' => [\n            'title' => 'Max Items',\n            'type' => 'string'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Pivot Columns\nDESCRIPTION: Shows how to specify additional columns to be included in the pivot attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        \\Acme\\Blog\\Models\\Role::class,\n        'pivot' => ['column1', 'column2']\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Partials with PHP in October CMS\nDESCRIPTION: Shows how to create dynamic partials using PHP functions onStart and onEnd to inject variables into the Twig environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Stability for Bleeding Edge Updates in October CMS\nDESCRIPTION: This command changes the minimum stability setting to 'dev' in Composer, allowing for bleeding edge updates of October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/updating-october.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config minimum-stability dev\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Conditional Filtering\nDESCRIPTION: Demonstrates how to use a conditional statement within a Twig for loop to filter items in the collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        {% if user.active %}\n            <li>{{ user.username }}</li>\n        {% endif %}\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Properties with Autocomplete Inspector Type in PHP\nDESCRIPTION: Example of how to define properties using the autocomplete inspector type with static options. This code sets up a 'condition' property with predefined options 'Start' and 'End'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-autocomplete.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'condition' => [\n            'title' => 'Condition',\n            'type' => 'autocomplete',\n            'options' => ['start' => 'Start', 'end' => 'End']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Field in YAML\nDESCRIPTION: Defines a partial field in a form using YAML configuration. The 'type' property is set to 'partial' and includes a 'path' to the partial view file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: $/acme/blog/models/comments/_content_field.htm\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Property Access in Twig\nDESCRIPTION: Demonstrates how to access snippet properties within a partial template\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/snippets.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nThe country name is {{ country }}\n```\n\n----------------------------------------\n\nTITLE: Repeater Field with Title Configuration\nDESCRIPTION: Example showing how to configure a title field for collapsed repeater items using titleFrom property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    titleFrom: title_when_collapsed\n    form:\n        fields:\n            title_when_collapsed:\n                label: This field is the title when collapsed\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Theme Sync with Specific Theme\nDESCRIPTION: Command to synchronize a specific theme's content between the filesystem and database by passing the theme code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:sync my-custom-theme\n```\n\n----------------------------------------\n\nTITLE: Textarea Field with Placeholder Text\nDESCRIPTION: Example showing how to implement a textarea field with placeholder text that appears when the field is empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-textarea.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npoint_summary:\n    type: textarea\n    label: Point\n    placeholder: Type some key points are you trying to make\n```\n\n----------------------------------------\n\nTITLE: Importing Control Classes\nDESCRIPTION: Shows how to import a control class for accessing static methods using oc.importControl.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchControlClass = oc.importControl('search');\n```\n\n----------------------------------------\n\nTITLE: Using trace_sql for Database Query Logging in PHP\nDESCRIPTION: Demonstrates how to use the trace_sql helper function to enable database logging, which logs every command sent to the database in the system.log file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/log.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntrace_sql();\n\nDb::table('users')->count();\n\n// select count(*) as aggregate from users\n```\n\n----------------------------------------\n\nTITLE: Manually Controlling Loading Indicator with JavaScript\nDESCRIPTION: Demonstrates how to manually show and hide the loading indicator on elements using JavaScript functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_7\n\nLANGUAGE: js\nCODE:\n```\noc.attachLoader.show('.my-element');\n\noc.attachLoader.hide('.my-element');\n```\n\n----------------------------------------\n\nTITLE: Collection Shuffle in Foreach Loop\nDESCRIPTION: Example of using shuffle() method with a foreach loop to iterate over randomized items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for fruit in collect(['apple', 'banana', 'orange']).shuffle() %}\n    {{ fruit }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using take() Method in PHP Collections\nDESCRIPTION: The take method returns a new collection with the specified number of items. A positive value takes items from the beginning, while a negative value takes from the end.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(3);\n\n$chunk->all();\n\n// [0, 1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(-2);\n\n$chunk->all();\n\n// [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Blocks in Twig\nDESCRIPTION: Shows how to pass variables to content blocks when using the {% content %} tag, including single variables and collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" name=user.name %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"location.htm\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" likes=[\n    {name:'Dogs'},\n    {name:'Fishing'},\n    {name:'Golf'}\n] %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Repeater Field with Group Mode in OctoberCMS\nDESCRIPTION: Demonstrates how to use the repeater field with group mode in OctoberCMS, referencing an external YAML configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{variable name=\"sections\" type=\"repeater\" prompt=\"Add another section\" tab=\"Sections\"\n        groups=\"$/author/plugin/repeater_fields.yaml\"}{/variable}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nquote:\n    name: Quote\n    description: Quote item\n    icon: icon-quote-right\n    fields:\n        quote_position:\n            span: auto\n            label: Quote Position\n            type: radio\n            options:\n                left: Left\n                center: Center\n                right: Right\n        quote_content:\n            span: auto\n            label: Details\n            type: textarea\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Alias for Component Override Directory in October CMS\nDESCRIPTION: This code shows how to assign a custom alias to a component, which changes the override directory for its partials. The 'channel' component is given the alias 'foobar', so its partials will be overridden in the 'partials/foobar/' directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[channel foobar]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"foobar\" %}\n```\n\n----------------------------------------\n\nTITLE: Migration File Class Structure in PHP\nDESCRIPTION: Example of a migration file class structure showing the proper namespace and class inheritance pattern for update files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/updates.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Updates;\n\nuse Schema;\nuse October\\Rain\\Database\\Updates\\Migration;\n\n/**\n * some_upgrade_file.php\n */\nclass SomeUpgradeFile extends Migration\n{\n    ///\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Application Cache\nDESCRIPTION: Command to clear the application, Twig, and combiner cache directories, refreshing the application's cached data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan cache:clear\n```\n\n----------------------------------------\n\nTITLE: Using html_mailto() Twig Function in OctoberCMS\nDESCRIPTION: Shows how to use the html_mailto() function in Twig templates to output a complete anchor link with an obfuscated email address.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/html.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'me@mysite.tld'|html_mailto }}\n```\n\n----------------------------------------\n\nTITLE: Using the prepend() Method in PHP Collections\nDESCRIPTION: The prepend method adds an item to the beginning of the collection, modifying the original collection. It's the opposite of the push method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->prepend(0);\n\n$collection->all();\n\n// [0, 1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Database Query Event Listening\nDESCRIPTION: Demonstrates how to listen for and log SQL queries executed by the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nDb::listen(function($sql, $bindings, $time) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Schedule Constraints in OctoberCMS\nDESCRIPTION: Example of combining multiple schedule constraints to create a more specific schedule. This snippet schedules a task to run weekly on Mondays at 13:00.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->call(function () {\n    // Runs once a week on Monday at 13:00...\n})->weekly()->mondays()->at('13:00');\n```\n\n----------------------------------------\n\nTITLE: Injecting and Compiling LESS/SCSS Assets\nDESCRIPTION: Shows how to inject and compile LESS/SCSS assets using the combiner in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/less/base.less']);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Options Method for Dependent Scope\nDESCRIPTION: PHP method that filters options for a dependent scope based on the value of another scope. This example filters city options based on the selected country.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter-scopes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getCityOptionsForFilter($scopes = null)\n{\n    if ($scopes->country && ($countryIds = $scopes->country->value)) {\n        return self::whereIn('country_id', $countryIds)->lists('name', 'id');\n    }\n\n    return self::lists('name', 'id');\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Collection Values with implode() for Arrays in PHP\nDESCRIPTION: The implode method joins collection items with a specified delimiter. For collections of arrays or objects, you must specify the attribute key to use and a glue string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['account_id' => 1, 'product' => 'Chair'],\n    ['account_id' => 2, 'product' => 'Desk'],\n]);\n\n$collection->implode('product', ', ');\n\n// Chair, Desk\n```\n\n----------------------------------------\n\nTITLE: Image Mode Media Finder Configuration\nDESCRIPTION: Configuration for a Media Finder field in image mode, which displays a preview of the selected image.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-mediafinder.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbackground_image:\n    label: Background Image\n    type: mediafinder\n    mode: image\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Partial PHP File\nDESCRIPTION: Shows how to access variables within a partial PHP file, including the current field value, model, and field object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($model->is_active): ?>\n    <p><?= $field->label ?> is active</p>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Rendering in Twig\nDESCRIPTION: Shows how to render content blocks using Markdown syntax\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"changelog.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Priority Layout Configuration\nDESCRIPTION: Example of a priority layout configuration with conditional page rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"API Layout\"\nis_priority = 1\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if false %}\n    {% page %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for Dropdown Selection\nDESCRIPTION: This snippet shows the JSON representation of a selected dropdown option. The output is a string value corresponding to the chosen option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dropdown.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"unit\": \"metric\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Widget Field in YAML\nDESCRIPTION: Defines a custom widget field in a form using YAML configuration. The 'type' property specifies the widget class name and includes a 'size' option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nblog_content:\n    type: Backend\\FormWidgets\\RichEditor\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Basic Hint Field Configuration in YAML\nDESCRIPTION: Demonstrates the basic configuration of a hint field with a path to a partial view file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-hint.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_hint1:\n    type: hint\n    path: content_field\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Form Field in YAML\nDESCRIPTION: Demonstrates how to configure a 'partial' type form field in YAML, specifying the label, type, and path to the partial view file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-partial.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: field_content\n```\n\n----------------------------------------\n\nTITLE: Performing Cross Joins\nDESCRIPTION: Shows how to use crossJoin to create a cartesian product between two tables, returning all possible combinations of rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('sizes')\n    ->crossJoin('colors')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Integer Validation with Range Constraints\nDESCRIPTION: Demonstrates integer validation with minimum and maximum value constraints for a numeric property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector-types.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'numOfColumns' => [\n            'title' => 'Number of Columns',\n            'type' => 'string',\n            'validation' => [\n                'integer' => [\n                    'message' => 'The Number of Columns field should contain an integer value',\n                    'allowNegative' => true,\n                    'min' => [\n                        'value' => -10,\n                        'message' => 'The number of columns should not be less than -10.'\n                    ],\n                    'max' => [\n                        'value' => 10,\n                        'message' => 'The number of columns should not be greater than 10.'\n                    ]\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Public Directory Mirror\nDESCRIPTION: Command to create a mirrored copy of public files needed to serve the application using symbolic linking.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:mirror public\n```\n\n----------------------------------------\n\nTITLE: Opening an Image File for Resizing in PHP\nDESCRIPTION: Shows how to initialize the Resizer with a file path to begin the image resizing process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$image = Resizer::open('path/to/image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Component Initialization Method\nDESCRIPTION: Example of component initialization logic using init() method to attach another component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function init()\n{\n    $this->addComponent(\\Acme\\Blog\\Components\\BlogPosts::class, 'blogPosts');\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Calculate Request with Partial Update\nDESCRIPTION: Demonstrates updating a page element with server response by injecting a partial into an element with specific CSS class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {\n    update: {calcresult: '.result'}\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Value Selection using valueFrom Property\nDESCRIPTION: Shows how to source a column value from a different model attribute using the valueFrom property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nother_name:\n    label: Something Great\n    valueFrom: name\n```\n\n----------------------------------------\n\nTITLE: Textarea Field with Size Configuration\nDESCRIPTION: Example of a textarea field with custom size property set to large. Size options include tiny, small, large, huge, and giant.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-textarea.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nblog_contents:\n    type: textarea\n    label: Contents\n    size: large\n```\n\n----------------------------------------\n\nTITLE: Generating Asset URL in PHP\nDESCRIPTION: The asset function generates a URL for an asset using the current scheme of the request (HTTP or HTTPS).\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_29\n\nLANGUAGE: PHP\nCODE:\n```\n$url = asset('img/photo.jpg');\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Picker Column in YAML\nDESCRIPTION: Basic YAML configuration for setting up a color picker column in October CMS. Defines a color field with a 'Background' label using the colorpicker type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-colorpicker.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Custom Component Markup Example\nDESCRIPTION: Demonstrates how to customize component markup by replacing the __SELF__ reference with the component alias.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ blogPost.post.title }}</h1>\n<p>{{ blogPost.post.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Old Input Values in PHP\nDESCRIPTION: Demonstrates how to retrieve all previously flashed input values at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$data = Input::old();\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with Component Reference in Twig\nDESCRIPTION: Demonstrates how to reference a component's alias with __SELF__ in a form_ajax() call by building the string first.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set targetPartial = \"'\" ~ __SELF__ ~ \"::statistics': '#statsPanel'\" %}\n{{ form_ajax('onUpdate', { update: targetPartial }) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Layout Name in OctoberCMS Twig\nDESCRIPTION: Demonstrates how to retrieve the layout name used by the current page using the this.page.layout property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.page.layout }}\n```\n\n----------------------------------------\n\nTITLE: Resizing Media Image with Twig Resize Filter\nDESCRIPTION: Shows how to resize a media image named 'banner.jpg' to 1920x1080 pixels using the resize filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media|resize(1920, 1080) }}\" />\n```\n\n----------------------------------------\n\nTITLE: AJAX Pagination Implementation\nDESCRIPTION: Shows how to implement AJAX-based pagination using the ajaxPager function and partial templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/pagination.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    {% for post in posts %}\n        <h2>{{ post.title }}</h2>\n    {% endfor %}\n</div>\n\n<nav>\n    {{ ajaxPager(posts) }}\n</nav>\n```\n\n----------------------------------------\n\nTITLE: Basic Database Existence Validation in PHP\nDESCRIPTION: Examples of using the exists validation rule to check database records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'state' => 'exists:states'\n'state' => 'exists:states,abbreviation'\n'email' => 'exists:staff,email,account_id,1'\n'email' => 'exists:staff,email,deleted_at,NULL'\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Text with Parameters using |trans_choice Filter in Twig\nDESCRIPTION: Demonstrates how to use the |trans_choice filter with both a count and parameters for complex pluralization in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/trans.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ '{1} :value minute ago|[2,*] :value minutes ago'|trans_choice(5, { value: 5 }) }}\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Error Handler in October CMS\nDESCRIPTION: Demonstrates how to listen for PHP fatal errors using the App::fatal method. This allows handling of critical errors that would normally terminate script execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nApp::fatal(function($exception) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Using str_limit() String Helper in PHP\nDESCRIPTION: The str_limit function limits the number of characters in a string. It takes a string as the first argument and the maximum number of resulting characters as the second, automatically adding an ellipsis.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$value = str_limit('The CMS platform that gets back to basics.', 6);\n\n// The CMS...\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Expressions in Twig\nDESCRIPTION: Demonstrates how variables can represent expressions using ternary operators to display different values based on conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ isAjax ? 'Yes' : 'No' }}\n```\n\n----------------------------------------\n\nTITLE: Basic Page Load Event Handler in JavaScript\nDESCRIPTION: Shows how to attach an event listener for the page:loaded event, which fires after initial page load and subsequent page visits once all scripts have loaded.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:loaded', function() {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Redirecting to New Tailor Components Section in JSX\nDESCRIPTION: This code snippet uses a Redirect component to automatically redirect users from the old Tailor Components page to the new section located at '../components/section'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/components.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Redirect to=\"../components/section\" />\n```\n\n----------------------------------------\n\nTITLE: Plugin Asset Image Resizing\nDESCRIPTION: Example of resizing an image from a plugin's assets directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ '/plugins/acme/blog/assets/images/someimage.png'|resize(...) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Field Value in Import Model\nDESCRIPTION: PHP code demonstrating how to access the auto_create_lists form field value within the importData method of an import model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    public function importData($results, $sessionKey = null)\n    {\n        if ($this->auto_create_lists) {\n            // Do something\n        }\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching with Meta Tag\nDESCRIPTION: This HTML meta tag disables page caching for the current page, preventing it from being stored in the Turbo Router's cache for faster navigation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"turbo-cache-control\" content=\"no-cache\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Empty Collection Handling\nDESCRIPTION: Demonstrates using the else clause to handle empty collections in a for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}</li>\n    {% else %}\n        <li><em>There are no users found</em></li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Calling Other Commands in OctoberCMS Console Command\nDESCRIPTION: This snippet demonstrates how to call other console commands from within a custom command in OctoberCMS. It shows examples of calling commands with and without arguments and options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/development.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->call('october:up');\n\n$this->call('plugin:refresh', ['name' => 'October.Demo']);\n\n$this->call('october:update', ['--force' => true]);\n```\n\n----------------------------------------\n\nTITLE: Injecting JavaScript Files Programmatically in PHP\nDESCRIPTION: Demonstrates how to programmatically inject JavaScript files using PHP in component or page lifecycle functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Result of {% verbatim %} Tag in Twig\nDESCRIPTION: Shows the output of using the {% verbatim %} tag, where the content inside the tag is rendered exactly as written, without Twig parsing the variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/verbatim.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello, {{ name }}</p>\n```\n\n----------------------------------------\n\nTITLE: Relation Count Column in YAML\nDESCRIPTION: Illustrates how to display the number of related records as a column value in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nusers_count:\n    label: Users\n    type: number\n    relation: users\n    relationCount: true\n```\n\n----------------------------------------\n\nTITLE: PHP Model Scope Implementation\nDESCRIPTION: Implementation of a custom model scope method for filtering group results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeGroupFilter($query, $scope)\n{\n    return $query->whereHas('roles', function($q) use ($scope) {\n        $q->whereIn('id', $scope->value);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence (PHP)\nDESCRIPTION: Example of checking if a file exists on a specific disk using the exists method on the Storage facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$exists = Storage::disk('s3')->exists('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Twig Resize Filter\nDESCRIPTION: Demonstrates the basic usage of the resize filter to resize an image to 100x100 pixels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'image.jpg'|resize(100, 100) }}\n```\n\n----------------------------------------\n\nTITLE: Using Namespaces in PHP Section of CMS Template\nDESCRIPTION: Shows how to use PHP namespaces within the PHP section of a CMS template, including function definition and namespace importing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/themes.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::get();\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Editor Widget in YAML\nDESCRIPTION: This snippet demonstrates how to configure a Markdown Editor widget in a YAML file. It sets the field type to 'markdown' and specifies a 'huge' size for the editor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-markdown.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmd_content:\n    type: markdown\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Cleaning HTML for XSS Prevention with html_clean()\nDESCRIPTION: Shows how to sanitize HTML to prevent XSS attacks using the html_clean() function, which removes potentially dangerous HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_clean('<script>window.location = \"http://google.com\"</script>') }}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Options in OctoberCMS Console Commands\nDESCRIPTION: This snippet illustrates how to define options for an OctoberCMS console command using the getOptions method. It shows setting up an optional option with a default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * getOptions for the console command\n * @return array\n */\nprotected function getOptions()\n{\n    return [\n        ['example', null, InputOption::VALUE_OPTIONAL, 'An example option.', null],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Field Configuration in YAML\nDESCRIPTION: A basic example of configuring a switch field in October CMS forms. This creates a toggle switch with a label of 'Display Content'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-switch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display Content\n    type: switch\n```\n\n----------------------------------------\n\nTITLE: Using HTML Functions as Twig Filters\nDESCRIPTION: Demonstrates how to use HTML functions as Twig filters instead of function calls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|html_strip }}\n```\n\n----------------------------------------\n\nTITLE: Using PHP Query Scopes with Entries Field\nDESCRIPTION: Configuration showing how to limit the related query using a PHP method with the scope property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbasic_entries:\n    label: Basic Entry\n    type: entries\n    source: Basic\\Entry\n    scope: App\\Classes\\ScopeHelper::applyScope\n```\n\n----------------------------------------\n\nTITLE: Collection Response Example\nDESCRIPTION: Demonstrates building a collection response from multiple posts using the collect() Twig function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/building-apis.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set result = collect() %}\n\n{% for post in posts %}\n    {% do result.push({\n        id: post.id,\n        title: post.title,\n        email: post.author.email,\n        created_at: post.created_at,\n        updated_at: post.updated_at\n    }) %}\n{% endfor %}\n\n{% do response(result) %}\n```\n\n----------------------------------------\n\nTITLE: Creating Permanent Page Elements in PJAX\nDESCRIPTION: This HTML demonstrates how to mark elements as permanent so they won't be refreshed during PJAX navigation, preserving their state and event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"main-navigation\" data-turbo-permanent>...</div>\n```\n\n----------------------------------------\n\nTITLE: Fully Customized Many-to-Many Relationship Definition (PHP)\nDESCRIPTION: Shows a comprehensive example of customizing a many-to-many relationship with custom table name and key columns for both models in the relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'roles' => [\n        'Acme\\Blog\\Models\\Role',\n        'table'    => 'acme_blog_role_user',\n        'key'      => 'my_user_id',\n        'otherKey' => 'my_role_id'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Using the trace_log Helper Function in PHP\nDESCRIPTION: Shows how to use the trace_log helper function, which is an alias for Log::info with support for strings, arrays, and exceptions as the message parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/log.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Write a string value\n$val = 'Hello world';\ntrace_log('The value is '.$val);\n\n// Dump an array value\n$val = ['Some', 'array', 'data'];\ntrace_log($val);\n\n// Trace an exception\ntry {\n    //\n}\ncatch (Exception $ex) {\n    trace_log($ex);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Validation Rules in OctoberCMS\nDESCRIPTION: Demonstrates how to use array syntax for defining validation rules in an OctoberCMS model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Validation;\n\n    public $rules = [\n        'links.*.url'    => 'required|url',\n        'links.*.anchor' => 'required'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Processing with unless() Method in PHP Collections\nDESCRIPTION: The unless() method executes a given callback unless the first argument evaluates to true. It provides a readable way to implement conditional logic when working with collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3]);\n\n$collection->unless(true, function ($collection) {\n    return $collection->push(4);\n});\n\n$collection->unless(false, function ($collection) {\n    return $collection->push(5);\n});\n\n$collection->all();\n\n// [1, 2, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Drop-down List Generation\nDESCRIPTION: Various examples of generating drop-down select lists with different options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('size', ['L' => 'Large', 'S' => 'Small']) ?>\n\n<?= Form::select('size', ['L' => 'Large', 'S' => 'Small'], 'S') ?>\n\n<?= Form::select('animal', [\n    'Cats' => ['leopard' => 'Leopard'],\n    'Dogs' => ['spaniel' => 'Spaniel'],\n]) ?>\n\n<?= Form::selectRange('number', 10, 20) ?>\n\n<?= Form::selectRange('number', 10, 20, 2, ['emptyOption' => 'Choose...']) ?>\n\n<?= Form::selectMonth('month') ?>\n\n<?= Form::selectMonth('month', 2, ['emptyOption' => 'Choose month...']) ?>\n```\n\n----------------------------------------\n\nTITLE: Sorting Results by Date with latest Method\nDESCRIPTION: Shows how to use the latest method to easily order results by date, defaulting to the created_at column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$user = Db::table('users')\n    ->latest()\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Generating Cache-Busting Timestamp with carbon() in Twig\nDESCRIPTION: Demonstrates how to use carbon() to generate a timestamp for cache-busting purposes in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\ncarbon('now').format('m.d.y.H.i.s')\n```\n\n----------------------------------------\n\nTITLE: Dropdown Filter with Model Scope in YAML\nDESCRIPTION: Configuration for a dropdown filter that uses a model scope method to apply the filter, with options for 'active' and 'deleted' statuses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: dropdown\n    modelScope: applyStatusCode\n    options:\n        active: Active\n        deleted: Deleted\n```\n\n----------------------------------------\n\nTITLE: Removing Session Data with this.session.forget and flush in Twig\nDESCRIPTION: Shows how to remove specific session data using forget method or clear all session data using flush method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-session.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do this.session.forget('key') %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% do this.session.flush() %}\n```\n\n----------------------------------------\n\nTITLE: Custom Dimensions for Image Column in YAML\nDESCRIPTION: YAML configuration demonstrating how to specify custom width and height properties for image thumbnail rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-image.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    width: 150\n    height: 150\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Information File Structure in YAML\nDESCRIPTION: Example of a theme.yaml file that defines core theme information including name, description, author details, and code identifiers required for publishing to the October CMS Marketplace.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"October CMS Demo\"\ndescription: \"Demonstrates the basic concepts of the front-end theming.\"\nauthor: \"October CMS\"\nhomepage: \"https://octobercms.com\"\ncode: \"Demo\"\nauthorCode: \"Acme\"\n```\n\n----------------------------------------\n\nTITLE: Extending List Configuration in PHP\nDESCRIPTION: Demonstrates how to extend the list configuration dynamically by implementing the listGetConfig method to add custom structure parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic function listGetConfig($definition)\n{\n    $config = $this->asExtension('ListController')->listGetConfig($definition);\n\n    // Implement structure dynamically\n    $config->structure = [\n        'showTree' => true\n    ];\n\n    return $config;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Update View in PHP for October CMS\nDESCRIPTION: This code snippet demonstrates the structure of a typical update.php view in October CMS. It includes a form with save, close, and delete buttons, utilizing AJAX handlers and data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'd-flex flex-column h-100']) ?>\n\n    <div class=\"flex-grow-1\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div data-control=\"loader-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"{ close: true }\"\n                data-request-message=\"Saving Category...\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                class=\"btn btn-default\">\n                Save and Close\n            </button>\n            <button\n                type=\"button\"\n                class=\"oc-icon-trash-o btn-icon danger pull-right\"\n                data-request=\"onDelete\"\n                data-request-message=\"Deleting Category...\"\n                data-request-confirm=\"Do you really want to delete this category?\">\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Skipping Errors During Database Migration\nDESCRIPTION: The --skip-errors option ignores exceptions during migration, useful when tables already exist but version information still needs to be applied.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/updating-october.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate --skip-errors\n```\n\n----------------------------------------\n\nTITLE: Countdown Timer with Auto-Polling in Twig\nDESCRIPTION: Implementation of a countdown timer that auto-updates using polling requests every 2 seconds.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/polling.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div>\n    {% set launchDate = carbon('2025-01-01') %}\n    {% set days = launchDate.diffInDays %}\n    {% set hours = launchDate.subDays(days).diffInHours %}\n    {% set minutes = launchDate.subHours(hours).diffInMinutes %}\n    {% set seconds = launchDate.subMinutes(minutes).diffInSeconds %}\n\n    <h2>\n        Launch in...\n        {{ days }} days,\n        {{ hours }} hours,\n        {{ minutes }} minutes,\n        {{ seconds }} seconds\n    </h2>\n</div>\n\n<div\n    data-request=\"onAjax\"\n    data-request-update=\"{ _self: true }\"\n    data-auto-submit=\"2000\"></div>\n```\n\n----------------------------------------\n\nTITLE: Asset Variable Definition in YAML\nDESCRIPTION: Example of defining a field with the assetVar option to pass values to asset combiners, allowing theme settings to be used with preprocessors like LESS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nform:\n    fields:\n        # [...]\n\n        link_color:\n            label: Link color\n            type: colorpicker\n            assetVar: 'link-color'\n```\n\n----------------------------------------\n\nTITLE: Rendering List in PHP View File\nDESCRIPTION: Shows how to render the list widget in an October CMS controller view file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->listRender() ?>\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Automatic Parent Timestamp Updates in OctoberCMS\nDESCRIPTION: Example showing how the $touches property works. When a comment is updated, its associated post's updated_at timestamp will also be updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\\n\\n$comment->text = 'Edit to this comment!';\\n\\n$comment->save();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Disabled Days Configuration in YAML and PHP\nDESCRIPTION: Shows how to use a PHP function to dynamically set disabled days for the date picker. This allows for more complex logic in determining which dates should be disabled.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datepicker.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbooking_date:\n    type: datepicker\n    disableDays: App\\Classes\\BookingManager::getDisabledBookingDates\n```\n\n----------------------------------------\n\nTITLE: Defining a Text Column in October CMS List Configuration\nDESCRIPTION: This code snippet demonstrates how to define a 'text' type column in an October CMS list configuration. The example creates a 'full_name' column with a 'Full Name' label and specifies it as a text column, which will display content aligned to the left.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-text.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    type: text\n```\n\n----------------------------------------\n\nTITLE: Component AJAX Handler Example\nDESCRIPTION: Example of using CMS components with AJAX handlers in a partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/ajax-partial.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[contactForm]\n```\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"contactForm::onSubmit\"\n    data-request-update=\"{ _self: true }\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Temporary Path in PHP\nDESCRIPTION: The temp_path function returns the fully qualified path to a writable directory for temporary files. It can also generate a path to a specific file within the temp directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n$path = temp_path();\n\n$path = temp_path('app/file.txt');\n```\n\n----------------------------------------\n\nTITLE: Syncing Many-to-Many Relationships\nDESCRIPTION: This snippet demonstrates how to synchronize a many-to-many relationship, ensuring only the specified IDs exist in the pivot table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Refreshing Content for Specific Blueprint\nDESCRIPTION: Command to delete content for a specific blueprint by specifying its handle. This allows for selective content refreshing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:refresh --blueprint=\"Blog\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Primary Site in PHP\nDESCRIPTION: Demonstrates how to get the primary site definition using the getPrimarySite method, which is used as a fallback for every occasion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$site = Site::getPrimarySite();\n```\n\n----------------------------------------\n\nTITLE: Database Schema for Repeater Items\nDESCRIPTION: PHP code defining a database table schema for storing repeater items with sorting capability.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('acme_blog_repeater_items', function($table) {\n    $table->increments('id');\n    $table->integer('parent_id')->unsigned()->nullable()->index();\n    $table->mediumText('value')->nullable();\n    $table->integer('sort_order')->nullable();\n    $table->timestamps();\n});\n```\n\n----------------------------------------\n\nTITLE: Related Column Selection using relation Property\nDESCRIPTION: Demonstrates how to display related columns as part of the database query for searchable and sortable related data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ngroup_name:\n    label: Group\n    relation: groups\n    select: name\n```\n\n----------------------------------------\n\nTITLE: Using config_path() Function in PHP\nDESCRIPTION: The config_path function returns the fully qualified path to the application configuration directory. It can also generate a path to a specific configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$path = config_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = config_path('dev/cms.php');\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Related Models at Once\nDESCRIPTION: This code shows how to add multiple related models at once using the addMany method on a relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$post->comments()->addMany([\n    new Comment(['message' => 'A new comment.']),\n    new Comment(['message' => 'Another comment.']),\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Form Fields in YAML for Import/Export\nDESCRIPTION: Shows an example of a fields.yaml file that defines a custom checkbox field for use in import/export forms. This field can be used to control behavior during the import or export process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Form Field Definitions\n# ===================================\n\nfields:\n\n    auto_create_lists:\n        label: Automatically create lists\n        type: checkbox\n        default: true\n```\n\n----------------------------------------\n\nTITLE: Extending Form Configuration in PHP\nDESCRIPTION: Example of extending form configuration by modifying the active tab dynamically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\npublic function formGetConfig()\n{\n    $config = $this->asExtension('FormController')->formGetConfig();\n\n    // Set the active tab dynamically\n    $config->form['tabs']['activeTab'] = 'Content';\n\n    return $config;\n}\n```\n\n----------------------------------------\n\nTITLE: Firing Local Events (PHP)\nDESCRIPTION: Example of how to fire a local event on an object that implements the Emitter trait. Local events are specific to an object instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->fireEvent('post.beforePost', [$firstParam, $secondParam]);\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Injection in PHP\nDESCRIPTION: Demonstrates how to add individual CSS and JavaScript files to a page using the addCss and addJs methods in the onStart function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Plugin Controllers in Extra Navigation\nDESCRIPTION: Configuration for registering links to controllers introduced by plugins using the URL property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    label: Authors\n    # ...\n\nextraNavigation:\n    testimonials:\n        label: Testimonials\n        order: 210\n        icon: icon-group\n        url: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Using a Mixin in YAML for OctoberCMS Entries\nDESCRIPTION: This YAML snippet demonstrates how to include a mixin in an entry. It uses the 'mixin' type and references the mixin's handle in the 'source' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n_location_fields:\n    type: mixin\n    source: Fields\\Location\n```\n\n----------------------------------------\n\nTITLE: External Validation Configuration in October CMS Tailor\nDESCRIPTION: Defining validation rules externally in a blueprint with custom attribute names and error messages. This approach provides more control over validation behavior and error reporting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n    rules:\n        myfield: \"required|min:15\"\n    attributeNames:\n        myfield: My Field\n    customMessages:\n        myfield.min: \"My field has to be at least 15 characters long\"\n\nfields:\n    myfield:\n        label: Form Label\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Form Opening with Attributes in PHP\nDESCRIPTION: Demonstrates how to add HTML attributes to a form when using the PHP Form class directly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(array('id' => 'example', 'class' => 'something')) ?>\n    // ..\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in PHP Collections\nDESCRIPTION: Demonstrates the use of the min() method to find the minimum value in a collection, either by a specific key or overall.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$min = new Collection([['foo' => 10], ['foo' => 20]])->min('foo');\n\n// 10\n\n$min = new Collection([1, 2, 3, 4, 5])->min();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Dumping Multiple Variables with dump() in Twig\nDESCRIPTION: This example shows how to use the dump() function to inspect multiple variables simultaneously. It outputs information about both the 'user' and 'categories' variables, which can be helpful when debugging complex templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-dump.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(user, categories) }}\n```\n\n----------------------------------------\n\nTITLE: Limiting HTML Content Length with html_limit()\nDESCRIPTION: Shows how to limit HTML content to a specific length while maintaining proper tag handling using the html_limit() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Â∏ñÂ≠êÂÜÖÂÆπ...</p>', 100) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Entry Blueprint in YAML\nDESCRIPTION: Creates a stream entry blueprint for blog posts with a content field. Stream type is designed for time-based entries that are typically displayed in chronological order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: stream\nname: Blog Post\n\nfields:\n    content:\n        label: Post Content\n        type: richeditor\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Records\nDESCRIPTION: Methods for retrieving individual model instances using find() and first().\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve a model by its primary key\n$flight = Flight::find(1);\n\n// Retrieve the first model matching the query constraints\n$flight = Flight::where('active', 1)->first();\n```\n\n----------------------------------------\n\nTITLE: Creating Model with October CMS Artisan Command\nDESCRIPTION: Generates model files including migration and configuration. Requires plugin identifier and model class name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:model Acme.Blog Post\n```\n\n----------------------------------------\n\nTITLE: Using html_email() Twig Function in OctoberCMS\nDESCRIPTION: Demonstrates the usage of the html_email() function in Twig templates to obfuscate email addresses and prevent spam-bots from detecting them.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/html.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'me@mysite.tld'|html_email }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"mailto: {{ 'me@mysite.tld'|html_email }}\">Email me</a>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dropdown Properties Implementation\nDESCRIPTION: Example of implementing dynamic dropdown properties with dependencies between properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'country' => [\n            'title'       => 'Country',\n            'type'        => 'dropdown',\n            'default'     => 'us'\n        ],\n        'state' => [\n            'title'       => 'State',\n            'type'        => 'dropdown',\n            'default'     => 'dc',\n            'depends'     => ['country'],\n            'placeholder' => 'Select a state'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Queueing Cookies for Next Response in October CMS\nDESCRIPTION: How to queue a cookie to be attached to the next response when a response hasn't been created yet.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCookie::queue($name, $value, $minutes);\n```\n\n----------------------------------------\n\nTITLE: Validating Uploaded Files in October CMS\nDESCRIPTION: How to check if an uploaded file is valid before processing it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nif (Input::file('photo')->isValid()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Different Contexts\nDESCRIPTION: Examples of assigning variables to partials in different contexts including pages, components, and backend controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/update-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// From page or layout PHP code section\n$this['result'] = 'Hello world!';\n\n// From a component class\n$this->page['result'] = 'Hello world!';\n\n// From a backend controller or widget\n$this->vars['result'] = 'Hello world!';\n```\n\n----------------------------------------\n\nTITLE: Getting File Size\nDESCRIPTION: Shows how to retrieve the size of a file in bytes from storage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$size = Storage::size('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Displaying Layout Description in Meta Tag using Twig\nDESCRIPTION: Shows how to use the this.layout.description property to set the content of a meta description tag in an HTML document.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.layout.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Toggling Element Visibility During AJAX Request\nDESCRIPTION: Shows how to make an element visible only during an AJAX request using the data-request-loading attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onPay\"\n    data-request-loading=\".is-loading\">\n    Pay Now\n</button>\n\n<div style=\"display:none\" class=\"is-loading\">\n    Processing Payment...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Changing Backend User Password in October CMS\nDESCRIPTION: The 'october:passwd' command allows changing the password of a backend administrator via command line.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:passwd username password\n```\n\n----------------------------------------\n\nTITLE: Using diffKeys Method in PHP Collections\nDESCRIPTION: The diffKeys method compares the collection against another collection or array based on keys only, returning key/value pairs that have keys not present in the given collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'one' => 10,\n    'two' => 20,\n    'three' => 30,\n    'four' => 40,\n    'five' => 50,\n]);\n\n$diff = $collection->diffKeys([\n    'two' => 2,\n    'four' => 4,\n    'six' => 6,\n    'eight' => 8,\n]);\n\n$diff->all();\n\n// ['one' => 10, 'three' => 30, 'five' => 50]\n```\n\n----------------------------------------\n\nTITLE: Using Content Blocks with Layout Placeholders in Twig\nDESCRIPTION: Shows how to combine content blocks with layout placeholders using the {% content %} tag within a {% put %} block.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-content.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    {% content 'sidebar-content.htm' %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Component in Twig Template\nDESCRIPTION: Demonstrates how to render a component in a Twig template using the component tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' %}\n```\n\n----------------------------------------\n\nTITLE: Page Template with Placeholder Content\nDESCRIPTION: Demonstrates how to inject content into a layout placeholder from a page template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/layouts.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/my-page\"\nlayout = \"default\"\n==\n{% put head %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\">\n{% endput %}\n\n<p>The page content goes here.</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing Turbo Router in Twig Template\nDESCRIPTION: Enables the Turbo Router framework in an October CMS Twig template. This snippet should be placed in the template to activate PJAX-like functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% framework turbo %}\n```\n\n----------------------------------------\n\nTITLE: Testing Array Contents in Twig If Statement\nDESCRIPTION: Example of testing whether an array has content before iterating through it. The snippet checks if the 'users' array is not empty, then displays a list of usernames if it contains items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-if.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if users %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: PHP Query Scope Helper Class\nDESCRIPTION: Example PHP class implementing a query scope for entries field filtering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Classes;\n\nclass ScopeHelper\n{\n    public static function applyScope($query)\n    {\n        return $query->where('is_featured', true);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Logging Management\nDESCRIPTION: Shows how to enable, retrieve, and disable query logging for debugging purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nDb::connection()->enableQueryLog();\n```\n\nLANGUAGE: php\nCODE:\n```\n$queries = Db::getQueryLog();\n```\n\nLANGUAGE: php\nCODE:\n```\nDb::connection()->disableQueryLog();\n```\n\n----------------------------------------\n\nTITLE: Extended Configuration for List-based Export in YAML\nDESCRIPTION: Shows advanced configuration options for list-based export, including specifying a list definition and enabling raw attribute output. This allows for more fine-grained control over the export process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList:\n        definition: orders\n        raw: true\n```\n\n----------------------------------------\n\nTITLE: Record Finder in Tailor with Inverse Relation\nDESCRIPTION: Example showing how to configure inverse relations in Tailor recordfinder fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    label: Tags\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Tag\n    inverse: tags\n```\n\n----------------------------------------\n\nTITLE: Response Macro Definition\nDESCRIPTION: Shows how to define and use custom response macros for reusable response patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nResponse::macro('caps', function($value) {\n    return Response::make(strtoupper($value));\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::caps('foo');\n```\n\n----------------------------------------\n\nTITLE: Formatted Currency Field Configuration - YAML\nDESCRIPTION: Extended YAML configuration for a currency input field with custom format settings for preview display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-currency.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Total amount\n    type: currency\n    format: short\n```\n\n----------------------------------------\n\nTITLE: Job Release Example\nDESCRIPTION: Demonstrates how to release a job back onto the queue with optional delay.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function fire($job, $data)\n{\n    // Process the job...\n\n    $job->release();\n}\n\n$job->release(5);\n```\n\n----------------------------------------\n\nTITLE: Styling Modal Loading State with CSS\nDESCRIPTION: This CSS handles the visibility of the loading dialog during AJAX requests. It uses the data-ajax-updating attribute (which is automatically added during pending updates) to toggle between showing content and loading indicators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/modals.md#2025-04-16_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.modal-dialog[data-ajax-updating],\n.modal-dialog:not([data-ajax-updating]) + .modal-loading {\n    display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Syntax Comparison between PHP and Twig\nDESCRIPTION: Shows the equivalent syntax for opening forms in PHP and Twig markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n<?= Form::open(..) ?>\n\n// Twig\n{{ form_open(...) }}\n```\n\n----------------------------------------\n\nTITLE: Creating Import View in PHP\nDESCRIPTION: Demonstrates the structure of an import.htm view file. It includes a form with the import rendering method and a submit button that triggers the onImport AJAX handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->importRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onImportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Import records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Getting Request URL in PHP\nDESCRIPTION: Shows how to retrieve the full URL of the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$url = Request::url();\n```\n\n----------------------------------------\n\nTITLE: Loading Button Implementation\nDESCRIPTION: Example of implementing a loading button with AJAX request handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\"\n    data-request=\"onDoSomething\"\n    data-attach-loading>\n    Do Something\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Set Inspector Properties in PHP\nDESCRIPTION: Example of how to define properties using the Set inspector type with static options. Shows basic configuration with units selection between metric and imperial options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-set.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'units' => [\n            'title' => 'Select Muitple Units',\n            'type' => 'set',\n            'items' => [\n                'metric' => 'Metric',\n                'imperial' => 'Imperial'\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RelationController Behavior in OctoberCMS Controller\nDESCRIPTION: Basic implementation of the RelationController behavior in a controller class. The controller implements FormController alongside RelationController and references configuration files for both behaviors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Projects\\Controllers;\n\nclass Projects extends Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class,\n        \\Backend\\Behaviors\\RelationController::class\n    ];\n\n    public $formConfig = 'config_form.yaml';\n    public $relationConfig = 'config_relation.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Driver in October CMS\nDESCRIPTION: Configuration settings required for the Mailgun mail driver in the services.php file, including domain, secret key, and endpoint specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'mailgun' => [\n    'domain' => 'your-mailgun-domain',\n    'secret' => 'your-mailgun-key',\n    'endpoint' => 'api.mailgun.net', // api.eu.mailgun.net for EU\n],\n```\n\n----------------------------------------\n\nTITLE: Manual Loader Control\nDESCRIPTION: Shows how to manually control the loader display using JavaScript.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\noc.attachLoader.show('.my-element');\n\noc.attachLoader.hide('.my-element');\n```\n\n----------------------------------------\n\nTITLE: Using Custom Form Macros\nDESCRIPTION: Shows how to use a custom form macro after it's been defined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::myField() ?>\n```\n\n----------------------------------------\n\nTITLE: AJAX Calculate with Partial Update\nDESCRIPTION: Demonstrates running a calculation handler and updating a page element with the returned partial content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {\n    update: {calcresult: '.result'}\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Deleting Session Data using PHP\nDESCRIPTION: Demonstrates how to retrieve and delete an item from the session in one operation using the pull method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::pull('key', 'default');\n```\n\n----------------------------------------\n\nTITLE: Dropdown with Empty Option in YAML\nDESCRIPTION: Configures a dropdown with an empty option that can be reselected, useful for optional fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    emptyOption: -- no status --\n```\n\n----------------------------------------\n\nTITLE: Horizontal Rule UI Element in YAML\nDESCRIPTION: Simple configuration for adding a horizontal rule separator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n_ruler1:\n    type: ruler\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Previous URL in PHP\nDESCRIPTION: Shows how to redirect the user to their previous location, optionally with input data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::back();\n\nreturn Redirect::back()->withInput();\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Redirect in HTML\nDESCRIPTION: Form that redirects to the admin page after a successful login request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-redirect=\"/admin\">\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Helper Usage in Twig\nDESCRIPTION: Demonstrates the basic usage of HTML helpers in Twig templates and their PHP equivalents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-html.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Html::strip() ?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|html_strip }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Collection with Prepopulated Items\nDESCRIPTION: Creating a collection with predefined array items using collect() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = collect([\n    { title: item.title, ... },\n    { title: item.title, ... }\n]) %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Error Bags in Twig\nDESCRIPTION: Demonstrates how to access named error bags in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.login.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Registering Data Source in Plugin.php\nDESCRIPTION: Shows how to register a custom data source in the plugin registration file's boot method using the ReportDataSourceManager singleton.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Backend\\Classes\\ReportDataSourceManager;\n\npublic function boot()\n{\n    ReportDataSourceManager::instance()->registerDataSourceClass(\n        MyReportDataSource::class,\n        'My Custom Data Source' // This can be a reference to a localization string\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Widget in YAML\nDESCRIPTION: Defines a date picker widget in a form using YAML configuration. The 'type' property is set to 'datepicker' and includes a 'mode' option to specify the expected result format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npublished_at:\n    label: Published\n    type: datepicker\n    mode: date\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events to Different Targets\nDESCRIPTION: Demonstrates how to dispatch events to targets other than the control element, such as the window.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nthis.dispatch('ready', { target: window });\n```\n\n----------------------------------------\n\nTITLE: October Flavored INI Extended Syntax\nDESCRIPTION: Examples showing October's extended INI syntax supporting infinite array depth, which goes beyond standard PHP INI parsing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[level1Object]\nlevel2Object[level3Array][] = \"Yay!\"\nlevel2Object[level3Object][level4Value] = \"Yay!\"\nlevel2Object[level3Object][level4Array][] = \"Yay!\"\nlevel2Object[level3Object][level4Object][level5Value] = \"Yay!\"\n; ... to infinity and beyond!\n```\n\n----------------------------------------\n\nTITLE: Extending Models with Local Events\nDESCRIPTION: Example showing how to extend a model by binding to local events. This is an alternative approach to using the global event system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('user.register', function () use ($model) {\n        // Â∞Ü $user->email Ê≥®ÂÜåÂà∞ÈÇÆ‰ª∂ÂàóË°®ÁöÑ‰ª£Á†Å\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Exception Handler\nDESCRIPTION: Updates the Exception Handler class to use October's Handler implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n// File app/Exceptions/Handler.php\n\n// Replace\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n\n// With\nuse October\\Rain\\Foundation\\Exception\\Handler as ExceptionHandler;\n```\n\n----------------------------------------\n\nTITLE: Rendering Hint Partial with Key\nDESCRIPTION: Shows how to render a hint partial with a unique key for state persistence and additional variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/views-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->makeHintPartial('my_hint_key', 'my_hint_partial', ['foo' => 'bar']) ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Customization Fields in Separate YAML File\nDESCRIPTION: Example of defining theme customization fields in a separate YAML file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    site_name:\n        label: Site name\n        comment: The website name as it should appear on the front-end\n        default: My Amazing Site!\n```\n\n----------------------------------------\n\nTITLE: Output Example from Extended Class with Behavior in PHP\nDESCRIPTION: This code snippet shows the expected output when running the identify method on the Robot class. It displays text from the Robot class itself, the parent AI class, and the implemented WaveBehaviour.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nI'm a Robot\nI've got an AI!\n*waves*\n```\n\n----------------------------------------\n\nTITLE: Practical Email Obfuscation Example in HTML\nDESCRIPTION: Shows a practical example of using html_email() with the raw filter to create a functional obfuscated mailto link in HTML. The output shows the encoded result that prevents spam detection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-html.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"mailto: {{ html_email('a@b.c')|raw }}\">Email me</a>\n\n<!-- The above will output -->\n<a href=\"mailto: &#109;&#97;&#105;&#108;&#x74;o&#x3a;&#97;&#64;b.&#x63;\">Email me</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Date Mutator Values\nDESCRIPTION: Shows how to access date attributes that have been cast to Carbon instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->disabled_at->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Modifying Backend Menu Labels in October CMS using PHP\nDESCRIPTION: This snippet shows how to replace the labels for CMS and Pages in the October CMS backend menu. It uses the backend.menu.extendItems event to access the menu manager and modify both main menu and side menu items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n\n    // Add main menu item\n    $manager->addMainMenuItems('October.Cms', [\n        'cms' => [\n            'label' => '...'\n        ]\n    ]);\n\n    // Add side menu item\n    $manager->addSideMenuItems('October.Cms', 'cms', [\n        'pages' => [\n            'label' => '...'\n        ]\n    ]);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Soft Component with Conditional Rendering\nDESCRIPTION: Illustrates how to safely handle soft component data with conditional statements to prevent errors when the component is unavailable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_10\n\nLANGUAGE: markup\nCODE:\n```\nurl = \"mypage\"\n\n[@channel]\n==\n{% if channel.name %}\n    <div class=\"channel\">\n        {% channel.name %}\n    </div>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Array Helper Functions in PHP\nDESCRIPTION: Collection of array helper functions for adding, dividing, flattening and manipulating arrays using dot notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$array = array_add(['name' => 'Desk'], 'price', 100);\n// ['name' => 'Desk', 'price' => 100]\n```\n\nLANGUAGE: PHP\nCODE:\n```\nlist($keys, $values) = array_divide(['name' => 'Desk']);\n// $keys: ['name']\n// $values: ['Desk']\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$array = array_dot(['foo' => ['bar' => 'baz']]);\n// ['foo.bar' => 'baz']\n```\n\n----------------------------------------\n\nTITLE: Implementing Scripts Tag in HTML Template\nDESCRIPTION: Shows how to implement the {% scripts %} tag in an HTML template, typically placed before the closing body tag to insert JavaScript file references.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuration Transfer in Plugin Boot Method\nDESCRIPTION: Implementation of the boot() method to transfer plugin configuration values to the package configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::set('purifier', Config::get('acme.blog::purifier'));\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Response in Twig\nDESCRIPTION: Example of returning a response with a custom HTTP status code as the second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/response.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do response('Bad Request', 400) %}\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Limit in October CMS Models\nDESCRIPTION: Shows how to customize the maximum number of revision records kept for a model by setting the revisionableLimit property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var int Maximum number of revision records to keep.\n */\npublic $revisionableLimit = 8;\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Field with Dynamic Options in YAML\nDESCRIPTION: Defines a dropdown select field in a form using YAML configuration. The 'type' property is set to 'dropdown' but omits 'options', expecting a method in the model to provide options dynamically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Field Configuration in OctoberCMS\nDESCRIPTION: Basic implementation of a checkbox field that displays a simple boolean option labeled 'Display content'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    type: checkbox\n    label: Display content\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Timestamp Updates with $touches in OctoberCMS\nDESCRIPTION: Example showing how to configure a model to update parent model timestamps. This makes a comment update its post's timestamp when modified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\\n{\\n    /**\\n     * All of the relationships to be touched.\\n     */\\n    protected $touches = ['post'];\\n\\n    /**\\n     * Relations\\n     */\\n    public $belongsTo = [\\n        'post' => ['Acme\\\\Blog\\\\Models\\\\Post']\\n    ];\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Structure in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure the structure property for a relation. It enables reordering and disables the tree view, which is typically used with the SortableRelation trait.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/structures.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    #...\n    structure:\n        showReorder: true\n        showTree: false\n```\n\n----------------------------------------\n\nTITLE: Radio List with Default Value in YAML\nDESCRIPTION: Demonstrates setting a default value for a radio list field where the value corresponds to an option key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-radio.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    default: guests\n```\n\n----------------------------------------\n\nTITLE: Pinging URLs Before and After Task Execution\nDESCRIPTION: Example of using pingBefore and thenPing methods to notify external services about task execution. These methods ping specified URLs before and after a task runs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('emails:send')\n         ->daily()\n         ->pingBefore($url)\n         ->thenPing($url);\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Tooltip for List Columns in YAML\nDESCRIPTION: Shows how to configure an advanced tooltip with custom icon and placement for a list column in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncount:\n    label: Count\n    type: number\n    tooltip:\n        title: Number of users in the group\n        placement: bottom\n        icon: icon-users\n```\n\n----------------------------------------\n\nTITLE: Recursively Replacing Items in Collection in PHP\nDESCRIPTION: The replaceRecursive method recursively replaces items in the collection, applying the same replacement process to inner arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['Taylor', 'Abigail', ['James', 'Victoria', 'Finn']]);\n\n$replaced = $collection->replaceRecursive(['Charlie', 2 => [1 => 'King']]);\n\n$replaced->all();\n\n// ['Charlie', 'Abigail', ['James', 'King', 'Finn']]\n```\n\n----------------------------------------\n\nTITLE: Basic Layout Template in Twig\nDESCRIPTION: Demonstrates the simplest possible layout structure using the {% page %} tag to output page content\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Direct Model Return in Routes\nDESCRIPTION: Demonstrates returning model objects directly from routes for automatic JSON conversion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Theme Information Configuration in YAML\nDESCRIPTION: Example of theme.yaml configuration file specifying basic theme information including name, description, author and homepage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/themes/development.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"OctoberCMS Demo\"\ndescription: \"Demonstrates the basic concepts of the front-end theming.\"\nauthor: \"OctoberCMS\"\nhomepage: \"http://octobercms.com\"\ncode: \"demo\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request Input in PHP\nDESCRIPTION: The input function obtains an input item from the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_34\n\nLANGUAGE: PHP\nCODE:\n```\n$value = input('key', $default = null)\n```\n\n----------------------------------------\n\nTITLE: Using the Validation Service with Request Facade\nDESCRIPTION: PHP code that uses the Request facade to validate form inputs against specific rules. If validation passes, the validated data is returned as an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmit()\n{\n    $data = Request::validate([\n        'name' => 'required',\n        'email' => 'required|email',\n    ]);\n\n    // The code will not reach here if validation fails\n\n    Flash::success('Jobs done!');\n}\n```\n\n----------------------------------------\n\nTITLE: Using diffAssoc Method in PHP Collections\nDESCRIPTION: The diffAssoc method compares the collection against another collection or array based on both keys and values, returning key/value pairs that are not present in the given collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    'color' => 'orange',\n    'type' => 'fruit',\n    'remain' => 6\n]);\n\n$diff = $collection->diffAssoc([\n    'color' => 'yellow',\n    'type' => 'fruit',\n    'remain' => 3,\n    'used' => 6,\n]);\n\n$diff->all();\n\n// ['color' => 'orange', 'remain' => 6]\n```\n\n----------------------------------------\n\nTITLE: Using the pipe() Method in PHP Collections\nDESCRIPTION: The pipe method passes the collection to a callback and returns the result. This allows for custom processing of the collection using external functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3]);\n\n$piped = $collection->pipe(function ($collection) {\n    return $collection->sum();\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Defining a Placeholder with Default Content and Custom Attributes in Twig\nDESCRIPTION: Shows how to create a placeholder with default content, title, and type attributes for more complex use cases.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering default title=\"Ordering information\" type=\"text\" %}\n    There is no ordering information for this product.\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Checking for Multiple Sites in PHP\nDESCRIPTION: Demonstrates how to use the hasMultiSite method to check if multiple site definitions are available.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (Site::hasMultiSite()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Filter with Empty Option in YAML\nDESCRIPTION: Configuration for a dropdown filter that includes an empty option for the default state, displaying 'Select Status' when no filter is applied.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    type: dropdown\n    emptyOption: Select Status\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial with Fully Qualified Path in YAML\nDESCRIPTION: Shows how to configure a partial field with a fully qualified path to access partials outside the model or controller directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: $/acme/blog/partials/_field_content.php\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Conditions for Number Scope Filter in YAML\nDESCRIPTION: Illustrates how to use custom SQL statements for filter conditions, using placeholders for filter values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-number.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    conditions:\n        greater: age >= :value\n        between: age >= :min and age <= :max\n```\n\n----------------------------------------\n\nTITLE: Theme Version Configuration in YAML\nDESCRIPTION: Version.yaml file format showing version numbers and change log entries for theme updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/themes/development.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n1.0.1: Theme initialization\n1.0.2: Added more features\n1.0.3: Some features are removed\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in October CMS\nDESCRIPTION: Environment variables for configuring database connection settings in October CMS. These settings are typically stored in the .env file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDB_CONNECTION=mysql\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=database\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Defining List Column in Content Field Class\nDESCRIPTION: Implementation of the defineListColumn method to specify how the content field should appear in a list. It uses the defineColumn method to create the column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function defineListColumn(ListElement $list, $context = null)\n{\n    $list->defineColumn($this->fieldName, $this->label)->displayAs('switch');\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Backend and Console Execution in PHP\nDESCRIPTION: Demonstrates how to check if the current request is running in the backend administrative area or in the command line interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInBackend();\n```\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInConsole();\n```\n\n----------------------------------------\n\nTITLE: October Icon Definition in YAML\nDESCRIPTION: Shows how to reference an October icon in YAML configuration with the icon- prefix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/available-icons.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nicon: icon-october\n```\n\n----------------------------------------\n\nTITLE: Combining Queries with Union Method\nDESCRIPTION: Demonstrates how to use the union method to combine two separate queries. The example unions two queries that each select different sets of users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n    ->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Toolbar Button with AJAX Request for Selected Items (PHP)\nDESCRIPTION: Example of a toolbar button that sends selected item values to an AJAX request using the data-list-checked-request attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<button\n    type=\"button\"\n    class=\"btn btn-primary\"\n    data-request=\"onDelete\"\n    data-list-checked-request>\n    Delete Selected\n</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML5 Audio Player in OctoberCMS\nDESCRIPTION: This HTML snippet shows how to render a basic HTML5 audio player in OctoberCMS. It uses the 'audio' tag with controls and a source attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<audio src=\"audio.mp3\" controls></audio>\n```\n\n----------------------------------------\n\nTITLE: Using Component Alias for Multiple Sections in October CMS\nDESCRIPTION: Shows how to use a component alias to assign a different variable name when multiple sections are used on the same page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[section author]\nhandle = \"Blog\\Author\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Posts by {{ author.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Theme Asset Variables in LESS\nDESCRIPTION: Example of using a theme asset variable in a LESS file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_9\n\nLANGUAGE: less\nCODE:\n```\na { color: @link-color }\n```\n\n----------------------------------------\n\nTITLE: Numeric YAML Options Definition\nDESCRIPTION: Shows how to define options using integer keys with their corresponding labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/define-options.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    1: Simple\n    2: Complex\n```\n\n----------------------------------------\n\nTITLE: Creating File Instance from Raw Data in PHP\nDESCRIPTION: Demonstrates creating a File instance directly from raw data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$file = (new System\\Models\\File)->fromData('Some content', 'sometext.txt');\n```\n\n----------------------------------------\n\nTITLE: Extended List Export Configuration\nDESCRIPTION: YAML configuration showing multiple list definitions and extended options for list behavior export.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList: orders\n    fileName: orders.csv\n```\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList:\n        definition: orders\n        raw: true\n```\n\n----------------------------------------\n\nTITLE: Defining Image Resizing Parameters in Markdown\nDESCRIPTION: This snippet defines the basic parameters and options for image resizing in OctoberCMS. It includes width, height, and an array of options such as mode, offset, quality, and sharpen.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/image-resizing.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nKey | Description | Default | Options\n--- | --- | --- | ---\n`mode` | How the image should be fitted to dimensions | `auto` | `exact`, `portrait`, `landscape`, `auto`, `fit`, or `crop`\n`offset` | Offset the crop of the resized image | `[0,0]` | [left, top]\n`quality` | Quality of the resized image | `90` | `0-100`\n`sharpen` | Amount to sharpen the image | `0` | `0-100`\n```\n\n----------------------------------------\n\nTITLE: Data Table Column Configuration in YAML\nDESCRIPTION: Example showing how to configure columns in a data table with validation rules and custom settings for different fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datatable.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    id:\n        type: string\n        title: ID\n        validation:\n            integer:\n                message: Please enter a number\n    name:\n        type: string\n        title: Name\n```\n\n----------------------------------------\n\nTITLE: Adding a Component to a Page in October CMS\nDESCRIPTION: Demonstrates how to add a demo To-do component to a page in October CMS using the Configuration section of the template file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"Components demonstration\"\nurl = \"/components\"\n\n[demoTodo]\nmaxItems = 20\n==\n```\n\n----------------------------------------\n\nTITLE: Data Table Column Configuration Example in YAML\nDESCRIPTION: Example showing how to configure columns in a datatable with validation rules, including an ID field with integer validation and a Name field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datatable.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    id:\n        type: string\n        title: ID\n        validation:\n            integer:\n                message: Please enter a number\n    name:\n        type: string\n        title: Name\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Functions in Twig\nDESCRIPTION: Shows how to call functions with arguments to process data in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/templating.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(variable) }}\n```\n\n----------------------------------------\n\nTITLE: Using html() Function in Twig\nDESCRIPTION: Shows how to use html_strip() function in Twig templating. This function maps to the Html PHP class methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip() }}\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Cache Values in PHP\nDESCRIPTION: Examples of incrementing and decrementing integer values in the cache.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nCache::increment('key');\n\nCache::increment('key', $amount);\n\nCache::decrement('key');\n\nCache::decrement('key', $amount);\n```\n\n----------------------------------------\n\nTITLE: Checking for Existence of Error Messages for a Field in PHP\nDESCRIPTION: Shows how to check if error messages exist for a specific field using the has() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\nif ($messages->has('email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'once' Attribute for Single Insertion in Twig\nDESCRIPTION: Shows how to use the 'once' attribute to ensure content is only inserted once per template, useful for including scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% put scripts once %}\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.2/min/tiny-slider.js\"></script>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Dropdown Filter with Custom SQL Conditions in YAML\nDESCRIPTION: Configuration for a dropdown filter with custom SQL conditions where :value contains the filtered value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-dropdown.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    type: dropdown\n    conditions: status = :value\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Options Array in YAML\nDESCRIPTION: Demonstrates how to specify options directly as a key-value pair in YAML format. This is commonly used for simple option lists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    draft: Draft\n    published: Published\n    archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Default HTML5 Video Tag\nDESCRIPTION: Shows the default HTML5 video tag used by the system to render video files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"video.mp4\" controls></video>\n```\n\n----------------------------------------\n\nTITLE: Creating an Accessor for JSON Appending in PHP\nDESCRIPTION: Shows how to define an accessor method that creates a virtual attribute which can be included in serialized output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Get the administrator flag for the user.\n     *\n     * @return bool\n     */\n    public function getIsAdminAttribute()\n    {\n        return $this->attributes['admin'] == 'yes';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Theme Asset Path Resolution in Twig\nDESCRIPTION: Demonstrates using |theme filter to generate absolute URLs for theme assets like JavaScript files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<script type=\"text/javascript\" src=\"{{ 'assets/js/menu.js'|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Backend Controller for Settings\nDESCRIPTION: Example of registering a settings page that links to a custom backend controller using URL configuration instead of a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'location' => [\n            'label' => 'Locations',\n            'description' => 'Manage available user countries and states.',\n            'category' => 'Users',\n            'icon' => 'icon-globe',\n            'url' => Backend::url('acme/user/locations'),\n            'order' => 500,\n            'keywords' => 'geography place placement'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Dependencies in YAML\nDESCRIPTION: Example of how to specify plugin dependencies in the theme.yaml file using the require option, which lists plugins that should be installed with the theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"October CMS Demo\"\n# [...]\n\nrequire:\n    - \"Acme.User\"\n    - \"Acme.Blog\"\n```\n\n----------------------------------------\n\nTITLE: PHP Options Method Implementation\nDESCRIPTION: Implementation of a custom method for providing dynamic filter options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function getRoleGroupOptions()\n{\n    return $this->whereNull('parent_id')->pluck('name', 'id')->all();\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Form Helper between PHP and Twig\nDESCRIPTION: Shows how Form helper methods in PHP can be converted to Twig markup using snake_case naming convention.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// PHP\n<?= Form::open(..) ?>\n\n// Twig\n{{ form_open(...) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters in October CMS Twig Template\nDESCRIPTION: This snippet shows how to access a URL parameter when the parameter name is stored in a variable. It uses array syntax to retrieve the parameter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-param.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/account/:post_id\"\n==\n{% set name = 'post_id' %}\n\n<p>The post ID is: {{ this.param[name] }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Sorting for Stream Entries in YAML\nDESCRIPTION: Sets custom default sorting for a stream blueprint, ordering by title in ascending order. By default, stream entries are sorted by published date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: stream\nname: Blog Post\n\ndefaultSort:\n    column: title\n    direction: asc\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Injection in PHP Component\nDESCRIPTION: Basic example of injecting a JavaScript file using the onRun() method in an October CMS component. The path starts with a forward slash, making it relative to the website root.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Image with Thumbnail in Twig\nDESCRIPTION: Example of displaying an image with thumbnail options using Twig template syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/attachments.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ model.avatar.getThumb(100, 100, {'mode':'exact', 'quality': 80, 'extension': 'webp'}) }}\" alt=\"Description Image\" />\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination with Query Builder in PHP\nDESCRIPTION: Shows how to use simplePaginate method for efficient pagination with only next/previous navigation, helpful for large datasets where page number links aren't needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Configuring Fixed URL in October CMS\nDESCRIPTION: Example of defining a fixed URL for a page using the url configuration parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n```\n\n----------------------------------------\n\nTITLE: Using toJson() Method in PHP Collections\nDESCRIPTION: The toJson method converts the collection into a JSON string. This is useful when returning collection data for API responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'Desk', 'price' => 200]);\n\n$collection->toJson();\n\n// '{\"name\":\"Desk\",\"price\":200}'\n```\n\n----------------------------------------\n\nTITLE: Plugin Dependency Definition in PHP\nDESCRIPTION: Shows how to declare plugin dependencies in October CMS using the $require property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    /**\n     * @var array Plugin dependencies\n     */\n    public $require = ['Acme.User'];\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Command from Application Container in OctoberCMS\nDESCRIPTION: Shows how to register a console command that's registered in the application container using the Artisan::resolve method with the binding name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nArtisan::resolve('binding.name');\n```\n\n----------------------------------------\n\nTITLE: Color Picker Field Definition in YAML\nDESCRIPTION: Example of defining a color picker field for theme customization, which allows users to select custom colors for theme elements like links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nform:\n    fields:\n        # [...]\n\n        link_color:\n            label: Link color\n            type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Output of |app Filter for Static Page URL in Twig\nDESCRIPTION: This snippet demonstrates the expected output when using the |app filter for a static page URL. It assumes the website address is http://octobercms.com.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-app.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"http://octobercms.com/about-us\">\n    About us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Defining URL Parameters for a Page\nDESCRIPTION: Shows how to define URL parameters for a page that uses components with URL-based property values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/todo/:maxItems\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Related Fields with Model Scope in YAML\nDESCRIPTION: Demonstrates how to connect two related fields (Country and State) using modelScope and dependsOn properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: relation\n\nstate:\n    label: State\n    type: relation\n    dependsOn: country\n    modelScope: filterStates\n```\n\n----------------------------------------\n\nTITLE: Updating Partials using Data Attributes API\nDESCRIPTION: Shows how to update a partial using October CMS's data attributes API with data-request-update attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/update-partials.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRefreshTime\"\n    data-request-update=\"mytime: '#myDiv'\">\n    Go\n</button>\n```\n\n----------------------------------------\n\nTITLE: Permissions Configuration in YAML\nDESCRIPTION: Configuration for applying permission restrictions to form controller actions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    modelCreate: admins.manage.create\n    modelDelete: admins.manage.delete\n```\n\n----------------------------------------\n\nTITLE: AJAX Exception Handler\nDESCRIPTION: Shows how to throw an AJAX exception with custom error data while maintaining partial updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException([\n    'error' => 'Not enough questions',\n    'questionsNeeded' => 2\n]);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to HTTP Request\nDESCRIPTION: Demonstrates how to add custom headers to an HTTP request using the withHeaders method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nHttp::withHeaders([\n    'Rest-Key' => '...'\n])->post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Textarea Field Configuration in YAML\nDESCRIPTION: Basic implementation of a textarea field for blog contents with type and label properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-textarea.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nblog_contents:\n    type: textarea\n    label: Contents\n```\n\n----------------------------------------\n\nTITLE: Converting to DotEnv Configuration\nDESCRIPTION: Command to convert common configuration values to use DotEnv syntax for better environment-specific configuration management.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:env\n```\n\n----------------------------------------\n\nTITLE: Using crossJoin Method in PHP Collections\nDESCRIPTION: The crossJoin method performs a cross join between the collection's values and given arrays, creating a Cartesian product with all possible permutations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a'],\n        [1, 'b'],\n        [2, 'a'],\n        [2, 'b'],\n    ]\n*/\n\n$collection = new Collection([1, 2]);\n\n$matrix = $collection->crossJoin(['a', 'b'], ['I', 'II']);\n\n$matrix->all();\n\n/*\n    [\n        [1, 'a', 'I'],\n        [1, 'a', 'II'],\n        [1, 'b', 'I'],\n        [1, 'b', 'II'],\n        [2, 'a', 'I'],\n        [2, 'a', 'II'],\n        [2, 'b', 'I'],\n        [2, 'b', 'II'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Checking for Hidden Page Status in OctoberCMS Twig\nDESCRIPTION: Demonstrates how to use the this.page.hidden property to conditionally display content only visible to logged-in backend users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.page.hidden %}\n    <p>Note to other admins: We are currently working on this page.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Overriding Localization Strings in JSON\nDESCRIPTION: Shows how to override plugin localization strings by creating a custom JSON file in the app/lang directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"Coding is the best!\",\n    \"rainlab.blog::lang.post_label\": \"Article\"\n}\n```\n\n----------------------------------------\n\nTITLE: Named Collection Component with Alias in October CMS\nDESCRIPTION: Example showing how to use a named collection component with an alias ('posts') which becomes the variable name available to the page instead of the default 'collection' variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[collection posts]\nhandle = \"Blog\\Post\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for post in posts %}\n    <h1>{{ post.title }}</h1>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Headers with Resources Component in October CMS\nDESCRIPTION: Demonstrates how to set custom headers using the resources component. In this example, it sets the Content-Type header to 'text/xml' for rendering XML content instead of HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/resources.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/rss\"\n\n[resources]\nheaders[Content-Type] = 'text/xml'\n```\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss version=\"2.0\" xmlns:atom=\"http://www.w3.org/2005/Atom\">\n    <!-- RSS contents here -->\n</rss>\n```\n\n----------------------------------------\n\nTITLE: Storing Files in October CMS\nDESCRIPTION: Examples of storing files using the put method. This shows storing both file contents as a string and as a PHP resource for handling large files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nStorage::put('file.jpg', $contents);\n\nStorage::put('file.jpg', $resource);\n```\n\n----------------------------------------\n\nTITLE: Accessing Failed Validation Rules in PHP\nDESCRIPTION: Shows how to access an array of failed validation rules without messages using the failed() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$failed = $validator->failed();\n```\n\n----------------------------------------\n\nTITLE: HTML Output of |app Filter for Favicon URL\nDESCRIPTION: Shows the resulting HTML output when using the |app filter for a favicon URL. This example assumes the website address is https://octobercms.com.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-app.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"https://octobercms.com/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Template Structure with Configuration, PHP, and Twig Sections\nDESCRIPTION: Illustrates the three-section structure of a CMS template, including configuration (INI), PHP code, and Twig markup sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/themes.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['posts'] = [...];\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>Blog archive</h3>\n{% for post in posts %}\n    <h4>{{ post.title }}</h4>\n    {{ post.content }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Multiple Conditions with Elseif and Else in Twig\nDESCRIPTION: A more complex conditional example using if, elseif, and else blocks. This snippet demonstrates checking multiple conditions and displaying different messages based on each possible state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-if.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if kenny.sick %}\n    ËÇØÂ∞ºÁóÖ‰∫Ü„ÄÇ\n{% elseif kenny.dead %}\n    ‰Ω†ÊùÄ‰∫ÜËÇØÂ∞ºÔºÅ ‰Ω†Ëøô‰∏™Ê∑∑ËõãÔºÅÔºÅÔºÅ\n{% else %}\n    Âà∞ÁõÆÂâç‰∏∫Ê≠¢ÔºåËÇØÂ∞ºÁúãËµ∑Êù•Ëøò‰∏çÈîô„ÄÇ\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Relation in Blueprint YAML for October CMS\nDESCRIPTION: YAML configuration for defining an inverse relation on a category blueprint named 'posts', setting up the relationship between blog posts and categories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/collection.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nposts:\n    type: entries\n    source: Blog\\Post\n    inverse: categories\n    hidden: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Field Widget in YAML\nDESCRIPTION: Example configuration for a sensitive field widget that disables copy functionality and enables auto-hiding on tab change. Used for securely handling API secrets and sensitive information with customizable visibility controls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-sensitive.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napi_secret:\n    type: sensitive\n    allowCopy: false\n    hideOnTabChange: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Editor Widget in YAML\nDESCRIPTION: Defines a code editor widget in a form using YAML configuration. The 'type' property is set to 'codeeditor' and includes options for language, size, and other editor preferences.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ncss_content:\n    type: codeeditor\n    size: huge\n    language: html\n```\n\n----------------------------------------\n\nTITLE: Options Preset Definition\nDESCRIPTION: Shows how to use predefined option presets for common use cases like icons and locales.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/define-options.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noptionsPreset: icons\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-Specific Configuration Override in October CMS\nDESCRIPTION: Example of creating an environment-specific configuration override file to customize plugin settings for different environments like production.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => 25\n];\n```\n\n----------------------------------------\n\nTITLE: Example Campaign Run Command\nDESCRIPTION: Example of an artisan command that might need to be run periodically for campaign management.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/scheduler.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan campaign:run\n```\n\n----------------------------------------\n\nTITLE: Checking if a File Exists\nDESCRIPTION: Demonstrates how to check if a file exists on a specific disk, in this case S3 storage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$exists = Storage::disk('s3')->exists('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Messages in HTML Form\nDESCRIPTION: Shows how to display error messages in an HTML form using data-validate-error and data-message attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"alert alert-danger\" data-validate-error>\n    <p data-message></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Property Definition in PHP\nDESCRIPTION: Example of defining a basic string property for a CMS component using the defineProperties method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector-types.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'maxItems' => [\n            'title' => 'Max Items',\n            'type' => 'string'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Unencrypted Cookies in October CMS Plugins\nDESCRIPTION: How to dynamically add cookies to the unencrypted cookies list from a plugin's boot method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::push('cookie.unencryptedCookies', \"my_cookie\");\n}\n```\n\n----------------------------------------\n\nTITLE: Content Replacement in Placeholders\nDESCRIPTION: Using the replace attribute to replace existing placeholder content instead of appending to it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% put name replace %}\n    <p>Replace all the content inside with this</p>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Basic Currency Column Implementation in YAML for October CMS\nDESCRIPTION: Defines a basic currency column implementation for displaying monetary values in a list. The column is configured with a label and type property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-currency.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Loan amount\n    type: currency\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Custom Display Attributes in YAML\nDESCRIPTION: Configuration for a recordfinder field that customizes which attributes from the related model are used for displaying selected records. This example uses the name field for the main text and email for the description.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    nameFrom: name\n    descriptionFrom: email\n```\n\n----------------------------------------\n\nTITLE: Generating CSS-friendly Page Identifier in Twig\nDESCRIPTION: Shows how to create a CSS-friendly identifier for the current page using the id property of this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"page-{{ this.page.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Using Original Filename with Twig Resize Filter\nDESCRIPTION: Shows how to preserve the original filename when using the resize filter by setting the 'filename' option to true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { filename: true }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Global AJAX Progress Detection\nDESCRIPTION: CSS selectors for detecting global AJAX request progress.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nhtml[data-ajax-progress] {\n    /* Display loading indicators */\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in AJAX Response in HTML\nDESCRIPTION: This example demonstrates how to handle file downloads in an AJAX response using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onDownloadFile\" data-request-download>\n    Download\n</button>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Code for Soft Implementation\nDESCRIPTION: Example showing the equivalent code for soft implementation of a behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [];\n\n    public function __construct()\n    {\n        if (class_exists('\\RainLab\\Translate\\Behaviors\\TranslatableModel')) {\n            $this->implement[] = \\RainLab\\Translate\\Behaviors\\TranslatableModel::class;\n        }\n\n        parent::__construct();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Editor Widget in October CMS\nDESCRIPTION: Example configuration for the markdown editor widget with split mode view and huge size.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nmd_content:\n    type: markdown\n    size: huge\n    mode: split\n```\n\n----------------------------------------\n\nTITLE: Flushing Queued Events in October CMS - PHP\nDESCRIPTION: Example of using Event::flush to process all queued events of a specific type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nEvent::flush('foo');\n```\n\n----------------------------------------\n\nTITLE: Example Paginator JSON Structure\nDESCRIPTION: Example of the JSON structure returned when a paginator instance is converted to JSON, including metadata and the actual results in the data property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 50,\n    \"per_page\": 15,\n    \"current_page\": 1,\n    \"last_page\": 4,\n    \"next_page_url\": \"http://octobercms.app?page=2\",\n    \"prev_page_url\": null,\n    \"from\": 1,\n    \"to\": 15,\n    \"data\":[\n        {\n            // Result Object\n        },\n        {\n            // Result Object\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response with Flash Data in PHP\nDESCRIPTION: Shows how to create a redirect response and flash data to the session in a single method chain.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login')->with('message', 'Login Failed');\n```\n\n----------------------------------------\n\nTITLE: Checking for Non-Empty Array in Twig\nDESCRIPTION: Shows how to check if an array is not empty and iterate over its contents. This example displays a list of usernames if the 'users' array is not empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-if.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if users %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Content with Layout Placeholders in Twig\nDESCRIPTION: Demonstrates using content blocks within layout placeholders\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    {% content 'sidebar-content.htm' %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Settings\nDESCRIPTION: PHP configuration array for Mailgun service settings including domain, secret key and API endpoint\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'mailgun' => [\n    'domain' => 'your-mailgun-domain',\n    'secret' => 'your-mailgun-key',\n    'endpoint' => 'api.mailgun.net', // api.eu.mailgun.net for EU\n],\n```\n\n----------------------------------------\n\nTITLE: Checking if Input Value Exists\nDESCRIPTION: Demonstrates how to check if a particular input value exists in the request before attempting to use it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Input::has('name')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Field Form Widget with Formatting Option in YAML\nDESCRIPTION: YAML configuration for a currency input field with a specific format property. The 'short' format affects how the currency value appears in preview contexts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-currency.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Total amount\n    type: currency\n    format: short\n```\n\n----------------------------------------\n\nTITLE: Implementing SimpleTree Trait in October CMS Model\nDESCRIPTION: Shows how to use the SimpleTree trait to create parent-child relationships between models using parent_id.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass Category extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SimpleTree;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Provider at Runtime in October CMS\nDESCRIPTION: Shows how to register a service provider during application execution instead of through the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nApp::register('FooServiceProvider');\n```\n\n----------------------------------------\n\nTITLE: Forcing Specific URL for All Links\nDESCRIPTION: Configuration to force the application URL defined in app.url to be used for every link generated by the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nLINK_POLICY=force\n```\n\n----------------------------------------\n\nTITLE: Creating Slugs from Multiple Sources in October CMS\nDESCRIPTION: Demonstrates how to generate a slug from multiple source attributes by providing an array of field names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nprotected $slugs = [\n    'slug' => ['first_name', 'last_name']\n];\n```\n\n----------------------------------------\n\nTITLE: ËÆæÁΩÆÂç†‰ΩçÁ¨¶ÁöÑËá™ÂÆö‰πâÂ±ûÊÄß\nDESCRIPTION: Â±ïÁ§∫Â¶Ç‰Ωï‰∏∫Âç†‰ΩçÁ¨¶ËÆæÁΩÆtitleÂíåtypeËá™ÂÆö‰πâÂ±ûÊÄßÔºåtypeÂ±ûÊÄßÂèØ‰ª•ÊòØtextÊàñhtmlÔºåÂΩ±ÂìçÂÜÖÂÆπÁöÑËΩ¨‰πâÂ§ÑÁêÜ„ÄÇ\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-placeholder.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering title=\"ËÆ¢Ë¥≠‰ø°ÊÅØ\" type=\"text\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating Range-Based Dropdowns\nDESCRIPTION: Shows how to generate a dropdown with numeric options in a range.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectRange('number', 10, 20) ?>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of |currency Twig Filter\nDESCRIPTION: Demonstrates the basic usage of the |currency Twig filter to display a currency value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 100|currency }}\n```\n\n----------------------------------------\n\nTITLE: Creating Form View for Preview Page in October CMS\nDESCRIPTION: Provides an example of a preview.htm view file for the Preview page in October CMS. It demonstrates how to render a form in read-only mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"form-preview\">\n    <?= $this->formRenderPreview() ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic URL Parameters in Twig Templates\nDESCRIPTION: Demonstrates how to access a URL parameter using a variable name in a Twig template, useful when the parameter name is not known in advance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-param.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% set name = 'post_id' %}\n\n<p>The post ID is: {{ this.param[name] }}</p>\n```\n\n----------------------------------------\n\nTITLE: Relationship Definition with Filters\nDESCRIPTION: Shows how to define relationships with ordering and condition parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'categories' => [\n        \\Acme\\Blog\\Models\\Category::class,\n        'order' => 'name desc',\n        'conditions' => 'is_active = 1'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Logging Trace Messages in PHP\nDESCRIPTION: The trace_log function writes a trace message to the log file. It supports various data types and multiple arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_41\n\nLANGUAGE: PHP\nCODE:\n```\ntrace_log('This code has passed...');\n\ntrace_log($exception);\n\ntrace_log($array);\n\ntrace_log($object);\n\ntrace_log($value1, $value2, $exception, '...');\n```\n\n----------------------------------------\n\nTITLE: Basic Styles Tag Implementation in HTML\nDESCRIPTION: Shows how to implement the {% styles %} tag in the HEAD section of a page or layout to render CSS links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-styles.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Component Markup with Renamed Variables\nDESCRIPTION: This snippet shows how to replace the __SELF__ variable with the component alias in the markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ blogPost.post.title }}</h1>\n<p>{{ blogPost.post.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Hours-Only Time Picker Configuration in YAML\nDESCRIPTION: Demonstrates setting up a time picker that only allows hour selection, simplifying time input when minute precision is not required.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datepicker.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbirth_hour:\n    label: Hour Born\n    type: datepicker\n    mode: time\n    hoursOnly: true\n```\n\n----------------------------------------\n\nTITLE: Customizing Sort Order Column in October CMS Models\nDESCRIPTION: Shows how to change the column name used for sorting by defining a custom SORT_ORDER constant.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nconst SORT_ORDER = 'my_sort_order_column';\n```\n\n----------------------------------------\n\nTITLE: PHP Component Partial Rendering\nDESCRIPTION: Examples of rendering component partials programmatically in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$content = $this->renderPartial('@component-partial.htm');\n\n$content = $this->renderPartial('@component-partial.htm', [\n    'name' => 'John Smith'\n]);\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onGetTemplate()\n{\n    return ['#someDiv' => $this->renderPartial('@component-partial.htm')];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $content = $this->renderPartial('@default.htm');\n    return Response::make($content)->header('Content-Type', 'text/xml');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Console Commands in OctoberCMS Application Container\nDESCRIPTION: This snippet shows how to register a console command that is bound in the OctoberCMS application container using the Artisan::resolve method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nArtisan::resolve('binding.name');\n```\n\n----------------------------------------\n\nTITLE: Setting Default Text Input Values\nDESCRIPTION: Demonstrates how to create a text input with a default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::text('email', 'emailaddress@example.com') ?>\n```\n\n----------------------------------------\n\nTITLE: Handling Modal Content in PHP\nDESCRIPTION: Shows how to handle the AJAX request for loading modal content in PHP. This example uses an event listener to intercept the request and return a partial view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.ajax.beforeRunHandler', function ($controller, $handler) {\n    if ($handler === 'onLoadPopup') {\n        return $controller->makePartial('~/path/to/my/partials/_popup_form.php');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Timezone Conversion for Date Column in October CMS\nDESCRIPTION: Configures a date column with timezone conversion enabled. This is useful when the date value includes a time component that should be converted to the backend timezone.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n    useTimezone: true\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw Data in Emails with Twig\nDESCRIPTION: Shows how to embed raw data as images in email content using Twig syntax in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image from raw data:\n\n    <img src=\"{{ message.embedData(data, name) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Column in October CMS\nDESCRIPTION: Defines a list column that displays only the date portion in 'M j, Y' format (e.g., 'Dec 25, 1975'). By default, timezone conversion is not applied to date columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n```\n\n----------------------------------------\n\nTITLE: Configuring List Integration with Multiple Definitions in YAML\nDESCRIPTION: Shows how to configure the ImportExportController to use a specific list definition when multiple are available. It also specifies a custom file name for the exported CSV.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList: orders\n    fileName: orders.csv\n```\n\n----------------------------------------\n\nTITLE: Using array_first Helper Function in PHP\nDESCRIPTION: The array_first function returns the first element in an array that passes a given truth test callback. An optional default value can be specified if no matches are found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, 200, 300];\n\n$value = array_first($array, function ($key, $value) {\n    return $value >= 150;\n});\n\n// 200\n\n$value = array_first($array, $callback, $default);\n```\n\n----------------------------------------\n\nTITLE: Using Date Mutators\nDESCRIPTION: Demonstrates setting and accessing date values that use mutators\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->disabled_at = Carbon::now();\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Flash Message Types\nDESCRIPTION: Illustrates how to specify which types of flash messages should be displayed using comma-separated values in the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request-flash=\"success,warning\"></form>\n```\n\n----------------------------------------\n\nTITLE: Using duplicates Method in PHP Collections\nDESCRIPTION: The duplicates method retrieves and returns duplicate values from the collection with their original keys preserved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['a', 'b', 'a', 'c', 'b']);\n\n$collection->duplicates();\n\n// [2 => 'a', 4 => 'b']\n\n$employees = new Collection([\n    ['email' => 'samantha@example.tld', 'position' => 'Developer'],\n    ['email' => 'john@example.tld', 'position' => 'Designer'],\n    ['email' => 'elaine@example.tld', 'position' => 'Developer'],\n])\n\n$employees->duplicates('position');\n\n// [2 => 'Developer']\n```\n\n----------------------------------------\n\nTITLE: Folder Mode Media Finder Configuration\nDESCRIPTION: Configuration for a Media Finder field in folder mode, which only allows selection of media folder paths.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-mediafinder.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmedia_folder:\n    label: Media Folder\n    type: mediafinder\n    mode: folder\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectList with KeyProperty for Associative Arrays\nDESCRIPTION: Example showing how to configure an objectList with the keyProperty option to generate associative arrays, where a specified property serves as the key for each object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-objectlist.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'objectList',\n            'titleProperty' => 'fullName',\n            'keyProperty' => 'login',\n            'itemProperties' => [\n                'fullName' => [\n                    'title' => 'Full Name',\n                    'type' => 'string'\n                ],\n                'login' => [\n                    'title' => 'Login',\n                    'type' => 'string'\n                ],\n                'address' => [\n                    'title' => 'Address',\n                    'type' => 'string'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Link URL and Text in YAML\nDESCRIPTION: Configuration for providing explicit URL and text for a linkage column, which supports backend URIs with dynamic parameters resolved from the record.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-linkage.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nopen_link:\n    label: View\n    type: linkage\n    linkText: View Dashboard\n    linkUrl: backend/index/:code/:id\n```\n\n----------------------------------------\n\nTITLE: Checking Method Existence in Extendable Classes\nDESCRIPTION: Shows how to check if a method exists in an Extendable class using methodExists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicMethod('getTagsAttribute', function () use ($model) {\n        return $this->tagsCache;\n    });\n});\n\n$post = new Post;\n\n$post->methodExists('getTagsAttribute'); // true\n$post->methodExists('missingMethod'); // false\n```\n\n----------------------------------------\n\nTITLE: INI Configuration Example\nDESCRIPTION: Example of an INI configuration file format showing basic key-value pairs and sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nreceipt = \"Acme Purchase Invoice\"\ndate = \"2015-10-02\"\n\n[user]\nname = \"Joe\"\nsurname = \"Blogs\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Plugin Version File in YAML\nDESCRIPTION: Example of a version.yaml file showing various update formats including simple version comments and references to migration and seed files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/updates.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: First version\nv1.0.2: Second version\nv1.0.3:\n    - Update with a migration and seed\n    - create_tables.php\n    - seed_the_database.php\nv2.0.0: Important update\nv2.0.1: Latest version\n```\n\n----------------------------------------\n\nTITLE: Email Field Validation in YAML\nDESCRIPTION: Configuration for an email form field with server-side validation using the validation property in Tailor fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-email.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuser_email:\n    label: Email Address\n    type: email\n    validation: email\n```\n\n----------------------------------------\n\nTITLE: Defining Behaviors Example\nDESCRIPTION: Example showing how to define a behavior class that extends ExtensionBase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UtilityFunctions extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $parent;\n\n    public function __construct($parent)\n    {\n        $this->parent = $parent;\n    }\n\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this->parent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using app_path() Function in PHP\nDESCRIPTION: The app_path function returns the fully qualified path to the app directory. It can also generate a path to a specific file relative to the app directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$path = app_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = app_path('Http/Controllers/Controller.php');\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Relationships in OctoberCMS\nDESCRIPTION: Example showing how to order eager loaded relationships. This loads users with their posts, ordering the posts by creation date in descending order.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\\n    'posts' => function ($query) {\\n        $query->orderBy('created_at', 'desc');\\n    }\\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with Detail Data\nDESCRIPTION: Shows how to include additional data when dispatching control events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nthis.dispatch('ready', { detail: {\n    foo: 'bar'\n}});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Radio List Options in PHP\nDESCRIPTION: Shows how to implement a method that returns dynamic options for a radio list, including labels and descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-radio.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function listAccessLevels($fieldName, $value, $formData)\n{\n    return [\n        'all' => ['All', 'Guests and customers will be able to access this page.'],\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Multisite Sync Mode\nDESCRIPTION: Shows how to set the sync mode for multisite, which keeps records synchronized across all sites while allowing content to be different per site.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmultisite: sync\n```\n\n----------------------------------------\n\nTITLE: Disabling Fields in Lists and Filters for October CMS Tailor\nDESCRIPTION: Example showing how to disable a field from appearing in lists and filters by setting the column and scope properties to false, while still keeping it as a form field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmyfield:\n    label: Form Label\n    column: false\n    scope: false\n```\n\n----------------------------------------\n\nTITLE: Using ends_with() String Helper in PHP\nDESCRIPTION: The ends_with function determines if the given string ends with the given value. It returns a boolean indicating whether the string has the specified ending.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$value = ends_with('This is my name', 'name');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Using html_strip() with Allowable Tags\nDESCRIPTION: Demonstrates how to use html_strip() with a parameter for allowable tags that should not be removed from the content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n// Outputs: <p>Text</p>\n{{ '<p><b>Text</b></p>'|html_strip('<p>') }}\n```\n\n----------------------------------------\n\nTITLE: Checking Cache Item Existence in PHP\nDESCRIPTION: Example of using the 'has' method to check if an item exists in the cache.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Cache::has('key')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Image Attachments in Twig\nDESCRIPTION: Examples of embedding inline images in email content using Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image:\n\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n\n<body>\n    Here is an image:\n    {% set pathToFile = 'storage/app/media/path/to/file.jpg'|app %}\n    <img src=\"{{ message.embed(pathToFile) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Human-Readable Date Differences in Twig\nDESCRIPTION: Examples of using diffForHumans() to display relative time differences.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/carbon.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon(post.published_at).diffForHumans() }}\n```\n\n----------------------------------------\n\nTITLE: Toolbar Button with List Checkboxes Trigger (PHP)\nDESCRIPTION: Example of a toolbar button that becomes enabled when list checkboxes are selected using the data-list-checked-trigger attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<button\n    type=\"button\"\n    class=\"btn btn-primary\"\n    data-list-checked-trigger>\n    Delete Selected\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Finder Widget in YAML\nDESCRIPTION: Configuration for a record finder widget that enables searching and selecting related records with custom display options and search conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    list: ~/plugins/rainlab/user/models/user/columns.yaml\n    recordsPerPage: 10\n    title: Find Record\n    prompt: Click the Find button to find a user\n    keyFrom: id\n    nameFrom: name\n    descriptionFrom: email\n    conditions: email = \"bob@example.com\"\n    scope: whereActive\n    searchMode: all\n    searchScope: searchUsers\n    useRelation: false\n    modelClass: RainLab\\User\\Models\\User\n```\n\n----------------------------------------\n\nTITLE: Content Block Variable Usage - HTML\nDESCRIPTION: Example showing how to use passed variables within a content block using curly bracket syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/content.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>This is a demo for {name}</h1>\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Twig\nDESCRIPTION: Demonstrates string concatenation using the tilde (~) operator in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Your name: ' ~ name }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Channel in October CMS\nDESCRIPTION: Sets the default logging channel in the configuration file. This example changes the logging mode from single file to daily log files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('LOG_CHANNEL', 'daily'),\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Scroll on PJAX Navigation\nDESCRIPTION: This HTML example shows how to prevent automatic scrolling to the top of the page when navigating with PJAX, useful for filter-like links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/\" data-turbo-no-scroll>Filter</a>\n```\n\n----------------------------------------\n\nTITLE: Placing Navigation Items in Content Area\nDESCRIPTION: Configuration for placing navigation items in the Content area of the admin panel.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    parent: content\n```\n\n----------------------------------------\n\nTITLE: Appending Parameters to Pagination Links in Twig\nDESCRIPTION: Demonstrates how to append additional query parameters to pagination links using the appends method in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ users.appends({sort: 'votes'}).render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Display using PHP Currency Facade\nDESCRIPTION: Shows how to format currency display in long and short formats using the Currency facade in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// $10.00 USD\nCurrency::format(1000, ['format' => 'long']);\n\n// $10\nCurrency::format(1000, ['format' => 'short']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multisite Features in PHP\nDESCRIPTION: Shows how to configure optional multisite features using the configuration file config/multisite.php.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'features' => [\n    'cms_maintenance_setting' => false,\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Getting File Paths of Multiple Attachments in PHP\nDESCRIPTION: Demonstrates how to get file paths for multiple file attachments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nforeach ($model->photos as $photo) {\n    echo $photo->getPath();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox List Configuration in YAML\nDESCRIPTION: Basic example of configuring a checkbox list field with permissions options. Demonstrates setting the label, type, and defining multiple checkbox options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkboxlist.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    options:\n        open_account: Open account\n        close_account: Close account\n        modify_account: Modify account\n```\n\n----------------------------------------\n\nTITLE: Nested Eager Loading in OctoberCMS\nDESCRIPTION: Example demonstrating nested eager loading using dot notation. This loads books, their authors, and the authors' contact information in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author.contacts')->get();\n```\n\n----------------------------------------\n\nTITLE: Twig If Statement with Not Operator\nDESCRIPTION: Demonstrates using the 'not' operator to check for false conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/if.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% if not user.subscribed %}\n    <p>You are not subscribed to our mailing list.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Creating JSONP Response in PHP\nDESCRIPTION: Demonstrates creating a JSONP response by using the json method and setCallback.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA'])\n    ->setCallback(Input::get('callback'));\n```\n\n----------------------------------------\n\nTITLE: Using shuffle() Method with collect()\nDESCRIPTION: Shuffling a collection of items using the shuffle() method. This example demonstrates a simple one-line implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/collect.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ collect(songs).shuffle() }}\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Eager Loaded Relationships\nDESCRIPTION: This snippet demonstrates how to add query constraints to eager loaded relationships using a closure function to filter results.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->where('title', 'like', '%first%');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Behavior Implementation\nDESCRIPTION: Examples of dynamically implementing and checking behaviors in a class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nUsersController::extend(function($controller) {\n    $controller->implementClassWith(\\Backend\\Behaviors\\RelationController::class);\n});\n```\n\n----------------------------------------\n\nTITLE: Version Update with Migration Files in YAML\nDESCRIPTION: Shows how to define migration and seed files to be executed during a specific version update.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nv1.1.1:\n    - Ê≠§Êõ¥Êñ∞Â∞ÜÊâßË°å‰ª•‰∏ã‰∏§‰∏™ËÑöÊú¨„ÄÇ\n    - some_upgrade_file.php\n    - some_seeding_file.php\n```\n\n----------------------------------------\n\nTITLE: Permanent URL Redirection in Twig\nDESCRIPTION: Shows how to perform a permanent (301) redirect to an external URL using the redirect() function with a status code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-redirect.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('https://octobercms.com', 301) %}\n```\n\n----------------------------------------\n\nTITLE: Using str_pad_left Filter for Left-side Padding\nDESCRIPTION: Shows how to use str_pad_left filter to pad a string to a certain length with another string from the left side.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'xxx'|str_pad_left(5, 'o') }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching for Turbo Router in HTML\nDESCRIPTION: Demonstrates how to disable page caching for individual pages using the 'turbo-cache-control' meta tag with 'no-cache' or 'no-preview' values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"turbo-cache-control\" content=\"no-cache\">\n</head>\n```\n\n----------------------------------------\n\nTITLE: Creating Radio Form Fields in October CMS\nDESCRIPTION: Shows how to create a radio button group with multiple options using value:label pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{radio name=\"radio\" label=\"Thoughts?\" options=\"y:Yes|n:No|m:Maybe\"}{/radio}\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Binding with Pivot Data\nDESCRIPTION: This snippet demonstrates how to use deferred binding with a session key while including pivot data for many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->add($role, $sessionKey, $pivotData);\n```\n\n----------------------------------------\n\nTITLE: Basic Summary Column Configuration in YAML\nDESCRIPTION: Basic implementation of a summary column that strips HTML and limits content length to 40 characters by default.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-summary.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox Filter Scope in YAML for October CMS\nDESCRIPTION: This snippet demonstrates how to set up a checkbox filter scope in October CMS. It shows the basic structure including the label, type, and conditions properties. The filter is used to hide published items when checked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nis_published:\n    label: Hide Published\n    type: checkbox\n    conditions: is_published <> true\n```\n\n----------------------------------------\n\nTITLE: Textarea Field Size Configuration in YAML\nDESCRIPTION: Example showing how to set the size property of a textarea field. Supports sizes: tiny, small, large, huge, giant.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-textarea.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nblog_contents:\n    type: textarea\n    label: Contents\n    size: large\n```\n\n----------------------------------------\n\nTITLE: Creating a New Theme from Existing Theme in October CMS\nDESCRIPTION: This command creates a copy of an existing theme named 'demo' as a new theme called 'demo-copy'. The command copies the directory and its contents, and removes any .themelock file during the process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/child-themes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo demo-copy\n```\n\n----------------------------------------\n\nTITLE: Deleting Files\nDESCRIPTION: Shows how to delete a single file or multiple files by passing an array of filenames.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nStorage::delete('file.jpg');\n\nStorage::delete(['file1.jpg', 'file2.jpg']);\n```\n\n----------------------------------------\n\nTITLE: Accessing ViewBag Properties in Layout\nDESCRIPTION: Demonstrates how to access ViewBag properties in a layout file to create dynamic markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\ndescription = \"Default layout\"\n==\n[...]\n\n<!-- Main navigation -->\n<ul>\n    <li class=\"{{ viewBag.activeMenu == 'about' ? 'active' }}\">About</li>\n    [...]\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Finder in October CMS\nDESCRIPTION: Shows how to create a media library file selector and its Twig rendering with the media filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{mediafinder name=\"logo\" label=\"Logo\"}defaultlogo.png{/mediafinder}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ logo|media }}\n```\n\n----------------------------------------\n\nTITLE: Returning a 404 Response from Component onRun Method\nDESCRIPTION: Code example showing how to return a 404 response from a component's onRun method to indicate a resource was not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    if (true) {\n        $this->setStatusCode(404);\n        return $this->controller->run('404');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Queue-Specific Mail Delivery in PHP\nDESCRIPTION: Shows how to push mail messages to specific queues using queueOn and laterOn methods with custom queue names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nMail::queueOn('queue-name', 'acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n\nMail::laterOn('queue-name', 5, 'acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Deferred Binding for a Model\nDESCRIPTION: This code shows how to disable deferred binding for a model by setting the sessionKey to null in the saveInternal event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    $result = parent::__construct(...func_get_args());\n\n    $this->bindEvent('model.saveInternal', function () {\n        $this->sessionKey = null;\n    });\n\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Methods in Extendable Classes\nDESCRIPTION: Example showing how to retrieve a list of all available methods in an Extendable class, including dynamically added ones.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicMethod('getTagsAttribute', function () use ($model) {\n        return $this->tagsCache;\n    });\n});\n\n$post = new Post;\n\n$methods = $post->getClassMethods();\n\n/**\n * $methods = [\n *   0 => '__construct',\n *   1 => 'extend',\n *   2 => 'getTagsAttribute',\n *   ...\n * ];\n */\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Content Structure in HTML\nDESCRIPTION: Defines the basic structure of a modal window using Bootstrap 5 components, including header, body, and footer sections with close and action buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/modals.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <h5 class=\"modal-title\">\n            Modal Title\n        </h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n    </div>\n    <div class=\"modal-body\">\n        <p>Modal body text goes here.</p>\n    </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n            Close\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\">\n            Save changes\n        </button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Text Field with Default Value in YAML\nDESCRIPTION: Shows how to configure a text field with a default value property set to populate initial content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-text.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nquote_content:\n    type: text\n    label: Details\n    default: I like turtles\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload in PHP AJAX Handler\nDESCRIPTION: PHP code for an AJAX handler that processes a single file upload. The code uses the files() helper function to access the uploaded file and store it in the storage/app/userfiles directory with a generated filename.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/uploads.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onUploadFiles()\n{\n    $filePath = files('single_file')->store('userfiles');\n\n    // ...\n\n    Flash::success('File saved');\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array Notation for Validation Rules in PHP\nDESCRIPTION: Demonstrates using array notation in validation rules which will be converted to dot notation automatically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(Input::all(), [\n    'photos[profile]' => 'required|image',\n    'person[][email]' => 'email|unique:users',\n]);\n```\n\n----------------------------------------\n\nTITLE: Nested Macro Definition in Twig\nDESCRIPTION: Demonstrates how to use a macro inside another macro by importing it locally.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input(name, value, type, size) %}\n    <input\n        type=\"{{ type|default('text') }}\"\n        name=\"{{ name }}\"\n        value=\"{{ value|e }}\"\n        size=\"{{ size|default(20) }}\" />\n{% endmacro %}\n\n{% macro wrapped_input(name, value, type, size) %}\n    {% import _self as form %}\n\n    <div class=\"field\">\n        {{ form.input(name, value, type, size) }}\n    </div>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Partials in Twig\nDESCRIPTION: Demonstrates how to pass variables to a partial when rendering it. Variables are specified after the partial name in the {% partial %} tag, making partials more reusable across different contexts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"blog-posts\" posts=posts %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using html_email() for Email Obfuscation\nDESCRIPTION: Demonstrates how to obfuscate an email address to protect it from spam harvesting bots while keeping it functional.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'me@mysite.tld'|html_email }}\n```\n\n----------------------------------------\n\nTITLE: Setting Content to Twig Variable\nDESCRIPTION: Shows how to assign content to a Twig variable for manipulation\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm') %}\n\n{{ welcomeContent|raw }}\n```\n\n----------------------------------------\n\nTITLE: Global Mail Variable Registration in PHP\nDESCRIPTION: Shows how to register global variables available to all mail templates using View::share.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nView::share('site_name', 'October CMS');\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Structure in YAML for October CMS\nDESCRIPTION: YAML configuration for enabling record reordering in a relation. It sets showReorder to true and showTree to false for sorting related records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/structures.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    #...\n    structure:\n        showReorder: true\n        showTree: false\n```\n\n----------------------------------------\n\nTITLE: Accessing Placeholder Variables in Layouts\nDESCRIPTION: Shows how to retrieve placeholder variables using the placeholder() Twig function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/pages.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ placeholder('pageTitle') }}</title>\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Widget in YAML\nDESCRIPTION: Example of how to configure a filter widget in a YAML file, setting properties defined in the widget class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndiscount:\n    label: Discount\n    type: discount\n    allowSearch: true\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Operators with Relationship Queries in OctoberCMS\nDESCRIPTION: Example showing how to use comparison operators with the has() method to refine relationship existence queries. This retrieves posts with three or more comments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have three or more comments...\\n$posts = Post::has('comments', '>=', 3)->get();\n```\n\n----------------------------------------\n\nTITLE: Parent Field References in YAML\nDESCRIPTION: Demonstrates how to reference fields in parent forms using the caret symbol for nested form structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    type:\n        label: Type\n        type: dropdown\n        options:\n            1: Simple\n            2: Complex\n\n    content:\n        label: Content\n        type: nestedform\n        form:\n            fields:\n                colors:\n                    label: Colors\n                    type: colorpicker\n                    trigger:\n                        action: show\n                        field: ^type\n                        condition: value[2]\n```\n\n----------------------------------------\n\nTITLE: Equivalent Partial Rendering in Twig for OctoberCMS Components\nDESCRIPTION: Shows the equivalent partial rendering syntax for the {% component %} tag. This demonstrates that the component tag is essentially an alias for rendering the default.htm partial of the component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/component.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blogPosts::default\" %}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Missing Input\nDESCRIPTION: Shows how to provide a default value when retrieving input that might not exist in the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name', 'Sally');\n```\n\n----------------------------------------\n\nTITLE: Adding GET Parameters to Current Request in HTML\nDESCRIPTION: This snippet demonstrates how to add GET parameters to the current request using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onSetPage\" data-request-query=\"{ page: 6 }\">\n    Page 6\n</button>\n```\n\n----------------------------------------\n\nTITLE: Checkbox Configuration in YAML\nDESCRIPTION: Example of configuring a single checkbox field with a default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: checkbox\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Filter Usage in Twig\nDESCRIPTION: Demonstrates the basic usage of the |raw filter to prevent variable escaping in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-raw.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# This variable won't be escaped #}\n{{ variable|raw }}\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS Modules\nDESCRIPTION: Requires all October CMS modules via Composer.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require october/all\n```\n\n----------------------------------------\n\nTITLE: Component-Specific AJAX Handler Call\nDESCRIPTION: Example of calling an AJAX handler using a dynamic component reference with __SELF__ variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"{{ __SELF__ }}::onCalculate\" data-request-update=\"'{{ __SELF__ }}::calcresult': '#result'\">\n```\n\n----------------------------------------\n\nTITLE: Retrieving Validation Error Messages in PHP\nDESCRIPTION: Demonstrates how to retrieve error messages after validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$messages = $validator->messages();\n\n$failed = $validator->failed();\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination Template\nDESCRIPTION: A simplified HTML template for pagination with only next/previous buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"pagination\">\n    <li class=\"page-item first\">\n        <span class=\"page-link\">&larr;</span>\n    </li>\n    <li class=\"page-item last\">\n        <a class=\"page-link\" href=\"?page=2\">&rarr;</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Server-Side Event Handler Implementation\nDESCRIPTION: PHP implementation of the server-side event handler for the button click event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprotected function onGetSomeData(array $widgetConfig, array $extraData)\n{\n    return [\n        'result' => rand(1, 100)\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Queue Connection for Worker\nDESCRIPTION: Shows how to specify which queue connection the worker should utilize when running the queue:work command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work --once connection\n```\n\n----------------------------------------\n\nTITLE: Form Opening Tag with Special Options in Twig\nDESCRIPTION: Demonstrates how to use special options like 'request' with the form_open() helper to define form behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ request: 'onUpdate' }) }}\n```\n\n----------------------------------------\n\nTITLE: Updating Console Kernel\nDESCRIPTION: Updates the Console Kernel class to use October's Kernel implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n// File app/Console/Kernel.php\n\n// Replace\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n\n// With\nuse October\\Rain\\Foundation\\Console\\Kernel as ConsoleKernel;\n```\n\n----------------------------------------\n\nTITLE: Function with Arguments in Twig\nDESCRIPTION: Demonstrates how to call functions with arguments in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(variable) }}\n```\n\n----------------------------------------\n\nTITLE: Setting Sleep Duration Between Queue Checks\nDESCRIPTION: Demonstrates how to set the number of seconds to wait before polling for new jobs when the queue is empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work --once --sleep=5\n```\n\n----------------------------------------\n\nTITLE: Disabling Plugin\nDESCRIPTION: Command to disable an existing plugin without removing it, preventing it from functioning while keeping its files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:disable AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Using str_singular() String Helper in PHP\nDESCRIPTION: The str_singular function converts a string to its singular form. This function currently only supports the English language and is the counterpart to str_plural.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\n$singular = str_singular('cars');\n\n// car\n```\n\n----------------------------------------\n\nTITLE: Using Short Syntax _ Filter for Translation in Twig\nDESCRIPTION: Shows the use of the _ filter as a shorter syntax alternative to |trans for simple translations in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/trans.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'I love programming.'|_ }}\n```\n\n----------------------------------------\n\nTITLE: Field-Specific Validation Error Display\nDESCRIPTION: HTML structure showing how to display validation errors for specific form fields using the data-validate-for attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- Input field -->\n<input name=\"phone\" />\n\n<!-- Validation message for the field -->\n<div data-validate-for=\"phone\"></div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Keys in Has One Through Relationship in OctoberCMS\nDESCRIPTION: This snippet demonstrates how to customize the foreign keys in a has-one-through relationship definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic $hasOneThrough = [\n    'userHistory' => [\n        'Acme\\Supplies\\Model\\History',\n        'key'        => 'supplier_id',\n        'through' => 'Acme\\Supplies\\Model\\User'\n        'throughKey' => 'user_id',\n        'otherKey'   => 'id'\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Editor in October CMS\nDESCRIPTION: Shows how to create a WYSIWYG editor field and its corresponding Twig output rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{richeditor name=\"content\" label=\"Main content\"}Default text{/richeditor}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ content|raw }}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Scope Configuration in YAML for October CMS\nDESCRIPTION: Simple YAML configuration for creating a date filter scope named 'created_at'. This defines a basic date filter with a label of 'Created'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n```\n\n----------------------------------------\n\nTITLE: Checking for HTTPS Requests in PHP\nDESCRIPTION: Shows how to determine if the current request is using HTTPS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nif (Request::secure()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Column in October CMS List\nDESCRIPTION: Configuration for a number column which displays numeric values aligned to the right. Includes basic usage and custom formatting for currency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n```\n\nLANGUAGE: yaml\nCODE:\n```\nprice:\n    label: Price\n    type: number\n    format: $ %.2f\n```\n\n----------------------------------------\n\nTITLE: Rendering Filter Widget HTML\nDESCRIPTION: HTML markup for displaying the filter widget state, including label and current value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    class=\"filter-scope <?= $value ? 'active' : '' ?>\"\n    data-scope-name=\"<?= $name ?>\"\n>\n    <span class=\"filter-label\"><?= e(trans($scope->label)) ?></span>\n    <?php if ($value): ?>\n        <span class=\"filter-setting\">1</span>\n    <?php endif ?>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Navigation with Custom Types\nDESCRIPTION: Defines extra navigation items including a section and divider with custom display types and ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    label: Authors\n    parent: Blog\\Post\n    icon: icon-user\n    order: 230\n\nextraNavigation:\n    _authors_section:\n        itemType: section\n        label: Authors\n        order: 210\n\n    _authors_ruler:\n        itemType: ruler\n        order: 220\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Dependencies in October CMS\nDESCRIPTION: Command to check if all installed plugins have their dependencies installed and attempts to install missing requirements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:check\n```\n\n----------------------------------------\n\nTITLE: Rendering Text Input in October CMS\nDESCRIPTION: Demonstrates how to create a single line text input field for smaller blocks of text.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{text name=\"websiteName\" label=\"Website Name\"}Our wonderful website{/text}\n```\n\n----------------------------------------\n\nTITLE: Dropdown without Search Feature in YAML\nDESCRIPTION: Configures a dropdown with the search feature disabled, which normally allows quick selection of values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    showSearch: false\n```\n\n----------------------------------------\n\nTITLE: Media Finder Field Configuration in YAML\nDESCRIPTION: YAML configuration for media finder widget to select files from media manager library.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nbackground_image:\n    label: Background image\n    type: mediafinder\n    mode: image\n```\n\n----------------------------------------\n\nTITLE: Injecting Scripts in PHP for October CMS\nDESCRIPTION: Shows how to programmatically inject JavaScript files in PHP components or pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Form Fields Externally in PHP for October CMS\nDESCRIPTION: Shows how to extend form fields from outside a controller by using the static extendFormFields method to add additional fields to a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nCategories::extendFormFields(function($form, $model, $context)\n{\n    if (!$model instanceof MyModel) {\n        return;\n    }\n\n    $form->addFields([\n        'my_field' => [\n            'label'   => 'My Field',\n            'comment' => 'This is a custom field I have added.',\n        ],\n    ]);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Extending the Pivot Widget\nDESCRIPTION: PHP method to customize the pivot widget for a specific relation field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendPivotWidget($widget, $field, $model)\n{\n    // Make sure the field is the expected one\n    if ($field != 'myField')\n        return;\n\n    // manipulate widget as needed\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Entity Encoding in PHP\nDESCRIPTION: The e function runs htmlentities over the given string to encode HTML entities.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\necho e('<html>foo</html>');\n\n// &lt;html&gt;foo&lt;/html&gt;\n```\n\n----------------------------------------\n\nTITLE: Extending Form Model Query in PHP for October CMS\nDESCRIPTION: This PHP code snippet shows how to extend the form model query by overriding the formExtendQuery method in an October CMS controller, demonstrating how to include soft deleted records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\npublic function formExtendQuery($query)\n{\n    $query->withTrashed();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Session Key for Deferred Binding\nDESCRIPTION: Shows how to generate a session key field for deferred binding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::sessionKey() ?>\n```\n\n----------------------------------------\n\nTITLE: Using trans() Localization Helper in PHP\nDESCRIPTION: The trans function translates the given language line using localization files. It's essential for creating multilingual applications by retrieving translated strings based on the current locale.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\necho trans('validation.required');\n```\n\n----------------------------------------\n\nTITLE: Configuring Primary Navigation Item\nDESCRIPTION: Creates a top-level primary navigation item with label, icon, and order properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprimaryNavigation:\n    label: Blog\n    icon: icon-copy\n    order: 500\n\nnavigation:\n    label: Main Menu Item\n```\n\n----------------------------------------\n\nTITLE: Basic Form Closing Tag in Twig\nDESCRIPTION: Demonstrates how to close an HTML form using the form_close() helper function in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_close() }}\n```\n\n----------------------------------------\n\nTITLE: Nested Column Selection in YAML\nDESCRIPTION: Demonstrates how to retrieve a column value from a nested data structure like a model relationship or jsonable array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent[title]:\n    name: Title\n    sortable: false\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested View in Twig\nDESCRIPTION: Demonstrates how to render a nested view within a parent view using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        <h1>‰Ω†Â•Ω!</h1>\n        {{ child|raw }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Options Method Configuration\nDESCRIPTION: YAML configuration for using a dynamic options method to supply filter choices.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n    optionsMethod: getRoleGroupOptions\n```\n\n----------------------------------------\n\nTITLE: Basic Relation Field Configuration in YAML\nDESCRIPTION: Demonstrates the basic configuration of a relation field for categories using YAML syntax. This snippet shows how to set up a simple relation field with a label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n```\n\n----------------------------------------\n\nTITLE: Setting Apache Environment Variable for October CMS\nDESCRIPTION: Apache configuration example showing how to set the APP_ENV variable for environment-specific configuration loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSetEnv APP_ENV \"staging\"\n```\n\n----------------------------------------\n\nTITLE: Setting Content to Twig Variables\nDESCRIPTION: Demonstrates how to set content to Twig variables using the content() function, allowing for manipulation before display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm') %}\n\n{{ welcomeContent|raw }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm', { foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Indicator to Input Elements\nDESCRIPTION: Shows how to add a loading indicator to input elements that track changes and submit requests automatically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"username\"\n    data-request=\"onCheckUsername\"\n    data-track-input\n    data-attach-loading />\n```\n\n----------------------------------------\n\nTITLE: Halting Event Firing in October CMS - PHP\nDESCRIPTION: Example of firing a halting event that will stop after the first listener returns a non-null value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('acme.blog.myevent', [...], true);\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Pagination Configuration\nDESCRIPTION: Example showing how to limit the number of records displayed per page in the recordfinder widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    recordsPerPage: 10\n```\n\n----------------------------------------\n\nTITLE: Defining Text Property in PHP for October CMS\nDESCRIPTION: This snippet demonstrates how to define a 'text' type property in the defineProperties() method. It includes a title, type specification, and a default value for a description field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-text.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'description' => [\n            'title' => 'Description',\n            'type' => 'text',\n            'default' => 'This is a default description'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Form with Attributes HTML\nDESCRIPTION: Shows the complete HTML output of a form with custom attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"\" accept-charset=\"UTF-8\" id=\"example\" class=\"something\">\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Custom List Column Types in YAML Configuration for OctoberCMS\nDESCRIPTION: This YAML snippet shows how to use a custom list column type in the columns configuration. It demonstrates using the 'uppercase' type for a 'secret_code' column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# columns.yaml\ncolumns:\n    secret_code:\n        label: Secret code\n        type: uppercase\n```\n\n----------------------------------------\n\nTITLE: Starting the Laravel Sail server for October CMS\nDESCRIPTION: Commands to navigate to the October CMS installation directory and start the Laravel Sail Docker environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/using-laravel-sail.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd example-app\n./vendor/bin/sail up\n```\n\n----------------------------------------\n\nTITLE: Using Truth Test Constraints for Conditional Task Execution\nDESCRIPTION: Example of using the when method to conditionally run a scheduled task based on a truth test. The task will only execute if the Closure returns true and no other constraints prevent it from running.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/scheduling.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$schedule->command('emails:send')->daily()->when(function () {\n    return true;\n});\n```\n\n----------------------------------------\n\nTITLE: Using array_undot Helper Function in PHP\nDESCRIPTION: The array_undot function converts a dot-notated array back into a multi-dimensional associative array, reversing the effect of array_dot.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$array = array_undot([\n    'foo.bar' => 'baz'\n]);\n\n// [\n//    'foo' => [\n//        'bar' => 'baz'\n//    ]\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using |theme Filter in Twig for Asset URL Generation\nDESCRIPTION: Demonstrates how to use the |theme filter to generate an absolute URL for a JavaScript file in the active theme's assets directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<script type=\"text/javascript\" src=\"{{ 'assets/js/menu.js'|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Deferring Relation Unbinding in PHP\nDESCRIPTION: Demonstrates how to defer the unbinding of a comment from a post using a session key. The comment will not be deleted until the post is saved.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n$post = Post::find(1);\n$post->comments()->remove($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Link Text with PHP Array\nDESCRIPTION: Example of returning an array from PHP code to define both the URL and display text for a linkage column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-linkage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n['https://octobercms.com', 'October CMS']\n```\n\n----------------------------------------\n\nTITLE: Performing Database Migrations\nDESCRIPTION: Command to perform database migrations, creating tables and executing seed scripts provided by the system and plugins.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:up\n```\n\n----------------------------------------\n\nTITLE: Conditional Property Exclusion with ignoreIfPropertyEmpty\nDESCRIPTION: Example showing how to exclude an object from Inspector values if a specific field is empty using the 'ignoreIfPropertyEmpty' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-object.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'object',\n            'ignoreIfPropertyEmpty' => 'title',\n            'properties' => [\n                'streetAddress' => [\n                    'title' => 'Street Address',\n                    'type' => 'string'\n                ],\n                'city' => [\n                    'title' => 'City',\n                    'type' => 'string'\n                ]\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Relation Refresh Results\nDESCRIPTION: PHP method to inject additional HTML containers when relation results are refreshed, returning an array of extra values to send to the browser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendRefreshResults($field)\n{\n    // Make sure the field is the expected one\n    if ($field != 'myField')\n        return;\n\n    return ['#myCounter' => 'Total records: 6'];\n}\n```\n\n----------------------------------------\n\nTITLE: Including a Mixin Field with UUID in YAML\nDESCRIPTION: Demonstrates including a mixin field using a UUID as the source. This method provides a more robust reference to the mixin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-mixin.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_blog_fields:\n    type: mixin\n    source: 6d6a5efa-3ce7-4b9d-bddc-ac48867552cb\n```\n\n----------------------------------------\n\nTITLE: Rendering Always-Visible Hint Partial\nDESCRIPTION: Example of rendering a hint partial that cannot be hidden by passing null as the key parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/views-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->makeHintPartial(null, 'my_hint_partial') ?>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Range Looping with Expressions in Twig\nDESCRIPTION: Shows how to create dynamic ranges using expressions on both sides of the .. operator, including filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'|upper..'z'|upper %}\n    - {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Import Export Configuration in YAML\nDESCRIPTION: YAML configuration file that defines import and export settings including model classes and list definitions for subscribers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Import/Export Behavior Config\n# ===================================\n\nimport:\n    title: Import subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberImport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n\nexport:\n    title: Export subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberExport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Checkbox Filter Scope in YAML for October CMS\nDESCRIPTION: This example shows how to set a default value for a checkbox filter scope. By setting 'default: 1', the filter will be checked by default when the list is loaded.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nis_published:\n    label: Hide Published\n    type: checkbox\n    default: 1\n```\n\n----------------------------------------\n\nTITLE: Entries Field with Tag List Display Mode\nDESCRIPTION: Configuration for displaying entries field as a tag list for multiple item selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    displayMode: taglist\n```\n\n----------------------------------------\n\nTITLE: Using get Method in PHP Collections\nDESCRIPTION: The get method returns the item at a given key. If the key doesn't exist, null is returned or an optional default value that can also be a callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$value = $collection->get('name');\n\n// peter\n\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$value = $collection->get('foo', 'default-value');\n\n// default-value\n\n$collection->get('email', function () {\n    return 'default-value';\n});\n\n// default-value\n```\n\n----------------------------------------\n\nTITLE: Widget Configuration in YAML\nDESCRIPTION: Example of configuring a custom form widget using direct class reference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nblog_content:\n    type: Backend\\FormWidgets\\RichEditor\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Suffix with html_limit()\nDESCRIPTION: Demonstrates how to add a custom suffix when limiting HTML content length. The third parameter allows specifying a custom suffix instead of the default '...'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Â∏ñÂ≠êÂÜÖÂÆπ...</p>', 100, '... ÈòÖËØªÊõ¥Â§ö!') }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Site by Locale in PHP\nDESCRIPTION: Example of looking up a site using its locale code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$frenchSite = Site::getSiteForLocale('fr');\n```\n\n----------------------------------------\n\nTITLE: Showing Popup After Successful AJAX Request in HTML\nDESCRIPTION: This example demonstrates how to show a popup window after a successful AJAX request using JavaScript.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-success=\"alert('Yay!')\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial with View Template Code in YAML\nDESCRIPTION: Demonstrates using a view template code as the path to access view service templates inside the plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-partial.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: acme.blog::formfields.content\n```\n\n----------------------------------------\n\nTITLE: Customizing Date Format in Model\nDESCRIPTION: Example of setting a custom date format for storage and serialization\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Flight extends Model\n{\n    /**\n     * @var string dateFormat for storage of the model's date columns.\n     */\n    protected $dateFormat = 'U';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form in PHP\nDESCRIPTION: Demonstrates how to create a form for file uploads using PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['files' => true]) ?>\n\n    <input name=\"example_file\" type=\"file\">\n\n    <button type=\"submit\">‰∏ä‰º†Êñá‰ª∂</button>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Media Manager Event Handler Extension\nDESCRIPTION: Example of extending the MediaManager class to handle file rename events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\\Media\\Widgets\\MediaManager::extend(function($widget) {\n    $widget->bindEvent('file.rename', function ($originalPath, $newPath) {\n        // Update custom references to path here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Signature of sendTo Method in PHP\nDESCRIPTION: Shows the full signature of the sendTo method, including all possible parameters for customizing email sending in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nMail::sendTo($recipient, $message, $params, $callback, $options);\n```\n\n----------------------------------------\n\nTITLE: Defining Protected File Attachment in PHP Model\nDESCRIPTION: Illustrates how to define a protected file attachment by setting the public argument to false in the model definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic $attachOne = [\n    'avatar' => ['System\\Models\\File', 'public' => false]\n];\n```\n\n----------------------------------------\n\nTITLE: Soft Implementation of Behaviors\nDESCRIPTION: Example showing how to conditionally implement a behavior only if it exists in the system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass User extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        '@'\\RainLab\\Translate\\Behaviors\\TranslatableModel::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple PHP View\nDESCRIPTION: Demonstrates the structure of a simple PHP view file with a variable placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<!-- View stored in plugins/acme/blog/views/greeting.php -->\n\n<html>\n    <body>\n        <h1>Hello, <?= $name ?></h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkPost Driver in October CMS\nDESCRIPTION: Configuration settings required for the SparkPost mail driver in the services.php file, specifying the API key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'sparkpost' => [\n    'secret' => 'your-sparkpost-key',\n],\n```\n\n----------------------------------------\n\nTITLE: Using str_random() String Helper in PHP\nDESCRIPTION: The str_random function generates a random string of the specified length. This is useful for creating secure tokens, temporary passwords, or any scenario requiring random string generation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$string = str_random(40);\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Flash Message Updates with Meta Tag\nDESCRIPTION: Demonstrates how to update flash messages globally for all AJAX requests by using the ajax-request-update meta tag in the page head section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"ajax-request-update\" content=\"{ flash-messages: true }\" />\n</head>\n<body>\n    <!-- Updates with every AJAX request -->\n    {% ajaxPartial 'flash-messages' %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Creating Pre-Checked Inputs\nDESCRIPTION: Shows how to create checkbox and radio inputs that are checked by default.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::checkbox('name', 'value', true) ?>\n\n<?= Form::radio('name', 'value', true) ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Soft Delete in a User Model - PHP\nDESCRIPTION: Shows how to implement soft deletion in an OctoberCMS model by using the SoftDelete trait and adding the deleted_at column to the dates array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SoftDelete;\n\n    protected $dates = ['deleted_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Partial Content in PHP\nDESCRIPTION: Example of a partial file content used for rendering a column. It demonstrates how to access the $value, $record, and $column variables available in the partial context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($record->is_active): ?>\n    <?= e($value) ?>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Installing Theme\nDESCRIPTION: Command to download and install a theme from the October marketplace to the default themes directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName\n```\n\n----------------------------------------\n\nTITLE: Creating Form View for Create Page in October CMS\nDESCRIPTION: Provides an example of a create.htm view file for the Create page in October CMS. It includes form rendering and submission buttons with AJAX handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class'=>'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div class=\"loading-indicator-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"close:true\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                data-load-indicator=\"Creating Category...\"\n                class=\"btn btn-default\">\n                Create and Close\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Creating a File-Based Configuration Array in PHP\nDESCRIPTION: Sample configuration file structure that returns an array of configuration values for a plugin, stored in the plugin's config directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => 10,\n    'display' => 5\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Filename for Download in HTML\nDESCRIPTION: Example of specifying a custom filename for the downloaded file by setting the value in the data-request-download attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onExport\" data-request-download=\"data.csv\">\n    Download Document\n</button>\n```\n\n----------------------------------------\n\nTITLE: Moving Files Between Locations\nDESCRIPTION: Shows how to move a file from one location to another within the same disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nStorage::move('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Rendering AJAX Pagination Template in HTML\nDESCRIPTION: Shows the HTML structure of the AJAX-enabled pagination template used by the ajaxPager() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"pagination\">\n    <li class=\"page-item first\">\n        <span class=\"page-link\">&larr;</span>\n    </li>\n    <li class=\"page-item\">\n        <a\n            class=\"page-link\"\n            data-request=\"onAjax\"\n            data-request-data=\"{ page: 1 }\"\n            data-request-update=\"{ _self: true }\">1</a>\n    </li>\n    <li class=\"page-item last\">\n        <a\n            class=\"page-link\"\n            data-request=\"onAjax\"\n            data-request-data=\"{ page: 2 }\"\n            data-request-update=\"{ _self: true }\">&rarr;</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to a Partial\nDESCRIPTION: Shows how to pass existing variables to a partial. In this example, a 'posts' variable is passed to the 'blog-posts' partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blog-posts\" posts=posts %}\n```\n\n----------------------------------------\n\nTITLE: Shorthand Column Configuration in October CMS Tailor\nDESCRIPTION: Examples of using shorthand values for column configurations in a Tailor blueprint. These shorthand options provide quick ways to modify how columns appear in list views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    myfield: List Label   # New Label\n    myfield: true         # Shown\n    myfield: false        # Hidden\n    myfield: invisible    # Invisible\n    myfield: [...]        # Config Array\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Components at Render Time in October CMS\nDESCRIPTION: This code demonstrates how to pass variables to a component at the time it is rendered. The 'maxItems' property of the 'demoTodoAlias' component will be set to 7, overriding any previously defined value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' maxItems='7' %}\n```\n\n----------------------------------------\n\nTITLE: Adding Columns to Existing Tables\nDESCRIPTION: Example of using the table method to modify an existing table by adding new columns. The closure receives a table object used to define the new columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->string('email');\n});\n```\n\n----------------------------------------\n\nTITLE: Incrementing with Additional Column Updates\nDESCRIPTION: Shows how to increment a column while simultaneously updating other columns in the same operation using the third parameter of the increment method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->increment('votes', 1, ['name' => 'John']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack BrowserSync for Hot Reloading with Turbo Router\nDESCRIPTION: Configuration snippet for webpack BrowserSync that disables Turbo router when using hot reloading or browser sync technology. Injects a meta tag to prevent conflicts between Turbo and development tools like Laravel Mix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nsnippetOptions: {\n    rule: {\n        match: /<\\/head>/i,\n        fn: function (snippet, match) {\n            return '<meta name=\"turbo-visit-control\" content=\"disable\" />';\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Behavior Class Definition\nDESCRIPTION: Example of defining a behavior class by extending ExtensionBase with constructor and method implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UtilityFunctions extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $parent;\n\n    public function __construct($parent)\n    {\n        $this->parent = $parent;\n    }\n\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this->parent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Title Field Placeholder in October CMS Tailor\nDESCRIPTION: Changing the placeholder text for the title field to provide more context-specific guidance to users. This helps users understand what kind of content is expected in the field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    title:\n        placeholder: Event Title\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme ID in Twig Templates\nDESCRIPTION: Example of how to use the theme's ID property to create a CSS class name based on the theme directory. This generates a CSS-friendly identifier that can be used in the body tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"theme-{{ this.theme.id }}\">\n```\n\n----------------------------------------\n\nTITLE: AJAX Redirect Button\nDESCRIPTION: HTML button with AJAX request and redirect attributes for client-side redirection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onAjax\"\n    data-request-redirect=\"/signup-complete\">\n    Save and Redirect\n</button>\n```\n\n----------------------------------------\n\nTITLE: Importing External Macros in Twig\nDESCRIPTION: Examples of importing macros from theme partials and system view files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% import 'macros/form' as form %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% import 'acme.blog::macros' as form %}\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Unencrypted Cookies in Plugins\nDESCRIPTION: Demonstrates how to dynamically add cookies to the unencrypted list from a plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    Config::push('system.unencrypt_cookies', 'my_cookie');\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Collection Items in PHP\nDESCRIPTION: Shows how to use the skip() method to return a new collection without the first given amount of items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n\n$collection = $collection->skip(4);\n\n$collection->all();\n\n// [5, 6, 7, 8, 9, 10]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input with Default Values in PHP\nDESCRIPTION: Shows how to provide a default value when retrieving input if the requested input value is not present.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name', 'Sally');\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Localization Strings in October CMS\nDESCRIPTION: Example of overriding plugin localization strings by creating a custom lang.php file in the application's lang directory. This allows for customization without modifying plugin files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/localization.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'app' => [\n        'name' => 'OctoberCMS!'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Cache Counter Operations\nDESCRIPTION: Methods for incrementing and decrementing numeric values in the cache.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCache::increment('key');\n\nCache::increment('key', $amount);\n\nCache::decrement('key');\n\nCache::decrement('key', $amount);\n```\n\n----------------------------------------\n\nTITLE: Listing Admin-Enabled Sites in PHP\nDESCRIPTION: Shows how to list sites enabled in the admin panel using the listEditEnabled method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$sites = Site::listEditEnabled();\n```\n\n----------------------------------------\n\nTITLE: Checking Session Data Existence with this.session.has in Twig\nDESCRIPTION: Shows how to check if a specific key exists in the session using the has method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-session.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.session.has('key') %}\n    <h1>We found key in the session</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Filter Scope in OctoberCMS YAML\nDESCRIPTION: This snippet demonstrates how to configure a switch filter scope named 'is_approved' in OctoberCMS. It defines the label, type, and conditions for the filter. The conditions array specifies the SQL conditions for when the switch is off and on.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-switch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nis_approved:\n    label: Approved\n    type: switch\n    conditions:\n        - is_approved <> true\n        - is_approved = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Field in YAML\nDESCRIPTION: Demonstrates how to configure a number field with step, min, and max values in YAML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    step: 1  # defaults to 'any'\n    min: 1   # defaults to not present\n    max: 100 # defaults to not present\n```\n\n----------------------------------------\n\nTITLE: Combining CSS Files with |theme Filter in Twig\nDESCRIPTION: Shows how to use the |theme filter to combine multiple CSS files into a single request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-theme.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<link href=\"{{ [\n    'assets/css/styles1.css',\n    'assets/css/styles2.css'\n]|theme }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Checking for Placeholder Existence in Twig\nDESCRIPTION: Demonstrates how to check if a placeholder exists using the hasPlaceholder() function, allowing for conditional markup generation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasPlaceholder('sidemenu') %}\n    <!-- Markup for a page with a sidebar -->\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            {% placeholder sidemenu %}\n        </div>\n        <div class=\"col-md-9\">\n            {% page %}\n        </div>\n    </div>\n{% else %}\n    <!-- Markup for a page without a sidebar -->\n    {% page %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Instances of the Same Component in October CMS\nDESCRIPTION: This snippet shows how to define multiple instances of the same component on a page by using aliases. Each instance can have different property values and is referenced by its unique alias name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo todoA]\nmaxItems = 10\n[demoTodo todoB]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Global Partial Updates Meta Tag\nDESCRIPTION: Demonstrates how to set up global partial updates using a meta tag in the page head\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/update-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"ajax-request-update\" content=\"{ flash-messages: true }\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Customization Fields\nDESCRIPTION: Example of form field configuration in theme.yaml for theme customization\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Theme\n# [...]\n\nform:\n    fields:\n        site_name:\n            label: Site name\n            comment: The website name as it should appear on the front-end\n            default: My Amazing Site!\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Project Dependencies in October CMS\nDESCRIPTION: Command to install all plugins and themes belonging to a project\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:sync\n```\n\n----------------------------------------\n\nTITLE: Adding CSRF Protection Token\nDESCRIPTION: Shows how to generate a CSRF token field for forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::token() ?>\n```\n\n----------------------------------------\n\nTITLE: Custom Video Player Implementation\nDESCRIPTION: Example implementation of a custom video player using the oc-video-player.htm CMS partial, where the 'src' variable outputs the link to the source file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"{{ src }}\" width=\"320\" height=\"200\" controls preload></video>\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Widget in YAML\nDESCRIPTION: This snippet shows how to set up a Relation widget in YAML. It includes examples of basic configuration, custom select statements, and applying model scopes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n    nameFrom: title\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    select: concat(first_name, ' ', last_name)\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    scope: withTrashed\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncountries:\n    label: Categories\n    type: relation\n    useController: false\n```\n\n----------------------------------------\n\nTITLE: Rendering Radio Buttons in October CMS\nDESCRIPTION: Shows how to create a radio form field with multiple options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{radio name=\"radio\" label=\"Thoughts?\" options=\"y:Yes|n:No|m:Maybe\"}{/radio}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Model Instance in PHP using OctoberCMS\nDESCRIPTION: This example shows how to delete a model instance using the delete method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::find(1);\n\n$flight->delete();\n```\n\n----------------------------------------\n\nTITLE: Creating Number Input Fields\nDESCRIPTION: Example demonstrating how to generate a number input field for numeric data entry.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::number('name', 'value') ?>\n```\n\n----------------------------------------\n\nTITLE: Checking Request Path Pattern\nDESCRIPTION: Shows how to determine if the current request path matches a specific pattern.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nif (Request::is('admin/*')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using withTrashed with Model Relations - PHP\nDESCRIPTION: Shows how to include soft deleted related models in relationship queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$flight->history()->withTrashed()->get();\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme ID in Twig Template\nDESCRIPTION: Demonstrates how to use the this.theme.id property to generate a CSS class name based on the theme directory name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"theme-{{ this.theme.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Custom Size Image Column Definition in YAML for October CMS\nDESCRIPTION: Defines an image column with custom width and height parameters. This allows for controlling the display size of the image thumbnails in the column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-image.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    width: 150\n    height: 150\n```\n\n----------------------------------------\n\nTITLE: Getting Uploaded File MIME Type in PHP\nDESCRIPTION: Shows how to retrieve the MIME type of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$mime = $file->getMimeType();\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for Object List with Key Property in OctoberCMS\nDESCRIPTION: This snippet shows the JSON output format when using a 'keyProperty' in the Object List configuration. It results in an associative array (object) with the specified key property as object keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-objectlist.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"people\": {\n    \"john\": {\"fullName\": \"John Smith\", \"address\": \"Palo Alto\"},\n    \"bart\": {\"fullName\": \"Bart Simpson\", \"address\": \"Springfield\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tree Structure in Twig Template\nDESCRIPTION: Shows how to recursively render a tree structure of models in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/traits.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% macro renderChildren(item) %}\n    {% import _self as SELF %}\n    {% if item.children is not empty %}\n        <ul>\n            {% for child in item.children %}\n                <li>{{ child.name }}{{ SELF.renderChildren(child)|raw }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n{% endmacro %}\n\n{% import _self as SELF %}\n{{ SELF.renderChildren(category)|raw }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Preset Converter in YAML\nDESCRIPTION: Demonstrates how to use the input preset converter to automatically fill out a URL field based on the title input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\ntitle:\n    label: Title\n\nurl:\n    label: URL\n    preset:\n        field: title\n        type: url\n```\n\nLANGUAGE: yaml\nCODE:\n```\nslug:\n    label: Slug\n    preset: title\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Column in October CMS List\nDESCRIPTION: Configuration for an image column with resizing functionality. Allows customizing dimensions and quality of the displayed image.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    sortable: false\n    width: 150\n    height: 150\n    options:\n        quality: 80\n```\n\n----------------------------------------\n\nTITLE: Inline Options Configuration\nDESCRIPTION: Configuration for displaying checkbox options inline instead of stacked when there are fewer than 10 options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkboxlist.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    inlineOptions: true\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure in OctoberCMS\nDESCRIPTION: Shows the typical directory structure for a component within an OctoberCMS plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugins/\n  acme/\n    myplugin/\n      components/\n        componentname/       <=== Component directory (lowercase)\n          default.htm        <=== Default markup (optional)\n        ComponentName.php    <=== Class file\n      Plugin.php\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Dropdown Options Method in PHP\nDESCRIPTION: Defines a custom method in the model class to provide options for a specific dropdown field. This method takes the current key value and field name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function listStatuses($keyValue = null, $fieldName = null)\n{\n    return ['published' => 'Published', ...];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Storage to Use S3 in System Configuration for PHP\nDESCRIPTION: System configuration that sets Amazon S3 as the media storage provider for October CMS. This specifies the disk, folder, and public path for accessing media files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/providers.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'storage' => [\n    // ...\n    'media' => [\n        'disk'   => 's3',\n        'folder' => 'media',\n        'path' => 'https://s3-us-west-2.amazonaws.com/your-bucket-name/media'\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Checking Active Site Code in Twig\nDESCRIPTION: Demonstrates how to conditionally display content based on the active site code using a Twig if statement.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-site.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.site.code === 'english' %}\n    <h1>Only display for English</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Registering PHP Fatal Error Handler in PHP\nDESCRIPTION: Illustrates how to register a handler for PHP fatal errors by checking for the Error exception type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(Error $exception) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Script Only Once with Unique ID\nDESCRIPTION: This HTML example shows how to ensure a script runs exactly once across all page loads by assigning a unique identifier to the data-turbo-eval-once attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<script data-turbo-eval-once=\"myAjaxPromise\">\n    // This script will run once only\n    addEventListener('ajax:promise', function(event) {\n        //\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional URL Parameters in October CMS\nDESCRIPTION: Example of defining a URL with an optional parameter, indicated by a question mark.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id?\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving URI Segment in PHP\nDESCRIPTION: Demonstrates how to get a specific segment from the URI path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$segment = Request::segment(1);\n```\n\n----------------------------------------\n\nTITLE: Merging Arrays with union() Method in PHP Collections\nDESCRIPTION: The union() method adds the given array to the collection. If the given array contains keys that are already in the original collection, the original collection's values will be preserved in the result.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1 => ['a'], 2 => ['b']]);\n\n$union = $collection->union([3 => ['c'], 1 => ['b']]);\n\n$union->all();\n\n// [1 => ['a'], 2 => ['b'], 3 => ['c']]\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value in Collection in PHP\nDESCRIPTION: The median method returns the median value of a given key in the collection. It works with both associative arrays and simple numeric arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n$median = collect([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])->median('foo');\n\n// 15\n\n$median = collect([1, 1, 2, 4])->median();\n\n// 1.5\n```\n\n----------------------------------------\n\nTITLE: Record Finder Display Mode Configuration\nDESCRIPTION: Configuration showing how to use the recordfinder display mode, which is only available when one item is selectable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    displayMode: recordfinder\n```\n\n----------------------------------------\n\nTITLE: Verbatim Tag Output Rendering in Twig\nDESCRIPTION: Shows the expected output after using the verbatim tag. The Twig variables inside the verbatim tag are not processed and are rendered literally in the output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/verbatim.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello, {{ name }}</p>\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings in Twig\nDESCRIPTION: Shows how to concatenate a string with a variable in Twig using the tilde (~) operator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Your name: ' ~ name }}\n```\n\n----------------------------------------\n\nTITLE: Dictionary Output Format in JSON\nDESCRIPTION: Example of the JSON output generated by the dictionary inspector type. Shows how key-value pairs are stored in the component's property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dictionary.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"options\": {\"option1\": \"Option 1\", \"option2\": \"Option 2\"}\n```\n\n----------------------------------------\n\nTITLE: Creating PHP View in OctoberCMS\nDESCRIPTION: Demonstrates a simple PHP view file with PHP variable echo.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<!-- View stored in plugins/acme/blog/views/greeting.php -->\n\n<html>\n    <body>\n        <h1>Hello, <?php echo $name; ?></h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Caching Configuration and Routes in October CMS\nDESCRIPTION: Artisan commands to cache the application configuration and routes for improved performance in production environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan config:cache\nphp artisan route:cache\n```\n\n----------------------------------------\n\nTITLE: Installing an October CMS Plugin with OC Prefix\nDESCRIPTION: Command to install a plugin with the 'oc' package name prefix using the --oc option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git --oc\n```\n\n----------------------------------------\n\nTITLE: Extending Model Object in Content Field Class\nDESCRIPTION: Example of extending the model object by making the field jsonable using the addJsonable method in the extendModelObject method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function extendModelObject($model)\n{\n    $model->addJsonable($this->fieldName);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Content Groups in YAML\nDESCRIPTION: This snippet shows how to define multiple content groups for a blog post blueprint, allowing for different field sets for regular and featured posts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: stream\nname: Blog Post\n\ngroups:\n    regular_post:\n        name: Regular Post\n        fields:\n            # ...\n\n    featured_post:\n        name: Featured Post\n        fields:\n            # ...\n```\n\n----------------------------------------\n\nTITLE: Defining File Attachment Relationship in PHP Model\nDESCRIPTION: Shows how to define a file attachment relationship in a PHP model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $attachOne = [\n        'featured_image' => 'System\\Models\\File'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Where Clauses to Unique Rule in PHP\nDESCRIPTION: Shows how to add additional where clauses to the unique validation rule query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address,NULL,id,account_id,1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Path in PHP\nDESCRIPTION: The database_path function returns the fully qualified path to the application's database directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$path = database_path();\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Configuration in Twig Template\nDESCRIPTION: Example of accessing configuration values from the theme.yaml file using the this.theme.config property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.theme.config.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Using the reject() Method in PHP Collections\nDESCRIPTION: The reject method filters the collection by removing items that pass a given truth test. It's the opposite of the filter method, keeping only items where the callback returns false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$filtered = $collection->reject(function ($item) {\n    return $item > 2;\n});\n\n$filtered->all();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Casted Attributes\nDESCRIPTION: Example showing how a casted boolean attribute can be used in conditional statements, even though it's stored as an integer in the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nif ($user->is_admin) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Page Link URL Format\nDESCRIPTION: Demonstrates the storage format for page finder values using a specific URL pattern\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\noctober://<TYPE>@link/<REFERENCE>?<PARAM>=<VALUE>\n```\n\n----------------------------------------\n\nTITLE: Time Picker Configuration with 12-hour Format in YAML\nDESCRIPTION: Shows how to configure a time picker with 12-hour format. This setup is useful for selecting birth time or other time-specific data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datepicker.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbirth_time:\n    label: Time Born\n    type: datepicker\n    mode: time\n    twelveHour: true\n```\n\n----------------------------------------\n\nTITLE: Extending Multiple List Definition Queries\nDESCRIPTION: Demonstrates how to handle multiple list definitions within a single controller by using the definition parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\npublic $listConfig = [\n    'inbox' => 'config_inbox_list.yaml',\n    'trashed' => 'config_trashed_list.yaml'\n];\n\npublic function listExtendQuery($query, $definition)\n{\n    if ($definition === 'trashed') {\n        $query->onlyTrashed();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ViewBag Properties in October CMS Page\nDESCRIPTION: Demonstrates how to define ViewBag properties in an October CMS page configuration. The example sets an 'activeMenu' property for use in the layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"About\"\nurl = \"/about.html\"\nlayout = \"default\"\n\n[viewBag]\nactiveMenu = \"about\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Page content...</p>\n```\n\n----------------------------------------\n\nTITLE: Preventing Script Re-execution in PJAX\nDESCRIPTION: This HTML example shows how to prevent a script from being executed on subsequent PJAX requests by using the data-turbo-eval attribute set to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <script data-turbo-eval=\"false\" src=\"{{ ['@framework.bundle']|theme }}\"></script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Basic AJAX Handler for Results Fetching in PHP\nDESCRIPTION: Simple PHP handler that defines an AJAX endpoint to fetch results and assign them to a page variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/polling.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onFetchResults()\n{\n    $this['results'] = [1, 2, 3];\n}\n```\n\n----------------------------------------\n\nTITLE: Practical Email Obfuscation Example with html_email()\nDESCRIPTION: Shows a practical example of using the html_email() function within an HTML mailto link, with the raw filter to prevent double-escaping of the encoded output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"mailto: {{ html_email('a@b.c')|raw }}\">ÁªôÊàëÂèëÈÇÆ‰ª∂</a>\n\n<!-- ‰ª•‰∏äÂ∞ÜËæìÂá∫ -->\n<a href=\"mailto: &#109;&#97;&#105;&#108;&#x74;o&#x3a;&#97;&#64;b.&#x63;\">ÁªôÊàëÂèëÈÇÆ‰ª∂</a>\n```\n\n----------------------------------------\n\nTITLE: Requiring Another Plugin in Composer\nDESCRIPTION: Example of including a dependency on another plugin in the composer.json file. This snippet requires version 1.2 or compatible of the acme/blog-plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"acme/blog-plugin\": \"^1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Secondary Navigation\nDESCRIPTION: Configuration for defining a primary navigation item without any secondary items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprimaryNavigation:\n    label: Page\n    icon: icon-magic\n    order: 500\n```\n\n----------------------------------------\n\nTITLE: Rendering Standard Flash Message in Twig Template\nDESCRIPTION: Shows how to render a standard flash message in a Twig template for consistency with AJAX-based flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <p\n        data-control=\"flash-message\"\n        class=\"flash-message fade {{ type }}\"\n        data-interval=\"5\">\n        {{ message }}\n    </p>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Setting Content as Twig Variables in OctoberCMS\nDESCRIPTION: Shows how to use the content() function to set content as a Twig variable, allowing manipulation before display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-content.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm') %}\n\n{{ welcomeContent|raw }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm', { foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Search Filter HTML\nDESCRIPTION: HTML markup for an inline search filter with input field and search button.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<?php\n    $activeValue = $scope->scopeValue !== null ? $scope->value : $scope->default;\n?>\n<div\n    class=\"filter-scope scope-inline\"\n    data-scope-name=\"<?= $scope->scopeName ?>\">\n    <input\n        placeholder=\"<?= e($this->getHeaderValue($scope)) ?>\"\n        name=\"<?= $name ?>[value]\"\n        value=\"<?= e($activeValue) ?>\"\n        class=\"form-control form-control-sm\" />\n    <button\n        class=\"btn btn-sm btn-search\"\n        data-filter-action=\"apply\">\n        <i class=\"icon-search\"></i>\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Empty Selection for Balloon Selector in YAML\nDESCRIPTION: Configuration that allows users to unselect the active item by setting allowEmpty to true. This makes the balloon-selector field optional rather than requiring a selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-balloon.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    type: balloon-selector\n    label: Gender\n    allowEmpty: true\n```\n\n----------------------------------------\n\nTITLE: Resizing Image with Proportional Scaling in PHP\nDESCRIPTION: Resizes an image maintaining aspect ratio by specifying only the width.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/resizer.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$image->resize(800, null, [...]);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Named List Definition (PHP)\nDESCRIPTION: Rendering a specific list definition by passing the definition name to the listRender method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->listRender('templates') ?>\n```\n\n----------------------------------------\n\nTITLE: Removing Related Models in PHP\nDESCRIPTION: Demonstrates how to use the 'remove' method to disassociate a Comment from a Post model, and how to remove a Category from a Post's categories collection in a many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->remove($comment);\n\n$post->categories()->remove($category);\n```\n\n----------------------------------------\n\nTITLE: Using diff Method in PHP Collections\nDESCRIPTION: The diff method compares the collection against another collection or a plain PHP array and returns the values that are not present in the given collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$diff = $collection->diff([2, 4, 6, 8]);\n\n$diff->all();\n\n// [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Form Field Extension in PHP\nDESCRIPTION: Example of extending form fields externally and internally using controller methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_53\n\nLANGUAGE: php\nCODE:\n```\nCategories::extendFormFields(function($form, $model, $context) {\n    if (!$model instanceof MyModel) {\n        return;\n    }\n\n    $form->addFields([\n        'my_field' => [\n            'label'   => 'My Field',\n            'comment' => 'This is a custom field I have added.',\n        ],\n    ]);\n\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Authentication to HTTP Request in PHP\nDESCRIPTION: Shows how to include basic authentication credentials with an HTTP request using the withBasicAuth method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nHttp::withBasicAuth('user', 'password')->post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Tailor CLI Commands\nDESCRIPTION: Collection of command line interface commands for managing Tailor blueprints and content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:migrate\nphp artisan tailor:refresh\nphp artisan tailor:refresh --blueprint=\"Blog\\Post\"\nphp artisan tailor:propagate\nphp artisan tailor:propagate --blueprint=\"Blog\\Category\"\nphp artisan tailor:prune\nphp artisan tailor:prune --fields\nphp artisan tailor:prune --tables\nphp artisan tailor:prune --blueprint=\"Blog\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw Markup to {% styles %} in Twig\nDESCRIPTION: Shows how to inject raw markup to the {% styles %} tag using the styles anonymous placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{% put styles %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\" />\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Path in PHP\nDESCRIPTION: The config_path function returns the fully qualified path to the application configuration directory. It can also generate a path to a specific file within the config directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n$path = config_path();\n\n$path = config_path('dev/cms.php');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flash Messages of a Specific Type in October CMS\nDESCRIPTION: Demonstrates how to retrieve flash messages of a specific type (success) as a string using the flash() function with a type parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/flash.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set successMessage = flash('success') %}\n```\n\n----------------------------------------\n\nTITLE: Defining Options with Descriptions in YAML\nDESCRIPTION: Illustrates how to specify options with additional descriptions for radio lists. Each option is defined as an array with [label, description] syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    all: [All, Guests and customers will be able to access this page.]\n    registered: [Registered only, Only logged in member will be able to access this page.]\n    guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Implementing Import Export Controller in PHP\nDESCRIPTION: Shows how to implement the ImportExportController behavior in a controller class by adding it to the $implement property and specifying the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Shop\\Controllers;\n\nclass Products extends Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ImportExportController::class\n    ];\n\n    public $importExportConfig = 'config_import_export.yaml';\n\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Sail Web Server\nDESCRIPTION: Commands to navigate to the application directory and start the Laravel Sail web server using Docker.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/using-laravel-sail.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd example-app\n./vendor/bin/sail up\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Authentication for October CMS\nDESCRIPTION: Command to create Composer authentication configuration for October CMS gateway using the composer CLI tool. This allows Composer to authenticate when fetching October CMS packages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n‚Äãcomposer config --auth http-basic.gateway.octobercms.com <email address> <license key>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Navigation Context in Controller Constructor\nDESCRIPTION: Code example showing how to set the navigation context for settings pages to properly highlight active menu items in the system page sidebar.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    [...]\n\n    BackendMenu::setContext('October.System', 'system', 'settings');\n    SettingsManager::setContext('You.Plugin', 'settings');\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Image Resizer with File Path in PHP\nDESCRIPTION: Opens an image for resizing using a direct file path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/resizer.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$image = Resizer::open('path/to/image.jpg');\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Contents in PHP\nDESCRIPTION: Example of using the get method to retrieve the raw string contents of a file from storage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$contents = Storage::get('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: AJAX Form Creation\nDESCRIPTION: Examples of creating AJAX-enabled forms with various configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave')\n```\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave', ['confirm' => 'Are you sure?'])\n```\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave', ['update' => [\n        'control-panel' => '#controlPanel',\n        'layout/sidebar' => '#layoutSidebar'\n    ]\n])\n```\n\n----------------------------------------\n\nTITLE: Basic Snippet Content Filter Usage in Twig\nDESCRIPTION: Shows how to use the content filter to process and render snippets in page output\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/snippets.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ blog_html|content }}\n```\n\n----------------------------------------\n\nTITLE: Removing specific session data in October CMS Twig templates\nDESCRIPTION: Demonstrates how to delete data for a single key from the session using the 'forget' method. This removes a specific item from the session without affecting other session data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-session.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.forget('key') }}\n```\n\n----------------------------------------\n\nTITLE: Defining CSS Custom Properties\nDESCRIPTION: Example of using theme configuration values in CSS custom properties\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    :root {\n        --my-color: {{ this.theme.link_color }};\n    }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Record Finder Widget in YAML for October CMS\nDESCRIPTION: Illustrates the configuration for a record finder widget in YAML. This widget displays a field with related record details and allows searching for records in a popup list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: Áî®Êà∑\n    type: recordfinder\n    list: ~/plugins/rainlab/user/models/user/columns.yaml\n    recordsPerPage: 10\n    title: Êü•ÊâæËÆ∞ÂΩï\n    prompt: ÂçïÂáª\"Êü•Êâæ\"ÊåâÈíÆ‰ª•Êü•ÊâæÁî®Êà∑\n    nameFrom: name\n    descriptionFrom: email\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Class with ExtensionTrait\nDESCRIPTION: Example showing how to create a behavior class using ExtensionTrait instead of extending ExtensionBase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Behaviors;\n\nclass WaveBehaviour\n{\n    use \\October\\Rain\\Extension\\ExtensionTrait;\n\n    /**\n     * ‰ΩøÁî® Extensiontrait Êó∂ÔºåÊÇ®ÁöÑË°å‰∏∫‰πüÂøÖÈ°ªÂÆûÁé∞Ê≠§ÊñπÊ≥ï\n     * @see \\October\\Rain\\Extension\\ExtensionBase\n     */\n    public static function extend(callable $callback)\n    {\n        self::extensionExtendCallback($callback);\n    }\n\n    public function wave()\n    {\n        echo \"*waves*<br>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using html_limit() Twig Function in OctoberCMS\nDESCRIPTION: Demonstrates the usage of the html_limit() function in Twig templates to limit HTML content to a specific length while handling tags properly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/html.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<p>Post content...</p>'|html_limit(100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<p>Post content...</p>'|html_limit(100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Using Meta Description for SEO in Twig\nDESCRIPTION: Shows how to access the meta_description property for SEO purposes, typically used in a meta description tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.page.meta_description }}\">\n```\n\n----------------------------------------\n\nTITLE: Basic Console Command Structure\nDESCRIPTION: Example of a basic console command class implementation showing signature, description and handle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Console;\n\nuse Illuminate\\Console\\Command;\nuse Symfony\\Component\\Console\\Input\\InputOption;\nuse Symfony\\Component\\Console\\Input\\InputArgument;\n\nclass MyCommand extends Command\n{\n    /**\n     * @var string signature for the console command.\n     */\n    protected $signature = 'acme:mycommand {user}';\n\n    /**\n     * @var string description for the console command.\n     */\n    protected $description = 'Does something cool.';\n\n    /**\n     * handle executes the console command.\n     */\n    public function handle()\n    {\n        $username = $this->argument('user');\n\n        $this->output->writeln(\"Hello {$username}!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Opening Tag with Attributes in Twig\nDESCRIPTION: Shows how to add HTML attributes to a form opening tag by passing an object to the form_open() helper.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ class: 'form-horizontal' }) }}\n```\n\n----------------------------------------\n\nTITLE: Raw CSS Markup Injection using Placeholders\nDESCRIPTION: Shows how to inject raw CSS link markup using the styles placeholder with the {% put %} tag in pages or layouts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-styles.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% put styles %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\" />\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key in BelongsTo Relationship - PHP\nDESCRIPTION: Shows how to specify a custom foreign key name in a belongsTo relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => [\\Acme\\Blog\\Models\\Post::class, 'key' => 'my_post_id']\n];\n```\n\n----------------------------------------\n\nTITLE: Text Filter with Specific Condition in YAML\nDESCRIPTION: Shows how to configure a text filter with a specific condition. In this case, it's set up to only allow exact matches using the 'equals' condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-text.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n    conditions:\n        equals: true\n```\n\n----------------------------------------\n\nTITLE: Stripping HTML Tags from a String in Twig\nDESCRIPTION: Demonstrates how to use the html_strip() function to remove all HTML tags from a string, returning only the text content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip('<strong>Hello world</strong>') }}\n```\n\n----------------------------------------\n\nTITLE: Importing and Purging Database Templates in October CMS\nDESCRIPTION: Command to copy database templates to the filesystem and simultaneously delete all database templates using the --purge-db option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/database-themes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo --import-db --purge-db\n```\n\n----------------------------------------\n\nTITLE: Accessing Entry Type and Content Group in October CMS\nDESCRIPTION: Demonstrates how to access the content group of an entry and render content differently based on the group.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if post.content_group == 'markdown_post' %}\n    <!-- Render content as Markdown -->\n    {{ post.content|md }}\n{% else %}\n    <!-- Render content as HTML -->\n    {{ post.content|raw }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Checking Hidden Hint Status\nDESCRIPTION: Demonstrates how to check if a specific hint has been hidden by the user using the isBackendHintHidden method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($this->isBackendHintHidden('my_hint_key')): ?>\n    <!-- Do something when the hint is hidden -->\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring List Integration in YAML\nDESCRIPTION: Demonstrates how to configure the ImportExportController to use the List behavior for exporting data. This simplified configuration enables list integration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList: true\n```\n\n----------------------------------------\n\nTITLE: Tag List Widget in Relation Mode Configuration\nDESCRIPTION: Configuration example showing how to set up the taglist widget in relation mode for many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-taglist.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    mode: relation\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Success Callback in HTML\nDESCRIPTION: Form that shows an alert popup after a successful login request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-success=\"alert('Yay!')\">\n```\n\n----------------------------------------\n\nTITLE: Dispatching Global Events\nDESCRIPTION: Shows how to dispatch events without the control name prefix for global event handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nthis.dispatch('hello-ready', { prefix: false });\n```\n\n----------------------------------------\n\nTITLE: Checking if Collection is Empty with isEmpty() Method in PHP\nDESCRIPTION: The isEmpty() method returns true if the collection is empty, otherwise false is returned. This helps determine if a collection contains any items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([])->isEmpty();\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Properties in PHP\nDESCRIPTION: Implementation of defineProperties method to specify configurable widget properties with validation rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/report-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'title' => [\n            'title' => 'Widget title',\n            'default' => 'Top Pages',\n            'type' => 'string',\n            'validation' => [\n                'required' => [\n                    'message' => 'The Widget Title is required.'\n                ],\n            ]\n        ],\n        'days' => [\n            'title' => 'Number of days to display data for',\n            'default' => '7',\n            'type' => 'string',\n            'validation' => [\n                'regex' => [\n                    'message' => 'The days property can contain only numeric symbols.',\n                    'pattern' => '^[0-9]+$'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Lighttpd Configuration for October CMS\nDESCRIPTION: Lighttpd server configuration for October CMS including URL rewrite rules for proper handling of assets, static files, and application requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$HTTP[\"host\"] =~ \"domain.example.com\" {\n    server.document-root = \"/var/www/example/\"\n\n    url.rewrite-once = (\n        \"^/(plugins|modules/(system|backend|cms))/(([\\w-]+/)+|/|)assets/([\\w-]+/)+[-\\w^&'@{}[\\],$=!#().%+~/ ]+\\.(jpg|jpeg|gif|png|svg|swf|avi|mpg|mpeg|mp3|flv|ico|css|js|woff|ttf)(\\?.*|)$\" => \"$0\",\n        \"^/(system|themes/[\\w-]+)/assets/([\\w-]+/)+[-\\w^&'@{}[\\],$=!#().%+~/ ]+\\.(jpg|jpeg|gif|png|svg|swf|avi|mpg|mpeg|mp3|flv|ico|css|js|woff|ttf)(\\?.*|)$\" => \"$0\",\n        \"^/storage/app/uploads/public/[\\w-]+/.*$\" => \"$0\",\n        \"^/storage/app/media/.*$\" => \"$0\",\n        \"^/storage/app/resources/.*$\" => \"$0\",\n        \"^/storage/temp/public/[\\w-]+/.*$\" => \"$0\",\n        \"^/(favicon\\.ico)$\" => \"$0\",\n        \"(.*)\" => \"/index.php$1\"\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Form Validation with AJAX in HTML\nDESCRIPTION: Shows how to add the data-request-validate attribute to a form to enable validation features with AJAX requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSubmit\"\n    data-request-validate>\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Defining Widget Properties with Inspector in October CMS\nDESCRIPTION: Example of a defineProperties method implementation that specifies configurable properties for a report widget, including title and number of days settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'title' => [\n            'title'             => 'Widget title',\n            'default'           => 'Top Pages',\n            'type'              => 'string',\n            'validationPattern' => '^.+$',\n            'validationMessage' => 'The Widget Title is required.'\n        ],\n        'days' => [\n            'title'             => 'Number of days to display data for',\n            'default'           => '7',\n            'type'              => 'string',\n            'validationPattern' => '^[0-9]+$'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Wrapping with wrap() Method - PHP\nDESCRIPTION: Shows how to wrap values in a collection using the static wrap() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_81\n\nLANGUAGE: php\nCODE:\n```\n$collection = Collection::wrap('John Doe');\n\n$collection->all();\n\n$collection = Collection::wrap(['John Doe']);\n\n$collection->all();\n\n$collection = Collection::wrap(collect('John Doe'));\n\n$collection->all();\n```\n\n----------------------------------------\n\nTITLE: Selecting and Manipulating Child Elements\nDESCRIPTION: Demonstrates how to select and interact with child elements within the control using standard DOM methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    init() {\n        this.$name = this.element.querySelector('input.name');\n    }\n\n    connect() {\n        this.$name.value = 'Jeff';\n        this.$name.disabled = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom File Download Page in October CMS\nDESCRIPTION: Shows a complete example of a CMS page that handles downloading a model file attachment with custom file naming. It includes page configuration, PHP logic for file validation and download, and Twig markup for linking.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/downloads.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"Download File\"\nurl = \"/download-file/:id/:disk_name/:file_name?\"\nlayout = \"default\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $file = System\\Models\\File::find($this->param('id'));\n    if (!$file || !$file->isPublic()) {\n        throw new NotFoundException;\n    }\n\n    if ($file->disk_name !== $this->param('disk_name')) {\n        throw new NotFoundException;\n    }\n\n    $customFileName = $this->param('file_name');\n    if ($customFileName) {\n        $file->file_name = $customFileName;\n    }\n\n    return $file->download();\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'download-file'|page({\n    id: file.id,\n    disk_name: file.disk_name,\n    file_name: 'my-custom-name.png'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Route String Response\nDESCRIPTION: Example of returning a string response from a route definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function() {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Service Provider at Runtime in PHP\nDESCRIPTION: Shows how to register a service provider dynamically at runtime using the App::register method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nApp::register('FooServiceProvider');\n```\n\n----------------------------------------\n\nTITLE: Basic Number Column Configuration in YAML for OctoberCMS\nDESCRIPTION: Demonstrates the basic setup of a number column in an OctoberCMS list view. This configuration displays an 'Age' column with right alignment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-number.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n```\n\n----------------------------------------\n\nTITLE: Basic Tag List Widget Configuration in YAML\nDESCRIPTION: Basic configuration example for the taglist form widget showing how to define a tags field with space separator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-taglist.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    separator: space\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Variables with Twig Put Tag\nDESCRIPTION: Demonstrates how to use the {% put %} tag to store a value inside a placeholder variable for later use in layouts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% put pageTitle = 'Yet another page title' %}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Twig View\nDESCRIPTION: Shows the structure of a simple Twig view file with a variable placeholder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n<!-- View stored in plugins/acme/blog/views/greeting.htm -->\n\n<html>\n    <body>\n        <h1>Hello, {{ name }}</h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Object List Properties in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to define properties for an Object List inspector type. It includes the 'titleProperty' and 'itemProperties' parameters to structure the object list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-objectlist.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'objectList',\n            'titleProperty' => 'fullName',\n            'itemProperties' => [\n                'fullName' => [\n                    'title' => 'Full Name',\n                    'type' => 'string'\n                ],\n                'address' => [\n                    'title' => 'Address',\n                    'type' => 'string'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Paginator Path in PHP\nDESCRIPTION: Demonstrates how to customize the URI used by the paginator when generating links using the setPath method. This example changes the base path to 'custom/url'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n$users->setPath('custom/url');\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon SES Driver Dependencies with Composer\nDESCRIPTION: Command to install the AWS SDK for PHP required for using the Amazon SES mail driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require aws/aws-sdk-php\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Balloon Selector HTML\nDESCRIPTION: HTML markup for an inline balloon selector filter with multiple options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<?php\n    $activeValue = $scope->scopeValue !== null ? $scope->value : $scope->default;\n?>\n<div\n    data-scope-name=\"<?= $scope->scopeName ?>\"\n    data-control=\"balloon-selector\"\n    data-selector-allow-empty\n    class=\"filter-scope scope-inline control-balloon-selector form-control-sm\">\n    <ul class=\"list-unstyled m-0\">\n        <?php foreach ((array) $scope->options as $key => $value): ?>\n            <li\n                data-value=\"<?= $key ?>\"\n                class=\"small <?= $key === $activeValue ? 'active' : '' ?>\"\n                data-filter-action=\"apply\">\n                <?= $value ?>\n            </li>\n        <?php endforeach ?>\n    </ul>\n    <!-- Hidden input to store the selected filter value -->\n    <input type=\"hidden\" name=\"<?= $name ?>[value]\" value=\"<?= $activeValue ?>\">\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Survey Display Mode in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure a form to use the survey display mode with a specific size in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndesign:\n    displayMode: survey\n    size: 950\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Markup for Traffic Sources Widget in October CMS\nDESCRIPTION: Example partial HTML markup for a traffic sources widget that displays a pie chart with data about traffic sources.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Traffic sources</h3>\n\n    <div\n        class=\"control-chart\"\n        data-control=\"chart-pie\"\n        data-size=\"200\"\n        data-center-text=\"180\">\n        <ul>\n            <li>Direct <span>1000</span></li>\n            <li>Social networks <span>800</span></li>\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Localization File Structure\nDESCRIPTION: Shows the structure of a JSON localization file for French translations in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"I love programming.\": \"j'adore programmer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Events with AjaxException\nDESCRIPTION: Shows how to dispatch browser events and then throw an AjaxException to halt the AJAX process. This combination allows for user interaction before continuing with another request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\npublic function onUpdate()\n{\n    $this->dispatchBrowserEvent('app:stale-document');\n\n    throw new AjaxException;\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Grid System Example in Twig\nDESCRIPTION: Shows how to use chunk() method with Twig templating to create a Bootstrap grid layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for chunk in products.chunk(3) %}\n    <div class=\"row\">\n        {% for product in chunk %}\n            <div class=\"col-4\">{{ product.name }}</div>\n        {% endfor %}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Disabling Required Fields in YAML\nDESCRIPTION: This snippet demonstrates how to disable validation for the title field and hide the slug field in a blueprint definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    title:\n        validation: false\n\n    slug:\n        hidden: true\n```\n\n----------------------------------------\n\nTITLE: Listing Admin-Enabled Sites in PHP\nDESCRIPTION: Example of listing sites that are enabled in the admin panel.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$sites = Site::listEditEnabled();\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Placeholder\nDESCRIPTION: Shows how to define a placeholder in a layout template that can be filled by pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/layouts.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with Default Values using PHP\nDESCRIPTION: Illustrates different ways to retrieve session data, including using default values and closures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$value = Session::get('key');\n\n$value = Session::get('key', 'default');\n\n$value = Session::get('key', function() { return 'default'; });\n```\n\n----------------------------------------\n\nTITLE: Determining Request Format\nDESCRIPTION: Demonstrates how to retrieve the requested response format based on HTTP Accept header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nif (Request::format() == 'json') {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content with Twig\nDESCRIPTION: Demonstrates rendering a Markdown content block using the {% content %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-content.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"changelog.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Unqualified File Name for Partial Column in OctoberCMS YAML\nDESCRIPTION: Shows how to use an unqualified file name for the 'path' property, which will be resolved to a partial file in the model or controller directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: column_for_content\n```\n\n----------------------------------------\n\nTITLE: Type-Aware Flash Message Display in Twig\nDESCRIPTION: Shows how to render flash messages with bootstrap alert classes using the message type variable. The type can be success, error, info, or warning.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-flash.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <div class=\"alert alert-{{ type }}\">\n        {{ message }}\n    </div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Form Values\nDESCRIPTION: Shows how to specify a default value when using Form::value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::value('name', 'Ê≠¶Âøó‰ºü') ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Set Inspector with Default Values in PHP for October CMS\nDESCRIPTION: Example showing how to define a 'set' inspector type with default selected values in October CMS. The 'default' parameter specifies which items are selected by default.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-set.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'context' => [\n            'title' => 'Context',\n            'type' => 'set',\n            'items' => [\n                'create' => 'Create',\n                'update' => 'Update',\n                'preview' => 'Preview'\n            ],\n            'default' => ['create', 'update']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Multisite Feature in October CMS Configuration\nDESCRIPTION: This PHP code snippet shows how to disable the multisite feature entirely by setting the 'enabled' configuration value to false in the multisite.php configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/multisite.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'enabled' => false\n```\n\n----------------------------------------\n\nTITLE: Registering Role-Specific Permissions in OctoberCMS\nDESCRIPTION: Demonstrates how to register permissions specific to certain roles in OctoberCMS by specifying the 'roles' option in the permission definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/users.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerPermissions()\n{\n    return [\n        'acme.blog.access_categories' => [\n            'label' => 'Manage the blog categories',\n            'tab' => 'Blog',\n            'order' => 200,\n            'roles' => ['developer']\n        ]\n        // ...\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Component Property Configuration\nDESCRIPTION: Example of using a dynamic URL parameter in component configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/:my_custom_parameter\"\n\n[blogPost]\nid = \"{{ :my_custom_parameter }}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Middleware by Extending CMS Controller in October CMS\nDESCRIPTION: Example of registering custom middleware by extending the CmsController class in October CMS. This approach adds the middleware to a specific controller using the boot method of a plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function boot()\n{\n    \\Cms\\Classes\\CmsController::extend(function($controller) {\n        $controller->middleware(\\Path\\To\\Custom\\Middleware::class);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Page in YAML\nDESCRIPTION: Shows the YAML configuration specifically for the Import page. It includes settings for the page title, model class, list configuration, and redirection after import.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n    title: Import Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberImport\n    list: $/acme/campaign/models/subscriberimport/columns.yaml\n    redirect: acme/campaign/subscribers\n```\n\n----------------------------------------\n\nTITLE: YAML Options with Visual Elements\nDESCRIPTION: Shows how to define options with additional visual elements like colors, icons, and images for dropdown fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/define-options.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    red: [Color, '#ff0000']\n    icon: [Icon, 'oc-icon-calendar']\n    image: [Image, '/path/to/image.png']\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Column in October CMS\nDESCRIPTION: This configuration sets up a basic date column in an October CMS list view, displaying the date in a standard format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n```\n\n----------------------------------------\n\nTITLE: Basic Array Options Example in PHP\nDESCRIPTION: Example of an options array where keys represent stored values and values represent display labels. When a record has a value of 'open', the column will display 'Open'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-selectable.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n['open' => 'Open', 'closed' => 'Closed']\n```\n\n----------------------------------------\n\nTITLE: Implementing Page URL Resolution for Custom Models in OctoberCMS\nDESCRIPTION: This code demonstrates how to resolve page URLs by handling the 'cms.pageLookup.resolveItem' event in OctoberCMS. It finds a model based on the reference ID, builds URLs using the CMS controller, and recursively processes child items when requested. The result includes URL, active state, title, and modification time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('cms.pageLookup.resolveItem', function($type, $item, $url, $theme) {\n    if ($type !== 'my-model') {\n        return;\n    }\n\n    $model = MyModel::find($item->reference);\n    if (!$model) {\n        return;\n    }\n\n    $controller = new Controller($theme);\n\n    $pageUrl = $controller->pageUrl($item->cmsPage, [\n        'id' => $model->id,\n        'slug' => $model->slug\n    ]);\n\n    $result = [\n        'url' => $pageUrl,\n        'isActive' => $pageUrl == $url,\n        'title' => $model->title,\n        'mtime' => $model->updated_at,\n    ];\n\n    if (!$item->nesting) {\n        return $result;\n    }\n\n    $iterator = function($children) use (&$iterator, &$item, &$theme, $url, $controller, $model) {\n        $branch = [];\n\n        foreach ($children as $child) {\n            $childUrl = $controller->pageUrl($item->cmsPage, [\n                'id' => $model->id,\n                'slug' => $model->slug\n            ]);\n\n            $childItem = [\n                'url' => $childUrl,\n                'isActive' => $childUrl == $url,\n                'title' => $child->title,\n                'mtime' => $child->updated_at,\n            ];\n\n            if ($child->children) {\n                $childItem['items'] = $iterator($child->children);\n            }\n\n            $branch[] = $childItem;\n        }\n\n        return $branch;\n    };\n\n    $result['items'] = $iterator($model->children);\n\n    return $result;\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Database Connection and Storage Engine\nDESCRIPTION: Examples of specifying a non-default database connection and setting the storage engine for a table when creating it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nSchema::connection('foo')->create('users', function ($table) {\n    $table->increments('id');\n});\n```\n\nLANGUAGE: php\nCODE:\n```\nSchema::create('users', function ($table) {\n    $table->engine = 'InnoDB';\n\n    $table->increments('id');\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Configuration in Twig Templates\nDESCRIPTION: Example of how to access theme configuration values from the theme.yaml file. This snippet shows how to retrieve the description property for use in a meta tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.theme.config.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Injecting CSS Row Classes in PHP\nDESCRIPTION: Example of injecting custom CSS classes into list rows based on record data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass Lessons extends \\Backend\\Classes\\Controller\n{\n    [...]\n\n    public function listInjectRowClass($lesson, $definition)\n    {\n        // Strike through past lessons\n        if ($lesson->lesson_date->lt(Carbon::today())) {\n            return 'strike';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Backend User Password\nDESCRIPTION: Command to change the password for a backend user or administrator via the command line, useful for account recovery.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:passwd username password\n```\n\n----------------------------------------\n\nTITLE: Disabling Multisite Feature Configuration\nDESCRIPTION: Configuration code to disable the multisite feature in October CMS by setting the enabled flag to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/multisite.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'enabled' => false\n```\n\n----------------------------------------\n\nTITLE: Basic Repeater Field Configuration in YAML\nDESCRIPTION: Basic example of configuring a repeater field with date and text area inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    form:\n        fields:\n            added_at:\n                label: Date Added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom View Path in YAML\nDESCRIPTION: Shows how to specify a custom view path in the list configuration YAML file to override default list widget views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom view path\ncustomViewPath: $/acme/blog/controllers/reviews/list\n```\n\n----------------------------------------\n\nTITLE: Translating URL Parameters with PHP Event Listener\nDESCRIPTION: Implements an event listener to override URL parameters with translated versions when switching between sites, using the model's multisite functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/sitepicker.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$myModel = MyModel::find(1);\n$otherModels = $myModel->newOtherSiteQuery()->get();\n\nEvent::listen('cms.sitePicker.overrideParams', function($page, $params, $currentSite, $proposedSite) use ($otherModels) {\n    $otherModel = $otherModels->where('site_id', $proposedSite->id)->first();\n    if ($otherModel) {\n        $params['id'] = $otherModel->id;\n        $params['slug'] = $otherModel->slug;\n        $params['fullslug'] = $otherModel->fullslug;\n    }\n    return $params;\n});\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Injected Assets\nDESCRIPTION: Demonstrates how to provide additional HTML attributes to injected assets using the second argument of addCss and addJs methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js'], ['defer' => true]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object List with Key Property in PHP for OctoberCMS\nDESCRIPTION: This snippet demonstrates how to define an Object List with a 'keyProperty' option. This configuration results in an associative array output using the specified key property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-objectlist.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'objectList',\n            'titleProperty' => 'fullName',\n            'keyProperty' => 'login',\n            'itemProperties' => [\n                'fullName' => [\n                    'title' => 'Full Name',\n                    'type' => 'string'\n                ],\n                'login' => [\n                    'title' => 'Login',\n                    'type' => 'string'\n                ],\n                'address' => [\n                    'title' => 'Address',\n                    'type' => 'string'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Model in OctoberCMS\nDESCRIPTION: The create:model command generates the files needed for a new model. It requires two parameters: the author and plugin name, and the model class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:model Acme.Blog Post\n```\n\n----------------------------------------\n\nTITLE: Custom Column Type Usage in YAML\nDESCRIPTION: Shows how to use a custom column type in list column definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Column Definitions\n# ===================================\n\ncolumns:\n    secret_code:\n        label: Secret code\n        type: uppercase\n```\n\n----------------------------------------\n\nTITLE: Creating Console Command with October CMS Artisan Command\nDESCRIPTION: Generates a new console command for the plugin. Requires plugin identifier and command name as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/scaffolding.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:command RainLab.Blog MyCommand\n```\n\n----------------------------------------\n\nTITLE: Pushing Values to Session Array using PHP\nDESCRIPTION: Shows how to add a new value to an existing array in the session using the push method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSession::push('user.teams', 'developers');\n```\n\n----------------------------------------\n\nTITLE: Using |app Filter for Static URLs in Twig\nDESCRIPTION: Illustrates how to use the |app filter to generate absolute URLs for static pages. This example creates a link to an 'About Us' page using the filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-app.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ '/about-us'|app }}\">\n    About Us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Control with the Init Method\nDESCRIPTION: Demonstrates how to use the init method to set up a control's initial state before logic is executed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    init() {\n        // Establish the control before running logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in Different Contexts\nDESCRIPTION: Demonstrates how to pass variables to partials in different execution contexts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// From page or layout PHP code section\n$this['result'] = 'Hello world!';\n\n// From a component class\n$this->page['result'] = 'Hello world!';\n\n// From a backend controller or widget\n$this->vars['result'] = 'Hello world!';\n```\n\n----------------------------------------\n\nTITLE: Implementing Rich Editor in OctoberCMS\nDESCRIPTION: Shows how to use the rich editor (WYSIWYG) field type in OctoberCMS forms and how it renders in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{richeditor name=\"content\" label=\"Main content\"}Default text{/richeditor}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ content|raw }}\n```\n\n----------------------------------------\n\nTITLE: Default Value Configuration in YAML\nDESCRIPTION: YAML configuration showing how to set a default value for the number filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-number.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    default: 14\n```\n\n----------------------------------------\n\nTITLE: Appending Parameters to Pagination Links in Twig\nDESCRIPTION: Demonstrates how to append additional query string parameters to pagination links using the appends method. This example adds a sort parameter to all generated pagination links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ users.appends({sort: 'votes'}).render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Touching Parent Timestamps\nDESCRIPTION: This snippet demonstrates how to configure a model to update its parent's timestamps when the child model is updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    /**\n     * Ë¶ÅËß¶ÂèëÁöÑÊâÄÊúâÂÖ≥ËÅîÂÖ≥Á≥ª\n     */\n    protected $touches = ['post'];\n\n    /**\n     * Relations\n     */\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic MIME Validation Rule Example\nDESCRIPTION: Demonstrates how to validate file MIME types using the mimes rule.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: Throwing an AJAX Exception with Response Data\nDESCRIPTION: Demonstrates how to throw an AjaxException to treat the response as an error while still returning data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nthrow new AjaxException([\n    'error' => 'Not enough questions',\n    'questionsNeeded' => 2\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Media Finder Configuration in YAML\nDESCRIPTION: Basic configuration for a Media Finder field to select a PDF file. The field will render as a media finder input that allows selecting a file from the media manager.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-mediafinder.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwhitepaper_file:\n    label: Whitepaper PDF\n    type: mediafinder\n```\n\n----------------------------------------\n\nTITLE: Binding an Existing Instance to the IoC Container in October CMS\nDESCRIPTION: Shows how to bind an already instantiated object into the container, making it available for later resolution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = new Foo;\n\nApp::instance('foo', $foo);\n```\n\n----------------------------------------\n\nTITLE: Creating Links to Pages in Subdirectories\nDESCRIPTION: Shows how to reference a page that is located in a subdirectory of the theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'contacts/about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Twig If Statement with Array Check and Loop\nDESCRIPTION: Example showing how to check if an array is not empty and loop through its contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/if.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if users %}\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties with Inspector in PHP\nDESCRIPTION: This snippet demonstrates how to define an 'object' inspector type with nested properties including string fields and a dropdown. It shows the structure for creating an address object with street address, city, and country properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-object.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'object',\n            'properties' => [\n                'streetAddress' => [\n                    'title' => 'Street Address',\n                    'type' => 'string'\n                ],\n                'city' => [\n                    'title' => 'City',\n                    'type' => 'string'\n                ],\n                'country' => [\n                    'title' => 'Country',\n                    'type' => 'dropdown',\n                    'options' => [\n                        'us' => 'US',\n                        'ca' => 'Canada'\n                    ]\n                ]\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific AJAX Handlers\nDESCRIPTION: Example of implementing handler-specific loading indicators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<form>\n    <button data-request=\"onPay\">Pay Now</button>\n    <button data-request=\"onCancel\">Cancel</button>\n\n    <div class=\"is-payment-loading\">\n        Processing Payment...\n    </div>\n</form>\n```\n\nLANGUAGE: css\nCODE:\n```\n.is-payment-loading {\n    display: none;\n}\n\nform[data-ajax-progress=onPay] .is-payment-loading {\n    display: block;\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies from IoC Container\nDESCRIPTION: Shows how to resolve a previously bound dependency from the container using make() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$value = App::make('foo');\n```\n\n----------------------------------------\n\nTITLE: Accessing Carbon Date Methods\nDESCRIPTION: Shows how to use Carbon instance methods on mutated date attributes\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn $user->disabled_at->getTimestamp();\n```\n\n----------------------------------------\n\nTITLE: Safe Mode Configuration in .env File\nDESCRIPTION: Demonstrates setting the CMS_SAFE_MODE variable which controls whether PHP code execution is disabled in CMS templates for security purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nCMS_SAFE_MODE=null\n```\n\n----------------------------------------\n\nTITLE: Disabling Scroll on Turbo Router Visit in HTML\nDESCRIPTION: Shows how to disable automatic scrolling to the top of the page when using PJAX routing, by adding the 'data-turbo-no-scroll' attribute to the link element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/\" data-turbo-no-scroll>Filter</a>\n```\n\n----------------------------------------\n\nTITLE: CMS Page Redirect Handler\nDESCRIPTION: PHP handler for redirecting to a specific CMS page with route parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onRedirect()\n{\n    return Cms::redirect('blog/post', ['slug' => 'foobar']);\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Seeding Commands\nDESCRIPTION: Artisan commands for seeding theme content, including options for root-level blueprint importing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/seeding-themes.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:seed <theme name>\n\nphp artisan theme:seed <theme name> --root\n```\n\n----------------------------------------\n\nTITLE: Accessing External Variables in Partial PHP Code\nDESCRIPTION: Demonstrates how to access variables passed to a partial from within the PHP section. Variables assigned to the partial can be accessed using the $this object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?\nfunction onStart()\n{\n    $this['location'] = $this->city . ', ' . $this->country;\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ location }} is the same as {{ city }}, {{ country }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Lazy Commit of Deferred Bindings in PHP\nDESCRIPTION: Shows how to commit deferred bindings at any time using the commitDeferred method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$post->commitDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Injecting CSS Assets Programmatically in October CMS\nDESCRIPTION: Example of how to programmatically inject CSS files into a page using PHP. This method can be used in component code or page PHP section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-styles.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Built-in PHP Development Server\nDESCRIPTION: Launches Laravel's built-in development server for local testing of the October CMS installation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Creating Email and File Input Fields\nDESCRIPTION: Example showing how to generate email and file input fields with the Form helper.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::email($name, $value = null, $attributes = []) ?>\n<?= Form::file($name, $attributes = []) ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Emitter Trait in PHP\nDESCRIPTION: Shows how to use the Emitter trait to bind and fire events on a single instance of an object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/events.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass UserManager\n{\n    use \\October\\Rain\\Support\\Traits\\Emitter;\n}\n\n$manager = new UserManager;\n$manager->bindEvent('user.beforeRegister', function($user) {\n    // Check if the $user is a spammer\n});\n\n$manager->fireEvent('user.beforeRegister', [$user]);\n```\n\n----------------------------------------\n\nTITLE: Viewing Failed Jobs with Artisan in Bash\nDESCRIPTION: Artisan command to view all failed jobs. This helps in monitoring and managing failed jobs in the queue system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:failed\n```\n\n----------------------------------------\n\nTITLE: Resizing with Original Filename Preservation\nDESCRIPTION: Shows how to preserve the original filename when resizing an image using the filename option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { filename: true }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Using fresh Method with Relationships in PHP\nDESCRIPTION: Shows how to get a fresh instance of each model in the collection from the database, with optional eager loading of relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users = $users->fresh();\n\n$users = $users->fresh('comments');\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in PHP Section\nDESCRIPTION: Example showing how to access URL parameters from the page's PHP section using the param() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n==\nfunction onStart()\n{\n    $post_id = $this->param('post_id');\n}\n==\n```\n\n----------------------------------------\n\nTITLE: Using str_repeat() Filter for String Repetition\nDESCRIPTION: Shows how to use the str_repeat() filter to repeat a string multiple times.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\nWe are the {{ 'best '|str_repeat(3) }}!\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cookie Values\nDESCRIPTION: Shows how to retrieve cookie values in October CMS applications.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$value = Cookie::get('name');\n```\n\n----------------------------------------\n\nTITLE: Checking String Ending in PHP\nDESCRIPTION: The ends_with function determines if the given string ends with the given value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n$value = ends_with('This is my name', 'name');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Unix Socket\nDESCRIPTION: Configuration for Memcached using UNIX socket path instead of TCP/IP connection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    [\n        'host' => '/var/run/memcached/memcached.sock',\n        'port' => 0,\n        'weight' => 100\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Response Status in PHP\nDESCRIPTION: Illustrates how to check the status of an HTTP response using various methods like successful(), failed(), clientError(), and serverError().\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Status code is >= 200 and < 300\n$response->successful();\n\n// Status code is >= 400\n$response->failed();\n\n// Response has a 400 level status code\n$response->clientError();\n\n// Response has a 500 level status code\n$response->serverError();\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Integration with List Behavior in YAML\nDESCRIPTION: Shows how to configure the export functionality to use the list behavior for providing export data. This approach eliminates the need for a separate export view and uses the existing list configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    useList: true\n```\n\n----------------------------------------\n\nTITLE: Simple 404 Page Abort\nDESCRIPTION: Demonstrates basic usage of abort() to display the theme's 404 page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/abort.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(404) %}\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation in Settings Area\nDESCRIPTION: Places a navigation item in the Settings area with a specific category. Parent is set to 'settings' to determine the placement.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    parent: settings\n    category: Collections\n```\n\n----------------------------------------\n\nTITLE: Getting File Path of Single Attachment in PHP\nDESCRIPTION: Shows how to get the full URL path of a single file attachment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho $model->avatar->getPath();\n```\n\n----------------------------------------\n\nTITLE: Component Tag with Variables\nDESCRIPTION: Example of passing variables to a component during render time using the component tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/component.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" postsPerPage=\"5\" %}\n```\n\n----------------------------------------\n\nTITLE: Selectable Column with Options Preset in YAML\nDESCRIPTION: Implementation of a selectable column that uses a predefined options preset. This example uses 'phosphorIcons' preset to populate the available icon choices.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-selectable.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nicon:\n    label: Icon\n    type: selectable\n    optionsPreset: phosphorIcons\n```\n\n----------------------------------------\n\nTITLE: Tab Configuration Options in YAML\nDESCRIPTION: Advanced tab configuration showing options like stretch, defaultTab, icons, lazy loading, and CSS class assignments for tabs and individual panes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntabs:\n    stretch: true\n    defaultTab: User\n    cssClass: text-blue\n    lazy:\n        - Groups\n    paneCssClass:\n        0: first-tab\n        1: second-tab\n    icons:\n        User: icon-user\n        Groups: icon-group\n\n    fields:\n        username:\n            type: text\n            label: Username\n            tab: User\n\n        groups:\n            type: relation\n            label: Groups\n            tab: Groups\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Beginning of Collection in PHP\nDESCRIPTION: The prepend method adds an item to the beginning of the collection. It modifies the original collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->prepend(0);\n\n$collection->all();\n\n// [0, 1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Queueing Cookies for the Next Response\nDESCRIPTION: Shows how to queue cookies to be automatically attached to the application's final response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCookie::queue($name, $value, $minutes);\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Rewrite Rules for October CMS in IIS\nDESCRIPTION: This XML configuration sets up URL rewrite rules for IIS to properly handle October CMS routing. It defines exceptions for specific file paths and redirects all other requests to index.php.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <rewrite>\n            <rules>\n                <clear />\n                <rule name=\"October CMS to handle all non-allowlisted URLs\" stopProcessing=\"true\">\n                    <match url=\"^(.*)$\" ignoreCase=\"false\" />\n                    <conditions logicalGrouping=\"MatchAll\">\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/.well-known/*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/uploads/public/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/media/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/resources/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/temp/public/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/themes/.*/(assets|resources)/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/plugins/.*/(assets|resources)/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/modules/.*/(assets|resources)/.*\" negate=\"true\" />\n                    </conditions>\n                    <action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"true\" />\n                </rule>\n            </rules>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Using union() Method in PHP Collections\nDESCRIPTION: The union method adds a given array to the collection while preserving original collection values for any duplicate keys, essentially merging arrays with preference for original values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_67\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1 => ['a'], 2 => ['b']]);\n\n$union = $collection->union([3 => ['c'], 1 => ['b']]);\n\n$union->all();\n\n// [1 => ['a'], 2 => ['b'], 3 => ['c']]\n```\n\n----------------------------------------\n\nTITLE: Accessing Inverse Polymorphic Relationships in October CMS\nDESCRIPTION: This snippet demonstrates how to retrieve all videos associated with a tag using the inverse relationship. This uses the morphedByMany relationship defined in the Tag model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$tag = Tag::find(1);\n\nforeach ($tag->videos as $video) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using str_lcfirst() Filter for First Character Lowercase\nDESCRIPTION: Demonstrates the str_lcfirst() filter, which makes a string's first character lowercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\nHello I'm {{ 'Jack'|str_lcfirst }}\n```\n\n----------------------------------------\n\nTITLE: Assigning New Variables to Content in Twig\nDESCRIPTION: Example of assigning new variables for use in content blocks\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"location.htm\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\n----------------------------------------\n\nTITLE: Logging Information with User Context in October CMS\nDESCRIPTION: Shows how to write information to the logs using the Log facade. This example logs a message about showing a user profile, including the user's name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\nLog::info('Showing user profile for user: '.$user->name);\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Values in PHP for October CMS Model Event\nDESCRIPTION: This snippet demonstrates how to access original values of a model's attributes in an afterUpdate event. It compares the current title with the original title to detect changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\npublic function afterUpdate()\n{\n    if ($this->title != $this->original['title']) {\n        // title changed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Response Instance in PHP\nDESCRIPTION: The response function creates a response instance or obtains an instance of the response factory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_38\n\nLANGUAGE: PHP\nCODE:\n```\nreturn response('Hello World', 200, $headers);\n\nreturn response()->json(['foo' => 'bar'], 200, $headers);\n```\n\n----------------------------------------\n\nTITLE: Re-enabling PJAX on Child Elements\nDESCRIPTION: This HTML example demonstrates how to re-enable PJAX routing on a specific link when its parent container has PJAX disabled.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-turbo=\"false\">\n    <a href=\"/\" data-turbo=\"true\">Enabled</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties\nDESCRIPTION: Example of using theme-defined CSS custom properties in stylesheets\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\na {\n    color: var(--my-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Injected Assets with Twig Tags\nDESCRIPTION: Shows how to output the injected CSS and JavaScript assets in templates using the {% styles %} and {% scripts %} tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Using html_limit() with Custom Suffix\nDESCRIPTION: Demonstrates how to limit HTML content with a custom suffix instead of the default ellipsis.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<p>Post content...</p>'|html_limit(100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Mixin Field with Handle Reference\nDESCRIPTION: Demonstrates including a mixin using a blueprint handle as the source reference, specifically for location fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-mixin.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_location_fields:\n    type: mixin\n    source: Fields\\Location\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Page Link Creation\nDESCRIPTION: Shows how to create a page link to a page located in a subdirectory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ 'contacts/about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Listing Git Tags for Version Management\nDESCRIPTION: Bash command to list existing Git tags for a package, which is necessary for semantic versioning of October CMS packages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ git tag\nv1.0\nv2.0\n```\n\n----------------------------------------\n\nTITLE: Using array_divide() Function in PHP\nDESCRIPTION: The array_divide function returns two arrays - one containing the keys and the other containing the values from the original array. This allows for easy separation of keys and values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nlist($keys, $values) = array_divide(['name' => 'Desk']);\n\n// $keys: ['name']\n\n// $values: ['Desk']\n```\n\n----------------------------------------\n\nTITLE: Disabling Turbo Router for Incoming Requests in HTML\nDESCRIPTION: Shows how to disable PJAX routing for incoming requests on a specific page by including a meta tag in the head section with the 'turbo-visit-control' attribute set to 'reload'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"turbo-visit-control\" content=\"reload\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Entries Field with Record Finder Display Mode\nDESCRIPTION: Configuration for displaying entries field as a record finder interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-entries.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    displayMode: recordfinder\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in Content Blocks\nDESCRIPTION: Shows the syntax for accessing variables within content blocks, including single variables and collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {country}, city: {city}.</p>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {likes}\n        <li>{name}</li>\n    {/likes}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Deleting Database Records\nDESCRIPTION: Demonstrates deleting records from the database using raw SQL, returning the number of deleted rows.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$deleted = Db::delete('delete from users');\n```\n\n----------------------------------------\n\nTITLE: Opening Downloaded File in New Window in HTML\nDESCRIPTION: Code to open the downloaded file in a new browser window by adding the data-browser-target attribute set to _blank, typically used for previewing PDFs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onExport\" data-request-download data-browser-target=\"_blank\">\n    Open in New Window\n</button>\n```\n\n----------------------------------------\n\nTITLE: Setting Default Sort for Stream Entries in YAML\nDESCRIPTION: This example demonstrates how to set a default sorting order for stream entries using the 'defaultSort' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: stream\nname: Blog Post\n\ndefaultSort:\n    column: title\n    direction: asc\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Query Logging\nDESCRIPTION: Shows how to enable in-memory logging of all database queries for the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/basics.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nDb::connection()->enableQueryLog();\n```\n\n----------------------------------------\n\nTITLE: Using Layout Description in Meta Tags\nDESCRIPTION: Shows how to access the layout description property to populate meta description tags. The description is pulled from the layout configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.layout.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Checking If Password Needs Rehashing in PHP\nDESCRIPTION: Code to determine if a password needs to be rehashed based on changes to the work factor of the hashing algorithm, using the Hash facade's needsRehash method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/hashing-encryption.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Hash::needsRehash($hashed)) {\n    $hashed = Hash::make('plain-text');\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Field Configuration with Default Value in YAML\nDESCRIPTION: Configuring a switch field with a default value of true, which enables the switch by default for new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-switch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display Content\n    type: switch\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Important Version Update Example in YAML\nDESCRIPTION: Demonstrates how to mark a major version update that contains breaking changes by incrementing the major version number.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nv2.1.0: ËøôÊòØ v1 ÁöÑÈáçË¶ÅÊõ¥Êñ∞ÔºåÂÖ∂‰∏≠ÂåÖÂê´ÈáçÂ§ßÊõ¥Êîπ„ÄÇ\n```\n\n----------------------------------------\n\nTITLE: Float Validation Configuration\nDESCRIPTION: Shows how to implement float validation for numeric values with decimal points.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector-types.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'amount' => [\n            'title' => 'Amount',\n            'type' => 'string',\n            'validation' => [\n                'float' => [\n                    'message' => 'The Amount field should contain a positive floating point value'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing Array Values to Session in PHP\nDESCRIPTION: Demonstrates how to push a new value onto an existing array in the session using the push method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nSession::push('user.teams', 'developers');\n```\n\n----------------------------------------\n\nTITLE: Attaching and Detaching Multiple Relationships\nDESCRIPTION: This code shows how to attach and detach multiple relationships at once by passing arrays of IDs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->roles()->detach([1, 2, 3]);\n\n$user->roles()->attach([1 => ['expires' => $expires], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties with Nested Fields in PHP\nDESCRIPTION: Example of defining an 'object' inspector type with three nested properties: two string fields and one dropdown. This demonstrates the basic structure of object property definitions in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-object.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'object',\n            'properties' => [\n                'streetAddress' => [\n                    'title' => 'Street Address',\n                    'type' => 'string'\n                ],\n                'city' => [\n                    'title' => 'City',\n                    'type' => 'string'\n                ],\n                'country' => [\n                    'title' => 'Country',\n                    'type' => 'dropdown',\n                    'options' => [\n                        'us' => 'US',\n                        'ca' => 'Canada'\n                    ]\n                ]\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for File Uploads in October CMS\nDESCRIPTION: How to determine if a file was uploaded for a specific input field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nif (Input::hasFile('photo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Name Specification\nDESCRIPTION: Shows how to specify a queue/tube name when pushing a job.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message], 'emails');\n```\n\n----------------------------------------\n\nTITLE: Format Options YAML Configuration\nDESCRIPTION: Demonstrates how to configure default format options for import/export functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultFormatOptions:\n    fileFormat: json\n```\n\n----------------------------------------\n\nTITLE: Export View Template in HTML\nDESCRIPTION: HTML view template for the export page featuring a form with export rendering and submission button.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->exportRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onExportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Export records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Syntax Example\nDESCRIPTION: Examples of common Markdown syntax including bold, italic, strikethrough, and heading formats.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nThis text is **bold**, this text is *italic*, this text is ~~crossed out~~.\n\n# The largest heading (an <h1> tag)\n## The second largest heading (an <h2> tag)\n...\n###### The 6th largest heading (an <h6> tag)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Collection with an Array\nDESCRIPTION: Simple example showing how to create a new Collection instance by passing an array to the constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$collection = new October\\Rain\\Support\\Collection([1, 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Parent ID Column in October CMS Tree Models\nDESCRIPTION: Demonstrates how to change the column name used for the parent relationship by defining a custom PARENT_ID constant.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nconst PARENT_ID = 'my_parent_column';\n```\n\n----------------------------------------\n\nTITLE: Conditional Display Based on Environment in Twig\nDESCRIPTION: This snippet demonstrates how to use the 'this.environment' property to conditionally render content in a Twig template. It checks if the current environment is 'test' and displays a banner if true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-environment.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.environment == 'test' %}\n\n    <div class=\"banner\">Test Environment</div>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Favicon Output Example\nDESCRIPTION: Shows the HTML output when the |app filter is applied to a favicon path with example domain octobercms.com\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/app.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"icon\" href=\"https://octobercms.com/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Templates in Plugin\nDESCRIPTION: Shows how to register mail templates, layouts and partials in a plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailTemplates()\n{\n    return [\n        'rainlab.user:activate' => 'rainlab.user::mail.activate',\n        'rainlab.user:restore' => 'rainlab.user::mail.restore',\n    ];\n}\n\npublic function registerMailLayouts()\n{\n    return [\n        'marketing' => 'acme.blog::layouts.marketing',\n        'notification' => 'acme.blog::layouts.notification',\n    ];\n}\n\npublic function registerMailPartials()\n{\n    return [\n        'tracking' => 'acme.blog::partials.tracking',\n        'promotion' => 'acme.blog::partials.promotion',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using {% verbatim %} Tag in Twig\nDESCRIPTION: Demonstrates how to use the {% verbatim %} tag to prevent Twig from parsing a section of the template. This is useful when you want to display Twig-like syntax without it being processed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/verbatim.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% verbatim %}<p>Hello, {{ name }}</p>{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Site Context Management in PHP\nDESCRIPTION: Demonstrates how to work with site-specific context using the Site facade to retrieve models in the context of a specific site.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/multisite.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$model = Site::withContext(2, function() {\n    return Model::find(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeTense Column in October CMS\nDESCRIPTION: Defines a list column that displays time with contextual information about when it occurred relative to today, such as 'Today at 12:49', 'Yesterday at 4:00', or '18 Sep 2015 at 14:33'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: timetense\n```\n\n----------------------------------------\n\nTITLE: PHP Options Scope Implementation\nDESCRIPTION: Implementation of a custom scope method for filtering available options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeApplyRoleOptionsFilter($query)\n{\n    return $query->where('id', '<>', 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Section Component Configuration in October CMS\nDESCRIPTION: Demonstrates the basic configuration of the 'section' component for a Blog\\Author entry, using the default :slug URL parameter and displaying the author's name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/:slug\"\n\n[section]\nhandle = \"Blog\\Author\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Posts by {{ section.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Customizing Form Widget Save Value in PHP\nDESCRIPTION: Examples of customizing the save value behavior of a form widget by overriding the getSaveValue method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\npublic function getSaveValue($value)\n{\n    return $value;\n}\n\npublic function getSaveValue($value)\n{\n    return \\Backend\\Classes\\FormField::NO_SAVE_DATA;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Stream Entry Blueprint in YAML\nDESCRIPTION: This snippet shows how to create a stream entry blueprint for blog posts. It uses the 'stream' type for time-based entries and includes a rich editor content field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: stream\nname: Blog Post\n\nfields:\n    content:\n        label: Post Content\n        type: richeditor\n```\n\n----------------------------------------\n\nTITLE: Rendering List in October CMS Controller View\nDESCRIPTION: PHP code to render a list in a controller view file. This renders the list with its toolbar.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->listRender() ?>\n```\n\n----------------------------------------\n\nTITLE: Creating Controller with Form Design in October CMS\nDESCRIPTION: This bash command demonstrates how to create a controller with a specific form design in October CMS using the artisan command-line tool.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:controller Acme.Blog Posts --design=popup\n```\n\n----------------------------------------\n\nTITLE: Creating Report Widget with Artisan Command in October CMS\nDESCRIPTION: Command to generate a new report widget, view and basic asset files for October CMS. The command requires the author/plugin name and the report widget class name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/report-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:reportwidget Acme.Blog TopPosts\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple File Attachments in PHP\nDESCRIPTION: Shows how to create multiple file attachments using the create method on the relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar()->create(['data' => Input::file('file_input')]);\n```\n\n----------------------------------------\n\nTITLE: Server-side Pushing Partial Updates\nDESCRIPTION: PHP code that demonstrates how to push updates from the server to the client. The 'onRefreshTime' handler returns an array that updates the '#myDiv' element with content from the 'mypartial' partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/ajax/update-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onRefreshTime()\n{\n    return [\n        '#myDiv' => $this->renderPartial('mypartial')\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Values in PHP\nDESCRIPTION: Example of an override configuration file that returns only the values to be overridden.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/file-settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'maxItems' => 20\n];\n```\n\n----------------------------------------\n\nTITLE: Rendering Textarea in October CMS\nDESCRIPTION: Shows how to create a multiple line input field for larger blocks of text.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{textarea name=\"websiteDescription\" label=\"Website Description\"}\n    This is our vision for things to come\n{/textarea}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering a Blog Post Component in October CMS\nDESCRIPTION: This code demonstrates how to initialize a 'blogPost' component in a page configuration and render it using the component tag. This is a common pattern for displaying a single blog post.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"blog/post\"\n\n[blogPost]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPost\" %}\n```\n\n----------------------------------------\n\nTITLE: Form Loading Button\nDESCRIPTION: Shows how to implement a loading button within a form context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\">\n    <button data-attach-loading>\n        Submit\n    </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Importing Database Templates to Filesystem in October CMS\nDESCRIPTION: Command to copy the database version of a theme to the filesystem using the theme:copy command with the --import-db option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/database-themes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo --import-db\n```\n\n----------------------------------------\n\nTITLE: HTML Content Limiting\nDESCRIPTION: Examples of using html_limit() to truncate HTML content while maintaining proper tag structure. Includes optional custom suffix parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-html.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Post content...</p>', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_limit('<p>Post content...</p>', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Checking Placeholder Existence in Twig\nDESCRIPTION: Shows how to use the placeholder() function to check if a placeholder content exists and generate different markup accordingly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% if placeholder('sidemenu') %}\n    <!-- Markup for a page with a sidebar -->\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            {% placeholder sidemenu %}\n        </div>\n        <div class=\"col-md-9\">\n            {% page %}\n        </div>\n    </div>\n{% else %}\n    <!-- Markup for a page without a sidebar -->\n    {% page %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Options Scope Configuration\nDESCRIPTION: Configuration for applying a scope to the options query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n    optionsScope: applyRoleOptionsFilter\n```\n\n----------------------------------------\n\nTITLE: Handling Old Input in PHP for October CMS\nDESCRIPTION: Examples of flashing input to the session for retrieval in subsequent requests. Useful for preserving form data during validation errors or redirects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/request-input.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nInput::flash();\n```\n\nLANGUAGE: php\nCODE:\n```\nInput::flashOnly('username', 'email');\n\nInput::flashExcept('password');\n```\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('form')->withInput();\n\nreturn Redirect::to('form')->withInput(Input::except('password'));\n```\n\nLANGUAGE: php\nCODE:\n```\nInput::old('username');\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Widget Properties in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set form widget properties in a form field definition file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nborn_at:\n    label: Date of Birth\n    type: datepicker\n    mode: date\n    minDate: 1984-04-12\n    maxDate: 2014-04-23\n```\n\n----------------------------------------\n\nTITLE: HasMany Relationship Configuration Example (YAML)\nDESCRIPTION: YAML configuration specifically for a HasMany relationship type, showing how to set up the 'comments' relationship for a blog post with appropriate view and manage options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\ncomments:\n    label: Comment\n    manage:\n        form: $/acme/blog/models/comment/fields.yaml\n        list: $/acme/blog/models/comment/columns.yaml\n    view:\n        list: $/acme/blog/models/comment/columns.yaml\n        toolbarButtons: create|delete\n```\n\n----------------------------------------\n\nTITLE: Input Loading Indicator\nDESCRIPTION: Demonstrates how to add loading indicators to input elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"username\"\n    data-request=\"onCheckUsername\"\n    data-track-input\n    data-attach-loading />\n```\n\n----------------------------------------\n\nTITLE: Specifying Page Number in Pagination\nDESCRIPTION: Examples showing how to specify both the number of records per page and the current page number using paginateAtPage and simplePaginateAtPage methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$recordsPerPage = 15;\n$currentPage = 1;\n\n$users = Db::table('users')->paginateAtPage($recordsPerPage, $currentPage);\n\n$users = Db::table('users')->simplePaginateAtPage($recordsPerPage, $currentPage);\n```\n\n----------------------------------------\n\nTITLE: Injecting Styles in PHP for October CMS\nDESCRIPTION: Demonstrates how to programmatically inject StyleSheet files in PHP components or pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Filter Scope in YAML\nDESCRIPTION: Demonstrates how to define a simple date filter scope in YAML configuration. This example shows the basic structure of a filter scope definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter-scopes.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscopes:\n    myscope:\n        type: date\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Database Templates Environment Variable in October CMS\nDESCRIPTION: Configure October CMS to store theme templates in the database globally using the CMS_DB_TEMPLATES environment variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/database-themes.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCMS_DB_TEMPLATES=true\n```\n\n----------------------------------------\n\nTITLE: Managing Themes in October CMS\nDESCRIPTION: Commands for checking, listing, using, removing, and copying themes in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:check\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:list\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:use rainlab-vanilla\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:remove rainlab-vanilla\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo demo-copy\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo demo-child --child\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo --import-db\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo --import-db --purge-db\n```\n\n----------------------------------------\n\nTITLE: Dynamic Partial with PHP Life Cycle Methods\nDESCRIPTION: Example of a dynamic partial that uses PHP life cycle methods (onStart) to inject variables into the Twig environment. This demonstrates how to combine PHP and Twig in partials.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Behavior in a Class in October CMS\nDESCRIPTION: Example of a controller class that implements a behavior and overrides one of its methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace;\n\nclass Controller extends \\October\\Rain\\Extension\\Extendable\n{\n\n    /**\n     * Implement the FormController behavior\n     */\n    public $implement = [\n        'MyNamespace.Behaviors.FormController'\n    ];\n\n    public function otherMethod()\n    {\n        return \"I come from the main Controller!\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from CMS Method in PHP\nDESCRIPTION: Demonstrates how to return a simple string response from a CMS page, layout or component method, which will override the default behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onStart()\n{\n    return 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Image Resizing with Crop Mode Option\nDESCRIPTION: Demonstrates using the resize filter with additional options parameter to enable crop mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { mode: 'crop' }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Definition\nDESCRIPTION: Example of defining URL parameters in a page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Tip Hint with Label and Comment in YAML for October CMS\nDESCRIPTION: This example demonstrates how to create a hint field with a 'tip' mode, including a label and comment. It shows how to use the optional properties to customize the hint's appearance and content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-hint.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_tip1:\n    type: hint\n    mode: tip\n    label: Pro Tip\n    comment: Always check to make sure this field is populated.\n```\n\n----------------------------------------\n\nTITLE: Installing Currency Plugin with Artisan Command in October CMS\nDESCRIPTION: Command to install the Currency plugin from the October CMS marketplace, which is required for using the currency form widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-currency.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Responsiv.Currency\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data using PHP\nDESCRIPTION: Demonstrates how to retrieve all data from the session using the all method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/session.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = Session::all();\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown with HTML support using |md_clean filter in Twig\nDESCRIPTION: The |md_clean filter parses Markdown with more HTML support than |md_safe. It uses a sanitizer to remove potentially dangerous code while allowing some HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/md.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ '<script>alert(1)</script>'|md_clean }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Combined Layout and Page\nDESCRIPTION: Shows the final HTML output after the layout template and page content are combined and rendered by OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-page.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <meta name=\"foo\" content=\"bar\">\n    </head>\n    <body>\n        <p>My content.</p>\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Behavior in October CMS\nDESCRIPTION: Example of how to define a behavior by extending ExtensionBase, showing constructor and method implementation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass UtilityFunctions extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    protected $parent;\n\n    public function __construct($parent)\n    {\n        $this->parent = $parent;\n    }\n\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this->parent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using View Templates for Partial Column in YAML\nDESCRIPTION: Shows how to use a view template code as the 'path' to access view service templates inside the plugin. This approach requires the '::' characters in the path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-partial.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: acme.blog::listcolumns.content\n```\n\n----------------------------------------\n\nTITLE: Using imageWidth Filter with Resized Images in Twig Templates\nDESCRIPTION: Example demonstrating how to resize an image with media and resize filters, then use the imageWidth filter to set the width attribute in an img tag. This ensures the width attribute matches the actual resized image dimensions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-image-width.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set resizedImage = 'banner.jpg'|media|resize(1920, 1080) %}\n<img src=\"{{ resizedImage }}\" width=\"{{ resizedImage|imageWidth }}\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Form Widget with External YAML in October CMS\nDESCRIPTION: Example configuration for a nested form widget using an external YAML file for field definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nprofile:\n    label: Profile\n    type: nestedform\n    form: $/october/demo/models/profile/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: JSON Response Output Example\nDESCRIPTION: Shows the resulting JSON output format from the basic response() function call.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/response.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"foo\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SQL Conditions to Relation Field in YAML\nDESCRIPTION: Demonstrates how to limit the related model using a raw SQL query with the conditions property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    conditions: is_featured = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Editor Widget in YAML for October CMS\nDESCRIPTION: This snippet demonstrates how to configure a Code Editor widget in YAML for October CMS. It sets up a field named 'css_content' with a huge size and HTML language setting.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-codeeditor.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncss_content:\n    type: codeeditor\n    size: huge\n    language: html\n```\n\n----------------------------------------\n\nTITLE: Update Page Configuration in YAML\nDESCRIPTION: Configuration specifically for the update page, including title and redirect options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nupdate:\n    title: Edit Blog Post\n    redirect: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Checkbox Output Format in OctoberCMS (JSON)\nDESCRIPTION: A JSON example showing the output format of a checkbox property. The checkbox value is represented as 1 (checked) or 0 (unchecked).\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"enabled\": 1\n```\n\n----------------------------------------\n\nTITLE: Adding Sort Order Column Migration\nDESCRIPTION: Migration script to add a sort_order column for implementing sortable models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->integer('sort_order')->default(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Protected File Attachment in PHP\nDESCRIPTION: Defines a protected file attachment by setting the public parameter to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic $attachOne = [\n    'avatar' => ['System\\Models\\File', 'public' => false]\n];\n```\n\n----------------------------------------\n\nTITLE: HTML Strip Function Usage\nDESCRIPTION: Example of using html_strip() to remove HTML tags from a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-html.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip('<strong>Hello world</strong>') }}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Partial with PHP Lifecycle\nDESCRIPTION: Example of using PHP lifecycle methods in a partial to inject variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n==\nfunction onStart()\n{\n    $this['hello'] = \"Hello world!\";\n}\n==\n<h3>{{ hello }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial with App Directory Path in YAML\nDESCRIPTION: Shows how to configure a partial field to use a template in the app directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-partial.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: app::formfields.content\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Site Properties in Twig\nDESCRIPTION: Shows how to access fundamental site properties including ID, name, code, locale, timezone, and theme using the this.site object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-site.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.site.id }}\n{{ this.site.name }}\n{{ this.site.code }}\n{{ this.site.locale }}\n{{ this.site.timezone }}\n{{ this.site.theme }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Boxes Content in Frontend Template\nDESCRIPTION: Twig code to render the Boxes field content in a frontend template. It uses the 'render' method on the field and applies the 'raw' filter to output unescaped HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-boxes.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[section yourSectionVar]\nhandle = \"Your\\Handle\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ yourSectionVar.boxes_content.render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Apache RewriteBase Configuration for October CMS\nDESCRIPTION: Apache .htaccess configuration for setting the RewriteBase directive, which may need to be uncommented for proper URL routing, especially when installing in a subdirectory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# RewriteBase /\n```\n\n----------------------------------------\n\nTITLE: Conditional Processing on Non-Empty Collections with whenNotEmpty() Method in PHP\nDESCRIPTION: The whenNotEmpty() method executes a given callback when the collection is not empty. It can also take an optional second callback to execute when the collection is empty, providing a fluent interface for conditional logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_77\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['michael', 'tom']);\n\n$collection->whenNotEmpty(function ($collection) {\n    return $collection->push('adam');\n});\n\n$collection->all();\n\n// ['michael', 'tom', 'adam']\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect();\n\n$collection->whenNotEmpty(function ($collection) {\n    return $collection->push('adam');\n});\n\n$collection->all();\n\n// []\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect();\n\n$collection->whenNotEmpty(function ($collection) {\n    return $collection->push('adam');\n}, function ($collection) {\n    return $collection->push('taylor');\n});\n\n$collection->all();\n\n// ['taylor']\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Page ID in Twig\nDESCRIPTION: Shows how to create a CSS-friendly class name using the page's ID.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"page-{{ this.page.id }}\">\n```\n\n----------------------------------------\n\nTITLE: AJAX Pre-execution Handlers\nDESCRIPTION: Examples of implementing initialization code that runs before AJAX handlers using onInit and init methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onInit()\n{\n    // From a page or layout PHP code section\n}\n\nfunction init()\n{\n    // From a component or widget class\n}\n```\n\n----------------------------------------\n\nTITLE: Color Picker with Text Input in YAML\nDESCRIPTION: Setup for a color picker that displays a text input field for direct hex color entry.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-colorpicker.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Primary Color\n    type: colorpicker\n    showInput: true\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirect in JSX/React\nDESCRIPTION: A simple component that redirects users from the markup guide to the templating documentation page. This is likely part of a documentation site built with a React-based framework.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/README.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Redirect to=\"templating\" />\n```\n\n----------------------------------------\n\nTITLE: Linking to Media Assets with Twig Filter\nDESCRIPTION: Demonstrates how to generate URLs for media assets from their relative paths in the media directory using the '|media' Twig filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'relative/path/to/asset.jpg'|media }}\n```\n\n----------------------------------------\n\nTITLE: Using html_mailto() for Complete Email Links\nDESCRIPTION: Shows how to use html_mailto() to generate a complete HTML anchor link with an obfuscated email address.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'me@mysite.tld'|html_mailto }}\n```\n\n----------------------------------------\n\nTITLE: Model File Attachment Download in PHP\nDESCRIPTION: Simple example showing how to download a file attachment from a model using the attachment's download method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function onDownload()\n{\n    // ...\n\n    return $model->avatar->download();\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple CSS Assets with Theme Filter\nDESCRIPTION: Shows how to combine multiple CSS files using the theme filter with an array of file paths.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/theme.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<link href=\"{{ [\n    'assets/css/styles1.css',\n    'assets/css/styles2.css'\n]|theme }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Partials in PHP\nDESCRIPTION: Method implementation for registering mail partials in a plugin registration file\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailPartials()\n{\n    return [\n        'tracking' => 'acme.blog::partials.tracking',\n        'promotion' => 'acme.blog::partials.promotion',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Field-Specific Validation Messages\nDESCRIPTION: Shows how to specify a custom validation message for a specific field using the field.rule naming convention.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$messages = [\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Form Options for Import/Export in YAML\nDESCRIPTION: Demonstrates how to specify custom form fields for import and export operations using YAML configuration files. These fields will appear on the import/export page and their values can be accessed during processing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nimport:\n    [...]\n    form: $/acme/campaign/models/subscriberimport/fields.yaml\n\nexport:\n    [...]\n    form: $/acme/campaign/models/subscriberexport/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Using array_flatten Helper Function in PHP\nDESCRIPTION: The array_flatten function collapses a multi-dimensional array into a single level array, removing all nested structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Joe', 'languages' => ['PHP', 'Ruby']];\n\n$array = array_flatten($array);\n\n// ['Joe', 'PHP', 'Ruby'];\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Filename for Download in New Window in HTML\nDESCRIPTION: This snippet shows how to specify a custom filename for a download and open it in a new window using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onDownloadFile\"\n    data-request-download=\"sample.pdf\"\n    data-browser-target=\"_blank\">\n    Download\n</button>\n```\n\n----------------------------------------\n\nTITLE: Switch Field with Default Value in YAML\nDESCRIPTION: Implementation of a switch field with a default value set to true, enabling the switch by default for new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-switch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display Content\n    type: switch\n    default: true\n```\n\n----------------------------------------\n\nTITLE: Inverse Many-to-Many Relationship in Role Model\nDESCRIPTION: Shows how to define the inverse of a many-to-many relationship in the Role model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nclass Role extends Model\n{\n    public $belongsToMany = [\n        'users' => \\Acme\\Blog\\Models\\User::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing ValidationException with Validator Instance\nDESCRIPTION: Example of throwing a ValidationException using a validator instance in OctoberCMS. This is used when validation fails in a form submission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$validation = Validator::make(...);\n\nif ($validation->fails()) {\n    throw new ValidationException($validation);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Nested Items Messages in YAML\nDESCRIPTION: Configuration that demonstrates how to customize the interface messages for a 'nesteditems' field. This allows for a more personalized user experience by modifying button text and form titles.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-nesteditems.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: nesteditems\n    customMessages:\n        buttonCreate: New Author\n        titleUpdateForm: Update Author\n        titleCreateForm: Create Author\n```\n\n----------------------------------------\n\nTITLE: Customizing Paginator URI in PHP\nDESCRIPTION: Shows how to customize the base URI used by the paginator when generating links using the setPath method, allowing for custom URL structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n$users->setPath('custom/url');\necho $users->render();\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Variables in Twig\nDESCRIPTION: Shows how to use placeholders to set inherited variables, such as the active navigation link.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% put activeNav = 'home' %}\n```\n\n----------------------------------------\n\nTITLE: Basic PHP Trait Usage Example\nDESCRIPTION: Example showing how to use traditional PHP traits in a class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    use \\October\\Rain\\UtilityFunctions;\n    use \\October\\Rain\\DeferredBinding;\n}\n```\n\n----------------------------------------\n\nTITLE: Component with External Property Values\nDESCRIPTION: Shows how to initialize component properties using external parameter values from partials or URL parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Twig If Statement\nDESCRIPTION: Simple if statement example checking a boolean condition for website maintenance mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/if.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if online == false %}\n    <p>The website is in maintenance mode.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for Text Property in October CMS\nDESCRIPTION: This snippet shows the JSON output generated for a text property. It represents the string value corresponding to the selected option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-text.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"This is a description\"\n```\n\n----------------------------------------\n\nTITLE: Defining Properties with String List in PHP\nDESCRIPTION: This example shows how to define a property using the stringList inspector type in OctoberCMS. The property allows users to enter a list of strings with a default value provided as an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-stringlist.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'items' => [\n            'title' => 'Items',\n            'type' => 'stringList',\n            'default' => ['String 1', 'String 2']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Relation Controller Messages\nDESCRIPTION: Configuration for customizing the messages displayed in the relation controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    customMessages:\n        buttonCreate: New Author\n        titleUpdateForm: Update Author\n        titleCreateForm: Create Author\n```\n\n----------------------------------------\n\nTITLE: Text Filter with Custom SQL Conditions in YAML\nDESCRIPTION: Demonstrates how to use custom SQL statements for filter conditions. It provides examples for both 'equals' and 'contains' conditions, using :value as a placeholder for the filtered value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-text.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n    conditions:\n        equals: username = :value\n        contains: username like %:value%\n```\n\n----------------------------------------\n\nTITLE: Wildcard Value Conditions in YAML\nDESCRIPTION: Demonstrates using wildcard characters in value conditions to match patterns in field values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show\n    condition: value[*.mp4]\n    field: file_name\n```\n\n----------------------------------------\n\nTITLE: Basic Date Picker Configuration in YAML\nDESCRIPTION: Demonstrates the basic configuration of a date picker field for selecting a publication date. The mode is set to 'date' for date-only selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-datepicker.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npublished_at:\n    label: Published\n    type: datepicker\n    mode: date\n```\n\n----------------------------------------\n\nTITLE: Appending Query Parameters to Pagination\nDESCRIPTION: Example of adding custom query parameters to pagination links using the appends option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ pager(records, { appends: { sort: 'votes' } }) }}\n```\n\n----------------------------------------\n\nTITLE: Passing Markup Content to Partials in Twig\nDESCRIPTION: Demonstrates how to pass markup content to a partial using the body attribute. This technique allows for composable partials with dynamic content areas.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" body %}\n    This is the card contents\n{% endpartial %}\n```\n\n----------------------------------------\n\nTITLE: Detecting AJAX Requests\nDESCRIPTION: Shows how to check if the current request was made using AJAX.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nif (Request::ajax()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Slugs in October CMS Models\nDESCRIPTION: Shows how to override the automatic slug generation by manually setting the slug attribute before saving.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->name = 'Remy';\n$user->slug = 'custom-slug';\n$user->save(); // Slug will not be generated\n```\n\n----------------------------------------\n\nTITLE: Defining String Property in PHP\nDESCRIPTION: Demonstrates how to define a string property in a component using the defineProperties method. Shows configuration of a basic string input with a title, type and default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-string.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'firstName' => [\n            'title' => 'First Name',\n            'type' => 'string',\n            'default' => 'John'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Site Context in PHP\nDESCRIPTION: Example of changing the context to a different site using withContext method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nSite::withContext(2, function() {\n    // Models in site 2 are now available.\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Blocks in Twig\nDESCRIPTION: Explains how to pass variables to content blocks when using the {% content %} tag, including single variables and collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" name=user.name %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"location.htm\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" likes=[\n    {name:'Dogs'},\n    {name:'Fishing'},\n    {name:'Golf'}\n] %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Structure Depth in YAML\nDESCRIPTION: Defines a structure blueprint with a maximum nesting depth of 2 levels. This limits how deep the parent-child relationships can go in the structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\ntype: structure\n\nstructure:\n    maxDepth: 2\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Version Information\nDESCRIPTION: Example of version.yaml file structure showing version numbers and change logs\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: Theme initialization\nv1.0.2: Added more features\nv1.0.3: Some features are removed\n```\n\n----------------------------------------\n\nTITLE: Installing a Plugin from External Local Path\nDESCRIPTION: Artisan command to install a plugin from an absolute path on a local or network drive, allowing installation from sources outside the project directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=/home/sam/private-plugins/acme-blog\n```\n\n----------------------------------------\n\nTITLE: Removing BelongsTo Relationships with dissociate() in OctoberCMS\nDESCRIPTION: Example showing how to remove a belongsTo relationship. This removes the association between a user and its account by clearing the foreign key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$user->account()->dissociate();\\n\\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Extension\nDESCRIPTION: Demonstrates how to get the file extension of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$extension = Input::file('photo')->getClientOriginalExtension();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Format DateTime Column in October CMS\nDESCRIPTION: Defines a datetime column with a custom format specified. This example will display dates in the format 'Thursday 25th of December 1975 02:15:16 PM'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    format: l jS \\of F Y h:i:s A\n```\n\n----------------------------------------\n\nTITLE: Accessing Page URLs in PHP\nDESCRIPTION: Shows how to get the URL of a specific page or the current page using PHP in the page's PHP section. It uses the $this->pageUrl() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-page.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction onStart() {\n    $this['newsPage'] = $this->pageUrl('blog/overview');\n}\n?>\n==\n{{ newsPage }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction onStart() {\n    $this['currentUrl'] = $this->pageUrl('');\n}\n?>\n==\n{{ currentUrl }}\n```\n\n----------------------------------------\n\nTITLE: Dumping All Variables in Current Twig Context\nDESCRIPTION: This snippet demonstrates how to use dump() without any arguments to inspect all variables available in the current template context. This is useful for getting an overview of all accessible variables in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-dump.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Variables in Twig Templates\nDESCRIPTION: Shows how to display a variable in a Twig template using double curly brackets. This is the basic syntax for outputting variable content to the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable }}\n```\n\n----------------------------------------\n\nTITLE: Programmatic CSS Injection in PHP\nDESCRIPTION: Demonstrates how to programmatically inject CSS files using the addCss method in a component or page PHP code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-styles.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss('assets/css/hello.css');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring cURL Certificate Path\nDESCRIPTION: PHP configuration setting to specify the path to the SSL certificate file for cURL operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/installation.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl.cainfo = \"/path/to/cacert.pem\"\n```\n\n----------------------------------------\n\nTITLE: PHP Section with Namespace Usage\nDESCRIPTION: Demonstrates the use of PHP section in a template, including namespace references and function definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/themes.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n==\n<?\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::get();\n}\n?>\n==\n```\n\n----------------------------------------\n\nTITLE: Implementing Preview View in PHP for October CMS\nDESCRIPTION: This code snippet shows the structure of a typical preview.php view in October CMS. It uses the formRenderPreview() method to display the form in read-only mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"form-preview\">\n    <?= $this->formRenderPreview() ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Getting File Size and Last Modified Time in PHP\nDESCRIPTION: Shows how to retrieve the size of a file in bytes and its last modified time as a UNIX timestamp.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$size = Storage::size('file1.jpg');\n\n$time = Storage::lastModified('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dropdown Configuration in YAML\nDESCRIPTION: Sets up a dropdown that expects a method in the model class to provide options dynamically.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nstatus_type:\n    label: Blog Post Status\n    type: dropdown\n```\n\n----------------------------------------\n\nTITLE: Using trans_choice() Localization Helper in PHP\nDESCRIPTION: The trans_choice function translates the given language line with inflection based on a count. This is useful for pluralization in translations where the text changes based on quantity.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$value = trans_choice('foo.bar', $count);\n```\n\n----------------------------------------\n\nTITLE: Showing Page Description in OctoberCMS Twig\nDESCRIPTION: Demonstrates how to display the page description as defined in the configuration using the this.page.description property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ this.page.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Form Opening with Custom Method\nDESCRIPTION: Demonstrates opening a form with a specific HTTP method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'method' => 'put'])\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Button to Rich Editor Default Collection in JavaScript\nDESCRIPTION: JavaScript code for adding a custom button to the default collection of rich editor buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_5\n\nLANGUAGE: js\nCODE:\n```\noc.richEditorButtons.splice(0, 0, 'insertCustomThing');\n```\n\n----------------------------------------\n\nTITLE: Opening a Form with PUT Method\nDESCRIPTION: Shows how to specify a different HTTP method when opening a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'method' => 'put'])\n```\n\n----------------------------------------\n\nTITLE: Deleting a Directory (PHP)\nDESCRIPTION: Example of removing a directory and all its files from the disk using the deleteDirectory method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nStorage::deleteDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: AJAX Event Handling\nDESCRIPTION: JavaScript implementation for handling AJAX events and managing form states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nformElement.addEventListener('ajax:promise', function() {\n    // A new request has started\n});\n\nformElement.addEventListener('ajax:always', function() {\n    // A request has ended\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:promise', function(event) {\n    event.target.closest('form').querySelectorAll('input').forEach(function(el) {\n        el.disabled = true;\n    });\n});\n\naddEventListener('ajax:always', function() {\n    event.target.closest('form').querySelectorAll('input').forEach(function(el) {\n        el.disabled = false;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Properties to Tabs in YAML\nDESCRIPTION: Shows how to configure tab properties in form definitions, including stretch behavior, default tab selection, custom CSS classes, lazy loading, and custom identifiers for targeting tabs with JavaScript.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntabs:\n    stretch: true\n    defaultTab: User\n    cssClass: text-blue\n\n    lazy:\n        - Groups\n\n    paneCssClass:\n        1: first-tab\n        2: second-tab\n\n    icons:\n        User: icon-user\n        Groups: icon-group\n\n    identifiers:\n        User: userTab\n\n    fields:\n        # [...]\n```\n\n----------------------------------------\n\nTITLE: Taking Elements from PHP Collection\nDESCRIPTION: The take method returns a new collection with the specified number of items. It can also take items from the end of the collection using a negative integer.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(3);\n\n$chunk->all();\n\n// [0, 1, 2]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([0, 1, 2, 3, 4, 5]);\n\n$chunk = $collection->take(-2);\n\n$chunk->all();\n\n// [4, 5]\n```\n\n----------------------------------------\n\nTITLE: Custom Relation Class Definition\nDESCRIPTION: Shows how to specify a custom relation class in relationship definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsToMany = [\n    'users' => [\n        \\Backend\\Models\\User::class,\n        'relationClass' => \\Backend\\Classes\\MyBelongsToMany::class\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Complex Field Dependencies in YAML for October CMS\nDESCRIPTION: Example showing form fields with multiple dependencies that control visibility of vendor-specific fields, which will be refreshed when either the DNS provider or registrar fields change.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\ndnsprovider:\n    label: DNS Provider\n    type: dropdown\n\nregistrar:\n    label: Registrar\n    type: dropdown\n\nspecificfields[for][provider1]:\n    label: Provider 1 ID\n    type: text\n    hidden: true\n    dependsOn:\n        - dnsprovider\n        - registrar\n\nspecificfields[for][provider2]:\n    label: Provider 2 ID\n    type: text\n    hidden: true\n    dependsOn:\n        - dnsprovider\n        - registrar\n```\n\n----------------------------------------\n\nTITLE: Custom Foreign Key in belongsTo Relationship\nDESCRIPTION: Shows how to specify a custom foreign key name using the key parameter in a belongs-to relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => [\\Acme\\Blog\\Models\\Post::class, 'key' => 'my_post_id']\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Controller with Form Design in October CMS\nDESCRIPTION: This bash command demonstrates how to generate a controller with a specific form design using the create:controller artisan command in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:controller Acme.Blog Posts --design=popup\n```\n\n----------------------------------------\n\nTITLE: Using str_pad_right Filter for Right-side Padding\nDESCRIPTION: Demonstrates the str_pad_right filter, which pads a string to a certain length with another string from the right side.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'xxx'|str_pad_right(5, 'o') }}\n```\n\n----------------------------------------\n\nTITLE: Using starts_with() String Helper in PHP\nDESCRIPTION: The starts_with function determines if the given string begins with the given value. It returns a boolean indicating whether the string has the specified beginning.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$value = starts_with('The cow goes moo', 'The');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Basic Content Block Rendering in Twig\nDESCRIPTION: Demonstrates how to render a basic CMS content block using the content tag\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"contacts.htm\" %}\n```\n\n----------------------------------------\n\nTITLE: Recursive Merging of Collections in PHP\nDESCRIPTION: The mergeRecursive method merges the given array or collection recursively with the original collection. It combines values of matching keys into arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->mergeRecursive(['product_id' => 2, 'price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Widget Save Value Method in PHP\nDESCRIPTION: This code shows how to implement the getSaveValue method in a form widget to modify the saving behavior or prevent saving altogether.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function getSaveValue($value)\n{\n    return $value;\n}\n\npublic function getSaveValue($value)\n{\n    return \\Backend\\Classes\\FormField::NO_SAVE_DATA;\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Plain Text Only Emails\nDESCRIPTION: Example of sending a plain text only email using the 'text' key in the options array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nMail::send(['text' => 'acme.blog::mail.text'], $data, $callback);\n```\n\n----------------------------------------\n\nTITLE: Aggregate Queries\nDESCRIPTION: Performing aggregate functions like count and max on model queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$count = Flight::where('active', 1)->count();\n\n$max = Flight::where('active', 1)->max('price');\n```\n\n----------------------------------------\n\nTITLE: Checking Global Context Status in PHP\nDESCRIPTION: Demonstrates how to check if the global state is currently activated using the hasGlobalContext method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$global = Site::hasGlobalContext();\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Component in October CMS\nDESCRIPTION: Shows how to initialize a demo Todo component in a page with configuration properties. The maxItems property is set to 20.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"Components demonstration\"\nurl = \"/components\"\n\n[demoTodo]\nmaxItems = 20\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Using Site-Defined Currency with |currency Twig Filter\nDESCRIPTION: Shows how to use the site option to use currency codes from the site definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ 1000|currency({ site: true }) }}\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Page Link Creation\nDESCRIPTION: Shows how to create a page link to a file in a subdirectory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"{{ 'contacts/about'|page }}\">About Us</a>\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Configuration in PHP\nDESCRIPTION: Demonstrates how to use the env() helper function to pull configuration values from environment variables, allowing for environment-specific configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/file-settings.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => env('ACME_TODO_MAX_ITEMS', 25)\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic List Column in YAML\nDESCRIPTION: Demonstrates the basic structure for defining a list column with a type property in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    mycolumn:\n        type: number\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Assigning New Variables to a Partial\nDESCRIPTION: Demonstrates how to create and assign new variables specifically for use within a partial. The 'location' partial receives city and country variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"location\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\n----------------------------------------\n\nTITLE: Using Language File for Validation Messages in PHP\nDESCRIPTION: Shows how to use language files with the Validator to apply custom validation messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nValidator::make($formValues, $validations, Lang::get('acme.blog::validation'));\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Configuration\nDESCRIPTION: Example of a layout template including a description parameter in the configuration section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/layouts.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\ndescription = \"Basic layout example\"\n==\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Granting Elevated Permissions to October CMS Plugin (PHP)\nDESCRIPTION: This snippet demonstrates how to grant elevated permissions to an October CMS plugin by setting the $elevated property. This allows the plugin to access restricted areas of the system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/registration.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var bool Plugin requires elevated permissions.\n */\npublic $elevated = true;\n```\n\n----------------------------------------\n\nTITLE: Directly Responding with AJAX Handler Result\nDESCRIPTION: Shows how to call an AJAX handler and directly pass its result as a response. This simplified pattern can be used when the handler already returns the data structure needed by the API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% do response(ajaxHandler('onSubmitPost')) %}\n```\n\n----------------------------------------\n\nTITLE: Binding Local Event Handlers to Control Element\nDESCRIPTION: Shows how to bind event handlers to the control element itself that automatically unbind when the control is disconnected.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    connect() {\n        this.listen('dblclick', this.onDoubleClick);\n    }\n\n    onDoubleClick() {\n        console.log('You double clicked my control!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme ID in Twig Template\nDESCRIPTION: Example of using the this.theme.id property to generate a CSS class name based on the theme directory name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"theme-{{ this.theme.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Injecting and Compiling LESS/SCSS Assets in October CMS\nDESCRIPTION: This snippet shows how to inject LESS files which will be automatically compiled by the combiner. The same approach works for SCSS files, providing a convenient way to use preprocessed CSS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/less/base.less']);\n}\n```\n\n----------------------------------------\n\nTITLE: Committing Deferred Bindings in PHP\nDESCRIPTION: Shows how to commit deferred bindings when saving the master model by providing the session key as the second argument to the 'save' or 'create' method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_58\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post;\n$post->title = \"First blog post\";\n$post->save(null, $sessionKey);\n\n$post = Post::create(['title' => 'First blog post'], $sessionKey);\n\n$post->commitDeferred($sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Refreshing All Tailor Content\nDESCRIPTION: Command to delete all content managed by Tailor. This is useful during development or when completely restructuring content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:refresh\n```\n\n----------------------------------------\n\nTITLE: Checking Execution Context in October CMS\nDESCRIPTION: Shows how to determine if the current request is running in the backend or console using specific helper methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/application.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInBackend();\n\nApp::runningInConsole();\n```\n\n----------------------------------------\n\nTITLE: Example Page Template with Content Injection\nDESCRIPTION: A page template that injects content into the head placeholder and defines its own markup content to be rendered by the {% page %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\ndescription=\"example page\"\n==\n{% put head %}\n    <meta name=\"foo\" content=\"bar\">\n{% endput %}\n\n<p>My content.</p>\n```\n\n----------------------------------------\n\nTITLE: Propagating Content Across Sites\nDESCRIPTION: Command to propagate records across sites when using the sync multisite option. This can be used after enabling sync mode for existing content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:propagate\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Block - Twig\nDESCRIPTION: Shows how to pass a variable named 'name' to a content block using the content tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'welcome.htm' name='John' %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Dropdown Options in PHP\nDESCRIPTION: Defines a global method in the model class to provide options for all dropdown fields. This method takes the field name and current key value as parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getDropdownOptions($fieldName = null, $keyValue = null)\n{\n    if ($fieldName == 'status')\n        return ['all' => 'All', ...];\n    else\n        return ['' => '-- none --'];\n}\n```\n\n----------------------------------------\n\nTITLE: Job Attempts Check\nDESCRIPTION: Shows how to check the number of attempts made to run a job.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nif ($job->attempts() > 3) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Set Inspector Output Format\nDESCRIPTION: Shows the JSON output format for selected Set inspector values. The output is an array containing the selected option keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-set.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"units\": [\"metric\", \"imperial\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Disk Storage for Media Manager in PHP\nDESCRIPTION: Default configuration for local disk storage in October CMS. This setup uses the storage/app/media subdirectory as the default location for media files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'storage' => [\n    'media' => [\n        'disk'   => 'local',\n        'folder' => 'media',\n        'path'   => '/storage/app/media',\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing File Owner through Polymorphic Relation in PHP\nDESCRIPTION: Demonstrates how to access the owner of a file through a polymorphic relation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\npublic $morphTo = [\n    'attachment' => []\n];\n\n$user = $file->attachment;\n```\n\n----------------------------------------\n\nTITLE: Sorting Collection by Key in PHP\nDESCRIPTION: Demonstrates how to use the sortBy() method to sort a collection by a given key. It also shows sorting using a custom callback function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['name' => 'Desk', 'price' => 200],\n    ['name' => 'Chair', 'price' => 100],\n    ['name' => 'Bookcase', 'price' => 150],\n]);\n\n$sorted = $collection->sortBy('price');\n\n$sorted->values()->all();\n\n/*\n    [\n        ['name' => 'Chair', 'price' => 100],\n        ['name' => 'Bookcase', 'price' => 150],\n        ['name' => 'Desk', 'price' => 200],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Using Custom Form Macros\nDESCRIPTION: Example showing how to call a custom form macro that was previously registered, creating specialized form elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::myField() ?>\n```\n\n----------------------------------------\n\nTITLE: Section UI Element in YAML\nDESCRIPTION: Demonstrates configuring a section heading with label and subheading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n_section1:\n    label: User details\n    type: section\n    comment: This section contains details about the user.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Tag for Release\nDESCRIPTION: Command to create a new Git tag for releasing a new version of your package. This example creates version 2.0.1 with a descriptive message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v2.0.1 -m \"Version 2 is here!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Section Field in YAML\nDESCRIPTION: Shows how to configure a basic section field with a heading and subheading using the section UI element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-section.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_section1:\n    type: section\n    label: User details\n    comment: This section contains details about the user.\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag List Field in October CMS\nDESCRIPTION: Demonstrates the setup of a tag list field in October CMS, including options for custom tags, predefined options, and relation mode for many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    separator: space\n```\n\n----------------------------------------\n\nTITLE: Performing Database Migration in October CMS\nDESCRIPTION: The 'october:migrate' command performs database migration, creating tables and executing seed scripts. The --rollback option reverses all migrations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate --rollback\n```\n\n----------------------------------------\n\nTITLE: Ê£ÄÊü•Âç†‰ΩçÁ¨¶ÂÜÖÂÆπÊòØÂê¶Â≠òÂú®\nDESCRIPTION: ‰ΩøÁî®placeholder()ÂáΩÊï∞Ê£ÄÊü•Âç†‰ΩçÁ¨¶ÊòØÂê¶Â≠òÂú®ÂÜÖÂÆπÔºåÊ†πÊçÆÁªìÊûúÊòæÁ§∫‰∏çÂêåÁöÑÈ°µÈù¢Â∏ÉÂ±Ä„ÄÇ\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-placeholder.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if placeholder('sidemenu') %}\n    <!-- Â∏¶Êúâ‰æßËæπÊ†èÁöÑÈ°µÈù¢Ê†áËÆ∞ -->\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            {% placeholder sidemenu %}\n        </div>\n        <div class=\"col-md-9\">\n            {% page %}\n        </div>\n    </div>\n{% else %}\n    <!-- Ê≤°Êúâ‰æßËæπÊ†èÁöÑÈ°µÈù¢ÁöÑÊ†áËÆ∞ -->\n    {% page %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: File Download Page Link in Twig\nDESCRIPTION: Twig code example for linking to a file download page with parameters for file ID, disk name, and custom filename.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'download-file'|page({\n    id: file.id,\n    disk_name: file.disk_name,\n    file_name: 'my-custom-name.png'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Custom Video Player Partial Example\nDESCRIPTION: An example of a custom video player markup that can be used in an oc-video-player.htm partial to override the default HTML5 video tag behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"{{ src }}\" width=\"320\" height=\"200\" controls preload></video>\n```\n\n----------------------------------------\n\nTITLE: Basic Tooltip Configuration for Columns\nDESCRIPTION: Demonstrates how to add a simple tooltip to a column header for providing additional context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncount:\n    label: Count\n    type: number\n    tooltip: Number of users in the group\n```\n\n----------------------------------------\n\nTITLE: Non-Sortable Image Column Definition in YAML for October CMS\nDESCRIPTION: Defines an image column with sorting disabled. By default, image columns are sortable, but this can be explicitly turned off with the sortable property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-image.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    sortable: false\n```\n\n----------------------------------------\n\nTITLE: Flashing All Input to Session in PHP\nDESCRIPTION: Demonstrates how to preserve all input data from the current request to the next request using session flash.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nInput::flash();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailgun Driver in October CMS\nDESCRIPTION: Configuration settings needed in the services.php file to use the Mailgun mail driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'mailgun' => [\n    'domain' => 'your-mailgun-domain',\n    'secret' => 'your-mailgun-key',\n    'endpoint' => 'api.mailgun.net', // api.eu.mailgun.net for EU\n],\n```\n\n----------------------------------------\n\nTITLE: Regenerating Slugs in October CMS Models\nDESCRIPTION: Demonstrates how to regenerate a slug for an existing model by setting it to null and calling the slugAttributes method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n$user->slug = null;\n$user->slugAttributes();\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Using a Class with Behaviors\nDESCRIPTION: Example showing how to use a class that implements behaviors and access behavior methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$controller = new MyNamespace\\Controller;\n\n// ÊâìÂç∞ÔºöÊàëÊù•Ëá™FormController BehaviorÔºÅ\necho $controller->someMethod();\n\n// ÊâìÂç∞ÔºöÊàëÊù•Ëá™‰∏ªÊéßÂà∂Âô®ÔºÅ\necho $controller->otherMethod();\n\n// ÊâìÂç∞Ôºö‰Ω†ÂèØËÉΩÁúã‰∏çÂà∞Êàë...\necho $controller->asExtension('FormController')->otherMethod();\n```\n\n----------------------------------------\n\nTITLE: Basic Linkage Column Configuration in YAML\nDESCRIPTION: The minimal configuration needed to define a linkage column for displaying a hyperlink in a list view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-linkage.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwebsite:\n    label: Website\n    type: linkage\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Dependencies in October CMS\nDESCRIPTION: Command to perform system-wide check of installed plugin dependencies\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:check\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Title in Twig\nDESCRIPTION: Illustrates how to output the page title defined in the configuration using the this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ this.page.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Basic Currency Column Configuration in YAML\nDESCRIPTION: Basic implementation of a currency column type for displaying monetary values in a list view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-currency.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Loan amount\n    type: currency\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeSince Column in October CMS\nDESCRIPTION: Defines a list column that displays a human-readable time difference between the value and the current time, such as '10 minutes ago'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: timesince\n```\n\n----------------------------------------\n\nTITLE: Historical Redirect Link\nDESCRIPTION: HTML hyperlink with browser history-based redirection support.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"/home\"\n    data-browser-redirect-back>\n    Go Back\n</a>\n```\n\n----------------------------------------\n\nTITLE: Loading Sites for a Different Page in October CMS\nDESCRIPTION: This snippet shows how to use the pageSites() function to load sites configured for a specific CMS page other than the current one.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/sitepicker.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[sitePicker]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set otherSites = sitePicker.pageSites('blog/index') %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Layout ID in Twig Template\nDESCRIPTION: Demonstrates how to access the layout ID property to generate CSS class names. The ID is automatically converted to be CSS-friendly based on the layout file name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"layout-{{ this.layout.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Using Full Slug with Wildcard URL Parameter\nDESCRIPTION: Example configuration for using full slugs in structured content with wildcard URL parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/wiki/:fullslug*\"\n\n[section article]\nhandle = \"Wiki\\\\Article\"\nidentifier = \"fullslug\"\n```\n\n----------------------------------------\n\nTITLE: CamelCase String Conversion in Twig\nDESCRIPTION: Converts a string to camelCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel('hello world') }}\n```\n\n----------------------------------------\n\nTITLE: Basic Rich Editor Field Configuration in YAML\nDESCRIPTION: Basic configuration for a rich editor field in October CMS forms, defining a content field with a label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-richeditor.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    label: Contents\n```\n\n----------------------------------------\n\nTITLE: Activating a Theme in October CMS\nDESCRIPTION: Command to switch the active theme to a specified theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:use rainlab-vanilla\n```\n\n----------------------------------------\n\nTITLE: External URL Redirection in Twig\nDESCRIPTION: Demonstrates how to redirect to an external URL using the redirect() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-redirect.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do redirect('https://octobercms.com') %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Options Method in PHP\nDESCRIPTION: Demonstrates the PHP implementation of a method that dynamically provides options for the dropdown filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-dropdown.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusOptions()\n{\n    return [\n        'active' => 'Active',\n        'deleted' => 'Deleted',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties with Ignore Empty Field in PHP\nDESCRIPTION: This PHP snippet demonstrates how to use the 'ignoreIfPropertyEmpty' parameter in an object inspector type. It shows how to exclude the entire object from the output if a specific property (in this case, 'title') is empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-object.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'address' => [\n            'title' => 'Address',\n            'type' => 'object',\n            'ignoreIfPropertyEmpty' => 'title',\n            'properties' => [\n                'streetAddress' => [\n                    'title' => 'Street Address',\n                    'type' => 'string'\n                ],\n                'city' => [\n                    'title' => 'City',\n                    'type' => 'string'\n                ]\n            ],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Date Scope Configuration in YAML\nDESCRIPTION: Demonstrates the basic YAML configuration for a Date Scope filter named 'created_at'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Component in October CMS with Twig Template\nDESCRIPTION: This example demonstrates how to add a global component to a CMS page and access its fields. It uses the 'Blog\\Config' handle to make a global blueprint record available as 'blogConfig' and then displays the 'about_this_blog' field value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/global.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[global blogConfig]\nhandle = \"Blog\\Config\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ blogConfig.about_this_blog }}</p>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Old Input Data in October CMS\nDESCRIPTION: How to retrieve input data from the previous request that was flashed to the session.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nInput::old('username');\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS Modules\nDESCRIPTION: Command to install all October CMS modules\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require october/all\n```\n\n----------------------------------------\n\nTITLE: Getting the Application Environment in PHP\nDESCRIPTION: Shows how to determine the current application environment using the environment method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/application.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// production\nApp::environment();\n```\n\n----------------------------------------\n\nTITLE: Placeholder with Default Content and Custom Attributes in Twig\nDESCRIPTION: Shows how to define a placeholder with default content, title, and type attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering default title=\"Ordering information\" type=\"text\" %}\n    There is no ordering information for this product.\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Customizing UI Messages in Blueprint\nDESCRIPTION: Overrides default user interface messages in a blueprint with custom text. This example changes the create button text for better context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ncustomMessages:\n    buttonCreate: Create New Event\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with Laravel Sail using curl\nDESCRIPTION: Command to download and install October CMS with Laravel Sail. Replace 'example-app' with your desired directory name where October CMS will be installed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/using-laravel-sail.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s \"https://octobercms.com/api/laravelsail/example-app\" | bash\n```\n\n----------------------------------------\n\nTITLE: Tabbed Repeater Field Configuration\nDESCRIPTION: Configuration for a repeater field using tabs to organize form fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nextra_information:\n    type: repeater\n    useTabs: true\n    form:\n        added_at:\n            label: Date added\n            type: datepicker\n            tab: Date\n        details:\n            label: Details\n            type: textarea\n            tab: Details\n```\n\n----------------------------------------\n\nTITLE: Converting Collection to JSON with toJson() Method in PHP\nDESCRIPTION: The toJson() method converts a collection into a JSON string representation. This is useful when you need to serialize collection data for API responses or storage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_68\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'Desk', 'price' => 200]);\n\n$collection->toJson();\n\n// '{\"name\":\"Desk\",\"price\":200}'\n```\n\n----------------------------------------\n\nTITLE: Basic Queue Worker Artisan Command\nDESCRIPTION: Shows the basic command to start a queue worker that processes jobs continuously as they are added to the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work\n```\n\n----------------------------------------\n\nTITLE: Disabling Timezone Conversion for DateTime Column in October CMS\nDESCRIPTION: Configures a datetime column with timezone conversion disabled. By default, datetime values are converted to the backend timezone preference, but this can be turned off with the useTimezone option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    useTimezone: false\n```\n\n----------------------------------------\n\nTITLE: Removing Backend Menu Items\nDESCRIPTION: Example showing how to remove backend menu items by listening to the backend.menu.extendItems event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n\n    // Âà†Èô§ÊâÄÊúâÈ°πÁõÆ\n    $manager->removeMainMenuItem('October.Cms', 'cms');\n\n    // Âà†Èô§Âçï‰∏™È°πÁõÆ\n    $manager->removeSideMenuItem('October.Cms', 'cms', 'pages');\n\n    // Âà†Èô§‰∏§È°π\n    $manager->removeSideMenuItems('October.Cms', 'cms', [\n        'pages',\n        'partials'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Site Picker Component in October CMS\nDESCRIPTION: This snippet demonstrates how to initialize the sitePicker component in a CMS template and retrieve available sites. The component allows managing links to other sites within the multisite setup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/multisite.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[sitePicker]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set availableSites = sitePicker.sites %}\n```\n\n----------------------------------------\n\nTITLE: Text Field with Default Value in YAML for October CMS\nDESCRIPTION: Implementation of a text field with a default value. This example shows how to pre-populate a text field with content using the default property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-text.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nquote_content:\n    type: text\n    label: Details\n    default: I like turtles\n```\n\n----------------------------------------\n\nTITLE: Chained Filters in Twig\nDESCRIPTION: Demonstrates how to chain multiple filters together for complex string manipulation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'October Glory'|upper|replace({'October': 'Morning'}) }}\n```\n\n----------------------------------------\n\nTITLE: Warning Mode Hint Field Configuration\nDESCRIPTION: Illustrates setting up a hint field in warning mode with custom label and comment text.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-hint.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_warning1:\n    type: hint\n    mode: warning\n    label: Always wash your hands\n    comment: This is good for stopping the spread of germs.\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Display Mode Section in YAML\nDESCRIPTION: Demonstrates how to configure a section field with simple display mode instead of the default heading style.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-section.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_section1:\n    type: section\n    label: These fields are used to calculate some other fields.\n    displayMode: simple\n```\n\n----------------------------------------\n\nTITLE: Checking Active Site in Twig\nDESCRIPTION: Shows how to conditionally display content based on the active site code using a Twig if statement.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-site.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.site.code === 'english' %}\n    <h1>Only display for English</h1>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving File Contents\nDESCRIPTION: Example of how to retrieve the contents of a file from storage as a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$contents = Storage::get('file.jpg');\n```\n\n----------------------------------------\n\nTITLE: Generic Widget Class Definition in PHP\nDESCRIPTION: Example of a basic widget class definition extending WidgetBase with a default alias property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Backend\\Widgets;\n\nuse Backend\\Classes\\WidgetBase;\n\nclass Lists extends WidgetBase\n{\n    /**\n     * @var string A unique alias to identify this widget.\n     */\n    protected $defaultAlias = 'list';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Switch Column Labels in YAML\nDESCRIPTION: Extended switch column configuration with custom labels for true/false states using the options parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-switch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenabled:\n    label: Enabled\n    type: switch\n    options:\n        - Nope\n        - Yeah\n```\n\n----------------------------------------\n\nTITLE: Form Closing Tag PHP Equivalent\nDESCRIPTION: Shows the PHP equivalent of the form_close() Twig helper, demonstrating how the Twig helpers map to PHP Form class methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Handling Filter Dependencies in PHP\nDESCRIPTION: This PHP code demonstrates how to implement the methods for handling filter dependencies, specifically for country and city options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filters.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return Country::lists('name', 'id');\n}\n\npublic function getCityOptions($scopes = null)\n{\n    if (!empty($scopes['country']->value)) {\n        return City::whereIn('country_id', $scopes['country']->value)->lists('name', 'id');\n    }\n    else {\n        return City::lists('name', 'id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic HTML Partial in OctoberCMS\nDESCRIPTION: The simplest possible partial implementation containing only HTML markup. Partial files should have the .htm extension and reside in the partials directory of your theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Global Variable Registration - PHP\nDESCRIPTION: Example showing how to register global variables for use in all content blocks using View::share.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/content.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nView::share('site_name', 'October CMS');\n```\n\n----------------------------------------\n\nTITLE: Extending Twig in PHP\nDESCRIPTION: Example of registering custom Twig filters and functions in October CMS plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/registration.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMarkupTags()\n{\n    return [\n        'filters' => [\n            // A global function, i.e str_plural()\n            'plural' => 'str_plural',\n\n            // A local method, i.e $this->makeTextAllCaps()\n            'uppercase' => [$this, 'makeTextAllCaps']\n        ],\n        'functions' => [\n            // A static method call, i.e Form::open()\n            'form_open' => [\\October\\Rain\\Html\\Form::class, 'open'],\n\n            // Using an inline closure\n            'helloWorld' => function() { return 'Hello World!'; }\n        ]\n    ];\n}\n\npublic function makeTextAllCaps($text)\n{\n    return strtoupper($text);\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Block - OctoberCMS Twig\nDESCRIPTION: Example showing how to pass a variable to a content block when rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'welcome.htm' name='John' %}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Themes\nDESCRIPTION: Command to list all installed themes, with an option to include popular themes from the marketplace.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:list\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule Objects in Models\nDESCRIPTION: Shows how to implement local rule objects in model validation using the beforeValidate method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\npublic function beforeValidate()\n{\n    $this->rules['name'] = ['required', new LowercaseRule];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Twig Macro with Named End Tag\nDESCRIPTION: Demonstrates how to define a macro with a named end tag for better readability. The macro name is included after the endmacro tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro input %}\n```\n\n----------------------------------------\n\nTITLE: Calculating Median Value with median() Method in PHP\nDESCRIPTION: The median method returns the median value of a given key or the entire collection. For an even number of values, it returns the average of the two middle values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$median = new Collection([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])->median('foo');\n\n// 15\n\n$median = new Collection([1, 1, 2, 4])->median();\n\n// 1.5\n```\n\n----------------------------------------\n\nTITLE: Dynamically Declaring Properties\nDESCRIPTION: Example showing how to dynamically add properties to an extendable object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicProperty('tagsCache', null);\n});\n```\n\n----------------------------------------\n\nTITLE: Using whereHas for Complex Relationship Queries in October CMS\nDESCRIPTION: This code demonstrates using whereHas to add custom constraints to relationship existence queries. It retrieves posts with at least one comment containing specific content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts with at least one comment containing words like foo%\n$posts = Post::whereHas('comments', function ($query) {\n    $query->where('content', 'like', 'foo%');\n})->get();\n```\n\n----------------------------------------\n\nTITLE: Color Picker with Alpha Channel in YAML\nDESCRIPTION: Configuration for a color picker that includes opacity selection, producing 8-digit hex values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-colorpicker.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    showAlpha: true\n```\n\n----------------------------------------\n\nTITLE: Using Layout Description in Meta Tag in OctoberCMS Twig Template\nDESCRIPTION: This example shows how to use the 'description' property of the layout object to set the content of a meta description tag. The 'description' property contains the layout description as defined in the configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-layout.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.layout.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Editor in October CMS\nDESCRIPTION: Demonstrates how to create a Markdown editor field and its Twig rendering with the md filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{markdown name=\"content\" label=\"Markdown content\"}Default text{/markdown}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ content|md }}\n```\n\n----------------------------------------\n\nTITLE: Detecting Cached Page Load in Turbo Router using JavaScript\nDESCRIPTION: Demonstrates how to detect when page contents are sourced from the cache by checking for the 'data-turbo-preview' attribute on the HTML element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nif (document.documentElement.hasAttribute('data-turbo-preview')) {\n    // Page shown is loaded from cache\n}\n```\n\n----------------------------------------\n\nTITLE: Using Response Macro in PHP\nDESCRIPTION: Shows how to use a custom response macro after it has been defined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::caps('foo');\n```\n\n----------------------------------------\n\nTITLE: Getting Uploaded File Size in PHP\nDESCRIPTION: Demonstrates retrieving the size of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$size = $file->getSize();\n```\n\n----------------------------------------\n\nTITLE: Color Picker with Alpha Channel in YAML\nDESCRIPTION: Configures a color picker that includes an opacity slider, resulting in an 8-digit hex value. This setup allows users to select colors with transparency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-colorpicker.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    showAlpha: true\n```\n\n----------------------------------------\n\nTITLE: English Word Pluralization in Twig\nDESCRIPTION: Converts an English word to its plural form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_plural('chicken') }}\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URL for Static Page using |app Filter in Twig\nDESCRIPTION: This snippet illustrates how to use the |app filter to create an absolute URL for a static page. It can be used within anchor tags for internal linking.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-app.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ '/about-us'|app }}\">\n    About Us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Value with Config::get() in PHP\nDESCRIPTION: This snippet shows the PHP equivalent of using the config() function, utilizing the Config::get() method to retrieve the 'app.locale' configuration value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/config.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Config::get('app.locale') ?>\n```\n\n----------------------------------------\n\nTITLE: Passing Values to Options in Artisan Command\nDESCRIPTION: Demonstrates how to call a command with an option that accepts a value. The --queue option is passed with the value 'default'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan mail:send 1 --queue=default\n```\n\n----------------------------------------\n\nTITLE: Including a Mixin in Entries using YAML in October CMS\nDESCRIPTION: This snippet shows how to include a previously defined mixin in entries. It uses the 'mixin' type and references the mixin's handle in the 'source' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n_location_fields:\n    type: mixin\n    source: Fields\\Location\n```\n\n----------------------------------------\n\nTITLE: Filtered Flash Message Display in Twig\nDESCRIPTION: Example of filtering flash messages by type, showing only success messages while ignoring other types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-flash.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% flash success %}\n    <div class=\"alert alert-success\">{{ message }}</div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial with Configuration in OctoberCMS\nDESCRIPTION: A partial with a configuration section that includes a description parameter. The description is displayed in the backend user interface to provide context for the partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Demo partial\"\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Opening Form for File Uploads\nDESCRIPTION: Shows how to create a form that accepts file uploads.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'files' => true])\n```\n\n----------------------------------------\n\nTITLE: Dropdown with Placeholder in YAML\nDESCRIPTION: Sets up a dropdown with a placeholder that provides a one-way empty option that cannot be reselected.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    placeholder: -- select a status --\n```\n\n----------------------------------------\n\nTITLE: Conditional Content for Hidden Pages in Twig\nDESCRIPTION: Shows how to display conditional content for hidden pages accessible only to logged-in back-end users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.page.hidden %}\n    <p>Note to other admins: We are currently working on this page.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Overriding List Container View in PHP\nDESCRIPTION: This snippet demonstrates how to override the main container view of the ListController behavior by creating a _list_container.php file in the controller directory. It adds a sidebar to the list view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($toolbar): ?>\n    <?= $toolbar->render() ?>\n<?php endif ?>\n\n<?php if ($filter): ?>\n    <?= $filter->render() ?>\n<?php endif ?>\n\n<div class=\"row row-flush\">\n    <div class=\"col-sm-3\">\n        [Insert sidebar here]\n    </div>\n    <div class=\"col-sm-9 list-with-sidebar\">\n        <?= $list->render() ?>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Checkbox Field Configuration in YAML\nDESCRIPTION: Basic example of configuring a checkbox field with a label for displaying content toggle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    type: checkbox\n    label: Display content\n```\n\n----------------------------------------\n\nTITLE: Deleting Directories\nDESCRIPTION: Shows how to recursively delete a directory and all of its contents.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nStorage::deleteDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cumulative Selection for Nested Checkbox List in YAML for October CMS\nDESCRIPTION: Demonstrates how to enable cumulative selection for nested checkbox lists. When 'cumulative' is set to true, selecting a parent checkbox will automatically select all its child checkboxes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-checkboxlist.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    cumulative: true\n```\n\n----------------------------------------\n\nTITLE: Dynamically Declaring Properties in October CMS\nDESCRIPTION: Example of how to dynamically add a property to an extendable class using the addDynamicProperty method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicProperty('tagsCache', null);\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom View Path in YAML\nDESCRIPTION: This YAML configuration shows how to specify a custom view path for the Lists widget, allowing for override of default views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom view path\ncustomViewPath: $/acme/blog/controllers/reviews/list\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Title Layout\nDESCRIPTION: Layout template demonstrating how to implement a dynamic page title using meta_title property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <title>{{ this.page.meta_title }} - October CMS</title>\n    </head>\n    <body>\n        {% page %}\n    </body>\n<html>\n```\n\n----------------------------------------\n\nTITLE: Extending Model Constructors in PHP\nDESCRIPTION: Demonstrates how to extend EntryRecord and GlobalRecord model constructors with custom event handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEntryRecord::extendInSection('Blog\\Post', function($model) {\n    $model->bindEvent('model.afterDelete', function () use ($model) {\n        // Model has been deleted!\n    });\n});\n\nGlobalRecord::extendInGlobal('Blog\\Config', function($model) {\n    $model->bindEvent('model.beforeSave', function () use ($model) {\n        // Model has been saved!\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Formatting DateTime Column in October CMS\nDESCRIPTION: This configuration demonstrates how to apply a custom date format to a datetime column in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    format: l jS \\of F Y h:i:s A\n```\n\n----------------------------------------\n\nTITLE: Implementing OctoberCMS Update View Form\nDESCRIPTION: HTML form template for the update view that allows users to update or delete existing records. Includes form buttons with AJAX handlers and hotkey support.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_32\n\nLANGUAGE: html\nCODE:\n```\n<?= Form::open(['class'=>'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div class=\"loading-indicator-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"close:true\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                data-load-indicator=\"Saving Category...\"\n                class=\"btn btn-default\">\n                Save and Close\n            </button>\n            <button\n                type=\"button\"\n                class=\"oc-icon-trash-o btn-icon danger pull-right\"\n                data-request=\"onDelete\"\n                data-load-indicator=\"Deleting Category...\"\n                data-request-confirm=\"Do you really want to delete this category?\">\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Form with Multiple Attributes\nDESCRIPTION: Shows the HTML output when opening a form with multiple attributes using the Form class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"\" accept-charset=\"UTF-8\" id=\"example\" class=\"something\">\n\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using array_only() Function in PHP\nDESCRIPTION: The array_only method returns only the specified key/value pairs from the given array. It's the inverse of array_except, keeping only the specified keys rather than removing them.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100, 'orders' => 10];\n\n$array = array_only($array, ['name', 'price']);\n\n// ['name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Expressions in Range\nDESCRIPTION: Illustrates how to use expressions with the .. operator in a Twig for loop range.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/for.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'|upper..'z'|upper %}\n    - {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Getting Server Variables\nDESCRIPTION: Shows how to retrieve values from the $_SERVER array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::server('PATH_INFO');\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Components in OctoberCMS Twig Templates\nDESCRIPTION: Illustrates how to pass variables to components at render time using the {% component %} tag. This allows for dynamic configuration of components when rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/component.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" postsPerPage=\"5\" %}\n```\n\n----------------------------------------\n\nTITLE: HasMany Relationship Model Definition (PHP)\nDESCRIPTION: Example showing how to define a hasMany relationship in an OctoberCMS model class. The Invoice model defines a relationship to multiple InvoiceItem models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Invoice {\n    public $hasMany = [\n        'items' => ['Acme\\Pay\\Models\\InvoiceItem'],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional PHP Trait Definition\nDESCRIPTION: Example of defining a traditional PHP trait for comparison.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/behaviors.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrait UtilityFunctions\n{\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rackspace CDN in OctoberCMS PHP Configuration\nDESCRIPTION: This snippet shows how to configure the Rackspace CDN disk in the OctoberCMS filesystem configuration file. It includes settings for the driver, username, API key, container, endpoint, and region.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'disks' => [\n    // ...\n    'rackspace' => [\n        'driver'    => 'rackspace',\n        'username'  => 'october.api.cdn',\n        'key'       => 'xx00000000xxxxxx0x0x0x000xx0x0x0',\n        'container' => 'my-bucket',\n        'endpoint'  => 'https://identity.api.rackspacecloud.com/v2.0/',\n        'region'    => 'ORD'\n    ],\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Stopping Chunk Processing in PHP\nDESCRIPTION: Demonstrates how to stop further chunks from being processed by returning false from the closure in the chunk method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->chunk(100, function($users) {\n    // Process the records...\n\n    return false;\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Union Queries in PHP\nDESCRIPTION: Shows how to use the union method to combine two separate queries. In this example, it unions users with null first names and users with null last names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$first = Db::table('users')\n    ->whereNull('first_name');\n\n$users = Db::table('users')\n    ->whereNull('last_name')\n    ->union($first)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Checking for Hidden Page Status in Twig\nDESCRIPTION: Demonstrates how to check if a page is hidden (accessible only to logged-in back-end users) using the hidden property of the this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.page.hidden %}\n    <p>Note to other admins: We are currently working on this page.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content Block in Twig\nDESCRIPTION: This example shows how to render a Markdown content block using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'my-markdown.md' %}\n```\n\n----------------------------------------\n\nTITLE: Advanced Record Management with Controller Display Mode\nDESCRIPTION: Configuration for enabling advanced record management using the controller display mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    displayMode: controller\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Block in Twig\nDESCRIPTION: This snippet demonstrates how to render a content block in a page, partial, or layout using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/contacts\"\n==\n<div class=\"contacts\">\n    {% content 'contacts.htm' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Inline Content Hint Field with Custom Mode\nDESCRIPTION: Shows how to configure a hint field with inline content, including a label and comment in tip mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-hint.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_tip1:\n    type: hint\n    mode: tip\n    label: Pro Tip\n    comment: Always check to make sure this field is populated.\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence with has Method in PHP\nDESCRIPTION: Determines if a given key exists in the collection. Returns boolean value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['account_id' => 1, 'product' => 'Desk']);\n\n$collection->has('email');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Reverse Proxy Link Policy Configuration\nDESCRIPTION: Settings to enforce secure HTTPS links when using reverse proxies like CloudFlare.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nLINK_POLICY=secure\n```\n\n----------------------------------------\n\nTITLE: Configuring List Column Display as Counter\nDESCRIPTION: Configuration for displaying a counter of related records in a list column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: entries\n    # ...\n    column:\n        relation: categories\n        relationCount: true\n        type: number\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Turbo Router for Nested Links in HTML\nDESCRIPTION: Demonstrates how to re-enable PJAX routing for a link when an ancestor has disabled it, using the 'data-turbo=\"true\"' attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-turbo=\"false\">\n    <a href=\"/\" data-turbo=\"true\">Enabled</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Field in OctoberCMS\nDESCRIPTION: Illustrates the usage of the Markdown field type in OctoberCMS forms and its rendering in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{markdown name=\"content\" label=\"Markdown content\"}Default text{/markdown}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ content|md }}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Filter Scope in YAML\nDESCRIPTION: A basic example showing how to define a date-type filter scope in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter-scopes.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscopes:\n    myscope:\n        type: date\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Setting Partial Contents to a Twig Variable\nDESCRIPTION: Demonstrates how to capture a partial's rendered content in a variable using the partial() function, allowing further manipulation before display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/partial.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% set cardPartial = partial('my-cards/card') %}\n\n{{ cardPartial|raw }}\n```\n\n----------------------------------------\n\nTITLE: Using the mergeRecursive() Method in PHP Collections\nDESCRIPTION: The mergeRecursive method recursively merges arrays or collections with the original collection. When string keys match, the values are combined into arrays recursively.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->mergeRecursive(['product_id' => 2, 'price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => [1, 2], 'price' => [100, 200], 'discount' => false]\n```\n\n----------------------------------------\n\nTITLE: Markdown Editor Field Configuration in YAML\nDESCRIPTION: YAML configuration for markdown text editor with view mode options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nmd_content:\n    type: markdown\n    size: huge\n    mode: split\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response in PHP\nDESCRIPTION: Demonstrates how to create a redirect response to another URL using the Redirect facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::to('user/login');\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Storage for Rackspace CDN in OctoberCMS\nDESCRIPTION: This PHP configuration snippet shows how to set up the media storage settings in OctoberCMS to use Rackspace CDN. It specifies the disk, folder, and path for media storage.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'storage' => [\n    // ...\n    'media' => [\n        'disk'   => 'rackspace',\n        'folder' => 'media',\n        'path' => 'https://xxxxxxxxx-xxxxxxxxx.r00.cf0.rackcdn.com/media'\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Using HTML Functions as Twig Filters\nDESCRIPTION: Shows how HTML helper functions can be used as Twig filters, applying the function to a value using the pipe syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ ''|html_strip }}\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Description in Twig\nDESCRIPTION: Shows how to output the page description as defined in the page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ this.page.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Widget Data in PHP and HTML\nDESCRIPTION: This snippet demonstrates how to render form widget data by preparing variables in the render method and using them in the widget partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function render()\n{\n    $this->vars['id'] = $this->getId();\n    $this->vars['name'] = $this->getFieldName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('myformwidget');\n}\n\n<input id=\"<?= $id ?>\" name=\"<?= $name ?>\" value=\"<?= e($value) ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Including a Mixin Field in YAML\nDESCRIPTION: Demonstrates the basic structure for including a mixin field in a YAML configuration. The 'source' property can be either a UUID or a handle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-mixin.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_include1:\n    type: mixin\n    source: <uuid|handle>\n```\n\n----------------------------------------\n\nTITLE: Defining Color Picker Column in YAML\nDESCRIPTION: Demonstrates how to define a color picker column in a list definition using YAML configuration. The column will display a color value with the label 'Background'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-colorpicker.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Listing Directories in October CMS\nDESCRIPTION: Examples of retrieving all directories within a directory using the directories and allDirectories methods. The allDirectories method includes all sub-directories recursively.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$directories = Storage::directories($directory);\n\n// Recursive...\n$directories = Storage::allDirectories($directory);\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkage Column with Custom HTML Attributes in YAML\nDESCRIPTION: Adds custom HTML attributes to a linkage column, in this case setting the target attribute to open the link in a new tab (_blank).\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-linkage.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nwebsite:\n    label: Website\n    type: linkage\n    attributes:\n        target: _blank\n```\n\n----------------------------------------\n\nTITLE: Checking Record Existence and Displaying 404 Page in October CMS\nDESCRIPTION: Shows how to check if a record exists and display a 404 page if not found using Twig and the abort() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if author is empty %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Defining an Entry Blueprint in YAML\nDESCRIPTION: This snippet shows how to define a basic entry blueprint for a team member. It includes the blueprint handle, type, name, and a sample field definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Team\\Member\ntype: entry\nname: Team Member\n\nfields:\n    name:\n        label: First Name\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Using head Helper Function in PHP\nDESCRIPTION: The head function returns the first element of an array without modifying the original array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, 200, 300];\n\n$first = head($array);\n\n// 100\n```\n\n----------------------------------------\n\nTITLE: Basic Form Opening Tag in Twig\nDESCRIPTION: Shows how to create a basic form opening tag using form_open() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open() }}\n```\n\n----------------------------------------\n\nTITLE: Selectively Flashing Input in October CMS\nDESCRIPTION: Examples of selectively flashing only specific input fields to the session for the next request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nInput::flashOnly('username', 'email');\n\nInput::flashExcept('password');\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached with UNIX Socket in PHP\nDESCRIPTION: Alternative configuration for Memcached using a UNIX socket path instead of TCP/IP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    [\n        'host' => '/var/run/memcached/memcached.sock',\n        'port' => 0,\n        'weight' => 100\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Custom Content Field Implementation in PHP\nDESCRIPTION: Example of implementing a custom content field with model and database table extensions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass MyContentField extends ContentFieldBase\n{\n    public function extendModelObject($model)\n    {\n        $model->belongsTo[$this->fieldName] = MyOtherModel::class;\n    }\n\n    public function extendDatabaseTable($table)\n    {\n        $table->integer($this->fieldName . '_id')->nullable();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Relationship Binding\nDESCRIPTION: This code shows how to defer binding a relationship until the parent model is saved, using a session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$comment = new Comment;\n$comment->content = \"Hello world!\";\n$comment->save();\n\n$post = new Post;\n$post->comments()->add($comment, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Using asset() URL Helper in PHP\nDESCRIPTION: The asset function generates a URL for an asset using the current scheme of the request (HTTP or HTTPS). This ensures assets are served over the same protocol as the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n$url = asset('img/photo.jpg');\n```\n\n----------------------------------------\n\nTITLE: Using Context in Field Filtering\nDESCRIPTION: Shows how to handle the 'refresh' context to update field values during dependency refresh without affecting saved values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/field-dependencies.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function filterFields($fields, $context = null)\n{\n    if ($context === 'refresh' && $this->parent) {\n        $fields->parent_name->value = $this->parent->name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring a Plugin Dependency in composer.json\nDESCRIPTION: JSON configuration snippet showing how to declare a dependency on another plugin package with version constraints in composer.json.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"acme/blog-plugin\": \"^1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Single Update Comment in YAML\nDESCRIPTION: Example of a simple version entry with just a comment and no associated update scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/updates.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: A single comment that uses no update scripts.\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Helper Function Usage in Twig\nDESCRIPTION: Demonstrates how to use the basic HTML helper function in Twig templates. The example shows the html_strip() function which maps to Html::strip() in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Html::strip() ?>\n```\n\n----------------------------------------\n\nTITLE: Using Phosphor Icons in HTML\nDESCRIPTION: Example showing how to include a Phosphor icon using HTML markup with proper class prefixes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/available-icons.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"ph ph-laptop\"></i>\n```\n\n----------------------------------------\n\nTITLE: Disabling Sorting for Image Column in YAML\nDESCRIPTION: YAML configuration showing how to disable sorting for an image column using the sortable property set to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-image.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    sortable: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Site Picker Component in Templates\nDESCRIPTION: Shows how to include and use the sitePicker component in CMS templates to manage links between different sites.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/resources/multisite.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[sitePicker]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set availableSites = sitePicker.sites %}\n```\n\n----------------------------------------\n\nTITLE: Sending Raw String Emails with Twig Parsing\nDESCRIPTION: Example of sending a raw string email with Twig variable parsing using the 'raw' key in the options array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nMail::send(['raw' => 'Text to email'], $vars, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Meta Title Configuration\nDESCRIPTION: Page template configuration showing how to set a dynamic meta title using Twig variables\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nmeta_title = \"{{ post.title }} - Blog\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Value Equality Check in PHP\nDESCRIPTION: Example showing how to verify that the package configuration values match the plugin configuration values after proper setup. This demonstrates the result of successful configuration transfer.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nConfig::get('purifier.encoding') === Config::get('acme.blog::purifier.encoding');\n```\n\n----------------------------------------\n\nTITLE: Trace Log Helper Function Usage\nDESCRIPTION: Demonstrates the trace_log helper function which provides an easier way to log strings, arrays, and exceptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/log.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Write a string value\n$val = 'Hello world';\ntrace_log('The value is '.$val);\n\n// Dump an array value\n$val = ['Some', 'array', 'data'];\ntrace_log($val);\n\n// Trace an exception\ntry {\n    //\n}\ncatch (Exception $ex) {\n    trace_log($ex);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Scope Filter in YAML\nDESCRIPTION: Demonstrates how to configure a basic Number Scope filter for an 'age' field with a 'greater than' condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-number.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    conditions:\n        greater: true\n```\n\n----------------------------------------\n\nTITLE: Time Picker Configuration with 12-hour Format in YAML\nDESCRIPTION: Shows how to configure a time picker field with 12-hour format for selecting birth time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-datepicker.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbirth_time:\n    label: Time Born\n    type: datepicker\n    mode: time\n    twelveHour: true\n```\n\n----------------------------------------\n\nTITLE: Defining Single Entry Blueprint in YAML\nDESCRIPTION: Creates a single entry blueprint for a homepage with a welcome message field. The single type forces only one entry for the section, useful for one-off content pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Homepage\ntype: single\nname: Homepage Content\n\nfields:\n    welcome_message:\n        label: Welcome Message\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Creating Complete Range Dropdowns\nDESCRIPTION: Shows how to create a range dropdown with selected value and empty option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectRange('number', 10, 20, 2, ['emptyOption' => 'ÈÄâÊã©...']) ?>\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element with last() Method in PHP Collections\nDESCRIPTION: The last() method returns the last element in the collection that passes a given truth test. If called without arguments, it returns the last element in the collection or null if empty.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4])->last(function ($key, $value) {\n    return $value < 3;\n});\n\n// 2\n```\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4])->last();\n\n// 4\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Nested External Parameter Values\nDESCRIPTION: This snippet shows how to access deeply nested values from external parameters for component properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ data.maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Changing Lookup Identifier for Section Component in October CMS\nDESCRIPTION: Demonstrates how to change the default identifier from 'slug' to 'id' and update the page URL accordingly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/:id\"\n\n[section]\nhandle = \"Blog\\Author\"\nidentifier = \"id\"\n```\n\n----------------------------------------\n\nTITLE: Adding URL Fragments to Pagination Links in Twig\nDESCRIPTION: Shows how to append a URL fragment (hash) to pagination links using the fragment method. This example appends #foo to the end of each pagination URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ users.fragment('foo').render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Email Obfuscation in HTML Anchor Link\nDESCRIPTION: Shows a practical example of using html_email() to protect an email address in a mailto link.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"mailto: {{ 'me@mysite.tld'|html_email }}\">Email me</a>\n\n<!-- The above will output -->\n<a href=\"mailto: &#109;&#97;&#105;&#108;&#x74;o&#x3a;&#97;&#64;b.&#x63;\">Email me</a>\n```\n\n----------------------------------------\n\nTITLE: Generating a Session Key for Deferred Binding in OctoberCMS\nDESCRIPTION: Example showing how to generate a unique session key for deferred binding. This key is used to track relationships until they can be committed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$sessionKey = uniqid('session_key', true);\n```\n\n----------------------------------------\n\nTITLE: Deleting Files in PHP\nDESCRIPTION: Shows how to delete a single file or multiple files using the 'delete' method of the Storage facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nStorage::delete('file.jpg');\n\nStorage::delete(['file1.jpg', 'file2.jpg']);\n```\n\n----------------------------------------\n\nTITLE: Options Method Configuration in YAML\nDESCRIPTION: Configuration for using a custom options method to dynamically supply filter options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n    optionsMethod: getRoleGroupOptions\n```\n\n----------------------------------------\n\nTITLE: Dumping Collection Items in PHP\nDESCRIPTION: The dump method dumps the collection's items for inspection. Unlike dd, it doesn't end script execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['John Doe', 'Jane Doe']);\n\n$collection->dump();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Component as Hot Control in October CMS\nDESCRIPTION: This example demonstrates how to register a Vue component as a hot control in October CMS. It uses Vue.component to create a reusable component that can be used as <my-vue-component></my-vue-component> within Vue templates. The control initializes the component and hides the original element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"my-vue-component\">\n    <button @click=\"greet\">Greet</button>\n</div>\n\n<script>\noc.registerControl('my-vue-component', class extends oc.ControlBase {\n    init() {\n        Vue.component('my-vue-component', {\n            template: this.element,\n            methods: {\n                greet: this.greet\n            }\n        });\n    }\n\n    connect() {\n        this.element.style.display = 'none';\n    }\n\n    greet(event) {\n        alert('Hello!');\n    }\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Extending Constructor Using Static Extend Method\nDESCRIPTION: Shows how to extend a class constructor using the static extend method provided by Extendable classes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nMyNamespace\\Controller::extend(function($controller) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Media Filter Output Example\nDESCRIPTION: Shows the resulting HTML output when the media manager address is set to https://cdn.octobercms.com. Demonstrates how the filter transforms the relative path into an absolute URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-media.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"https://cdn.octobercms.com/banner.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Error Bags in Twig\nDESCRIPTION: Shows how to access a named error bag in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.login.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Month Name Dropdowns\nDESCRIPTION: Shows how to generate dropdowns with month names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::selectMonth('month') ?>\n```\n\n----------------------------------------\n\nTITLE: Removing a Theme in October CMS\nDESCRIPTION: Command to delete a theme and its directory from the filesystem.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:remove rainlab-vanilla\n```\n\n----------------------------------------\n\nTITLE: Input Preset Configuration in YAML\nDESCRIPTION: Shows how to configure input preset converters to automatically transform input values between fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ntitle:\n    label: Title\n\nurl:\n    label: URL\n    preset:\n        field: title\n        type: url\n```\n\nLANGUAGE: yaml\nCODE:\n```\nslug:\n    label: Slug\n    preset: title\n```\n\n----------------------------------------\n\nTITLE: Getting Original Uploaded File Name in PHP\nDESCRIPTION: Demonstrates how to retrieve the original client-provided filename of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$name = $file->getClientOriginalName();\n```\n\n----------------------------------------\n\nTITLE: Adding Items to Cache Conditionally in PHP\nDESCRIPTION: Using the add method to add an item to cache only if it doesn't already exist, returning true on success.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nCache::add('key', 'value', $seconds);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Collection Class in OctoberCMS\nDESCRIPTION: Shows how to define a custom Collection class that extends the base OctoberCMS Collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Collection as CollectionBase;\n\nclass CustomCollection extends CollectionBase\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring a Plugin Dependency in composer.json\nDESCRIPTION: JSON configuration to include another plugin as a dependency for your package. This example requires the Acme.Blog plugin with a version range of 1.2.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"acme/blog-plugin\": \"^1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Views in PHP\nDESCRIPTION: Shows different ways to pass data to views, including using the with method and magic methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// Using conventional method\n$view = View::make('acme.blog::greeting')->with('name', 'Steve');\n\n// Using magic method\n$view = View::make('acme.blog::greeting')->withName('steve');\n```\n\n----------------------------------------\n\nTITLE: Appending Custom Attributes to JSON in PHP\nDESCRIPTION: Shows how to append custom attributes to the model's array and JSON representation using the $appends property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * ËøΩÂä†Âà∞Ê®°ÂûãÊï∞ÁªÑË°®ÂçïÁöÑ‰øÆÊîπÂô®„ÄÇ\n     *\n     * @var array\n     */\n    protected $appends = ['is_admin'];\n}\n```\n\n----------------------------------------\n\nTITLE: Grouped Repeater External Configuration\nDESCRIPTION: Example of a grouped repeater using external configuration files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: repeater\n    prompt: Add content block\n    groups: $/acme/blog/config/fields_repeater.yaml\n```\n\n----------------------------------------\n\nTITLE: Date Scope Configuration with Timezone Disabled\nDESCRIPTION: Shows how to disable automatic timezone conversion for the Date Scope filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    useTimezone: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Navigation Completely\nDESCRIPTION: Sets the navigation property to false to completely disable navigation for a blueprint.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation: false\n```\n\n----------------------------------------\n\nTITLE: Rendering File Upload in October CMS\nDESCRIPTION: Demonstrates how to create a file uploader input for files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{fileupload name=\"logo\" label=\"Logo\"}defaultlogo.png{/fileupload}\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Column Type in YAML\nDESCRIPTION: Demonstrates how to set up an image column with resizing options in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n    sortable: false\n    width: 150\n    height: 150\n    options:\n        quality: 80\n```\n\n----------------------------------------\n\nTITLE: Delayed Job Execution\nDESCRIPTION: Demonstrates how to delay job execution using Queue::later method with Carbon datetime.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$date = Carbon::now()->addMinutes(15);\n\nQueue::later($date, 'SendEmail', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Loop Variables in Twig\nDESCRIPTION: Shows how to access special loop variables like index during iteration in a Twig for loop.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% for user in users %}\n    {{ loop.index }} - {{ user.username }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Configuration in October CMS\nDESCRIPTION: Demonstrates how to use the env() helper function to pull configuration values from environment variables. This allows for environment-specific configuration without changing code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/file-settings.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => env('ACME_TODO_MAX_ITEMS', 25)\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Placeholder with Default Content in Twig\nDESCRIPTION: Illustrates how to create a placeholder with default content that can be replaced or complemented by a page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder sidebar default %}\n    <p><a href=\"/contacts\">Contact us</a></p>\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Creating Number Input Fields\nDESCRIPTION: Shows how to generate number input fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::number('name', 'value') ?>\n```\n\n----------------------------------------\n\nTITLE: Checking Hidden Page Status in Twig\nDESCRIPTION: Demonstrates how to check if a page is hidden (accessible only to logged-in back-end users) and conditionally display content based on this status.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.page.hidden %}\n    <p>Note to other admins: We are currently working on this page.</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: External Form Fields Definition in YAML\nDESCRIPTION: Example of referencing an external fields.yaml file for theme customization, which allows for more complex form configurations to be defined separately.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: My Theme\n# [...]\n\nform: config/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Output of |app Filter for Favicon URL in Twig\nDESCRIPTION: This snippet shows the expected output when using the |app filter for a favicon URL. It assumes the website address is http://octobercms.com.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-app.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<link rel=\"icon\" href=\"http://octobercms.com/favicon.ico\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Manage Widget in OctoberCMS PHP\nDESCRIPTION: PHP method example for extending the manage widget in a relation, providing a hook to manipulate the widget as needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendManageWidget($widget, $field, $model)\n{\n    // Make sure the field is the expected one\n    if ($field !== 'myField') {\n        return;\n    }\n\n    // Manipulate widget as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Pagination Implementation\nDESCRIPTION: Example of implementing pagination with the Collection component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set authorPosts = posts.whereRelation(...).paginate(10) %}\n\n{{ pager(authorPosts) }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uploaded File Path\nDESCRIPTION: Demonstrates how to get the real path of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$path = Input::file('photo')->getRealPath();\n```\n\n----------------------------------------\n\nTITLE: Using Partial Equivalent of Component Tag in Twig\nDESCRIPTION: This example shows the equivalent partial syntax that the component tag uses behind the scenes. The component tag is essentially an alias for rendering the component's default.htm partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-component.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blogPosts::default\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Field in YAML\nDESCRIPTION: Defines a switch field in a form using YAML configuration. The 'type' property is set to 'switch' and includes a 'comment' for additional information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: switch\n    comment: Flick this switch to display content\n```\n\n----------------------------------------\n\nTITLE: Configuring Export Page in YAML\nDESCRIPTION: Demonstrates the YAML configuration for the Export page. It includes settings for the page title, model class, list configuration, and redirection after export.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nexport:\n    title: Export Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberExport\n    list: $/acme/campaign/models/subscriberexport/columns.yaml\n    redirect: acme/campaign/subscribers\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Switch Filter in OctoberCMS YAML\nDESCRIPTION: This code snippet shows how to set a default value for the switch filter scope. The 'default' property is used to specify the initial state of the filter, where 0 is off, 1 is indeterminate, and 2 is on.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-switch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nis_approved:\n    label: Approved\n    type: switch\n    default: 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edit Site in PHP\nDESCRIPTION: Example of getting the currently selected site in the admin panel.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$site = Site::getEditSite();\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Database File in October CMS\nDESCRIPTION: Creates a new SQLite database file in the storage directory using the touch command. This is the first step in setting up an SQLite database for an October CMS application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/database-config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch storage/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Example Third-Party Package Dependency in composer.json\nDESCRIPTION: JSON configuration showing how to include a third-party package as a dependency in your plugin. This example shows the AWS SDK for PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"aws/aws-sdk-php\": \"^3.158\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handler with Response\nDESCRIPTION: Example of registering an error handler that returns a response, which will be sent to the browser without invoking other handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nApp::error(function(InvalidUserException $exception) {\n    return 'Sorry! Something is wrong with this account!';\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Component Class in PHP for October CMS\nDESCRIPTION: Example of a component class definition extending ComponentBase. Includes a componentDetails method for CMS back-end display and a posts method for data access.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Components;\n\nclass BlogPosts extends \\Cms\\Classes\\ComponentBase\n{\n    public function componentDetails()\n    {\n        return [\n            'name' => 'Blog Posts',\n            'description' => 'Displays a collection of blog posts.'\n        ];\n    }\n\n    /**\n     * posts becomes available on the page as {{ component.posts }}\n     */\n    public function posts()\n    {\n        return ['First Post', 'Second Post', 'Third Post'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Touching Parent Timestamps in PHP\nDESCRIPTION: Shows how to set up a model to automatically update its parent's timestamp when the child model is updated, using the 'touches' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    /**\n     * All of the relationships to be touched.\n     */\n    protected $touches = ['post'];\n\n    /**\n     * Relations\n     */\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n\n$comment = Comment::find(1);\n\n$comment->text = 'Edit to this comment!';\n\n$comment->save();\n```\n\n----------------------------------------\n\nTITLE: Custom Collection Class Definition\nDESCRIPTION: Example of creating a custom collection class that extends the base OctoberCMS collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/collection.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Collection as CollectionBase;\n\nclass CustomCollection extends CollectionBase\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Using October Icons in HTML\nDESCRIPTION: Example showing how to include an October icon using HTML markup with the icon- prefix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/available-icons.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon-october\"></i>\n```\n\n----------------------------------------\n\nTITLE: Configuring Items Relation in YAML\nDESCRIPTION: Example YAML configuration for managing invoice line items relation with view and manage options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nitems:\n    label: Invoice Line Item\n    view:\n        list: $/acme/pay/models/invoiceitem/columns.yaml\n        toolbarButtons: create|delete\n    manage:\n        form: $/acme/pay/models/invoiceitem/fields.yaml\n        recordsPerPage: 10\n```\n\n----------------------------------------\n\nTITLE: Formatting Currency Display with |currency Twig Filter\nDESCRIPTION: Illustrates different formatting options for currency display using the |currency filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n// $10.00\n{{ 1000|currency({ format: '' }) }}\n\n// $10.00 USD\n{{ 1000|currency({ format: 'long' }) }}\n\n// $10\n{{ 1000|currency({ format: 'short' }) }}\n```\n\n----------------------------------------\n\nTITLE: Sharing POST Parameters Across Multiple AJAX Elements in HTML\nDESCRIPTION: This code demonstrates how to share the same POST parameter across multiple elements by placing the data-request-data attribute on a parent element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-request-data=\"id: 7\">\n    <button data-request=\"onDelete\">Delete</button>\n    <button data-request=\"onSave\">Update</button>\n</div>\n\n```\n\n----------------------------------------\n\nTITLE: String Case Manipulation Functions\nDESCRIPTION: Functions for converting strings to different case formats including camelCase, StudlyCase, and snake_case.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/str.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'hello world'|str_camel }}\n{{ str_studly('hello world') }}\n{{ str_snake('hello world') }}\n{{ str_snake('hello world', '---') }}\n```\n\n----------------------------------------\n\nTITLE: Example Paginator JSON Structure\nDESCRIPTION: Example of the JSON structure returned when converting a paginator instance to JSON, including metadata and the paginated results in the data property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 50,\n    \"per_page\": 15,\n    \"current_page\": 1,\n    \"last_page\": 4,\n    \"next_page_url\": \"http://octobercms.app?page=2\",\n    \"prev_page_url\": null,\n    \"from\": 1,\n    \"to\": 15,\n    \"data\":[\n        {\n            // Result Object\n        },\n        {\n            // Result Object\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting String to Plural in PHP\nDESCRIPTION: The str_plural function converts a string to its plural form. This function currently only supports the English language.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_22\n\nLANGUAGE: PHP\nCODE:\n```\n$plural = str_plural('car');\n\n// cars\n\n$plural = str_plural('child');\n\n// children\n```\n\n----------------------------------------\n\nTITLE: Using last Helper Function in PHP\nDESCRIPTION: The last function returns the last element of an array without modifying the original array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, 200, 300];\n\n$last = last($array);\n\n// 300\n```\n\n----------------------------------------\n\nTITLE: Section Component with Custom Alias\nDESCRIPTION: Shows how to use a component alias to access the section content with a different variable name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[section author]\nhandle = \"Blog\\\\Author\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Posts by {{ author.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Copying Files Between Locations\nDESCRIPTION: Demonstrates how to copy a file from one location to another within the same disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nStorage::copy('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Assigning New Variables to a Partial in Twig\nDESCRIPTION: Shows how to assign new variables for use within a partial when rendering it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"location\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\n----------------------------------------\n\nTITLE: Date Scope with Min and Max Date Range\nDESCRIPTION: Configures the Date Scope with minimum and maximum selectable dates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n    minDate: '2001-01-23'\n    maxDate: '2030-10-13'\n```\n\n----------------------------------------\n\nTITLE: Requiring Specific October CMS Version in Composer\nDESCRIPTION: Example of requiring a specific version of October CMS in the composer.json file. This snippet requires version 2.1 or above of the october/rain package.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/publishing-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"october/rain\": \">=2.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Repeater Field Array in PHP for OctoberCMS\nDESCRIPTION: Shows how the toEditor method generates a PHP array representation of a repeater field in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'repeater' => [\n    'label' => 'Website name',\n    'type' => 'repeater',\n    'fields' => [\n\n        'title' => [\n            'label' => 'Title',\n            'default' => 'Title',\n            'type' => 'text'\n        ],\n        'content' => [\n            'label' => 'Content',\n            'default' => 'Content',\n            'type' => 'textarea'\n        ]\n\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Single Instance Content Injection\nDESCRIPTION: Using the once attribute to ensure content is only inserted once per template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put scripts once %}\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/tiny-slider/2.9.2/min/tiny-slider.js\"></script>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Implicitly Converting Models to JSON in PHP\nDESCRIPTION: Shows how models are implicitly converted to JSON when cast to a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn (string) $user;\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Layout ID in Twig\nDESCRIPTION: Demonstrates how to use the this.layout.id property to generate a CSS class name based on the layout file name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"layout-{{ this.layout.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Lazy Eager Loading with Constraints in OctoberCMS\nDESCRIPTION: Example showing lazy eager loading with added constraints. This loads authors for books and orders them by publication date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$books->load([\\n    'author' => function ($query) {\\n        $query->orderBy('published_date', 'asc');\\n    }\\n]);\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Custom POST Parameters\nDESCRIPTION: Demonstrates sending additional POST parameters with an AJAX request using the data-request-data attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onUpdate\" data-request-data=\"mode: 'update'\">\n```\n\n----------------------------------------\n\nTITLE: Using |media Twig Filter for Image Source\nDESCRIPTION: Demonstrates how to use the |media Twig filter to generate a URL for an image source in HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/media.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media }}\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Image Resizing with Twig Filter\nDESCRIPTION: Simple example of resizing an image using the |resize Twig filter with width and height parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'image.jpg'|resize(100, 100) }}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Mode in OctoberCMS\nDESCRIPTION: Configuration snippet showing how to set the logging mode in OctoberCMS to use daily log files instead of a single file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'log' => 'daily'\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key Constraint in PHP with October CMS Schema\nDESCRIPTION: This code shows how to drop a foreign key constraint using the Schema builder in October CMS. It uses the automatically generated constraint name based on the table and column names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$table->dropForeign('posts_user_id_foreign');\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to Forms\nDESCRIPTION: Example of adding HTML attributes like classes to a form when opening it with Form::open.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'class' => 'pretty-form'])\n```\n\n----------------------------------------\n\nTITLE: Using the partition() Method in PHP Collections\nDESCRIPTION: The partition method separates collection items into two collections based on a truth test. It returns an array with two collections - the first containing items that pass the test, the second containing items that fail.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5, 6]);\n\nlist($underThree, $equalOrAboveThree) = $collection->partition(function ($i) {\n    return $i < 3;\n});\n\n$underThree->all();\n\n// [1, 2]\n\n$equalOrAboveThree->all();\n\n// [3, 4, 5, 6]\n```\n\n----------------------------------------\n\nTITLE: Creating Report Widget via Artisan Command in October CMS\nDESCRIPTION: Command line instruction to generate a new report widget including class and view files using October CMS's artisan command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/report-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:reportwidget Acme.Blog TopPosts\n```\n\n----------------------------------------\n\nTITLE: Setting Default Date Range Values in PHP\nDESCRIPTION: Example showing how to set default values for date range filters using PHP with Carbon instances.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nmyController::extendListFilterScopes(function($filter)\n{\n        'Date Test' => [\n            'label' => 'Date Test',\n            'type' => 'daterange',\n            'default' => $this->myDefaultTime(),\n            'conditions' => \"created_at >= ':after' AND created_at <= ':before'\"\n        ],\n    ]);\n});\n\n// return value must be instance of carbon\npublic function myDefaultTime()\n{\n    return [\n        0 => Carbon::parse('2012-02-02'),\n        1 => Carbon::parse('2012-04-02'),\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Page Parameters in Resources Component Variables\nDESCRIPTION: Shows how to use page parameters in the resources component. The 'activeNav' variable is set to the value of the ':slug' parameter from the page route.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/resources.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"mypage/:slug\"\n\n[resources]\nvars[activeNav] = '{{ :slug }}'\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Description\nDESCRIPTION: Example of a layout template that includes a configuration section with a description parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Basic layout example\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Content to Twig Variables\nDESCRIPTION: Demonstrates how to set content to Twig variables using the content() function, allowing for manipulation before display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm') %}\n\n{{ welcomeContent|raw }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set welcomeContent = content('welcome.htm', { foo: 'bar' }) %}\n```\n\n----------------------------------------\n\nTITLE: Example Paginator JSON Response Structure\nDESCRIPTION: Shows the JSON structure that is returned when a paginator instance is converted to JSON. The response includes pagination metadata and the actual data in the 'data' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"total\": 50,\n    \"per_page\": 15,\n    \"current_page\": 1,\n    \"last_page\": 4,\n    \"next_page_url\": \"http://octobercms.app?page=2\",\n    \"prev_page_url\": null,\n    \"from\": 1,\n    \"to\": 15,\n    \"data\":[\n        {\n            // Result Object\n        },\n        {\n            // Result Object\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Requested Response Format in October CMS\nDESCRIPTION: How to check the requested response format based on the HTTP Accept header.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nif (Request::format() == 'json') {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Default HTML5 Audio Player\nDESCRIPTION: Shows the default HTML5 audio tag implementation for audio files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<audio src=\"audio.mp3\" controls></audio>\n```\n\n----------------------------------------\n\nTITLE: Syncing Many-to-Many Relationships with Pivot Attributes in OctoberCMS\nDESCRIPTION: Example showing how to sync many-to-many relationships with additional pivot attributes. This replaces relationships and sets custom attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->sync([1 => ['expires' => true], 2, 3]);\n```\n\n----------------------------------------\n\nTITLE: Registering Mail Partials and Layouts in PHP\nDESCRIPTION: Demonstrates how to register mail partials and layouts by overriding the 'registerMailPartials' and 'registerMailLayouts' methods in the Plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\npublic function registerMailPartials()\n{\n    return [\n        'tracking'  => 'acme.blog::partials.tracking',\n        'promotion' => 'acme.blog::partials.promotion',\n    ];\n}\n\npublic function registerMailLayouts()\n{\n    return [\n        'marketing'    => 'acme.blog::layouts.marketing',\n        'notification' => 'acme.blog::layouts.notification',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Disk Storage in October CMS\nDESCRIPTION: Default Media Manager configuration for local disk storage in the filesystems.php config file. This uses the storage/app/media subdirectory of the installation directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/providers.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'media' => [\n    'driver' => 'local',\n    'root' => storage_path('app/media'),\n    'url' => '/storage/app/media',\n    'visibility' => 'public',\n    'throw' => false,\n],\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker in October CMS\nDESCRIPTION: Shows how to create a color picker widget with custom available colors and empty value option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{colorpicker name=\"bg_color\" label=\"Background colour\" allowEmpty=\"true\" availableColors=\"#ffffff|#000000\"}{/colorpicker}\n```\n\n----------------------------------------\n\nTITLE: Working with Date Attributes in Models\nDESCRIPTION: Example showing how to set a date attribute value using Carbon and then access it using Carbon methods after retrieval from the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/mutators.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\n$user->disabled_at = Carbon::now();\n\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Extending Filter Scopes in PHP\nDESCRIPTION: Shows how to extend list filter scopes both externally and internally.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nCategories::extendListFilterScopes(function($filter) {\n    // Add custom CSS classes to the Filter widget itself\n    $filter->cssClasses = array_merge($filter->cssClasses, ['my', 'array', 'of', 'classes']);\n\n    $filter->addScopes([\n        'my_scope' => [\n            'label' => 'My Filter Scope'\n        ]\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from a Subdirectory in Twig\nDESCRIPTION: Demonstrates how to reference and render a partial template located in a subdirectory within a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/themes.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"blog/category-list\" %}\n```\n\n----------------------------------------\n\nTITLE: Initializing sitePicker Component in October CMS\nDESCRIPTION: Basic setup of the sitePicker component in an October CMS template. It demonstrates how to include the component and retrieve available sites.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/sitepicker.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[sitePicker]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% set availableSites = sitePicker.sites %}\n```\n\n----------------------------------------\n\nTITLE: Output of |app filter for static URLs in HTML\nDESCRIPTION: Displays the resulting HTML output when using the |app filter for a static URL, assuming the website address is https://octobercms.com. The filter generates an absolute URL to the specified page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/app.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://octobercms.com/about-us\">\n    About us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Revision History in October CMS Models\nDESCRIPTION: Demonstrates how to access and iterate through the revision history of a model to display changes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$history = User::find(1)->revision_history;\n\nforeach ($history as $record) {\n    echo $record->field . ' updated ';\n    echo 'from ' . $record->old_value;\n    echo 'to ' . $record->new_value;\n}\n```\n\n----------------------------------------\n\nTITLE: Job ID Access\nDESCRIPTION: Example of accessing the job identifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$job->getJobId();\n```\n\n----------------------------------------\n\nTITLE: Configuring Nested Form Widget in YAML\nDESCRIPTION: Configuration for a nested form widget that allows embedding form fields within another form. Supports tabs and secondary tabs with various field types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: nestedform\n    usePanelStyles: false\n    form:\n        fields:\n            added_at:\n                label: Date added\n                type: datepicker\n            details:\n                label: Details\n                type: textarea\n            title:\n                label: This the title\n                type: text\n        tabs:\n            meta_title:\n                lable: Meta Title\n                tab: SEO\n            color:\n                label: Color\n                type: colorpicker\n                tab: Design\n        secondaryTabs:\n            is_active:\n                label: Active\n                type: checkbox\n            logo:\n                label: Logo\n                type: mediafinder\n                mode: image\n```\n\n----------------------------------------\n\nTITLE: Âü∫Êú¨‰ΩøÁî®Âç†‰ΩçÁ¨¶Ê†áÁ≠æ\nDESCRIPTION: Â±ïÁ§∫‰∫ÜÂç†‰ΩçÁ¨¶Ê†áÁ≠æÁöÑÂü∫Êú¨ËØ≠Ê≥ïÂíåÂ¶Ç‰ΩïÂú®È°µÈù¢ÊàñÈÉ®‰ª∂‰∏≠ÂêëÂç†‰ΩçÁ¨¶Ê≥®ÂÖ•ÂÜÖÂÆπ„ÄÇ\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-placeholder.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder name %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% put name %}\n    <p>Place this text in the name placeholder</p>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Installing Themes in October CMS\nDESCRIPTION: Commands for installing themes with various options including remote sources\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/installing-packages.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/themename-theme.git\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/themename-theme.git --want=dev-develop\n```\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/oc-themename-theme.git --oc\n```\n\n----------------------------------------\n\nTITLE: Direct SQL Selection for Columns\nDESCRIPTION: Shows how to create a column using a custom SQL SELECT statement for more complex column values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Merging Collections with zip() Method - PHP\nDESCRIPTION: Demonstrates merging collection values with another array using zip().\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_82\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['Chair', 'Desk']);\n\n$zipped = $collection->zip([100, 200]);\n\n$zipped->all();\n```\n\n----------------------------------------\n\nTITLE: Utilizing the Robot Class in PHP\nDESCRIPTION: This snippet shows how to use the Robot class that implements the WaveBehaviour. It demonstrates the output of calling the identify method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$robot = new Robot();\n$robot->identify();\n```\n\n----------------------------------------\n\nTITLE: Basic Flash Message Display in Twig\nDESCRIPTION: Demonstrates how to render flash messages in an unordered list using the {% flash %} tag. Each message is rendered as a list item.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-flash.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% flash %}\n        <li>{{ message }}</li>\n    {% endflash %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Registering Simple Twig Filter\nDESCRIPTION: Example of registering a basic Twig filter that maps to a PHP function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/twig-tags.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'filters' => [\n    'plural' => 'str_plural'\n]\n```\n\n----------------------------------------\n\nTITLE: Outputting File Content Directly in PHP\nDESCRIPTION: Demonstrates how to output file content directly, including necessary headers for download.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\necho $model->avatar->output();\n```\n\n----------------------------------------\n\nTITLE: Grouping Collection Items by Key in PHP\nDESCRIPTION: The groupBy method groups collection items by a specified key. It returns a new collection with items grouped by the key's value, maintaining the original structure within the groups.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([\n    ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n    ['account_id' => 'account-x10', 'product' => 'Chair'],\n    ['account_id' => 'account-x11', 'product' => 'Desk'],\n]);\n\n$grouped = $collection->groupBy('account_id');\n\n$grouped->toArray();\n\n/*\n    [\n        'account-x10' => [\n            ['account_id' => 'account-x10', 'product' => 'Bookcase'],\n            ['account_id' => 'account-x10', 'product' => 'Chair'],\n        ],\n        'account-x11' => [\n            ['account_id' => 'account-x11', 'product' => 'Desk'],\n        ],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Collection Empty Check Methods in PHP\nDESCRIPTION: Methods to check if collection is empty (isEmpty) or not empty (isNotEmpty).\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([])->isEmpty();\n// true\n\nnew Collection([])->isNotEmpty();\n// false\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Views (PHP)\nDESCRIPTION: Example of how to make a backend view extensible by using the fireViewEvent method in a view file, allowing other plugins to inject HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"footer-area-extension\">\n    <?= $this->fireViewEvent('backend.auth.extendSigninView', [$firstParam]) ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Deleting Failed Job with Artisan in Bash\nDESCRIPTION: Artisan command to delete a specific failed job using its ID. This helps in cleaning up the failed jobs queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:forget 5\n```\n\n----------------------------------------\n\nTITLE: Referencing Mixins by UUID in YAML\nDESCRIPTION: Demonstrates how to reference a mixin blueprint using its UUID. This allows reusing field definitions across multiple blueprints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_blog_content:\n    source: edcd102e-0525-4e4d-b07e-633ae6c18db6\n    type: mixin\n```\n\n----------------------------------------\n\nTITLE: Number Field with Step Increment in YAML for October CMS\nDESCRIPTION: A number field configuration that includes a step increment property. This example sets the step to 10, controlling how much the value increases or decreases when using the number input controls.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-number.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    step: 10\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Extensions on Ubuntu\nDESCRIPTION: Commands for installing required PHP extensions on Ubuntu systems for October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/installation.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update &&\nsudo apt-get install php php-ctype php-curl php-xml php-fileinfo php-gd php-json php-mbstring php-mysql php-sqlite3 php-zip\n```\n\n----------------------------------------\n\nTITLE: Customizing Toolbar Buttons in Controller Display Mode\nDESCRIPTION: Configuration for customizing the toolbar buttons in the controller display mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    toolbarButtons: create|add|remove|delete\n```\n\n----------------------------------------\n\nTITLE: Pivot Model Configuration for Duplicate Relations\nDESCRIPTION: Shows how to configure a pivot model to allow duplicate relations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nclass UserRolePivot extends \\October\\Rain\\Database\\Pivot\n{\n    public $incrementing = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial in Twig Template\nDESCRIPTION: This snippet demonstrates how to render a partial named 'mytime' inside a div element using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/update-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div id=\"myDiv\">{% partial 'mytime' %}</div>\n```\n\n----------------------------------------\n\nTITLE: Simple HTML Mail Template in Twig\nDESCRIPTION: Demonstrates a basic HTML-only mail template with configuration section but no plain text version.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\nsubject = \"Your product has been added to October CMS project\"\n==\n\n<p>Hi {{ name }},</p>\n\n<p>This email does not support plain text.</p>\n\n<p>Sorry about that!</p>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Form Widget in PHP\nDESCRIPTION: Example of rendering a form widget by preparing variables and calling a partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\npublic function render()\n{\n    $this->vars['id'] = $this->getId();\n    $this->vars['name'] = $this->getFieldName();\n    $this->vars['value'] = $this->getLoadValue();\n\n    return $this->makePartial('myformwidget');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unencrypted Cookies in October CMS\nDESCRIPTION: Example of how to specify cookies that should not be encrypted or decrypted in the cookie configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Cookies without encryption\n|--------------------------------------------------------------------------\n|\n| OctoberCMS encrypts/decrypts cookies by default. You can specify cookies\n| that should not be encrypted or decrypted here. This is useful, for\n| example, when you want to pass data from frontend to server side backend\n| via cookies, and vice versa.\n|\n*/\n\n'unencryptedCookies' => [\n    'my_cookie',\n],\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Title in Twig\nDESCRIPTION: Illustrates how to output the page title defined in the configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ this.page.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Setting October CMS License Key with Artisan Command\nDESCRIPTION: This command sets up the project license key to create the auth.json file needed for Composer authentication with the October CMS Gateway. Run this before composer install if you need to recreate the authentication file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: BelongsToMany with Pivot Fields Configuration (YAML)\nDESCRIPTION: Advanced YAML configuration showing how to access pivot data in both list columns and form fields for a 'teams' BelongsToMany relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nteams:\n    label: Team\n    view:\n        list:\n            columns:\n                name:\n                    label: Name\n                pivot[team_color]:\n                    label: Team color\n    manage:\n        list:\n            columns:\n                name:\n                    label: Name\n    pivot:\n        form:\n            fields:\n                pivot[team_color]:\n                    label: Team color\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Field in YAML for October CMS\nDESCRIPTION: This snippet demonstrates how to implement a password field in an October CMS form using YAML. It shows the basic structure with a label and type definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-password.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser_password:\n    label: Password\n    type: password\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Navigation Properties in YAML\nDESCRIPTION: Defines the basic navigation with an icon and display order for a blueprint in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    icon: icon-pencil\n    order: 200\n```\n\n----------------------------------------\n\nTITLE: Default HTML5 Video Player\nDESCRIPTION: Shows the default HTML5 video tag implementation for video files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"video.mp4\" controls></video>\n```\n\n----------------------------------------\n\nTITLE: Creating New Collections with Every Nth Element in PHP\nDESCRIPTION: The every method creates a new collection consisting of every n-th element. An optional offset can be specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['a', 'b', 'c', 'd', 'e', 'f']);\n\n$collection->every(4);\n\n// ['a', 'e']\n\n$collection->every(4, 1);\n\n// ['b', 'f']\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from a Subdirectory in Twig\nDESCRIPTION: Shows how to render a partial located in a subdirectory, specifically the 'menu' partial in the 'sidebar' subdirectory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"sidebar/menu\" %}\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Content Block\nDESCRIPTION: Shows the syntax for accessing variables within content blocks\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<p>Country: {country}, city: {city}.</p>\n```\n\n----------------------------------------\n\nTITLE: Checking Content Existence in OctoberCMS\nDESCRIPTION: Demonstrates the use of the hasContent() function to check if a content file exists before rendering it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-content.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasContent('welcome.htm') %}\n    {% content 'welcome.htm' %}\n{% else %}\n    <p>Êú™ÊâæÂà∞Ê¨¢ËøéÂÜÖÂÆπÔºÅ</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Relationships in October CMS\nDESCRIPTION: This snippet demonstrates how to eager load multiple relationships in a single query. It loads both authors and publishers for all books at once.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_41\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author', 'publisher')->get();\n```\n\n----------------------------------------\n\nTITLE: Migrating Tailor Blueprints\nDESCRIPTION: Command to update database tables after making changes to blueprint files. This is required to apply structural changes to the content management system.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:migrate\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Previous URL in PHP\nDESCRIPTION: Demonstrates redirecting the user back to their previous location, optionally with input data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nreturn Redirect::back();\n\nreturn Redirect::back()->withInput();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependent Scopes in YAML\nDESCRIPTION: Shows how to set up dependencies between filter scopes. In this example, the 'state' scope depends on the 'country' scope, allowing for dynamic filtering of options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter-scopes.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: group\n\nstate:\n    label: State\n    type: group\n    dependsOn: country\n    optionsMethod: getCityOptionsForFilter\n```\n\n----------------------------------------\n\nTITLE: Customizing Switch Column Labels in October CMS\nDESCRIPTION: Example showing how to customize the text labels for a switch column's states. The 'options' array defines custom labels for false ('Nope') and true ('Yeah') states.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-switch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenabled:\n    label: Enabled\n    type: switch\n    options:\n        - Nope\n        - Yeah\n```\n\n----------------------------------------\n\nTITLE: Generating Media URLs in PHP\nDESCRIPTION: Shows how to generate media asset URLs using the MediaLibrary class in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Media\\Classes\\MediaLibrary::url('relative/path/to/asset.jpg');\n```\n\n----------------------------------------\n\nTITLE: Setting Meta Description for SEO in Twig\nDESCRIPTION: Illustrates how to set a more descriptive meta description for SEO purposes using the meta_description property of the this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.page.meta_description }}\">\n```\n\n----------------------------------------\n\nTITLE: Creating Root Nodes in October CMS Nested Tree Models\nDESCRIPTION: Demonstrates how to create root nodes in a nested tree structure and convert existing nodes to root nodes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$root = Category::create(['name' => 'Root category']);\n\n// Converting existing node to root\n$node->makeRoot();\n\n// Alternative method\n$node->parent_id = null;\n$node->save();\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env File\nDESCRIPTION: Example of setting an environment variable in the .env file to override a configuration value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/file-settings.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nACME_TODO_MAX_ITEMS=10\n```\n\n----------------------------------------\n\nTITLE: Using the {% scripts %} Tag in Twig Templates\nDESCRIPTION: The standard implementation of the {% scripts %} tag in an HTML document. This tag should be placed before the closing BODY tag and should appear only once in a page cycle to prevent duplicated references.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    ...\n    {% scripts %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar in JavaScript\nDESCRIPTION: Demonstrates how to disable the progress bar programmatically using JavaScript.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\noc.ajax('onSilentRequest', { progressBar: false });\n```\n\n----------------------------------------\n\nTITLE: Using Persistent URL Parameters in Twig\nDESCRIPTION: Demonstrates how to use persistent URL parameters with the |page filter, and how to disable this functionality or override the values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-page.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post-edit'|page }}\">\n    Edit this post\n</a>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page(false) }}\">\n    Unknown blog post\n</a>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page({ post_id: 6 }) }}\">\n    Blog post #6\n</a>\n```\n\n----------------------------------------\n\nTITLE: Binding Existing Instance to Container\nDESCRIPTION: Shows how to bind an existing object instance into the container using the instance() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = new Foo;\n\nApp::instance('foo', $foo);\n```\n\n----------------------------------------\n\nTITLE: Priority Layout Example\nDESCRIPTION: Demonstrates a priority layout configuration with conditional page rendering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"API Layout\"\nis_priority = 1\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if false %}\n    {% page %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Switch Field with Comment in YAML\nDESCRIPTION: Implementation of a switch field with an additional comment property to display explanatory text below the switch.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-switch.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display Content\n    type: switch\n    comment: Flick this switch to display content\n```\n\n----------------------------------------\n\nTITLE: Observing Controls on Elements Programmatically\nDESCRIPTION: Demonstrates how to attach a control to an element without using data-control attributes using oc.observeControl.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchControl = oc.observeControl(element, 'search');\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships via Dynamic Properties in PHP\nDESCRIPTION: Examples of setting relationships directly through model properties and using primary keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$post->author = $author;\n\n$post->comments = [$comment1, $comment2];\n\n$post->save();\n\n// Assign to author with ID of 3\n$post->author = 3;\n\n// Assign comments with IDs of 1, 2 and 3\n$post->comments = [1, 2, 3];\n\n$post->save();\n\n$post->author = null;\n\n$post->comments = null;\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Splitting Collection in PHP\nDESCRIPTION: Demonstrates how to use the split() method to break a collection into a given number of groups.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([1, 2, 3, 4, 5]);\n\n$groups = $collection->split(3);\n\n$groups->toArray();\n\n// [[1, 2], [3, 4], [5]]\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Controller Links to Navigation\nDESCRIPTION: Adds links to plugin controllers in the navigation by specifying the URL property pointing to the controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    label: Authors\n    # ...\n\nextraNavigation:\n    testimonials:\n        label: Testimonials\n        order: 210\n        icon: icon-group\n        url: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Creating File Attachment from Local Path in PHP\nDESCRIPTION: Shows how to create a file attachment by passing a local file path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$model->avatar = '/path/to/somefile.jpg';\n```\n\n----------------------------------------\n\nTITLE: Configuration Section in INI Format\nDESCRIPTION: Shows an example of the configuration section in a page template using INI format to set template parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/themes.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n\n[component]\nparameter = \"value\"\n```\n\n----------------------------------------\n\nTITLE: Validating URL Parameters with Regular Expressions in October CMS\nDESCRIPTION: Examples of using regular expressions to validate URL parameters, ensuring they match specific patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/:post_id|^[0-9]+$/comments\" ; this will match /blog/10/comments\n\nurl = \"/blog/:post_id|^[0-9]+$\" ; this will match /blog/3\n\nurl = \"/blog/:post_name?|^[a-z0-9\\-]+$\" ; this will match /blog/my-blog-post\n```\n\n----------------------------------------\n\nTITLE: Creating Redirect Response in PHP\nDESCRIPTION: The redirect function returns an instance of the redirector to create redirect responses.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_36\n\nLANGUAGE: PHP\nCODE:\n```\nreturn redirect('/home');\n```\n\n----------------------------------------\n\nTITLE: Using str_plural() String Helper in PHP\nDESCRIPTION: The str_plural function converts a string to its plural form. This function currently only supports the English language, handling both regular and irregular plural forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$plural = str_plural('car');\n\n// cars\n\n$plural = str_plural('child');\n\n// children\n```\n\n----------------------------------------\n\nTITLE: Using str_words() Function in Twig\nDESCRIPTION: Shows the usage of str_words() function, which limits the number of words in a string. It also demonstrates adding a custom suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_words('The quick brown fox...', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_words('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Control Lifecycle Methods Implementation\nDESCRIPTION: Implementation of connect and disconnect lifecycle methods for handling control appearance and removal from DOM.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    connect() {\n        // Element has appeared in DOM\n    }\n\n    disconnect() {\n        // Element was removed from DOM\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Processing Functions in PHP\nDESCRIPTION: Functions for processing arrays including filtering, sorting, and extracting values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$array = ['name' => 'Desk', 'price' => 100];\n$array = array_except($array, ['price']);\n// ['name' => 'Desk']\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$array = [100, 200, 300];\n$value = array_first($array, function ($key, $value) {\n    return $value >= 150;\n});\n// 200\n```\n\n----------------------------------------\n\nTITLE: Date Scope with Default Value\nDESCRIPTION: Sets a default date value for the Date Scope filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    default: '2020-01-02'\n```\n\n----------------------------------------\n\nTITLE: Synchronizing an October CMS Project\nDESCRIPTION: Command to install all plugins and themes belonging to a project.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:sync\n```\n\n----------------------------------------\n\nTITLE: Associative JSON Output When Using KeyProperty\nDESCRIPTION: Example of the associative JSON array output generated when using the keyProperty option, where the specified property becomes the object key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-objectlist.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"people\": {\n    \"john\": {\"fullName\": \"John Smith\", \"address\": \"Palo Alto\"},\n    \"bart\": {\"fullName\": \"Bart Simpson\", \"address\": \"Springfield\"}\n}\n```\n\n----------------------------------------\n\nTITLE: Default Permission Mask Configuration\nDESCRIPTION: Configuration settings in cms.php to specify default file and folder permissions for newly created objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'defaultMask' => ['file' => '644', 'folder' => '755'],\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Assets in PHP\nDESCRIPTION: Shows how to inject multiple CSS and JavaScript files as arrays for combined loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/css/hello.css', 'assets/css/goodbye.css']);\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js']);\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Form Close Tag\nDESCRIPTION: Shows the HTML output generated by the form_close() helper.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n</form>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Partials\nDESCRIPTION: Demonstrates how to pass variables to partials when rendering them.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"blog-posts\" posts=posts %}\n</div>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" city=\"Vancouver\" country=\"Canada\" %}\n</div>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {{ country }}, city: {{ city }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Validation Messages in October CMS\nDESCRIPTION: Example of a validation.php file that defines custom validation messages for an October CMS plugin. This file allows developers to customize validation error messages in different languages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/localization.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nreturn [\n    'required' => 'We need to know your xxx!',\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Number Range\nDESCRIPTION: Shows how to iterate over a range of numbers using the .. operator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in 0..10 %}\n    - {{ i }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Flash Message During AJAX Request in HTML\nDESCRIPTION: This example shows how to display a flash message while an AJAX request is loading using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onUpdate\" data-request-message=\"Loading...\">\n    Save Changes\n</button>\n```\n\n----------------------------------------\n\nTITLE: Header-Only Abort\nDESCRIPTION: Demonstrates setting an HTTP error code in the header without changing the response content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/abort.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(404, false) %}\n```\n\n----------------------------------------\n\nTITLE: Injecting CSS Row Class in PHP\nDESCRIPTION: This PHP snippet demonstrates how to inject a custom CSS row class by adding a listInjectRowClass method to the controller class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass Lessons extends \\Backend\\Classes\\Controller\n{\n    // ...\n\n    public function listInjectRowClass($lesson, $definition = null)\n    {\n        // Strike through past lessons\n        if ($lesson->lesson_date->lt(Carbon::today())) {\n            return 'strike';\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio List Field in YAML\nDESCRIPTION: Defines a radio button list field in a form using YAML configuration. The 'type' property is set to 'radio' and includes static 'options'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    label: Access Level\n    type: radio\n    options:\n        all: All\n        registered: Registered only\n        guests: Guests only\n```\n\n----------------------------------------\n\nTITLE: Global Partial Updates Meta Tag\nDESCRIPTION: Shows how to configure global partial updates that apply to every AJAX request using meta tags.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/update-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"ajax-request-update\" content=\"{ flash-messages: true }\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Dumping All Variables in Current Context with dump() in Twig\nDESCRIPTION: This snippet demonstrates how to use the dump() function without any arguments to output information about all variables available in the current template context. This is useful for getting an overview of all accessible data in a template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-dump.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump() }}\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Sites in PHP\nDESCRIPTION: Example of listing only enabled sites.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$sites = Site::listEnabled();\n```\n\n----------------------------------------\n\nTITLE: Creating Top Pages Report Widget with Table Layout in HTML\nDESCRIPTION: HTML markup for a tabular report widget that displays top pages with pageviews statistics. The widget includes a table with page URLs, pageview counts, and percentage bars.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/report-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Top pages</h3>\n\n    <div class=\"table-container\">\n        <table class=\"table data\" data-provides=\"rowlink\">\n            <thead>\n                <tr>\n                    <th><span>Page URL</span></th>\n                    <th><span>Pageviews</span></th>\n                    <th><span>% Pageviews</span></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>/</td>\n                    <td>90</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"90%\"></div>\n                            <a href=\"/\">90%</a>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>/docs</td>\n                    <td>10</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"10%\"></div>\n                            <a href=\"/docs\">10%</a>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Context for Backend Settings in October CMS\nDESCRIPTION: Example of setting the navigation context in a controller constructor to mark the current settings link as active in the System page sidebar.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    [...]\n\n    BackendMenu::setContext('October.System', 'system', 'settings');\n    SettingsManager::setContext('You.Plugin', 'settings');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component with Class Name and Alias\nDESCRIPTION: Shows how to initialize a component using its fully qualified class name and assign it an alias.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/components.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[October\\Demo\\Components\\Todo demoTodoAlias]\nmaxItems = 20\n```\n\n----------------------------------------\n\nTITLE: Checking if Error Messages Exist for a Field in PHP\nDESCRIPTION: Shows how to check if any error messages exist for a specific field. Useful for conditionally displaying error containers in views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nif ($messages->has('email')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Collection is Not Empty with isNotEmpty() Method in PHP\nDESCRIPTION: The isNotEmpty() method returns true if the collection is not empty, otherwise false is returned. This is the inverse of the isEmpty() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\ncollect([])->isNotEmpty();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Using camel_case() String Helper in PHP\nDESCRIPTION: The camel_case function converts the given string to camelCase format. It takes a string parameter and returns the transformed string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$camel = camel_case('foo_bar');\n\n// fooBar\n```\n\n----------------------------------------\n\nTITLE: Checkbox Output Format in JSON\nDESCRIPTION: Shows the JSON output format for a checkbox inspector type where 1 represents checked state and 0 represents unchecked state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-checkbox.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"enabled\": 1\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Column in October CMS\nDESCRIPTION: This snippet shows how to set up a basic datetime column in an October CMS list view. It displays the date in a formatted manner.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n```\n\n----------------------------------------\n\nTITLE: Custom Video Player Template\nDESCRIPTION: Example of a custom video player template using Twig variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"{{ src }}\" width=\"320\" height=\"200\" controls preload></video>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static Validation Rules in PHP\nDESCRIPTION: Shows how to create a Validator instance with static rules that never change as a base for complex conditional validation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$v = Validator::make($data, [\n    'email' => 'required|email',\n    'games' => 'required|numeric',\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Dependencies in PHP\nDESCRIPTION: Shows how to define plugin dependencies in the plugin registration file. Dependencies are updated first before the dependent plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/updates.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public $require = ['Acme.User'];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Email Field Configuration in YAML\nDESCRIPTION: Demonstrates the basic setup of an email form field with label and type properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-email.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser_email:\n    label: Email Address\n    type: email\n```\n\n----------------------------------------\n\nTITLE: Installing a Theme in October CMS\nDESCRIPTION: Command to download and install a theme from the Marketplace into the themes directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName\n```\n\n----------------------------------------\n\nTITLE: Using Static Value for Section Component Lookup in October CMS\nDESCRIPTION: Shows how to use a hard-coded value for the identifier lookup in the section component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/ceo\"\n\n[section]\nhandle = \"Blog\\Author\"\nidentifier = \"id\"\nvalue = 7\n```\n\n----------------------------------------\n\nTITLE: URL-Based Command Execution Route\nDESCRIPTION: PHP route definition that creates a URL endpoint to execute an artisan command when command line access is not available.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/scheduler.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/campaign-run', function () {\n    return Artisan::call('campaign:run');\n});\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Pagination Settings in YAML\nDESCRIPTION: Configuration for a recordfinder field with a specific number of records per page set to 10. This controls how many records are displayed at once in the popup finder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    recordsPerPage: 10\n```\n\n----------------------------------------\n\nTITLE: Tag List Display Mode Configuration\nDESCRIPTION: Configuration example showing how to use the taglist display mode for selecting multiple items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    type: entries\n    displayMode: taglist\n```\n\n----------------------------------------\n\nTITLE: Basic Summary Column Definition in YAML for October CMS\nDESCRIPTION: Defines a basic summary column that strips HTML from content and limits the length to approximately 40 characters (default limit), stopping at the closest word boundary.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-summary.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n```\n\n----------------------------------------\n\nTITLE: Basic Form Close Tag Result\nDESCRIPTION: Shows the HTML output of form_close() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n</form>\n```\n\n----------------------------------------\n\nTITLE: Page Template with Layout Reference\nDESCRIPTION: Shows how to reference a layout in a page template using the configuration section and basic content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\nlayout = \"default\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello, world!</p>\n```\n\n----------------------------------------\n\nTITLE: Widget Registration in Plugin.php\nDESCRIPTION: PHP code for registering the custom widget in the October CMS plugin registration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function registerReportWidgets()\n{\n    return [\n        \\October\\Test\\VueComponents\\MyCustomWidget::class => [\n            'label' => 'Custom Widget',\n            'group' => 'Acme Author'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Version in YAML\nDESCRIPTION: Example of a version.yaml file that defines the theme version and changelog.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nv1.0.1: Theme initialization\nv1.0.2: Added more features\nv1.0.3: Some features are removed\n```\n\n----------------------------------------\n\nTITLE: Retrieving Old Input Data\nDESCRIPTION: Shows how to retrieve previously flashed input data in the next request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nInput::old('username');\n```\n\n----------------------------------------\n\nTITLE: Setting Project License Key with Artisan Command in October CMS\nDESCRIPTION: This command uses the October CMS Artisan CLI to set the project license key, which creates the auth.json file needed for Composer authentication with the October CMS Gateway. It should be run before 'composer install' when deploying without the existing auth.json file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/deployment.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Propagating Content for Specific Blueprint\nDESCRIPTION: Command to propagate records for a specific blueprint across sites by specifying its handle. Useful for selectively syncing specific content types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:propagate --blueprint=\"Blog\\Category\"\n```\n\n----------------------------------------\n\nTITLE: Padding Collection with Values in PHP\nDESCRIPTION: The pad method fills the array with a given value until it reaches the specified size. It can pad to the left or right depending on the sign of the size parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_39\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['A', 'B', 'C']);\n\n$filtered = $collection->pad(5, 0);\n\n$filtered->all();\n\n// ['A', 'B', 'C', 0, 0]\n\n$filtered = $collection->pad(-5, 0);\n\n$filtered->all();\n\n// [0, 0, 'A', 'B', 'C']\n```\n\n----------------------------------------\n\nTITLE: Using Utility Commands\nDESCRIPTION: Generic command for performing utility tasks such as cleaning up files or combining files. Arguments determine the specific task.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:util\n```\n\n----------------------------------------\n\nTITLE: RecordFinder Form Field Configuration in YAML\nDESCRIPTION: YAML configuration for the recordfinder form field to associate Tailor with regular models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/models.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Product\n    list: $/acme/test/models/product/columns.yaml\n    maxItems: 1\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Loading for AJAX Partials in Twig\nDESCRIPTION: Demonstrates how to use the lazy attribute with {% ajaxPartial %} to defer rendering of content until page load. It also shows how to specify initial content before loading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/ajax-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' lazy %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' lazy body %}\n    <p>Loading posts...</p>\n{% endpartial %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div\n    data-request=\"onAjax\"\n    data-request-update=\"{ _self: true }\"\n    data-auto-submit>\n    <p>Loading posts...</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating Alternate Language Meta Tags in Twig\nDESCRIPTION: This code demonstrates how to generate alternate language meta tags for different sites using the sitePicker component in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/sitepicker.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% for site in sitePicker.sites %}\n    <link rel=\"alternate\" hreflang=\"{{ site.locale }}\" href=\"{{ site.url }}\" />\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Handler Implementation in Widget\nDESCRIPTION: Example of implementing AJAX handlers in widget partials using getEventHandler method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    data-request=\"<?= $this->getEventHandler('onPaginate') ?>\"\n    title=\"Next page\">Next</a>\n```\n\n----------------------------------------\n\nTITLE: Extending the Manage Widget\nDESCRIPTION: PHP method to customize the relation manage widget for a specific field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendManageWidget($widget, $field, $model)\n{\n    // Make sure the field is the expected one\n    if ($field != 'myField')\n        return;\n\n    // manipulate widget as needed\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Project in October CMS\nDESCRIPTION: The 'project:sync' command installs all plugins and themes belonging to a project.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:sync\n```\n\n----------------------------------------\n\nTITLE: Joining Collection Values with join() Method in PHP\nDESCRIPTION: The join() method joins the collection's values with a string. It can take an optional second parameter to specify a final conjunction for the last element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\ncollect(['a', 'b', 'c'])->join(', '); // 'a, b, c'\ncollect(['a', 'b', 'c'])->join(', ', ', and '); // 'a, b, and c'\ncollect(['a', 'b'])->join(', ', ' and '); // 'a and b'\ncollect(['a'])->join(', ', ' and '); // 'a'\ncollect([])->join(', ', ' and '); // ''\n```\n\n----------------------------------------\n\nTITLE: Installing Mailgun Driver Dependencies with Composer\nDESCRIPTION: Command to install the required Symfony packages for using the Mailgun mail driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/mailgun-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Mirroring Public Files in October CMS\nDESCRIPTION: Command to create a public folder containing only publicly accessible files for improved security. This separates public files from the application code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nphp artisan october:mirror\n```\n\n----------------------------------------\n\nTITLE: Alphabet Range Looping in Twig\nDESCRIPTION: Demonstrates how to iterate through a range of letters in the alphabet using the .. operator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'..'z' %}\n    - {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Content Blocks\nDESCRIPTION: This example shows how to use a globally registered variable within a content block.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/content.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>Welcome to {site_name}</p>\n```\n\n----------------------------------------\n\nTITLE: Deleting Failed Jobs with Artisan\nDESCRIPTION: Artisan command to delete a specific failed job by its ID. The example shows deleting a job with ID 5.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:forget 5\n```\n\n----------------------------------------\n\nTITLE: Using Nested Relationship Existence Checks - PHP\nDESCRIPTION: Shows how to query for models based on the existence of nested relationships using dot notation, useful for multi-level relationship checks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_45\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have at least one comment with votes...\n$posts = Post::has('comments.votes')->get();\n```\n\n----------------------------------------\n\nTITLE: Registering a New Backend Administrator in October CMS\nDESCRIPTION: Demonstrates how to register a new administrator user account using the BackendAuth::register method with required user details like name, login, email and password.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/users.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = BackendAuth::register([\n    'first_name' => 'Some',\n    'last_name' => 'User',\n    'login' => 'someuser',\n    'email' => 'some@website.tld',\n    'password' => 'changeme',\n    'password_confirmation' => 'changeme'\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget for File Selection in YAML\nDESCRIPTION: This snippet demonstrates how to configure a basic Media Finder widget for selecting a PDF file. It uses the 'mediafinder' type and sets a label for the field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-mediafinder.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwhitepaper_file:\n    label: Whitepaper PDF\n    type: mediafinder\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color List Method in PHP\nDESCRIPTION: Implements a method in the model class to provide a dynamic list of available colors for the color picker. This method returns an array of hex color values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-colorpicker.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function myColorList($fieldName, $value, $formData)\n{\n    return ['#000000', '#111111', '#222222']\n}\n```\n\n----------------------------------------\n\nTITLE: Using the merge() Method in PHP Collections\nDESCRIPTION: The merge method combines arrays or collections with the original collection. For string keys, values in the merged collection overwrite the original values, while numeric keys are appended to the end.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->merge(['price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => 1, 'price' => 200, 'discount' => false]\n```\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Desk', 'Chair']);\n\n$merged = $collection->merge(['Bookcase', 'Door']);\n\n$merged->all();\n\n// ['Desk', 'Chair', 'Bookcase', 'Door']\n```\n\n----------------------------------------\n\nTITLE: Rendering Variable Field in OctoberCMS\nDESCRIPTION: Demonstrates how to use the variable field type in OctoberCMS forms. This field type sets a variable but renders as an empty string in view mode.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{variable type=\"text\" name=\"name\" label=\"Name\"}John{/variable}\n```\n\n----------------------------------------\n\nTITLE: Globally Updating Flash Messages in HTML\nDESCRIPTION: Shows how to update flash messages globally for all AJAX requests by including a meta tag in the head section of the page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <meta name=\"ajax-request-update\" content=\"{ flash-messages: true }\" />\n</head>\n<body>\n    <!-- Updates with every AJAX request -->\n    {% ajaxPartial 'flash-messages' %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Formatting a Single Error Message in PHP\nDESCRIPTION: Demonstrates how to format a single error message with HTML. The :message placeholder will be replaced with the actual error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\necho $messages->first('email', '<p>:message</p>');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Filter Scope Behavior in YAML\nDESCRIPTION: This YAML configuration demonstrates how to define custom filter scopes that interact with each other, such as disabling roles based on a checkbox.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filters.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndisable_roles:\n    type: checkbox\n    label: Disable Roles\n\nroles:\n    type: text\n    label: Role\n    dependsOn: disable_roles\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Radio List Field in YAML\nDESCRIPTION: A basic configuration for a radio list field with three predefined options for controlling access levels. This example demonstrates setting the field type, label, and static options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-radio.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    options:\n        all: All\n        registered: Registered only\n        guests: Guests only\n```\n\n----------------------------------------\n\nTITLE: Displaying Radio Options Inline in YAML\nDESCRIPTION: Configuration for displaying radio options side-by-side instead of vertically stacked. Setting inlineOptions to true changes the visual presentation of the radio buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-radio.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    type: radio\n    label: Access Level\n    inlineOptions: true\n```\n\n----------------------------------------\n\nTITLE: Converting String to StudlyCase in PHP\nDESCRIPTION: The studly_case function converts the given string to StudlyCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_26\n\nLANGUAGE: PHP\nCODE:\n```\n$value = studly_case('foo_bar');\n\n// FooBar\n```\n\n----------------------------------------\n\nTITLE: Getting Request URL\nDESCRIPTION: Demonstrates how to retrieve the full URL of the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$url = Request::url();\n```\n\n----------------------------------------\n\nTITLE: Checking View Existence in PHP\nDESCRIPTION: Demonstrates how to check if a view exists using the View::exists method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nif (View::exists('acme.blog::mail.customer')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Page Title in Twig\nDESCRIPTION: Demonstrates how to output the page title as defined in the page configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ this.page.title }}</h1>\n```\n\n----------------------------------------\n\nTITLE: Version Entry with Migration Scripts in YAML\nDESCRIPTION: Example of a version entry that includes both a comment and references to migration/seed files to be executed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/updates.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nv1.1.1:\n    - This update will execute the two scripts below.\n    - some_upgrade_file.php\n    - some_seeding_file.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Section Display Type in October CMS Navigation\nDESCRIPTION: Example of creating a section-type navigation item with a custom label.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'_section1' => [\n    'itemType' => 'section',\n    'label' => 'Advanced',\n],\n```\n\n----------------------------------------\n\nTITLE: Importing Database Theme to Filesystem in October CMS\nDESCRIPTION: Command to copy the database version of a theme to the filesystem using the theme:copy artisan command with the --import-db option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/database-themes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo --import-db\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Dependencies in October CMS\nDESCRIPTION: Shows how to define plugin dependencies in the plugin registration file, which affects the order of updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/updates.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog;\n\nclass Plugin extends \\System\\Classes\\PluginBase\n{\n    public $require = ['Acme.User'];\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing System Exception in October CMS\nDESCRIPTION: Shows how to throw a SystemException, used for critical system failures. These exceptions are always logged and display detailed error messages including file and line numbers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nthrow new SystemException('Unable to contact the mail server API');\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in Twig Templates\nDESCRIPTION: Demonstrates how to set a variable within a Twig template using the 'set' tag, allowing for variable creation and manipulation within the template itself.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% set activePage = 'blog' %}\n```\n\n----------------------------------------\n\nTITLE: Refreshing an October CMS Plugin\nDESCRIPTION: Command to destroy and recreate a plugin's database tables, useful for development.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Related Column Selection in YAML\nDESCRIPTION: Shows how to display related columns as part of the database query for searching and sorting in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ngroup_name:\n    label: Group\n    relation: groups\n    select: name\n```\n\n----------------------------------------\n\nTITLE: Targeting Specific AJAX Handlers with HTML and CSS\nDESCRIPTION: Shows how to show a loading indicator for a specific AJAX handler using HTML structure and CSS selectors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<form>\n    <button data-request=\"onPay\">Pay Now</button>\n    <button data-request=\"onCancel\">Cancel</button>\n\n    <div class=\"is-payment-loading\">\n        Processing Payment...\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Requiring a Specific October CMS Version in composer.json\nDESCRIPTION: JSON configuration snippet showing how to require a specific version of October CMS by including the october/rain package with version constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"october/rain\": \">=3.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Close Tag in Twig\nDESCRIPTION: Demonstrates the basic usage of form_close() function in Twig template syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_close() }}\n```\n\n----------------------------------------\n\nTITLE: Using secure_asset() URL Helper in PHP\nDESCRIPTION: The secure_asset function generates a URL for an asset using HTTPS. This ensures assets are always served over a secure connection, regardless of the current request protocol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\necho secure_asset('foo/bar.zip', $title, $attributes = []);\n```\n\n----------------------------------------\n\nTITLE: AJAX Delete Request with Confirmation\nDESCRIPTION: Shows how to make an AJAX request with confirmation dialog and redirect after successful deletion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onDelete', {\n    confirm: 'Are you sure?',\n    redirect: '/dashboard'\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Filter Widgets (PHP)\nDESCRIPTION: Shows how to register custom filter widgets in the plugin registration file by overriding the registerFilterWidgets method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerFilterWidgets()\n{\n    return [\n        \\Backend\\FilterWidgets\\Discount::class => 'discount',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML from Extended View (HTML)\nDESCRIPTION: The HTML output that results from the view extension, showing the injected content from the event listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"footer-area-extension\">\n    <a href=\"#\">Sign in with Google!</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkbox List Field in YAML\nDESCRIPTION: Defines a checkbox list field in a form using YAML configuration. The 'type' property is set to 'checkboxlist' and includes static 'options'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    label: Permissions\n    type: checkboxlist\n    options:\n        open_account: Open account\n        close_account: Close account\n        modify_account: Modify account\n```\n\n----------------------------------------\n\nTITLE: Refreshing Plugin Database Tables\nDESCRIPTION: Development command that destroys and recreates a plugin's database tables, useful for testing and development.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Complex Raw Filter Usage in Twig Expressions\nDESCRIPTION: Shows how the |raw filter behaves in different expression contexts. The example demonstrates several cases to highlight that the |raw filter only applies to the immediate variable or the entire expression when properly parenthesized.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-raw.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set hello = '<strong>Hello</strong>' %}\n{% set hola = '<strong>Hola</strong>' %}\n\n{{ false ? '<strong>Hola</strong>' : hello |raw }}\n\n{# The above will not render the same as #}\n{{ false ? hola : hello |raw }}\n\n{# But renders the same as #}\n{{ (false ? hola : hello) |raw }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Form Widget Class in PHP\nDESCRIPTION: This snippet shows how to define a form widget class that extends the FormWidgetBase class, including the class definition and a render method stub.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace Backend\\Widgets;\n\nuse Backend\\Classes\\FormWidgetBase;\n\nclass ColorPicker extends FormWidgetBase\n{\n    /**\n     * @var string A unique alias to identify this widget.\n     */\n    protected $defaultAlias = 'colorpicker';\n\n    public function render() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Storage for S3 in OctoberCMS\nDESCRIPTION: This PHP snippet demonstrates how to update the storage configuration in OctoberCMS to use Amazon S3 for media storage. It specifies the disk type, folder name, and public path for accessing media files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'storage' => [\n    // ...\n    'media' => [\n        'disk'   => 's3',\n        'folder' => 'media',\n        'path' => 'https://s3-us-west-2.amazonaws.com/your-bucket-name/media'\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Grouped Repeater Inline Configuration\nDESCRIPTION: Detailed example of inline group definitions with textarea and quote field groups.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngroups:\n    textarea:\n        name: Textarea\n        description: Basic text field\n        icon: icon-file-text-o\n        fields:\n            text_area:\n                label: Text Content\n                type: textarea\n                size: large\n\n    quote:\n        name: Quote\n        description: Quote item\n        icon: icon-quote-right\n        fields:\n            quote_position:\n                span: auto\n                label: Quote Position\n                type: radio\n                options:\n                    left: Left\n                    center: Center\n                    right: Right\n            quote_content:\n                span: auto\n                label: Details\n                type: textarea\n```\n\n----------------------------------------\n\nTITLE: Using get() Request Helper in PHP\nDESCRIPTION: The get function obtains an input item from the request, restricted to GET variables only. It accepts a key name and an optional default value to return if the key is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_49\n\nLANGUAGE: php\nCODE:\n```\n$value = get('key', $default = null)\n```\n\n----------------------------------------\n\nTITLE: Checking Multisite Feature Availability in PHP\nDESCRIPTION: Demonstrates how to use the hasFeature method to check if a specific multisite feature is enabled.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$useMultisite = Site::hasFeature('cms_maintenance_setting');\n```\n\n----------------------------------------\n\nTITLE: Defining List Columns (YAML)\nDESCRIPTION: Example of a list column definition file that defines the name and email columns for display in the list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# columns.yaml\ncolumns:\n    name: Name\n    email: Email\n```\n\n----------------------------------------\n\nTITLE: URL Query Preservation in Pagination\nDESCRIPTION: Shows how to preserve existing query parameters in pagination links using withQuery option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/pager.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ pager(records, { withQuery: true }) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Widget Fields in October CMS\nDESCRIPTION: Shows how to configure a custom form widget by referencing a widget class directly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nblog_content:\n    type: Backend\\FormWidgets\\RichEditor\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Getting File Size\nDESCRIPTION: Shows how to retrieve the size of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$size = Input::file('photo')->getSize();\n```\n\n----------------------------------------\n\nTITLE: Removing First Item from Collection in PHP\nDESCRIPTION: Illustrates the usage of the shift() method to remove and return the first item from a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_55\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->shift();\n\n// 1\n\n$collection->all();\n\n// [2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Handling Dependent Dropdown Options in PHP\nDESCRIPTION: Demonstrates how to load property values from POST data to generate dependent dropdown options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dropdown.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getStateOptions()\n{\n    // Load the country property value from POST\n    $countryCode = post('country');\n\n    $states = [\n        'ca' => ['ab' => 'Alberta', 'bc' => 'British columbia'],\n        'us' => ['al' => 'Alabama', 'ak' => 'Alaska']\n    ];\n\n    return $states[$countryCode];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the onInit Function for Page or Layout\nDESCRIPTION: Demonstrates how to define an onInit function as part of the Layout Execution Life Cycle to run code before any AJAX handler executes on a page or layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction onInit()\n{\n    // From a page or layout PHP code section\n}\n```\n\n----------------------------------------\n\nTITLE: Date Scope with Limited Conditions\nDESCRIPTION: Configures the Date Scope to only allow the 'equals' condition for precise date matching.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    conditions:\n        equals: true\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Set Inspector Type in October CMS\nDESCRIPTION: Example JSON output from a 'set' inspector type showing the array format of selected values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-set.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"units\": [\"metric\", \"imperial\"]\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Database Migrations in October CMS\nDESCRIPTION: The --rollback option reverses all migrations, dropping database tables and deleting data. This should be used with caution as it can result in data loss.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/updating-october.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate --rollback\n```\n\n----------------------------------------\n\nTITLE: Database Configuration for Development Environment\nDESCRIPTION: Custom database configuration file for development environment overriding default settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'connections' => [\n        'mysql' => [\n            'host'     => 'localhost',\n            'port'     => '',\n            'database' => 'database',\n            'username' => 'root',\n            'password' => ''\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Set Inspector with Default Values\nDESCRIPTION: Demonstrates how to configure Set inspector properties with default selected values using the default parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-set.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'context' => [\n            'title' => 'Context',\n            'type' => 'set',\n            'items' => [\n                'create' => 'Create',\n                'update' => 'Update',\n                'preview' => 'Preview'\n            ],\n            'default' => ['create', 'update']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar in JavaScript\nDESCRIPTION: Demonstrates how to disable the progress bar for an AJAX request using JavaScript by setting the progressBar option to false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\noc.ajax('onSilentRequest', { progressBar: false });\n```\n\n----------------------------------------\n\nTITLE: Installing Postmark Dependencies\nDESCRIPTION: Command to install Symfony Postmark Mailer transport and HTTP client via Composer\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/postmark-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Template for AJAX Response\nDESCRIPTION: A Twig partial that displays the result variable passed from the AJAX handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\nThe result is {{ result }}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Twig Macro Structure\nDESCRIPTION: Shows the basic structure for defining a macro in Twig templates. The macro is defined using {% macro %} opening tag and {% endmacro %} closing tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/macro.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Basic Number Field Configuration in YAML\nDESCRIPTION: Basic implementation of a number field in OctoberCMS forms using YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-number.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n```\n\n----------------------------------------\n\nTITLE: Displaying Loading Flash Message in HTML\nDESCRIPTION: Demonstrates how to display a loading flash message while an AJAX request is processing using the data-request-message attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onSubmit\"\n    data-request-message=\"Please wait while we process your request...\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: Hint UI Element in YAML\nDESCRIPTION: Shows various ways to configure hint elements with different modes and content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n_hint1:\n    type: hint\n    path: content_field\n```\n\nLANGUAGE: yaml\nCODE:\n```\n_tip1:\n    type: hint\n    mode: tip\n    label: Pro Tip\n    comment: Always check to make sure this field is populated.\n```\n\nLANGUAGE: yaml\nCODE:\n```\n_warning1:\n    type: hint\n    mode: warning\n    label: Always wash your hands\n    comment: This is good for stopping the spread of germs.\n```\n\n----------------------------------------\n\nTITLE: Adding Loading Indicator to Anchor Elements\nDESCRIPTION: Shows how to add a loading indicator to anchor elements during AJAX requests using the data-attach-loading attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\"\n    data-request=\"onDoSomething\"\n    data-attach-loading>\n    Do Something\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Field in YAML\nDESCRIPTION: Defines a multi-line text input field in a form using YAML configuration. The 'type' property is set to 'textarea' and includes a 'size' option to control the field's dimensions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nblog_contents:\n    label: Contents\n    type: textarea\n    size: large\n```\n\n----------------------------------------\n\nTITLE: Using flip Method in PHP Collections\nDESCRIPTION: The flip method swaps the collection's keys with their corresponding values, creating a new collection with reversed key-value pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['name' => 'peter', 'platform' => 'october']);\n\n$flipped = $collection->flip();\n\n$flipped->all();\n\n// ['peter' => 'name', 'october' => 'platform']\n```\n\n----------------------------------------\n\nTITLE: Component Registration in Plugin Class\nDESCRIPTION: Demonstrates how to register a component in the plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function registerComponents()\n{\n    return [\n        'October\\Demo\\Components\\Todo' => 'demoTodo'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Section Field in YAML\nDESCRIPTION: Defines a section heading in a form using YAML configuration. The 'type' property is set to 'section' and includes a 'label' and 'comment' for the heading and subheading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nuser_details_section:\n    label: User details\n    type: section\n    comment: This section contains details about the user.\n```\n\n----------------------------------------\n\nTITLE: Using Route Prefixes with Parameters\nDESCRIPTION: Shows how to use the 'prefix' parameter with dynamic parameters that are then passed to all route handlers within the group.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/router.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nRoute::group(['prefix' => 'accounts/{account_id}'], function () {\n    Route::get('detail', function ($account_id) {\n        // Matches The accounts/{account_id}/detail URL\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Partial in October CMS\nDESCRIPTION: Demonstrates the simplest possible partial in October CMS, containing only HTML markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>This is a partial</p>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Modal Container with Loading State\nDESCRIPTION: Defines the main modal container structure with content and loading state containers, using Bootstrap classes for styling and positioning.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/modals.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal\" id=\"siteModal\">\n    <div class=\"modal-dialog modal-dialog-centered\" id=\"siteModalContent\">\n        <!-- Partial Contents Will Go Here -->\n    </div>\n\n    <div class=\"modal-dialog modal-dialog-centered modal-loading\">\n        <div class=\"spinner-border text-light mx-auto\"></div>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Class Instances with mapInto() Method in PHP Collections\nDESCRIPTION: The mapInto() method iterates over the collection, creating a new instance of the given class for each value by passing the value into the constructor of the class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nclass Currency\n{\n    /**\n     * Create a new currency instance.\n     *\n     * @param  string  $code\n     * @return void\n     */\n    function __construct(string $code)\n    {\n        $this->code = $code;\n    }\n}\n\n$collection = collect(['USD', 'EUR', 'GBP']);\n\n$currencies = $collection->mapInto(Currency::class);\n\n$currencies->all();\n\n// [Currency('USD'), Currency('EUR'), Currency('GBP')]\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Field in YAML\nDESCRIPTION: Defines a number input field in a form using YAML configuration. The 'type' property is set to 'number' to restrict input to numeric values only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n```\n\n----------------------------------------\n\nTITLE: Detecting JSON Response Preference\nDESCRIPTION: Shows how to check if the request wants a JSON response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nif (Request::wantsJson()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Used Extensions\nDESCRIPTION: Example showing how to check if an object has been extended with a particular behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$controller->isClassExtendedWith('Backend.Behaviors.RelationController');\n```\n\n----------------------------------------\n\nTITLE: PHP Code Section with Optional Tags in October CMS\nDESCRIPTION: Shows the PHP code section of an October CMS template with optional PHP tags for better syntax highlighting in text editors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n==\n<?\nfunction onStart()\n{\n    $this['posts'] = ...;\n}\n?>\n==\n<h3>Blog archive</h3>\n{% for post in posts %}\n    <h4>{{ post.title }}</h4>\n    {{ post.content }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Updating HTTP Kernel\nDESCRIPTION: Code changes required in app/Http/Kernel.php to update HTTP Kernel inheritance\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n// File app/Http/Kernel.php\n\n// Replace\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\n// With\nuse October\\Rain\\Foundation\\Http\\Kernel as HttpKernel;\n```\n\n----------------------------------------\n\nTITLE: Model Scope Configuration in YAML\nDESCRIPTION: Configuration for using a custom model scope with group filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n    modelScope: groupFilter\n```\n\n----------------------------------------\n\nTITLE: Setting SEO-friendly Meta Title in OctoberCMS Twig\nDESCRIPTION: Shows how to use the this.page.meta_title property for a more descriptive title tag, typically used for SEO purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-page.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ this.page.meta_title }}</title>\n```\n\n----------------------------------------\n\nTITLE: Implementing Multisite Support in Settings Model\nDESCRIPTION: Extended settings model implementation that includes multisite support using the Multisite trait and propagatable property definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/settings/model-settings.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Demo\\Models;\n\nclass UserSetting extends \\System\\Models\\SettingModel\n{\n    use \\October\\Rain\\Database\\Traits\\Multisite;\n\n    public $settingsCode = 'acme_demo_settings';\n\n    public $settingsFields = 'fields.yaml';\n\n    protected $propagatable = [];\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Export Download in PHP\nDESCRIPTION: Example of manually processing an export and returning a download response using exportDownload method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$exportColumns = ['id', 'title'];\n\n$exportModel = new MyExportClass;\n\n$exportModel->file_format = 'json';\n\nreturn $exportModel->exportDownload('myexportfile.json', ['columns' => $exportColumns]);\n```\n\n----------------------------------------\n\nTITLE: Generating a Session Key for Deferred Binding\nDESCRIPTION: This snippet demonstrates how to generate a session key for deferred binding using PHP's uniqid function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$sessionKey = uniqid('session_key', true);\n```\n\n----------------------------------------\n\nTITLE: Creating a Settings Model in PHP for October CMS\nDESCRIPTION: Example of a settings model class that extends Model and implements the SettingsModel behavior, demonstrating how to create a model for storing settings in the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Demo\\Models;\n\nuse Model;\n\nclass Settings extends Model\n{\n    public $implement = ['System.Behaviors.SettingsModel'];\n\n    // A unique code\n    public $settingsCode = 'acme_demo_settings';\n\n    // Reference to field configuration\n    public $settingsFields = 'fields.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Property Validation with Required and Regex Rules\nDESCRIPTION: Example showing how to implement required and regex validation rules for a property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector-types.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'name' => [\n            'title' => 'Name',\n            'type' => 'string',\n            'validation' => [\n                'required' => [\n                    'message' => 'The Name field is required'\n                ],\n                'regex' => [\n                    'message' => 'The Name field can contain only Latin letters.',\n                    'pattern' => '^[a-zA-Z]+$'\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with Laravel Sail\nDESCRIPTION: Command to run the October CMS installer using Laravel Sail's Artisan command. This configures the system with preconfigured database settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/using-laravel-sail.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/sail artisan october:install\n```\n\n----------------------------------------\n\nTITLE: Detaching Models from Many-to-Many Relationships\nDESCRIPTION: This snippet demonstrates how to detach models from many-to-many relationships, removing records from the pivot table.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n// ÁßªÈô§Áî®Êà∑ÁöÑ‰∏Ä‰∏™ËßíËâ≤...\n$user->roles()->detach($roleId);\n\n// ÁßªÈô§Áî®Êà∑ÁöÑÊâÄÊúâËßíËâ≤...\n$user->roles()->detach();\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Bucket Policy for Specific Folder\nDESCRIPTION: Resource path configuration for limiting public access to a specific media folder within an S3 bucket. Replace BUCKETNAME with your actual bucket name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/providers.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"arn:aws:s3:::BUCKETNAME/media/*\"\n```\n\n----------------------------------------\n\nTITLE: Updating October CMS with Composer\nDESCRIPTION: Command to update an October CMS installation that was installed via Composer, updating core files and plugin dependencies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Modifying Core Field Default Values in October CMS Tailor\nDESCRIPTION: Example of changing the default value for a core field, specifically setting 'is_enabled' to false. This changes the default behavior when creating new records.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    is_enabled:\n        default: false\n```\n\n----------------------------------------\n\nTITLE: Copying Files in October CMS\nDESCRIPTION: Example of copying an existing file to a new location on the disk using the copy method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nStorage::copy('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Using App Filter for Favicon\nDESCRIPTION: Demonstrates how to use the |app filter to generate an absolute URL for a favicon file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/app.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<link rel=\"icon\" href=\"{{ '/favicon.ico'|app }}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Single File Attachment in PHP\nDESCRIPTION: Defines a single file attachment relationship on a model using $attachOne.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic $attachOne = [\n    'avatar' => 'System\\Models\\File'\n];\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Branch of an October CMS Plugin\nDESCRIPTION: Command to install a plugin from a remote source with a specified branch or version using --want option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName --from=git@github.com:authorname/pluginname-plugin.git --want=dev-develop\n```\n\n----------------------------------------\n\nTITLE: Converting Component Variables to JSON Response\nDESCRIPTION: Shows how to transform component variables into a JSON response by selecting specific fields. This pattern is useful when you need to customize which model fields are exposed through the API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/resources/building-apis.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do response({\n    id: post.id,\n    title: post.title,\n    email: post.author.email,\n    created_at: post.created_at,\n    updated_at: post.updated_at\n}) %}\n```\n\n----------------------------------------\n\nTITLE: Checking Hidden Hint Status\nDESCRIPTION: Conditional check to determine if a specific hint has been hidden by the user.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/views-partials.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($this->isBackendHintHidden('my_hint_key')): ?>\n    <!-- Do something when the hint is hidden -->\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Using Namespaces in PHP Section of October CMS Template\nDESCRIPTION: Demonstrates how to use PHP namespaces with the 'use' keyword in the PHP section of an October CMS template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n==\n<?\nuse Acme\\Blog\\Classes\\Post;\n\nfunction onStart()\n{\n    $this['posts'] = Post::get();\n}\n?>\n==\n```\n\n----------------------------------------\n\nTITLE: Finding Minimum Value in Collection in PHP\nDESCRIPTION: The min method returns the minimum value of a given key in the collection. It can be used with associative arrays or simple numeric arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$min = collect([['foo' => 10], ['foo' => 20]])->min('foo');\n\n// 10\n\n$min = collect([1, 2, 3, 4, 5])->min();\n\n// 1\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Templating Documentation\nDESCRIPTION: A React/Vue-style component that redirects users from the markup guide to the templating documentation section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"templating\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Pagination Information with Helper Methods\nDESCRIPTION: List of helper methods available on paginator instances to access pagination information like current page, count, etc.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$results->count()\n$results->currentPage()\n$results->hasMorePages()\n$results->lastPage() // Not available when using simplePaginate\n$results->nextPageUrl()\n$results->perPage()\n$results->previousPageUrl()\n$results->total() // Not available when using simplePaginate\n$results->url($page)\n```\n\n----------------------------------------\n\nTITLE: Using PHP Traits Example\nDESCRIPTION: Example of how to use native PHP traits in a class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    use \\October\\Rain\\UtilityFunctions;\n    use \\October\\Rain\\DeferredBinding;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor for Queue Management in October CMS\nDESCRIPTION: Commands to update Supervisor configuration and start October CMS worker processes. These commands reread the configuration, update Supervisor, and start the October worker processes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nsudo supervisorctl reread\n\nsudo supervisorctl update\n\nsudo supervisorctl start october-worker:*\n```\n\n----------------------------------------\n\nTITLE: String Character Limiting Function\nDESCRIPTION: Functions to limit the number of characters in a string with optional custom suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Filter Usage in Twig\nDESCRIPTION: Demonstrates the basic usage of the |raw filter to output unescaped variables in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/raw.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# This variable won't be escaped #}\n{{ variable|raw }}\n```\n\n----------------------------------------\n\nTITLE: StudlyCase String Conversion\nDESCRIPTION: Function to convert a string to StudlyCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_studly('hello world') }}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of |theme Filter Usage\nDESCRIPTION: Shows the resulting HTML output when using the |theme filter, assuming the website address is https://octobercms.com and the active theme is 'website'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/theme.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"http://october.com/themes/website/assets/js/menu.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Extracting Class Name from Namespace in PHP\nDESCRIPTION: The class_basename function returns the class name of the given class with the class' namespace removed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n$class = class_basename('Foo\\Bar\\Baz');\n\n// Baz\n```\n\n----------------------------------------\n\nTITLE: Accessing View Bag Properties in October CMS Layout\nDESCRIPTION: Shows how to access View Bag properties in an October CMS layout. The example uses the 'activeMenu' property to conditionally apply a CSS class to a navigation item.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Default layout\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n...\n\n<!-- Main navigation -->\n<ul>\n    <li class=\"{{ viewBag.activeMenu == 'about' ? 'active' }}\">About</li>\n    ...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding URL Fragment to Pagination Links in Twig\nDESCRIPTION: Shows how to append a URL fragment (hash) to pagination links using the fragment method in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ users.fragment('foo').render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Source Type Form Configuration in YAML\nDESCRIPTION: YAML configuration for source type form fields with dependencies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nsource_type:\n    label: Source Type\n    type: dropdown\n    options:\n        git: Git\n        http: Http\n        upload: Upload\n\nsource_url:\n    label: Source URL\n    type: text\n    dependsOn: source_type\n\ngit_branch:\n    label: Git Branch\n    type: text\n    dependsOn: source_type\n```\n\n----------------------------------------\n\nTITLE: Basic Color Picker Implementation in YAML\nDESCRIPTION: Basic implementation of a color picker field that allows selecting a hexadecimal color value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-colorpicker.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Setting Active Theme in October CMS\nDESCRIPTION: Environment variable configuration for setting the default fallback theme in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nACTIVE_THEME=my-theme\n```\n\n----------------------------------------\n\nTITLE: URL Redirection for Moved Content with ID-Based URLs\nDESCRIPTION: Advanced example showing how to use ID-based URLs with redirection handling for moved content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/wiki/:fullslug*/:id\"\n\n[section article]\nhandle = \"Wiki\\\\Article\"\nidentifier = \"id\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if article is empty %}\n    {% do abort(404) %}\n{% elseif article.fullslug != this.param.fullslug %}\n    {% do redirect(this|page({ fullslug: article.fullslug }), 301) %}\n{% endif %}\n\n<!-- Contents here -->\n```\n\n----------------------------------------\n\nTITLE: Path Helper Functions in PHP\nDESCRIPTION: Helper functions for handling file system paths with support for path symbols and various directory locations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$path = app_path();\n$path = app_path('Http/Controllers/Controller.php');\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$path = base_path();\n$path = base_path('vendor/bin');\n```\n\n----------------------------------------\n\nTITLE: Adding File Upload Field in October CMS\nDESCRIPTION: Demonstrates how to create a file upload input field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n{fileupload name=\"logo\" label=\"Logo\"}defaultlogo.png{/fileupload}\n```\n\n----------------------------------------\n\nTITLE: Section Component with Static Value Lookup\nDESCRIPTION: Shows how to hardcode the identifier lookup value to always show a specific record.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/ceo\"\n\n[section]\nhandle = \"Blog\\\\Author\"\nidentifier = \"id\"\nvalue = 7\n```\n\n----------------------------------------\n\nTITLE: Form Value Helpers\nDESCRIPTION: Shows how to manually access and set form field values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<input type=\"text\" name=\"name\" value=\"<?= Form::value('name') ?>\" />\n\n<?= Form::value('name', 'John Travolta') ?>\n```\n\n----------------------------------------\n\nTITLE: Language File Validation Messages in PHP\nDESCRIPTION: Demonstrates how to define validation messages in a language file for internationalization purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/validation.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nreturn  [\n    'required' => 'We need to know your e-mail address!',\n    'email.required' => 'We need to know your e-mail address!',\n];\n```\n\n----------------------------------------\n\nTITLE: Installing a Theme from a Remote Source in October CMS\nDESCRIPTION: Command to install a theme from a remote Git repository using the --from option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/themename-theme.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Field for Auto List Creation\nDESCRIPTION: YAML configuration for a checkbox form field that controls automatic list creation during import.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    auto_create_lists:\n        label: Automatically create lists\n        type: checkbox\n        default: true\n```\n\n----------------------------------------\n\nTITLE: Checking for Input Presence in October CMS\nDESCRIPTION: How to determine if a specific input value is present in the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Input::has('name')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Options in Dropdown Fields\nDESCRIPTION: Examples of how to configure empty options in dropdown fields using emptyOption or placeholder properties, as well as search functionality settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    emptyOption: -- no status --\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    placeholder: -- select a status --\n```\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    showSearch: false\n```\n\n----------------------------------------\n\nTITLE: Custom Method Dropdown in YAML\nDESCRIPTION: Configures a dropdown to use a custom method name specified in the options parameter instead of the default naming convention.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options: listStatuses\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in PHP\nDESCRIPTION: Shows various methods for ordering query results, including basic ordering, ordering by date, and random ordering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->orderBy('name', 'desc')\n    ->get();\n\n$user = Db::table('users')\n    ->latest()\n    ->first();\n\n$randomUser = Db::table('users')\n    ->inRandomOrder()\n    ->first();\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Relationships in October CMS\nDESCRIPTION: This snippet shows how to apply sorting to eager loaded relationships. It loads posts in descending order by creation date when eager loading them with users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_44\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->orderBy('created_at', 'desc');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached with TCP/IP\nDESCRIPTION: Configuration array for Memcached cache driver using TCP/IP connection settings with host, port and weight parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/cache.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    [\n        'host' => '127.0.0.1',\n        'port' => 11211,\n        'weight' => 100\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Accessing Named Error Bags in Twig Templates\nDESCRIPTION: Shows how to access a named error bag in Twig templates. This is used when you have multiple forms on a page and need to display errors for a specific form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n{{ errors.login.first('email') }}\n```\n\n----------------------------------------\n\nTITLE: Using imageHeight Filter with Image Resizing in Twig\nDESCRIPTION: Demonstrates how to use the imageHeight filter to dynamically set an image's height attribute after resizing. The filter determines the height in pixels of the provided image source. Note that this doesn't support thumbnail versions of FileModels and requires a persistent cache driver.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-image-height.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set resizedImage = 'banner.jpg'|media|resize(1920, 1080) %}\n<img src=\"{{ resizedImage }}\" height=\"{{ resizedImage|imageHeight }}\" />\n```\n\n----------------------------------------\n\nTITLE: Purging Thumbnails in October CMS\nDESCRIPTION: Command to delete all generated thumbnails in the uploads directory of October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util purge thumbs\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Picker Widget in YAML\nDESCRIPTION: YAML configuration examples for a color picker form widget that allows selection of hexadecimal color values. Shows two methods of providing available colors - direct YAML list and model method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: ['#000000', '#111111', '#222222']\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: myColorList\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color List Configuration in YAML\nDESCRIPTION: Configuration for sourcing available colors from a model method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-colorpicker.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: myColorList\n```\n\n----------------------------------------\n\nTITLE: Custom Form Macro Definition\nDESCRIPTION: Demonstrates how to create and use custom form macros.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nForm::macro('myField', function() {\n    return '<input type=\"awesome\">';\n})\n\n<?= Form::myField() ?>\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from Route in PHP\nDESCRIPTION: Demonstrates returning a string from a route definition, which will display the string as the response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function() {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Response Macro in PHP\nDESCRIPTION: Shows how to define a custom response macro that can be reused in routes and controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nResponse::macro('caps', function($value) {\n    return Response::make(strtoupper($value));\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a Directory in October CMS\nDESCRIPTION: Example of removing a directory and all its files from a disk using the deleteDirectory method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nStorage::deleteDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Handling Context Variables in Twig Macros\nDESCRIPTION: Demonstrates how to handle context variables in macros. Since macros don't have direct access to page variables, the _context variable is used to pass them.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/macro.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% macro myFunction(vars) %}\n    {{ vars.site_name }}\n{% endmacro %}\n\n{% import _self as form %}\n\n<!-- October CMS -->\n{{ form.myFunction(_context) }}\n```\n\n----------------------------------------\n\nTITLE: Cache Removal Operations\nDESCRIPTION: Methods for removing individual items or clearing the entire cache.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nCache::forget('key');\n\nCache::flush();\n```\n\n----------------------------------------\n\nTITLE: Generating Random String in PHP\nDESCRIPTION: The str_random function generates a random string of the specified length.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_23\n\nLANGUAGE: PHP\nCODE:\n```\n$string = str_random(40);\n```\n\n----------------------------------------\n\nTITLE: Domain-Based Environment Configuration\nDESCRIPTION: Configuration file that maps hostnames to specific environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'hosts' => [\n        'global.website.tld' => 'global',\n        'local.website.tld' => 'local',\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Advanced Custom Video Player with Responsive Sources\nDESCRIPTION: An advanced Twig template for a video player that automatically adds alternative video sources based on a naming convention, providing different resolutions for different device sizes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<video controls>\n    <source\n        src=\"{{ src }}\"\n        media=\"only screen and (min-device-width: 568px)\"></source>\n    <source\n        src=\"{{ src|replace({'.mp4': '.iphone.mp4'}) }}\"\n        media=\"only screen and (max-device-width: 568px)\"></source>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Placing Navigation Items in Settings Area\nDESCRIPTION: Configuration for placing navigation items in the Settings area with a specific category.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    parent: settings\n    category: Collections\n```\n\n----------------------------------------\n\nTITLE: Removing Items from Cache in PHP\nDESCRIPTION: Using the forget method to remove specific items from cache by key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nCache::forget('key');\n```\n\n----------------------------------------\n\nTITLE: Overriding Column Record URL\nDESCRIPTION: Demonstrates how to override the click action URL for specific records in a list by implementing the listOverrideRecordUrl method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\npublic function listOverrideRecordUrl($record, $definition = null)\n{\n    if ($record->is_active) {\n        return 'acme/test/services/preview/' . $record->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Placeholder Variables with Twig Function\nDESCRIPTION: Shows how to retrieve a placeholder variable value using the placeholder() Twig function within a layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ placeholder('pageTitle') }}</title>\n```\n\n----------------------------------------\n\nTITLE: Limiting String Length in PHP\nDESCRIPTION: The str_limit function limits the number of characters in a string. It accepts a string as its first argument and the maximum number of resulting characters as its second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_17\n\nLANGUAGE: PHP\nCODE:\n```\n$value = str_limit('The CMS platform that gets back to basics.', 6);\n\n// The CMS...\n```\n\n----------------------------------------\n\nTITLE: Using Custom URL Parameter for Section Component in October CMS\nDESCRIPTION: Demonstrates how to use a custom URL parameter for the identifier lookup in the section component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/section.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/:foobar\"\n\n[section]\nhandle = \"Blog\\Author\"\nidentifier = \"id\"\nvalue = \"{{ :foobar }}\"\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Block in Twig\nDESCRIPTION: Demonstrates how to pass a variable named 'name' with the value 'John' to a content block called 'welcome.htm' using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% content 'welcome.htm' name='John' %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme Directory Structure in October CMS\nDESCRIPTION: Shows the basic directory structure of an October CMS theme named 'website', which includes pages, layouts, partials, content, and assets directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nthemes/\n  website/           <=== Theme Starts Here\n    pages/           <=== Page Files\n      home.htm\n    layouts/         <=== Layout Files\n      default.htm\n    partials/        <=== Partial Files\n      sidebar.htm\n    content/         <=== Content Files\n      intro.htm\n    assets/          <=== Asset Files\n      css/\n        my-styles.css\n      js/\n      images/\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Column in October CMS\nDESCRIPTION: Defines a list column that displays only the time portion in 'g:i A' format (e.g., '2:15 PM'). By default, timezone conversion is not applied to time columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-datetime.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: time\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Cache Path in October CMS\nDESCRIPTION: Environment variable setting for specifying custom configuration cache file path in different environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/configuration.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nAPP_CONFIG_CACHE=storage/framework/config-staging.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Structure Depth in YAML\nDESCRIPTION: This example demonstrates how to limit the maximum depth of a structure entry blueprint to two levels using the 'maxDepth' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\ntype: structure\n\nstructure:\n    maxDepth: 2\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Installing a Specific Branch of a Theme in October CMS\nDESCRIPTION: Command to install a theme from a remote source with a specified branch or version using --want option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/themename-theme.git --want=dev-develop\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in a Partial\nDESCRIPTION: Twig code showing how to access a variable named 'result' in a partial, which was passed from a PHP context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/ajax/update-partials.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Hello world! -->\n{{ result }}\n```\n\n----------------------------------------\n\nTITLE: HTML Button Triggering AJAX Request\nDESCRIPTION: Example of a button that triggers an AJAX request to the onDoSomething handler using the data attributes API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n    type=\"button\"\n    data-request=\"onDoSomething\"\n    class=\"btn btn-default\">\n    Do something\n</button>\n```\n\n----------------------------------------\n\nTITLE: Removing Demo Content\nDESCRIPTION: Command to remove the demo theme and plugin that ship with October CMS, providing a clean starting point.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:fresh\n```\n\n----------------------------------------\n\nTITLE: Form with Custom HTML Attributes\nDESCRIPTION: Shows how to add custom HTML attributes when opening a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'class' => 'pretty-form'])\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization Commands\nDESCRIPTION: Console commands to cache system structure and optimize autoloading for better performance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:optimize\n\ncomposer dump-autoload --optimize\n```\n\n----------------------------------------\n\nTITLE: Limiting Available Conditions in Date Scope\nDESCRIPTION: YAML configuration that restricts the date filter to only use the 'equals' condition. This limits users to finding exact date matches only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    conditions:\n        equals: true\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial using Twig in October CMS\nDESCRIPTION: Demonstrates how to render a partial named 'sidebar-contacts' using the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/partials.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using app_path Helper Function in PHP\nDESCRIPTION: The app_path function returns the fully qualified path to the app directory. It can also generate paths to files relative to the app directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$path = app_path();\n\n$path = app_path('Http/Controllers/Controller.php');\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Errors in Twig\nDESCRIPTION: Illustrates how to handle errors that occur during AJAX handler execution in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if result.error %}\n    An error occurred: {{ result.error.message }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Component Partials in Twig\nDESCRIPTION: Example showing how to reference a shared component partial that can be used by multiple components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n{% partial '@shared' %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pretend Mail Mode in PHP\nDESCRIPTION: Shows how to dynamically disable sending mail using the 'Mail::pretend' method in PHP. In pretend mode, messages are written to the application's log files instead of being sent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nMail::pretend();\n```\n\n----------------------------------------\n\nTITLE: Using html_strip() to Remove HTML Tags\nDESCRIPTION: Shows how to use html_strip() to remove all HTML tags from a string, returning only the text content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n// Outputs: Hello world\n{{ '<strong>Hello world</strong>'|html_strip }}\n```\n\n----------------------------------------\n\nTITLE: Dumping Collection Items with dd() and dump()\nDESCRIPTION: The dd() method dumps the collection's items and ends script execution, while dump() only dumps the items without stopping execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['John Doe', 'Jane Doe']);\n\n$collection->dd();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['John Doe', 'Jane Doe']);\n\n$collection->dump();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Language with Current Locale\nDESCRIPTION: Shows how to set the HTML lang attribute using the current site locale, which may return empty if no locale is specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-site.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<html lang=\"{{ this.site.locale }}\">\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models with create() Method in OctoberCMS\nDESCRIPTION: Example demonstrating how to create a related model in a single step. This creates a new comment and associates it with a post using mass assignment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\\n\\n$comment = $post->comments()->create([\\n    'message' => 'A new comment.',\\n]);\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Orphaned Bindings in PHP\nDESCRIPTION: Demonstrates how to clean up uncommitted bindings older than specified number of days.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\nOctober\\Rain\\Database\\Models\\DeferredBinding::cleanUp(1);\n```\n\n----------------------------------------\n\nTITLE: LESS Asset Injection in PHP\nDESCRIPTION: Example of injecting and compiling LESS assets using the combiner.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/less/base.less']);\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Script Injection\nDESCRIPTION: Programmatically injecting JavaScript and CSS files using PHP components or pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/placeholder.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addJs('assets/js/app.js');\n}\n```\n\n----------------------------------------\n\nTITLE: Length Validation Implementation\nDESCRIPTION: Demonstrates length validation for strings and arrays with minimum and maximum constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector-types.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'name' => [\n            'title' => 'Name',\n            'type' => 'string',\n            'validation' => [\n                'length' => [\n                    'min' => [\n                        'value' => 2,\n                        'message' => 'The name should not be shorter than two letters.'\n                    ],\n                    'max' => [\n                        'value' => 10,\n                        'message' => 'The name should not be longer than 10 letters.'\n                    ]\n                ]\n            ]\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Date Scope with Custom Model Scope in YAML\nDESCRIPTION: Configures the Date Scope to use a custom model scope named 'dateFilter'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-date.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    modelScope: dateFilter\n```\n\n----------------------------------------\n\nTITLE: Default HTML5 Audio Tag\nDESCRIPTION: Shows the default HTML5 audio tag used by the system to render audio files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<audio src=\"audio.mp3\" controls></audio>\n```\n\n----------------------------------------\n\nTITLE: Media Manager Configuration in PHP\nDESCRIPTION: Shows the configuration options for Media Manager defined in config/media.php, including settings for ignored files and patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Ignored Files and Patterns\n|--------------------------------------------------------------------------\n|\n| The media manager wil ignore file names and patterns specified here\n|\n*/\n\n'ignore_files' => ['.svn', '.git', '.DS_Store', '.AppleDouble'],\n\n'ignore_patterns' => ['^\\\\.*'],\n```\n\n----------------------------------------\n\nTITLE: Import/Export Configuration in YAML\nDESCRIPTION: Configuration example for import and export forms using YAML format, showing how to specify custom form field definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-model.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# config_import_export.yaml\nimport:\n    # ...\n    form: $/acme/campaign/models/subscriberimport/fields.yaml\n\nexport:\n    # ...\n    form: $/acme/campaign/models/subscriberexport/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Invalid Bindings\nDESCRIPTION: This snippet demonstrates how to clean up invalid deferred bindings that are older than a specified number of days.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nOctober\\Rain\\Database\\Models\\DeferredBinding::cleanUp(1);\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Component in October CMS Documentation\nDESCRIPTION: This code snippet uses a Redirect component to automatically redirect users from the markup guide page to the templating page in the October CMS documentation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/README.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Redirect to=\"templating\" />\n```\n\n----------------------------------------\n\nTITLE: Calculating Mode Value in Collection in PHP\nDESCRIPTION: The mode method returns the mode value (most frequent value) of a given key in the collection. It works with both associative arrays and simple numeric arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\n$mode = collect([['foo' => 10], ['foo' => 10], ['foo' => 20], ['foo' => 40]])->mode('foo');\n\n// [10]\n\n$mode = collect([1, 1, 2, 4])->mode();\n\n// [1]\n```\n\n----------------------------------------\n\nTITLE: Checking for Site Groups in PHP\nDESCRIPTION: Shows how to use the hasSiteGroups method to check if multiple site definitions are using grouped definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (Site::hasSiteGroups()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Alternate Hreflang Meta Tags in Twig\nDESCRIPTION: Creates alternate hreflang meta tags for each available site to improve SEO for multilingual websites.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/sitepicker.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for site in sitePicker.sites %}\n    <link rel=\"alternate\" hreflang=\"{{ site.locale }}\" href=\"{{ site.url }}\" />\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Array Building with Twig Merge Filter\nDESCRIPTION: Traditional way of building arrays in Twig using the merge filter in a loop structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/collect.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% set array = [] %}\n{% for item in items %}\n    {% set array = array|merge([{ title: item.title, ... }]) %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Responding to Backend View Events\nDESCRIPTION: Example showing how to respond to a view event by listening for it and returning HTML markup to be injected into the view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.auth.extendSigninView', function ($controller, $firstParam) {\n    return '<a href=\"#\">‰ΩøÁî® Google ÁôªÂΩï!</a>';\n});\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expressions in Twig\nDESCRIPTION: Demonstrates using ternary expressions in Twig templates to conditionally output different values based on a condition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ isAjax ? 'Yes' : 'No' }}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Conditions in Group Filter\nDESCRIPTION: Example of using custom SQL conditions in a group filter where :value represents the filtered value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Role\n    type: group\n    conditions: role in (:value)\n```\n\n----------------------------------------\n\nTITLE: Embedding Raw Data in Mail Templates\nDESCRIPTION: Example of embedding raw data (like an image) in an email template using the message.embedData method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n<body>\n    Here is an image from raw data:\n\n    <img src=\"{{ message.embedData(data, name) }}\">\n</body>\n```\n\n----------------------------------------\n\nTITLE: Specifying Fully Qualified Path for Partial Column in YAML\nDESCRIPTION: Illustrates how to use a fully qualified path to access partials outside the model or controller directories, useful for sharing partials between definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: $/acme/blog/partials/_content_column.php\n```\n\n----------------------------------------\n\nTITLE: Binding Local Event Handlers to Child Elements\nDESCRIPTION: Demonstrates how to bind event handlers to child elements within the control using CSS selectors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    connect() {\n        this.listen('click', '.toolbar-find-button', this.onClickFindButton);\n    }\n\n    onClickFindButton(event) {\n        console.log('You clicked the find button inside the control: ' + event.delegateTarget.innerText);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Variables in PHP\nDESCRIPTION: Example of using View::share method in PHP to register a global variable 'site_name' that will be available in all content blocks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/content.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nView::share('site_name', 'October CMS');\n```\n\n----------------------------------------\n\nTITLE: Basic String Helper Usage in Twig and PHP\nDESCRIPTION: Demonstrates the basic usage of string helpers showing equivalent syntax between Twig and PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Str::camel() ?>\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Database File with Bash\nDESCRIPTION: Command to create a new SQLite database file in the storage directory using the touch command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/database-config.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntouch storage/database.sqlite\n```\n\n----------------------------------------\n\nTITLE: Accessing Related Models as Properties in PHP\nDESCRIPTION: Shows how to access related models directly as a property on the parent model in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$user->posts;\n```\n\n----------------------------------------\n\nTITLE: Advanced Tooltip Configuration for Columns\nDESCRIPTION: Shows how to configure advanced tooltip options including custom placement and icon.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/list-columns.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ncount:\n    label: Count\n    type: number\n    tooltip:\n        title: Number of users in the group\n        placement: bottom\n        icon: icon-users\n```\n\n----------------------------------------\n\nTITLE: Word-Limited Summary Column Definition with Custom Ending in YAML for October CMS\nDESCRIPTION: Defines a summary column that limits content by word count (10 words) instead of character count, and customizes the ending characters to use an ellipsis.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-summary.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n    limitWords: 10\n    endChars: \"...\"\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from Route in PHP\nDESCRIPTION: Illustrates returning a string response from a route definition. This will display the string as the response, similar to CMS methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/', function() {\n    return 'Hello World';\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Filter Dependencies in PHP\nDESCRIPTION: PHP methods for handling dependent filter options, demonstrating how to retrieve country and city options based on scope values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filters.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return Country::lists('name', 'id');\n}\n\npublic function getCityOptions($scopes = null)\n{\n    if (!empty($scopes['country']->value)) {\n        return City::whereIn('country_id', $scopes['country']->value)->lists('name', 'id');\n    }\n    else {\n        return City::lists('name', 'id');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: English Word Pluralization\nDESCRIPTION: Function to convert an English word to its plural form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_plural('chicken') }}\n```\n\n----------------------------------------\n\nTITLE: Progress Bar JavaScript Controls\nDESCRIPTION: Shows how to manually control the progress bar display using JavaScript functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noc.progressBar.show();\n\noc.progressBar.hide();\n```\n\n----------------------------------------\n\nTITLE: Import View Template in HTML\nDESCRIPTION: HTML view template for the import page featuring a form with import rendering and submission button.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->importRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onImportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Import records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Using PHP Traits in a Class\nDESCRIPTION: Example of how to use native PHP traits in a class, shown for comparison with October CMS behaviors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass\n{\n    use \\October\\Rain\\UtilityFunctions;\n    use \\October\\Rain\\DeferredBinding;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Flash Messages with CSS\nDESCRIPTION: Shows how to customize the appearance of flash messages by targeting the .oc-flash-message CSS class and its variants for different message types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/flash-messages.md#2025-04-16_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.oc-flash-message.success {\n    background: green;\n}\n.oc-flash-message.error {\n    background: red;\n}\n.oc-flash-message.warning {\n    background: orange;\n}\n.oc-flash-message.info {\n    background: aqua;\n}\n.oc-flash-message.loading {\n    background: aqua;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Content Field Usage Example in YAML\nDESCRIPTION: Full example of using a custom content field 'mycontentfield' in a YAML blueprint, including custom config options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    mycontentfield:\n        label: Custom Content Field\n        type: mycontentfield\n        firstColor: red\n        secondColor: blue\n```\n\n----------------------------------------\n\nTITLE: Accessing ViewBag Properties in October CMS Layout\nDESCRIPTION: Shows how to access ViewBag properties in an October CMS layout. The example uses the 'activeMenu' property to conditionally apply a CSS class to a navigation item.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Default layout\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n...\n\n<!-- Main navigation -->\n<ul>\n    <li class=\"{{ viewBag.activeMenu == 'about' ? 'active' }}\">About</li>\n    ...\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Random Item(s) from Collection in PHP\nDESCRIPTION: The random method returns a random item from the collection. It can also return multiple random items if an integer is passed as an argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$collection->random();\n\n// 4 - (retrieved randomly)\n\n$random = $collection->random(3);\n\n$random->all();\n\n// [2, 4, 5] - (retrieved randomly)\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Layout in Controller\nDESCRIPTION: Shows how to specify a custom layout for a backend controller using the $layout property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/views-partials.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var string Layout to use for the view.\n */\npublic $layout = 'mycustomlayout';\n```\n\n----------------------------------------\n\nTITLE: Traffic Sources Widget HTML Markup\nDESCRIPTION: HTML markup for a traffic sources widget that displays a pie chart showing different traffic sources with their respective values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Traffic sources</h3>\n\n    <div\n        class=\"control-chart\"\n        data-control=\"chart-pie\"\n        data-size=\"200\"\n        data-center-text=\"180\">\n        <ul>\n            <li>Direct <span>1000</span></li>\n            <li>Social networks <span>800</span></li>\n        </ul>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Prompting for User Input in Console Command\nDESCRIPTION: Shows how to prompt the user for input in a console command using the ask method. This displays a question and waits for user input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$name = $this->ask('What is your name?');\n```\n\n----------------------------------------\n\nTITLE: Selectable Column Using Options Preset in YAML\nDESCRIPTION: Shows how to use the optionsPreset property to pull predefined options from a preset definition, specifically using the phosphorIcons preset.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-selectable.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nicon:\n    label: Icon\n    type: selectable\n    optionsPreset: phosphorIcons\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Download Button with AJAX in HTML\nDESCRIPTION: A minimal example of creating a download button using the data-request-download attribute to trigger a file download via AJAX.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/downloads.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onExport\" data-request-download>\n    Download\n</button>\n```\n\n----------------------------------------\n\nTITLE: Listening for Cache Event in Turbo Router using JavaScript\nDESCRIPTION: Shows how to listen for the 'page:before-cache' event to prepare the document before it enters the cache, useful for resetting forms or UI elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:before-cache', function() {\n    // Close any open submenus, etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Using storage_path() Helper in PHP\nDESCRIPTION: The storage_path function returns the fully qualified path to the storage directory. It optionally accepts a relative path parameter to generate a path to a specific file within the storage directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$path = storage_path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$path = storage_path('app/file.txt');\n```\n\n----------------------------------------\n\nTITLE: PHP Link URL Resolution\nDESCRIPTION: Shows how to resolve page links to URLs using the PageManager class in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/link.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nCms\\Classes\\PageManager::url('october://cms-page@link/about');\n```\n\n----------------------------------------\n\nTITLE: Current Page URL in PHP\nDESCRIPTION: Demonstrates how to get the current page URL in PHP and pass it to the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?\\nfunction onStart()\\n{\\n    $this['currentUrl'] = $this->pageUrl();\\n}\\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ currentUrl }}\n```\n\n----------------------------------------\n\nTITLE: Update Page Configuration in YAML\nDESCRIPTION: Configuration options for the Update page including title, redirect path, and custom flash messages for save and delete actions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nupdate:\n    title: Edit Blog Post\n    redirect: acme/blog/posts\n    flashSave: Post updated successfully!\n    flashDelete: Post has been deleted.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of pager() Function in Twig\nDESCRIPTION: Demonstrates how to use the pager() function to display paginated results and render page links in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"container\">\n    {% for user in users %}\n        {{ user.name }}\n    {% endfor %}\n</div>\n\n{{ pager(users) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with env() in Twig\nDESCRIPTION: Illustrates the use of the env() function in a Twig template to access the 'APP_ENV' environment variable, with a default value of 'production' if the variable is not set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/config.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ env('APP_ENV', 'production') }}\n```\n\n----------------------------------------\n\nTITLE: Amazon S3 Bucket Policy for Public Access\nDESCRIPTION: JSON bucket policy that grants public read-only access to all files in an Amazon S3 bucket. This policy is required to make media files publicly accessible when using S3 as a media provider.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/media/providers.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2008-10-17\",\n    \"Id\": \"Policy1397632521960\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1397633323327\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::BUCKETNAME/*\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Function Definition and Usage\nDESCRIPTION: Shows how to define and use custom functions in both PHP and Twig sections of a template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/themes.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/\"\n```\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this['foo'] = $this->doSomething();\n}\n\nfunction doSomething()\n{\n    return 'bar';\n}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<h3>{{ this.doSomething() }}</h3>\n```\n\n----------------------------------------\n\nTITLE: Adding Controller Middleware with Basic Example\nDESCRIPTION: Shows how to define middleware in a controller constructor that will execute after the request is processed but before the response is sent.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $this->middleware(function ($request, $response) {\n        // Middleware functionality\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Environment Type in Twig Template\nDESCRIPTION: This snippet demonstrates how to conditionally display content based on the current environment configuration. It checks if the site is running in the test environment and displays a banner accordingly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-environment.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.environment == 'test' %}\n\n    <div class=\"banner\">Test Environment</div>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using the Component Tag with Parameter Overrides\nDESCRIPTION: Example of using the component Twig tag with parameters that override the component properties at render time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' maxItems=\"7\" %}\n```\n\n----------------------------------------\n\nTITLE: Switch Filter Scope with Default Value in YAML\nDESCRIPTION: Shows how to configure a switch filter scope with a default state. The default value is set to 1 (indeterminate state) when the filter loads.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-switch.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nis_approved:\n    label: Approved\n    type: switch\n    default: 1\n```\n\n----------------------------------------\n\nTITLE: Applying Chained Model Scope in PHP\nDESCRIPTION: This snippet shows how to apply a chained model scope to a model instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$model->applyUser($user);\n```\n\n----------------------------------------\n\nTITLE: Configuring Theme Dependencies\nDESCRIPTION: Example showing how to specify plugin dependencies in theme.yaml\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"October CMS Demo\"\n# [...]\n\nrequire:\n    - \"Acme.User\"\n    - \"Acme.Blog\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Mirror Public Directory\nDESCRIPTION: Environment variable configuration to automatically mirror the public directory after system updates or plugin installations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nAUTO_MIRROR_PUBLIC=true\n```\n\n----------------------------------------\n\nTITLE: Creating a Console Command in OctoberCMS\nDESCRIPTION: The create:command command generates a new console command. It requires two parameters: the author and plugin name, and the command name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/scaffolding.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:command RainLab.Blog MyCommand\n```\n\n----------------------------------------\n\nTITLE: Configuring Partial Column Type in YAML\nDESCRIPTION: Demonstrates how to set up a partial column to render custom HTML in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: ~/plugins/acme/blog/models/comment/_content_column.htm\n```\n\n----------------------------------------\n\nTITLE: Quick Select Buttons Configuration\nDESCRIPTION: Example of enabling quick select buttons (Select All/None) for checkbox lists.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkboxlist.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n    type: checkboxlist\n    quickselect: true\n```\n\n----------------------------------------\n\nTITLE: Checking the Application Environment in October CMS\nDESCRIPTION: Shows how to retrieve the current environment (like production, development) determined by the environment configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// production\nApp::environment();\n```\n\n----------------------------------------\n\nTITLE: Adding Horizontal Rule Element in October CMS Form\nDESCRIPTION: Simple YAML configuration to add a horizontal rule separator in an October CMS form. The ruler field type creates a visual break between form sections without any interactive functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/ui-ruler.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_ruler1:\n    type: ruler\n```\n\n----------------------------------------\n\nTITLE: Storing Session Data with this.session.put in Twig\nDESCRIPTION: Demonstrates how to store data in the session using the put method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-session.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do this.session.put('my-preference', 'value') %}\n```\n\n----------------------------------------\n\nTITLE: Chunking Large Results\nDESCRIPTION: Processing large datasets in chunks to conserve memory using the chunk method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nFlight::chunk(200, function ($flights) {\n    foreach ($flights as $flight) {\n        //\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Block in Page Layout - Twig\nDESCRIPTION: Demonstrates how to render a content block named 'contacts.htm' within a page layout using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/contacts\"\n==\n<div class=\"contacts\">\n    {% content 'contacts.htm' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Restarting Queue Workers During Deployment\nDESCRIPTION: Shows the command to gracefully restart all queue workers after they finish processing their current jobs, useful during deployments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:restart\n```\n\n----------------------------------------\n\nTITLE: Specifying AJAX Change Handler in YAML\nDESCRIPTION: Shows how to configure a field to call a custom AJAX handler when its value changes, using the changeHandler property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/field-dependencies.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: textarea\n    changeHandler: onChangeContent\n```\n\n----------------------------------------\n\nTITLE: Styling Cache-Loaded Pages with CSS\nDESCRIPTION: This CSS selector targets pages loaded from the cache, allowing different styling for preview pages such as hiding overlays from previous views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_14\n\nLANGUAGE: css\nCODE:\n```\nhtml[data-turbo-preview] {\n    /* Hide overlays from previous view */\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Alert After Successful AJAX Request in HTML\nDESCRIPTION: This snippet demonstrates how to show a JavaScript alert popup after a successful AJAX login request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-success=\"alert('Yay!')\">\n\n```\n\n----------------------------------------\n\nTITLE: Defining Static Dropdown Options in PHP\nDESCRIPTION: Demonstrates how to define properties with a static dropdown type, including title, default value, placeholder, and predefined options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-dropdown.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'unit' => [\n            'title' => 'Unit',\n            'type' => 'dropdown',\n            'default' => 'imperial',\n            'placeholder' => 'Select units',\n            'options' => ['metric' => 'Metric', 'imperial' => 'Imperial']\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Field Display in Lists and Filters in October CMS Tailor\nDESCRIPTION: Example of configuring how a field appears in lists and filters by specifying different labels for each context. This allows for customized display in different views without changing the base field definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmyfield:\n    label: Form Label\n    column:\n        label: List Label\n    scope:\n        label: Filter Label\n```\n\n----------------------------------------\n\nTITLE: Defining Available Resizing Modes in Markdown\nDESCRIPTION: This snippet describes the available modes for image resizing in OctoberCMS. It provides a table with mode names and their descriptions, explaining how each mode affects the resizing process.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/image-resizing.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nMode | Description\n--- | ---\n`auto` | Automatically choose between `portrait` and `landscape` based on the image's orientation\n`exact` | Resize to the exact dimensions given, without preserving aspect ratio\n`portrait` | Resize to the given height and adapt the width to preserve aspect ratio\n`landscape` | Resize to the given width and adapt the height to preserve aspect ratio\n`crop` | Crop to the given dimensions after fitting as much of the image as possible inside those\n`fit` | Fit the image inside the given maximal dimensions, keeping the aspect ratio\n```\n\n----------------------------------------\n\nTITLE: Entering the Project Directory\nDESCRIPTION: Changes the current directory to the newly created project folder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd myoctober\n```\n\n----------------------------------------\n\nTITLE: Check Session Data Existence in PHP\nDESCRIPTION: Example of checking if an item exists in the session using the has method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Session::has('users')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Content Field Class with Artisan Command\nDESCRIPTION: Use the create:contentfield Artisan command to generate a content field class. The command takes the author and plugin name as the first argument and the content field class name as the second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:contentfield Acme.Blog MyContentField\n```\n\n----------------------------------------\n\nTITLE: Returning Models Directly from Routes in PHP\nDESCRIPTION: Demonstrates how models and collections can be returned directly from routes and will be automatically converted to JSON.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('users', function () {\n    return User::all();\n});\n```\n\n----------------------------------------\n\nTITLE: Table Rename and Drop Operations\nDESCRIPTION: Methods for renaming and dropping database tables\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/structure.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nSchema::rename($from, $to);\n\nSchema::drop('users');\n\nSchema::dropIfExists('users');\n```\n\n----------------------------------------\n\nTITLE: Currency Column with Multisite Support in YAML for October CMS\nDESCRIPTION: Sets up a currency column to use multisite definitions for currency display. When the site property is true, the system automatically sets the appropriate toCode and fromCode values based on site configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-currency.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Loan amount\n    type: currency\n    site: true\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Content Blocks in OctoberCMS\nDESCRIPTION: Illustrates how to pass variables to content blocks and access them within the content using single curly braces syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" name=user.name %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"location.htm\" city=\"Vancouver\" country=\"Canada\" %}\n```\n\nLANGUAGE: html\nCODE:\n```\n<p>ÂõΩÂÆ∂: {country}, ÂüéÂ∏Ç: {city}.</p>\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Variables in Twig\nDESCRIPTION: Example of accessing theme configuration values in Twig templates\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/themes/development.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Welcome to {{ this.theme.site_name }}!</h1>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Site by ID in PHP\nDESCRIPTION: Example of looking up a site using its unique identifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$siteFour = Site::getSiteFromId(4);\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Column Type in YAML\nDESCRIPTION: Shows how to set up a datetime column with custom formatting in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: datetime\n    format: l jS \\of F Y h:i:s A\n    useTimezone: false\n```\n\n----------------------------------------\n\nTITLE: Including Soft Deleted Models in Queries - PHP\nDESCRIPTION: Demonstrates how to include soft deleted models in query results using the withTrashed method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$users = User::withTrashed()->where('account_id', 1)->get();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Theme Copy in October CMS\nDESCRIPTION: This command creates a new theme named 'demo-copy' by copying an existing 'demo' theme. The .themelock file will be removed during this process, allowing the new theme to be edited.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/child-themes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo demo-copy\n```\n\n----------------------------------------\n\nTITLE: Default Values Configuration in Group Filter\nDESCRIPTION: Shows how to set default selected values in a group filter configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-group.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    # ...\n    default:\n        - developer\n        - publisher\n```\n\n----------------------------------------\n\nTITLE: Using Custom Config in YAML Blueprint\nDESCRIPTION: Example of using the custom 'secondaryTitle' config item in a YAML blueprint for the custom content field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmy_field:\n    type: mycontentfield\n    secondaryTitle: Custom value goes here\n```\n\n----------------------------------------\n\nTITLE: Defining View Bag Properties in October CMS Page\nDESCRIPTION: Demonstrates how to define View Bag properties in an October CMS page configuration. The example sets an 'activeMenu' property for use in the page markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"About\"\nurl = \"/about.html\"\nlayout = \"default\"\n\n[viewBag]\nactiveMenu = \"about\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>Page content...</p>\n```\n\n----------------------------------------\n\nTITLE: PHP Equivalent of html() Function\nDESCRIPTION: Demonstrates the PHP equivalent of the Twig html_strip() function, showing how the Twig functions map to the Html class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Html::strip() ?>\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Delete Column in October CMS Migration\nDESCRIPTION: Demonstrates how to add a soft delete column to a database table using a migration in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->softDeletes();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation Context in PHP Controller\nDESCRIPTION: PHP code to set the navigation context in a controller using the BackendMenu facade methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nBackendMenu::setTailorContext('Blog\\Post', 'testimonials');\n\nBackendMenu::setTailorContextUuid('edcd102e-0525-4e4d-b07e-633ae6c18db6', 'testimonials');\n```\n\n----------------------------------------\n\nTITLE: Making Wildcard Parameters Optional in October CMS\nDESCRIPTION: Example of defining an optional wildcard parameter in a URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/:slug?*\"\n```\n\n----------------------------------------\n\nTITLE: Composer Requirements for Development Branch\nDESCRIPTION: Composer dependencies configuration to use development branches of OctoberCMS core components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"october/rain\": \"dev-develop as 1.0\",\n\"october/system\": \"dev-develop\",\n\"october/backend\": \"dev-develop\",\n\"october/cms\": \"dev-develop\",\n\"laravel/framework\": \"~6.0\",\n```\n\n----------------------------------------\n\nTITLE: Checking HTTP Request Method in Twig\nDESCRIPTION: Demonstrates how to check the current HTTP request method (GET/POST) using this.request.method property in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-request.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.request.method == 'GET' %}\n    <!-- Do GET Logic -->\n{% elseif this.request.method == 'POST' %}\n    <!-- Do POST Logic -->\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Component Directory Structure Example\nDESCRIPTION: Demonstrates the typical directory structure for a component within an October CMS plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nplugins/\n  acme/\n    myplugin/\n      components/\n        componentname/       <=== Partials Directory\n          default.htm        <=== Default Markup (optional)\n        ComponentName.php    <=== Class File\n      Plugin.php\n```\n\n----------------------------------------\n\nTITLE: Resolving an Interface Implementation in October CMS\nDESCRIPTION: Shows how to resolve an interface from the container after binding it to a concrete implementation, which will automatically inject the bound concrete type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = App::make('UserRepositoryInterface');\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer for Bleeding Edge Updates in October CMS\nDESCRIPTION: JSON configuration for composer.json to use the latest development version of October CMS. This allows access to recent bug fixes that aren't yet available in official releases by targeting the 'develop' branch of both the 'october/all' and 'october/rain' packages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/updating.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"october/all\": \"dev-develop\",\n\"october/rain\": \"dev-develop\",\n```\n\n----------------------------------------\n\nTITLE: Explicit Link URL and Text Configuration in YAML\nDESCRIPTION: Configures a linkage column with explicit URL and text values. It uses dynamic parameters (:code and :id) that will be resolved from the record's attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-linkage.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nopen_link:\n    label: View\n    type: linkage\n    linkText: View Dashboard\n    linkUrl: backend/index/:code/:id\n```\n\n----------------------------------------\n\nTITLE: Matching Request Path Patterns in October CMS\nDESCRIPTION: How to determine if the current request path matches a pattern using wildcards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nif (Request::is('admin/*')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Using array_sort Helper Function in PHP\nDESCRIPTION: The array_sort function sorts an array based on the results of a callback function applied to each element. The result needs to be re-indexed with array_values to maintain sequential keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$array = [\n    ['name' => 'Desk'],\n    ['name' => 'Chair'],\n];\n\n$array = array_values(array_sort($array, function ($value) {\n    return $value['name'];\n}));\n\n/*\n    [\n        ['name' => 'Chair'],\n        ['name' => 'Desk'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: String Property Output Format\nDESCRIPTION: Shows the JSON output format for a string property value after it has been set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-string.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"firstName\": \"Sam\"\n```\n\n----------------------------------------\n\nTITLE: Using studly_case() String Helper in PHP\nDESCRIPTION: The studly_case function converts the given string to StudlyCase format (also known as PascalCase). It transforms the string to have capital first letters with no spaces or underscores.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$value = studly_case('foo_bar');\n\n// FooBar\n```\n\n----------------------------------------\n\nTITLE: Redirecting to New Documentation Location in Markdown\nDESCRIPTION: This code snippet uses a Markdown-style redirect to automatically send users to the new location of the Extra Features documentation. It includes a brief text explanation and a redirect component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/extras.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Extra Features\n\nThis page has moved to a new section. Redirecting...\n\n<Redirect to=\"../features/validation\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Verbatim Tag Usage in Twig\nDESCRIPTION: Demonstrates how to use the verbatim tag to prevent Twig from parsing template variables. The verbatim tag marks the enclosed content as raw text that should be rendered exactly as is.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/verbatim.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% verbatim %}<p>Hello, {{ name }}</p>{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Setting Job Timeout for Queue Worker\nDESCRIPTION: Shows how to set the maximum execution time (in seconds) for each job processed by the queue worker.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work --once --timeout=60\n```\n\n----------------------------------------\n\nTITLE: Manual Export Processing with PHP in October CMS\nDESCRIPTION: Example showing how to manually process an export using the exportDownload method to generate a downloadable file with specific columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-model.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$exportColumns = ['id', 'title'];\n\n$exportModel = new MyExportClass;\n\n$exportModel->file_format = 'json';\n\nreturn $exportModel->exportDownload('myexportfile.json', ['columns' => $exportColumns]);\n```\n\n----------------------------------------\n\nTITLE: Specifying Full Path for Partial Column in OctoberCMS YAML\nDESCRIPTION: Illustrates how to use a fully qualified path to access partials outside the model or controller directories, useful for sharing partials between definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-partial.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    label: Content\n    type: partial\n    path: $/acme/blog/partials/_content_column.php\n```\n\n----------------------------------------\n\nTITLE: Storing an Avatar Using Default Disk\nDESCRIPTION: Example of storing a user's avatar file on the default disk without explicitly specifying which disk to use.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find($id);\n\nStorage::put(\n    'avatars/'.$user->id,\n    file_get_contents(Request::file('avatar')->getRealPath())\n);\n```\n\n----------------------------------------\n\nTITLE: Email Address Obfuscation\nDESCRIPTION: Examples of using html_email() to obfuscate email addresses to prevent spam-bot harvesting, including usage within HTML markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-html.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_email('a@b.c') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"mailto: {{ html_email('a@b.c')|raw }}\">Email me</a>\n\n<!-- The above will output -->\n<a href=\"mailto: &#109;&#97;&#105;&#108;&#x74;o&#x3a;&#97;&#64;b.&#x63;\">Email me</a>\n```\n\n----------------------------------------\n\nTITLE: Finding Duplicate Values with duplicates() and duplicatesStrict()\nDESCRIPTION: These methods retrieve and return duplicate values from the collection. duplicatesStrict() uses strict comparisons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$collection = collect(['a', 'b', 'a', 'c', 'b']);\n\n$collection->duplicates();\n\n// [2 => 'a', 4 => 'b']\n```\n\nLANGUAGE: PHP\nCODE:\n```\n$employees = collect([\n    ['email' => 'abigail@example.com', 'position' => 'Developer'],\n    ['email' => 'james@example.com', 'position' => 'Designer'],\n    ['email' => 'victoria@example.com', 'position' => 'Developer'],\n])\n\n$employees->duplicates('position');\n\n// [2 => 'Developer']\n```\n\n----------------------------------------\n\nTITLE: Installing Currency Plugin via Command Line\nDESCRIPTION: Command to install the required Responsiv.Currency plugin using October CMS artisan command.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-currency.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Responsiv.Currency\n```\n\n----------------------------------------\n\nTITLE: Applying SQL Query Conditions to Entries Field\nDESCRIPTION: Configuration showing how to limit the related model using a raw SQL query with the conditions property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: entries\n    source: Blog\\Category\n    conditions: is_featured = true\n```\n\n----------------------------------------\n\nTITLE: Triggering Modal from Custom Button in JavaScript\nDESCRIPTION: Demonstrates how to open a modal window from a custom rich editor button using JavaScript. This can be used to create complex interactions within the editor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\noc.popup({\n    handler: 'onLoadPopup'\n});\n```\n\n----------------------------------------\n\nTITLE: Phosphor Icon Definition in YAML\nDESCRIPTION: Shows how to reference a Phosphor icon in YAML configuration with both required prefixes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/available-icons.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nicon: ph ph-laptop\n```\n\n----------------------------------------\n\nTITLE: Rendering Sub-View in Twig\nDESCRIPTION: Shows how to render a sub-view from within a parent view using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        <h1>Hello!</h1>\n        {{ child|raw }}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Basic Template Structure in October CMS\nDESCRIPTION: Illustrates the three-section structure of a template in October CMS, including configuration, PHP code, and Twig markup sections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/themes.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n==\nfunction onStart()\n{\n    $this['posts'] = ...;\n}\n==\n<h3>Blog archive</h3>\n{% for post in posts %}\n    <h4>{{ post.title }}</h4>\n    {{ post.content }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Page with Placeholder Content\nDESCRIPTION: Page template demonstrating how to inject content into a layout placeholder\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/my-page\"\nlayout = \"default\"\n==\n{% put head %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\">\n{% endput %}\n\n<p>The page content goes here.</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Unencrypted Cookies\nDESCRIPTION: Shows how to specify cookies that should not be encrypted or decrypted in the system configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n'unencrypt_cookies' => [\n    'my_cookie',\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Project License Key in October CMS\nDESCRIPTION: The 'project:set' command sets the license key for the current installation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/commands.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Using array_forget Helper Function in PHP\nDESCRIPTION: The array_forget function removes a deeply nested value from an array using dot notation to specify the path to the value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$array = ['products' => ['desk' => ['price' => 100]]];\n\narray_forget($array, 'products.desk');\n\n// ['products' => []]\n```\n\n----------------------------------------\n\nTITLE: Array Casting Configuration\nDESCRIPTION: Shows how to set up array casting for JSON-serialized attributes\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * @var array casts attributes to native types.\n     */\n    protected $casts = [\n        'options' => 'array',\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Partials in October CMS\nDESCRIPTION: Demonstrates how to render a partial from a component in October CMS using the fully qualified name. This is necessary when rendering the partial from outside the component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'componentName::component-partial' %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Path in PHP\nDESCRIPTION: The public_path function returns the fully qualified path to the public directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$path = public_path();\n```\n\n----------------------------------------\n\nTITLE: Apache .htaccess RewriteBase Configuration\nDESCRIPTION: Apache configuration for RewriteBase directive in subdirectory installations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n# RewriteBase /\n\n# RewriteBase /subdirectory/\n```\n\n----------------------------------------\n\nTITLE: Setting October CMS Project Key\nDESCRIPTION: Command to authenticate with October CMS gateway using license key\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Filtering Flash Messages by Type in OctoberCMS Twig\nDESCRIPTION: This snippet demonstrates how to filter flash messages by type, showing only success messages in this case. It's useful when you want to display specific types of messages in certain areas of your template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/flash.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% flash success %}\n    <div class=\"alert alert-success\">{{ message }}</div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Rendering with Twig\nDESCRIPTION: Demonstrates how to render a partial named 'mytime' inside a div element using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/update-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div id=\"myDiv\">{% partial 'mytime' %}</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Text Input Fields\nDESCRIPTION: Shows how to generate text input elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::text('username') ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Nullable Attributes in a Model - PHP\nDESCRIPTION: Demonstrates how to use the Nullable trait to automatically set empty attributes to NULL when saving a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/traits.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Product extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\Nullable;\n\n    /**\n     * @var array Nullable attributes.\n     */\n    protected $nullable = ['sku'];\n}\n```\n\n----------------------------------------\n\nTITLE: CamelCase String Conversion\nDESCRIPTION: Function to convert a string to camelCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_camel('hello world') }}\n```\n\n----------------------------------------\n\nTITLE: Â∏¶ÈªòËÆ§ÂÜÖÂÆπÂíåËá™ÂÆö‰πâÂ±ûÊÄßÁöÑÂÆåÊï¥Âç†‰ΩçÁ¨¶Á§∫‰æã\nDESCRIPTION: ÁªìÂêàÊâÄÊúâÁâπÊÄßÁöÑÂÆåÊï¥Á§∫‰æãÔºåÂåÖÊã¨ÈªòËÆ§ÂÜÖÂÆπ„ÄÅÊ†áÈ¢òÂíåÁ±ªÂûãÂ±ûÊÄß„ÄÇ\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-placeholder.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder ordering default title=\"ËÆ¢Ë¥≠‰ø°ÊÅØ\" type=\"text\" %}\n    ËØ•‰∫ßÂìÅÊ≤°ÊúâËÆ¢Ë¥≠‰ø°ÊÅØ„ÄÇ\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Registering Dimensions in Data Source\nDESCRIPTION: Demonstrates how to register dimensions in a data source constructor. The example registers a product dimension with a display name and label column.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/data-sources.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nconst DIMENSION_PRODUCT = 'product';\n\npublic function __construct()\n{\n    $this->registerDimension(new ReportDimension(\n        self::DIMENSION_PRODUCT,\n        'acme_shop_products.id',\n        'Product',\n        'product_name'\n    ));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeSince Column in October CMS\nDESCRIPTION: This snippet shows how to set up a timesince column in October CMS, which displays a human-readable time difference from the value to the current time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-datetime.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: timesince\n```\n\n----------------------------------------\n\nTITLE: Pushing Job to Queue in PHP\nDESCRIPTION: Demonstrates how to push a new job onto the queue using Queue::push method with job name and data parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Defining Options with Icons, Colors, and Images in YAML\nDESCRIPTION: Demonstrates how to define options with additional attributes like icons, colors, and images for dropdown fields. The second item in the array determines the type of attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\noptions:\n    red: [Color, '#ff0000']\n    icon: [Icon, 'oc-icon-calendar']\n    image: [Image, '/path/to/image.png']\n```\n\n----------------------------------------\n\nTITLE: Getting Application Environment\nDESCRIPTION: Shows how to get the current application environment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// production\nApp::environment();\n```\n\n----------------------------------------\n\nTITLE: Getting Original File Name\nDESCRIPTION: Shows how to retrieve the original file name from an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::file('photo')->getClientOriginalName();\n```\n\n----------------------------------------\n\nTITLE: Prepending and Appending to Files\nDESCRIPTION: Examples of how to add content to the beginning or end of a file, useful for log files or other sequential data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nStorage::prepend('file.log', 'Prepended Text');\n\nStorage::append('file.log', 'Appended Text');\n```\n\n----------------------------------------\n\nTITLE: Resizing an Image Using the |resize Filter in Twig\nDESCRIPTION: This snippet demonstrates how to use the '|resize' filter in a Twig template to resize an image named 'banner.jpg' to dimensions of 1920x1080 pixels. The filter is applied after the '|media' filter, which likely retrieves the image from a media library.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-resize.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|media|resize(1920, 1080) }}\" />\n```\n\n----------------------------------------\n\nTITLE: JSON Output from Autocomplete Inspector Type\nDESCRIPTION: Example of the JSON output generated when a value is selected from the autocomplete inspector. The output is a simple string value corresponding to the selected option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-autocomplete.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"condition\": \"start\"\n```\n\n----------------------------------------\n\nTITLE: Converting String to camelCase in PHP\nDESCRIPTION: The camel_case function converts the given string to camelCase format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n$camel = camel_case('foo_bar');\n\n// fooBar\n```\n\n----------------------------------------\n\nTITLE: Using |default Filter in Twig for Handling Undefined Variables\nDESCRIPTION: Demonstrates various ways to use the |default filter in Twig to provide fallback values for undefined or empty variables. It shows usage with direct variables, object properties, array keys, and empty strings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/default.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ variable|default('The variable is not defined') }}\n\n{{ variable.foo|default('The foo property on variable is not defined') }}\n\n{{ variable['foo']|default('The foo key in variable is not defined') }}\n\n{{ ''|default('The variable is empty') }}\n```\n\n----------------------------------------\n\nTITLE: Database Schema for Has One Through Relationship\nDESCRIPTION: SQL table structure for implementing a Has One Through relationship between Supplier, User, and History models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nusers\n    id - integer\n    supplier_id - integer\n\nsuppliers\n    id - integer\n\nhistory\n    id - integer\n    user_id - integer\n```\n\n----------------------------------------\n\nTITLE: Listing All Sites in PHP\nDESCRIPTION: Example of listing all sites, including disabled ones.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$sites = Site::listSites();\n```\n\n----------------------------------------\n\nTITLE: Creating a Behavior Class\nDESCRIPTION: Example of creating a behavior class that extends ExtensionBase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace MyNamespace\\Behaviors;\n\nclass FormController extends \\October\\Rain\\Extension\\ExtensionBase\n{\n    /**\n     * @var ÂØπÊâ©Â±ïÂØπË±°ÁöÑÂºïÁî®„ÄÇ\n     */\n    protected $controller;\n\n    /**\n     * Constructor\n     */\n    public function __construct($controller)\n    {\n        $this->controller = $controller;\n    }\n\n    public function someMethod()\n    {\n        return \"ÊàëÊù•Ëá™FormController BehaviorÔºÅ\";\n    }\n\n    public function otherMethod()\n    {\n        return \"‰Ω†ÂèØËÉΩÁúã‰∏çÂà∞Êàë...\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion with |currency Twig Filter\nDESCRIPTION: Demonstrates how to use the |currency filter to convert an amount from USD to AUD.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ 1000|currency({ from: 'USD', to: 'AUD' }) }}\n```\n\n----------------------------------------\n\nTITLE: Extending Default Success Handler\nDESCRIPTION: Shows how to run custom code after the default success function completes by using promise chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    success: function(data) {\n        this.success(data).done(function() {\n            // ... do something after parent success() is finished ...\n        });\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamically Extending Third-party Plugins\nDESCRIPTION: Example of safely extending a third-party plugin's controller with additional behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nUsersController::extend(function($controller) {\n\n    // Â¶ÇÊûúÂ∞öÊú™ÂÆûÁé∞ÔºåÂàôÂÆûÁé∞Ë°å‰∏∫\n    if (!$controller->isClassExtendedWith('Backend.Behaviors.RelationController')) {\n        $controller->implement[] = 'Backend.Behaviors.RelationController';\n    }\n\n    // Â¶ÇÊûúÂ∞öÊú™ÂÆö‰πâÔºåÂàôÂÆö‰πâÂ±ûÊÄß\n    if (!isset($controller->relationConfig)) {\n        $controller->addDynamicProperty('relationConfig');\n    }\n\n    // ÂÆâÂÖ®ÊãºÊé•ÈÖçÁΩÆ\n    $myConfigPath = '$/myvendor/myplugin/controllers/users/config_relation.yaml';\n\n    $controller->relationConfig = $controller->mergeConfig(\n        $controller->relationConfig,\n        $myConfigPath\n    );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Date and Time with carbon() in Twig\nDESCRIPTION: Shows how to use the carbon() function with a custom date and time value in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/carbon.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon('2024-01-01 02:13:23') }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Progress Bar in HTML\nDESCRIPTION: Shows how to disable the AJAX progress bar for a specific request using HTML attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onDoSomething\"\n    data-request-progress-bar=\"false\">\n    Do something\n</button>\n```\n\n----------------------------------------\n\nTITLE: Installing October Rain Package\nDESCRIPTION: Adds the October CMS Rain library to the Laravel project.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mylaravel\ncomposer require october/rain\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Branch of Private Plugin\nDESCRIPTION: Command to install a specific branch of a private plugin using the --want option. This example installs the develop branch version.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=git@github.com:acme/blog-plugin.git --want=dev-develop\n```\n\n----------------------------------------\n\nTITLE: Example Partial Content in PHP\nDESCRIPTION: Sample content of a partial field file showing how to access the available variables including the field value, model, and field object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php if ($model->is_active): ?>\n    <p><?= $field->label ?> is active</p>\n<?php endif ?>\n```\n\n----------------------------------------\n\nTITLE: Data Import Configuration in YAML\nDESCRIPTION: YAML configuration file that defines data import settings for Tailor records, including blog posts and categories. Specifies import model classes and file paths.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/seeding-themes.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n-\n    name: Blog Post Data\n    class: Tailor\\Models\\RecordImport\n    file: seeds/data/blog-posts.json\n    attributes:\n        file_format: json\n        blueprint_uuid: edcd102e-0525-4e4d-b07e-633ae6c18db6\n-\n    name: Blog Category Data\n    class: Tailor\\Models\\RecordImport\n    file: seeds/data/blog-categories.json\n    attributes:\n        file_format: json\n        blueprint_uuid: b022a74b-15e6-4c6b-9eb9-17efc5103543\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output\nDESCRIPTION: Shows the final HTML output when the page content is merged with the layout.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/layouts.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <p>Hello, world!</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using the push() Method in PHP Collections\nDESCRIPTION: The push method appends an item to the end of the collection, modifying the original collection. Similar to PHP's array_push function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$collection->push(5);\n\n$collection->all();\n\n// [1, 2, 3, 4, 5]\n```\n\n----------------------------------------\n\nTITLE: Basic Text Filter Configuration in YAML\nDESCRIPTION: Basic YAML configuration for setting up a text filter scope with username field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-text.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Form Field in YAML\nDESCRIPTION: Basic configuration for an email form field that renders a single line text box optimized for email input. Includes label and type definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-email.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser_email:\n    label: Email Address\n    type: email\n```\n\n----------------------------------------\n\nTITLE: Customizing Paginator Path in PHP\nDESCRIPTION: Shows how to customize the URI used by the paginator when generating links using the setPath method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n$users->setPath('custom/url');\n```\n\n----------------------------------------\n\nTITLE: Checking if Collection is Not Empty with isNotEmpty() in PHP\nDESCRIPTION: The isNotEmpty method returns true if the collection has at least one item; otherwise, it returns false. This is the inverse of the isEmpty method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([])->isNotEmpty();\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Dynamic Property\nDESCRIPTION: Shows how to access a specific dynamic property from the properties array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$model->getDynamicProperties()[$key];\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Navigation with Custom Display Types\nDESCRIPTION: Configuration for registering custom navigation items with section and divider display types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    label: Authors\n    parent: Blog\\Post\n    icon: icon-user\n    order: 230\n\nextraNavigation:\n    _authors_section:\n        itemType: section\n        label: Authors\n        order: 210\n\n    _authors_ruler:\n        itemType: ruler\n        order: 220\n```\n\n----------------------------------------\n\nTITLE: Hot Reload Configuration for Browser Sync\nDESCRIPTION: Configuration snippet for webpack browserSync to handle hot reloading with turbo router by injecting a meta tag to disable turbo visits.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nsnippetOptions: {\n    rule: {\n        match: /<\\/head>/i,\n        fn: function (snippet, match) {\n            return '<meta name=\"turbo-visit-control\" content=\"disable\" />';\n        }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords with Hash Facade in PHP\nDESCRIPTION: Example of hashing a user password using the Hash facade's make method. This generates a secure Bcrypt hash of the password before saving it to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/hashing-encryption.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->password = Hash::make('mypassword');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Observable Control in JavaScript\nDESCRIPTION: Basic example of registering a control using oc.registerControl with a unique name and class definition extending oc.ControlBase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\noc.registerControl('hello', class extends oc.ControlBase {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entry Blueprint in YAML\nDESCRIPTION: Creates a basic entry blueprint for a team member with name field. Entry blueprints support multiple entries and are used when no specific variant applies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Team\\Member\ntype: entry\nname: Team Member\n\nfields:\n    name:\n        label: First Name\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Character-Limited Summary Column Definition in YAML for October CMS\nDESCRIPTION: Defines a summary column with a custom character limit of 100 characters. This overrides the default limit of 40 characters while still maintaining the word boundary rule.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-summary.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n    limitChars: 100\n```\n\n----------------------------------------\n\nTITLE: Preview Page Configuration in YAML\nDESCRIPTION: Basic configuration for the Preview page, showing the required title parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Using |theme Filter for JavaScript Asset in Twig\nDESCRIPTION: Demonstrates how to use the |theme filter to generate an absolute URL for a JavaScript file in the active theme's assets directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<script type=\"text/javascript\" src=\"{{ 'assets/js/menu.js'|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: IIS Web Configuration\nDESCRIPTION: Microsoft IIS web.config configuration for URL rewriting and handling static files in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/web-server-config.md#2025-04-16_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <rewrite>\n            <rules>\n                <clear />\n                <rule name=\"October CMS to handle all non-allowlisted URLs\" stopProcessing=\"true\">\n                    <match url=\"^(.*)$\" ignoreCase=\"false\" />\n                    <conditions logicalGrouping=\"MatchAll\">\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/.well-known/*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/uploads/public/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/media/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/resources/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/temp/public/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/themes/.*/(assets|resources)/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/plugins/.*/(assets|resources)/.*\" negate=\"true\" />\n                        <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/modules/.*/(assets|resources)/.*\" negate=\"true\" />\n                    </conditions>\n                    <action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"true\" />\n                </rule>\n            </rules>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Targeting Develop Branch in Composer for October CMS\nDESCRIPTION: This JSON snippet shows how to target the 'develop' branch in the composer.json file for October CMS packages. This allows for receiving bleeding edge updates that are not yet released in the stable channel.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/updating-october.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"october/all\": \"dev-develop\",\n\"october/rain\": \"dev-develop\",\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Options in PHP\nDESCRIPTION: Shows how to create a nested option structure using the 'children' property in PHP. This is useful for checkbox lists and implementing option groups in dropdowns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function getDetailedFieldOptions()\n{\n    return [\n        1 => [\n            'label' => 'Option 1',\n            'comment' => 'This is option one',\n            'children' => [\n                2 => [\n                    'label' => 'Option 2',\n                    'comment' => 'This is option two',\n                ],\n                // ...\n            ]\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing INI in PHP\nDESCRIPTION: Shows how to use the INI facade to parse INI syntax into a PHP array and vice versa.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$array = Ini::parse($iniString);\n\n$array = Ini::parseFile($filePath);\n\n$iniString = Ini::render($array);\n```\n\n----------------------------------------\n\nTITLE: Selectively Pruning Fields or Tables\nDESCRIPTION: Commands to selectively prune either fields or tables in Tailor. This provides more control over what gets removed during database cleanup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan tailor:prune --fields\nphp artisan tailor:prune --tables\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Properties in Twig Templates in October CMS\nDESCRIPTION: Example showing how to access page properties in a Twig template using the this.page variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n<p>The title of this page is: {{ this.page.title }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Postmark Settings\nDESCRIPTION: PHP configuration array for Postmark service token\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'postmark' => [\n    'token' => env('POSTMARK_TOKEN'),\n],\n```\n\n----------------------------------------\n\nTITLE: Installing Private Plugin from Remote Git Repository\nDESCRIPTION: Command to install a private plugin from a remote Git repository. Uses the --from option to specify the repository location.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Acme.Blog --from=git@github.com:acme/blog-plugin.git\n```\n\n----------------------------------------\n\nTITLE: Disabling Form Inputs During AJAX Requests\nDESCRIPTION: Demonstrates how to disable all form inputs while an AJAX request is running and re-enable them when complete.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/loaders.md#2025-04-16_snippet_14\n\nLANGUAGE: js\nCODE:\n```\naddEventListener('ajax:promise', function(event) {\n    event.target.closest('form').querySelectorAll('input').forEach(function(el) {\n        el.disabled = true;\n    });\n});\n\naddEventListener('ajax:always', function() {\n    event.target.closest('form').querySelectorAll('input').forEach(function(el) {\n        el.disabled = false;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Framework Assets with Theme Filter\nDESCRIPTION: Demonstrates combining AJAX framework assets with custom JavaScript using alias notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/theme.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ [\n    '@framework.extras',\n    'assets/javascript/app.js'\n]|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Updating Exception Handler\nDESCRIPTION: Code changes required in app/Exceptions/Handler.php to update Exception Handler inheritance\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n// File app/Exceptions/Handler.php\n\n// Replace\nuse Illuminate\\Foundation\\Exceptions\\Handler as ExceptionHandler;\n\n// With\nuse October\\Rain\\Foundation\\Exception\\Handler as ExceptionHandler;\n```\n\n----------------------------------------\n\nTITLE: Listing Directories\nDESCRIPTION: Shows how to retrieve all directories within a given directory, with options for recursive listing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$directories = Storage::directories($directory);\n\n// ÈÄíÂΩí...\n$directories = Storage::allDirectories($directory);\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio List Fields in October CMS\nDESCRIPTION: Shows how to configure radio list fields with different options formats including basic options and options with descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    label: Access Level\n    type: radio\n    default: guests\n    options:\n        all: All\n        registered: Registered only\n        guests: Guests only\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    label: Access Level\n    type: radio\n    options:\n        all: [All, Guests and customers will be able to access this page.]\n        registered: [Registered only, Only logged in member will be able to access this page.]\n        guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Hiding Progress Bar Globally with CSS\nDESCRIPTION: Shows how to globally disable the progress bar visibility using CSS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.oc-progress-bar {\n    visibility: hidden;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Directories in Storage\nDESCRIPTION: Example showing how to remove a directory and all its files from storage using the deleteDirectory method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nStorage::deleteDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Stability for Bleeding Edge Updates\nDESCRIPTION: Changes the minimum stability setting to 'dev' using Composer to receive bleeding edge updates of October CMS. This enables access to the latest features and fixes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/updating-october.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer config minimum-stability dev\n```\n\n----------------------------------------\n\nTITLE: Client-Side Event Handler Implementation\nDESCRIPTION: JavaScript implementation of the button click event handler in the Vue component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonButtonClick: async function () {\n    this.loadingButtonData = true;\n    this.buttonClickResult = null;\n    try {\n        const response = await this.request('onGetSomeData', {\n            some_var: \"some value\"\n        });\n        this.buttonClickResult = response.result;\n    }\n    catch (err) {\n        $.oc.alert(err.message);\n    }\n    finally {\n        this.loadingButtonData = false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Detailed Options Method\nDESCRIPTION: Demonstrates how to create a PHP method that returns detailed option definitions with additional properties like comments and nested structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/define-options.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function getDetailedFieldOptions()\n{\n    return [\n        1 => [\n            'label' => 'Option 1',\n            'comment' => 'This is option one',\n            'children' => [\n                2 => [\n                    'label' => 'Option 2',\n                    'comment' => 'This is option two',\n                ],\n                // ...\n            ]\n        ],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Loop in Twig\nDESCRIPTION: Demonstrates how to loop through a collection of users and display each username in an unordered list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% for user in users %}\n        <li>{{ user.username }}</li>\n    {% endfor %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Method for Queue Job in PHP\nDESCRIPTION: Demonstrates how to specify a custom method other than the default 'fire' method when pushing a job to the queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail@send', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with Media URL\nDESCRIPTION: Shows the resulting HTML output after the |media Twig filter has been applied, assuming a media manager address of https://cdn.octobercms.com.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/media.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://cdn.octobercms.com/banner.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Setting Single Relationship via Dynamic Property\nDESCRIPTION: This snippet demonstrates how to set a single relationship by assigning it directly to a dynamic property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$post->author = $author;\n\n$post->comments = [$comment1, $comment2];\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Defining Options that Accept Values in Console Command Signature\nDESCRIPTION: Shows how to define options that can accept values in the command signature. By adding an equal sign after the option name, it can accept a value or be null if not provided.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/console-commands.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user} {--queue=}';\n```\n\n----------------------------------------\n\nTITLE: RelationController Configuration (YAML)\nDESCRIPTION: Example YAML configuration for the RelationController behavior, showing how to set up a 'items' relationship with view and manage sections, defining the list and form configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/relations.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nitems:\n    label: Invoice Line Item\n    view:\n        list: $/acme/pay/models/invoiceitem/columns.yaml\n        toolbarButtons: create|delete\n    manage:\n        form: $/acme/pay/models/invoiceitem/fields.yaml\n        recordsPerPage: 10\n```\n\n----------------------------------------\n\nTITLE: Basic Raw Filter Usage in Twig Templates\nDESCRIPTION: Demonstrates the basic use of the |raw filter to prevent a variable from being escaped in October CMS. The |raw filter marks the value as 'safe', allowing HTML content to be rendered properly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-raw.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# This variable won't be escaped #}\n{{ variable |raw }}\n```\n\n----------------------------------------\n\nTITLE: HTML Control Element Declaration\nDESCRIPTION: Example of declaring a control element in HTML using the data-control attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"hello\"></div>\n```\n\n----------------------------------------\n\nTITLE: Generating Form Widget Files with Artisan in October CMS\nDESCRIPTION: This command uses Artisan to generate a backend form widget, view, and basic asset files. It requires the author and plugin name as the first argument and the form widget class name as the second argument.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:formwidget Acme.Blog ColorPicker\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached with Unix Socket\nDESCRIPTION: Configuration array for Memcached cache driver using Unix socket connection with socket path and weight parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/cache.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'memcached' => [\n    [\n        'host' => '/var/run/memcached/memcached.sock',\n        'port' => 0,\n        'weight' => 100\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Loading Sites for a Different Page in Twig\nDESCRIPTION: Uses the pageSites() function to retrieve sites configured for a specific CMS page rather than the current page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/sitepicker.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% set otherSites = sitePicker.pageSites('blog/index') %}\n```\n\n----------------------------------------\n\nTITLE: Using Response Macro in PHP\nDESCRIPTION: Demonstrates how to use a previously defined response macro.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::caps('foo');\n```\n\n----------------------------------------\n\nTITLE: Rendering Content from Subdirectory in Twig\nDESCRIPTION: Shows how to render a content block located in a subdirectory\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"sidebar/content.htm\" %}\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URL for Favicon using |app Filter in Twig\nDESCRIPTION: This snippet demonstrates how to use the |app filter to generate an absolute URL for a favicon. It takes a relative path and converts it to a full URL including the domain and protocol.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-app.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<link rel=\"icon\" href=\"{{ '/favicon.ico'|app }}\" />\n```\n\n----------------------------------------\n\nTITLE: Repeater Item Model Definition\nDESCRIPTION: PHP model implementation for a repeater item that extends ExpandoModel for dynamic attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-repeater.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\ExpandoModel;\n\nclass RepeaterItem extends ExpandoModel\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n\n    public $table = 'acme_blog_repeater_items';\n\n    protected $expandoPassthru = ['parent_id', 'sort_order'];\n\n    public $attachMany = [\n        'photos' => \\System\\Models\\File::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Number Column Configuration in YAML for OctoberCMS\nDESCRIPTION: Shows how to configure a number column with custom formatting. This example formats a 'Price' column as currency with two decimal places.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-number.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprice:\n    label: Price\n    type: number\n    format: \"$%.2f\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect in AJAX Handler\nDESCRIPTION: Demonstrates how to implement a redirect in an AJAX handler using PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction onRedirect()\n{\n    return Redirect::to('https://octobercms.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring URL with Parameters in October CMS\nDESCRIPTION: Example of defining a URL with a required parameter for dynamic page routing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n```\n\n----------------------------------------\n\nTITLE: Currency Column with Multisite Support in YAML\nDESCRIPTION: Configuration for currency column with multisite support enabled for automatic currency code handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-currency.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Loan amount\n    type: currency\n    site: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Mail Pretend Mode\nDESCRIPTION: PHP code to enable pretend mode for mail sending, which logs emails instead of sending them\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nMail::pretend();\n```\n\n----------------------------------------\n\nTITLE: Dictionary Output Format in JSON\nDESCRIPTION: Shows the JSON structure output format for dictionary properties with multiple key-value pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dictionary.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"options\": {\"option1\": \"Option 1\", \"option2\": \"Option 2\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Collections with times() Method in PHP\nDESCRIPTION: The static times() method creates a new collection by invoking a callback a given number of times. It can be used to generate collections with calculated values or when combined with factories to create Eloquent models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_66\n\nLANGUAGE: php\nCODE:\n```\n$collection = Collection::times(10, function ($number) {\n    return $number * 9;\n});\n\n$collection->all();\n\n// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n```\n\nLANGUAGE: php\nCODE:\n```\n$categories = Collection::times(3, function ($number) {\n    return factory(Category::class)->create(['name' => \"Category No. $number\"]);\n});\n\n$categories->all();\n\n/*\n    [\n        ['id' => 1, 'name' => 'Category No. 1'],\n        ['id' => 2, 'name' => 'Category No. 2'],\n        ['id' => 3, 'name' => 'Category No. 3'],\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: React Redirect Component Usage\nDESCRIPTION: A React redirect component implementation that redirects users to the ../features/validation path\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/extras.md#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Redirect to=\"../features/validation\" />\n```\n\n----------------------------------------\n\nTITLE: Checking for Item Existence in Cache\nDESCRIPTION: Using the has method to determine if an item exists in the cache before performing operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif (Cache::has('key')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Passed Variables in Twig Partial\nDESCRIPTION: This Twig code shows how to access a variable named 'result' that has been passed to a partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/update-partials.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<!-- Hello world! -->\n{{ result }}\n```\n\n----------------------------------------\n\nTITLE: Defining Export Model in PHP\nDESCRIPTION: Example of an export model class that extends Backend\\Models\\ExportModel. Implements the exportData method to retrieve and format data for export.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/import-export.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberExport extends \\Backend\\Models\\ExportModel\n{\n    public function exportData($columns, $sessionKey = null)\n    {\n        $subscribers = Subscriber::all();\n\n        $subscribers->each(function($subscriber) use ($columns) {\n            $subscriber->addVisible($columns);\n        });\n\n        return $subscribers->toArray();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing a Theme with OC Prefix in October CMS\nDESCRIPTION: Command to install a theme with the 'oc' package name prefix using the --oc option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName --from=git@github.com:authorname/oc-themename-theme.git --oc\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Field in October CMS YAML\nDESCRIPTION: Example configuration for implementing a password input field in October CMS forms. Demonstrates basic setup with label and type properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-password.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser_password:\n    label: Password\n    type: password\n```\n\n----------------------------------------\n\nTITLE: Adding URL Fragment to Pagination Links\nDESCRIPTION: Example showing how to append a URL fragment (hash) to pagination links using the fragment method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\necho $users->fragment('foo')->render();\n```\n\n----------------------------------------\n\nTITLE: Replacing Items in Collection in PHP\nDESCRIPTION: The replace method replaces items in the collection with given items. It overwrites both string and numeric keys, unlike the merge method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_51\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['Taylor', 'Abigail', 'James']);\n\n$replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n\n$replaced->all();\n\n// ['Taylor', 'Victoria', 'James', 'Finn']\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for Autocomplete Property in OctoberCMS\nDESCRIPTION: This snippet shows the JSON output generated for an autocomplete property. It represents the selected option as a string value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-autocomplete.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"condition\": \"start\"\n```\n\n----------------------------------------\n\nTITLE: Preventing Field Submission with Underscore Prefix in YAML\nDESCRIPTION: Example showing how to prevent a field from being submitted to the model by prefixing its name with an underscore, useful for display-only fields like map viewers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\naddress:\n    label: Title\n    type: text\n\n_map:\n    label: Point your address on the map\n    type: mapviewer\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Models in PHP\nDESCRIPTION: Shows how to retrieve multiple model instances from the database using various query methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/model.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$flights = Flight::all();\n\n$flights = Flight::where('active', 1)\n    ->orderBy('name', 'desc')\n    ->take(10)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Using October Icons in HTML - October CMS\nDESCRIPTION: Example of how to use an October icon in HTML. The October Icon pack is a custom icon library primarily used by core features of October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/available-icons.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"icon-october\"></i>\n```\n\n----------------------------------------\n\nTITLE: Matching String Pattern in PHP\nDESCRIPTION: The str_is function determines if a given string matches a given pattern. Asterisks may be used to indicate wildcards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_21\n\nLANGUAGE: PHP\nCODE:\n```\n$value = str_is('foo*', 'foobar');\n\n// true\n\n$value = str_is('baz*', 'foobar');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Custom Named Foreign Key Constraint Definition\nDESCRIPTION: Shows how to create a foreign key constraint with a custom constraint name using the Schema builder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$table->foreign('user_id', 'user_foreign')\n    ->references('id')\n    ->on('users');\n```\n\n----------------------------------------\n\nTITLE: Obfuscating Email Addresses to Prevent Spam\nDESCRIPTION: Demonstrates how to obfuscate an email address to protect it from being harvested by spam bots.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_email('a@b.c') }}\n```\n\n----------------------------------------\n\nTITLE: Using the Dynamic Syntax Parser in PHP\nDESCRIPTION: Demonstrates how to use October's unique Dynamic Syntax parser which supports both view and editor modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Parse\\Syntax\\Parser as SyntaxParser;\n\n$syntax = SyntaxParser::parse($content);\n```\n\nLANGUAGE: php\nCODE:\n```\necho $syntax->render();\n// <h1>Our wonderful website</h1>\n```\n\nLANGUAGE: php\nCODE:\n```\necho $syntax->render(['websiteName' => 'October CMS']);\n// <h1>October CMS</h1>\n```\n\nLANGUAGE: php\nCODE:\n```\necho $syntax->toTwig();\n// <h1>{{ websiteName }}</h1>\n```\n\nLANGUAGE: php\nCODE:\n```\n$array = $syntax->toEditor();\n// 'websiteName' => [\n//     'label' => 'Website name',\n//     'default' => 'Our wonderful website',\n//     'type' => 'text'\n// ]\n```\n\nLANGUAGE: php\nCODE:\n```\n$form = [\n    'fields' => $syntax->toEditor()\n];\n\nFile::put('fields.yaml', Yaml::render($form));\n```\n\n----------------------------------------\n\nTITLE: Changing Filename When Adding from URL in PHP\nDESCRIPTION: Demonstrates changing the filename when adding a file attachment from a URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$file->fromUrl('https://example.com/uploads/public/path/to/avatar.jpg', 'somefilename.jpg');\n```\n\n----------------------------------------\n\nTITLE: Flushing All Failed Jobs with Artisan in Bash\nDESCRIPTION: Artisan command to delete all failed jobs. This is useful for bulk cleanup of the failed jobs queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:flush\n```\n\n----------------------------------------\n\nTITLE: Updating Application Container\nDESCRIPTION: Replaces Laravel's Application class with October's Application class in bootstrap/app.php.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n// File bootstrap/app.php\n\n// Replace\n$app = new Illuminate\\Foundation\\Application(\n    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)\n);\n\n// With\n$app = new October\\Rain\\Foundation\\Application(\n    $_ENV['APP_BASE_PATH'] ?? dirname(__DIR__)\n);\n```\n\n----------------------------------------\n\nTITLE: Shorthand Scope Configuration in October CMS Tailor\nDESCRIPTION: Examples of using shorthand values for filter scope configurations in a Tailor blueprint. These options provide concise ways to control filter behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nscopes:\n    myfield: Filter Label # New Label\n    myfield: true         # Shown\n    myfield: false        # Hidden\n    myfield: [...]        # Config Array\n```\n\n----------------------------------------\n\nTITLE: Force Theme Sync Without Confirmation\nDESCRIPTION: Command to sync theme content without requiring user interaction, useful for automated deployments and build scripts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:sync --force\n```\n\n----------------------------------------\n\nTITLE: Using a Class with Traits and Behaviors\nDESCRIPTION: Example showing how to use a class that extends another class with ExtendableTrait and implements behaviors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$robot = new Robot();\n$robot->identify();\n```\n\n----------------------------------------\n\nTITLE: Determining the Application Execution Context in October CMS\nDESCRIPTION: Demonstrates helper methods to check if the application is running in the backend admin area or in the console command line interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/application.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInBackend();\n```\n\n----------------------------------------\n\nTITLE: Extending Media Manager with Custom Event Listener in PHP\nDESCRIPTION: This PHP snippet shows how to extend the Media Manager in OctoberCMS by adding a custom event listener for the 'file.rename' event. It demonstrates how to hook into Media Manager events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nBackend\\Widgets\\MediaManager::extend(function($widget) {\n    $widget->bindEvent('file.rename', function ($originalPath, $newPath) {\n        // Update custom references to path here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Class in October CMS\nDESCRIPTION: This code snippet shows how to define a report widget class in October CMS. The class extends ReportWidgetBase and implements the render method to display the widget content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/report-widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace RainLab\\GoogleAnalytics\\ReportWidgets;\n\nuse Backend\\Classes\\ReportWidgetBase;\n\nclass TrafficSources extends ReportWidgetBase\n{\n    public function render()\n    {\n        return $this->makePartial('widget');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing SystemException in OctoberCMS\nDESCRIPTION: Example of throwing a SystemException for critical system errors in OctoberCMS. This exception type is always logged and displays detailed error information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/error-log.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nthrow new SystemException('Unable to contact the mail server API');\n```\n\n----------------------------------------\n\nTITLE: Accessing Control Configuration Values\nDESCRIPTION: Demonstrates how to access configuration values from data attributes in the control class using the config property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    init() {\n        this.favoriteColor = this.config.favoriteColor || 'green';\n    }\n\n    connect() {\n        console.log(`Favorite color? ${this.favoriteColor}!`);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Common Values with intersect() Method in PHP Collections\nDESCRIPTION: The intersect() method removes values that are not present in the given array or collection. The resulting collection preserves the original collection's keys.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Desk', 'Sofa', 'Chair']);\n\n$intersect = $collection->intersect(['Desk', 'Chair', 'Bookcase']);\n\n$intersect->all();\n\n// [0 => 'Desk', 2 => 'Chair']\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Example\nDESCRIPTION: Sample YAML configuration showing the basic syntax and structure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceipt: Acme Purchase Invoice\ndate: 2015-10-02\nuser:\n    name: Joe\n    surname: Blogs\n```\n\n----------------------------------------\n\nTITLE: Link Resolution with Nested Items\nDESCRIPTION: Example of using the link() function with nesting option to retrieve child items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/link.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% set resolved = link('october://...', { nesting: true }) %}\n\n{% for subitem in resolved.items %}\n    {{ subitem.url }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections by Keys in PHP\nDESCRIPTION: Shows how to use the only() method to return only the specified keys from a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'name' => 'Desk', 'price' => 100, 'discount' => false]);\n\n$filtered = $collection->only(['product_id', 'name']);\n\n$filtered->all();\n\n// ['product_id' => 1, 'name' => 'Desk']\n```\n\n----------------------------------------\n\nTITLE: Basic Blueprint Structure in YAML\nDESCRIPTION: Demonstrates the fundamental structure of a Tailor blueprint including UUID, handle, type and fields definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/introduction.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuuid: edcd102e-0525-4e4d-b07e-633ae6c18db6\nhandle: Blog\\Post\ntype: entry\nname: Post\n\nfields:\n    # [...]\n```\n\n----------------------------------------\n\nTITLE: Using the put() Method in PHP Collections\nDESCRIPTION: The put method sets a key-value pair in the collection, modifying the original collection. If the key already exists, its value is replaced.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_43\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['product_id' => 1, 'name' => 'Desk']);\n\n$collection->put('price', 100);\n\n$collection->all();\n\n// ['product_id' => 1, 'name' => 'Desk', 'price' => 100]\n```\n\n----------------------------------------\n\nTITLE: Rendering Standard Flash Messages with Twig\nDESCRIPTION: Twig markup for rendering standard flash messages in a page or layout to maintain consistency with AJAX-based flash messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <p\n        data-control=\"flash-message\"\n        class=\"flash-message fade {{ type }}\"\n        data-interval=\"5\">\n        {{ message }}\n    </p>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Filter Dependencies in YAML\nDESCRIPTION: This snippet shows how to define dependencies between filter scopes using the dependsOn property in the YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filters.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: group\n    conditions: country_id in (:value)\n    modelClass: October\\Test\\Models\\Location\n    options: getCountryOptions\n\ncity:\n    label: City\n    type: group\n    conditions: city_id in (:value)\n    modelClass: October\\Test\\Models\\Location\n    options: getCityOptions\n    dependsOn: country\n```\n\n----------------------------------------\n\nTITLE: Using times() Static Method in PHP Collections\nDESCRIPTION: The static times method creates a new collection by invoking a callback a given number of times. The callback receives the iteration number as a parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_63\n\nLANGUAGE: php\nCODE:\n```\n$collection = Collection::times(10, function ($number) {\n    return $number * 9;\n});\n\n$collection->all();\n\n// [9, 18, 27, 36, 45, 54, 63, 72, 81, 90]\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in October CMS Twig Template\nDESCRIPTION: This snippet demonstrates how to access and use the 'tab' URL parameter in an October CMS page template. It shows conditional rendering based on the parameter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-param.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/account/:tab\"\n==\n{% if this.param.tab == 'details' %}\n\n    <p>Here are all your details</p>\n\n{% elseif this.param.tab == 'history' %}\n\n    <p>You are viewing a blast from the past</p>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Directories in PHP\nDESCRIPTION: Demonstrates how to retrieve lists of files and directories, including recursive options for subdirectories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/storage.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$files = Storage::files($directory);\n\n$files = Storage::allFiles($directory);\n\n$directories = Storage::directories($directory);\n\n// Recursive...\n$directories = Storage::allDirectories($directory);\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Emails with Explicit HTML and Text Content\nDESCRIPTION: Example of sending an email with explicitly defined HTML and text content without layout or markdown parsing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nMail::raw([\n    'text' => 'This is plain text',\n    'html' => '<strong>This is HTML</strong>'\n], function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Database Columns\nDESCRIPTION: Example of renaming a column in an existing table using the renameColumn method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('users', function ($table) {\n    $table->renameColumn('from', 'to');\n});\n```\n\n----------------------------------------\n\nTITLE: Using config_path Helper Function in PHP\nDESCRIPTION: The config_path function returns the fully qualified path to the application configuration directory. It can also generate paths to files within the config directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$path = config_path();\n\n$path = config_path('dev/cms.php');\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Table Widget in YAML\nDESCRIPTION: YAML configuration for a data table widget that renders an editable grid of records with support for adding, deleting, searching and pagination.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndata:\n    type: datatable\n    adding: true\n    btnAddRowLabel: Add Row Above\n    btnAddRowBelowLabel: Add Row Below\n    btnDeleteRowLabel: Delete Row\n    columns: []\n    deleting: true\n    dynamicHeight: true\n    fieldName: null\n    height: false\n    keyFrom: id\n    recordsPerPage: false\n    searching: false\n    toolbar: []\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncolumns:\n    id:\n        type: string\n        title: ID\n        validation:\n            integer:\n                message: Please enter a number\n    name:\n        type: string\n        title: Name\n```\n\n----------------------------------------\n\nTITLE: AJAX Redirect Handler\nDESCRIPTION: Shows how to implement an AJAX handler that redirects the browser to another location.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction onRedirectMe()\n{\n    return Redirect::to('http://google.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Using database_path() Helper in PHP\nDESCRIPTION: The database_path function returns the fully qualified path to the application's database directory. It takes no parameters and returns a string path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$path = database_path();\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Page ID in Twig\nDESCRIPTION: Shows how to use the page ID property to create CSS class names. This converts the page file name and folder name to a CSS friendly identifier, such as 'page-home-index' for a file named 'home/index.htm'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-page.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"page-{{ this.page.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Recipient for Emails in PHP\nDESCRIPTION: Demonstrates how to set a universal recipient for all emails sent by the framework during development. This is done in the 'config/mail.php' configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n'to' => [\n    'address' => 'dev@example.com',\n    'name' => 'Dev Example'\n],\n```\n\n----------------------------------------\n\nTITLE: Export View Template\nDESCRIPTION: HTML template for the export page showing the export form with submission button.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->exportRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onExportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Export records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Injecting Content with Default Placeholder in Twig\nDESCRIPTION: Demonstrates how to inject content into a placeholder while preserving its default content using the {% default %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-placeholder.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% put sidebar %}\n    <p><a href=\"/services\">Services</a></p>\n    {% default %}\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Theme Sync with Specific Paths\nDESCRIPTION: Command to sync only specific files in a theme by providing a comma-separated list of paths to synchronize.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:sync --paths=partials/header.htm,content/contact.md\n```\n\n----------------------------------------\n\nTITLE: Installing Postmark Driver Dependencies with Composer\nDESCRIPTION: Command to install the required Symfony packages for using the Postmark mail driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/mail-config.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require symfony/postmark-mailer symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Rolling Back an October CMS Plugin to a Specific Version\nDESCRIPTION: Command to rollback a plugin's database to a specified version.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:refresh AuthorName.PluginName --rollback=1.0.3\n```\n\n----------------------------------------\n\nTITLE: Clearing all session data in October CMS Twig templates\nDESCRIPTION: Shows how to remove all session data using the 'flush' method. This completely empties the session of all stored values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-session.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.flush() }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Field with Search Disabled in YAML\nDESCRIPTION: Defines a dropdown select field in a form using YAML configuration. The 'type' property is set to 'dropdown' and includes the 'showSearch' option set to false to disable the search feature.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    showSearch: false\n```\n\n----------------------------------------\n\nTITLE: Using Option Presets in YAML\nDESCRIPTION: Shows how to use the optionsPreset property to specify a preset code for available options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/define-options.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\noptionsPreset: icons\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon SES Driver in October CMS\nDESCRIPTION: Configuration settings needed in the services.php file to use the Amazon SES mail driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'ses' => [\n    'key' => 'your-ses-key',\n    'secret' => 'your-ses-secret',\n    'region' => 'ses-region',  // e.g. us-east-1\n],\n```\n\n----------------------------------------\n\nTITLE: Creating Simple View in PHP\nDESCRIPTION: Shows a simple view file using PHP syntax, stored in the plugin's views directory with a .php extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<!-- View stored in plugins/acme/blog/views/greeting.php -->\n\n<html>\n    <body>\n        <h1>Hello, <?= $name ?></h1>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Default HTML5 Video Tag Implementation\nDESCRIPTION: Shows the default HTML5 video tag used by the Media Manager to render video files when no custom player is defined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"video.mp4\" controls></video>\n```\n\n----------------------------------------\n\nTITLE: Defining a Location Mixin in YAML for OctoberCMS\nDESCRIPTION: This YAML snippet defines a Location mixin with country and state fields. It includes the handle, type, name, and field definitions for country_code and state_code.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Fields\\Location\ntype: mixin\nname: Location\n\nfields:\n    country_code:\n        label: Country\n        type: text\n\n    state_code:\n        label: State\n        type: text\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for Object List in OctoberCMS\nDESCRIPTION: This snippet shows the default JSON output format for an Object List. It represents a non-associative array of objects with properties defined in the inspector.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-objectlist.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"people\": [\n    {\"fullName\": \"John Smith\", \"address\": \"Palo Alto\"},\n    {\"fullName\": \"Bart Simpson\", \"address\": \"Springfield\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Currency Plugin - OctoberCMS Bash Command\nDESCRIPTION: Command to install the required Responsiv.Currency plugin via artisan CLI.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-currency.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Responsiv.Currency\n```\n\n----------------------------------------\n\nTITLE: Rendering Simple Pagination Template in HTML\nDESCRIPTION: Displays the HTML structure of the simple pagination template used by the simplePaginate() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/pager.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"pagination\">\n    <li class=\"page-item first\">\n        <span class=\"page-link\">&larr;</span>\n    </li>\n    <li class=\"page-item last\">\n        <a class=\"page-link\" href=\"?page=2\">&rarr;</a>\n    </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Column in October CMS List\nDESCRIPTION: Configuration for a time column which displays only the time part in the format g:i A.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: time\n```\n\n----------------------------------------\n\nTITLE: Component Default Markup with Self Reference\nDESCRIPTION: This snippet shows the default markup of a component with references to the __SELF__ variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n<h1>{{ __SELF__.post.title }}</h1>\n<p>{{ __SELF__.post.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Filter Widget in YAML\nDESCRIPTION: Example of setting filter widget properties in a YAML configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndiscount:\n    label: Discount\n    type: discount\n    allowSearch: true\n```\n\n----------------------------------------\n\nTITLE: Getting File Size in PHP\nDESCRIPTION: Example showing how to retrieve the size of a file in bytes using the size method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$size = Storage::size('file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for Theme Publication in October CMS\nDESCRIPTION: The minimum required JSON configuration in composer.json for publishing an October CMS theme. The package name must end with -theme and include composer/installers as a dependency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/boilerplate-theme\",\n    \"type\": \"october-theme\",\n    \"description\": \"Enter a meaningful description here\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Import View Template\nDESCRIPTION: HTML template for the import page showing the import form with submission button.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->importRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onImportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Import records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Example Layout Template with Page Tag\nDESCRIPTION: A basic layout template that includes the {% page %} tag to render page content and a placeholder for the head section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\ndescription=\"example layout\"\n==\n<html>\n    <head>\n        {% placeholder head %}\n    </head>\n    <body>\n        {% page %}\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Currency Column with Long Format in YAML\nDESCRIPTION: Configuration for currency column using the long format display option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-currency.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Loan amount\n    type: currency\n    format: long\n```\n\n----------------------------------------\n\nTITLE: Disabling Navigation Completely\nDESCRIPTION: Configuration for completely disabling navigation for a blueprint.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/navigation.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation: false\n```\n\n----------------------------------------\n\nTITLE: Configuration Value Comparison\nDESCRIPTION: Example showing how plugin and package configuration values are equivalent after transfer.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/using-laravel-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nConfig::get('purifier.encoding') === Config::get('acme.blog::purifier.encoding');\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Twig Functions\nDESCRIPTION: Functions can accept arguments to customize their behavior, similar to standard programming functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/templating.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{{ dump(variable) }}\n```\n\n----------------------------------------\n\nTITLE: Using config() Helper in PHP\nDESCRIPTION: The config function gets or sets the value of a configuration variable. It supports dot notation for accessing nested configuration values and can set runtime configuration by passing an array of key/value pairs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_46\n\nLANGUAGE: php\nCODE:\n```\n$value = config('app.timezone');\n\n$value = config('app.timezone', $default);\n\nconfig(['app.debug' => true]);\n```\n\n----------------------------------------\n\nTITLE: Database Schema for Has Many Through Relationship\nDESCRIPTION: SQL table structure showing the required columns for implementing a Has Many Through relationship between Country, User, and Post models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\ncountries\n    id - integer\n    name - string\n\nusers\n    id - integer\n    country_id - integer\n    name - string\n\nposts\n    id - integer\n    user_id - integer\n    title - string\n```\n\n----------------------------------------\n\nTITLE: Injecting Raw JavaScript Markup Using Twig\nDESCRIPTION: Shows how to inject raw JavaScript markup using the scripts placeholder and put tag in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put scripts %}\n    <script type=\"text/javascript\" src=\"/themes/demo/assets/js/menu.js\"></script>\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Named URL Parameters in October CMS Twig Template\nDESCRIPTION: This snippet shows how to access a named 'tab' URL parameter in an October CMS page using this.param. It demonstrates conditional rendering based on the parameter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-param.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\nurl = \"/account/:tab\"\n==\n{% if this.param.tab == 'details' %}\n\n    <p>Here are all your details</p>\n\n{% elseif this.param.tab == 'history' %}\n\n    <p>You are viewing a blast from the past</p>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Using Default Values with Placeholder Function\nDESCRIPTION: Demonstrates providing a fallback value when accessing a placeholder variable that might not be set.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<title>{{ placeholder('pageTitle', this.page.meta_title) }}</title>\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Visible Attributes\nDESCRIPTION: Demonstrates how to specify which attributes should be included in serialization using the $visible property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * The attributes that should be visible in arrays.\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable in Apache Configuration\nDESCRIPTION: Example of overriding an environment variable at the server level using Apache configuration, which takes precedence over .env file values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: apache\nCODE:\n```\nSetEnv DB_CONNECTION \"mysql\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Orphaned Bindings in PHP\nDESCRIPTION: Demonstrates how to clean up uncommitted bindings older than a specified number of days.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nOctober\\Rain\\Database\\Models\\DeferredBinding::cleanUp(1);\n```\n\n----------------------------------------\n\nTITLE: Installing Flysystem S3 Package for Amazon S3 Support in October CMS\nDESCRIPTION: Command to install the Flysystem AWS S3 package which is required before using Amazon S3 with October CMS Media Manager.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/providers.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3 \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination with Model Results\nDESCRIPTION: Example demonstrating the simplePaginate method on model queries for more efficient pagination with only 'Next' and 'Previous' links.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/pagination.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon SES Dependencies\nDESCRIPTION: Command to install AWS SDK for PHP via Composer for Amazon SES integration\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/mail-config.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require aws/aws-sdk-php\n```\n\n----------------------------------------\n\nTITLE: Adding Toolbar Button Separators in YAML\nDESCRIPTION: Shows how to add separators between groups of toolbar buttons using the double-pipe character. This helps organize the toolbar visually.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntoolbarButtons: bold|italic|underline||insertPageLink||undo|redo||clearFormatting\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Tag for Release Versioning\nDESCRIPTION: Bash command to create a new Git tag with an annotation and message, which is part of the release process for October CMS packages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit tag -a v2.0.1 -m \"Version 2 is here!\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Artisan Commands via Cron\nDESCRIPTION: Example of running a specific plugin command (campaign:run) via the command line. This would typically be added to a cron job to run at defined intervals.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/scheduler.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan campaign:run\n```\n\n----------------------------------------\n\nTITLE: Setting Secondary Navigation Item\nDESCRIPTION: Creates a secondary navigation item by setting a parent reference to a primary navigation item using handle or UUID.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    parent: <handle|uuid>\n```\n\n----------------------------------------\n\nTITLE: Apache Environment Variable Configuration\nDESCRIPTION: Apache configuration to set the APP_ENV environment variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_7\n\nLANGUAGE: apache\nCODE:\n```\nSetEnv APP_ENV \"dev\"\n```\n\n----------------------------------------\n\nTITLE: Parsing Content as String in Twig\nDESCRIPTION: Demonstrates the use of the |content and |md filters to parse HTML strings and Markdown content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.content|content }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.markdown_content|md|content }}\n```\n\n----------------------------------------\n\nTITLE: Handling Page Execution Cycle in OctoberCMS Components\nDESCRIPTION: Shows how to participate in the page execution cycle by overriding the onRun method in a component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    // This code will be executed when the page or layout is\n    // loaded and the component is attached to it.\n\n    $this->page['var'] = 'value'; // Inject some variable to the page\n}\n```\n\n----------------------------------------\n\nTITLE: Targeting Component Event Handlers in October CMS\nDESCRIPTION: Example showing how to reference an event handler defined in a specific component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ request: 'myComponent::onHandleForm' }) }}\n```\n\n----------------------------------------\n\nTITLE: Pushing Emails to Specific Queues in PHP\nDESCRIPTION: Shows how to specify a particular queue for pushing email messages using the 'queueOn' and 'laterOn' methods in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/mail.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nMail::queueOn('queue-name', 'acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n\nMail::laterOn('queue-name', 5, 'acme.blog::mail.welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Extra Data\nDESCRIPTION: Shows how to send additional data along with the form request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/javascript-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {data: {value: 55}})\n```\n\n----------------------------------------\n\nTITLE: Accessing Controller Variables in View File\nDESCRIPTION: Shows how to access variables in a view that were passed from the controller using the $vars property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/controllers-ajax.md#2025-04-16_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<p>The variable value is <?= $myVariable ?></p>\n```\n\n----------------------------------------\n\nTITLE: Switching Active Theme\nDESCRIPTION: Command to change the active theme used by the website to the specified theme directory name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:use rainlab-vanilla\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component as a Partial in October CMS\nDESCRIPTION: This code demonstrates that rendering a component is equivalent to rendering its default partial. The blog component's default.htm partial is rendered using the partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[blog]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'blog::default' %}\n```\n\n----------------------------------------\n\nTITLE: Checking String Start in PHP\nDESCRIPTION: The starts_with function determines if the given string begins with the given value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n$value = starts_with('The cow goes moo', 'The');\n\n// true\n```\n\n----------------------------------------\n\nTITLE: Using the tapEach Method with LazyCollection in PHP\nDESCRIPTION: This example shows the tapEach method on LazyCollection which only calls the given callback as items are being pulled out of the collection one by one, unlike the each method which processes all items immediately.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_86\n\nLANGUAGE: php\nCODE:\n```\n$lazyCollection = LazyCollection::times(INF)->tapEach(function ($value) {\n    dump($value);\n});\n\n// Nothing has been dumped so far...\n\n$array = $lazyCollection->take(3)->all();\n\n// 1\n// 2\n// 3\n```\n\n----------------------------------------\n\nTITLE: Simplified Build Version Asset Injection in October CMS Component\nDESCRIPTION: Demonstrates a shortened syntax for adding a build version to an injected JavaScript asset using a string parameter instead of an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function onRun()\n{\n    $this->addJs('/plugins/acme/blog/assets/javascript/blog-controls.js', 'Acme.Test');\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Validation to Models\nDESCRIPTION: Example of adding custom validation logic to a model by binding to the beforeValidate event and throwing a ValidationException when validation fails.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/extending.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nUser::extend(function ($model) {\n    $model->bindEvent('model.beforeValidate', function () use ($model) {\n        if (!$model->billing_first_name) {\n            throw new \\ValidationException(['billing_first_name' => 'First name is required']);\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Currency Plugin via Artisan Command\nDESCRIPTION: Shows the command to install the Currency plugin, which is required for the |currency filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Responsiv.Currency\n```\n\n----------------------------------------\n\nTITLE: Creating List Report Widget Markup in October CMS\nDESCRIPTION: This HTML snippet shows how to create a list-style report widget in October CMS. It includes a table with data on page views and percentages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/report-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Top pages</h3>\n\n    <div class=\"table-container\">\n        <table class=\"table data\" data-provides=\"rowlink\">\n            <thead>\n                <tr>\n                    <th><span>Page URL</span></th>\n                    <th><span>Pageviews</span></th>\n                    <th><span>% Pageviews</span></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>/</td>\n                    <td>90</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"90%\"></div>\n                            <a href=\"/\">90%</a>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>/docs</td>\n                    <td>10</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"10%\"></div>\n                            <a href=\"/docs\">10%</a>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Conditional Abort with 404 Response in Twig\nDESCRIPTION: Demonstrates how to conditionally abort a request with a 404 response code when a record is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-abort.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% if record.notFound %}\n    {% do abort(404) %}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Installing Theme to Custom Directory\nDESCRIPTION: Command to download and install a theme from the marketplace to a custom directory within the themes folder.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:install AuthorName.ThemeName my-theme\n```\n\n----------------------------------------\n\nTITLE: Import Model Definition in PHP\nDESCRIPTION: Example implementation of an import model class that extends Backend\\Models\\ImportModel to handle data import logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/import-export.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass SubscriberImport extends \\Backend\\Models\\ImportModel\n{\n    /**\n     * @var array The rules to be applied to the data.\n     */\n    public $rules = [];\n\n    public function importData($results, $sessionKey = null)\n    {\n        foreach ($results as $row => $data) {\n\n            try {\n                $subscriber = new Subscriber;\n                $subscriber->fill($data);\n                $subscriber->save();\n\n                $this->logCreated();\n            }\n            catch (\\Exception $ex) {\n                $this->logError($row, $ex->getMessage());\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Field in YAML for OctoberCMS\nDESCRIPTION: This code demonstrates how to create a password field in YAML format for OctoberCMS forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nuser_password:\n    label: Password\n    type: password\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs-to Relation\nDESCRIPTION: YAML configuration for a 'person' belongs-to relation, defining view and manage forms with specific toolbar buttons for linking/unlinking the relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/relations.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config\n# ===================================\n\nperson:\n    label: Person\n    view:\n        form: $/acme/user/models/person/fields.yaml\n        toolbarButtons: link|unlink\n    manage:\n        form: $/acme/user/models/person/fields.yaml\n        list: $/acme/user/models/person/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the built-in PHP development server for local development.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/installation.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Form Progress Detection\nDESCRIPTION: CSS selector for detecting form-specific AJAX progress.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/loaders.md#2025-04-16_snippet_10\n\nLANGUAGE: css\nCODE:\n```\nform[data-ajax-progress] {\n    /* The form is loading */\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filters with Arguments in Twig\nDESCRIPTION: Demonstrates how to pass arguments to Twig filters, extending their functionality with additional parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/templating.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ price|currency('USD') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache .htaccess for October CMS\nDESCRIPTION: This snippet shows how to modify the .htaccess file for Apache to properly handle October CMS routing, including adjustments for subdirectory installations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_0\n\nLANGUAGE: apache\nCODE:\n```\n##\n## You may need to uncomment the following line for some hosting environments,\n## if you have installed to a subdirectory, enter the name here also.\n##\n# RewriteBase /\n\n# For subdirectory installations:\n# RewriteBase /mysubdirectory/\n```\n\n----------------------------------------\n\nTITLE: Prepending and Appending to Files\nDESCRIPTION: Examples of how to insert content at the beginning or end of a file using prepend and append methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nStorage::prepend('file.log', 'Prepended Text');\n\nStorage::append('file.log', 'Appended Text');\n```\n\n----------------------------------------\n\nTITLE: Defining Chained Model Scope in PHP\nDESCRIPTION: This snippet demonstrates how to define a model scope that returns a query object for chaining. The scope is prefixed with 'apply' to indicate it's being applied to the query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\npublic function scopeApplyUser($query, $user)\n{\n    return $query->where('user_id', $user->id);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Flash Messages in PHP AJAX Handler\nDESCRIPTION: PHP code showing how to set a flash message in an AJAX event handler that will be displayed after a successful request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction onSuccess()\n{\n    Flash::success('You did it!');\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the newly created project directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/setup/installation.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd myoctober\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Picker Widget in YAML for October CMS\nDESCRIPTION: Demonstrates how to set up a date picker widget in a YAML configuration file. The widget allows selecting dates and times, with options for specifying the mode, format, and various display settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npublished_at:\n    label: Â∑≤ÂèëË°®\n    type: datepicker\n    mode: date\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Settings Controller in October CMS PHP\nDESCRIPTION: Demonstrates how to register a settings page that links to a custom backend controller URL instead of a model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'location' => [\n            'label' => 'Locations',\n            'description' => 'Manage available user countries and states.',\n            'category' => 'Users',\n            'icon' => 'icon-globe',\n            'url' => Backend::url('acme/user/locations'),\n            'order' => 500,\n            'keywords' => 'geography place placement'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of |theme Filter\nDESCRIPTION: Shows the resulting HTML output when using the |theme filter, assuming the website is https://octobercms.com and the active theme is 'website'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"text/javascript\" src=\"http://october.com/themes/website/assets/js/menu.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding Query Constraints to Models in October CMS PHP\nDESCRIPTION: Shows how to add constraints to model queries using the query builder methods before retrieving results with the 'get' method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n$flights = Flight::where('active', 1)\n    ->orderBy('name', 'desc')\n    ->take(10)\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Custom Display Attributes\nDESCRIPTION: Example showing how to customize the display attributes for selected records using nameFrom and descriptionFrom properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-recordfinder.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    nameFrom: name\n    descriptionFrom: email\n```\n\n----------------------------------------\n\nTITLE: Using Behaviors in October CMS\nDESCRIPTION: Example showing how Behaviors are implemented in an Extendable class using the $implement property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass MyClass extends \\October\\Rain\\Extension\\Extendable\n{\n    public $implement = [\n        \\October\\Rain\\UtilityFunctions::class,\n        \\October\\Rain\\DeferredBinding::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Form-Encoded POST Request\nDESCRIPTION: Demonstrates sending a POST request with form-encoded data using the asForm() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/http.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nHttp::asForm()->post('https://octobercms.com', [\n    'name' => 'Jeff'\n]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables Within a Partial in Twig\nDESCRIPTION: Illustrates how to access variables passed to a partial within the partial's content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {{ country }}, city: {{ city }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Setting a License Key for October CMS Project\nDESCRIPTION: Command to set the license key for the current installation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Using Contextual Partial Reference in Twig\nDESCRIPTION: Example of using the contextual partial tag syntax to reference a component partial in a Twig template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{% partial '@pagination' %}\n```\n\n----------------------------------------\n\nTITLE: Number Input Generation\nDESCRIPTION: Shows how to generate a number input field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::number('name', 'value') ?>\n```\n\n----------------------------------------\n\nTITLE: Creating a Validatable Form with AJAX Request\nDESCRIPTION: HTML markup for a form that uses the data-request-validate attribute to enable validation features when submitting via AJAX.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request=\"onSubmit\"\n    data-request-validate>\n    <!-- ... -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial in Twig\nDESCRIPTION: Example of how to render a partial within a page, layout, or another partial using the {% partial %} Twig tag. The tag requires the partial name without the file extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Polymorphic Types with morphMap in October CMS\nDESCRIPTION: This code shows how to set up custom polymorphic types using the morphMap method. This decouples the database from the application structure by using custom identifiers instead of class names.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\Relations\\Relation;\n\nRelation::morphMap([\n    'staff' => \\Acme\\Blog\\Models\\Staff::class,\n    'product' => \\Acme\\Blog\\Models\\Product::class,\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Radio List Field with Descriptions in YAML\nDESCRIPTION: Defines a radio button list field with descriptions in a form using YAML configuration. The 'type' property is set to 'radio' and includes 'options' with labels and descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    label: Access Level\n    type: radio\n    options:\n        all: [All, Guests and customers will be able to access this page.]\n        registered: [Registered only, Only logged in member will be able to access this page.]\n        guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multisite Features in PHP\nDESCRIPTION: Configuration example for enabling or disabling multisite features in the config/multisite.php file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'features' => [\n    'cms_maintenance_setting' => false,\n    // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Targeting the Develop Branch in Composer Configuration\nDESCRIPTION: Example JSON for targeting the develop branch in the composer.json file to receive bleeding edge updates. This approach is not recommended for production environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/updating-october.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"october/all\": \"dev-develop\",\n\"october/rain\": \"dev-develop\",\n```\n\n----------------------------------------\n\nTITLE: Configuring List Filters in October CMS\nDESCRIPTION: YAML configuration for filter scopes in a list filter definition file. Shows various filter types including category selection, status groups, checkboxes, and date-based filters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n# Filter Scope Definitions\n# ===================================\n\nscopes:\n\n    category:\n        label: Category\n        modelClass: Acme\\Blog\\Models\\Category\n        conditions: category_id in (:filtered)\n        nameFrom: name\n\n    status:\n        label: Status\n        type: group\n        conditions: status in (:filtered)\n        options:\n            pending: Pending\n            active: Active\n            closed: Closed\n\n    published:\n        label: Hide published\n        type: checkbox\n        default: 1\n        conditions: is_published <> true\n\n    approved:\n        label: Approved\n        type: switch\n        default: 2\n        conditions:\n            - is_approved <> true\n            - is_approved = true\n\n    created_at:\n        label: Date\n        type: date\n        conditions: created_at >= ':filtered'\n\n    published_at:\n        label: Date\n        type: daterange\n        conditions: created_at >= ':after' AND created_at <= ':before'\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Updates in OctoberCMS\nDESCRIPTION: Configuration setting in cms.php to enable bleeding edge updates for development purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'edgeUpdates' => false,\n```\n\n----------------------------------------\n\nTITLE: Configuring ImportExportController in YAML\nDESCRIPTION: Demonstrates the YAML configuration for the ImportExportController behavior. It includes settings for both import and export operations, specifying the model classes and list configurations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config_import_export.yaml\nimport:\n    title: Import Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberImport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n\nexport:\n    title: Export Subscribers\n    modelClass: Acme\\Campaign\\Models\\SubscriberExport\n    list: $/acme/campaign/models/subscriber/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Cache\nDESCRIPTION: DynamoDB cache configuration for table name setting using environment variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/cache.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'dynamodb' => [\n    'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving GET Request Variables in PHP\nDESCRIPTION: The get function obtains an input item from the request, restricted to GET variables only.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_33\n\nLANGUAGE: PHP\nCODE:\n```\n$value = get('key', $default = null)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Markup for Top Pages Widget in October CMS\nDESCRIPTION: Example partial HTML markup for a top pages widget that displays a table with page URLs, pageviews, and percentage bars.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Top pages</h3>\n\n    <div class=\"table-container\">\n        <table class=\"table data\" data-provides=\"rowlink\">\n            <thead>\n                <tr>\n                    <th><span>Page URL</span></th>\n                    <th><span>Pageviews</span></th>\n                    <th><span>% Pageviews</span></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>/</td>\n                    <td>90</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"90%\"></div>\n                            <a href=\"/\">90%</a>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>/docs</td>\n                    <td>10</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"10%\"></div>\n                            <a href=\"/docs\">10%</a>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Control Initialization Method\nDESCRIPTION: Implementation of the init method for loading default configuration and setting up child elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/hot-controls.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass extends oc.ControlBase {\n    init() {\n        // Establish the control before running logic\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct SQL Selection for List Columns in YAML\nDESCRIPTION: Demonstrates using a custom SQL SELECT statement to create a list column in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/list-columns.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Creating Related Models Through Relationships\nDESCRIPTION: This code shows how to create a related model using the create method, which accepts an array of attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::find(1);\n\n$comment = $post->comments()->create([\n    'message' => 'A new comment.',\n]);\n```\n\n----------------------------------------\n\nTITLE: Many-to-Many Relation with Pivot Data Configuration\nDESCRIPTION: YAML configuration for a many-to-many relationship with pivot data (users with roles having expiry date). Shows how to configure pivot form fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Relation Behavior Config[ÂÖ≥Á≥ªË°å‰∏∫ÈÖçÁΩÆ]\n# ===================================\n\nroles:\n    label: ËßíËâ≤\n    view:\n        list: $/acme/user/models/role/columns.yaml\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n    pivot:\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory in October CMS\nDESCRIPTION: Example of creating a directory including any needed sub-directories using the makeDirectory method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/filesystem-cdn.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nStorage::makeDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Including Additional Data in AJAX Response\nDESCRIPTION: Shows how to include additional custom data in the AJAX response using the withVars() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% do response(ajaxHandler('onResetPassword').withVars({ 'token': 'foobar' })) %}\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users from Root to Installation Page in October CMS Documentation\nDESCRIPTION: This Markdown code uses a custom Redirect component to automatically forward users from the October CMS 1.0 documentation root to the setup/installation section. This ensures users are directed to the proper starting point in the documentation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"setup/installation\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Blueprints by Handle in INI\nDESCRIPTION: Shows how to reference a blueprint using its handle in INI syntax. This approach is used when configuring Tailor components in CMS pages or layouts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[section blog]\nhandle = \"Blog\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Basic Component Usage in October CMS Page\nDESCRIPTION: This code shows a basic example of initializing and rendering a blog component in an October CMS page. The component is defined in the configuration section and rendered using the component tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[blog]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'blog' %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Column in October CMS (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure a 'text' type column in October CMS. It sets up a 'full_name' column with a label 'Full Name' and specifies the type as 'text', which will display left-aligned text in the list view.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-text.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    type: text\n```\n\n----------------------------------------\n\nTITLE: ÂÆö‰πâÂ∏¶ÈªòËÆ§ÂÜÖÂÆπÁöÑÂç†‰ΩçÁ¨¶\nDESCRIPTION: Â±ïÁ§∫Â¶Ç‰ΩïÂú®Â∏ÉÂ±ÄÊ®°Êùø‰∏≠ÂàõÂª∫Â∏¶ÊúâÈªòËÆ§ÂÜÖÂÆπÁöÑÂç†‰ΩçÁ¨¶Ôºå‰ª•‰æøÂú®È°µÈù¢Êú™Êèê‰æõÂÜÖÂÆπÊó∂ÊòæÁ§∫„ÄÇ\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-placeholder.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% placeholder sidebar default %}\n    <p><a href=\"/contacts\">Contact us</a></p>\n{% endplaceholder %}\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme Configuration in Twig\nDESCRIPTION: This example shows how to access theme configuration values stored in the 'theme.yaml' file using the 'config' property of 'this.theme'. It retrieves the description from the theme configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<meta name=\"description\" content=\"{{ this.theme.config.description }}\">\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Tree Structure in October CMS Models\nDESCRIPTION: Shows how to convert a collection of tree models into a nested structure using the toNested method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nCategory::all()->toNested();\n```\n\n----------------------------------------\n\nTITLE: Persisting Page Elements with Turbo Router in HTML\nDESCRIPTION: Demonstrates how to mark elements as permanent so they are not refreshed during PJAX updates, using the 'data-turbo-permanent' attribute and a unique 'id'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"main-navigation\" data-turbo-permanent>...</div>\n```\n\n----------------------------------------\n\nTITLE: AJAX Form with File Uploads\nDESCRIPTION: Demonstrates how to enable file uploads in an AJAX request by using the data-request-files attribute on a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\" data-request-files>\n    <input type=\"file\" name=\"photo\" accept=\"image/*\" />\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Components in Twig\nDESCRIPTION: Illustrates how to pass variables to components when rendering them in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' maxItems='7' %}\n```\n\n----------------------------------------\n\nTITLE: Sending Additional POST Parameters with AJAX Request in HTML\nDESCRIPTION: This snippet shows how to send additional POST parameters with an AJAX request using data attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onUpdate\" data-request-data=\"{ mode: 'update' }\">\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme ID in Twig Templates\nDESCRIPTION: Uses the theme.id property to generate a CSS-friendly class name based on the theme directory name. This is useful for theme-specific styling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/this-theme.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"theme-{{ this.theme.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Redirecting Within Lifecycle Methods in October CMS\nDESCRIPTION: Example demonstrating how to redirect to an external URL from a lifecycle method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function onStart()\n{\n    return Redirect::to('http://google.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Video Player Partial in OctoberCMS\nDESCRIPTION: This HTML snippet demonstrates a custom video player partial that can be used in OctoberCMS. It includes width, height, controls, and preload attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"{{ src }}\" width=\"320\" height=\"200\" controls preload></video>\n```\n\n----------------------------------------\n\nTITLE: Delaying Job Execution with Carbon in PHP\nDESCRIPTION: Demonstrates delaying job execution using Queue::later method with a Carbon date instance to specify when the job should be processed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$date = Carbon::now()->addMinutes(15);\n\nQueue::later($date, 'SendEmail', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Category Relation Definition\nDESCRIPTION: YAML configuration for defining an inverse relation between categories and posts.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/collection.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nposts:\n    type: entries\n    source: Blog\\Post\n    inverse: categories\n    hidden: true\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in a Partial\nDESCRIPTION: Shows how to access variables passed to a partial within the partial's Twig markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/partials.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<p>Country: {{ country }}, city: {{ city }}.</p>\n```\n\n----------------------------------------\n\nTITLE: Using str_upper() Filter for Uppercase Conversion\nDESCRIPTION: Shows how to use the str_upper() filter to convert a string to uppercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\nHello I'm {{ 'Jack'|str_upper }}\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Templating Documentation using Markdown\nDESCRIPTION: Uses a Redirect component to automatically forward users from the markup guide to the templating documentation section.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Markup Guide\n\n<Redirect to=\"templating\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Post from Comment\nDESCRIPTION: Demonstrates how to access the parent Post model through a Comment model using the dynamic property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$comment = Comment::find(1);\n\necho $comment->post->title;\n```\n\n----------------------------------------\n\nTITLE: Obfuscating Email Addresses with html_email()\nDESCRIPTION: Demonstrates the html_email() function which obfuscates email addresses to help prevent spam by encoding the characters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/function-html.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_email('a@b.c') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring TimeTense Column in October CMS List\nDESCRIPTION: Configuration for a timetense column which displays time using grammatical tense based on the current date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: timetense\n```\n\n----------------------------------------\n\nTITLE: Configuring Section, Partial, and Hint Fields in October CMS\nDESCRIPTION: Examples of configuring structural form elements including section headers, partial fields, and hint containers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nuser_details_section:\n    label: User details\n    type: section\n    comment: This section contains details about the user.\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: $/acme/blog/models/comments/_content_field.htm\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: hint\n    path: content_field\n```\n\n----------------------------------------\n\nTITLE: Theme Localization in PHP\nDESCRIPTION: PHP localization file structure for defining theme-specific language strings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/themes/development.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php return [\n    'options' => [\n        'website_name' => 'OctoberCMS'\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Running Code Before AJAX Handlers in Page/Layout\nDESCRIPTION: Shows how to define an onInit function in a page or layout to run code before any AJAX handler executes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nfunction onInit()\n{\n    // From a page or layout PHP code section\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Input with Dot Notation in October CMS\nDESCRIPTION: How to access array input values using dot notation, which is useful when working with forms that have array inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::get('products.0.name');\n```\n\n----------------------------------------\n\nTITLE: AJAX Partial Include in Twig\nDESCRIPTION: Simple Twig markup to include an AJAX-enabled partial on a page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/polling.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' %}\n```\n\n----------------------------------------\n\nTITLE: Form Opening with Attributes in Twig\nDESCRIPTION: Demonstrates adding HTML attributes to form tag using form_open() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open({ class: 'form-horizontal' }) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Command Options in PHP for OctoberCMS\nDESCRIPTION: This snippet shows how to define options for a console command in OctoberCMS. It demonstrates the structure of the getOptions method and how to specify optional options with default values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/development.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Get the console command options.\n * @return array\n */\nprotected function getOptions()\n{\n    return [\n        ['example', null, InputOption::VALUE_OPTIONAL, 'An example option.', null],\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Component with an Alias in October CMS\nDESCRIPTION: This code shows how to render a component using its alias in an October CMS template. When a component has been assigned an alias, you must use the alias name in the component tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodoAlias' %}\n```\n\n----------------------------------------\n\nTITLE: Adding Toolbar to List Configuration in YAML\nDESCRIPTION: Demonstrates how to add a toolbar with buttons and search functionality to the List Behavior configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntoolbar:\n    buttons: list_toolbar\n    search:\n        prompt: Find records\n```\n\n----------------------------------------\n\nTITLE: Widget Controller Binding\nDESCRIPTION: Shows how to bind a widget to a backend controller in the constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/widgets.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    $myWidget = new MyWidgetClass($this);\n    $myWidget->alias = 'myWidget';\n    $myWidget->bindToController();\n}\n```\n\n----------------------------------------\n\nTITLE: Theme Variable Usage in Twig\nDESCRIPTION: Example of accessing theme configuration variables in Twig templates using the this.theme variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/themes/development.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<h1>Welcome to {{ this.theme.site_name }}!</h1>\n```\n\n----------------------------------------\n\nTITLE: Registering Global Variables - PHP\nDESCRIPTION: Shows how to register global variables that will be available to all content blocks using View::share method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/content.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nView::share('site_name', 'OctoberCMS');\n```\n\n----------------------------------------\n\nTITLE: Checking if Turbo Router is Enabled\nDESCRIPTION: This conditional statement checks if the Turbo Router is enabled and available for use before performing PJAX-based navigation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nif (oc.useTurbo && oc.useTurbo()) {\n    // Use PJAX\n}\n```\n\n----------------------------------------\n\nTITLE: Installing S3 Driver Prerequisites with Composer (Bash)\nDESCRIPTION: Command to install the Flysystem S3 package via Composer, which is required before using the S3 driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3 \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Using redirect() Response Helper in PHP\nDESCRIPTION: The redirect function returns an instance of the redirector to create redirect responses. This allows redirecting users to different pages within the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/helpers.md#2025-04-16_snippet_52\n\nLANGUAGE: php\nCODE:\n```\nreturn redirect('/home');\n```\n\n----------------------------------------\n\nTITLE: Section Field with Simple Display Mode in OctoberCMS\nDESCRIPTION: Shows how to configure a section field with simple display mode instead of the default heading mode. This mode displays the section as a simple comment rather than a heading.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-section.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_section1:\n    type: section\n    label: These fields are used to calculate some other fields.\n    displayMode: simple\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Mode in October CMS\nDESCRIPTION: Sets the debug configuration option in the app.php file to control the amount of error detail displayed through the browser. For development environments, this should be set to true, while in production it should always be false.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/errors-logging.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Application Debug Mode\n|--------------------------------------------------------------------------\n|\n| When your application is in debug mode, detailed error messages with\n| stack traces will be shown on every error that occurs within your\n| application. If disabled, a simple generic error page is shown.\n|\n*/\n\n'debug' => false,\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rule Object Class in PHP\nDESCRIPTION: Implementation of a Rule object that validates if a value is uppercase, including passes, validate, and message methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Contracts\\Validation\\Rule;\n\nclass Uppercase implements Rule\n{\n    /**\n     * Determine if the validation rule passes.\n     *\n     * @param  string  $attribute\n     * @param  mixed  $value\n     * @return bool\n     */\n    public function passes($attribute, $value)\n    {\n        return strtoupper($value) === $value;\n    }\n\n    /**\n     * Validation callback method.\n     *\n     * @param  string  $attribute\n     * @param  mixed  $value\n     * @param  array  $params\n     * @return bool\n     */\n    public function validate($attribute, $value, $params)\n    {\n        return $this->passes($attribute, $value);\n    }\n\n    /**\n     * Get the validation error message.\n     *\n     * @return string\n     */\n    public function message()\n    {\n        return 'The :attribute must be uppercase.';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Query Scopes in PHP using OctoberCMS Model\nDESCRIPTION: This snippet demonstrates how to define query scopes in a model class for reusable query constraints.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Scope a query to only include popular users.\n     */\n    public function scopePopular($query)\n    {\n        return $query->where('votes', '>', 100);\n    }\n\n    /**\n     * Scope a query to only include active users.\n     */\n    public function scopeActive($query)\n    {\n        return $query->where('is_active', 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Page URL Generation\nDESCRIPTION: Example of generating a page URL in PHP using pageUrl() method and passing it to the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?\\nfunction onStart()\\n{\\n    $this['newsPage'] = $this->pageUrl('blog/overview');\\n}\\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ newsPage }}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Basic Control Events\nDESCRIPTION: Shows how to dispatch custom events from a control that other code can listen for.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\noc.registerControl('hello', class extends oc.ControlBase {\n    connect() {\n        this.dispatch('ready');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Top Pages Report Widget HTML Markup\nDESCRIPTION: HTML markup for a table-based report widget that displays top pages with pageviews and progress bars.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/widgets.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Top pages</h3>\n\n    <div class=\"table-container\">\n        <table class=\"table data\" data-provides=\"rowlink\">\n            <thead>\n                <tr>\n                    <th><span>Page URL</span></th>\n                    <th><span>Pageviews</span></th>\n                    <th><span>% Pageviews</span></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>/</td>\n                    <td>90</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"90%\"></div>\n                            <a href=\"/\">90%</a>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>/docs</td>\n                    <td>10</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"10%\"></div>\n                            <a href=\"/docs\">10%</a>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Reverse Routing with Parameters\nDESCRIPTION: Demonstrates how to use reverse routing with the |page filter by passing parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page({ post_id: 10 }) }}\">\\n    Blog post #10\\n</a>\n```\n\n----------------------------------------\n\nTITLE: Filtering Collection with Rejection in PHP\nDESCRIPTION: The reject method filters the collection using a callback. It removes items for which the callback returns true, creating a new filtered collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4]);\n\n$filtered = $collection->reject(function ($item) {\n    return $item > 2;\n});\n\n$filtered->all();\n\n// [1, 2]\n```\n\n----------------------------------------\n\nTITLE: Dependent Scope Definition in YAML\nDESCRIPTION: YAML configuration for filter scopes with dependencies, showing how to define a checkbox that controls the visibility of another scope.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filters.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndisable_roles:\n    type: checkbox\n    label: Disable Roles\n\nroles:\n    type: text\n    label: Role\n    dependsOn: disable_roles\n```\n\n----------------------------------------\n\nTITLE: Using the ViewBag Component in October CMS\nDESCRIPTION: Shows how to use the special ViewBag component to define ad hoc properties for use in markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\ntitle = \"About\"\nurl = \"/about.html\"\nlayout = \"default\"\n\n[viewBag]\nactiveMenu = \"about\"\n==\n```\n\n----------------------------------------\n\nTITLE: Creating New Laravel Project\nDESCRIPTION: Command to create a new Laravel 9.0+ project installation\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel:^9.0 mylaravel\n```\n\n----------------------------------------\n\nTITLE: Enabling Strict Mode in MySQL Configuration\nDESCRIPTION: This SQL configuration snippet demonstrates how to enable STRICT_TRANS_TABLES mode in MySQL for strict data type validation. This can be added to my.cnf (Unix) or my.ini (Windows) file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nsql_mode=STRICT_TRANS_TABLES\n```\n\n----------------------------------------\n\nTITLE: Removing Related Models from a Relationship\nDESCRIPTION: This snippet demonstrates how to remove a model from a relationship using the remove method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$post->comments()->remove($comment);\n```\n\n----------------------------------------\n\nTITLE: Defining Checkbox Property in PHP\nDESCRIPTION: Demonstrates how to define a checkbox property in a component using the defineProperties method. The example shows setting up an 'enabled' checkbox with a default value of true.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-checkbox.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'enabled' => [\n            'title' => 'Enabled',\n            'type' => 'checkbox',\n            'default' => true\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Raw Filter in Twig Expressions\nDESCRIPTION: Shows the proper way to use the raw filter in ternary expressions and variable assignments, highlighting potential pitfalls and correct usage patterns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-raw.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% set hello = '<strong>Hello</strong>' %}\n{% set hola = '<strong>Hola</strong>' %}\n\n{{ false ? '<strong>Hola</strong>' : hello|raw }}\n\n{# The above will not render the same as #}\n{{ false ? hola : hello|raw }}\n\n{# But renders the same as #}\n{{ (false ? hola : hello)|raw }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reorder Behavior in YAML\nDESCRIPTION: YAML configuration for the Reorder behavior, defining the title, name attribute, model class, and toolbar settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/reorder.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  Reorder Behavior Config\n# ===================================\n\n# Reorder Title\ntitle: Reorder Categories\n\n# Attribute name\nnameFrom: title\n\n# Model Class name\nmodelClass: Acme\\Shop\\Models\\Category\n\n# Toolbar widget configuration\ntoolbar:\n    # Partial for toolbar buttons\n    buttons: reorder_toolbar\n```\n\n----------------------------------------\n\nTITLE: Configuring Update Page in YAML\nDESCRIPTION: Configuration options for the Update page in Form Behavior. It includes settings for title and redirect.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nupdate:\n    title: Edit Blog Post\n    redirect: acme/blog/posts\n```\n\n----------------------------------------\n\nTITLE: Enabling AJAX for Snippets in PHP\nDESCRIPTION: Shows how to enable AJAX handlers for snippets by setting the snippetAjax property in the component class definition.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/snippets.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function componentDetails()\n{\n    return [\n        // ...\n        'snippetAjax' => true\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Text Inspector Output Format in JSON\nDESCRIPTION: Example of the JSON output format generated by the text inspector type showing a simple description value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-text.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"description\": \"This is a description\"\n```\n\n----------------------------------------\n\nTITLE: Using {% verbatim %} Tag with AngularJS in Twig\nDESCRIPTION: Illustrates how to use the {% verbatim %} tag to differentiate between Twig and AngularJS templating syntax, allowing AngularJS expressions to be preserved while Twig processes its own variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/verbatim.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello {{ name }}, this is parsed by Twig</p>\n\n{% verbatim %}\n    <p>Hello {{ name }}, this is parsed by AngularJS</p>\n{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown to HTML in PHP\nDESCRIPTION: Demonstrates how to use the Markdown facade to parse Markdown syntax into HTML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$html = Markdown::parse($markdown);\n```\n\n----------------------------------------\n\nTITLE: Selectable Column with Explicit Options in YAML\nDESCRIPTION: Example of a selectable column with options defined directly in the column configuration. Maps 'pending' and 'active' values to their display labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-selectable.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Status\n    type: selectable\n    options:\n        pending: Pending\n        active: Active\n```\n\n----------------------------------------\n\nTITLE: Using Component Variables in Resources Component\nDESCRIPTION: Demonstrates how to use component variables in the resources component. It sets a 'authorIdPage' variable using the 'author.id' from a 'section' component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/resources.md#2025-04-16_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/author/:slug\"\n\n[section author]\nhandle = \"Blog\\Author\"\nidentifier = \"slug\"\n\n[resources]\nvars[authorIdPage] = 'Author ID is: {{ author.id }}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Request URL Components in October CMS\nDESCRIPTION: Methods for getting the full URL and specific URI segments from the current request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$url = Request::url();\n\n$segment = Request::segment(1);\n```\n\n----------------------------------------\n\nTITLE: Numeric Range Looping in Twig\nDESCRIPTION: Shows how to iterate over a range of numbers using the .. operator in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-for.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% for i in 0..10 %}\n    - {{ i }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Custom Filename in Image Resizing\nDESCRIPTION: Example of specifying a custom SEO-friendly filename when resizing an image.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { filename: 'my-seo-friendly-name' }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Static Class Method for Model Scope in YAML and PHP\nDESCRIPTION: Demonstrates how to use a static PHP class method as a model scope. This approach allows for more flexible and reusable filter logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter-scopes.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmyfilter:\n    label: My Filter\n    type: group\n    modelScope: \"App\\MyCustomClass::applyMyFilter\"\n```\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nclass MyCustomClass\n{\n    public static function applyMyFilter($query, $scope)\n    {\n        return $query->whereIn('my_filter_attribute', (array) $scope->value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Option Groups in Dropdowns\nDESCRIPTION: Shows how to create grouped options in select dropdowns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('animal', [\n    'Cats' => ['leopard' => 'Ë±πÂ≠ê'],\n    'Dogs' => ['spaniel' => 'ÁåéÁä¨'],\n]) ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Array in PHP\nDESCRIPTION: Example of a basic configuration file (config.php) that defines and returns an array with configuration values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/file-settings.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'maxItems' => 10,\n    'display' => 5\n];\n```\n\n----------------------------------------\n\nTITLE: Extending List Filter Scopes Internally\nDESCRIPTION: Demonstrates how to extend list filter scopes from within the controller by overriding the listFilterExtendScopes method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    // ...\n\n    public function listFilterExtendScopes($filter)\n    {\n        $filter->addScopes([...]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Polymorphic Relationships\nDESCRIPTION: PHP code examples showing how to retrieve polymorphic relationships from both the parent and related models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$staff = Staff::find(1);\n\n$photo = $staff->photo\n```\n\n----------------------------------------\n\nTITLE: Installing Required PHP Extensions on Ubuntu\nDESCRIPTION: This Bash command updates the package list and installs all the required PHP extensions for October CMS on Ubuntu. It includes PHP core and various extensions like cURL, XML, GD, JSON, MySQL, SQLite, and ZIP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/installation.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update &&\nsudo apt-get install php php-ctype php-curl php-xml php-fileinfo php-gd php-json php-mbstring php-mysql php-sqlite3 php-zip\n```\n\n----------------------------------------\n\nTITLE: Basic Section Field Implementation in OctoberCMS\nDESCRIPTION: Demonstrates how to implement a basic section field in OctoberCMS forms. This snippet shows how to define a section with a label and comment that represent heading and subheading respectively.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-section.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_section1:\n    type: section\n    label: User details\n    comment: This section contains details about the user.\n```\n\n----------------------------------------\n\nTITLE: Response with Custom Headers\nDESCRIPTION: Shows how to attach multiple headers to a response using method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)\n    ->header('Content-Type', $type)\n    ->header('X-Header-One', 'Header Value')\n    ->header('X-Header-Two', 'Header Value');\n```\n\n----------------------------------------\n\nTITLE: Checking if a Partial Exists in Twig\nDESCRIPTION: Demonstrates how to use the partial() function to check if a partial exists before rendering it, allowing for conditional markup generation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-partial.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% set cardPartial = 'my-cards/' ~ cardCode %}\n\n{% if partial(cardPartial) %}\n    {% partial cardPartial %}\n{% else %}\n    <p>Card not found!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Extra Data\nDESCRIPTION: Shows how to send additional data along with the form request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {data: {value: 55}})\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Nested External Values\nDESCRIPTION: Illustrates how to use dot notation to retrieve deeply nested values from external parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ data.maxItems }}\n==\n```\n\n----------------------------------------\n\nTITLE: Default HTML5 Audio Tag Implementation\nDESCRIPTION: Shows the default HTML5 audio tag used by the Media Manager to render audio files when no custom player is defined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<audio src=\"audio.mp3\" controls></audio>\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Partial in OctoberCMS\nDESCRIPTION: Demonstrates how to render a component partial using the fully qualified name with the Twig partial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'componentName::component-partial' %}\n```\n\n----------------------------------------\n\nTITLE: Fallback Dropdown Options Method\nDESCRIPTION: Generic fallback method for handling dropdown options when specific methods are not defined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-dropdown.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getDropdownOptions($fieldName, $value, $formData)\n{\n    if ($fieldName == 'status') {\n        return ['all' => 'All', ...];\n    }\n    else {\n        return ['' => '-- none --'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Uploaded Files\nDESCRIPTION: Demonstrates how to access files that have been uploaded through forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$file = Input::file('photo');\n```\n\n----------------------------------------\n\nTITLE: PHP Page Type Information Handler\nDESCRIPTION: Implementation of a handler that returns detailed information about supported page types\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-pagefinder.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('cms.pageLookup.getTypeInfo', function($type) {\n    if ($type == 'blog-post') {\n        return [\n            'references' => [\n                11 => 'News',\n                12 => 'Tutorials',\n                13 => 'Philosophy',\n            ],\n            'cmsPages' => Page::withComponent('blogPosts')->all()\n        ];\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Aborting Request with HTTP Status Code in October CMS\nDESCRIPTION: Shows how to abort a request with a specific HTTP status code from anywhere in the application. This immediately raises an exception that is rendered by the exception handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/error-log.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nApp::abort(404);\n```\n\n----------------------------------------\n\nTITLE: Generic AJAX Handler Call\nDESCRIPTION: Example of using the built-in onAjax handler for simple content updates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<button data-request=\"onAjax\">Do nothing</button>\n```\n\n----------------------------------------\n\nTITLE: Radio List Configuration in YAML\nDESCRIPTION: Demonstrates how to configure radio list form fields with simple options and secondary descriptions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    label: Access Level\n    type: radio\n    default: guests\n    options:\n        all: All\n        registered: Registered only\n        guests: Guests only\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_level:\n    label: Access Level\n    type: radio\n    options:\n        all: [All, Guests and customers will be able to access this page.]\n        registered: [Registered only, Only logged in member will be able to access this page.]\n        guests: [Guests only, Only guest users will be able to access this page.]\n```\n\n----------------------------------------\n\nTITLE: Merging Arrays or Collections in PHP\nDESCRIPTION: The merge method merges the given array or collection with the original collection. It handles both string keys and numeric keys differently.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect(['product_id' => 1, 'price' => 100]);\n\n$merged = $collection->merge(['price' => 200, 'discount' => false]);\n\n$merged->all();\n\n// ['product_id' => 1, 'price' => 200, 'discount' => false]\n\n$collection = collect(['Desk', 'Chair']);\n\n$merged = $collection->merge(['Bookcase', 'Door']);\n\n$merged->all();\n\n// ['Desk', 'Chair', 'Bookcase', 'Door']\n```\n\n----------------------------------------\n\nTITLE: Enabling Plugin\nDESCRIPTION: Command to enable a previously disabled plugin, restoring its functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:enable AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Rendering a Custom Theme Partial for Component in October CMS\nDESCRIPTION: This code shows how to render a custom theme partial that contains modified component markup. The 'blog-post' partial contains the component markup that has been customized for the theme.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'blog-post' %}\n```\n\n----------------------------------------\n\nTITLE: Changing File Name when Adding from URL in PHP\nDESCRIPTION: Shows how to change the file name when adding a file attachment from a URL in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/attachments.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$file->fromUrl('https://example.com/uploads/public/path/to/avatar.jpg', 'somefilename.jpg');\n```\n\n----------------------------------------\n\nTITLE: Using d() Function in Twig\nDESCRIPTION: The d() function provides a shorter syntax for debugging with less detailed but more readable output. It recursively dumps variables similar to PHP's dd() function but continues execution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/dump.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ d(user) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ d(variable1, variable2) }}\n```\n\n----------------------------------------\n\nTITLE: Opening Basic Form with URL\nDESCRIPTION: Shows how to open a basic form with a specific URL target using the Form facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['url' => 'foo/bar']) ?>\n    //\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Fields in October CMS\nDESCRIPTION: Shows how to configure switch fields with custom on/off labels and comments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display content\n    type: switch\n    comment: Flick this switch to display content\n    on: myauthor.myplugin::lang.models.mymodel.show_content.on\n    off: myauthor.myplugin::lang.models.mymodel.show_content.off\n```\n\n----------------------------------------\n\nTITLE: Validating Each Element in an Array in PHP\nDESCRIPTION: Shows how to validate each element of an array using the * wildcard notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/validation.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n$validator = Validator::make(Input::all(), [\n    'person.*.email' => 'email|unique:users',\n    'person.*.first_name' => 'required_with:person.*.last_name',\n]);\n```\n\n----------------------------------------\n\nTITLE: Basic Entries Field Configuration in YAML\nDESCRIPTION: Basic configuration for an entries field that links to other entries by UUID or handle.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/content/field-entries.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauthor:\n    label: Author\n    type: entries\n    source: <uuid|handle>\n```\n\n----------------------------------------\n\nTITLE: Using head() Function in PHP\nDESCRIPTION: The head function returns the first element in a given array. It provides a simple way to access the first item without having to use array indexing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$array = [100, 200, 300];\n\n$first = head($array);\n\n// 100\n```\n\n----------------------------------------\n\nTITLE: Record Finder in Tailor with Single Item Limit in YAML\nDESCRIPTION: Configuration for a recordfinder in Tailor that limits the selection to a single item, which defines the relation as belongsTo instead of belongsToMany.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nproducts:\n    label: Products\n    type: recordfinder\n    modelClass: Acme\\Test\\Models\\Tag\n    maxItems: 1\n```\n\n----------------------------------------\n\nTITLE: Implicitly Converting a Model to JSON in PHP\nDESCRIPTION: Shows how casting a model to a string automatically calls the toJson() method, effectively converting the model to JSON format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn (string) $user;\n```\n\n----------------------------------------\n\nTITLE: Listening to Component Events in a CMS Page (PHP)\nDESCRIPTION: Example of how to listen for events fired by a component from within a CMS page using the onInit lifecycle method to bind to the component's local event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/extending.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[topic]\nslug = \"{{ :slug }}\"\n==\nfunction onInit()\n{\n    $this['topic']->bindEvent('topic.post', function($post, $postUrl) {\n        trace_log('A post has been submitted at '.$postUrl);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Capturing Event Results in October CMS - PHP\nDESCRIPTION: Examples of capturing results from fired events, either as a single result from a halting event or multiple results from all listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// Single result, event halted\n$result = Event::fire('acme.blog.myevent', [...], true);\n\n// Multiple results, all events fired\n$results = Event::fire('acme.blog.myevent', [...]);\n```\n\n----------------------------------------\n\nTITLE: Using Model Not Found Exceptions in API Routes in October CMS PHP\nDESCRIPTION: Shows how to use findOrFail in an API route to automatically return a 404 response if the model is not found.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/model.md#2025-04-16_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nRoute::get('/api/flights/{id}', function ($id) {\n    return Flight::findOrFail($id);\n});\n```\n\n----------------------------------------\n\nTITLE: Traditional PHP Trait Definition\nDESCRIPTION: Example of defining a traditional PHP trait with a simple method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/behaviors.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrait UtilityFunctions\n{\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Progress Bars in OctoberCMS Console Commands\nDESCRIPTION: This snippet shows how to implement a progress bar for long-running tasks in OctoberCMS console commands using the Symfony Progress Bar component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$users = App\\User::all();\n\n$bar = $this->output->createProgressBar(count($users));\n\nforeach ($users as $user) {\n    $this->performTask($user);\n\n    $bar->advance();\n}\n\n$bar->finish();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Rich Editor Button in JavaScript\nDESCRIPTION: Demonstrates how to register a custom button for the rich editor using JavaScript. This snippet creates a new button that inserts custom HTML content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noc.richEditorRegisterButton('insertCustomThing', {\n    title: 'Insert Something',\n    icon: '<i class=\"icon-star\"></i>',\n    undo: true,\n    focus: true,\n    refreshOnCallback: true,\n    callback: function () {\n        this.html.insert('<strong>My Custom Thing!</strong>');\n    }\n});\n\noc.richEditorButtons.splice(0, 0, 'insertCustomThing');\n```\n\n----------------------------------------\n\nTITLE: Creating Form Labels\nDESCRIPTION: Demonstrates how to generate label elements for forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::label('email', 'ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ') ?>\n```\n\n----------------------------------------\n\nTITLE: Detecting PJAX Cached Snapshots in Twig\nDESCRIPTION: Demonstrates how to check if a Turbo Router (PJAX) request included a cached snapshot using the this.request.pjaxCached property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-request.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.request.pjaxCached %}\n    Page was loaded via PJAX with a snapshot\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Basic Switch Filter Scope Implementation in YAML\nDESCRIPTION: Demonstrates the basic implementation of a switch filter scope for toggling between approved and non-approved states. The filter uses boolean conditions to filter records based on the is_approved field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-switch.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nis_approved:\n    label: Approved\n    type: switch\n    conditions:\n        - is_approved <> true\n        - is_approved = true\n```\n\n----------------------------------------\n\nTITLE: Custom Content Field Partial Template\nDESCRIPTION: PHP partial template for rendering the custom content field in the backend form. It includes two input fields with custom colors from the field config.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/tailor-fields.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<div class=\"row\">\n    <div class=\"col\">\n        <input\n            type=\"text\"\n            name=\"<?= $field->getName() ?>[first_value]\"\n            value=\"<?= e($field->value['first_value'] ?? '') ?>\"\n            class=\"form-control\"\n            style=\"color:<?= $field->firstColor ?: 'red' ?>\"\n        />\n    </div>\n    <div class=\"col\">\n        <input\n            type=\"text\"\n            name=\"<?= $field->getName() ?>[second_value]\"\n            value=\"<?= e($field->value['second_value'] ?? '') ?>\"\n            class=\"form-control\"\n            style=\"color:<?= $field->secondColor ?: 'blue' ?>\"\n        />\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Page Navigation Context in PHP\nDESCRIPTION: This snippet demonstrates how to set the settings navigation context in a backend controller, which is required to mark the current settings link as active in the System page sidebar.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/settings.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n\n    [...]\n\n    BackendMenu::setContext('October.System', 'system', 'settings');\n    SettingsManager::setContext('You.Plugin', 'settings');\n}\n```\n\n----------------------------------------\n\nTITLE: Custom SQL Conditions in Date Scope\nDESCRIPTION: YAML configuration for a date filter with custom SQL statements for specific conditions. This allows for more complex filtering logic beyond the standard options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    conditions:\n        before: created_at <= :value\n        between: created_at >= :after AND created_at <= :before\n```\n\n----------------------------------------\n\nTITLE: Setting Default File Permissions for Shared Hosting\nDESCRIPTION: Environment variables to configure default permissions for new files and directories, helping to protect your application in shared hosting environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/web-server-config.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\nDEFAULT_FILE_MASK=644\nDEFAULT_FOLDER_MASK=755\n```\n\n----------------------------------------\n\nTITLE: Getting Uploaded File Path in PHP\nDESCRIPTION: Shows how to retrieve the real local path of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$path = $file->getRealPath();\n```\n\n----------------------------------------\n\nTITLE: Implementing SortableRelation Trait in PHP for October CMS\nDESCRIPTION: PHP code snippet demonstrating the use of the SortableRelation trait in a model class. This trait is used for sorting records in a pivot table for many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/structures.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    use \\October\\Rain\\Database\\Traits\\SortableRelation;\n\n    /**\n     * @var array belongsToMany\n     */\n    public $belongsToMany = [\n        'roles' => [\n            Role::class,\n            'table' => 'users_roles',\n            'pivotSortable' => 'sort_order',\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Data for Importing Blog Categories in October CMS\nDESCRIPTION: This JSON snippet demonstrates the structure for importing blog category data. Each object in the array represents a category with an ID, title, and slug.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/seeding-themes.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": 1,\n        \"title\": \"Announcements\",\n        \"slug\": \"announcements\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"News\",\n        \"slug\": \"news\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Running October CMS Migration\nDESCRIPTION: Executes the October CMS database migrations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan october:migrate\n```\n\n----------------------------------------\n\nTITLE: Extending Backend Form with Additional Fields\nDESCRIPTION: Example demonstrating how to extend backend forms by listening to the backend.form.extendFields event to add or remove form fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Êâ©Â±ïÊâÄÊúâÂêéÂè∞Ë°®Âçï‰ΩøÁî®\nEvent::listen('backend.form.extendFields', function($widget) {\n    // ‰ªÖÂú®‰ΩøÁî® Users ÊéßÂà∂Âô®Êó∂Â∫îÁî®Ê≠§ÁõëÂê¨Âô®\n    if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n        return;\n    }\n\n    // ‰ªÖÂú®‰øÆÊîπ User Ê®°ÂûãÊó∂Â∫îÁî®Ê≠§‰æ¶Âê¨Âô®\n    if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n        return;\n    }\n\n    // ‰ªÖÂΩìÊúâÂæÖÂÆöÁöÑ Form Â∞èÈÉ®‰ª∂ÊòØrootÁ∫ßÂà´Êó∂ÊâçÂ∫îÁî®Ê≠§‰æ¶Âê¨Âô®\n    // Ë°®ÂçïÂ∞èÈÉ®‰ª∂(‰∏çÊòØÂæ™ÁéØÁªÑ‰ª∂„ÄÅÂµåÂ•óË°®ÂçïÁ≠â)\n    if ($widget->isNested) {\n        return;\n    }\n\n    // Ê∑ªÂä†È¢ùÂ§ñÁöÑÁîüÊó•Â≠óÊÆµ\n    $widget->addFields([\n        'birthday' => [\n            'label'   => 'ÁîüÊó•',\n            'comment' => 'ÈÄâÊã©Áî®Êà∑ÁöÑÁîüÊó•',\n            'type'    => 'datepicker'\n        ]\n    ]);\n\n    // Âà†Èô§ÂßìÊ∞èÂ≠óÊÆµ\n    $widget->removeField('ÂßìÊ∞è');\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Theme Dependencies in YAML\nDESCRIPTION: Example of defining plugin dependencies for a theme in the theme.yaml file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"October CMS Demo\"\n# [...]\n\nrequire:\n    - \"Acme.User\"\n    - \"Acme.Blog\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPUnit for October CMS Plugin Testing\nDESCRIPTION: XML configuration file for setting up PHPUnit testing environment for an October CMS plugin. Defines test suite settings and environment variables for testing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/packages/unit-testing.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<phpunit backupGlobals=\"false\"\n    backupStaticAttributes=\"false\"\n    bootstrap=\"../../../modules/system/tests/bootstrap.php\"\n    colors=\"true\"\n    convertErrorsToExceptions=\"true\"\n    convertNoticesToExceptions=\"true\"\n    convertWarningsToExceptions=\"true\"\n    processIsolation=\"false\"\n    stopOnFailure=\"false\"\n>\n    <testsuites>\n        <testsuite name=\"Plugin Unit Test Suite\">\n            <directory>./tests</directory>\n        </testsuite>\n    </testsuites>\n    <php>\n        <env name=\"APP_ENV\" value=\"testing\" />\n        <env name=\"CACHE_DRIVER\" value=\"array\" />\n        <env name=\"SESSION_DRIVER\" value=\"array\" />\n        <env name=\"ACTIVE_THEME\" value=\"test\" />\n        <env name=\"CONVERT_LINE_ENDINGS\" value=\"true\" />\n        <env name=\"CMS_ROUTE_CACHE\" value=\"true\" />\n        <env name=\"CMS_TWIG_CACHE\" value=\"false\" />\n        <env name=\"ENABLE_CSRF\" value=\"false\" />\n        <env name=\"DB_CONNECTION\" value=\"sqlite\" />\n        <env name=\"DB_DATABASE\" value=\":memory:\" />\n    </php>\n</phpunit>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Value with config() in Twig\nDESCRIPTION: Demonstrates how to use the config() function in a Twig template to retrieve the value of 'app.locale' from the configuration store.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/config.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ config('app.locale') }}\n```\n\n----------------------------------------\n\nTITLE: Parsing Bracket Syntax in PHP\nDESCRIPTION: Shows how to use the Bracket parser class to parse simple bracket syntax, including iterating over arrays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Parse\\Bracket;\n\n$html = Bracket::parse($content, ['foo' => 'bar']);\n\n$html = Template::parse($content, ['likes' => [\n    ['name' => 'Dogs'],\n    ['name' => 'Fishing'],\n    ['name' => 'Golf']\n]]);\n```\n\n----------------------------------------\n\nTITLE: Getting Last Element with last() Method in PHP\nDESCRIPTION: When called without arguments, the last method returns the final element in the collection. If the collection is empty, null is returned.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4])->last();\n\n// 4\n```\n\n----------------------------------------\n\nTITLE: Storing Data in the Session with this.session in Twig\nDESCRIPTION: Demonstrates how to store a key-value pair in the session using the put method. This allows persistence of data across multiple page requests.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-session.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.put('key', 'value') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Text Column Type in YAML\nDESCRIPTION: Demonstrates how to set up a text column in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfull_name:\n    label: Full Name\n    type: text\n```\n\n----------------------------------------\n\nTITLE: Record Finder with Custom Title in YAML\nDESCRIPTION: Configuration for a recordfinder field with a custom title for the popup search interface. The title property allows customizing the text displayed at the top of the finder popup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-recordfinder.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: recordfinder\n    title: Find A User\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Value Conditions for Form Field Triggers in YAML\nDESCRIPTION: Demonstrates the use of wildcard characters in value conditions for form field triggers. The example checks if the file_name field ends with '.mp4'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntrigger:\n    action: show\n    condition: value[*.mp4]\n    field: file_name\n```\n\n----------------------------------------\n\nTITLE: Custom Field-Specific Error Message\nDESCRIPTION: HTML element that displays a custom error message for a specific field instead of using the server-provided validation message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/validation.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div data-validate-for=\"phone\">\n    Oops.. phone number is invalid!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Input Values with Dot Notation in PHP\nDESCRIPTION: Shows how to access array inputs using dot notation when working with forms that have array inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::get('products.0.name');\n```\n\n----------------------------------------\n\nTITLE: Checking for Any Available Site in PHP\nDESCRIPTION: Shows how to use the hasAnySite method to check if any enabled site is available.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (Site::hasAnySite()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Pretend Mail Mode in OctoberCMS (PHP)\nDESCRIPTION: This code snippet shows how to dynamically enable the pretend mail mode using the Mail::pretend method. In this mode, emails are written to the application's log file instead of being sent to recipients.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nMail::pretend();\n```\n\n----------------------------------------\n\nTITLE: Checking Content File Existence in Twig\nDESCRIPTION: Shows how to use the hasContent() function to check if a content file exists before rendering it.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/content.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{% if hasContent('welcome.htm') %}\n    {% content 'welcome.htm' %}\n{% else %}\n    <p>Welcome content not found!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Editor in October CMS\nDESCRIPTION: Demonstrates how to create a text input for Markdown content and how to render it in Twig.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n{markdown name=\"content\" label=\"Markdown content\"}Default text{/markdown}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ content|md }}\n```\n\n----------------------------------------\n\nTITLE: Defining Theme Information in YAML\nDESCRIPTION: Example of a theme.yaml file that specifies basic theme information like name, author, and description.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/settings.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"October CMS Demo\"\ndescription: \"Demonstrates the basic concepts of the front-end theming.\"\nauthor: \"October CMS\"\nhomepage: \"https://octobercms.com\"\ncode: \"Demo\"\nauthorCode: \"Acme\"\n```\n\n----------------------------------------\n\nTITLE: Checking Request Characteristics in October CMS\nDESCRIPTION: Methods for checking if the current request is over HTTPS, using AJAX, has JSON content, or wants JSON response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/request-input.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nif (Request::secure()) {\n    //\n}\n\nif (Request::ajax()) {\n    //\n}\n\nif (Request::isJson()) {\n    //\n}\n\nif (Request::wantsJson()) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Form Opening Tag in Twig\nDESCRIPTION: Demonstrates how to create a standard HTML form opening tag with CSRF protection using the form_open() helper.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-form.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_open() }}\n```\n\n----------------------------------------\n\nTITLE: Currency Conversion using PHP Currency Facade\nDESCRIPTION: Demonstrates how to use the Currency facade in PHP to convert an amount from USD to AUD.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/currency.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nCurrency::format(1000, ['from' => 'USD', 'to' => 'AUD']);\n```\n\n----------------------------------------\n\nTITLE: Reverse Routing with Parameters\nDESCRIPTION: Shows how to use reverse routing by passing parameters to the |page filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page({ post_id: 10 }) }}\">\\n    Blog post #10\\n</a>\n```\n\n----------------------------------------\n\nTITLE: Top Pages Widget Partial HTML Template\nDESCRIPTION: HTML markup for a top pages widget displaying a table with page statistics and progress bars.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/report-widgets.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>Top pages</h3>\n\n    <div class=\"table-container\">\n        <table class=\"table data\" data-provides=\"rowlink\">\n            <thead>\n                <tr>\n                    <th><span>Page URL</span></th>\n                    <th><span>Pageviews</span></th>\n                    <th><span>% Pageviews</span></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>/</td>\n                    <td>90</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"90%\"></div>\n                            <a href=\"/\">90%</a>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>/docs</td>\n                    <td>10</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"10%\"></div>\n                            <a href=\"/docs\">10%</a>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Layout ID in Twig\nDESCRIPTION: Shows how to convert the layout file name to a CSS-friendly identifier and use it as a class name. The layout.id property automatically converts the filename and folder name into a CSS compatible format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/this-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"layout-{{ this.layout.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline Flash Messages in Twig\nDESCRIPTION: Demonstrates how to render inline flash messages using Twig syntax. This code should be placed in a page or layout to ensure flash messages are displayed when the browser is redirected.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <p\n        data-control=\"flash-message\"\n        data-type=\"{{ type }}\"\n        data-interval=\"5\">\n        {{ message }}\n    </p>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Using Global Variables in Content Block - HTML\nDESCRIPTION: Example demonstrating how to use globally registered variables in a content block.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/content.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<p>Welcome to {site_name}</p>\n```\n\n----------------------------------------\n\nTITLE: Using find Method on Eloquent Collection in PHP\nDESCRIPTION: Demonstrates retrieving a specific model from a collection by its primary key using the find method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\n$user = $users->find(1);\n```\n\n----------------------------------------\n\nTITLE: Custom Group Folder for Resized Images\nDESCRIPTION: Shows how to organize resized images into custom group folders using the group option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, {\n    filename: 'my-seo-friendly-name',\n    group: '2024-banners'\n}) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Boxes Plugin in October CMS\nDESCRIPTION: Command to install the Boxes plugin from the October CMS marketplace. This plugin is required to use the Boxes field widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-boxes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install OFFLINE.Boxes\n```\n\n----------------------------------------\n\nTITLE: Component-Specific AJAX Handler Call\nDESCRIPTION: Example of calling an AJAX handler with a component reference using the __SELF__ variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/handlers.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"{{ __SELF__ }}::onCalculate\" data-request-update=\"'{{ __SELF__ }}::calcresult': '#result'\">\n```\n\n----------------------------------------\n\nTITLE: Using Repeater Field in OctoberCMS\nDESCRIPTION: Illustrates the implementation of a repeater field in OctoberCMS forms, allowing for repeating sections with nested fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{repeater name=\"content_sections\" prompt=\"Add another content section\"}\n    <h2>{text name=\"title\" label=\"Title\"}Title{/text}</h2>\n    <p>{textarea name=\"content\" label=\"Content\"}Content{/textarea}</p>\n{/repeater}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for fields in repeater %}\n    <h2>{{ fields.title }}</h2>\n    <p>{{ fields.content|raw }}</p>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Description\nDESCRIPTION: Example of a layout template with configuration parameters for the backend interface.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Basic layout example\"\n```\n\nLANGUAGE: twig\nCODE:\n```\n<html>\n    <body>\n        {% page %}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Passing Markup to Partials\nDESCRIPTION: Shows how to pass markup content to partials using the body attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% partial \"card\" body %}\n    This is the card contents\n{% endpartial %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ body|raw }}\n```\n\n----------------------------------------\n\nTITLE: Basic Text Filter Configuration in YAML\nDESCRIPTION: Demonstrates the basic YAML configuration for a text filter scope. This snippet shows how to set up a simple username filter with label and type properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-text.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nusername:\n    label: Username\n    type: text\n```\n\n----------------------------------------\n\nTITLE: Configuring Number Field in YAML for OctoberCMS\nDESCRIPTION: This code shows how to set up a number field with step, minimum, and maximum value constraints in YAML for OctoberCMS forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    step: 1  # defaults to 'any'\n    min: 1   # defaults to not present\n    max: 100 # defaults to not present\n```\n\n----------------------------------------\n\nTITLE: Switch Field Configuration with Comment in YAML\nDESCRIPTION: Adding a comment to a switch field configuration which displays explanatory text below the switch control.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-switch.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nshow_content:\n    label: Display Content\n    type: switch\n    comment: Flick this switch to display content\n```\n\n----------------------------------------\n\nTITLE: Setting Log Channel Mode in October CMS\nDESCRIPTION: Configures the default logging driver in the logging.php configuration file. This example changes the logging mode from the default single file to daily log files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/errors-logging.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('LOG_CHANNEL', 'daily'),\n```\n\n----------------------------------------\n\nTITLE: Retrying a Failed Job with Artisan Command in Bash\nDESCRIPTION: Artisan command to retry a specific failed job using its job ID. This example retries the failed job with ID 5.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/queue.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:retry 5\n```\n\n----------------------------------------\n\nTITLE: Grouping with Key-Value Mapping using mapToGroups() Method in PHP\nDESCRIPTION: The mapToGroups() method groups collection items by the given callback, which should return an associative array with a single key/value pair, forming a new collection of grouped values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    [\n        'name' => 'John Doe',\n        'department' => 'Sales',\n    ],\n    [\n        'name' => 'Jane Doe',\n        'department' => 'Sales',\n    ],\n    [\n        'name' => 'Johnny Doe',\n        'department' => 'Marketing',\n    ]\n]);\n\n$grouped = $collection->mapToGroups(function ($item, $key) {\n    return [$item['department'] => $item['name']];\n});\n\n$grouped->toArray();\n\n/*\n    [\n        'Sales' => ['John Doe', 'Jane Doe'],\n        'Marketing' => ['Johnny Doe'],\n    ]\n*/\n\n$grouped->get('Sales')->all();\n\n// ['John Doe', 'Jane Doe']\n```\n\n----------------------------------------\n\nTITLE: Defining URL Parameters for Component Properties\nDESCRIPTION: This snippet shows how to define URL parameters that can be used by components.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/todo/:maxItems\"\n```\n\n----------------------------------------\n\nTITLE: Basic Partial Rendering with Twig\nDESCRIPTION: Demonstrates how to render a partial inside a div element using the Twig partial tag\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/update-partials.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div id=\"myDiv\">\n    {% partial 'mytime' %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Form Creation Syntax in PHP and Twig\nDESCRIPTION: Demonstrates the basic syntax difference between PHP and Twig for opening forms using the Form facade.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/html.md#2025-04-16_snippet_0\n\nLANGUAGE: mixed\nCODE:\n```\n// PHP\n<?= Form::open(..) ?>\n\n// Twig\n{{ form_open(...) }}\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor for Queue Workers in Bash\nDESCRIPTION: Commands to update Supervisor configuration and start October CMS worker processes. This ensures proper management of queue workers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo supervisorctl reread\n\nsudo supervisorctl update\n\nsudo supervisorctl start october-worker:*\n```\n\n----------------------------------------\n\nTITLE: Snake Case String Conversion in Twig\nDESCRIPTION: Converts a string to snake_case format with optional custom delimiter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_snake('hello world') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_snake('hello world', '---') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Belongs to Many with Pivot Data in YAML\nDESCRIPTION: YAML configuration for a Belongs to Many relationship that includes pivot data handling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/relations.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    view:\n        list: $/acme/user/models/role/columns.yaml\n    manage:\n        list: $/acme/user/models/role/columns.yaml\n    pivot:\n        form: $/acme/user/models/role/fields.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Rich Editor Widget in YAML for October CMS\nDESCRIPTION: Shows how to configure a rich text editor (WYSIWYG) widget in YAML. This widget provides a visual editor for rich-formatted text, with options for customizing the toolbar buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    toolbarButtons: bold|italic\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Rendering Markup Content in Partials\nDESCRIPTION: Shows how to render the body content passed to a partial. The content is available as the body variable and should be marked as raw to prevent HTML escaping.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ body|raw }}\n```\n\n----------------------------------------\n\nTITLE: Controller Constructor Implementation - PHP\nDESCRIPTION: Example of implementing the constructor method in a controller. Shows basic initialization with parent constructor call.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Mixin Field Definition in YAML\nDESCRIPTION: Shows the basic structure for defining a mixin field that includes another set of fields using a source reference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/content/field-mixin.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n_include1:\n    type: mixin\n    source: <uuid|handle>\n```\n\n----------------------------------------\n\nTITLE: Summing Collection Items in PHP\nDESCRIPTION: Shows how to use the sum() method to calculate the sum of all items in a collection, including summing by a specific key in nested arrays or objects, and using custom callbacks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_63\n\nLANGUAGE: php\nCODE:\n```\nnew Collection([1, 2, 3, 4, 5])->sum();\n\n// 15\n\n$collection = new Collection([\n    ['name' => 'JavaScript: The Good Parts', 'pages' => 176],\n    ['name' => 'JavaScript: The Definitive Guide', 'pages' => 1096],\n]);\n\n$collection->sum('pages');\n\n// 1272\n\n$collection = new Collection([\n    ['name' => 'Chair', 'colors' => ['Black']],\n    ['name' => 'Desk', 'colors' => ['Black', 'Mahogany']],\n    ['name' => 'Bookcase', 'colors' => ['Red', 'Beige', 'Brown']],\n]);\n\n$collection->sum(function ($product) {\n    return count($product['colors']);\n});\n\n// 6\n```\n\n----------------------------------------\n\nTITLE: Using str_snake() Function for snake_case Conversion\nDESCRIPTION: Shows how to use str_snake() function to convert a string to snake_case, including an example with a custom delimiter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_snake('hello world') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_snake('hello world', '---') }}\n```\n\n----------------------------------------\n\nTITLE: Styling Flash Messages by Type in OctoberCMS Twig Templates\nDESCRIPTION: This example shows how to use the 'type' variable within the {% flash %} tag to apply different styles to flash messages based on their type (success, error, info, or warning).\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/flash.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% flash %}\n    <div class=\"alert alert-{{ type }}\">\n        {{ message }}\n    </div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Installing Flysystem S3 Package using Composer\nDESCRIPTION: Command to install the Flysystem S3 package via Composer, which is required before using the S3 driver.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require league/flysystem-aws-s3-v3 \"^3.0\"\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing in Component Partials\nDESCRIPTION: Examples showing how to reference the component itself in a Twig template using the __SELF__ variable for AJAX handlers and properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n<form data-request=\"{{__SELF__}}::onEventHandler\">\n    [...]\n</form>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% for item in __SELF__.items() %}\n    {{ item }}\n{% endfor %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial __SELF__~\"::screenshot-list\" %}\n```\n\n----------------------------------------\n\nTITLE: Executing a Named Binding Query in PHP\nDESCRIPTION: This snippet demonstrates how to execute a SELECT query using named bindings instead of question mark placeholders in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/basics.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$results = Db::select('select * from users where id = :id', ['id' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Media Manager Configuration Example\nDESCRIPTION: Configuration options for ignored files and patterns in the Media Manager.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/media/introduction.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/*\n|--------------------------------------------------------------------------\n| Ignored Files and Patterns\n|--------------------------------------------------------------------------\n|\n| The media manager wil ignore file names and patterns specified here\n|\n*/\n\n'ignore_files' => ['.svn', '.git', '.DS_Store', '.AppleDouble'],\n\n'ignore_patterns' => ['^\\\\.*'],\n```\n\n----------------------------------------\n\nTITLE: Defining Response Macro in PHP\nDESCRIPTION: Demonstrates how to define a custom response macro that can be reused across routes and controllers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nResponse::macro('caps', function($value) {\n    return Response::make(strtoupper($value));\n});\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Key from the Session with this.session in Twig\nDESCRIPTION: Shows how to remove a specific key and its associated value from the session using the forget method. This is useful for clearing individual pieces of session data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-session.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.forget('key') }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Collections with whereBetween() Method - PHP\nDESCRIPTION: Shows how to filter collection items where a value falls within a specified range using whereBetween().\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_79\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    ['product' => 'Desk', 'price' => 200],\n    ['product' => 'Chair', 'price' => 80],\n    ['product' => 'Bookcase', 'price' => 150],\n    ['product' => 'Pencil', 'price' => 30],\n    ['product' => 'Door', 'price' => 100],\n]);\n\n$filtered = $collection->whereBetween('price', [100, 200]);\n\n$filtered->all();\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Configuration in INI\nDESCRIPTION: Examples of URL configuration patterns including basic URLs, parameter syntax, and optional parameters.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\n```\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n```\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/post/:post_id?\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Extendable Class with ExtendableTrait\nDESCRIPTION: Example showing how to create a class that can implement behaviors using ExtendableTrait.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nclass AI\n{\n    use \\October\\Rain\\Extension\\ExtendableTrait;\n\n    /**\n     * @var array Ê≠§Á±ªÂÆûÁé∞ÁöÑÊâ©Â±ï„ÄÇ\n     */\n    public $implement;\n\n    /**\n     * Constructor\n     */\n    public function __construct()\n    {\n        $this->extendableConstruct();\n    }\n\n    public function __get($name)\n    {\n        return $this->extendableGet($name);\n    }\n\n    public function __set($name, $value)\n    {\n        $this->extendableSet($name, $value);\n    }\n\n    public function __call($name, $params)\n    {\n        return $this->extendableCall($name, $params);\n    }\n\n    public static function __callStatic($name, $params)\n    {\n        return self::extendableCallStatic($name, $params);\n    }\n\n    public static function extend(callable $callback)\n    {\n        self::extendableExtendCallback($callback);\n    }\n\n    public function youGotBrains()\n    {\n        echo \"ÊàëÊúâ‰∏Ä‰∏™‰∫∫Â∑•Êô∫ËÉΩÔºÅ<br>\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Color Picker with Preset Colors in YAML\nDESCRIPTION: Implementation of a color picker with predefined color options and disabled custom color selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-colorpicker.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: ['#000000', '#111111', '#222222']\n    allowCustom: false\n```\n\n----------------------------------------\n\nTITLE: Using |link Twig Filter\nDESCRIPTION: Demonstrates how to use the |link filter to generate a public URL from an october:// schema link.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/link.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'october://cms-page@link/about'|link }}\" />\n```\n\n----------------------------------------\n\nTITLE: Animating Element After AJAX Update in JavaScript\nDESCRIPTION: This snippet shows how to animate an element after specific AJAX handlers complete their updates. It listens for the 'ajax:update-complete' event and applies a CSS animation for 2 seconds.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:update-complete', function(event) {\n    const { handler } = event.detail.context;\n\n    // If the handler is either of the following\n    if (['onRemoveFromCart', 'onAddToCart'].includes(handler)) {\n\n        // Run an animation for 2 seconds\n        var el = document.querySelector('#miniCart');\n        el.classList.add('animate-shockwave');\n        setTimeout(function() { el.classList.remove('animate-shockwave'); }, 2000);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Balloon Selector Configuration in YAML\nDESCRIPTION: Shows how to set up a balloon selector field type for single selection options like gender selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    label: Gender\n    type: balloon-selector\n    default: female\n    options:\n        female: Female\n        male: Male\n```\n\n----------------------------------------\n\nTITLE: Pushing a Basic Job to Queue in PHP\nDESCRIPTION: Demonstrates how to push a job to the queue system using the Queue::push method. The example shows sending an email job with a message parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nQueue::push('SendEmail', ['message' => $message]);\n```\n\n----------------------------------------\n\nTITLE: Theme Asset Compilation in LESS\nDESCRIPTION: Example of using theme customization variables in LESS stylesheets for dynamic styling.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/themes/development.md#2025-04-16_snippet_4\n\nLANGUAGE: less\nCODE:\n```\na { color: @link-color }\n```\n\n----------------------------------------\n\nTITLE: Mapping Collection with Keys in PHP\nDESCRIPTION: The mapWithKeys method iterates through the collection and passes each value to a callback, which should return an associative array containing a single key/value pair.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n$collection = collect([\n    [\n        'name' => 'John',\n        'department' => 'Sales',\n        'email' => 'john@example.com'\n    ],\n    [\n        'name' => 'Jane',\n        'department' => 'Marketing',\n        'email' => 'jane@example.com'\n    ]\n]);\n\n$keyed = $collection->mapWithKeys(function ($item) {\n    return [$item['email'] => $item['name']];\n});\n\n$keyed->all();\n\n/*\n    [\n        'john@example.com' => 'John',\n        'jane@example.com' => 'Jane',\n    ]\n*/\n```\n\n----------------------------------------\n\nTITLE: Animating Element After AJAX Update in JavaScript\nDESCRIPTION: This snippet shows how to animate an element after specific AJAX handlers complete their updates. It adds and removes a CSS class to create a shockwave animation effect.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/javascript-api.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('ajax:update-complete', function(event) {\n    const { handler } = event.detail.context;\n\n    // If the handler is either of the following\n    if (['onRemoveFromCart', 'onAddToCart'].includes(handler)) {\n\n        // Run an animation for 2 seconds\n        var el = document.querySelector('#miniCart');\n        el.classList.add('animate-shockwave');\n        setTimeout(function() { el.classList.remove('animate-shockwave'); }, 2000);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Filter Form HTML\nDESCRIPTION: HTML markup for the filter form, including input fields and action buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filter-widgets.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"filter-box\">\n    <div class=\"filter-facet\">\n        <div class=\"facet-item is-grow\">\n            <select name=\"Filter[value]\" class=\"form-control form-control-sm custom-select <?= $allowSearch ? '' : 'select-no-search' ?>\">\n                <option value=\"1\" <?= $scope->value === '1' ? 'selected=\"selected\"' : '' ?>>has a discount</option>\n                <option value=\"0\" <?= $scope->value === '0' ? 'selected=\"selected\"' : '' ?>>does not have a discount</option>\n            </select>\n        </div>\n    </div>\n    <div class=\"filter-buttons\">\n        <button class=\"btn btn-sm btn-primary\" data-filter-action=\"apply\">\n            Apply\n        </button>\n        <div class=\"flex-grow-1\"></div>\n        <button class=\"btn btn-sm btn-secondary\" data-filter-action=\"clear\">\n            Clear\n        </button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using dump Method in PHP Collections\nDESCRIPTION: The dump method dumps the collection's items for debugging purposes without stopping script execution, unlike the dd method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['John Doe', 'Jane Doe']);\n\n$collection->dump();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating URLs to Routes in October CMS\nDESCRIPTION: Shows how to generate URLs to defined routes using the Url facade in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/router.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$url = Url::to('foo');\n```\n\n----------------------------------------\n\nTITLE: Creating Password Input Fields\nDESCRIPTION: Example demonstrating how to generate a password input field that masks user input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/html.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::password('password') ?>\n```\n\n----------------------------------------\n\nTITLE: Passing Sub-view to Parent View in PHP\nDESCRIPTION: Demonstrates how to pass a sub-view to a parent view using the nest method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/response-view.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$view = View::make('acme.blog::greeting')->nest('child', 'acme.blog::child.view');\n\n$view = View::make('acme.blog::greeting')->nest('child', 'acme.blog::child.view', $data);\n```\n\n----------------------------------------\n\nTITLE: Registering Backend Settings Link to a Page in PHP\nDESCRIPTION: Example showing how to register a backend settings link that points to a specific backend page by overriding the registerSettings method in a plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function registerSettings()\n{\n    return [\n        'location' => [\n            'label' => 'Âú∞ÁêÜ‰ΩçÁΩÆ',\n            'description' => 'ÁÆ°ÁêÜÂèØÁî®ÁöÑÁî®Êà∑ÂõΩÂÆ∂ÂíåÂ∑û„ÄÇ',\n            'category' => 'Users',\n            'icon' => 'icon-globe',\n            'url' => Backend::url('acme/user/locations'),\n            'order' => 500,\n            'keywords' => 'Âú∞ÁêÜ Âú∞ÁÇπ ‰ΩçÁΩÆ'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Finder Widget for Files in October CMS\nDESCRIPTION: Basic example configuration for the media finder widget to select documents from the media library.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nwhitepaper_file:\n    label: Whitepaper PDF\n    type: mediafinder\n```\n\n----------------------------------------\n\nTITLE: AJAX Historical Redirect Button\nDESCRIPTION: HTML button with browser history-based redirection support.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<button\n    data-request=\"onRedirect\"\n    data-browser-redirect-back>\n    Save and Back\n</button>\n```\n\n----------------------------------------\n\nTITLE: Named Macro Definition in Twig\nDESCRIPTION: Demonstrates defining a macro with an explicit name in the end tag for better readability.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% macro input() %}\n    ...\n{% endmacro input %}\n```\n\n----------------------------------------\n\nTITLE: Using the pad() Method in PHP Collections\nDESCRIPTION: The pad method fills an array with a specified value until it reaches a specified size. Positive size pads to the right, while negative size pads to the left, similar to PHP's array_pad function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['A', 'B', 'C']);\n\n$filtered = $collection->pad(5, 0);\n\n$filtered->all();\n\n// ['A', 'B', 'C', 0, 0]\n\n$filtered = $collection->pad(-5, 0);\n\n$filtered->all();\n\n// [0, 0, 'A', 'B', 'C']\n```\n\n----------------------------------------\n\nTITLE: Updating Partial with JavaScript API\nDESCRIPTION: This JavaScript code demonstrates how to use the JavaScript API to update a partial named 'mytime' inside the '#myDiv' element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/update-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$.request('onRefreshTime', {\n    update: { mytime: '#myDiv' }\n});\n```\n\n----------------------------------------\n\nTITLE: Package Configuration Bootloader in PHP\nDESCRIPTION: PHP implementation for loading and configuring Laravel packages within October CMS plugins\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/using-composer.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function bootPackages()\n{\n    // Get the namespace code of the current plugin\n    $pluginNamespace = str_replace('\\\\', '.', strtolower(__NAMESPACE__));\n\n    // Locate the packages to boot\n    $packages = \\Config::get($pluginNamespace . '::packages');\n\n    // Boot each package\n    foreach ($packages as $name => $options) {\n        // Apply the configuration for the package\n        if (\n            !empty($options['config']) &&\n            !empty($options['config_namespace'])\n        ) {\n            Config::set($options['config_namespace'], $options['config']);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Video Player with Multiple Sources in Twig\nDESCRIPTION: This Twig snippet shows an advanced video player setup with multiple source options based on screen size. It demonstrates how to use Twig's replace filter for dynamic source URLs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<video controls>\n    <source\n        src=\"{{ src }}\"\n        media=\"only screen and (min-device-width: 568px)\"></source>\n    <source\n        src=\"{{ src|replace({'.mp4': '.iphone.mp4'}) }}\"\n        media=\"only screen and (max-device-width: 568px)\"></source>\n</video>\n```\n\n----------------------------------------\n\nTITLE: Basic Component Tag Usage in Twig\nDESCRIPTION: Demonstrates the basic usage of the {% component %} tag to render a CMS component's default markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/component.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Content Structure with Bootstrap 5 in HTML\nDESCRIPTION: This snippet defines the structure of modal content using Bootstrap 5 components. It includes a header with title and close button, body section for main content, and footer with action buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/modals.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"modal-content\">\n    <div class=\"modal-header\">\n        <h5 class=\"modal-title\">\n            Modal Title\n        </h5>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n    </div>\n    <div class=\"modal-body\">\n        <p>Modal body text goes here.</p>\n    </div>\n    <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n            Close\n        </button>\n        <button type=\"button\" class=\"btn btn-primary\">\n            Save changes\n        </button>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Shared POST Parameters in HTML\nDESCRIPTION: Multiple buttons sharing the same POST parameter 'id' with value '7' defined at a parent level.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/attributes-api.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div data-request-data=\"{ id: 7 }\">\n    <button data-request=\"onDelete\">Delete</button>\n    <button data-request=\"onSave\">Update</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Partial Implementation in Twig\nDESCRIPTION: Simple implementation of a lazy loading partial using the ajaxPartial tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/features/polling.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% ajaxPartial 'posts' lazy %}\n```\n\n----------------------------------------\n\nTITLE: Character-Limited Summary Column in YAML\nDESCRIPTION: Configures a summary column with a custom character limit of 100 characters, showing content up to the closest word boundary.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-summary.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    label: Content\n    type: summary\n    limitChars: 100\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output for StringList Inspector Type\nDESCRIPTION: Example of the JSON output generated by the stringList inspector type. The output is an array of strings under the property name defined in the component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-stringlist.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"items\": [\"String 1\", \"String 2\", \"String 3\"]\n```\n\n----------------------------------------\n\nTITLE: Number Field with Server-side Validation in Tailor for October CMS\nDESCRIPTION: Adding server-side validation to a number field using the validation property in Tailor. This ensures the input is validated as numeric when the form is submitted.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-number.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nyour_age:\n    label: Your Age\n    type: number\n    validation: numeric\n```\n\n----------------------------------------\n\nTITLE: Setting Application Environment in Apache Configuration for October CMS\nDESCRIPTION: Example of how to define the APP_ENV variable in Apache configuration to load environment-specific configuration files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/setup/configuration.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nSetEnv APP_ENV \"staging\"\n```\n\n----------------------------------------\n\nTITLE: Creating Export View in PHP\nDESCRIPTION: Shows the structure of an export.htm view file. It includes a form with the export rendering method and a submit button that triggers the onExport AJAX handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::open(['class' => 'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->exportRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <button\n            type=\"submit\"\n            data-control=\"popup\"\n            data-handler=\"onExportLoadForm\"\n            data-keyboard=\"false\"\n            class=\"btn btn-primary\">\n            Export records\n        </button>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Form Serialization with AJAX Handlers\nDESCRIPTION: Shows how form input values are automatically serialized and sent with an AJAX request when the request is triggered from within a form. Includes both HTML markup and JavaScript approaches.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/handlers.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"myForm\">\n    <input name=\"first_name\" />\n    <button data-request=\"onSubmitContactForm\">Go</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output for Media URL\nDESCRIPTION: Shows the resulting HTML output when using the media filter with a CDN base URL of https://cdn.octobercms.com.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/media.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"https://cdn.octobercms.com/banner.jpg\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection\nDESCRIPTION: Redis configuration array defining cluster settings and default connection parameters including host, port, and database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/cache.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n\n    'cluster' => false,\n\n    'default' => [\n        'host'     => '127.0.0.1',\n        'port'     => 6379,\n        'database' => 0,\n    ],\n\n],\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nested Form Widget in YAML for October CMS\nDESCRIPTION: Shows how to configure a nested form widget in YAML. This widget renders a nested form for related records or jsonable attributes, with options for inline field definitions or referencing external YAML files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/forms.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: nestedform\n    showPanel: false\n    form:\n        fields:\n            added_at:\n                label: Ê∑ªÂä†Êó•Êúü\n                type: datepicker\n            details:\n                label: ËØ¶ÊÉÖ\n                type: textarea\n            title:\n                label: ËøôÊòØÊ†áÈ¢ò\n                type: text\n```\n\n----------------------------------------\n\nTITLE: Extending Relation Behavior Configuration in OctoberCMS\nDESCRIPTION: PHP method example showing how to dynamically modify relation configuration based on model attributes. This allows for conditional relationship displays.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendConfig($config, $field, $model)\n{\n    // Á°Æ‰øùÊ®°ÂûãÂíåÂ≠óÊÆµ‰∏éÊÇ®Ë¶ÅÊìç‰ΩúÁöÑÂåπÈÖç\n    if (!$model instanceof MyModel || $field != 'myField') {\n        return;\n    }\n\n    // ‰∏∫‰ºÅ‰∏öÂÆ¢Êà∑ÊòæÁ§∫‰∏çÂêåÁöÑÂàóË°®\n    if ($model->mode == 'b2b') {\n        $config->view['list'] = '$/author/plugin_name/models/mymodel/b2b_columns.yaml';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Trigger Events for Field Conditions\nDESCRIPTION: Shows how to create conditional form fields using the trigger property, which can show/hide fields based on the state of another field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form-fields.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nis_delayed:\n    label: Send later\n    comment: Place a tick in this box if you want to send this message at a later time.\n    type: checkbox\n\nsend_at:\n    label: Send date\n    type: datepicker\n    cssClass: field-indent\n    trigger:\n        action: show\n        field: is_delayed\n        condition: checked\n```\n\n----------------------------------------\n\nTITLE: Using str_ucfirst() Filter for First Character Uppercase\nDESCRIPTION: Shows how to use str_ucfirst() filter to make a string's first character uppercase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\nHello I'm {{ 'jack'|str_ucfirst }}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Number Scope Filter in YAML\nDESCRIPTION: Shows how to set a default value for the Number Scope filter using the 'default' property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-number.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    default: 14\n```\n\n----------------------------------------\n\nTITLE: Debugging HTTP Requests with dd() Method\nDESCRIPTION: Shows how to use the dd() method to dump the contents of a request for debugging purposes. This will terminate the execution after displaying the request details.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/http.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nHttp::dd()->get('https://octobercms.com');\n```\n\n----------------------------------------\n\nTITLE: Creating Model Test Class for October CMS Plugin\nDESCRIPTION: Example PHP test class that demonstrates how to create a unit test for a plugin model. It extends the PluginTestCase class which sets up an in-memory database for testing October CMS plugins.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/packages/unit-testing.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Tests\\Models;\n\nuse Acme\\Blog\\Models\\Post;\nuse PluginTestCase;\n\nclass PostTest extends PluginTestCase\n{\n    public function testCreateFirstPost()\n    {\n        $post = Post::create(['title' => 'Hi!']);\n        $this->assertEquals(1, $post->id);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Behavior for Sorting in YAML\nDESCRIPTION: This YAML snippet shows how to configure the Relation Behavior to enable reordering of related records while disabling the tree structure display. This is typically used in conjunction with the SortableRelation trait for many-to-many relationships.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/reorder.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    #...\n    structure:\n        showReorder: true\n        showTree: false\n```\n\n----------------------------------------\n\nTITLE: Currency Column with Long Format in YAML for October CMS\nDESCRIPTION: Configures a currency column to display values in a longer format using the format property set to 'long'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-currency.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntotal_amount:\n    label: Loan amount\n    type: currency\n    format: long\n```\n\n----------------------------------------\n\nTITLE: Checking Protected Themes in October CMS\nDESCRIPTION: Command to check if themes should be flagged read-only and protected from changes, creating child themes when necessary.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:check\n```\n\n----------------------------------------\n\nTITLE: Disabling Relation Controller Integration in YAML\nDESCRIPTION: Demonstrates how to disable automatic integration with the Relation Controller behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-relation.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncountries:\n    label: Categories\n    type: relation\n    useController: false\n```\n\n----------------------------------------\n\nTITLE: Rendering Result of Verbatim Tag in Twig\nDESCRIPTION: Shows the output of using the {% verbatim %} tag. The content inside the verbatim block is rendered exactly as written, without any Twig parsing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-verbatim.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello, {{ name }}</p>\n```\n\n----------------------------------------\n\nTITLE: Pausing Page Rendering for Animations in JavaScript\nDESCRIPTION: Demonstrates how to pause the page:before-render event to perform animations before loading a new page. Uses event.preventDefault() to pause rendering and event.detail.resume() to continue navigation after animations complete.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/turbo-router.md#2025-04-16_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('page:before-render', async (event) => {\n    event.preventDefault();\n\n    await animateOut();\n\n    event.detail.resume();\n});\n```\n\n----------------------------------------\n\nTITLE: Server-Side Widget Class Implementation in PHP\nDESCRIPTION: Base server-side implementation of a custom dashboard widget class that extends VueReportWidgetBase and implements the required getData method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\MyPlugin\\VueComponents;\n\nuse Backend\\Classes\\VueReportWidgetBase;\nuse Carbon\\Carbon;\n\nclass MyCustomWidget extends VueReportWidgetBase\n{\n    public function getData(\n        array $widgetConfig,\n        ?Carbon $dateStart,\n        ?Carbon $dateEnd,\n        ?int $startTimestamp,\n        ?Carbon $compareDateStart,\n        ?Carbon $compareDateEnd,\n        ?string $aggregationInterval,\n        array $extraData\n    ): mixed {\n        return [\n            'current_time' => Carbon::now()->format('Y-m-d H:i:s')\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Dependent Fields in PHP\nDESCRIPTION: PHP implementation showing how to populate dropdown options based on field dependencies between country and state fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\npublic function getCountryOptions()\n{\n    return ['au' => 'Australia', 'ca' => 'Canada'];\n}\n\npublic function getStateOptions()\n{\n    if ($this->country == 'au') {\n        return ['act' => 'Capital Territory', 'qld' => 'Queensland', ...];\n    }\n    elseif ($this->country == 'ca') {\n        return ['bc' => 'British Columbia', 'on' => 'Ontario', ...];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Object with Timeout\nDESCRIPTION: This JavaScript example shows how to wait for a variable with a timeout, providing both success and failure handling if the variable doesn't appear within the specified time.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_19\n\nLANGUAGE: js\nCODE:\n```\noc.waitFor(() => window.propName, 2000).then(() => {\n    console.log('Found the variable!')\n}).catch(() => {\n    console.error('Gave up waiting...')\n});\n```\n\n----------------------------------------\n\nTITLE: Including File Uploads in AJAX Request in HTML\nDESCRIPTION: This snippet shows how to enable file uploads in an AJAX request by adding the data-request-files attribute to a form with a file input field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/attributes-api.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\" data-request-files>\n    <input type=\"file\" name=\"photo\" accept=\"image/*\" />\n    <button type=\"submit\">Submit</button>\n</form>\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Search Filter (HTML/PHP)\nDESCRIPTION: Example of an inline search filter widget, including an input field and search button.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/lists/filter-widgets.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<?php\n    $activeValue = $scope->scopeValue !== null ? $scope->value : $scope->default;\n?>\n<div\n    class=\"filter-scope scope-inline\"\n    data-scope-name=\"<?= $scope->scopeName ?>\">\n    <input\n        placeholder=\"<?= e($this->getHeaderValue($scope)) ?>\"\n        name=\"<?= $name ?>[value]\"\n        value=\"<?= e($activeValue) ?>\"\n        class=\"form-control form-control-sm\" />\n    <button\n        class=\"btn btn-sm btn-search\"\n        data-filter-action=\"apply\">\n        <i class=\"icon-search\"></i>\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Event Parameters in Event Listeners\nDESCRIPTION: Examples showing how to access parameters in event handlers for both global and local events.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// ÂÖ®Â±Ä\nEvent::listen('acme.blog.post.beforePost', function ($post, $param1, $param2) {\n    Log::info($post->name . 'posted. Parameters: ' . $param1 . ' ' . $param2);\n});\n\n// Êú¨Âú∞\n$post->bindEvent('post.beforePost', function ($param1, $param2) use ($post) {\n    Log::info($post->name . 'posted. Parameters: ' . $param1 . ' ' . $param2);\n});\n```\n\n----------------------------------------\n\nTITLE: Polymorphic One-to-One Model Structure\nDESCRIPTION: PHP model definitions for implementing polymorphic one-to-one relationships between Photo, Staff, and Product models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nclass Photo extends Model\n{\n    public $morphTo = [\n        'imageable' => []\n    ];\n}\n\nclass Staff extends Model\n{\n    public $morphOne = [\n        'photo' => [\\Acme\\Blog\\Models\\Photo::class, 'name' => 'imageable']\n    ];\n}\n\nclass Product extends Model\n{\n    public $morphOne = [\n        'photo' => [\\Acme\\Blog\\Models\\Photo::class, 'name' => 'imageable']\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Events in Plugin Registration File\nDESCRIPTION: Example of how to listen to events in the boot method of a plugin registration file. This shows how to handle a user registration event to add the user to a mailing list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Plugin extends PluginBase\n{\n    // ...\n\n    public function boot()\n    {\n        Event::listen('rainlab.user.register', function ($user) {\n            // Â∞Ü $user->email Ê≥®ÂÜåÂà∞ÈÇÆ‰ª∂ÂàóË°®ÁöÑ‰ª£Á†Å\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Classes on AJAX Invalidation with JavaScript\nDESCRIPTION: Demonstrates how to add custom CSS classes to form elements when AJAX validation fails using JavaScript event handlers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/extras.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$(window).on('ajaxInvalidField', function(event, fieldElement, fieldName, errorMsg, isFirst) {\n    $(fieldElement).closest('.form-group').addClass('has-error');\n});\n\n$(document).on('ajaxPromise', '[data-request]', function() {\n    $(this).closest('form').find('.form-group.has-error').removeClass('has-error');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Accessor in PHP Model Class\nDESCRIPTION: Example of creating an accessor method to format the first_name attribute when it is retrieved from the model. The accessor automatically capitalizes the first letter of the name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/mutators.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * getFirstNameAttribute is available as `first_name` on the model\n     */\n    public function getFirstNameAttribute($value)\n    {\n        return ucfirst($value);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Where-Style Clauses in Join Statements\nDESCRIPTION: Demonstrates how to use where and orWhere methods on join clauses to compare columns against values rather than comparing two columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->join('contacts', function ($join) {\n        $join->on('users.id', '=', 'contacts.user_id')\n            ->where('contacts.user_id', '>', 5);\n    })\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Extending List Filter Scopes Externally\nDESCRIPTION: Shows how to extend list filter scopes from outside the controller using the extendListFilterScopes static method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_36\n\nLANGUAGE: php\nCODE:\n```\nCategories::extendListFilterScopes(function($filter) {\n    // Add custom CSS classes to the Filter widget itself\n    $filter->cssClasses = array_merge($filter->cssClasses, ['my', 'array', 'of', 'classes']);\n\n    $filter->addScopes([\n        'my_scope' => [\n            'label' => 'My Filter Scope'\n        ]\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Extending List Columns Externally\nDESCRIPTION: Demonstrates how to extend list columns from outside the controller using the extendListColumns static method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nCategories::extendListColumns(function($list, $model) {\n    if (!$model instanceof MyModel) {\n        return;\n    }\n\n    // Add a new column\n    $list->addColumns([\n        'my_column' => [\n            'label' => 'My Column'\n        ]\n    ]);\n\n    // Modify an existing column\n    $list->getColumn('title')->useConfig([\n        'path' => 'column_title'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Path Helper Functions in PHP\nDESCRIPTION: Collection of helper functions for working with file system paths in OctoberCMS including database, plugins, public, storage, temp, themes and cache directories\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$path = database_path();\n$path = plugins_path('author/plugin/routes.php');\n$path = public_path();\n$path = storage_path('app/file.txt');\n$path = temp_path('app/file.txt');\n$path = themes_path('mytheme/file.txt');\n$path = cache_path('cms/cachefile.json');\n```\n\n----------------------------------------\n\nTITLE: Creating Current Page Link in Twig\nDESCRIPTION: Demonstrates how to create a link to the current page using the |page filter with an empty string in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-page.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ ''|page }}\">Refresh page</a>\n```\n\n----------------------------------------\n\nTITLE: Extending List Columns Internally\nDESCRIPTION: Shows how to extend list columns from within the controller class by overriding the listExtendColumns method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    // ...\n\n    public function listExtendColumns($list)\n    {\n        $list->addColumns([...]);\n\n        $list->getColumn(...);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Backend Execution Context\nDESCRIPTION: Demonstrates checking if code is running in backend admin area.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/application.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nApp::runningInBackend();\n```\n\n----------------------------------------\n\nTITLE: Extending Filter Widgets in OctoberCMS PHP\nDESCRIPTION: PHP method examples for extending the view and manage filter widgets in relations, providing hooks for customizing filter behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendViewFilterWidget($widget, $field, $model)\n{\n    // Extends the view filter widget\n}\n\npublic function relationExtendManageFilterWidget($widget, $field, $model)\n{\n    // Extends the manage filter widget\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Media Manager with Direct Widget Extension\nDESCRIPTION: Example of how to hook into Media Manager events by extending the MediaManager widget class directly, using the file.rename event to update custom references to a path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/media/introduction.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nMedia\\Widgets\\MediaManager::extend(function($widget) {\n    $widget->bindEvent('file.rename', function ($originalPath, $newPath) {\n        // Update custom references to path here\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Image Column Implementation in YAML\nDESCRIPTION: Basic YAML configuration for implementing an image column with a label and type specification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/lists/column-image.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: image\n```\n\n----------------------------------------\n\nTITLE: Opening Lighttpd Site Configuration\nDESCRIPTION: Command to open and edit the Lighttpd site configuration file using the nano text editor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnano /etc/lighttpd/conf-enabled/sites.conf\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for October CMS Theme Publication\nDESCRIPTION: Minimum required JSON configuration in composer.json for publishing an October CMS theme. The package name must end with -theme and include composer/installers as a dependency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/boilerplate-theme\",\n    \"type\": \"october-theme\",\n    \"description\": \"Enter a meaningful description here\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Controller for Popup in YAML for October CMS\nDESCRIPTION: This YAML snippet shows how to configure the list controller to open the manage view in a popup when clicking a record in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/forms/form-controller.md#2025-04-16_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\nrecordOnClick: popup\n```\n\n----------------------------------------\n\nTITLE: Blueprint Handle Reference in INI\nDESCRIPTION: Shows how to reference a blueprint using its handle in configuration files.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[section blog]\nhandle = \"Blog\\Post\"\n```\n\n----------------------------------------\n\nTITLE: Configuring composer.json for October CMS Plugin Publication\nDESCRIPTION: Minimum required JSON configuration in composer.json for publishing an October CMS plugin. The package name must end with -plugin and include composer/installers as a dependency.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"acme/blog-plugin\",\n    \"type\": \"october-plugin\",\n    \"description\": \"Enter a meaningful description here\",\n    \"require\": {\n        \"composer/installers\": \"~1.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Purged Values in October CMS Models\nDESCRIPTION: Shows how to retrieve a value that was purged from a model using the getOriginalPurgeValue method. Useful when you need to access a purged attribute's original value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/behaviors.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn $user->getOriginalPurgeValue($propertyName);\n```\n\n----------------------------------------\n\nTITLE: Using Page Ready Promise for Script Loading\nDESCRIPTION: This JavaScript function returns a promise that resolves when all page scripts have finished loading, allowing code to execute after the page is fully ready.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_17\n\nLANGUAGE: js\nCODE:\n```\noc.pageReady().then(() => {\n    // Page has finished loading scripts\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Email Recipient in OctoberCMS (PHP)\nDESCRIPTION: This snippet demonstrates how to set up a universal recipient for all emails sent by the framework in OctoberCMS. It involves modifying the 'to' option in the config/mail.php configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/mail.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'to' => [\n    'address' => 'dev@example.com',\n    'name' => 'ÂºÄÂèëÁ§∫‰æã'\n],\n```\n\n----------------------------------------\n\nTITLE: User Input Prompts in OctoberCMS Console Commands\nDESCRIPTION: This snippet demonstrates how to prompt users for input in OctoberCMS console commands, including asking for text input, secret input, and confirmation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/console/development.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$name = $this->ask('What is your name?');\n\n$password = $this->secret('What is the password?');\n\nif ($this->confirm('Do you wish to continue? [yes|no]')) {\n    //\n}\n\n$this->confirm($question, true);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Progress Bar in OctoberCMS Console Command\nDESCRIPTION: This snippet shows how to implement a progress bar in an OctoberCMS console command. It demonstrates creating, advancing, and finishing a progress bar for long-running tasks.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/development.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = App\\User::all();\n\n$bar = $this->output->createProgressBar(count($users));\n\nforeach ($users as $user) {\n    $this->performTask($user);\n\n    $bar->advance();\n}\n\n$bar->finish();\n```\n\n----------------------------------------\n\nTITLE: Available Message Builder Methods\nDESCRIPTION: List of all available methods on the message builder instance for configuring mail messages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/sending-mail.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$message->from($address, $name = null);\n$message->sender($address, $name = null);\n$message->to($address, $name = null);\n$message->cc($address, $name = null);\n$message->bcc($address, $name = null);\n$message->replyTo($address, $name = null);\n$message->subject($subject);\n$message->priority($level);\n$message->attach($pathToFile, array $options = []);\n\n// Attach a file from a raw $data string...\n$message->attachData($data, $name, array $options = []);\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Behavior in PHP Controller\nDESCRIPTION: Example of how to implement Form Behavior in an October CMS controller class. It shows the use of the $implement property to include the FormController behavior and the $formConfig property to specify the configuration file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\FormController::class\n    ];\n\n    public $formConfig = 'config_form.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependent Scope Options Method in PHP\nDESCRIPTION: Demonstrates the implementation of an options method for a dependent scope. This method filters the available options based on the value of the parent scope.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter-scopes.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function getCityOptionsForFilter($scopes = null)\n{\n    if ($scopes->country && ($countryIds = $scopes->country->value)) {\n        return self::whereIn('country_id', $countryIds)->lists('name', 'id');\n    }\n\n    return self::lists('name', 'id');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Loading Button with AJAX Request\nDESCRIPTION: HTML examples showing how to add loading indicators to buttons and links during AJAX requests using the data-attach-loading attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSubmit\">\n    <button data-attach-loading>\n        Submit\n    </button>\n</form>\n\n<a\n    href=\"#\"\n    data-request=\"onDoSomething\"\n    data-attach-loading>\n    Do something\n</a>\n```\n\n----------------------------------------\n\nTITLE: Validation in Controller with Redirect in PHP\nDESCRIPTION: Demonstrates a complete validation example in a controller method, including redirecting with errors when validation fails. The errors are flashed to the session for access on the next request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function onRegister()\n{\n    $rules = [];\n\n    $validator = Validator::make(Input::all(), $rules);\n\n    if ($validator->fails()) {\n        return Redirect::to('register')->withErrors($validator);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding JSON Attributes in Model Class in PHP\nDESCRIPTION: Shows how to hide specific attributes from JSON and array representations using the $hidden property in the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php namespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass User extends Model\n{\n    /**\n     * Â∫î‰∏∫Êï∞ÁªÑÈöêËóèÁöÑÂ±ûÊÄß„ÄÇ„ÄÇ\n     *\n     * @var array\n     */\n    protected $hidden = ['password'];\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Page Number Specification in PHP\nDESCRIPTION: Demonstrates how to manually specify the page number when paginating by passing a second argument to the paginate method. This example shows page 2 with 15 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/pagination.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15, 2);\n```\n\n----------------------------------------\n\nTITLE: Comparing Collections in PHP\nDESCRIPTION: The diff method compares the collection against another collection or a plain PHP array, returning the values in the original collection that are not present in the given collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$diff = $collection->diff([2, 4, 6, 8]);\n\n$diff->all();\n\n// [1, 3, 5]\n```\n\n----------------------------------------\n\nTITLE: Using Verbatim Tag with AngularJS in Twig\nDESCRIPTION: Illustrates how to use the {% verbatim %} tag to differentiate between Twig and AngularJS variable parsing. This is useful when both frameworks use similar syntax for variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-verbatim.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello {{ name }}, this is parsed by Twig</p>\n\n{% verbatim %}\n    <p>Hello {{ name }}, this is parsed by AngularJS</p>\n{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Properties in PHP\nDESCRIPTION: Demonstrates various properties that can be set on a model to configure its behavior, such as primary key, timestamps, and mass assignment protection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/model.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    protected $primaryKey = 'id';\n\n    public $exists = false;\n\n    protected $dates = ['last_seen_at'];\n\n    public $timestamps = true;\n\n    protected $jsonable = ['permissions'];\n\n    protected $guarded = ['*'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeUpdate Callback with AJAX Request\nDESCRIPTION: Example of running 'onCalculate' handler with a custom callback function that executes before the page elements are updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', {\n    update: { calcresult: '.result' },\n    beforeUpdate: function() { /* do something */ }\n})\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Assets in PHP\nDESCRIPTION: Demonstrates how to inject and combine multiple CSS and JavaScript assets by passing them as arrays to the addCss and addJs methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/pages.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nfunction onStart()\n{\n    $this->addCss(['assets/css/hello.css', 'assets/css/goodbye.css']);\n    $this->addJs(['assets/js/app.js', 'assets/js/nav.js']);\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets in October CMS using Artisan\nDESCRIPTION: Commands to compile and combine system files for JavaScript, StyleSheets, client-side language, or all assets. Includes an option for debugging without minification.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util compile assets\n```\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util compile lang\n```\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util compile js\n```\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util compile less\n```\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util compile js --debug\n```\n\n----------------------------------------\n\nTITLE: Defining Text Inspector Properties in PHP\nDESCRIPTION: Example of how to define properties using the text inspector type in a PHP component. Shows setting up a description property with a default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-text.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'description' => [\n            'title' => 'Description',\n            'type' => 'text',\n            'default' => 'This is a default description'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Flash Messages with Twig in OctoberCMS\nDESCRIPTION: This snippet demonstrates the basic usage of the {% flash %} tag to render flash messages stored in the user session. It iterates through all flash messages and displays them in an unordered list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/flash.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<ul>\n    {% flash %}\n        <li>{{ message }}</li>\n    {% endflash %}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Removing a Column from Relation List in OctoberCMS PHP\nDESCRIPTION: PHP method example demonstrating how to remove a column from a relation list widget using event binding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/relation-controller.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function relationExtendViewWidget($widget, $field, $model)\n{\n    // Make sure the model and field matches those you want to manipulate\n    if (!$model instanceof MyModel || $field !== 'myField') {\n        return;\n    }\n\n    // This will work\n    $widget->bindEvent('list.extendColumns', function () use ($widget) {\n        $widget->removeColumn('my_column');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Using HavingRaw for Raw Having Clauses\nDESCRIPTION: Demonstrates havingRaw and orHavingRaw methods for raw SQL in the having clause, typically used with aggregate functions and grouping.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Making Rows Unclickable with nolink Class\nDESCRIPTION: Shows how to make specific list rows unclickable by returning the 'nolink' CSS class based on record state.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_32\n\nLANGUAGE: php\nCODE:\n```\npublic function listInjectRowClass($record, $value)\n{\n    if ($record->trashed()) {\n        return 'nolink';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using URL Parameters for Component Properties in October CMS\nDESCRIPTION: This code demonstrates how to initialize component properties with values loaded from URL parameters. The 'maxItems' property will be loaded from a URL parameter with the same name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/components.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ :maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Error Pages for PJAX\nDESCRIPTION: This HTML meta tag informs the Turbo Router that error pages are produced by the native application, allowing error content to be displayed without replacing the entire page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"turbo-visit-control\" content=\"error\">\n```\n\n----------------------------------------\n\nTITLE: Attaching Models with Pivot Attributes in OctoberCMS\nDESCRIPTION: Example demonstrating how to attach a model with additional pivot table attributes. This links a role to a user and sets an expiration date.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$user->roles()->attach($roleId, ['expires' => $expires]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Model in PHP\nDESCRIPTION: Shows how to define a basic model class for a database table in October CMS. The model extends the base Model class and specifies the associated table name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/model.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Models;\n\nuse Model;\n\nclass Post extends Model\n{\n    /**\n     * ‰∏éÊ®°ÂûãÂÖ≥ËÅîÁöÑË°®„ÄÇ\n     *\n     * @var string\n     */\n    protected $table = 'acme_blog_posts';\n}\n```\n\n----------------------------------------\n\nTITLE: Current Page Link Creation\nDESCRIPTION: Shows how to create a link to the current page using the |page filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ this|page }}\">Refresh page</a>\n```\n\n----------------------------------------\n\nTITLE: Writing Values to Settings Model in PHP\nDESCRIPTION: Demonstrates different methods for writing values to a settings model, including static set method and direct property assignment.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/model-settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Demo\\Models\\UserSetting;\n\n// Set a single value\nUserSetting::set('api_key', 'ABCD');\n\n// Set an array of values\nUserSetting::set(['api_key' => 'ABCD']);\n\n// Set object values\n$settings = UserSetting::instance();\n$settings->api_key = 'ABCD';\n$settings->save();\n```\n\n----------------------------------------\n\nTITLE: Form Serialization with AJAX Handlers\nDESCRIPTION: Shows how form input values are automatically available to AJAX handlers when the request is made within a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form id=\"myForm\">\n    <input name=\"first_name\" />\n    <button data-request=\"onSubmitContactForm\">Go</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence in Collection with has() Method in PHP\nDESCRIPTION: The has method determines if a specified key exists in the collection. It returns a boolean value indicating whether the key is present or not.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['account_id' => 1, 'product' => 'Desk']);\n\n$collection->has('email');\n\n// false\n```\n\n----------------------------------------\n\nTITLE: Defining Visible JSON Attributes in Model Class in PHP\nDESCRIPTION: Shows how to use the $visible property to define a whitelist of attributes that should be included in the model's array and JSON representation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Êï∞ÁªÑ‰∏≠ÁöÑÂ±ûÊÄß‰ºöË¢´Â±ïÁ§∫„ÄÇ\n     *\n     * @var array\n     */\n    protected $visible = ['first_name', 'last_name'];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Textarea Field in YAML for OctoberCMS\nDESCRIPTION: This code demonstrates how to create a multiline text field with size configuration in YAML format for OctoberCMS forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nblog_contents:\n    label: Contents\n    type: textarea\n    size: large\n```\n\n----------------------------------------\n\nTITLE: Rendering a Content Block from a Subdirectory with Twig\nDESCRIPTION: Shows how to render a content block located in a subdirectory using the {% content %} tag.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-content.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"sidebar/content.htm\" %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Theme in October CMS\nDESCRIPTION: This command creates a child theme that inherits from the parent theme. It creates a new theme called 'demo-child' that will use 'demo' as its parent theme by using the --child option.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/child-themes.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:copy demo demo-child --child\n```\n\n----------------------------------------\n\nTITLE: Using Path Symbols in October CMS\nDESCRIPTION: Path prefix symbols in October CMS can be used to create dynamic paths relative to different parts of the application structure. These provide shortcuts to commonly referenced directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/helpers.md#2025-04-16_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nlist: ~/plugins/acme/pay/models/invoiceitem/columns.yaml\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from CMS Method in PHP\nDESCRIPTION: Demonstrates how to return a simple string response from a CMS page, layout or component method. This will stop the process and override the default behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function onStart()\n{\n    return 'Hello World';\n}\n```\n\n----------------------------------------\n\nTITLE: Using HavingRaw with Aggregate Conditions\nDESCRIPTION: Demonstrates using havingRaw() with parameter binding to filter groups based on aggregate calculations in the having clause.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->select('department', Db::raw('SUM(price) as total_sales'))\n    ->groupBy('department')\n    ->havingRaw('SUM(price) > ?', [2500])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Processing Repeater Field in PHP for October CMS\nDESCRIPTION: Shows how the repeater field is processed when calling $syntax->toEditor in PHP.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'repeater' => [\n    'label' => 'Website name',\n    'type' => 'repeater',\n    'fields' => [\n\n        'title' => [\n            'label' => 'Title',\n            'default' => 'Title',\n            'type' => 'text'\n        ],\n        'content' => [\n            'label' => 'Content',\n            'default' => 'Content',\n            'type' => 'textarea'\n        ]\n\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Eager Loading Multiple Relationships in OctoberCMS\nDESCRIPTION: Example showing how to eagerly load multiple relationships at once. This loads books along with their authors and publishers in a single operation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/database/relations.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$books = Book::with('author', 'publisher')->get();\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Using {% put %} Tag in October CMS\nDESCRIPTION: Example of using the {% put %} tag with the styles placeholder to inject raw CSS markup. This allows adding custom stylesheets directly in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-styles.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% put styles %}\n    <link href=\"/themes/demo/assets/css/page.css\" rel=\"stylesheet\" />\n{% endput %}\n```\n\n----------------------------------------\n\nTITLE: Component Property Definition\nDESCRIPTION: Shows how to define configurable properties for a component with validation and types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'maxItems' => [\n            'title'             => 'Max items',\n            'description'       => 'The most amount of todo items allowed',\n            'default'           => 10,\n            'type'              => 'string',\n            'validationPattern' => '^[0-9]+$',\n            'validationMessage' => 'The Max Items property can contain only numeric symbols'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Accessor for JSON Attributes in PHP\nDESCRIPTION: Demonstrates how to define an accessor method that will be used when appending custom attributes to the model's JSON representation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/serialization.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * ‰∏∫Áî®Êà∑Ëé∑ÂèñÁÆ°ÁêÜÂëòÊ†áËØÜ„ÄÇ\n     *\n     * @return bool\n     */\n    public function getIsAdminAttribute()\n    {\n        return $this->attributes['admin'] == 'yes';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Placeholder Variables in Twig\nDESCRIPTION: Demonstrates how to access placeholder variables using the placeholder() function and use them for conditional logic.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% set active = placeholder('activeNav') %}\n\n<ul>\n    <li class=\"{{ active == 'home' ? 'active' }}\">Home</li>\n    <li class=\"{{ active == 'blog' ? 'active' }}\">Blog</li>\n    <li class=\"{{ active == 'contact' ? 'active' }}\">Contact</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Hashing Passwords with Hash Facade in PHP\nDESCRIPTION: Example of hashing a user password using the Hash facade's make method. This creates a secure Bcrypt hash of the password before saving it to the database.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/hashing-encryption.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$user = new User;\n$user->password = Hash::make('mypassword');\n$user->save();\n```\n\n----------------------------------------\n\nTITLE: Disabling Required Fields in Blueprint\nDESCRIPTION: Modifies the default validation requirements for title and slug fields in an entry. This example disables title validation and hides the slug field entirely.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/blueprints.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    title:\n        validation: false\n\n    slug:\n        hidden: true\n```\n\n----------------------------------------\n\nTITLE: Accessing URL Parameters in Twig Templates\nDESCRIPTION: Shows how to access and use the 'tab' URL parameter in a Twig template, demonstrating conditional rendering based on the parameter value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-param.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% if this.param.tab == 'details' %}\n\n    <p>Here are all your details</p>\n\n{% elseif this.param.tab == 'history' %}\n\n    <p>You are viewing a blast from the past</p>\n\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Values in October CMS\nDESCRIPTION: Methods for retrieving user input from HTTP requests using the Input facade. Includes examples for getting specific values, checking if values exist, and retrieving all input data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$name = Input::get('name');\n```\n\n----------------------------------------\n\nTITLE: Setting Relationships Using Primary Keys\nDESCRIPTION: This code shows how to set relationships using primary keys instead of model instances, useful when working with HTML forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n// ÂàÜÈÖçÁªô ID ‰∏∫ 3 ÁöÑ‰ΩúËÄÖ\n$post->author = 3;\n\n// ÂàÜÈÖç ID ‰∏∫ 1„ÄÅ2 Âíå 3 ÁöÑËØÑËÆ∫\n$post->comments = [1, 2, 3];\n\n$post->save();\n```\n\n----------------------------------------\n\nTITLE: Relation Fields Definition in YAML\nDESCRIPTION: Example of form field definitions including relation fields. Shows regular fields, OneToOne relation field syntax, and date fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nuser_name:\n    label: User Name\n    description: The name of the user\navatar[name]:\n    label: Avatar\n    description: will be saved in the Avatar table\npublished_at:\n    label: Published date\n    description: When this blog post was published\n    type: datepicker\n\n[...]\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into Database Tables in PHP\nDESCRIPTION: Shows how to insert a single record into a database table using the insert method, which accepts an array of column names and values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_37\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->insert(\n    ['email' => 'john@example.tld', 'votes' => 0]\n);\n```\n\n----------------------------------------\n\nTITLE: Throwing SystemException in PHP\nDESCRIPTION: Shows how to throw a SystemException, used for critical system functioning errors. This exception type is always logged and displays a detailed error message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/exceptions.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nthrow new SystemException('Unable to contact the mail server API');\n```\n\n----------------------------------------\n\nTITLE: Defining a Component Class in OctoberCMS\nDESCRIPTION: Demonstrates how to define a component class with a basic structure and a sample method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Components;\n\nclass BlogPosts extends \\Cms\\Classes\\ComponentBase\n{\n    public function componentDetails()\n    {\n        return [\n            'name' => 'Blog Posts',\n            'description' => 'Displays a collection of blog posts.'\n        ];\n    }\n\n    /**\n     * Posts become available in the page as {{ component.posts }}\n     */\n    public function posts()\n    {\n        return ['First Post', 'Second Post', 'Third Post'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from AJAX Handler in PHP\nDESCRIPTION: Shows how to return a string response from an AJAX handler. The string will be added to the response collection with the default key 'result'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function onDoSomething()\n{\n    return 'Hello World';\n    // ['result' => 'Hello World']\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Report Widget in HTML\nDESCRIPTION: Examples of rendering report widgets with different layouts and data presentations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_11\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>ÊµÅÈáèÊù•Ê∫ê</h3>\n\n    <div\n        class=\"control-chart\"\n        data-control=\"chart-pie\"\n        data-size=\"200\"\n        data-center-text=\"180\">\n        <ul>\n            <li>Áõ¥Êé•ËÆøÈóÆ <span>1000</span></li>\n            <li>Á§æ‰∫§ÁΩëÁªú <span>800</span></li>\n        </ul>\n    </div>\n</div>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"report-widget\">\n    <h3>È¶ñÈ°µ</h3>\n\n    <div class=\"table-container\">\n        <table class=\"table data\" data-provides=\"rowlink\">\n            <thead>\n                <tr>\n                    <th><span>È°µÈù¢ÁΩëÂùÄ</span></th>\n                    <th><span>ÊµèËßàÈáè</span></th>\n                    <th><span>% ÊµèËßàÈáè</span></th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr>\n                    <td>/</td>\n                    <td>90</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"90%\"></div>\n                            <a href=\"/\">90%</a>\n                        </div>\n                    </td>\n                </tr>\n                <tr>\n                    <td>/docs</td>\n                    <td>10</td>\n                    <td>\n                        <div class=\"progress\">\n                            <div class=\"bar\" style=\"10%\"></div>\n                            <a href=\"/docs\">10%</a>\n                        </div>\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Attaching Headers to Response in PHP\nDESCRIPTION: Shows how to attach multiple headers to a response using method chaining. This is useful for customizing the response metadata.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/response-view.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)\n    ->header('Content-Type', $type)\n    ->header('X-Header-One', 'Header Value')\n    ->header('X-Header-Two', 'Header Value');\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Job Attempts with Artisan in Bash\nDESCRIPTION: Artisan command to set the maximum number of times a job should be attempted before being considered failed. This helps in managing job retries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/queue.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:work connection-name --tries=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Preset Converter in October CMS\nDESCRIPTION: Shows how to set up an input preset converter in October CMS forms. This example demonstrates automatic URL generation based on the title field input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\ntitle:\n    label: Title\n\nurl:\n    label: URL\n    preset:\n        field: title\n        type: url\n```\n\n----------------------------------------\n\nTITLE: Disabling Persistent URL Parameters\nDESCRIPTION: Shows how to disable persistent URL parameters by passing false as the second argument to the page filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page(false) }}\">\n    Unknown blog post\n</a>\n```\n\n----------------------------------------\n\nTITLE: Returning String Response from AJAX Handler in PHP\nDESCRIPTION: Shows how to return a string from an AJAX handler. The string will be added to the response collection with the key 'result'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function onDoSomething()\n{\n    return 'Hello World';\n    // ['result' => 'Hello World']\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request Information in October CMS with PHP\nDESCRIPTION: Examples of examining the HTTP request details using the Request class in October CMS. Shows how to access the request path, method, headers, and other metadata.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/request-input.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$uri = Request::path();\n```\n\nLANGUAGE: php\nCODE:\n```\n$method = Request::method();\n\nif (Request::isMethod('post')) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Request::is('admin/*')) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n$url = Request::url();\n```\n\nLANGUAGE: php\nCODE:\n```\n$segment = Request::segment(1);\n```\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::header('Content-Type');\n```\n\nLANGUAGE: php\nCODE:\n```\n$value = Request::server('PATH_INFO');\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Request::secure()) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Request::ajax()) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Request::isJson()) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Request::wantsJson()) {\n    //\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nif (Request::format() == 'json') {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Job Attempt Count in PHP\nDESCRIPTION: Demonstrates how to check the number of attempts that have been made to run a job, useful for implementing retry limits.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif ($job->attempts() > 3) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of |theme Filter in Twig\nDESCRIPTION: Shows the resulting output of the |theme filter when applied to a JavaScript file, assuming the website is https://octobercms.com and the active theme is 'website'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-theme.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<script type=\"text/javascript\" src=\"http://october.com/themes/website/assets/js/menu.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Providing New Variables for Partials in Twig\nDESCRIPTION: Shows how to create and pass new variables to a partial. These variables will be available within the partial template for rendering dynamic content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/partials.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" city=\"Vancouver\" country=\"Canada\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Data with this.session.get in Twig\nDESCRIPTION: Demonstrates how to retrieve data from the session using the get method. Accepts a key name and optional default value if the key doesn't exist.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-session.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.get('key') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.session.get('key', 'default') }}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Behavior in Controller\nDESCRIPTION: Shows how to implement the List Behavior in an OctoberCMS backend controller class by adding the behavior to the $implement property and configuring the $listConfig property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/lists.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Blog\\Controllers;\n\nclass Categories extends \\Backend\\Classes\\Controller\n{\n    public $implement = [\n        \\Backend\\Behaviors\\ListController::class\n    ];\n\n    public $listConfig = 'list_config.yaml';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorder Controller Behavior in PHP\nDESCRIPTION: Basic controller setup for implementing the Reorder behavior in October CMS. Requires defining the behavior implementation and configuration file path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/reorder.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace Acme\\Shop\\Controllers;\n\nclass Categories extends Controller\n{\n    public $implement = [\n        'Backend.Behaviors.ReorderController',\n    ];\n\n    public $reorderConfig = 'config_reorder.yaml';\n\n    // [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Menu Items in October CMS\nDESCRIPTION: Examples of removing menu items using event listeners, including removing single items and multiple items.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n    $manager->removeMainMenuItem('Acme.Blog', 'blog');\n\n    $manager->removeSideMenuItem('Acme.Blog', 'blog', 'posts');\n\n    $manager->removeSideMenuItems('Acme.Blog', 'blog', [\n        'posts',\n        'categories'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Combining External Assets with |theme Filter in Twig\nDESCRIPTION: Shows how to combine assets outside the theme directory using special symbols for dynamic paths, such as '~/' for application-relative paths.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/theme.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ ['~/modules/system/assets/js/framework.js']|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Using dd Method in PHP Collections\nDESCRIPTION: The dd method dumps the collection's items and ends execution of the script, useful for debugging purposes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['John Doe', 'Jane Doe']);\n\n$collection->dd();\n\n/*\n    Collection {\n        #items: array:2 [\n            0 => \"John Doe\"\n            1 => \"Jane Doe\"\n        ]\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Configuring Rich Editor Widget in YAML\nDESCRIPTION: This snippet shows how to configure a Rich Editor (WYSIWYG) widget in YAML. It demonstrates setting toolbar buttons and size options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    toolbarButtons: bold|italic\n    size: huge\n```\n\n----------------------------------------\n\nTITLE: Parsing Dynamic Syntax in PHP\nDESCRIPTION: Demonstrates how to use the Dynamic Syntax parser to parse templates in both view and editor modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/parser.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Parse\\Syntax\\Parser as SyntaxParser;\n\n$syntax = SyntaxParser::parse($content);\n\necho $syntax->render();\n\necho $syntax->render(['websiteName' => 'October CMS']);\n\necho $syntax->toTwig();\n\n$array = $syntax->toEditor();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Balloon Selector in YAML\nDESCRIPTION: Example showing how to set a default value for a balloon-selector field. This configuration pre-selects the 'female' option when the form is initialized.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-balloon.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngender:\n    type: balloon-selector\n    label: Gender\n    default: female\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Variables in October CMS Template\nDESCRIPTION: Shows different methods for setting and accessing variables in the PHP section of an October CMS template, demonstrating array and object access.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Write via array\n$this['foo'] = 'bar';\n\n// Read via array\necho $this['foo'];\n\n// Read-only via object\necho $this->foo;\n```\n\n----------------------------------------\n\nTITLE: Setting HTML Language with Current Locale\nDESCRIPTION: Demonstrates how to set the HTML lang attribute using the current site locale, which may return empty if no locale is specified.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-site.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<html lang=\"{{ this.site.locale }}\">\n```\n\n----------------------------------------\n\nTITLE: Repeater Item Model Definition\nDESCRIPTION: PHP model class definition for repeater items with expando functionality and file attachments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-repeater.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse October\\Rain\\Database\\ExpandoModel;\n\nclass RepeaterItem extends ExpandoModel\n{\n    use \\October\\Rain\\Database\\Traits\\Sortable;\n\n    public $table = 'acme_blog_repeater_items';\n\n    protected $expandoPassthru = ['parent_id', 'sort_order'];\n\n    public $attachMany = [\n        'photos' => \\System\\Models\\File::class,\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generated JSON Output from Object Inspector Type\nDESCRIPTION: Example of the JSON output generated from an 'object' inspector type. This shows how the defined properties are structured in the resulting data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/inspector/type-object.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"address\": {\n    \"streetAddress\": \"321-210 Second ave\",\n    \"city\": \"Springfield\",\n    \"country\": \"us\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Redirection in Markdown for October CMS Documentation\nDESCRIPTION: This snippet demonstrates how to create a redirection in markdown using a special <Redirect> tag. The tag redirects users to the setup/installation page of the October CMS documentation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"setup/installation\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling Deferred Binding in PHP\nDESCRIPTION: Shows how to disable deferred binding for a model by setting the sessionKey to null in the model constructor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_79\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct()\n{\n    parent::__construct(...func_get_args());\n\n    $this->bindEvent('model.saveInternal', function () {\n        $this->sessionKey = null;\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Attachments in PHP\nDESCRIPTION: Illustrates how to add attachments to emails in October CMS, including specifying display names and MIME types.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nMail::send('acme.blog:welcome', $data, function ($message) {\n    //\n\n    $message->attach($pathToFile);\n});\n\n// With display name and MIME type\n$message->attach($pathToFile, ['as' => $display, 'mime' => $mime]);\n```\n\n----------------------------------------\n\nTITLE: Updating Partials with JavaScript API\nDESCRIPTION: JavaScript code that uses the JavaScript API to update a partial. It calls the 'onRefreshTime' handler and updates the 'mytime' partial in the '#myDiv' element.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/ajax/update-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n$.request('onRefreshTime', {\n    update: { mytime: '#myDiv' }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Default Naming for Partial Path in YAML\nDESCRIPTION: Example configuration where the partial path is an unqualified file name. The system will look for the file in model or controller directories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-partial.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: field_for_content\n```\n\n----------------------------------------\n\nTITLE: Retrieving Purged Value in October CMS Model\nDESCRIPTION: Shows how to retrieve an original value that was purged using the getOriginalPurgeValue method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn $user->getOriginalPurgeValue('password_confirmation');\n```\n\n----------------------------------------\n\nTITLE: Splitting PHP Collection\nDESCRIPTION: The split method breaks a collection into the given number of groups.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$groups = $collection->split(3);\n\n$groups->toArray();\n\n// [[1, 2], [3, 4], [5]]\n```\n\n----------------------------------------\n\nTITLE: Listening for Page Caching Events\nDESCRIPTION: This JavaScript event listener executes code before a page is cached, allowing cleanup operations like resetting forms or collapsing UI elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\naddEventListener('page:before-cache', function() {\n    // Close any open submenus, etc.\n});\n```\n\n----------------------------------------\n\nTITLE: Using App Directory View Template in YAML\nDESCRIPTION: Example showing how to use a partial from the app directory by specifying the app namespace in the path.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/ui-partial.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontent:\n    type: partial\n    path: app::formfields.content\n```\n\n----------------------------------------\n\nTITLE: Multisite Configuration in YAML\nDESCRIPTION: Shows how to enable and configure multisite support in blueprints with translatable fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/introduction.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhandle: Blog\\Post\ntype: entry\n# ...\nmultisite: true\n\nfields:\n    name:\n        label: Full Name\n        type: text\n        translatable: false\n```\n\n----------------------------------------\n\nTITLE: Specifying Flash Message Types in HTML\nDESCRIPTION: Shows how to display specific flash message types (success, warning) and include validation errors in HTML forms using the data-request-flash attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/flash-messages.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<form data-request-flash=\"success,warning\"></form>\n```\n\nLANGUAGE: html\nCODE:\n```\n<form\n    data-request-validate\n    data-request-flash=\"success,error,validate\">\n```\n\n----------------------------------------\n\nTITLE: Configuring List Behavior in YAML\nDESCRIPTION: Example of a typical List behavior configuration file in YAML format, specifying title, list columns, model class, and record URL.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ===================================\n#  List Behavior Config\n# ===================================\n\ntitle: Blog Posts\nlist: ~/plugins/acme/blog/models/post/columns.yaml\nmodelClass: Acme\\Blog\\Models\\Post\nrecordUrl: acme/blog/posts/update/:id\n```\n\n----------------------------------------\n\nTITLE: Displaying Paginated Results in Twig Template\nDESCRIPTION: Demonstrates how to display paginated results in a Twig template, iterating through users and rendering pagination links with the raw filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"container\">\n    {% for user in users %}\n        {{ user.name }}\n    {% endfor %}\n</div>\n\n{{ users.render|raw }}\n```\n\n----------------------------------------\n\nTITLE: Performing Left and Right Joins\nDESCRIPTION: Demonstrates how to use leftJoin() and rightJoin() methods to perform outer joins in database queries.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')\n    ->leftJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n\n$users = Db::table('users')\n    ->rightJoin('posts', 'users.id', '=', 'posts.user_id')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Finder in YAML\nDESCRIPTION: These examples show different ways to configure the page finder behavior for a blueprint, including disabling it or restricting its context.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/blueprints.md#2025-04-16_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npagefinder: false\n```\n\nLANGUAGE: yaml\nCODE:\n```\npagefinder: item\n```\n\nLANGUAGE: yaml\nCODE:\n```\npagefinder: list\n```\n\nLANGUAGE: yaml\nCODE:\n```\npagefinder:\n    context: list\n    replacements: []\n```\n\nLANGUAGE: yaml\nCODE:\n```\npagefinder:\n    replacements:\n        author: author.slug\n        category: categories.0.slug\n```\n\n----------------------------------------\n\nTITLE: Checking Backend User Authentication Status\nDESCRIPTION: Examples of checking if a user is signed in and retrieving the currently authenticated user model using BackendAuth methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/users.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Returns true if signed in.\n$loggedIn = BackendAuth::check();\n\n// Returns the signed in user\n$user = BackendAuth::getUser();\n```\n\n----------------------------------------\n\nTITLE: Disabling Timezone Conversion in Date Scope\nDESCRIPTION: YAML configuration for a date filter that disables automatic timezone conversion. By default, filtered values are converted to the backend timezone preference.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter/scope-date.md#2025-04-16_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Created\n    type: date\n    useTimezone: false\n```\n\n----------------------------------------\n\nTITLE: Advanced Image Resizing with Cropping in OctoberCMS Twig\nDESCRIPTION: Demonstrates using the '|resize' filter with additional options, specifically setting the resize mode to 'crop' for an 800x600 image.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-resize.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { mode: 'crop' }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Viewing Failed Jobs with Artisan\nDESCRIPTION: Artisan command to list all failed jobs, showing their ID, connection, queue, and failure time information.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:failed\n```\n\n----------------------------------------\n\nTITLE: Implementing OctoberCMS Preview View Form\nDESCRIPTION: HTML form template for the preview view that displays records in read-only mode using formRenderPreview() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_33\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"form-preview\">\n    <?= $this->formRenderPreview() ?>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Widget AJAX Handler Link in HTML\nDESCRIPTION: Demonstrates how to create a link in a widget partial that triggers an AJAX request to the widget's 'onPaginate' handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/ajax.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a\n    href=\"javascript:;\"\n    data-request=\"<?= $this->getEventHandler('onPaginate') ?>\"\n    title=\"Next page\">Next</a>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Widget Partial in PHP\nDESCRIPTION: Examples of rendering a widget partial using the makePartial method, with options for passing variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\npublic function render()\n{\n    return $this->makePartial('list');\n}\n\npublic function render()\n{\n    $this->vars['var'] = 'value';\n\n    return $this->makePartial('list');\n}\n\npublic function render()\n{\n    return $this->makePartial('list', ['var' => 'value']);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Related Fields with Model Scopes in YAML\nDESCRIPTION: Demonstrates how to connect two related fields (Country and State) using model scopes and field dependencies.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: relation\n\nstate:\n    label: State\n    type: relation\n    dependsOn: country\n    modelScope: filterStates\n```\n\n----------------------------------------\n\nTITLE: Binding to Component Events from a Page\nDESCRIPTION: Example demonstrating how to listen for component events from within a page's lifecycle function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/extending.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n[topic]\nslug = \"{{ :slug }}\"\n==\nfunction onInit()\n{\n    $this->topic->bindEvent('topic.post', function($post, $postUrl) {\n        trace_log('Â∏ñÂ≠êÂ∑≤Êèê‰∫§Ëá≥ '.$postUrl);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SQL Conditions to Relation Field in YAML\nDESCRIPTION: Shows how to apply SQL conditions to filter the available records in a relation field. This example filters for featured users.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-relation.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    conditions: is_featured = true\n```\n\n----------------------------------------\n\nTITLE: Using OrderByRaw for Raw Ordering\nDESCRIPTION: Shows how to use orderByRaw to specify a raw SQL expression for the order by clause, useful for complex sorting requirements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->orderByRaw('updated_at - created_at DESC')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Updating Database Records with where Clause in PHP\nDESCRIPTION: Demonstrates how to update existing records in a database table using the update method with a where clause to constrain which records get updated.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_40\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')\n    ->where('id', 1)\n    ->update(['votes' => 1]);\n```\n\n----------------------------------------\n\nTITLE: Defining belongsTo Relationship in Comment Model\nDESCRIPTION: Shows how to define a belongs-to relationship from Comment to Post model using the $belongsTo property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nclass Comment extends Model\n{\n    public $belongsTo = [\n        'post' => \\Acme\\Blog\\Models\\Post::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Methods in Extendable Classes\nDESCRIPTION: Example showing how to create dynamic methods in extendable objects using addDynamicMethod.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nPost::extend(function($model) {\n    $model->addDynamicProperty('tagsCache', null);\n\n    $model->addDynamicMethod('getTagsAttribute', function() use ($model) {\n        if ($this->tagsCache) {\n            return $this->tagsCache;\n        } else {\n            return $this->tagsCache = $model->tags()->lists('name');\n        }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Widget Template Implementation in HTML\nDESCRIPTION: HTML template for the dashboard widget showing loading states and data display.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/dashboards/vue-report-widgets.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"widget-body\">\n    <h3 class=\"widget-title\" v-text=\"widget.configuration.title\"></h3>\n\n    <div v-if=\"!loading\">\n        <p>Current server time: <span v-if=\"fullWidgetData\" v-text=\"fullWidgetData.data.current_time\"></span></p>\n    </div>\n    <p v-else>Loading...</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing an October CMS Plugin\nDESCRIPTION: Command to download and install a plugin by its name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Mutators in PHP Model\nDESCRIPTION: Shows how to customize which fields are automatically mutated to Carbon instances by defining the $dates property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/mutators.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * @var array dates return as \\Carbon\\Carbon instances\n     */\n    protected $dates = ['created_at', 'updated_at', 'disabled_at'];\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to a Component in Twig\nDESCRIPTION: Illustrates how to pass variables to a component when rendering it using the {% component %} tag. In this example, the 'postsPerPage' variable is set to 5.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-component.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% component \"blogPosts\" postsPerPage=\"5\" %}\n```\n\n----------------------------------------\n\nTITLE: Removing Navigation Items in PHP\nDESCRIPTION: Examples of removing main menu items and side menu items using the backend.menu.extendItems event.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/navigation.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n    $manager->removeMainMenuItem('Acme.Blog', 'blog');\n\n    $manager->removeSideMenuItem('Acme.Blog', 'blog', 'posts');\n\n    $manager->removeSideMenuItems('Acme.Blog', 'blog', [\n        'posts',\n        'categories'\n    ]);\n});\n```\n\n----------------------------------------\n\nTITLE: Dissociating 'Belongs To' Relationship in PHP\nDESCRIPTION: Shows how to use the 'dissociate' method to remove a 'belongs to' relationship, such as an author from a Post model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n$post->author()->dissociate();\n```\n\n----------------------------------------\n\nTITLE: Using Array Syntax for Validation Rules in October CMS\nDESCRIPTION: Shows how to use array syntax for defining validation rules, particularly useful for validating array inputs.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic $rules = [\n    'links.*.url' => ['required', 'url'],\n    'links.*.anchor' => ['required']\n];\n```\n\n----------------------------------------\n\nTITLE: Using External Combiner Paths with |theme Filter in Twig\nDESCRIPTION: Shows how to include a file outside the theme directory using a dynamic path symbol with the |theme filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-theme.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<script src=\"{{ ['~/modules/system/assets/js/framework.js']|theme }}\"></script>\n```\n\n----------------------------------------\n\nTITLE: Basic Color Picker Configuration in YAML\nDESCRIPTION: Demonstrates the basic configuration of a color picker field in YAML format. It sets up a field named 'color' with the label 'Background' using the colorpicker type.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-colorpicker.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Configuring Relation Column Type in YAML\nDESCRIPTION: Shows how to set up a relation column to display related data in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ngroup_name:\n    label: Group\n    relation: groups\n    select: name\n\nusers_count:\n    label: Users\n    relation: users\n    relationCount: true\n    type: number\n```\n\n----------------------------------------\n\nTITLE: Scoped Relationship Definition\nDESCRIPTION: Shows how to use scope methods to filter relationships in models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Post extends Model\n{\n    public $belongsToMany = [\n        'categories' => [\n            'Acme\\Blog\\Models\\Category',\n            'scope' => 'isActive'\n        ]\n    ];\n}\n\nclass Category extends Model\n{\n    public function scopeIsActive($query)\n    {\n        return $query->where('is_active', true)->orderBy('name', 'desc');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Plugin Configuration Values in PHP\nDESCRIPTION: Example showing how to override a plugin's configuration values by creating a local configuration file with the same structure but different values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => 20\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Scopes in YAML\nDESCRIPTION: Example of defining related filter scopes with dependencies, where the state scope depends on the country scope selection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/filter-scopes.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncountry:\n    label: Country\n    type: group\n\nstate:\n    label: State\n    type: group\n    dependsOn: country\n    optionsMethod: getCityOptionsForFilter\n```\n\n----------------------------------------\n\nTITLE: Rendering Content Blocks with Twig in OctoberCMS\nDESCRIPTION: Demonstrates how to render CMS content blocks using the {% content %} tag, including rendering from subdirectories and as plain text or Markdown.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/markup/tag-content.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"contacts.htm\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"sidebar/content.htm\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"readme.txt\" %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"changelog.md\" %}\n```\n\n----------------------------------------\n\nTITLE: Parsing YAML in PHP\nDESCRIPTION: Demonstrates how to use the YAML facade to parse YAML syntax into a PHP array and vice versa.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$array = Yaml::parse($yamlString);\n\n$array = Yaml::parseFile($filePath);\n\n$yamlString = Yaml::render($array);\n```\n\n----------------------------------------\n\nTITLE: Creating Database Indexes\nDESCRIPTION: Examples of adding different types of indexes to database tables, including inline definitions, after column definition, and composite indexes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/structure.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$table->string('email')->unique();\n```\n\nLANGUAGE: php\nCODE:\n```\n$table->unique('email');\n```\n\nLANGUAGE: php\nCODE:\n```\n$table->index(['account_id', 'created_at']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$table->index(['account_id', 'created_at'], 'account_created');\n```\n\n----------------------------------------\n\nTITLE: Custom Select2 Configuration with Data Attributes in YAML\nDESCRIPTION: Configures custom Select2 behavior for a dropdown using data attributes to fine-tune auto-completion behavior.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-dropdown.md#2025-04-16_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nattributes:\n    data-handler: onGetClientOptions\n    data-minimum-input-length: 3\n    data-process-Results: true\n    data-ajax--delay: 300\n```\n\n----------------------------------------\n\nTITLE: Committing Deferred Bindings on Save\nDESCRIPTION: This code shows how to commit all deferred bindings when saving a model by providing the session key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/relations.md#2025-04-16_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n$post = new Post;\n$post->title = \"First blog post\";\n$post->save(null, $sessionKey);\n```\n\n----------------------------------------\n\nTITLE: Sending Additional Data with AJAX Request\nDESCRIPTION: Example of running 'onCalculate' handler with additional data sent along with the form data.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/javascript-api.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#myform', 'onCalculate', { data: { value: 55 } })\n```\n\n----------------------------------------\n\nTITLE: Simple Pagination with Filtered Model Results in PHP\nDESCRIPTION: Demonstrates using simplePaginate with model queries that have where clauses, providing efficient pagination for filtered datasets.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->simplePaginate(15);\n```\n\n----------------------------------------\n\nTITLE: Triggering AJAX Request with HTML Button\nDESCRIPTION: Shows how to create a button in HTML that triggers an AJAX request to the 'onDoSomething' handler when clicked.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/ajax.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button\n    type=\"button\"\n    data-request=\"onDoSomething\"\n    class=\"btn btn-default\">\n    Do Something\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Messages in YAML\nDESCRIPTION: Example of overriding default messages used by the Form Controller using the customMessages option in YAML configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncustomMessages:\n    notFound: Did not find the thing\n    flashCreate: New thing created\n    flashUpdate: Updated that thing\n    flashDelete: Thing is gone\n```\n\n----------------------------------------\n\nTITLE: Implementing Navigation Counters in October CMS\nDESCRIPTION: Example showing how to add counters to navigation items using counter and counterLabel properties.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'blog' => [\n    // ...\n    'counter' => [\\Author\\Plugin\\Classes\\MyMenuCounterService::class, 'getCounterMethod'],\n    'counterLabel' => 'Label describing a dynamic menu counter',\n],\n```\n\n----------------------------------------\n\nTITLE: Converting Collections to Arrays in PHP\nDESCRIPTION: Shows how to convert a collection of models to an array. This example retrieves all User models and converts the entire collection to an array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/serialization.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$users = User::all();\n\nreturn $users->toArray();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Value with Config::get() in PHP\nDESCRIPTION: Shows the PHP equivalent of using Config::get() to retrieve the 'app.locale' configuration value, which is analogous to the Twig config() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/config.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?= Config::get('app.locale') ?>\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Response in PHP\nDESCRIPTION: Demonstrates how to create a JSON response, which automatically sets the Content-Type header to application/json.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::json(['name' => 'Steve', 'state' => 'CA']);\n```\n\n----------------------------------------\n\nTITLE: PHP Success Flag Handler\nDESCRIPTION: AJAX handler that sets a success flag for conditional redirection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/features/redirects.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction onSignup()\n{\n    $this['success'] = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Switch Column Type in YAML\nDESCRIPTION: Shows how to set up a switch column for boolean values in an October CMS list widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nenabled:\n    label: Enabled\n    type: switch\n    options:\n        - Nope\n        - Yeah\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Form Labels\nDESCRIPTION: Shows how to add HTML attributes to form labels.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::label('email', 'ÁîµÂ≠êÈÇÆ‰ª∂Âú∞ÂùÄ', ['class' => 'awesome']) ?>\n```\n\n----------------------------------------\n\nTITLE: Implementing Color Picker in OctoberCMS\nDESCRIPTION: Demonstrates the usage of the color picker widget in OctoberCMS forms, including the option to specify available colors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{colorpicker name=\"bg_color\" label=\"Background colour\" allowEmpty=\"true\" availableColors=\"#ffffff|#000000\"}{/colorpicker}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output\nDESCRIPTION: Example of the final HTML output when the page content is merged with the layout template\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/layouts.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <p>Hello, world!</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuration Section with INI Format in October CMS\nDESCRIPTION: Demonstrates the INI format used in the configuration section of an October CMS template, including component configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/themes.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog\"\nlayout = \"default\"\n\n[component]\nparameter = \"value\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials with Twig\nDESCRIPTION: Example of how to render a partial within a page layout using Twig syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/partials.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"sidebar\">\n    {% partial \"sidebar-contacts\" %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using External Partial Parameters in Component Properties\nDESCRIPTION: This snippet shows how to initialize component properties with values from partial parameters using the curly bracket syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[demoTodo]\nmaxItems = {{ maxItems }}\n==\n...\n```\n\n----------------------------------------\n\nTITLE: Rendering Repeater with Group Mode in October CMS\nDESCRIPTION: Demonstrates how to use the repeater field in group mode with a dynamic syntax parser.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n{variable name=\"sections\" type=\"repeater\" prompt=\"Add another section\" tab=\"Sections\"\n        groups=\"$/author/plugin/repeater_fields.yaml\"}{/variable}\n```\n\n----------------------------------------\n\nTITLE: Accessing Array Input Values with Dot Notation\nDESCRIPTION: Demonstrates how to access nested array values in form input using dot notation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$input = Input::get('products.0.name');\n```\n\n----------------------------------------\n\nTITLE: Filter with Arguments in Twig\nDESCRIPTION: Shows how to use filters with arguments to modify variable output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/templating.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{{ price|currency('USD') }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in HTML Content Block\nDESCRIPTION: Shows how to access a passed variable named 'name' within an HTML content block using single curly bracket syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/content.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>This is a demo for {name}</h1>\n```\n\n----------------------------------------\n\nTITLE: Filtering Flash Messages by Type in October CMS\nDESCRIPTION: Demonstrates how to filter flash messages to display only a specific type (in this case, only success messages).\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/flash.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% flash success %}\n    <div class=\"alert alert-success\">{{ message }}</div>\n{% endflash %}\n```\n\n----------------------------------------\n\nTITLE: Configuring List Controller Filter in YAML\nDESCRIPTION: This snippet shows how to add a filter property to the List Controller configuration file to enable filtering.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/filters.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# config_list.yaml\n\n# ...\n\n# Displays the list filter\nfilter: $/october/test/models/user/scopes.yaml\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookies to Response in PHP\nDESCRIPTION: Demonstrates how to attach a cookie to a response using the withCookie method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)->withCookie('name', 'value');\n\n->withCookie($name, $value, $minutes, $path, $domain, $secure, $httpOnly)\n```\n\n----------------------------------------\n\nTITLE: Taglist in Relation Mode in YAML\nDESCRIPTION: Configuration for a taglist in relation mode that sources and assigns tags via a many-to-many relationship.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-taglist.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n    type: taglist\n    mode: relation\n```\n\n----------------------------------------\n\nTITLE: Running Code Before AJAX Handlers in Components\nDESCRIPTION: Shows how to define an init method in a component class to run code before any AJAX handler executes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nfunction init()\n{\n    // From a component or widget class\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Model Accessor in PHP\nDESCRIPTION: Demonstrates how to create a model accessor to modify the display value of a column in an October CMS list.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/lists.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function getStatusLabelAttribute()\n{\n    return title_case($this->status_code);\n}\n```\n\n----------------------------------------\n\nTITLE: Using SelectRaw with Parameter Binding\nDESCRIPTION: Demonstrates how to use selectRaw() with parameter binding to safely create computed columns with arithmetic operations.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n$orders = Db::table('orders')\n    ->selectRaw('price * ? as price_with_tax', [1.0825])\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Installing the Currency Plugin via Command Line in October CMS\nDESCRIPTION: Bash command to install the Responsiv.Currency plugin, which is required for the currency column functionality to work in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/lists/column-currency.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install Responsiv.Currency\n```\n\n----------------------------------------\n\nTITLE: Creating Forms for Handler Methods\nDESCRIPTION: Shows how to open a form that points to a handler method in a page or component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['request' => 'onSave'])\n```\n\n----------------------------------------\n\nTITLE: Dynamic Options for Set Inspector\nDESCRIPTION: Shows how to implement dynamic options loading for Set inspector using a getter method that pulls data from a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-set.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getContextOptions()\n{\n    return ContextModel::pluck('name', 'code')->all();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Finder in OctoberCMS\nDESCRIPTION: Demonstrates the use of the media finder field type for selecting files from the media library in OctoberCMS forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/parser.md#2025-04-16_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{mediafinder name=\"logo\" label=\"Logo\"}defaultlogo.png{/mediafinder}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ logo|media }}\n```\n\n----------------------------------------\n\nTITLE: Concatenating Columns with Raw SQL\nDESCRIPTION: Shows how to use Db::raw to concatenate database columns and strings for creating computed columns.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/query.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nDb::raw(\"(first_name, ' ', last_name) as full_name\");\n```\n\n----------------------------------------\n\nTITLE: Registering Form Widgets in PHP\nDESCRIPTION: Example of registering form widgets in a plugin registration class by overriding the registerFormWidgets method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\npublic function registerFormWidgets()\n{\n    return [\n        \\Backend\\FormWidgets\\CodeEditor::class => 'codeeditor',\n        \\Backend\\FormWidgets\\RichEditor::class => 'richeditor'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Including AJAX Framework with Extras in Twig Template\nDESCRIPTION: Shows how to include the AJAX framework with extra features like form validation and loading indicators.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/introduction.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% framework extras %}\n```\n\n----------------------------------------\n\nTITLE: Global Validation Message Override Structure\nDESCRIPTION: Shows the structure for overriding validation messages globally using a language file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'required' => 'The :attribute field is required!',\n    // ...\n\n    'custom' => [\n        // ...\n    ],\n\n    'attributes' => [\n        // ...\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Overriding Persistent URL Parameters\nDESCRIPTION: Demonstrates how to override persistent URL parameters by providing new values in the parameters array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/filter-page.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ 'post'|page({ post_id: 6 }) }}\">\n    Blog post #6\n</a>\n```\n\n----------------------------------------\n\nTITLE: Removing Plugin\nDESCRIPTION: Command to completely remove a plugin, destroying its database tables and deleting its files from the filesystem.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:remove AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Defining a PHP Trait\nDESCRIPTION: Example of how to define a PHP trait with a simple method, shown for comparison with October CMS behaviors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/behaviors.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrait UtilityFunctions\n{\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Query Builder Results in PHP\nDESCRIPTION: Demonstrates how to paginate database query results using the paginate method on a query builder, displaying 15 items per page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Adding Import Button to List Toolbar in PHP\nDESCRIPTION: Demonstrates how to add an import button to the list toolbar. The button links to the import action of the controller.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/importexport/importexport-controller.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<a\n    href=\"<?= Backend::url('acme/campaign/subscribers/import') ?>\"\n    class=\"btn btn-default oc-icon-upload\">\n    Import Records\n</a>\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Configuration File Values in PHP\nDESCRIPTION: Shows how to access configuration values from a custom configuration file (e.g., custom.php) using a different key format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/settings/file-settings.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$maxItems = Config::get('acme.demo::custom.maxItems', 50);\n```\n\n----------------------------------------\n\nTITLE: Shuffling Collection Items in PHP\nDESCRIPTION: Demonstrates how to use the shuffle() method to randomly shuffle the items in a collection.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/collections.md#2025-04-16_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection([1, 2, 3, 4, 5]);\n\n$shuffled = $collection->shuffle();\n\n$shuffled->all();\n\n// [3, 2, 5, 1, 4] (generated randomly)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Eloquent Collection in PHP\nDESCRIPTION: Demonstrates how to iterate through an Eloquent collection retrieved from a database query. The collection allows looping through it like a simple PHP array.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('is_active', true)->get();\n\nforeach ($users as $user) {\n    echo $user->name;\n}\n```\n\n----------------------------------------\n\nTITLE: Queued Events in October CMS - PHP\nDESCRIPTION: Example of using Event::queue to defer the firing of an event, which can be used in conjunction with queues.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nEvent::queue('foo', [$user]);\n```\n\n----------------------------------------\n\nTITLE: HTML Element with Control Attribute\nDESCRIPTION: Demonstrates how to create an HTML element that will be observed by a registered control using the data-control attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div data-control=\"hello\"></div>\n```\n\n----------------------------------------\n\nTITLE: Using the {% styles %} System Placeholder in Twig\nDESCRIPTION: Shows how to use the {% styles %} system placeholder to render CSS links to stylesheet files injected by the application.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/placeholder.md#2025-04-16_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n<head>\n    ...\n    {% styles %}\n</head>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Values\nDESCRIPTION: Shows how to manually access form values using the Form::value method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n<input type=\"text\" name=\"name\" value=\"<?= Form::value('name') ?>\" />\n```\n\n----------------------------------------\n\nTITLE: Ordering Eager Loaded Relationships\nDESCRIPTION: Shows how to order eager loaded relationships using query builder methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/relations.md#2025-04-16_snippet_61\n\nLANGUAGE: php\nCODE:\n```\n$users = User::with([\n    'posts' => function ($query) {\n        $query->orderBy('created_at', 'desc');\n    }\n])->get();\n```\n\n----------------------------------------\n\nTITLE: Copying Files in Storage\nDESCRIPTION: Example showing how to copy an existing file to a new location on the disk using the copy method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/storage.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nStorage::copy('old/file1.jpg', 'new/file1.jpg');\n```\n\n----------------------------------------\n\nTITLE: Creating AJAX-Enabled Forms\nDESCRIPTION: Demonstrates how to create a form with AJAX functionality using the Form::ajax method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nForm::ajax('onSave')\n```\n\n----------------------------------------\n\nTITLE: Displaying Theme 404 Page in Twig\nDESCRIPTION: Shows how to set the response code to 404 and display the theme's 404 page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-abort.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(404) %}\n```\n\n----------------------------------------\n\nTITLE: Attaching Cookies to Response\nDESCRIPTION: Demonstrates how to attach a new cookie to an HTTP response.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$response = Response::make('Hello World');\n\n$response->withCookie(Cookie::make('name', 'value', $minutes));\n```\n\n----------------------------------------\n\nTITLE: Relation Field Configuration in YAML\nDESCRIPTION: YAML configuration examples for relation fields using both nameFrom and custom select statements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ncategories:\n    label: Categories\n    type: relation\n    nameFrom: title\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n    label: User\n    type: relation\n    select: concat(first_name, ' ', last_name)\n```\n\n----------------------------------------\n\nTITLE: Database Reconnection in Long-Running Queue Jobs\nDESCRIPTION: Demonstrates how to reconnect to the database when connections may time out in long-running daemon queue workers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/queues.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nDb::reconnect();\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Custom Success Handler\nDESCRIPTION: Shows how to override the default success handler while still maintaining default functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onCalculate', {success: function(data) {\n    //... do something ...\n    this.success(data);\n}})\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Content Block - HTML\nDESCRIPTION: Demonstrates how to use passed variables within a content block using single curly bracket syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/content.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<h1>This is a demo for {name}</h1>\n```\n\n----------------------------------------\n\nTITLE: Using Query Scopes in PHP with OctoberCMS\nDESCRIPTION: This example shows how to use and chain query scopes when querying a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/model.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = User::popular()->active()->orderBy('created_at')->get();\n```\n\n----------------------------------------\n\nTITLE: Checking if File Was Uploaded\nDESCRIPTION: Shows how to verify if a file was included in the request.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nif (Input::hasFile('photo')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX Delete Request with Confirmation\nDESCRIPTION: Example showing how to request confirmation before sending a delete request and handling redirect after completion.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/javascript-api.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$('form').request('onDelete', {\n    confirm: 'Are you sure?',\n    redirect: '/dashboard'\n})\n```\n\n----------------------------------------\n\nTITLE: Paginating Model Results in PHP\nDESCRIPTION: Example of paginating database model query results with 15 items per page using the paginate method on a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/pagination.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$users = User::paginate(15);\n```\n\n----------------------------------------\n\nTITLE: Proportional Image Resizing in PHP\nDESCRIPTION: Demonstrates how to resize an image while maintaining its original aspect ratio by only specifying the width.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/resizer.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$image->resize(800, null, [...]);\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Classes to Forms\nDESCRIPTION: Demonstrates how to add regular HTML attributes like CSS classes to a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'class' => 'pretty-form'])\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Dropdown Lists\nDESCRIPTION: Shows how to generate select dropdowns with options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::select('size', ['L' => 'Â§ßÁöÑ', 'S' => 'Â∞èÁöÑ']) ?>\n```\n\n----------------------------------------\n\nTITLE: Adding File Attachment from URL in PHP\nDESCRIPTION: Shows how to add a file attachment from a URL, requiring the cURL PHP extension.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$file = new System\\Models\\File;\n$file->fromUrl('https://example.com/uploads/public/path/to/avatar.jpg');\n\n$user->avatar()->add($file);\n```\n\n----------------------------------------\n\nTITLE: Using October Icons in YAML Definition - October CMS\nDESCRIPTION: Example of how to define an October icon in YAML configuration. When used as an icon definition, only the 'icon-' prefix is needed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/available-icons.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nicon: icon-october\n```\n\n----------------------------------------\n\nTITLE: Customizing BelongsTo Relationship with Custom Key Names (PHP)\nDESCRIPTION: Demonstrates how to customize a belongsTo relationship by specifying a custom foreign key name using the 'key' parameter when the default naming convention isn't used.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic $belongsTo = [\n    'post' => ['Acme\\Blog\\Models\\Post', 'key' => 'my_post_id']\n];\n```\n\n----------------------------------------\n\nTITLE: URL Parameter Access in PHP\nDESCRIPTION: Demonstrates how to access URL parameters from the page's PHP section using the param() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/pages.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nurl = \"/blog/post/:post_id\"\n==\nfunction onStart()\n{\n    $postId = $this->param('post_id');\n}\n==\n```\n\n----------------------------------------\n\nTITLE: Deleting All Records from a Table\nDESCRIPTION: Demonstrates how to delete all records from a database table using the delete method without any conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/query.md#2025-04-16_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nDb::table('users')->delete();\n```\n\n----------------------------------------\n\nTITLE: Form Create View Template in HTML\nDESCRIPTION: HTML template for form create view with AJAX handlers and buttons.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_31\n\nLANGUAGE: html\nCODE:\n```\n<?= Form::open(['class'=>'layout']) ?>\n\n    <div class=\"layout-row\">\n        <?= $this->formRender() ?>\n    </div>\n\n    <div class=\"form-buttons\">\n        <div class=\"loading-indicator-container\">\n            <button\n                type=\"button\"\n                data-request=\"onSave\"\n                data-request-data=\"close:true\"\n                data-hotkey=\"ctrl+enter, cmd+enter\"\n                data-load-indicator=\"Creating Category...\"\n                class=\"btn btn-default\">\n                Create and Close\n            </button>\n            <span class=\"btn-text\">\n                or <a href=\"<?= Backend::url('acme/blog/categories') ?>\">Cancel</a>\n            </span>\n        </div>\n    </div>\n\n<?= Form::close() ?>\n```\n\n----------------------------------------\n\nTITLE: Creating Email and File Input Fields\nDESCRIPTION: Shows how to generate email and file input fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::email($name, $value = null, $attributes = []) ?>\n<?= Form::file($name, $attributes = []) ?>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Component Rendering Using Partials\nDESCRIPTION: This snippet demonstrates that rendering a component is equivalent to rendering its default partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/themes/components.md#2025-04-16_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[blog]\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% partial 'blog::default' %}\n```\n\n----------------------------------------\n\nTITLE: Setting Navigation in Content Area\nDESCRIPTION: Places a navigation item in the Content area by setting the parent to 'content'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/navigation.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n    parent: content\n```\n\n----------------------------------------\n\nTITLE: Self-Updating Contact Form Example\nDESCRIPTION: Complete example of a self-updating contact form implementation including PHP handler, template configuration, and markup.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/ajax-partial.md#2025-04-16_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\ndescription = \"Self Updating Partial\"\n```\n\nLANGUAGE: php\nCODE:\n```\n<?\nfunction onSubmitContactForm()\n{\n    $this['submitted'] = true;\n}\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if submitted %}\n    <p>Thank you for contacting us!</p>\n{% endif %}\n\n<button\n    data-request=\"onSubmitContactForm\"\n    data-request-update=\"{ _self: true }\">\n    Submit\n</button>\n```\n\n----------------------------------------\n\nTITLE: Event Firing Check\nDESCRIPTION: Shows how to check which specific event is being fired within a wildcard listener.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/event.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('foo.*', function($event, $params) {\n    if (Event::firing() === 'foo.bar') {\n        // ...\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Report Widget with Artisan Command in October CMS\nDESCRIPTION: This command creates a new report widget class, view, and basic asset files for an October CMS plugin. It requires the author.plugin name and the widget class name as arguments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/backend/report-widgets.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan create:reportwidget Acme.Blog TopPosts\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect Component in Markdown\nDESCRIPTION: A Vue-like component that redirects users from the Tailor Components page to a new section located at '../components/section'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/tailor/components.md#2025-04-16_snippet_0\n\nLANGUAGE: markup\nCODE:\n```\n<Redirect to=\"../components/section\" />\n```\n\n----------------------------------------\n\nTITLE: Basic Form Field Type Definition in YAML\nDESCRIPTION: Demonstrates the basic structure for defining a form field with its type property in YAML format.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form-fields.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    myfield:\n        type: textarea\n        # ...\n```\n\n----------------------------------------\n\nTITLE: Listening for Dispatched Control Events\nDESCRIPTION: Demonstrates how to listen for events dispatched by controls and access the control instance.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/hot-controls.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\naddEventListener('hello:ready', function(ev) {\n    const helloControl = oc.fetchControl(ev.target);\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Markdown to HTML using |md filter in Twig\nDESCRIPTION: The |md filter converts Markdown syntax to HTML. It allows for basic HTML formatting based on Markdown syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/md.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\nLANGUAGE: html\nCODE:\n```\n<strong>Text</strong> is bold.\n```\n\n----------------------------------------\n\nTITLE: Streamed Download Response\nDESCRIPTION: Shows how to create a streamed download response from a string without writing to disk.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/response-view.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::streamDownload(function() {\n    echo 'CSV Contents...';\n}, 'export.csv');\n```\n\n----------------------------------------\n\nTITLE: Adding Soft Delete Column in Migration\nDESCRIPTION: Demonstrates how to add a soft delete column to a database table using a migration in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('posts', function ($table) {\n    $table->softDeletes();\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Permanent Cookies\nDESCRIPTION: Demonstrates how to create cookies that never expire.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/request-input.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$cookie = Cookie::forever('name', 'value');\n```\n\n----------------------------------------\n\nTITLE: Controller Extension Example - PHP\nDESCRIPTION: Demonstration of extending controller functionality to modify HTTP responses and headers.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/controllers.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\\Author\\Plugin\\Controllers\\SomeController::extend(function($controller) {\n    $controller->setResponseHeader('Test-Header', 'Test');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Report Widget Class in PHP\nDESCRIPTION: Example of defining a report widget class that extends Backend\\Classes\\ReportWidgetBase.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace RainLab\\GoogleAnalytics\\ReportWidgets;\n\nuse Backend\\Classes\\ReportWidgetBase;\n\nclass TrafficSources extends ReportWidgetBase\n{\n    public function render()\n    {\n        return $this->makePartial('widget');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Pluralization with Parameters\nDESCRIPTION: Shows advanced pluralization using trans_choice with both count and parameter substitution.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/trans.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ '{1} :value minute ago|[2,*] :value minutes ago'|trans_choice(5, { value: 5 }) }}\n```\n\n----------------------------------------\n\nTITLE: View Creation and Data Passing\nDESCRIPTION: Shows different ways to create views and pass data to them.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nreturn View::make('acme.blog::greeting', ['name' => 'Charlie']);\n```\n\nLANGUAGE: php\nCODE:\n```\n$view = View::make('acme.blog::greeting')->with('name', 'Steve');\n\n$view = View::make('acme.blog::greeting')->withName('steve');\n```\n\nLANGUAGE: php\nCODE:\n```\n$view = View::make('acme.blog::greeting', $data);\n```\n\nLANGUAGE: php\nCODE:\n```\nView::share('name', 'Steve');\n```\n\n----------------------------------------\n\nTITLE: Opening Form with Custom HTTP Method\nDESCRIPTION: Shows how to specify a custom HTTP method when opening a form.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nForm::open(['url' => 'foo/bar', 'method' => 'put'])\n```\n\n----------------------------------------\n\nTITLE: Parsing Content as String in Twig\nDESCRIPTION: Demonstrates how to use the |content and |md filters to parse HTML and Markdown content in strings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/tag/content.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.content|content }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ post.markdown_content|md|content }}\n```\n\n----------------------------------------\n\nTITLE: Storing Items in Cache Permanently in PHP\nDESCRIPTION: Using the forever method to store items permanently in cache until manually removed.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/cache.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nCache::forever('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: File Download Responses\nDESCRIPTION: Examples of generating file download responses with various options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/response-view.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::download($pathToFile);\n\nreturn Response::download($pathToFile, $name, $headers);\n\nreturn Response::download($pathToFile)->deleteFileAfterSend(true);\n```\n\n----------------------------------------\n\nTITLE: Mail Template Usage in PHP\nDESCRIPTION: Shows how to send an email using a predefined mail template with data binding.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nMail::send('this.is.my.email', $data, function($message) use ($user) {\n    // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Field in YAML\nDESCRIPTION: Defines a password input field in a form using YAML configuration. The 'type' property is set to 'password' to mask the input.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuser_password:\n    label: Password\n    type: password\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output\nDESCRIPTION: Shows the final HTML output after merging layout and page content.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/layouts.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <body>\n        <p>Hello, world!</p>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing Form Input Values in PHP Handler\nDESCRIPTION: Shows how to access form input values in an AJAX handler using the input() function.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/handlers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onSubmitContactForm()\n{\n    $firstName = input('first_name');\n}\n```\n\n----------------------------------------\n\nTITLE: Translating Text with |trans Filter in Twig\nDESCRIPTION: Demonstrates how to use the |trans filter to translate a simple string in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/trans.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'I love programming.'|trans }};\n```\n\n----------------------------------------\n\nTITLE: Field Facades Example in YAML\nDESCRIPTION: Example of using field facades with underscore prefix to prevent field submission.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\naddress:\n    label: Title\n    type: text\n\n_map:\n    label: Point your address on the map\n    type: mapviewer\n```\n\n----------------------------------------\n\nTITLE: Parsing Markdown in Twig Templates\nDESCRIPTION: Shows how to use the 'md' filter in Twig templates to parse Markdown syntax.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/parser.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ '**Text** is bold.'|md }}\n```\n\n----------------------------------------\n\nTITLE: PHP Image Resizing Implementation\nDESCRIPTION: Shows how to resize images using PHP code with the ResizeImages class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/resize.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nResizeImages::resize('path/to/asset.jpg');\n```\n\nLANGUAGE: php\nCODE:\n```\nResizeImages::resize('path/to/asset.jpg', 800, 600, ['mode' => 'crop']);\n```\n\n----------------------------------------\n\nTITLE: Textarea Field with Default Value in YAML\nDESCRIPTION: Configuration showing how to set a default value for a textarea field using the default property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-textarea.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nquote_content:\n    type: textarea\n    label: Details\n    default: I like turtles\n```\n\n----------------------------------------\n\nTITLE: Simple 404 Abort in Twig\nDESCRIPTION: Shows how to abort a request with a 404 status code and display the theme's 404 page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/abort.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{% do abort(404) %}\n```\n\n----------------------------------------\n\nTITLE: PHP Model Scope Implementation\nDESCRIPTION: Implementation of a custom model scope method for filtering related models.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeGroupFilter($query, $scope)\n{\n    return $query->whereHas('roles', function($q) use ($scope) {\n        $q->whereIn('id', $scope->value);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Page URL Generation\nDESCRIPTION: Demonstrates how to generate a page URL in a PHP component using pageUrl() method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/filter/page.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?\\nfunction onStart()\\n{\\n    $this['newsPage'] = $this->pageUrl('blog/overview');\\n}\\n?>\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ newsPage }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Date Column in October CMS List\nDESCRIPTION: Configuration for a date column which displays only the date part in the format M j, Y.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/lists.md#2025-04-16_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ncreated_at:\n    label: Date\n    type: date\n```\n\n----------------------------------------\n\nTITLE: Current Page Link Creation\nDESCRIPTION: Shows how to create a link to the current page using the |page filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"{{ this|page }}\">Refresh page</a>\n```\n\n----------------------------------------\n\nTITLE: Defining Inverse Many-to-Many Relationship - PHP\nDESCRIPTION: Shows how to define the inverse of a many-to-many relationship in the Role model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nclass Role extends Model\n{\n    public $belongsToMany = [\n        'users' => \\Acme\\Blog\\Models\\User::class\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Methods for Model Comparison\nDESCRIPTION: Demonstrates diff and intersect methods for comparing model collections.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/collection.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse App\\User;\n\n$users = $users->diff(User::whereIn('id', [1, 2, 3])->get());\n```\n\n----------------------------------------\n\nTITLE: Accessing Layout Name in Twig\nDESCRIPTION: Demonstrates how to access the layout name used by the current page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ this.page.layout }}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Macros in Twig\nDESCRIPTION: Shows how to import macros using the _self variable and call the defined functions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-macro.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{% import _self as form %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ form.input('username') }}</p>\n<p>{{ form.input('password', null, 'password') }}</p>\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Tree Migration\nDESCRIPTION: Migration script to add parent_id column for implementing simple tree structures.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/traits.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nSchema::table('categories', function ($table) {\n    $table->integer('parent_id')->nullable()->unsigned();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Image Resizer with Uploaded File in PHP\nDESCRIPTION: Opens an image for resizing from an uploaded file input field.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/resizer.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$image = Resizer::open(Input::file('field_name'));\n```\n\n----------------------------------------\n\nTITLE: String Character Limiting in Twig\nDESCRIPTION: Limits the number of characters in a string with optional custom suffix.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/function-str.md#2025-04-16_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100) }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_limit('The quick brown fox...', 100, '... Read more!') }}\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Output\nDESCRIPTION: The final HTML rendered when the example page is loaded with the example layout, showing how the placeholder content and page content are combined.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-page.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n    <head>\n        <meta name=\"foo\" content=\"bar\">\n    </head>\n    <body>\n        <p>My content.</p>\n        ...\n```\n\n----------------------------------------\n\nTITLE: Injecting Variables with Resources Component in October CMS\nDESCRIPTION: Demonstrates how to use the resources component to create a new variable 'activeNav' and use it in a Twig template. The component declaration sets the variable, which is then accessed in the template.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/components/resources.md#2025-04-16_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[resources]\nvars[activeNav] = 'blog'\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% if activeNav == 'blog' %}\n    <p>The blog is active!</p>\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Backend List Extension\nDESCRIPTION: Shows how to extend backend lists by modifying columns through event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/extending.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.list.extendColumns', function ($widget) {\n    if (!$widget->getController() instanceof \\RainLab\\User\\Controllers\\Users) {\n        return;\n    }\n    if (!$widget->model instanceof \\RainLab\\User\\Models\\User) {\n        return;\n    }\n    $widget->addColumns([\n        'birthday' => [\n            'label' => 'Birthday'\n        ],\n    ]);\n    $widget->removeColumn('surname');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Report Widget Properties in PHP\nDESCRIPTION: Example of defining configurable properties for a report widget using the defineProperties method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/widgets.md#2025-04-16_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'title' => [\n            'title' => 'Â∞èÈÉ®‰ª∂Ê†áÈ¢ò',\n            'default' => 'È¶ñÈ°µ',\n            'type' => 'string',\n            'validationPattern' => '^.+$',\n            'validationMessage' => 'Â∞èÈÉ®‰ª∂Ê†áÈ¢òÊòØÂøÖÈúÄÁöÑ„ÄÇ'\n        ],\n        'days' => [\n            'title' => 'ÊòæÁ§∫Êï∞ÊçÆÁöÑÂ§©Êï∞',\n            'default' => '7',\n            'type' => 'string',\n            'validationPattern' => '^[0-9]+$'\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Section Component with Custom Parameter Lookup\nDESCRIPTION: Uses a custom URL parameter to look up the record in the Section component.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/components/section.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"author/:foobar\"\n\n[section]\nhandle = \"Blog\\\\Author\"\nidentifier = \"id\"\nvalue = \"{{ :foobar }}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Components in OctoberCMS Plugin\nDESCRIPTION: Shows how to register a component within the plugin registration class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/components.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function registerComponents()\n{\n    return [\n        \\October\\Demo\\Components\\Todo::class => 'demoTodo'\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Making Columns Invisible in October CMS Tailor Lists\nDESCRIPTION: Configuration to make a field column hidden by default in list views by setting the column type to 'invisible'. The field can still be added to the list view by the user.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/tailor/content-fields.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmyfield:\n    label: Form Label\n    column: invisible\n```\n\n----------------------------------------\n\nTITLE: Custom Filename with Twig Resize Filter\nDESCRIPTION: Demonstrates how to specify a custom filename when using the resize filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/filter/resize.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n<img src=\"{{ 'banner.jpg'|resize(800, 600, { filename: 'my-seo-friendly-name' }) }}\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Plain Text Content with Twig\nDESCRIPTION: Illustrates how to use the {% content %} tag to render a plain text content block.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/tag-content.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"readme.txt\" %}\n```\n\n----------------------------------------\n\nTITLE: Getting Local File Path of Attachment in PHP\nDESCRIPTION: Shows how to get the absolute local file system path of an uploaded file.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/database/attachments.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\necho $model->avatar->getLocalPath();\n```\n\n----------------------------------------\n\nTITLE: Preview Page Configuration in YAML\nDESCRIPTION: Basic configuration for the Preview page in the form behavior, defining only the page title.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/forms/form-controller.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npreview:\n    title: View Blog Post\n```\n\n----------------------------------------\n\nTITLE: Generated AJAX Form HTML\nDESCRIPTION: Shows the resulting HTML output from form_ajax() with attributes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/form.md#2025-04-16_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onSave\" class=\"form-horizontal\">\n```\n\n----------------------------------------\n\nTITLE: Using the Validate Method in PHP\nDESCRIPTION: Demonstrates the shorthand validate method for form validation and exception throwing.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$data = Validator::validate($data, $rules);\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory (PHP)\nDESCRIPTION: Example of creating a directory and any needed subdirectories using the makeDirectory method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nStorage::makeDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Model Update Operations\nDESCRIPTION: Updating existing model records using both instance and query methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n$flight = Flight::find(1);\n$flight->name = 'Darwin to Adelaide';\n$flight->save();\n```\n\n----------------------------------------\n\nTITLE: AJAX Partial Update using JavaScript API\nDESCRIPTION: Demonstrates updating a partial using the JavaScript API with update configuration\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/update-partials.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\noc.request('#mybutton', 'onRefreshTime', {\n    update: { mytime: '#myDiv' }\n});\n```\n\n----------------------------------------\n\nTITLE: Mass Update Query\nDESCRIPTION: Updating multiple records that match specific conditions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/model.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nFlight::where('is_active', true)\n    ->where('destination', 'Perth')\n    ->update(['delayed' => true]);\n```\n\n----------------------------------------\n\nTITLE: Snake Case String Conversion\nDESCRIPTION: Function to convert a string to snake_case format with optional custom delimiter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/function-str.md#2025-04-16_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_snake('hello world') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ str_snake('hello world', '---') }}\n```\n\n----------------------------------------\n\nTITLE: Creating Directories\nDESCRIPTION: Demonstrates how to create a directory including any necessary subdirectories.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/storage.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nStorage::makeDirectory($directory);\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Request Path in PHP\nDESCRIPTION: Demonstrates checking if the request path matches a pattern using wildcards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/request-input.md#2025-04-16_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nif (Request::is('admin/*')) {\n    //\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Redirect in Markdown\nDESCRIPTION: A markdown redirect directive that automatically sends users to the setup/installation documentation page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"setup/installation\" />\n```\n\n----------------------------------------\n\nTITLE: Checking Multiple Sites in PHP\nDESCRIPTION: Example of checking if multiple site definitions are available using the hasMultiSite method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (Site::hasMultiSite()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: MIME Type Validation in PHP\nDESCRIPTION: Example of validating file MIME types using the mimes rule.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/validation.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n'photo' => 'mimes:jpeg,bmp,png'\n```\n\n----------------------------------------\n\nTITLE: String Casting for JSON Conversion\nDESCRIPTION: Shows how to convert a model to JSON by casting it to a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/serialization.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$user = User::find(1);\n\nreturn (string) $user;\n```\n\n----------------------------------------\n\nTITLE: Creating Password Fields\nDESCRIPTION: Shows how to generate password input fields.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/html.md#2025-04-16_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::password('password') ?>\n```\n\n----------------------------------------\n\nTITLE: Relationship Query Builder Usage\nDESCRIPTION: Shows how to use relationships as query builders with method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/database/relations.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$user->posts()->where('is_active', true)->get();\n```\n\n----------------------------------------\n\nTITLE: Twig For Loop with Letter Range\nDESCRIPTION: Demonstrates iterating over a range of letters using the .. operator.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/for.md#2025-04-16_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{% for letter in 'a'..'z' %}\n    - {{ letter }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Site by ID in PHP\nDESCRIPTION: Shows how to look up a site by its unique ID using the getSiteFromId method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/site.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$siteFour = Site::getSiteFromId(4);\n```\n\n----------------------------------------\n\nTITLE: Hard-coded Component Property Configuration\nDESCRIPTION: Example of setting a hard-coded blog post ID in component configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/plugin/components.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/hard-coded-page\"\n\n[blogPost]\nid = \"2\"\n```\n\n----------------------------------------\n\nTITLE: Basic Event Firing in October CMS - PHP\nDESCRIPTION: Simple example of firing an event with no parameters using the Event::fire method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/events.md#2025-04-16_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nEvent::fire('myevent');\n```\n\n----------------------------------------\n\nTITLE: Button Generation\nDESCRIPTION: Shows how to generate submit buttons in forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/html.md#2025-04-16_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n<?= Form::submit('Click Me!') ?>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Count with loadCount in October CMS\nDESCRIPTION: This code shows how to lazy load the count of related records after the model has been retrieved. This is useful when you need to conditionally load counts after the initial query.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_38\n\nLANGUAGE: php\nCODE:\n```\n$user = User::first();\n$user->loadCount('roles');\n```\n\n----------------------------------------\n\nTITLE: Setting October CMS Project Key\nDESCRIPTION: Authenticates with October CMS gateway using a license key.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/migrate-laravel-project.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan project:set <license key>\n```\n\n----------------------------------------\n\nTITLE: Rendering Default Component Markup\nDESCRIPTION: Examples of rendering components with and without parameters in Twig templates.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/cms-components.md#2025-04-16_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' %}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{% component 'demoTodo' maxItems=\"7\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Traits Example\nDESCRIPTION: Example showing how to define a PHP trait with a method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ntrait UtilityFunctions\n{\n    public function sayHello()\n    {\n        echo \"Hello from \" . get_class($this);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Textarea Field with Default Value\nDESCRIPTION: Implementation of a textarea field with a predefined default value using the default property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-textarea.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nquote_content:\n    type: textarea\n    label: Details\n    default: I like turtles\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Session Data in PHP\nDESCRIPTION: Example of retrieving all data stored in the session using the all method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/session.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$data = Session::all();\n```\n\n----------------------------------------\n\nTITLE: Unique Validation with ID Exclusion\nDESCRIPTION: Shows how to implement unique validation while ignoring a specific ID.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'email' => 'unique:users,email_address,10'\n```\n\n----------------------------------------\n\nTITLE: Rendering a List in a View (PHP)\nDESCRIPTION: How to render a list in a view file using the listRender method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/lists/list-controller.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->listRender() ?>\n```\n\n----------------------------------------\n\nTITLE: Color Picker Widget in YAML\nDESCRIPTION: Examples of configuring color picker widget with predefined colors.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: ['#000000', '#111111', '#222222']\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: myColorList\n```\n\n----------------------------------------\n\nTITLE: Options Scope Configuration\nDESCRIPTION: YAML configuration for applying a scope to filter available options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nroles:\n    label: Role\n    type: group\n    nameFrom: name\n    modelClass: October\\Test\\Models\\Role\n    optionsScope: applyRoleOptionsFilter\n```\n\n----------------------------------------\n\nTITLE: Registering Event Subscriber in PHP\nDESCRIPTION: Shows how to register an event subscriber using Event::subscribe method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/event.md#2025-04-16_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nEvent::subscribe(new UserEventHandler);\n\nEvent::subscribe(UserEventHandler::class);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Properties in Extendable Classes\nDESCRIPTION: Example showing how to retrieve dynamic properties created in extendable objects.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/services/behaviors.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$model->getDynamicProperties();\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Command Argument\nDESCRIPTION: Example of defining an optional argument in the command signature.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/console-commands.md#2025-04-16_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected $signature = 'mail:send {user?}';\n```\n\n----------------------------------------\n\nTITLE: Handling AJAX Response with Data Attributes\nDESCRIPTION: Example of handling AJAX response data using data attributes API.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onHandleForm\" data-request-success=\"console.log(data)\">\n```\n\n----------------------------------------\n\nTITLE: Making JavaScript Controls Idempotent\nDESCRIPTION: This JavaScript example demonstrates how to create idempotent controls by tracking initialization state in the element's dataset property, preventing duplicate initialization.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_22\n\nLANGUAGE: js\nCODE:\n```\naddEventListener('page:loaded', function() {\n    // Find my control\n    var myControl = document.querySelector('.my-control');\n\n    // Check if control has already been initialized\n    if (!myControl.dataset.hasMyControl) {\n        myControl.dataset.hasMyControl = true;\n\n        // Initialize since this is the first time\n        initializeMyControl(myControl);\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Records with Raw SQL\nDESCRIPTION: Demonstrates how to insert records using raw SQL with the Db facade's insert method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/basics.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nDb::insert('insert into users (id, name) values (?, ?)', [1, 'Joe']);\n```\n\n----------------------------------------\n\nTITLE: Third-Party Package Dependency in composer.json\nDESCRIPTION: Example JSON snippet showing how a third-party package dependency is defined in the composer.json file, which should be copied from the root composer.json to the plugin's composer.json.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/resources/publishing-packages.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"aws/aws-sdk-php\": \"^3.158\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Media Path in PHP\nDESCRIPTION: The media_path function returns the fully qualified path to the application media directory. It can also generate a path to a specific file within the media directory.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/helpers.md#2025-04-16_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$path = media_path();\n\n$path = media_path('images/myimage.png');\n```\n\n----------------------------------------\n\nTITLE: Merging Arrays with zip Method in PHP\nDESCRIPTION: Demonstrates how to merge two arrays by combining their values at corresponding indexes using the zip method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/collections.md#2025-04-16_snippet_65\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['Chair', 'Desk']);\n\n$zipped = $collection->zip([100, 200]);\n\n$zipped->all();\n\n// [['Chair', 100], ['Desk', 200]]\n```\n\n----------------------------------------\n\nTITLE: Checking Site Groups in PHP\nDESCRIPTION: Example of checking if multiple site definitions are using grouped definitions.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/services/site.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif (Site::hasSiteGroups()) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring a Theme Dependency in composer.json\nDESCRIPTION: JSON configuration to include another theme as a dependency for your package. This example requires the Acme.Vanilla theme with a version range of 1.2.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/resources/publishing-packages.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"require\": {\n    \"acme/vanilla-theme\": \"^1.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Editor Widget in YAML\nDESCRIPTION: Configuration for a markdown editor form widget that renders a basic editor for markdown formatted text. Supports split and tab view modes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nmd_content:\n    type: markdown\n    size: huge\n    mode: split\n```\n\n----------------------------------------\n\nTITLE: AJAX Redirect Handler in PHP\nDESCRIPTION: Demonstrates how to implement a redirect response in an AJAX handler.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction onRedirectMe()\n{\n    return Redirect::to('http://google.com');\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Array Variables to Content in Twig\nDESCRIPTION: Demonstrates passing array variables to content blocks\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/tag-content.md#2025-04-16_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{% content \"welcome.htm\" likes=[\n    {name:'Dogs'},\n    {name:'Fishing'},\n    {name:'Golf'}\n] %}\n```\n\n----------------------------------------\n\nTITLE: Component Initialization Method\nDESCRIPTION: Shows how to implement an initialization method in a component or widget class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/ajax/handlers.md#2025-04-16_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nfunction init()\n{\n    // From a component or widget class\n}\n```\n\n----------------------------------------\n\nTITLE: Model Scope Configuration in YAML\nDESCRIPTION: YAML configuration for implementing a custom model scope filter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-number.md#2025-04-16_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nage:\n    label: Age\n    type: number\n    modelScope: numberFilter\n```\n\n----------------------------------------\n\nTITLE: PHP Options Scope Implementation\nDESCRIPTION: Implementation of a scope method to filter available options.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/filter/scope-group.md#2025-04-16_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function scopeApplyRoleOptionsFilter($query)\n{\n    return $query->where('id', '<>', 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files (PHP)\nDESCRIPTION: Examples of removing files from a disk using the delete method, which accepts either a single filename or an array of files to delete.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/storage.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nStorage::delete('file.jpg');\n\nStorage::delete(['file1.jpg', 'file2.jpg']);\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Themes in October CMS\nDESCRIPTION: Command to list all installed themes.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan theme:list\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Optional Middle Parameters in October CMS\nDESCRIPTION: Example showing that parameters in the middle of a URL are treated as required even when marked as optional.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/pages.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nurl = \"/blog/:post_id?/comments\"\n```\n\n----------------------------------------\n\nTITLE: AJAX Request with Redirect\nDESCRIPTION: Demonstrates how to redirect to another page after a successful AJAX request, commonly used for login forms.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/attributes-api.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onLogin\" data-request-redirect=\"/admin\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Editor Widget in YAML\nDESCRIPTION: YAML configuration for a code editor form widget that renders a plaintext editor for formatted code or markup. Configurable options include language selection, gutter display, word wrapping and font size.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/backend/forms.md#2025-04-16_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ncss_content:\n    type: codeeditor\n    size: huge\n    language: html\n```\n\n----------------------------------------\n\nTITLE: Basic Dictionary Property Definition in PHP\nDESCRIPTION: Demonstrates how to define a basic dictionary property with default values in OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/inspector/type-dictionary.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n    return [\n        'options' => [\n            'title' => 'Options',\n            'type' => 'dictionary',\n            'default' => ['option1' => 'Option 1'],\n        ]\n    ];\n}\n```\n\n----------------------------------------\n\nTITLE: Practical Example of Email Obfuscation in an HTML Link\nDESCRIPTION: Shows a complete example of using the html_email() function within an HTML anchor tag to create a protected mailto link, with the raw filter to prevent escaping of the encoded output.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<a href=\"mailto: {{ html_email('a@b.c')|raw }}\">Email me</a>\n\n<!-- The above will output -->\n<a href=\"mailto: &#109;&#97;&#105;&#108;&#x74;o&#x3a;&#97;&#64;b.&#x63;\">Email me</a>\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Helper Function Usage in Twig\nDESCRIPTION: Shows the basic syntax for using an HTML helper function in a Twig template, which is an alternative to using the PHP Html class methods directly.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/markup/function-html.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ html_strip() }}\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= Html::strip() ?>\n```\n\n----------------------------------------\n\nTITLE: Using str_reverse Filter for String Reversal\nDESCRIPTION: Shows how to use the str_reverse filter to reverse a string.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/str.md#2025-04-16_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n{{ 'Hello world!'|str_reverse }}\n```\n\n----------------------------------------\n\nTITLE: Attaching Headers to Response in PHP\nDESCRIPTION: Demonstrates how to add multiple headers to a response using method chaining.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/response-view.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nreturn Response::make($content)\n    ->header('Content-Type', $type)\n    ->header('X-Header-One', 'Header Value')\n    ->header('X-Header-Two', 'Header Value');\n```\n\n----------------------------------------\n\nTITLE: Modifying Side Menu Items in October CMS\nDESCRIPTION: Example of updating side menu items with new labels and counters using event listeners.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/backend/navigation.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nEvent::listen('backend.menu.extendItems', function($manager) {\n    $manager->getMainMenuItem('Acme.Blog', 'blog')\n        ->getSideMenuItem('posts')\n        ->label('News')\n        ->counter(9);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing AJAX Handler Data in Twig\nDESCRIPTION: Illustrates how to access data returned from an AJAX handler in Twig using the result variable.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/function/ajax-handler.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ result.someVariable }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Collection in PHP Model\nDESCRIPTION: Shows how to override the newCollection method in a model to use a custom Collection class with extended functionality.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/collection.md#2025-04-16_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass User extends Model\n{\n    /**\n     * Create a new Collection instance.\n     */\n    public function newCollection(array $models = [])\n    {\n        return new CustomCollection($models);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SparkPost Driver in October CMS\nDESCRIPTION: Configuration settings needed in the services.php file to use the SparkPost mail driver in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/mail.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'sparkpost' => [\n    'secret' => 'your-sparkpost-key',\n],\n```\n\n----------------------------------------\n\nTITLE: Triggering AJAX Handler with Form Submission in HTML\nDESCRIPTION: This snippet demonstrates how to trigger the 'onCalculate' handler when a form is submitted and update an element with the 'calcresult' partial.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/cms/ajax/attributes-api.md#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form data-request=\"onCalculate\" data-request-update=\"{ calcresult: '#result' }\">\n```\n\n----------------------------------------\n\nTITLE: Getting and Setting Active Language in PHP\nDESCRIPTION: Demonstrates how to check the active language and set a new active language using PHP methods in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/localization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::getLocale();\n\nApp::setLocale('fr');\n```\n\n----------------------------------------\n\nTITLE: Combining Assets with Theme Filter in Twig\nDESCRIPTION: Example of using the |theme filter to combine assets in October CMS, which allows preprocessing of files like LESS with theme variables.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/themes/settings.md#2025-04-16_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<link href=\"{{ ['assets/less/theme.less']|theme }}\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Redirecting to Templating Documentation in OctoberCMS Markdown\nDESCRIPTION: This snippet uses a custom Markdown syntax to create a redirect to the templating section of the OctoberCMS documentation. It's likely part of a static site generator or documentation system specific to OctoberCMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"templating\" />\n```\n\n----------------------------------------\n\nTITLE: Disabling a Plugin in October CMS\nDESCRIPTION: Command to disable an existing plugin.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/resources/installing-packages.md#2025-04-16_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:disable AuthorName.PluginName\n```\n\n----------------------------------------\n\nTITLE: Basic Carbon Usage in Twig\nDESCRIPTION: Examples of using the carbon() function to output current and specific datetime values.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/carbon.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon('now') }}\n```\n\nLANGUAGE: twig\nCODE:\n```\n{{ carbon('2024-01-01 02:13:23') }}\n```\n\n----------------------------------------\n\nTITLE: Fully Qualified AJAX Handler Reference in OctoberCMS\nDESCRIPTION: Shows how to use the fully qualified name for an AJAX handler to avoid naming conflicts by prefixing with the component name.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/cms/components.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\ndata-request=\"componentName::onMyComponentHandler\"\n```\n\n----------------------------------------\n\nTITLE: Manual Page Specification with Model Pagination in PHP\nDESCRIPTION: Shows how to manually specify which page of results to retrieve when paginating model queries by passing a second argument to the paginate method.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/database/pagination.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$users = User::where('votes', '>', 100)->paginate(15, 2);\n```\n\n----------------------------------------\n\nTITLE: Checking and Setting Active Language in PHP\nDESCRIPTION: Demonstrates how to get the current locale and set a new locale using PHP in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/system/localization.md#2025-04-16_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nApp::getLocale();\n\nApp::setLocale('fr');\n```\n\n----------------------------------------\n\nTITLE: Custom Status Code Response in Twig\nDESCRIPTION: Shows how to return a response with a custom HTTP status code as the second parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/function/response.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% do response('Bad Request', 400) %}\n```\n\n----------------------------------------\n\nTITLE: Model Validation Rules in PHP\nDESCRIPTION: Implementing server-side numeric validation rules in a PHP model class using the $rules property.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/field-number.md#2025-04-16_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic $rules = [\n    'your_age' => ['numeric'],\n];\n```\n\n----------------------------------------\n\nTITLE: Generating CSS Class from Layout ID in OctoberCMS Twig Template\nDESCRIPTION: This snippet demonstrates how to use the 'id' property of the layout object to generate a CSS class name. The 'id' property converts the layout file name and folder name to a CSS-friendly identifier.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/markup/this-layout.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<body class=\"layout-{{ this.layout.id }}\">\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML5 Video Player in OctoberCMS\nDESCRIPTION: This HTML snippet demonstrates how to render a basic HTML5 video player in OctoberCMS. It uses the 'video' tag with controls and a source attribute.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/cms/mediamanager.md#2025-04-16_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<video src=\"video.mp4\" controls></video>\n```\n\n----------------------------------------\n\nTITLE: Installing October CMS with Sail Artisan\nDESCRIPTION: Command to run the October CMS installation process using Laravel Sail's artisan command. This sets up the CMS with preconfigured database settings.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/using-laravel-sail.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./vendor/bin/sail artisan october:install\n```\n\n----------------------------------------\n\nTITLE: Configuring File Upload Widget for Images in October CMS\nDESCRIPTION: Example configuration for the file upload widget in image mode, with specified dimensions for avatar images.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/backend/forms.md#2025-04-16_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\navatar:\n    label: Avatar\n    type: fileupload\n    mode: image\n    imageHeight: 260\n    imageWidth: 260\n```\n\n----------------------------------------\n\nTITLE: Pushing to Specific Queues in PHP\nDESCRIPTION: Illustrates how to specify a particular queue for email messages in October CMS using the queueOn and laterOn methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/extend/system/sending-mail.md#2025-04-16_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nMail::queueOn('queue-name', 'acme.blog:welcome', $data, function ($message) {\n    //\n});\n\nMail::laterOn('queue-name', 5, 'acme.blog:welcome', $data, function ($message) {\n    //\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Editor Options in YAML\nDESCRIPTION: Demonstrates how to set advanced editor options using the 'editorOptions' property. This example sets the default width for inserted images to 0.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-richeditor.md#2025-04-16_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nhtml_content:\n    type: richeditor\n    editorOptions:\n        imageDefaultWidth: 0\n```\n\n----------------------------------------\n\nTITLE: Control Structure Formatting in PHP\nDESCRIPTION: Shows the recommended formatting for control structures in PHP with subsequent expressions on new lines, an exception to strict PSR-2 standards.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nif ($expr1) {\n    // if body\n}\nelseif ($expr2) {\n    // elseif body\n}\nelse {\n    // else body;\n}\n\ntry {\n    // try body\n}\ncatch (FirstExceptionType $e) {\n    // catch body\n}\ncatch (OtherExceptionType $e) {\n    // catch body\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dropdown Field with Static Options in YAML\nDESCRIPTION: Defines a dropdown select field in a form using YAML configuration. The 'type' property is set to 'dropdown' and includes static 'options' defined directly in the YAML.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nstatus:\n    label: Blog Post Status\n    type: dropdown\n    options:\n        draft: Draft\n        published: Published\n        archived: Archived\n```\n\n----------------------------------------\n\nTITLE: Model Extension in PHP\nDESCRIPTION: Shows how to properly extend models with relationships using plugin name prefixes in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/help/developer-guide.md#2025-04-16_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nUser::extend(function($model) {\n    $model->hasOne['forum_member'] = ['RainLab\\Forum\\Models\\Member'];\n});\n```\n\n----------------------------------------\n\nTITLE: Checkbox Field with Comment Text in OctoberCMS\nDESCRIPTION: Adding explanatory comment text to a checkbox field to provide additional context to the user about what the checkbox does.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/field-checkbox.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nis_active:\n    type: checkbox\n    label: Active\n    comment: Check this box to make the record active.\n```\n\n----------------------------------------\n\nTITLE: Pulling All Repositories in October CMS\nDESCRIPTION: Command to execute 'git pull' on all theme and plugin directories in October CMS.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/console/commands.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nphp artisan october:util git pull\n```\n\n----------------------------------------\n\nTITLE: Opening Nginx Configuration File\nDESCRIPTION: Command to open and edit the Nginx default site configuration file using the nano text editor.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/setup/deployment.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnano /etc/nginx/sites-available/default\n```\n\n----------------------------------------\n\nTITLE: Installing Boxes Plugin with Artisan Command in October CMS\nDESCRIPTION: Command to install the OFFLINE.Boxes plugin which is required to use the boxes field widget.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/element/form/widget-boxes.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan plugin:install OFFLINE.Boxes\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error Message for a Specific Field\nDESCRIPTION: HTML showing how to provide a custom validation error message for a specific field instead of using the server-provided message.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ajax/extras.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div data-validate-for=\"phone\">\n    Oops.. phone number is invalid!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Where Clause with Equal Operator\nDESCRIPTION: Shows a simple where clause that checks if a column equals a specific value. The example retrieves users where votes equals 100.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/query.md#2025-04-16_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$users = Db::table('users')->where('votes', '=', 100)->get();\n```\n\n----------------------------------------\n\nTITLE: Showing Page Description in Twig\nDESCRIPTION: Demonstrates how to display the page description defined in the configuration using the this.page object.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/property/this-page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ this.page.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Extending Validator with Class Method in PHP\nDESCRIPTION: Shows how to extend the Validator by referencing a class and method instead of using a Closure.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/services/validation.md#2025-04-16_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nValidator::extend('foo', 'FooValidator@validate');\n```\n\n----------------------------------------\n\nTITLE: Configuring IIS for October CMS\nDESCRIPTION: This snippet provides the web.config file contents for configuring Internet Information Services (IIS) to work with October CMS, including URL rewrite rules.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/setup/configuration.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <system.webServer>\n        <rewrite>\n            <rules>\n                <clear />\n                <rule name=\"OctoberCMS to handle all non-whitelisted URLs\" stopProcessing=\"true\">\n                   <match url=\"^(.*)$\" ignoreCase=\"false\" />\n                   <conditions logicalGrouping=\"MatchAll\">\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/.well-known/*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/uploads/public/.*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/media/.*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/app/resized/.*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/storage/temp/public/.*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/themes/.*/(assets|resources)/.*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/plugins/.*/(assets|resources)/.*\" negate=\"true\" />\n                       <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" pattern=\"^/modules/.*/(assets|resources)/.*\" negate=\"true\" />\n                   </conditions>\n                   <action type=\"Rewrite\" url=\"index.php\" appendQueryString=\"true\" />\n               </rule>\n            </rules>\n        </rewrite>\n    </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Enabling Turbo Framework in Twig Templates\nDESCRIPTION: This code snippet shows how to enable the Turbo Router framework in Twig templates by including the framework tag with the 'turbo' parameter.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/cms/ajax/turbo-router.md#2025-04-16_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{% framework turbo %}\n```\n\n----------------------------------------\n\nTITLE: Writing to a Settings Model in October CMS\nDESCRIPTION: Examples of different ways to write values to a settings model, including using the static set method and standard model features.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/settings.md#2025-04-16_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Acme\\Demo\\Models\\Settings;\n\n...\n\n// Set a single value\nSettings::set('api_key', 'ABCD');\n\n// Set an array of values\nSettings::set(['api_key' => 'ABCD']);\n\n// Set object values\n$settings = Settings::instance();\n$settings->api_key = 'ABCD';\n$settings->save();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color List Configuration in YAML\nDESCRIPTION: Demonstrates how to configure a color picker to use a dynamic list of available colors sourced from a method in the model class.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/element/form/widget-colorpicker.md#2025-04-16_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n    availableColors: myColorList\n```\n\n----------------------------------------\n\nTITLE: Purging All Failed Jobs with Artisan\nDESCRIPTION: Artisan command to delete all failed jobs from the failed_jobs table, effectively clearing the failed jobs queue.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/queues.md#2025-04-16_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan queue:flush\n```\n\n----------------------------------------\n\nTITLE: Tracking Users in Revisionable Models\nDESCRIPTION: Shows how to implement the getRevisionableUser method to track which user made each change to a model.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/database/traits.md#2025-04-16_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function getRevisionableUser()\n{\n    return BackendAuth::getUser()->id;\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Page Description in Twig\nDESCRIPTION: Demonstrates outputting the page description from the configuration.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/markup/property/this-page.md#2025-04-16_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<p>{{ this.page.description }}</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Picker Widget in YAML\nDESCRIPTION: Defines a color picker widget in a form using YAML configuration. The 'type' property is set to 'colorpicker'.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/ru/backend/forms.md#2025-04-16_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ncolor:\n    label: Background\n    type: colorpicker\n```\n\n----------------------------------------\n\nTITLE: Querying Relationship Existence with Conditions in October CMS\nDESCRIPTION: This snippet shows how to query for models based on relationship existence with additional conditions. It retrieves posts with three or more comments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/database/relations.md#2025-04-16_snippet_33\n\nLANGUAGE: php\nCODE:\n```\n// Retrieve all posts that have three or more comments...\n$posts = Post::has('comments', '>=', 3)->get();\n```\n\n----------------------------------------\n\nTITLE: Page List Property Implementation\nDESCRIPTION: Shows how to implement a page list property for creating links to website pages.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/plugin/components.md#2025-04-16_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function defineProperties()\n{\n        return [\n            'postPage' => [\n                'title' => 'Post page',\n                'type' => 'dropdown',\n                'default' => 'blog/post'\n            ]\n        ];\n}\n\npublic function getPostPageOptions()\n{\n    return Page::sortBy('baseFileName')->lists('baseFileName', 'baseFileName');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing October Rain Package\nDESCRIPTION: Commands to navigate to project directory and install October CMS Rain library\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/resources/migrate-laravel-project.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd mylaravel\ncomposer require october/rain\n```\n\n----------------------------------------\n\nTITLE: HTML Output of |app Filter for Static URL\nDESCRIPTION: Displays the resulting HTML output when using the |app filter for a static URL. This example shows the generated absolute URL for the 'About Us' page.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/markup/filter-app.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://octobercms.com/about-us\">\n    About us\n</a>\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Redirect in October CMS Documentation\nDESCRIPTION: A markdown directive that redirects users from the root documentation page to the setup/installation page. This ensures users are automatically directed to the proper starting point in the documentation.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Redirect to=\"setup/installation\" />\n```\n\n----------------------------------------\n\nTITLE: Using the replace() Method in PHP Collections\nDESCRIPTION: The replace method merges arrays similar to merge(), but it also overwrites items with matching numeric keys. This provides control over both associative and indexed array elements.\nSOURCE: https://github.com/octobercms/docs/blob/develop/4.x/extend/services/collection.md#2025-04-16_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n$collection = new Collection(['James', 'Scott', 'Dan']);\n\n$replaced = $collection->replace([1 => 'Victoria', 3 => 'Finn']);\n\n$replaced->all();\n\n// ['James', 'Victoria', 'Dan', 'Finn']\n```\n\n----------------------------------------\n\nTITLE: Initializing and Rendering Relation Manager in OctoberCMS\nDESCRIPTION: PHP code showing how to initialize a relationship with a model and then render the relation manager in a view. This is typically used in controller views.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/backend/relations.md#2025-04-16_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$post = Post::where('id', 7)->first();\n$this->initRelation($post);\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->formRenderPreview() ?>\n\n<?= $this->relationRender('comments') ?>\n```\n\nLANGUAGE: php\nCODE:\n```\n<?= $this->relationRender('comments', ['readOnly' => true]) ?>\n```\n\n----------------------------------------\n\nTITLE: Theme Customization Fields in YAML\nDESCRIPTION: Configuration for theme customization fields including site name with label, comment and default value.\nSOURCE: https://github.com/octobercms/docs/blob/develop/1.x/themes/development.md#2025-04-16_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfields:\n    site_name:\n        label: Site name\n        comment: The website name as it should appear on the front-end\n        default: My Amazing Site!\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in Configuration Files\nDESCRIPTION: Example demonstrating how to use the env() helper function to extract configuration values from environment variables for different deployment environments.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/zh-cn/plugin/settings.md#2025-04-16_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nreturn [\n    'maxItems' => env('ACME_TODO_MAX_ITEMS', 25)\n];\n```\n\n----------------------------------------\n\nTITLE: Using Verbatim Tag with AngularJS in Twig\nDESCRIPTION: Illustrates how to use the verbatim tag to differentiate between Twig and AngularJS template variables when both frameworks use the same syntax. This allows the developer to control which variables are processed by which templating engine.\nSOURCE: https://github.com/octobercms/docs/blob/develop/3.x/markup/tag/verbatim.md#2025-04-16_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n<p>Hello {{ name }}, this is parsed by Twig</p>\n\n{% verbatim %}\n    <p>Hello {{ name }}, this is parsed by AngularJS</p>\n{% endverbatim %}\n```\n\n----------------------------------------\n\nTITLE: Using a Class with Behaviors\nDESCRIPTION: Example showing how to use methods from a behavior and override behavior methods.\nSOURCE: https://github.com/octobercms/docs/blob/develop/2.x/services/behaviors.md#2025-04-16_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$controller = new MyNamespace\\Controller;\n\n// Prints: I come from the FormController Behavior!\necho $controller->someMethod();\n\n// Prints: I come from the main Controller!\necho $controller->otherMethod();\n\n// Prints: You might not see me...\necho $controller->asExtension('FormController')->otherMethod();\n```"
  }
]