[
  {
    "owner": "palantir",
    "repo": "blueprint",
    "content": "TITLE: Importing and Using Blueprint React Components\nDESCRIPTION: Example of importing and using Blueprint React components in a TypeScript React application. Shows both JSX and React.createElement implementations.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Spinner } from \"@blueprintjs/core\";\n\n// using JSX:\nconst mySpinner = <Spinner intent=\"primary\" />;\n\n// use React.createElement if you're not using React.JSX.\nconst myButton = React.createElement(Button, { intent: \"success\" }, \"button text\");\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Blueprint Components in React\nDESCRIPTION: This example demonstrates how to import a Button component from Blueprint core and use it in a React application with various props including intent, text content, and click handlers.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/blueprint.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@blueprintjs/core\";\n\n<Button intent=\"success\" text=\"button content\" onClick={incrementCounter} />;\n```\n\n----------------------------------------\n\nTITLE: Basic Overlay Usage in React TSX\nDESCRIPTION: Demonstrates how to implement a basic Overlay component with a toggle button. The Overlay is controlled by an isOpen state and includes an onClose callback to handle closing interactions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay/overlay.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<div>\n    <Button text=\"Show overlay\" onClick={this.toggleOverlay} />\n    <Overlay isOpen={this.state.isOpen} onClose={this.toggleOverlay}>\n        Overlaid contents...\n    </Overlay>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Core Package with Yarn\nDESCRIPTION: Command to install the Blueprint core package and its React peer dependencies using Yarn.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @blueprintjs/core react react-dom\n```\n\n----------------------------------------\n\nTITLE: Complete HTML Example for Blueprint CDN Consumption\nDESCRIPTION: Complete HTML example showing how to use Blueprint via CDN. Includes all required dependencies, stylesheets, and a simple example of rendering a Blueprint button component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>Blueprint Starter Kit</title>\n\n        <!-- Style dependencies -->\n        <link href=\"https://unpkg.com/normalize.css@^8.0.1\" rel=\"stylesheet\" />\n        <!-- Blueprint stylesheets -->\n        <link href=\"https://unpkg.com/@blueprintjs/icons@^4.0.0/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n        <link href=\"https://unpkg.com/@blueprintjs/core@^4.0.0/lib/css/blueprint.css\" rel=\"stylesheet\" />\n    </head>\n    <body>\n        <!-- Blueprint dependencies -->\n        <script src=\"https://unpkg.com/classnames@^2.2\"></script>\n        <script src=\"https://unpkg.com/tslib@~2.3.1\"></script>\n        <script src=\"https://unpkg.com/react@^16.14.0/umd/react.production.min.js\"></script>\n        <script src=\"https://unpkg.com/react-dom@^16.14.0/umd/react-dom.production.min.js\"></script>\n        <script src=\"https://unpkg.com/react-transition-group@^4.4.1/dist/react-transition-group.min.js\"></script>\n        <script src=\"https://unpkg.com/@popperjs/core@^2.5.4/dist/umd/popper.js\"></script>\n        <script src=\"https://unpkg.com/react-popper@^2.2.4/dist/index.umd.min.js\"></script>\n        <!-- Blueprint packages (note: packages must be topo-sorted, where dependencies come first) -->\n        <script src=\"https://unpkg.com/@blueprintjs/icons@^4.0.0\"></script>\n        <script src=\"https://unpkg.com/@blueprintjs/core@^4.0.0\"></script>\n\n        <div id=\"btn\"></div>\n        <script>\n            const button = React.createElement(Blueprint.Core.Button, {\n                icon: \"cloud\",\n                text: \"CDN Blueprint is go!\",\n            });\n            const root = ReactDOM.createRoot(document.getElementById(\"btn\"));\n            root.render(button);\n        </script>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing BlueprintProvider at Application Root in React\nDESCRIPTION: This snippet demonstrates how to properly initialize BlueprintProvider at the root level of a React application. It shows the import statements, creating a root DOM node, and rendering the provider with a simple child component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/context/blueprint-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BlueprintProvider } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n    <BlueprintProvider>\n        <div>My app has overlays, hotkeys, and portal customization ðŸ˜Ž</div>\n    </BlueprintProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Icon Component Usage in React\nDESCRIPTION: Examples of basic Icon component usage with different properties including icon name, size, and event handlers.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/icon/icon.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon, IconSize } from \"@blueprintjs/core\";\n\n// icon name string literals are type checked\n<Icon icon=\"cross\" />\n<Icon icon=\"globe\" size={20} />\n\n// constants are provided for standard sizes\n<Icon icon=\"graph\" size={IconSize.LARGE} intent=\"primary\" />\n\n// you can also pass all valid HTML props\n<Icon icon=\"add\" onClick={this.handleAdd} onKeyDown={this.handleAddKeys} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Component in React TSX\nDESCRIPTION: Example showing both simple and advanced usage of the Checkbox component. Simple usage demonstrates string labels with checked state, while advanced usage shows how to incorporate JSX content like icons and formatted text.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/checkbox.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// simple usage for string labels\n<Checkbox checked={this.state.isEnabled} label=\"Enabled\" onChange={this.handleEnabledChange} />\n\n// advanced usage for JSX content\n<Checkbox checked={this.state.isEnabled} onChange={this.handleEnabledChange}>\n    <Icon icon=\"user\" />\n    John <strong>Doe</strong>\n</Checkbox>\n```\n\n----------------------------------------\n\nTITLE: Including Blueprint CSS Stylesheets in HTML\nDESCRIPTION: This HTML snippet shows how to include the necessary CSS files for Blueprint components in your web page. It includes normalize.css, the main Blueprint CSS, and the icons CSS file which is required for icon support.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/blueprint.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"path/to/node_modules/normalize.css/normalize.css\" rel=\"stylesheet\" />\n<link href=\"path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css\" rel=\"stylesheet\" />\n<!-- blueprint-icons.css file must be included alongside blueprint.css for icon font support -->\n<link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n<!-- add other blueprint-*.css files here -->\n```\n\n----------------------------------------\n\nTITLE: Implementing DateInput with Native Date Methods in React\nDESCRIPTION: A basic implementation of DateInput component using native JavaScript Date methods for formatting and parsing dates. The component is controlled with React useState hook managing the date value.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-input/date-input.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateInput } from \"@blueprintjs/datetime\";\nimport { useCallback, useState } from \"react\";\n\nfunction Example() {\n    const [dateValue, setDateValue] = useState<string>(null);\n    const handleChange = useCallback(setDateValue, []);\n    const formatDate = useCallback((date: Date) => date.toLocaleString(), []);\n    const parseDate = useCallback((str: string) => new Date(str), []);\n\n    return (\n        <DateInput\n            formatDate={formatDate}\n            onChange={handleChange}\n            parseDate={parseDate}\n            placeholder=\"M/D/YYYY\"\n            value={dateValue}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Tabs Implementation in React with Blueprint\nDESCRIPTION: Demonstrates the basic usage of the Tabs component with multiple Tab elements, including a disabled tab and additional elements in the tab list. Shows how to provide panels and customize tab properties.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tabs/tabs.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Tab, Tabs } from \"@blueprintjs/core\";\n\n<Tabs id=\"TabsExample\">\n    <Tab id=\"ng\" title=\"Angular\" panel={<AngularPanel />} />\n    <Tab id=\"mb\" title=\"Ember\" panel={<EmberPanel />} panelClassName=\"ember-panel\" />\n    <Tab id=\"rx\" title=\"React\" panel={<ReactPanel />} />\n    <Tab id=\"bb\" disabled title=\"Backbone\" panel={<BackbonePanel />} />\n    <TabsExpander />\n    <input className=\"@ns-input\" type=\"text\" placeholder=\"Search...\" />\n</Tabs>;\n```\n\n----------------------------------------\n\nTITLE: Including Blueprint CSS Files with SCSS Import\nDESCRIPTION: Example of importing required CSS files for Blueprint using Node.js-style package resolution in a SCSS file. Includes normalize.css, core styles, and icon font support.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n// using Node.js-style package resolution in a CSS file:\n@import \"normalize.css\";\n@import \"@blueprintjs/core/lib/css/blueprint.css\";\n// include blueprint-icons.css for icon font support\n@import \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Component in TypeScript/React\nDESCRIPTION: Example showing how to implement a Select component for filtering and selecting films. Demonstrates TypeScript generics, item predicates, and rendering with MenuItem components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, ItemRenderer, Select } from \"@blueprintjs/select\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nexport interface Film {\n    title: string;\n    year: number;\n    rank: number;\n}\n\nconst TOP_100_FILMS: Film[] = [\n    { title: \"The Shawshank Redemption\", year: 1994 },\n    { title: \"The Godfather\", year: 1972 },\n    // ...\n].map((f, index) => ({ ...f, rank: index + 1 }));\n\nconst filterFilm: ItemPredicate<Film> = (query, film, _index, exactMatch) => {\n    const normalizedTitle = film.title.toLowerCase();\n    const normalizedQuery = query.toLowerCase();\n\n    if (exactMatch) {\n        return normalizedTitle === normalizedQuery;\n    } else {\n        return `${film.rank}. ${normalizedTitle} ${film.year}`.indexOf(normalizedQuery) >= 0;\n    }\n};\n\nconst renderFilm: ItemRenderer<Film> = (film, { handleClick, handleFocus, modifiers, query }) => {\n    if (!modifiers.matchesPredicate) {\n        return null;\n    }\n    return (\n        <MenuItem\n            active={modifiers.active}\n            disabled={modifiers.disabled}\n            key={film.rank}\n            label={film.year.toString()}\n            onClick={handleClick}\n            onFocus={handleFocus}\n            roleStructure=\"listoption\"\n            text={`${film.rank}. ${film.title}`}\n        />\n    );\n};\n\nconst FilmSelect: React.FC = () => {\n    const [selectedFilm, setSelectedFilm] = React.useState<Film | undefined>();\n    return (\n        <Select<Film>\n            items={TOP_100_FILMS}\n            itemPredicate={filterFilm}\n            itemRenderer={renderFilm}\n            noResults={<MenuItem disabled={true} text=\"No results.\" roleStructure=\"listoption\" />}\n            onItemSelect={setSelectedFilm}\n        >\n            <Button text={selectedFilm?.title ?? \"Select a film\"} endIcon=\"double-caret-vertical\" />\n        </Select>\n    );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<FilmSelect />);\n```\n\n----------------------------------------\n\nTITLE: Implementing Panel Navigation with Blueprint PanelStack\nDESCRIPTION: Demonstrates how to implement panel navigation using PanelStack component, including creating panels and handling navigation between them. Shows usage of IPanelProps for panel management and transitions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/panel-stack/panel-stack.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, IPanelProps, PanelStack } from \"@blueprintjs/core\";\n\nclass MyPanel extends React.Component<IPanelProps> {\n    public render() {\n        return <Button onClick={this.openSettingsPanel} text=\"Settings\" />;\n    }\n\n    private openSettingsPanel() {\n        // openPanel (and closePanel) are injected by PanelStack\n        this.props.openPanel({\n            component: SettingsPanel, // <- class or stateless function type\n            props: { enabled: true }, // <- SettingsPanel props without IPanelProps\n            title: \"Settings\", // <- appears in header and back button\n        });\n    }\n}\n\nclass SettingsPanel extends React.Component<IPanelProps & { enabled: boolean }> {\n    // ...\n}\n\n<PanelStack initialPanel={{ component: MyPanel, title: \"Home\" }} />;\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Menu with Items in React\nDESCRIPTION: Demonstrates how to create a basic menu with various menu items, including a submenu and a divider. Uses the Menu, MenuItem, and MenuDivider components from Blueprint.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/menu/menu.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n    <MenuItem icon=\"new-text-box\" onClick={handleClick} text=\"New text box\" />\n    <MenuItem icon=\"new-object\" onClick={handleClick} text=\"New object\" />\n    <MenuItem icon=\"new-link\" onClick={handleClick} text=\"New link\" />\n    <MenuDivider />\n    <MenuItem text=\"Settings...\" icon=\"cog\" intent=\"primary\">\n        <MenuItem icon=\"tick\" text=\"Save on edit\" />\n        <MenuItem icon=\"blank\" text=\"Compile on edit\" />\n    </MenuItem>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Including Blueprint CSS Files with ES Modules\nDESCRIPTION: Example of importing required CSS files for Blueprint using ES module imports in TypeScript or JavaScript. Works with bundlers that resolve CSS files as modules.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// or using a ESM bundler which resolves CSS files as modules:\nimport \"normalize.css\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\n// include blueprint-icons.css for icon font support\nimport \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Alert Component in React\nDESCRIPTION: Example demonstrating how to use the Alert component in a React application. The component requires the isOpen prop for controlled usage and offers onConfirm, onCancel, and onClose callback props for handling user interactions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/alert/alert.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample AlertExample\n```\n\n----------------------------------------\n\nTITLE: Basic TimezoneSelect Implementation in React\nDESCRIPTION: A basic example of implementing the TimezoneSelect component with React hooks. This snippet demonstrates controlled usage with the useState hook to manage the selected timezone.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/timezone-select/timezone-select.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TimezoneSelect } from \"@blueprintjs/datetime\";\nimport React, { useState } from \"react\";\n\nfunction TimezoneExample() {\n    const [timezone, setTimezone] = useState(\"\");\n    return <TimezoneSelect value={timezone} onChange={setTimezone} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Select Component with Create New Item Functionality\nDESCRIPTION: Implementation of Select component with the ability to create new items from query input. Shows how to handle item creation and custom rendering of the create option.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction createFilm(title: string): Film {\n    return {\n        rank: /* ... */,\n        title,\n        year: /* ... */,\n    };\n}\n\nfunction renderCreateFilmOption(\n    query: string,\n    active: boolean,\n    handleClick: React.MouseEventHandler<HTMLElement>,\n) {\n    return (\n        <MenuItem\n            icon=\"add\"\n            text={`Create \"${query}\"`}\n            roleStructure=\"listoption\"\n            active={active}\n            onClick={handleClick}\n            shouldDismissPopover={false}\n        />\n    )\n}\n\nconst FilmSelect: React.FC = () => (\n    <Select<Film>\n        createNewItemFromQuery={createFilm}\n        createNewItemRenderer={renderCreateFilmOption}\n        items={Films.items}\n        itemPredicate={Films.itemPredicate}\n        itemRenderer={Films.itemRenderer}\n        noResults={<MenuItem disabled={true} text=\"No results.\"  roleStructure=\"listoption\" />}\n        onItemSelect={...}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Navbar Component in React TSX\nDESCRIPTION: Demonstrates how to set up a basic Navbar structure using Blueprint components. It includes a Navbar.Group with alignment, Navbar.Heading, Navbar.Divider, and Buttons.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/navbar/navbar.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Navbar>\n    <Navbar.Group align={Alignment.START}>\n        <Navbar.Heading>Blueprint</Navbar.Heading>\n        <Navbar.Divider />\n        <Button className=\"@ns-minimal\" icon=\"home\" text=\"Home\" />\n        <Button className=\"@ns-minimal\" icon=\"document\" text=\"Files\" />\n    </Navbar.Group>\n</Navbar>\n```\n\n----------------------------------------\n\nTITLE: Rendering Compound Tag Component in React\nDESCRIPTION: Example usage of the CompoundTag component in a React application. It demonstrates how to use the component with left content and children.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tag/compound-tag.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample CompoundTagExample\n```\n\n----------------------------------------\n\nTITLE: Implementing Panel Navigation with PanelStack2 in React TSX\nDESCRIPTION: Example showing how to implement panel navigation in PanelStack2 by creating different panel components and using the openPanel and closePanel callbacks to navigate between them.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/panel-stack2/panel-stack2.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, PanelProps } from \"@blueprintjs/core\";\n\ntype SettingsPanelInfo = {\n    /* ...  */\n};\ntype AccountSettingsPanelInfo = {\n    /* ...  */\n};\ntype NotificationSettingsPanelInfo = {\n    /* ...  */\n};\n\nconst AccountSettingsPanel: React.FC<PanelProps<AccountSettingsPanelInfo>> = props => {\n    // implementation\n};\n\nconst NotificationSettingsPanel: React.FC<PanelProps<NotificationSettingsPanelInfo>> = props => {\n    // implementation\n};\n\nconst SettingsPanel: React.FC<PanelProps<SettingsPanelInfo>> = props => {\n    const { openPanel, closePanel, ...info } = props;\n\n    const openAccountSettings = () =>\n        openPanel({\n            props: {\n                /* ... */\n            },\n            renderPanel: AccountSettingsPanel,\n            title: \"Account settings\",\n        });\n    const openNotificationSettings = () =>\n        openPanel({\n            props: {\n                /* ... */\n            },\n            renderPanel: NotificationSettingsPanel,\n            title: \"Notification settings\",\n        });\n\n    return (\n        <>\n            <Button onClick={openAccountSettings} text=\"Account settings\" />\n            <Button onClick={openNotificationSettings} text=\"Notification settings\" />\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioGroup with Radio Components in React\nDESCRIPTION: This snippet demonstrates how to use the RadioGroup component with multiple Radio children to create a group of mutually exclusive options. It includes props for managing state and handling changes.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/radio.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<RadioGroup label=\"Lunch special\" onChange={handleMealChange} selectedValue={mealType}>\n    <Radio label=\"Soup\" value=\"one\" />\n    <Radio label=\"Salad\" value=\"two\" />\n    <Radio label=\"Sandwich\" value=\"three\" />\n</RadioGroup>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Spinner Component in React\nDESCRIPTION: This example demonstrates how to import and use the Spinner component in a React application. It shows the basic usage with default props for an indeterminate spinner.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/spinner/spinner.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Spinner, SpinnerSize } from \"@blueprintjs/core\";\n\n<Spinner />\n<Spinner size={SpinnerSize.LARGE} />\n<Spinner value={0.5} />\n```\n\n----------------------------------------\n\nTITLE: Implementing DateInput with date-fns Library in React\nDESCRIPTION: An implementation of the DateInput component using the date-fns library for more powerful date formatting and parsing. This example uses specific format patterns to standardize date representation.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-input/date-input.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateInput } from \"@blueprintjs/datetime\";\nimport { format, parse } from \"date-fns\";\nimport { useCallback, useState } from \"react\";\n\nfunction Example() {\n    const [dateValue, setDateValue] = useState<string>(null);\n    const handleChange = useCallback(setDateValue, []);\n    const dateFnsFormat = \"yyyy-MM-dd HH:mm:ss\";\n    const formatDate = useCallback((date: Date) => format(date, dateFnsFormat), []);\n    const parseDate = useCallback((str: string) => parse(date, dateFnsFormat), []);\n\n    return (\n        <DateInput\n            formatDate={formatDate}\n            onChange={handleChange}\n            parseDate={parseDate}\n            placeholder={dateFnsFormat}\n            value={dateValue}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NumericInput in Uncontrolled Mode with TypeScript\nDESCRIPTION: Example showing how to use the NumericInput component in uncontrolled mode, where the component manages its own state. This snippet demonstrates implementing an onValueChange callback to access the value as the user modifies it.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/numeric-input.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NumericInput } from \"@blueprintjs/core\";\n\nexport class NumericInputExample extends React.Component {\n    public render() {\n        return <NumericInput onValueChange={this.handleValueChange} />;\n    }\n\n    private handleValueChange = (valueAsNumber: number, valueAsString: string) => {\n        console.log(\"Value as number:\", valueAsNumber);\n        console.log(\"Value as string:\", valueAsString);\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useHotkeys Hook in a React Function Component\nDESCRIPTION: A complete example showing how to implement the useHotkeys hook in a React function component. It demonstrates creating memoized hotkeys, binding event handlers, and rendering UI elements with keyboard shortcuts.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/hooks/hotkeys/use-hotkeys.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { InputGroup, KeyComboTag, useHotkeys } from \"@blueprintjs/core\";\nimport React, { createRef, useCallback, useMemo } from \"react\";\n\nexport default function () {\n    const inputRef = createRef<HTMLInputElement>();\n    const handleRefresh = useCallback(() => console.info(\"Refreshing data...\"), []);\n    const handleFocus = useCallback(() => inputRef.current?.focus(), [inputRef]);\n\n    // important: hotkeys array must be memoized to avoid infinitely re-binding hotkeys\n    const hotkeys = useMemo(\n        () => [\n            {\n                combo: \"R\",\n                global: true,\n                label: \"Refresh data\",\n                onKeyDown: handleRefresh,\n            },\n            {\n                combo: \"F\",\n                group: \"Input\",\n                label: \"Focus text input\",\n                onKeyDown: handleFocus,\n            },\n        ],\n        [handleRefresh, handleFocus],\n    );\n    const { handleKeyDown, handleKeyUp } = useHotkeys(hotkeys);\n\n    return (\n        <div tabIndex={0} onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n            Press <KeyComboTag combo=\"R\" /> to refresh data, <KeyComboTag combo=\"F\" /> to focus the input...\n            <InputGroup inputRef={inputRef} />\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using OverlayToaster as a React Component\nDESCRIPTION: This example shows how to use OverlayToaster as a React component, demonstrating both ref-based and local state-based toast management. It includes buttons to add toasts and renders the OverlayToaster with child Toast2 components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, OverlayToaster, Position, Toast2, ToastOptions } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nfunction MyComponent() {\n    const [toasts, setToasts] = React.useState<ToastOptions[]>([]);\n    const toaster = React.useRef<OverlayToaster>(null);\n\n    const addToastViaRef = React.useCallback(() => {\n        toaster.current?.show({ message: \"Toasted!\" });\n    }, []);\n\n    const addToastLocally = React.useCallback(() => {\n        setToasts(t => [...t, { key: \"toasted\", message: \"Toasted!\" }]);\n    }, []);\n\n    return (\n        <div>\n            <Button onClick={addToastViaRef} text=\"Procure toast remotely\" />\n            <Button onClick={addToastLocally} text=\"Procure toast locally\" />\n            <OverlayToaster position={Position.TOP_RIGHT} ref={toaster}>\n                {/* \"Toasted!\" will appear here after clicking button. */}\n                {toasts.map(toast => (\n                    <Toast2 key={toast.key} {...toast} />\n                ))}\n            </OverlayToaster>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Date Formatting in DateInput3\nDESCRIPTION: Example showing how to implement custom date formatting and parsing using DateInput3 component with React hooks. The implementation uses browser's built-in date handling methods.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/components/date-input3/date-input3.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DateInput3 } from \"@blueprintjs/datetime2\";\nimport { useCallback, useState } from \"react\";\n\nfunction Example() {\n    const [dateValue, setDateValue] = useState<string>(null);\n    const handleChange = useCallback(setDateValue, []);\n    const formatDate = useCallback((date: Date) => date.toLocaleString(), []);\n    const parseDate = useCallback((str: string) => new Date(str), []);\n\n    return (\n        <DateInput3\n            formatDate={formatDate}\n            onChange={handleChange}\n            parseDate={parseDate}\n            placeholder=\"M/D/YYYY\"\n            value={dateValue}\n        />\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Label Component in React\nDESCRIPTION: Example of using the Label component in two different ways: wrapping an input element inside the Label component and linking a separate input using the htmlFor attribute.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/label.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Label>\n    Label A\n    <input className={Classes.INPUT} placeholder=\"Placeholder text\" />\n</Label>\n\n<Label htmlFor=\"input-b\">Label B</Label>\n<input className={Classes.INPUT} id=\"input-b\" placeholder=\"Placeholder text\" />\n```\n\n----------------------------------------\n\nTITLE: Creating a Dropdown Menu with Popover in React\nDESCRIPTION: Shows how to create an interactive dropdown menu using the Popover component with a Menu as its content. Includes a Button as the trigger element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/menu/menu.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Popover content={<Menu>...</Menu>} placement=\"bottom\">\n    <Button alignText=\"start\" icon=\"applications\" endIcon=\"caret-down\" text=\"Open with...\" />\n</Popover>\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Core Package with NPM\nDESCRIPTION: Command to install the core Blueprint UI components package using NPM package manager. This package contains fundamental UI components as both CSS and React code.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @blueprintjs/core\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Group with Input in TypeScript/React\nDESCRIPTION: Example showing how to use FormGroup component with InputGroup, including label, helper text, and required field indication\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/form-group.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FormGroup helperText=\"Helper text with details...\" label=\"Label A\" labelFor=\"text-input\" labelInfo=\"(required)\">\n    <InputGroup id=\"text-input\" placeholder=\"Placeholder text\" />\n</FormGroup>\n```\n\n----------------------------------------\n\nTITLE: Controlled Tabs with Custom TabPanel Rendering in React\nDESCRIPTION: Shows how to use Tabs in controlled mode with a separately rendered TabPanel. This pattern allows for more flexible layouts where the panel appears elsewhere in the DOM while maintaining proper accessibility.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tabs/tabs.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { Tab, Tabs, TabPanel, type TabId } from \"@blueprintjs/core\";\n\nfunction TabsControlledExample() {\n    const TABS_PARENT_ID = React.useId();\n    const [selectedTabId, setSelectedTabId] = React.useState<TabId>(\"Home\");\n\n    return (\n        <>\n            <Tabs id={TABS_PARENT_ID} onChange={setSelectedTabId} selectedTabId={selectedTabId}>\n                <Tab id=\"Home\" title=\"Home\" />\n                <Tab id=\"Files\" title=\"Files\" />\n            </Tabs>\n            <TabPanel\n                id={selectedTabId}\n                selectedTabId={selectedTabId}\n                parentId={TABS_PARENT_ID}\n                panel={<p>The current panel id is: \"{selectedTabId}\"</p>}\n            />\n        </>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TimePicker Component in React\nDESCRIPTION: This code snippet demonstrates how to use the TimePicker component in a React application. It showcases the basic usage of the component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/time-picker/timepicker.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TimePickerExample\n```\n\n----------------------------------------\n\nTITLE: Implementing a SegmentedControl component with options in React/TSX\nDESCRIPTION: Example of creating a SegmentedControl component with three display options (List, Grid, Gallery) using the defaultValue prop to set the initial selection to 'list'.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/segmented-control/segmented-control.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<SegmentedControl\n    options={[\n        {\n            label: \"List\",\n            value: \"list\",\n        },\n        {\n            label: \"Grid\",\n            value: \"grid\",\n        },\n        {\n            label: \"Gallery\",\n            value: \"gallery\",\n        },\n    ]}\n    defaultValue=\"list\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining a Submenu Structure in React\nDESCRIPTION: Illustrates how to create a submenu by nesting MenuItem components within another MenuItem. The submenu opens to the right of its parent by default.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/menu/menu.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Menu>\n    <MenuItem text=\"Submenu\">\n        <MenuItem text=\"Child one\" />\n        <MenuItem text=\"Child two\" />\n        <MenuItem text=\"Child three\" />\n    </MenuItem>\n</Menu>\n```\n\n----------------------------------------\n\nTITLE: Creating a ControlGroup with Button and InputGroup in Blueprint\nDESCRIPTION: Example of creating a ControlGroup with a filter button and search input. This demonstrates basic usage of the ControlGroup component with the fill property set to true and vertical orientation disabled.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/control-group.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<ControlGroup fill={true} vertical={false}>\n    <Button icon=\"filter\">Filter</Button>\n    <InputGroup placeholder=\"Find filters...\" />\n</ControlGroup>\n```\n\n----------------------------------------\n\nTITLE: Implementing React Suggest Component in Blueprint\nDESCRIPTION: Example demonstrating the implementation and usage of the Suggest component, which combines an InputGroup with Popover functionality for suggestions. Similar to Select component but with text input as target.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/suggest/suggest.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@reactExample SuggestExample\n```\n\n----------------------------------------\n\nTITLE: Using DatePicker3 with a Locale String in TypeScript\nDESCRIPTION: Example of how to use DatePicker3 component with a locale code string. The component will dynamically import the corresponding date-fns locale module.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/components/date-picker3/date-picker3.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DatePicker3 } from \"@blueprintjs/datetime2\";\n\nfunction Example() {\n    return <DatePicker3 locale=\"en-US\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Overlay2 Component in React\nDESCRIPTION: Example of using the Overlay2 component within a React functional component. It demonstrates setting up state, a toggle function, and rendering the Overlay2 within an OverlaysProvider.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay2/overlay2.md#2025-04-18_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Button, Overlay2, OverlaysProvider } from \"@blueprintjs/core\";\nimport { useCallback, useState } from \"react\";\n\nfunction Example() {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggleOverlay = useCallback(() => setIsOpen(open => !open), [setIsOpen]);\n\n    return (\n        <OverlaysProvider>\n            <div>\n                <Button text=\"Show overlay\" onClick={toggleOverlay} />\n                <Overlay2 isOpen={isOpen} onClose={toggleOverlay}>\n                    Overlaid contents...\n                </Overlay2>\n            </div>\n        </OverlaysProvider>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Section with SectionCard Components in React TSX\nDESCRIPTION: Example of how to use the Section component with multiple SectionCard child components to create a vertically stacked layout for grouping information.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/section/section.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Section>\n    <SectionCard>{/* ... */}</SectionCard>\n    <SectionCard>{/* ... */}</SectionCard>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: Implementing Editable Table in Blueprint\nDESCRIPTION: Demonstrates editable table cells and column names with validation. Uses EditableCell2 and EditableName components with regex validation for alpha characters only.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-features.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TableEditableExample\n```\n\n----------------------------------------\n\nTITLE: Implementing RangeSlider using MultiSlider in TypeScript/React\nDESCRIPTION: Example showing how RangeSlider is implemented internally using MultiSlider component with two handles - one for start value and one for end value. Each handle has specific properties including value, type, and HTML props.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/slider/sliders.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<MultiSlider onChange={...}>\n    <MultiSlider.Handle\n        value={startValue}\n        type=\"start\"\n        intentAfter={Intent.PRIMARY}\n        htmlProps={handleHtmlProps.start}\n    />\n    <MultiSlider.Handle\n        value={endValue}\n        type=\"end\"\n        htmlProps={handleHtmlProps.end}\n    />\n</MultiSlider>\n```\n\n----------------------------------------\n\nTITLE: Importing and Using EntityTitle Component in React\nDESCRIPTION: Demonstrates how to use the EntityTitle component in a React application. The example shows the component with various props configurations.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/entity-title/entity-title.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample EntityTitleExample\n```\n\n----------------------------------------\n\nTITLE: Implementing Item Renderer for Blueprint Select Component\nDESCRIPTION: This code demonstrates how to implement an item renderer for the Select component, including filtering, handling clicks and focus, and proper React key usage.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Classes, MenuItem } from \"@blueprintjs/core\";\nimport { ItemRenderer, ItemPredicate, Select } from \"@blueprintjs/select\";\n\nconst filterFilm: ItemPredicate<Film> = (query, film) => {\n    return film.title.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n};\n\nconst renderFilm: ItemRenderer<Film> = (film, { handleClick, handleFocus, modifiers }) => {\n    if (!modifiers.matchesPredicate) {\n        return null;\n    }\n    return (\n        <MenuItem\n            text={film.title}\n            label={film.year}\n            roleStructure=\"listoption\"\n            active={modifiers.active}\n            key={film.title}\n            onClick={handleClick}\n            onFocus={handleFocus}\n        />\n    );\n};\n\nconst FilmSelect: React.FC = () => (\n    <Select<Film>\n        itemPredicate={filterFilm}\n        itemRenderer={renderFilm}\n        items={...}\n        onItemSelect={...}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Shared Toaster Instance Module in TypeScript\nDESCRIPTION: Example of creating a singleton toaster module to be used across an application. This file exports a shared toaster instance that can be imported and used anywhere.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { OverlayToaster, Position } from \"@blueprintjs/core\";\n\n/** Singleton toaster instance. Create separate instances for different options. */\nexport const AppToaster = OverlayToaster.createAsync({\n    className: \"recipe-toaster\",\n    position: Position.TOP,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Palantir Blueprint Development Environment\nDESCRIPTION: Commands to clone the Blueprint repository, install dependencies, and perform initial builds. Requires Node.js, Yarn, and SSH key setup with Github.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:<username>/blueprint.git\ncd blueprint\nyarn\nyarn compile\nyarn dist\n```\n\n----------------------------------------\n\nTITLE: Using DateRangeInput3 Component Example\nDESCRIPTION: React example showing how to use the DateRangeInput3 component. This component allows selection of date ranges and can be used in controlled or uncontrolled mode, with customizable date formatting.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/components/date-range-input3/date-range-input3.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample DateRangeInput3Example\n```\n\n----------------------------------------\n\nTITLE: Rendering MultiSelect Component in React\nDESCRIPTION: This code snippet demonstrates how to use the MultiSelect component in a React application. It showcases the component's functionality with an example.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/multi-select/multi-select.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample MultiSelectExample\n```\n\n----------------------------------------\n\nTITLE: ProgressBar Props Interface Definition in TypeScript\nDESCRIPTION: The TypeScript interface that defines the props accepted by the ProgressBar component. It includes options for setting the current progress value (between 0 and 1), as well as other configuration parameters.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/progress-bar/progress-bar.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nProgressBarProps\n```\n\n----------------------------------------\n\nTITLE: Customizing Item List Renderer for Blueprint Select Component\nDESCRIPTION: This snippet shows how to implement a custom item list renderer for the Select component, including handling the parent ref and rendering additional information.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ItemListRenderer } from \"@blueprintjs/select\";\n\nconst renderMenu: ItemListRenderer<Film> = ({ items, itemsParentRef, query, renderItem, menuProps }) => {\n    const renderedItems = items.map(renderItem).filter(item => item != null);\n    return (\n        <Menu role=\"listbox\" ulRef={itemsParentRef} {...menuProps}>\n            <MenuItem\n                disabled={true}\n                text={`Found ${renderedItems.length} items matching \"${query}\"`}\n                roleStructure=\"listoption\"\n            />\n            {renderedItems}\n        </Menu>\n    );\n};\n\nconst FilmSelect: React.FC = () => (\n    <Select<Film>\n        itemListRenderer={renderMenu}\n        itemPredicate={filterFilm}\n        itemRenderer={renderFilm}\n        items={...}\n        onItemSelect={...}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Implementation of Blueprint Buttons\nDESCRIPTION: Shows how to implement buttons using CSS classes with the .@ns-button class, highlighting the importance of using proper HTML tags and attributes for accessibility.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/button/buttons.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nbutton\n```\n\n----------------------------------------\n\nTITLE: Advanced Context Menu with Custom Rendering in React TSX\nDESCRIPTION: An advanced implementation of ContextMenu that uses the render props pattern to avoid the default wrapper element. This approach gives more control over the DOM structure by manually applying the required props to the target element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/context-menu/context-menu.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport classNames from \"classnames\";\nimport { ContextMenu, ContextMenuChildrenProps, Menu, MenuItem } from \"@blueprintjs/core\";\n\nexport default function AdvancedContextMenuExample() {\n    return (\n        <ContextMenu\n            content={\n                <Menu>\n                    <MenuItem text=\"Save\" />\n                    <MenuItem text=\"Save as...\" />\n                    <MenuItem text=\"Delete...\" intent=\"danger\" />\n                </Menu>\n            }\n        >\n            {(ctxMenuProps: ContextMenuChildrenProps) => (\n                <div\n                    className={classNames(\"my-context-menu-target\", ctxMenuProps.className)}\n                    onContextMenu={ctxMenuProps.onContextMenu}\n                    ref={ctxMenuProps.ref}\n                >\n                    {ctxMenuProps.popover}\n                    Right click me!\n                </div>\n            )}\n        </ContextMenu>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Blueprint Select Component with Create New Item\nDESCRIPTION: This snippet provides a complete example of using the Select component with support for creating new items, including state management and rendering.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst currentActiveItem: Film | CreateNewItem | null;\nconst isCreateNewItemActive: Film | CreateNewItem | null;\n\nfunction handleActiveItemChange(\n    activeItem: Film | CreateNewItem | null,\n    isCreateNewItem: boolean,\n) {\n    currentActiveItem = activeItem;\n    isCreateNewItemActive = isCreateNewItem;\n}\n\nfunction getActiveItem() {\n    return isCreateNewItemActive ? getCreateNewItem() : currentActiveItem;\n}\n\nconst FilmSelect: React.FC = () => (\n    <Select<Film>\n        {...} // Other required props (see previous examples).\n        activeItem={getActiveItem()}\n        createNewItemFromQuery={...}\n        createNewItemRenderer={...}\n        onActiveItemChange={handleActiveItemChange}\n    />\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Portals with PortalProvider in React\nDESCRIPTION: This example demonstrates how to use the PortalProvider component to apply custom styling to all Blueprint portal components (popovers, tooltips, dialogs) by setting a custom class name that will be applied to all portals in the component tree.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/portal/portal.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Popover, PortalProvider } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n    <PortalProvider portalClassName=\"my-custom-class\">\n        <Popover content=\"My portal has a custom class\">\n            <Button text=\"Example\" />\n        </Popover>\n    </PortalProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Loading States\nDESCRIPTION: Demonstrates various loading state implementations at table, column and cell levels with configurable options.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-features.md#2025-04-18_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TableLoadingExample\n```\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample ColumnLoadingExample\n```\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample CellLoadingExample\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay2 with Multiple Children\nDESCRIPTION: Demonstrates using Overlay2 with multiple child elements, each requiring its own ref to be passed to the Overlay2 component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay2/overlay2.md#2025-04-18_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { uniqueId } from \"../utils\";\n\nfunction Example() {\n    const [isOpen, setIsOpen] = React.useState<boolean>(true);\n    const [childRefs, setChildRefs] = React.useState<Record<string, React.RefObject<HTMLDivElement>>>({});\n    const [children, setChildren] = React.useState<Array<{ key: string }>>([]);\n    const addChild = React.useCallback(() => {\n        const newRef = React.createRef<HTMLDivElement>();\n        const newKey = uniqueId();\n        setChildren(oldChildren => [...oldChildren, { key: newKey }]);\n        setChildRefs(oldRefs => ({ ...oldRefs, [newKey]: newRef }));\n    }, []);\n\n    return (\n        <div>\n            <Button onClick={addChild}>Add child</Button>\n            <Overlay2 isOpen={isOpen} childRefs={childRefs}>\n                {children.map(child => (\n                    <div key={child.key} ref={childRefs[child.key]} />\n                ))}\n            </Overlay2>\n        </div>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NumericInput in Controlled Mode with Custom Expression Evaluation\nDESCRIPTION: Example showing how to use NumericInput in controlled mode with a custom expression evaluation library. This demonstrates how to handle the component's value as a string to allow decimal places and negative numbers while adding custom math expression support.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/numeric-input.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NumericInput } from \"@blueprintjs/core\";\nimport * as SomeLibrary from \"some-library\";\n\ninterface NumericInputExampleState = {\n    value?: number | string;\n}\n\nclass NumericInputExample extends React.Component<{}, NumericInputExampleState> {\n    public state = { value: NumericInput.VALUE_EMPTY };\n\n    public render() {\n        return (\n            <NumericInput\n                onValueChange={this.handleValueChange}\n                value={this.state.value}\n            />\n        );\n    }\n\n    private handleValueChange = (_valueAsNumber: number, valueAsString: string) {\n        // Important: use the string value to allow typing decimal places and negative numbers\n        const result = SomeLibrary.evaluateMathExpression(valueAsString);\n        this.setState({ value: result });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HotkeysTarget2 Component in TypeScript React\nDESCRIPTION: This snippet demonstrates how to use the HotkeysTarget2 component in a React class component. It shows how to define hotkeys, use refs, and handle key events.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/hotkeys/hotkeys-target2.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as React from \"react\";\nimport { HotkeysTarget2, InputGroup } from \"@blueprintjs/core\";\n\nexport default class extends React.PureComponent {\n    private inputRef = React.createRef<HTMLInputElement>();\n\n    private hotkeys = [\n        {\n            combo: \"R\",\n            global: true,\n            label: \"Refresh data\",\n            onKeyDown: () => console.info(\"Refreshing data...\"),\n        },\n        {\n            combo: \"F\",\n            group: \"Input\",\n            label: \"Focus text input\",\n            onKeyDown: this.inputRef.current?.focus(),\n        },\n    ];\n\n    public render() {\n        return (\n            <HotkeysTarget2 hotkeys={this.hotkeys}>\n                {({ handleKeyDown, handleKeyUp }) => (\n                    <div tabIndex={0} onKeyDown={handleKeyDown} onKeyUp={handleKeyUp}>\n                        Press \"R\" to refresh data, \"F\" to focus the input...\n                        <InputGroup inputRef={this.inputRef} />\n                    </div>\n                )}\n            </HotkeysTarget2>\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spinner Props Interface Definition\nDESCRIPTION: This code snippet defines the props interface for the Spinner component. It includes properties like size, value, and other customization options.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/spinner/spinner.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SpinnerProps {\n    /**\n     * Width and height of the spinner in pixels. The size cannot be less than 10px.\n     * @default SpinnerSize.STANDARD = 50\n     */\n    size?: number;\n    /**\n     * A value between 0 and 1 (inclusive) representing how far along the operation is.\n     * Values below 0 or above 1 will be interpreted as 0 or 1 respectively.\n     * Omitting this prop will result in an \"indeterminate\" spinner where the head spins indefinitely.\n     */\n    value?: number;\n    // ... other props\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cell Rendering\nDESCRIPTION: Advanced example demonstrating custom cell rendering for currency values in dollars and euros, with formatted number display.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\n\nconst dollarCellRenderer = (rowIndex: number) => <Cell>{`$${(rowIndex * 10).toFixed(2)}`}</Cell>;\nconst euroCellRenderer = (rowIndex: number) => <Cell>{`â‚¬${(rowIndex * 10 * 0.85).toFixed(2)}`}</Cell>;\n\n<Table numRows={10}>\n    <Column name=\"Dollars\" cellRenderer={dollarCellRenderer} />\n    <Column name=\"Euros\" cellRenderer={euroCellRenderer} />\n</Table>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay2 with Manual Child Ref\nDESCRIPTION: Shows how to use Overlay2 with a single child element where the ref is manually set and passed to the Overlay2 component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay2/overlay2.md#2025-04-18_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n    const [isOpen, setIsOpen] = React.useState<boolean>(true);\n    const myRef = React.useRef<HTMLElement>();\n\n    return (\n        <Overlay2 isOpen={isOpen} childRef={myRef}>\n            <div ref={myRef}>Contents</div>\n        </Overlay2>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Dialog in React\nDESCRIPTION: Demonstrates how to create a basic Dialog component with a title, body, and footer in React. The Dialog uses Overlay2 and includes action buttons in the footer.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/dialog/dialog.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Dialog title=\"Informational dialog\" icon=\"info-sign\">\n    <DialogBody>{/* body contents here */}</DialogBody>\n    <DialogFooter actions={<Button intent=\"primary\" text=\"Close\" onClick={/* ... */} />} />\n</Dialog>\n```\n\n----------------------------------------\n\nTITLE: Combining Tooltip and Popover in React\nDESCRIPTION: This snippet demonstrates how to wrap a single target in both a Popover and a Tooltip component. The Tooltip is placed inside the Popover, with the target inside the Tooltip. It also shows how to handle focus and disable behavior to prevent both elements from appearing simultaneously.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tooltip/tooltip.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, mergeRefs, Popover, Tooltip } from \"@blueprintjs/core\";\n\n<Popover\n    content={<h1>Popover!</h1>}\n    renderTarget={({ isOpen: isPopoverOpen, ref: ref1, ...popoverProps }) => (\n        <Tooltip\n            content=\"I have a popover!\"\n            disabled={isPopoverOpen}\n            openOnTargetFocus={false}\n            renderTarget={({ isOpen: isTooltipOpen, ref: ref2, ...tooltipProps }) => (\n                <Button\n                    {...popoverProps}\n                    {...tooltipProps}\n                    active={isPopoverOpen}\n                    ref={mergeRefs(ref1, ref2)}\n                    text=\"Hover and click me\"\n                />\n            )}\n        />\n    )}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Scrollable Overlay in React TSX\nDESCRIPTION: Shows how to make an Overlay component scrollable by applying the OVERLAY_SCROLL_CONTAINER CSS class. This allows content that's larger than the viewport to be properly scrollable.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay/overlay.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Overlay className={Classes.OVERLAY_SCROLL_CONTAINER} />\n```\n\n----------------------------------------\n\nTITLE: DateRangePickerProps Interface Definition\nDESCRIPTION: TypeScript interface defining all available props for the DateRangePicker component, including configuration options for date selection, shortcuts, and appearance.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-range-picker/daterangepicker.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface DateRangePickerProps\n```\n\n----------------------------------------\n\nTITLE: Initializing ResizeSensor Component in React TSX\nDESCRIPTION: Demonstrates how to use the ResizeSensor component to observe and handle resize events on a child element. It includes a handleResize function that logs the new dimensions of the resized element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/resize-sensor/resize-sensor.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ResizeEntry, ResizeSensor } from \"@blueprintjs/core\";\n\nfunction handleResize(entries: ResizeEntry[]) {\n    console.log(entries.map(e => `${e.contentRect.width} x ${e.contentRect.height}`));\n}\n\n<ResizeSensor onResize={handleResize}>\n    <div style={{ width: this.props.width }} />\n</ResizeSensor>;\n```\n\n----------------------------------------\n\nTITLE: DatePicker Implementation with Sunday Restriction\nDESCRIPTION: TypeScript example showing how to implement a DatePicker that prevents selection of Sundays using modifiers.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-picker/datepicker.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DatePicker } from \"@blueprintjs/datetime\";\n\nexport class DatePickerExample extends React.Component<{}, { selectedDate: Date }> {\n    public state = { selectedDate: new Date() };\n\n    public render() {\n        // name of modifier function becomes the suffix for the CSS class above\n        const modifiers = { isSunday };\n        return (\n            <DatePicker\n                modifiers={modifiers}\n                onChange={newDate => this.handleChange(newDate)}\n                value={this.state.selectedDate}\n            />\n        );\n    }\n\n    private handleChange(date: Date) {\n        if (!isSunday(date)) {\n            this.setState({ selectedDate: date });\n        }\n    }\n}\n\nfunction isSunday(date: Date) {\n    return date.getDay() === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Context Menu Implementation in React TSX\nDESCRIPTION: A simple implementation of the ContextMenu component from Blueprint. It creates a context menu with save and delete options that appear when right-clicking on the target div element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/context-menu/context-menu.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ContextMenu, Menu, MenuItem } from \"@blueprintjs/core\";\n\nexport default function ContextMenuExample() {\n    return (\n        <ContextMenu\n            content={\n                <Menu>\n                    <MenuItem text=\"Save\" />\n                    <MenuItem text=\"Save as...\" />\n                    <MenuItem text=\"Delete...\" intent=\"danger\" />\n                </Menu>\n            }\n        >\n            <div className=\"my-context-menu-target\">Right click me!</div>\n        </ContextMenu>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Shared Toaster in a React Component\nDESCRIPTION: Demonstrates importing and using a shared toaster instance in a React component. This pattern allows showing toast notifications in response to user interactions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_7\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Button } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { AppToaster } from \"./toaster\";\n\nexport class App extends React.PureComponent {\n    render() {\n        return <Button onClick={this.showToast} text=\"Toast please\" />;\n    }\n\n    showToast = async () => {\n        // create toasts in response to interactions.\n        // in most cases, it's enough to simply create and forget (thanks to timeout).\n        (await AppToaster).show({ message: \"Toasted.\" });\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Frozen Columns and Rows in Blueprint\nDESCRIPTION: Example showing implementation of frozen columns and rows using numFrozenColumns and numFrozenRows props.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-features.md#2025-04-18_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TableFreezingExample\n```\n\n----------------------------------------\n\nTITLE: Compound Tag Props Interface Definition\nDESCRIPTION: TypeScript interface definition for the CompoundTag component props. This interface specifies the available props and their types for the CompoundTag component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tag/compound-tag.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface CompoundTagProps\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint ProgressBar Component in React\nDESCRIPTION: This example demonstrates the usage of the ProgressBar component in Blueprint.js. The component renders a progress indicator that can show either determinate progress (when a value between 0 and 1 is provided) or an indeterminate loading state (when no value is provided).\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/progress-bar/progress-bar.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nProgressExample\n```\n\n----------------------------------------\n\nTITLE: Custom Element Implementation of TimezoneSelect\nDESCRIPTION: An example showing how to use a custom element instead of the default button in TimezoneSelect. This approach ignores all button-specific props and renders the provided child element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/timezone-select/timezone-select.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<TimezoneSelect value={...} onChange={...}>\n    <Icon icon=\"globe\" />\n</TimezonePicker>\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Sorting in Blueprint\nDESCRIPTION: Example showing sortable table implementation with complex data handling and cell re-rendering using cellRendererDependencies. Includes copy functionality and keyboard shortcuts.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-features.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TableSortableExample\n```\n\n----------------------------------------\n\nTITLE: Implementing Reorderable Table in Blueprint\nDESCRIPTION: Shows implementation of drag-reorderable columns and rows with multiple selection support and interaction handling.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-features.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TableReorderableExample\n```\n\n----------------------------------------\n\nTITLE: Static Import of Icons in React with Blueprint\nDESCRIPTION: Demonstrates how to statically import and use an icon in a React component using Blueprint. This approach allows for tree-shaking but requires explicit imports and size specifications.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@blueprintjs/core\";\nimport { Download } from \"@blueprintjs/icons\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(<Button text=\"Download\" icon={<Download size={16} />} />);\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint to use Blueprint ESLint Rules\nDESCRIPTION: Example of an ESLint configuration file (.eslintrc.json) that extends the Blueprint ESLint configuration to enforce Blueprint's code style conventions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-config/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": [\"@blueprintjs/eslint-config\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced HotkeysProvider Implementation with Nested Providers\nDESCRIPTION: Complex example showing how to implement HotkeysProvider across rendering boundaries, such as in plugin systems. This ensures a single 'global' hotkeys dialog while maintaining hotkey functionality in descendant components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/context/hotkeys/hotkeys-provider.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type HotkeyConfig, HotkeysContext, HotkeysProvider, HotkeysTarget2 } from \"@blueprintjs/core\";\nimport React, { useContext, useEffect, useRef } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nfunction App() {\n    const appHotkeys: HotkeyConfig[] = [\n        {\n            combo: \"o\",\n            global: true,\n            label: \"Open\",\n            onKeyDown: () => console.info(\"open\"),\n        },\n    ];\n\n    return (\n        <HotkeysProvider>\n            <div>\n                <HotkeysTarget2 hotkeys={appHotkeys}>\n                    <div>My app has hotkeys ðŸ˜Ž</div>\n                </HotkeysTarget2>\n                <PluginSlot>\n                    <Plugin />\n                </PluginSlot>\n            </div>\n        </HotkeysProvider>\n    );\n}\n\nfunction Plugin() {\n    const pluginHotkeys: HotkeyConfig[] = [\n        {\n            combo: \"f\",\n            global: true,\n            label: \"Search\",\n            onKeyDown: () => console.info(\"search\"),\n        },\n    ];\n\n    return (\n        <HotkeysTarget2 hotkeys={pluginHotkeys}>\n            <div>This plugin also has hotkeys</div>\n        </HotkeysTarget2>\n    );\n}\n\nfunction PluginSlot({ children }: { children: React.ReactNode }) {\n    const hotkeysContext = useContext(HotkeysContext);\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref.current == null) {\n            return;\n        }\n        const root = createRoot(ref.current);\n        root.render(<HotkeysProvider value={hotkeysContext}>{children}</HotkeysProvider>);\n        return () => {\n            root.unmount();\n        };\n    }, [ref, hotkeysContext, children]);\n\n    return <div ref={ref} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Date-fns Locale Loader Implementation\nDESCRIPTION: Example of implementing a custom loader function for date-fns locales, useful for bundlers like Vite.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/components/date-picker3/date-picker3.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Locale } from \"date-fns\";\nimport React from \"react\";\nimport { DatePicker3 } from \"@blueprintjs/datetime2\";\n\nconst loadDateFnsLocale: (localeCode: string) => Promise<Locale> = async localeCode => {\n    const localeModule = await import(`../node_modules/date-fns/esm/locale/${localeCode}/index.js`);\n    return localeModule.default;\n};\n\nexport const Example: React.FC = () => {\n    return <DatePicker3 dateFnsLocaleLoader={loadDateFnsLocale} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing an Overlay Component with useOverlayStack in React/TypeScript\nDESCRIPTION: This example demonstrates how to create an overlay component using the useOverlayStack hook from Blueprint. The component manages its lifecycle by registering and unregistering itself with the overlay stack when opened or closed, and properly handles cleanup on unmount.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/hooks/overlays/use-overlay-stack.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayInstance, OverlayProps, Portal, useOverlayStack, usePrevious } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport { useUID } from \"react-uid\";\n\nexport function Example(props: OverlayProps) {\n    const { autoFocus, children, enforceFocus, hasBackdrop, isOpen, usePortal } = props;\n    const { openOverlay, closeOverlay } = useOverlayStack();\n\n    const containerElement = React.useRef<HTMLDivElement>(null);\n\n    const bringFocusInsideOverlay = React.useCallback(() => {\n        // TODO: implement\n    }, []);\n\n    const handleDocumentFocus = React.useCallback((e: FocusEvent) => {\n        // TODO: implement\n    }, []);\n\n    const id = useUID();\n    const instance = React.useMemo<OverlayInstance>(\n        () => ({\n            bringFocusInsideOverlay,\n            containerElement,\n            handleDocumentFocus,\n            id,\n            props: {\n                autoFocus,\n                enforceFocus,\n                hasBackdrop,\n                usePortal,\n            },\n        }),\n        [autoFocus, bringFocusInsideOverlay, enforceFocus, handleDocumentFocus, hasBackdrop, id, usePortal],\n    );\n\n    const prevIsOpen = usePrevious(isOpen) ?? false;\n    React.useEffect(() => {\n        if (!prevIsOpen && isOpen) {\n            // just opened\n            openOverlay(instance);\n        }\n\n        if (prevIsOpen && !isOpen) {\n            // just closed\n            closeOverlay(instance);\n        }\n    }, [isOpen, openOverlay, closeOverlay, prevIsOpen, instance]);\n\n    // run once on unmount\n    React.useEffect(() => {\n        return () => {\n            if (isOpen) {\n                closeOverlay(instance);\n            }\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return usePortal ? <Portal>{children}</Portal> : children;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OverlaysProvider at the Root of a React Application\nDESCRIPTION: Example showing how to wrap your application with OverlaysProvider at the root level to enable overlay functionality. The component imports necessary dependencies from Blueprint and React, creates a root React element, and renders the application within the OverlaysProvider context.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/context/overlays/overlays-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlaysProvider } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n    <OverlaysProvider>\n        <div>My app has overlays ðŸ˜Ž</div>\n    </OverlaysProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating OverlayToaster with React 18 Compatibility\nDESCRIPTION: This snippet demonstrates how to create an OverlayToaster instance with React 18 compatibility using a custom domRenderer function. It uses createRoot instead of ReactDOM.render to avoid console warnings in React 18.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayToaster } from \"@blueprintjs/core\";\nimport { createRoot } from \"react-dom/client\";\n\nconst toaster = await OverlayToaster.createAsync(toasterProps, {\n    // Use createRoot() instead of ReactDOM.render(). This can be deleted after\n    // a future Blueprint version uses createRoot() for Toasters by default.\n    domRenderer: (toaster, containerElement) => createRoot(containerElement).render(toaster),\n});\n\ntoaster.show({ message: \"Hello React 18!\" });\n```\n\n----------------------------------------\n\nTITLE: Demonstrating OverflowList Component Usage in React\nDESCRIPTION: This code snippet shows an example usage of the OverflowList component. It's referenced in the documentation to provide a visual demonstration of how the component works.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overflow-list/overflow-list.md#2025-04-18_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\n@reactExample OverflowListExample\n```\n\n----------------------------------------\n\nTITLE: Rendering an OverlayToaster with Toast2 Children in TSX\nDESCRIPTION: Demonstrates how to render an OverlayToaster component with Toast2 children as direct React components. This approach allows for more declarative toast creation.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nrender(\n    <OverlayToaster>\n        <Toast2 {...toastOptions} />\n    </OverlayToaster>,\n    targetElement,\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of date-fns Locale Module\nDESCRIPTION: Shows how DatePicker3 dynamically imports a date-fns locale module at runtime.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/components/date-picker3/date-picker3.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait import(/* webpackChunkName: \"date-fns-en-US\" */ \"date-fns/locale/en-US\");\n```\n\n----------------------------------------\n\nTITLE: Rendering TagInput Component in React\nDESCRIPTION: Example of rendering a TagInput component in a React application. This snippet demonstrates the basic usage of the TagInput component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tag-input/tag-input.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TagInputExample\n```\n\n----------------------------------------\n\nTITLE: Importing Button Component in Blueprint\nDESCRIPTION: Shows how to import the Button component from the Blueprint Core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/button/buttons.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Handling Active Item Changes in Blueprint Select Component\nDESCRIPTION: This snippet demonstrates how to handle active item changes in the Select component, including support for creating new items.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nonActiveItemChange(null, true);\n```\n\n----------------------------------------\n\nTITLE: Using DatePicker3 with a Static Locale Object\nDESCRIPTION: Example of using DatePicker3 with a statically loaded date-fns locale module.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/components/date-picker3/date-picker3.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DatePicker3 } from \"@blueprintjs/datetime2\";\nimport enUS from \"date-fns/locale/en-US\";\n\nfunction Example() {\n    return <DatePicker3 locale={enUS} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Submenus with MenuItem in React\nDESCRIPTION: Example of creating a MenuItem with nested submenu items using Blueprint's components. The example demonstrates how to structure a Menu with a parent MenuItem that contains two child MenuItems rendered in a popover on hover.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/popover/menu-item.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Menu, MenuItem } from \"@blueprintjs/core\";\n\nfunction Example() {\n    return (\n        <Menu>\n            <MenuItem text=\"See more\">\n                <MenuItem text=\"First submenu item\" />\n                <MenuItem text=\"Second submenu item\" />\n            </MenuItem>\n        </Menu>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Sass Compiler for Blueprint SCSS Sources\nDESCRIPTION: Demonstrates how to set up a custom Sass compiler to import Blueprint SCSS sources with a custom namespace and SVG inliner function.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { sassNodeModulesLoadPaths, sassSvgInlinerFactory } from \"@blueprintjs/node-build-scripts\";\nimport * as sass from \"sass\";\n\nconst result = await sass.compileAsync(\"path/to/input.scss\", {\n    loadPaths: sassNodeModulesLoadPaths,\n    functions: {\n        /**\n         * Sass function to inline a UI icon svg and change its path color.\n         *\n         * Usage:\n         * svg-icon(\"16px/icon-name.svg\", (path: (fill: $color)) )\n         */\n        \"svg-icon($path, $selectors: null)\": sassSvgInlinerFactory(\"path/to/resources/icons\", {\n            optimize: true,\n            encodingFormat: \"uri\",\n        }),\n    },\n});\n```\n\n----------------------------------------\n\nTITLE: TypeScript Basic Syntax Examples\nDESCRIPTION: Demonstrates fundamental TypeScript syntax including variable type annotations, function signatures, generic functions, and interface definitions. Shows how TypeScript adds static typing to JavaScript through type annotations and interfaces.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/reading-the-docs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// variables\nconst variableName: varType;\nconst name: string;\nconst disabled: boolean;\n\n// functions (and function variables)\nfunction funcName(arg1: argType, arg2: argType): returnType {}\nconst funcName: (arg1: argType) => returnType;\nfunction split(str: string, delim: string): string[] {}\nfunction map<T, U>(array: T[], iterator: (item: T, index: number) => U): U[];\n\n// interfaces describe plain objects\n// (we use the convention that interfaces begin with \"I\")\ninterface Option {\n    label: string;\n    value: string;\n}\nconst option: Option = { label: \"Name\", value: \"Gilad\" };\n```\n\n----------------------------------------\n\nTITLE: Defining QueryList Props Interface in TypeScript\nDESCRIPTION: This code snippet defines the props interface for the QueryList component. It includes various properties that can be passed to configure the component's behavior.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/query-list/query-list.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n@interface QueryListProps\n```\n\n----------------------------------------\n\nTITLE: Type-safe Event Handlers with SVG Root Element\nDESCRIPTION: Example of using generic type parameters with the Icon component when omitting the wrapper element to get correct typing for event handlers.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/icon/icon.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nfunction Example() {\n    const handleClick: React.MouseEventHandler<SVGSVGElement> = () => {\n        /* ... */\n    };\n    // explicitly declare type of the root element so that we can narrow the type of the event handler\n    return <Icon<SVGSVGElement> icon=\"add\" onClick={handleClick} tagName={null} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Toaster with OverlayToaster.createAsync Method in TypeScript\nDESCRIPTION: Creates a new Toaster instance using the recommended asynchronous method. This approach returns a Promise<Toaster> that can be used to show toast notifications.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst myToaster: Toaster = await OverlayToaster.createAsync({ position: \"bottom\" });\nmyToaster.show({ ...toastOptions });\n```\n\n----------------------------------------\n\nTITLE: Implementing PortalProvider with Dialog in React\nDESCRIPTION: This snippet demonstrates how to use PortalProvider to wrap a React application and apply custom portal classes. It imports necessary components, creates a React root, and renders a Dialog component within the PortalProvider.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/context/portal/portal-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PortalProvider, Dialog } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n    <PortalProvider portalClassName=\"my-portal\">\n        <Dialog isOpen={true}>\n            <span>This dialog will have a custom class on its portal element.</span>\n        </Dialog>\n    </PortalProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Selection Modes using RegionCardinality\nDESCRIPTION: Shows how to use the RegionCardinality enum to configure selectable region types for the Table component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nimport { RegionCardinality } from \"@blueprintjs/table\";\n\n// disables selection of all region types\n<Table selectionModes={[]} />\n\n// enables selection of cell regions only\n<Table selectionModes={[RegionCardinality.CELLS]} />\n\n// enables selection of cell and row regions only\n<Table selectionModes={[RegionCardinality.CELLS, RegionCardinality.FULL_ROWS]} />\n\n// enables selection of the full table only\n<Table selectionModes={[RegionCardinality.FULL_TABLE]} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Overlay2 with Automatic Child Ref\nDESCRIPTION: Demonstrates using Overlay2 with a single child element where the ref is automatically handled by the component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay2/overlay2.md#2025-04-18_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nfunction Example() {\n    const [isOpen, setIsOpen] = React.useState<boolean>(true);\n    return (\n        <Overlay2 isOpen={isOpen}>\n            <div>Contents</div>\n        </Overlay2>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining QueryList Renderer Props Interface in TypeScript\nDESCRIPTION: This code snippet defines the interface for the props passed to the renderer function of the QueryList component. It includes properties that provide information about the current state and callbacks for user interactions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/query-list/query-list.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n@interface QueryListRendererProps\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint Colors in React Components\nDESCRIPTION: Example of importing and using Blueprint colors in a React component. This snippet demonstrates how to apply colors directly to inline styles.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/colors.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Colors } from \"@blueprintjs/core\";\n\n<div style={{ color: Colors.BLUE3, background: Colors.BLACK }} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Table2 with HotkeysProvider in React\nDESCRIPTION: This snippet demonstrates how to use the Table2 component within a HotkeysProvider context. It imports necessary components, creates a root element using ReactDOM, and renders a Table2 with three columns inside a HotkeysProvider.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table2.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotkeysProvider } from \"@blueprintjs/core\";\nimport { Column, Table2 } from \"@blueprintjs/table\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n    <HotkeysProvider>\n        <Table2 numRows={5}>\n            <Column />\n            <Column />\n            <Column />\n        </Table2>\n    </HotkeysProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Focus Style Management in Blueprint\nDESCRIPTION: Demonstrates how to enable the FocusStyleManager utility which controls the visibility of focus styles based on user interaction method (mouse vs keyboard).\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/accessibility.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FocusStyleManager } from \"@blueprintjs/core\";\n\nFocusStyleManager.onlyShowFocusOnTabs();\n```\n\n----------------------------------------\n\nTITLE: Using SelectionModes Enum for Table Selection Configuration\nDESCRIPTION: Demonstrates the use of the SelectionModes enum to concisely express common selection mode combinations for the Table component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nimport { SelectionModes } from \"@blueprintjs/table\";\n\n<Table selectionModes={SelectionModes.ALL} />\n<Table selectionModes={SelectionModes.COLUMNS_AND_CELLS} />\n<Table selectionModes={SelectionModes.COLUMNS_ONLY} />\n<Table selectionModes={SelectionModes.NONE} />\n<Table selectionModes={SelectionModes.ROWS_AND_CELLS} />\n<Table selectionModes={SelectionModes.ROWS_ONLY} />\n```\n\n----------------------------------------\n\nTITLE: DatePicker Localization Example\nDESCRIPTION: Example showing how to implement localization in DatePicker using date-fns library.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-picker/datepicker.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DatePicker, DatePickerLocaleUtils } from \"@blueprintjs/datetime\";\nimport { format, Locale, parse } from \"date-fns\";\n\nconst DATE_FNS_LOCALE_UTILS: DatePickerLocaleUtils = {\n    // implement locale utils using \"date-fns\" functions\n};\n\n<DatePicker locale=\"fr\" localeUtils={DATE_FNS_LOCALE_UTILS} />;\n```\n\n----------------------------------------\n\nTITLE: Constructing Region Objects using Blueprint Table Regions API\nDESCRIPTION: Demonstrates how to use the Regions API to create various types of table regions, including cell, column, row, and table regions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Regions } from \"@blueprintjs/table\";\n\nconst singleCellRegion = Regions.cell(0, 0); // { rows: [0, 0], cols: [0, 0] }\nconst singleColumnRegion = Regions.column(0); // { rows: null, cols: [0, 0] }\nconst singleRowRegion = Regions.row(0); // { rows: [0, 0], cols: null }\n\nconst multiCellRegion = Regions.cell(0, 0, 2, 2); // { rows: [0, 2], cols: [0, 2] }\nconst multiColumnRegion = Regions.column(0, 2); // { rows: null, cols: [0, 2] }\nconst multiRowRegion = Regions.row(0, 2); // { rows: [0, 2], cols: null }\n\nconst tableRegion = Regions.table(); // { rows: null, cols: null }\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Colors in Less\nDESCRIPTION: Example of importing and using Blueprint color variables in Less. This snippet shows how to apply core colors to CSS rules using Less variables.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/colors.md#2025-04-18_snippet_1\n\nLANGUAGE: less\nCODE:\n```\n@import \"@blueprintjs/core/lib/less/variables\";\n\n.rule {\n    color: @pt-link-color;\n    background: @black;\n}\n```\n\n----------------------------------------\n\nTITLE: Text Component Example Usage\nDESCRIPTION: React example demonstrating the Text component implementation. This component handles text overflow by conditionally adding title attributes and truncating with an ellipsis.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/text/text.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TextExample\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint Components in Vanilla JavaScript\nDESCRIPTION: Example of rendering Blueprint components in a non-React JavaScript application using ReactDOM and React.createElement. Shows how to mount and unmount components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Classes, Spinner } from \"@blueprintjs/core\";\nimport { createRoot } from \"react-dom/client\";\n\nconst domNode = document.getElementById(\"root\");\nconst root = createRoot(domNode);\n\n// with JSX\nroot.render(<Spinner className={Classes.SMALL} intent=\"primary\" />);\n\n// with vanilla JS, use React.createElement\nroot.render(React.createElement(Spinner, { className: Classes.SMALL, intent: \"primary\" }));\n```\n\n----------------------------------------\n\nTITLE: Dynamic Import of Icons in React with Blueprint\nDESCRIPTION: Shows how to use dynamic imports for icons in Blueprint. This method doesn't require explicit imports and automatically sizes icons, but needs additional configuration for runtime availability.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(<Button text=\"Download\" icon=\"download\" />);\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Type Definitions for Blueprint Dependencies\nDESCRIPTION: Command to install the required TypeScript type definitions for Blueprint's React dependencies. Blueprint's own type definitions are included in the package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# required for all @blueprintjs packages:\nnpm install --save @types/react @types/react-dom\n```\n\n----------------------------------------\n\nTITLE: Custom Size Icon Rendering Example\nDESCRIPTION: Example of using a custom size for an Icon component and the resulting HTML markup it generates.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/icon/icon.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon=\"globe\" size={30} />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<span class=\"@ns-icon @ns-icon-globe\" aria-hidden=\"true\">\n    <svg data-icon=\"globe\" width=\"30\" height=\"30\" viewBox=\"0 0 20 20\" role=\"img\">\n        <path d=\"...\"></path>\n    </svg>\n</span>\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint Icon Content String in TypeScript\nDESCRIPTION: Shows how to get the icon content string for a specific icon in TypeScript. This can be used to set the content of a custom icon element dynamically.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/variables.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getIconContentString } from \"@blueprintjs/icons\";\n\ndocument.querySelector(\".my-custom-icon\").style.content = getIconContentString(\"tick\");\n```\n\n----------------------------------------\n\nTITLE: Using ResizeSensor with Custom Ref in React TSX\nDESCRIPTION: Shows how to use the ResizeSensor component when a custom ref is attached to the child element. The same ref must be passed to the ResizeSensor via the targetRef prop for proper functionality.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/resize-sensor/resize-sensor.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst myRef = React.createRef();\n\n<ResizeSensor targetRef={myRef} onResize={handleResize}>\n    <div ref={myRef} style={{ width: this.props.width }} />\n</ResizeSensor>;\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Select Component Usage in Blueprint\nDESCRIPTION: Example showing the basic usage of HTMLSelect component with native select functionality, supporting both direct option children and options prop for configuration.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html-select/html-select.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<HTMLSelect\n    value={selectedValue}\n    onChange={handleChange}\n    options={[\n        { value: \"option1\", label: \"Option 1\" },\n        { value: \"option2\", label: \"Option 2\" }\n    ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Handling Synchronous Usage with Promise Callbacks\nDESCRIPTION: Example of using the Promise returned by OverlayToaster.createAsync with .then() in synchronous functions. This allows working with toasters in non-async contexts.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction synchronousFn() {\n    const toasterPromise = OverlayToaster.createAsync({});\n    toasterPromise.then(toaster => toaster.show({ message: \"Toast!\" }));\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML-specific DOM Attributes with Icon Component\nDESCRIPTION: Example of using generic type parameters with the Icon component to enable HTML-specific attributes like 'draggable'.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/icon/icon.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Icon } from \"@blueprintjs/core\";\nimport * as React from \"react\";\n\nfunction Example() {\n    const [isDraggable, setIsDraggable] = React.useState();\n    // explicitly declare type of the root element so that we can set the \"draggable\" DOM attribute\n    return <Icon<HTMLSpanElement> icon=\"drag-handle-horizontal\" draggable={isDraggable} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Toaster Instance with Ref Callback in TSX\nDESCRIPTION: Shows how to access a toaster instance through a ref callback. This pattern allows invoking toaster methods directly from the ref when it becomes available.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\nrender(<OverlayToaster ref={(ref: Toaster | null) => ref?.show({ ...toastOptions })} />, targetElement);\n```\n\n----------------------------------------\n\nTITLE: Defining Blueprint CSS Color Variables\nDESCRIPTION: This HTML table defines various color variables used in the Blueprint CSS framework. It includes variables for icon colors, divider colors, and code colors for both light and dark themes. Each variable is represented by a color bubble, its name, and a description of its purpose.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/variables.md#2025-04-18_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n    <tbody>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-icon-color-selected\"></div>\n            </td>\n            <td><code>$pt-icon-color-selected</code></td>\n            <td>Selected icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color</code></td>\n            <td>Dark theme default icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-hover\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-hover</code></td>\n            <td>Dark theme hovered icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-disabled\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-disabled</code></td>\n            <td>Dark theme disabled icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-icon-color-selected\"></div>\n            </td>\n            <td><code>$pt-dark-icon-color-selected</code></td>\n            <td>Dark theme selected icon color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-divider-black\"></div>\n            </td>\n            <td><code>$pt-divider-black</code></td>\n            <td>Black divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-divider-black\"></div>\n            </td>\n            <td><code>$pt-dark-divider-black</code></td>\n            <td>Dark theme black divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-divider-white\"></div>\n            </td>\n            <td><code>$pt-dark-divider-white</code></td>\n            <td>Dark theme white divider color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-code-text-color\"></div>\n            </td>\n            <td><code>$pt-code-text-color</code></td>\n            <td>Code text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-code-background-color\"></div>\n            </td>\n            <td><code>$pt-code-background-color</code></td>\n            <td>Code background color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-code-text-color\"></div>\n            </td>\n            <td><code>$pt-dark-code-text-color</code></td>\n            <td>Dark theme code text color</td>\n        </tr>\n        <tr>\n            <td>\n                <div class=\"docs-color-bubble alias-dark-code-background-color\"></div>\n            </td>\n            <td><code>$pt-dark-code-background-color</code></td>\n            <td>Dark theme code background color</td>\n        </tr>\n    </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Text Component Props Interface\nDESCRIPTION: TypeScript interface definition for the Text component props. The component accepts arbitrary children intended to render as text content.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/text/text.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface TextProps\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Table Structure\nDESCRIPTION: Example showing how to create a basic table with three columns and five rows using the Blueprint Table component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Column, Table } from \"@blueprintjs/table\";\n\n<Table numRows={5}>\n    <Column />\n    <Column />\n    <Column />\n</Table>;\n```\n\n----------------------------------------\n\nTITLE: Using Modifier Props in Blueprint React Components\nDESCRIPTION: Shows the preferred way of using modifier props on Blueprint React components instead of CSS classes.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// Prefer props over modifier classes.\n<Button intent=\"primary\" variant=\"minimal\">Good stuff</Button>\n\n// Don't do this!\n<Button className={classNames(Classes.INTENT_PRIMARY, Classes.MINIMAL)}>Don't do this!</Button>\n```\n\n----------------------------------------\n\nTITLE: DateRangeShortcut Interface Definition\nDESCRIPTION: TypeScript interface defining the structure for custom date range shortcuts that can be provided to the DateRangePicker component. This interface would define properties for shortcut labels and their corresponding date ranges.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-range-picker/daterangepicker.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@interface DateRangeShortcut\n```\n\n----------------------------------------\n\nTITLE: Accessing Toaster Instance with React.createRef in TSX\nDESCRIPTION: Demonstrates using React.createRef to create a reference to an OverlayToaster component. This allows accessing the toaster's methods after rendering.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nconst myToaster = React.createRef<OverlayToaster>();\nrender(<OverlayToaster ref={myToaster} />, targetElement);\nmyToaster.current?.show({ ...toastOptions });\n```\n\n----------------------------------------\n\nTITLE: Styling UI Text in Blueprint CSS\nDESCRIPTION: Demonstrates the base styles for UI text in Blueprint, including font size and line height. The .@ns-ui-text class can be used to reset an element's font size and line height to the default base styles.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.@ns-ui-text {\n  font-size: 14px;\n  line-height: 1.5;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Drawer Size Constants in TypeScript\nDESCRIPTION: Constants for common Drawer sizes in Palantir Blueprint. These can be used with the size prop to set the width or height of the Drawer.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/drawer/drawer.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDrawerSize.SMALL = 360px\nDrawerSize.STANDARD = 50%\nDrawerSize.LARGE = 90%\n```\n\n----------------------------------------\n\nTITLE: Including Blueprint CSS Files with HTML\nDESCRIPTION: Example of including required CSS files for Blueprint using HTML link tags. Shows how to reference the files directly from the node_modules directory.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- or using plain old HTML -->\n<head>\n    <link href=\"path/to/node_modules/normalize.css/normalize.css\" rel=\"stylesheet\" />\n    <link href=\"path/to/node_modules/@blueprintjs/core/lib/css/blueprint.css\" rel=\"stylesheet\" />\n    <!-- include blueprint-icons.css for icon font support -->\n    <link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n</head>\n```\n\n----------------------------------------\n\nTITLE: Migrating Popover2 Import to Core Package\nDESCRIPTION: Code diff showing how to update import statements when migrating from @blueprintjs/popover2 to @blueprintjs/core v5.x. The Popover2 component is now available as Popover in the core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/popover2/README.md#2025-04-18_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n- import { Popover2 } from \"@blueprintjs/popover2\";\n+ import { Popover } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Blueprint Colors in Sass\nDESCRIPTION: Example of importing and using Blueprint color variables in Sass. This snippet demonstrates how to apply core colors to CSS rules.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/colors.md#2025-04-18_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import \"@blueprintjs/core/lib/scss/variables\";\n\n.rule {\n    color: $pt-link-color;\n    background: $black;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HotkeysProvider with React in Blueprint\nDESCRIPTION: Basic example of wrapping an application with HotkeysProvider at the root level to enable hotkey functionality throughout the app.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/context/hotkeys/hotkeys-provider.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { HotkeysProvider } from \"@blueprintjs/core\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom/client\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nroot.render(\n    <HotkeysProvider>\n        <div>My app has hotkeys ðŸ˜Ž</div>\n    </HotkeysProvider>,\n);\n```\n\n----------------------------------------\n\nTITLE: Styling Running Text in Blueprint CSS\nDESCRIPTION: Shows the styles applied to longform text within a .@ns-running-text container, including adjustments for headings, lists, and other text elements.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.@ns-running-text {\n  line-height: 1.5;\n}\n\n.@ns-running-text h1 {\n  margin-top: 40px;\n  margin-bottom: 20px;\n}\n\n.@ns-running-text h2 {\n  margin-top: 30px;\n  margin-bottom: 15px;\n}\n\n.@ns-running-text ul, .@ns-running-text ol {\n  padding-left: 30px;\n  margin-bottom: 10px;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tag Component in React\nDESCRIPTION: Example showing how to use the Tag component in a React application, represented by the TagExample reference.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tag/tag.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TagExample\n```\n\n----------------------------------------\n\nTITLE: Custom Icon Loading with Vite in Blueprint\nDESCRIPTION: Custom loader configuration for using Blueprint icons with Vite bundler. This approach uses Vite's glob import feature to load icon modules.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Icons, IconPaths } from \"@blueprintjs/icons\";\n\n// see https://vitejs.dev/guide/features.html#glob-import\nconst iconModules: Record<string, { default: IconPaths }> = import.meta.glob(\n    [\n        \"../node_modules/@blueprintjs/icons/lib/esm/generated/16px/paths/*.js\",\n        \"../node_modules/@blueprintjs/icons/lib/esm/generated/20px/paths/*.js\",\n    ],\n    { eager: true },\n);\n\nIcons.setLoaderOptions({\n    loader: async (name, size) => (\n        iconModules[\n            `../node_modules/@blueprintjs/icons/lib/esm/generated/${size}px/paths/${name}.js`\n        ].default\n    ),\n});\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading of Icons using Webpack in Blueprint\nDESCRIPTION: Custom Webpack loader configuration for lazy loading of icons in Blueprint. This approach triggers a network request for each icon usage, loading individual icon contents on-demand.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { Icons, IconSize, IconPathsLoader } from \"@blueprintjs/icons\";\n\nconst lazyLoader: IconPathsLoader = async (name, size) => {\n    return (\n        size === IconSize.STANDARD\n            ? await import(\n                  /* webpackChunkName: \"blueprint-icons-16px\" */\n                  /* webpackInclude: /\\.js$/ */\n                  /* webpackMode: \"lazy\" */\n                  `@blueprintjs/icons/lib/esm/generated/16px/paths/${name}`\n              )\n            : await import(\n                  /* webpackChunkName: \"blueprint-icons-20px\" */\n                  /* webpackInclude: /\\.js$/ */\n                  /* webpackMode: \"lazy\" */\n                  `@blueprintjs/icons/lib/esm/generated/20px/paths/${name}`\n              )\n    ).default;\n};\n\nIcons.setLoaderOptions({ loader: lazyLoader });\n```\n\n----------------------------------------\n\nTITLE: Using Classes Constants for Custom Elements in React\nDESCRIPTION: Shows how to use the Classes constants object from Blueprint core for creating forward-compatible custom elements.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n// use Classes constants for forward-compatible custom elements.\nimport { Classes } from \"@blueprintjs/core\";\n<a className={Classes.MENU_ITEM}>custom menu item</a>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Toaster with OverlayToaster.create Method in TypeScript\nDESCRIPTION: Creates a new Toaster instance using the synchronous method. This approach is being phased out in React 18+ as it relies on synchronous DOM rendering.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/toast/toast.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst myToaster: Toaster = OverlayToaster.create({ position: \"bottom\" });\nmyToaster.show({ ...toastOptions });\n```\n\n----------------------------------------\n\nTITLE: Styling Blockquotes in Blueprint CSS\nDESCRIPTION: Demonstrates the styles for blockquotes in Blueprint, including left border and padding.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.@ns-blockquote {\n  margin: 0 0 10px;\n  border-left: 4px solid rgba(167, 182, 194, 0.5);\n  padding: 0 20px;\n}\n```\n\n----------------------------------------\n\nTITLE: CardList with Section Example React Component\nDESCRIPTION: References a React code example demonstrating how to embed the CardList component within a Section component to add a title or description above the list.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card-list/card-list.md#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n@reactCodeExample CardListSectionExample\n```\n\n----------------------------------------\n\nTITLE: Recommended VSCode Settings for Blueprint ESLint Integration\nDESCRIPTION: VSCode settings that enable format-on-save functionality and ESLint formatting for optimal development workflow with Blueprint and ESLint.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-config/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"editor.formatOnSave\": true,\n\"eslint.format.enable\": true\n```\n\n----------------------------------------\n\nTITLE: Implementing Table Formatting in Blueprint\nDESCRIPTION: Shows usage of TruncatedFormat and JSONFormat components for handling long strings and JSON objects in table cells.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-features.md#2025-04-18_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample TableFormatsExample\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint Core Variables in Sass\nDESCRIPTION: Shows how to import Blueprint Core variables in a Sass file. This makes all the documented variables available for use in your Sass stylesheets.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/variables.md#2025-04-18_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n@import \"path/to/@blueprintjs/core/lib/scss/variables\";\n```\n\n----------------------------------------\n\nTITLE: Partial Upfront Loading of Icons in Blueprint\nDESCRIPTION: Configuration to load some icon paths upfront with network requests and the rest lazily on-demand in Blueprint. This approach allows for prioritizing commonly used icons while keeping others lazy-loaded.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { Icons } from \"@blueprintjs/icons\";\n\nIcons.setLoaderOptions({ loader: lazyLoader });\nawait Icons.load([\"download\", \"caret-down\", \"endorsed\", \"help\", \"lock\"]);\n```\n\n----------------------------------------\n\nTITLE: Styling RTL Text in Blueprint CSS\nDESCRIPTION: Demonstrates the utility class .@ns-rtl for right-to-left text alignment in Blueprint.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.@ns-rtl {\n  text-align: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic TSLint Configuration\nDESCRIPTION: Basic TSLint configuration that extends the Blueprint default rules.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/tslint-config/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": \"@blueprintjs/tslint-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using FileInput Component in React\nDESCRIPTION: Demonstrates how to use the FileInput component with disabled state, custom text, and an input change handler.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/file-input.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<FileInput disabled={true} text=\"Choose file...\" onInputChange={...} />\n```\n\n----------------------------------------\n\nTITLE: Setting Active Item in Blueprint Select Component\nDESCRIPTION: This code shows how to set the active item in the Select component, considering the 'Create New Item' option.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/select/select-component.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nactiveItem={isCreateNewItemActive ? getCreateNewItem() : activeItem}\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint Core Variables in Less\nDESCRIPTION: Shows how to import Blueprint Core variables in a Less file. This makes all the documented variables available for use in your Less stylesheets.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/variables.md#2025-04-18_snippet_1\n\nLANGUAGE: less\nCODE:\n```\n@import \"path/to/@blueprintjs/core/lib/less/variables\";\n```\n\n----------------------------------------\n\nTITLE: Best Practice for Customizing Blueprint Components in React\nDESCRIPTION: Shows the recommended approach of adding a custom class to a Blueprint Button component for styling.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Button className=\"my-custom-class\" text=\"customized button\" />\n```\n\n----------------------------------------\n\nTITLE: Styling DatePicker Modifiers with SCSS\nDESCRIPTION: SCSS styling code to customize the appearance of Sunday dates in the DatePicker component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/date-picker/datepicker.md#2025-04-18_snippet_0\n\nLANGUAGE: scss\nCODE:\n```\n.#{$ns}-datepicker .DayPicker-Day--isSunday {\n    // CSS rules to make the day appear disabled\n}\n```\n\n----------------------------------------\n\nTITLE: Context Provider Navigation Links in Markdown\nDESCRIPTION: Navigation structure using Blueprint's documentation syntax to link to different context provider pages. Includes links for Blueprint provider, Hotkeys provider, Overlays provider, and Portal provider components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/context/context.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@# Context\n\n<!-- Exact ordering of items in the navbar: -->\n\n@page blueprint-provider\n@page hotkeys-provider\n@page overlays-provider\n@page portal-provider\n```\n\n----------------------------------------\n\nTITLE: CSS-based Icon Usage with Icon Fonts\nDESCRIPTION: Example of using Blueprint icons via CSS classes with the icon font system, including size and intent modifiers.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/icon/icon.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"@ns-icon-{{size}} @ns-icon-{{name}}\"></span>\n\n<span class=\"@ns-icon-standard @ns-icon-projects\"></span>\n<span class=\"@ns-icon-large @ns-icon-geosearch @ns-intent-success\"></span>\n```\n\n----------------------------------------\n\nTITLE: Suggest Component Props Interface Declaration\nDESCRIPTION: TypeScript interface definition for the props accepted by the Suggest component\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/suggest/suggest.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface SuggestProps\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint Icon Codepoints in Sass\nDESCRIPTION: Demonstrates how to access and use Blueprint icon codepoints in a Sass stylesheet. This example sets the content of a custom icon class using the 'tick' icon codepoint.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/variables.md#2025-04-18_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@import \"@blueprintjs/icons/lib/scss/variables\";\n\n.my-custom-icon {\n    content: map-get($blueprint-icon-codepoints, \"tick\");\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Classes in SCSS\nDESCRIPTION: Demonstrates how to style a custom class added to a Blueprint component using SCSS.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n.my-custom-class {\n    width: 4000px;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Input Element Implementation\nDESCRIPTION: CSS example showing the basic input element styling with RTL support\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/input-group.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.@ns-input[type=\"text\"][dir=\"auto\"] {\n    /* CSS for basic input element */\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blueprint Node Build Scripts Package in Markdown\nDESCRIPTION: This snippet defines the package name and provides a brief description of its contents and purpose. It highlights the inclusion of scripts for TypeScript, Sass, ESLint, and other build-related tasks specifically for Blueprint development.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/node-build-scripts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @blueprintjs/node-build-scripts\n\nTypeScript, Sass, ESLint and other build-related scripts for Blueprint development.\n```\n\n----------------------------------------\n\nTITLE: Eager Loading of Icons using Webpack in Blueprint\nDESCRIPTION: Custom Webpack loader configuration for eager loading of icon definitions in Blueprint. This method results in the largest bundle size for the main chunk but ensures all icons are immediately available.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { Icons, IconSize, IconPathsLoader } from \"@blueprintjs/icons\";\n\nconst eagerLoader: IconPathsLoader = async (name, size) => {\n    return (\n        size === IconSize.STANDARD\n            ? await import(\n                  /* webpackChunkName: \"blueprint-icons\" */\n                  /* webpackInclude: /\\.js$/ */\n                  /* webpackMode: \"eager\" */\n                  `@blueprintjs/icons/lib/esm/generated/16px/paths/${name}`\n              )\n            : await import(\n                  /* webpackChunkName: \"blueprint-icons\" */\n                  /* webpackInclude: /\\.js$/ */\n                  /* webpackMode: \"eager\" */\n                  `@blueprintjs/icons/lib/esm/generated/20px/paths/${name}`\n              )\n    ).default;\n};\n\nIcons.setLoaderOptions({ loader: eagerLoader });\n```\n\n----------------------------------------\n\nTITLE: Using TruncatedFormat Component in Table Cell\nDESCRIPTION: Demonstrates how to use the TruncatedFormat component to wrap cell contents for proper truncation.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nconst content = \"A very long string...\";\nreturn (\n    <Cell>\n        <TruncatedFormat>{content}</TruncatedFormat>\n    </Cell>\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint DateTime Stylesheet in Sass\nDESCRIPTION: Shows how to import the @blueprintjs/datetime package stylesheet in a Sass file.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/index.md#2025-04-18_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import \"@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Blueprint SCSS Compilation\nDESCRIPTION: Shows how to configure Webpack's sass-loader to compile Blueprint SCSS sources with custom functions and load paths.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n// webpack.config.mjs\n\nimport { sassNodeModulesLoadPaths, sassSvgInlinerFactory } from \"@blueprintjs/node-build-scripts\";\nimport * as sass from \"sass\";\n\nconst functions = {\n    /**\n     * Sass function to inline a UI icon svg and change its path color.\n     *\n     * Usage:\n     * svg-icon(\"16px/icon-name.svg\", (path: (fill: $color)) )\n     */\n    \"svg-icon($path, $selectors: null)\": sassSvgInlinerFactory(\"path/to/resources/icons\", {\n        optimize: true,\n        encodingFormat: \"uri\",\n    }),\n};\n\nexport default {\n    module: {\n        rules: [\n            {\n                test: /\\.scss$/,\n                use: {\n                    loader: require.resolve(\"sass-loader\"),\n                    options: {\n                        sassOptions: {\n                            loadPaths: sassNodeModulesLoadPaths,\n                            functions,\n                        },\n                    },\n                },\n            },\n        ],\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @blueprintjs/datetime Package with npm\nDESCRIPTION: Command to install the @blueprintjs/datetime package as a dependency in your project using npm.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @blueprintjs/datetime\n```\n\n----------------------------------------\n\nTITLE: Importing Divider Component from Blueprint Core\nDESCRIPTION: Shows how to import the Divider component from the Blueprint core package. This is the first step to using the Divider in a React application.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/divider/divider.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Divider } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint Breadcrumbs Component\nDESCRIPTION: How to import the Breadcrumbs component from the Blueprint Core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/breadcrumbs/breadcrumbs.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Breadcrumbs } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Creating Scrollable Overlay2 Component\nDESCRIPTION: Shows how to make an Overlay2 component scrollable by adding a specific CSS class to its className prop.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overlay2/overlay2.md#2025-04-18_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\n<Overlay2 className={Classes.OVERLAY_SCROLL_CONTAINER} />\n```\n\n----------------------------------------\n\nTITLE: Including Blueprint DateTime Stylesheet in HTML\nDESCRIPTION: Demonstrates how to include the @blueprintjs/datetime package stylesheet directly in an HTML file using a link tag.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"path/to/node_modules/@blueprintjs/datetime/lib/css/blueprint-datetime.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Calling Tree Instance Method for Node Access\nDESCRIPTION: Method to retrieve the HTML element of a specific Tree node by its ID. Returns undefined if the node is not currently mounted.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tree/tree.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nTree.getNodeContentElement(nodeId: string | number): HTMLElement | undefined\n```\n\n----------------------------------------\n\nTITLE: Installing @blueprintjs/datetime2 Package with npm\nDESCRIPTION: Command to install the @blueprintjs/datetime2 package as a dependency in your project. This is required to use the datetime2 components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @blueprintjs/datetime2\n```\n\n----------------------------------------\n\nTITLE: Basic Divider Usage Example\nDESCRIPTION: Demonstrates basic usage of the Divider component to separate content blocks. The actual code is not provided, but referenced as a React code example.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/divider/divider.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n@reactCodeExample DividerBasicExample\n```\n\n----------------------------------------\n\nTITLE: Importing Context Menu Popover in TypeScript\nDESCRIPTION: This snippet shows the TypeScript function signatures for the imperative API of Context Menu Popover. It includes functions for showing and hiding the context menu.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/context-menu/context-menu-popover.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport function showContextMenu(props: ContextMenuPopoverProps, options?: ShowContextMenuOptions): void;\nexport function hideContextMenu(options?: DOMMountOptions<ContextMenuPopoverProps>): void;\n```\n\n----------------------------------------\n\nTITLE: Defining HTMLTableProps Interface in TypeScript\nDESCRIPTION: This code snippet represents the interface for HTMLTable props in TypeScript. It defines the structure of properties that can be passed to the HTMLTable component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html-table/html-table.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@interface HTMLTableProps\n```\n\n----------------------------------------\n\nTITLE: Unmounting Blueprint Components in Vanilla JavaScript\nDESCRIPTION: Example of unmounting Blueprint components to remove them from the DOM and clean up resources.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/getting-started.md#2025-04-18_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nroot.unmount();\n```\n\n----------------------------------------\n\nTITLE: Referencing the Alert Component Props Interface\nDESCRIPTION: References the TypeScript interface for Alert component props. This interface likely defines the available configuration options including isOpen, onConfirm, onCancel, and onClose callbacks.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/alert/alert.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface AlertProps\n```\n\n----------------------------------------\n\nTITLE: Importing @blueprintjs/datetime2 Stylesheet in Sass\nDESCRIPTION: Sass import statement for including the datetime2 package CSS. This is necessary to apply proper styling to the datetime2 components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/index.md#2025-04-18_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import \"~@blueprintjs/datetime2/lib/css/blueprint-datetime2.css\";\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint Namespace Variable in SCSS\nDESCRIPTION: Demonstrates how to use the $ns variable in SCSS to generate forward-compatible class names, though this approach is not recommended.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n// interpolate the $ns variable to generate forward-compatible class names.\n// this approach is *not encouraged* as it increases maintenance cost.\n@import \"@blueprintjs/core/lib/scss/variables\";\n.#{$ns}-menu-item {\n}\n```\n\n----------------------------------------\n\nTITLE: Vertical Divider Usage Example\nDESCRIPTION: Illustrates how to use the Divider component vertically within a flex container. The actual code is not provided, but referenced as a React code example.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/divider/divider.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n@reactCodeExample DividerVerticalExample\n```\n\n----------------------------------------\n\nTITLE: Using JSONFormat Component in Table Cell\nDESCRIPTION: Shows how to use the JSONFormat component to properly format and display JSON content in a table cell.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_6\n\nLANGUAGE: TSX\nCODE:\n```\nconst content = { any: \"javascript variable\", even: [null, \"is\", \"okay\", \"too\"] };\nreturn (\n    <Cell>\n        <JSONFormat>{content}</JSONFormat>\n    </Cell>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Blueprint Rules\nDESCRIPTION: Example of enabling specific Blueprint ESLint rules individually.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"@blueprintjs/classes-constants\"\n        \"@blueprintjs/no-deprecated-components\": \"error\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Icons package with npm\nDESCRIPTION: Command to install the @blueprintjs/icons package using npm. This package contains React components and files for displaying icons as part of the Blueprint UI toolkit.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @blueprintjs/icons\n```\n\n----------------------------------------\n\nTITLE: Importing Required Dependencies' Stylesheets in Sass\nDESCRIPTION: Sass import statements for the required dependency packages that datetime2 relies on. These imports are necessary as the datetime2 components use components from these packages.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime2/src/index.md#2025-04-18_snippet_2\n\nLANGUAGE: scss\nCODE:\n```\n@import \"~@blueprintjs/datetime/lib/css/blueprint-datetime.css\";\n@import \"~@blueprintjs/select/lib/css/blueprint-select.css\";\n```\n\n----------------------------------------\n\nTITLE: Avoiding Hardcoded Blueprint Class Names in React\nDESCRIPTION: Demonstrates the incorrect way of using hardcoded Blueprint class names in a React component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// Don't do this! Avoid hardcoding Blueprint class names.\n<button className=\"@ns-button @ns-large\">Don't do this!</button>\n```\n\n----------------------------------------\n\nTITLE: Select Item Renderer Props Interface Declaration\nDESCRIPTION: TypeScript interface definition for the props used by the item renderer in the Suggest component\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/suggest/suggest.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@interface SelectItemRendererProps\n```\n\n----------------------------------------\n\nTITLE: Styling Custom Radio Buttons with CSS\nDESCRIPTION: This CSS snippet shows how to structure and style custom radio buttons using Blueprint's CSS classes. It includes a note about using attribute modifiers on the internal input element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/radio.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\nBlueprint's custom radio buttons use an extra .@ns-control-indicator element after the <input> to achieve their\ncustom styling. You should then wrap the whole thing in a <label> with the classes .@ns-control.@ns-radio.\n\nNote that attribute modifiers (:checked, :disabled) are applied on the internal <input> element.\n```\n\n----------------------------------------\n\nTITLE: Icon Components Rule Configuration\nDESCRIPTION: Configuration options for the icon-components rule.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"rules\": {\n    // default uses \"component\"\n    \"@blueprintjs/icon-components\"\n    // expanded syntax\n    \"@blueprintjs/icon-components\": [\"error\", \"component\" | \"literal\"] // choose one\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @blueprintjs/select Package with npm\nDESCRIPTION: Command to install the @blueprintjs/select package using npm. This is a prerequisite for using the select components in a React project.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @blueprintjs/select\n```\n\n----------------------------------------\n\nTITLE: Importing Drawer Component in React\nDESCRIPTION: Example of how to import and use the Drawer component in a React application. The Drawer is a stateless component controlled by the isOpen prop.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/drawer/drawer.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Drawer isOpen={true} size={DrawerSize.STANDARD}>\n  {/* Drawer content */}\n</Drawer>\n```\n\n----------------------------------------\n\nTITLE: Defining Omnibar Generic Type in TypeScript\nDESCRIPTION: This code snippet shows how to define the Omnibar component as a generic type in TypeScript. The generic type T represents the type of one item in the array of items passed to the component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/omnibar/omnibar.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nOmnibar<T>\n```\n\n----------------------------------------\n\nTITLE: Applying Blueprint Classes to HTML Elements\nDESCRIPTION: Example of applying Blueprint Classes constant to style native HTML elements\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html/html.md#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<h1 className={Classes.HEADING}>\n```\n\n----------------------------------------\n\nTITLE: Icon Components Rule Examples\nDESCRIPTION: Examples of auto-fixes for both component and literal modes of the icon-components rule.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-<Button icon=\"tick\" />\n+<Button icon={<TickIcon />} />\n```\n\nLANGUAGE: diff\nCODE:\n```\n-<Button icon={<GraphIcon />} />\n+<Button icon=\"graph\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Table CSS Styles\nDESCRIPTION: SCSS import statement to include the required table component styles in your application.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table.md#2025-04-18_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import \"@blueprintjs/table/lib/css/table.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing Collapse Component in Blueprint.js\nDESCRIPTION: Shows how to import the Collapse component from the Blueprint.js core package to use in a React application.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/collapse/collapse.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Collapse } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Blueprint.js\nDESCRIPTION: How to import the Callout component from the Blueprint.js core package for use in React applications.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/callout/callout.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Callout } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Applying Skeleton CSS Class in Blueprint\nDESCRIPTION: The skeleton component is implemented as a CSS class (.@ns-skeleton) that should be applied to elements to create loading states. When using this class on focusable elements like inputs and buttons, they should be explicitly disabled to prevent focus.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/skeleton/skeleton.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.@ns-skeleton\n```\n\n----------------------------------------\n\nTITLE: Basic Input Group CSS Implementation\nDESCRIPTION: CSS example showing the basic structure of an input group with icon placement\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/input-group.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.@ns-input-group .@ns-icon {\n    /* CSS for input group with icon */\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Blueprint Icons CSS with Webpack\nDESCRIPTION: JavaScript code to import the Blueprint Icons CSS file using a bundler like webpack. This is required for icon font support in the application.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/index.md#2025-04-18_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n@import \"@blueprintjs/icons/lib/css/blueprint-icons.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing CardList Component in Blueprint\nDESCRIPTION: Shows how to import the CardList component from the Blueprint Core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card-list/card-list.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { CardList } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Determining Region Cardinality using Regions API\nDESCRIPTION: Shows how to use the Regions.getRegionCardinality() function to determine the cardinality of different region types.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Regions } from \"@blueprintjs/table\";\n\nconst cardinalities = [\n    Regions.getRegionCardinality(Regions.cell(0, 0)), // RegionCardinality.CELLS\n    Regions.getRegionCardinality(Regions.row(0)), // RegionCardinality.FULL_ROWS\n    Regions.getRegionCardinality(Regions.column(0)), // RegionCardinality.FULL_COLUMNS\n    Regions.getRegionCardinality(Regions.table()), // RegionCardinality.FULL_TABLE\n];\n```\n\n----------------------------------------\n\nTITLE: Applying no-color-literal Rule in SCSS\nDESCRIPTION: Diff showing the transformation from using color literals to using Blueprint color variables in SCSS.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/stylelint-plugin/README.md#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-.my-class {\n-    border: 1px solid #137CBD;\n-}\n+ @use \"@blueprintjs/core/lib/scss/variables.scss\" as bp;\n+\n+.my-class {\n+    border: 1px solid bp.$blue3;\n+}\n```\n\n----------------------------------------\n\nTITLE: Styling Navbar Container with CSS\nDESCRIPTION: CSS snippet for styling a navbar container with fixed width and centered alignment. This is used when the application is inside a fixed-width container instead of spanning the entire viewport.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/navbar/navbar.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@css navbar-container\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Colors Package via npm\nDESCRIPTION: Command to install the @blueprintjs/colors package using npm. This package contains color variables for Blueprint's color palette, including both modern 4.x colors and legacy 3.x colors.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/colors/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @blueprintjs/colors\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint DateTime Package with npm\nDESCRIPTION: Command to install the @blueprintjs/datetime package using npm. This package provides React components for working with dates and times as part of the Blueprint UI toolkit.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @blueprintjs/datetime\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint React Components in JSX\nDESCRIPTION: Example of using Blueprint's React component instead of native HTML element\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html/html.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<H1>\n```\n\n----------------------------------------\n\nTITLE: Rendering Omnibar Example in React\nDESCRIPTION: This code snippet demonstrates how to render an example of the Omnibar component in a React application. It uses the @reactExample directive to include the OmnibarExample component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/components/omnibar/omnibar.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample OmnibarExample\n```\n\n----------------------------------------\n\nTITLE: Styling Headings in Blueprint CSS\nDESCRIPTION: Demonstrates the styles applied to heading elements (h1-h6) when using the .@ns-heading class or within a .@ns-running-text container.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.@ns-heading {\n  margin: 0;\n  padding: 0;\n}\n\nh1.@ns-heading {\n  font-size: 36px;\n  line-height: 40px;\n}\n\nh2.@ns-heading {\n  font-size: 28px;\n  line-height: 32px;\n}\n\n/* ... other heading styles ... */\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Monaco Editor Theme Package\nDESCRIPTION: NPM installation command for adding the Blueprint Monaco Editor theme package to a project as a dependency.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/monaco-editor-theme/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @blueprintjs/monaco-editor-theme\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Documentation Theme via npm\nDESCRIPTION: This command installs the Blueprint documentation theme package as a dependency in your project. It uses npm (Node Package Manager) to add the @blueprintjs/docs-theme package to your project's dependencies.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-theme/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @blueprintjs/docs-theme\n```\n\n----------------------------------------\n\nTITLE: Importing EditableText Component in Blueprint\nDESCRIPTION: Shows how to import the EditableText component from the Blueprint Core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/editable-text/editable-text.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EditableText } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Styling Navbar with CSS Classes\nDESCRIPTION: CSS snippet for styling the navbar using Blueprint's CSS classes. This includes classes for the navbar parent element, groups, heading, and divider.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/navbar/navbar.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@css navbar\n```\n\n----------------------------------------\n\nTITLE: Styling Preformatted Text in Blueprint CSS\nDESCRIPTION: Shows the styles for inline code elements (.@ns-code) and multiline code blocks (.@ns-code-block) in Blueprint.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.@ns-code {\n  font-family: monospace;\n  background: rgba(255, 255, 255, 0.7);\n  border-radius: 3px;\n  padding: 2px 5px;\n  font-size: smaller;\n}\n\n.@ns-code-block {\n  font-family: monospace;\n  background: rgba(255, 255, 255, 0.7);\n  border-radius: 3px;\n  padding: 10px;\n  margin: 10px 0;\n  white-space: pre-wrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint TSLint Configuration\nDESCRIPTION: Command to install the Blueprint TSLint configuration package and its peer dependency.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/tslint-config/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @blueprintjs/tslint-config tslint\n```\n\n----------------------------------------\n\nTITLE: Running Docs Data Compilation in Blueprint\nDESCRIPTION: Command to compile documentation data from source files in the Blueprint project. This process extracts JSDoc comments from TSX files and KSS markup from SCSS files, converting them to static JSON data using documentalist.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn docs-data\n```\n\n----------------------------------------\n\nTITLE: Styling a Dialog using CSS Classes\nDESCRIPTION: Shows how to structure and style a Dialog component using CSS classes. This approach is considered deprecated in favor of using React components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/dialog/dialog.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@css dialog\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration for Custom Blueprint Namespace\nDESCRIPTION: Demonstrates how to use Webpack's DefinePlugin to set a custom Blueprint namespace for JS bundling.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/classes.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n    new webpack.DefinePlugin({\n        BLUEPRINT_NAMESPACE: \"my-custom-namespace\",\n    }),\n];\n```\n\n----------------------------------------\n\nTITLE: Styling Lists in Blueprint CSS\nDESCRIPTION: Shows the styles for unordered and ordered lists in Blueprint, including the .@ns-list-unstyled class for removing default list styling.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/typography.md#2025-04-18_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.@ns-list {\n  margin: 0 0 10px;\n  padding-left: 30px;\n}\n\n.@ns-list-unstyled {\n  margin: 0;\n  padding: 0;\n  list-style: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Stylelint Plugin with Yarn\nDESCRIPTION: Command to install the Blueprint stylelint plugin as a development dependency using Yarn package manager.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/stylelint-plugin/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @blueprintjs/stylelint-plugin\n```\n\n----------------------------------------\n\nTITLE: TimePicker Props Interface Definition in TypeScript\nDESCRIPTION: This code snippet refers to the TypeScript interface definition for the TimePicker component's props. It includes props for controlling the component's behavior and state.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/datetime/src/components/time-picker/timepicker.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface TimePickerProps\n```\n\n----------------------------------------\n\nTITLE: Importing @blueprintjs/select Stylesheet in Sass\nDESCRIPTION: Sass import statement to include the @blueprintjs/select package stylesheet. This is necessary to apply the default styles to the select components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/index.md#2025-04-18_snippet_1\n\nLANGUAGE: scss\nCODE:\n```\n@import \"@blueprintjs/select/lib/css/blueprint-select.css\";\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Table Package\nDESCRIPTION: NPM command to install the @blueprintjs/table package as a project dependency.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @blueprintjs/table\n```\n\n----------------------------------------\n\nTITLE: Using Blueprint Classes.RUNNING_TEXT\nDESCRIPTION: Reference to the container class that enables direct HTML element styling\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html/html.md#2025-04-18_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nClasses.RUNNING_TEXT\n```\n\n----------------------------------------\n\nTITLE: Configuring Stylelint with Blueprint Plugin\nDESCRIPTION: Example .stylelintrc configuration file showing how to add the Blueprint plugin and enable its custom rules.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/stylelint-plugin/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"@blueprintjs/stylelint-plugin\"],\n    \"rules\": {\n        \"@blueprintjs/no-color-literal\": true,\n        \"@blueprintjs/no-prefix-literal\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OverflowList Props Interface in TypeScript\nDESCRIPTION: This code snippet indicates that the documentation includes an interface definition for the OverflowList component's props. It's likely that the actual interface is defined elsewhere in the project.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/overflow-list/overflow-list.md#2025-04-18_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n@interface OverflowListProps\n```\n\n----------------------------------------\n\nTITLE: Traditional HTML Select Element Usage\nDESCRIPTION: Example of using the traditional HTML select element with Blueprint's CSS classes for styling.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html-select/html-select.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<select class=\"@ns-select\">\n    <option value=\"option1\">Option 1</option>\n    <option value=\"option2\">Option 2</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Installing @blueprintjs/icons Package with npm\nDESCRIPTION: Command to install the @blueprintjs/icons package using npm. This package provides over 500 vector UI icons in two sizes and two formats.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/index.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @blueprintjs/icons\n```\n\n----------------------------------------\n\nTITLE: Compiling Icon Changes in Blueprint\nDESCRIPTION: Command to compile updated icons in the Blueprint project. This step is necessary when updating existing icons or adding new ones, and must be run before any development scripts to see the changes reflected.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn compile\n```\n\n----------------------------------------\n\nTITLE: Blueprint-specific Rules Configuration\nDESCRIPTION: TSLint configuration showing how to use only Blueprint-specific rules without the full config.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/tslint-config/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\n    \"@blueprintjs/tslint-config/blueprint-rules\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: EntityTitle Props Interface Definition\nDESCRIPTION: Defines the props interface that specifies the available properties and their types for the EntityTitle component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/entity-title/entity-title.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@interface EntityTitleProps\n```\n\n----------------------------------------\n\nTITLE: Form Group CSS Guidelines\nDESCRIPTION: CSS instructions for styling Form Group components, including intent modifiers, inline positioning, and size adjustments\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/form-group.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n- Link each label to its respective control element with a `for={#id}` attribute on the `<label>` and `id={#id}` on the control.\n- Add `.@ns-intent-*` or `.@ns-disabled` to `.@ns-form-group` to style the label and helper text. Similar to labels, nested controls need to be styled separately.\n- Add `.@ns-inline` to `.@ns-form-group` to place the label to the left of the control.\n- Add `.@ns-large` to `.@ns-form-group` to align the label when used with large inline Blueprint controls.\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Table CSS API in CSS\nDESCRIPTION: This CSS snippet defines the CSS API for the HTML table component in Blueprint. It represents the class and potential modifiers for styling HTML tables.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html-table/html-table.md#2025-04-18_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n@css html-table\n```\n\n----------------------------------------\n\nTITLE: Switch Component Warning Message HTML\nDESCRIPTION: HTML markup showing a warning callout about the deprecated CSS API for the Switch component. It advises users to use the React component API instead of CSS classes.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/switch.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"@ns-callout @ns-intent-warning @ns-icon-warning-sign @ns-callout-has-body-content\">\n    <h5 class=\"@ns-heading\">\n\nDeprecated API: use [`<Switch>`](#core/components/switch)\n\n</h5>\n\nCSS APIs for Blueprint components are considered deprecated, as they are verbose, error-prone, and they\noften fall out of sync as the design system is updated. You should use the React component APIs instead.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Classes Constants Rule Configuration\nDESCRIPTION: Configuration for the blueprint-classes-constants rule that enforces usage of Classes constants.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/tslint-config/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rules\": {\n        \"blueprint-classes-constants\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Switch Component Example in React\nDESCRIPTION: React example code that demonstrates the Switch component in action. This is referenced in the documentation but the actual code isn't shown in the provided text.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/switch.md#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n@reactExample SwitchExample\n```\n\n----------------------------------------\n\nTITLE: Loading All Icons into a Single Chunk in Blueprint\nDESCRIPTION: Configuration to load all icons into a single chunk in Blueprint, avoiding size-based splitting. This approach allows for upfront loading of all icons to prevent future network requests.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/loading-icons.md#2025-04-18_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Icons } from \"@blueprintjs/icons\";\n\nIcons.setLoaderOptions({ loader: \"all\" });\n\n// optionally, load the icons up-front so that future usage does not trigger a network request\nawait Icons.loadAll();\n```\n\n----------------------------------------\n\nTITLE: Using NonIdealState Component with CSS API\nDESCRIPTION: Example of how to use the NonIdealState component with the deprecated CSS API. It demonstrates the structure with container element, visual container for icons, and text wrapper.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/non-ideal-state/non-ideal-state.md#2025-04-18_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.@ns-non-ideal-state\n.@ns-non-ideal-state-visual\n.@ns-non-ideal-state-text\n```\n\n----------------------------------------\n\nTITLE: Applying HTML Table CSS Class in HTML\nDESCRIPTION: This HTML snippet demonstrates how to apply the Blueprint HTML table CSS class to a table element. It also mentions that additional modifier classes can be applied.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/html-table/html-table.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"@ns-html-table\">\n```\n\n----------------------------------------\n\nTITLE: Blueprint Type Reference Example\nDESCRIPTION: Demonstrates the transition from deprecated interface naming convention (with 'I' prefix) to the new convention. For example, IProps becomes Props. This rule is auto-fixable and helps maintain forward compatibility with future Blueprint versions.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Old convention (deprecated)\ninterface IProps {}\n\n// New convention\ninterface Props {}\n```\n\n----------------------------------------\n\nTITLE: Interactive Divider Playground Example\nDESCRIPTION: References an interactive playground for experimenting with the Divider component. The actual code is not provided, but referenced as a React example.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/divider/divider.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@reactExample DividerPlaygroundExample\n```\n\n----------------------------------------\n\nTITLE: Defining CellMapper Type in TypeScript\nDESCRIPTION: Defines a CellMapper type as a function that takes row and column indices and returns a generic type T.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/src/docs/table-api.md#2025-04-18_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CellMapper<T> = (rowIndex: number, columnIndex: number) => T;\n```\n\n----------------------------------------\n\nTITLE: Including @blueprintjs/select Stylesheet in HTML\nDESCRIPTION: HTML link tag to include the @blueprintjs/select package stylesheet. This is an alternative method to apply the default styles when not using Sass.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/src/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"path/to/node_modules/@blueprintjs/select/lib/css/blueprint-select.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Running Blueprint Documentation Development Server\nDESCRIPTION: Instructions for setting up and starting the Blueprint documentation development server from the root of the repository. Includes package installation and server startup commands.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Applying no-prefix-literal Rule in SCSS\nDESCRIPTION: Diff demonstrating the use of the bp-ns variable instead of hardcoded Blueprint prefix in SCSS.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/stylelint-plugin/README.md#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n-.bp3-button > div {\n-    border: 1px solid black;\n-}\n+ @use \"@blueprintjs/core/lib/scss/variables.scss\" as bp;\n+\n+.#{bp.$ns}-button > div {\n+    border: 1px solid black;\n+}\n```\n\n----------------------------------------\n\nTITLE: Configuring Blueprint ESLint Plugin\nDESCRIPTION: Basic configuration to add Blueprint plugin to ESLint config.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"plugins\": [\"@blueprintjs\"]\n}\n```\n\n----------------------------------------\n\nTITLE: FileInput HTML Structure\nDESCRIPTION: Shows the HTML structure for creating a file input using CSS classes. This is part of the deprecated CSS API.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/file-input.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<label class=\"@ns-file-input\">\n    <input type=\"file\">\n    <span class=\"@ns-file-upload-input\"></span>\n</label>\n```\n\n----------------------------------------\n\nTITLE: CardList Compact Example React Component\nDESCRIPTION: References a React code example showing how to use the 'compact' prop to reduce padding inside each card in the CardList.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card-list/card-list.md#2025-04-18_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n@reactCodeExample CardListCompactExample\n```\n\n----------------------------------------\n\nTITLE: Blueprint Hook Navigation Links in Markdown\nDESCRIPTION: Markdown navigation structure defining links to hook documentation pages, including useHotkeys and useOverlayStack components.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/hooks/hooks.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@# Hooks\n\n<!-- Exact ordering of items in the navbar: -->\n\n@page use-hotkeys\n@page use-overlay-stack\n```\n\n----------------------------------------\n\nTITLE: CardList Interactive Playground Example\nDESCRIPTION: References an interactive React playground example for experimenting with the CardList component's various props and configurations.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card-list/card-list.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n@reactExample CardListPlaygroundExample\n```\n\n----------------------------------------\n\nTITLE: Classes Constants Rule Example\nDESCRIPTION: Example showing the auto-fix functionality of the classes-constants rule.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n- const element = <div className=\"pt-navbar\" />;\n+ const element = <div className={Classes.NAVBAR} />;\n```\n\n----------------------------------------\n\nTITLE: Describing Blueprint Webpack Build Scripts Package in Markdown\nDESCRIPTION: This snippet provides a brief description of the @blueprintjs/webpack-build-scripts package, explaining its purpose and why it's kept separate from the main Blueprint project.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/webpack-build-scripts/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# @blueprintjs/webpack-build-scripts\n\nThis is kept as a separate package to isolate the list of webpack-related NPM dependencies.\n```\n\n----------------------------------------\n\nTITLE: CSS Implementation for Tag Component (Deprecated)\nDESCRIPTION: CSS-based implementation of the Tag component, marked as deprecated in favor of the React component. Used with span.@ns-tag element with optional button.@ns-tag-remove for the close button.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/tag/tag.md#2025-04-18_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@css tag\n```\n\n----------------------------------------\n\nTITLE: Blueprint Components Navigation Structure\nDESCRIPTION: Markdown documentation structure defining the navigation hierarchy for Blueprint UI components documentation. Organizes components into main sections and subsections including basic components, form controls, form inputs, and overlays.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/components.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@# Components\n\n<!-- Exact ordering of items in the navbar: -->\n\n@page breadcrumbs\n@page buttons\n@page button-group\n@page callout\n@page card\n@page card-list\n@page control-card\n@page collapse\n@page divider\n@page editable-text\n@page entity-title\n@page html\n@page html-table\n@page hotkeys-target2\n@page icon\n@page menu\n@page navbar\n@page non-ideal-state\n@page overflow-list\n@page panel-stack\n@page panel-stack2\n@page progress-bar\n@page resize-sensor\n@page section\n@page skeleton\n@page spinner\n@page tabs\n@page tag\n@page compound-tag\n@page text\n@page tree\n\n@## Form controls\n\n@page form-group\n@page control-group\n@page label\n@page checkbox\n@page radio\n@page html-select\n@page segmented-control\n@page sliders\n@page switch\n\n@## Form inputs\n\n@page input-group\n@page text-area\n@page file-input\n@page numeric-input\n@page tag-input\n\n@## Overlays\n\n@page overlay\n@page overlay2\n@page portal\n@page alert\n@page context-menu\n@page context-menu-popover\n@page dialog\n@page drawer\n@page popover\n@page toast\n@page tooltip\n```\n\n----------------------------------------\n\nTITLE: CardList Bordered Example React Component\nDESCRIPTION: References a React code example demonstrating how to configure the CardList component with or without borders using the 'bordered' prop.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card-list/card-list.md#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n@reactCodeExample CardListBorderedExample\n```\n\n----------------------------------------\n\nTITLE: Constructing a Menu with CSS Classes in HTML\nDESCRIPTION: Demonstrates the HTML structure and CSS classes required to manually construct a menu without using React components. This approach is considered deprecated in favor of the React component API.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/menu/menu.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<ul class=\"@ns-menu\">\n  <li>\n    <button class=\"@ns-menu-item @ns-icon-new-text-box\">\n      <span>New text box</span>\n    </button>\n  </li>\n  <li>\n    <button class=\"@ns-menu-item @ns-icon-new-object\">\n      <span>New object</span>\n    </button>\n  </li>\n  <li>\n    <button class=\"@ns-menu-item @ns-icon-new-link\">\n      <span>New link</span>\n    </button>\n  </li>\n  <li class=\"@ns-menu-divider\"></li>\n  <li>\n    <button class=\"@ns-menu-item @ns-icon-cog @ns-intent-primary\">\n      <span>Settings...</span>\n    </button>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: CardList Basic Usage Example React Component\nDESCRIPTION: References a React code example that demonstrates basic usage of the CardList component for grouping multiple cards in a vertical list.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card-list/card-list.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n@reactCodeExample CardListBasicExample\n```\n\n----------------------------------------\n\nTITLE: Including Blueprint Icons CSS in HTML\nDESCRIPTION: HTML code to include the Blueprint Icons CSS file directly in an HTML document. This method is used for plain HTML implementations without a bundler.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/index.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"path/to/node_modules/@blueprintjs/icons/lib/css/blueprint-icons.css\" rel=\"stylesheet\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Page Order for Blueprint Documentation\nDESCRIPTION: This HTML comment and subsequent @page directives define the structure and order of root pages in the Blueprint project's left sidebar. Each @page directive corresponds to a main section or component of the Blueprint library.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/_nav.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--\nThis file enumerates the exact order of root pages in the left sidebar.\n-->\n\n@page blueprint\n@page core\n@page datetime\n@page datetime2\n@page icons\n@page select\n@page table\n@page resources\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Classes to TextArea in HTML\nDESCRIPTION: Shows how to apply the Classes.INPUT class to a textarea element, though this approach is noted as deprecated in favor of using the React component.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/forms/text-area.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<textarea class=\"@ns-input\"></textarea>\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Select Components via NPM\nDESCRIPTION: Command to install the Blueprint select components package as a dependency in a Node.js project.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/select/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @blueprintjs/select\n```\n\n----------------------------------------\n\nTITLE: Deprecated CSS API Implementation for Callout Component\nDESCRIPTION: An HTML example showing the deprecated CSS class-based approach to creating a Callout component with a warning intent and heading. Blueprint recommends using the React component instead of this CSS API.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/callout/callout.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"@ns-callout @ns-intent-warning @ns-icon-warning-sign @ns-callout-has-body-content\">\n    <h5 class=\"@ns-heading\">\n\nDeprecated API: use [`<Callout>`](#core/components/callout)\n\n</h5>\n\nCSS APIs for Blueprint components are considered deprecated, as they are verbose, error-prone, and they\noften fall out of sync as the design system is updated. You should use the React component APIs instead.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Card Component from Blueprint\nDESCRIPTION: Shows how to import the Card component from the Blueprint Core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/card/card.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Card } from \"@blueprintjs/core\";\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Table Component via NPM\nDESCRIPTION: Command to install the Blueprint table component package as a project dependency using npm package manager.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/table/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @blueprintjs/table\n```\n\n----------------------------------------\n\nTITLE: Displaying Blueprint GitHub Pages Link in Markdown\nDESCRIPTION: This snippet demonstrates how to create a hyperlink in Markdown format, linking to the Blueprint documentation site.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/site/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# [Blueprint Github Pages](http://blueprintjs.com/)\n```\n\n----------------------------------------\n\nTITLE: Enabling All Blueprint Rules\nDESCRIPTION: Configuration to enable all built-in Blueprint ESLint rules using the recommended preset.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"extends\": [\"plugin:@blueprintjs/recommended\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Blueprint Landing Page Server\nDESCRIPTION: Steps to set up and run the local server for the Blueprint landing page. This includes bootstrapping the project from the root directory and starting the server in the package directory.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/landing-app/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. From the root of the repo, run `npm run bootstrap`\n2. Then, in this package directory, run `npm start`\n3. Open your browser to http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint ESLint Plugin\nDESCRIPTION: Command to install the Blueprint ESLint plugin as a dev dependency using yarn.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-plugin/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev @blueprintjs/eslint-plugin\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint ESLint Configuration with Yarn\nDESCRIPTION: Command to install the @blueprintjs/eslint-config package using Yarn package manager.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/eslint-config/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @blueprintjs/eslint-config\n```\n\n----------------------------------------\n\nTITLE: React Icons Documentation Command\nDESCRIPTION: Custom documentation command to render the React icons documentation section.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/icons-list.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@reactDocs Icons\n```\n\n----------------------------------------\n\nTITLE: Rendering Blueprint Icons Documentation Section\nDESCRIPTION: HTML section containing Blueprint icon documentation notice wrapped in a callout component with primary intent styling.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/icons/src/icons-list.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"@ns-callout @ns-intent-primary @ns-icon-info-sign\">\n\nSee the [**`Icon` component documentation**](#core/components/icon) (in the `@blueprintjs/core` package) for React API details.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Icon Components Rule Configuration\nDESCRIPTION: Configuration options for the blueprint-icon-components rule that enforces consistent icon usage patterns.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/tslint-config/README.md#2025-04-18_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"rules\": {\n    // default uses \"component\"\n    \"blueprint-icon-components\": true,\n    // expanded syntax\n    \"blueprint-icon-components\": {\n      \"options\": [\"component\" | \"literal\"] // choose one\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RadioCardGroup with React Hooks in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a RadioCardGroup using React hooks. It manages the selection state of RadioCard components and handles changes in selection.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/control-card/control-card.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { RadioGroup, RadioCard } from \"@blueprintjs/core\";\nimport React from \"react\";\n\nfunction RadioCardGroupExample() {\n    const [selectedValue, setSelectedValue] = React.useState<string | undefined>();\n    const handleChange = React.useCallback((event: React.FormEvent<HTMLInputElement>) => {\n        setSelectedValue(event.currentTarget.value);\n    }, []);\n\n    return (\n        <RadioGroup selectedValue={selectedValue} onChange={handleChange} label=\"Lunch Special\">\n            <RadioCard label=\"Soup\" value=\"soup\" />\n            <RadioCard label=\"Salad\" value=\"salad\" />\n            <RadioCard label=\"Sandwich\" value=\"sandwich\" />\n        </RadioGroup>\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Focus Style Manager in Blueprint Components\nDESCRIPTION: Shows how to selectively ignore the focus style manager for specific components by applying the FOCUS_STYLE_MANAGER_IGNORE class to a container element.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/docs/accessibility.md#2025-04-18_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Classes } from \"@blueprintjs/core\";\n\nconst MyComponent = () => ({\n    <div classname={Classes.FOCUS_STYLE_MANAGER_IGNORE}>\n        // Any components here will always show the focus outline when clicked.\n    </div>\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Blueprint Core Package with Yarn\nDESCRIPTION: This command installs the primary Blueprint library package along with React dependencies using Yarn. This is the first step to using Blueprint in your project.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/docs-app/src/blueprint.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @blueprintjs/core react react-dom\n```\n\n----------------------------------------\n\nTITLE: Importing ButtonGroup Component - TypeScript\nDESCRIPTION: Shows how to import the ButtonGroup component from the Blueprint core package.\nSOURCE: https://github.com/palantir/blueprint/blob/develop/packages/core/src/components/button/button-group.md#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ButtonGroup } from \"@blueprintjs/core\";\n```"
  }
]