[
  {
    "owner": "fleschutz",
    "repo": "powershell",
    "content": "TITLE: Checking Pending System Reboots in PowerShell\nDESCRIPTION: This PowerShell script checks if a system reboot is pending. It defines a helper function `Test-RegistryValue` to check for the existence of specific registry keys and values. For Linux systems (identified by `$IsLinux`), it checks if the file `/var/run/reboot-required` exists. For Windows systems, it checks multiple registry paths and values associated with Windows Update, Component Based Servicing, Session Manager, RunOnce, and Netlogon services. If any indicators are found, it reports a pending reboot with reasons; otherwise, it reports no pending reboot. The script uses `try...catch` for error handling and exits with 0 for success and 1 for failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-pending-reboot.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCheck for pending reboots\n.DESCRIPTION\n\tThis PowerShell script queries pending operating system reboots and prints it.\n.EXAMPLE\n\t./check-pending-reboot.ps1\n\t✅ No pending reboot\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction Test-RegistryValue { param([parameter(Mandatory=$true)][ValidateNotNullOrEmpty()]$Path, [parameter(Mandatory=$true)] [ValidateNotNullOrEmpty()]$Value)\n\ttry {\n\t\tGet-ItemProperty -Path $Path -Name $Value -EA Stop\n\t\treturn $true\n\t} catch {\n\t\treturn $false\n\t}\n}\n\ntry {\n\t$reply = \"✅ No pending reboot\"\n\tif ($IsLinux) {\n\t\tif (Test-Path \"/var/run/reboot-required\") {\n\t\t\t$reply = \"⚠️ Pending reboot (found: /var/run/reboot-required)\"\n\t\t}\n\t} else {\n\t\t$reason = \"\"\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired\") {\n\t\t\t$reason += \", ...\\Auto Update\\RebootRequired\"\n\t\t}\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\PostRebootReporting\") {\n\t\t\t$reason += \", ...\\Auto Update\\PostRebootReporting\"\n\t\t}\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending\") {\n\t\t\t$reason += \", ...\\Component Based Servicing\\RebootPending\"\n\t\t}\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\ServerManager\\CurrentRebootAttempts\") {\n\t\t\t$reason += \", ...\\ServerManager\\CurrentRebootAttempts\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\" -Value \"RebootInProgress\") {\n\t\t\t$reason += \", ...\\CurrentVersion\\Component Based Servicing with 'RebootInProgress'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\" -Value \"PackagesPending\") {\n\t\t\t$reason += \", '...\\CurrentVersion\\Component Based Servicing' with 'PackagesPending'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Value \"PendingFileRenameOperations2\") {\n\t\t\t$reason += \", '...\\CurrentControlSet\\Control\\Session Manager' with 'PendingFileRenameOperations2'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" -Value \"DVDRebootSignal\") {\n\t\t\t$reason += \", '...\\Windows\\CurrentVersion\\RunOnce' with 'DVDRebootSignal'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Netlogon\" -Value \"JoinDomain\") {\n\t\t\t$reason += \", '...\\CurrentControlSet\\Services\\Netlogon' with 'JoinDomain'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Netlogon\" -Value \"AvoidSpnSet\") {\n\t\t\t$reason += \", '...\\CurrentControlSet\\Services\\Netlogon' with 'AvoidSpnSet'\"\n\t\t}\n\t\tif ($reason -ne \"\") {\n\t\t\t$reply = \"⚠️ Pending reboot (registry got $($reason.substring(2)))\"\n\t\t}\n\t}\n\tWrite-Host $reply\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Calgary City Map Script - PowerShell\nDESCRIPTION: This example demonstrates how to execute the 'show-calgary-city.ps1' script from the PowerShell prompt. Upon execution, the script opens the default web browser pointed to Google Maps at Calgary, Canada. No additional parameters are required for standard usage, making the command suitable for quick launching by end users.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-calgary-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-calgary-city\n\n```\n\n----------------------------------------\n\nTITLE: Listing Sent Mail Items in Outlook using PowerShell\nDESCRIPTION: This PowerShell script connects to Microsoft Outlook via COM automation to retrieve and display all emails in the Sent Mail folder. It supports PowerShell's common parameters (such as Verbose, Debug, ErrorAction, and others) to enhance execution flexibility. The main operation instantiates the Outlook application object, accesses the MAPI namespace, selects the Sent Mail folder (folder type 5), and displays the SentOn and Subject fields of each mail in a formatted table. The script handles exceptions by outputting diagnostic information with the line number and error message, and sets the process exit code to 1 on failure. Outlook must be installed and configured on the host, and the script should be run with permissions sufficient to launch COM objects. Inputs are provided interactively or via supported parameters; the output is a table printed to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-outlook-sent.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists Outlook's Sent Mails\n.DESCRIPTION\n\tThis PowerShell script lists the mails in the Sent Mail folder of Outlook.\n.EXAMPLE\n\tPS> ./list-outlook-sent.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Outlook = New-Object -com Outlook.application\n\t$MAPI = $Outlook.GetNameSpace(\"MAPI\")\n\t$Inbox = $MAPI.GetDefaultFolder(5) # 5 = olFolderSentMail\n\t$Inbox.items | Select SentOn,Subject | Format-Table -AutoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing System Information Using PowerShell\nDESCRIPTION: This PowerShell script collects comprehensive system information from the local computer using WMI queries and built-in system commands. It retrieves data about RAM, operating system details, computer system properties, CPU usage, disk space, active services, driver list, and IP configuration. The script then aggregates these properties into a PowerShell object, converts it to a JSON-formatted string, and outputs the result. Supports common PowerShell parameters for enhanced control. Outputs a JSON object including metrics like total and free RAM, OS version, CPU load, disk free space, and network configurations. Requires PowerShell with access to WMI classes and standard Windows command-line tools.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-system-info.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists system information of the local computer\n.DESCRIPTION\n\tThis PowerShell script lists system information of the local computer.\n.EXAMPLE\n\tPS> ./list-system-info.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n# RAM\n$RAM = Get-WmiObject -Query \"SELECT TotalVisibleMemorySize, FreePhysicalMemory FROM Win32_OperatingSystem\"\n\n$totalRAM = [math]::Round($RAM.TotalVisibleMemorySize/1MB, 2)\n$freeRAM = [math]::Round($RAM.FreePhysicalMemory/1MB, 2)\n$usedRAM = [math]::Round(($RAM.TotalVisibleMemorySize - $RAM.FreePhysicalMemory)/1MB, 2)\n\n# Operating System\n$OS = Get-WmiObject -class Win32_OperatingSystem\n\n$OS_Name = $OS.Caption\n$OS_InstallDate = $OS.ConvertToDateTime($OS.InstallDate)\n$OS_LastBootUpTime = $OS.ConvertToDateTime($OS.LastBootUpTime)\n$OS_Architecture = $OS.OSArchitecture\n$OS_SystemDrive = $OS.SystemDrive\n$OS_WindowsDirectory = $OS.WindowsDirectory\n$OS_BuildNumber = $OS.BuildNumber\n$OS_SerialNumber = $OS.SerialNumber\n$OS_Version = $OS.Version\n$OS_Manufacturer = $OS.Manufacturer\n\n# Computer System\n$CS = Get-WmiObject -class Win32_ComputerSystem\n\n$CS_Name = $CS.Name\n$CS_Owner = $CS.PrimaryOwnerName\n\n# CPU\n$CPU = Get-WmiObject -class Win32_Processor\n\n$CPU_Name = $CPU.Name\n$CPU_Manufacturer = $CPU.Manufacturer\n$CPU_MaxClockSpeed = $CPU.MaxClockSpeed / 1000\n$CPU_Used = (Get-WmiObject win32_processor).LoadPercentage\n$CPU_Free = 100 - $CPU_Used\n\n# Disk\n$Disk = Get-WmiObject -class Win32_LogicalDisk -Filter \"DeviceID='C:'\"\n$Disk_ID = $Disk.DeviceID\n$Disk_TotalSpace = [math]::Round($Disk.Size/1GB, 2)\n$Disk_FreeSpace = [math]::Round($Disk.FreeSpace/1GB, 2)\n$Disk_UsedSpace = [math]::Round(($Disk.Size - $Disk.FreeSpace)/1GB, 2)\n\n# System Info\n$systeminfo = systeminfo\n\n# IP Config\n$ipconfig = ipconfig\n\n# Driver Query\n$driverquery = driverquery\n\n# Running Services\n$netstart = net start\n\n# Create info object\n$infoprop = @{\n    'RAM_total'= $totalRAM;\n    'RAM_free'= $freeRAM;\n    'RAM_used'= $usedRAM;\n    'OS_Name'= $OS_Name;\n    'OS_InstallDate'= $OS_InstallDate;\n    'OS_LastBootUpTime'= $OS_LastBootUpTime;\n    'OS_Architecture'= $OS_Architecture;\n    'OS_SystemDrive'= $OS_SystemDrive;\n    'OS_WindowsDirectory'= $OS_WindowsDirectory;\n    'OS_BuildNumber'= $OS_BuildNumber;\n    'OS_SerialNumber'= $OS_SerialNumber;\n    'OS_Version'= $OS_Version;\n    'OS_Manufacturer'= $OS_Manufacturer;\n    'CS_Name'= $CS_Name;\n    'CS_Owner'= $CS_Owner;\n    'CPU_Name'= $CPU_Name;\n    'CPU_Manufacturer'= $CPU_Manufacturer;\n    'CPU_MaxClockSpeed'= $CPU_MaxClockSpeed;\n    'CPU_Used'= $CPU_Used;\n    'CPU_Free'= $CPU_Free;\n    'Disk_ID'= $Disk_ID;\n    'Disk_TotalSpace'= $Disk_TotalSpace;\n    'Disk_FreeSpace'= $Disk_FreeSpace;\n    'Disk_UsedSpace'= $Disk_UsedSpace;\n    'systeminfo'= $systeminfo;\n    'ipconfig'= $ipconfig;\n    'driverquery'= $driverquery;\n    'netstart'= $netstart;\n}\n\n$info = New-Object -TypeName PSObject -Prop $infoprop\n\n# Convert info to JSON\n$info = $info | ConvertTo-JSON\n\n# Output \n$info\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Parameters for PowerShell Script\nDESCRIPTION: Documents the standard PowerShell common parameters supported by the `show-mexico-city.ps1` script. These parameters allow users to control aspects like verbosity, debugging, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-mexico-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-mexico-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing File Encryption Script PowerShell\nDESCRIPTION: This is the main script content. It defines the top-level parameters (`Path`, `Password`), includes a detailed help block, defines an `EncryptFile` function which performs the core encryption using .NET's `System.Security.Cryptography` classes (handling different algorithms, cipher modes, padding, and secure key handling), manages file streams, and optionally removes the source file. The main script block handles user input prompts if parameters are not provided, prepares the password, calls the `EncryptFile` function, times the operation, and outputs success or error messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/encrypt-file.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tEncrypts a file\n.DESCRIPTION\n\tThis PowerShell script encrypts a file using the given password and AES encryption.\n.PARAMETER Path\n\tSpecifies the path to the file to encrypt\n.PARAMETER Password\n\tSpecifies the password to use\n.EXAMPLE\n\tPS> ./encrypt-file.ps1 C:\\MyFile.txt \"123\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Path = \"\", [string]$Password = \"\")\n\nfunction EncryptFile {\n[CmdletBinding(DefaultParameterSetName='SecureString')]\n[OutputType([System.IO.FileInfo[]])]\nParam(\n    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('PSPath','LiteralPath')]\n    [string[]]$FileName,\n    [Parameter(Mandatory=$false, Position=2)]\n    [ValidateSet('AES','DES','RC2','Rijndael','TripleDES')]\n    [String]$Algorithm = 'AES',\n    [Parameter(Mandatory=$false, Position=3, ParameterSetName='SecureString')]\n    [System.Security.SecureString]$Key = (New-CryptographyKey -Algorithm $Algorithm),\n    [Parameter(Mandatory=$true, Position=3, ParameterSetName='PlainText')]\n    [String]$KeyAsPlainText,\n    [Parameter(Mandatory=$false, Position=4)]\n    [System.Security.Cryptography.CipherMode]$CipherMode,\n    [Parameter(Mandatory=$false, Position=5)]\n    [System.Security.Cryptography.PaddingMode]$PaddingMode,\n    [Parameter(Mandatory=$false, Position=6)]\n    [String]$Suffix = \".$Algorithm\",\n    [Parameter()]\n    [Switch]$RemoveSource\n)\n    begin {\n        try {\n            if ($PSCmdlet.ParameterSetName -eq 'PlainText') {\n                $Key = $KeyAsPlainText | ConvertTo-SecureString -AsPlainText -Force\n            }\n\n            $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Key)\n            $EncryptionKey = [System.Convert]::FromBase64String([System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR))\n\n            $Crypto = [System.Security.Cryptography.SymmetricAlgorithm]::Create($Algorithm)\n            if ($PSBoundParameters.ContainsKey('CipherMode')) {\n                $Crypto.Mode = $CipherMode\n            }\n            if ($PSBoundParameters.ContainsKey('PaddingMode')) {\n                $Crypto.Padding = $PaddingMode\n            }\n            $Crypto.KeySize = $EncryptionKey.Length*8\n            $Crypto.Key = $EncryptionKey\n        } catch {\n            Write-Error $_ -ErrorAction Stop\n        }\n    }\n    process {\n        $Files = Get-Item -LiteralPath $FileName\n    \n        foreach($File in $Files) {\n            $DestinationFile = $File.FullName + $Suffix\n\n            try {\n                $FileStreamReader = New-Object System.IO.FileStream($File.FullName, [System.IO.FileMode]::Open)\n                $FileStreamWriter = New-Object System.IO.FileStream($DestinationFile, [System.IO.FileMode]::Create)\n\n                $Crypto.GenerateIV()\n                $FileStreamWriter.Write([System.BitConverter]::GetBytes($Crypto.IV.Length), 0, 4)\n                $FileStreamWriter.Write($Crypto.IV, 0, $Crypto.IV.Length)\n\n                $Transform = $Crypto.CreateEncryptor()\n                $CryptoStream = New-Object System.Security.Cryptography.CryptoStream($FileStreamWriter, $Transform, [System.Security.Cryptography.CryptoStreamMode]::Write)\n                $FileStreamReader.CopyTo($CryptoStream)\n    \n                $CryptoStream.FlushFinalBlock()\n                $CryptoStream.Close()\n                $FileStreamReader.Close()\n                $FileStreamWriter.Close()\n\n                if ($RemoveSource) {\n\t\t\tRemove-Item -LiteralPath $File.FullName\n\t\t}\n\n                $result = Get-Item $DestinationFile\n                $result | Add-Member –MemberType NoteProperty –Name SourceFile –Value $File.FullName\n                $result | Add-Member –MemberType NoteProperty –Name Algorithm –Value $Algorithm\n                $result | Add-Member –MemberType NoteProperty –Name Key –Value $Key\n                $result | Add-Member –MemberType NoteProperty –Name CipherMode –Value $Crypto.Mode\n                $result | Add-Member –MemberType NoteProperty –Name PaddingMode –Value $Crypto.Padding\n                $result\n            } catch {\n                Write-Error $_\n                if ($FileStreamWriter) {\n                    $FileStreamWriter.Close()\n                    Remove-Item -LiteralPath $DestinationFile -Force\n                }\n                continue\n            } finally {\n                if($CryptoStream){$CryptoStream.Close()}\n                if($FileStreamReader){$FileStreamReader.Close()}\n                if($FileStreamWriter){$FileStreamWriter.Close()}\n            }\n        }\n    }\n}\n\n\ntry {\n\tif ($Path -eq \"\" ) { $Path = read-host \"Enter path to file\" }\n\tif ($Password -eq \"\" ) { $Password = read-host \"Enter password\"\t}\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t[char[]]$PasswordAsArray = $Password\n\t$PasswordAsBase64 = [System.Convert]::ToBase64String($PasswordAsArray)\n\tEncryptFile \"$Path\" -Algorithm AES -KeyAsPlainText $PasswordAsBase64 -RemoveSource\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅  file encrypted in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Text Pattern Replacement in Files\nDESCRIPTION: Complete implementation of a PowerShell script that searches and replaces text patterns in multiple files. The script takes a search pattern, replacement text, and file pattern as parameters, with interactive prompts if any are not provided. It includes a helper function for text replacement within files.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/replace-in-files.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSearch and replace a pattern in the given files by the replacement\n.DESCRIPTION\n\tThis PowerShell script searches and replaces a pattern in the given files by the replacement.\n.PARAMETER pattern\n\tSpecifies the text pattern to search for (ask user by default)\n.PARAMETER replacement\n\tSpecifies the text replacement (ask user by default)\n.PARAMETER filePattern\n\tSpecifies the file search pattern (ask user by default)\n.EXAMPLE\n\tPS> ./replace-in-files NSA \"No Such Agency\" C:\\Temp\\*.txt\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pattern = \"\", [string]$replacement = \"\", [string]$filePattern = \"\")\n\nfunction ReplaceInFile([string]$path, [string]$pattern, [string]$replacement) {\n    [System.IO.File]::WriteAllText($path,\n        ([System.IO.File]::ReadAllText($path) -replace $pattern, $replacement)\n    )\n}\n\ntry {\n\tif ($pattern -eq \"\" ) {         $pattern = Read-Host \"Enter the text to search for, e.g. 'Joe' \" }\n\tif ($replacement -eq \"\" ) { $replacement = Read-Host \"Enter the text to replace with, e.g. 'J' \" }\n\tif ($filePattern -eq \"\" ) { $filePattern = Read-Host \"Enter the file search pattern, e.g. '*.c'\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\t$files = (Get-ChildItem -path \"$filePattern\" -attributes !Directory)\n\tforeach($file in $files) {\n\t\tReplaceInFile $file $pattern $replacement\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Replaced '$pattern' by '$replacement' in $($files.Count) files in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Documenting Script Parameters in PowerShell\nDESCRIPTION: This snippet illustrates how the script accepts common PowerShell parameters (such as Verbose, Debug, ErrorAction, ErrorVariable, etc.), using standard PowerShell command-line conventions. While it does not declare new custom parameters, it documents the available built-in parameters to control error handling, output buffering, and debug behavior. No explicit input or output is shown, but these parameters can be used during invocation to alter runtime script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-outlook-inbox.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-outlook-inbox.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Displaying Host System Metrics in PowerShell\nDESCRIPTION: This main script block fetches and displays system information such as date, time, time zone, CPU temperature (if supported), CPU core count, CPU load, process count, swap usage, disk usage, and uptime in days. It uses helper functions to gather metrics, formats them using WriteValueInRange, and refreshes every 5 seconds in an infinite loop. Windows and Linux dependencies are supported, relying on WMI and CLI tools. Inputs: none; outputs a color-formatted, updated system status dashboard in the PowerShell console. Catches and reports errors with line number, then exits.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-host.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tdo {\n\t\t[int]$DayOfYear = (Get-Date).DayofYear\n\t\t[int]$Time = Get-Date -format \"HHmm\"\n\t\t[int]$TimeZone = Get-Date -format \"zz\"\n\t\t$CPUtemp = GetCPUTemperature\n\t\t$numCores = $env:NUMBER_OF_PROCESSORS\n\t\t$numProcesses = (Get-Process).Count\n\t\t$load = \"{0}\" -f $(Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average)\n\t\t$DriveDetails = Get-PSDrive C\n\t\t$DiskUse = [math]::round($DriveDetails.Used / 1GB)\n\t\t$DiskSize = [math]::round(($DriveDetails.Used + $DriveDetails.Free) / 1GB)\n\t\t$numDaysUp = GetUptime\n\n\t\tif ($IsLinux) {\n                \t$result = $(free --mega | grep Swap:)\n                \t[int64]$total = $result.subString(5,14)\n                \t[int64]$used = $result.substring(20,13)\n        \t} else {\n                \t$items = Get-WmiObject -class \"Win32_PageFileUsage\" -namespace \"root\\CIMV2\" -computername localhost\n                \t[int64]$total = [int64]$used = 0\n                \tforeach ($item in $items) {\n                 \t\t$total += $item.AllocatedBaseSize\n                        \t$used += $item.CurrentUsage\n\n                \t}\n\t\t}\n\n\t\tClear-Host\n\t\tWrite-Host \"Host $env:COMPUTERNAME\"\n\t\tWrite-Host \"==================\"\n\t\tWrite-Host \"`n* DATE \" -noNewline\n\t\tWriteValueInRange $DayOfYear \"\" 0 0 366 366\n\t\tWrite-Host \"`n* TIME \" -noNewline\n\t\tWriteValueInRange $Time \"\" 0 0 2400 2400\n\t\tWrite-Host \"`n* ZONE \" -noNewline\n\t\tWriteValueInRange $TimeZone \"\" -23 -23 23 23\n\t\tif ($CPUtemp -ne -300) {\n\t\t\tWrite-Host \"`n* CPU  \" -noNewline\n\t\t\tWriteValueInRange $CPUtemp \"°C\" 0 10 80 100\n\t\t}\n\t\tWrite-Host \"`n* CPU  \" -noNewline\n\t\tWriteValueInRange $numCores \" cores\" 0 0 100 100\n\t\tWrite-Host \"`n* LOAD \" -noNewline\n\t\tWriteValueInRange $load \"%\" 0 0 90 100\n\t\tWrite-Host \"`n* PROC \" -noNewline\n\t\tWriteValueInRange $numProcesses \"\" 0 10 900 1000\n\t\tWrite-Host \"`n* SWAP \" -noNewline\n\t\tWriteValueInRange $used \"GB\" 0 0 ($total - 1) $total\n\t\tWrite-Host \"`n* DISK \" -noNewline\n\t\tWriteValueInRange $DiskUse \"GB\" 0 0 ($DiskSize - 5) $DiskSize\n\t\tWrite-Host \"`n* UP   \" -noNewline\n\t\tWriteValueInRange $numDaysUp \" days\" 0 0 1000 1000\n\n\n\t\tStart-Sleep -milliseconds 5000\n\t} while ($true)\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'show-toyota-manual.ps1' PowerShell Script\nDESCRIPTION: Provides an example command to run the script, illustrating how to launch the Toyota manuals in a web browser using simple execution syntax.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-toyota-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-toyota-manual\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage - PowerShell\nDESCRIPTION: This snippet provides a simple example command demonstrating how to execute the `close-windows-terminal.ps1` script from a PowerShell prompt. It shows the minimal command required to invoke the script and initiate the process of closing Windows Terminal.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-windows-terminal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-windows-terminal.ps1\n```\n\n----------------------------------------\n\nTITLE: GPU Status Checking PowerShell Implementation\nDESCRIPTION: Full implementation of the check-gpu.ps1 script that queries GPU information and displays it in a formatted output. The script includes a helper function to format bytes into human-readable format and handles both Windows and Linux systems.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-gpu.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Checks the GPU status\n.DESCRIPTION\n        This PowerShell script queries the GPU status and prints it.\n.EXAMPLE\n        PS> ./check-gpu.ps1\n\t✅ NVIDIA Quadro P400 GPU (2GB RAM, 3840x2160 pixels, 32-bit, 59Hz, driver 31.0.15.1740) - status OK\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction Bytes2String { param([int64]$Bytes)\n        if ($Bytes -lt 1000) { return \"$Bytes bytes\" }\n        $Bytes /= 1000\n        if ($Bytes -lt 1000) { return \"$($Bytes)KB\" }\n        $Bytes /= 1000\n        if ($Bytes -lt 1000) { return \"$($Bytes)MB\" }\n        $Bytes /= 1000\n        if ($Bytes -lt 1000) { return \"$($Bytes)GB\" }\n        $Bytes /= 1000\n        return \"$($Bytes)TB\"\n}\n\ntry {\n\tif ($IsLinux) {\n\t\t# TODO\n\t} else {\n\t\t$Details = Get-WmiObject Win32_VideoController\n\t\t$Model = $Details.Caption\n\t\t$RAMSize = $Details.AdapterRAM\n\t\t$ResWidth = $Details.CurrentHorizontalResolution\n\t\t$ResHeight = $Details.CurrentVerticalResolution\n\t\t$BitsPerPixel = $Details.CurrentBitsPerPixel\n\t\t$RefreshRate = $Details.CurrentRefreshRate\n\t\t$DriverVersion = $Details.DriverVersion\n\t\t$Status = $Details.Status\n\t\tWrite-Host \"✅ $Model GPU ($(Bytes2String $RAMSize) RAM, $($ResWidth)x$($ResHeight) pixels, $($BitsPerPixel)-bit, $($RefreshRate)Hz, driver $DriverVersion) - status $Status\"\n\t}\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Save Credentials to File - PowerShell\nDESCRIPTION: This PowerShell script prompts the user for a username and password, encrypts the password, and saves the credentials to a specified target file. It utilizes the `Get-Credential` cmdlet to obtain credentials securely. The script takes an optional parameter `-targetFile` to specify the file path; if not provided, it defaults to \"~\\my.credentials\". Error handling is implemented using a `try-catch` block to manage potential issues during the credential retrieval and file-saving process.  Successful execution results in a success message; errors result in an error message including the line number and error details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/save-credentials.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSaves credentials encrypted\n.DESCRIPTION\n\tThis PowerShell script asks for credentials and saves them encrypted into a target file.\n.PARAMETER targetFile\n\tSpecifies the target file (\"~\\my.credentials\" by default)\n.EXAMPLE\n\tPS> ./save-credentials.ps1\n\tEnter username and password, please.\n \t✅ Your credentials have been saved to C:\\Users\\Markus\\my.credentials (encrypted).\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$targetFile = \"~\\my.credentials\")\n\ntry {\n\tWrite-Host \"Enter username and password, please.\" -foreground red\n\t$cred = Get-Credential\n\t$cred.Password | ConvertFrom-SecureString | Set-Content \"$targetFile\"\n\t\"✅ Your credentials have been saved to $targetFile (encrypted).\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Text with Typewriter Effect in PowerShell\nDESCRIPTION: This PowerShell script writes text to the console one character at a time, creating a typewriter-like effect. It accepts two optional parameters: 'text' which specifies the string to output (defaulting to a sample message), and 'speed' which controls the typing delay in milliseconds (defaulting to 200 ms). The script uses a random delay up to the specified speed for each character to simulate typing variability. It supports common PowerShell parameters and includes try-catch error handling to display informative error messages upon failures.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-typewriter.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text like a typewriter\n.DESCRIPTION\n\tThis PowerShell script writes the given text with the typewriter effect.\n.PARAMETER text\n\tSpecifies the text to write (sample text by default)\n.PARAMETER speed\n\tSpecifies the speed (200 ms by default)\n.EXAMPLE\n\tPS> ./write-typewriter.ps1 \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"Hello World, this is the PowerShell typewriter.\", [int]$speed = 200) # in milliseconds\n\ntry {\n\t$Random = New-Object System.Random\n\t$text -split '' | ForEach-Object {\n\t\tWrite-Host $_ -noNewline\n\t\tStart-Sleep -milliseconds $Random.Next($speed)\n\t}\n\tWrite-Host \"\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete List-repos.ps1 Script Implementation\nDESCRIPTION: Full implementation of the PowerShell script that scans a directory for Git repositories and displays detailed information about each repository including name, tag, branch, URL, and status.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-repos.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists Git repositories\n.DESCRIPTION\n\tThis PowerShell script lists all Git repositories under a folder with details such as latest tag, branch, remote URL, and status.\n.PARAMETER parentDir\n\tSpecifies the path to the parent directory (current working directory by default)\n.EXAMPLE\n\tPS> ./list-repos.ps1 C:\\MyRepos\n\t\n\tREPOSITORY   LATEST TAG   BRANCH    REMOTE URL                        STATUS\n\t----------   ----------   ------    ----------                        ------\n\t📂cmake      v3.30.2      master    https://github.com/Kitware/CMake  ✅clean ↓0\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$parentDir = \"$PWD\")\n\nfunction ListRepos { \n\t$dirs = (Get-ChildItem \"$parentDir\" -attributes Directory)\n\tforeach($dir in $dirs) {\n\t\t$dirName = (Get-Item \"$dir\").Name\n\t\t$latestTagCommitID = (git -C \"$dir\" rev-list --tags --max-count=1)\n\t\tif (\"$latestTagCommitID\" -ne \"\") {\n\t        \t$latestTag = (git -C \"$dir\" describe --tags $latestTagCommitID)\n\t\t} else {\n\t\t\t$latestTag = \"\"\n\t\t}\n\t\t$branch = (git -C \"$dir\" branch --show-current)\n\t\t$remoteURL = (git -C \"$dir\" remote get-url origin)\n\t\t$numCommits = (git -C \"$dir\" rev-list HEAD...origin/$branch --count)\n\t\t$status = (git -C \"$dir\" status --short)\n\t\tif (\"$status\" -eq \"\") { $status = \"✅clean\" }\n\t\telseif (\"$status\" -like \" M *\") { $status = \"⚠️changed\" }\n\t\tNew-Object PSObject -property @{'REPOSITORY'=\"📂$dirName\";'LATEST TAG'=\"$latestTag\";'BRANCH'=\"$branch\";'REMOTE URL'=\"$remoteURL\";'STATUS'=\"$status ↓$numCommits\"}\n\t}\n}\n\ntry {\n\tif (-not(Test-Path \"$parentDir\" -pathType container)) { throw \"Can't access parent directory at: $parentDir\" }\n\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tListRepos | Format-Table -property @{e='REPOSITORY';width=19},@{e='LATEST TAG';width=16},@{e='BRANCH';width=19},@{e='REMOTE URL';width=47},@{e='STATUS';width=12}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Tree Listing with Icons and Size Reporting in PowerShell\nDESCRIPTION: This comprehensive snippet contains the full PowerShell script for recursively listing a directory tree. It includes parameter handling, helper functions for mapping file extensions to icons and formatting byte counts, and recursive traversal to display directory structure with visual indentation. Key parameters include the initial 'path', which determines the root directory. The script outputs icons for folders and file types, and human-readable file sizes. Upon completion, it prints a total count of folders, files, and reported size. It gracefully manages errors and does not require third-party modules.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dir-tree.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists a dir tree\n.DESCRIPTION\n\tThis PowerShell script lists all files and folders in a neat directory tree (including icon and size).\n.PARAMETER path\n\tSpecifies the path to the directory tree\n.EXAMPLE\n\tPS> ./list-dir-tree.ps1 C:\\MyFolder\n\t├📂Results\n\t│ ├📄sales.txt (442K)\n\t(2 folders, 1 file, 442K file size in total)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\nfunction GetFileIcon([string]$suffix) {\n\tswitch ($suffix) {\n\t\".csv\"\t{return \"📊\"}\n\t\".epub\"\t{return \"📓\"}\n\t\".exe\"  {return \"⚙️\"}\n\t\".gif\"\t{return \"📸\"}\n\t\".iso\"\t{return \"📀\"}\n\t\".jpg\"\t{return \"📸\"}\n\t\".mp3\"\t{return \"🎵\"}\n\t\".mkv\"\t{return \"🎬\"}\n\t\".png\"\t{return \"📸\"}\n\t\".rar\"  {return \"🎁\"}\n\t\".tar\"  {return \"🎁\"}\n\t\".zip\"  {return \"🎁\"}\n\tdefault {return \"📄\"}\n\t}\n}\n\nfunction Bytes2String([int64]$bytes) {\n\tif ($bytes -lt 1000) { return \"$bytes bytes\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)K\" }\n\t$bytes /= 1000\n        if ($bytes -lt 1000) { return \"$($bytes)MB\" }\n        $bytes /= 1000\n        if ($bytes -lt 1000) { return \"$($bytes)GB\" }\n        $bytes /= 1000\n\treturn \"$($Bytes)TB\"\n}\n\nfunction ListDir([string]$path, [int]$depth) {\n\t$depth++\n\t$items = Get-ChildItem -path $path\n\tforeach($item in $items) {\n\t\t$filename = $item.Name\n\t\tfor ($i = 1; $i -lt $depth; $i++) { Write-Host \"│ \" -noNewline }\n\t\tif ($item.Mode -like \"d*\") {\n\t\t\tWrite-Output \"├📂$Filename\"\n\t\t\tListDir \"$path\\$filename\" $depth\n\t\t} else {\n\t\t\t$icon = GetFileIcon $item.Extension\n\t\t\tWrite-Output \"├$($icon)$filename ($(Bytes2String $item.Length))\"\n\t\t\t$global:files++\n\t\t\t$global:bytes += $item.Length\n\t\t}\n\t}\n\t$global:folders++\n}\n\ntry {\n\t[int64]$global:folders = 0\n\t[int64]$global:files = 0\n\t[int64]$global:bytes = 0\n\tListDir $path 0\n\tWrite-Output \" ($($global:folders) folders, $($global:files) files, $(Bytes2String $global:bytes) total)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Sending Logic - PowerShell\nDESCRIPTION: This snippet contains the complete source code for the send-email.ps1 script. It defines parameters, prompts the user for missing values, constructs a Net.Mail.MailMessage and Net.Mail.SmtpClient object, sends the email, and provides success or error messages. It uses a try-catch block for basic exception handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-email.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSends an email message\n.DESCRIPTION\n\tThis PowerShell script sends an email message.\n.PARAMETER From\n\tSpecifies the sender email address\n.PARAMETER To\n\tSpecifies the recipient email address\n.PARAMETER Subject\n\tSpecifies the subject line\n.PARAMETER Body\n\tSpecifies the body message\n.EXAMPLE\n\tPS> ./send-email\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$From = \"\", [string]$To = \"\", [string]$Subject = \"\", [string]$Body = \"\", [string]$SMTPServer = \"\")\n\ntry {\n\tif ($From -eq \"\") {    $From = Read-Host \"Enter sender email address\" }\n\tif ($To -eq \"\") {      $To = Read-Host \"Enter recipient email address\" }\n\tif ($Subject -eq \"\") { $Subject = Read-Host \"Enter subject line\" }\n\tif ($Body -eq \"\") {    $Body = Read-Host \"Enter body message\" }\n\tif ($SMTPServer -eq \"\") { $SMTPServer = Read-Host \"Enter SMTP server\" }\n\n\t$msg = New-Object Net.Mail.MailMessage\n\t$smtp = New-Object Net.Mail.SmtpClient($smtpServer)\n\t$msg.From = $From\n\t$msg.ReplyTo = $From\n\t$msg.To.Add($To)\n\t$msg.subject = $Subject\n\t$msg.body = $Body\n\t$smtp.Send($msg)\n\t\"✅  Message sent.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of count-lines.ps1 PowerShell Script\nDESCRIPTION: The complete PowerShell source code for the count-lines.ps1 script. It includes parameter definition with a default prompt if no path is provided, error handling using try/catch, directory path resolution, file filtering (.txt, .md, .c, .h, .cpp, .hpp, .java, .py, .ps1, .bat), recursive file searching using Get-ChildItem, line counting using Get-Content and Measure-Object, performance timing with Stopwatch, progress reporting, and formatted success/error output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/count-lines.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCounts the number of lines \n.DESCRIPTION\n\tThis PowerShell script counts the number of lines in text files (.txt/.md/.c/.h/.cpp/.hpp/.java/.py/.ps1/.bat) within a directory tree.\n.PARAMETER pathToDirTree\n\tSpecifies the path to the directory tree.\n.EXAMPLE\n\tPS> ./count-lines.ps1 C:\\Repos\\cmake\n\t✅ Found 639921 lines in 11411 text files within 📂cmake in 34 sec.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pathToDirTree = \"\")\n\ntry {\n\tif ($pathToDirTree -eq \"\" ) { $pathToDirTree = Read-Host \"Enter the path to the directory tree\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\t$pathToDirTree = Resolve-Path \"$pathToDirTree\"\n\tWrite-Progress \"Counting lines within $pathToDirTree ...\"\n\n\t[int64]$numFiles = [int64]$numLines = 0\n\tGet-ChildItem -Path $pathToDirTree -Include *.txt,*.md,*.c,*.h,*.cpp,*.hpp,*.java,*.py,*.ps1,*.bat -Recurse | ForEach-Object {\n\t\t$numLines += (Get-Content $_.FullName | Measure-Object -line).Lines\n\t\t$numFiles++\n\t}\n\n\t$folderName = (Get-Item \"$pathToDirTree\").Name\n\tWrite-Progress -completed \" \"\n\t[int]$Elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $numLines lines in $numFiles text files within 📂$folderName in $Elapsed sec.\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Uninstall-New-Outlook PowerShell Script Implementation\nDESCRIPTION: The full script that uninstalls the new Outlook for Windows application by removing the AppxPackage for all users. It includes error handling and status messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-new-outlook.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls the new Outlook\n.DESCRIPTION\n\tThis PowerShell script uninstalls the new Outlook for Windows application.\n.EXAMPLE\n\tPS> ./uninstall-new-outlook.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Uninstalling new Outlook for Windows...\"\n\n\tRemove-AppxProvisionedPackage -AllUsers -Online -PackageName (Get-AppxPackage Microsoft.OutlookForWindows).PackageFullName\n\t\n\t\"✅ New Outlook for Windows has been removed.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring an SSH Server with PowerShell\nDESCRIPTION: This core script automates SSH server installation on both Linux and Windows, with logic to detect the operating system and execute appropriate commands. Required dependencies include administrator access, PowerShell, and access to system package managers ('apt' on Linux, WindowsFeatures and firewall cmdlets on Windows). The script installs or ensures installation of OpenSSH Server, manages the SSHD service state, configures startup parameters, and sets or verifies firewall rules on Windows. It outputs confirmation of installation duration or an error message. Limitation: the script assumes presence of necessary system tools and correct user permissions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-ssh-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls a SSH server (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script installs a SSH server (needs admin rights).\n.EXAMPLE\n\tPS> ./install-ssh-server.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsLinux) {\n\t\t& sudo apt install openssh-server\n\t} else {\n\t\t# Install the OpenSSH Server\n\t\tAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n\n\t\t# Start the sshd service\n\t\tStart-Service sshd\n\n\t\t# OPTIONAL but recommended:\n\t\tSet-Service -Name sshd -StartupType 'Automatic'\n\n\t\t# Confirm the firewall rule is configured. It should be created automatically by setup.\n\t\tGet-NetFirewallRule -Name *ssh*\n\n\t\t# There should be a firewall rule named \"OpenSSH-Server-In-TCP\", which should be enabled\n\t\t# If the firewall does not exist, create one\n\t\tNew-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ installed and started SSH server in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Formatting Weather Report from wttr.in in PowerShell\nDESCRIPTION: This PowerShell script fetches 48-hour weather data for a specified or default location by sending a web request to wttr.in's JSON endpoint, then parses and displays the hourly weather forecast in a console table with icons representing weather conditions and wind directions. It supports a single optional 'location' parameter, uses helper functions to map text descriptions to emojis, and handles common PowerShell parameters and errors. The input is an optional string location, and the output is a formatted console output with weather data including temperature, precipitation, humidity, wind, UV index, cloud cover, visibility, and descriptive icons.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$location = \"\") # empty means determine automatically\n\nfunction GetDescription([string]$text) { \n\tswitch ($text) {\n\t\"Blizzard\" \t\t\t\t{ return \"❄️ blizzard ⚠️\" }\n\t\"Blowing snow\"\t\t\t\t{ return \"❄️ blowing snow ⚠️\" }\n\t\"Clear\" \t\t\t\t{ return \"🌙 clear\" }\n\t\"Cloudy\" \t\t\t\t{ return \"☁️ cloudy\" }\n\t\"Fog\" \t\t\t\t\t{ return \"🌫  fog\" }\n\t\"Freezing fog\" \t\t\t{ return \"🌫  freezing fog\" }\n\t\"Heavy rain\" \t\t\t\t{ return \"💧 heavy rain ⚠️\" }\n\t\"Heavy snow\" \t\t\t\t{ return \"❄️ heavy snow ⚠️\" }\n\t\"Light drizzle\" \t\t\t{ return \"💧 light drizzle\" }\n\t\"Light freezing rain\" \t\t\t{ return \"💧 light freezing rain ⚠️\" }\n\t\"Light rain\" \t\t\t\t{ return \"💧 light rain\" }\n\t\"Light rain shower\" \t\t\t{ return \"💧 light rain shower\" }\n\t\"Light sleet\" \t\t\t\t{ return \"❄️ light sleet\" }\n\t\"Light sleet showers\" \t\t\t{ return \"❄️ light sleet showers\" }\n\t\"Light snow\" \t\t\t\t{ return \"❄️ light snow\" }\n\t\"Light snow showers\" \t\t\t{ return \"❄️ light snow showers\" }\n\t\"Moderate or heavy freezing rain\"{return \"💧 moderate or heavy freezing rain ⚠️\" }\n\t\"Moderate or heavy sleet\" \t{ return \"❄️ moderate or heavy sleet ⚠️\" }\n\t\"Moderate or heavy rain shower\" { return \"💧 moderate or heavy rain shower ⚠️\" }\n\t\"Moderate or heavy rain in area with thunder\" { return \"💧 moderate or heavy rain in area with thunder ⚠️\" }\n\t\"Moderate or heavy snow showers\"{ return \"❄️ moderate or heavy snow showers ⚠️\" }\n\t\"Moderate or heavy snow in area with thunder\" { return \"❄️ moderate or heavy snow in area with thunder ⚠️\" }\n\t\"Moderate rain\" \t\t\t{ return \"💧 moderate rain\" }\n\t\"Moderate rain at times\" \t{ return \"💧 moderate rain at times\" }\n\t\"Moderate snow\" \t\t\t{ return \"❄️ moderate snow\" }\n\t\"Mist\" \t\t\t\t\t{ return \"🌫  misty\" }\n\t\"Overcast\" \t\t\t\t{ return \"☁️ overcast\" }\n\t\"Partly cloudy\" \t\t\t{ return \"⛅️partly cloudy\" }\n\t\"Patchy heavy snow\" \t\t\t{ return \"❄️ patchy heavy snow ⚠️\" }\n\t\"Patchy light drizzle\" \t\t{ return \"💧 patchy light drizzle\" }\n\t\"Patchy light rain\" \t\t\t{ return \"💧 patchy light rain\" }\n\t\"Patchy light rain in area with thunder\" { return \"💧 patchy light rain in area with thunder\" }\n\t\"Patchy light rain with thunder\" { return \"💧 patchy light rain with thunder\" }\n\t\"Patchy light snow\" \t\t\t{ return \"❄️ patchy light snow\" }\n\t\"Patchy moderate snow\" \t\t{ return \"❄️ patchy moderate snow\" }\n\t\"Patchy rain possible\" \t\t{ return \"💧 patchy rain possible\" }\n\t\"Patchy rain nearby\" \t\t\t{ return \"💧 patchy rain nearby\" }\n\t\"Patchy sleet nearby\" \t\t\t{ return \"❄️ patchy sleet nearby\" }\n\t\"Patchy snow nearby\" \t\t\t{ return \"❄️ patchy snow nearby\" }\n\t\"Patchy snow possible\" \t\t{ return \"❄️ patchy snow possible\" }\n\t\"Sunny\" \t\t\t\t{ return \"☀️ sunny\" }\n\t\"Thundery outbreaks possible\" \t{ return \"⚡️thundery outbreaks possible\" }\n\t\"Thundery outbreaks in nearby\" \t{ return \"⚡️thundery outbreaks in nearby\" }\n\tdefault \t\t\t\t{ return $text }\n\t}\n}\n\nfunction GetWindDir([string]$text) {\n\tswitch($text) {\n\t\"NW\"\t{ return \"↘\" }\n\t\"NNW\"\t{ return \"↓\" }\n\t\"N\"\t{ return \"↓\" }\n\t\"NNE\"\t{ return \"↓\" }\n\t\"NE\"\t{ return \"↙\" }\n\t\"ENE\"\t{ return \"←\" }\n\t\"E\"\t{ return \"←\" }\n\t\"ESE\"\t{ return \"←\" }\n\t\"SE\"\t{ return \"↖\" }\n\t\"SSE\"\t{ return \"↑\" }\n\t\"S\"\t{ return \"↑\" }\n\t\"SSW\"\t{ return \"↑\" }\n\t\"SW\"\t{ return \"↗\" }\n\t\"WSW\"\t{ return \"→\" }\n\t\"W\"\t{ return \"→\" }\n\t\"WNW\"\t{ return \"→\" }\n\tdefault { return \"$text\" }\n\t}\n}\n\ntry {\n\tWrite-Progress \"Loading weather data from http://wttr.in ...\"\n\t$weather = (Invoke-WebRequest -URI http://wttr.in/${location}?format=j1 -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\t$area = $weather.nearest_area.areaName.value\n\t$region = $weather.nearest_area.region.value\n\t$country = $weather.nearest_area.country.value\n\tWrite-Progress -completed \"Done.\"\n\t\n\t[int]$day = 0\n\tforeach($hourly in $weather.weather.hourly) {\n\t\t$hour = $hourly.time / 100\n\t\t$tempC = $(($hourly.tempC.toString()).PadLeft(3))\n\t\t$precip = $($($hourly.precipMM).PadLeft(4))\n\t\t$humidity = $(($hourly.humidity.toString()).PadLeft(3))\n\t\t$pressure = $hourly.pressure\n\t\t$windSpeed = $(($hourly.windspeedKmph.toString()).PadLeft(2))\n\t\t$windDir = GetWindDir $hourly.winddir16Point\n\t\t$UV = $hourly.uvIndex\n\t\t$clouds = $(($hourly.cloudcover.toString()).PadLeft(3))\n\t\t$visib = $(($hourly.visibility.toString()).PadLeft(2))\n\t\t$desc = GetDescription $hourly.weatherDesc.value.trim()\n\t\tif ($hour -eq 0) {\n\t\t\tif ($day -eq 0) {\n\t\t\t\tWrite-Host \"TODAY  🌡°C  ☂️mm   💧  💨km/h ☀️UV   ☁️   👁km   at $area ($region, $country)\" -foregroundColor green\n\t\t\t} elseif ($day -eq 1) {\n\t\t\t\t$date = (Get-Date).AddDays(1)\n\t\t\t\t[string]$dayOfWeek = $date.DayOfWeek\n\t\t\t\tWrite-Host \"$($dayOfWeek.toUpper())\" -foregroundColor green\n\t\t\t} else {\n\t\t\t\t$date = (Get-Date).AddDays(2)\n\t\t\t\t[string]$dayOfWeek = $date.DayOfWeek\n\t\t\t\tWrite-Host \"$($dayOfWeek.toUpper())\" -foregroundColor green\n\t\t\t}\n\t\t\t$day++\n\t\t}\n\t\t\"$(($hour.toString()).PadLeft(2))h  $tempC°   $precip  $humidity%   $($windDir)$windSpeed    $UV   $clouds%   $visib   $desc\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Sorry: $($Error[0]) in script line $($_.InvocationInfo.ScriptLineNumber).\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Host Pinging and Charting in PowerShell\nDESCRIPTION: This snippet contains the full source code for the `watch-ping.ps1` script. It defines parameters, implements `GetPingLatency` using asynchronous pings to calculate roundtrip time, `WriteChartLine` to draw the console bar chart using Unicode block characters, and a main loop that repeatedly pings, displays the chart, and pauses.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-ping.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWatch pinging a host\n.DESCRIPTION\n\tThis PowerShell script pings the given host continously and shows the roundtrip times in a horizontal chart.\n.PARAMETER hostname\n\tSpecifies the hostname or IP address to ping (windows.com by default)\n.PARAMETER timeInterval\n\tSpecifies the time interval in milliseconds between two pings (1000 by default)\n.EXAMPLE\n\tPS> ./watch-ping.ps1\n\n\t   PING ROUNDTRIP TIMES TO: windows.com\n\t#1 ██████████████ 136ms\n\t#2 ████████████████ 154ms\n\t#3 █████████████████████████ 234ms\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$hostname = \"windows.com\", [int]$timeInterval = 1000)\n\nfunction GetPingLatency([string]$hostname) {\n\t$hostsArray = $hostname.Split(\",\")\n\t$tasks = $hostsArray | foreach {\n\t\t(New-Object Net.NetworkInformation.Ping).SendPingAsync($_,1000)\n\t}\n\t[Threading.Tasks.Task]::WaitAll($tasks)\n\tforeach($ping in $tasks.Result) { \n        \tif ($ping.Status -eq \"Success\") { return $ping.RoundtripTime }\n\t}\n\treturn 1000\n}\n\nfunction WriteChartLine { param([float]$value, [float]$maxValue, [string]$text)\n\t$num = ($value * 108.0) / $maxValue\n\twhile ($num -ge 1.0) {\n\t\tWrite-Host -noNewLine \"█\"\n\t\t$num -= 1.0\n\t}\n\tif ($num -ge 0.875) {\n\t\tWrite-Host -noNewLine \"▉\"\n\t} elseif ($num -ge 0.75) {\n\t\tWrite-Host -noNewLine \"▊\"\n\t} elseif ($num -ge 0.625) {\n\t\tWrite-Host -noNewLine \"▋\"\n\t} elseif ($num -ge 0.5) {\n\t\tWrite-Host -noNewLine \"▌\"\n\t} elseif ($num -ge 0.375) {\n\t\tWrite-Host -noNewLine \"▍\"\n\t} elseif ($num -ge 0.25) {\n\t\tWrite-Host -noNewLine \"▎\"\n\t} elseif ($num -ge 0.125) {\n\t\tWrite-Host -noNewLine \"▏\"\n\t}\n\tWrite-Host \" $text\"\n}\n\ntry {\n\tWrite-Host \"`n   PING ROUNDTRIP TIMES TO: $hostname\" -foregroundColor green\n\t[int]$count = 1\n\tdo {\n\t\tWrite-Host \"#$count \" -noNewline\n\t\t[float]$latency = GetPingLatency $hostname\n\t\tWriteChartLine $latency 1000.0 \"$($latency)ms\"\n\t\tStart-Sleep -Milliseconds $timeInterval\n\t\t$count++\n\t} while($true)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Setting Desktop Wallpaper\nDESCRIPTION: This script sets the specified image file as the desktop wallpaper, allowing options for different layout styles such as Fill, Fit, Stretch, Tile, Center, or Span. It modifies registry settings for style and calls the Windows API SystemParametersInfo to apply the wallpaper change. Dependencies include PowerShell with access to registry modification and interop capabilities, and it handles user input or command-line arguments for image path and style.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-wallpaper.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the given image file as desktop wallpaper\n.DESCRIPTION\n\tThis PowerShell script sets the given image file as desktop wallpaper (.JPG or .PNG supported)\n.PARAMETER ImageFile\n\tSpecifies the path to the image file\n.PARAMETER Style\n        Specifies either Fill, Fit, Stretch, Tile, Center, or Span (default)\n.EXAMPLE\n\tPS> ./set-wallpaper C:\\ocean.jpg\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$ImageFile = \"\", [string]$Style = \"Span\")\n\nfunction SetWallPaper {\n\tparam([string]$Image, [ValidateSet('Fill', 'Fit', 'Stretch', 'Tile', 'Center', 'Span')][string]$Style)\n \n\t$WallpaperStyle = switch($Style) {\n\t\"Fill\"    {\"10\"}\n\t\"Fit\"     {\"6\"}\n\t\"Stretch\" {\"2\"}\n\t\"Tile\"    {\"0\"}\n\t\"Center\"  {\"0\"}\n\t\"Span\"    {\"22\"}\n\t}\n \n\tif ($Style -eq \"Tile\") {\n\t\tNew-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name WallpaperStyle -PropertyType String -Value $WallpaperStyle -Force\n\t\tNew-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name TileWallpaper -PropertyType String -Value 1 -Force\n\t} else {\n\t\tNew-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name WallpaperStyle -PropertyType String -Value $WallpaperStyle -Force\n\t\tNew-ItemProperty -Path \"HKCU:\\Control Panel\\Desktop\" -Name TileWallpaper -PropertyType String -Value 0 -Force\n\t}\n\tAdd-Type -TypeDefinition @\" \n\tusing System; \n\tusing System.Runtime.InteropServices;\n  \n\tpublic class Params\n\t{ \n\t    [DllImport(\"User32.dll\",CharSet=CharSet.Unicode)] \n\t    public static extern int SystemParametersInfo (Int32 uAction, \n\t\t\t\t\t\t\t\t   Int32 uParam, \n\t\t\t\t\t\t\t\t   String lpvParam, \n\t\t\t\t\t\t\t\t   Int32 fuWinIni);\n\t}\n\"@ \n  \n\t$SPI_SETDESKWALLPAPER = 0x0014\n\t$UpdateIniFile = 0x01\n\t$SendChangeEvent = 0x02\n  \n\t$fWinIni = $UpdateIniFile -bor $SendChangeEvent\n  \n\t$ret = [Params]::SystemParametersInfo($SPI_SETDESKWALLPAPER, 0, $Image, $fWinIni)\n}\n \ntry {\n\tif ($ImageFile -eq \"\" ) { $ImageFile = read-host \"Enter path to image file\" }\n\n\tSetWallPaper -Image $ImageFile -Style $Style\n\t\"✅  Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching Apple Website in Web Browser using PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to the Apple website. It does not require any external dependencies aside from PowerShell itself. The script supports standard common parameters such as Verbose and Debug for enhanced logging and troubleshooting. Inputs include any supported common parameters, but no website URL needs to be specified since it is hardcoded. Output consists of the action of opening the browser window or tab with the Apple homepage; there are no return values. The script is limited to environments where a compatible web browser and PowerShell are available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-apple-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-apple-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-apple-website\n```\n\n----------------------------------------\n\nTITLE: Basic PowerShell Commands\nDESCRIPTION: Illustrates fundamental PowerShell concepts such as cmdlets, functions, parameters, aliases, scripts, applications, pipelines, and common keyboard shortcuts. This snippet provides a quick overview of the PowerShell environment and interaction methods.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n         Cmdlet : Commands built into shell written in .NET\n      Functions : Commands written in PowerShell language\n      Parameter : Argument to a Cmdlet/Function/Script\n          Alias : Shortcut for a Cmdlet or Function\n        Scripts : Text files with .ps1 extension\n   Applications : Existing windows programs\n      Pipelines : Pass objects Get-process word | Stop-Process\n         Ctrl+c : Interrupt current command\n     Left/right : Navigate editing cursor\nCtrl+left/right : Navigate a word at a time\n     Home / End : End Move to start / end of line\n      Up / down : Move up and down through history\n         Insert : Toggles between insert/overwrite mode\n             F7 : Command history in a window\nTab / Shift-Tab : Command line completion\n```\n\n----------------------------------------\n\nTITLE: Implementing Printer Listing Logic in PowerShell\nDESCRIPTION: Contains the full source code for list-printers.ps1. The script includes comment-based help defining its purpose and usage. It uses a try-catch block for error handling. For non-Linux systems (implicitly Windows), it retrieves printer information using `Get-Printer *`, selects specific properties (Name, Type, Location, Comment, DriverName, PrinterStatus), and formats the output as a table. It exits with status code 0 on success or 1 on failure. A placeholder exists for Linux implementation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-printers.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the printers \n.DESCRIPTION\n\tThis PowerShell script lists all printers known to the local computer.\n.EXAMPLE\n\tPS> ./list-printers.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t# TODO\n\t} else {\n\t\t# $ComputerName = $(hostname)\n\t\t# Get-WMIObject -Class Win32_Printer -ComputerName $ComputerName | Format-Table\n\t\tGet-Printer * | Select-Object Name,Type,Location,Comment,DriverName,PrinterStatus | Format-Table -autoSize\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branch and Updating Submodules Using PowerShell\nDESCRIPTION: This PowerShell script switches the active branch in a specified or current Git repository and updates its submodules accordingly. It accepts optional parameters: 'branchName' to specify the Git branch to switch to, and 'pathToRepo' to provide the local repository path (defaulting to the current working directory). The script checks for the presence of the Git executable, verifies the repository's cleanliness before switching branches, performs a fetch of remote updates, checks out the specified branch including submodules, pulls the latest changes recursively, and updates submodules. The script handles errors gracefully by throwing exceptions if Git commands fail or required conditions are unmet, such as a dirty working tree. It also measures and outputs the total execution time. Dependencies include having Git installed and accessible from the PowerShell environment. Key parameters are 'branchName' (string) and 'pathToRepo' (string). The output includes progress messages and a success or error notification. Limitations include requiring a clean working directory and proper Git installation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/switch-branch.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSwitches the Git branch\n.DESCRIPTION\n\tThis PowerShell script switches to the given branch in a Git repository and also updates the submodules.\n.PARAMETER branchName\n\tSpecifies the Git branch name to switch to\n.PARAMETER pathToRepo\n\tSpecifies the file path to the local Git repository\n.EXAMPLE\n\tPS> ./switch-branch main \n\t⏳ (1/6) Searching for Git executable...   git version 2.43.0.windows.1\n\t⏳ (2/6) Checking local repository...      C:\\Repos\\rust\n\t⏳ (3/6) Fetching remote updates...\n\t⏳ (4/6) Switching to branch 'main'...\n\t⏳ (5/6) Pulling remote updates...\n\t⏳ (6/6) Updating submodules...\n\t✅ Switched 📂rust repo to 'main' branch in 22s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$branchName = \"\", [string]$pathToRepo = \"$PWD\")\n\ntry {\n\tif ($branchName -eq \"\") { $branchName = Read-Host \"Enter the branch name to switch to\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/6) Searching for Git executable...   \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can\\'t execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2/6) Checking local repository...      $pathToRepo\"\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can\\'t access repo folder: $pathToRepo\" }\n\t$result = (git -C \"$pathToRepo\" status)\n\tif ($lastExitCode -ne \"0\") { throw \"'git status' in $pathToRepo failed with exit code $lastExitCode\" }\n\tif (\"$result\" -notmatch \"nothing to commit, working tree clean\") { throw \"Git repository is NOT clean: $result\" }\n\t$repoDirName = (Get-Item \"$pathToRepo\").Name\n\n\tWrite-Host \"⏳ (3/6) Fetching remote updates...        \" -noNewline\n\t& git -C \"$pathToRepo\" remote get-url origin\n        if ($lastExitCode -ne \"0\") { throw \"'git remote get-url origin' failed with exit code $lastExitCode\" }\n\n\t& git -C \"$pathToRepo\" fetch --all --prune --prune-tags --force\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (4/6) Switching to branch '$branchName'...\"\n\t& git -C \"$pathToRepo\" checkout --recurse-submodules \"$branchName\"\n\tif ($lastExitCode -ne \"0\") { throw \"'git checkout $branchName' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (5/6) Pulling remote updates...\"\n\t& git -C \"$pathToRepo\" pull --recurse-submodules\n\tif ($lastExitCode -ne \"0\") { throw \"'git pull' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (6/6) Updating submodules...\" \t\n\t& git -C \"$pathToRepo\" submodule update --init --recursive\n\tif ($lastExitCode -ne \"0\") { throw \"'git submodule update' failed with exit code $lastExitCode\" }\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Switched 📂$repoDirName repo to '$branchName' branch in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0]) in script line $($_.InvocationInfo.ScriptLineNumber)\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Cloud Weather Forecast Script\nDESCRIPTION: This PowerShell script retrieves current weather information from wttr.in for a specified location. It accepts an optional 'GeoLocation' parameter to specify the location; if omitted, it determines the location automatically. Dependencies include PowerShell's Invoke-WebRequest cmdlet. The script outputs the weather data content or an error message if the request fails, supporting common parameters for enhanced debugging and output control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the current weather forecast\n.DESCRIPTION\n\tThis PowerShell script lists the current weather forecast.\n.PARAMETER GeoLocation\n\tSpecifies the geographic location to use\n.EXAMPLE\n\tPS> ./weather Paris\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$GeoLocation = \"\") # empty means determine automatically\n\ntry {\n\t(Invoke-WebRequest http://wttr.in/$GeoLocation -userAgent \"curl\" -useBasicParsing).Content\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing a Local Git Repository Including Submodules Using sync-repo.ps1 in PowerShell\nDESCRIPTION: This complete script automates the process of synchronizing a local Git repository by performing a pull with submodule recursion followed by a push. It accepts an optional 'path' parameter (defaulting to the current directory), verifies the Git executable and repository path, and provides real-time progress feedback. The script features robust error handling for all critical steps and reports elapsed time, requiring Git to be installed and accessible in the system environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/sync-repo.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSynchronizes a repo \n.DESCRIPTION\n\tThis PowerShell script synchronizes a local Git repository by pull and push (including submodules).\n.PARAMETER path\n\tSpecifies the path to the Git repository (current working directory by default)\n.EXAMPLE\n\tPS> ./sync-repo.ps1 C:\\Repos\\curl\n\t⏳ (1/4) Searching for Git executable...  git version 2.42.0.windows.1\n\t⏳ (2/4) Checking local repository...     C:\\Repos\\curl\n\t⏳ (3/4) Pulling remote updates...        Already up to date.\n\t⏳ (4/4) Pushing local updates...         Everything up-to-date\n\t✅ Synced the 📂curl repo in 5s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/4) Searching for Git executable...  \" -noNewline\n \t& git --version\n \tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2/4) Checking local repository...     $path\"\n\tif (!(Test-Path \"$path\" -pathType container)) { throw \"Can't access folder: $path\" }\n\n\tWrite-Host \"⏳ (3/4) Pulling remote updates...        \" -noNewline\n\t& git -C \"$path\" pull --all --recurse-submodules\n\tif ($lastExitCode -ne \"0\") { throw \"'git pull --all --recurse-submodes' failed\" }\n\n\tWrite-Host \"⏳ (4/4) Pushing local updates...         \" -noNewline\n\t& git -C \"$path\" push\n\tif ($lastExitCode -ne \"0\") { throw \"'git push' failed\" }\n\n\t$pathName = (Get-Item \"$path\").Name\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Synced the 📂$pathName repo in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Git Operations within a Loop\nDESCRIPTION: This snippet iterates through each branch specified in the `$Branches` parameter. Inside the loop, it performs a series of Git operations including checkout, submodule update, clean, pull, cherry-pick, commit, and push.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pick-commit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t$BranchArray = $Branches.Split(\" \")\n\t$NumBranches = $BranchArray.Count\n\tforeach($Branch in $BranchArray) {\n\n\t\t\"🍒 Switching to branch $Branch ...\"\n\t\t& git checkout --recurse-submodules --force $Branch\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git checkout $Branch' failed\" }\n\n\t\t\"🍒 Updating submodules...\"\n\t\t& git submodule update --init --recursive\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git submodule update' failed\" }\n\n\t\t\"🍒 Cleaning the repository from untracked files...\"\n\t\t& git clean -fdx -f\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git clean -fdx -f' failed\" }\n\t\t\t\n\t\t& git submodule foreach --recursive git clean -fdx -f\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git clean -fdx -f' in submodules failed\" }\n\n\t\t\"🍒 Pulling latest updates...\"\n\t\t& git pull --recurse-submodules \n\t\tif ($lastExitCode -ne \"0\") { throw \"'git pull' failed\" }\n\n\t\t\"🍒 Checking the status...\"\n\t\t$Result = (git status)\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git status' failed\" }\n\t\tif (\"$Result\" -notmatch \"nothing to commit, working tree clean\") { throw \"Branch is NOT clean: $Result\" }\n\n\t\t\"🍒 Cherry picking...\"\n\t\t& git cherry-pick --no-commit \"$CommitID\"\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git cherry-pick $CommitID' failed\" }\n\n\t\t\"🍒 Committing...\"\n\t\t& git commit -m \"$CommitMessage\"\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git commit' failed\" }\n\n\t\t\"🍒 Pushing...\"\n\t\t& git push\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git push' failed\" }\n\t}\n```\n\n----------------------------------------\n\nTITLE: Listing Folder Contents with Icons (PowerShell Script)\nDESCRIPTION: This PowerShell script lists directory contents with icons. It accepts an optional 'searchPattern'. The 'GetFileIcon' function maps file extensions to icons, while 'ListFolder' retrieves items using 'Get-ChildItem', skips hidden items (starting with '.'), assigns folder or file icons, and creates custom objects. The main block calls 'ListFolder', formats the output using 'Format-Wide -autoSize', and includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-folder.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists a folder\n.DESCRIPTION\n\tThis PowerShell script lists the content of a directory (alphabetically formatted in columns).\n.PARAMETER SearchPattern\n\tSpecifies the search pattern (\"*\" by default which means anything)\n.EXAMPLE\n\tPS> ./list-folder.ps1 C:\\*\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$searchPattern = \"*\")\n\nfunction GetFileIcon([string]$suffix) {\n\tswitch ($suffix) {\n\t\".csv\"\t{return \"📊\"}\n\t\".epub\"\t{return \"📓\"}\n\t\".exe\"  {return \"⚙️\"}\n\t\".gif\"\t{return \"📸\"}\n\t\".iso\"\t{return \"📀\"}\n\t\".jpg\"\t{return \"📸\"}\n\t\".mp3\"\t{return \"🎵\"}\n\t\".mkv\"\t{return \"🎬\"}\n\t\".zip\"  {return \"🎁\"}\n\tdefault {return \"📄\"}\n\t}\n}\n\nfunction ListFolder([string]$searchPattern) {\n\t$items = Get-ChildItem -path \"$searchPattern\"\n\tforeach ($item in $items) {\n\t\t$name = $item.Name\n\t\tif ($name[0] -eq '.') { continue } # hidden file/dir\n\t\tif ($item.Mode -like \"d*\") { $icon = \"📂\" } else { $icon = GetFileIcon $item.Extension }\n\t\tNew-Object PSObject -property @{ Name = \"$icon$name\" }\n\t}\n}\n\ntry {\n\tListFolder $searchPattern | Format-Wide -autoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell script defining 'Check-Header' function for file type detection\nDESCRIPTION: This script defines a PowerShell function 'Check-Header' that resolves the file path, reads the first four bytes of the file, and compares these bytes against a predefined list of known file signatures. It outputs the matching file extension if any signature matches the file header. The script includes a parameter for specifying the file path and appropriate comments for clarity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-file.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Checks a file\n.DESCRIPTION\n        This PowerShell script determines and prints the file type of the given file.\n.PARAMETER Path\n        Specifies the path to the file\n.EXAMPLE\n        PS> ./check-file C:\\my.exe\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Path = \"\")\n\nfunction Check-Header { param( $path )\n    $path = Resolve-Path $path\n\n    # Hexidecimal signatures for expected files\n    $known = @'\n\"Extension\",\"Header\"\n\"3gp\",\"66 74 79 70 33 67\"\n\"7z\",\"37 7A BC AF 27 1C\"\n\"8sv\",\"38 53 56 58\"\n\"8svx\",\"46 4F 52 4D nn nn nn nn\"\n\"acbm\",\"46 4F 52 4D nn nn nn nn\"\n\"aif\",\"41 49 46 46\"\n\"aiff\",\"46 4F 52 4D nn nn nn nn\"\n\"anbm\",\"46 4F 52 4D nn nn nn nn\"\n\"anim\",\"46 4F 52 4D nn nn nn nn \"\n\"asf\",\"30 26 B2 75 8E 66 CF 11\"\n\"avi\",\"52 49 46 46 nn nn nn nn \"\n\"bac\",\"42 41 43 4B 4D 49 4B 45\"\n\"bpg\",\"42 50 47 FB\"\n\"cab\",\"4D 53 43 46\"\n\"cin\",\"80 2A 5F D7\"\n\"class\",\"CA FE BA BE\"\n\"cmus\",\"46 4F 52 4D nn nn nn nn\"\n\"cr2\",\"49 49 2A 00 10 00 00 00\"\n\"crx\",\"43 72 32 34\"\n\"cwk\",\"05 07 00 00 42 4F 42 4F\"\n\"cwk\",\"06 07 E1 00 42 4F 42 4F\"\n\"dat\",\"50 4D 4F 43 43 4D 4F 43\"\n\"DBA\",\"BE BA FE CA\"\n\"DBA\",\"00 01 42 44\"\n\"dex\",\"64 65 78 0A 30 33 35 00\"\n\"djvu\",\"41 54 26 54 46 4F 52 4D nn nn nn nn 44 4A 56\"\n\"dmg\",\"78 01 73 0D 62 62 60\"\n\"doc\",\"D0 CF 11 E0 A1 B1 1A E1\"\n\"dpx\",\"53 44 50 58\"\n\"exr\",\"76 2F 31 01\"\n\"fax\",\"46 41 58 58\"\n\"faxx\",\"46 4F 52 4D nn nn nn nn\"\n\"fh8\",\"41 47 44 33\"\n\"fits\",\"53 49 4D 50 4C 45 20 20\"\n\"flac\",\"66 4C 61 43\"\n\"flif\",\"46 4C 49 46\"\n\"ftxt\",\"46 4F 52 4D nn nn nn nn\"\n\"gif\",\"47 49 46 38 37 61\"\n\"ico\",\"00 00 01 00\"\n\"idx\",\"49 4E 44 58\"\n\"iff\",\"41 43 42 4D\"\n\"iff\",\"41 4E 42 4D\"\n\"iff\",\"41 4E 49 4D\"\n\"iff\",\"46 4F 52 4D nn nn nn nn\"\n\"ilbm\",\"46 4F 52 4D nn nn nn nn\"\n\"iso\",\"43 44 30 30 31\"\n\"jpg\",\"FF D8 FF DB\"\n\"lbm\",\"49 4C 42 4D\"\n\"lz\",\"4C 5A 49 50\"\n\"lz4\",\"04 22 4D 18\"\n\"mid\",\"4D 54 68 64\"\n\"mkv\",\"1A 45 DF A3\"\n\"MLV\",\"4D 4C 56 49\"\n\"mus\",\"43 4D 55 53\"\n\"nes\",\"4E 45 53 1A\"\n\"ods\",\"50 4B 05 06\"\n\"ogg\",\"4F 67 67 53\"\n\"PDB\",\"00 00 00 00 00 00 00 00\"\n\"pdf\",\"25 50 44 46\"\n\"png\",\"89 50 4E 47 0D 0A 1A 0A\"\n\"ps\",\"25 21 50 53\"\n\"psd\",\"38 42 50 53\"\n\"rar\",\"52 61 72 21 1A 07 00\"\n\"rar\",\"52 61 72 21 1A 07 01 00\"\n\"smu\",\"53 4D 55 53\"\n\"smus\",\"46 4F 52 4D nn nn nn nn\"\n\"stg\",\"4D 49 4C 20\"\n\"tar\",\"75 73 74 61 72 00 30 30\"\n\"TDA\",\"00 01 44 54\"\n\"tif\",\"49 49 2A 00\"\n\"toast\",\"45 52 02 00 00 00\"\n\"tox\",\"74 6F 78 33\"\n\"txt\",\"46 54 58 54\"\n\"vsdx\",\"50 4B 07 08\"\n\"wav\",\"52 49 46 46 nn nn nn nn\"\n\"wma\",\"A6 D9 00 AA 00 62 CE 6C\"\n\"xar\",\"78 61 72 21\"\n\"yuv\",\"59 55 56 4E\"\n\"yuvn\",\"46 4F 52 4D nn nn nn nn\"\n\"zip\",\"50 4B 03 04\"\n\"epub\",\"50 4B 03 04 0A 00 02 00\"\n' | ConvertFrom-Csv | sort {$_.header.length} -Descending\n\n    $known | % {$_.header = $_.header -replace '\\s'}\n\n    try {\n        # Get content of each file (up to 4 bytes) for analysis\n        $HeaderAsHexString = New-Object System.Text.StringBuilder\n        [Byte[]](Get-Content -Path $path -TotalCount 4 -Encoding Byte -ea Stop) | % {\n            if ((\"{0:X}\" -f $_).length -eq 1) {\n                $null = $HeaderAsHexString.Append('0{0:X}' -f $_)\n            } else {\n                $null = $HeaderAsHexString.Append('{0:X}' -f $_)\n            }\n        }\n      \n        # Validate file header\n        # might change .startswith() to -match.\n        # might remove 'select -f 1' to get all possible matching extensions, or just somehow make it a better match.\n        $known | ? {$_.header.startswith($HeaderAsHexString.ToString())} | select -f 1 | % {$_.extension}\n    } catch {}\n}\n\nCheck-Header $Path\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Generate QR Codes Using Online API\nDESCRIPTION: This script creates a QR code image file from specified text, image size, and format. It includes parameter handling, user prompts for missing inputs, environment-specific path resolution, API request construction, file download, and error handling. Dependencies include PowerShell runtime and internet access for API requests.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-qrcode.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a QR code\n.DESCRIPTION\n\tThis PowerShell script generates a new QR code image file.\n.PARAMETER text\n\tSpecifies the text to use\n.PARAMETER imageSize\n\tSpecifies the image size (width x height)\n.PARAMETER fileFormat\n\tSpecifies the image file format\n.EXAMPLE\n\tPS> ./new-qrcode.ps1 \"Fasten seatbelt\" 500x500 JPG\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\", [string]$imageSize = \"\", [string]$fileFormat = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter text or URL\" }\n\tif ($imageSize -eq \"\") { $imageSize = Read-Host \"Enter image size, e.g. 500x500\" }\n\tif ($fileFormat -eq \"\") { $fileFormat = Read-Host \"Enter the image file format, e.g. JPG\" }\n\n\t$ECC = \"M\" # can be L, M, Q, H\n\t$QuietZone = 1\n\t$ForegroundColor = \"000000\"\n\t$BackgroundColor = \"ffffff\"\n        if ($IsLinux) {\n                $pathToPictures = Resolve-Path \"$HOME/Pictures\"\n        } else {\n                $pathToPictures = [Environment]::GetFolderPath('MyPictures')\n        }\n        if (-not(Test-Path \"$pathToPictures\" -pathType container)) { throw \"Pictures folder at 📂$Path doesn't exist (yet)\" }\n\t$newFile = \"$pathToPictures/QR_code.$fileFormat\"\n\n\t$WebClient = New-Object System.Net.WebClient\n\t$WebClient.DownloadFile((\"http://api.qrserver.com/v1/create-qr-code/?data=\" + $text + \"&ecc=\" + $ECC +`\n\t\t\"&size=\" + $imageSize + \"&qzone=\" + $QuietZone + `\n\t\t\"&color=\" + $ForegroundColor + \"&bgcolor=\" + $BackgroundColor.Text + `\n\t\t\"&format=\" + $fileFormat), $newFile)\n\n\t\"✅ New QR code saved as: $newFile\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Breach Check PowerShell\nDESCRIPTION: This comprehensive snippet contains the full source code for the `check-password.ps1` script. It includes standard help comments, parameter definition, a helper function `CalculateHashSHA1` to compute the SHA1 hash of a string, a core function `Get-PasswordPwnCount` to query the haveibeenpwned.com API using the k-Anonymity model and parse the result, and the main execution logic to get the password, call the API function, and display the security status with a corresponding emoji.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-password.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Checks a password\n.DESCRIPTION\n        This PowerShell script checks the security status of the given password by haveibeenpwned.com\n.EXAMPLE\n        PS> ./check-password qwerty\n\t⚠️  Bad password, it's already listed in 10584568 known security breaches!\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$password = \"\")\n\nfunction CalculateHashSHA1 ([string]$string) {\n    $sha1 = New-Object System.Security.Cryptography.SHA1CryptoServiceProvider\n    $encoder = New-Object System.Text.UTF8Encoding\n    $bytes = $encoder.GetBytes($string)\n    $hash = ($sha1.ComputeHash($bytes) | % { $_.ToString(\"X2\") }) -join ''\n    return $hash\n}\n\nfunction Get-PasswordPwnCount { [CmdletBinding()] param([string]$pass)\n    $hash  = CalculateHashSHA1 $pass\n    try {\n        $uri = \"https://api.pwnedpasswords.com/range/$($hash.Substring(0,5))\"\n        $list  = -split (Invoke-RestMethod $uri -Verbose:($PSBoundParameters['Verbose'] -eq $true) -ErrorAction Stop) # split into separate strings\n        $pwn = $list | Select-String $hash.Substring(5,35) # grep\n        if ($pwn) { $count = [int] ($pwn.ToString().Split(':')[1]) } else { $count = 0 }\n        return $count\n    }\n    catch {\n        Write-Error \"Error Calling HIBP API\"\n        return $null\n    }\n}\n\ntry {\n\tif ($password -eq \"\") { $password = Read-Host \"Enter the password\" }\n\t$NumBreaches = Get-PasswordPwnCount $password\n\tif ($NumBreaches -eq 0) {\n\t\t\"👍 Password seems good, it's not listed in any known security breach as of today.\" \n\t} else {\n\t\t\"⚠️ Bad password, it's listed already in $NumBreaches known security breaches!\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Windows System Files Using PowerShell\nDESCRIPTION: This PowerShell script executes the System File Checker (sfc) command with the /verifyOnly switch to assess the integrity of Windows system files. It requires the script to be run with administrator privileges (enforced by the #Requires -RunAsAdministrator directive). The script supports common PowerShell parameters for diagnostics and control. Upon success, it outputs a confirmation message; if verification fails or an error occurs, it catches the exception, outputs an error message including the script line where the error occurred, and exits with an error code. Dependencies include the Windows sfc utility and an administrative execution context.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-windows-system-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the validity of the Windows system files (requires admin rights)\n.DESCRIPTION\n\tThis PowerShell script checks the validity of the Windows system files. It requires admin rights.\n.EXAMPLE\n\tPS> ./check-windows-system-files.ps1\n\t✅ checked Windows system files\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\tsfc /verifyOnly\n\tif ($lastExitCode -ne \"0\") { throw \"'sfc /verifyOnly' failed\" }\n\n\t\"✅ checked Windows system files\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing evcc on Linux with PowerShell\nDESCRIPTION: This PowerShell script installs evcc on a Linux system. It first checks if the script is running on Linux using `$IsLinux`. It then installs necessary packages using `apt install`, adds the evcc keyring using `curl`, updates the package list using `apt update`, installs evcc using `apt install`, configures evcc using `evcc configure`, and finally starts the evcc web server using `systemctl start`.  The script uses `try...catch` for error handling, logging installation steps and measuring the elapsed time. Requires sudo privileges and an apt-based system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-evcc.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls evcc\n.DESCRIPTION\n\tThis PowerShell script installs evcc. Evcc is an extensible EV Charge Controller with PV integration implemented in Go. See https://evcc.io for details.\n.EXAMPLE\n\tPS> ./install-evcc.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsLinux) {\n\t\t\"⏳ (1/6) Installing necessary packets...\"\n\t\t& sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl\n\n\t\t\"⏳ (2/6) Installing keyring for evcc...\"\n\t\t& curl -1sLf 'https://dl.cloudsmith.io/public/evcc/stable/setup.deb.sh' | sudo -E bash\n\n\t\t\"⏳ (3/6) Updating packet list....\"\n\t\t& sudo apt update\n\n\t\t\"⏳ (4/6) Installing evcc packet...\"\n\t\t& sudo apt install -y evcc\n\n\t\t\"⏳ (5/6) Configuring evcc...\"\n\t\t& evcc configure\n\n\t\t\"⏳ (6/6) Starting evcc Web server on :7070 as system service...\"\n\t\t& sudo systemctl start evcc\n\t} else {\n\t\tthrow \"Sorry, only Linux installation currently supported\"\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ evcc installed successfully in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Toast-Message Notifications with System.Windows.Forms in PowerShell\nDESCRIPTION: This PowerShell script displays a toast notification using the Windows Notification Center. It depends on the System.Windows.Forms and System.Drawing .NET assemblies, creating a NotifyIcon object to show the notification balloon tip. Parameters include 'text' (notification message), 'title' (notification title), and 'duration' (display time in milliseconds). The script handles exceptions and exits with a relevant status code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-notification.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tShows a notification\n.DESCRIPTION\n\tThis PowerShell script shows a toast-message notification for the Windows Notification Center.\n.PARAMETER text\n\tSpecifies the text to show ('Hello World' by default)\n.PARAMETER title\n\tSpecifies the title to show ('NOTE' by default)\n.PARAMETER duration\n\tSpecifies the view duration in milliseconds (5000 by default)\n.EXAMPLE\n\tPS> ./show-notification.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"Hello World\", [string]$title = \"NOTE\", [int]$duration = 5000)\n\ntry {\n\tAdd-Type -AssemblyName System.Windows.Forms \n\t$global:balloon = New-Object System.Windows.Forms.NotifyIcon\n\t$path = (Get-Process -id $pid).Path\n\t$balloon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($path) \n\t$balloon.BalloonTipIcon = [System.Windows.Forms.ToolTipIcon]::Info\n\t$balloon.BalloonTipText = $text\n\t$balloon.BalloonTipTitle = $title \n\t$balloon.Visible = $true \n\t$balloon.ShowBalloonTip($duration)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Administrator Rights in PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell snippet implements the core logic for checking whether the current user has administrator, guest, or normal user rights on Windows. It depends on the .NET Security.Principal namespace for examining Windows user roles. The script is wrapped in try/catch blocks for robust error handling and clean exit codes, and outputs clear status messages based on detected privileges. The $USERNAME environment variable is interpolated into responses. On Linux, functionality is marked as TODO. Required dependencies include standard PowerShell and access to .NET libraries; the script supports common parameters (Verbose, Debug, ErrorAction, etc.). Expected input is a PowerShell session, output is a privilege status message. The script cannot determine Linux admin status as implemented.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-admin.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tif ($IsLinux) {\n\t\t# todo\n\t} else {\n\t\t$user = [Security.Principal.WindowsIdentity]::GetCurrent()\n\t\t$principal = (New-Object Security.Principal.WindowsPrincipal $user)\n\t\tif ($principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)) {\n\t\t\t\"✅ Yes, $USERNAME has admin rights.\"\n\t\t} elseif ($principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Guest)) {\n\t\t\t\"⚠️ No, $USERNAME, has guest rights only.\"\n\t\t} else {\n\t\t\t\"⚠️ No, $USERNAME has normal user rights only.\"\n\t\t}\n\t}  \n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0]) (in script line $($_.InvocationInfo.ScriptLineNumber))\"\n\texit 1\n}\t\n```\n\n----------------------------------------\n\nTITLE: Filtering Objects\nDESCRIPTION: These commands filter objects based on a property matching a value. `Get-Process` retrieves a list of processes, and `Where-Object` filters them based on a script block.  The script block checks if the process name starts with \"c\".  `gps` is an alias for `Get-Process`. The second example is an abbreviated form of the first.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_28\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Process | Where-Object -FilterScript { $PSItem.Name -match '^c' } # Filter objects based on a property matching a value\ngps | where Name -match '^c'                                # Abbreviated form of the previous statement\n```\n\n----------------------------------------\n\nTITLE: Pulling Remote Updates into Git Repository with PowerShell\nDESCRIPTION: This PowerShell script pulls remote updates into a local Git repository path specified by the -pathToRepo parameter or defaults to the working directory. It sequentially checks for Git installation, validates repository accessibility, ensures the HEAD is not detached, pulls updates including submodules, and updates submodules recursively. The script outputs progress messages, handles errors gracefully by throwing descriptive exceptions, and reports the elapsed time for the update process. Dependencies include a functioning Git executable available in the system PATH. Expected input is an optional string parameter indicating the repository path. Output includes status messages and exit codes indicating success or failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pull-repo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPulls updates into a Git repo\n.DESCRIPTION\n\tThis PowerShell script pulls remote updates into a local Git repository (including submodules).\n.PARAMETER pathToRepo\n\tSpecifies the file path to the local Git repository (default is working directory)\n.EXAMPLE\n\tPS> ./pull-repo.ps1\n\t⏳ (1/4) Searching for Git executable...  git version 2.44.0.windows.1\n\t⏳ (2/4) Checking local repository...     C:\\Repos\\rust\n\t⏳ (3/4) Pulling remote updates...\n\t⏳ (4/4) Updating submodules...\n\t✅ Updates pulled into 📂rust repo in 14s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pathToRepo = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/4) Searching for Git executable...  \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2/4) Checking local repository...     $pathToRepo\"\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access folder: $pathToRepo\" }\n\t$result = (git -C \"$pathToRepo\" status)\n\tif (\"$result\" -match \"HEAD detached at \") { throw \"Nothing to pull due to detached HEAD state (not on a branch!)\" }\n\t$pathToRepoName = (Get-Item \"$pathToRepo\").Name\n\n\tWrite-Host \"⏳ (3/4) Pulling remote updates...        \" -noNewline\n        & git -C \"$pathToRepo\" remote get-url origin\n        if ($lastExitCode -ne \"0\") { throw \"'git remote get-url origin' failed with exit code $lastExitCode\" }\n\n\t& git -C \"$pathToRepo\" pull --recurse-submodules=yes\n\tif ($lastExitCode -ne \"0\") { throw \"'git pull' failed with exit code $lastExitCode\" }\n\n\tWrite-Host \"⏳ (4/4) Updating submodules... \"\n\t& git -C \"$pathToRepo\" submodule update --init --recursive\n\tif ($lastExitCode -ne \"0\") { throw \"'git submodule update' failed with exit code $lastExitCode\" }\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Updates pulled into 📂$pathToRepoName repo in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0]) in script line $($_.InvocationInfo.ScriptLineNumber)\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring Ping Latency and Loss with PowerShell\nDESCRIPTION: This PowerShell script measures network latency and packet loss to a list of specified hosts. It takes an optional comma-separated string of hostnames/IPs, defaulting to a predefined list of internet servers. It performs asynchronous ping requests to each host, calculates minimum, maximum, and average roundtrip times for successful pings, and reports the total success/loss count. The script utilizes `.NET` classes like `Net.NetworkInformation.Ping` and `Threading.Tasks.Task` for parallel execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ping.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the ping latency \n.DESCRIPTION\n\tThis PowerShell script measures the ping roundtrip times from the local computer to other computers (10 Internet servers by default).\n.PARAMETER hosts\n\tSpecifies the hosts to check, seperated by commata (default is: amazon.com,bing.com,cnn.com,dropbox.com,github.com,google.com,live.com,meta.com,x.com,youtube.com)\n.EXAMPLE\n\tPS> ./check-ping.ps1\n\t✅ Online with 18ms latency average (13ms...109ms, 0/10 ping loss)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$hosts = \"bing.com,cnn.com,dropbox.com,github.com,google.com,ibm.com,live.com,meta.com,x.com,youtube.com\")\n\ntry {\n\t$hostsArray = $hosts.Split(\",\")\n\t$parallelTasks = $hostsArray | foreach {\n\t\t(New-Object Net.NetworkInformation.Ping).SendPingAsync($_,750)\n\t}\n\t[int]$min = 9999999\n\t[int]$max = [int]$avg = [int]$success = 0\n\t[int]$total = $hostsArray.Count\n\t[Threading.Tasks.Task]::WaitAll($parallelTasks)\n\tforeach($ping in $parallelTasks.Result) {\n\t\tif ($ping.Status -ne \"Success\") { continue }\n\t\t$success++\n\t\t[int]$latency = $ping.RoundtripTime\n\t\t$avg += $latency\n\t\tif ($latency -lt $min) { $min = $latency }\n\t\tif ($latency -gt $max) { $max = $latency }\n\t}\n\t[int]$loss = $total - $success\n\tif ($success -ne 0) {\n\t\t$avg /= $success\n\t\tWrite-Host \"✅ Online with $($avg)ms latency average ($($min)ms...$($max)ms, $loss/$total ping loss)\"\n\t} else {\n\t\tWrite-Host \"⚠️ Offline ($loss/$total ping loss)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Repos Folder in PowerShell Script\nDESCRIPTION: This snippet contains the main logic of the script. It attempts to resolve the path to the 'Repos' folder within the user's home directory, verifies its existence, and then calls an external script ('open-file-explorer.ps1') to open the folder. It includes error handling for cases where the 'Repos' folder is not found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-repos-folder.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Git repositories folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's Git repositories folder.\n.EXAMPLE\n\tPS> ./open-repos-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = Resolve-Path \"$HOME/Repos\"\n\tif (-not(Test-Path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Repos folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Exchange Rates For a Currency Using PowerShell Script\nDESCRIPTION: This PowerShell script defines a command-line tool to display exchange rates for a user-specified currency (default: USD). It declares a 'currency' parameter, fetches XML data from floatrates.com, parses exchange rates, constructs objects with rate, currency name, inverse rate, and timestamp, and outputs a formatted table. It requires network connectivity and support for Invoke-WebRequest; it targets PowerShell environments on Windows or compatible systems. It supports common PowerShell parameters and includes error handling for API and parsing failures.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-exchange-rates.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$currency = \"USD\")\n\nfunction ListExchangeRates { param([string]$currency)\n\t[xml]$ExchangeRates = (invoke-webRequest -uri \"http://www.floatrates.com/daily/$($currency).xml\" -userAgent \"curl\" -useBasicParsing).Content \n\tforeach($Row in $ExchangeRates.channel.item) {\n\t\tnew-object PSObject -property @{ 'Rate' = \"$($Row.exchangeRate)\"; 'Currency' = \"$($Row.targetCurrency) - $($Row.targetName)\"; 'Inverse' = \"$($Row.inverseRate)\"; 'Date' = \"$($Row.pubDate)\" }\n\t}\n}\n\ntry {\n\t\"\"\n\t\"Current Exchange Rates for 1 $currency (source: http://www.floatrates.com)\"\n\t\"================================\"\n\n\tListExchangeRates $currency | format-table -property Rate,Currency,Inverse,Date\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Pinging Local Hosts Asynchronously using PowerShell\nDESCRIPTION: Contains the main implementation logic for the script. It defines a hardcoded list of potential hostnames, initializes a queue, and uses the `System.Net.Networkinformation.Ping` class to send asynchronous ping requests (`SendPingAsync`) to each host. It then processes the queue, waiting for results and printing the names of hosts that respond within the specified timeout, utilizing a `try-catch` block for basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-local-hosts.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Pings local hosts\n.DESCRIPTION\n        This PowerShell script pings the computers in the local network and lists which one are up.\n.EXAMPLE\n        PS> ./ping-local-hosts.ps1\n\t✅ Up: hippo jenkins01 jenkins02 rocket vega \n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$timeout = 600) # ms ping timeout\n\n\ntry {\n\t$names = @('accesspoint','AD','AP','amnesiac','archlinux','auriga','berlin','boston','brother','canon','castor','cisco','echodot','epson','epson2550','epson2815','fedora','fireball','firewall','fritz.box','fritz.repeater','gassensor','gateway','hippo','heizung','hodor','homemanager','io','iphone','jarvis','jenkins','LA','laptop','linux','jupiter','mars','mercury','miami','mobile','none','none-1','none-2','NY','octo','office','officepc','paris','PI','pixel-6a','PC','pluto','printer','proxy','R2D2','raspberry','rocket','rome','router','sentinel','server','shelly','shelly1','smartphone','smartwatch','soundbar','sunnyboy','surface','switch','tablet','tau','tigercat','tolino','TV','ubuntu','vega','venus','xrx','zeus') # sorted alphabetically\n        $queue = [System.Collections.Queue]::new()\n\tforeach($name in $names) {\n\t\t$ping = [System.Net.Networkinformation.Ping]::new()\n\t\t$queue.Enqueue( @{Host=$name; Ping=$ping; Async=$ping.SendPingAsync($name, $timeout)} )\n        }\n\n\t[string]$up = \"\"\n\tWrite-Host \"✅ Up: \" -noNewline\n\twhile ($queue.Count -gt 0) { $obj = $queue.Dequeue()\n\t\ttry { if ($obj.Async.Wait($timeout)) {\n\t\t\t\tif ($obj.Async.Result.Status -ne \"TimedOut\") { Write-Host \"$($obj.Host) \" -noNewline }\n\t\t\t\tcontinue\n\t\t\t}\n\t\t} catch { continue }\n\t\t$queue.Enqueue($obj)\n\t}\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell MergeSort Implementation with Performance Timing\nDESCRIPTION: This PowerShell script defines a class 'MergeSort' with static methods for executing the merge sort algorithm on an array of integers. It includes methods for merging sorted subarrays and recursively dividing the array for sorting, along with an example that times the sorting operation using Stopwatch and outputs the elapsed time. Dependencies include PowerShell environment support and .NET classes like System.Diagnostics.Stopwatch.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-MergeSort.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Measures the speed of MergeSort\n.DESCRIPTION\n        This PowerShell script measures the speed of the MergeSort algorithm.\n        MergeSort is an efficient, general-purpose, and comparison-based sorting algorithm.\n\tMost implementations produce a stable sort, which means that the order of equal elements\n\tis the same in the input and output. Merge sort is a divide-and-conquer algorithm that\n\twas invented by John von Neumann in 1945. A detailed description and analysis of bottom-up\n\tmerge sort appeared in a report by Goldstine and von Neumann as early as 1948.\n.PARAMETER numIntegers\n        Specifies the number of integers to sort\n.EXAMPLE\n        PS> ./measure-MergeSort.ps1\n\t🧭 0.378 sec to sorting 1000 integers by MergeSort\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass MergeSort {\n\n    static Merge($theArray, $tempArray, $leftPos, $rightPos, $rightEnd) {\n        $leftEnd = $rightPos - 1\n        $tmpPos = $leftPos\n        $numElements = $rightEnd - $leftPos + 1\n\n        while (($leftPos -le $leftEnd) -and ($rightPos -le $rightEnd)) {\n            if ($theArray[$leftPos].CompareTo($theArray[$rightPos]) -le 0) {\n                $tempArray[$tmpPos++] = $theArray[$leftPos++]\n            }\n            else {\n                $tempArray[$tmpPos++] = $theArray[$rightPos++]\n            }\n        }\n\n        while ($leftPos -le $leftEnd) { $tempArray[$tmpPos++] = $theArray[$leftPos++] }\n        while ($rightPos -le $rightEnd) { $tempArray[$tmpPos++] = $theArray[$rightPos++] }\n\n        for ($i = 0; $i -lt $numElements; $i++, $rightEnd--) {\n            $theArray[$rightEnd] = $tempArray[$rightEnd]\n        }\n    }\n\n    static Sort($theArray) {\n        $tempArray = New-Object Object[] $theArray.Count\n        [MergeSort]::Sort($theArray, $tempArray, 0, ($theArray.Count - 1))\n    }\n\n    static Sort($theArray, $tempArray, $left, $right) {\n        if ($left -lt $right) {\n\n            $center = [Math]::Floor(($left + $right) / 2)\n\n            [MergeSort]::Sort($theArray, $tempArray, $left, $center)\n            [MergeSort]::Sort($theArray, $tempArray, ($center + 1), $right)\n\n            [MergeSort]::Merge($theArray, $tempArray, $left, ($center + 1), $right)\n        }\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[MergeSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by MergeSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Drive Space Query and Status Output\nDESCRIPTION: This script queries all file system drives, calculates free and used space, and composes a status message. It indicates drive fullness through icons and messages, and handles errors gracefully by capturing invocation info and line numbers.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-drives.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tWrite-Progress \"Querying drives...\"\n\t$drives = Get-PSDrive -PSProvider FileSystem\n\tWrite-Progress -completed \"Done.\"\n\t$status = \"✅\"\n\t$reply = \"Drive \"\n\tforeach($drive in $drives) {\n\t\t$details = (Get-PSDrive $drive.Name)\n\t\tif ($IsLinux) { $name = $drive.Name } else { $name = $drive.Name + \":\" }\n\t\t[int64]$free = $details.Free\n \t\t[int64]$used = $details.Used\n \t\t[int64]$total = ($used + $free)\n \t\tif ($reply -ne \"Drive \") { $reply += \", \" }\n \t\tif ($total -eq 0) {\n \t\t\t$reply += \"$name is empty\"\n \t\t} elseif ($free -eq 0) {\n \t\t\t$status = \"⚠️\"\n \t\t\t$reply += \"$name with ($(Bytes2String $total)) is FULL\"\n \t\t} elseif ($free -lt $minLevel) {\n \t\t\t$status = \"⚠️\"\n \t\t\t$reply += \"$name nearly full ($(Bytes2String $free) of $(Bytes2String $total) left)\"\n \t\t} else {\n \t\t\t[int64]$percent = ($used * 100) / $total\n \t\t\t$reply += \"$name uses $(Bytes2String $used) ($percent%) of $(Bytes2String $total)\"\n \t\t}\n\t}\n\tWrite-Host \"$status $reply\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Working with Variables in PowerShell\nDESCRIPTION: Shows how to initialize, assign, flip, and strongly type variables in PowerShell. It also covers retrieving, creating, and removing variables, including those with constant or read-only options.  Requires awareness of PowerShell scoping rules.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$a = 0                                                    # Initialize a variable\n[int]$a = 'Paris'                                         # Initialize a variable, with the specified type (throws an exception)\n[string]$a = 'Paris'                                      # Initialize a variable, with the specified type (doesn't throw an exception)\n$a,$b = 0 or $a,$b = 'a','b'                              # Assign multiple variables\n$a,$b = $b,$a                                             # Flip variables\n$var=[int]5                                               # Strongly typed variable\n\nGet-Command -Name *varia*                                 # Get a list of commands related to variable management\n\nGet-Variable                                              # Get an array of objects, representing the variables in the current and parent scopes \nGet-Variable | ? { $PSItem.Options -contains 'constant' } # Get variables with the \"Constant\" option set\nGet-Variable | ? { $PSItem.Options -contains 'readonly' } # Get variables with the \"ReadOnly\" option set\n\nNew-Variable -Name FirstName -Value Trevor\nNew-Variable FirstName -Value Trevor -Option Constant     # Create a constant variable, that can only be removed by restarting PowerShell\nNew-Variable FirstName -Value Trevor -Option ReadOnly     # Create a variable that can only be removed by specifying the -Force parameter on Remove-Variable\n\nRemove-Variable -Name firstname                           # Remove a variable, with the specified name\nRemove-Variable -Name firstname -Force                    # Remove a variable, with the specified name, that has the \"ReadOnly\" option set\n```\n\n----------------------------------------\n\nTITLE: Querying Current Branch\nDESCRIPTION: This snippet queries the current branch of the Git repository. It uses the `git -C \"$FullPath\" branch --show-current` command. It checks the exit code to ensure the command was successful; if unsuccessful, an error is thrown.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (4/10) Querying current branch...       \" -noNewline\n\t& git -C \"$FullPath\" branch --show-current\n\tif ($lastExitCode -ne \"0\") { throw \"'git branch --show-current' failed with exit code $lastExitCode\" }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PowerShell Script to Open Snap Store Website\nDESCRIPTION: This example shows the basic usage pattern for executing the open-snap-store-website.ps1 script from a PowerShell console. It demonstrates calling the script without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-snap-store-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-snap-store-website\n```\n\n----------------------------------------\n\nTITLE: Converting Images to Blurred Frames Using PowerShell and ImageMagick\nDESCRIPTION: This PowerShell script converts a given image file into a series of progressively blurred frames by drawing circles with varying radii using ImageMagick 6. It requires the 'convert-im6' utility to be installed and available in the system's PATH. The script parameters allow specification of the source image file path, target output directory, image width and height dimensions, and the number of frames to generate. It validates input paths, measures execution time, and handles errors with descriptive messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-image2blurred-frames.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts an image into blurred frames\n.DESCRIPTION\n\tThis PowerShell script converts a single image file into a series of blurred frames in a target dir.\n\tRequires ImageMagick 6.\n.PARAMETER ImageFile\n\tSpecifies the path to the image file\n.PARAMTER TargetDir\n\tSpecifies the path to the target folder\n.EXAMPLE\n\tPS> ./convert-image2blurred-frames C:\\photo.jpg C:\\Temp\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$ImageFile = \"\", [string]$TargetDir = \"\", [int]$ImageWidth = 1920, [int]$ImageHeight = 1393, [int]$Frames = 600)\n\ntry {\n\tif ($ImageFile -eq \"\") { $ImageFile = Read-Host \"Enter file path to image file\" }\n\tif ($TargetDir -eq \"\") { $TargetDir = Read-Host \"Enter file path to target directory\" }\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ (1/$Frames) Checking image file...\"\n\tif (!(Test-Path \"$ImageFile\" -pathType leaf)) { throw \"Can't access image file: $ImageFile\" }\n\t$Basename = (Get-Item \"$ImageFile\").Basename\n\n\t\"⏳ (2/$Frames) Searching for ImageMagick 6...\"\n\t& convert-im6 --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'convert-im6' - make sure ImageMagick 6 is installed and available\" }\n\n\t[int]$centerX = $ImageWidth / 2 \n\t[int]$centerY = $ImageHeight / 2\n\t[int]$x = 0\n\t[float]$increment = $centerX / $Frames\n\tfor ($i = 0; $i -lt $Frames; $i++) {\n\t\t$FrameNo = '{0:d4}' -f $i\n\t\t$TargetFile = \"$TargetDir/frame_$($FrameNo).jpg\"\n\t\t\"⏳ ($i/$Frames) Converting with r=$($centerX - $x) to $TargetFile...\"\n\t\t& convert-im6 -stroke black -strokewidth 9 -fill white -draw \"circle $centerX,$centerY $x,$centerY\" \"$ImageFile\" \"$TargetFile\"\n\t\t$x += $increment\n\t}\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ converted image $ImageFile to $Frames blurred frames in 📂$TargetDir in $Elapsed sec.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Define Parameters for List-Empty-Files.ps1 PowerShell Script\nDESCRIPTION: This code defines the parameter for the list-empty-files.ps1 script. The `-path` parameter specifies the directory tree to scan for empty files. It defaults to the current working directory ($PWD).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-empty-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-empty-files.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree (default is current working dir)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell 'clean-repos.ps1' Script for Cleaning Git Repositories\nDESCRIPTION: This PowerShell script iterates through all Git repositories in a specified directory, cleans untracked files including in submodules, and reports progress and errors. It requires Git to be installed and accessible in the system environment. Key parameters include the parent directory path, and the script provides verbose feedback and error handling for robust operation. The core functionality involves executing Git commands to perform cleaning operations across multiple repositories.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clean-repos.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCleans all Git repositories in a folder from untracked files \n.DESCRIPTION\n\tThis PowerShell script cleans all Git repositories in a folder from untracked files (including submodules).\n.PARAMETER parentDir\n\tSpecifies the path to the parent folder (current working dir by default)\n.EXAMPLE\n\tPS> ./clean-repos.ps1 C:\\MyRepos\n\t⏳ (1) Searching for Git executable...    git version 2.40.1\n\t⏳ (2) Checking parent folder 📂Repos...  28 subfolders found\n\t⏳ (3/30) Cleaning 📂base256unicode...\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$parentDir = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1) Searching for Git executable...    \" -noNewline\n        & git --version\n        if ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n        $parentDirName = (Get-Item \"$ParentDir\").Name\n        Write-Host \"⏳ (2) Checking parent folder 📂$parentDirName...  \" -noNewline\n        if (-not(Test-Path \"$ParentDir\" -pathType container)) { throw \"Can't access folder: $ParentDir\" }\n        $folders = (Get-ChildItem \"$ParentDir\" -attributes Directory)\n        $numFolders = $folders.Count\n        Write-Host \"$numFolders subfolders found\"\n\n\t[int]$Step = 2\n\tforeach ($folder in $folders) {\n\t\t$FolderName = (Get-Item \"$folder\").Name\n\t\t$Step++\n\t\t\"⏳ ($Step/$($numFolders + 2)) Cleaning 📂$FolderName...\"\n\n\t\t& git -C \"$folder\" clean -xfd -f # force + recurse into dirs + don't use the standard ignore rules\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git clean -xfd -f' failed with exit code $lastExitCode\" }\n\n\t\t& git -C \"$folder\" submodule foreach --recursive git clean -xfd -f \n\t\tif ($lastExitCode -ne \"0\") { throw \"'git clean -xfd -f' in submodules failed with exit code $lastExitCode\" }\n\t}\n\t[new]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Cleaned $numFolders Git repos under 📂$parentDirName in $elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Scan-Folder Script (PowerShell)\nDESCRIPTION: Shows an example of how to run the scan-folder.ps1 script.  It scans the 'C:\\Windows' directory for malware using the configured security tool (ESET or Windows Defender).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/scan-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./scan-folder.ps1 C:\\Windows\n⏳ Scanning C:\\Windows with ESET Endpoint Security...\n...\n```\n\n----------------------------------------\n\nTITLE: Install 9 ZIP via winget using PowerShell\nDESCRIPTION: This PowerShell script block handles the installation of the '9 ZIP' application from the Microsoft Store. It utilizes the `winget` command-line tool with specific arguments (`--source msstore`, `--accept-package-agreements`, `--accept-source-agreements`) to perform the installation silently. A `try-catch` block is implemented to manage potential errors during the `winget` execution, specifically checking the `$lastExitCode`. Upon successful installation, it exits with code 0; otherwise, it displays an error message including the line number where the error occurred and exits with code 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-nine-zip.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls 9 ZIP\n.DESCRIPTION\n\tThis PowerShell script installs 9 ZIP from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-nine-zip.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing 9 Zip, please wait...\"\n\n\t& winget install \"9 ZIP - open rar, zip, 7zip, gzip\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"9 Zip installed successfuly.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing DNS Servers with Data Import and Performance Metrics in PowerShell\nDESCRIPTION: This function, List-DNS-Servers, imports DNS provider data from a CSV file, iterates over each entry, and uses MeasureDNSServer to obtain latency metrics. It displays progress indicators during data load and outputs a formatted table with DNS provider, IPv4 addresses, and latency measurements, including error handling for robust execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dns-servers.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLoads DNS server data from CSV and measures latency for each.\n.DESCRIPTION\n\tImports DNS server data from a CSV file located relative to script root, then measures each server's latency using the MeasureDNSServer function. Results are displayed in a formatted table with progress updates. Includes try-catch for error management.\n#>\nfunction List-DNS-Servers {\n\tWrite-Progress \"Loading data/public-dns-servers.csv...\"\n\t$table = Import-CSV \"$PSScriptRoot/../data/public-dns-servers.csv\"\n\tWrite-Progress -completed \"Done.\"\n\tforeach($row in $table) { MeasureDNSServer $row.PROVIDER $row.IPv4_PRI $row.IPv4_SEC }\n}\n \ntry {\n\tList-DNS-Servers | Format-Table -property @{e='DNS PROVIDER';width=50},@{e='IPv4 ADDRESSES';width=32},@{e='LATENCY';width=15}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: List Encrypted Files Script Parameters - PowerShell\nDESCRIPTION: This section defines the parameters for the list-encrypted-files.ps1 script. The main parameter is '-path', which specifies the directory to scan for encrypted files. If no path is provided, the script defaults to the current working directory ($PWD).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-encrypted-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-encrypted-files.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree (default is current working dir)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for XML File Checker\nDESCRIPTION: This snippet outlines the parameters accepted by the `check-xml-files.ps1` script. The primary parameter is `-path`, which specifies the root directory for the scan. It defaults to the current working directory (`$PWD`). The script also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-xml-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-xml-files.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree (current working dir by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to List Active Network Connections\nDESCRIPTION: Complete script that lists all active network connections on the local computer using the netstat -n command with error handling and standard PowerShell comment-based help.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-connections.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists network connections\n.DESCRIPTION\n\tThis PowerShell script lists all active network connections on the local computer.\n.EXAMPLE\n\tPS> ./list-network-connections.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t& netstat -n\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Command for Executing show-lightnings.ps1 in PowerShell\nDESCRIPTION: This code snippet shows an example invocation of the show-lightnings.ps1 script from the PowerShell prompt, demonstrating its intended interactive usage by simply running ./show-lightnings without further arguments. The snippet has no dependencies and is purely illustrative, helping users understand how to launch the script; it produces no outputs or side effects apart from executing the script as documented.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-lightnings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-lightnings\n```\n\n----------------------------------------\n\nTITLE: Detecting Platform and System Architecture (PowerShell)\nDESCRIPTION: This script section detects the running OS and processor architecture to select appropriate PowerShell package names and installation steps. It uses uname for Linux, environment variables and PowerShell\\'s Get-ComputerInfo for Windows, and sets an architecture variable accordingly. Inputs: global platform/environment variables. Output: string variable $architecture ('x64', 'arm64', etc.). Dependencies: uname (Linux), PowerShell environment variables, and knowledge of platform differences. Needed for cross-OS installation logic.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($IsLinux) {\n    $platform = (uname -i)\n    if ($platform -eq \"x86_64\") { $architecture = \"x64\" }\n    elseif ($platform -eq \"x86_32\") { $architecture = \"x86\" }\n    elseif ($platform -eq \"aarch64\") { $architecture = \"arm64\" }\n    elseif ($platform -eq \"aarch32\") { $architecture = \"arm32\" }\n    else { Write-Host \"Unknown platform $platform\" }\n} elseif (-not $IsWinEnv) {\n    $architecture = \"x64\"\n} elseif ($(Get-ComputerInfo -Property OsArchitecture).OsArchitecture -eq \"ARM 64-bit Processor\") {\n    $architecture = \"arm64\"\n} else {\n    switch ($env:PROCESSOR_ARCHITECTURE) {\n        \"AMD64\" { $architecture = \"x64\" }\n        \"x86\" { $architecture = \"x86\" }\n        default { throw \"PowerShell package for OS architecture '$_' is not supported.\" }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Screen Clip Application in PowerShell\nDESCRIPTION: A PowerShell script that launches the Windows Screen Clip application using the ms-screenclip: protocol handler. The script includes error handling to capture and display any issues that occur during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-screen-clip.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches Screen Clip\n.DESCRIPTION\n\tThis script launches the Screen Clip application.\n.EXAMPLE\n\tPS> ./open-screen-clip\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process ms-screenclip:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Old Git Branches - Script Definition in PowerShell\nDESCRIPTION: This PowerShell script retrieves and displays old, merged Git branches based on the provided repository path and search pattern.  It checks for the Git executable, validates the repository path, queries for merged branches, and filters based on commit date. The script takes the path to the Git repository and a search pattern as parameters, with defaults provided. It outputs the last commit date and branch name.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-old-branches.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists old Git branches\n.DESCRIPTION\n\tThis PowerShell script lists branches in a Git repository matching: (1) search pattern, (2) already merged, (3) older than 2024\n.PARAMETER pathToRepo\n\tSpecifies the path to the Git repository (current working directory by default)\n.EXAMPLE\n\tPS> ./list-old-branches.ps1 C:\\Repos\\UFA\nq#>\n\nparam([string]$pathToRepo = \"$PWD\", [string]$searchPattern = \"origin/dev/*\")\n\ntry {\n\t\"(1/3) Searching for Git executable...    \"\n        & git --version\n        if ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n        \"(2/3) Checking local repository...\"\n        if (!(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access repo folder: $pathToRepo\" }\n\n\t\"(3/3) Querying already merged branches with name '$searchPattern'...\n\"\t$branches = $(git -C \"$pathToRepo\" branch --list --remotes --no-color --no-column --merged HEAD \"$searchPattern\")\n\tif ($lastExitCode -ne \"0\") { throw \"'git branch --list' failed\" }\n\n\t\"\n\"\t\"LAST COMMIT DATE   BRANCH NAME\"\n\t\"----------------   -----------\"\n\tforeach($branch in $branches) {\n\t\t$branchName = $branch.Trim() # remove leading spaces\n\n\t\t$dateOfLastCommit = (git -C \"$pathToRepo\" log -1 --format=%cs $branchName)\n\t\tif ($dateOfLastCommit -like \"2024-*\") { continue} # too young\n\n\t\t\"$dateOfLastCommit         $branchName\"\n\t}\n\texit 0 # success\n} catch {\n\tWrite-Error \"Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining minMagnitude parameter\nDESCRIPTION: This snippet defines the `minMagnitude` parameter for the script. It's a floating-point number with a default value of 5.5. This parameter is used to filter the earthquake data retrieved from the USGS API, showing only those earthquakes with a magnitude equal to or greater than the specified value.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-earthquakes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([float]$minMagnitude=5.5)\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage and Parameter Documentation\nDESCRIPTION: This snippet provides usage information and documents the supported common parameters for the show-lightnings.ps1 script. It details the command-line way to invoke the script and lists parameters such as Verbose, Debug, ErrorAction, WarningVariable, and others, serving as guidance for users or developers integrating this script in larger automation. There are no programmatic dependencies, but it assumes familiarity with PowerShell and its parameter conventions; no direct inputs or outputs are generated except documentation for end-users.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-lightnings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/show-lightnings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Windows User Languages in PowerShell\nDESCRIPTION: Defines a PowerShell function ListInstalledLanguages that retrieves the list of installed Windows user languages using Get-WinUserLanguageList. It constructs custom PSObjects for each language containing properties such as Tag, Autonym, English name, Spellchecking, and Handwriting. The script supports common PowerShell parameters, outputs the results as a formatted table, and includes error handling to display script line errors and exit codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-installed-languages.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the installed languages\n.DESCRIPTION\n\tThis PowerShell script lists the installed languages.\n.EXAMPLE\n\tPS> ./list-installed-languages.ps1\n\n\tTag   Autonym               English Spellchecking Handwriting\n\t---   -------               ------- ------------- -----------\n\tde-DE Deutsch (Deutschland) German  True          False\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction ListInstalledLanguages { \n\t$List = Get-WinUserLanguageList\n\tforeach ($Item in $List) {\n\t\tNew-Object PSObject -property @{ 'Tag' = \"$($Item.LanguageTag)\"; 'Autonym' = \"$($Item.Autonym)\"; 'English' = \"$($Item.EnglishName)\"; 'Spellchecking' = \"$($Item.Spellchecking)\"; 'Handwriting' = \"$($Item.Handwriting)\" }\n\t}\n}\n\ntry {\n\tListInstalledLanguages | Format-Table -property Tag,Autonym,English,Spellchecking,Handwriting\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Functions\nDESCRIPTION: Shows how to define both basic and advanced functions in PowerShell, including the use of `CmdletBinding` attribute and `BEGIN`, `PROCESS`, and `END` blocks.  Understanding advanced functions requires knowledge of parameter sets and pipeline processing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction add ($a, $b) { $a + $b }                         # A basic PowerShell function\n\nfunction Do-Something {                                   # A PowerShell Advanced Function, with all three blocks declared: BEGIN, PROCESS, END\n  [CmdletBinding]()]\n  param ()\n  begin { }\n  process { }\n  end { }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Microsoft Edge using PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script automates the process of uninstalling Microsoft Edge from the local computer using the 'winget uninstall' command. It requires 'winget' (Windows Package Manager) to be installed and available in the system PATH. The script supports standard PowerShell common parameters for logging and error control. It prints status messages, checks the exit code, throws an error if uninstallation fails, and exits with an appropriate status code. Input: no required parameters; Output: console status messages and process exit code. The script only works if Edge is installed and 'winget' is accessible, and may require administrative privileges.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-edge.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t\"Uninstalling Microsoft Edge, please wait...\"\n\n\t& winget uninstall \"Microsoft Edge Browser\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Edge, is it installed?\" }\n\n\t\"Microsoft Edge is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Public IP Address and Location with PowerShell Script\nDESCRIPTION: This PowerShell script determines the public IPv4 and IPv6 addresses and geolocation (city, country) of the current machine by querying ifconfig.co using curl or curl.exe, adapting based on the detected platform (Linux or Windows). The script handles empty responses gracefully, prints the gathered details in a summary line, and returns a status code for success or error. Dependencies include the presence of curl or curl.exe; network access is required, and expected output is a line listing both addresses and location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-internet-ip.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Lists the Internet IP address\n.DESCRIPTION\n        This PowerShell script queries all public IP address information and prints it.\n.EXAMPLE\n        PS> ./list-internet-ip.ps1\n\t✅ Internet IP 185.72.229.161, 2003:f2:6128:fd01:e543:601:30c2:a028 near Munich, Germany\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t[string]$publicIPv4 = (curl -4 --silent ifconfig.co)\n\t\t[string]$publicIPv6 = (curl -6 --silent ifconfig.co)\n\t\t[string]$city = (curl --silent ifconfig.co/city)\n\t\t[string]$country = (curl --silent ifconfig.co/country)\n\t} else {\n\t\t[string]$publicIPv4 = (curl.exe -4 --silent ifconfig.co)\n\t\t[string]$publicIPv6 = (curl.exe -6 --silent ifconfig.co)\n\t\t[string]$city = (curl.exe --silent ifconfig.co/city)\n\t\t[string]$country = (curl.exe --silent ifconfig.co/country)\n\t}\n\tif (\"$publicIPv4\" -eq \"\") { $publicIPv4 = \"no IPv4\" }\n\tif (\"$publicIPv6\" -eq \"\") { $publicIPv6 = \"no IPv6\" }\n\tif (\"$city\" -eq \"\")       { $city = \"unknown city\" }\n\tif (\"$country\" -eq \"\")    { $country = \"unknown country\" }\n\t\"✅ Internet IP $publicIPv4, $publicIPv6 near $city, $country\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Value with Unit and Range Visualization in PowerShell\nDESCRIPTION: This snippet defines the WriteValueInRange function, which outputs a value annotated with its unit and visual indication of relation to configurable 'red' and 'yellow' threshold ranges. It accepts parameters for value, unit, warning (yellow) range, critical (red) range, and formats the output bar, coloring the value based on where it falls. Dependencies: uses Write-Host and string operations but no external modules. Parameters: value (numeric), unit (string), redMin, yellowMin, yellowMax, redMax (numeric thresholds). Input is the value and range; output is a colored, formatted textual bar in the console. Limitations: Intended for console output, expects parameter types as documented.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-host.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction WriteValueInRange([float]$value, [string]$unit, [float]$redMin, [float]$yellowMin, [float]$yellowMax, [float]$redMax) {\n\t$line = \"------------------------------------------------\"\n\t$text = \"[$redMin$($value)$unit $redMax]\"\n\t[float]$total = 20.0 - $text.Length\n\tif ($value -gt $redMax) {\n\t\tWrite-Host \"[$redMin$($line.Substring(0, $total))$redMax]\" -noNewline\n\t\tWrite-Host \"$($value)$unit \" -noNewline -foregroundColor red\n\t} elseif ($value -lt $redMin) {\n\t\tWrite-Host \"$($value)$unit\" -noNewline -foregroundColor red\n\t\tWrite-Host \"[$redMin$($line.Substring(0, $total))$redMax] \" -noNewline\n\t} else {\n\t\t[float]$leftSide = (($value - $redMin) * $total) / ($redMax - $redMin)\n\t\tif ($leftSide -lt 1.0) { $leftSide = 1.0 }\n\t\tif ($leftSide -gt ($total - 1.0)) { $leftSide = $total - 1.0 }\n\t\tWrite-Host \"[$redMin$($line.Substring(0, $leftSide))\" -noNewline\n\t\tif (($value -lt $yellowMin) -or ($value -gt $yellowMax)) {\n\t\t\tWrite-Host \"$($value)$unit\" -noNewline -foregroundColor yellow\n\t\t} else {\n\t\t\tWrite-Host \"$($value)$unit\" -noNewline -foregroundColor green\n\t\t}\n\t\tWrite-Host \"$($line.Substring(0, $total - $leftSide + 0.49))$redMax] \" -noNewline\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Script Parameters in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the install-ssh-server.ps1 script and highlights its support for standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. Users can leverage these to control script output or error handling as needed. No additional dependencies are required beyond PowerShell itself; inputs consist of optional common parameters, and outputs reflect standard execution details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-ssh-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-ssh-server.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Usage for Chrome Launch Script in PowerShell\nDESCRIPTION: This snippet defines the accepted parameters for 'open-chrome.ps1', detailing all command-line options, their types, and defaults. It introduces the 'URL' string parameter with its options, default value ('http://www.fleschutz.de'), and notes support for standard PowerShell common parameters such as Verbose and Debug. Intended as usage documentation, this does not execute code but informs the user of expected inputs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-chrome.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-chrome.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies an optional URL\n    \n    Required?                    false\n    Position?                    1\n    Default value                http://www.fleschutz.de\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Software PowerShell\nDESCRIPTION: This is the core script logic that queries the Windows registry for installed software. It retrieves properties from standard uninstall registry paths (HKLM and HKCU for both 32-bit and 64-bit applications) and selects 'DisplayName', 'DisplayVersion', and 'InstallDate', formatting the output as an auto-sized table. The script includes basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-installed-software.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the installed software\n.DESCRIPTION\n\tThis PowerShell script lists the installed software (except Windows Store apps).\n.EXAMPLE\n\tPS> ./list-installed-software.ps1\n\n\tDisplayName                            DisplayVersion                  InstallDate\n\t-----------                            --------------                  -----------\n\tCrystalDiskInfo 9.1.1                  9.1.1                           20230718\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-ItemProperty HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*, HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\*, HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | select-object DisplayName,DisplayVersion,InstallDate | Format-Table -autoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directories\nDESCRIPTION: These commands create new directories in the filesystem. `New-Item` with `-ItemType Directory` is used to create a directory with a specified path. `mkdir` is an alias for `New-Item` with the same functionality. The commands demonstrate two ways to achieve the same outcome.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Item -Path c:\\test -ItemType Directory                  # Create a directory\nmkdir c:\\test2                                              # Create a directory (short-hand)\n```\n\n----------------------------------------\n\nTITLE: Install GitHub CLI\nDESCRIPTION: This PowerShell script installs the GitHub CLI on macOS, Linux, or Windows.  It uses brew on macOS, apt on Linux, and winget on Windows. The script checks for installation success and provides instructions for authentication upon successful installation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-github-cli.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls GitHub CLI\n.DESCRIPTION\n\tThis PowerShell script installs the GitHub command-line interface (CLI).\n.EXAMPLE\n\tPS> ./install-github-cli.ps1\n\t⏳ Installing GitHub CLI...\n\t✔ GitHub CLI installed successfully in 17s - to authenticate execute: 'gh auth login'.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Installing GitHub CLI...\"\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsMacOS) {\n\t\t& brew install gh\n\t} elseif ($IsLinux) {\n\t\t& sudo apt install gh\n\t} else {\n\t\t& winget install --id GitHub.cli\n\t\tif ($lastExitCode -ne \"0\") { throw \"Installation of GitHub CLI failed, maybe it's already installed.\" }\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ GitHub CLI installed successfully in $($elapsed)s - to authenticate execute: 'gh auth login'\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Change Directory to Home Folder\nDESCRIPTION: This PowerShell script retrieves the user's home directory path, verifies its existence, and sets the current location to this directory. It supports common parameters for verbose or debug output and includes error handling that reports script line numbers in case of failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-home.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t$path = Resolve-Path \"~\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Home folder at $path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Folder Synchronization using Robocopy in PowerShell\nDESCRIPTION: This is the main script block. It defines parameters, prompts for paths if not provided, measures execution time, constructs and executes the `robocopy.exe` command with `/MIR` for mirroring and other options for logging/display, checks the `robocopy` exit code for failure, and reports the outcome or any errors encountered during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/sync-folder.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSyncronizes two folders\n.DESCRIPTION\n\tThis PowerShell script synchronizes (mirrors) the content of 2 directory trees by using Robocopy.\n\tTypical use cases are backups: at first everything is copied (full backup), afterward only changes are copied (incremental backup).\n\tIMPORTANT NOTE: Make sure the target path is correct because the content gets replaced (DATA LOSS)!\n.PARAMETER sourcePath\n\tSpecifies the path to the source folder\n.PARAMETER targetPath\n\tSpecifies the path to the target folder\n.EXAMPLE\n\tPS> ./sync-folder.ps1 C:\\MyPhotos D:\\Backups\\MyPhotos\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$sourcePath = \"\", [string]$targetPath = \"\")\n\ntry {\n\tif ($sourcePath -eq \"\") { $sourcePath = Read-Host \"Enter the path to the source folder\" }\n\tif ($targetPath -eq \"\") { $targetPath = Read-Host \"Enter the path to the target folder\" }\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$robocopyParameters = $sourcePath, $targetPath, '/MIR', '/FFT', '/NDL', '/NP', '/NS'\n\t# /MIR = mirror a directory tree\n\t# /FFT = assume FAT file times (2-second granularity)\n\t# /NDL = don't log directory names\n\t# /NP  = don't display percentage copied\n\t# /NS  = don't log file sizes\n\n\trobocopy.exe $robocopyParameters\n\tif ($lastExitCode -gt 3) { throw 'Robocopy failed.' }\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Synced 📂$sourcePath to 📂$targetPath in $elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Common Parameters in PowerShell Script\nDESCRIPTION: This snippet indicates that the `check-pending-reboot.ps1` script supports standard PowerShell common parameters. These parameters, such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allow users to control script execution details like output verbosity and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-pending-reboot.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of show-dallas-city.ps1\nDESCRIPTION: Provides an example command to run the script, indicating how to invoke it from the PowerShell prompt. The example does not include parameters, implying default execution.\n\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dallas-city.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n## Example\n```powershell\nPS> ./show-dallas-city\n```\n\n```\n\n----------------------------------------\n\nTITLE: Locking Desktop Using PowerShell\nDESCRIPTION: This PowerShell script locks the local computer desktop immediately by invoking the Windows API 'LockWorkStation' function through rundll32.exe. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for enhanced script control. The script outputs a friendly message upon execution, handles errors gracefully by displaying the error line and message, and exits with appropriate status codes indicating success (0) or failure (1). Dependencies include the Windows user32.dll and PowerShell environment to run the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/lock-desktop.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLocks the desktop\n.DESCRIPTION\n\tThis PowerShell script locks the local computer desktop immediately.\n.EXAMPLE\n\tPS> ./lock-desktop.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Bye bye.\"\n\trundll32.exe user32.dll,LockWorkStation\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Package on Windows, Linux, and macOS - PowerShell\nDESCRIPTION: This snippet handles installation of the downloaded PowerShell package, including directory creation, package extraction, and silent MSI install options based on OS environment and architecture. It supports MSI/MSIX installations on Windows (with quiet install arguments and error handling), uses a custom internal archive extraction for non-MSI Windows installs, and uses native tar extraction on Linux/macOS. Key dependencies include Start-Process for MSI installs, Expand-ArchiveInternal for extraction, and tar for Unix-like extraction. Inputs include flags for MSI usage, architecture type, and quiet installation preferences. Outputs include installed files in a temporary 'new' directory ready for final deployment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n$contentPath = Join-Path -Path $tempDir -ChildPath \"new\"\n\n$null = New-Item -ItemType Directory -Path $contentPath -ErrorAction SilentlyContinue\nif ($IsWinEnv) {\n    if ($UseMSI -and $architecture -eq \"arm64\") {\n        Add-AppxPackage -Path $packagePath\n    } elseif ($UseMSI -and $Quiet) {\n        Write-Verbose \"Performing quiet install\"\n        $ArgumentList=@(\"/i\", $packagePath, \"/quiet\")\n        if($MSIArguments) {\n            $ArgumentList+=$MSIArguments\n        }\n        $process = Start-Process msiexec -ArgumentList $ArgumentList -Wait -PassThru\n        if ($process.exitcode -ne 0) {\n            throw \"Quiet install failed, please rerun install without -Quiet switch or ensure you have administrator rights\"\n        }\n    } elseif ($UseMSI) {\n        if($MSIArguments) {\n            Start-Process $packagePath -ArgumentList $MSIArguments -Wait\n        } else {\n            Start-Process $packagePath -Wait\n        }\n    } else {\n        Expand-ArchiveInternal -Path $packagePath -DestinationPath $contentPath\n    }\n} else {\n    Write-Host \"⏳ (3/4) Extracting package to: $contentPath...\"\n    tar zxf $packagePath -C $contentPath\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking File Download with wget in PowerShell Script\nDESCRIPTION: This PowerShell script accepts a URL as a parameter, verifies wget is available, and invokes it to download files using specific options such as --mirror and --convert-links. The script includes error handling, command exit code checks, and prompts the user if no URL is specified. Required dependencies are wget installed and available on the system path. The main parameter is -URL, which should contain the target file URL; it also supports common PowerShell parameters. The script outputs success with timing or a formatted error message, and is designed to be run in PowerShell environments with wget available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/download-file.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDownloads a file from an URL\n.DESCRIPTION\n\tThis PowerShell script downloads a file from the given URL\n.PARAMETER URL\n\tSpecifies the URL where to download from\n.EXAMPLE\n\tPS> ./download-file.ps1 https://www.cnn.com/index.html\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$URL = \"\")\n\ntry {\n\tif ($URL -eq \"\") { $URL = read-host \"Enter file URL to download\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t& wget --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'wget' - make sure wget is installed and available\" }\n\n\t& wget --mirror --convert-links --adjust-extension --page-requisites --no-parent $URL --directory-prefix . --no-verbose\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'wget --mirror $URL'\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ downloaded file from $URL in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing the watch-news.ps1 News Monitoring Script\nDESCRIPTION: The complete PowerShell script for monitoring news headlines. It defines parameters for the RSS feed URL and refresh interval. A function `PrintLatestHeadlines` parses the XML content, compares timestamps, and prints new headlines. The main part uses a `do-while` loop to periodically fetch the RSS feed using `Invoke-WebRequest`, calls the print function, and sleeps for the specified interval. Basic error handling is included using a `try-catch` block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-news.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWatch the news\n.DESCRIPTION\n\tThis PowerShell script continuously lists the latest headlines by using a RSS (Really Simple Syndication) feed.\n.PARAMETER URL\n\tSpecifies the URL to the RSS feed (Yahoo World News by default)\n.PARAMETER lines\n\tSpecifies the initial number of headlines\n.PARAMETER timeInterval\n\tSpecifies the time interval in seconds between two Web requests (60 seconds by default)\n.EXAMPLE\n\tPS> ./watch-news.ps1\n\n\t UTC   HEADLINES           (source: https://www.yahoo.com/news/world)\n\t ---   ---------\n\t14:29  Niger coup: Ecowas deadline sparks anxiety in northern Nigeria\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$URL = \"https://news.yahoo.com/rss/world\", [int]$timeInterval = 60) # in seconds\n\nfunction PrintLatestHeadlines([xml]$content, [string]$latestTimestamp, [string]$icon) {\n\t$items = $content.rss.channel.item\n\t[array]::Reverse($items)\n\t$newLatest = $latestTimestamp\n\tforeach($item in $items) {\n\t\t$pubDate = $item.pubDate\n\t\tif ($pubDate -le $latestTimestamp) { continue }\n\t\t$title = $item.title -replace \"â\",\"'\"\n\t\t$time = $pubDate.Substring(11, 5)\n\t\tWrite-Host \"$time  $title$icon\"\n\t\tStart-Sleep -milliseconds 500\n\t\tif ($pubDate -gt $newLatest) { $newLatest = $pubDate }\n\t}\n\treturn $newLatest\n}\n\ntry {\n\t[xml]$content = (Invoke-WebRequest -URI $URL -useBasicParsing).Content\n\t$title = $content.rss.channel.title.toUpper()\n\t$link = $content.rss.channel.link\n\tWrite-Host \"`n UTC   HEADLINES                 (source: \" -noNewline\n\tWrite-Host $link -foregroundColor blue -noNewline\n\tWrite-Host \")\"\n\tWrite-Host \" ---   ---------\"\n\t$latestTimestamp = \"2000-01-01\"\n\t$icon = \"\"\n\tdo {\n\t\t$latestTimestamp = PrintLatestHeadlines $content $latestTimestamp $icon\n\t\t$icon = \"🆕\"\n\t\tStart-Sleep -seconds $timeInterval\n\t\t[xml]$content = (Invoke-WebRequest -URI $URL -useBasicParsing).Content\n\t} while ($true)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TCP Message Sending in send-tcp.ps1 (PowerShell)\nDESCRIPTION: Provides the full source code for the send-tcp.ps1 script. It includes parameter handling with prompts for missing values, resolving the target IP address, establishing a TCP connection using System.Net.Sockets.TCPClient, sending the message line by line via System.IO.StreamWriter, closing the connection, and basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-tcp.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSends a TCP message to an IP address and port\n.DESCRIPTION\n\tThis PowerShell script sends a TCP message to the given IP address and port.\n.PARAMETER TargetIP\n\tSpecifies the target IP address\n.PARAMETER TargetPort\n\tSpecifies the target port number\n.PARAMETER Message\n\tSpecifies the message to send\n.EXAMPLE\n\tPS> ./send-tcp 192.168.100.100 8080 \"TEST\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$TargetIP = \"\", [int]$TargetPort = 0, [string]$Message = \"\")\n\ntry {\n\tif ($TargetIP -eq \"\" ) { $TargetIP = read-host \"Enter target IP address\" }\n\tif ($TargetPort -eq 0 ) { $TargetPort = read-host \"Enter target port\" }\n\tif ($Message -eq \"\" ) { $Message = read-host \"Enter message to send\" }\n\n        $IP = [System.Net.Dns]::GetHostAddresses($TargetIP) \n        $Address = [System.Net.IPAddress]::Parse($IP) \n        $Socket = New-Object System.Net.Sockets.TCPClient($Address,$TargetPort) \n        $Stream = $Socket.GetStream() \n        $Writer = New-Object System.IO.StreamWriter($Stream)\n        $Message | % {\n        \t$Writer.WriteLine($_)\n        \t$Writer.Flush()\n        }\n        $Stream.Close()\n        $Socket.Close()\n\n\t\"✅  Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Removing or Moving Installation Directory Safely Across Platforms (PowerShell)\nDESCRIPTION: The Remove-Destination function conditionally deletes or moves an installation directory, handling Windows-specific file in-use scenarios and applying different logic for Unix systems. It leverages Test-Path and Remove-Item for existence and recursive deletes, and uses sudo mv for moving on *nix. Key inputs include the directory path and flags such as $DoNotOverwrite and $IsWinEnv. It ensures no overwriting without permission and manages an existing .old backup. It requires elevated privileges as needed, and is intended to clean up before upgrades or reinstalls.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Remove-Destination([string]$Destination) {\n    if (Test-Path -path $Destination -pathType container) {\n        if ($DoNotOverwrite) {\n            throw \"Destination folder '$Destination' already exist. Use a different path or omit '-DoNotOverwrite' to overwrite.\"\n        }\n        if (Test-Path -path \"$Destination.old\") {\n            Remove-Item \"$Destination.old\" -Recurse -Force\n        }\n        if ($IsWinEnv -and ($Destination -eq $PSHOME)) {\n        \t    Write-Host \"⏳ (3/4) Removing old installation at $Destination... \"\n            # handle the case where the updated folder is currently in use\n            Get-ChildItem -Recurse -File -Path $PSHOME | ForEach-Object {\n                if ($_.extension -eq \".old\") {\n                    Remove-Item $_\n                } else {\n                    Move-Item $_.fullname \"$($_.fullname).old\"\n                }\n            }\n        } else {\n        \t    Write-Host \"⏳ (3/4) Moving old installation to $($Destination).old... \" \n            # Unix systems don't keep open file handles so you can just move files/folders even if in use\n            sudo mv \"$Destination\" \"$($Destination).old\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full Source Code of convert-docx2md.ps1 (PowerShell)\nDESCRIPTION: The complete PowerShell script `convert-docx2md.ps1`. It defines a `FilePattern` parameter, prompts for it if missing, checks for pandoc availability, finds DOCX files matching the pattern recursively, converts each file to Markdown using pandoc, and outputs the results to .md files in the same directories. Includes basic try/catch error handling and reports execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-docx2md.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts .DOCX file(s) into Markdown \n.DESCRIPTION\n\tThis PowerShell script converts .DOCX file(s) into Markdown.\n.PARAMETER FilePattern\n\tSpecifies the file pattern to the .DOCX file(s)\n.EXAMPLE\n\tPS> ./convert-docx2md *.docx\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$FilePattern = \"\")\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($FilePattern -eq \"\" ) { $FilePattern = Read-Host \"Enter the file pattern to the .DOCX file(s)\" }\n\n\tWrite-Host \"⏳ Searching for pandoc...\" \n\t$null = (pandoc --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'pandoc' - make sure it's installed and available\" }\n\n\tWrite-Host \"⏳ Converting...\"\n\tgci -r -i $FilePattern | foreach {\n\t\t$TargetPath = $_.directoryname + \"\\\" + $_.basename + \".md\"\n\t\t& pandoc -f docx -s $_.name -o $TargetPath\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ converted in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Default Browser with URL - PowerShell\nDESCRIPTION: This PowerShell script opens the default web browser with an optional URL. It takes a URL parameter, defaults to \"http://www.fleschutz.de\" if none is provided. The `Start-Process` cmdlet is used to launch the URL in the default browser.  Error handling is included to catch and display errors and provides a success/failure exit code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-default-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the default browser\n.DESCRIPTION\n\tThis PowerShell script launches the default Web browser, optional with a given URL.\n.PARAMETER URL\n\tSpecifies the URL\n.EXAMPLE\n\tPS> ./open-default-browser\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$URL = \"http://www.fleschutz.de\")\n\ntry {\n\tStart-Process $URL\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory to Root in PowerShell\nDESCRIPTION: This PowerShell script sets the current working directory to the root directory depending on the operating system—C:\\ for Windows and / for Linux. It uses the Set-Location cmdlet to perform the directory change and outputs the new directory path prefixed with an folder emoji. The script supports standard PowerShell common parameters such as Verbose and Debug for enhanced script control and error handling. Upon success, it exits with code 0; in case of failure, it catches the exception, outputs an error message including the error line number, and exits with code 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-root.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the root directory \n.DESCRIPTION\n\tThis PowerShell script changes the current working directory to the root directory (C:\\ on Windows).\n.EXAMPLE\n\tPS> ./cd-root\n\t📂C:\\\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) { \t$path = \"/\" } else { $path = \"C:\\\\\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Playing a Beep Sound Using PowerShell\nDESCRIPTION: This PowerShell script plays a short beep at 500Hz frequency lasting 300 milliseconds by calling the System.Console Beep method. It supports standard PowerShell common parameters like Verbose, Debug, and ErrorAction. The script includes error handling to capture and report issues during execution and exits with status 0 on success and 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-beep-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a short beep sound\n.DESCRIPTION\n\tThis PowerShell script plays a short beep sound at 500Hz for 300ms.\n.EXAMPLE\n\tPS> ./play-beep-sound.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[System.Console]::Beep(500,300)\n\tStart-Sleep -milliseconds 300\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing list-cmdlets.ps1 to List PowerShell Cmdlets - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to execute the list-cmdlets.ps1 script from the command line. When run, it outputs a table listing all available cmdlets, including their CommandType, Name, Version, and Source module. The usage expects the script to be in the current directory and requires appropriate permissions to execute scripts. No additional dependencies are needed beyond the script itself and PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-cmdlets.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-cmdlets.ps1\n\n\n\nCommandType     Name                                  Version    Source\n-----------     ----                                  -------    ------\nFunction        Add-BCDataCacheExtension              1.0.0.0    BranchCache\nFunction        Add-BitLockerKeyProtector             1.0.0.0    BitLocker\n...\n\n```\n\n----------------------------------------\n\nTITLE: Listing User Public SSH Key with list-ssh-key.ps1 in PowerShell\nDESCRIPTION: Provides the full PowerShell script `list-ssh-key.ps1`. The script checks for the existence of `id_ed25519.pub` and then `id_rsa.pub` in the user's `~/.ssh` directory using `Test-Path`. If a key is found, it reads the content using `Get-Content` and displays it. If neither key exists, it outputs an error message suggesting the user run `new-ssh-key.ps1` and exits with status 1. Includes basic error handling using a try-catch block to report errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ssh-key.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Lists the public SSH key\n.DESCRIPTION\n        This PowerShell script lists the user's public SSH key.\n.EXAMPLE\n        PS> ./list-ssh-key.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif (Test-Path \"~/.ssh/id_ed25519.pub\") {\n\t\t$key = Get-Content \"~/.ssh/id_ed25519.pub\"\n\t} elseif (Test-Path \"~/.ssh/id_rsa.pub\") {\n\t\t$key = Get-Content \"~/.ssh/id_rsa.pub\"\t\n\t} else {\n\t\t\"⚠️ No SSH key found - execute 'new-ssh-key.ps1' to create one\"\n\t\texit 1\n\t}\n\t\"✅ Public SSH key: $key\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Locating a City from a CSV File using PowerShell\nDESCRIPTION: This code implements the full locate-city.ps1 script: it requests a city name (from parameter or prompt), loads world city data from a CSV file, filters for rows that match the city, then outputs formatted location and population information. It handles errors for missing cities and reports line numbers and errors for failures. Dependencies include the worldcities.csv file under ../data and standard PowerShell modules (Import-CSV). Expected input is a city name, and output is textual location info or an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-city.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the geographic location of a city\n.DESCRIPTION\n\tThis PowerShell script prints the geographic location of the given city.\n.PARAMETER city\n\tSpecifies the name of the city to look for\n.EXAMPLE\n\tPS> ./locate-city.ps1 Amsterdam\n\t* Amsterdam (United States, New York, population 21241) is at 42.9420°N, -74.1907°W\n\t* Amsterdam (Netherlands, Noord-Holland, population 1031000) is at 52.3500°N, 4.9166°W\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$city = \"\")\n\ntry {\n\tif ($city -eq \"\" ) { $city = Read-Host \"Enter the name of the city\" }\n\n\tWrite-Progress \"Reading data/worldcities.csv...\"\n\t$table = Import-CSV \"$PSScriptRoot/../data/worldcities.csv\"\n\n\t$foundOne = 0\n\tforeach($row in $table) {\n\t\tif ($row.city -eq $city) {\n\t\t\t$foundOne = 1\n\t\t\t$country = $row.country\n\t\t\t$region = $row.admin_name\n\t\t\t$lat = $row.lat\n\t\t\t$long = $row.lng\n\t\t\t$population = $row.population\n\t\t\tWrite-Host \"* $city ($country, $region, population $population) is at $lat°N, $long°W\"\n\t\t}\n\t}\n\tif (-not $foundOne) { throw \"No city '$city' found in database\" }\n\texit 0 # success\n} catch {\n\t\"⚠️ Error $($_.InvocationInfo.ScriptLineNumber): $($Error[0]).\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Core Logic for Establishing SSH Connection in PowerShell\nDESCRIPTION: Contains the full PowerShell script (`enter-host.ps1`) for connecting to a remote host via SSH. It prompts for hostname/IP if not provided, determines the appropriate username based on the OS (current user), pings the host (using an external `ping-host.ps1` script), attempts Wake-on-LAN if ping fails (using `wake-up-host.ps1`), verifies SSH client installation (`ssh -V`), and finally executes the `ssh` command to establish the connection. Includes a try-catch block for basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enter-host.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tEnter another host via SSH\n.DESCRIPTION\n\tThis PowerShell script logs into a remote host via secure shell (SSH).\n.PARAMETER remoteHost\n\tSpecifies the remote hostname or IP address\n.EXAMPLE\n\tPS> ./enter-host.ps1 tux\n\t✅ tux is up and running (3ms latency).\n\t⏳ Connecting as user 'markus' using OpenSSH_for_Windows_9.5p1, LibreSSL 3.8.2\n\tmarkus@tux's password:\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$remoteHost = \"\")\n\ntry {\n\tif ($remoteHost -eq \"\") {\n\t\t$remoteHost = Read-Host \"Enter the remote hostname or IP address\"\n\t\t$remoteUser = Read-Host \"Enter the username at $remoteHost\"\n\t} elseif ($IsLinux) {\n\t\t$remoteUser = $(whoami)\n\t} else {\n\t\t$remoteUser = $env:USERNAME\n\t\t$remoteUser = $remoteUser.toLower()\n\t}\n\n\t& \"$PSScriptRoot/ping-host.ps1\" $remoteHost\n\tif ($lastExitCode -ne \"0\") {\n\t\tWrite-Host \"Let's try to wake '$remoteHost' up...\"\n\t\t& \"$PSScriptRoot/wake-up-host.ps1\" \n\t}\n\n\tWrite-Host \"⏳ Connecting as user '$remoteUser' using \" -noNewline\n\t& ssh -V\n\tif ($lastExitCode -ne \"0\") { throw \"'ssh -V' failed with exit code $lastExitCode\" }\n\n\t& ssh \"$($remoteUser)@$($remoteHost)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Measuring Remote Host Latency\nDESCRIPTION: This script pings a list of remote hosts to measure round-trip times and packet loss. It initializes ping tasks asynchronously, collects results, and outputs the network status with min, max, and average latency. Dependencies include the .NET Net.NetworkInformation.Ping class, and it handles errors to ensure robustness.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-remote-hosts.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPings remote hosts to measure the latency \n.DESCRIPTION\n\tThis PowerShell script measures the ping roundtrip times from the local computer to remote ones (10 Internet servers by default).\n.PARAMETER hosts\n\tSpecifies the hosts to ping, separated by commas (10 Internet servers by default)\n.EXAMPLE\n\tPS> ./ping-remote-hosts.ps1\n\t✅ Online with 0/10 ping loss and 11...40ms latency - 18ms average\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$hosts = \"bing.com,cnn.com,dropbox.com,github.com,google.com,ibm.com,live.com,meta.com,x.com,youtube.com\")\n\ntry {\n\t$hostsArray = $hosts.Split(\",\")\n\t$tasks = $hostsArray | foreach { (New-Object Net.NetworkInformation.Ping).SendPingAsync($_,1000) }\n\t[int]$min = 9999999\n\t[int]$max = [int]$avg = [int]$success = 0\n\t[int]$total = $hostsArray.Count\n\t[Threading.Tasks.Task]::WaitAll($tasks)\n\tforeach($ping in $tasks.Result) {\n\t\tif ($ping.Status -ne \"Success\") { continue }\n\t\t$success++\n\t\t[int]$latency = $ping.RoundtripTime\n\t\t$avg += $latency\n\t\tif ($latency -lt $min) { $min = $latency }\n\t\tif ($latency -gt $max) { $max = $latency }\n\t}\n\t[int]$loss = $total - $success\n\tif ($success -ne 0) {\n\t\t$avg /= $success\n\t\tWrite-Host \"✅ Online with $loss/$total ping loss and $($min)...$($max)ms latency - $($avg)ms average\"\n\t} else {\n\t\tWrite-Host \"⚠️ Offline ($loss/$total ping loss)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing show-sydney-city.ps1 in PowerShell\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to run the show-sydney-city.ps1 script from the PowerShell console using its relative path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-sydney-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-sydney-city\n```\n\n----------------------------------------\n\nTITLE: Removing Empty Subfolders Recursively - PowerShell Script Implementation\nDESCRIPTION: Implements a PowerShell script that recursively searches for and deletes all empty subfolders in a given directory tree. The script defines an optional DirTree parameter, prompts for input if not provided, collects all subfolders, sorts them by depth (deepest first), and removes those that are empty while logging deletions. It includes error handling to report issues and support for common parameters. Inputs include the directory tree path; outputs are deletion logs and status messages. Requires permissions to read directories and delete folders, and may fail on folders without appropriate access rights.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-empty-dirs.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRemoves all empty subfolders within a directory tree\n.DESCRIPTION\n\tThis PowerShell script removes all empty subfolders within a directory tree.\n.PARAMETER DirTree\n\tSpecifies the path to the directory tree\n.EXAMPLE\n\tPS> ./remove-empty-dirs C:\\Temp\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$DirTree = \"\")\n\ntry {\n\tif ($DirTree -eq \"\" ) { $DirTree = read-host \"Enter the path to the directory tree\" }\n\n\t$Folders = @()\n\tforeach ($Folder in (Get-ChildItem -path  \"$DirTree\" -Recurse | Where { $_.PSisContainer })) {\n\t\t$Folders += New-Object PSObject -Property @{\n\t\t\tObject = $Folder\n\t\t\tDepth = ($Folder.FullName.Split(\"\\\")).Count\n\t\t}\n\t}\n\t$Folders = $Folders | Sort Depth -Descending\n\n\t$Deleted = @()\n\tforeach ($Folder in $Folders)\n\t{\n\t\tif ($Folder.Object.GetFileSystemInfos().Count -eq 0) {\n\t\t\t$Deleted += New-Object PSObject -Property @{\n\t\t\t\tFolder = $Folder.Object.FullName\n\t\t\t\tDeleted = (Get-Date -Format \"hh:mm:ss tt\")\n\t\t\t\tCreated = $Folder.Object.CreationTime\n\t\t\t\t'Last Modified' = $Folder.Object.LastWriteTime\n\t\t\t\tOwner = (Get-Acl $Folder.Object.FullName).Owner\n\t\t\t}\n\t\t\tRemove-Item -Path $Folder.Object.FullName -Force\n\t\t}\n\t}\n\t\"✅  Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Writing 'Hands Off' Warning Message in PowerShell\nDESCRIPTION: This PowerShell script repeatedly writes the phrases 'HANDS OFF', 'DO NOT TOUCH', and 'MY PC' in large letters in the console by invoking a helper script 'write-big.ps1'. It also displays a flashing red warning message at random cursor positions using the System.Console class, creating a dynamic visual warning. The script supports common PowerShell parameters and includes a try-catch block for basic error handling, exiting with status 0 on success or 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-hands-off.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites 'Hands Off'\n.DESCRIPTION\n\tThis PowerShell script writes 'Hands Off' in BIG letters.\n.EXAMPLE\n\tPS> ./write-hands-off.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$randomNumberGenerator = New-Object System.Random\n\twhile ($true) {\n\t\tClear-Host\n\t\tWrite-Host \"`n`n\"\n\t\t& \"$PSScriptRoot/write-big.ps1\" \"     HANDS OFF\"\n\t\tWrite-Host \"`n`n\"\n\t\t& \"$PSScriptRoot/write-big.ps1\" \"   DO NOT TOUCH\"\n\t\tWrite-Host \"`n`n\"\n\t\t& \"$PSScriptRoot/write-big.ps1\" \"       MY PC\"\n\t\t[int]$x = $randomNumberGenerator.next(1, 90)\n\t\t[int]$y = $randomNumberGenerator.next(1, 22)\n\t\t[System.Console]::SetCursorPosition($x, $y)\n\t\tWrite-Host \"🔥🔥🔥 LAST WARNING 🔥🔥🔥\" -foregroundColor red\n\t\tStart-Sleep -milliseconds 900\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Parsing User Input in PowerShell\nDESCRIPTION: This snippet shows how to use param blocks to define script parameters with default values in PowerShell. The script accepts a directory path and days threshold, setting \"$PWD\" and 100 as their respective defaults. Dependencies include the availability of the PowerShell runtime and the script should be invoked on supported Windows or compatible environments. Both parameters are optional: 'path' defines the root directory to scan, while 'days' specifies the period of inactivity to consider; if not provided, their defaults are used.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-unused-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$path = \"$PWD\", [int]$days = 100)\n```\n\n----------------------------------------\n\nTITLE: Opening a Text File in the First Available Editor Using PowerShell\nDESCRIPTION: This is the full content of 'edit.ps1', which attempts to open the specified text file in the first available text editor found from a prioritized list (neovim, vim, vi, nano, pico, emacs, notepad.exe, wordpad.exe). It defines a helper function 'TryEditor' that tries to invoke an editor and handles failure cases. The script prompts the user for a file path if none is provided, iterates through possible editors, and shows an error if none are found. Required dependencies are at least one of the listed editors installed and accessible in the system PATH. The 'path' parameter is a string file path input, and outputs are status messages or errors based on editor availability. The script exits with code 0 on success or 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/edit.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens a text editor\n.DESCRIPTION\n\tThis PowerShell script opens a text editor with the given text file.\n.PARAMETER path\n\tSpecifies the path to the text file (will be queried if none given)\n.EXAMPLE\n\tPS> ./edit.ps1 C:\\MyDiary.txt\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\")\n\nfunction TryEditor { param([string]$editor, [string]$path)\n\ttry {\n\t\tWrite-Host \"$editor..\" -noNewline\n\t\t& $editor \"$path\"\n\t\tif ($lastExitCode -ne \"0\") {\n\t\t\t\"⚠️ Can't execute '$editor' - make sure it's installed and available\"\n\t\t\texit 1\n\t\t}\n\t\texit 0 # success\n\t} catch {\n\t\treturn\n\t}\n}\n\ntry {\n\tif ($path -eq \"\" ) { $path = Read-Host \"Enter the path to the text file\" }\n\n\tWrite-Host \"Searching for \" -noNewline\n\tTryEditor \"neovim\" $path\n\tTryEditor \"vim\" $path\n\tTryEditor \"vi\" $path\n\tTryEditor \"nano\" $path\n\tTryEditor \"pico\" $path\n\tTryEditor \"emacs\" $path\n\tTryEditor \"notepad.exe\" $path\n\tTryEditor \"wordpad.exe\" $path\n\tWrite-Host \"\"\n\n\tthrow \"No text editor found - use 'winget install' to install your favorite text editor.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: FTP File Upload Implementation in PowerShell\nDESCRIPTION: This PowerShell script uploads a specified local file to an FTP server. It prompts the user for the file path, FTP URL, username, and password if they are not provided as parameters. The script utilizes .NET classes to create an FTP request, stream the file data, and handle SSL, binary transfer, and passive mode configurations, including error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upload-file.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUploads a local file to a FTP server\n.DESCRIPTION\n\tThis PowerShell script uploads a local file to a FTP server.\n.PARAMETER File\n\tSpecifies the path to the local file\n.PARAMETER URL\n\tSpecifies the FTP server URL\n.PARAMETER Username\n\tSpecifies the user name\n.PARAMETER Password\n\tSpecifies the password\n.EXAMPLE\n\tPS> .\\upload-file.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$File = \"\", [string]$URL = \"\", [string]$Username = \"\", [string]$Password = \"\")\n\ntry {\n\tif ($File -eq \"\") { $File = read-host \"Enter local file to upload\" }\n\tif ($URL -eq \"\") { $URL = read-host \"Enter URL of FTP server\" }\n\tif ($Username -eq \"\") { $Username = read-host \"Enter username for login\" }\n\tif ($Password -eq \"\") { $Password = read-host \"Enter password for login\" }\n\t[bool]$EnableSSL = $true\n\t[bool]$UseBinary = $true\n\t[bool]$UsePassive = $true\n\t[bool]$KeepAlive = $true\n\t[bool]$IgnoreCert = $true\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t# check local file:\n\t$FullPath = Resolve-Path \"$File\"\n\tif (-not(test-path \"$FullPath\" -pathType leaf)) { throw \"Can't access file: $FullPath\" }\n\t$Filename = (Get-Item $FullPath).Name\n\t$FileSize = (Get-Item $FullPath).Length\n\t\"⏳ Uploading 📄$Filename ($FileSize bytes) to $URL ...\"\n\n\t# prepare request:\n\t$Request = [Net.WebRequest]::Create(\"$URL/$Filename\")\n\t$Request.Credentials = New-Object System.Net.NetworkCredential(\"$Username\", \"$Password\")\n\t$Request.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile \n\t$Request.EnableSSL = $EnableSSL\n\t$Request.UseBinary = $UseBinary\n\t$Request.UsePassive = $UsePassive\n\t$Request.KeepAlive = $KeepAlive\n\t[System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$IgnoreCert}\n\n\t$fileStream = [System.IO.File]::OpenRead(\"$FullPath\")\n\t$ftpStream = $Request.GetRequestStream()\n\n\t$Buf = New-Object Byte[] 32KB\n\twhile (($DataRead = $fileStream.Read($Buf, 0, $Buf.Length)) -gt 0)\n\t{\n\t    $ftpStream.Write($Buf, 0, $DataRead)\n\t    $pct = ($fileStream.Position / $fileStream.Length)\n\t    Write-Progress -Activity \"Uploading\" -Status (\"{0:P0} complete:\" -f $pct) -PercentComplete ($pct * 100)\n\t}\n\n\t# cleanup:\n\t$ftpStream.Dispose()\n\t$fileStream.Dispose()\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ uploaded 📄$Filename to $URL in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0]) after $Elapsed sec.\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Previous Installation and Deploying PowerShell Files - PowerShell\nDESCRIPTION: This snippet removes existing PowerShell installation directories to prepare for the new install. On Linux environments, it uses sudo to perform recursive removal; on others it uses a PowerShell function Remove-Destination. After cleanup, it copies or moves new installation files from the temporary extracted location to the final destination path. It handles differences between Windows and Unix-like OS behaviors in file operations and permissions. Inputs are destination directory paths and OS environment flags, with outputs being a fresh deployed PowerShell installation area.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nif (-not $UseMSI) {\n    Write-Host \"⏳ (4/5) Removing current installation at: $Destination ...\"\n    if ($IsLinuxEnv) { \n        & sudo rm -rf \"$Destination\"\n    } else {\n        Remove-Destination \"$Destination\"\n    }\n\n    if (Test-Path $Destination) {\n        Write-Host \"⏳ (4/4) Copying files to $Destination... \"\n        # only copy files as folders will already exist at $Destination\n        Get-ChildItem -Recurse -Path \"$contentPath\" -File | ForEach-Object {\n            $DestinationFilePath = Join-Path $Destination $_.fullname.replace($contentPath, \"\")\n            Copy-Item $_.fullname -Destination $DestinationFilePath\n        }\n    } elseif ($IsWinEnv) {\n        Write-Host \"⏳ (4/4) Moving new installation to $Destination... \"\n        $null = New-Item -Path (Split-Path -Path $Destination -Parent) -ItemType Directory -ErrorAction SilentlyContinue\n        Move-Item -Path $contentPath -Destination $Destination\n    } else {\n        Write-Host \"⏳ (4/4) Moving new installation to $Destination... \"\n        & sudo mv \"$contentPath\" \"$Destination\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Nth Weekday or Last Weekday in a Month in PowerShell\nDESCRIPTION: These two utility functions, Find-WeekDayMultiple and Find-LastWeekDay, compute the date of the nth occurrence or last occurrence of a given weekday in a specific month and year. Inputs: year (int), month (int), dayOfWeek (string or enum), and for Find-WeekDayMultiple, the count (nth). They iterate over dates using Get-Date and AddDays, with error handling if the occurrence is impossible (e.g., fifth Monday in a four-Monday month). Output: DateTime object or error. Used internally for date calculations in more complex scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-calendar.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Find-WeekDayMultiple ($year, $month, $dayOfWeek, $multiple) {\n    $result = Get-Date -Year $year -Month $month -Day 1\n    $multipleCount = 0\n\n    do {\n        if ($result.DayOfWeek -eq $dayOfWeek) {\n            $multipleCount++\n        }\n\n        $result = $result.AddDays(1)\n\n        if ($result.Month -ne $month) {\n            throw \"Could not find weekday multiple.\"\n        }\n    }\n    while ($multipleCount -lt $multiple)\n\n    return $result.AddDays(-1)\n}\n\nfunction Find-LastWeekDay ($year, $month, $dayOfWeek) {\n    $result = $dayCounter = Get-Date -Year $year -Month $month -Day 1\n\n    while ($dayCounter.Month -eq $month) {\n        if ($dayCounter.DayOfWeek -eq $dayOfWeek) {\n            $result = $dayCounter\n        }\n        $dayCounter = $dayCounter.AddDays(1)\n    }\n    return $result\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to List Git Branches with Parameters and Error Handling\nDESCRIPTION: This PowerShell script lists branches in a specified Git repository. It accepts parameters for the repository path and a search pattern, validates prerequisites, executes Git commands, and outputs branch names matching the pattern. It includes error handling for invalid paths and Git command failures, and supports common PowerShell parameters for verbose and debugging output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-branches.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists Git branches\n.DESCRIPTION\n\tThis PowerShell script lists branches in a Git repository - either all (default) or by a search pattern.\n.PARAMETER pathToRepo\n\tSpecifies the path to the Git repository (current working directory by default)\n.PARAMETER searchPattern\n\tSpecifies the search pattern (\"*\", anything by default)\n.EXAMPLE\n\tPS> ./list-branches.ps1\n\n\tList of Git Branches\n\t--------------------\n\tmain\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pathToRepo = \"$PWD\", [string]$searchPattern = \"*\")\n\ntry {\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access repo folder '$pathToRepo' - maybe a typo or missing folder permissions?\" }\n\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t& git -C \"$pathToRepo\" fetch \n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed\" }\n\n\t$branches = $(git -C \"$pathToRepo\" branch --list --remotes --no-color --no-column)\n\tif ($lastExitCode -ne \"0\") { throw \"'git branch --list' failed\" }\n\n\t\"\"\n\t\"List of Git Branches\"\n\t\"--------------------\"\n\tforeach($branch in $branches) {\n\t\tif (\"$branch\" -match \"origin/HEAD\") { continue }\n\t\t$branchName = $branch.substring(9)\n\t\tif (\"$branchName\" -notlike \"$searchPattern\") { continue }\n\t\t\"$branchName\"\n\t}\n\t\"\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits in Pretty Format in PowerShell\nDESCRIPTION: This snippet uses the `git log` command to display Git commits in a pretty format.  The `-C` parameter specifies the directory.  It uses the `--graph` option to show the commit history graphically and the `--format` option to specify a custom format that includes commit subject, author, and date. The output is piped to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n\tif ($format -eq \"pretty\") {\n\t\t\"\"\n\t\t& git -C \"$pathToRepo\" log --graph --format=format:'%C(bold yellow)%s%C(reset)%d by %an 🕘%cs 🔗%h' --all\n\t}\n```\n\n----------------------------------------\n\nTITLE: Creating a Shortcut File with PowerShell Script Parameters\nDESCRIPTION: This code snippet shows the parameters available for the new-shortcut.ps1 script, including shortcut filename, target path, description, and common PowerShell parameters with their descriptions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-shortcut.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/new-shortcut.ps1 [[-shortcut] <String>] [[-target] <String>] [[-description] <String>] [<CommonParameters>]\n\n-shortcut <String>\n    Specifies the shortcut filename\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-target <String>\n    Specifies the path to the target\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-description <String>\n    Specifies a description\n    \n    Required?                    false\n    Position?                    3\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Image Conversion to WebP\nDESCRIPTION: This PowerShell script converts images in a specified directory (or a single image) to the WebP format using ImageMagick's `magick` command. It supports parallel processing to improve conversion speed. The script requires ImageMagick to be installed and accessible in the system's PATH environment variable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-images2webp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Convert all images in a directory\n./convert-images.ps1 -InputPath .\\covers -OutputDir .\\covers-webp -Quality 50 -Lossless $true -MaxParallel 10\n\n# Convert a single image\n./convert-images.ps1 -InputPath .\\my_image.png -OutputDir .\\output -Quality 80 -Lossless $false\n```\n\n----------------------------------------\n\nTITLE: Enumerating Available Speech Voices and Announcing Their Descriptions\nDESCRIPTION: Iterates over all speech voices available via COM object method 'GetVoices', switches the current voice to each one, retrieves its description, and announces it through speech. This enables validation of diverse voice options and their descriptions within the environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-test.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Voices = $Voice.GetVoices()\nforeach ($OtherVoice in $Voices) {\n\t$Voice.Voice = $OtherVoice\n\t$Description = $OtherVoice.GetDescription()\n\tSpeak(\"Hi, I'm the voice called $Description.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Full Script Content for add-memo.ps1\nDESCRIPTION: This is the complete PowerShell script `add-memo.ps1`. It defines an optional string parameter `-text`. If no text is provided via the parameter, it prompts the user to enter text. It then constructs a CSV line containing the current universal timestamp and the provided text. The script checks if `~/Memos.csv` exists; if not, it creates the file and adds a header row ('TIME,TEXT'). Finally, it appends the new memo line to the file, outputs a success message, and exits with code 0. Basic error handling is included to catch exceptions and exit with code 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/add-memo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tAdds a memo text \n.DESCRIPTION\n\tThis PowerShell script saves the given memo text to Memos.csv in your home folder.\n.PARAMETER text\n\tSpecifies the text to memorize\n.EXAMPLE\n\tPS> ./add-memo.ps1 \"Buy apples\"\n\t✔️ saved to 📄/home/markus/Memos.csv\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\" ) { $text = Read-Host \"Enter the text to memorize\" }\n\n\t$Path = \"~/Memos.csv\"\n\t$Time = Get-Date -format FileDateTimeUniversal\n\t$Line = \"$Time,$text\"\n\n\tif (-not(Test-Path \"$Path\" -pathType leaf)) {\n\t\tWrite-Output \"TIME,TEXT\" > \"$Path\"\n\t}\n\tWrite-Output $Line >> \"$Path\"\n\n\t\"✔️ saved to 📄$Path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Real-Time ASCII Clock with Error Handling in PowerShell\nDESCRIPTION: This comprehensive PowerShell script sets the console culture to en-US, retrieves and formats the current weekday, date, and ISO week number, and uses an external helper script write-big.ps1 to render these values as large ASCII art. The main loop continually displays the current time in ASCII, updating once per second and allowing user interruption with Ctrl+C. Error handling is performed via try/catch, outputting detailed error messages if execution fails. The script requires the auxiliary write-big.ps1 in the same directory and expects access to PowerShell's $HOST UI and standard date functions. Inputs are not required, and the output is a dynamically updating ASCII art clock in the console, with limits determined by console capabilities.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-clock.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites an ASCII clock\n.DESCRIPTION\n\tThis PowerShell script writes the current time as ASCII clock.\n.EXAMPLE\n\tPS> ./write-clock.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentthread.currentculture = [system.globalization.cultureinfo]\"en-US\"\n\t$Weekday = Get-Date -UFormat \"%A\"\n\t$Date = Get-Date -UFormat \"%d %b %Y\"\n\t$Week = Get-Date -UFormat \"%V\"\n\n\tClear-Host\n\t& \"$PSScriptRoot/write-big.ps1\" \"    $Weekday\"\n\tWrite-Output \"\"\n\t& \"$PSScriptRoot/write-big.ps1\" \"  $Date\"\n\tWrite-Output \"\"\n\t& \"$PSScriptRoot/write-big.ps1\" \"    WEEK $Week\"\n\tWrite-Output \"\"\n\n\t$StartPosition = $HOST.UI.RawUI.CursorPosition\n\twhile ($true) {\n\t\t$Time = Get-Date -format \"HH:mm:ss\" \n\t\t& \"$PSScriptRoot/write-big.ps1\" \"    $Time  \"\n\t\tWrite-Output \"`n                             (press <Ctrl> <C> to stop)\"\n\t\tStart-Sleep -seconds 1\n\t\t$HOST.UI.RawUI.CursorPosition = $StartPosition\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Module Management\nDESCRIPTION: Demonstrates how to work with PowerShell modules, including finding available commands, listing installed and imported modules, importing and removing modules, creating module manifests, and creating in-memory modules. Requires familiarity with the PowerShell module system and `$env:PSModulePath`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command -Name *module* -Module mic*core                 # Which commands can I use to work with modules?\n\nGet-Module -ListAvailable                                   # Show me all of the modules installed on my system (controlled by $env:PSModulePath)\nGet-Module                                                  # Show me all of the modules imported into the current session\n\n$PSModuleAutoLoadingPreference = 0                          # Disable auto-loading of installed PowerShell modules, when a command is invoked\n\nImport-Module -Name NameIT                                  # Explicitly import a module, from the specified filesystem path or name (must be present in $env:PSModulePath)\nRemove-Module -Name NameIT                                  # Remove a module from the scope of the current PowerShell session\n\nNew-ModuleManifest                                          # Helper function to create a new module manifest. You can create it by hand instead.\n\nNew-Module -Name trevor -ScriptBlock {                      # Create an in-memory PowerShell module (advanced users)\n  function Add($a,$b) { $a + $b } }\n\nNew-Module -Name trevor -ScriptBlock {                      # Create an in-memory PowerShell module, and make it visible to Get-Module (advanced users)\n  function Add($a,$b) { $a + $b } } | Import-Module\n```\n\n----------------------------------------\n\nTITLE: Viewing Example Output from PowerShell Service Listing - PowerShell\nDESCRIPTION: This snippet demonstrates a typical invocation of the 'list-services.ps1' script and its standard tabular output showing the status, name, and display name for each installed service. No external dependencies are required. Expected output is a table where each row represents a Windows service and its current state.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-services.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-services.ps1\n\n\n\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  AarSvc_886c2       Agent Activation Runtime_886c2\n...\n```\n\n----------------------------------------\n\nTITLE: Launching Windows Start Settings with PowerShell\nDESCRIPTION: This PowerShell script opens the Windows start settings interface. It supports common PowerShell parameters like Verbose, Debug, and ErrorAction, enabling detailed execution control. The script takes no additional input parameters beyond these common parameters and produces the effect of opening the start settings window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-start-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-start-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-start-settings\n```\n\n----------------------------------------\n\nTITLE: Installing Opera Browser using PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script automates installing Opera Browser from the Microsoft Store by invoking the winget tool with the appropriate package and required agreement flags. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction. The script provides user-facing status messages, checks for errors in the installation process, throws exceptions on failure, and outputs exception information (including the line number) to aid troubleshooting. Expected input is optional: the script runs without mandatory arguments, but common PowerShell parameters may be passed. It requires the presence of winget and support for the Microsoft Store as a package source. On success, it exits with code 0; on failure, with code 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-opera-browser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Opera Browser\n.DESCRIPTION\n\tThis PowerShell script installs Opera Browser from Microsoft Store.\n.EXAMPLE\n\tPS> ./install-opera-browser.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Opera Browser, please wait...\"\n\n\t& winget install \"Opera Browser\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Opera Browser installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Headline with PowerShell\nDESCRIPTION: This PowerShell script prints the provided text as a headline surrounded by dashes. If no text is provided as a parameter, it prompts the user to enter it interactively. The script calculates the length of the input text to generate the surrounding dash lines accordingly and outputs the headline in green text color. It includes error handling to capture and display any runtime errors with line numbers. Dependencies include PowerShell environment supporting Write-Host color output. Input parameter 'text' is optional and defaults to an empty string. Output is directly written to the console with colored formatting.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-headline.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites a headline\n.DESCRIPTION\n\tThis PowerShell script writes the given text as a headline.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-headline.ps1 \"Hello World\"\n\t-----------------\n\t   Hello World  \n\t-----------------\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the text to write\" }\n\n\t[int]$len = $text.Length\n\t[string]$line = \"------\"\n\tfor ([int]$i = 0; $i -lt $len; $i++) { $line += \"-\" }\n\tWrite-Host \"`n$line`n   $text`n$line\" -foregroundColor green\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing FRITZ!Box Known Devices PowerShell\nDESCRIPTION: This PowerShell script connects to a FRITZ!Box router to retrieve the list of known devices by sending UPnP SOAP requests. It optionally accepts Username and Password parameters for router authentication, prompts the user if they are missing, constructs a SOAP XML envelope for the 'X_AVM-DE_GetHostListPath' action, and sends requests to retrieve device information. The output is a formatted table showing device activity status, IP address, MAC address, hostname, interface type, and speed. Dependencies include PowerShell version 3 or higher and network connectivity to the FRITZ!Box.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-fritzbox-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists FRITZ!Box's known devices\n.DESCRIPTION\n\tThis PowerShell script lists FRITZ!Box's known devices.\n.PARAMETER Username\n\tSpecifies the user name to FRITZ!Box\n.PARAMETER Password\n\tSpecifies the password to FRITZ!Box\n.EXAMPLE\n\tPS> ./list-fritzbox-devices.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -Version 3\n\nparam([string]$Username = \"\", [string]$Password = \"\")\n\nif ($Username -eq \"\") { $Username = read-host \"Enter username for FRITZ!Box\" }\nif ($Password -eq \"\") { $Password = read-host \"Enter password for FRITZ!Box\" }\n\nwrite-progress \"Contacting FRITZ!Box ...\"\n[string]$HostURL = \"https://fritz.box:49443\"\n[string]$SOAPAction=\"urn:dslforum-org:service:Hosts:1#X_AVM-DE_GetHostListPath\"\n[string]$SOAPrequest = @\"\n<?xml version=\"1.0\"?>\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n  <s:Body>\n    <u:X_AVM-DE_GetHostListPath xmlns:u=\"urn:dslforum-org:service:Hosts:1\" />\n  </s:Body>\n</s:Envelope>\n\"@\n\n$SecurePassword = $Password | ConvertTo-SecureString -AsPlainText -Force\n$Credentials = New-Object System.Management.Automation.PSCredential -ArgumentList $Username, $SecurePassword\n\n$XmlResult = invoke-restMethod `\n   -Method POST `\n   -Headers @{'SOAPAction'=($SOAPAction)} `\n   -Uri ($HostURL+\"/upnp/control/hosts\") `\n   -Credential $Credentials `\n   -ContentType 'text/xml' `\n   -Body $SOAPrequest\n\n$HostList = invoke-restMethod -Uri ($HostURL+($XmlResult.Envelope.Body.'X_AVM-DE_GetHostListPathResponse'.'NewX_AVM-DE_HostListPath'))\n\n$HostTable = $HostList.List.Item.GetEnumerator() \n\n$HostTable | format-table -property Active,IPAddress,MACAddress,HostName,InterfaceType,X_AVM-DE_Speed\n\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for new-junction.ps1 PowerShell Script\nDESCRIPTION: This snippet outlines the parameters accepted by the `new-junction.ps1` script. It specifies two optional string parameters: `-junction` for the new junction path and `-target` for the path the junction should point to. Common parameters are also supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-junction.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/new-junction.ps1 [[-junction] <String>] [[-target] <String>] [<CommonParameters>]\n\n-junction <String>\n    Specifies the file path to the new junction\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-target <String>\n    Specifies the file path to the target\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Special Folder Listing in PowerShell\nDESCRIPTION: This PowerShell script defines functions to find the temporary directory (`GetTempDir`), check if a folder exists and create a PSObject for it (`TryFolder`), and list special folders based on the operating system (`ListSpecialFolders`). The main part calls `ListSpecialFolders`, formats the output as a table showing folder names and paths using `Format-Table`, and includes basic error handling using a `try...catch` block to report errors and exit with an appropriate status code. It differentiates between Windows (using .NET Enum `System.Environment+SpecialFolder`) and Linux (using predefined common paths like `$HOME/Desktop`, `/etc`, etc.).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-special-folders.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists special folders\n.DESCRIPTION\n\tThis PowerShell script lists all special folders (sorted alphabetically).\n.EXAMPLE\n\tPS> ./list-special-folders.ps1\n\n\tFolder Name     Folder Path\n\t-----------     -----------\n\tAdminTools      📂C:\\Users\\Markus\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Administrative Tools\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetTempDir {\n        if (\"$env:TEMP\" -ne \"\") { return \"$env:TEMP\" }\n        if (\"$env:TMP\" -ne \"\")  { return \"$env:TMP\" }\n        if ($IsLinux) { return \"/tmp/\" }\n        return \"C:\\Temp\"\n}\n\nfunction TryFolder([string]$name, [string]$path) {\n\tif (Test-Path \"$path\" -pathType container) {\n\t\tNew-Object PSObject -property @{ 'Folder Name' = \"$name\"; 'Folder Path' = \"📂$path\" }\n\t}\n}\n\nfunction ListSpecialFolders {\n\tif ($IsLinux) {\n\t\tTryFolder \"Config files\"      \"/etc\"\n\t\tTryFolder \"Desktop\"           \"$HOME/Desktop\"\n\t\tTryFolder \"Documents\"         \"$HOME/Documents\"\n\t\tTryFolder \"Downloads\"         \"$HOME/Downloads\"\n\t\tTryFolder \"Dropbox\"           \"$HOME/Dropbox\"\n\t\tTryFolder \"Home\"              \"$HOME\"\n\t\tTryFolder \"Mount points\"      \"/mnt\"\n\t\tTryFolder \"Music\"             \"$HOME/Music\"\n\t\tTryFolder \"Optional packages\" \"/opt\"\n\t\tTryFolder \"Pictures\"          \"$HOME/Pictures\"\n\t\tTryFolder \"Recovered files\"   \"/lost+found\"\n\t\tTryFolder \"Removable media\"   \"/media\"\n\t\tTryFolder \"Repositories\"      \"$HOME/Repos\"\n\t\tTryFolder \"Repositories\"      \"$HOME/Repositories\"\n\t\tTryFolder \"Root\"              \"/\"\n\t\tTryFolder \"Screenshots\"       \"$HOME/Pictures/Screenshots\"\n\t\tTryFolder \"Scripts\"           \"$PSScriptRoot\"\n\t\tTryFolder \"Snaps\"             \"$HOME/snap\"\n\t\tTryFolder \"SSH keys\"          \"$HOME/.ssh\"\n\t\tTryFolder \"System boot\"       \"/boot\"\n\t\tTryFolder \"System binaries\"   \"/sbin\"\n\t\tTryFolder \"System devices\"    \"/dev\"\n\t\tTryFolder \"System logs\"       \"/var/log\"\n\t\tTryFolder \"Trash\"             \"$HOME/.local/share/Trash\"\n\t\tTryFolder \"Templates\"         \"$Home/Templates\"\n\t\tTryFolder \"Temporary files\"   \"$(GetTempDir)\"\n\t\t$path = Resolve-Path \"$HOME/..\"\n\t\tTryFolder \"Users\"             \"$path\"\n\t\tTryFolder \"Videos\"            \"$HOME/Videos\"\n\t} else {\n\t\t$folderNames = [System.Enum]::GetNames('System.Environment+SpecialFolder')\n\t\t$folderNames | Sort-Object | ForEach-Object {\n\t\t\tif ($path = [System.Environment]::GetFolderPath($_)) {\n\t\t\t\tTryFolder \"$_\" \"$path\"\n\t\t\t}\n\t\t}\n\t\tTryFolder \"CrashDumps\"        \"$HOME\\AppData\\Local\\CrashDumps\"\n\t\tTryFolder \"Repositories\"      \"$HOME\\source\\repos\"\n\t\tTryFolder \"Scripts\"           \"$PSScriptRoot\"\n\t\tTryFolder \"SSH keys\"          \"$HOME\\.ssh\"\n\t\tTryFolder \"Temporary files\"   \"$(GetTempDir)\"\n\t\t$path = Resolve-Path \"$HOME/..\"\n\t\tTryFolder \"Users\"             \"$path\"\n\t}\n}\n\ntry {\n\tListSpecialFolders | Format-Table -property @{e='Folder Name';width=22},'Folder Path'\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Executables in Directory Tree Using PowerShell\nDESCRIPTION: This PowerShell script recursively scans a specified directory tree (defaulting to the current working directory) to identify and list all files with the .exe extension. It accepts a single optional parameter '-path' that defines the root directory for the search. The script uses Get-ChildItem with filters and Where-Object to select executables, tracks execution time with a stopwatch, and provides progress updates through Write-Progress. On success, it outputs the count of found executables and total elapsed time. If errors occur, the script catches exceptions, reports the problematic line and error message, and exits with an error code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-executables.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all executables in a dir tree\n.DESCRIPTION\n\tThis PowerShell script scans a given directory tree and lists all executables with suffix .EXE.\n.PARAMETER path\n\tSpecifies the path to the directory tree (current working directory by default)\n.EXAMPLE\n\tPS> ./list-executables.ps1 C:\\Windows\n\tC:\\Windows\\bfsvc.exe\n\t...\n\t✅ Found 7967 executables within 📂C:\\Windows in 168 sec.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Progress \"Listing executables within $path ...\"\n\t$path = Resolve-Path \"$path\"\n\t[int]$count = 0\n\tGet-ChildItem \"$path\" -attributes !Directory -recurse -force | Where-Object { $_.Name -like \"*.exe\" } | ForEach-Object {\n\t\t\"$($_.FullName)\"\n\t\t$count++\n\t}\n\tWrite-Progress -completed \" \"\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $count executables within 📂$path in $elapsed sec.\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of List Read-Only Files PowerShell Script\nDESCRIPTION: Provides a command-line example showing how to execute the `list-read-only-files.ps1` script, specifying the `C:\\Windows` directory as the target path. It also illustrates the expected output format, including the total number of files found and the execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-read-only-files.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-read-only-files.ps1 C:\\Windows\n...\n✅ Found 107 read-only files within 📂C:\\Windows in 50 sec\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of list-apps.ps1 Script\nDESCRIPTION: The complete PowerShell script for listing installed applications. It checks the operating system and uses the appropriate command - 'snap list' for Linux or 'Get-AppxPackage' for Windows.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-apps.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the installed apps\n.DESCRIPTION\n\tThis PowerShell script lists the installed applications (from Windows Store, or Snap Store).\n.EXAMPLE\n\tPS> ./list-apps.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t& snap list\n\t} else {\n\t\tGet-AppxPackage | Format-Table -property Name,Version,InstallLocation,Status -autoSize\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropbox file upload functionality in PowerShell\nDESCRIPTION: Full implementation of the script that uploads a local file to Dropbox. It uses REST API with proper authentication headers and handles the file upload process. Requires a Dropbox access token to be configured in the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upload-to-dropbox.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUploads a file to Dropbox\n.DESCRIPTION\n\tThis PowerShell script uploads a local file to Dropbox.\n.PARAMETER Path\n\tSpecifies the path to the local file\n.EXAMPLE\n\tPS> .\\upload-to-dropbox.ps1 my.txt\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([Parameter (Mandatory = $True, ValueFromPipeline = $True)] [Alias(\"f\")] [string]$SourceFilePath) \n\ntry {\n\t$DropBoxAccessToken = \"YOUR-DROPBOX-ACCESS-TOKEN-HERE\"   # Replace with your DropBox Access Token\n\t$outputFile = Split-Path $SourceFilePath -leaf\n\t$TargetFilePath=\"/$outputFile\"\n\t$arg = '{ \"path\": \"' + $TargetFilePath + '\", \"mode\": \"add\", \"autorename\": true, \"mute\": false }'\n\t$authorization = \"Bearer \" + $DropBoxAccessToken\n\t$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n\t$headers.Add(\"Authorization\", $authorization)\n\t$headers.Add(\"Dropbox-API-Arg\", $arg)\n\t$headers.Add(\"Content-Type\", 'application/octet-stream')\n\tInvoke-RestMethod -Uri https://content.dropboxapi.com/2/files/upload -Method Post -InFile $SourceFilePath -Headers $headers\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0]) after $Elapsed sec.\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full Script: write-uppercase.ps1 (PowerShell)\nDESCRIPTION: The complete source code for the `write-uppercase.ps1` script. It includes comment-based help, defines an optional string parameter 'text', prompts for input if 'text' is empty, converts the provided text to uppercase using the .ToUpper() string method, and outputs the result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-uppercase.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text in uppercase letters\n.DESCRIPTION\n\tThis PowerShell script writes the given text in uppercase letters.\n.PARAMETER text\n\tSpecifies the text to write (ask user by default)\n.EXAMPLE\n\tPS> ./write-uppercase.ps1 \"Hello World\"\n\tHELLO WORLD\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\nif ($text -eq \"\" ) { $text = Read-Host \"Enter the text to write\" }\n\nWrite-Output $text.ToUpper()\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Displaying Country Data (PowerShell)\nDESCRIPTION: The `ListCountries` function fetches data from a public REST API (restcountries.eu), parses the JSON response, and creates custom PSObjects with selected country details. The main part of the script executes this function, formats the output as a table showing Country, Capital, Population, TLD, and Phone, and includes basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-countries.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists details of all countries\n.DESCRIPTION\n\tThis PowerShell script lists details of all countries.\n.EXAMPLE\n\tPS> ./list-countries.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction ListCountries { \n\t$Countries = (Invoke-WebRequest -uri \"https://restcountries.eu/rest/v2/all\" -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\tforeach($Country in $Countries) {\n\t\tNew-Object PSObject -Property @{\n\t\t\t'Country' = \"$($Country.Name)\"\n\t\t\t'Capital' = \"$($Country.Capital)\"\n\t\t\t'Population' = \"$($Country.Population)\"\n\t\t\t'TLD' = \"$($Country.TopLevelDomain)\"\n\t\t\t'Phone' = \"+$($Country.CallingCodes)\"\n\t\t}\n\t}\n}\n\ntry {\n\tListCountries | format-table -property Country,Capital,Population,TLD,Phone\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mozilla Thunderbird with PowerShell\nDESCRIPTION: This PowerShell script installs Mozilla Thunderbird by invoking the winget package manager with required agreements accepted, providing feedback on installation success or failure. It supports common PowerShell parameters like Verbose, Debug, and Error handling for enhanced script control. Inputs include standard parameters while outputs are console messages and appropriate exit codes indicating success (0) or failure (1). It requires the winget tool to be installed and available in the system PATH.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-thunderbird.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Thunderbird\n.DESCRIPTION\n\tThis PowerShell script installs Mozilla Thunderbird.\n.EXAMPLE\n\tPS> ./install-thunderbird.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Mozilla Thunderbird, please wait...\"\n\n\t& winget install --id Mozilla.Thunderbird --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Mozilla Thunderbird installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Building using Compile Script and Make (PowerShell)\nDESCRIPTION: This snippet builds a repository with a compile script. It checks for compile.sh, then executes it and calls make. Requires make and a shell that runs .sh scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/compile.sh\" -pathType leaf) { \n\t\t\"⏳ Building 📂$dirName by using 'compile.sh'...\n\t\tSet-Location \"$path/\"\n\n\t\t& ./compile.sh\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing './compile.sh' exited with error code $lastExitCode\" }\n\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' has failed\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Running add-firewall-rules.ps1 with Example Parameters in PowerShell\nDESCRIPTION: This example demonstrates how to execute the add-firewall-rules.ps1 script using specific values. The invocation sets the target path as 'C:\\MyApp\\bin', the firewall rule direction as 'Outbound', and the profile as 'Private'. This example assumes the user has administrator rights and the directory contains executables. Outputs added firewall rules or warnings if no executables are found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/add-firewall-rules.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./add-firewall-rules.ps1 -PathToExecutables C:\\MyApp\\bin -Direction Outbound -Profile Private\n```\n\n----------------------------------------\n\nTITLE: Listing Services with PowerShell Script - PowerShell\nDESCRIPTION: This snippet shows the command-line usage of the 'list-services.ps1' script, including support for standard PowerShell common parameters such as Verbose, Debug, ErrorAction, and more. It is intended for users to invoke the script directly from PowerShell, passing any additional common parameters as needed. The script outputs key service attributes such as Status, Name, and DisplayName.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-services.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-services.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Flow Control\nDESCRIPTION: Illustrates flow control structures in PowerShell, including `if`, `do-while`, `while`, `for`, `foreach`, and `switch` statements. This allows for conditional execution, looping, and pattern matching in scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nif (1 -eq 1) { }                                          # Do something if 1 is equal to 1\n\ndo { 'hi' } while ($false)                                # Loop while a condition is true (always executes at least once)\n\nwhile ($false) { 'hi' }                                   # While loops are not guaranteed to run at least once\nwhile ($true) { }                                         # Do something indefinitely\nwhile ($true) { if (1 -eq 1) { break } }                  # Break out of an infinite while loop conditionally\n\nfor ($i = 0; $i -le 10; $i++) { Write-Host $i }           # Iterate using a for..loop\nforeach ($item in (Get-Process)) { }                      # Iterate over items in an array\n\nswitch ('test') { 'test' { 'matched'; break } }           # Use the switch statement to perform actions based on conditions. Returns string 'matched'\nswitch -regex (@('Trevor', 'Daniel', 'Bobby')) {          # Use the switch statement with regular expressions to match inputs\n  'o' { $PSItem; break }                                  # NOTE: $PSItem or $_ refers to the \"current\" item being matched in the array\n}\nswitch -regex (@('Trevor', 'Daniel', 'Bobby')) {          # Switch statement omitting the break statement. Inputs can be matched multiple times, in this scenario.\n  'e' { $PSItem }\n  'r' { $PSItem }\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Details: -ParentDir\nDESCRIPTION: Describes the characteristics of the `-ParentDir` parameter used in `make-repos.ps1`. It specifies that the parameter is optional, accepts a String, is the first positional parameter, defaults to the current directory (`$PWD`), and does not accept pipeline input or wildcards.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repos.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n-ParentDir <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n```\n\n----------------------------------------\n\nTITLE: Common Parameters PowerShell\nDESCRIPTION: This section lists the common parameters supported by the PowerShell script. These parameters allow users to control the script's verbosity, debugging, error handling, and output behavior. These parameters are inherent to PowerShell and provide control over script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pig-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Halting the Local Computer with poweroff.ps1 (PowerShell)\nDESCRIPTION: This is the main script logic for poweroff.ps1. It requires administrator privileges via `#Requires -RunAsAdministrator`. The script checks the operating system using `$IsLinux`; if true, it executes `sudo shutdown`, otherwise (for Windows) it uses `Stop-Computer`. It includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/poweroff.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tHalts the computer (needs admin rights)\n.DESCRIPTION\n\tThis script halts the local computer immediately (needs admin rights).\n.EXAMPLE\n\tPS> ./poweroff\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\tif ($IsLinux) {\n\t\tsudo shutdown\n\t} else {\n\t\tStop-Computer\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hashtable Items\nDESCRIPTION: These commands demonstrate how to access items within a hashtable.  `$Person.FirstName` retrieves the value associated with the key \"FirstName\". `$Person.Likes[-1]` retrieves the last element of the array associated with the \"Likes\" key. `$Person.Age = 50` adds a new key-value pair to the hashtable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Person.FirstName                                           # Retrieve an item from a HashTable\n$Person.Likes[-1]                                           # Returns the last item in the \"Likes\" array, in the $Person HashTable (software)\n$Person.Age = 50                                            # Add a new property to a HashTable\n```\n\n----------------------------------------\n\nTITLE: Enumerating Services and Handling Errors in PowerShell - PowerShell\nDESCRIPTION: This script uses Get-Service to enumerate all services on the local computer, implementing a try-catch block for robust error handling. If the command succeeds, it exits successfully with code 0; if an error occurs, it provides a descriptive message including the line number and error details, and exits with code 1. No external dependencies are required, and users may supply standard PowerShell parameters to modify execution as supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-services.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the installed services\n.DESCRIPTION\n\tThis PowerShell script lists all services installed on the local computer.\n.EXAMPLE\n\tPS> ./list-services.ps1\n\n\tStatus   Name               DisplayName\n\t------   ----               -----------\n\tRunning  AarSvc_886c2       Agent Activation Runtime_886c2\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Service\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CPU Temperature (Linux/Windows) in PowerShell\nDESCRIPTION: This snippet implements GetCPUTemperature, a function to retrieve CPU temperature across platforms. On Linux, it reads /sys/class/thermal/thermal_zone0/temp, scaling the value to degrees Celsius; on Windows, it queries WMI via Win32_PerfFormattedData_Counters_ThermalZoneInformation. The function returns -300 if unsupported. No external modules needed; relies on built-in cmdlets like Get-WmiObject. Output: floating-point temperature in °C, or -300 if not available. Platform-specific constraints apply.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-host.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction GetCPUTemperature {\n        $temp = -300 # unsupported\n        if ($IsLinux) {\n                if (Test-Path \"/sys/class/thermal/thermal_zone0/temp\" -pathType leaf) {\n                        [int]$IntTemp = Get-Content \"/sys/class/thermal/thermal_zone0/temp\"\n                        $temp = [math]::round($IntTemp / 1000.0, 1)\n                }\n        } else {\n                $objects = Get-WmiObject -Query \"SELECT * FROM Win32_PerfFormattedData_Counters_ThermalZoneInformation\" -Namespace \"root/CIMV2\"\n                foreach ($object in $objects) {\n                        $highPrec = $object.HighPrecisionTemperature\n                        $temp = [math]::round($highPrec / 100.0, 1)\n                }\n        }\n        return $temp\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions and Adding PowerShell to System PATH - PowerShell\nDESCRIPTION: This snippet sets executable permissions on the PowerShell binary for Unix-like systems and configures the system or user PATH environment variable to include the installation directory if requested. On Windows, it modifies registry environment variables targeting either machine or user scope depending on installation location, with error handling for permissions. On Linux/macOS, it manages symbolic links from common binary paths (/usr/bin/pwsh or /usr/local/bin/pwsh) to the installed 'pwsh' executable, ensuring link correctness and using sudo where necessary. It also updates the current session PATH if not running within pwsh. Assumes admin or sudo permissions when modifying system-wide settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\n## Change the mode of 'pwsh' to 'rwxr-xr-x' to allow execution\nif (-not $IsWinEnv) { chmod 755 $Destination/pwsh }\n\nif ($AddToPath -and -not $UseMSI) {\n    if ($IsWinEnv) {\n        if ((-not ($Destination.StartsWith($ENV:USERPROFILE))) -and\n            (-not ($Destination.StartsWith($ENV:APPDATA))) -and\n            (-not ($Destination.StartsWith($env:LOCALAPPDATA)))) {\n            $TargetRegistry = [System.EnvironmentVariableTarget]::Machine\n            try {\n                Add-PathTToSettings -Path $Destination -Target $TargetRegistry\n            } catch {\n                Write-Warning -Message \"Unable to save the new path in the machine wide registry: $_\"\n                $TargetRegistry = [System.EnvironmentVariableTarget]::User\n            }\n        } else {\n            $TargetRegistry = [System.EnvironmentVariableTarget]::User\n        }\n\n        # If failed to install to machine wide path or path was not appropriate for machine wide path\n        if ($TargetRegistry -eq [System.EnvironmentVariableTarget]::User) {\n            try {\n                Add-PathTToSettings -Path $Destination -Target $TargetRegistry\n            } catch {\n                Write-Warning -Message \"Unable to save the new path in the registry for the current user : $_\"\n            }\n        }\n    } else {\n        $targetPath = Join-Path -Path $Destination -ChildPath \"pwsh\"\n        if ($IsLinuxEnv) { $symlink = \"/usr/bin/pwsh\" } elseif ($IsMacOSEnv) { $symlink = \"/usr/local/bin/pwsh\" }\n        $needNewSymlink = $true\n\n        if (Test-Path -path $symlink) {\n            $linkItem = Get-Item -Path $symlink\n            if ($linkItem.LinkType -ne \"SymbolicLink\") {\n                Write-Warning \"'$symlink' already exists but it's not a symbolic link. Abort adding to PATH.\"\n                $needNewSymlink = $false\n            } elseif ($linkItem.Target -contains $targetPath) {\n                ## The link already points to the target\n                Write-Verbose \"'$symlink' already points to '$targetPath'\" -Verbose\n                $needNewSymlink = $false\n            }\n        }\n\n        if ($needNewSymlink) {\n            $uid = id -u\n            if ($uid -ne \"0\") { $SUDO = \"sudo\" } else { $SUDO = \"\" }\n\n            Write-Verbose \"Make symbolic link '$symlink' point to '$targetPath'...\" -Verbose\n            & $SUDO ln -fs $targetPath $symlink\n\n            if ($LASTEXITCODE -ne 0) {\n                Write-Error \"Could not add to PATH: failed to make '$symlink' point to '$targetPath'.\"\n            }\n        }\n    }\n\n    ## Add to the current process 'Path' if the process is not 'pwsh'\n    $runningProcessName = (Get-Process -Id $PID).ProcessName\n    if ($runningProcessName -ne 'pwsh') {\n        $env:Path = $Destination + [System.IO.Path]::PathSeparator + $env:Path\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of running write-location.ps1\nDESCRIPTION: Demonstrates executing the script and shows the expected output format, displaying coordinates and location information.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-location.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-location.ps1\n📍47.7278°,10.3192° near 87435 Kempten in Bavaria, Germany.\n```\n\n----------------------------------------\n\nTITLE: Measuring DNS Resolution Speed (PowerShell)\nDESCRIPTION: This core script snippet implements the DNS speed check. It imports a list of domains from a CSV file, uses a stopwatch to time lookups, clears the DNS cache on Windows, performs lookups using `dig` on Linux or `Resolve-DNSName` on Windows, calculates the average time per domain, and prints a status message based on the speed. It includes error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-dns.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCheck the DNS resolution \n.DESCRIPTION\n\tThis PowerShell script measures the DNS resolution speed using 100 internet domains and prints it.\n.EXAMPLE\n\tPS> ./check-dns.ps1\n\t✅ Internet DNS: 33.6ms lookup time\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n \ntry {\n\t$table = Import-CSV \"$PSScriptRoot/../data/popular-domains.csv\"\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\tif ($IsLinux) {\n\t\tforeach($row in $table){$nop=dig $row.Domain +short}\n\t} else {\n\t\tClear-DnsClientCache\n\t\tforeach($row in $table){$nop=Resolve-DNSName $row.Domain}\n\t}\n\t[float]$elapsed = $stopWatch.Elapsed.TotalSeconds * 1000.0\n\t$speed = [math]::round($elapsed / $table.Length, 1)\n\tif ($speed -lt 10.0) {\n\t\tWrite-Output \"✅ Internet DNS: $($speed)ms excellent lookup time\"\n\t} elseif ($speed -lt 100.0) {\n\t\tWrite-Output \"✅ Internet DNS: $($speed)ms lookup time\"\n\t} else {  \n\t\tWrite-Output \"⚠️ Internet DNS: $($speed)ms slow lookup time\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for watch-commits.ps1 Script (PowerShell)\nDESCRIPTION: Defines the command-line parameters accepted by the watch-commits.ps1 script. Includes `pathToRepo` for the Git repository path (defaults to current directory '$PWD'), `updateInterval` for the check frequency in seconds (defaults to 60), and `speed` for the typewriter effect speed (defaults to 10). It also notes support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-commits.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/watch-commits.ps1 [[-pathToRepo] <String>] [[-updateInterval] <Int32>] [[-speed] <Int32>] [<CommonParameters>]\n\n-pathToRepo <String>\n    Specifies the file path to the local Git repository.\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-updateInterval <Int32>\n    \n    Required?                    false\n    Position?                    2\n    Default value                60\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-speed <Int32>\n    \n    Required?                    false\n    Position?                    3\n    Default value                10\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Function Bytes2String for Human-Readable Byte Formatting\nDESCRIPTION: Defines a function that converts a byte count into a human-readable string with appropriate units such as KB, MB, GB, TB, or PB. It handles small sizes and scales appropriately for larger sizes, improving output clarity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-drives.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Bytes2String { param([int64]$bytes)\n        if ($bytes -lt 1KB) { return \"$bytes bytes\" }\n        if ($bytes -lt 1MB) { return '{0:N0}KB' -f ($bytes / 1KB) }\n        if ($bytes -lt 1GB) { return '{0:N0}MB' -f ($bytes / 1MB) }\n        if ($bytes -lt 1TB) { return '{0:N0}GB' -f ($bytes / 1GB) }\n        if ($bytes -lt 1PB) { return '{0:N0}TB' -f ($bytes / 1TB) }\n        return '{0:N0}GB' -f ($bytes / 1PB)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tether Rate Check Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the 'check-tether-rate.ps1' PowerShell script to query the current Tether exchange rate and provide the result using text-to-speech. The script supports common PowerShell parameters such as Verbose, Debug, and ErrorAction. Inputs include any of the specified common parameters, and the output is delivered both in the console and via TTS. There are no explicit code dependencies beyond PowerShell and required permissions for TTS. Limitations include reliance on network availability and the presence of TTS capability on the executing system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-tether-rate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ncheck-tether-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-tether-rate\n\n```\n\n----------------------------------------\n\nTITLE: Generating Random Password Grids in PowerShell\nDESCRIPTION: This main script content generates a grid of random passwords using a nested loop structure and System.Random for secure character selection. It accepts PasswordLength, Columns, and Rows as parameters, with sensible defaults, and outputs a matrix where each cell contains a randomly generated password. Dependencies are native to PowerShell and .NET, with no additional modules needed. Inputs are the integer parameters, and the output is a grid of passwords; error handling is built in to manage exceptions gracefully.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-passwords.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists random passwords\n.DESCRIPTION\n\tThis PowerShell script lists random passwords.\n.PARAMETER PasswordLength\n\tSpecifies the length of the password\n.PARAMETER Columns\n\tSpecifies the number of columns\n.PARAMETER Rows\n\tSpecifies the number of rows\n.EXAMPLE\n\tPS> ./list-passwords.ps1\n\n\t\"4yE=[mu\"Az|IE@   PZ}E9Q\"&?.!%49`   zU3[E7`xA)(6W_3   :wd'a(O@fr}.Z8=\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$PasswordLength = 15, [int]$Columns = 6, [int]$Rows = 30)\n\n$MinCharCode = 33\n$MaxCharCode = 126\n\ntry {\n\twrite-output \"\"\n\t$Generator = New-Object System.Random\n\tfor ($j = 0; $j -lt $Rows; $j++) {\n\t\t$Line = \"\"\n\t\tfor ($k = 0; $k -lt $Columns; $k++) {\n\t\t\tfor ($i = 0; $i -lt $PasswordLength; $i++) {\n\t\t\t\t$Line += [char]$Generator.next($MinCharCode,$MaxCharCode)\n\t\t\t}\n\t\t\t$Line += \"   \"\n\t\t}\n\t\twrite-output \"$Line\"\n\t}\n\twrite-output \"\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WSL Installation Logic | PowerShell\nDESCRIPTION: This is the core implementation of the WSL installation script. It uses a `try/catch` block to manage potential errors during feature enablement and version setting via `dism.exe` and `wsl.exe`. The script explicitly requires administrator rights (`#Requires -RunAsAdministrator`) and measures the total execution time, providing progress updates and a final success message or an error report.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-wsl.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Windows Subsystem for Linux (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script installs Windows Subsystem for Linux. It needs admin rights.\n.EXAMPLE\n\tPS> ./install-wsl.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($false) {\n\n\t\t& wsl --install\n\n\t} else {\n\t\t\"👉 Step 1/3: Enable WSL...\"\n\t\t& dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n\t\t\"👉 Step 2/3: Enable virtual machine platform...\"\n\t\t& dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n\t\t\"👉 Step 3/3: Enable WSL version 2...\"\n\t\t& wsl --set-default-version 2\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ installed Windows Subsystem for Linux (WSL) in $Elapsed sec\"\n\t\"  NOTE: reboot now, then visit the Microsoft Store and install a Linux distribution (e.g. Ubuntu, openSUSE, SUSE Linux, Kali Linux, Debian, Fedora, Pengwin, or Alpine)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a REST API\nDESCRIPTION: This code calls a REST API using `Invoke-RestMethod`. It creates a hashtable `$Params` to specify the URI and method (GET). `Invoke-RestMethod` sends the HTTP request and returns the response.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_33\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Params = @{\n  Uri = 'https://api.github.com/events'\n  Method = 'Get'\n}\nInvoke-RestMethod @Params                                   # Call a REST API, using the HTTP GET method\n```\n\n----------------------------------------\n\nTITLE: Closing Mozilla Thunderbird Using PowerShell\nDESCRIPTION: A PowerShell script that gracefully terminates the Mozilla Thunderbird email application using TaskKill command. It includes error handling to inform the user if Thunderbird is not currently running via a text-to-speech notification.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-thunderbird.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Thunderbird app\n.DESCRIPTION\n\tThis PowerShell script closes the Mozilla Thunderbird email application gracefully.\n.EXAMPLE\n\tPS> ./close-thunderbird.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im thunderbird.exe\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Mozilla Thunderbird isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Multiple Cryptocurrencies Rates in PowerShell\nDESCRIPTION: Defines the ListCryptoRates function that sequentially calls ListCryptoRate for a fixed set of popular cryptocurrencies, including Bitcoin, Ethereum, and others. This aggregates the individual results into a pipeline output. It requires the ListCryptoRate function to be available and depends on the CryptoCompare API availability for each request. It encapsulates logic and provides a single entry point to retrieve multiple crypto exchange rates.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-crypto-rates.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction ListCryptoRates { \n\tListCryptoRate BTC   \"Bitcoin\"\n\tListCryptoRate ETH   \"Ethereum\"\n\tListCryptoRate BUSD  \"BUSD\"\n\tListCryptoRate XRP   \"XRP\"\n\tListCryptoRate USDT  \"Tether\"\n\tListCryptoRate AVAX  \"Avalanche\"\n\tListCryptoRate LTC   \"Litecoin\"\n\tListCryptoRate SOL   \"Solana\"\n\tListCryptoRate GALA  \"Gala\"\n\tListCryptoRate DOGE  \"Dogecoin\"\n\tListCryptoRate ADA   \"Cardano\"\n\tListCryptoRate BNB   \"Binance Coin\"\n\tListCryptoRate USDC  \"USD Coin\"\n\tListCryptoRate DOT   \"Polkadot\"\n\tListCryptoRate UNI   \"Uniswap\"\n\tListCryptoRate BUSD  \"Binance USD\"\n\tListCryptoRate BCH   \"Bitcoin Cash\"\n\tListCryptoRate LINK  \"Chainlink\"\n\tListCryptoRate LUNA  \"Terra\"\n\tListCryptoRate ICP   \"Internet Computer\"\n\tListCryptoRate WBTC  \"Wrapped Bitcoin\"\n\tListCryptoRate MATIC \"Polygon\"\n\tListCryptoRate XLM   \"Stellar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing install-powershell.ps1 Logic for PowerShell Installation - PowerShell\nDESCRIPTION: Contains the full script implementation for install-powershell.ps1, including cmdlet binding, parameter definitions, platform detection, destination resolution, and conditional logic for installation steps. Key dependencies are PowerShell itself (running v3.0 or above), optional 'PackageManagement' for daily builds, and environment write permissions. The script sets strict mode, establishes error-handling preferences, determines the OS, sets installation destinations (with fallbacks), and handles MSI or archive-based installation. Output is the installation and configuration of PowerShell at the specified location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.Synopsis\n    Install PowerShell on Windows, Linux or macOS.\n.DESCRIPTION\n    By default, the latest PowerShell release package will be installed.\n    If '-Daily' is specified, then the latest PowerShell daily package will be installed.\n.Parameter Destination\n    The destination path to install PowerShell to.\n.Parameter Daily\n    Install PowerShell from the daily build.\n    Note that the 'PackageManagement' module is required to install a daily package.\n.Parameter DoNotOverwrite\n    Do not overwrite the destination folder if it already exists.\n.Parameter AddToPath\n    On Windows, add the absolute destination path to the 'User' scope environment variable 'Path';\n    On Linux, make the symlink '/usr/bin/pwsh' points to \"$Destination/pwsh\";\n    On MacOS, make the symlink '/usr/local/bin/pwsh' points to \"$Destination/pwsh\".\n.EXAMPLE\n    Install the daily build\n    .\\install-powershell.ps1 -Daily\n.EXAMPLE\n    Invoke this script directly from GitHub\n    Invoke-Expression \"& { $(Invoke-RestMethod 'https://aka.ms/install-powershell.ps1') } -daily\"\n#>\n\n[CmdletBinding(DefaultParameterSetName = \"Daily\")]\nparam(\n    [Parameter(ParameterSetName = \"Daily\")]\n    [string] $Destination,\n\n    [Parameter(ParameterSetName = \"Daily\")]\n    [switch] $Daily,\n\n    [Parameter(ParameterSetName = \"Daily\")]\n    [switch] $DoNotOverwrite,\n\n    [Parameter(ParameterSetName = \"Daily\")]\n    [switch] $AddToPath,\n\n    [Parameter(ParameterSetName = \"MSI\")]\n    [switch] $UseMSI,\n\n    [Parameter(ParameterSetName = \"MSI\")]\n    [switch] $Quiet,\n\n    [Parameter(ParameterSetName = \"MSI\")]\n    [switch] $AddExplorerContextMenu,\n\n    [Parameter(ParameterSetName = \"MSI\")]\n    [switch] $EnablePSRemoting,\n\n    [Parameter()]\n    [switch] $Preview\n)\n\nSet-StrictMode -Version 3.0\n$ErrorActionPreference = \"Stop\"\n\n$IsLinuxEnv = (Get-Variable -Name \"IsLinux\" -ErrorAction Ignore) -and $IsLinux\n$IsMacOSEnv = (Get-Variable -Name \"IsMacOS\" -ErrorAction Ignore) -and $IsMacOS\n$IsWinEnv = !$IsLinuxEnv -and !$IsMacOSEnv\n\nif (-not $Destination) {\n    if ($IsWinEnv) {\n        $Destination = \"$env:LOCALAPPDATA\\Microsoft\\powershell\"\n    } else {\n\tif (Test-Path -path \"/opt/PowerShell\" -pathType container) {\n\t\t$Destination = \"/opt/PowerShell\"\n\t} else {\n        \t$Destination = \"~/.powershell\"\n\t}\n    }\n\n    if ($Daily) {\n        $Destination = \"${Destination}-daily\"\n    }\n}\n\n$Destination = $PSCmdlet.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Destination)\n\nif (-not $UseMSI) {\n    #Write-Host \"Installation destination path: $Destination\"\n} else {\n    if (-not $IsWinEnv) {\n        throw \"-UseMSI is only supported on Windows\"\n    } else {\n        $MSIArguments = @()\n        if($AddExplorerContextMenu) {\n            $MSIArguments += \"ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1\"\n        }\n        if($EnablePSRemoting) {\n            $MSIArguments += \"ENABLE_PSREMOTING=1\"\n        }\n    }\n}\n\n# Expand an archive using Expand-archive when available\n```\n\n----------------------------------------\n\nTITLE: Get CPU Temperature in PowerShell\nDESCRIPTION: This function, GetCPUTemperature, retrieves the CPU temperature. On Linux, it reads the temperature from /sys/class/thermal/thermal_zone0/temp. On Windows, it uses WMI (Win32_PerfFormattedData_Counters_ThermalZoneInformation) to fetch the HighPrecisionTemperature.  It returns 99999.9 if unsupported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-cpu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction GetCPUTemperature {\n\t$temp = 99999.9 # unsupported\n\tif ($IsLinux) {\n\t\tif (Test-Path \"/sys/class/thermal/thermal_zone0/temp\" -pathType leaf) {\n\t\t\t[int]$IntTemp = Get-Content \"/sys/class/thermal/thermal_zone0/temp\"\n\t\t\t$temp = [math]::round($IntTemp / 1000.0, 1)\n\t\t}\n\t} else {\n\t\t$objects = Get-WmiObject -Query \"SELECT * FROM Win32_PerfFormattedData_Counters_ThermalZoneInformation\" -Namespace \"root/CIMV2\"\n\t\tforeach ($object in $objects) {\n\t\t\t$highPrec = $object.HighPrecisionTemperature\n\t\t\t$temp = [math]::round($highPrec / 100.0, 1)\n\t\t}\n\t}\n\treturn $temp\n}\n```\n\n----------------------------------------\n\nTITLE: Writing ASCII Image to Console with PowerShell\nDESCRIPTION: This PowerShell script defines a function WriteLine to output strings in green to the console, then prints several hard-coded lines to render an ASCII image. The script accepts and supports standard PowerShell common parameters like Verbose and Debug, and exits with a success status. No external modules or packages are required; it outputs directly to the console and expects no input except for command-line parameters. The script can be customized by editing the WriteLine calls to modify the ASCII art, and is constrained to console output environments that support colored text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-ascii-image.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Writes an ASCII image\n.DESCRIPTION\n        This PowerShell script writes an ASCII image to the console.\n.EXAMPLE\n        PS> .\\write-ascii-image.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction WriteLine { param([string]$line)\n\tWrite-Host $line -foregroundColor green\n}\n\nWriteLine \"\"\nWriteLine \"              _-o#&&*''''?d:>b\\_\"\nWriteLine \"          _o/'`''  '',, dMF9MMMMMHo_\"\nWriteLine \"       .o&#'        `'MbHMMMMMMMMMMMHo.\"\nWriteLine \"     .o'' '         vodM*$&&HMMMMMMMMMM?.\"\nWriteLine \"    ,'              $M&ood,~'`(&##MMMMMMH\\\"\nWriteLine \"   /               ,MMMMMMM#b?#bobMMMMHMMML\"\nWriteLine \"  &              ?MMMMMMMMMMMMMMMMM7MMM$R*Hk\"\nWriteLine \" ?$.            :MMMMMMMMMMMMMMMMMMM/HMMM|`*L\"\nWriteLine \"|               |MMMMMMMMMMMMMMMMMMMMbMH'   T,\"\nWriteLine \"$H#:            `*MMMMMMMMMMMMMMMMMMMMb#}'  `?\"\nWriteLine \"]MMH#             ''*''''*#MMMMMMMMMMMMM'    -\"\nWriteLine \"MMMMMb_                   |MMMMMMMMMMMP'     :\"\nWriteLine \"HMMMMMMMHo                 `MMMMMMMMMT       .\"\nWriteLine \"?MMMMMMMMP                  9MMMMMMMM}       -\"\nWriteLine \"-?MMMMMMM                  |MMMMMMMMM?,d-    '\"\nWriteLine \" :|MMMMMM-                 `MMMMMMMT .M|.   :\"\nWriteLine \"  .9MMM[                    &MMMMM*' `'    .\"\nWriteLine \"   :9MMk                    `MMM#'        -\"\nWriteLine \"     &M}                     '          .-\"\nWriteLine \"      `&.                             .\"\nWriteLine \"        `~,   .                     ./\"\nWriteLine \"            . _                  .-\"\nWriteLine \"              '`--._,dd###pp='''\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Verbs with Error Handling in PowerShell\nDESCRIPTION: This PowerShell script retrieves a list of all available verbs using the `Get-Verb` cmdlet and sorts them alphabetically by the 'Verb' property. It then outputs the sorted list. The script is wrapped in a try-catch block to handle potential errors during execution. If an error occurs, it displays an error message including the line number and the error details, and exits with a non-zero exit code.  It requires no external dependencies.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-verbs.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists verbs\n.DESCRIPTION\n\tThis PowerShell script lists all allowed verbs.\n.EXAMPLE\n\tPS> ./list-verbs.ps1\n\n\tVerb        Group\n\t----        -----\n\tAdd         Common            \n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Verb | Sort-Object -Property Verb\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete QuickSort Implementation and Benchmark in PowerShell\nDESCRIPTION: The full implementation of the script including the QuickSort algorithm class, script parameters, random data generation, performance measurement, and result reporting. The script creates a class for QuickSort with a static Sort method, generates a random list of integers, measures the time to sort the list, and outputs the result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-QuickSort.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Measures the speed of QuickSort\n.DESCRIPTION\n        This PowerShell script measures the speed of the QuickSort algorithm.\n        QuickSort is an in-place sorting algorithm. Developed by British computer scientist\n\tTony Hoare in 1959 and published in 1961, it is still a commonly used algorithm for\n\tsorting. When implemented well, it can be somewhat faster than merge sort and about\n\ttwo or three times faster than heapsort.\n.PARAMETER numIntegers\n        Specifies the number of integers to sort\n.EXAMPLE\n        PS> ./measure-QuickSort.ps1\n \t🧭 0.085 sec to sort 1000 integers by QuickSort \n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass QuickSort {\n    static Sort($targetList, $left, $right) {\n        $i=$left\n        $j=$right\n        $pivot = $targetList[($left+$right)/2]\n\n        while($i -le $j) {\n            while($targetList[$i] -lt $pivot -and $i -lt $right) {$i++}\n            while($targetList[$j] -gt $pivot -and $j -gt $left) {$j--}\n\n            if($i -le $j) {\n                $tmp = $targetList[$i]\n                $targetList[$i]=$targetList[$j]\n                $targetList[$j]=$tmp\n\n                $i++\n                $j--\n            }\n        }\n\n        if($left -lt $j) {[QuickSort]::Sort($targetList, $left, $j)}\n        if($i -lt $right) {[QuickSort]::Sort($targetList, $i, $right)}\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[QuickSort]::Sort($list, 0, $list.Count-1)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by QuickSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Sending UDP Datagram with PowerShell\nDESCRIPTION: This PowerShell script sends a UDP datagram message to a specified IP address and port. It takes TargetIP, TargetPort, and Message as parameters or prompts the user for input if not provided. It uses .NET classes to handle IP addresses, endpoints, and socket communication for sending the UDP message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-udp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSends a UDP datagram message to an IP address and port\n.DESCRIPTION\n\tThis PowerShell script sends a UDP datagram message to an IP address and port.\n.PARAMETER TargetIP\n\tSpecifies the target IP address\n.PARAMETER TargetPort\n\tSpecifies the target port number\n.PARAMETER Message\n\tSpecifies the message text to send\n.EXAMPLE\n\tPS> ./send-udp 192.168.100.100 8080 \"TEST\"\n\t✅  Done.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$TargetIP = \"\", [int]$TargetPort = 0, [string]$Message = \"\")\n\ntry {\n\tif ($TargetIP -eq \"\" ) { $TargetIP = read-host \"Enter target IP address\" }\n\tif ($TargetPort -eq 0 ) { $TargetPort = read-host \"Enter target port\" }\n\tif ($Message -eq \"\" ) { $Message = read-host \"Enter message to send\" }\n\n\t$IP = [System.Net.Dns]::GetHostAddresses($TargetIP) \n\t$Address = [System.Net.IPAddress]::Parse($IP) \n\t$EndPoints = New-Object System.Net.IPEndPoint($Address, $TargetPort) \n\t$Socket = New-Object System.Net.Sockets.UDPClient \n\t$EncodedText = [Text.Encoding]::ASCII.GetBytes($Message) \n\t$SendMessage = $Socket.Send($EncodedText, $EncodedText.Length, $EndPoints) \n\t$Socket.Close() \n\n\t\"✅  Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Scanning Directory Tree for Empty Folders (PowerShell)\nDESCRIPTION: This is the core implementation of the `list-empty-dirs.ps1` script. It initializes a stopwatch, resolves the input path, uses `Get-ChildItem` recursively to find all directories, filters them using `Where-Object` to check if they contain any items (indicating they are not empty), outputs the paths of empty directories, counts them, and reports the total count and elapsed time upon completion or catches and reports errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-empty-dirs.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all empty directories in a directory tree\n.DESCRIPTION\n\tThis PowerShell script scans a directory tree and lists all empty directories.\n.PARAMETER path\n\tSpecifies the path to the directory tree (current working directory by default)\n.EXAMPLE\n\tPS> ./list-empty-dirs.ps1 C:\\Windows\n\t...\n\t✅ Found 39972 empty directories within 📂C:\\Windows in 222 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning $path for empty folders...\"\n\t[int]$count = 0\n\tGet-ChildItem \"$path\" -attributes Directory -recurse -force | Where-Object { @(Get-ChildItem $_.FullName -force).Count -eq 0 } | ForEach-Object {\n\t\t\"📂$($_.FullName)\"\n\t\t$count++\n\t}\n\tWrite-Progress -completed \" \"\n\t[int]$Elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $count empty directories within 📂$path in $elapsed sec\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Validating Subnet Masks\nDESCRIPTION: The PowerShell script named 'check-subnet-mask.ps1' checks whether a given subnet mask string is valid by matching it with a predefined regular expression pattern. It accepts an optional parameter '-address' for the subnet mask, prompts for input if no parameter is provided, and outputs a success or warning message accordingly. The script includes error handling to catch runtime exceptions. Dependencies include PowerShell environment, and key input is the subnet mask string. The output indicates validity with a message and exit code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-subnet-mask.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the given subnet mask for validity\n.DESCRIPTION\n\tThis PowerShell script checks the given subnet mask for validity.\n.PARAMETER address\n\tSpecifies the subnet mask to check\n.EXAMPLE\n\tPS> ./check-subnet-mask.ps1 255.255.255.0\n\t✅ subnet mask 255.255.255.0 is valid\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$address = \"\")\n\nfunction IsSubNetMaskValid { param([string]$IP)\n\t$RegEx = \"^(254|252|248|240|224|192|128).0.0.0$|^255.(254|252|248|240|224|192|128|0).0.0$|^255.255.(254|252|248|240|224|192|128|0).0$|^255.255.255.(255|254|252|248|240|224|192|128|0)$\"\n\tif ($IP -match $RegEx) {\n\t\treturn $true\n\t} else {\n\t\treturn $false\n\t}\n}\n\ntry {\n\tif ($address -eq \"\" ) { $address = read-host \"Enter subnet mask to validate\" }\n\n\tif (IsSubNetMaskValid $address) {\n\t\t\"✅ subnet mask $Address is valid\"\n\t\texit 0 # success\n\t} else {\n\t\twrite-warning \"Invalid subnet mask: $address\"\n\t\texit 1\n\t}\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete implementation of the translate-text PowerShell script\nDESCRIPTION: The full implementation of the translate-text.ps1 script, which uses the LibreTranslate API to translate text between languages. Includes parameter handling, API interaction, and support for translating to multiple languages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-text.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTranslates text into other languages\n.DESCRIPTION\n\tThis PowerShell script translates text into other languages.\n.PARAMETER Text\n\tSpecifies the text to translate\n.PARAMETER SourceLang\n\tSpecifies the source language (English by default)\n.PARAMETER TargetLang\n\tSpecifies the target language (all by default)\n.EXAMPLE\n\tPS> ./translate-text \"Hello World\" en all\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Text = \"\", [string]$SourceLangCode = \"en\", [string]$TargetLangCode = \"all\")\n\nfunction UseLibreTranslate { param([string]$Text, [string]$SourceLangCode, [string]$TargetLangCode)\n\t$Parameters = @{\"q\"=\"$Text\"; \"source\"=\"$SourceLangCode\"; \"target\"=\"$TargetLangCode\"; }\n\t$Result = (Invoke-WebRequest -Uri https://libretranslate.de/translate -Method POST -Body ($Parameters|ConvertTo-Json) -ContentType \"application/json\" -useBasicParsing).content | ConvertFrom-Json\n\treturn $Result.translatedText\n}\n\ntry {\n\tif ($Text -eq \"\" ) { $Text = Read-Host \"Enter the text to translate\" }\n\n\tif ($TargetLangCode -eq \"all\") {\n\t\t$TargetLangCodes = \"ar\",\"de\",\"es\",\"fr\",\"ga\",\"hi\",\"it\",\"ja\",\"ko\",\"pt\",\"ru\",\"zh\"\n\t\tforeach($TargetLangCode in $TargetLangCodes) {\n\t\t\t$Translation = UseLibreTranslate $Text $SourceLangCode $TargetLangCode\n\t\t\tWrite-Output \"$($TargetLangCode): $Translation\"\n\t\t\tStart-Sleep -seconds 6 # 10 requests maximum per minute\n\t\t}\n\t} else {\n\t\t$Translation = UseLibreTranslate $Text $SourceLangCode $TargetLangCode\n\t\tWrite-Output \"$Translation\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a PowerShell Hashtable\nDESCRIPTION: This code creates a PowerShell hashtable (dictionary) named `$Person`. It defines key-value pairs including strings and an array.  This structure is useful for representing structured data.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Person = @{\n  FirstName = 'Joe'\n  LastName = 'Doe'\n  Likes = @(\n    'Bacon',\n    'Beer'\n  )\n}                                                           # Create a PowerShell HashTable\n```\n\n----------------------------------------\n\nTITLE: Listing All Print Jobs with PowerShell Script\nDESCRIPTION: This script enumerates all printer devices on the system using Get-Printer and lists their print jobs using Get-PrintJob. It outputs a custom PSObject for each printer with properties for the Printer name and associated Jobs, showing 'none' if there are no print jobs. It requires PowerShell version 4 or higher. Common PowerShell parameters such as Verbose and Debug are supported. Error handling reports if no printers are found and captures script errors including line numbers. The output is formatted as a table for readability. Linux support is planned but not implemented.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-print-jobs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all print jobs\n.DESCRIPTION\n\tThis PowerShell script lists all print jobs of all printer devices.\n.EXAMPLE\n\tPS> ./list-print-jobs.ps1\n\n\tPrinter                       Jobs\n\t-------                       ----\n\tET-2810 Series \t\t      none\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -Version 4\n\nfunction ListPrintJobs {\n\t$printers = Get-Printer\n\tif ($printers.Count -eq 0) { throw \"No printer found\" }\n\n\tforeach ($printer in $printers) {\n\t\t$PrinterName = $printer.Name\n\t\t$printjobs = Get-PrintJob -PrinterObject $printer\n\t\tif ($printjobs.Count -eq 0) {\n\t\t\t$PrintJobs = \"none\"\n\t\t} else {\n\t\t\t$PrintJobs = \"$printjobs\"\n\t\t}\n\t\tNew-Object PSObject -Property @{ Printer=$PrinterName; Jobs=$PrintJobs }\n\t}\n}\n\ntry {\n\tif ($IsLinux) {\n\t\t# TODO\n\t} else {\n\t\tListPrintJobs | Format-Table -property Printer,Jobs\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Notepad Application PowerShell Script\nDESCRIPTION: This PowerShell script closes the Notepad application gracefully by invoking a secondary script named 'close-program.ps1' with arguments specifying the application. It supports standard common parameters such as Verbose, Debug, ErrorAction, among others. The script accepts no direct inputs beyond these parameters and returns an exit code 0 on success. Dependencies include the 'close-program.ps1' script located in the same directory. The script is primarily intended to automate the shutdown process of the Notepad application in a controlled manner.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-notepad.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Notepad app\n.DESCRIPTION\n\tThis PowerShell script closes the Notepad application gracefully.\n.EXAMPLE\n\tPS> ./close-notepad.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Notepad\" \"notepad\" \"notepad\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Outlook Inbox Emails via COM Automation in PowerShell\nDESCRIPTION: This main script snippet creates a new Outlook COM Application, accesses the MAPI namespace, and retrieves the default inbox folder using a numeric identifier. It collects all items (emails) in the inbox, then pipes them through Select to include only the 'Received' and 'Subject' fields, and outputs a formatted table. Error handling catches exceptions, reports line numbers and error messages, and sets an appropriate process exit code. Prerequisites include Microsoft Outlook being installed and accessible via COM; the script operates interactively or as part of automated workflows.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-outlook-inbox.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists Outlook's Inbox \n.DESCRIPTION\n\tThis PowerShell script lists the emails in the inbox of Outlook.\n.EXAMPLE\n\tPS> ./list-outlook-inbox.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Outlook = New-Object -com Outlook.application\n\t$MAPI = $Outlook.GetNameSpace(\"MAPI\")\n\t$Inbox = $MAPI.GetDefaultFolder(6) # 6 = olFolderInbox\n\t$Inbox.items | Select Received,Subject | Format-Table -AutoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: Defines the parameters for the `convert-dir2zip.ps1` PowerShell script. It includes `dirPath` for the source directory and `zipPath` for the output ZIP file. Both parameters are optional and accept string values.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-dir2zip.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/convert-dir2zip.ps1 [[-dirPath] <String>] [[-zipPath] <String>] [<CommonParameters>]\n\n-dirPath <String>\n    Specifies the path to the directory\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-zipPath <String>\n    Specifies the path to the target .ZIP file (default is dirPath.zip)\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining the enable-crash-dumps.ps1 Script (PowerShell)\nDESCRIPTION: Contains the main PowerShell script code for enable-crash-dumps.ps1. It includes comment-based help (Synopsis, Description, Example, Link, Notes) and introductory comments detailing the script's purpose (setting registry keys for WER user-mode dumps), author (Ryan Waters, Markus Fleschutz), date, and usage rights. It also lists bitwise values for different MiniDump types for reference, which are likely used internally by the script to configure the dump type.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-crash-dumps.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tEnables the writing of crash dumps\n.DESCRIPTION\n\tThis PowerShell script enables the writing of crash dumps.\n.EXAMPLE\n\tPS> ./enable-crash-dumps.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n##################################################################\n#                                                                #\n# Written by: Ryan Waters                                        #\n#                                                                #\n# Program: Get-Dump.ps1                                          #\n# Date: 2-06-2020                                                #\n# Purpose: To set registry keys to gather a WER Usermode Dump    #\n#          and be able to change from a custom, mini, or FULL    #\n#          Dumps for ease of use for customers and others.       #\n#                                                                #\n# EULA: Code is free to use for all, and free to distribute      #\n#       I just ask that you leave the credit information and     #\n#       this EULA and Comment Section in tact and do not delete. #\n#                                                                #\n# Bitwise Values:  (For reference)                               #\n#                                                                #\n# 0x00000000 -  MiniDumpNormal                                   #\n# 0x00000001 -  MiniDumpWithDataSegs                             #\n# 0x00000002 -  MiniDumpWithFullMemory                           #\n# 0x00000004 -  MiniDumpWithHandleData                           #\n# 0x00000008 -  MiniDumpFilterMemory                             #\n# 0x00000010 -  MiniDumpScanMemory                               #\n# 0x00000020 -  MiniDumpWithUnloadedModules                      #\n# 0x00000040 -  MiniDumpWithIndirectlyReferenced                 #\n# 0x00000080 -  MemoryMiniDumpFilterModulePaths                  #\n# 0x00000100 -  MiniDumpWithProcessThreadData                    #\n# 0x00000200 -  MiniDumpWithPrivateReadWriteMemory               #\n# 0x00000400 -  MiniDumpWithoutOptionalData                      #\n# 0x00000800 -  MiniDumpWithFullMemoryInfo                       #\n# 0x00001000 -  MiniDumpWithThreadInfo                           #\n# 0x00002000 -  MiniDumpWithCodeSegs                             #\n# 0x00004000 -  MiniDumpWithoutAuxiliaryState                    #\n# 0x00008000 -  MiniDumpWithFullAuxiliaryState                   #\n# 0x00010000 -  MiniDumpWithPrivateWriteCopyMemory               #\n# 0x00020000 -  MiniDumpIgnoreInaccessibleMemory                 #\n# 0x00040000 -  MiniDumpWithTokenInformation                     #\n```\n\n----------------------------------------\n\nTITLE: Full Source Code of cd-ssh.ps1 PowerShell Script\nDESCRIPTION: The complete PowerShell script code for cd-ssh.ps1. It includes synopsis, description, example usage comments, and the logic to resolve the user's SSH path (~/.ssh), change the current location using Set-Location, handle potential errors if the directory doesn't exist using Test-Path and a try-catch block, and output the final path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-ssh.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the SSH folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's secure shell (SSH) folder.\n.EXAMPLE\n\tPS> ./cd-ssh.ps1\n\t📂C:\\Users\\Markus\\.ssh\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = \"~/.ssh\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Your secure shell (SSH) folder at 📂$path doesn't exist (yet)\" }\n\t$path = Resolve-Path \"$path\"\n\tSet-Location \"$path\"\n\t\"📂$Path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Google Find My Device Website - PowerShell\nDESCRIPTION: This PowerShell script opens the Google Find My Device website in the default web browser. It utilizes the common parameters provided by PowerShell.  No specific parameters are required for this script; it primarily uses the default settings of the web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/find-android-phone.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/find-android-phone.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Finding PowerShell Modules\nDESCRIPTION: These commands find PowerShell modules using specific search criteria such as tags and names.  They utilize the `Find-Module` cmdlet to query the PowerShell Gallery. The first example searches for modules tagged with \"cloud\", while the second example searches for modules whose names start with \"ps\".\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\nFind-Module -Tag cloud                                      # Find modules in the PowerShell Gallery with a \"cloud\" tag\nFind-Module -Name ps*                                       # Find modules in the PowerShell Gallery whose name starts with \"PS\"\n```\n\n----------------------------------------\n\nTITLE: Implementing hello-world.ps1 Script in PowerShell\nDESCRIPTION: This snippet contains the full source code for the `hello-world.ps1` script. It includes standard PowerShell comment-based help blocks (Synopsis, Description, Example, Link, Notes) explaining the script's function and authorship. The core logic uses `Write-Output` to print \"Hello World\" and then exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/hello-world.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSample Script\n.DESCRIPTION\n\tThis PowerShell script is a sample script writing \"Hello World\" to the console.\n.EXAMPLE\n\tPS> ./hello-world.ps1\n\tHello World\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nWrite-Output \"Hello World\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using the Server Class\nDESCRIPTION: This code instantiates the `Server` class, sets properties, and calls the `RunCommand` method to execute a command on a remote server. It demonstrates how to use the defined `Server` class to manage remote servers.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_32\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Server01 = [Server]::new()                                 # Instantiate the Server class as a new object\n$Server01.Name = 'webserver01.local'                        # Set the \"name\" of the remote server\n$Server01.Username = 'root'                                 # Set the username property of the \"Server\" object\n$Server01.RunCommand(\"hostname\")                            # Run a command on the remote server\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of new-shortcut.ps1 PowerShell Script\nDESCRIPTION: The complete script implementation for creating Windows shortcuts. It handles parameter input with optional interactive prompts, creates the shortcut using WScript.Shell COM object, and includes error handling with meaningful error messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-shortcut.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a new shortcut file\n.DESCRIPTION\n\tThis PowerShell script creates a new shortcut file.\n.PARAMETER shortcut\n\tSpecifies the shortcut filename\n.PARAMETER target\n\tSpecifies the path to the target\n.PARAMETER description\n\tSpecifies a description\n.EXAMPLE\n\tPS> ./new-shortcut C:\\Temp\\HDD C:\\\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$shortcut = \"\", [string]$target = \"\", [string]$description)\n\ntry {\n\tif ($shortcut -eq \"\" ) { $shortcut = read-host \"Enter new shortcut filename\" }\n\tif ($target -eq \"\" ) { $target = read-host \"Enter path to target\" }\n\tif ($description -eq \"\" ) { $description = read-host \"Enter description\" }\n\n\t$sh = new-object -ComObject WScript.Shell\n\t$sc = $sh.CreateShortcut(\"$shortcut.lnk\")\n\t$sc.TargetPath = \"$target\"\n\t$sc.WindowStyle = \"1\"\n\t$sc.IconLocation = \"C:\\Windows\\System32\\SHELL32.dll, 3\"\n\t$sc.Description = \"$description\"\n\t$sc.save()\n\n\t\"✅ created new shortcut $shortcut ⭢ $target\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Core Logic for Querying and Saving S.M.A.R.T. Data in PowerShell\nDESCRIPTION: This comprehensive snippet contains the full script logic for `query-smart-data.ps1`. It includes a dependency check for `smartctl`, scans for S.M.A.R.T. enabled devices, queries each device using `smartctl --all --json`, saves the output to time-stamped JSON files in the specified or default directory, and includes basic error handling and status messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/query-smart-data.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tQueries and saves the S.M.A.R.T. data of your HDD's/SSD's\n.DESCRIPTION\n\tQueries the S.M.A.R.T. data of your HDD/SSD's and saves it to the current/given directory.\n\t(use smart-data2csv.ps1 to generate a CSV table for analysis).\n        Requires smartctl (smartmontools) and admin rights. For automation copy this script to /etc/cron.daily \n.PARAMETER Directory\n\tSpecifies the path to the target directory\n.EXAMPLE\n\tPS> ./query-smart-data\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\nparam([string]$Directory = \"\")\n\n\nfunction CheckIfInstalled {\n\ttry {\n\t\t$null = $(smartctl --version)\n\t} catch {\n\t\twrite-error \"smartctl is not installed - make sure smartmontools are installed\"\n\t\texit 1\n\t}\n}\n\ntry {\n\tif ($Directory -eq \"\") {\n\t\t$Directory = \"$PWD\"\n\t}\n\n\twrite-output \"(1) Checking for 'smartctl'...\";\n\tCheckIfInstalled\n\n\twrite-output \"(2) Scanning for S.M.A.R.T. devices...\";\n\t$Devices = $(smartctl --scan-open)\n\n\t[int]$DevNo = 1\n\tforeach($Device in $Devices) {\n\t\twrite-output \"(3) Querying data from S.M.A.R.T. device $Device...\";\n\n\t\t$Time = (Get-Date)\n\t\t$Filename = \"$Directory/SMART-dev$($DevNo)-$($Time.Year)-$($Time.Month)-$($Time.Day).json\"\n\t\twrite-output \"(4) Saving data to $Filename...\";\n\n\t\t$Cmd = \"smartctl --all --json \" + $Device ;\n\n\t\tInvoke-Expression $Cmd > $Filename\n\t\t$DevNo++\n\t}\n\n\t\"✅  Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\";\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Processing and Validating Chess Moves (Pawn Logic) in PowerShell\nDESCRIPTION: Defines the `New-Move` function which takes source (`$src`) and destination (`$dst`) strings, parses them into coordinates, and retrieves the piece (`$pc`) from the `$board`. It performs initial validation checks (moving an empty square, moving to the same square, capturing own piece). The `switch` statement handles piece-specific move logic; this snippet shows the logic for 'Pawn', including validation for move distance, direction, first move double-step, blocking, standard captures, and en passant captures (checking `$enpassant.inpassing` against `$Script:turnCounter`). Calls `Read-Input` on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n#Used to move pieces on the board\nFunction New-Move {\n    param ([string]$src, [string]$dst)\n\n    enum castleOptions {\n        none = 0\n        kingside = 1\n        queenside = 2\n    }\n\n    [bool]$attack = $false\n    [bool]$moveSuccess = $false\n    [int]$castle = [castleOptions]::none\n    [bool]$promote = $false\n    [bool]$ep = $false\n    [bool]$check = $false\n\n    try {\n        [Int]$CurrentColumn = Get-Column $src[0]\n        [Int]$CurrentRow = Get-Row $src[1]\n        [Int]$DesiredColumn = Get-Column $dst[0]\n        [Int]$DesiredRow = Get-Row $dst[1]\n\n        $pc = $board[$CurrentColumn, $CurrentRow]\n    } catch {\n        Write-Error \"Out of bounds\"\n        Read-Input\n    }\n\n    #Moving nothing, nowhere, or trying to capture your own piece\n    if ($board[$CurrentColumn, $CurrentRow] -eq $Empty) {\n        Write-Error \"There is nothing there.\"\n        Read-Input\n    } elseif (($CurrentRow -eq $DesiredRow) -and ($CurrentColumn -eq $DesiredColumn)) {\n        Write-Error \"That wouldn't move anywhere.\"\n        Read-Input\n    } elseif ($board[$DesiredColumn, $DesiredRow] -ne $Empty -and `\n              $pc.Color -eq $board[$DesiredColumn, $DesiredRow].Color) {\n        Write-Error \"Collision with own team\"\n        Read-Input\n    } else {\n        [int]$MoveX = $DesiredColumn - $CurrentColumn\n        [int]$MoveY = $DesiredRow - $CurrentRow\n\n        #Move verification logic for each piece\n        switch ($pc.GetType().Name) {\n            'Pawn' {\n                $MoveX = [math]::abs($MoveX)\n\n                #Pawns can max move one to the side when capturing, two forward when moving\n                if (($MoveX -gt 1) -or ([math]::abs($MoveY) -gt 2)) {\n                    Write-Error \"Illegal Pawn Move: Too many spaces\"\n                } else {\n                    #Force pawns to only move \"forward\"\n                    if ($pc.Color -eq 'Black') {\n                        $MoveY *= -1\n                    }\n\n                    if ($MoveX -eq 0) {\n                        if ($board[$DesiredColumn, $DesiredRow] -eq $Empty) {\n                            if ($MoveY -eq 1) {\n                                $moveSuccess = $true\n                                $pc.firstmove = $false\n                            } elseif ($MoveY -eq 2 -and $pc.firstmove -eq $true) {\n                                if ($board[$DesiredColumn, ($DesiredRow + 1)] -eq $Empty) {\n                                    $moveSuccess = $true\n                                    $pc.firstmove = $false\n                                    $pc.inpassing = $Script:turnCounter\n                                } else {\n                                    Write-Error \"Illegal Pawn Move: Blocked Path\"\n                                }\n                            } else {\n                                Write-Error \"Illegal Pawn Move: Cannot Move 2 Spaces\"\n                            }\n                        } else {\n                            Write-Error \"Illegal Pawn Move: Blocked Path\"\n                        }\n                    } elseif (($MoveX -eq 1) -and ($MoveY -eq 1)) {\n                        if ($board[$DesiredColumn, $DesiredRow] -eq $Empty) {\n                            $enpassant = $board[$DesiredColumn, $CurrentRow]\n                            if (($enpassant.GetType().Name -eq 'Pawn') -and `\n                                ($pc.Color -ne $enpassant.Color) -and `\n                                ($enpassant.inpassing -eq ($Script:turnCounter - 1))) {\n                                \n                                $moveSuccess = $true\n                                $attack = $true\n                                $ep = $true\n                                \n                                $enpassant.Alive = $false\n                                $enpassant.CurrentPosition = $null\n                                $enpassant.CurrentRow = $null\n                                $enpassant.CurrentColumn = $null\n                                $board[$DesiredColumn, $CurrentRow] = $Empty\n                            } else {\n                                Write-Error 'Illegal Pawn Move: Cannot Capture en passant'\n                            }\n                        }\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for list-clipboard.ps1 Script\nDESCRIPTION: This snippet shows the command-line syntax for the list-clipboard.ps1 script, indicating that it accepts the standard PowerShell common parameters (e.g., Verbose, Debug, ErrorAction) for controlling script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-clipboard.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-clipboard.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Selection Sort and Performance Measurement (PowerShell)\nDESCRIPTION: This is the full PowerShell script (`measure-SelectionSort.ps1`) that implements the Selection Sort algorithm within a static `Sort` method of a `SelectionSort` class. It accepts an optional `-numIntegers` parameter (default 1000), generates a list of random integers of that size using `Get-Random`, measures the time taken to sort the list using `System.Diagnostics.Stopwatch`, and outputs the formatted elapsed time. The script exits with code 0 upon successful completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-SelectionSort.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Measures the speed of SelectionSort\n.DESCRIPTION\n        This PowerShell script measures the speed of the SelectionSort algorithm.\n        SelectionSort is an in-place comparison sorting algorithm. It has an O(n2) time complexity,\n\twhich makes it inefficient on large lists, and generally performs worse than the similar\n\tinsertion sort. Selection sort is noted for its simplicity and has performance advantages\n\tover more complicated algorithms in certain situations, particularly where auxiliary memory\n\tis limited. \n.PARAMETER numIntegers\n        Specifies the number of integers to sort\n.EXAMPLE\n        PS> ./measure-SelectionSort.ps1\n\t🧭 0.335 sec to sort 1000 integers by SelectionSort\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass SelectionSort {\n    static Sort($targetList) {\n        $n = $targetList.count\n\n        for ($i = 0; $i -lt $n; $i++) {\n            for ($j = $i + 1; $j -lt $n; $j++) {\n                if ($targetList[$j] -lt $targetList[$i]) {\n                    $tmp = $targetList[$i]\n                    $targetList[$i] = $targetList[$j]\n                    $targetList[$j] = $tmp\n                }\n            }\n        }\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[SelectionSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by SelectionSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Complete merry-christmas.ps1 PowerShell Script\nDESCRIPTION: The complete script that replies to 'Merry Christmas' using text-to-speech. It randomly selects a holiday greeting and calls the speak-english.ps1 script to vocalize the response.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/merry-christmas.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tReplies to \"Merry Christmas\"\n.DESCRIPTION\n\tThis PowerShell script replies to 'Merry Christmas' by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./merry-christmas.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n$Reply = \"Merry Christmas to you too!\", \"Happy Christmas to you too!\" | Get-Random\n\n& \"$PSScriptRoot/speak-english.ps1\" \"$Reply\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Ubuntu Upgrade Script Content PowerShell\nDESCRIPTION: This snippet contains the complete PowerShell script for upgrading Ubuntu Linux. It performs several steps, including prompting the user to create a backup, installing update-manager-core, upgrading packages, removing obsolete kernel modules, and upgrading the Ubuntu distribution to either the latest LTS or the latest release, based on user input.  The script uses `sudo` commands, requiring elevated privileges, and relies on `apt` for package management and `do-release-upgrade` for distribution upgrades.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upgrade-ubuntu.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUpgrades Ubuntu Linux \n.DESCRIPTION\n\tThis PowerShell script upgrades Ubuntu Linux to the latest (LTS) release.\n.EXAMPLE\n\tPS> .\\upgrade-ubuntu.ps1 \n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"\"\n\t\"⏳ (1/4) Perform a backup!\"\n\t\"It's strongly recommended to backup your data BEFORE the upgrade!\"\n\t$Confirm = Read-Host \"Press <Return> to continue...\"\n\n\t\"\"\n\t\"⏳ (2/4) Install update-manager-core, Upgrade Packages & Reboot\"\n\t$Confirm = Read-Host \"Enter <yes> to perform this step (otherwise it will be skipped)\"\n\tif ($Confirm -eq \"yes\") {\n\t\tsudo apt install update-manager-core\n\t\tsudo apt update\n\t\tsudo apt list --upgradable\n\t\tsudo apt upgrade\n\t\tsudo reboot \n\t}\n\n\t\"\"\n\t\"⏳ (3/4) Remove obsolete kernel modules\"\n\t$Confirm = Read-Host \"Enter <yes> to perform this step (otherwise it will be skipped)\"\n\tif ($Confirm -eq \"yes\") {\n\t\tsudo apt --purge autoremove\n\t}\n\n\t\"\"\n\t\"⏳ (4/4) Upgrade Ubuntu & reboot\"\n\t$Confirm = Read-Host \"Enter <LTS> to upgrade to latest LTS release, <latest> to upgrade to latest Ubuntu release (otherwise this step will be skipped)\"\n\tif ($Confirm -eq \"LTS\") {\n\t\tsudo do-release-upgrade\n\t\tsudo reboot\n\t} elseif ($Confirm -eq \"latest\") {\n\t\tsudo do-release-upgrade -d\n\t\tsudo reboot\n\t}\n\n\t\"✅  Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Calibre Server as Background Process in PowerShell\nDESCRIPTION: Implements the main script logic: checks the presence of the 'calibre-server' command, then starts it as a daemon process pointing to a user database and log file, with detailed output and error handling. Prerequisites include installation and PATH access to 'calibre-server' and a valid Calibre library path. Parameters accepted are port, user DB path, and log file path. The script measures launch time, provides progress feedback, and sets a success or error exit code. Limitations: Assumes UNIX-like environment for environment variables and background process handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/start-calibre-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tStarts a Calibre server\n.DESCRIPTION\n\tThis PowerShell script starts a local Calibre server as background process (using Web port 8099 by default).\n.PARAMETER port\n\tSpecifies the Web port number (8099 by default)\n.EXAMPLE\n\tPS> ./start-calibre-server\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$Port = 8099, [string]$UserDB = \"$HOME/CalibreUsers.sqlite\", [string]$Logfile = \"$HOME/CalibreServer.log\")\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ Step 1/2 - Searching for Calibre server executable...\"\n\t& calibre-server --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'calibre-server' - make sure Calibre server is installed and available\" }\n\n\t\"⏳ Step 2/2 - Starting Calibre server as background process...\"\n\t\"   (Web port $Port, user DB at $UserDB, log file at $Logfile)\"\n\t& calibre-server --port $Port --num-per-page 100 --userdb $UserDB --log $Logfile --daemonize $HOME/'Calibre Library'\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ started Calibre server in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing list-updates.ps1 in PowerShell\nDESCRIPTION: Provides an example of how to run the list-updates.ps1 script in a PowerShell terminal. The output demonstrates the format in which available updates are listed, including the application name, ID, current version, available version, and the source (e.g., winget).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-updates.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-updates.ps1\n\n\n\nName               Id                    Version       Available        Source\n------------------------------------------------------------------------------\nGit                Git.Git               2.43.0        2.44.0           winget\n       ...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage Example\nDESCRIPTION: Example showing how to execute the open-microsoft-paint.ps1 script from a PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-paint.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-microsoft-paint\n```\n\n----------------------------------------\n\nTITLE: Measuring InsertionSort Performance in PowerShell Script\nDESCRIPTION: This PowerShell snippet demonstrates measuring the runtime of the InsertionSort algorithm on a randomly generated integer array. It defines an optional numIntegers parameter (default 1000), generates the array using Get-Random, and performs the sort via a custom InsertionSort class. Dependencies include PowerShell, access to System.Diagnostics.Stopwatch, and standard common parameters. The script formats and outputs the elapsed time in seconds. No external libraries are required. Inputs: optional integer (numIntegers). Output: formatted benchmarking string showing time to sort.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-InsertionSort.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Measures the speed of InsertionSort\n.DESCRIPTION\n        This PowerShell script measures the speed of the InsertionSort algorithm.\n        InsertionSort is a simple sorting algorithm that builds the final sorted array (or list)\n\tone item at a time. It is much less efficient on large lists than more advanced algorithms\n\tsuch as quicksort, heapsort, or merge sort.\n.PARAMETER numIntegers\n\tSpecifies the number of integers to sort\n.EXAMPLE\n\tPS> ./measure-InsertionSort.ps1\n\t🧭 0.423 sec to sort 1000 integers by InsertionSort \n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass InsertionSort {\n    static Sort($targetList) {\n        $n = $targetList.count\n\n        for ($i = 0; $i -lt $n - 1; $i++) {\n            $j = $i + 1\n\n            while ($j -gt 0) {\n\n                if ($targetList[$j - 1] -gt $targetList[$j]) {\n                    $temp = $targetList[$j - 1]\n                    $targetList[$j - 1] = $targetList[$j]\n                    $targetList[$j] = $temp\n                }\n\n                $j--\n            }\n        }\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[InsertionSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by InsertionSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing User Accounts\nDESCRIPTION: This PowerShell script lists user accounts on the local computer, supporting common parameters for debugging and output control. It includes platform detection to execute platform-specific commands for Linux and Windows, with error handling for execution failures.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-user-accounts.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists user accounts\n.DESCRIPTION\n\tThis PowerShell script lists the user accounts on the local computer.\n.EXAMPLE\n\tPS> ./list-user-accounts.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t& getent passwd\n\t} else {\n\t\t& net user\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing IPv6 State on All Network Interfaces Using PowerShell\nDESCRIPTION: This PowerShell script lists whether IPv6 is enabled on each network interface of the local machine by querying the network adapter bindings filtered by the 'ms_tcpip6' component ID. It formats the output into a readable table displaying interface names and their IPv6 enabled status. The script handles errors gracefully by outputting a descriptive warning message with the error line number, and exits with status code 0 on success or 1 on failure. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for enhanced control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ipv6.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists IPv6 states\n.DESCRIPTION\n\tThis PowerShell script lists the state of IPv6 on all network interfaces of the local computer.\n.EXAMPLE\n\tPS> ./list-ipv6.ps1\n\tName                         Enabled\n\t----                         -------\n\tEthernet                        True\n\tvEthernet (WSL)                 True\n\tBluetooth Network Connection    True\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-NetAdapterBinding -name '*' -componentID 'ms_tcpip6' | Format-Table -autoSize -property Name,Enabled \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SAPI TTS in PowerShell for Croatian Speech\nDESCRIPTION: This code defines all logic for accepting input (either via argument or interactive prompt), locates a Croatian SAPI TTS voice, and synthesizes the speech using PowerShell's COM support. The script requires that a Croatian voice pack is installed and leverages try-catch for error handling. If no Croatian TTS voice is found, an informative error message is shown. Input is taken as a string or via prompt; output is audio playback of the text or an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-croatian.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Croatian\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Croatian text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Croatian text to speak\n.EXAMPLE\n\tPS> ./speak-croatian.ps1 zdravo\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Croatian text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Croatian*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Croatian text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Comment-Based Help to Markdown (PowerShell)\nDESCRIPTION: This snippet contains the full source code for the export-to-manuals.ps1 script. It defines parameters for script file pattern and target directory, uses Get-ChildItem to find matching scripts, iterates through them, calls convert-ps2md.ps1 for each script to generate Markdown output, redirects the output to a file, measures execution time, reports success, and includes basic error handling. Requires the convert-ps2md.ps1 script to be available in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-to-manuals.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tExports all scripts as manuals\n.DESCRIPTION\n\tThis PowerShell script exports the comment-based help of all PowerShell scripts as manuals.\n.EXAMPLE\n\tPS> ./export-to-manuals.ps1\n\t⏳ (1/2) Reading PowerShell scripts from /home/mf/PowerShell/scripts/*.ps1 ... \n\t⏳ (2/2) Exporting Markdown manuals to /home/mf/PowerShell/docs ...\n\t✅ Exported 518 Markdown manuals in 28 sec.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#requires -version 2\n\nparam([string]$filePattern = \"$PSScriptRoot/*.ps1\", [string]$targetDir = \"$PSScriptRoot/../docs\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ (1/2) Reading PowerShell scripts from $filePattern ...\" \n\t$scripts = Get-ChildItem \"$filePattern\"\n\n\t\"⏳ (2/2) Exporting Markdown manuals to $targetDir ...\"\n\tforeach ($script in $scripts) {\n\t\t& \"$PSScriptRoot/convert-ps2md.ps1\" \"$script\" > \"$targetDir/$($script.BaseName).md\"\n\t}\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Exported $($scripts.Count) Markdown manuals in $elapsed sec.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Plug and Play Device Status with Error Handling - PowerShell\nDESCRIPTION: This code represents the core implementation of check-pnp-devices.ps1. It tries to retrieve all devices using Get-PnpDevice, filters those with a status of 'Error', and displays their FriendlyName, Status, and InstanceId in a formatted table. Dependencies include administrator privileges and access to the necessary PowerShell modules. If execution fails, the script displays an error message with the failed line and exits with code 1; on success, it exits cleanly with code 0. No input parameters are required for functionality, other than optional common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-pnp-devices.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tGet-PnpDevice | Where-Object {$_.Status -like \"Error\"} | Format-Table -property FriendlyName,Status,InstanceId\n\texit 0 # success\n} catch {\n\t\"\\u26a0\\ufe0f Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Git User Configuration Automation in PowerShell Script\nDESCRIPTION: This is the complete PowerShell script content for configure-git.ps1. It interacts with the user to gather configuration details, verifies the availability of Git, and sets both general and user-specific global Git settings, including core options and useful Git command aliases. Dependencies include a functioning Git installation accessible in PATH. The script uses Read-Host for input prompts when parameters are not provided, error handling to catch failures, and Stopwatch to measure execution time. Output consists of progress messages and a success notification. Limitations: requires Git installed, writes to the user's global ~/.gitconfig, and assumes sufficient permissions for configuration changes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/configure-git.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConfigures Git \n.DESCRIPTION\n\tThis PowerShell script configures your Git user settings.\n.PARAMETER fullName\n\tSpecifies the user's full name\n.PARAMETER emailAddress\n\tSpecifies the user's email address\n.PARAMETER favoriteEditor\n\tSpecifies the user's favorite text editor\n.EXAMPLE\n\tPS> ./configure-git.ps1 \"Joe Doe\" joe@doe.com vim\n\t⏳ (1/5) Searching for Git executable...     git version 2.42.0.windows.1\n\t⏳ (2/5) Asking for user details...\n\t⏳ (3/5) Saving basic settings (autocrlf,symlinks,longpaths,etc.)...\n\t⏳ (4/5) Saving user settings (name,email,editor)...\n\t⏳ (5/5) Saving user shortcuts ('git br', 'git ls', 'git st', etc.)...\n\t✅ Saved your Git configuration to ~/.gitconfig in 11s.\n\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$fullName = \"\", [string]$emailAddress = \"\", [string]$favoriteEditor = \"\")\n\ntry {\n\tWrite-Host \"⏳ (1/5) Searching for Git executable...      \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t\"⏳ (2/5) Asking for user details...\"\n\tif ($fullName -eq \"\") { $fullName = Read-Host \"Enter your full name\" }\n\tif ($emailAddress -eq \"\") { $emailAddress = Read-Host \"Enter your e-mail address\"}\n\tif ($favoriteEditor -eq \"\") { $favoriteEditor = Read-Host \"Enter your favorite text editor, e.g. atom,code,emacs,nano,notepad,subl,vi,vim\" }\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ (3/5) Saving basic settings (autocrlf,symlinks,longpaths,etc.)...\"\n\t& git config --global core.autocrlf false          # don't change newlines\n\t& git config --global core.symlinks true           # enable support for symbolic link files\n\t& git config --global core.longpaths true          # enable support for long file paths\n\t& git config --global init.defaultBranch main      # set the default branch name to 'main'\n\t& git config --global merge.renamelimit 99999      # raise the rename limit\n\t& git config --global pull.rebase false\n\t& git config --global fetch.parallel 0             # enable parallel fetching to improve the speed\n\tif ($lastExitCode -ne \"0\") { throw \"'git config' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (4/5) Saving user settings (name,email,editor)...\"\n\t& git config --global user.name $fullName\n\t& git config --global user.email $emailAddress\n\t& git config --global core.editor $favoriteEditor\n\tif ($lastExitCode -ne \"0\") { throw \"'git config' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (5/5) Saving user shortcuts ('git br', 'git ls', 'git st', etc.)...\"\n\t& git config --global alias.br \"branch\"\n\t& git config --global alias.chp \"cherry-pick --no-commit\"\n\t& git config --global alias.ci \"commit\"\n\t& git config --global alias.co \"checkout\"\n\t& git config --global alias.ls \"log -n20 --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s %C(bold blue)by %an%Creset %C(green)%cr%Creset' --abbrev-commit\"\n\t& git config --global alias.mrg \"merge --no-commit --no-ff\"\n\t& git config --global alias.pl \"pull --recurse-submodules\"\n\t& git config --global alias.ps \"push\"\n\t& git config --global alias.smu \"submodule update --init\"\n\t& git config --global alias.st \"status\"\n\tif ($lastExitCode -ne \"0\") { throw \"'git config' failed\" }\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Saved your Git configuration to ~/.gitconfig in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber)): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters - PowerShell\nDESCRIPTION: This snippet describes the parameters accepted by the move-mouse-pointer.ps1 script. It details the optional -x and -y parameters for specifying target coordinates in pixels, their data types (Int32), default values, and positioning. It also indicates support for PowerShell CommonParameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/move-mouse-pointer.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/move-mouse-pointer.ps1 [[-x] <Int32>] [[-y] <Int32>] [<CommonParameters>]\n\n-x <Int32>\n    Specifies the x coordinate in pixels\n    \n    Required?                    false\n    Position?                    1\n    Default value                -1\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-y <Int32>\n    Specifies the y coordinate in pixels\n    \n    Required?                    false\n    Position?                    2\n    Default value                -1\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Headlines from RSS Feed - PowerShell\nDESCRIPTION: This PowerShell script fetches headlines from a specified RSS feed URL and displays them. It uses `Invoke-WebRequest` to retrieve the content and parses it as XML.  The script iterates through the items in the RSS feed, displaying the title of each headline. The script includes a `try-catch` block to handle potential errors during the web request or XML parsing. It takes parameters for the RSS feed URL and maximum lines to display.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-headlines.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the latest headlines\n.DESCRIPTION\n\tThis PowerShell script lists the latest headlines by using a RSS (Really Simple Syndication) feed.\n.PARAMETER RSS_URL\n\tSpecifies the URL to the RSS feed (Yahoo World News by default)\n.PARAMETER maxLines\n\tSpecifies the maximum number of lines to list (24 by default)\n.EXAMPLE\n\tPS> ./list-headlines.ps1\n\t❇️ Niger coup: Ecowas deadline sparks anxiety in northern Nigeria\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$RSS_URL = \"https://news.yahoo.com/rss/world\", [int]$maxLines = 24)\n\ntry {\n\t[xml]$content = (Invoke-WebRequest -URI $RSS_URL -useBasicParsing).Content\n\t[int]$count = 1\n\tforeach ($item in $content.rss.channel.item) {\n\t\t\"❇️ $($item.title)\"\n\t\tif ($count++ -eq $maxLines) { break }\n\t}\n        $source = $content.rss.channel.title\n        $date = $content.rss.channel.pubDate\n\t\"   (by $source as of $date)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Remote URL\nDESCRIPTION: This snippet queries the remote URL of the Git repository. It uses the `git -C \"$FullPath\" remote get-url origin` command. It checks the exit code to ensure the command was successful, and an error is thrown if it fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (3/10) Querying remote URL...           \" -noNewline\n\t& git -C \"$FullPath\" remote get-url origin\n\tif ($lastExitCode -ne \"0\") { throw \"'git remote get-url origin' failed with exit code $lastExitCode\" }\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL Table Listing in PowerShell\nDESCRIPTION: The core PowerShell script logic for listing SQL Server tables. It defines mandatory parameters, handles credentials securely by converting the password to a SecureString, executes a SQL query against INFORMATION_SCHEMA.TABLES using Invoke-SqlServerQuery to find 'BASE TABLE' types, and exports the results to a CSV file named 'sqlserver_tables.csv'. Requires the InvokeQuery module to be installed (`Install-Module InvokeQuery`).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-sql-tables.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all tables of a SQL server database \n.DESCRIPTION\n\tThis PowerShell script lists all tables in a SQL server database and exports the list as CSV.\n\tInstall-Module InvokeQuery\n\tRun the above command if you do not have this module.\n.EXAMPLE\n\tPS> ./list-sql-tables.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam(\n[Parameter(Mandatory=$true)]$server,\n[Parameter(Mandatory=$true)]$database,\n[Parameter(Mandatory=$true)]$username,\n[Parameter(Mandatory=$true)]$password\n)\n$secpasswd = ConvertTo-SecureString $password -AsPlainText -Force\n$creds = New-Object System.Management.Automation.PSCredential ($username, $secpasswd)\n$csvfilepath = \"$PSScriptRoot\\sqlserver_tables.csv\"\n$result = Invoke-SqlServerQuery -Credential $creds -ConnectionTimeout 10000 -Database $database -Server $server -Sql \"SELECT TABLE_NAME FROM $database.INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'\" -CommandTimeout 10000\n$result | Export-Csv $csvfilepath -NoTypeInformation\n```\n\n----------------------------------------\n\nTITLE: Script Usage Example for Listing Outlook Sent Mails in PowerShell\nDESCRIPTION: This example demonstrates how to execute the 'list-outlook-sent.ps1' script from the PowerShell command line. No parameters are required for basic operation, though PowerShell's common parameters can be used for advanced scenarios. The output will be a formatted table containing the SentOn and Subject fields for each email in the Sent Mail folder.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-outlook-sent.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-outlook-sent.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Converting Image Frames to MP4 with ffmpeg in PowerShell\nDESCRIPTION: This PowerShell script takes an optional source pattern for image files (`SourcePattern`) and an optional target MP4 file path (`TargetFile`). If parameters are omitted, it prompts the user. It requires `ffmpeg` to be installed and available in the system's PATH. The script verifies `ffmpeg`'s presence, finds matching image files, and then executes `ffmpeg` with specific options (`-framerate 24`, `-pattern_type glob`, `-c:v libx264`, `-pix_fmt yuv420p`) to convert the image sequence into the specified MP4 video file. It includes basic error handling using a try-catch block and reports the total execution time upon successful conversion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-frames2mp4.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts frames to a .MP4 video\n.DESCRIPTION\n\tThis PowerShell script converts multiple image frames into a video in MP4 format. It requires ffmpeg.\n.PARAMETER SourcePattern\n\tSpecifies the file pattern of the image frames\n.PARAMTER TargetFile\n\tSpecifies the path to the new video file.\n.EXAMPLE\n\tPS> ./convert-frames2mp4 C:\\Frames\\*.jpg C:\\video.mp4\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$SourcePattern = \"\", [string]$TargetFile = \"\")\n\ntry {\n\tif ($SourcePattern -eq \"\") { $SourcePattern = Read-Host \"Enter file pattern of the image frames\" }\n\tif ($TargetFile -eq \"\") { $TargetFile = Read-Host \"Enter file path to the new video file\" }\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ (1/3) Searching for ffmpeg...\"\n\t& ffmpeg -L\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'ffmpeg' - make sure ffmpeg is installed and available\" }\n\n\t\"⏳ (2/3) Checking file pattern of the image frames...\"\n\t$Files = (Get-ChildItem -path \"$SourcePattern\" -attributes !Directory)\n\n\t\"⏳ (2/3) Converting source image file...\"\n\t& ffmpeg -framerate 24 -pattern_type glob -i \"$SourcePattern\" -c:v libx264 -pix_fmt yuv420p \"$TargetFile\"\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ converted $($Files.Count) image frames to video $TargetFile in $Elapsed sec.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Calculate SHA512 Hash of a File\nDESCRIPTION: This PowerShell script calculates and prints the SHA512 checksum of a specified file. It accepts an optional file path parameter and prompts the user if not provided. The script includes error handling for invalid paths and outputs the hash or an error message accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/get-sha512.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the SHA512 hash of a file\n.DESCRIPTION\n\tThis PowerShell script calculates and prints the SHA512 checksum of the given file.\n.PARAMETER path\n\tSpecifies the local file path to the file\n.EXAMPLE\n\tPS> ./get-sha512.ps1 C:\\MyFile.txt\n\t✅ SHA512 hash is CEB4AD71524996EB8AA3ADCE04F1E45636A4B58B8BF4462E6971CF2E56B4293E\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\")\n\ntry {\n\tif ($path -eq \"\" ) { $path = Read-Host \"Enter the file path\" }\n\tif (-not(Test-Path $path -pathType leaf)) { throw \"Invalid file path given: $path\" }\n\n\t$result = Get-FileHash -path $path -algorithm SHA512\n\n\t\"✅ SHA512 hash is $($result.Hash)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Pawn Movement Validation in PowerShell\nDESCRIPTION: This snippet validates the movement of a pawn. It checks for valid forward moves, including the initial two-square move and en passant captures. It also updates the pawn's `firstmove` and `inpassing` properties accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($board[$DesiredColumn,$DesiredRow] -ne $Empty) {\n    return $status\n} else {\n    $status[0] = $true\n    $pc.firstmove = $false\n}\n elseif (($MoveX -eq 0) -and ($MoveY -eq 2)) {\n    if (($pc.firstmove = $true) -and `\n        (($board[$DesiredColumn, $DesiredRow] -eq $Empty) -and `\n        ($board[($DesiredColumn + 1), $DesiredRow] -eq $Empty))) {\n\n        $status[0] = $true\n        $pc.firstmove = $false\n        $pc.inpassing = $Script:turnCounter\n    } else {\n        return $status\n    }\n} elseif (($MoveX -eq 1) -and ($MoveY -eq 1)) {\n    if ($board[$DesiredColumn,$DesiredRow] -eq $Empty) {\n        $enpassant = $board[$DesiredColumn, $CurrentRow]\n        if (($enpassant.GetType().Name -eq 'Pawn') -and `\n            ($pc.Color -ne $enpassant.Color) -and `\n            ($enpassant.inpassing -eq ($Script:turnCounter - 1))) {\n            \n            $status[0] = $true\n            \n            $enpassant.Alive = $false\n            $enpassant.CurrentPosition = $null\n            $enpassant.CurrentRow = $null\n            $enpassant.CurrentColumn = $null\n            $board[$DesiredColumn, $CurrentRow] = $Empty\n        } else {\n            return $status\n        }\n    } else {\n        $status[1] = $true\n        $status[0] = $true\n        $pc.firstmove = $false\n    }\n} else {\n    return $status\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Toggle Scroll Lock Key\nDESCRIPTION: This script toggles the Scroll Lock key state by creating a COM object for WScript.Shell and sending the relevant keystroke. It supports common PowerShell parameters and includes error handling that outputs an error message with the script line number if an exception occurs. Intended for automation or troubleshooting purposes, it depends on Windows COM interfaces.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/toggle-scroll-lock.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tToggle Scroll Lock\n.DESCRIPTION\n\tThis PowerShell script toggles the Scroll Lock key state.\n.EXAMPLE\n\tPS> ./toggle-scroll-lock\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$wsh = New-Object -ComObject WScript.Shell\n\t$wsh.SendKeys('{SCROLLLOCK}')\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching Spotify Application Using PowerShell\nDESCRIPTION: This PowerShell script launches the Spotify application using the Start-Process cmdlet. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction, allowing users to customize script behavior. The script exits with a zero status code upon successful execution, indicating success. Typical usage involves running the script directly to open Spotify. Dependencies include the Spotify application installed on the local system and PowerShell environment capable of running scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-spotify.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Spotify app\n.DESCRIPTION\n\tThis script launches the Spotify application.\n.EXAMPLE\n\tPS> ./open-spotify\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process spotify:\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Speak Portuguese Text via TTS - PowerShell\nDESCRIPTION: This PowerShell script speaks the provided text using a Portuguese text-to-speech (TTS) voice. It first checks if the text parameter is empty, prompting the user for input if it is. Then, it iterates through available voices, selects a Portuguese voice, and speaks the text using the SAPI.SPVoice COM object.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-portuguese.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Portuguese \n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Portuguese text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Portuguese text to speak\n.EXAMPLE\n\tPS> ./speak-portuguese.ps1 Olá\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Portuguese text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Portuguese*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Portuguese text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Ping Local Devices PowerShell Script Implementation\nDESCRIPTION: The full implementation of the ping-local-devices.ps1 script that pings devices in the local network and displays which ones are online. It includes error handling, asynchronous pinging for efficiency, and a configurable timeout parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-local-devices.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Pings local devices\n.DESCRIPTION\n        This PowerShell script pings devices in the local network and lists which one are up.\n.EXAMPLE\n        PS> ./ping-local-devices.ps1\n\t✅ Up: epson raspi tux\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$timeout = 600) # ms ping timeout\n\n\ntry {\n\t$names = @('accesspoint','AD','AP','amnesiac','archlinux','auriga','berlin','berry','boston','brother','canon','castor','cisco','echodot','epson','epson2815','fedora','fireball','firewall','fritz.box','fritz.nas','fritz.powerline','fritz.repeater','gassensor','gateway','hippo','heizung','hodor','homemanager','io','iphone','jarvis','jenkins','LA','laptop','linux','jupiter','mars','mercury','miami','mobile','nas','none','none-1','none-2','NY','o2.lte','octo','office','officepc','paris','PI','pixel-6a','PC','pluto','printer','proxy','R2D2','raspberry','raspi','rocket','rome','router','sentinel','server','shelly','shelly1','smartphone','smartwatch','soundbar','speedport.ip','synologynas','sunnyboy','surface','switch','tablet','tau','tigercat','tolino','tux','TV','ubuntu','vega','venus','xrx','zeus') # sorted alphabetically\n        $queue = [System.Collections.Queue]::new()\n\tforeach($name in $names) { $ping = [System.Net.Networkinformation.Ping]::new()\n\t\t$queue.Enqueue( @{Host=$name;Ping=$ping;Async=$ping.SendPingAsync($name,$timeout)} )\n        }\n\t[string]$up = \"\"\n\tWrite-Host \"✅ Local devices: \" -noNewline\n\twhile($queue.Count -gt 0) { $obj = $queue.Dequeue()\n\t\ttry { if ($obj.Async.Wait($timeout)) {\n\t\t\t\tif ($obj.Async.Result.Status -ne \"TimedOut\") { Write-Host \"$($obj.Host) \" -noNewline }\n\t\t\t\tcontinue\n\t\t\t}\n\t\t} catch { continue }\n\t\t$queue.Enqueue($obj)\n\t}\n\tWrite-Host \"\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Documentation from PowerShell Script Help - PowerShell\nDESCRIPTION: This snippet defines the complete convert-ps2md.ps1 script that reads the comment-based help from a specified PowerShell script and converts it into structured Markdown format. The script accepts an optional filename parameter pointing to the target PowerShell script. It utilizes the Get-Help cmdlet to extract detailed metadata such as synopsis, parameter descriptions, examples, inputs, outputs, notes, and related links. The script formats these sections into Markdown with code blocks and headings. Functions included handle HTML encoding and example code extraction to prepare content for Markdown output. The script gracefully prompts for input if the filename is not provided and includes error handling to report problems during processing. This facilitates automatic, up-to-date documentation generation of PowerShell scripts leveraging their internal comment-based help.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-ps2md.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts a PowerShell script to Markdown\n.DESCRIPTION\n\tThis PowerShell script converts the comment-based help of a PowerShell script to Markdown.\n.PARAMETER filename\n\tSpecifies the path to the PowerShell script\n.EXAMPLE\n\tPS> ./convert-ps2md.ps1 myscript.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$filename = \"\")\n\nfunction EncodePartOfHtml { param([string]$Value)\n    ($Value -replace '<', '&lt;') -replace '>', '&gt;'\n}\n\nfunction GetCode { param($Example)\n    $codeAndRemarks = (($Example | Out-String) -replace ($Example.title), '').Trim() -split \"`r`n\"\n\n    $code = New-Object \"System.Collections.Generic.List[string]\"\n    for ($i = 0; $i -lt $codeAndRemarks.Length; $i++) {\n        if ($codeAndRemarks[$i] -eq 'DESCRIPTION' -and $codeAndRemarks[$i + 1] -eq '-----------') { break }\n        if ($codeAndRemarks[$i] -eq '' -and $codeAndRemarks[$i + 1] -eq '') { continue }\n        if (1 -le $i -and $i -le 2) { continue }\n    \t$codeAndRemarks[$i] = ($codeAndRemarks[$i] | Out-String) -replace \"PS>\",\"PS> \"\n        $code.Add($codeAndRemarks[$i])\n    }\n\n    $code -join \"`r`n\"\n}\n\nfunction GetRemark { param($Example)\n    $codeAndRemarks = (($Example | Out-String) -replace ($Example.title), '').Trim() -split \"`r`n\"\n\n    $isSkipped = $false\n    $remark = New-Object \"System.Collections.Generic.List[string]\"\n    for ($i = 0; $i -lt $codeAndRemarks.Length; $i++) {\n        if (!$isSkipped -and $codeAndRemarks[$i - 2] -ne 'DESCRIPTION' -and $codeAndRemarks[$i - 1] -ne '-----------') {\n            continue\n        }\n        $isSkipped = $true\n        $remark.Add($codeAndRemarks[$i])\n    }\n\n    $remark -join \"`r`n\"\n}\n\ntry {\n\tif ($filename -eq \"\") { $filename = Read-Host \"Enter path to PowerShell script\" }\n\n\t$ScriptName = (Get-Item \"$filename\").Name\n\t$full = Get-Help $filename -Full \n\n\t\"The *$($ScriptName)* Script\"\n\t\"===========================\"\n\n\t$Description = ($full.description | Out-String).Trim()\n\tif ($Description -ne \"\") {\n\t\t\"\"\n\t\t\"$Description\"\n\t} else {\n\t\t\"\"\n\t\t\"$($full.Synopsis)\"\n\t}\n\t\"\"\n\t\"Parameters\"\n\t\"----------\"\n\t\"``````powershell\"\n\t$Syntax = (($full.syntax | Out-String) -replace \"`r`n\", \"`r`n\").Trim()\n\t$Syntax = (($Syntax | Out-String) -replace \"/home/mf/Repos/PowerShell/scripts/\", \"PS> ./\")\n\tif ($Syntax -ne \"\") {\n\t\t\"$Syntax\"\n\t}\n\n\tforeach($parameter in $full.parameters.parameter) {\n\t\t\"$(((($parameter | Out-String).Trim() -split \"`r`n\")[-5..-1] | % { $_.Trim() }) -join \"`r`n\")\"\n\t\t\"\"\n\t}\n\t\"[<CommonParameters>]\"\n\t\"    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \"\n\t\"    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\"\n\t\"``````\"\n\n\tforeach($input in $full.inputTypes.inputType) {\n\t\t\"\"\n\t\t\"Inputs\"\n\t\t\"------\"\n\t\t\"$($input.type.name)\"\n\t}\n\n\tforeach($output in $full.outputTypes.outputType) {\n\t\t\"\"\n\t\t\"Outputs\"\n\t\t\"-------\"\n\t\t\"$($output.type.name)\"\n\t}\n\n\tforeach($example in $full.examples.example) {\n\t\t\"\"\n\t\t\"Example\"\n\t\t\"-------\"\n\t\t\"``````powershell\"\n\t\t\"$(GetCode $example)\"\n\t\t\"``````\"\n\t}\n\n\t$Notes = ($full.alertSet.alert | Out-String).Trim()\n\tif ($Notes -ne \"\") {\n\t\t\"\"\n\t\t\"Notes\"\n\t\t\"-----\"\n\t\t\"$Notes\"\n\t}\n\n\t$Links = ($full.relatedlinks | Out-String).Trim()\n\tif ($Links -ne \"\") {\n\t\t\"\"\n\t\t\"Related Links\"\n\t\t\"-------------\"\n\t\t\"$Links\"\n\t}\n\n\t\"\"\n\t\"Script Content\"\n\t\"--------------\"\n\t\"``````powershell\"\n\t$Lines = Get-Content -path \"$filename\"\n        foreach($Line in $Lines) {\n\t\t\"$Line\"\n\t}\n\t\"``````\"\n\t\"\"\n\t$now = [datetime]::Now\n\t\"*(page generated by convert-ps2md.ps1 as of $now)*\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of clear-recycle-bin.ps1\nDESCRIPTION: Simple example showing how to execute the clear-recycle-bin.ps1 script from a PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clear-recycle-bin.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./clear-recycle-bin\n```\n\n----------------------------------------\n\nTITLE: Uninstalling GitHub CLI using PowerShell\nDESCRIPTION: This PowerShell script uninstalls the GitHub CLI. It first displays a message indicating the uninstallation process has begun, then uses platform-specific commands (brew, apt, or winget). It checks the $lastExitCode and throws an error if the uninstall fails. Finally, it measures and displays the time taken for the operation. Dependencies include the GitHub CLI and appropriate tools for the OS (brew, apt, winget). The script outputs messages to the console indicating the progress and results of the uninstallation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-github-cli.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls GitHub CLI\n.DESCRIPTION\n\tThis PowerShell script uninstalls the GitHub CLI from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-github-cli.ps1\n\t⏳ Uninstalling GitHub CLI...\n\t✔️ Removal of GitHub CLI took 7 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Uninstalling GitHub CLI...\"\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsMacOS) {\n\t\t& brew uninstall gh\n\t} elseif ($IsLinux) {\n\t\t& sudo apt remote gh\n\t} else {\n\t\t& winget uninstall --id GitHub.cli\n\t}\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall GitHub CLI, is it installed?\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ Removal of GitHub CLI took $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Chess Move Logs in PowerShell\nDESCRIPTION: This PowerShell function generates and updates a move log for the chess game, outputting moves in algebraic notation, handling castling, promotions, captures, en passant, check, and resignation markers. It creates a readable log file by rewriting the header and move lines after each change, managing synchronization and formatting for both players' moves. The function expects specific types and state variables like $Script:log, $Script:logpath, and uses parameters for move details. Its input includes the move's source, destination, piece symbol, and several booleans; output is a reformatted, persistent log file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_13\n\nLANGUAGE: PowerShell\nCODE:\n```\nFunction Update-Log {\n    param([string]$src, [string]$dst, [string]$piece, [bool]$attack, \n          [int]$castle, [bool]$promote, [bool]$ep, [bool]$check, [bool]$resign)\n\n    [string]$logentry = ''\n\n    enum castleOptions {\n        none = 0\n        kingside = 1\n        queenside = 2\n    }\n\n    if ($castle -eq [castleOptions]::kingside) {\n        $logentry = '0-0'\n    } elseif ($castle -eq [castleOptions]::queenside) {\n        $logentry = '0-0-0'\n    } elseif ($promote -eq $true) {\n        if ($attack) {\n            $logentry += 'x'\n        }\n        $logentry += $dst + '=' + $piece\n    } else {\n        $logentry = $piece\n        if ($attack) {\n            $logentry += 'x'\n        }\n        $logentry += $dst\n    }\n\n    if ($ep -eq $true) {\n        $logentry += ' ep'\n    }\n\n    if ($check -eq $true) {\n        $logentry += '+'\n    }\n\n    if ($Script:gameStatus -ne 0) {\n        $logentry += '#'\n    }\n\n    if ($resign -eq $true) {\n        $logentry = 'resigned'\n    }\n\n    $Script:log += $logentry\n   \n    #Equivalent of touch command to ensure a log exists\n    Write-Output $null >> $Script:logpath\n\n    #Clear and rewrite the log each time\n    Clear-Content $Script:logpath\n    $line = \"White`t`tBlack`r`n--------------------\"\n\n    #Header\n    Add-Content -Encoding Unicode $Script:logpath $line\n\n    if ($log.Length -eq 1) {\n        Add-Content -Encoding Unicode $Script:logpath $log[0]\n    } else {\n        for ($i = 0; $i -lt $log.Length - 1; $i += 2) {\n            $line = $Script:log[$i]\n            $line += \" `t`t\"\n            $line += $Script:log[$i + 1]\n            Add-Content -Encoding Unicode $Script:logpath $line\n        }\n        \n        #If game ended in white move, print out the \"half-line\"\n        if ($log.Length % 2 -eq 1) {\n            Add-Content -Encoding Unicode $Script:logpath $Script:log[$Script:log.Length - 1]\n        }\n    } \n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying and Displaying Operating System Details Using PowerShell\nDESCRIPTION: This PowerShell code determines whether the current system is Linux or Windows. For Linux, it calls 'uname -sr' to display system name and version. For Windows, it uses Get-WmiObject and Get-CimInstance with the Win32_OperatingSystem class to retrieve name, architecture, version, build number, install date, and serial number. The script sets culture to 'en-US' for consistency. It outputs formatted OS details and includes robust error handling to display informative messages and set appropriate exit codes. Required dependencies are the PowerShell environment with access to WMI and CIM cmdlets on Windows.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-operating-system.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tQuery OS details\n.DESCRIPTION\n\tThis PowerShell script queries and lists operating system details.\n.EXAMPLE\n\tPS> ./check-operating-system\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t\"✅ $(uname -sr).\"\n\t} else {\n\t\t$OS = Get-WmiObject -class Win32_OperatingSystem\n\t\t$Name = $OS.Caption\n\t\t$Arch = $OS.OSArchitecture\n\t\t$Version = $OS.Version\n\n\t\t[system.threading.thread]::currentthread.currentculture = [system.globalization.cultureinfo]\"en-US\"\n\t\t$OSDetails = Get-CimInstance Win32_OperatingSystem\n\t\t$BuildNo = $OSDetails.BuildNumber\n\t\t$Serial = $OSDetails.SerialNumber\n\t\t$InstallDate = $OSDetails.InstallDate\n\t\t\"✅ $($Name): $Arch, v$Version, S/N $Serial, installed $($InstallDate.ToShortDateString())\"\n\t} \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Setting System Audio Volume\nDESCRIPTION: This PowerShell script sets the system's audio volume to a specified percentage (0-100). It uses the WScript.Shell COM object to simulate key presses that adjust the volume incrementally. The script accepts a required parameter 'percent', validates its range, and includes error handling to manage execution failures.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-volume.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the audio volume \n.DESCRIPTION\n\tThis PowerShell script sets the audio volume to the given value in percent (0..100).\n.PARAMETER percent\n\tSpecifies the volume in percent (0..100)\n.EXAMPLE\n\tPS> ./set-volume.ps1 50\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nParam([Parameter(Mandatory=$true)] [ValidateRange(0,100)] [Int] $percent)\n\ntry {\n\t# Create the Windows Shell object. \n\t$obj = New-Object -ComObject WScript.Shell\n    \n\t# First, set volume to zero. \n for ([int]$i = 0; $i -lt 100; $i += 2) {\n\t\t$obj.SendKeys([char]174) # each tick is -2%\n\t}\n    \n\t# Raise volume to specified level. \n for ([int]$i = 0; $i -lt $percent; $i += 2) {\n\t\t$obj.SendKeys([char]175) # each tick is +2%\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Git Updates in PowerShell\nDESCRIPTION: This snippet uses the `git` command to fetch the latest updates from the remote repository. The `-C` parameter sets the working directory.  It runs `git fetch --all --quiet`.  It shows a progress message while fetching and throws an error if the fetch operation fails, ensuring local information is up to date before listing commits.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n\tWrite-Progress \"Fetching latest updates...\"\n\t& git -C \"$pathToRepo\" fetch --all --quiet\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed\" }\n\tWrite-Progress -Completed \"Done.\"\n\n```\n\n----------------------------------------\n\nTITLE: Complete list-hidden-files.ps1 Script Implementation\nDESCRIPTION: The full PowerShell script that recursively scans a directory for hidden files, with proper error handling and progress reporting.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-hidden-files.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all hidden files in a directory tree\n.DESCRIPTION\n\tThis PowerShell script scans a directory tree and lists all hidden files.\n.PARAMETER path\n\tSpecifies the path to the directory tree (default is current working dir)\n.EXAMPLE\n\tPS> ./list-hidden-files.ps1 C:\\Windows\n\t...\n\t✅ Found 256 hidden files within 📂C:\\Windows in 40 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning $path for hidden files...\"\n\t[int]$count = 0\n\tGet-ChildItem \"$path\" -attributes Hidden -recurse | Foreach-Object {\n\t\t\"📄$($_.FullName)\"\n\t\t$count++\n\t}\n\tWrite-Progress -completed \" \"\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $count hidden files within 📂$path in $elapsed sec\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Script Usage and Parameters (PowerShell)\nDESCRIPTION: Explains the command-line syntax for the `get-sha256.ps1` script, detailing the optional `-path` parameter for specifying the target file and mentioning the support for standard PowerShell `CommonParameters`. The `-path` parameter takes a string value representing the file location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/get-sha256.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/get-sha256.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the local file path to the file\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Playing the Happy Birthday Song Using PowerShell Beep Method\nDESCRIPTION: This PowerShell script plays the Happy Birthday song by calling the System.Console::Beep method with specific frequencies and durations to produce musical notes. Dependencies include .NET's System.Console class. The script sequentially executes a series of beeps to mimic the melody, with error handling included to catch and report any issues during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-happy-birthday.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays the Happy Birthday song\n.DESCRIPTION\n\tThis PowerShell script plays the famous Happy Birthday song.\n.EXAMPLE\n\tPS> ./play-happy-birthday.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[System.Console]::Beep(1059.274, 300)\n\t[System.Console]::Beep(1059.274, 200)\n\t[System.Console]::Beep(1188.995, 500)\n\t[System.Console]::Beep(1059.274, 500)\n\t[System.Console]::Beep(1413.961, 500)\n\t[System.Console]::Beep(1334.601, 950)\n\t[System.Console]::Beep(1059.274, 300)\n\t[System.Console]::Beep(1059.274, 200)\n\t[System.Console]::Beep(1188.995, 500)\n\t[System.Console]::Beep(1059.274, 500)\n\t[System.Console]::Beep(1587.117, 500)\n\t[System.Console]::Beep(1413.961, 950)\n\t[System.Console]::Beep(1059.274, 300)\n\t[System.Console]::Beep(1059.274, 200)\n\t[System.Console]::Beep(2118.547, 500)\n\t[System.Console]::Beep(1781.479, 500)\n\t[System.Console]::Beep(1413.961, 500)\n\t[System.Console]::Beep(1334.601, 500)\n\t[System.Console]::Beep(1188.995, 500)\n\t[System.Console]::Beep(1887.411, 300)\n\t[System.Console]::Beep(1887.411, 200)\n\t[System.Console]::Beep(1781.479, 500)\n\t[System.Console]::Beep(1413.961, 500)\n\t[System.Console]::Beep(1587.117, 500)\n\t[System.Console]::Beep(1413.961, 900)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking RAM Status Using PowerShell\nDESCRIPTION: This PowerShell script queries installed RAM modules on a Windows machine via WMI, retrieves their capacity, type, speed, voltage, manufacturer, and location, and prints a formatted summary line for each module. It depends on the availability of the Win32_PhysicalMemory WMI class on Windows. The script includes helper functions GetRAMType (to translate numeric RAM type codes to human-readable strings) and Bytes2String (to convert byte counts to human-readable sizes). It supports standard PowerShell common parameters, attempts Linux compatibility (placeholder), and employs error handling to catch failures and report the location of errors. The expected input is none, and output is printed to host with details per memory bank. Limitations include Windows-only support for now (Linux handling is TODO), and the script assumes availability of WMI and related properties.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ram.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the RAM\n.DESCRIPTION\n\tThis PowerShell script queries the status of the installed RAM memory modules and prints it.\n.EXAMPLE\n\tPS> ./check-ram.ps1\n\t✅ 16GB DDR4 RAM at 3200MHz/1.2V in CPU0/CPU0-DIMM3 by Micron\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetRAMType { param([int]$Type)\n\tswitch($Type) {\n\t2 { return \"DRAM\" }\n\t5 { return \"EDO RAM\" }\n\t6 { return \"EDRAM\" }\n\t7 { return \"VRAM\" }\n\t8 { return \"SRAM\" }\n\t10 { return \"ROM\" }\n\t11 { return \"Flash\" }\n\t12 { return \"EEPROM\" }\n\t13 { return \"FEPROM\" }\n\t14 { return \"EPROM\" }\n\t15 { return \"CDRAM\" }\n\t16 { return \"3DRAM\" }\n\t17 { return \"SDRAM\" }\n\t18 { return \"SGRAM\" }\n\t19 { return \"RDRAM\" }\n\t20 { return \"DDR RAM\" }\n\t21 { return \"DDR2 RAM\" }\n\t22 { return \"DDR2 FB-DIMM\" }\n\t24 { return \"DDR3 RAM\" }\n\t26 { return \"DDR4 RAM\" }\n\t27 { return \"DDR5 RAM\" }\n\t28 { return \"DDR6 RAM\" }\n\t29 { return \"DDR7 RAM\" }\n\tdefault { return \"RAM\" }\n\t}\n}\n\nfunction Bytes2String { param([int64]$Bytes)\n        if ($Bytes -lt 1024) { return \"$Bytes bytes\" }\n        $Bytes /= 1024\n        if ($Bytes -lt 1024) { return \"$($Bytes)KB\" }\n        $Bytes /= 1024\n        if ($Bytes -lt 1024) { return \"$($Bytes)MB\" }\n        $Bytes /= 1024\n        if ($Bytes -lt 1024) { return \"$($Bytes)GB\" }\n        $Bytes /= 1024\n        if ($Bytes -lt 1024) { return \"$($Bytes)TB\" }\n        $Bytes /= 1024\n        if ($Bytes -lt 1024) { return \"$($Bytes)PB\" }\n        $Bytes /= 1024\n        if ($Bytes -lt 1024) { return \"$($Bytes)EB\" }\n}\n\ntry {\n\tif ($IsLinux) {\n\t\t# TODO\n\t} else {\n\t\t$Banks = Get-WmiObject -Class Win32_PhysicalMemory\n\t\tforeach ($Bank in $Banks) {\n\t\t\t$Capacity = Bytes2String($Bank.Capacity)\n\t\t\t$Type = GetRAMType $Bank.SMBIOSMemoryType\n\t\t\t$Speed = $Bank.Speed\n\t\t\t[float]$Voltage = $Bank.ConfiguredVoltage / 1000.0\n\t\t\t$Manufacturer = $Bank.Manufacturer\n\t\t\t$Location = \"$($Bank.BankLabel)/$($Bank.DeviceLocator)\"\n\t\t\tWrite-Host \"✅ $Capacity $Type at $($Speed)MHz,$($Voltage)V in $Location by $Manufacturer\"\n\t\t}\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commit Statistics in PowerShell Script\nDESCRIPTION: This snippet contains the main logic of the PowerShell script. It includes comment-based help, parameter definition, error handling using `try-catch`, checking for the `git` executable, validating the repository directory, fetching repository updates, and finally executing `git shortlog` to display commit statistics per author.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commit-statistics.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the Git commit statistics\n.DESCRIPTION\n\tThis PowerShell script lists the commit statistics of a Git repository.\n.PARAMETER RepoDir\n\tSpecifies the path to the Git repository.\n.EXAMPLE\n\tPS> ./list-commit-statistics.ps1\n  \n        Commits Author\n        ------- ------\n\t   2034 Markus Fleschutz <markus.fleschutz@gmail.com>\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$RepoDir = \"$PWD\")\n\ntry {\n\tWrite-Progress \"⏳ (1/4) Searching for Git executable...\"\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t$RepoDirName = (Get-Item \"$RepoDir\").Name\n\tWrite-Progress \"⏳ (2/4) Checking folder 📂$RepoDirName...\"\n\tif (-not(Test-Path \"$RepoDir\" -pathType container)) { throw \"Can't access directory: $RepoDir\" }\n\n\tWrite-Progress \"⏳ (3/4) Fetching updates...\"\n\t& git -C \"$RepoDir\" fetch --all --quiet\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed with exit code $lastExitCode\" }\n\n\tWrite-Progress \"⏳ (4/4) Querying commits...\"\n\t\" \"\n\t\"Commits Author\"\n\t\"------- ------\"\n\tWrite-Progress -completed \" \"\n\tgit -C \"$RepoDir\" shortlog --summary --numbered --email --no-merges\n\tif ($lastExitCode -ne \"0\") { throw \"'git shortlog' failed with exit code $lastExitCode\" }\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Play MP3 Files with MediaPlayer\nDESCRIPTION: This script plays an MP3 file specified via a command-line argument or user input, utilizing the .NET MediaPlayer class to handle media playback within PowerShell. It manages file validation, media duration retrieval, UI updates, and error handling, providing a user-friendly experience for audio playback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-mp3.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a .MP3 sound file\n.DESCRIPTION\n\tThis PowerShell script plays the given sound file (MPEG-1 audio layer-3 file format).\n.PARAMETER path\n\tSpecifies the file path to the .MP3 file\n.EXAMPLE\n\tPS> ./play-mp3.ps1 C:\\thunder.mp3\n\t   ▶️ Playing 'thunder.mp3' (00:03) ...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\")\n\ntry {\n\tif ($path -eq \"\" ) { $path = Read-Host \"Enter the file path to the MP3 sound file\" }\n\n\tif (-not(Test-Path \"$path\" -pathType leaf)) { throw \"Can't access sound file: $path\" }\n\t$fullPath = (Get-ChildItem $path).fullname\n\t$filename = (Get-Item \"$fullPath\").name\n\n\tAdd-Type -assemblyName PresentationCore\n\t$mediaPlayer = New-Object System.Windows.Media.MediaPlayer\n\n\tdo {\n\t\t$mediaPlayer.open($fullPath)\n\t\t$milliseconds = $mediaPlayer.NaturalDuration.TimeSpan.TotalMilliseconds\n\t} until ($milliseconds)\n\n\t[int]$minutes = $milliseconds / 60000\n\t[int]$seconds = ($milliseconds / 1000) % 60\n\tWrite-Host \"   ▶️\" -noNewline -foregroundColor green\n\tWrite-Host \"Playing '$filename' ($($minutes.ToString('00')):$($seconds.ToString('00'))) ...\"\n\n\t$previousTitle = $host.ui.RawUI.WindowTitle \n\t$host.ui.RawUI.WindowTitle = \"▶️ $filename\"\n\n\t$mediaPlayer.Volume = 1\n\t$mediaPlayer.play()\n\tStart-Sleep -milliseconds $milliseconds\n\t$mediaPlayer.stop()\n\t$mediaPlayer.close()\n\n\t$host.ui.RawUI.WindowTitle = $previousTitle\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Salesforce CLI Using PowerShell\nDESCRIPTION: This PowerShell script downloads the Salesforce CLI installer executable from the official Salesforce development site to the user's Downloads directory, executes the installer silently, and then verifies the successful installation by displaying the sfdx version. It includes error handling to output meaningful messages if any step fails. The script supports common PowerShell parameters such as Verbose and Debug for enhanced control and diagnostics.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-salesforce-cli.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n    Installs the Salesforce CLI (sfdx).\n.DESCRIPTION\n    This PowerShell script downloads and installs the Salesforce CLI on Windows.\n.EXAMPLE\n    PS> ./install-salesforce-cli.ps1\n    (The Salesforce CLI installer will be downloaded and run.)\n.LINK\n    https://github.com/fleschutz/PowerShell\n.NOTES\n    Author: Gavin R. McDavitt\n#>\n\ntry {\n    # Define the URL of the Salesforce CLI installer\n    $url = \"https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-x64.exe\"\n    \n    # Define the output path for the downloaded installer\n    $output = \"$env:USERPROFILE\\Downloads\\sfdx-windows-x64.exe\"\n    \n    # Download the installer\n    Invoke-WebRequest -Uri $url -OutFile $output\n\n    # Run the installer\n    Start-Process -FilePath $output -ArgumentList \"/silent\" -Wait\n    \n    # Verify the installation\n    sfdx --version\n    Write-Output \"Salesforce CLI installed successfully.\"\n\n    exit 0 # success\n} catch {\n    Write-Output \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n    exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Script Parameters in PowerShell\nDESCRIPTION: This snippet demonstrates the command syntax and parameters available for the `check-ping.ps1` script. It details the `-hosts` parameter, its purpose, required status, position, default value (a comma-separated string), and whether it accepts pipeline input or wildcard characters. It also mentions support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ping.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-ping.ps1 [[-hosts] <String>] [<CommonParameters>]\n\n-hosts <String>\n    Specifies the hosts to check, seperated by commata (default is: amazon.com,bing.com,cnn.com,dropbox.com,github.com,google.com,live.com,meta.com,x.com,youtube.com)\n    \n    Required?                    false\n    Position?                    1\n    Default value                bing.com,cnn.com,dropbox.com,github.com,google.com,ibm.com,live.com,meta.com,x.com,youtube.com\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Calculating and Writing Digits of PI with PowerShell - PowerShell\nDESCRIPTION: This snippet implements a PowerShell script that computes and displays the specified number of digits of the mathematical constant PI. It defines a parameter -digits with a default value of 1000, uses a function to perform the digit-by-digit computation using arithmetic with big integers, and writes results to the console. The script handles errors gracefully and provides usage examples. Dependencies include only native PowerShell, and expected input is an optional integer for digits (default 1000). Output is PI formatted to the requested digit count. The approach may have limitations in speed and memory for extremely large digit counts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-pi.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites PI\n.DESCRIPTION\n\tThis PowerShell script calculates and writes the digits of the mathematical constant PI.\n.PARAMETER digits\n\tSpecifies the number of digits to list (1000 by default)\n.EXAMPLE\n\tPS> ./write-pi.ps1\n\t3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$digits = 1000)\n\nfunction Write-Pi ( $digits ) {\n\t$Big = [bigint[]](0..10)\n \n\t$ndigits = 0\n \n \t$q = $t = $k = $Big[1]\n \t$r =           $Big[0]\n\t$l = $n =      $Big[3]\n\n\t# calculate first digit\n\t$nr = ( $Big[2] * $q + $r ) * $l\n\t$nn = ( $q * ( $Big[7] * $k + $Big[2] ) + $r * $l ) / ( $t * $l )\n\t$q *= $k\n\t$t *= $l\n\t$l += $Big[2]\n\t$k = $k + $Big[1]\n\t$n = $nn\n\t$r = $nr\n \n \tWrite-Host \"$($n).\" -noNewline\n \t$ndigits++\n \n \t$nr = $Big[10] * ( $r - $n * $t )\n \t$n = ( ( $Big[10] * ( 3 * $q + $r ) ) / $t ) - 10 * $n\n \t$q *= $Big[10]\n \t$r = $nr\n \n \twhile ($ndigits -lt $digits) {\n\t\tif ($Big[4] * $q + $r - $t -lt $n * $t) {\n\t\t\tWrite-Host \"$n\" -noNewline\n\t\t\t$ndigits++\n\t\t\t$nr = $Big[10] * ( $r - $n * $t )\n\t\t\t$n = ( ( $Big[10] * ( 3 * $q + $r ) ) / $t ) - 10 * $n\n\t\t\t$q *= $Big[10]\n\t\t\t$r = $nr\n\t\t} else {\n\t\t\t$nr = ( $Big[2] * $q + $r ) * $l\n\t\t\t$nn = ( $q * ( $Big[7] * $k + $Big[2] ) + $r * $l ) / ( $t * $l )\n\t\t\t$q *= $k\n\t\t\t$t *= $l\n\t\t\t$l += $Big[2]\n\t\t\t$k = $k + $Big[1]\n\t\t\t$n = $nn\n\t\t\t$r = $nr\n\t\t}\n      }\n\tWrite-Host \"...  ($digits digits)\"\n}\n\ntry {\n\tWrite-Pi $digits\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell script for listing current working directory\nDESCRIPTION: This script lists the path to the current working directory without displaying its contents. It utilizes Resolve-Path on $PWD and outputs the path with a folder emoji. Error handling is implemented to catch and display script errors, including line numbers, with exit codes indicating success (0) or failure (1). Dependencies include PowerShell core cmdlets and standard scripting practices. It supports common parameters such as Verbose, Debug, and ErrorAction for enhanced debugging and scripting control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-workdir.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the current working directory\n.DESCRIPTION\n\tThis PowerShell script lists the path to current working directory (but not the content itself).\n.EXAMPLE\n\tPS> ./list-workdir.ps1\n\t📂C:\\Users\\Markus\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Path = Resolve-Path -Path \"$PWD\"\n\t\"📂$Path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the List-Files PowerShell Script\nDESCRIPTION: This usage example demonstrates how to invoke the script with a directory path argument to list all files under the specified root. It requires the script file and a valid path to a directory as input, outputting all files found recursively within that directory tree. PowerShell must be available on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-files.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-files.ps1 C:\\\n\n```\n\n----------------------------------------\n\nTITLE: Executing Script in PowerShell\nDESCRIPTION: This snippet provides a basic example of how to run the `open-time-settings.ps1` script from the PowerShell console. It demonstrates calling the script using its relative path (`./`). No arguments are passed in this simple example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-time-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-time-settings\n\n\n```\n\n----------------------------------------\n\nTITLE: Performing Tasks on a Timer\nDESCRIPTION: This code performs a task on a timer. It creates a `Timer` object that elapses every 5000 milliseconds. `Register-ObjectEvent` is used to subscribe to the `Elapsed` event, executing a script block when the timer elapses. `$Timer.Start()` starts the timer.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_21\n\nLANGUAGE: PowerShell\nCODE:\n```\n#### Perform a task on a timer (ie. every 5000 milliseconds)\n$Timer = [System.Timers.Timer]::new(5000)\nRegister-ObjectEvent -InputObject $Timer -EventName Elapsed -Action {\n  Write-Host -ForegroundColor Blue -Object 'Timer elapsed! Doing some work.'\n}\n$Timer.Start()\n```\n\n----------------------------------------\n\nTITLE: speak-greek.ps1 Parameter Definition - PowerShell\nDESCRIPTION: Defines the `-text` parameter for the `speak-greek.ps1` script.  This parameter is used to specify the Greek text that will be spoken by the script. If no text is provided, the script prompts the user to enter the text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-greek.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-greek.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Greek text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Querying Swap Space Status in PowerShell\nDESCRIPTION: This PowerShell script retrieves and reports swap space information for Linux and Windows systems using different methods based on the OS. It accepts an optional parameter '-minLevel' specifying the minimum free swap space threshold in megabytes (default 10 MB). The script formats byte sizes into readable units (MB to EB), calculates usage percentages, and outputs messages indicating swap space status, including warnings for low or full swap conditions or confirmation of sufficient reserved swap. It relies on the 'free' command for Linux and WMI queries for Windows. Error handling is included for script execution issues.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-swap-space.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the swap space\n.DESCRIPTION\n\tThis PowerShell script queries the current status of the swap space and prints it.\n.PARAMETER minLevel\n\tSpecifies the minimum level in MB (10 MB by default)\n.EXAMPLE\n\tPS> ./check-swap-space.ps1\n\t✅ Swap space uses 1GB (21%) of 5GB\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$minLevel = 10)\n\nfunction MB2String { param([int64]$bytes)\n        if ($bytes -lt 1024) { return \"$($bytes)MB\" }\n        $bytes /= 1024\n        if ($bytes -lt 1024) { return \"$($bytes)GB\" }\n        $bytes /= 1024\n        if ($bytes -lt 1024) { return \"$($bytes)TB\" }\n        $bytes /= 1024\n        if ($bytes -lt 1024) { return \"$($bytes)PB\" }\n        $bytes /= 1024\n        if ($bytes -lt 1024) { return \"$($bytes)EB\" }\n}\n\ntry {\n\t\n\tif ($IsLinux) {\n\t\t$Result = $(free --mega | grep Swap:)\n\t\t[int64]$total = $Result.subString(5,15)\n\t\t[int64]$used = $Result.substring(20,13)\n\t\t[int64]$free = $Result.substring(32,11)\n\t} else {\n\t\t$items = Get-WmiObject -class \"Win32_PageFileUsage\" -namespace \"root\\CIMV2\" -computername localhost \n\t\t[int64]$total = [int64]$used = 0\n\t\tforeach ($item in $items) { \n\t\t\t$total += $item.AllocatedBaseSize\n\t\t\t$used += $item.CurrentUsage\n\t\t\t\n\t\t}\n\t\t[int64]$free = ($total - $used)\n\t}\n\tif ($total -eq 0) {\n        \tWrite-Output \"⚠️ No swap space configured\"\n\t} elseif ($free -eq 0) {\n\t\tWrite-Output \"⚠️ Swap space with $(MB2String $total) is FULL !!!\"\n\t} elseif ($free -lt $minLevel) {\n\t\tWrite-Output \"⚠️ Swap space has only $(MB2String $free) of $(MB2String $total) left!\"\n\t} elseif ($used -lt 3) {\n\t\tWrite-Output \"✅ Swap space has $(MB2String $total) reserved\"\n\t} else {\n\t\t[int64]$percent = ($used * 100) / $total\n\t\tWrite-Output \"✅ Swap space uses $(MB2String $used) ($percent%) of $(MB2String $total)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Change Directory to Downloads Folder\nDESCRIPTION: This script changes the current working directory to the user's downloads folder, handling both Windows and Linux environments. It utilizes COM objects on Windows to locate the folder and resolves the Linux path using '~/Downloads'. Error handling reports failures if the folder doesn't exist. It expects no input parameters other than common PowerShell parameters and outputs the path or an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-downloads.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's downloads folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's downloads folder.\n.EXAMPLE\n\tPS> ./cd-downloads\n\t📂C:\\Users\\Markus\\Downloads\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Downloads\"\n\t} else {\n\t\t$path = (New-Object -ComObject Shell.Application).NameSpace('shell:Downloads').Self.Path\n\t}\n\tif (Test-Path \"$path\" -pathType container) {\n\t\tSet-Location \"$path\"\n\t\t\"📂$path\"\n\t\texit 0 # success\n\t}\n\tthrow \"User's downloads folder at 📂$path doesn't exist (yet)\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing search-files.ps1 Script Example in PowerShell\nDESCRIPTION: This snippet demonstrates how to run the `search-files.ps1` script from the PowerShell console. It executes the script, searching for the text pattern \"UFO\" within all files ending with the `.ps1` extension in the current or specified directory. The output shows a table with the file path and the specific line containing the match.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-files.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./search-files.ps1 UFO *.ps1\n\n\n\nFILE                                              LINE\n----                                              ----\n/home/Markus/PowerShell/scripts/check-month.ps1   17: $MonthName = (Get-Date -UFormat %B)\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving BIOS Information with Get-CimInstance in PowerShell\nDESCRIPTION: This is the core script logic for 'list-bios.ps1'. It uses 'Get-CimInstance -ClassName Win32_BIOS' to query WMI/CIM for BIOS details and outputs the resulting object. Basic error handling is implemented using a try-catch block, reporting errors with line numbers and exiting with appropriate status codes (0 for success, 1 for failure).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-bios.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists BIOS details\n.DESCRIPTION\n\tThis PowerShell script lists the BIOS details.\n.EXAMPLE\n\tPS> ./list-bios.ps1\n\n\tSMBIOSBIOSVersion : F6\n\tManufacturer      : American Megatrends Inc.\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-CimInstance -ClassName Win32_BIOS\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wake-On-LAN Script Logic in PowerShell\nDESCRIPTION: Contains the core logic of the `wakeup.ps1` script. It defines parameters, a `Send-WOL` function to construct and send the magic packet using UDP sockets, and a main execution block that prompts for parameters if not provided, calls `Send-WOL` twice, pauses briefly, and handles basic success/error output. It depends on the .NET System.Net.Sockets namespace.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wakeup.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSends a magic packet to a computer to wake him up\n.DESCRIPTION\n\tThis PowerShell script sends a magic UDP packet twice to a computer to wake him up (requires Wake-On-LAN).\n.PARAMETER MACaddress\n\tSpecifies the host's MAC address (e.g. 11:22:33:44:55:66)\n.PARAMETER IPaddress\n\tSpecifies the host's IP address or subnet address (e.g. 255.255.255.255)\n.PARAMETER Port\n\tSpecifies the UDP port (9 by default)\n.EXAMPLE\n\tPS> ./wakeup 11:22:33:44:55:66 192.168.100.100\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$MACaddress = \"\", [string]$IPaddress = \"\", [int]$Port=9)\n\t\nfunction Send-WOL { param([string]$mac, [string]$ip, [int]$port) \n\t$broadcast = [Net.IPAddress]::Parse($ip) \n  \n\t$mac=(($mac.replace(\":\",\"\")).replace(\"-\",\"\")).replace(\".\",\"\") \n\t$target=0,2,4,6,8,10 | % {[convert]::ToByte($mac.substring($_,2),16)} \n\t$packet = (,[byte]255 * 6) + ($target * 16) \n  \n\t$UDPclient = new-Object System.Net.Sockets.UdpClient \n\t$UDPclient.Connect($broadcast,$port) \n\t[void]$UDPclient.Send($packet, 102)  \n} \n\ntry {\n\tif ($MACaddress -eq \"\" ) { $MACaddress = read-host \"Enter the host's MAC address (e.g. 00:11:22:33:44:55)\"\t}\n\tif ($IPaddress -eq \"\" ) { $IPaddress = read-host \"Enter the host's IP address or subnet address (e.g. 255.255.255.255)\" }\n\n\tSend-WOL $MACaddress $IPaddress $Port\n\tstart-sleep -milliseconds 100\n\tSend-WOL $MACaddress $IPaddress $Port\n\n\t\"✔️ sent magic packet $MACaddress to IP $IPaddress port $Port (twice)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Hibernate Computer Using PowerShell\nDESCRIPTION: This PowerShell script hibernates the local computer. It sets the current culture to \"en-US\", retrieves the current time, displays a message indicating the system is going to sleep, pauses for 500 milliseconds, and then executes the `rundll32.exe` command to initiate hibernation. Error handling is included to catch and display any errors that may occur during the process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/hibernate.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tHibernates the computer\n.DESCRIPTION\n\tThis PowerShell script hibernates the local computer immediately. \n.EXAMPLE\n\tPS> ./hibernate.ps1\n\tIt's 5:04 PM, going to sleep now... 😴💤\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentThread.currentCulture = [system.globalization.cultureInfo]\"en-US\"\n\t$CurrentTime = $((Get-Date).ToShortTimeString())\n\tWrite-Host \"It's $CurrentTime, going to sleep now... 😴💤\"\n\tStart-Sleep -milliseconds 500\n\t& rundll32.exe powrprof.dll,SetSuspendState 1,1,0 # bHibernate,bForce,bWakeupEventsDisabled\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Linux VM using Hyper-V (PowerShell)\nDESCRIPTION: This PowerShell script creates a new Linux virtual machine using Hyper-V. It defines VM parameters like name, memory, generation, disk path/size, boot device, and network switch. It then creates the VM, sets processor count, adds a DVD drive, attaches an ISO, disables secure boot and exits successfully.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-linux-vm.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$VMName = \"linux\"\n\n $VM = @{\n     Name = $VMName\n     MemoryStartupBytes = 1GB\n     Generation = 2\n     NewVHDPath = \"C:\\VirtualMachines\\$VMName\\Virtual Hard Disks\\$VMName.vhdx\"\n     NewVHDSizeBytes = 30GB\n     BootDevice = \"VHD\"\n     Path = \"C:\\VirtualMachines\\\"\n     SwitchName = 'vSwitch'\n }\n\n New-VM @VM\n Set-VMProcessor $VMName -count 1\n Add-VMDvdDrive $VMName\n Set-VMDvdDrive $VMName -Path \"C:\\iso\\CentOS-8.3.2011-x86_64-minimal.iso\"\n Set-VMFirmware -EnableSecureBoot Off $VMName\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Show Panama City in Google Maps\nDESCRIPTION: This script launches the default web browser directed to Google Maps showing Panama City, Panama. It supports standard PowerShell command-line parameters for verbosity, debugging, and error handling. The script does not require additional dependencies and is intended for quick visualization purposes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-panama-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-panama-city.ps1 - Shows Panama city in Google Maps\n\nThis script launches the Web browser with Google Maps at Panama city (Panama).\n\n## Parameters\n```powershell\nshow-panama-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./show-panama-city\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of show-panama-city.ps1*\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Countdown Timer PowerShell Script\nDESCRIPTION: This snippet presents the parameter interface for the 'set-timer.ps1' PowerShell script. The script accepts an optional integer parameter '-Seconds' specifying the countdown duration, as well as built-in common PowerShell parameters. It serves as a command-line interface contract to be used when invoking the script, with '-Seconds' defaulting to 0 if not provided.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-timer.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/set-timer.ps1 [[-Seconds] <Int32>] [<CommonParameters>]\n\n-Seconds <Int32>\n    Specifies the number of seconds\n    \n    Required?                    false\n    Position?                    1\n    Default value                0\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing RSS News Headlines PowerShell\nDESCRIPTION: This PowerShell script snippet defines parameters, fetches an RSS feed using Invoke-WebRequest, parses the XML content, and iterates through news items. It extracts the title and publication time, then calls an external script 'write-typewriter.ps1' to display the headlines with a specified speed, limiting output to a maximum number of lines.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-news.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the latest news\n.DESCRIPTION\n\tThis PowerShell script lists the latest news by using a RSS (Really Simple Syndication) feed.\n.PARAMETER RSS_URL\n\tSpecifies the URL to the RSS feed (Yahoo World News by default)\n.PARAMETER maxLines\n\tSpecifies the maximum number of lines to list (24 by default)\n.PARAMETER speed\n        Specifies the speed to write the text (10 ms by default)\n.EXAMPLE\n\tPS> ./list-news.ps1\n  \n\t UTC   HEADLINES         (source: https://www.yahoo.com/news/world)\n\t ---   ---------\n\t09:15  Deadly Mediterranean wildfires kill more than 40\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$RSS_URL = \"https://news.yahoo.com/rss/world\", [int]$maxLines = 24, [int]$speed = 5)\n\ntry {\n\t[xml]$content = (Invoke-WebRequest -URI $RSS_URL -useBasicParsing).Content\n\t$title = $content.rss.channel.title\n\t$URL = $content.rss.channel.link\n\tWrite-Host \"\\n UTC   HEADLINES             (source: \" -noNewline\n        Write-Host $URL -foregroundColor blue -noNewline\n        Write-Host \")\"\n        Write-Host \" ---   ---------\"\n\t[int]$count = 1\n\tforeach ($item in $content.rss.channel.item) {\n\t\t$title = $item.title -replace \"â\",\"'\"\n\t\t$time = $item.pubDate.Substring(11, 5)\n\t\t& \"$PSScriptRoot/write-typewriter.ps1\" \"$time  $title\" $speed\n\t\tif ($count++ -eq $maxLines) { break }\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Function to Generate Random PowerShell Code Lines\nDESCRIPTION: Defines 'GetRandomCodeLine', a function that creates random PowerShell code snippets based on a random number generator. It modifies the global '$Tabs' variable to manage indentation levels and returns various code constructs like variable assignments, conditionals, loops, sleep commands, user input, and comments. This function forms the core of the code generation logic, producing varied lines to simulate code snippets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-code.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<function GetRandomCodeLine { \n\t$Generator = New-Object System.Random\n\t$Num = [int]$Generator.next(0, 31)\n\tswitch($Num) {\n\t 0 { return $Tabs + \"`$count = 0\" }\n\t 1 { return $Tabs + \"`$count++\" }\n\t 2 { return $Tabs + \"exit 0 # success\" }\n\t 3 { return $Tabs + \"`$files = Get-ChildItem C:\" }\n\t 4 { return $Tabs + \"Start-Sleep -seconds 1\" }\n\t 5 { return $Tabs + \"`$generator = New-Object System-Random\" }\n\t 6 { $global:Tabs = \"        \"; return \"} else {\" }\n\t 7 { $global:Tabs = \"        \"; return \"} catch {\" }\n\t 8 { $global:Tabs = \"        \"; return \"} elseif (`$count -eq 0) {\" }\n\t 9 { return $Tabs + \"Write-Host `\"Hello World`\" \" }\n\t10 { $global:Tabs = \"        \"; return \"while (`$true) {\" }\n\t11 { return $Tabs + \"# next part:\" }\n\t12 { return $Tabs + \"exit 1 # failed\" }\n\t13 { return $Tabs + \"return 1\" }\n\t14 { return $Tabs + \"return 0\" }\n\t15 { return $Tabs + \"Write-Progress `\"Working...`\" \" }\n\t16 { return $Tabs + \"[bool]`$keepAlive = `$true\" }\n\t17 { return $Tabs + \"# Copyright © 2023 write-code.ps1. All Rights Reserved.\" }\n\t18 { $global:Tabs = \"        \"; return \"for ([int]`$i = 0; `$i -lt 42; `$i++) {\" }\n\t19 { return $Tabs + \"`$stopWatch = [system.diagnostics.stopwatch]::startNew()\" }\n\t20 { return $Tabs + \"[int]`$elapsed = `$stopWatch.Elapsed.TotalSeconds\" }\n\t21 { $global:Tabs = \"        \"; return \"if (`$count -eq 42) {\" }\n\t22 { $global:Tabs = \"        \"; return \"} finally {\" }\n\t23 { return $Tabs + \"throw `\"Can't open file`\" \" }\n\t24 { return $Tabs + \"Start-Sleep -milliseconds 42\" }\n\t25 { return $Tabs + `\"`$Choice = Read-Host `\"Red or blue pill?`\"\" }\n\t26 { return $Tabs + \"[int]`$answer = 42\" }\n\t27 { $global:Tabs = \"\"; return \"}\" }\n\t28 { $global:Tabs = \"         \"; return \"try {\" }\n\t29 { $global:Tabs = \"         \"; return \"foreach(`$row in `$table) {\" }\n\t30 { $global:Tabs = \"         \"; return \"foreach(`$file in `$files) {\" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters | PowerShell\nDESCRIPTION: This snippet documents the expected command line syntax for the script, showing how to invoke it and indicating that it supports standard PowerShell Common Parameters. It explains that <CommonParameters> are available for controlling script behavior like verbosity or error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-shares.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-network-shares.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Declaring Common Parameter Support in PowerShell\nDESCRIPTION: This snippet indicates that the `list-tasks.ps1` script supports the standard PowerShell common parameters (Verbose, Debug, ErrorAction, etc.). These parameters allow users to control script behavior regarding output verbosity, debugging, and error handling without explicitly defining them within the script's parameter block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-tasks.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for say-time.ps1 Script in PowerShell\nDESCRIPTION: This snippet shows the parameter block definition for the say-time.ps1 script. It indicates that the script primarily accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.), allowing for flexible execution control and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-time.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/say-time.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameters for open-onedrive.ps1 Script in PowerShell\nDESCRIPTION: This snippet outlines the parameters accepted by the `open-onedrive.ps1` script. It indicates that the script supports the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) but does not define any script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-onedrive.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-onedrive.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters Definition\nDESCRIPTION: This snippet shows the command-line parameters for the list-timezone.ps1 script. The script doesn't require any specific parameters but supports common PowerShell parameters such as Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-timezone.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-timezone.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Checking Drive File System\nDESCRIPTION: This script checks the file system of a specified drive and verifies whether it has errors. It requires administrator rights to run 'repair-volume' with the '-scan' parameter, then provides feedback indicating if the drive is clean. It accepts an optional drive letter parameter and supports standard PowerShell parameters for logging and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-file-system.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the file system of a drive (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script checks the file system of a drive. It needs admin rights.\n.PARAMETER Drive\n\tSpecifies the drive to check\n.EXAMPLE\n\tPS> ./check-file-system C\n\t✅ file system on drive C is clean\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\nparam([string]$Drive = \"\")\n\ntry {\n\tif ($Drive -eq \"\" ) { $Drive = read-host \"Enter drive (letter) to check\" }\n\n\t$Result = repair-volume -driveLetter $Drive -scan\n\tif ($Result -ne \"NoErrorsFound\") { throw \"'repair-volume' failed\" }\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"File system on drive $Drive is clean.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching Default Web Browser to Open AirBNB Website in PowerShell\nDESCRIPTION: This snippet defines a PowerShell script that launches the default web browser to open the AirBNB website using a helper script located in the same directory. It supports all common PowerShell parameters such as Verbose, Debug, and ErrorAction, allowing for flexible execution and error handling. The script executes the helper script 'open-default-browser.ps1' with the URL 'https://www.airbnb.com' as the parameter and exits with code 0 to indicate success. It requires the 'open-default-browser.ps1' script to be present in the script root directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-air-b-n-b.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the AirBNB website\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the AirBNB website.\n.EXAMPLE\n\tPS> ./open-air-b-n-b\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.airbnb.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Fonts with PowerShell Script\nDESCRIPTION: This PowerShell script automates the process of installing TrueType fonts by copying font files from a user-specified source folder to the Windows Fonts directory and updating registry entries for system recognition. It accepts an optional parameter for the source folder, prompts interactively if not provided, and supports standard PowerShell common parameters. The script iterates through font files, copies them to the system fonts directory, and registers each font by creating appropriate registry entries, facilitating seamless font installation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-fonts.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam(\n    [string]$sourceFolder = \"\"\n)\n\n# If no parameter is given, prompt the user for the source folder\nif (-not $sourceFolder) {\n    $sourceFolder = Read-Host \"Please enter the path to the source folder\"\n}\n\n# Set the destination folder for fonts, you don't need to change this\n$fontsFolder = \"$env:SystemRoot\\Fonts\"\n\n# Get all font files from the source folder\n$fontFiles = Get-ChildItem -Path $sourceFolder -Filter *.ttf\n\nforeach ($font in $fontFiles) {\n    # Copy font files to the Fonts folder\n    $destination = \"$fontsFolder\\$($font.Name)\"\n    Copy-Item -Path $font.FullName -Destination $destination -Force\n\n    # Add font to registry\n    $fontName = [System.IO.Path]::GetFileNameWithoutExtension($font.Name)\n    $fontRegistryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Fonts\"\n\n    # For TrueType fonts\n    $fontType = \"TrueType\"\n\n    # Add the registry entry\n    New-ItemProperty -Path $fontRegistryPath -Name \"$fontName ($fontType)\" -PropertyType String -Value $font.Name -Force\n}\n\nWrite-Output \"Fonts have been installed successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Launching Firefox Browser PowerShell Script\nDESCRIPTION: This PowerShell script launches the Mozilla Firefox browser, optionally opening a specified URL. The script accepts a single optional parameter '-URL' to define the target web address, defaulting to 'http://www.fleschutz.de' if none is provided. It supports standard PowerShell common parameters such as Verbose, Debug, and ErrorAction for execution control. The script requires PowerShell environment and Firefox browser installed on the system. The input is a string URL parameter and the output is the launch of the Firefox browser instance with the given URL loaded.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-firefox-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-firefox-browser.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies an URL\n    \n    Required?                    false\n    Position?                    1\n    Default value                http://www.fleschutz.de\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-firefox-browser\n```\n\n----------------------------------------\n\nTITLE: Measuring DNS Server Latency Using PowerShell\nDESCRIPTION: This function, MeasureDNSServer, performs ICMP-based latency tests for given DNS servers by measuring response times for nslookup queries to specified IPv4 addresses. It outputs a custom object with provider name, IPv4 addresses, and latency measurements. Dependencies include the .NET Stopwatch class; inputs are DNS provider name and two IPv4 addresses; output is an object with performance data.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dns-servers.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tMeasures latency for specified DNS servers by pinging their IPv4 addresses.\n.DESCRIPTION\n\tPerforms DNS lookup latency measurement by timing nslookup commands to compare response times of primary and secondary DNS server IPs. The output is an object with provider info, IP addresses, and measured latencies.\n.PARAMETER provider\n\tName of the DNS provider.\n.PARAMETER IPv4Pri\n\tPrimary IPv4 address of the DNS server.\n.PARAMETER IPv4Sec\n\tSecondary IPv4 address of the DNS server.\n.NOTES\n\tRelies on .NET Stopwach class to time nslookup commands; outputs object with latency and provider details.\n#>\nfunction MeasureDNSServer([string]$provider, [string]$IPv4Pri, [string]$IPv4Sec) {\n\t$time=[system.diagnostics.stopwatch]::startNew();$null=(nslookup fleschutz.de $IPv4Pri 2>$null);[int]$lat1=$time.Elapsed.TotalMilliseconds\n\n\t$time=[system.diagnostics.stopwatch]::startNew();$null=(nslookup fleschutz.de $IPv4Sec 2>$null);[int]$lat2=$time.Elapsed.TotalMilliseconds\n\n\tNew-Object PSObject -Property @{ 'DNS PROVIDER'=$provider; 'IPv4 ADDRESSES'=\"$IPv4Pri · $IPv4Sec\"; LATENCY=\"$lat1 · $lat2 ms\" }\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to List Verbs with Sorting and Error Handling\nDESCRIPTION: This PowerShell script retrieves all recognized verbs using the Get-Verb cmdlet, sorts them alphabetically, and exits with a success status. It includes error handling to output an error message with script line number if execution fails. Dependencies are minimal, requiring PowerShell environment with access to Get-Verb.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-powershell-verbs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists verbs in PowerShell\n.DESCRIPTION\n\tThis PowerShell script lists all allowed/recommended verbs in PowerShell.\n.EXAMPLE\n\tPS> ./list-powershell-verbs.ps1\n\n\tVerb        Group\n\t----        -----\n\tAdd         Common            \n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Verb | Sort-Object -Property Verb\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching File Explorer to C: Drive in PowerShell\nDESCRIPTION: This is the main implementation of the open-c-drive.ps1 script. It leverages a supporting script (open-file-explorer.ps1), passing 'C:' as the argument to launch File Explorer pointed to C: drive. The script then exits with a success code. Dependencies include the existence of open-file-explorer.ps1 in the same script root directory. No parameters are required, but common PowerShell cmdlet parameters are supported for extended control. The script expects a standard Windows environment and may not work on non-Windows platforms.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-c-drive.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the C: drive folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the C: drive folder.\n.EXAMPLE\n\tPS> ./open-c-drive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-file-explorer.ps1\" \"C:\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Complete check-midnight.ps1 PowerShell Script Implementation\nDESCRIPTION: The full implementation of the check-midnight.ps1 script that determines whether midnight has passed or is approaching, calculates the time difference, formats it as a readable string, and uses text-to-speech to announce the result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-midnight.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks for Midnight\n.DESCRIPTION\n\tThis PowerShell script checks the time until Midnight and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-midnight\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TimeSpanToString { param([TimeSpan]$Delta)\n\t$Result = \"\"\n\tif ($Delta.Hours -eq 1) {       $Result += \"1 hour and \"\n\t} elseif ($Delta.Hours -gt 1) { $Result += \"$($Delta.Hours) hours and \"\n\t}\n\tif ($Delta.Minutes -eq 1) { $Result += \"1 minute\"\n\t} else {                    $Result += \"$($Delta.Minutes) minutes\"\n\t}\n\treturn $Result\n}\n\ntry {\n\t$Now = [DateTime]::Now\n\tif ($Now.Hour -lt 12) {\n\t\t$Midnight = Get-Date -Hour 0 -Minute 0 -Second 0\n\t\t$TimeSpan = TimeSpanToString($Now - $Midnight)\n\t\t$Reply = \"Midnight was $TimeSpan ago.\"\n\t} else {\n\t\t$Midnight = Get-Date -Hour 23 -Minute 59 -Second 59\n\t\t$TimeSpan = TimeSpanToString($Midnight - $Now)\n\t\t$Reply = \"Midnight is in $TimeSpan.\"\n\t}\n\t& \"$PSScriptRoot/speak-english.ps1\" \"$Reply\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of User Account Removal in PowerShell\nDESCRIPTION: The full script implementation that handles user account removal including the home directory. It supports Linux systems using the deluser command and includes error handling, execution time tracking, and user feedback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-user.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRemoves an user account\n.DESCRIPTION\n\tThis PowerShell script removes an existing user account including the home directory.\n.EXAMPLE\n\tPS> ./remove-user.ps1 Joe\n\t✅ Removed user 'Joe' including home directory in 11s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$username = \"\")\n\ntry {\n\tif ($username -eq \"\") { $username = Read-Host \"Enter the user name to remove\" }\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsLinux) {\n\t\t&  sudo deluser --remove-home $username\n\t} else {\n\t\tthrow \"Not supported yet\"\n\t}\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Removed user '$username' including home directory in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing add-firewall-rules.ps1 Script Logic in PowerShell\nDESCRIPTION: This snippet comprises the main logic and full documentation of the add-firewall-rules.ps1 script. It defines parameter handling, checks for administrator rights, validates and converts input paths, enumerates all .exe files, and adds corresponding firewall rules using New-NetFirewallRule. The script outputs status messages regarding progress and errors. Prerequisite: must be run as administrator. Inputs: path, direction, and profiles. Outputs success messages or errors for missing executables or permission issues.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/add-firewall-rules.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tAdds firewall rules for executables (needs admin rights).\n.DESCRIPTION\n\tThis PowerShell script adds firewall rules for the given executable. Administrator rights are required.\n.PARAMETER PathToExecutables\n\tSpecifies the path to the executables.\n.PARAMETER Direction\n\tSpecifies the direction for the firewall rule. Can be 'Inbound' or 'Outbound'. Default is 'Inbound'.\n.PARAMETER Profile \n\tSpecifies the firewall profile. Can be 'Domain', 'Private', or 'Public'. Multiple values can be specified as an array.\n.EXAMPLE\n\tPS> ./add-firewall-rules.ps1 -PathToExecutables C:\\MyApp\\bin -Direction Outbound -Profile Private\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\nparam(\n\t[string]$PathToExecutables = \"\",\n\t[string]$Direction = \"Inbound\",\n\t[array]$FirewallProfile  = @(\"Domain\", \"Private\")\n)\n\ntry {\n\tif (-not $PathToExecutables) {\n\t\t$PathToExecutables = Read-Host \"Enter path to executables\"\n\t}\n\n\t$AbsPath = Convert-Path -Path $PathToExecutables\n\t$Executables = Get-ChildItem -Path $AbsPath -Filter \"*.exe\"\n\n\tif (-not $Executables) {\n\t\tWrite-Warning \"No executables found. No Firewall rules have been created.\"\n\t\tRead-Host \"Press Enter to continue...\"\n\t\treturn\n\t}\n\n\tforeach ($exe in $Executables) {\n\t\t$exeName = $exe.Name\n\t\t$exeFullPath = $exe.FullName\n\n\t\tWrite-Output \"Adding firewall rule for $exeName\"\n\t\tNew-NetFirewallRule -DisplayName $exeName -Direction $Direction -Program $exeFullPath -Profile $FirewallProfile  -Action Allow\n\t}\n\n\tWrite-Host -ForegroundColor Green \"Done\"\n} catch {\n\tWrite-Error \"Error in line $($_.InvocationInfo.ScriptLineNumber): $($_.Exception.Message)\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Directory to ZIP Conversion\nDESCRIPTION: This PowerShell script converts a directory into a compressed .ZIP file. It uses the `Compress-Archive` cmdlet to achieve this. It handles cases where the directory path or zip path are not provided as arguments by prompting the user for the directory path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-dir2zip.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts a directory into a compressed .ZIP file\n.DESCRIPTION\n\tThis PowerShell script creates a new compressed .ZIP file from a directory (including subfolders).\n.PARAMETER dirPath\n\tSpecifies the path to the directory\n.PARAMETER zipPath\n\tSpecifies the path to the target .ZIP file (default is dirPath.zip)\n.EXAMPLE\n\tPS> ./convert-dir2zip.ps1 C:\\Windows Win.zip\n\t✅ Converted into compressed Win.zip in 291s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$dirPath = \"\", [string]$zipPath = \"\")\n\ntry {\n\tif ($dirPath -eq \"\" ) { $dirPath = Read-Host \"Enter the path to the folder\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\t$dirPath = Resolve-Path $dirPath\n\tif ($zipPath -eq \"\" ) { $zipPath = \"$dirPath.zip\" }\n\n\tCompress-Archive -path $dirPath -destinationPath $zipPath\n\n\t[int]$elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ Converted into compressed $zipPath in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Automated Installation and Configuration of Unbound DNS Server - PowerShell\nDESCRIPTION: This comprehensive PowerShell script automates the installation of the Unbound DNS resolver, including package updates, configuration validation, service management, and DNS pre-training. Dependencies include sudo privileges, apt package manager, and access to a valid Unbound configuration file in a relative data directory. Inputs are minimal, as the process is fully automated; outputs are log messages and system modifications. The script enforces admin execution, performs extensive error checking, and fails gracefully with appropriate error reporting.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-unbound-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Unbound server (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script installs Unbound, a validating, recursive, caching DNS resolver. It needs admin rights.\n.EXAMPLE\n\tPS> ./install-unbound-server.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ (1/10) Updating package infos...\"\n\t& sudo apt update -y\n\tif ($lastExitCode -ne \"0\") { throw \"'apt update' failed\" }\n\n\t\"⏳ (2/10) Installing the Unbound packages...\"\n\t& sudo apt install unbound unbound-anchor -y\n\tif ($lastExitCode -ne \"0\") { throw \"'apt install unbound' failed\" }\n\n\t\"⏳ (3/10) Setting up Unbound...\"\n\t& sudo unbound-control-setup\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control-setup' failed\" }\n\n\t\"⏳ (4/10) Updating DNSSEC Root Trust Anchors...\"\n\t& sudo unbound-anchor\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-anchor' failed\" }\n\n\t\"⏳ (5/10) Checking config file...\"\n\t& unbound-checkconf \"$PSScriptRoot/../data/unbound.conf\"\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-checkconf' failed - check the syntax\" }\n\n\t\"⏳ (6/10) Copying config file to /etc/unbound/unbound.conf ...\"\n\t& sudo cp \"$PSScriptRoot/../data/unbound.conf\" /etc/unbound/unbound.conf\n\tif ($lastExitCode -ne \"0\") { throw \"'cp' failed\" }\n\n\t\"⏳ (7/10) Stopping default DNS cache daemon systemd-resolved...\"\n\t& sudo systemctl stop systemd-resolved\n\t& sudo systemctl disable systemd-resolved\n\n\t\"⏳ (8/10) (Re-)starting Unbound...\"\n\t& sudo unbound-control stop\n\t& sudo unbound-control start\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control start' failed\" }\n\n\t\"⏳ (9/10) Checking status of Unbound...\"\n\t& sudo unbound-control status\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control status' failed\" }\n\n\t\"⏳ (10/10) Training Unbound with 100 popular domain names...\"\n\t& \"$PSScriptRoot/check-dns.ps1\" \n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control status' failed\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ Installed Unbound in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing hello-world.ps1 Script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the `hello-world.ps1` script from a PowerShell prompt. It shows the command `./hello-world.ps1` and the resulting standard output \"Hello World\".\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/hello-world.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./hello-world.ps1\nHello World\n```\n\n----------------------------------------\n\nTITLE: Removing All Print Jobs from All Printers in PowerShell\nDESCRIPTION: This core implementation iterates through all printers on the system using Get-Printer, retrieves each printer's print jobs via Get-PrintJob, and removes every job found with Remove-PrintJob. It includes exception handling to print success or error messages, and exits with success (0) or failure (1) codes. Requires PowerShell version 4 or newer and depends on the existence of the Windows printing cmdlets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-print-jobs.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRemoves all jobs from all printers\n.DESCRIPTION\n\tThis PowerShell script removes all print jobs from all printer devices.\n.EXAMPLE\n\tPS> ./remove-print-jobs\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -Version 4\n\ntry {\n\t$printers = Get-Printer\n\tif ($printers.Count -eq 0) { throw \"No printer found\" }\n\t\t\n\tforeach ($printer in $printers) {\n\t\t$printjobs = Get-PrintJob -PrinterObject $printer\n\t\tforeach ($printjob in $printjobs) {\n\t\t\tRemove-PrintJob -InputObject $printjob\n\t\t}\n\t}\n\n\t\"✅ all print jobs removed\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete list-latest-tags.ps1 PowerShell Script\nDESCRIPTION: The full script that lists the latest tags in all Git repositories within a specified folder. It verifies that Git is installed, checks if the parent directory exists, and then iterates through each subdirectory to fetch and display tag information.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-latest-tags.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the latests tags in all Git repositories in a folder\n.DESCRIPTION\n\tThis PowerShell script lists the latest tags in all Git repositories in the specified folder.\n.PARAMETER ParentDir\n\tSpecifies the path to the parent folder\n.EXAMPLE\n\tPS> ./list-latest-tags C:\\MyRepos\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$ParentDir = \"$PWD\")\n\ntry {\n\tif (-not(test-path \"$ParentDir\" -pathType container)) { throw \"Can't access directory: $ParentDir\" }\n\n\t$Null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t$Folders = (get-childItem \"$ParentDir\" -attributes Directory)\n\t$FolderCount = $Folders.Count\n\t$ParentDirName = (get-item \"$ParentDir\").Name\n\t\"Found $FolderCount subfolders in 📂$ParentDirName...\"\n\n\tforeach ($Folder in $Folders) {\n\t\t$FolderName = (get-item \"$Folder\").Name\n\n#\t\t& git -C \"$Folder\" fetch --tags\n#\t\tif ($lastExitCode -ne \"0\") { throw \"'git fetch --tags' failed\" }\n\n\t\t$LatestTagCommitID = (git -C \"$Folder\" rev-list --tags --max-count=1)\n\t\t$LatestTag = (git -C \"$Folder\" describe --tags $LatestTagCommitID)\n\t\t\"* $FolderName $LatestTag ($LatestTagCommitID)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Speaking the Current Month in PowerShell\nDESCRIPTION: This is the main implementation of the script, which determines the current month and uses an external script ('speak-english.ps1') to perform text-to-speech output. Dependencies include the availability of 'Get-Date', the related 'speak-english.ps1' script in the same directory, and a Windows environment capable of TTS. Key parameters include none; output is spoken month name. The script sets the culture for consistent English month names, handles runtime exceptions, and provides error reporting with exit codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-month.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tGets the current month name\n.DESCRIPTION\n\tThis PowerShell script determines and speaks the current month name by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-month\n\t✅ It's December.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentthread.currentculture=[system.globalization.cultureinfo]\"en-US\"\n\t$MonthName = (Get-Date -UFormat %B)\n\t& \"$PSScriptRoot/speak-english.ps1\" \"It's $MonthName.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters (PowerShell)\nDESCRIPTION: Defines the parameters accepted by the script. The `-text` parameter specifies the Esperanto text to be spoken. Common PowerShell parameters are also supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-esperanto.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-esperanto.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Esperanto text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters for Wake-On-LAN in PowerShell\nDESCRIPTION: Describes the command-line parameters the `wakeup.ps1` script accepts: `MACaddress`, `IPaddress`, and `Port`. It details their types, positions, default values (if any), and whether they are required. This section helps users understand how to invoke the script with arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wakeup.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nwakeup.ps1 [[-MACaddress] <String>] [[-IPaddress] <String>] [[-Port] <Int32>] [<CommonParameters>]\n\n-MACaddress <String>\n    Specifies the host's MAC address (e.g. 11:22:33:44:55:66)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-IPaddress <String>\n    Specifies the host's IP address or subnet address (e.g. 255.255.255.255)\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Port <Int32>\n    Specifies the UDP port (9 by default)\n    \n    Required?                    false\n    Position?                    3\n    Default value                9\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of watch-commits.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to execute the watch-commits.ps1 script from the PowerShell console without any parameters, using default values. When run, it displays the time and details of the latest commit found in the origin remote, updating periodically.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-commits.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./watch-commits.ps1\n\n\n\nTIME   COMMIT\n----   ------\n11:25  Updated general.csv by Markus Fleschutz (HEAD -> main, origin/main, origin/HEAD)\n...\n```\n\n----------------------------------------\n\nTITLE: Validating IPv6 Addresses using PowerShell\nDESCRIPTION: This PowerShell script snippet defines a function that validates IPv6 addresses by constructing a regex pattern that covers standard and mixed IPv6/IPv4 formats. The script supports an optional Address parameter; if not provided, it prompts the user to enter one. It outputs a confirmation message on valid input or a warning on invalid input and exits with appropriate status codes. Dependencies include PowerShell environment and requires no external modules. Inputs: string Address representing the IPv6 to check. Outputs: success message and exit code 0 if valid; warning message and exit code 1 if invalid or on error. The implementation uses non-capturing groups in regex for performance and covers multiple IPv6 patterns comprehensively.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ipv6-address.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks an IPv6 address for validity\n.DESCRIPTION\n\tThis PowerShell script checks the given IPv6 address for validity\n.PARAMETER Address\n\tSpecifies the IPv6 address to check\n.EXAMPLE\n\tPS> ./check-ipv6-address fe80::200:5aee:feaa:20a2\n\t✅ IPv6 fe80::200:5aee:feaa:20a2 is valid\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Address = \"\")\n\nfunction IsIPv6AddressValid { param([string]$IP)\n    $IPv4Regex = '(((25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})\\.){3}(25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))'\n    $G = '[a-f\\d]{1,4}'\n    $Tail = @(\":\",\n    \"(:($G)?|$IPv4Regex)\",\n    \":($IPv4Regex|$G(:$G)?|)\",\n    \"(:$IPv4Regex|:$G(:$IPv4Regex|(:$G){0,2})|:)\",\n    \"((:$G){0,2}(:$IPv4Regex|(:$G){1,2})|:)\",\n    \"((:$G){0,3}(:$IPv4Regex|(:$G){1,2})|:)\",\n    \"((:$G){0,4}(:$IPv4Regex|(:$G){1,2})|:)\")\n    [string] $IPv6RegexString = $G\n    $Tail | foreach { $IPv6RegexString = \"${G}:($IPv6RegexString|$_)\" }\n    $IPv6RegexString = \":(::${G}){0,5}((:${G}){1,2}|:$IPv4Regex)|$IPv6RegexString\"\n    $IPv6RegexString = $IPv6RegexString -replace '\\(' , '(?:' # make all groups non-capturing\n    [regex] $IPv6Regex = $IPv6RegexString\n    if ($IP -imatch \"^$IPv6Regex$\") {\n    \treturn $true\n    } else {\n    \treturn $false\n    }\n}\n\ntry {\n\tif ($Address -eq \"\" ) {\n\t\t$Address = read-host \"Enter IPv6 address to validate\"\n\t}\n\tif (IsIPv6AddressValid $Address) {\n\t\t\"✅  IPv6 $Address is valid\"\n\t\texit 0 # success\n\t} else {\n\t\twrite-warning \"Invalid IPv6 address: $Address\"\n\t\texit 1\n\t}\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Main Script: Convert S.M.A.R.T. JSON to CSV PowerShell\nDESCRIPTION: This PowerShell script converts S.M.A.R.T. data from JSON files into a CSV format. It iterates through JSON files in a specified directory (or the current directory if none is specified), extracts S.M.A.R.T. attributes, and outputs the data as a CSV table to the console. It includes error handling and validation for consistent model family, model name, and serial number across the input files.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/smart-data2csv.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts the S.M.A.R.T. JSON files in a folder to a CSV table for analysis\n.DESCRIPTION\n\tThis PowerShell script converts the S.M.A.R.T. JSON files in the current/given directory\n\tto a CSV table for analysis (use query-smart-data.ps1 to generate those JSON files).\n.PARAMETER Directory\n\tSpecifies the path to the directory\n.EXAMPLE\n\tPS> ./smart-data2csv\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Directory = \"\")\n\nfunction WriteCsvHeader { param([PSCustomObject]$File) \n\tforeach($Entry in $File.ata_smart_attributes.table) {\n\t\t[int]$ID = $Entry.id\n\t\t$Name = $Entry.name\n\t\twrite-host -nonewline \"$Name ($ID);\"\n\t}\n\twrite-host \"\"\n}\n\nfunction WriteCsvDataRow { param([PSCustomObject]$File) \n\tforeach($Entry in $File.ata_smart_attributes.table) {\n\t\t[int]$ID = $Entry.id\n\t\tswitch ($ID) {\n\t\t1 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t4 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t7 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t9 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t12 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t190 { write-host -nonewline \"$($Entry.raw.string);\" }\n\t\t191 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t192 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t193 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t195 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t240 { write-host -nonewline \"$($Entry.raw.string);\" }\n\t\t241 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\t242 { write-host -nonewline \"$($Entry.raw.value);\" }\n\t\tdefault { write-host -nonewline \"$($Entry.value);\" }\n\t\t}\n\t}\n\twrite-host \"\"\n}\n\ntry {\n\tif ($Directory -eq \"\" ) {\n\t\t$Directory = \"$PWD\"\n\t}\n\n\t$Filenames = get-childitem -path \"$Directory/SMART*.json\"\n\t$ModelFamily = $ModelName = $SerialNumber = \"\"\n\n\t[int]$Row = 1\n\tforeach($Filename in $Filenames) {\n\t\t$File = get-content $Filename | ConvertFrom-Json\n\n\t\tif ($File.model_family -ne $ModelFamily) {\n\t\t\tif ($ModelFamily -eq \"\") {\n\t\t\t\t$ModelFamily = $File.model_family\n\t\t\t} else {\n\t\t\t\twrite-error \"Different model families: $ModelFamily vs. $($File.model_family)\"\n\t\t\t\texit 1\n\t\t\t}\n\t\t}\n\t\tif ($File.model_name -ne $ModelName) {\n\t\t\tif ($ModelName -eq \"\") {\n\t\t\t\t$ModelName = $File.model_name\n\t\t\t} else {\n\t\t\t\twrite-error \"Different model names: $ModelName vs. $($File.model_name)\"\n\t\t\t\texit 1\n\t\t\t}\n\t\t}\n\t\tif ($File.serial_number -ne $SerialNumber) {\n\t\t\tif ($SerialNumber -eq \"\") {\n\t\t\t\t$SerialNumber = $File.serial_number\n\t\t\t} else {\n\t\t\t\twrite-error \"Different serial numbbers: $SerialNumber vs. $($File.serial_number)\"\n\t\t\t\texit 1\n\t\t\t}\n\t\t}\n\n\t\tif ($Row -eq 1) {\n\t\t\tWriteCsvHeader $File\n\t\t}\n\t\tWriteCsvDataRow $File\n\t\t$Row++\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of remove-empty-dirs Script - PowerShell\nDESCRIPTION: Demonstrates invoking the script from a PowerShell prompt with a directory path argument, here using C:\\Temp as an example. Serves as basic reference for correct script usage. The command takes a directory path and does not return direct outputs to the command line except status messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-empty-dirs.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./remove-empty-dirs C:\\Temp\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage and Common Parameters Documentation\nDESCRIPTION: This snippet documents the usage of the enable-ipv6.ps1 script with an explanation of supported common parameters such as Verbose, Debug, ErrorAction, and others. It specifies the command-line invocation format and lists parameters that enhance script execution control, including output and error variable handling. This documentation snippet aids users in understanding how to run the script and customize its behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-ipv6.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/enable-ipv6.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters for open-deep-l-translator.ps1 (PowerShell)\nDESCRIPTION: Shows the command-line syntax for the `open-deep-l-translator.ps1` script. It indicates that the script accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, but no script-specific custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-deep-l-translator.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-deep-l-translator.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Directory Removal in PowerShell (remove-dir-tree.ps1)\nDESCRIPTION: Provides the complete source code for the `remove-dir-tree.ps1` script. It defines a parameter `pathToDirTree`, prompts the user for the path if not provided via the parameter, and uses `Remove-Item -Force -Recurse -Confirm:$false` to silently delete the specified directory and all its contents. Basic error handling is included using a try-catch block, which outputs error details and exits with code 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-dir-tree.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Removes a dir tree\n.DESCRIPTION\n        This PowerShell script silently removes a directory tree recursively. Use it with care!\n.PARAMETER pathToDirTree\n        Specifies the file path to the directory tree\n.EXAMPLE\n        PS> ./remove-dir-tree.ps1 C:\\Temp\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pathToDirTree = \"\")\n\ntry {\n\tif ($pathToDirTree -eq \"\" ) { $pathToDirTree = Read-Host \"Enter the path to the directory tree\" }\n\n\tRemove-Item -Force -Recurse -Confirm:$false $pathToDirTree\n\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Example Execution of check-network.ps1 (PowerShell)\nDESCRIPTION: This example shows how to run the check-network.ps1 script from a PowerShell console. It illustrates the typical command-line invocation using a relative path (`./`) and displays a truncated example of the script's output, starting with a network header and the result of the firewall check.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-network.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-network.ps1\n\n\n\n=== N E T W O R K ===\n✅ Firewall enabled\n...\n```\n\n----------------------------------------\n\nTITLE: Installing Spotify with winget in PowerShell\nDESCRIPTION: This PowerShell script installs Spotify from the Microsoft Store using the winget command-line tool. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction. The script attempts to run winget with accepted package and source agreements, checks the exit code to detect failure, and provides user-friendly messages for success or errors. It requires winget to be installed and accessible in the system's PATH. The script outputs installation progress and error details, including the script line number and error message, if the installation fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-spotify.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Spotify\n.DESCRIPTION\n\tThis PowerShell script installs Spotify from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-spotify.ps1\n.LINK\n\thttps://github.com/fleschutz/talk2windows\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Spotify, please wait...\"\n\n\t& winget install \"Spotify - Music and Podcasts\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Spotify installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Example\nDESCRIPTION: Demonstrates how to use the `convert-dir2zip.ps1` script to compress the `C:\\Windows` directory into a ZIP file named `Win.zip`. This showcases the script's basic usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-dir2zip.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./convert-dir2zip.ps1 C:\\Windows Win.zip\n✅ Converted into compressed Win.zip in 291s.\n```\n\n----------------------------------------\n\nTITLE: Implementing Computer Suspension (PowerShell)\nDESCRIPTION: This PowerShell script suspends the local computer by invoking the `SetSuspendState` function within `powrprof.dll` using `rundll32.exe`. The parameters `0,1,0` specify not to hibernate (`bHibernate=0`), to force the suspension (`bForce=1`), and to disable wakeup events (`bWakeupEventsDisabled=0`). The script includes basic error handling using a try-catch block and exits with status 0 on success or 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/suspend.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSuspends the computer\n.DESCRIPTION\n\tThis PowerShell script suspends the local computer immediately.\n.EXAMPLE\n\tPS> ./suspend\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Bye bye.\"\n\t& rundll32.exe powrprof.dll,SetSuspendState 0,1,0 # bHibernate,bForce,bWakeupEventsDisabled\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Check Sunset Time and TTS - PowerShell\nDESCRIPTION: This PowerShell script retrieves the time of sunset and uses text-to-speech to announce it.  It uses common parameters for verbosity, debugging, and error handling. The script utilizes the system's text-to-speech capabilities to provide an auditory output of the sunset time. The script has common parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-sunset.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-sunset.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: BucketSort Algorithm Implementation in PowerShell\nDESCRIPTION: Complete implementation of the measure-BucketSort.ps1 script that defines a BucketSort class with a static Sort method, generates random integers, measures sort performance, and outputs the results. The script accepts an optional parameter to specify the number of integers to sort.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-BucketSort.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tMeasures the speed of BucketSort \n.DESCRIPTION\n\tThis PowerShell script measures the speed of the BucketSort algorithm.\n\tBucketSort is a sorting algorithm that works by distributing the elements\n\tof an array into a number of buckets. Each bucket is then sorted individually,\n\teither using a different sorting algorithm, or by recursively applying the bucket\n\tsorting algorithm. It is a distribution sort, a generalization of pigeonhole sort\n\tthat allows multiple keys per bucket, and is a cousin of radix sort in the\n\tmost-to-least significant digit flavor. Bucket sort can be implemented with comparisons\n\tand therefore can also be considered a comparison sort algorithm. The computational\n\tcomplexity depends on the algorithm used to sort each bucket, the number of buckets\n\tto use, and whether the input is uniformly distributed.\n.PARAMETER numIntegers\n\tSpecifies the number of integers to sort\n.EXAMPLE\n\tPS> ./measure-BucketSort.ps1\n\t🧭 0.065 sec to sort 1000 integers by BucketSort \n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass BucketSort {\n    static Sort($targetList) {\n\n        $max = $targetList[0]\n        $min = $targetList[0]\n\n        for ($i = 1; $i -lt $targetList.Count; $i++) {\n            if ($targetList[$i] -gt $max) { $max = $targetList[$i] }\n            if ($targetList[$i] -lt $min) { $min = $targetList[$i]}\n        }\n\n        $holder = New-Object object[][] ($max - $min + 1)\n\n        for ($i = 0; $i -lt $holder.Count; $i++) {\n            $holder[$i] = @()\n        }\n\n        for ($i = 0; $i -lt $targetList.Count; $i++) {\n            $holder[$targetList[$i] - $min]+=$targetList[$i]\n        }\n\n        $k = 0\n\n        for ($i = 0; $i -lt $holder.Count; $i++) {\n            if ($holder[$i].Count -gt 0) {\n                for ($j = 0; $j -lt $holder[$i].Count; $j++) {\n                    $targetList[$k] = $holder[$i][$j]\n                    $k++\n                }\n            }\n        }\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[BucketSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by BucketSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Software Status Checking Script Implementation in PowerShell\nDESCRIPTION: Complete implementation of the check-software.ps1 script that gathers and displays comprehensive software information. It calls several other scripts to check OS details, uptime, installed applications, PowerShell version, time zone, and swap space.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-software.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the software\n.DESCRIPTION\n\tThis PowerShell script queries the software status of the local computer and prints it.\n.EXAMPLE\n\tPS> ./check-software.ps1\n\n\t   === S O F T W A R E ===\n\t✅ Windows 10 Pro 64-Bit (v10.0.19045, since 5/2/2021)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nWrite-Host \"`n   === S O F T W A R E ===\" -foregroundColor green\n& \"$PSScriptRoot/check-os.ps1\"\n& \"$PSScriptRoot/check-uptime.ps1\"\n& \"$PSScriptRoot/check-apps.ps1\"\n& \"$PSScriptRoot/check-powershell.ps1\"\n& \"$PSScriptRoot/check-time-zone.ps1\"\n& \"$PSScriptRoot/check-swap-space.ps1\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Queen Movement Validation in PowerShell\nDESCRIPTION: This snippet validates a Queen's move. The Queen can move any number of squares horizontally, vertically, or diagonally. It checks for valid diagonal moves and validates that the path is clear. The snippet uses `$MoveX`, `$MoveY`, `$board`, `$CurrentColumn`, `$CurrentRow`, `$Empty`, `$DesiredColumn`, `$DesiredRow`, `$Write-Error`, and `Publish-Board`. It calls `Publish-Board` to refresh the game board if the move is invalid.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n            'Queen' {\n                if ([math]::abs($MoveX) -eq [math]::abs($MoveY)) {\n                    if ($MoveX -gt 0) {\n                        if ($MoveY -gt 0) {\n                            for ($i = 1; $i -lt $MoveX; $i++) {\n                                if ($board[($CurrentColumn + $i) , ($CurrentRow + $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Queen Move\"\n                                    Publish-Board\n                                    break\n                                }\n                            }\n                        } else {\n                            for ($i = 1; $i -lt $MoveX; $i++) {\n                                if ($board[($CurrentColumn + $i) , ($CurrentRow - $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Queen Move\"\n                                    Publish-Board\n                                    break\n                                }\n                            }\n                        }\n                    } else {\n                        if ($MoveY -gt 0) {\n                            for ($i = 1; $i -lt $MoveY; $i++) {\n                                if ($board[($CurrentColumn - $i), ($CurrentRow + $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Queen Move\"\n                                    Publish-Board\n                                    break\n                                }\n                            }\n                        } else {\n                            for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n                                if ($board[($CurrentColumn - $i), ($CurrentRow - $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Queen Move\"\n                                    Publish-Board\n                                    break\n                                }\n                            }\n                        }\n                    }\n                } elseif (([math]::abs($MoveX) -gt 0) -and ([math]::abs($MoveY) -eq 0)) {\n                    if ($MoveX -gt 0) {\n                        for ($i = 1; $i -lt $MoveX; $i++) {\n                            if ($board[($CurrentColumn + $i), $CurrentRow] -ne $Empty) {\n                                Write-Error \"Illegal Queen Move\"\n                                Publish-Board\n                                break\n                            }\n                        }\n                    } else {\n                        for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n                            if ($board[($CurrentColumn - $i), $CurrentRow] -ne $Empty) {\n                                Write-Error \"Illegal Queen Move\"\n                                Publish-Board\n                                break\n                            }\n                        }\n                    }\n                } elseif (([math]::abs($MoveY) -gt 0) -and ([math]::abs($MoveX) -eq 0)) {\n                    if ($MoveY -gt 0) {\n                        for ($i = 1; $i -lt $MoveY; $i++) {\n                            if ($board[$CurrentColumn, ($CurrentRow + $i)] -ne $Empty) {\n                                Write-Error \"Illegal Queen Move\"\n                                Publish-Board\n                                break\n                            }\n                        }\n                    } else {\n                        for ($i = 1; $i -lt [math]::abs($MoveY); $i++) {\n                            if ($board[$CurrentColumn, ($CurrentRow - $i)] -ne $Empty) {\n                                Write-Error \"Illegal Queen Move\"\n                                Publish-Board\n                                break\n                            }\n                        }\n                    }\n                } else {\n                    Write-Error \"Illegal Queen Move\"\n                }\n                $moveSuccess = $true\n                if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                    $attack = $true\n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Invoking open-recovery-settings.ps1 Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the open-recovery-settings.ps1 script from the PowerShell command line to launch the Windows recovery settings. The script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, and others for enhanced control and debugging. No additional dependencies are required beyond standard Windows PowerShell, and the expected output is the opening of the Windows recovery settings window; no script output is directly returned.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-recovery-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-recovery-settings\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell CountingSort Implementation\nDESCRIPTION: A PowerShell script that implements the CountingSort algorithm, generates a random list of integers, and measures the sorting performance. The script uses a CountingSort class with a static Sort method that performs the actual sorting operation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-CountingSort.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Measures the speed of CountingSort\n.DESCRIPTION\n        This PowerShell script measures the speed of the CountingSort algorithm.\n        CountingSort is an algorithm for sorting a collection of objects according to keys\n\tthat are small positive integers; that is, it is an integer sorting algorithm. It\n\toperates by counting the number of objects that possess distinct key values, and\n\tapplying prefix sum on those counts to determine the positions of each key value in\n\tthe output sequence. Its running time is linear in the number of items and the difference\n\tbetween the maximum key value and the minimum key value, so it is only suitable for direct\n\tuse in situations where the variation in keys is not significantly greater than the number\n\tof items. It is often used as a subroutine in radix sort, another sorting algorithm, which\n\tcan handle larger keys more efficiently.\n.PARAMETER numIntegers\n        Specifies the number of integers to sort\n.EXAMPLE\n        PS> ./measure-CountingSort.ps1\n        🧭 0.045 sec to sort 1000 integers by CountingSort \n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass CountingSort {\n    static Sort($targetList) {\n        $min = 0\n        $max = 0\n\n        for ($counter = 0; $counter -lt $targetList.Count; $counter++) {\n            if ($targetList[$counter] -lt $min) { $min = $targetList[$counter] }\n            if ($targetList[$counter] -gt $max) { $max = $targetList[$counter] }\n        }\n\n        $arrayBucket = New-Object int[] ($max - $min + 1)\n\n        for ($counter = 0; $counter -lt $targetList.Count; $counter++) {\n            $arrayBucket[$targetList[$counter]]++;\n        }\n\n        $lastPosition = 0\n        for ($counter = 0; $counter -lt $arrayBucket.Count ; $counter++) {\n            for ($innerCounter = 0; $innerCounter -lt $arrayBucket[$counter]; $innerCounter++) {\n                $targetList[$lastPosition++] = $counter\n            }\n        }\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[CountingSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by CountingSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Opening Dropbox Folder in PowerShell\nDESCRIPTION: Complete source code for opening a user's Dropbox folder. The script resolves the Dropbox folder path, launches File Explorer for each matching folder, and provides error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-dropbox-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Dropbox folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the user's Dropbox folder.\n.EXAMPLE\n\tPS> ./open-dropbox-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDirs = resolve-path \"$HOME/Dropbox*\"\n\tforeach($TargetDir in $TargetDirs) {\n\t\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\t\texit 0 # success\n\t}\n\tthrow \"No Dropbox folder at 📂$HOME/Dropbox\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Example Output of watch-ping PowerShell Script\nDESCRIPTION: This snippet shows an example of the console output produced by running the `watch-ping.ps1` script. It illustrates the format of the continuous ping results, including the ping number, a graphical horizontal bar representing the roundtrip time, and the latency in milliseconds.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-ping.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./watch-ping.ps1\n\n\n\nPING ROUNDTRIP TIMES TO: windows.com\n#1 ██████████████ 136ms\n#2 ████████████████ 154ms\n#3 █████████████████████████ 234ms\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Weather Report Script Implementation\nDESCRIPTION: Contains the main script logic that retrieves weather data from an online API for a specified location, parses JSON data, extracts relevant weather details (temperature, humidity, wind, etc.), and invokes an external speech script to vocalize the report. Implements error handling to manage request failures or data issues.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-weather.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the weather \n.DESCRIPTION\n\tThis PowerShell script checks the current weather report.\n.PARAMETER location\n\tSpecifies the location to use (determined automatically per default)\n.EXAMPLE\n\tPS> ./check-weather.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$location = \"\") # empty means determine automatically\n\ntry {\n\t$Weather = (Invoke-WebRequest http://wttr.in/${location}?format=j1 -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\n\t$Temp = $Weather.current_condition.temp_C\n\t$Precip = $Weather.current_condition.precipMM\n\t$Humidity = $Weather.current_condition.humidity\n\t$Pressure = $Weather.current_condition.pressure\n\t$WindSpeed = $Weather.current_condition.windspeedKmph\n\t$WindDir = $Weather.current_condition.winddir16Point\n\t$UV = $Weather.current_condition.uvIndex\n\t$Visib = $Weather.current_condition.visibility\n\t$Clouds = $Weather.current_condition.cloudcover\n\t$Desc = $Weather.current_condition.weatherDesc.value\n\t$Area = $Weather.nearest_area.areaName.value\n\t$Region = $Weather.nearest_area.region.value\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"$($Temp)°C, $($Precip)mm rain, $($Humidity)% humidity, $($WindSpeed)km/h wind from $WindDir with $($Clouds)% clouds and $($Visib)km visibility at $Area ($Region).\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Converting Markdown Files to PDFs using Pandoc\nDESCRIPTION: This script searches recursively for Markdown files (*.md) in the current directory and its subdirectories, then converts each to a PDF using Pandoc. It constructs output PDF filenames based on the directory and base filename, ensuring each Markdown file is processed individually. Dependencies include PowerShell and Pandoc installation, with the script parameterizing input files and output locations dynamically.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-md2pdf.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ngci -r -i *.md |foreach{$pdf=$_.directoryname+\"\\\"+$_.basename+\".pdf\";pandoc -f markdown -s --citeproc $_.name -o $pdf}\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example PowerShell\nDESCRIPTION: Shows a basic command-line example of how to run the new-email.ps1 script. This example executes the script without specifying the optional -EmailAddress parameter, causing it to use the default recipient address.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-email.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./new-email.ps1\n```\n\n----------------------------------------\n\nTITLE: Listing Entries from CSV and Displaying in PowerShell\nDESCRIPTION: This PowerShell snippet lists all entries from a CSV file, 'Remember.csv', located in the user's home folder. It first checks if the file exists. If the file exists, it imports the CSV data, displays the entries with formatted timestamps and text. It handles errors and provides a progress indicator during the import process. It exits with code 0 on success and 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-memos.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists your remembered entries\n.DESCRIPTION\n\tThis PowerShell script lists all entries in 'Remember.csv' in your home folder.\n.EXAMPLE\n\tPS> ./list-memos.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = \"~/Remember.csv\"\n\tif (-not(Test-Path \"$path\" -pathType leaf)) {\n\t\t\"Nothing to remember.\"\n\t\texit 1\n\t}\n\n\tWrite-Progress \"Reading $path ...\"\n\t$table = Import-CSV \"$path\"\n\tWrite-Progress -completed \"Done.\"\n\n\tforeach($row in $table) {\n  \t\t$unixTimestamp = [int64]$row.TIMESTAMP\n                $time = (Get-Date -day 1 -month 1 -year 1970 -hour 0 -minute 0 -second 0).AddSeconds($unixTimestamp)\n\t\t$text = $row.TEXT.trim()\n\t\t\"⚠️ NOTE: $text (remembered $time)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of list-drives.ps1 PowerShell Script\nDESCRIPTION: The full implementation of the list-drives.ps1 script that lists all local drives. It uses Get-PSDrive to retrieve file system providers and formats the output as a table with calculated space usage in GB.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-drives.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all drives\n.DESCRIPTION\n\tThis PowerShell script lists all local drives as a table.\n.EXAMPLE\n\tPS> ./list-drives.ps1\n\n\tName Root Used (GB) Free (GB)\n\t---- ---- --------- ---------\n\tC    C:\\     6648,1     744,2\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-PSDrive -PSProvider FileSystem | format-table -property Name,Root,@{n=\"Used (GB)\";e={[math]::Round($_.Used/1GB,1)}},@{n=\"Free (GB)\";e={[math]::Round($_.Free/1GB,1)}}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Search in Git Repo with PowerShell\nDESCRIPTION: The complete PowerShell script source code for search-repo.ps1. It includes synopsis, parameter definitions using a param block, error handling with try-catch, and the core logic using 'git grep' to search for a text pattern within a Git repository. It checks for Git availability and repository path validity before executing the search, prompting for input if the text pattern is missing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-repo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSearches for text in a repo\n.DESCRIPTION\n\tThis PowerShell script searches for the given text pattern in a Git repository.\n.PARAMETER textPattern\n\tSpecifies the text pattern to search for\n.PARAMETER path\n\tSpecifies the file path to the local Git repository \n.EXAMPLE\n\tPS> ./search-repo.ps1 UFO\n\tlist-calendar.ps1:            Write-Host (\" \" * 4 * [int](Get-Date $day -uformat %u)) -NoNewLine\n\tlist-calendar.ps1:            $dayOffset = [int](Get-Date -day 1 -month ($month + $i) -year $year -uformat %u)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$textPattern = \"\", [string]$path = \"$PWD\")\n\n\ntry {\n\tif ($textPattern -eq \"\" ) { $textPattern = Read-Host \"Enter the text pattern, e.g. 'UFO'\" }\n\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Can't access Git repository at: $path\" }\n\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t& git -C \"$path\" grep $textPattern\n\tif ($lastExitCode -ne \"0\") { throw \"'git grep' failed with exit code $lastExitCode\" }\n\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Usage Example for measure-SelectionSort.ps1 (PowerShell)\nDESCRIPTION: This section outlines the command-line parameters accepted by the `measure-SelectionSort.ps1` script and provides an example of its execution. The `-numIntegers` parameter specifies the number of integers to sort (default 1000), and standard CommonParameters are supported. The example demonstrates running the script with default settings and the resulting output format.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-SelectionSort.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/measure-SelectionSort.ps1 [[-numIntegers] <Int32>] [<CommonParameters>]\n\n-numIntegers <Int32>\n    Specifies the number of integers to sort\n    \n    Required?                    false\n    Position?                    1\n    Default value                1000\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./measure-SelectionSort.ps1\n🧭 0.335 sec to sort 1000 integers by SelectionSort\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of play-files.ps1\nDESCRIPTION: Complete script implementation that plays audio files matching a specified pattern. The script supports MP3 and WAV formats, tracks playing time, and provides status updates.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-files.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays audio files\n.DESCRIPTION\n\tThis PowerShell script plays the given audio files (supporting .MP3 and .WAV format).\n.PARAMETER filePattern\n\tSpecifies the file pattern ('*' by default)\n.EXAMPLE\n\tPS> ./play-files.ps1 *.mp3\n\t   ▶️ Playing '01 Sandy beaches - strong waves.mp3' (02:54) ...\n\t   ...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$filePattern = \"*\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$files = (Get-ChildItem -path \"$filePattern\" -attributes !Directory)\n\t[int]$count = 0\n\tforeach ($file in $files) {\n\t\tif (\"$file\" -like \"*.mp3\") {\n\t\t\t& \"$PSScriptRoot/play-mp3.ps1\" \"$file\"\n\t\t\t$count++\n\t\t} elseif (\"$File\" -like \"*.wav\") {\n\t\t\t& \"$PSScriptRoot/play-mp3.ps1\" \"$file\"\n\t\t\t$count++\n\t\t} else {\n\t\t\t\"Skipping $file (no audio file)...\"\n\t\t}\n\t}\n        [int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Played $count audio files for $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google Chrome - PowerShell\nDESCRIPTION: This PowerShell script installs the latest version of the Google Chrome web browser. It leverages common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allowing users to control script execution and error handling. No specific dependencies are listed, but PowerShell execution environment is required. The script is executed by running the PowerShell script file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-google-chrome.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/install-google-chrome.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-google-chrome\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters and Usage (PowerShell)\nDESCRIPTION: This snippet shows the command-line syntax for `show-blender-manual.ps1`, indicating it supports standard PowerShell common parameters. It lists the specific common parameters that can be used with the script. No custom parameters are defined for this script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-blender-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-blender-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing list-bios.ps1 to Display BIOS Info in PowerShell\nDESCRIPTION: This example demonstrates how to run the 'list-bios.ps1' script from the PowerShell console. It shows sample output, including properties like SMBIOSBIOSVersion and Manufacturer retrieved from the system's BIOS.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-bios.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-bios.ps1\n\n\n\nSMBIOSBIOSVersion : F6\nManufacturer      : American Megatrends Inc.\n...\n```\n\n----------------------------------------\n\nTITLE: Initialization and Configuration of COM Speech Voice Object\nDESCRIPTION: Creates a new COM object for speech synthesis ('SAPI.SPVoice') and stores default volume and rate settings. It sequentially updates speech rate and volume parameters, invoking the 'Speak' function to demonstrate different speaking speeds and volumes, enabling easy testing of speech output settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-test.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Voice = New-Object -ComObject SAPI.SPVoice\n$DefaultVolume = $Voice.volume\n$DefaultRate = $Voice.rate\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Wake-on-LAN Script with Comment-Based Help\nDESCRIPTION: This PowerShell script sends a magic UDP packet to wake a computer via Wake-on-LAN technology. It defines parameters for MAC address, IP address, UDP port, and number of packet transmissions, with embedded help comments and error handling for robustness. The script relies on .NET classes for UDP communication and performs input validation and retries.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wake-up.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWakes up a computer using Wake-on-LAN\n.DESCRIPTION\n\tThis PowerShell script sends a magic UDP packet to a computer to wake him up (requires the target computer to have Wake-on-LAN activated).\n.PARAMETER macAddr\n\tSpecifies the host's MAC address (e.g. 11:22:33:44:55:66)\n.PARAMETER ipAddr\n\tSpecifies the host's IP address or subnet address (e.g. 192.168.0.255)\n.PARAMETER udpPort\n\tSpecifies the UDP port (9 by default)\n.PARAMETER numTimes\n\tSpecifies # of times to send the packet (3 by default)\n.EXAMPLE\n\tPS> ./wake-up.ps1 11:22:33:44:55:66 192.168.100.100\n\t✔️ Magic packet sent 3x to IP 192.168.100.100, UDP port 9 - wait a minute until the computer fully boots up.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$macAddr = \"\", [string]$ipAddr = \"\", [int]$udpPort = 9, [int]$numTimes = 3)\n\nfunction Send-WOL { param([string]$macAddr, [string]$ipAddr, [int]$udpPort) \n\t$broadcastAddr = [Net.IPAddress]::Parse($ipAddr) \n  \n\t$macAddr = (($macAddr.replace(\":\",\"\"))).replace(\"-\",\"\">).replace(\".\",\"\") \n\t$target = 0,2,4,6,8,10 | % {[convert]::ToByte($macAddr.substring($_,2),16)} \n\t$packet = (,[byte]255 * 6) + ($target * 16) \n  \n\t$UDPclient = New-Object System.Net.Sockets.UdpClient \n\t$UDPclient.Connect($broadcastAddr, $udpPort) \n\t[void]$UDPclient.Send($packet, 102)  \n} \n\ntry {\n\tif ($macAddr -eq \"\" ) { $macAddr = Read-Host \"Enter the host's MAC address, e.g. 11:22:33:44:55:66\" }\n\tif ($ipAddr -eq \"\" ) { $ipAddr = Read-Host \"Enter the host's IP or subnet address, e.g. 192.168.0.255\" }\n\n\tfor ($i = 0; $i -lt $numTimes; $i++) {\n\t\tSend-WOL $macAddr.Trim() $ipAddr.Trim() $udpPort\n\t\tStart-Sleep -milliseconds 100\t\n\t}\n\t\"✔️ Magic packet sent $($numTimes)x to IP $ipAddr, UDP port $udpPort - wait a minute until the computer fully boots up.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Default Email Client with PowerShell\nDESCRIPTION: This script opens the default email client configured on the system by using the 'mailto:' protocol handler. It includes error handling to capture and display any issues that occur during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-email-client.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tStarts the default email client\n.DESCRIPTION\n\tThis PowerShell script launches the default email client.\n.EXAMPLE\n\tPS> ./open-email-client\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tstart-process \"mailto:markus@fleschutz.de\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Animated Centered Text with PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script ('write-animated.ps1') writes a text line to the console, centered and animated character by character, with a configurable speed. It defines two parameters: 'text' (defaults to 'Welcome to PowerShell') and 'speed' (defaults to 10 milliseconds per character). Dependencies include PowerShell's standard modules (no external dependencies). Users can pass custom strings and speeds via command-line or keep defaults. Output is console text, animated for visual effect, with basic error handling to manage unexpected exceptions. Limitations: assumes a console width of 120 characters; actual centering may misalign on terminals with different widths.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-animated.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites animated text\n.DESCRIPTION\n\tThis PowerShell script writes text centered and animated to the console.\n.PARAMETER text\n\tSpecifies the text line to write (\"Welcome to PowerShell\" by default)\n.PARAMETER speed\n\tSpecifies the animation speed per character (10ms by default)\n.EXAMPLE\n\tPS> ./write-animated.ps1\n\t(watch and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"Welcome to PowerShell\", [int]$speed = 10) # 10ms\n\nfunction WriteLine([string]$line) {\n\t[int]$end = $line.Length\n\t$startPos = $HOST.UI.RawUI.CursorPosition\n\t$spaces = \"                                                                     \"\n\t[int]$termHalfWidth = 120 / 2\n\tforeach($pos in 1 .. $end) {\n\t\t$HOST.UI.RawUI.CursorPosition = $startPos\n\t\tWrite-Host \"$($spaces.Substring(0, $termHalfWidth - $pos / 2) + $line.Substring(0, $pos))\" -noNewline\n\t\tStart-Sleep -milliseconds $speed\n\t}\n\tWrite-Host \"\"\n}\n\ntry {\n\tWriteLine $text \n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing ROT13 Encoding/Decoding Script in PowerShell\nDESCRIPTION: Provides the full source code for the write-rot13.ps1 script. It defines an optional string parameter 'text'. If 'text' is empty, it prompts the user for input. It includes a function `ROT13` that iterates through the input string's characters, applying the ROT13 substitution cipher to alphabetic characters only. The script then calls this function, outputs the result, and includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-rot13.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text encoded or decoded with ROT13\n.DESCRIPTION\n\tThis PowerShell script writes text encoded or decoded with ROT13.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-rot13 \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\nfunction ROT13 { param([string]$text)\n\t$text.ToCharArray() | ForEach-Object {\n\t\tif ((([int] $_ -ge 97) -and ([int] $_ -le 109)) -or (([int] $_ -ge 65) -and ([int] $_ -le 77))) {\n\t\t\t$Result += [char] ([int] $_ + 13);\n\t\t} elseif ((([int] $_ -ge 110) -and ([int] $_ -le 122)) -or (([int] $_ -ge 78) -and ([int] $_ -le 90))) {\n\t\t\t$Result += [char] ([int] $_ - 13);\n\t\t} else {\n\t\t\t$Result += $_\n\t\t}        \n\t}\n\treturn $Result\n}\n\ntry {\n\tif ($text -eq \"\" ) { $text = read-host \"Enter text to write\" }\n\n\t$Result = ROT13 $text\n\twrite-output $Result\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SCSI Devices with PowerShell\nDESCRIPTION: This PowerShell script retrieves a list of SCSI devices connected to the local computer and displays their friendly name, status, and instance ID. It uses `Get-PnpDevice` to fetch device information, filters for devices with a class name matching 'SCSI*', sorts the results by the friendly name, and then formats the output into a table. It also includes error handling using a `try-catch` block to catch any potential errors during execution, printing an error message to the console and exiting with a non-zero code if one occurs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-scsi-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists SCSI devices\n.DESCRIPTION\n\tThis PowerShell script lists all SCSI devices connected to the local computer.\n.EXAMPLE\n\tPS> ./list-scsi-devices.ps1\n\n\tFriendlyName                 Status  InstanceId\n\t------------                 ------  ----------\n\tMicrosoft-Controller         OK      ROOT\\SPACEPORT\\0000\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-PnpDevice | Where-Object {$_.Class -like \"SCSI*\"} | Sort-Object -property FriendlyName | Format-Table -property FriendlyName,Status,InstanceId\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of Google Suggestions Query Script in PowerShell\nDESCRIPTION: The complete implementation of the list-suggestions.ps1 script. It takes a text input, constructs a URI to query Google's suggestion service, parses the JSON response, and outputs the suggestion list. Includes error handling and documentation comments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-suggestions.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists suggestions\n.DESCRIPTION\n\tThis PowerShell script lists \"Did you mean?\" suggestions from Google.\n.EXAMPLE\n\tPS> ./list-suggestions.ps1 Joe\n\tjoe biden\n\tjoe cocker\n\t...\n.PARAMETER text\n\tSpecifies the word or sentence to get suggestions for.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif (\"$text\" -eq \"\") { $text = read-host \"Enter a word or sentence to get suggestions for\" }\n\t$URI = [uri]::escapeuristring(\"suggestqueries.google.com/complete/search?client=firefox&q=$text\")\n\t$Content = (Invoke-WebRequest -URI $URI -useBasicParsing).Content \n\t($Content | ConvertFrom-Json).SyncRoot | Select-Object -Skip 1\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Git Extensions via PowerShell Script\nDESCRIPTION: This PowerShell script automates the installation of Git Extensions using Winget, a Windows package manager. It supports common PowerShell parameters, handles errors gracefully, and provides status messages to inform the user of progress and success or failure outcomes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-git-extensions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Git Extensions\n.DESCRIPTION\n\tThis PowerShell script installs Git Extensions.\n.EXAMPLE\n\tPS> ./install-git-extensions.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Git Extensions, please wait...\"\n\n\t& winget install --id GitExtensionsTeam.GitExtensions --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Git Extensions installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: Defines the command-line interface for the list-sql-tables.ps1 script. It specifies mandatory parameters: -server, -database, -username, and -password, along with their positions and types. It also indicates support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-sql-tables.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-sql-tables.ps1 [-server] <Object> [-database] <Object> [-username] <Object> [-password] <Object> [<CommonParameters>]\n\n-server <Object>\n    \n    Required?                    true\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-database <Object>\n    \n    Required?                    true\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-username <Object>\n    \n    Required?                    true\n    Position?                    3\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-password <Object>\n    \n    Required?                    true\n    Position?                    4\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Power Plan in PowerShell\nDESCRIPTION: This script creates a new power plan by duplicating the currently active power plan, renaming it to \"My Custom Plan\", and setting it as the active plan. It uses powercfg commands to manage power settings and outputs the GUIDs at each step of the process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-power-plan.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n# Step 1: Get the Active Power Plan GUID\n$activeGuid = powercfg /getactivescheme | Select-String -Pattern \"GUID\" | ForEach-Object { $_.ToString().Split(' ')[3] }\nWrite-Output \"Active Power Plan GUID: $activeGuid\"\n\n# Step 2: Duplicate the Active Power Plan and capture the new GUID\n$newGuid = powercfg -duplicatescheme $activeGuid | ForEach-Object { $_.ToString().Split(' ')[3] }\nWrite-Output \"New Power Plan GUID: $newGuid\"\n\n# Step 3: Rename the New Power Plan\n$customName = \"My Custom Plan\"\npowercfg -changename $newGuid $customName\n\n# Step 4: Set the New Power Plan as Active\npowercfg -setactive $newGuid\n\n# Output the new power plan GUID\nWrite-Output \"New power plan created with GUID: $newGuid and set as active.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing File Hash Calculation (PowerShell)\nDESCRIPTION: This PowerShell script block defines the core functionality of `get-sha256.ps1`. It accepts an optional `-path` parameter, prompts the user if the path is not provided, validates the file's existence, calculates its SHA256 hash using `Get-FileHash`, prints the hash, and includes error handling for invalid paths or other issues.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/get-sha256.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the SHA256 hash of a file\n.DESCRIPTION\n\tThis PowerShell script calculates and prints the SHA256 checksum of the given file.\n.PARAMETER path\n\tSpecifies the local file path to the file\n.EXAMPLE\n\tPS> ./get-sha256.ps1 C:\\MyFile.txt\n\t✅ SHA256 hash is CEB4AD71524996EB8AA3ADCE04F1E45636A4B58B8BF4462E6971CF2E56B4293E\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\")\n\ntry {\n\tif ($path -eq \"\" ) { $path = Read-Host \"Enter the file path\" }\n\tif (-not(Test-Path $path -pathType leaf)) { throw \"Invalid file path given: $path\" }\n\n\t$result = Get-FileHash -path $path -algorithm SHA256\n\n\t\"✅ SHA256 hash is $($result.Hash)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Command-Line Parameters in PowerShell\nDESCRIPTION: This code block documents the accepted command-line parameters for the write-clock.ps1 script, specifically referencing PowerShell's CommonParameters. Users can invoke the script with standard flags such as Verbose, Debug, ErrorAction, and others to customize execution and error handling. The snippet does not require external dependencies and does not perform actual logic; it serves as documentation for supported parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-clock.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/write-clock.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Downloading PowerShell Release Package - PowerShell\nDESCRIPTION: This snippet fetches the latest PowerShell release metadata from GitHub and determines the correct package filename based on the OS environment and processor architecture. It constructs the download URL and downloads the installer package to a temporary directory. On Windows PowerShell (Desktop edition), it suppresses progress bars to speed up the download process. The main dependencies include Invoke-RestMethod for metadata retrieval and Invoke-WebRequest for downloading. Inputs are environment variables indicating OS type, architecture, and user preferences like preview releases. The output is the package file saved locally for installation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nWrite-Host \"⏳ (1/4) Querying infos from https://raw.githubusercontent.com ...\"\n$metadata = Invoke-RestMethod https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/metadata.json\nif ($Preview) {\n    $release = $metadata.PreviewReleaseTag -replace '^v'\n} else {\n    $release = $metadata.ReleaseTag -replace '^v'\n}\n\nif ($IsWinEnv) {\n    if ($UseMSI) {\n        if ($architecture -eq \"arm64\") {\n            $packageName = \"PowerShell-${release}-win-${architecture}.msix\"\n        } else {\n            $packageName = \"PowerShell-${release}-win-${architecture}.msi\"\n        }\n    } else {\n        $packageName = \"PowerShell-${release}-win-${architecture}.zip\"\n    }\n} elseif ($IsLinuxEnv) {\n    $packageName = \"powershell-${release}-linux-${architecture}.tar.gz\"\n} elseif ($IsMacOSEnv) {\n    $packageName = \"powershell-${release}-osx-${architecture}.tar.gz\"\n}\nWrite-Host \"         Latest release is $release for $architecture, package name is: $packageName\"\n\n$downloadURL = \"https://github.com/PowerShell/PowerShell/releases/download/v${release}/${packageName}\"\nWrite-Host \"⏳ (2/4) Loading $downloadURL\"\n\n$packagePath = Join-Path -Path $tempDir -ChildPath $packageName\nif (!$PSVersionTable.ContainsKey('PSEdition') -or $PSVersionTable.PSEdition -eq \"Desktop\") {\n    # On Windows PowerShell, progress can make the download significantly slower\n    $oldProgressPreference = $ProgressPreference\n    $ProgressPreference = \"SilentlyContinue\"\n}\n\ntry {\n    Invoke-WebRequest -Uri $downloadURL -OutFile $packagePath\n} finally {\n    if (!$PSVersionTable.ContainsKey('PSEdition') -or $PSVersionTable.PSEdition -eq \"Desktop\") {\n        $ProgressPreference = $oldProgressPreference\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Chrome Browser - PowerShell\nDESCRIPTION: This PowerShell script launches the Google Chrome web browser. It accepts an optional URL parameter. The script utilizes common PowerShell parameters for verbosity and debugging. The default URL is \"http://www.fleschutz.de\" if no URL is provided. No specific dependencies are listed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-chrome-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-chrome-browser.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies an optional URL\n    \n    Required?                    false\n    Position?                    1\n    Default value                http://www.fleschutz.de\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing FRITZ!Box Phone Calls via PowerShell Script\nDESCRIPTION: This PowerShell script connects to a FRITZ!Box device, prompts for or accepts provided credentials, and retrieves a list of recent phone calls via the device's TR-064 API over HTTP(S). It sets up the required security protocols, parses device service descriptions, and uses custom functions (such as Execute-SOAPRequest and New-Request) to build and send SOAP requests. Dependencies include PowerShell version 3 or higher, network connectivity to the FRITZ!Box, and appropriate device credentials. Inputs include optional Username and Password parameters; outputs are phone call records displayed as a formatted table. The script is limited to environments where the TR-064 interface is enabled and accessible.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-fritzbox-calls.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the phone calls of the FRITZ!Box device\n.DESCRIPTION\n\tThis PowerShell script lists the phone calls of the FRITZ!Box device.\n.PARAMETER Username\n\tSpecifies the user name for FRITZ!Box\n.PARAMETER Password\n\tSpecifies the password to FRITZ!Box\n.EXAMPLE\n\tPS> ./list-fritzbox-calls.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -Version 3\n\nparam([string]$Username = \"\", [string]$Password = \"\")\n\nif ($Username -eq \"\") { $Username = read-host \"Enter username for FRITZ!Box\" }\nif ($Password -eq \"\") { $Password = read-host \"Enter password for FRITZ!Box\" }\n\nwrite-progress \"Contacting FRITZ!Box ...\"\n$FQDN = \"fritz.box\"\n\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12'\n\n[xml]$serviceinfo = Invoke-RestMethod -Method GET -Uri \"http://$($FQDN):49000/tr64desc.xml\"\n[System.Xml.XmlNamespaceManager]$ns = new-Object System.Xml.XmlNamespaceManager $serviceinfo.NameTable\n$ns.AddNamespace(\"ns\",$serviceinfo.DocumentElement.NamespaceURI)\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\n\n\nfunction Execute-SOAPRequest { param([Xml]$SOAPRequest, [string]$soapactionheader, [String]$URL)\n    try {\n        $wr = [System.Net.WebRequest]::Create($URL)\n        $wr.Headers.Add('SOAPAction',$soapactionheader)\n        $wr.ContentType = 'text/xml; charset=\"utf-8\"'\n        $wr.Accept      = 'text/xml'\n        $wr.Method      = 'POST'\n        $wr.PreAuthenticate = $true\n        $wr.Credentials = [System.Net.NetworkCredential]::new($Username,$Password)\n\n        $requestStream = $wr.GetRequestStream()\n        $SOAPRequest.Save($requestStream)\n        $requestStream.Close()\n        [System.Net.HttpWebResponse]$wresp = $wr.GetResponse()\n        $responseStream = $wresp.GetResponseStream()\n        $responseXML = [Xml]([System.IO.StreamReader]($responseStream)).ReadToEnd()\n        $responseStream.Close()\n        return $responseXML\n    } catch {\n        if ($_.Exception.InnerException.Response){\n            throw ([System.IO.StreamReader]($_.Exception.InnerException.Response.GetResponseStream())).ReadToEnd()\n        } else {\n            throw $_.Exception.InnerException\n        }\n    }\n}\n\nfunction New-Request {\n    param(\n        [parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$urn,\n        [parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$action,\n        [hashtable]$parameter = @{},\n        $Protocol = 'https'\n    )\n        # SOAP Request Body Template\n        [xml]$request = @\"\n<?xml version=\"1.0\"?>\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n    <s:Body>\n    </s:Body>\n</s:Envelope>\n\"@\n    $service = $serviceinfo.SelectNodes('//ns:service',$ns) | ?{$_.ServiceType -eq $URN}\n    if(!$service){throw \"URN does not exist.\"}\n    $actiontag = $request.CreateElement('u',$action,$service.serviceType)\n    $parameter.GetEnumerator() | %{\n          $el = $request.CreateElement($_.Key)\n          $el.InnerText = $_.Value\n          $actiontag.AppendChild($el)| out-null\n    }\n    $request.GetElementsByTagName('s:Body')[0].AppendChild($actiontag) | out-null\n    $resp = Execute-SOAPRequest $request \"$($service.serviceType)#$($action)\" \"$($Protocol)://$($FQDN):$(@{$true=$script:secport;$false=49000}[($Protocol -eq 'https')])$($service.controlURL)\"\n    return $resp\n}\n\n$script:secport = (New-Request -urn \"urn:dslforum-org:service:DeviceInfo:1\" -action 'GetSecurityPort' -proto 'http').Envelope.Body.GetSecurityPortResponse.NewSecurityPort\n\nfunction GetCallList { param([int]$MaxEntries = 999, [int]$MaxDays = 999\n    )\n    $resp = New-Request -urn 'urn:dslforum-org:service:X_AVM-DE_OnTel:1' -action 'GetCallList'\n    $list = [xml](new-object System.Net.WebClient).DownloadString(\"$($resp.Envelope.Body.GetCallListResponse.NewCallListURL)&max=$MaxEntries&MaxDays=$days\")\n    return $list.root.call\n}\n\nGetCallList | format-table -property Date,Duration,Caller,Called\necho $Result\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Script Parameters Example (PowerShell)\nDESCRIPTION: Demonstrates how to execute the `uninstall-firefox.ps1` script, optionally including common PowerShell parameters like Verbose, Debug, ErrorAction, etc. These parameters allow for more control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-firefox.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-firefox.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Complete write-vertical.ps1 PowerShell Script Implementation\nDESCRIPTION: The full implementation of the script that writes text vertically. It accepts a text parameter, converts the string to a character array, and outputs each character on a separate line. If no text is provided, it prompts the user for input.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-vertical.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text in vertical direction\n.DESCRIPTION\n\tThis PowerShell script writes text in vertical direction.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-vertical \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\" ) { $text = read-host \"Enter the text to write\" }\n\n\t[char[]]$TextArray = $text\n\tforeach($Char in $TextArray) {\n\t\twrite-output $Char\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Source Code for list-clipboard.ps1 Script\nDESCRIPTION: The complete PowerShell source code for the list-clipboard.ps1 script. It includes comment-based help (Synopsis, Description, Example, Link, Notes) and the core logic. The script uses a try-catch block for error handling: the 'try' block retrieves the clipboard content using Get-Clipboard, stores it in the $text variable, and outputs it formatted with emojis. The 'catch' block reports any errors encountered during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-clipboard.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the contents of the clipboard\n.DESCRIPTION\n\tThis PowerShell script lists the contents of the clipboard.\n.EXAMPLE\n\tPS> ./list-clipboard.ps1\n\t📋 test\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[string]$text = (Get-Clipboard)\n\tWrite-Output \"📋 `“ $text `„\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: List Anagrams Script Implementation\nDESCRIPTION: This PowerShell script lists all anagrams of a given word. The script defines parameters for specifying the word and the number of columns in the output. It uses a recursive function `GetPermutations` to generate all possible permutations of the word and then formats them into the specified number of columns. The script handles empty input by prompting the user for a word and column number.  A `try-catch` block is used for error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-anagrams.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all anagrams of the given word\n.DESCRIPTION\n\tThis PowerShell script lists all anagrams of the given word.\n.PARAMETER Word\n\tSpecifies the word to use\n.PARAMETER Columns\n\tSpecifies the number of columns\n.EXAMPLE\n\tPS> ./list-anagrams Baby\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Word = \"\", [int]$Columns = 8)\n\nfunction GetPermutations {\n    [cmdletbinding()]\n    Param(\n        [parameter(ValueFromPipeline=$True)]\n        [string]$String = 'the'\n    )\n    Begin {\n        Function NewAnagram { Param([int]$NewSize)              \n            if ($NewSize -eq 1) {\n                return\n            }\n            for ($i=0;$i -lt $NewSize; $i++) { \n                NewAnagram  -NewSize ($NewSize - 1)\n                if ($NewSize -eq 2) {\n                    New-Object PSObject -Property @{\n                        Permutation = $stringBuilder.ToString()                  \n                    }\n                }\n                MoveLeft -NewSize $NewSize\n            }\n        }\n        Function MoveLeft { Param([int]$NewSize)        \n            $z = 0\n            $position = ($Size - $NewSize)\n            [char]$temp = $stringBuilder[$position]           \n            for ($z=($position+1);$z -lt $Size; $z++) {\n                $stringBuilder[($z-1)] = $stringBuilder[$z]               \n            }\n            $stringBuilder[($z-1)] = $temp\n        }\n    }\n    Process {\n        $size = $String.length\n        $stringBuilder = New-Object System.Text.StringBuilder -ArgumentList $String\n        NewAnagram -NewSize $Size\n    }\n    End {}\n}\n\ntry {\n\tif ($Word -eq \"\" ) {\n\t\t$Word = read-host \"Enter word\"\n\t\t$Columns = read-host \"Enter number of columns\"\n\t}\n\tGetPermutations -String $Word | Format-Wide -Column $Columns\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete cd-pics.ps1 PowerShell Script Implementation\nDESCRIPTION: The full implementation of the cd-pics.ps1 script that changes the working directory to the user's pictures folder. It includes platform detection for Linux/Windows, error handling, and documentation in PowerShell comment-based help format.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-pics.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's pictures folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's pictures folder.\n.EXAMPLE\n\tPS> ./cd-pics\n\t📂C:\\Users\\Markus\\Pictures\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Pictures\"\n\t} else {\n\t\t$path = [Environment]::GetFolderPath('MyPictures')\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Pictures folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage and Output - PowerShell\nDESCRIPTION: Illustrates how to execute the PowerShell script without any arguments. It shows the expected output messages indicating the start of the uninstallation process and the final confirmation message including the time taken.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-vlc.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-vlc.ps1\n⏳ Uninstalling VLC media player...\n✔️ Removal of VLC media player took 7 sec\n\n```\n\n----------------------------------------\n\nTITLE: Getting Motherboard Details in PowerShell\nDESCRIPTION: Retrieves and displays motherboard details using WMI on Windows. It attempts to get the product and manufacturer from the Win32_BaseBoard class. The script includes basic error handling and exits with a status code indicating success or failure. Note: It has an empty block for Linux ($IsLinux), implying it only functions on Windows as written.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-motherboard.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists motherboard details\n.DESCRIPTION\n\tThis PowerShell script lists the motherboard details.\n.EXAMPLE\n\tPS> ./check-motherboard.ps1\n\t✅ Motherboard Calla_LC by LN\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t} else {\n\t\t$details = Get-WmiObject -Class Win32_BaseBoard\n\t\t\"✅ Motherboard $($details.Product) by $($details.Manufacturer)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Files in a Directory Tree in PowerShell\nDESCRIPTION: This full PowerShell script enables users to recursively enumerate all files within a specified directory tree. It accepts an optional DirTree parameter and, if not provided, prompts the user. The script leverages Get-ChildItem with the -recurse flag and selects only the FullName property of each found item. Error handling is implemented to gracefully report issues and exit codes. No external dependencies are needed beyond PowerShell itself. Inputs are the directory path; output is a list of file paths or an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-files.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all files in a directory tree\n.DESCRIPTION\n\tThis PowerShell script lists all files within the given directory tree.\n.PARAMETER DirTree\n\tSpecifies the path to the directory tree\n.EXAMPLE\n\tPS> ./list-files.ps1 C:\\\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$DirTree = \"\")\n\ntry {\n\tif ($DirTree -eq \"\" ) { $DirTree = read-host \"Enter path to directory tree\" }\n\n\tGet-ChildItem -path $DirTree -recurse | select FullName\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing list-empty-dirs.ps1 with a Path (PowerShell)\nDESCRIPTION: This example demonstrates how to execute the `list-empty-dirs.ps1` script from a PowerShell console, providing a specific path (`C:\\Windows`) as an argument. It shows the typical output format upon successful completion, including the count of empty directories found and the elapsed time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-empty-dirs.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-empty-dirs.ps1 C:\\Windows\n...\n✅ Found 39972 empty directories within 📂C:\\Windows in 222 sec\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing Installed Modules\nDESCRIPTION: This script uses the Get-Module cmdlet to fetch all installed PowerShell modules and displays their Name, Version, ModuleType, and ExportedCommands in a formatted table. It includes error handling to catch and report script errors, and supports common parameters for enhanced control. Dependencies include PowerShell environment with available modules, and it outputs a table with module details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-modules.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists PowerShell modules\n.DESCRIPTION\n\tThis PowerShell script lists the installed PowerShell modules.\n.EXAMPLE\n\tPS> ./list-modules.ps1\n\n\tName                             Version  ModuleType  ExportedCommands\n\t----                             -------  ----------  ----------------\n\tMicrosoft.PowerShell.Management  3.1.0.0  Manifest    {Add-Computer, Add-Content, Checkpoint-Computer...}\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Module | Format-Table -property Name,Version,ModuleType,ExportedCommands\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking System Battery Status in PowerShell\nDESCRIPTION: This core script logic queries the system battery status on Windows using the `System.Windows.Forms.SystemInformation.PowerStatus` object. It calculates battery percentage and remaining time, then generates a status message based on whether the system is on AC power or battery, and the charge level/remaining time. Includes basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-battery.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the battery\n.DESCRIPTION\n\tThis PowerShell script queries the status of the system battery and prints it.\n.EXAMPLE\n\tPS> ./check-battery.ps1\n\t⚠️ Battery 9% low, 54 min remaining\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$Reply = \"✅ AC powered\" # TODO, just guessing :-)\n\t} else {\n\t\tAdd-Type -Assembly System.Windows.Forms\n\t\t$Details = [System.Windows.Forms.SystemInformation]::PowerStatus\n\t\t[int]$Percent = 100 * $Details.BatteryLifePercent\n\t\t[int]$Remaining = $Details.BatteryLifeRemaining / 60\n\t\tif ($Details.PowerLineStatus -eq \"Online\") {\n\t\t\tif ($Details.BatteryChargeStatus -eq \"NoSystemBattery\") {\n\t\t\t\t$Reply = \"✅ AC powered\"\n\t\t\t} elseif ($Percent -ge 95) {\n\t\t\t\t$Reply = \"✅ Battery fully charged ($Percent%)\"\n\t\t\t} else {\n\t\t\t\t$Reply = \"✅ Battery charging... ($Percent%)\"\n\t\t\t}\n\t\t} else { # must be offline\n\t\t\tif ($Remaining -eq 0) {\n\t\t\t\t$Reply = \"✅ Battery at $Percent%, calculating remaining time...\"\n\t\t\t} elseif ($Remaining -le 5) {\n\t\t\t\t$Reply = \"⚠️ Battery at $Percent%, ONLY $Remaining MIN remaining\"\n\t\t\t} elseif ($Remaining -le 30) {\n\t\t\t\t$Reply = \"⚠️ Battery at $Percent%, only $Remaining min remaining\"\n\t\t\t} elseif ($Percent -lt 10) {\n\t\t\t\t$Reply = \"⚠️ Battery $Percent% low, $Remaining min remaining\"\n\t\t\t} elseif ($Percent -ge 80) {\n\t\t\t\t$Reply = \"✅ Battery $Percent% full, $Remaining min remaining\"\n\t\t\t} else {\n\t\t\t\t$Reply = \"✅ Battery at $Percent%, $Remaining min remaining\"\n\t\t\t}\n\t\t}\n\t}\n\tWrite-Output $Reply\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing signal-cli using PowerShell\nDESCRIPTION: This is the main PowerShell script (`install-signal-cli.ps1`) that automates the installation of `signal-cli`. It prompts for a version if not provided, checks for the `wget` dependency, downloads the specified version's release tarball from GitHub using `wget`, extracts it to `/opt` using `sudo tar`, creates a symbolic link in `/usr/local/bin` using `sudo ln`, removes the downloaded archive, and reports success or failure. Basic error handling is included via a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-signal-cli.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls signal-cli \n.DESCRIPTION\n\tThis PowerShell script installs signal-cli from github.com/AsamK/signal-cli.\n\tSee the Web page for the correct version number.\n.PARAMETER Version\n\tSpecifies the version to install\n.EXAMPLE\n\tPS> ./install-signal-cli 0.11.12\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Version = \"\")\n\ntry {\n\tif ($Version -eq \"\") { $Version = read-host \"Enter version to install (see https://github.com/AsamK/signal-cli)\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tset-location /tmp\n\n\t& wget --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'wget' - make sure wget is installed and available\" }\n\n\t& wget \"https://github.com/AsamK/signal-cli/releases/download/v$Version/signal-cli-$($Version).tar.gz\"\n\tif ($lastExitCode -ne \"0\") { throw \"'wget' failed\" }\n\n\tsudo tar xf \"signal-cli-$Version.tar.gz\" -C /opt\n\tif ($lastExitCode -ne \"0\") { throw \"'sudo tar xf' failed\" }\n\n\tsudo ln -sf \"/opt/signal-cli-$Version/bin/signal-cli\" /usr/local/bin/\n\tif ($lastExitCode -ne \"0\") { throw \"'sudo ln -sf' failed\" }\n\n\trm \"signal-cli-$Version.tar.gz\"\n\tif ($lastExitCode -ne \"0\") { throw \"'rm' failed\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ installed signal-cli $Version to /opt and /usr/local/bin in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Common PowerShell Parameters\nDESCRIPTION: This snippet documents the standard PowerShell common parameters that are supported by the script. These parameters control various aspects of script execution, including output verbosity, debugging, error handling, and buffering. They are a standard feature of many PowerShell scripts and cmdlets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-scripts.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Listing Weather Report via Public API in PowerShell Script\nDESCRIPTION: This PowerShell script fetches and displays the weather report for a user-specified or automatically determined geographic location by sending a web request to the wttr.in API. It accepts an optional 'GeoLocation' string parameter to specify the location, supports PowerShell's common parameters, and encapsulates web request logic within a try-catch block to handle any errors gracefully. The input can be a city name or left empty for auto-geolocation; successful responses print weather data, while errors output a user-friendly message with the error line and description. Dependencies: Internet access, PowerShell, no third-party modules required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/weather-report.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the local weather report\n.DESCRIPTION\n\tThis PowerShell script lists the local weather report.\n.PARAMETER GeoLocation\n\tSpecifies the geographic location to use (determine automatically by default)\n.EXAMPLE\n\tPS> ./weather-report Paris\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$GeoLocation = \"\") # empty means determine automatically\n\ntry {\n\t(Invoke-WebRequest http://v2d.wttr.in/$GeoLocation -userAgent \"curl\" -useBasicParsing).Content\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Network Neighbors Using PowerShell\nDESCRIPTION: This PowerShell script lists all cached network neighbors of the local computer by querying the ARP cache. It adapts to the operating system by using 'ip neigh' with grep filters on Linux and macOS, and 'Get-NetNeighbor' on Windows to retrieve Neighbors in the Permanent or Reachable states. The script outputs a formatted table presenting the IP address, interface alias, link layer address, and state. It supports common PowerShell parameters including Verbose, Debug, and ErrorAction. Error handling captures and displays the line number and error message on failure. No external dependencies beyond standard PowerShell cmdlets are required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-neighbors.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the (cached) network neighbors\n.DESCRIPTION\n\tThis PowerShell script lists all network neighbors of the local computer (using the ARP cache).\n.EXAMPLE\n\tPS> ./list-network-neighbors.ps1\n\n\tIPAddress                              InterfaceAlias LinkLayerAddress           State\n\t---------                              -------------- ----------------           -----\n\t192.168.178.43                         Ethernet       2C-F0-5D-E7-8E-EE      Reachable\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t& ip neigh | grep REACHABLE\n\t} elseif ($IsMacOS) {\n\t\t& ip neigh | grep REACHABLE\n\t} else {\n\t\tGet-NetNeighbor -includeAllCompartments -state Permanent,Reachable | Format-Table -property @{e='IPAddress';width=38},@{e='InterfaceAlias';width=14},@{e='LinkLayerAddress';width=19},@{e='State';width=12} \n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Supported Common Parameters Declaration in PowerShell Script\nDESCRIPTION: This snippet outlines the supported common PowerShell parameters for the script, including Verbose, Debug, ErrorAction, and others. These parameters control script behavior, such as output verbosity and error handling, providing flexibility for command-line usage. The script employs these PowerShell-level parameters with no external prerequisites.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-skype.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open Windows Speech Settings\nDESCRIPTION: This script launches the Windows speech settings application. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for enhanced script control and debugging. The script is intended for users who want quick access to speech settings and is accompanied by sample usage and licensing info.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-speech-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-speech-settings.ps1 - Opens Windows speech settings\n\nThis script launches the Windows speech settings application.\n\n## Parameters\n```powershell\nopen-speech-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-speech-settings\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-speech-settings.ps1*\n```\n\n----------------------------------------\n\nTITLE: Installing Audacity using Winget (PowerShell)\nDESCRIPTION: This is the main PowerShell script content for installing Audacity. It uses the 'winget install' command with the appropriate ID ('Audacity.Audacity') and automatically accepts package and source agreements. Basic error handling is included within a try/catch block to check the exit code of the winget command and report success or failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-audacity.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Audacity\n.DESCRIPTION\n\tThis PowerShell script installs Audacity.\n.EXAMPLE\n\tPS> ./install-audacity.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Audacity, please wait...\"\n\n\t& winget install --id Audacity.Audacity --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Audacity installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Core Logic for Checking XML Files Recursively\nDESCRIPTION: This is the main script block for `check-xml-files.ps1`. It defines the `-path` parameter, initializes a stopwatch, resolves the input path, scans the directory tree recursively for `.xml` files using `Get-ChildItem` and `Where-Object`, and iterates through each file. For every file, it calls another script (`check-xml-file.ps1`) to perform the actual check and increments counters based on the child script's exit code (`$lastExitCode`). Finally, it reports the summary statistics and exits with status 0 on success or 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-xml-files.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks all XML files in a directory tree\n.DESCRIPTION\n\tThis PowerShell script verifies any XML file (with suffix .xml) in the given directory tree for validity.\n.PARAMETER path\n\tSpecifies the path to the directory tree (current working dir by default)\n.EXAMPLE\n\tPS> ./check-xml-files.ps1 C:\\Windows\n\t...\n\t✅ Checked 3387 XML files (2462 invalid, 925 valid) within 📂C:\\Windows in 116 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning any XML file within $path...\"\n \t[int]$valid = [int]$invalid = 0\n\n\tGet-ChildItem -path \"$path\" -attributes !Directory -recurse -force | Where-Object { $_.Name -like \"*.xml\" } | Foreach-Object {\n\t\t& $PSScriptRoot/check-xml-file.ps1 \"$($_.FullName)\"\n\t\tif ($lastExitCode -eq 0) { $valid++ } else { $invalid++ }\n        }\n\tWrite-Progress -completed \"Done.\"\n\n\t[int]$total = $valid + $invalid\n        [int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n        \"✅ Checked $total XML files ($invalid invalid, $valid valid) within 📂$path in $elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running sync-repo.ps1 to Synchronize a Git Repository in PowerShell\nDESCRIPTION: This snippet demonstrates the execution of sync-repo.ps1 in PowerShell, performing a synchronization (pull and push) of a specified local Git repository. It outputs execution progress for key steps including locating the Git executable, repository validation, pulling updates (with submodules), and pushing local commits. The example shows how users interact with the script and the feedback provided at runtime.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/sync-repo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./sync-repo.ps1 C:\\Repos\\curl\n⏳ (1/4) Searching for Git executable...  git version 2.42.0.windows.1\n⏳ (2/4) Checking local repository...     C:\\Repos\\curl\n⏳ (3/4) Pulling remote updates...        Already up to date.\n⏳ (4/4) Pushing local updates...         Everything up-to-date\n✅ Synced the 📂curl repo in 5s.\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Swedish Text-to-Speech in PowerShell\nDESCRIPTION: This core script block defines the `-text` parameter, prompts for input if the parameter is empty, utilizes the SAPI.SPVoice COM object to access text-to-speech capabilities, searches for and selects a Swedish voice, speaks the provided text, and includes error handling for cases where a Swedish voice is not found. It depends on the SAPI COM object being available on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-swedish.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Swedish\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Swedish text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Swedish text to speak\n.EXAMPLE\n\tPS> ./speak-swedish.ps1 Hallå\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Swedish text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Swedish*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Swedish text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Operating System Status with PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script checks the underlying operating system and prints out details such as OS name, architecture, version/build number, serial number, install date, and product key (for Windows). It uses Get-WmiObject, Get-CimInstance, and registry access for Windows, while on Linux it utilizes $PSVersionTable and .NET APIs. Common PowerShell parameters (e.g., Verbose, Debug, ErrorAction) are supported. Inputs: None besides optional parameters; Output: Console message detailing OS status. Prerequisites: Appropriate permissions to query system information and registry, PowerShell 5.1+ recommended. Limitations: Product key retrieval is Windows-only, output format may vary based on underlying OS.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-os.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the OS status\n.DESCRIPTION\n\tThis PowerShell script queries the operating system status and prints it.\n.EXAMPLE\n\tPS> ./check-os.ps1\n\t✅ Windows 10 Pro 64-bit since 6/22/2021 (v10.0.19045, S/N 00123-45678-15135-AAOEM, P/K AB123-CD456-EF789-GH000-WFR6P)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$Name = $PSVersionTable.OS\n\t\tif ([System.Environment]::Is64BitOperatingSystem) { $Arch = \"64-bit\" } else { $Arch = \"32-bit\" }\n\t\tWrite-Host \"✅ $Name (Linux $Arch)\"\n\t} else {\n\t\t$OS = Get-WmiObject -class Win32_OperatingSystem\n\t\t$Name = $OS.Caption -Replace \"Microsoft Windows\",\"Windows\"\n\t\t$Arch = $OS.OSArchitecture\n\t\t$Version = $OS.Version\n\n\t\t[system.threading.thread]::currentthread.currentculture = [system.globalization.cultureinfo]\"en-US\"\n\t\t$OSDetails = Get-CimInstance Win32_OperatingSystem\n\t\t$BuildNo = $OSDetails.BuildNumber\n\t\t$Serial = $OSDetails.SerialNumber\n\t\t$InstallDate = $OSDetails.InstallDate\n\n\t\t$ProductKey = (Get-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SoftwareProtectionPlatform\" -Name BackupProductKeyDefault).BackupProductKeyDefault\n\t\tWrite-Host \"✅ $Name $Arch since $($InstallDate.ToShortDateString()) (v$Version, S/N $Serial, P/K $ProductKey)\"\n\t} \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Syntax for PowerShell Script open-space-weather.ps1\nDESCRIPTION: This snippet shows the command-line syntax for the `open-space-weather.ps1` script, indicating it accepts standard PowerShell common parameters. These parameters control verbose output, debugging, error handling, and variable assignment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-space-weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-space-weather.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launch Bing Maps Application - PowerShell\nDESCRIPTION: This PowerShell script launches the Bing Maps application using the `start-process` cmdlet. The script starts the Bing Maps app by specifying the URI scheme `bingmaps:`. It includes a `try-catch` block to handle potential errors during the process execution and exits with code 0 for success and 1 for failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bing-maps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Bing Maps app\n.DESCRIPTION\n\tThis PowerShell script launches the Bing Maps application.\n.EXAMPLE\n\tPS> ./open-bing-maps\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tstart-process bingmaps:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Change Directory Logic - PowerShell\nDESCRIPTION: Contains the core implementation of the script. It checks the `$IsLinux` automatic variable to determine the appropriate method for finding the desktop path (`Resolve-Path` for Linux, `[Environment]::GetFolderPath('DesktopDirectory')` for Windows). It then uses `Test-Path` to ensure the directory exists and is a container before changing the location with `Set-Location`. A `try...catch` block handles potential errors during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-desktop.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's desktop folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's desktop folder.\n.EXAMPLE\n\tPS> ./cd-desktop\n\t📂/home/Markus/Desktop\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Desktop\"\n\t} else {\n\t\t$path = [Environment]::GetFolderPath('DesktopDirectory')\n\t}\n\tif (Test-Path \"$path\" -pathType container) {\n\t\tSet-Location \"$path\"\n\t\t\"📂$path\"\n\t\texit 0 # success\n\t}\n\tthrow \"User's desktop folder at 📂$path doesn't exist (yet)\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling IPv6 on All Network Interfaces Using PowerShell\nDESCRIPTION: This PowerShell script enables IPv6 on all network adapters on the local machine by invoking the Enable-NetAdapterBinding cmdlet with the ms_tcpip6 component ID. It supports common PowerShell parameters such as Verbose and Debug for enhanced control and outputs a success message upon completion. The script includes error handling that captures and displays the line number and error message if the enabling command fails, then exits with a failure code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-ipv6.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tEnables IPv6\n.DESCRIPTION\n\tThis PowerShell script enables IPv6 on all network interfaces of the local computer.\n.EXAMPLE\n\tPS> ./enable-ipv6.ps1\n\t✅ IPv6 is enabled now.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tEnable-NetAdapterBinding -Name '*' -ComponentID 'ms_tcpip6'\n\t\"✅ IPv6 is enabled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Navigation (cd ..) in PowerShell\nDESCRIPTION: This script implements the functionality to change the current working directory to the parent directory. It uses `Resolve-Path \"..\"` to get the parent path, `Test-Path` to verify its existence as a container (directory), and `Set-Location` to change the directory. Basic try/catch error handling is included to report issues and exit with an appropriate status code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to one level up\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to one directory level up.\n.EXAMPLE\n\tPS> .\\cd-up\n\t📂C:\\Users\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"..\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Script Parameters for write-credits.ps1\nDESCRIPTION: Shows the command syntax and common parameters supported by the script. The script only supports common PowerShell parameters without any specific parameters of its own.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-credits.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-credits.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: List IP Addresses PowerShell Script\nDESCRIPTION: This PowerShell script lists IP addresses, differentiating between local interface addresses and the public IP address. It uses Get-NetIPAddress to get local interface info and external curl requests to determine public IP and location. The script adjusts its commands for Linux/Windows environments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ip-addresses.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Lists the IP addresses\n.DESCRIPTION\n        This PowerShell script queries all IP address information and prints it.\n.EXAMPLE\n        PS> ./list-ip-addresses.ps1\n\t✅ Public IP 185.72.229.161, 2003:f2:6128:fd01:e543:601:30c2:a028 near Munich, Germany\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction WriteLocalInterface($interface) {\n\t$IPv4 = $IPv6 = $prefixLen = \"\"\n\t$addresses = Get-NetIPAddress\n\tforeach ($addr in $addresses) {\n\t\tif ($addr.InterfaceAlias -like \"$($interface)*\") {\n\t\t\tif ($addr.AddressFamily -eq \"IPv4\") {\n\t\t\t\t$IPv4 = $addr.IPAddress\n\t\t\t\t$prefixLen = $addr.PrefixLength\n\t\t\t} else {\n\t\t\t\t$IPv6 = $addr.IPAddress\n\t\t\t}\n\t\t}\n\t}\n\tif ($IPv4 -ne \"\" -or $IPv6 -ne \"\") {\n\t\tWrite-Host \"✅ Local $interface IP $IPv4/$prefixLen, $IPv6\"\n\t}\n}\t\t\n\ntry {\n\tif (!$IsLinux) {\n\t\tWriteLocalInterface \"Ethernet\"\n\t\tWriteLocalInterface \"WLAN\"\n\t\tWriteLocalInterface \"Bluetooth\"\n \t}\n\tif ($IsLinux) {\n\t\t[string]$publicIPv4 = (curl -4 --silent ifconfig.co)\n\t\t[string]$publicIPv6 = (curl -6 --silent ifconfig.co)\n\t\t[string]$city = (curl --silent ifconfig.co/city)\n\t\t[string]$country = (curl --silent ifconfig.co/country)\n\t} else {\n\t\t[string]$publicIPv4 = (curl.exe -4 --silent ifconfig.co)\n\t\t[string]$publicIPv6 = (curl.exe -6 --silent ifconfig.co)\n\t\t[string]$city = (curl.exe --silent ifconfig.co/city)\n\t\t[string]$country = (curl.exe --silent ifconfig.co/country)\n\t}\n\tif (\"$publicIPv4\" -eq \"\") { $publicIPv4 = \"no IPv4\" }\n\tif (\"$publicIPv6\" -eq \"\") { $publicIPv6 = \"no IPv6\" }\n\tif (\"$city\" -eq \"\")       { $city = \"unknown city\" }\n\tif (\"$country\" -eq \"\")    { $country = \"unknown country\" }\n\tWrite-Host \"✅ Public IP $publicIPv4, $publicIPv6 near $city, $country\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Example of edit.ps1 Script Invocation in PowerShell\nDESCRIPTION: This example demonstrates how to execute the 'edit.ps1' script with a specific file argument ('C:\\MyDiary.txt') in PowerShell. It is provided to show expected user input and clarify command-line syntax. There are no required dependencies beyond having PowerShell and the script file accessible; the argument is an existing file path. The expected result is the launch of an appropriate text editor with the given file if an editor is found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/edit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./edit.ps1 C:\\MyDiary.txt\n\n```\n\n----------------------------------------\n\nTITLE: Displaying MOTD and System Information in PowerShell\nDESCRIPTION: This PowerShell script retrieves and displays various system information elements. It sets the culture to en-US for date formatting. It then retrieves information like current time, timezone, username, computer name, operating system details, kernel information, uptime, PowerShell version and edition, CPU information, number of processes, current CPU load, and disk space. Finally, it formats and presents this information using Write-Host with color-coding.  Dependencies include the Get-TimeZone, Get-WmiObject, Get-Process, Get-WinEvent, Get-Date, Get-PSDrive cmdlets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-motd.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites the message of the day\n.DESCRIPTION\n\tThis PowerShell script writes the message of the day (MOTD).\n.EXAMPLE\n\tPS> ./write-motd\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam ()\n\n# Retrieve information:\n[system.threading.thread]::currentThread.currentCulture = [system.globalization.cultureInfo]\"en-US\"\n$dt = [datetime]::Now\n$day = $dt.ToLongDateString().split(',')[1].trim()\nif ($day.EndsWith('1')) { $day += 'st' } elseif ($day.EndsWith('2')) { $day += 'nd' } elseif ($day.EndsWith('3')) { $day += 'rd' } else { $day += 'th' }\n$CurrentTime = \"$day, $($dt.Year) $($dt.Hour):$($dt.Minute)\"\n$TimeZone = (Get-TimeZone).id\n\n$UserName = [Environment]::USERNAME\n$ComputerName = [System.Net.Dns]::GetHostName().ToLower()\n$OSName = \"$((Get-WmiObject win32_operatingsystem).caption) Build: $([System.Environment]::OSVersion.Version.Build)\"\n$Kernel = \"NT\" # todo\n$Kernel_Info = \"\" # todo\n\n$BootTime = Get-WinEvent -ProviderName eventlog | Where-Object {$_.Id -eq 6005} | Select-Object TimeCreated -First 1\n$TimeSpan = New-TimeSpan -Start $BootTime.TimeCreated.Date -End (Get-Date)\n$Uptime = \"$($TimeSpan.Days) days, $($TimeSpan.Hours) hours, $($TimeSpan.Minutes) minutes\"\n$PowerShellVersion = $PSVersionTable.PSVersion\n$PowerShellEdition = $PSVersionTable.PSEdition\n\n$CPU_Info = $env:PROCESSOR_IDENTIFIER + ' Rev: ' + $env:PROCESSOR_REVISION\n$NumberOfProcesses = (Get-Process).Count\n$CurrentLoad = \"{0}%\" -f $(Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average)\n# $Logical_Disk = Get-CimInstance -ClassName Win32_LogicalDisk | Where-Object -Property DeviceID -eq $OS.SystemDrive\n# $Processor = Get-CimInstance -ClassName Win32_Processor\n# $Memory_Size = \"{0}mb/{1}mb Used\" -f (([math]::round($ReturnedValues.Operating_System.TotalVisibleMemorySize / 1KB)) - ([math]::round($ReturnedValues.Operating_System.FreePhysicalMemory / 1KB))), ([math]::round($ReturnedValues.Operating_System.TotalVisibleMemorySize / 1KB))    \n$DriveDetails = Get-PSDrive C\n$DiskSize = \"{0}GB free of {1}GB\" -f (([math]::round($DriveDetails.Free / 1GB), ([math]::round(($DriveDetails.Used + $DriveDetails.Free) / 1GB))))\n\n# Print results:\n[Environment]::NewLine\nWrite-Host \" ,.=:^!^!t3Z3z., \" -ForegroundColor Red\nWrite-Host \" :tt:::tt333EE3 \" -ForegroundColor Red\nWrite-Host \" Et:::ztt33EEE \" -ForegroundColor Red -NoNewline\nWrite-Host \" @Ee., ..,     \" -ForegroundColor green -NoNewline\nWrite-Host \"      Time: \" -ForegroundColor DarkGray -NoNewline\nWrite-Host \"$CurrentTime\" -ForegroundColor Cyan\nWrite-Host \" ;tt:::tt333EE7\" -ForegroundColor Red -NoNewline\nWrite-Host \" ;EEEEEEttttt33# \" -ForegroundColor Green -NoNewline\nWrite-Host \"    Timezone: \" -ForegroundColor DarkGray -NoNewline\nWrite-Host \"$TimeZone\" -ForegroundColor Cyan\nWrite-Host \" :Et:::zt333EEQ.\" -NoNewline -ForegroundColor Red\nWrite-Host \" SEEEEEttttt33QL \" -NoNewline -ForegroundColor Green\nWrite-Host \"   User: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$UserName\" -ForegroundColor Cyan\nWrite-Host \" it::::tt333EEF\" -NoNewline -ForegroundColor Red\nWrite-Host \" @EEEEEEttttt33F \" -NoNewline -ForegroundColor Green\nWrite-Host \"    Host: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$ComputerName\" -ForegroundColor Cyan\nWrite-Host \" ;3=*^``````'*4EEV\" -NoNewline -ForegroundColor Red\nWrite-Host \" :EEEEEEttttt33@. \" -NoNewline -ForegroundColor Green\nWrite-Host \"   OS: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$OSName\" -ForegroundColor Cyan\nWrite-Host \" ,.=::::it=., \" -NoNewline -ForegroundColor Cyan\nWrite-Host \"``\" -NoNewline -ForegroundColor Red\nWrite-Host \" @EEEEEEtttz33QF \" -NoNewline -ForegroundColor Green\nWrite-Host \"    Kernel: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$Kernel \" -NoNewline -ForegroundColor Cyan\nWrite-Host \"$Kernel_Info\" -ForegroundColor Cyan\nWrite-Host \" ;::::::::zt33) \" -NoNewline -ForegroundColor Cyan\nWrite-Host \" '4EEEtttji3P* \" -NoNewline -ForegroundColor Green\nWrite-Host \"     Uptime: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$Uptime\" -ForegroundColor Cyan\nWrite-Host \" :t::::::::tt33.\" -NoNewline -ForegroundColor Cyan\nWrite-Host \":Z3z.. \" -NoNewline -ForegroundColor Yellow\nWrite-Host \" ````\" -NoNewline -ForegroundColor Green\nWrite-Host \" ,..g. \" -NoNewline -ForegroundColor Yellow\nWrite-Host \"   PowerShell: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$PowerShellVersion $PowerShellEdition\" -ForegroundColor Cyan\nWrite-Host \" i::::::::zt33F\" -NoNewline -ForegroundColor Cyan\nWrite-Host \" AEEEtttt::::ztF \" -NoNewline -ForegroundColor Yellow\nWrite-Host \"    CPU: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$CPU_Info\" -ForegroundColor Cyan\nWrite-Host \" ;:::::::::t33V\" -NoNewline -ForegroundColor Cyan\nWrite-Host \" ;EEEttttt::::t3 \" -NoNewline -ForegroundColor Yellow\nWrite-Host \"    Processes: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$NumberOfProcesses\" -ForegroundColor Cyan\nWrite-Host \" E::::::::zt33L\" -NoNewline -ForegroundColor Cyan\nWrite-Host \" @EEEtttt::::z3F \" -NoNewline -ForegroundColor Yellow\nWrite-Host \"    Current Load: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$CurrentLoad\" -ForegroundColor Cyan\nWrite-Host \" {3=*^``````'*4E3)\" -NoNewline -ForegroundColor Cyan\nWrite-Host \" ;EEEtttt:::::tZ`` \" -NoNewline -ForegroundColor Yellow\nWrite-Host \"   Memory: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$Memory_Size\" -ForegroundColor Cyan\nWrite-Host \"              ``\" -NoNewline -ForegroundColor Cyan\nWrite-Host \" :EEEEtttt::::z7 \" -NoNewline -ForegroundColor Yellow\nWrite-Host \"    System Volume: \" -NoNewline -ForegroundColor DarkGray\nWrite-Host \"$DiskSize\" -ForegroundColor Cyan\nWrite-Host \"                 'VEzjt:;;z>*`` \" -ForegroundColor Yellow\n[Environment]::NewLine\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: List Empty Files in a Directory Tree Using PowerShell\nDESCRIPTION: This PowerShell script scans a directory tree and lists all empty files. It takes an optional `-path` parameter specifying the directory to scan, defaulting to the current working directory. The script uses `Get-ChildItem` to recursively find files with a length of 0 and outputs their full path. A stopwatch tracks execution time, and the script includes error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-empty-files.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all empty files in a directory tree\n.DESCRIPTION\n\tThis PowerShell script scans a directory tree and lists all empty files.\n.PARAMETER path\n\tSpecifies the path to the directory tree (default is current working dir)\n.EXAMPLE\n\tPS> ./list-empty-files.ps1 C:\\Windows\n\t...\n\t✅ Found 6 empty files within C:\\Windows in 54 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning $path for empty files...\"\n\t[int]$count = 0\n\tGet-ChildItem $path -attributes !Directory -recurse | where {$_.Length -eq 0} | Foreach-Object {\n\t\t\"📄$($_.FullName)\"\n\t\t$count++\n\t}\n\tWrite-Progress -completed \" \"\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $count empty files within $path in $elapsed sec\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Core Uninstallation Logic (PowerShell)\nDESCRIPTION: This is the main PowerShell script code for uninstalling Mozilla Firefox. It uses the `winget uninstall` command to remove the application. The script includes a try-catch block for basic error handling, checking the exit code of the `winget` command and reporting errors if the uninstallation fails (e.g., if Firefox is not installed). It provides user feedback during the process and exits with code 0 on success or 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-firefox.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Mozilla Firefox\n.DESCRIPTION\n\tThis PowerShell script uninstalls Mozilla Firefox from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-firefox\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Mozilla Firefox, please wait...\"\n\n\t& winget uninstall \"Mozilla Firefox\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Firefox, is it installed?\" }\n\n\t\"Mozilla Firefox is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking the Remove-Print-Jobs PowerShell Script from the Command Line\nDESCRIPTION: This code provides a minimal example on how to execute the remove-print-jobs script in a PowerShell console. No additional parameters are required; the script will attempt to clear all print jobs across all printers when run. Output and logging can be further controlled with standard PowerShell switches as described above.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-print-jobs.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./remove-print-jobs\n\n```\n\n----------------------------------------\n\nTITLE: Complete speak-finnish.ps1 script implementation\nDESCRIPTION: The full PowerShell script that accepts Finnish text, finds an appropriate Finnish TTS voice using SAPI.SPVoice COM object, and speaks the provided text. Includes error handling for when no Finnish voice is available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-finnish.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Finnish\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Finnish text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Finnish text to speak\n.EXAMPLE\n\tPS> ./speak-finnish.ps1 Hei\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Finnish text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Finnish*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Finnish text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a VM using Move-VM - PowerShell\nDESCRIPTION: This PowerShell script moves a virtual machine named \"windows\" to HOST2. It includes the storage associated with the VM and specifies the destination storage path.  The script's functionality relies on the `Move-VM` cmdlet and requires the Hyper-V role or feature to be installed and enabled on the system.  After moving the VM, the script exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/move-vm.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$VMName = \"windows\"\nMove-VM $VMName HOST2 -IncludeStorage -DestinationStoragePath \"D:\\VirtualMachines\\$VMName\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Running list-anagrams.ps1 with Example\nDESCRIPTION: Provides an example of how to run the list-anagrams.ps1 script. It demonstrates the usage of the script by calling it with the word 'Baby' as input. This shows how to invoke the script from the PowerShell console to generate the anagrams of the given word.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-anagrams.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-anagrams Baby\n```\n\n----------------------------------------\n\nTITLE: Executing the Cow Sound Script in PowerShell\nDESCRIPTION: This snippet shows a command-line example of how to execute the 'play-cow-sound.ps1' script directly from a PowerShell prompt. The script requires no positional arguments. Execution will play a cow sound by utilizing subsequent script logic; ensure permissions to execute scripts are allowed on your system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-cow-sound.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-cow-sound\n\n```\n\n----------------------------------------\n\nTITLE: Complete Twitter Uninstallation Script Implementation in PowerShell\nDESCRIPTION: The full PowerShell script that uninstalls Twitter using winget package manager. It includes error handling, status messages, and uses a try-catch block for robust execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-twitter.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Twitter\n.DESCRIPTION\n\tThis PowerShell script uninstalls Twitter from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-twitter\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Twitter, please wait...\"\n\n\t& winget uninstall \"Twitter\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Twitter, is it installed?\" }\n\n\t\"Twitter is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Common Parameters Definition\nDESCRIPTION: Defines the common parameters supported by the PowerShell script. These include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-mars.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-planet-mars.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Checking Time Until New Year with PowerShell\nDESCRIPTION: This snippet calculates the current date and compares it to December 31 of the current year to find the number of days remaining until New Year. Depending on the number of days left, it invokes an external PowerShell script using text-to-speech (TTS) to announce the countdown message. It uses try-catch for error handling, outputs messages for success or failure, and supports PowerShell common parameters. The snippet requires the external 'speak-english.ps1' script located relative to the main script's directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-new-year.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the time until New Year\n.DESCRIPTION\n\tThis PowerShell script checks the time until New Year and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-new-year\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Now = [DateTime]::Now\n\t$NewYear = [Datetime](\"12/31/\" + $Now.Year)\n\t$Days = ($NewYear – $Now).Days + 1\n\tif ($Days -gt 1) {\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"New Year is in $Days days.\"\n\t} elseif ($Days -eq 1) {\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"New Year is tomorrow.\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Scan-Folder Script (PowerShell)\nDESCRIPTION: Defines the parameter for the PowerShell script. The `-path` parameter specifies the file path to the folder to scan.  It is optional and defaults to the current working directory (`$PWD`). Common parameters are also supported for verbose output and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/scan-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/scan-folder.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the file path to the folder (default is working directory).\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Local Network Shares | PowerShell\nDESCRIPTION: This core script snippet retrieves local network share information using Get-WmiObject win32_share, filters out administrative shares ending in '$', and iterates through the results to display detailed information for each share. It includes a basic try-catch block for error handling during execution. Requires access to WMI.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-shares.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the network shares\n.DESCRIPTION\n\tThis PowerShell script lists all network shares (aka \"shared folders\") of the local computer.\n.EXAMPLE\n\tPS> ./list-network-shares.ps1\n\t✅ Shared folder \\\\LAPTOP\\Public -> D:\\Public (\"Public folder for file transfer\")\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t# TODO\n\t} else {\n\t\t$shares = Get-WmiObject win32_share | where {$_.name -NotLike \"*$\"} \n\t\tforeach ($share in $shares) {\n\t\t\tWrite-Output \"✅ Shared folder \\\\$(hostname)\\\\$(share.Name) -> $(share.Path) (`\"$(share.Description)`\")\"\n\t\t}\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing Installed PowerShell Modules\nDESCRIPTION: This PowerShell script lists installed PowerShell modules by retrieving module data with Get-Module and formatting it into a table. It includes support for common parameters, success and error handling, and documentation comments explaining its purpose, usage, and details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-powershell-modules.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the PowerShell modules\n.DESCRIPTION\n\tThis PowerShell script lists the installed PowerShell modules.\n.EXAMPLE\n\tPS> ./list-powershell-modules.ps1\n\n\tName                             Version  ModuleType  ExportedCommands\n\t----                             -------  ----------  ----------------\n\tMicrosoft.PowerShell.Management  3.1.0.0  Manifest    {Add-Computer, Add-Content, Checkpoint-Computer...}\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Module | Format-Table -property Name,Version,ModuleType,ExportedCommands\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing One Calendar using winget - PowerShell\nDESCRIPTION: This PowerShell script installs the One Calendar application from the Microsoft Store using the winget package manager. It uses the `winget install` command with specific parameters to ensure proper installation and agreement acceptance.  The script includes error handling to catch any issues during the installation and provide informative error messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-one-calendar.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls One Calendar\n.DESCRIPTION\n\tThis PowerShell script installs One Calendar from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-one-calendar.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing One Calendar, please wait...\"\n\n\t& winget install \"One Calendar\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"One Calendar installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Building using Configure and Make (PowerShell)\nDESCRIPTION: This snippet builds a repository using configure and make. It checks for the 'configure' script, executes it, and then runs make.  Requires configure and make to be in PATH.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/configure\" -pathType leaf) { \n\t\t\"⏳ Building 📂$dirName by using 'configure'...\n\t\tSet-Location \"$path/\"\n\n\t\t& ./configure\n\t\t#if ($lastExitCode -ne \"0\") { throw \"Executing './configure' exited with error code $lastExitCode\" }\n\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' has failed\" }\n\n\t\t& make test\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make test' has failed\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Parameters and Usage Patterns for install-powershell.ps1 - PowerShell\nDESCRIPTION: Defines the supported parameters and usage patterns for the install-powershell.ps1 script. Parameters include options to specify destination directory, select daily builds, prevent overwriting, modify environment path, use MSI installer, run quietly, add to Explorer context menu, enable PowerShell Remoting, and install preview versions. Parameters are documented with their default values, required status, position, and other accepted attributes. This lays out all supported command-line configurations for script invocation, enabling users to automate PowerShell installation according to their needs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-powershell.ps1 [-Destination <String>] [-Daily] [-DoNotOverwrite] [-AddToPath] [-Preview] [<CommonParameters>]\n\n/Repos/PowerShell/scripts/install-powershell.ps1 [-UseMSI] [-Quiet] [-AddExplorerContextMenu] [-EnablePSRemoting] [-Preview] [<CommonParameters>]\n\n-Destination <String>\n    The destination path to install PowerShell to.\n    \n    Required?                    false\n    Position?                    named\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Daily [<SwitchParameter>]\n    Install PowerShell from the daily build.\n    Note that the 'PackageManagement' module is required to install a daily package.\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-DoNotOverwrite [<SwitchParameter>]\n    Do not overwrite the destination folder if it already exists.\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-AddToPath [<SwitchParameter>]\n    On Windows, add the absolute destination path to the 'User' scope environment variable 'Path';\n    On Linux, make the symlink '/usr/bin/pwsh' points to \"$Destination/pwsh\";\n    On MacOS, make the symlink '/usr/local/bin/pwsh' points to \"$Destination/pwsh\".\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-UseMSI [<SwitchParameter>]\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Quiet [<SwitchParameter>]\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-AddExplorerContextMenu [<SwitchParameter>]\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-EnablePSRemoting [<SwitchParameter>]\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Preview [<SwitchParameter>]\n    \n    Required?                    false\n    Position?                    named\n    Default value                False\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing Unbound - PowerShell\nDESCRIPTION: This PowerShell script installs Unbound, a validating, recursive, caching DNS resolver. It uses `sudo apt` for package management, `unbound-control` for controlling the service, and `cp` to copy the configuration file. The script also stops and disables `systemd-resolved`. It requires admin rights to execute. It sets up Unbound and its dependencies, and uses the check-dns script for training.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-unbound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Installs Unbound (needs admin rights)\n.DESCRIPTION\n        This PowerShell script installs Unbound, a validating, recursive, caching DNS resolver. It needs admin rights.\n.EXAMPLE\n        PS> ./install-unbound\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ Step 1/10: Updating package infos...\"\n\t& sudo apt update -y\n\tif ($lastExitCode -ne \"0\") { throw \"'sudo apt update' failed\" }\n\n\t\"⏳ Step 2/10: Installing Unbound package...\"\n\t& sudo apt install unbound -y\n\tif ($lastExitCode -ne \"0\") { throw \"'sudo apt install unbound' failed\" }\n\n\t\"⏳ Step 3/10: Setting up Unbound...\"\n\t& sudo unbound-control-setup\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control-setup' failed\" }\n\n\t\"⏳ Step 4/10: Updating DNSSEC Root Trust Anchors...\"\n\t& sudo unbound-anchor\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-anchor' failed\" }\n\n\t\"⏳ Step 5/10: Checking config file...\"\n\t& unbound-checkconf \"$PSScriptRoot/../Data/unbound.conf\"\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-checkconf' failed - check the syntax\" }\n\n\t\"⏳ Step 6/10: Copying config file to /etc/unbound/unbound.conf ...\"\n\t& sudo cp \"$PSScriptRoot/../Data/unbound.conf\" /etc/unbound/unbound.conf\n\tif ($lastExitCode -ne \"0\") { throw \"'cp' failed\" }\n\n\t\"⏳ Step 7/10: Stopping default DNS cache daemon systemd-resolved...\"\n\t& sudo systemctl stop systemd-resolved\n\t& sudo systemctl disable systemd-resolved\n\n\t\"⏳ Step 8/10: (Re-)starting Unbound...\"\n\t& sudo unbound-control stop\n\t& sudo unbound-control start\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control start' failed\" }\n\n\t\"⏳ Step 9/10: Checking Unbound status...\"\n\t& sudo unbound-control status\n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control status' failed\" }\n\n\t\"⏳ Step 10/10: Training Unbound with frequently used domain names...\"\n\t& \"$PSScriptRoot/check-dns.ps1\" \n\tif ($lastExitCode -ne \"0\") { throw \"'unbound-control status' failed\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ installed Unbound in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Script Implementation - Opening File Explorer - PowerShell\nDESCRIPTION: This snippet contains the full source code for the `open-file-explorer.ps1` script. It defines an optional `Path` parameter and uses a `try-catch` block to handle execution errors gracefully. The core logic uses `start-process explorer.exe` to open File Explorer, passing the specified path if provided, or opening it to the default location otherwise, and sets the exit code accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-file-explorer.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the File Explorer\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer.\n.EXAMPLE\n\tPS> ./open-file-explorer\n.PARAMETER Path\n\tSpecifies the path to the folder to display \n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Path = \"\")\n\ntry {\n\tif (\"$Path\" -ne \"\") {\n\t\tstart-process explorer.exe \"$Path\"\n\t} else {\n\t\tstart-process explorer.exe\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Parameters for list-emojis.ps1 PowerShell Script\nDESCRIPTION: This snippet documents the standard PowerShell Common Parameters supported by the `list-emojis.ps1` script. These parameters allow control over verbose output, debugging, error handling, and other standard PowerShell behaviors. The snippet shows the basic script syntax including the placeholder for common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-emojis.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-emojis.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Install Google Chrome Browser\nDESCRIPTION: This code snippet performs the complete operation of downloading and installing Google Chrome silently. It uses try-catch for error handling, measures execution time, and utilizes common PowerShell commands like Invoke-WebRequest and Start-Process. Dependencies include internet connectivity and administrative privileges.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-chrome-browser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls the Chrome browser\n.DESCRIPTION\n\tThis PowerShell script installs the latest Google Chrome Web browser.\n.EXAMPLE\n\tPS> ./install-chrome-browser.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$Path = $env:TEMP;\n\t$Installer = \"chrome_installer.exe\"\n\tInvoke-WebRequest \"http://dl.google.com/chrome/install/latest/chrome_installer.exe\" -OutFile $Path\\$Installer\n\tStart-Process -FilePath $Path\\$Installer -Args \"/silent /install\" -Verb RunAs -Wait\n\tRemove-Item $Path\\$Installer\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ installed Google Chrome in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Speed Test Website (PowerShell)\nDESCRIPTION: The main implementation of the open-speed-test.ps1 script. It uses the call operator (&) to execute another script, open-default-browser.ps1, located in the same directory ($PSScriptRoot), passing the Cloudflare speed test URL (https://speed.cloudflare.com) as an argument. The script then exits with a success code (0). Depends on open-default-browser.ps1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-speed-test.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Cloudflare's Speed Test\n.DESCRIPTION\n\tThis script launches the Web browser with Cloudflare's speed test website.\n.EXAMPLE\n\tPS> ./open-speed-test\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://speed.cloudflare.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Change Directory Three Levels Up - PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to three levels up. It utilizes Resolve-Path to determine the absolute path of the parent directory three times removed.  It also includes error handling to check if the target directory exists. If the directory is found, the script changes the current location using Set-Location. Otherwise, it throws an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up3.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to three directory levels up\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to three directory levels up.\n.EXAMPLE\n\tPS> ./cd-up3\n\t📂C:\\\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"../../..\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Profile Configuration Script\nDESCRIPTION: A complete PowerShell profile script that customizes the console appearance by setting window title, displaying a greeting message, customizing the command prompt, and defining useful command aliases for common tasks.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/my-profile.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# POWERSHELL PROFILE TO DEFINE THE LOOK & FEEL\n\n# WINDOW TITLE\nif ($IsLinux) { $username = $(whoami) } else { $username = $env:USERNAME }\n$host.ui.RawUI.WindowTitle = \"$username @ $(hostname)\"\n\n# GREETING\nWrite-Host \"✨ Welcome $username to $(hostname)'s PowerShell - type 'FAQ' for help.\" -foregroundColor green\n\n# PROMPT\nfunction prompt { Write-Host \"`n➤ \" -noNewline -foregroundColor yellow; return \" \" }\n\n# ALIASES\nSet-Alias -name enter -value enter-host.ps1\nSet-Alias -name FAQ -value write-help.ps1\nSet-Alias -name ll -value Get-ChildItem\t\t# ll = list folder (long format)\nDel alias:ls -force -errorAction SilentlyContinue \nSet-Alias -name ls -value list-folder.ps1\t# ls = list folder (short format)\nDel alias:pwd -force -errorAction SilentlyContinue\nSet-Alias -name pwd -value list-workdir.ps1\t# pwd = print working directory\n```\n\n----------------------------------------\n\nTITLE: Example of Running list-hidden-files.ps1\nDESCRIPTION: Sample execution of the script showing the output format, including a count of hidden files found and execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-hidden-files.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-hidden-files.ps1 C:\\Windows\n...\n✅ Found 256 hidden files within 📂C:\\Windows in 40 sec\n```\n\n----------------------------------------\n\nTITLE: Removing PowerShell Drives\nDESCRIPTION: This command removes a PowerShell drive (PSDrive). `Remove-PSDrive` deletes the specified PSDrive.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_25\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-PSDrive -Name xyz                                    # Delete a PSDrive\n```\n\n----------------------------------------\n\nTITLE: Install-VSCode.ps1 PowerShell Script for Automated VS Code Setup\nDESCRIPTION: This PowerShell script automates the installation of Visual Studio Code, the PowerShell extension, and optional additional extensions. It accepts parameters for architecture, build edition, extensions list, and post-installation actions such as launching VS Code or enabling context menus. The script ensures a customizable, command-line-driven setup process, suitable for automation or scripting environments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vscode.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n#install-vscode.ps1 - Installs Visual Studio Code, the PowerShell extension, and optionally\n# a list of additional extensions.\n#\n# This script can be used to easily install Visual Studio Code and the\n# PowerShell extension on your machine.  You may also specify additional\n# extensions to be installed using the -AdditionalExtensions parameter.\n# The -LaunchWhenDone parameter will cause VS Code to be launched as\n# soon as installation has completed.\n\n# Please contribute improvements to this script on GitHub!\n#\n# https://github.com/PowerShell/vscode-powershell/blob/master/scripts/Install-VSCode.ps1\n\n# Parameters are detailed below, supporting architecture, build edition, additional extensions,\n# launch options, and other configurations.\n\n<PowerShell script content omitted for brevity, as per instructions> \n```\n\n----------------------------------------\n\nTITLE: Listing Local IP Addresses with PowerShell\nDESCRIPTION: This PowerShell script retrieves and displays local IP addresses (IPv4 and IPv6) for Ethernet, WLAN, and Bluetooth network interfaces. It defines a function 'WriteLocalInterface' that uses 'Get-NetIPAddress' to query address details based on the interface alias and formats the output. The main script block calls this function for different interface types within a try-catch block for error handling and exits if run on a Linux system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-local-ip.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        List local IP addresses\n.DESCRIPTION\n        This PowerShell script queries all local IP address information and prints it.\n.EXAMPLE\n        PS> ./list-local-ip.ps1\n\t✅ Local Ethernet IP 192.168.178.21/24, 2003:f2:670b:e700:31e5:de86:b7cd:4e45\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction WriteLocalInterface($interface) {\n\t$IPv4 = $IPv6 = $prefixLen = \"\"\n\t$addresses = Get-NetIPAddress\n\tforeach ($addr in $addresses) {\n\t\tif ($addr.InterfaceAlias -like \"$($interface)*\") {\n\t\t\tif ($addr.AddressFamily -eq \"IPv4\") {\n\t\t\t\t$IPv4 = $addr.IPAddress\n\t\t\t\t$prefixLen = $addr.PrefixLength\n\t\t\t} else {\n\t\t\t\t$IPv6 = $addr.IPAddress\n\t\t\t}\n\t\t}\n\t}\n\tif ($IPv4 -ne \"\" -or $IPv6 -ne \"\") {\n\t\t\"✅ Local $interface IP $IPv4/$prefixLen, $IPv6\"\n\t}\n}\t\t\n\ntry {\n\tif ($IsLinux) { exit 0 }\n\n\tWriteLocalInterface \"Ethernet\"\n\tWriteLocalInterface \"WLAN\"\n\tWriteLocalInterface \"Bluetooth\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Rook Movement Validation in PowerShell\nDESCRIPTION: This snippet validates the movement of a rook. It checks if the move is horizontal or vertical and if there are any pieces blocking the path. It iterates through the board, verifying if there are empty positions between the current and desired squares.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nif (([math]::abs($MoveX) -gt 0) -and ([math]::abs($MoveY) -gt 0)) {\n    return $status\n} else {\n    if ($MoveX -gt 0) {\n        for ($i = 1; $i -lt $MoveX; $i++) {\n            if ($board[($CurrentColumn + $i), $CurrentRow] -ne $Empty) {\n                return $status\n            }\n        }\n    } elseif ($MoveX -lt 0) {\n        for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n            if ($board[($CurrentColumn - $i), $CurrentRow] -ne $Empty) {\n                return $status\n            }\n        }\n    } elseif ($MoveY -gt 0) {\n        for ($i = 1; $i -lt $MoveY; $i++) {\n            if ($board[$CurrentColumn, ($CurrentRow + $i)] -ne $Empty) {\n                return $status\n            }\n        }\n    } else {\n        for ($i = 1; $i -lt [math]::abs($MoveY); $i++) {\n            if ($board[$CurrentColumn, ($CurrentRow - $i)] -ne $Empty) {\n                return $status\n            }\n        }\n    }\n    $status[0] = $true\n    $pc.firstmove = $false\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $status[1] = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minimize All Windows Script in PowerShell\nDESCRIPTION: This PowerShell script minimizes all open windows. It uses the `Shell.Application` COM object to access the `minimizeall()` method. The script is wrapped in a `try-catch` block to handle potential errors during execution. It takes no specific parameters beyond standard PowerShell common parameters. Upon successful execution, the script exits with code 0; otherwise, it prints an error message and exits with code 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/minimize-all-windows.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tMinimizes all windows\n.DESCRIPTION\n\tThis PowerShell script minimizes all open windows.\n.EXAMPLE\n\tPS> ./minimize-all-windows.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$shell = New-Object -ComObject \"Shell.Application\"\n\t$shell.minimizeall()\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Git Clone Logic in PowerShell\nDESCRIPTION: The complete PowerShell script implementation for clone-shallow.ps1. It defines an optional parameter 'targetDir', defaulting to the current directory. The script attempts to clone a Git repository using 'git clone' with specific options: '--branch $branchName', '--single-branch', '--depth 1', and '--recurse-submodules'. It measures the execution time and includes basic try-catch error handling. Note: The script relies on external variables $branchName and $URL which are used but not explicitly defined as parameters in this version.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clone-shallow.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tClones a shallow Git repo\n.DESCRIPTION\n\tThis PowerShell script clones popular Git repositories into a common target directory.\n.PARAMETER URL\n.PARAMETER branchName\n.PARAMETER targetDir\n\tSpecifies the file path to the target directory (current working directory by default)\n.EXAMPLE\n\tPS> ./clone-shallow C:\\MyRepos\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$targetDir = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t# Note: The following line uses undefined variables $branchName and $URL\n\t# These likely need to be passed as parameters or defined elsewhere.\n\tgit clone --branch $branchName --single-branch --depth 1 --recurse-submodules $URL $targetDir\n\n\t\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Cloned the shallow repository in $elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This code snippet defines the parameters for the PowerShell script, including `-path` and `-term`. The `[Parameter(Mandatory=$true)]` attribute makes these parameters required. These parameters are used to specify the root directory to search and the search term, respectively.  The script supports common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-filename.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nparam(\n[Parameter(Mandatory=$true)]\n$path,\n[Parameter(Mandatory=$true)]\n$term\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for CSV to Text Conversion\nDESCRIPTION: This PowerShell code defines a parameter named 'Path' for the script. The 'Path' parameter is a string that specifies the location of the CSV file to be converted. If no path is provided, the script prompts the user to enter it.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-csv2txt.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n-Path <String>\n    Specifies the path to the .CSV file\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n```\n\n----------------------------------------\n\nTITLE: Opening User's Music Folder in PowerShell\nDESCRIPTION: This script launches File Explorer with the user's music folder. It verifies that the music folder exists, and then calls another script (open-file-explorer.ps1) to open it. Includes error handling for cases where the music folder doesn't exist.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-music-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the music folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's music folder.\n.EXAMPLE\n\tPS> ./open-music-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = resolve-path \"$HOME/Music\"\n\tif (-not(test-path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Music folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Apps with PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script is designed to enumerate all installed applications, including those installed via the Windows Store and snap packages on a Windows system. It supports all common PowerShell parameters such as Verbose, Debug, ErrorAction, and OutVariable, allowing advanced control of execution and output. Inputs are optional as it leverages common parameters, and the output is a list of installed apps. No external dependencies are required, but Windows and PowerShell support are prerequisites. The script has no input parameters beyond common ones and prints results to standard output; it is licensed under CC0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-installed-apps.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nlist-installed-apps.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing Zoom using Winget - PowerShell\nDESCRIPTION: This PowerShell script installs the Zoom application using the winget package manager. It first displays an installation message.  Then, it uses the winget install command with the Zoom.Zoom identifier. The script also includes error handling with a try-catch block to check for potential issues during installation. If the installation fails, an error message including the line number and the error details is displayed.  Finally, the script exits with a success or failure code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-zoom.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Zoom\n.DESCRIPTION\n\tThis PowerShell script installs Zoom.\n.EXAMPLE\n\tPS> ./install-zoom.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Zoom, please wait...\"\n\n\t& winget install --id Zoom.Zoom --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Zoom installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running the fetch-repos.ps1 Script Example in PowerShell\nDESCRIPTION: Shows an example command to execute the `fetch-repos.ps1` script, targeting the `C:\\MyRepos` directory. The output illustrates the script's progress, including checking for Git, identifying subfolders, and fetching updates for each repository.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/fetch-repos.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./fetch-repos.ps1 C:\\MyRepos\n⏳ (1) Searching for Git executable...       git version 2.46.0.windows.1\n⏳ (2) Checking parent folder...             33 subfolders\n⏳ (3/35) Fetching into 📂curl...\n...\n```\n\n----------------------------------------\n\nTITLE: Main Loop for Continuous Code Line Output with Configurable Color and Speed\nDESCRIPTION: Implements an infinite loop that writes a randomly generated PowerShell code line to the console with specified foreground color, then pauses for a defined duration. It uses the 'Write-Host' cmdlet with the selected color and calls 'GetRandomCodeLine' for line content. The loop exits gracefully on success or catches errors, providing error messages with the line number where the exception occurred.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-code.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\twhile ($true) {\n\t\tWrite-Host -foreground $color \"$(GetRandomCodeLine)\"\n\t\tStart-Sleep -milliseconds $speed\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing PowerShell Profile Logic\nDESCRIPTION: This snippet contains the core logic of the script. It retrieves the current user's PowerShell profile path using `$PROFILE.CurrentUserCurrentHost`, creates the target profile file if it doesn't exist using `New-Item -Force`, and copies the file specified by the `$path` parameter (defaulting to `$PSScriptRoot/my-profile.ps1`) to the profile location, forcing overwrite using `Copy-Item -force`. It includes basic error handling using a `try...catch` block and provides user feedback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-powershell-profile.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites the PowerShell profile\n.DESCRIPTION\n\tThis PowerShell script writes the PowerShell profile for the current user.\n.PARAMETER path\n\tSpecifies the path to the new profile ($PSScriptRoot/my-profile.ps1 by default)\n.EXAMPLE\n\tPS> ./write-powershell-profile.ps1\n\t⏳ (1/2) Querying path to profile 'CurrentUserCurrentHost'...\n\t         C:\\Users\\Markus\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n\t⏳ (2/2) Copying file 'my-profile.ps1'...\n\t✔️ New PowerShell profile written - it gets active on next login\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PSScriptRoot/my-profile.ps1\")\n\ntry {\n\t\"⏳ (1/2) Querying path to profile 'CurrentUserCurrentHost'...\"\n\t$pathToProfile = $PROFILE.CurrentUserCurrentHost\n\t\"         $pathToProfile\"\n\n\t$filename = (Get-Item \"$path\").Name\n\t\"⏳ (2/2) Copying file '$filename'...\"\n\t$null = New-Item -Path $pathToProfile -ItemType \"file\" -Force\n\tCopy-Item \"$path\" \"$pathToProfile\" -force\n\n\t\"✔️ New PowerShell profile written - it gets active on next login\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits in JSON Format in PowerShell\nDESCRIPTION: This snippet utilizes `git log` to output commit information in JSON format. It uses a custom format string in the `--pretty=format` option to specify the keys and values for the JSON output. The output provides detailed information about each commit, formatted as JSON.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t} elseif ($format -eq \"JSON\") {\n\t\t& git -C \"$pathToRepo\" log --pretty=format:'{%n  \"commit\": \"%H\",%n  \"abbreviated_commit\": \"%h\",%n  \"tree\": \"%T\",%n  \"abbreviated_tree\": \"%t\",%n  \"parent\": \"%P\",%n  \"abbreviated_parent\": \"%p\",%n  \"refs\": \"%D\",%n  \"encoding\": \"%e\",%n  \"subject\": \"%s\",%n  \"sanitized_subject_line\": \"%f\",%n  \"body\": \"%b\",%n  \"commit_notes\": \"%N\",%n  \"verification_flag\": \"%G?\",%n  \"signer\": \"%GS\",%n  \"signer_key\": \"%GK\",%n  \"author\": {%n    \"name\": \"%aN\",%n    \"email\": \"%aE\",%n    \"date\": \"%aD\"%n  },%n  \"commiter\": {%n    \"name\": \"%cN\",%n    \"email\": \"%cE\",%n    \"date\": \"%cD\"%n  }%n},'\n\n```\n\n----------------------------------------\n\nTITLE: Decrypting Files using AES in PowerShell\nDESCRIPTION: This PowerShell code snippet implements the core logic for decrypting a file using a provided password and the AES algorithm. The DecryptFile function allows customization of algorithm, cipher mode, and padding, and can accept both plain text and secure string keys. Key parameters include FileName for the file path, Algorithm for encryption type, Key or KeyAsPlainText for decryption keys, and a RemoveSource switch to delete the original after decryption. The script reads the file’s IV and encrypted content, performs decryption, writes the output, and handles errors and secure resource cleanup. The implementation requires the .NET Framework for cryptographic APIs and targets PowerShell 5.x+. Inputs are file paths and passwords; outputs are decrypted file objects. Limitations include hardcoded key derivation and potential password security concerns if not handled via SecureString.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/decrypt-file.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDecrypts a file\n.DESCRIPTION\n\tThis PowerShell script decrypts a file using the given password and AES encryption.\n.PARAMETER Path\n\tSpecifies the path to the file to decrypt\n.PARAMETER Password\n\tSpecifies the password \n.EXAMPLE\n\tPS> ./decrypt-file.ps1 C:\\MyFile.txt \"123\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Path = \"\", [string]$Password = \"\")\n\nfunction DecryptFile {\n[CmdletBinding(DefaultParameterSetName='SecureString')]\n[OutputType([System.IO.FileInfo[]])]\nParam(\n    [Parameter(Mandatory=$true, Position=1, ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]\n    [Alias('PSPath','LiteralPath')]\n    [string[]]$FileName,\n    [Parameter(Mandatory=$false, Position=2, ValueFromPipelineByPropertyName=$true)]\n    [ValidateSet('AES','DES','RC2','Rijndael','TripleDES')]\n    [String]$Algorithm = 'AES',\n    [Parameter(Mandatory=$true, Position=3, ValueFromPipelineByPropertyName=$true, ParameterSetName='SecureString')]\n    [System.Security.SecureString]$Key,\n    [Parameter(Mandatory=$true, Position=3, ParameterSetName='PlainText')]\n    [String]$KeyAsPlainText,\n    [Parameter(Mandatory=$false, Position=4, ValueFromPipelineByPropertyName=$true)]\n    [System.Security.Cryptography.CipherMode]$CipherMode = 'CBC',\n    [Parameter(Mandatory=$false, Position=5, ValueFromPipelineByPropertyName=$true)]\n    [System.Security.Cryptography.PaddingMode]$PaddingMode = 'PKCS7',\n    [Parameter(Mandatory=$false, Position=6)]\n    [String]$Suffix,\n    [Parameter()]\n    [Switch]$RemoveSource\n)\n    Process\n    {\n        try\n        {\n            if($PSCmdlet.ParameterSetName -eq 'PlainText')\n            {\n                $Key = $KeyAsPlainText | ConvertTo-SecureString -AsPlainText -Force\n            }\n\n            $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($Key)\n            $EncryptionKey = [System.Convert]::FromBase64String([System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR))\n\n            $Crypto = [System.Security.Cryptography.SymmetricAlgorithm]::Create($Algorithm)\n            $Crypto.Mode = $CipherMode\n            $Crypto.Padding = $PaddingMode\n            $Crypto.KeySize = $EncryptionKey.Length*8\n            $Crypto.Key = $EncryptionKey\n        }\n        Catch\n        {\n            Write-Error $_ -ErrorAction Stop\n        }\n\n        if(-not $PSBoundParameters.ContainsKey('Suffix'))\n        {\n            $Suffix = \".$Algorithm\"\n        }\n\n        $Files = Get-Item -LiteralPath $FileName\n\n        ForEach($File in $Files)\n        {\n            If(-not $File.Name.EndsWith($Suffix))\n            {\n                Write-Error \"$($File.FullName) does not have an extension of '$Suffix'.\"\n                Continue\n            }\n\n            $DestinationFile = $File.FullName -replace \"$Suffix$\"\n\n            Try\n            {\n                $FileStreamReader = New-Object System.IO.FileStream($File.FullName, [System.IO.FileMode]::Open)\n                $FileStreamWriter = New-Object System.IO.FileStream($DestinationFile, [System.IO.FileMode]::Create)\n\n                [Byte[]]$LenIV = New-Object Byte[] 4\n                $FileStreamReader.Seek(0, [System.IO.SeekOrigin]::Begin) | Out-Null\n                $FileStreamReader.Read($LenIV,  0, 3) | Out-Null\n                [Int]$LIV = [System.BitConverter]::ToInt32($LenIV,  0)\n                [Byte[]]$IV = New-Object Byte[] $LIV\n                $FileStreamReader.Seek(4, [System.IO.SeekOrigin]::Begin) | Out-Null\n                $FileStreamReader.Read($IV, 0, $LIV) | Out-Null\n                $Crypto.IV = $IV\n\n                $Transform = $Crypto.CreateDecryptor()\n                $CryptoStream = New-Object System.Security.Cryptography.CryptoStream($FileStreamWriter, $Transform, [System.Security.Cryptography.CryptoStreamMode]::Write)\n                $FileStreamReader.CopyTo($CryptoStream)\n\n                $CryptoStream.FlushFinalBlock()\n                $CryptoStream.Close()\n                $FileStreamReader.Close()\n                $FileStreamWriter.Close()\n\n                if($RemoveSource){Remove-Item $File.FullName}\n\n                Get-Item $DestinationFile | Add-Member –MemberType NoteProperty –Name SourceFile –Value $File.FullName -PassThru\n            }\n            Catch\n            {\n                Write-Error $_\n                If($FileStreamWriter)\n                {\n                    $FileStreamWriter.Close()\n                    Remove-Item -LiteralPath $DestinationFile -Force\n                }\n                Continue\n            }\n            Finally\n            {\n                if($CryptoStream){$CryptoStream.Close()}\n                if($FileStreamReader){$FileStreamReader.Close()}\n                if($FileStreamWriter){$FileStreamWriter.Close()}\n            }\n        }\n    }\n}\n\ntry {\n\tif ($Path -eq \"\" ) { $Path = read-host \"Enter path to file\" }\n\tif ($Password -eq \"\" ) { $Password = read-host \"Enter password\" }\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$PasswordBase64 = [System.Convert]::ToBase64String($Password)\n\tDecryptFile \"$Path\" -Algorithm AES -KeyAsPlainText $PasswordBase64 -RemoveSource\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅  file decrypted in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete write-marquee.ps1 PowerShell Script Implementation\nDESCRIPTION: The full implementation of the write-marquee.ps1 script that displays text as a scrolling marquee in the console. The script defines a StartMarquee function that creates a bordered display and moves the text from right to left at a configurable speed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-marquee.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text as marquee\n.DESCRIPTION\n\tThis PowerShell script writes the given text as marquee.\n.PARAMETER text\n\tSpecifies the text to write\n.PARAMETER speed\n\tSpecifies the marquee speed (60 ms per default)\n.EXAMPLE\n\tPS> ./write-marquee \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Text = \"PowerShell is powerful - fully control your computer! PowerShell is cross-platform - available for Linux, Mac OS and Windows! PowerShell is open-source and free - see the GitHub repository at github.com/PowerShell/PowerShell! PowerShell is easy to learn - see the tutorial for beginners at guru99.com/powershell-tutorial.html! Powershell is fully documented - see the official PowerShell documentation at docs.microsoft.com/en-us/powershell\", [int]$Speed = 60) # 60 ms pause\n\nfunction StartMarquee { param([string]$Line)\n\t\"╔══════════════════════════════════════════════════════════════════════════════════╗\"\n\t\"║                                                                                  ║\"\n\t\"╚══════════════════════════════════════════════════════════════════════════════════╝\"\n\t$LinePos = $HOST.UI.RawUI.CursorPosition\n\t$LinePos.X = 2\n\t$LinePos.Y -= 2\n\tforeach($Pos in 1 .. $($Line.Length - 80)) {\n\t\t$HOST.UI.RawUI.CursorPosition = $LinePos\n\t\tWrite-Host -noNewLine \"$($Line.Substring($Pos,80))\"\n\t\tStart-Sleep -milliseconds $Speed\n\t}\n\t\" \"\n\t\" \"\n\t\" \"\n}\n\nStartMarquee \"                                                                                    +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++ $Text +++                                                                                         \"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Speaking Hebrew Text with TTS - PowerShell\nDESCRIPTION: This PowerShell script uses the SAPI.SPVoice COM object to speak Hebrew text. It accepts a string parameter for the text to be spoken, or prompts the user for input if no parameter is provided. The script iterates through available voices to find a Hebrew TTS voice.  If found, it sets the voice and speaks the input text.  Error handling is implemented to manage cases where a Hebrew voice isn't available. The output is the spoken Hebrew text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-hebrew.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Hebrew\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Hebrew text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Hebrew text to speak\n.EXAMPLE\n\tPS> ./speak-hebrew.ps1 \"שלום\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Hebrew text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Hebrew*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Hebrew text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Voice Recorder Launcher Script Implementation in PowerShell\nDESCRIPTION: Full implementation of the script that launches Windows Voice Recorder application using the Start-Process cmdlet to open the app from its package name.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-voice-recorder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Launches the Voice Recorder app\n.DESCRIPTION\n        This PowerShell script launches the Windows Voice Recorder application.\n.EXAMPLE\n        PS> ./open-voice-recorder.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process explorer.exe shell:appsFolder\\Microsoft.WindowsSoundRecorder_8wekyb3d8bbwe!App\n        exit 0 # success\n} catch {\n        \"⚠️ Error: $($Error[0]) (script line $($_.InvocationInfo.ScriptLineNumber))\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Opening DistroWatch Website using PowerShell Script Parameters\nDESCRIPTION: This snippet shows the parameters accepted by the open-distro-watch-website.ps1 script. It supports common PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-distro-watch-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-distro-watch-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Rufus Using PowerShell\nDESCRIPTION: This PowerShell snippet uninstalls the Rufus application by invoking the winget package manager's uninstall command. It includes error handling that throws an exception if the uninstallation fails, such as when Rufus is not installed. The script supports common PowerShell parameters like Verbose and Debug. Inputs include optional common parameters, and no explicit output is returned aside from console messages indicating success or failure. Dependencies include the winget tool being installed and accessible on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-rufus.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Rufus\n.DESCRIPTION\n\tThis PowerShell script uninstalls Rufus from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-rufus\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Rufus, please wait...\"\n\n\t& winget uninstall \"Rufus\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Rufus, is it installed?\" }\n\n\t\"Rufus is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Installed Applications Status with PowerShell\nDESCRIPTION: This PowerShell script queries installed applications and their status on Windows and Linux. It counts Debian packages and snaps on Linux, and on Windows it retrieves installed apps via Get-AppxPackage, counts non-OK apps, errors via Get-AppxLastError, available upgrades via winget, and crash dumps by scanning a directory. Common PowerShell parameters are supported. The script outputs a formatted status string indicating the system's app health. Error handling captures and outputs errors with line numbers.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-apps.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tQuery the app status\n.DESCRIPTION\n\tThis PowerShell script queries the installed applications and prints it.\n.EXAMPLE\n\tPS> ./check-apps.ps1\n\t⚠️ 150 Win apps installed, 72 upgrades available, 5 crash dump(s) found\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction CountCrashDumps {\n\t[string]$path = Resolve-Path -Path \"~\\AppData\\Local\\CrashDumps\"\n\t$files = (Get-ChildItem -path \"$path\\*.dmp\" -attributes !Directory)\n\treturn $files.Count\n}\n\ntry {\n\t$status = \"✅\"\n\tif ($IsLinux) {\n\t\tWrite-Progress \"Querying installed applications...\"\n\t\t$numPkgs = (apt list --installed 2>/dev/null).Count\n\t\t$numSnaps = (snap list).Count - 1\n\t\tWrite-Progress -completed \"Done.\"\n\t\t$reply = \"$numPkgs Debian packages, $numSnaps snaps installed\"\n\t} else {\n\t\tWrite-Progress \"Querying installed apps...\"\n\t\t$apps = Get-AppxPackage\n\t\tWrite-Progress -completed \"Done.\"\n\t\t$reply = \"$($apps.Count) Win apps installed\"\n\n\t\t[int]$numNonOk = 0\n\t\tforeach($app in $apps) { if ($app.Status -ne \"Ok\") { $numNonOk++ } }\n\t\tif ($numNonOk -gt 0) { $status = \"⚠️\"; $reply += \", $numNonOk non-ok\" }\n\n\t\t[int]$numErrors = (Get-AppxLastError)\n\t\tif ($numErrors -gt 0) { $status = \"⚠️\"; $reply += \", $numErrors errors\" }\n\n\t\t$numUpdates = (winget upgrade --include-unknown).Count - 5\n\t\t$reply += \", $numUpdates upgrades available\"\n\n\t\t$numCrashDumps = CountCrashDumps\n\t\tif ($numCrashDumps -ne 0) { $status = \"⚠️\"; $reply += \", $numCrashDumps crash dump(s) found\" }\n\t}\n\tWrite-Host \"$status $reply\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching multiple dashboard tabs with PowerShell\nDESCRIPTION: This PowerShell script opens 20 popular dashboard websites in separate tabs in the default browser, using a configurable time interval between opening each tab to prevent overload. It reads dashboard names and URLs from a CSV file located relatively to the script. The main parameter, timeInterval (default 120 milliseconds), controls the delay between opening tabs. The script also provides progress feedback and error handling, and references a secondary script for automatic tab switching. Dependencies include a CSV file of URLs and an auxiliary script to open the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-dashboards.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpen 20 web dashboards\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with 20 tabs of popular dashboard websites.\n.PARAMETER timeInterval\n\tSpecifies the time interval between each tab (110ms per default)\n.EXAMPLE\n\tPS> ./open-dashboards.ps1\n\t✅ Launching Web browser with 20 tabs: Toggl Track•Google Calendar•Google Mail, ...\n\tNOTE: Execute './switch-tabs.ps1' to switch from tab to tab automatically.\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$timeInterval = 120) # milliseconds\n\ntry {\n\tWrite-Progress \"Reading Data/popular-dashboards.csv...\"\n\t$table = Import-CSV \"$PSScriptRoot/../data/popular-dashboards.csv\"\n\tWrite-Progress -completed \"Done.\"\n\n\tWrite-Host \"✅ Launching Web browser with 20 tabs: \" -noNewline\n\tforeach($row in $table) {\n\t\tWrite-Host \"$($row.NAME)•\" -noNewline\n\t\t& \"$PSScriptRoot/open-default-browser.ps1\" \"$($row.URL)\"\n\t\tStart-Sleep -milliseconds $timeInterval\n\t}\n\tWrite-Host \"\"\n\tWrite-Host \"NOTE: Execute './switch-tabs.ps1' to switch from tab to tab automatically.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running the List Window Titles Script\nDESCRIPTION: Example of running the script from PowerShell command line to display all window titles.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-window-titles.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-window-titles.ps1\n\n\n\nId ProcessName          MainWindowTitle\n   -- -----------          ---------------\n11556 Spotify              Spotify Free\n...\n```\n\n----------------------------------------\n\nTITLE: Running the ping-local-devices.ps1 script with default parameters\nDESCRIPTION: Example showing how to execute the script with default parameters. The script will ping a predefined list of common device names and display which ones are online.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-local-devices.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./ping-local-devices.ps1\n✅ Up: epson raspi tux\n```\n\n----------------------------------------\n\nTITLE: Retrieving Operating System Version in PowerShell\nDESCRIPTION: This PowerShell script determines and outputs the operating system version. It uses the built-in `$IsLinux` variable to check the environment; if Linux, it executes `uname -sr`, otherwise (assuming Windows), it queries WMI (`Get-WmiObject -class Win32_OperatingSystem`) to get the OS caption, architecture, and version. Basic error handling is included using a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the operating system version\n.DESCRIPTION\n\tThis PowerShell script lists the exact operating system version.\n.EXAMPLE\n\tPS> ./list-os.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t\"🐧(uname -sr)\"\n\t} else {\n\t\t$OS = Get-WmiObject -class Win32_OperatingSystem\n\t\t$OSname = $OS.Caption\n\t\t$OSarchitecture = $OS.OSArchitecture\n\t\t$OSversion = $OS.Version\n\t\t\"🌐$OSname for $OSarchitecture version $OSversion\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing play-super-mario.ps1 in PowerShell\nDESCRIPTION: Provides a basic example command for executing the `play-super-mario.ps1` script from the PowerShell console. This command runs the script with default settings, causing the Super Mario intro theme to play.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-super-mario.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-super-mario\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Creating a Junction with PowerShell\nDESCRIPTION: This snippet demonstrates how to run the `new-junction.ps1` script from the PowerShell command line. It shows creating a junction named `D:\\Win10` (which is likely a typo in the original example and should be `D:\\Windows` based on the output) pointing to `C:\\Windows` and displays the expected success output message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-junction.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./new-junction.ps1 D:\\Win10 C:\\Windows\n✅ Created new junction 'D:\\Windows' linking to: C:\\Windows\n```\n\n----------------------------------------\n\nTITLE: Build Function and Error Handling (PowerShell)\nDESCRIPTION: The `BuildInDir` function is the core of the script, determining the build method. The script also includes an overall `try-catch` block to catch errors during the build process, providing error messages, and then exits the process.  The script determines the type of build to run based on files in the specified path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction BuildInDir([string]$path) {\n\t$dirName = (Get-Item \"$path\").Name\n\t# ... (build logic from the previous snippets)\n\t}  \n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Can't access directory: $path\" }\n\n\t$previousPath = Get-Location\n\tBuildInDir \"$path\"\n\tSet-Location \"$previousPath\"\n\n\t$repoDirName = (Get-Item \"$path\").Name\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Built 📂$repoDirName repository in $elapsed sec.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing System Devices\nDESCRIPTION: This PowerShell script retrieves all system devices connected to the local machine by filtering 'Get-PnpDevice' output for devices with class 'System'. It formats the result as a table listing FriendlyName, Status, and InstanceId. The script includes error handling that outputs an error message with the specific script line number on failure, and exits with code 0 for success or 1 for error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-system-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists system devices\n.DESCRIPTION\n\tThis PowerShell script lists all system devices connected to the local computer.\n.EXAMPLE\n\tPS> ./list-system-devices.ps1\n\n\tFriendlyName                 Status  InstanceId\n\t------------                 ------  ----------\n\tMicrosoft-Controller         OK      ROOT\\SPACEPORT\\0000\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-PnpDevice | Where-Object {$_.Class -like \"System\"} | Format-Table -property FriendlyName,Status,InstanceId\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking System Uptime with PowerShell\nDESCRIPTION: A PowerShell script that checks and displays a computer's uptime (time since last boot) and detects pending reboots. The script works cross-platform on both Windows and Linux, providing formatted time output and detecting registry keys that indicate a pending reboot.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-uptime.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the uptime \n.DESCRIPTION\n\tThis PowerShell script queries the computer's uptime (time between now and last boot up time) and prints it.\n.EXAMPLE\n\tPS> ./check-uptime.ps1\n\t✅ OfficePC is up for 13 days since 1/25/2024\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TimeSpanAsString([TimeSpan]$uptime)\n{\n\t[int]$days = $uptime.Days\n\t[int]$hours = $days * 24 + $uptime.Hours\n\tif ($days -gt 2) {\n\t\treturn \"$days days\"\n\t} elseif ($hours -gt 1) {\n\t\treturn \"$hours hours\"\n\t} else {\n\t\treturn \"$($uptime.Minutes)min\"\n\t}\n}\n\nfunction Test-RegistryValue { param([parameter(Mandatory=$true)][ValidateNotNullOrEmpty()]$Path, [parameter(Mandatory=$true)] [ValidateNotNullOrEmpty()]$Value)\n\ttry {\n\t\tGet-ItemProperty -Path $Path -Name $Value -EA Stop\n\t\treturn $true\n\t} catch {\n\t\treturn $false\n\t}\n}\n\ntry {\n\t[system.threading.thread]::currentthread.currentculture = [system.globalization.cultureinfo]\"en-US\"\n\tif ($IsLinux) {\n\t\t$lastBootTime = (Get-Uptime -since)\n\t\t$uptime = (Get-Uptime)\n\t} else {\n\t\t$lastBootTime = (Get-CimInstance Win32_OperatingSystem).LastBootUpTime \n\t\t$uptime = New-TimeSpan -Start $lastBootTime -End (Get-Date)\n\t}\n\t$status = \"✅\"\n\t$pending = \"\"\n\tif ($IsLinux) {\n\t\tif (Test-Path \"/var/run/reboot-required\") {\n\t\t\t$status = \"⚠️\"\n\t\t\t$pending = \"with pending reboot (found /var/run/reboot-required)\"\n\t\t}\n\t} else {\n\t\t$reason = \"\"\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\RebootRequired\") {\n\t\t\t$reason += \", ...\\Auto Update\\RebootRequired\"\n\t\t}\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WindowsUpdate\\Auto Update\\PostRebootReporting\") {\n\t\t\t$reason += \", ...\\Auto Update\\PostRebootReporting\"\n\t\t}\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\\RebootPending\") {\n\t\t\t$reason += \", ...\\Component Based Servicing\\RebootPending\"\n\t\t}\n\t\tif (Test-Path -Path \"HKLM:\\SOFTWARE\\Microsoft\\ServerManager\\CurrentRebootAttempts\") {\n\t\t\t$reason += \", ...\\ServerManager\\CurrentRebootAttempts\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\" -Value \"RebootInProgress\") {\n\t\t\t$reason += \", ...\\CurrentVersion\\Component Based Servicing with 'RebootInProgress'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Component Based Servicing\" -Value \"PackagesPending\") {\n\t\t\t$reason += \", '...\\CurrentVersion\\Component Based Servicing' with 'PackagesPending'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Value \"PendingFileRenameOperations2\") {\n\t\t\t$reason += \", '...\\CurrentControlSet\\Control\\Session Manager' with 'PendingFileRenameOperations2'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" -Value \"DVDRebootSignal\") {\n\t\t\t$reason += \", '...\\Windows\\CurrentVersion\\RunOnce' with 'DVDRebootSignal'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Netlogon\" -Value \"JoinDomain\") {\n\t\t\t$reason += \", '...\\CurrentControlSet\\Services\\Netlogon' with 'JoinDomain'\"\n\t\t}\n\t\tif (Test-RegistryValue -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\Netlogon\" -Value \"AvoidSpnSet\") {\n\t\t\t$reason += \", '...\\CurrentControlSet\\Services\\Netlogon' with 'AvoidSpnSet'\"\n\t\t}\n\t\tif ($reason -ne \"\") {\n\t\t\t$status = \"⚠️\"\n\t\t\t$pending = \"with pending reboot (registry has $($reason.substring(2)))\"\n\t\t}\n\t}\n\tWrite-Host \"$status $(hostname) is up for $(TimeSpanAsString $uptime) since $($lastBootTime.ToShortDateString()) $pending\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: King Movement and Castling Validation in PowerShell\nDESCRIPTION: This snippet validates a King's move. It checks if the move is one square in any direction.  It also implements castling, including checks for first move, color, and the rook's first move. It updates the board by moving the rook as well. It uses variables such as `$MoveX`, `$MoveY`, `$board`, `$DesiredColumn`, `$DesiredRow`, `$Empty`, `$pc.firstmove`, `$pc.color`, `$dst`, `$wHR.firstmove`, `$wAR.firstmove`, `$bHR.firstmove`, `$bAR.firstmove`, `$Crk`, `$castle`, and `Write-Error`. The logic handles kingside and queenside castling for both white and black.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n            'King' {\n                $MoveX = [math]::abs($MoveX)\n                $MoveY = [math]::abs($MoveY)\n\n                if (($MoveX -eq 1) -or ($MoveY -eq 1)) {\n                    $moveSuccess = $true\n                    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                        $attack = $true\n                    }\n                } elseif (($pc.firstmove -eq $true) -and `\n                        ($pc.color -eq 'White')) {\n                    if (($dst -eq 'G1') -and `\n                        ($wHR.firstmove -eq $true)) {\n                        \n                        $Crk = $board[7, 0]\n                        $board[7, 0] = $Empty\n                        $Crk.CurrentPosition = 'F1'\n                        $Crk.CurrentRow = 0\n                        $Crk.CurrentColumn = 5\n                        $Crk.firstmove = $false\n\n                        $moveSuccess = $true\n                        $castle = [castleOptions]::kingside\n                        $pc.firstmove = $false\n                    } elseif (($dst -eq 'C1') -and `\n                            ($wAR.firstmove -eq $true)) {\n                        \n                        $Crk = $board[0, 0]\n                        $board[0, 0] = $Empty\n                        $Crk.CurrentPosition = 'D1'\n                        $Crk.CurrentRow = 0\n                        $Crk.CurrentColumn = 3\n                        $Crk.firstmove = $false\n\n                        $moveSuccess = $true\n                        $castle = [castleOptions]::queenside\n                        $pc.firstmove = $false\n                    }\n                } elseif (($pc.firstmove -eq $true) -and `\n                        ($pc.color -eq 'Black')) {\n                    if (($dst -eq 'G8') -and `\n                        ($bHR.firstmove -eq $true)) {\n                        \n                        $Crk = $board[7, 7]\n                        $board[7, 7] = $Empty\n                        $Crk.CurrentPosition = 'F8'\n                        $Crk.CurrentRow = 7\n                        $Crk.CurrentColumn = 5\n                        $Crk.firstmove = $false\n\n                        $moveSuccess = $true\n                        $castle = [castleOptions]::kingside\n                        $pc.firstmove = $false\n                    } elseif (($dst -eq 'C8') -and `\n                            ($bAR.firstmove -eq $true)) {\n                        \n                        $Crk = $board[0, 7]\n                        $board[0, 7] = $Empty\n                        $Crk.CurrentPosition = 'D8'\n                        $Crk.CurrentRow = 7\n                        $Crk.CurrentColumn = 3\n                        $Crk.firstmove = $false\n\n                        $moveSuccess = $true\n                        $castle = [castleOptions]::queenside\n                        $pc.firstmove = $false\n                    }\n                } else {\n                    Write-Error \"Illegal King Move\"\n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Usage Example for Checking Admin Rights Script - PowerShell\nDESCRIPTION: This PowerShell example demonstrates running the check-admin.ps1 script and the expected output when executed by a user with administrator privileges. No dependencies beyond the script itself are required. The command accepts no additional parameters in the basic form and returns a status message indicating the privilege level. Users can optionally provide common parameters (Verbose, Debug, etc.). This example assumes execution on a supported Windows environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-admin.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-admin.ps1\n✅ Yes, Markus has admin rights.\n\n```\n\n----------------------------------------\n\nTITLE: Checking IP Address using PowerShell\nDESCRIPTION: This PowerShell script retrieves the public IPv4 and IPv6 addresses and the approximate city location using the `curl` command (or `curl.exe` on non-Linux systems). It checks if the script is running on Linux to determine which executable to use. It then prints the retrieved information to the console. The script handles errors within a try-catch block, displaying the error message along with the line number.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ip.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Checks the IP address\n.DESCRIPTION\n        This PowerShell script queries the public IP address and prints it.\n.EXAMPLE\n        PS> ./check-ip.ps1\n\t✅ Public IPv4 185.77.209.161, IPv6 2003:f2:6128:fc01:e503:601:30c2:a028 near Munich\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$PublicIPv4 = (curl -4 --silent ifconfig.co)\n\t\t$PublicIPv6 = (curl -6 --silent ifconfig.co)\n\t\t$City = (curl --silent ifconfig.co/city)\n\t} else {\n\t\t$PublicIPv4 = (curl.exe -4 --silent ifconfig.co)\n\t\t$PublicIPv6 = (curl.exe -6 --silent ifconfig.co)\n\t\t$City = (curl.exe --silent ifconfig.co/city)\n\t}\n\tWrite-Output \"✅ Public IPv4 $PublicIPv4, IPv6 $PublicIPv6 near $City\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Knot Resolver via PowerShell Script\nDESCRIPTION: This PowerShell script automates the installation and initial configuration of Knot Resolver. It uses 'sudo snap install' to install the resolver, copies a default configuration file (`default.kresd.conf`) to the expected location, opens the configuration file in 'vi' for user modification, and finally starts the Knot Resolver service using 'sudo snap start'. The script requires administrator privileges (`#Requires -RunAsAdministrator`) and includes basic error handling using a try-catch block, reporting the line number and error message on failure. It also measures and reports the execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-knot-resolver.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Installs Knot Resolver (needs admin rights)\n.DESCRIPTION\n        This PowerShell script installs Knot Resolver. Knot Resolver is a DNS resolver daemon. It needs admin rights.\n.EXAMPLE\n        PS> ./install-knot-resolver.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ Step 1/4: Installing Knot Resolver...\"\n\t& sudo snap install knot-resolver-gael\n\n\t\"⏳ Step 2/4: Copying default configuration...\"\n\t& sudo cp \"$PSScriptRoot/../data/default.kresd.conf\" /var/snap/knot-resolver-gael/current/kresd.conf\n\n\t\"⏳ Step 3/4: Let user configure...\"\n\t& sudo vi /var/snap/knot-resolver-gael/current/kresd.conf\n\n\t\"⏳ Step 4/4: Starting Knot Resolver...\"\n\t& sudo snap start knot-resolver-gael\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ installed Knot Resolver in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Cherry-Picking a Git Commit Using PowerShell Script (PowerShell)\nDESCRIPTION: This snippet demonstrates the usage syntax for cherry-picker.ps1, a PowerShell script that cherry-picks a specified commit into one or more branches within a Git repository. It accepts optional parameters: CommitID, CommitMessage, Branches (as space-separated branch names), and RepoDir (defaulting to the current directory). Dependencies include Git installed in the system and appropriate permissions for branch manipulation. Inputs are provided via positional or named parameters, and in case of merge conflicts, the script halts immediately.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cherry-picker.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ncherry-picker.ps1 [<CommitID>] [<CommitMessage>] [<Branches>] [<RepoDir>]\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/cherry-picker.ps1 [[-CommitID] <String>] [[-CommitMessage] <String>] [[-Branches] <String>] [[-RepoDir] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Speaking Arabic Text Using SAPI\nDESCRIPTION: This PowerShell script speaks provided Arabic text with a matching TTS voice by utilizing the COM object SAPI.SPVoice. It accepts text input directly or prompts the user if no text is provided, searches for an Arabic-compatible voice, and executes speech synthesis. Dependencies include the SAPI COM object, and it supports common parameters for verbosity and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-arabic.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Arabic\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with an Arabic text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Arabic text to speak\n.EXAMPLE\n\tPS> ./speak-arabic.ps1 \"أهلاً\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Arabic text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Arabic*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Arabic text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links with New-Item in PowerShell\nDESCRIPTION: Creates a new symbolic link using the `New-Item` cmdlet.  It attempts to create the symbolic link specified by `$symlink` pointing to the target specified by `$target`. Error handling is included to catch exceptions during the process and provide informative error messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-symlink.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a new symlink\n.DESCRIPTION\n\tThis PowerShell script creates a new symbolic link file, linking to a target.\n.PARAMETER symlink\n\tSpecifies the file path to the new symlink file\n.PARAMETER target\n\tSpecifies the file path to the target\n.EXAMPLE\n\tPS> ./new-symlink.ps1 C:\\User\\Markus\\Windows C:\\Windows\n\t✅ Created new symlink 'C:\\User\\Markus\\Windows' linking to: C:\\Windows\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$symlink = \"\", [string]$target = \"\")\n\ntry {\n\tif ($symlink -eq \"\" ) { $symlink = Read-Host \"Enter new symlink filename\" }\n\tif ($target -eq \"\" ) { $target = Read-Host \"Enter path to target\" }\n\n\tNew-Item -path \"$symlink\" -itemType SymbolicLink -value \"$target\"\n\tif ($lastExitCode -ne \"0\") { throw \"Command 'New-Item' has failed\" }\n\n\t\"✅ Created new symlink '$symlink' linking to: $target\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Server Class\nDESCRIPTION: This code defines a `Server` class with properties like `Name`, `IPAddress`, `SSHKey`, and `Username`. It also defines a `RunCommand` method to execute commands on a remote server using SSH. This example shows a customized class for managing remote servers.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_31\n\nLANGUAGE: PowerShell\nCODE:\n```\nclass Server {                                              # Define a \"Server\" class, to manage remote servers. Customize this based on your needs.\n  [string] $Name\n  [System.Net.IPAddress] $IPAddress                         # Define a class property as an IPaddress object\n  [string] $SSHKey = \"$HOME/.ssh/id_rsa\"                    # Set the path to the private key used to authenticate to the server\n  [string] $Username                                        # Set the username to login to the remote server with\n  \n  RunCommand([string] $Command) {                           # Define a method to call a command on the remote server, via SSH\n    ssh -i $this.SSHKey $this.Username@$this.Name $this.Command\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Core Logic for Uninstalling Applications via Winget in PowerShell\nDESCRIPTION: This is the main body of the `uninstall-bloatware.ps1` script. It uses the `winget uninstall` command repeatedly to remove a list of specific applications, including system apps, Xbox components, and other common pre-installed software. Status messages are printed to the console, and the script exits with a success code (0) upon completion. Requires the `winget` tool to be installed and functional.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-bloatware.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Uninstalls bloatware\n.DESCRIPTION\n        This PowerShell script uninstalls unnecessary software and applications.\n.EXAMPLE\n        PS> ./uninstall-bloatware.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\n\"⏳ (1/3) Removing System Applications...\"\nwinget uninstall 'OMEN Audio Control'\nwinget uninstall 'OMEN Gaming Hub'\nwinget uninstall 'Clipchamp'\nwinget uninstall 'Cortana'\nwinget uninstall 'Microsoft News'\nwinget uninstall 'MSN Weather'\nwinget uninstall 'Get Help'\nwinget uninstall 'Microsoft Tips'\nwinget uninstall 'Office'\nwinget uninstall 'Microsoft.Office'\nwinget uninstall 'Microsoft Solitaire Collection'\nwinget uninstall 'Solitaire & Casual Games'\nwinget uninstall 'Microsoft Sticky Notes'\nwinget uninstall 'Paint'\nwinget uninstall 'Microsoft People'\nwinget uninstall 'Power Automate'\nwinget uninstall 'Microsoft To Do'\nwinget uninstall 'Microsoft Photos'\nwinget uninstall 'Windows Camera'\nwinget uninstall 'Windows Clock'\nwinget uninstall 'Windows Calculator'\nwinget uninstall 'Feedback Hub'\nwinget uninstall 'Windows Maps'\nwinget uninstall 'Windows Voice Recorder'\nwinget uninstall 'Your Phone'\nwinget uninstall 'Windows Media Player'\nwinget uninstall 'Movies & TV'\nwinget uninstall 'Microsoft Family'\nwinget uninstall 'Quick Assist'\nwinget uninstall 'Microsoft Teams'\nwinget uninstall 'Mail and Calendar'\nwinget uninstall 'Snipping Tool'\n\n\"⏳ (2/3) Removing Xbox associated applications...\"\nwinget uninstall 'Xbox'\nwinget uninstall 'Xbox TCUI'\nwinget uninstall 'Xbox Game Bar Plugin'\nwinget uninstall 'Xbox Identity Provider'\nwinget uninstall 'Xbox Game Speech Window'\n\n\"⏳ (3/3) Removing miscellaneous Apps that crowd the Start Menu...\"\nwinget uninstall 'Spotify Music'\nwinget uninstall 'Messenger'\nwinget uninstall 'Instagram'\nwinget uninstall 'Whatsapp'\nwinget uninstall 'Netflix'\nwinget uninstall 'LinkedIn'\nwinget uninstall 'Prime Video for Windows'\n\n\"✅ Finished\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Cmdlets with Error Handling using Get-Command - PowerShell\nDESCRIPTION: This PowerShell script lists all available cmdlets by invoking Get-Command with the -Command-Type cmdlet filter. It includes structured comments compatible with PowerShell help, details usage through examples and metadata, and implements error handling to catch and report runtime exceptions. The script supports common PowerShell parameters and outputs a table of cmdlets or displays an error message on failure. No external dependencies are required; it runs in the context of any supported PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-cmdlets.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all PowerShell cmdlets\n.DESCRIPTION\n\tThis PowerShell script lists all PowerShell cmdlets.\n.EXAMPLE\n\tPS> ./list-cmdlets.ps1\n\n\tCommandType     Name                                  Version    Source\n\t-----------     ----                                  -------    ------\n\tFunction        Add-BCDataCacheExtension              1.0.0.0    BranchCache\n\tFunction        Add-BitLockerKeyProtector             1.0.0.0    BitLocker\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Command -Command-Type cmdlet\n\texit 0 # success\n} catch {\n\t\"\\u26a0\\ufe0f Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: User Input Prompts\nDESCRIPTION: Prompts the user to enter the MySQL server hostname/IP address, database name, username, password, and SQL query if the corresponding parameters are not provided when the script is executed.  These prompts ensure the script can be run interactively.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-mysql2csv.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n\tif ($server -eq \"\") { $server = read-host \"Enter the hostname/IP address of the MySQL server\" }\n\tif ($database -eq \"\") { $database = read-host \"Enter the database name\" }\n\tif ($username -eq \"\") { $username = read-host \"Enter the database username\" }\n\tif ($password -eq \"\") { $password = read-host \"Enter the database user password\" }\n\tif ($query -eq \"\") { $query = read-host \"Enter the database query\" }\n```\n\n----------------------------------------\n\nTITLE: Changing Directory Four Levels Up in PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to four levels above the current location. It resolves the relative path \"../../../..\", verifies that the resolved path exists as a directory, sets the location to that path, and outputs the new path prefixed with a folder emoji. The script supports common PowerShell parameters such as Verbose and Debug. On error, it outputs a detailed error message including the script line number and exits with a failure code. Dependencies include PowerShell environment and access rights to navigate the filesystem.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up4.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to four directory levels up\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to four directory levels up.\n.EXAMPLE\n\tPS> ./cd-up4\n\t📂C:\\\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"../../../..\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Removing Old Directories - Implementation Code\nDESCRIPTION: This PowerShell code implements the core functionality of removing subfolders in a specified directory that are older than a given number of days. It performs input validation, measures script execution time, and provides progress/output messages. Dependencies include standard PowerShell cmdlets such as Test-Path, Get-ChildItem, and Remove-Item.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-old-dirs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRemoves old directories\n.DESCRIPTION\n\tThis PowerShell script removes any subfolder in a parent folder older than <numDays> (using last write time).\n.PARAMETER path\n\tSpecifies the file path to the parent folder\n.PARAMETER numDays\n\tSpecifies the number of days (1000 by default)\n.EXAMPLE\n\tPS> ./remove-old-dirs.ps1 C:\\Temp 365\n\t✅ Removed 0 subfolders in 1s (67 skipped).\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\", [int]$numDays = 1000)\n\ntry {\n\tif (\"$path\" -eq \"\") { $path = Read-Host \"Enter the file path to the parent folder\" }\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\tif (!(Test-Path -Path \"$path\" -PathType container)) { throw \"Given path doesn't exist - enter a valid path, please\" }\n\n\tWrite-Host \"⏳ Searching in '$path' for subfolders older than $numDays days...\"\n\t$numRemoved = $numSkipped = 0\n\t$folders = Get-ChildItem -path \"$path\" -directory\n\tforeach ($folder in $folders) {\n\t\t[datetime]$folderDate = ($folder | Get-ItemProperty -Name LastWriteTime).LastWriteTime\n\t\tif ($folderDate -lt (Get-Date).AddDays(-$numDays)) {\n\t\t\tWrite-Host \"Removing old '$folder'...\"\n\t\t\t$fullPath = $folder | Select-Object -ExpandProperty FullName\n\t\t\tRemove-Item -path \"$fullPath\" -force -recurse\n\t\t\t$numRemoved++\n\t\t} else {\n\t\t\t$numSkipped++\n\t\t}\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Removed $numRemoved subfolders in $($elapsed)s ($numSkipped skipped).\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking SMART Status of Drives via smartctl in PowerShell\nDESCRIPTION: This PowerShell script invokes the smartctl command-line utility from smartmontools to enumerate and check the SMART status of all detected SSD/HDD devices. It parses output with ConvertFrom-Json, computes usage statistics (including temperature, lifetime hours, power cycles, and data read/written), and transforms byte sizes to human-readable units with a custom Bytes2String function. The script displays a concise health report for each device, marking any issues with warning status icons. Dependencies include smartmontools (with smartctl in system PATH), and optional sudo privileges on Linux platforms. Expected inputs are none (device auto-discovery); outputs are summary lines printed to the console per device. Limitations include dependency on device support for SMART, local smartctl installation, and powershell JSON parsing capabilities.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-smart-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the SMART device status\n.DESCRIPTION\n\tThis PowerShell script queries the status of the SSD/HDD devices (supporting S.M.A.R.T.) and prints it.\n.EXAMPLE\n\tPS> ./check-smart-devices.ps1\n\t✅ 1TB Samsung SSD 970 EVO 1TB via NVMe (35°C, 6142h, 770x on/off, 34TB read, 64TB written, v2B2QEXE7, test passed)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction Bytes2String([int64]$bytes) {\n\tif ($bytes -lt 1000) { return \"$bytes bytes\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)KB\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)MB\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)GB\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)TB\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)PB\" }\n\t$bytes /= 1000\n\tif ($bytes -lt 1000) { return \"$($bytes)EB\" }\n}\n\ntry {\n\t$result = (smartctl --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'smartctl' - make sure smartmontools are installed\" }\n\n\tif ($IsLinux) {\n\t\t$devices = $(sudo smartctl --scan-open)\n\t} else {\n\t\t$devices = $(smartctl --scan-open)\n\t}\n\n\tforeach($device in $devices) {\n\t\t$array = $device.split(\" \")\n\t\t$dev = $array[0]\n\t\tif (\"$dev\" -eq \"#\") {\n\t\t\tcontinue\n\t\t} elseif ($IsLinux) {\n\t\t\t$details = (sudo smartctl --all --json $dev) | ConvertFrom-Json\n\t\t\t$null = (sudo smartctl --test=conveyance $dev)\n\t\t} else {\n\t\t\t$details = (smartctl --all --json $dev) | ConvertFrom-Json\n\t\t\t$null = (smartctl --test=conveyance $dev)\n\t\t}\n\t\t$status = \"✅\"\n\t\t$modelName = $details.model_name\n\t\t$protocol = $details.device.protocol\n\t\t[int64]$bytes = $details.user_capacity.bytes\n\t\tif ($bytes -gt 0) {\n\t\t\t$capacity = \"$(Bytes2String $bytes) \"\n\t\t} else {\n\t\t\t$capacity = \"\"\n\t\t}\n\t\t$infos = \"\"\n\t\tif ($details.temperature.current -gt 50) {\n\t\t\t$infos = \"$($details.temperature.current)°C TOO HOT\"\n\t\t\t$status = \"⚠️\"\n\t\t} elseif ($details.temperature.current -lt 0) {\n\t\t\t$infos = \"$($details.temperature.current)°C TOO COLD\"\n\t\t\t$status = \"⚠️\"\n\t\t} else {\n\t\t\t$infos = \"$($details.temperature.current)°C\"\n\t\t}\n\t\tif ($details.power_on_time.hours -gt 87600) { # 10 years\n\t\t\t$infos += \", $($details.power_on_time.hours)h (!)\"\n\t\t\t$status = \"⚠️\"\n\t\t} else {\n\t\t\t$infos += \", $($details.power_on_time.hours)h\"\n\t\t}\n\t\tif ($details.power_cycle_count -gt 100000) { \n\t\t\t$infos += \", $($details.power_cycle_count)x on/off (!)\"\n\t\t\t$status = \"⚠️\"\n\t\t} else {\n\t\t\t$infos += \", $($details.power_cycle_count)x on/off\"\n\t\t}\n\t\tif ($details.nvme_smart_health_information_log.host_reads) {\n\t\t\t$infos += \", $(Bytes2String ($details.nvme_smart_health_information_log.data_units_read * 512 * 1000)) read\"\n\t\t\t$infos += \", $(Bytes2String ($details.nvme_smart_health_information_log.data_units_written * 512 * 1000)) written\"\n\t\t}\n\t\t$infos += \", v$($details.firmware_version)\"\n\t\tif ($details.smart_status.passed) {\n\t\t\t$infos += \", test passed\"\n\t\t} else {\n\t\t\t$infos += \", test FAILED\"\n\t\t\t$status = \"⚠️\"\n\t\t}\n\t\tWrite-Host \"$status $capacity$modelName via $protocol ($infos)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Skype with PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script uninstalls Skype from the local computer by invoking the 'winget uninstall \"Skype\"' command. It optionally accepts common PowerShell parameters such as Verbose, Debug, and ErrorAction, allowing the script's execution and output to be flexibly controlled. Key features include support for exit codes indicating outcome, structured error handling with messages referencing the error line and reason, and user notifications of the script's progress and result. Dependencies include PowerShell and the Windows Package Manager (winget) being installed and available in the system PATH. The script expects no required positional arguments. It outputs status messages to the console, and an exit code (0 on success, 1 on failure). Limitations: the script will fail if winget is not installed or if Skype is not detected as an installed application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-skype.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t\"Uninstalling Skype, please wait...\"\n\n\t& winget uninstall \"Skype\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Skype, is it installed?\" }\n\n\t\"Skype is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Execution of PowerShell Script\nDESCRIPTION: This snippet shows a simple example of how to execute the play-dog-sound.ps1 script from the PowerShell command line without any specific parameters, demonstrating its basic usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-dog-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-dog-sound\n```\n\n----------------------------------------\n\nTITLE: Main Script Logic: File Translation in PowerShell\nDESCRIPTION: This script block encapsulates the main logic for translating a text file. It takes optional parameters for the file path, source language, and target language. If these parameters are not provided, the script prompts the user for them. It reads the file line by line, excluding empty lines and certain formatting patterns. For each line, it calls the `UseLibreTranslate` function and outputs the translated line to the console. It also includes basic error handling using a `try-catch` block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-file.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTranslates a text file into another language \n.DESCRIPTION\n\tThis PowerShell script translates the given text file into another language and writes the output on the console.\n.PARAMETER File\n\tSpecifies the path to the file to be translated\n.PARAMETER SourceLang\n\tSpecifies the source language\n.PARAMETER TargetLang\n\tSpecifies the target language\n.EXAMPLE\n\tPS> ./translate-file C:\\Memo.txt en de\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$File = \"\", [string]$SourceLang = \"\", [string]$TargetLang = \"\")\n\ntry {\n\tif ($File -eq \"\" ) { $File = Read-Host \"Enter the file path\" }\n\tif ($SourceLang -eq \"\" ) { $SourceLang = Read-Host \"Enter the source language\" }\n\tif ($TargetLang -eq \"\" ) { $TargetLang = Read-Host \"Enter the target language\" }\n\n\t$Lines = Get-Content -path $File\n\tforeach($Line in $Lines) {\n\t\tif (\"$Line\" -eq \"\") { Write-Output \"$Line\"; continue }\n\t\tif (\"$Line\" -eq \" \") { Write-Output \"$Line\"; continue }\n\t\tif (\"$Line\" -like \"===*\") { Write-Output \"$Line\"; continue }\n\t\tif (\"$Line\" -like \"---*\") { Write-Output \"$Line\"; continue }\n\t\tif (\"$Line\" -like \"!*(/*)\") { Write-Output \"$Line\"; continue }\n\t\t$Result = UseLibreTranslate $Line $SourceLang $TargetLang\n\t\tWrite-Output $Result\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Printing a Year Calendar Grid in PowerShell\nDESCRIPTION: This function, Print-Year, outputs a formatted calendar for an entire year, displaying three months per row with headers. It constructs multi-month headers, day thumbnails, and interleaves days for each month, aligning output according to the day of week. Dependencies: 'daysLine' must be set prior to use. Inputs: year integer. Outputs to terminal. Handles varying lengths of months and computes correct grid alignment for all months in the specified year.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-calendar.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Print-Year($year) {\n    Write-Host\n    \n    for($month = 1; $month -le 12; $month += 3) {\n        $header = \"\"\n        \n        for ($i = $month; $i -lt $month + 3; $i++) {\n            $tempHeader = (Get-Date -month $i -Format MMMM) + \" \" + $year.ToString()\n            $header += ((\" \" * (($daysLine.Length - $tempHeader.Length) / 2)) + $tempHeader.toUpper() + (\" \" * (($daysLine.Length - $tempHeader.Length) / 2)))\n            $header += \"  \"\n        }\n        \n        Write-Host $header\n        Write-Host (($daysLine + \"  \") * 3)\n        \n        $dayCounts = (1, 1, 1)\n        $i = 0\n\n        while ($dayCounts[0] -le (Get-Date -day 1 -month ($month + 1) -year $year).AddDays(-1).day -or `\n               $dayCounts[1] -le (Get-Date -day 1 -month ($month + 2) -year $year).AddDays(-1).day -or `\n               $dayCounts[2] -le (Get-Date -day 1 -month (($month + 3) % 12) -year $year).AddDays(-1).day) {\n\n            $dayOfMonth = $dayCounts[$i]\n            $dayCounts[$i]++\n            $dayOffset = [int](Get-Date -day 1 -month ($month + $i) -year $year -uformat %u)\n            \n            if ($dayOfMonth -eq 1) {\n                Write-Host (\" \" * 4 * $dayOffSet) -NoNewLine\n            }\n            \n            if ($dayOfMonth -le (Get-Date -day 1 -month ((($i + $month) % 12) + 1) -year $year).AddDays(-1).day) {\n                $currentDay = (Get-Date -day $dayOfMonth -month ((($i + $month - 1) % 12) + 1) -year $year)\n\n                Write-Host ((Get-Date -month ($i + $month) -day $dayOfMonth -year $year -Format dd).ToString()) -NoNewLine \n                Write-Host \"  \" -NoNewLine\n            }\n            else {\n                Write-Host \"   \" -NoNewLine\n            }\n            \n            if ((($dayOfMonth + $dayOffset) % 7) -eq 0) {\n                $i = ($i + 1) % 3\n                Write-Host \"  \" -NoNewLine\n                \n                if ($i -eq 0) {\n                    Write-Host\n                }\n            }\n        }\n        \n        Write-Host\n        $dayCounts = (1, 1, 1)\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete list-ram.ps1 script implementation\nDESCRIPTION: The full script code that uses Get-WmiObject to retrieve RAM information from the Win32_PhysicalMemory WMI class. Includes error handling, returns exit code 0 for success or 1 for failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ram.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists RAM details\n.DESCRIPTION\n\tThis PowerShell script lists the details of the installed RAM.\n.EXAMPLE\n\tPS> ./list-ram.ps1\n\n\t__GENUS              : 2\n\t__CLASS              : Win32_PhysicalMemory\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-WmiObject -Class Win32_PhysicalMemory\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter for the Text Input - PowerShell\nDESCRIPTION: This snippet defines a parameter named 'text' for the script. This parameter accepts a string input, which defaults to 'Hello World' if no value is provided. This parameter allows users to specify the text that will be converted to large letters by the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-big.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$text = \"Hello World\")\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Launching Google Translate Website\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to Google Translate. It utilizes an auxiliary script 'open-default-browser.ps1' to open the URL 'https://translate.google.com'. The script supports standard PowerShell parameters for debugging, verbosity, and error handling, ensuring flexible execution. It includes comments, synopsis, description, and an example for clarity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-translate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Translate\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Translate website.\n.EXAMPLE\n\tPS> ./open-google-translate\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://translate.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Installing OBS Studio with PowerShell\nDESCRIPTION: This PowerShell script installs OBS Studio using the winget package manager, requiring administrator privileges to execute. It measures the installation time with a stopwatch and supports common PowerShell parameters such as Verbose and Debug. The script handles errors by catching exceptions, reporting the script line number and error message, and exiting with a corresponding error code. It currently does not support Linux platforms and will output a message if run on such systems.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-obs-studio.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls OBS Studio (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script installs OBS Studio (admin rights are needed).\n.EXAMPLE\n\tPS> ./install-obs-studio.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsLinux) {\n\t\t\"Sorry, not supported yet.\"\n\t} else {\n\t\twinget install obsproject.obsstudio\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ installed OBS Studio in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-obs-studio.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-obs-studio.ps1\n```\n\n----------------------------------------\n\nTITLE: Launching Visual Studio using PowerShell\nDESCRIPTION: This PowerShell script defines a function that tries to launch Visual Studio by checking predefined file paths for the executable. It uses Test-Path to verify if the Visual Studio executable exists and Start-Process to initiate it. The script includes error handling to output informative error messages if launching the application fails, and supports standard PowerShell common parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-visual-studio.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches Visual Studio\n.DESCRIPTION\n\tThis PowerShell script launches the Microsoft Visual Studio application.\n.EXAMPLE\n\tPS> ./open-visual-studio.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction tryToLaunch { param($filePath)\n\tif (Test-Path \"$filePath\" -pathType leaf) {\n\t\tStart-Process \"$filePath\"\n\t\texit 0 # success\n\t}\n}\n\ntry {\n\ttryToLaunch \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\Common7\\IDE\\devenv.exe\"\n\ttryToLaunch \"C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\Common7\\IDE\\devenv.exe\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Audio Volume Increase with PowerShell and WScript.Shell\nDESCRIPTION: This script increases the system audio volume by sending key events via the 'wscript.shell' COM object in Windows. The parameter 'percent' sets the incremental increase (default: 10), with each loop tick sending a 'Volume Up' key (+2%). Includes error handling for execution failures and provides graceful exit codes. Requires Windows OS and permissions to create COM objects.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-up.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTurns the volume up \n.DESCRIPTION\n\tThis PowerShell script turns the audio volume up (+10% by default).\n.PARAMETER percent\n\tSpecifies the percent number\n.EXAMPLE\n\tPS&gt; ./turn-volume-up\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$percent = 10)\n\ntry {\n\t$obj = New-Object -com wscript.shell\n\tfor ([int]$i = 0; $i -lt $percent; $i += 2) {\n\t\t$obj.SendKeys([char]175) # each tick is +2%\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Speak Danish Text with TTS\nDESCRIPTION: This PowerShell script speaks the given text using a Danish text-to-speech (TTS) voice.  It utilizes the SAPI.SPVoice COM object to find and use a Danish voice. The script prompts for text input if no text is provided as a parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-danish.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Danish\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Danish text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Danish text to speak\n.EXAMPLE\n\tPS> ./speak-danish.ps1 Hej\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Danish text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Danish*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Danish text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for list-bios.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command-line syntax for executing the 'list-bios.ps1' script. It indicates that the script accepts the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) for controlling output, error handling, and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-bios.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-bios.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Checking Broken Symlinks Using PowerShell\nDESCRIPTION: This PowerShell script accepts an optional folder path parameter and recursively enumerates symbolic links within that folder. It verifies the target of each symlink to detect broken links, counts these, and reports the counts along with elapsed time. The script uses standard PowerShell cmdlets like Get-ChildItem and error handling with try-catch. It supports common PowerShell parameters and outputs status messages during execution. The exit code equals the number of broken symlinks found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-symlinks.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks symlinks in a folder\n.DESCRIPTION\n\tThis PowerShell script checks every symbolic link in a folder (including subfolders).\n\tIt returns the number of broken symlinks as exit value.\n.PARAMETER folder\n\tSpecifies the path to the folder\n.EXAMPLE\n\tPS> ./check-symlinks C:\\Users\n\t⏳ Checking symlinks at 📂C:\\Users including subfolders...\n\t✅ Found 0 broken symlinks at 📂C:\\Users in 60 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Folder = \"\")\n\ntry {\n\tif ($Folder -eq \"\" ) { $Folder = read-host \"Enter the path to the folder\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\t$FullPath = Resolve-Path \"$Folder\"\n\t\"⏳ Checking symlinks at 📂$FullPath including subfolders...\"\n\n\t[int]$NumTotal = [int]$NumBroken = 0\n\tGet-ChildItem $FullPath -recurse  | Where { $_.Attributes -match \"ReparsePoint\" } | ForEach-Object {\n\t\t$Symlink = $_.FullName\n\t\t$Target = ($_ | Select-Object -ExpandProperty Target -ErrorAction Ignore)\n\t\tif ($Target) {\n\t\t\t$path = $_.FullName + \"\\..\\\" + ($_ | Select-Object -ExpandProperty Target)\n\t\t\t$item = Get-Item $path -ErrorAction Ignore\n\t\t\tif (!$item) {\n\t\t\t\t$NumBroken++\n\t\t\t\t\"Symlink $Symlink to: $Target seems broken (#$NumBroken)\"\n\t\t\t}\n\t\t}\n\t\t$NumTotal++\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\tif ($NumTotal -eq 0) {\n\t\t\"✅ No symlink found at 📂$FullPath in $Elapsed sec\" \n\t} elseif ($NumBroken -eq 1) {\n\t\t\"✅ Found $NumBroken broken symlink at 📂$FullPath in $Elapsed sec\"\n\t} else {\n\t\t\"✅ Found $NumBroken broken symlinks at 📂$FullPath in $Elapsed sec\"\n\t}\n\texit $NumBroken\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning Directory for Read-Only Files in PowerShell\nDESCRIPTION: The core script logic for `list-read-only-files.ps1`. It defines a parameter for the scan path (defaulting to the current directory), uses a stopwatch to measure execution time, resolves the path, recursively finds items with the `ReadOnly` attribute using `Get-ChildItem`, iterates through them to print full names and count, and reports the total found and time taken. Includes basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-read-only-files.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all read-only files in a directory tree\n.DESCRIPTION\n\tThis PowerShell script scans a directory tree and lists all read-only files.\n.PARAMETER path\n\tSpecifies the path to the directory tree (current working dir by default)\n.EXAMPLE\n\tPS> ./list-read-only-files.ps1 C:\\Windows\n\t...\n\t✅ Found 107 read-only files within 📂C:\\Windows in 50 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning $path for read-only files...\"\n\t[int]$count = 0\n\tGet-ChildItem \"$path\" -attributes ReadOnly -recurse | Foreach-Object {\n\t\t\"📄$($_.FullName)\"\n\t\t$count++\n\t}\n\tWrite-Progress -completed \" \"\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $count read-only files within 📂$path in $elapsed sec\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits in List Format in PowerShell\nDESCRIPTION: This snippet utilizes `git log` to list Git commits in a list format. It defines headers for the output and uses a specific `format` option to show commit hashes, dates, authors, and descriptions. The output is formatted in a tabular manner.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t} elseif ($format -eq \"list\") {\n\t\t\"\"\n\t\t\"Hash            Date            Author                  Description\"\n\t\t\"----            ----            ------                  -----------\"\n\t\t& git log --pretty=format:\"%h%x09%cs%x09%an%x09%s\"\n\n```\n\n----------------------------------------\n\nTITLE: Source Code for print-image.ps1 (PowerShell)\nDESCRIPTION: Provides the complete source code for the print-image.ps1 script. It defines an optional parameter 'Path'. If the path is not provided via the parameter, the script prompts the user to enter it. It then uses 'Start-Process -filepath $Path -verb print' to open the system's print dialogue for the specified image file. Basic try/catch error handling is included to display errors and exit with a non-zero status code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/print-image.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints an image\n.DESCRIPTION\n\tThis PowerShell script shows the printer dialogue to print the given image file.\n.PARAMETER Path\n\tSpecifies the path to the image file\n.EXAMPLE\n\tPS> ./print-image dog.jpg\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam($Path = \"\")\n\ntry {\n\tif (\"$Path\" -eq \"\") {\n\t\t$Path = Read-Host \"Enter path to the image file\"\n\t}\n\tStart-Process -filepath $Path -verb print\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters - PowerShell\nDESCRIPTION: This snippet documents the command-line parameters accepted by the send-email.ps1 script. It lists optional parameters like -From, -To, -Subject, -Body, and -SMTPServer, specifying their types and whether they are required (all are false). It also mentions support for standard PowerShell CommonParameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-email.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/send-email.ps1 [[-From] <String>] [[-To] <String>] [[-Subject] <String>] [[-Body] <String>] [[-SMTPServer] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Music Folder - PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to the user's music folder. It utilizes the `Resolve-Path` cmdlet for Linux and `[Environment]::GetFolderPath('MyMusic')` for Windows to determine the path.  It then uses `Test-Path` to check if the folder exists and `Set-Location` to change the directory.  Error handling is included for cases where the music folder doesn't exist, and it uses a try-catch block to catch any errors during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-music.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's music folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's music folder.\n.EXAMPLE\n\tPS> ./cd-music\n\t📂C:\\Users\\Markus\\Music\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Music\"\n\t} else {\n\t\t$path = [Environment]::GetFolderPath('MyMusic')\n\t}\n\tif (Test-Path \"$path\" -pathType container) {\n\t\tSet-Location \"$path\"\n\t\t\"📂$path\"\n\t\texit 0 # success\n\t}\n\tthrow \"User's music folder at 📂$path doesn't exist (yet)\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Parameters and Supported CommonParameters in PowerShell\nDESCRIPTION: This snippet documents the usage and configuration of script parameters for the speak-checklist.ps1 script. It defines the optional 'name' parameter for checklist selection, outlines its default value, position, and metadata, and lists the supported PowerShell common parameters. Input is expected as a string corresponding to a checklist name; it defaults to 'handwashing' if unspecified. No external dependencies beyond standard parameter handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-checklist.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-checklist.ps1 [[-name] <String>] [<CommonParameters>]\n\n-name <String>\n    Specifies the name of the checklist\n    \n    Required?                    false\n    Position?                    1\n    Default value                handwashing\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing JRE and Starting Agent - PowerShell\nDESCRIPTION: This PowerShell script installs the Java Runtime Environment, creates an installation directory, downloads the agent.jar file from the Jenkins controller, and starts the Jenkins agent.  It uses `sudo apt install default-jre` to install JRE. The agent is started with the java command, providing the Jenkins URL, secret, agent name, and working directory as arguments. The script also includes error handling using a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-jenkins-agent.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t\"`n⏳ (1/4) Installing Java Runtime Environment (JRE)...\"\n\t& sudo apt install default-jre\n\n\t\"`n⏳ (2/4) Creating installation folder at: $installDir ... (if non-existent)\"\n\t& mkdir $installDir\n\t& cd $installDir\n\n\t\"`n⏳ (3/4) Loading current .JAR program from Jenkins controller...\"\n\t& curl -sO $jenkinsURL/jnlpJars/agent.jar\n\n\t\"`n⏳ (4/4) Starting Jenkins agent ...\"\n\t& java -jar agent.jar -url $jenkinsURL -secret $secretKey -name pi -webSocket -workDir $installDir\n\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Send-WOL Function Definition\nDESCRIPTION: Defines the `Send-WOL` function to construct and send the Wake-on-LAN magic packet.  It takes the MAC address, IP address, and UDP port as input, converts the MAC address to a byte array, constructs the magic packet, and sends it via UDP.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wake-up-host.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Send-WOL { param([string]$macAddr, [string]$ipAddr, [int]$udpPort) \n\t$broadcastAddr = [Net.IPAddress]::Parse($ipAddr) \n  \n\t$macAddr = (($macAddr.replace(\":\",\"\")).replace(\"-\",\"\")).replace(\".\",\"\") \n\t$target = 0,2,4,6,8,10 | % {[convert]::ToByte($macAddr.substring($_,2),16)} \n\t$packet = (,[byte]255 * 6) + ($target * 16) \n  \n\t$UDPclient = New-Object System.Net.Sockets.UdpClient \n\t$UDPclient.Connect($broadcastAddr, $udpPort) \n\t[void]$UDPclient.Send($packet, 102)  \n}\n```\n\n----------------------------------------\n\nTITLE: Handling Queen and Pawn Moves with Promotion in PowerShell\nDESCRIPTION: This PowerShell code processes chess moves, especially for queens and pawns, verifying their legality by checking for obstructions and correct movement patterns. It manages pawn promotions by prompting the user to select the promotion type and updates board state, including capturing, repositioning, and icon changes. Dependencies include a populated $board array, predefined $Empty piece, valid positions, and utility functions such as Update-Board, Publish-Board, and Test-Gamestatus. Inputs are current and desired positions, and outputs involve board modifications and log updates. The snippet expects an interactive shell for promotions and requires correct setup of global piece variables.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ($board[($CurrentColumn - $i) , ($CurrentRow - $i)] -ne $Empty) {\n    Write-Error \"Illegal Queen Move\"\n    Publish-Board\n    break\n}\n}\n}\n}\n}\n$moveSuccess = $true\nif ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n    $attack = $true\n}\n} elseif (($MoveX -ne 0 -and $MoveY -eq 0) -or `\n        ($MoveX -eq 0 -and $MoveY -ne 0)) {\n    if ($MoveX -gt 0) {\n        for ($i = 1; $i -lt $MoveX; $i++) {\n            if ($board[($CurrentColumn + $i), $CurrentRow] -ne $Empty) {\n                    Write-Error \"Illegal Queen Move\"\n                    Publish-Board\n                    break\n            }\n        }\n    } elseif ($MoveX -lt 0) {\n        for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n            if ($board[($CurrentColumn - $i), $CurrentRow] -ne $Empty) {\n                    Write-Error \"Illegal Queen Move\"\n                    Publish-Board\n                    break\n            }\n        }\n    } elseif ($MoveY -gt 0) {\n        for ($i = 1; $i -lt $MoveY; $i++) {\n            if ($board[$CurrentColumn, ($CurrentRow + $i)] -ne $Empty) {\n                    Write-Error \"Illegal Queen Move\"\n                    Publish-Board\n                    break\n            }\n        }\n    } else {\n        for ($i = 1; $i -lt [math]::abs($MoveY); $i++) {\n            if ($board[$CurrentColumn, ($CurrentRow - $i)] -ne $Empty) {\n                    Write-Error \"Illegal Queen Move\"\n                    Publish-Board\n                    break\n            }\n        }\n    }\n    $moveSuccess = $true\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $attack = $true\n    }\n} else {\n    Write-Error \"Illegal Queen Move\"\n}\n}\n}\n\nif ($moveSuccess -eq $true) {\n    if ($attack -eq $true -and $ep -eq $false) {\n        $board[$DesiredColumn, $DesiredRow].Alive = $false\n        $board[$DesiredColumn, $DesiredRow].CurrentPosition = $null\n        $board[$DesiredColumn, $DesiredRow].CurrentRow = $null\n        $board[$DesiredColumn, $DesiredRow].CurrentColumn = $null\n    }\n\n    #Pawn Promotion logic\n    if (($pc.GetType().Name -eq 'Pawn') -and ($DesiredRow -eq 0)) {\n        [ValidateSet('Knight', 'Bishop', 'Rook', 'Queen')]$ptype = Read-Host 'Promote black pawn to'\n        \n        $promote = $true\n        $pc.Type = $ptype\n        \n        switch ($ptype) {\n            'Knight' {\n                $pc.Icon = '♞'\n                $pc.Symbol = 'N'\n            }\n            'Bishop' {\n                $pc.Icon = '♝'\n                $pc.Symbol = 'B'\n            }\n            'Rook' {\n                $pc.Icon = '♜'\n                $pc.Symbol = 'R'\n            }\n            'Queen' {\n                $pc.Icon = '♛'\n                $pc.Symbol = 'Q'\n            }\n        }\n    } elseif (($pc.GetType().Name -eq 'Pawn') -and ($DesiredRow -eq 7)) {\n        [ValidateSet('Knight', 'Bishop', 'Rook', 'Queen')]$ptype = Read-Host 'Promote white pawn to'\n        \n        $promote = $true\n        $pc.Type = $ptype\n\n        switch ($ptype) {\n            'Knight' {\n                $pc.Icon = '♘'\n                $pc.Symbol = 'N'\n            }\n            'Bishop' {\n                $pc.Icon = '♗'\n                $pc.Symbol = 'B'\n            }\n            'Rook' {\n                $pc.Icon = '♖'\n                $pc.Symbol = 'R'\n            }\n            'Queen' {\n                $pc.Icon = '♕'\n                $pc.Symbol = 'Q'\n            }\n        }\n    }\n    \n    $board[$CurrentColumn, $CurrentRow] = $Empty\n    $pc.CurrentPosition = $dst.ToUpper()\n    $pc.CurrentRow = $DesiredRow\n    $pc.CurrentColumn = $DesiredColumn\n\n    Update-Board\n\n    #Check logic\n    #TODO: Shouldn't check when king is captured Issue 25\n    Test-Gamestatus\n    if ($Script:gameStatus -eq [gamestatus]::ongoing) {\n        [Array]$curWhite = $Script:WhitePieces | Where-Object {$_.Alive -eq $true}\n        [Array]$curBlack = $Script:BlackPieces | Where-Object {$_.Alive -eq $true}\n\n        if ($Script:whiteTurn -eq $true) {\n            foreach ($whitePiece in $curWhite) {\n                if ($(Test-Move $whitePiece.CurrentPosition $Script:bK.CurrentPosition)[0] -eq $true) {\n                    $check = $true\n                }\n            }\n        } else {\n            foreach ($blackPiece in $curBlack) {\n                if ($(Test-Move $blackPiece.CurrentPosition $Script:wK.CurrentPosition)[0] -eq $true) {\n                    $check = $true\n                }\n            }\n        }\n    }\n    \n    #Update the log, advance turn\n    Update-Log $src $dst $pc.Symbol $attack $castle $promote $ep $check\n    $Script:turnCounter += 1\n    $Script:whiteTurn = !($Script:whiteTurn)\n} else {\n    Read-Input\n}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example usage of install-calibre-server.ps1\nDESCRIPTION: Shows a basic example of running the script with default parameters, displaying the first step of the installation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-calibre-server.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-calibre-server.ps1\n⏳ (1/5) Updating package infos...\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open Documents Folder with Error Handling\nDESCRIPTION: This code snippet defines a PowerShell script that resolves the path to the user's Documents directory, verifies its existence, and launches File Explorer with this folder. It includes try-catch error handling to report issues if the folder doesn't exist or the script encounters errors. The script depends on an auxiliary script 'open-file-explorer.ps1' located in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-documents-folder.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the documents folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the user's documents folder.\n.EXAMPLE\n\tPS> ./open-documents-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = resolve-path \"$HOME/Documents\"\n\tif (-not(test-path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Documents folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Execution Policy on Windows (PowerShell)\nDESCRIPTION: Configures the PowerShell script execution policy to `RemoteSigned` for the current user scope. This allows running local scripts and signed remote scripts. Requires administrative privileges and may be overridden by Group Policy.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n> Set-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n----------------------------------------\n\nTITLE: Installing OctoPrint using Snap Package Manager in PowerShell\nDESCRIPTION: Installs OctoPrint via the snap package manager using the edge channel. The script includes error handling to catch and report any installation failures, as well as providing a hint for accessing the web interface.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-octoprint.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\ntry {\n\t\"⏳ Installing OctoPrint (snap 'octoprint-pfs', channel 'edge')...\"\n\n\t& sudo snap install octoprint-pfs --edge\n\tif ($lastExitCode -ne \"0\") { throw \"'snap install octoprint-pfs' exited with code $lastExitCode\" }\n\n\t\"HINT: Access Octoprint's web login at: http://<HOSTNAME>:5000\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Outlook for Windows using PowerShell\nDESCRIPTION: This PowerShell script removes the Outlook for Windows Appx package for all users using the Remove-AppxPackage cmdlet combined with Get-AppxPackage to find the correct package. It supports common PowerShell parameters including Verbose, Debug, and ErrorAction, facilitating detailed output and error management during execution. The script outputs status messages before and after the uninstallation and exits with status codes indicating success (0) or failure (1). It expects to be run with appropriate permissions to remove Appx packages and handles exceptions by reporting the error line and message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-outlook.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Outlook\n.DESCRIPTION\n\tThis PowerShell script uninstalls Outlook for Windows.\n.EXAMPLE\n\tPS> ./uninstall-outlook.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Uninstalling Outlook for Windows...\"\n\n\tRemove-AppxPackage -AllUsers -Package (Get-AppxPackage Microsoft.OutlookForWindows).PackageFullName\n\t\n\t\"✅ Outlook for Windows has been removed.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Declaration and Script Execution in PowerShell\nDESCRIPTION: This code snippet declares a parameter named `numIntegers` to specify the number of integers to sort, with a default value of 1000.  It generates a list of random integers, starts a stopwatch, calls the `BubbleSort`'s `Sort` method to sort the list, measures the elapsed time, formats the result to three decimal places, and outputs the sorting time. Finally, it exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-BubbleSort.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([int]$numIntegers = 1000)\n\n$list = (1..$NumIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[BubbleSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by BubbleSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Uninstall All Apps\nDESCRIPTION: This PowerShell script uninstalls all applications from the local computer. It uses `Get-AppxPackage` to retrieve all installed packages and then pipes them to `Remove-AppxPackage` for uninstallation. A try-catch block handles potential errors, displaying an error message if any occur.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-all-apps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls all apps\n.DESCRIPTION\n\tThis PowerShell script uninstalls all applications from the local computer. Useful for de-bloating Windows to clean up a PC quickly for an industrial use case without any security risks.\n.EXAMPLE\n\tPS> ./uninstall-all-apps\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling all apps, please wait... (ignore any error messages about packages that can't be removed, it's fine)\"\n\n\tGet-AppxPackage | Remove-AppxPackage\n\t\n\t\"Uninstalled all applications, your PC is clean now.\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Navigate to System Logs Directory in PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to the logs directory. It uses OS detection to determine the appropriate path (/var/logs on Linux or Windows\\Logs on Windows) and provides feedback upon successful navigation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-logs.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the logs folder\n.DESCRIPTION\n\tThis PowerShell script changes the current working directory to the logs directory.\n.EXAMPLE\n\tPS> ./cd-logs\n\t📂/var/logs\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetLogsDir {\n\tif ($IsLinux) { return \"/var/logs\" }\n\t$WinDir = [System.Environment]::GetFolderPath('Windows')\n\treturn \"$WinDir\\Logs\"\n}\n\ntry {\n\t$path = GetLogsDir\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using cd-recent.ps1 Basic Command Example\nDESCRIPTION: Example showing how to execute the cd-recent.ps1 script from PowerShell to change to the Recent folder.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-recent.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-recent\n📂C:\\Users\\Markus\\AppData\\Roaming\\Microsoft\\Windows\\Recent\n```\n\n----------------------------------------\n\nTITLE: Executing the show-boston-city.ps1 Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the `show-boston-city.ps1` PowerShell script. It assumes the script is located in the current directory. No specific parameters are used in this example, leveraging the script's default behavior to open Google Maps at Boston city.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-boston-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-boston-city\n```\n\n----------------------------------------\n\nTITLE: Implementing Recursive Search Function in PowerShell\nDESCRIPTION: This PowerShell function, `Search-Folder`, recursively searches for files and folders matching a search term within a given path. It uses `Get-ChildItem` to retrieve child items, the `-match` operator to filter based on the search term and `Test-Path -PathType Container` to determine if an item is a directory.  It takes `$FilePath` and `$SearchTerm` as inputs and outputs matching file paths to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-filename.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"Results:\"\nfunction Search-Folder($FilePath, $SearchTerm) {\n    # Get children\n    $children = Get-ChildItem -Path $FilePath\n    # For each child, see if it matches the search term, and if it is a folder, search it too.\n    foreach ($child in $children) {\n        $name = $child.Name\n        if ($name -match $SearchTerm) {\n            Write-Host \"$FilePath\\$name\"\n        }\n        $isdir = Test-Path -Path \"$FilePath\\$name\" -PathType Container\n        if ($isdir) {\n            Search-Folder -FilePath \"$FilePath\\$name\" -SearchTerm $SearchTerm\n        }\n    }\n}\n# Call the search function\nSearch-Folder -FilePath $path -SearchTerm $term\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Implementing Italian Text-to-Speech in PowerShell\nDESCRIPTION: The complete PowerShell script `speak-italian.ps1`. It defines an optional `text` parameter. If the text is empty, it prompts the user. It then creates a SAPI Voice COM object, iterates through available voices to find one matching '*- Italian*', sets the voice, speaks the text, and exits. Basic error handling is included if no Italian voice is found or another error occurs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-italian.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Italian \n.DESCRIPTION\n\tThis PowerShell script speaks the given text with an Italian text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Italian text to speak\n.EXAMPLE\n\tPS> ./speak-italian.ps1 Ciao\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Italian text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Italian*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Italian text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling VLC using Winget Core Logic - PowerShell\nDESCRIPTION: Contains the main PowerShell script logic enclosed in a try/catch block. It initiates a stopwatch, invokes the 'winget uninstall' command using the specific ID for VLC ('XPDM1ZW6815MQM'), checks the exit code for success, calculates and displays the elapsed time, and uses exit codes (0 for success, 1 for failure) for script status.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-vlc.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls VLC\n.DESCRIPTION\n\tThis PowerShell script uninstalls the VLC media player from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-vlc.ps1\n\t⏳ Uninstalling VLC media player...\n\t✔️ Removal of VLC media player took 7 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Uninstalling VLC media player...\"\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t& winget uninstall --id XPDM1ZW6815MQM\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall VLC media player, is it installed?\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ Removal of VLC media player took $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a PowerShell Help Page with Colored Output in PowerShell\nDESCRIPTION: This script outputs a styled and informative welcome/help screen for PowerShell users, providing links to documentation, tutorials, FAQs, and a cheat sheet. Two functions, White and Blue, encapsulate colored output logic using Write-Host with specific foreground and background colors; these are used throughout the main script for consistent formatting. Dependencies include PowerShell v5+ and standard console output; common parameters like Verbose and Debug are supported. No inputs are required, and output is printed text; users interact by viewing links and help instructions. The script includes error handling and a successful exit procedure. Limitations: output formatting may depend on terminal support for color, and all links are encoded as plain text requiring manual navigation or Ctrl+Click.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-help.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Writes a help page\n.DESCRIPTION\n        This PowerShell script writes a PowerShell help page.\n.EXAMPLE\n        PS> ./write-help.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction White([string]$line) {\n\tWrite-Host $line -foregroundColor white -backgroundColor black -noNewline\n}\nfunction Blue([string]$line) {\n\tWrite-Host $line -foregroundColor blue -backgroundColor black -noNewline\n}\n\ntry {\n\tWhite \"█████████████████████████████████████`n\"\n\tWhite \"█████████████████████████████████████ 👋 Welcome to POWERSHELL $($PSVersionTable.PSVersion) $($PSVersionTable.PSEdition) edition`n\"\n\tWhite \"████ ▄▄▄▄▄ █▀ █▀▀█▀▀  ▄▄██ ▄▄▄▄▄ ████`n\"\n\tWhite \"████ █   █ █▀ ▄ █▀ ▀ ▀▄█ █ █   █ ████ Documentation: \"; Blue \"https://docs.microsoft.com/en-us/powershell`n\"\n\tWhite \"████ █▄▄▄█ █▀█ █▄▀▄▀ ▀ ▄▄█ █▄▄▄█ ████`n\"\n\tWhite \"████▄▄▄▄▄▄▄█▄█▄█ █▄█ █▄▀ █▄▄▄▄▄▄▄████ Tutorial: \"; Blue \"https://www.guru99.com/powershell-tutorial.html`n\"\n\tWhite \"████▄▄  ▄█▄▄  ▄█▄▄ █▀ ▀▀▀ ▀▄▀▄█▄▀████`n\"\n\tWhite \"████▀▄▄█▀█▄██ ▀ ▄▄▀ █▄█▀ ▀ ▄▀▀█▀█████ Video tutorials: \"; Blue \"https://www.youtube.com/results?search_query=PowerShell`n\"\n\tWhite \"█████ ▄▄█▄▄▀▄ ▀▄▀ ▄▄  ▀ ▀▀▀ ▀▄▄█▀████`n\"\n\tWhite \"████▄ ▀ ▄ ▄▄█  █▀██▄ ██▀▄█▄▄▀▄▄▀█████ Type 'Get-Help <NAME>' to display information about <NAME>`n\"\n\tWhite \"████  ████▄▄  ▄█▄▄▄██  ▀ ▀▀▀▀▄ █▀████`n\"\n\tWhite \"████ ███▄ ▄▀▀██ ▄█ ▄▄▄█▀ ▄▄ ██▄▀█████ FAQ's: \"; Blue \"https://github.com/fleschutz/PowerShell/blob/main/docs/FAQ.md`n\"\n\tWhite \"████▄█▄███▄▄▀▄▄▄▀ ▄▄ ▄▀▄ ▄▄▄ ▀   ████`n\"\n\tWhite \"████ ▄▄▄▄▄ █▄▄▄█▀█▄  ██  █▄█ ▄▄█▀████ 500+ sample scripts: \"; Blue \"https://github.com/fleschutz/PowerShell`n\"\n\tWhite \"████ █   █ █ ▀▄█▄ ▄▄  ▀█ ▄▄▄▄▀   ████`n\"\n\tWhite \"████ █▄▄▄█ █ ██ ▄█▄  ▄▀▀▀ ▄▄  ▄ █████ Cheat sheet: \"; Blue \"https://github.com/fleschutz/PowerShell/blob/main/docs/cheat-sheet.md`n\"\n\tWhite \"████▄▄▄▄▄▄▄█▄▄█▄▄████▄▄▄██▄▄▄█▄██████`n\"\n\tWhite \"█████████████████████████████████████ NOTE: use <Ctrl> + <Click> to open the links in your browser.`n\"\n\tWhite \"█████████████████████████████████████`n\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptWhiteNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing CrystalDiskInfo using Winget - PowerShell\nDESCRIPTION: This PowerShell snippet installs CrystalDiskInfo from the Microsoft Store using the winget command.  It specifies the source as 'msstore' and accepts package and source agreements. The script checks the exit code of the 'winget install' command to determine success or failure and displays a success or error message.  Dependencies: PowerShell and winget package manager.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-crystal-disk-info.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls CrystalDiskInfo\n.DESCRIPTION\n\tThis PowerShell script installs CrystalDiskInfo from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-crystal-disk-info.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing CrystalDiskInfo, please wait...\"\n\n\t& winget install \"CrystalDiskInfo\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"CrystalDiskInfo installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using pull-repos.ps1 Script with Parameter Specification\nDESCRIPTION: This snippet demonstrates the PowerShell command syntax for the pull-repos.ps1 script, showing how to specify the parent directory parameter and explaining the available options.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pull-repos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/pull-repos.ps1 [[-parentDir] <String>] [<CommonParameters>]\n\n-parentDir <String>\n    Specifies the path to the parent folder\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: cd-recent.ps1 Full Implementation\nDESCRIPTION: Complete implementation of the cd-recent.ps1 script that changes the working directory to the Windows 'Recent' folder. The script validates the folder's existence before changing location and provides appropriate error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-recent.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the 'recent' folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the 'recent' folder.\n.EXAMPLE\n\tPS> ./cd-recent\n\t📂C:\\Users\\Markus\\AppData\\Roaming\\Microsoft\\Windows\\Recent\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = [Environment]::GetFolderPath('Recent')\n\tif (-not(Test-Path \"$path\" -pathType container)) {\n\t\tthrow \"Recent folder at 📂$path doesn't exist (yet)\"\n\t}\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Firefox Browser - PowerShell Script\nDESCRIPTION: This PowerShell script gracefully closes the Firefox browser. It utilizes common parameters like Verbose, Debug, and ErrorAction to manage script behavior and logging. The script's output is the browser being closed. It has no specific dependencies and can be executed directly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-firefox-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nclose-firefox-browser.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of send-tcp.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to execute the send-tcp.ps1 script from the PowerShell console. This example sends the message \"TEST\" to the IP address 192.168.100.100 on port 8080.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-tcp.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./send-tcp 192.168.100.100 8080 \"TEST\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage: write-in-emojis.ps1 (PowerShell)\nDESCRIPTION: Provides a concrete example demonstrating how to execute the script from the PowerShell command line with the -text parameter set to a sample string. It also illustrates the expected output after the script performs the word-to-emoji replacements.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-in-emojis.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-in-emojis.ps1 \"I love my folder\"\nI💘️my📂\n```\n\n----------------------------------------\n\nTITLE: Launching Audacity Manual Webpage using PowerShell\nDESCRIPTION: This snippet outlines how to invoke the 'show-audacity-manual.ps1' script, which opens the default web browser to the Audacity online manual page. It supports PowerShell common parameters such as Verbose and Debug to control script behavior. No additional inputs are required beyond optional common parameters; the output is launching the browser window to the manual.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-audacity-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-audacity-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-audacity-manual\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits in Normal Format in PowerShell\nDESCRIPTION: This snippet is a default option that lists commits in a normal format if the specified format parameter does not match any other format. It simply executes `git log` without custom formatting. It throws an error if git log fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t} else {\n\t\t\"\"\n\t\t\"List of Git Commits\"\n\t\t\"-------------------\"\n\t\t& git -C \"$pathToRepo\" log\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git log' failed\" }\n\t}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CrystalDiskMark with winget in PowerShell\nDESCRIPTION: This PowerShell script uninstalls CrystalDiskMark using the `winget` package manager. It first displays a message indicating the uninstall process. Then, it executes the `winget uninstall` command targeting the CrystalDiskMark application. The script checks the exit code of the `winget` command and throws an error if the uninstallation fails. Finally, it informs the user that CrystalDiskMark has been uninstalled and exits with a success code, or handles any errors that may occur with an error message and an exit code of 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-crystal-disk-mark.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls CrystalDiskMark\n.DESCRIPTION\n\tThis PowerShell script uninstalls CrystalDiskMark from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-crystal-disk-mark\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling CrystalDiskMark, please wait...\"\n\n\t& winget uninstall \"CrystalDiskMark Shizuku Edition\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall CrystalDiskMark, is it installed?\" }\n\n\t\"CrystalDiskMark is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Path to Windows Environment Variables via Registry (PowerShell)\nDESCRIPTION: Add-PathTToSettings appends a given directory to the PATH environment variable in the Windows registry for either User or Machine hive, ensuring validity via Test-PathNotInSettings. Requires PowerShell, .NET, and registry update permissions. Key parameters: $Path (validated), $Target (User/Machine). For $Target=User, HKCU is updated; for Machine, HKLM. Handles expand/normal string types automatically. Throws on registry access errors. Outputs nothing, operates by side effect.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Add-PathTToSettings {\n    [CmdletBinding()]\n    param(\n        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]\n        [ValidateNotNullOrEmpty()]\n        [ValidateScript({Test-PathNotInSettings $_})]\n        [string] $Path,\n\n        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]\n        [ValidateNotNullOrEmpty()]\n        [ValidateSet([System.EnvironmentVariableTarget]::User, [System.EnvironmentVariableTarget]::Machine)]\n        [System.EnvironmentVariableTarget] $Target = ([System.EnvironmentVariableTarget]::User)\n    )\n\n    if (-not $IsWinEnv) {\n        return\n    }\n\n    if ($Target -eq [System.EnvironmentVariableTarget]::User) {\n        [string] $Environment = 'Environment'\n        [Microsoft.Win32.RegistryKey] $Key = [Microsoft.Win32.Registry]::CurrentUser.OpenSubKey($Environment, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree)\n    } else {\n        [string] $Environment = 'SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment'\n        [Microsoft.Win32.RegistryKey] $Key = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey($Environment, [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree)\n    }\n\n    # $key is null here if it the user was unable to get ReadWriteSubTree access.\n    if ($null -eq $Key) {\n        throw (New-Object -TypeName 'System.Security.SecurityException' -ArgumentList \"Unable to access the target registry\")\n    }\n\n    # Get current unexpanded value\n    [string] $CurrentUnexpandedValue = $Key.GetValue('PATH', '', [Microsoft.Win32.RegistryValueOptions]::DoNotExpandEnvironmentNames)\n\n    # Keep current PathValueKind if possible/appropriate\n    try {\n        [Microsoft.Win32.RegistryValueKind] $PathValueKind = $Key.GetValueKind('PATH')\n    } catch {\n        [Microsoft.Win32.RegistryValueKind] $PathValueKind = [Microsoft.Win32.RegistryValueKind]::ExpandString\n    }\n\n    # Evaluate new path\n    $NewPathValue = [string]::Concat($CurrentUnexpandedValue.TrimEnd([System.IO.Path]::PathSeparator), [System.IO.Path]::PathSeparator, $Path)\n\n    # Upgrade PathValueKind to [Microsoft.Win32.RegistryValueKind]::ExpandString if appropriate\n    if ($NewPathValue.Contains('%')) { $PathValueKind = [Microsoft.Win32.RegistryValueKind]::ExpandString }\n\n    $Key.SetValue(\"PATH\", $NewPathValue, $PathValueKind)\n}\n```\n\n----------------------------------------\n\nTITLE: Full Script: fetch-repo.ps1 (PowerShell)\nDESCRIPTION: The complete PowerShell script 'fetch-repo.ps1' designed to fetch remote updates for a Git repository. It includes comment-based help defining synopsis, description, parameters, examples, links, and notes. The script logic verifies Git installation, checks the repository path, executes 'git fetch --all' with options to include submodules and prune tags, measures execution time, and handles potential errors using a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/fetch-repo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tFetches updates into a Git repo\n.DESCRIPTION\n\tThis PowerShell script fetches remote updates into a local Git repository (including submodules).\n.PARAMETER path\n\tSpecifies the file path to the local Git repository (default is working directory).\n.EXAMPLE\n\tPS> ./fetch-repo.ps1\n\t⏳ (1/3) Searching for Git executable...  git version 2.41.0.windows.3\n\t⏳ (2/3) Checking local repository...     C:\\Repos\\rust\n\t⏳ (3/3) Fetching updates (including submodules)...\n\t✅ Updates fetched into 📂rust repo in 2s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/3) Searching for Git executable...    \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2/3) Checking local repository...       $path\"\n\tif (!(Test-Path \"$path\" -pathType container)) { throw \"Can't access folder: $path\" }\n\t$repoDirName = (Get-Item \"$path\").Name\n\n\tWrite-Host \"⏳ (3/3) Fetching updates (including submodules)...\"\n\t& git -C \"$path\" fetch --all --recurse-submodules --tags --prune --prune-tags --force --quiet\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch --all' failed with exit code $lastExitCode\" }\n\t\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Updates fetched into 📂$repoDirName repo in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory to Documents Folder in PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script determines the user's Documents folder path based on the operating system (Linux or Windows) and sets the working directory to that location. It accepts standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. The script performs error handling for missing folders and provides clear user feedback on both success and failure. Input: none; Output: sets directory and prints Documents folder path or error message. Requires PowerShell, no external dependencies.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-docs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the documents folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the documents folder.\n.EXAMPLE\n\tPS> ./cd-docs\n\t📂C:\\Users\\Markus\\Documents\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Documents\"\n\t} else {\n\t\t$path = [Environment]::GetFolderPath('MyDocuments')\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) {\n\t\tthrow \"Documents folder at 📂$path doesn't exist (yet)\"\n\t}\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Complete PowerShell Script to Uninstall Google Chrome via Winget\nDESCRIPTION: The full source code for the `uninstall-chrome.ps1` script. It uses the `winget` command-line tool to uninstall Google Chrome by its package ID (`Google.Chrome`). Includes basic try-catch error handling to check the exit code of the winget command and report success or failure, exiting with 0 on success and 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-chrome.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls the Chrome browser\n.DESCRIPTION\n\tThis PowerShell script uninstalls the Google Chrome browser from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-chrome.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Uninstalling Google Chrome...\"\n\n\t& winget uninstall --id Google.Chrome\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Google Chrome, is it installed?\" }\n\n\t\"✔️ Google Chrome is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Documentation for say-joke.ps1 - Joke Telling via Text-to-Speech\nDESCRIPTION: This script selects a random Chuck Norris joke from a CSV file located at 'Data/jokes.csv' and uses text-to-speech to vocalize it. It supports common PowerShell parameters such as Verbose and Debug for detailed output and troubleshooting. The script is designed for ease of use, with an example invocation provided, and is licensed under CC0, making it freely reusable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-joke.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## say-joke.ps1 - Say a random Chuck Norris joke by text-to-speech\n\nThis script selects a random joke in Data/jokes.csv and tells it by text-to-speech (TTS).\n\n## Parameters\n```powershell\n/home/markus/Repos/PowerShell/Scripts/say-joke.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./say-joke\n(listen and have fun)\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of say-joke.ps1*\n```\n\n----------------------------------------\n\nTITLE: Graceful Error Handling for Speech Operations\nDESCRIPTION: The try-catch block captures exceptions during speech operations, outputting an error message with the line number and error details if failures occur. Proper error handling ensures the script exits with a status code indicating failure, providing robustness for scripting environments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-test.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n} catch {\n\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Connecting to VPN using PowerShell\nDESCRIPTION: This PowerShell script attempts to connect to a VPN by iterating through available connections. It uses Get-VPNConnection to retrieve connections and rasdial.exe to establish the connection. The script includes error handling and checks for existing connections.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/connect-vpn.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConnects to the VPN\n.DESCRIPTION\n\tThis PowerShell script tries to connect to the VPN.\n.EXAMPLE\n\tPS> ./connect-vpn.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Connections = (Get-VPNConnection)\n\tforeach($Connection in $Connections) {\n\t\tif ($Connection.ConnectionStatus -eq \"Connected\") { throw \"Already connected to VPN $($Connection.Name)\" }\n\t\tif ($Connection.ConnectionStatus -ne \"Disconnected\") { continue }\n\t\t\"Connecting to VPN $($Connection.Name)...\"\n\t\t& rasdial.exe \"$($Connection.Name)\"\n\t\tif ($lastExitCode -ne \"0\") { throw \"Cannot establish connection\" }\n\t\t\"Connected now.\"\n\t\texit 0 # success \n\t}\n\tthrow \"No VPN connection available\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing h2static Installation and Configuration in PowerShell\nDESCRIPTION: This is the full PowerShell script for installing h2static. It includes comment-based help, defines parameters (`port`, `pathToMedia`), checks for a Linux environment, uses `sudo snap install` to install h2static, configures the serving path, index settings, and listening port via `sudo snap set`, measures execution time, and provides success or error messages. Requires `sudo` privileges and the `snap` command on a Linux system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-h2static.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls h2static\n.DESCRIPTION\n\tThis PowerShell script installs the tiny static Web server 'h2static'.\n.EXAMPLE\n\tPS> ./install-h2static.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$port = 8070, [string]$pathToMedia = \"/media/\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif (-not($IsLinux)) { throw \"Sorry, only Linux installation currently supported\" }\n\n\t\"⏳ (1/4) Installing h2static from Snap Store...\"\n\t& sudo snap install h2static\n\n\t$pathToMedia = Resolve-Path $pathToMedia\n\t\"⏳ (2/4) Configuring serve-path = $pathToMedia ...\"\n\t& sudo snap set h2static serve-path=$pathToMedia\n\t& sudo snap connect h2static:removable-media\n\n\t\"⏳ (3/4) Configuring disable-index = false...\"\n\t& sudo snap set h2static disable-index=false\n\n\t\"⏳ (4/4) Configuring listening-port = :$port...\"\n\t& sudo snap set h2static listen=:$port\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ h2static installed in $($elapsed)s, Web server runs at :$port, execute 'snap info h2static' for details.\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paint 3D Installation in PowerShell\nDESCRIPTION: This is the main PowerShell script logic for installing Paint 3D. It uses a try-catch block for error handling. Inside the try block, it executes `winget install` targeting 'Paint 3D' from the 'msstore' source, automatically accepting agreements. It checks the `$lastExitCode` of winget and throws an error if it's non-zero. If successful, it prints a success message and exits with code 0; otherwise, it catches errors, prints an error message including the line number and error details, and exits with code 1. The script depends on the `winget` command-line tool being available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-paint-3d.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Paint 3D\n.DESCRIPTION\n\tThis PowerShell script installs Paint 3D from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-paint-3d.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Paint 3D, please wait...\"\n\n\t& winget install \"Paint 3D\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Paint 3D installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Visual Studio Code using winget PowerShell\nDESCRIPTION: This is the core functional code block of the script. It attempts to uninstall 'Visual Studio Code' using the `winget uninstall` command. It includes a `try...catch` block to handle potential errors during the uninstallation process and checks the `$lastExitCode` to confirm success or report failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-visual-studio-code.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Visual Studio Code\n.DESCRIPTION\n\tThis PowerShell script uninstalls Visual Studio Code from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-visual-studio-code\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Visual Studio Code, please wait...\"\n\n\t& winget uninstall \"Visual Studio Code\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Visual Studio Code, is it installed?\" }\n\n\t\"Visual Studio Code is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Script - PowerShell\nDESCRIPTION: This example demonstrates how to execute the `open-topo-map-website.ps1` script from the PowerShell command line. No specific parameters are used in this basic example, running the script with its default behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-topo-map-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-topo-map-website\n\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage for Documents Directory Switch Script - PowerShell\nDESCRIPTION: This snippet demonstrates how to run the script to change to the Documents folder by executing './cd-docs'. It provides the expected output, showing the full path to the user's Documents directory. No parameters or additional dependencies are required to use this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-docs.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./cd-docs\n📂C:\\Users\\Markus\\Documents\n\n```\n\n----------------------------------------\n\nTITLE: Core Script Logic: Changing Directory\nDESCRIPTION: This PowerShell snippet contains the main logic of the cd-scripts.ps1 script. It uses `Resolve-Path` to find the absolute path of the script's directory, checks if the path exists and is a container using `Test-Path`, changes the current location using `Set-Location`, outputs the new path, and exits with a success code (0). A `try-catch` block handles potential errors during execution, outputting an error message with the line number and the error details before exiting with a failure code (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-scripts.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the PowerShell scripts folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the PowerShell scripts folder.\n.EXAMPLE\n\tPS> ./cd-scripts.ps1\n\t📁C:\\Repos\\PowerShell\\scripts\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"$PSScriptRoot\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"PowerShell scripts folder at 📁$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📁$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-new-york-city.ps1 (PowerShell)\nDESCRIPTION: Specifies the parameters for the `show-new-york-city.ps1` script. The script primarily utilizes PowerShell's common parameters (like Verbose, Debug, ErrorAction, etc.) for controlling execution behavior, without defining custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-new-york-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-new-york-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-miami-city.ps1 (PowerShell)\nDESCRIPTION: This snippet outlines the parameters accepted by the `show-miami-city.ps1` script. It explicitly states that the script supports the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) for controlling execution behavior, but defines no script-specific custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-miami-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-miami-city.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Main Flow in PowerShell Script\nDESCRIPTION: This snippet defines script-level parameters for 'Month' and 'Year', with defaults to the current month and year using (Get-Date). It contains the script's main logic for handling input values, validating parameter ranges, and orchestrating the selection of calendar output (month or year). Dependencies include PowerShell 3.0+ and access to the Get-Date cmdlet. Key parameters are 'Month' (1-12) and 'Year' (>0); inputting only a year will print the full year view, while providing a month also takes month/year. Outputs are printed calendar tables. Errors are handled and returned with exit code 1. This section must run within a PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-calendar.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([int]$Month = (Get-Date).Month, [int]$Year = (Get-Date).Year)\ntry {\n\tSet-Variable -name daysLine -option Constant -value \"Su  Mo  Tu  We  Th  Fr  Sa \"\n\n\tif ($year -lt 0) { throw \"Year parameter must be greater than 0\" }\n\tif ($month -lt 0) { throw \"Month parameter must be between 1 and 12\" }\n\n\tif (($month -gt 12) -and ($year -eq (Get-Date).Year)) {\n\t\t$year = $month\n\t\t$month = 0\n\t} elseif (($month -gt 12) -and ($year -ne (Get-Date).Year)) {\n\t\tthrow \"Month parameter must be between 1 and 12\"\n\t}\n\tif ($month -ne 0) {\n\t\tPrint-Month $month $year\n\t} else {\n\t\tPrint-Year $year\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Saving a Screenshot with PowerShell\nDESCRIPTION: This PowerShell script captures a single screenshot of the user's entire virtual screen and saves it as a PNG file in the specified target folder, defaulting to the user's screenshots folder if none is provided. It includes helper functions to determine the appropriate screenshots folder depending on the OS (Windows or Linux) and to perform the screenshot capture using .NET's System.Windows.Forms and Drawing assemblies. The script supports common PowerShell parameters and provides error handling and timestamped filenames to avoid overwriting existing images.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/save-screenshot.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSaves a single screenshot\n.DESCRIPTION\n\tThis PowerShell script takes a single screenshot and saves it into a target folder (default is the user's screenshots folder).\n.PARAMETER TargetFolder\n\tSpecifies the target folder (the user's screenshots folder by default)\n.EXAMPLE\n\tPS> ./save-screenshot\n \t✅ screenshot saved to C:\\Users\\Markus\\Pictures\\Screenshots\\2021-10-10T14-33-22.png\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$TargetFolder = \"\")\n\nfunction GetScreenshotsFolder {\n        if ($IsLinux) {\n                $Path = \"$HOME/Pictures\"\n                if (-not(Test-Path \"$Path\" -pathType container)) { throw \"Pictures folder at $Path doesn\\'t exist (yet)\"}\n                if (Test-Path \"$Path/Screenshots\" -pathType container) { $Path = \"$Path/Screenshots\" }\n        } else {\n                $Path = [Environment]::GetFolderPath('MyPictures')\n                if (-not(Test-Path \"$Path\" -pathType container)) { throw \"Pictures folder at $Path doesn\\'t exist (yet)\" }\n                if (Test-Path \"$Path\\Screenshots\" -pathType container) { $Path = \"$Path\\Screenshots\" }\n        }\n        return $Path\n}\n\nfunction TakeScreenshot { param([string]$FilePath)\n\tAdd-Type -Assembly System.Windows.Forms            \n\t$ScreenBounds = [Windows.Forms.SystemInformation]::VirtualScreen\n\t$ScreenshotObject = New-Object Drawing.Bitmap $ScreenBounds.Width, $ScreenBounds.Height\n\t$DrawingGraphics = [Drawing.Graphics]::FromImage($ScreenshotObject)\n\t$DrawingGraphics.CopyFromScreen( $ScreenBounds.Location, [Drawing.Point]::Empty, $ScreenBounds.Size)\n\t$DrawingGraphics.Dispose()\n\t$ScreenshotObject.Save($FilePath)\n\t$ScreenshotObject.Dispose()\n}\n\ntry {\n\tif (\"$TargetFolder\" -eq \"\") { $TargetFolder = GetScreenshotsFolder }\n\t$Time = (Get-Date)\n\t$Filename = \"$($Time.Year)-$($Time.Month)-$($Time.Day)T$($Time.Hour)-$($Time.Minute)-$($Time.Second).png\"\n\t$FilePath = (Join-Path $TargetFolder $Filename)\n\tTakeScreenshot $FilePath\n\n\t\"✅ screenshot saved to $FilePath\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Network Latency Measurement (ping-internet.ps1 PowerShell Script)\nDESCRIPTION: The complete source code for the ping-internet.ps1 PowerShell script. It defines the 'hosts' parameter, parses the host list, uses the .NET Ping class asynchronously (Net.NetworkInformation.Ping, Threading.Tasks.Task) to send pings, calculates min/max/average roundtrip times, handles potential errors using a try/catch block, and outputs the summarized results (average, range, loss) to the console. It exits with code 0 on success and 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-internet.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPings remote hosts to measure the latency \n.DESCRIPTION\n\tThis PowerShell script measures the ping roundtrip times from the local computer to remote ones (10 Internet servers by default).\n.PARAMETER hosts\n\tSpecifies the hosts to ping, seperated by commata (10 Internet servers by default)\n.EXAMPLE\n\tPS> ./ping-internet.ps1\n\t✅ Internet ping: 12ms (9...18ms range)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$hosts = \"bing.com,cnn.com,dropbox.com,github.com,google.com,ibm.com,live.com,meta.com,x.com,youtube.com\")\n\ntry {\n\t$hostsArray = $hosts.Split(\",\")\n\t$tasks = $hostsArray | foreach { (New-Object Net.NetworkInformation.Ping).SendPingAsync($_,1000) }\n\t[int]$min = 9999999\n\t[int]$max = [int]$avg = [int]$success = 0\n\t[int]$total = $hostsArray.Count\n\t[Threading.Tasks.Task]::WaitAll($tasks)\n\tforeach($ping in $tasks.Result) {\n\t\tif ($ping.Status -ne \"Success\") { continue }\n\t\t$success++\n\t\t[int]$latency = $ping.RoundtripTime\n\t\t$avg += $latency\n\t\tif ($latency -lt $min) { $min = $latency }\n\t\tif ($latency -gt $max) { $max = $latency }\n\t}\n\t[int]$loss = $total - $success\n\tif ($success -eq 0) {\n\t\tWrite-Host \"⚠️ Internet offline (100% ping loss)\"\n\t} elseif ($loss -gt 0) {\n\t\t[float]$speed = [math]::round([float]$avg / [float]$success, 1)\n\t\tWrite-Host \"✅ Online with $loss/$total ping loss and $($min)...$($max)ms latency - $($speed)ms average\"\n\t} else {\n\t\t[float]$speed = [math]::round([float]$avg / [float]$success, 1)\n\t\tWrite-Host \"✅ Internet ping: $($speed)ms ($min...$($max)ms range)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory to NextCloud Folder Using PowerShell\nDESCRIPTION: This PowerShell script attempts to set the current working directory to the user's NextCloud folder located in the home directory. It first resolves the absolute path of '~/NextCloud', verifies that the path exists and is a directory, then changes the location to that path. On success, it outputs the new directory path prefixed with an icon. On failure, it catches exceptions, outputs an error message with details, and exits with a failure code. It supports standard PowerShell common parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-nextcloud.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's NextCloud folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's NextCloud folder.\n.EXAMPLE\n\tPS> ./cd-nextcloud\n\t📂C:\\Users\\Markus\\NextCloud\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"~/NextCloud\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"No NextCloud folder at 📂$path - is NextCloud installed?\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the open-windy.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates the basic command to execute the `open-windy.ps1` script from the PowerShell prompt. Running this command will launch the default web browser and navigate to windy.com.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windy.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-windy\n```\n\n----------------------------------------\n\nTITLE: Using check-repos.ps1 Script with Parameters\nDESCRIPTION: Demonstrates the syntax and available parameters for the check-repos.ps1 script, including the optional parent directory parameter and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-repos.ps1 [[-parentDir] <String>] [<CommonParameters>]\n\n-parentDir <String>\n    Specifies the file path to the parent folder\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Querying Term Definitions Using PowerShell\nDESCRIPTION: This PowerShell script queries the meaning of a specified term by searching CSV dictionary files in a relative data directory. It accepts a single optional parameter '-term' for the query and supports common PowerShell parameters. The script iterates over dictionary CSV files, imports them, and matches the term in the 'TERM' column. If a definition is found, it prints a formatted message including the term's meaning and the dictionary source. If the term is unknown, it suggests a Google search URL. The script uses try-catch for error handling and exits with status codes indicating success or failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/what-is.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tExplains a term/abbreviation/etc.\n.DESCRIPTION\n\tThis PowerShell script queries the meaning of the given term/abbreviation/etc. and prints it.\n.PARAMETER term\n\tSpecifies the term to query\n.EXAMPLE\n\tPS> ./what-is VTOL\n\t💡 VTOL in aviation refers to: Vertical Take-Off and Landing\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$term = \"\")\n\ntry {\n\tif ($term -eq \"\" ) { $term = Read-Host \"Enter the term to query\" }\n\n\t$files = Get-ChildItem \"$PSScriptRoot/../data/dicts/*.csv\"\n\t$basename = \"\"\n\tforeach($file in $files) {\n\t\t$table = Import-CSV \"$file\"\n\t\tforeach($row in $table) {\n\t\t\tif ($row.TERM -ne $term) { continue }\n\t\t\t$basename = (Get-Item \"$file\").Basename -Replace \"_\",\" \"\n\t\t\t\"💡 $($row.TERM) in $basename refers to: $($row.MEANING)\"\n\t\t}\n\t}\n\tif ($basename -eq \"\") {\n\t\tWrite-Host \"🤷‍ Sorry, '$term' is unknown to me. Ctrl + click here to google it: \" -noNewline\n\t\tWrite-Host \"https://www.google.com/search?q=what+is+$term\" -foregroundColor blue\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Check Battery Script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the `check-battery.ps1` script from the PowerShell command line. It shows a typical output message indicating a low battery percentage and the estimated remaining time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-battery.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-battery.ps1\n⚠️ Battery 9% low, 54 min remaining\n\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example in PowerShell\nDESCRIPTION: This snippet provides a simple example of how to run the script from a PowerShell console. It shows the minimal command required to execute the script from the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-repos-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-repos-folder\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-sql-tables.ps1 Script\nDESCRIPTION: Demonstrates a basic command to execute the list-sql-tables.ps1 script from the PowerShell prompt. Note that this example is illustrative and requires providing actual values for the mandatory parameters (-server, -database, -username, -password) for execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-sql-tables.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-sql-tables.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing the ping-internet.ps1 Script (PowerShell)\nDESCRIPTION: Demonstrates how to run the ping-internet.ps1 script from the PowerShell console. Shows the command invocation and the typical output format, displaying the average ping time and the range (minimum to maximum).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-internet.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./ping-internet.ps1\n✅ Internet ping: 12ms (9...18ms range)\n```\n\n----------------------------------------\n\nTITLE: Displaying Planet Merkur in Google Maps with PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to invoke the show-planet-merkur script, which opens a web browser to display planet Merkur in Google Maps. The script supports PowerShell's common parameters such as Verbose and Debug, and can be executed directly from the shell. Input is not required; the script operates without arguments but supports standard PowerShell parameterization for enhanced logging and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-merkur.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-planet-merkur\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Set Working Directory to Dropbox\nDESCRIPTION: This PowerShell script changes the current working directory to the user's Dropbox folder. It resolves the path, verifies the folder exists, and updates the location. If the Dropbox folder is not found, it throws an error and exits with a non-zero status. Dependencies include PowerShell's Resolve-Path and Set-Location cmdlets. Inputs are optional parameters support, while outputs include the new path or an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-dropbox.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's Dropbox folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's Dropbox folder.\n.EXAMPLE\n\tPS> ./cd-dropbox\n\t📂C:\\Users\\Markus\\Dropbox\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"~/Dropbox\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"No Dropbox folder at 📂$path - is Dropbox installed?\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random PINs with list-pins.ps1 in PowerShell\nDESCRIPTION: Provides the full PowerShell script (list-pins.ps1) that generates a grid of random numeric PINs. It uses System.Random to generate digits (ASCII 48-57) and nested loops to format the output based on specified PinLength, Columns, and Rows parameters. Includes basic try-catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-pins.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists random PIN's\n.DESCRIPTION\n\tThis PowerShell script lists random PIN's.\n.PARAMETER PinLength\n\tSpecifies the PIN length\n.PARAMETER Columns\n\tSpecifies the number of columns\n.PARAMETER Rows\n\tSpecifies the number of rows\n.EXAMPLE\n\tPS> ./list-pins.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$PinLength = 5, [int]$Columns = 12, [int]$Rows = 30)\n\ntry {\n\twrite-output \"\"\n\t$Generator = New-Object System.Random\n\tfor ($j = 0; $j -lt $Rows; $j++) {\n\t\t$Line = \"\"\n\t\tfor ($k = 0; $k -lt $Columns; $k++) {\n\t\t\tfor ($i = 0; $i -lt $PinLength; $i++) {\n\t\t\t\t$Line += [char]$Generator.next(48,57)\n\t\t\t}\n\t\t\t$Line += \"   \"\n\t\t}\n\t\twrite-output $Line\n\t}\n\twrite-output \"\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing System Reboot Logic (PowerShell)\nDESCRIPTION: The complete reboot.ps1 script. It requires administrator privileges (`#Requires -RunAsAdministrator`), checks if the environment is Linux (using the built-in `$IsLinux` variable) to execute `sudo reboot`, or uses the `Restart-Computer` cmdlet on Windows. Includes basic try/catch error handling and exits with status code 0 on success or 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/reboot.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tReboots the computer (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script reboots the local computer immediately (needs admin rights).\n.EXAMPLE\n\tPS> ./reboot\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\tif ($IsLinux) {\n\t\t& sudo reboot\n\t} else {\n\t\tRestart-Computer\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Script Parameters and Usage in PowerShell\nDESCRIPTION: This snippet documents the command-line parameters accepted by the script, including an optional string parameter ARS representing the official regional key in Germany, and support for standard PowerShell common parameters like Verbose and Debug. It specifies parameter attributes such as position, requirement status, and pipeline input acceptance. The documentation includes usage examples and notes on expected input and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-nina-warnings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-nina-warnings.ps1 [[-ARS] <String>] [<CommonParameters>]\n\n-ARS <String>\n    Specifies the official regional key in Germany (\"Amtlicher Regionalschlüssel\", e.g. 09777, none by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Exploring WMI Classes\nDESCRIPTION: These commands explore the available WMI classes and namespaces. `Get-CimClass` retrieves WMI classes within a specified namespace. `Get-CimInstance` with the `__NAMESPACE` class retrieves child namespaces. These commands are Windows-specific.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CimClass -Namespace root\\cimv2                          # Explore the various WMI classes available in the root\\cimv2 namespace\nGet-CimInstance -Namespace root -ClassName __NAMESPACE      # Explore the child WMI namespaces underneath the root\\cimv2 namespace\n```\n\n----------------------------------------\n\nTITLE: Example Execution PowerShell\nDESCRIPTION: This code snippet demonstrates how to execute the `play-pig-sound.ps1` script in a PowerShell environment.  It shows the command used to run the script from the PowerShell prompt. No specific parameters are passed in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pig-sound.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-pig-sound\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters Definition\nDESCRIPTION: Defines the parameters accepted by the show-kansas-city.ps1 script, showing it accepts common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-kansas-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nshow-kansas-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Script - PowerShell Example\nDESCRIPTION: Provides a basic example of running the `log-off.ps1` script from the PowerShell command prompt. It shows invoking the script directly using its relative path `./`. No arguments are passed in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/log-off.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./log-off.ps1\n\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Common Parameters in PowerShell\nDESCRIPTION: This snippet shows the common parameters supported by the PowerShell script. These parameters allow users to control the script's verbosity, debugging options, error handling, and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-big-ben.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Handling Player Input for Chess Moves in PowerShell\nDESCRIPTION: Defines the `Read-Input` function to capture and validate player moves based on whose turn it is (`$Script:whiteTurn`). It prompts the current player for source and destination squares using algebraic notation (e.g., 'A2'), validates input length, checks piece ownership using the `$board` array, and handles resignation. Uses `try-catch` for error handling and calls `New-Move` upon valid input or recursively calls itself on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n#Read and clean text input before calling New-Move\nFunction Read-Input {\n    Write-Host \"\"\n    if($Script:whiteTurn) {\n        try {\n            [ValidateScript({$_.Length -eq 2 -or $_ -like '*resign*'})]$src = Read-Host 'White piece source'\n            if ($src -eq 'resign') {\n                $Script:gameStatus = [gamestatus]::blackWin\n                Update-Log -resign $true\n            } else {\n                [Int]$cc = Get-Column $src[0]\n                [Int]$cr = Get-Row $src[1]\n                [ValidateScript({$_.Color -eq 'White'})]$pc = $board[$cc, $cr]\n                [ValidateScript({$_.Length -eq 2})]$dst = Read-Host 'White piece destination'\n                New-Move $src $dst\n            }\n        } catch {\n            Write-Error \"Illegal input: Not a white piece or valid location\"\n            Write-Error $src\n            Read-Input\n        }\n    } else {\n        try {\n            [ValidateScript({$_.Length -eq 2 -or $_.Value -eq 'resign'})]$src = Read-Host 'Black piece source'\n            if ($src -like '*resign*') {\n                $Script:gameStatus = [gamestatus]::whiteWin\n                Update-Log -resign $true\n            }\n            [Int]$cc = Get-Column $src[0]\n            [Int]$cr = Get-Row $src[1]\n            [ValidateScript({$_.Color -eq 'Black'})]$pc = $board[$cc, $cr]\n            [ValidateScript({$_.Length -eq 2})]$dst = Read-Host 'Black piece destination'\n            New-Move $src $dst\n        } catch {\n            Write-Error \"Illegal input: Not a black piece or valid location\"\n            Read-Input\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BubbleSort Class in PowerShell\nDESCRIPTION: This snippet defines a PowerShell class named `BubbleSort` with a static method `Sort`. The `Sort` method implements the BubbleSort algorithm, iterating through the input list, comparing adjacent elements and swapping them if they are out of order. The method takes a list as input and sorts it in place.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-BubbleSort.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nclass BubbleSort {\n    static Sort($targetList) {\n        $n = $targetList.Count\n\n        for ($i = 0; $i -lt $n; $i+=1) {\n            for ($j = 0; $j -lt $n-1; $j+=1) {\n                if($targetList[$j] -gt $targetList[$j+1]) {\n                    $temp = $targetList[$j+1]\n                    $targetList[$j+1]=$targetList[$j]\n                    $targetList[$j]=$temp\n                }\n            }   \n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Common Parameters in remove-vm.ps1 (PowerShell)\nDESCRIPTION: This section indicates that the remove-vm.ps1 script supports standard PowerShell common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. This allows users to control script behavior, output, and error handling using familiar flags.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-vm.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-nbc-website.ps1\nDESCRIPTION: Simple example showing how to execute the script from a PowerShell prompt to open the NBC website in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-nbc-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-nbc-website\n```\n\n----------------------------------------\n\nTITLE: Installing CrystalDiskMark using winget (PowerShell)\nDESCRIPTION: This PowerShell script installs CrystalDiskMark from the Microsoft Store using the winget package manager. It begins by displaying an informative message to the user. Then, it executes the 'winget install' command to install CrystalDiskMark, specifying the application name, the source as the Microsoft Store and accepting package and source agreements. After installation attempts to determine whether the install was successful, displaying a success or failure message based on the exit code. Dependencies include winget, which must be installed and configured on the system. The script will output messages to the console reflecting progress. The script catches any errors and displays them.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-crystal-disk-mark.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls CrystalDiskMark\n.DESCRIPTION\n\tThis PowerShell script installs CrystalDiskMark from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-crystal-disk-mark.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing CrystalDiskMark, please wait...\"\n\n\t& winget install \"CrystalDiskMark Shizuku Edition\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"CrystalDiskMark installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Converting Image into Pixelated Frames\nDESCRIPTION: This script converts a single image into a series of pixelated frames, iterating over a specified number of frames. It utilizes ImageMagick 6 for image processing, supports command-line parameters, error handling, and progress output. Designed for automation and batch processing, it requires ImageMagick 6 installed and accessible in the system path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-image2pixelated-frames.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts an image into pixelated frames\n.DESCRIPTION\n\tThis PowerShell script converts a single image file into a series of pixelated frames in a target dir.\n\tRequires ImageMagick 6.\n.PARAMETER SourceFile\n\tSpecifies the path to the image source file\n.PARAMTER TargetDir\n\tSpecifies the path to the target folder\n.EXAMPLE\n\tPS> ./convert-image2pixelated-frames C:\\my_photo.jpg C:\\Temp\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$SourceFile = \"\", [string]$TargetDir = \"\", [int]$Frames = 700)\n\ntry {\n\tif ($SourceFile -eq \"\") { $SourceFile = Read-Host \"Enter file path to source image file\" }\n\tif ($TargetDir -eq \"\") { $TargetDir = Read-Host \"Enter file path to target directory\" }\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"⏳ (1/$Frames) Checking source image file...\"\n\tif (!(Test-Path \"$SourceFile\" -pathType leaf)) { throw \"Can't access source image file: $SourceFile\" }\n\t$Basename = (Get-Item \"$SourceFile\").Basename\n\n\t\"⏳ (2/$Frames) Searching for ImageMagick 6 executable...\"\n\t& convert-im6 --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'convert-im6' - make sure ImageMagick 6 is installed and available\" }\n\n\t$Factor = 0.001\n\tfor ($i = 0; $i -lt $Frames; $i++) {\n\t\t$FrameNo = '{0:d4}' -f $i\n\t\t$TargetFile = \"$TargetDir/frame_$($FrameNo).jpg\"\n\t\t\"⏳ ($($i + 3)/$Frames) Converting with pixelation factor $Factor to $TargetFile...\"\n\t\t$Coeff1 = 100.0 * $Factor\n\t\t$Coeff2 = 100.0 / $Factor\n\t\t& convert-im6 -scale $Coeff1% -scale $Coeff2% \"$SourceFile\" \"$TargetFile\"\n\t\t$Factor += 0.0005\n\t}\n\n\t[enum]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ converted image $SourceFile to $Frames pixelated frames in 📂$TargetDir in $Elapsed sec.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Exiting PowerShell Script Successfully (PowerShell)\nDESCRIPTION: Terminates the current PowerShell script and returns an exit code of 0, indicating successful execution. This is a standard practice for signaling success to calling processes or scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nexit 0\n```\n\n----------------------------------------\n\nTITLE: show-lissabon-city.ps1 - Displays Lisbon in Google Maps using PowerShell\nDESCRIPTION: This script launches the default web browser to open Google Maps centered on Lisbon, Portugal. It accepts common PowerShell parameters such as Verbose and Debug for enhanced scripting control. The script is intended for quick visualization of Lisbon without additional input, and requires PowerShell environment to execute.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-lissabon-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-lissabon-city.ps1 - Shows Lissabon in Google Maps\n\nThis script launches the Web browser and shows the city of Lissabon (Portugal) in Google Maps.\n\n## Parameters\n```powershell\n/home/markus/Repos/PowerShell/Scripts/show-lissabon-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./show-lissabon-city\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n```\n\n----------------------------------------\n\nTITLE: Increasing System Audio Volume via PowerShell\nDESCRIPTION: This PowerShell script sets the audio volume to 100% by sending volume up key presses using the Windows scripting shell COM object. It iterates from 0 to 100 in steps of 2, sending a volume increment keystroke each time, effectively increasing the volume by 2% per tick until fully maxed out. The script supports common PowerShell parameters (Verbose, Debug, ErrorAction, etc.) for flexible script control and includes try-catch error handling to exit gracefully with an error message if it fails. Inputs include standard PowerShell parameter bindings, and outputs are status codes (0 for success, 1 for failure) with optional console messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-fully-up.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTurns the volume fully up\n.DESCRIPTION\n\tThis PowerShell script turns the audio volume fully up to 100%.\n.EXAMPLE\n\tPS> ./turn-volume-fully-up\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$obj = New-Object -com wscript.shell\n\tfor ([int]$i = 0; $i -lt 100; $i += 2) {\n\t\t$obj.SendKeys([char]175) # each tick is +2%\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Display current time in US format using PowerShell\nDESCRIPTION: This PowerShell script gets the current time, sets the culture to en-US, and formats the time accordingly before printing it to the console. It uses a try-catch block to handle potential errors and exits with code 0 on success and 1 on failure. It depends on the Get-Date cmdlet and the System.Globalization.CultureInfo class.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-time.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites the current time \n.DESCRIPTION\n\tThis PowerShell script queries the current time and writes it in US format to the console.\n.EXAMPLE\n\tPS> ./write-time.ps1\n\t🕒7:20 PM\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentThread.currentCulture = [system.globalization.cultureInfo]\"en-US\"\n\t$CurrentTime = $((Get-Date).ToShortTimeString())\n\t\"🕒$CurrentTime\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing the ASCII Table in PowerShell Script\nDESCRIPTION: This full PowerShell script displays an ASCII table in the console, listing codes 0-57 with representations in decimal, octal, hexadecimal, binary, HTML character entities, symbols, and textual descriptions. The script requires only the standard PowerShell environment, supports common parameters, and prints pre-formatted strings without dynamic calculation. Outputs are text rows to the console; it is limited to the hardcoded characters included. The script exits with status 0 on success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ascii-table.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Lists the ASCII table\n.DESCRIPTION\n        This PowerShell script lists the ASCII table on the console.\n.EXAMPLE\n        PS> ./list-ascii-table.ps1\n\n\tDec    Oct   Hex     Binary    HTML    Symbol     Description\n\t---    ---   ---     ------    ----    ------     -----------\n\t  0    000    00    00000000   &#00;    NUL       Null character\n        ...\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\n\"\"\n\"Dec    Oct    Hex     Binary     HTML    Symbol    Description\"\n\"---    ---    ---     ------     ----    ------    -----------\"\n\"  0    000     00    00000000    &#00;    NUL      Null character\"\n\"  1    001     01    00000001    &#01;    SOH      Start of Header\"\n\"  2    002     02    00000010    &#02;    STX      Start of Text\"\n\"  3    003     03    00000011    &#03;    ETX      End of Text\"\n\"  4    004     04    00000100    &#04;    EOT      End of Transmission\"\n\"  5    005     05    00000101    &#05;    ENQ      Enquiry\"\n\"  6    006     06    00000110    &#06;    ACK      Acknowledge\"\n\"  7    007     07    00000111    &#07;    BEL      Bell\"\n\"  8    010     08    00001000    &#08;    BS       Backspace\"\n\"  9    011     09    00001001    &#09;    HT       Horizontal Tab\"\n\" 10    012     0A    00001010    &#10;    LF       Line Feed\"\n\" 11    013     0B    00001011    &#11;    VT       Vertical Tab\"\n\" 12    014     0C    00001100    &#12;    FF       Form Feed\"\n\" 13    015     0D    00001101    &#13;    CR       Carriage Return\"\n\" 14    016     0E    00001110    &#14;    SO       Shift Out\"\n\" 15    017     0F    00001111    &#15;    SI       Shift In\"\n\" 16    020     10    00010000    &#16;    DLE      Data Link Escape\"\n\" 17    021     11    00010001    &#17;    DC1      Device Control 1 (XON)\"\n\" 18    022     12    00010010    &#18;    DC2      Device Control 2\"\n\" 19    023     13    00010011    &#19;    DC3      Device Control 3 (XOFF)\"\n\" 20    024     14    00010100    &#20;    DC4      Device Control 4\"\n\" 21    025     15    00010101    &#21;    NAK      Negative Acknowledge\"\n\" 22    026     16    00010110    &#22;    SYN      Synchronize\"\n\" 23    027     17    00010111    &#23;    ETB      End of Transmission Block\"\n\" 24    030     18    00011000    &#24;    CAN      Cancel\"\n\" 25    031     19    00011001    &#25;    EM       End of Medium\"\n\" 26    032     1A    00011010    &#26;    SUB      Substitute\"\n\" 27    033     1B    00011011    &#27;    ESC      Escape\"\n\" 28    034     1C    00011100    &#28;    FS       File Separator\"\n\" 29    035     1D    00011101    &#29;    GS       Group Separator\"\n\" 30    036     1E    00011110    &#30;    RS       Record Separator\"\n\" 31    037     1F    00011111    &#31;    US       Unit Separator\"\n\" 32    040     20    00100000    &#32;    space    Space\"\n\" 33    041     21    00100001    &excl;   !        Exclamation mark\"\n\" 34    042     22    00100010    &quot;   `\"        Double quote\"\n\" 35    043     23    00100011    &num;    #        Number\"\n\" 36    044     24    00100100    &dollar; $        Dollar sign\"\n\" 37    045     25    00100101    &percnt; %        Percent\"\n\" 38    046     26    00100110    &amp;    &        Ampersand\"\n\" 39    047     27    00100111    &apos    '        Single quote\"\n\" 40    050     28    00101000    &lparen; (        Open parenthesis (or open bracket)\"\n\" 41    051     29    00101001    &rparen; )        Close parenthesis (or close bracket)\"\n\" 42    052     2A    00101010    &ast;    *        Asterisk\"\n\" 43    053     2B    00101011    &plus;   +        Plus\"\n\" 44    054     2C    00101100    &comma;  ,        Comma\"\n\" 45    055     2D    00101101    &#45;    -        Hyphen-minus\"\n\" 46    056     2E    00101110    &period; .        Period, dot or full stop\"\n\" 47    057     2F    00101111    &sol;    /        Slash or divide\"\n\" 48    060     30    00110000    &#48;    0        Zero\"\n\" 49    061     31    00110001    &#49;    1        One\"\n\" 50    062     32    00110010    &#50;    2        Two\"\n\" 51    063     33    00110011    &#51;    3        Three\"\n\" 52    064     34    00110100    &#52;    4        Four\"\n\" 53    065     35    00110101    &#53;    5        Five\"\n\" 54    066     36    00110110    &#54;    6        Six\"\n\" 55    067     37    00110111    &#55;    7        Seven\"\n\" 56    070     38    00111000    &#56;    8        Eight\"\n\" 57    071     39    00111001    &#57;    9        Nine\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Expanding Archive Files Using PowerShell with .NET Fallback (PowerShell)\nDESCRIPTION: This function, Expand-ArchiveInternal, expands compressed archive files to a destination directory using PowerShell\\'s native Expand-Archive cmdlet when available, and falls back to .NET\\'s System.IO.Compression.ZipFile for older environments. Requires PowerShell and, for the fallback, the .NET Framework on Windows. Inputs include the source path and destination directory. Outputs are the extracted files at the specified destination. Only supports zip format and assumes necessary permissions are available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Expand-ArchiveInternal {\n    [CmdletBinding()]\n    param(\n        $Path,\n        $DestinationPath\n    )\n\n    if((Get-Command -Name Expand-Archive -ErrorAction Ignore))\n    {\n        Expand-Archive -Path $Path -DestinationPath $DestinationPath\n    }\n    else\n    {\n        Add-Type -AssemblyName System.IO.Compression.FileSystem\n        $resolvedPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Path)\n        $resolvedDestinationPath = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($DestinationPath)\n        [System.IO.Compression.ZipFile]::ExtractToDirectory($resolvedPath,$resolvedDestinationPath)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Git Branch in PowerShell\nDESCRIPTION: This PowerShell script creates a new branch in a specified local Git repository and switches to it. It requires Git to be installed and accessible from the command line. The script accepts parameters for the new branch name and the path to the local repository (defaulting to the current working directory). It performs validation on inputs and repository status, fetches remote updates, creates and pushes the new branch, and updates submodules. The script outputs detailed progress and error messages, handles exceptions gracefully, and measures execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-branch.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a new Git branch \n.DESCRIPTION\n\tThis PowerShell script creates a new branch in a local Git repository and switches to it.\n.PARAMETER newBranch\n\tSpecifies the new Git branch name\n.PARAMETER pathToRepo\n\tSpecifies the file path to the local Git repository (current working directory per default)\n.EXAMPLE\n\tPS> ./new-branch.ps1 test123\n\t⏳ (1/6) Searching for Git executable...  git version 2.45.0\n\t⏳ (2/6) Checking local repository...     C:\\Repos\\rust\n\t⏳ (3/6) Fetching remote updates...       git@github.org:rust/rust.git\n\t⏳ (4/6) Creating new branch...\n\t⏳ (5/6) Pushing updates...\n\t⏳ (6/6) Updating submodules...\n\t✅ Created branch 'test123' based on 'main' in 📂rust repo in 18s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$newBranch = \"\", [string]$pathToRepo = \"$PWD\")\n\ntry {\n\tif ($newBranch -eq \"\") { $newBranch = Read-Host \"Enter the new Git branch name\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/6) Searching for Git executable...  \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2/6) Checking local repository...     $pathToRepo\"\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access repo folder: $pathToRepo\" }\n\t$result = (git -C \"$pathToRepo\" status)\n        if ($lastExitCode -ne \"0\") { throw \"'git status' in $pathToRepo failed with exit code $lastExitCode\" }\n\t$repoName = (Get-Item \"$pathToRepo\").Name\n\n\tWrite-Host \"⏳ (3/6) Fetching remote updates...       \" -noNewline\n\t& git -C \"$pathToRepo\" remote get-url origin\n        if ($lastExitCode -ne \"0\") { throw \"'git remote get-url origin' failed with exit code $lastExitCode\" }\n\n\t& git -C \"$pathToRepo\" fetch --all --recurse-submodules --prune --prune-tags --force\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed with exit code $lastExitCode\" }\n\n\t$currentBranch = (git -C \"$pathToRepo\" rev-parse --abbrev-ref HEAD)\n\tif ($lastExitCode -ne \"0\") { throw \"'git rev-parse' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (4/6) Creating new branch...\"\n\t& git -C \"$pathToRepo\" checkout -b \"$newBranch\"\n\tif ($lastExitCode -ne \"0\") { throw \"'git checkout -b $newBranch' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (5/6) Pushing updates...\"\n\t& git -C \"$pathToRepo\" push origin \"$newBranch\"\n\tif ($lastExitCode -ne \"0\") { throw \"'git push origin $newBranch' failed with exit code $lastExitCode\" }\n\n\t\"⏳ (6/6) Updating submodules...\"\n\t& git -C \"$pathToRepo\" submodule update --init --recursive\n\tif ($lastExitCode -ne \"0\") { throw \"'git submodule update' failed with exit code $lastExitCode\" }\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Created branch '$newBranch' based on '$currentBranch' in 📂$repoName repo in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Core Logic of watch-commits.ps1 Git Commit Monitor (PowerShell)\nDESCRIPTION: The main PowerShell script logic for watch-commits.ps1. It first checks for Git executable availability and validates the target repository path. Then, it enters an infinite loop: it fetches updates (`git fetch`), retrieves the latest commit log entry from the origin remote (`git log origin`), compares it with the previous entry, and if different, formats the timestamp (adjusting for timezone) and commit message. The new commit information is displayed using a typewriter effect via an external script (`write-typewriter.ps1`). The script sleeps for the specified `updateInterval` between checks. Basic error handling is included using a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-commits.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWatch Git commits live.\n.DESCRIPTION\n\tThis PowerShell script continuously lists the latest commits in a Git repository in real-time.\n.PARAMETER pathToRepo\n\tSpecifies the file path to the local Git repository.\n.EXAMPLE\n\tPS> ./watch-commits.ps1\n\n\tTIME   COMMIT\n\t----   ------\n\t11:25  Updated general.csv by Markus Fleschutz (HEAD -> main, origin/main, origin/HEAD)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pathToRepo = \"$PWD\", [int]$updateInterval = 60, [int]$speed = 10)\n\ntry {\n\tWrite-Progress \"Searching for Git executable...\"\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Progress \"Checking local Git repository...\"\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access directory: $pathToRepo\" }\n\tWrite-Progress -completed \"Done.\"\n\n\tWrite-Output \"\"\n\tWrite-Output \"TIME   COMMIT\"\n\tWrite-Output \"----   ------\"\n\t$prevLine = \"\"\n\t$tzOffset = (Get-Timezone).BaseUtcOffset.TotalSeconds\n\tfor (;;) {\n\t\t& git -C \"$pathToRepo\" fetch --all --recurse-submodules=no --jobs=1 --quiet\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed\" }\n\n\t\t$line = (git -C \"$pathToRepo\" log origin --format=format:'%at %s by %an%d' --max-count=1)\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git log origin' failed\" }\n\t\tif (\"$line\" -eq \"$prevLine\") { Start-Sleep -seconds $updateInterval; continue }\n\n\t\t$unixTimestamp = [int64]$line.Substring(0,10)\n\t\t$time = (Get-Date -day 1 -month 1 -year 1970 -hour 0 -minute 0 -second 0).AddSeconds($unixTimestamp)\n\t\t$time = $time.AddSeconds($tzOffset)\n\t\t$timeString = $time.ToString(\"HH:mm\")\n\t\t$message = $line.Substring(11)\n\t\t& \"$PSScriptRoot/write-typewriter.ps1\" \"$timeString  $message\" $speed\n\t\t$prevLine = $line\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Muting Audio Using WScript Shell in PowerShell\nDESCRIPTION: This script implements the muting functionality by instantiating a WScript.Shell COM object and sending a special key ([char]173) which toggles the mute state of the default audio device. It uses exception handling to output an error message and exit with a status code if the operation fails. Dependencies include the Windows operating system and its COM automation support; it requires the script to be executed with appropriate permissions. The script accepts no special input and outputs process exit codes as feedback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-off.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTurn audio off\n.DESCRIPTION\n\tThis PowerShell script mutes the default audio device immediately.\n.EXAMPLE\n\tPS> ./turn-volume-off\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$obj = new-object -com wscript.shell\n\t$obj.SendKeys([char]173)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Closing File Explorer Windows using PowerShell COM Object\nDESCRIPTION: This snippet implements the core functionality to gracefully close all open Windows Explorer windows. It creates a COM object for `Shell.Application`, retrieves its open windows via the `Windows()` method, and iterates through them using the `ForEach-Object` alias `%`, calling the `quit()` method on each window object. Finally, it exits with a success code `0`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-file-explorer.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the File Explorer \n.DESCRIPTION\n\tThis PowerShell script closes the Microsoft File Explorer application gracefully.\n.EXAMPLE\n\tPS> ./close-file-explorer\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n(New-Object -ComObject Shell.Application).Windows() | %{$_.quit()}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters for Script - PowerShell\nDESCRIPTION: This code block describes the common parameters supported by the PowerShell script. It specifies that the script accepts standard parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters are essential for controlling the script's behavior and enabling debugging capabilities.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/move-vm.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Writing Current Date in US Format PowerShell Script\nDESCRIPTION: This PowerShell script sets the current thread culture to 'en-US' to ensure the date is formatted properly, retrieves the current date, and writes it with a calendar emoji prefix. It supports standard PowerShell common parameters such as Verbose and Debug. If an error occurs during execution, it catches the exception, outputs an error message including the line number of failure, and exits with status 1; otherwise, it exits with status 0 on success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-date.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites the current date \n.DESCRIPTION\n\tThis PowerShell script determines and writes the current date in US format.\n.EXAMPLE\n\tPS> ./write-date\n\t📅12/25/2022\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentthread.currentculture = [system.globalization.cultureinfo]\"en-US\"\n\t$CurrentDate = (Get-Date).ToShortDateString()\n\t\"📅$CurrentDate\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying System Uptime (Linux/Windows) in PowerShell\nDESCRIPTION: This function, GetUptime, determines the number of days the host OS has been running. On Linux, it relies on Get-Uptime; on Windows, it retrieves LastBootUpTime using Get-CimInstance and calculates the timespan to now. Dependencies: built-in Get-Uptime, Get-CimInstance cmdlets. Output: integer, days since system boot. Input: none, reading from system. Works cross-platform but returns only full days.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-host.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction GetUptime {\n\tif ($IsLinux) {\n                $uptime = (Get-Uptime)\n        } else {\n                $lastBootTime = (Get-CimInstance Win32_OperatingSystem).LastBootUpTime\n                $uptime = New-TimeSpan -Start $lastBootTime -End (Get-Date)\n        }\n\treturn $uptime.Days\n}\n```\n\n----------------------------------------\n\nTITLE: List Encrypted Files Script Example - PowerShell\nDESCRIPTION: This example demonstrates how to use the list-encrypted-files.ps1 script to scan the C:\\Windows directory for encrypted files. The script outputs a summary of the number of encrypted files found and the time taken to complete the scan.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-encrypted-files.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-encrypted-files.ps1 C:\\Windows\n...\n✅ Found 0 encrypted files within 📂C:\\Windows in 41 sec\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to List Network Routes\nDESCRIPTION: This PowerShell script lists network routes on the local computer using the 'route print' command. It includes inline documentation, support for common parameters, and error handling to catch and report execution errors. Dependencies include PowerShell environment and the 'route' command available in Windows systems.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-routes.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists network routes\n.DESCRIPTION\n\tThis PowerShell script lists the network routes on the local computer.\n.EXAMPLE\n\tPS> ./list-network-routes.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t& route print\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of make-repos.ps1 Script\nDESCRIPTION: Shows the fundamental command-line syntax for executing the `make-repos.ps1` script. An optional parent directory path can be provided; otherwise, it operates on the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nmake-repos.ps1 [<parent-dir>]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Executing Welcome and Maintenance Tasks on Desktop Login\nDESCRIPTION: This script invokes a series of auxiliary PowerShell scripts to perform system checks, user messaging, repository updates, and news listening upon user login. It supports common PowerShell parameters for enhanced control and includes basic error handling that reports errors and exits with status codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/on-desktop-login.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tExecutes tasks on desktop login\n.DESCRIPTION\n\tThis PowerShell script executes some 'welcome' tasks on every desktop login by the user.\n\tNOTE: for installation on Windows create and put a symbolic link to this script into the Autostart folder (usually at: C:\\Users\\<USERNAME>\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup).\n.EXAMPLE\n\tPS> ./on-desktop-login.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\" \"\n\t& \"$PSScriptRoot/check-uptime.ps1\"\n\t& \"$PSScriptRoot/check-pending-reboot.ps1\"\n\t& \"$PSScriptRoot/check-firewall.ps1\"\n\t& \"$PSScriptRoot/check-smart-devices.ps1\"\n\t& \"$PSScriptRoot/check-swap-space.ps1\"\n\t& \"$PSScriptRoot/check-drives.ps1\"\n\t& \"$PSScriptRoot/open-dashboards.ps1\"\n\t\" \"\n\t& \"$PSScriptRoot/write-quote.ps1\"\n\t\" \"\n\t& \"$PSScriptRoot/list-news.ps1\"\n\t\" \"\n\t& \"$PSScriptRoot/write-joke.ps1\"\n\t\" \"\n\t& \"$PSScriptRoot/cd-repos.ps1\"\n\t& \"$PSScriptRoot/fetch-repos.ps1\"\n\t\" \"\n\t& \"$PSScriptRoot/watch-news.ps1\"\n\texit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Script Example in PowerShell\nDESCRIPTION: Demonstrates how to use the alert script with a sample alert message about a hard disk failure. Shows the basic syntax for calling the script with a string parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/alert.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./alert.ps1 \"Harddisk failure\"\n```\n\n----------------------------------------\n\nTITLE: Creating ZIP Archive and Handling Parameters - PowerShell\nDESCRIPTION: This PowerShell script creates a .ZIP archive from a specified folder. It takes the folder path as a parameter, defaulting to an empty string which prompts the user for input if not provided. It measures the time taken to compress the folder and includes error handling to catch any exceptions during the process. The `Compress-Archive` cmdlet is used to perform the compression. The script outputs the zip file path and execution time upon success, or an error message upon failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-zipfile.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a new .ZIP file from a folder (including subfolders)\n.DESCRIPTION\n\tThis PowerShell script creates a new .ZIP file from a folder (including subfolders).\n.PARAMETER folder\n\tSpecifies the path to the folder\n.EXAMPLE\n\tPS> ./new-zipfile.ps1 C:\\Windows\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$folder = \"\")\n\ntry {\n\tif ($folder -eq \"\" ) { $folder = read-host \"Enter the path to the folder to zip\" }\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$folder = resolve-path $folder\n\tcompress-archive -path $folder -destinationPath $folder.zip\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ created zip file $($folder).zip in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Cherry-Picking a Commit Across Multiple Branches (PowerShell)\nDESCRIPTION: This example invokes the cherry-picker.ps1 PowerShell script to cherry-pick a specified commit ID (93849f889) with the message \"Fix typo\" into three branches: v1, v2, and v3. This usage presumes the script and PowerShell environment are properly configured, and Git is available. All arguments are passed positionally, and merge conflicts will cause the script to stop.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cherry-picker.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS>./cherry-picker 93849f889 \"Fix typo\" \"v1 v2 v3\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vivaldi Browser Programmatically Using PowerShell\nDESCRIPTION: This PowerShell script automates the installation of the Vivaldi browser by calling the Windows Package Manager (winget) to perform the setup. The script includes error handling—if the installation step fails, it throws an error and exits with code 1. Required dependencies include PowerShell, winget, and appropriate privileges. The script outputs progress and error messages, expects no arguments, and exits with code 0 on success or 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vivaldi.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Vivaldi\n.DESCRIPTION\n\tThis PowerShell script installs the Vivaldi browser.\n.EXAMPLE\n\tPS> ./install-vivaldi.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Vivaldi, please wait...\"\n\n\t& winget install --id VivaldiTechnologies.Vivaldi --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Vivaldi installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"\\u26a0\\ufe0f Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running open-wifi-settings PowerShell Script Example\nDESCRIPTION: This example snippet shows how to execute the 'open-wifi-settings' script from the PowerShell command line interface. It requires that the script file be present in the current directory or the system path. No parameters are needed for default operation, and executing this command opens the Windows WLAN settings interface.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wifi-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-wifi-settings\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Crash Dumps in PowerShell\nDESCRIPTION: This PowerShell script changes the current directory to the crash dumps folder on Windows systems.  It first checks if the script is running on Linux and throws an error if it is. Then, it resolves the path to the user's home directory and appends \"\\AppData\\Local\\CrashDumps\". Finally, it checks for the existence of the crash dumps directory, changes the current directory to it using Set-Location, prints the new location and exits with a success code.  Error handling is included with a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-crashdumps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChange to the crash dumps folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the crash dumps directory (Windows only). Whenever a software crashes and crash dumps are enabled(!) a crash dump file is written. This file helps to identify the reason for the crash.\n.EXAMPLE\n\tPS> ./cd-crashdumps\n\t📂C:\\Users\\Markus\\AppData\\Local\\CrashDumps\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) { throw \"Sorry, Windows only\" }\n\n\t[string]$path = Resolve-Path -Path \"~\"\n\tif (!(Test-Path \"$path\" -pathType container)) { throw \"Home directory at $path doesn't exist (yet)\" }\n\n\t$path += \"\\AppData\\Local\\CrashDumps\"\n\tif (!(Test-Path \"$path\" -pathType container)) { throw \"Crashdumps directory at $path doesn't exist (yet)\" }\n\tSet-Location \"$Path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Microsoft Edge Installation Script in PowerShell\nDESCRIPTION: Complete PowerShell script that installs Microsoft Edge Browser from the Microsoft Store using winget. It includes error handling and success confirmation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-edge.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Microsoft Edge\n.DESCRIPTION\n\tThis PowerShell script installs the Microsoft Edge Browser from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-edge.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Microsoft Edge, please wait...\"\n\n\t& winget install \"Microsoft Edge Browser\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Microsoft Edge installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full implementation of write-location.ps1\nDESCRIPTION: Complete source code for the geolocation script that uses the ifconfig.co API to get location data and formats it for display. Includes error handling and comment documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-location.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites the current location \n.DESCRIPTION\n\tThis PowerShell script determines the location and writes it to the console.\n.EXAMPLE\n\tPS> ./write-location.ps1\n\t📍47.7278°,10.3192° near 87435 Kempten in Bavaria, Germany.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$location = (Invoke-WebRequest -URI http://ifconfig.co/json  -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\t$lat = $location.latitude\n\t$long = $location.longitude\n\t$city = $location.city\n\t$zip = $location.zip_code\n\t$region = $location.region_name\n\t$country = $location.country\n\tWrite-Output \"📍$lat°,$long° near $zip $city in $region, $country.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Change-Wallpaper Script Implementation\nDESCRIPTION: The full PowerShell script that defines a function to determine the temporary directory, downloads a random photo from Unsplash based on an optional category, and sets it as the desktop wallpaper.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/change-wallpaper.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChanges the wallpaper\n.DESCRIPTION\n\tThis PowerShell script downloads a random photo from Unsplash and sets it as desktop background.\n.PARAMETER Category\n\tSpecifies the photo category (beach, city, ...)\n.EXAMPLE\n\tPS> ./change-wallpaper \n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Category = \"\")\n\nfunction GetTempDir {\n        if (\"$env:TEMP\" -ne \"\") { return \"$env:TEMP\" }\n        if (\"$env:TMP\" -ne \"\")  { return \"$env:TMP\" }\n        if ($IsLinux) { return \"/tmp\" }\n        return \"C:\\Temp\"\n}\n\ntry {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Just a second...\"\n\n\t$Path = \"$(GetTempDir)/next_wallpaper.jpg\"\n\t& wget -O $Path \"https://source.unsplash.com/3840x2160?$Category\"\n\tif ($lastExitCode -ne \"0\") { throw \"Download failed\" }\n\n\t& \"$PSScriptRoot/set-wallpaper.ps1\" -ImageFile \"$Path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft Outlook via PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script attempts to launch the Microsoft Outlook application by checking for the presence of OUTLOOK.EXE in standard installation directories and starting the binary if found. If Outlook cannot be found, the script invokes a helper script (speak-english.ps1) to notify the user and exits with error code 1. Required dependencies include access to start-process, test-path cmdlets, and the speak-english.ps1 script in the same directory. The script supports standard PowerShell parameters and expects no input parameters for normal operation, while providing an example usage via './open-outlook'. Exits successfully with code 0 if Outlook is launched, otherwise 1, and provides error feedback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-outlook.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Microsoft Outlook app\n.DESCRIPTION\n\tThis script launches the Microsoft Outlook email application.\n.EXAMPLE\n\tPS> ./open-outlook\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TryToExec { param($Folder, $Binary)\n        if (test-path \"$Folder/$Binary\" -pathType leaf) {\n                start-process \"$Folder/$Binary\" -WorkingDirectory \"$Folder\"\n                exit 0 # success\n        }\n}\n\ntry {\n\tTryToExec \"C:\\Program Files\\Microsoft Office\\root\\Office16\" \"OUTLOOK.EXE\"\n\tTryToExec \"C:\\Programs\\Microsoft Office\\Office14\" \"OUTLOOK.EXE\"\n\tthrow \"It seems Outlook isn't installed yet.\"\n} catch {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Files\nDESCRIPTION: These commands delete files from the filesystem. `Remove-Item` deletes a file specified by its path. `[System.IO.File]::Delete` from the .NET Base Class Library is another way to delete a file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_15\n\nLANGUAGE: PowerShell\nCODE:\n```\nRemove-Item -Path testing.txt                               # Delete a file\n[System.IO.File]::Delete('testing.txt')                     # Delete a file using .NET Base Class Library\n```\n\n----------------------------------------\n\nTITLE: Invoking Default Email Client PowerShell\nDESCRIPTION: Contains the core implementation of the new-email.ps1 script. It defines a parameter for the email address, constructs a 'mailto:' URI, and uses the `Start-Process` cmdlet to open this URI with the default email client. Includes basic try-catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-email.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the default email client to write a new email\n.DESCRIPTION\n\tThis PowerShell script opens the default email client to write a new email.\n.PARAMETER EmailAddress\n\tSpecifies the email address fill in\n.EXAMPLE\n\tPS> ./new-email.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$EmailAddress = \"markus@fleschutz.de\")\n\ntry {\n\t$URL=\"mailto:$EmailAddress\"\n\tStart-Process $URL\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Parameters (PowerShell)\nDESCRIPTION: This snippet documents the standard PowerShell common parameters that the script supports. These parameters (like Verbose, Debug, ErrorAction) provide consistent control over script execution according to PowerShell's standard conventions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-powershell.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open FRITZ!Repeater Website\nDESCRIPTION: This script launches the FRITZ!Repeater website using the default web browser. It supports standard PowerShell parameters such as Verbose and Debug for enhanced control, and is intended for system administrators or users automating network device access. The script does not require external dependencies beyond PowerShell and the system's default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fritz-repeater-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-fritz-repeater-website.ps1 - Opens the FRITZ!Repeater website\n\nThis script launches the Web browser with the FRITZ!Repeater website.\n\n## Parameters\n```powershell\nopen-fritz-repeater-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```}\n\n## Example\n```powershell\nPS> ./open-fritz-repeater-website\n```}\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n```\n\n----------------------------------------\n\nTITLE: Defining parameters for check-drive-space.ps1 in PowerShell\nDESCRIPTION: This snippet defines the parameters accepted by the check-drive-space.ps1 script. It includes -driveName, a string specifying the drive to check (e.g., 'C'), and -minLevel, an integer specifying the minimum free space in bytes. The script supports common parameters like Verbose and Debug. Default value for driveName is empty string and for minLevel it is 10000000.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-drive-space.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-drive-space.ps1 [[-driveName] <String>] [[-minLevel] <Int64>] [<CommonParameters>]\n\n-driveName <String>\n    Specifies the drive name to check (e.g. \"C\")\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-minLevel <Int64>\n    Specifies the minimum level in bytes (10GB by default)\n    \n    Required?                    false\n    Position?                    2\n    Default value                10000000\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters (PowerShell)\nDESCRIPTION: This snippet defines the command-line parameters accepted by the export-to-manuals.ps1 script. It specifies the names, types, default values, and positional requirements for the `-filePattern` and `-targetDir` parameters, and notes support for common PowerShell parameters.  -filePattern specifies the script files to process (default: current directory *.ps1); -targetDir specifies the output directory for manuals (default: ../docs relative to script).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-to-manuals.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/export-to-manuals.ps1 [[-filePattern] <String>] [[-targetDir] <String>] [<CommonParameters>]\n\n-filePattern <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PSScriptRoot/*.ps1\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-targetDir <String>\n    \n    Required?                    false\n    Position?                    2\n    Default value                \"$PSScriptRoot/../docs\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Installed TTS Voices with System.Speech (PowerShell)\nDESCRIPTION: This PowerShell script (`list-voices.ps1`) uses the .NET `System.Speech` assembly to query and display installed text-to-speech (TTS) voices. It loads the required assembly, instantiates `System.Speech.Synthesis.SpeechSynthesizer`, retrieves voice information using `GetInstalledVoices()`, and formats the output using `Select-Object` to show Name, Culture, Gender, and Age. The script requires PowerShell version 2.0 or higher and includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-voices.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tList installed text-to-speech voices\n.DESCRIPTION\n\tThis PowerShell script queries the installed text-to-speech (TTS) voices and prints them to the console.\n.EXAMPLE\n\tPS> ./list-voices.ps1\n\n\tName                     Culture  Gender     Age\n\t----                     -------  ------     ---\n\tMicrosoft David Desktop  en-US      Male   Adult\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -Version 2.0\n\ntry {\n\tAdd-Type -AssemblyName System.Speech\n\t$Synth = New-Object System.Speech.Synthesis.SpeechSynthesizer\n\t$Synth.GetInstalledVoices() | \n\t\tSelect-Object -ExpandProperty VoiceInfo | \n\t\tSelect-Object -Property Name, Culture, Gender, Age\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters in PowerShell\nDESCRIPTION: Demonstrates the command-line syntax for the open-microsoft-solitaire.ps1 script, highlighting its support for standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc. No script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-solitaire.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-microsoft-solitaire.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Windows Backup Settings using PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the open-backup-settings.ps1 script which opens the Windows backup settings UI. It supports all standard PowerShell common parameters such as Verbose and Debug to aid in script execution and troubleshooting. The script does not require additional dependencies and serves as a shortcut to access system backup configuration easily.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-backup-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-backup-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-backup-settings\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of check-repos.ps1\nDESCRIPTION: The full script implementation that checks Git repositories, including parameter handling, folder enumeration, progress tracking, error handling, and execution time measurement.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repos.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks Git repositories\n.DESCRIPTION\n\tThis PowerShell script verifies the data integrity of all Git repositories in a folder.\n.PARAMETER parentDir\n\tSpecifies the file path to the parent folder\n.EXAMPLE\n\tPS> ./check-repos.ps1 C:\\Repos\n\t⏳ Checking parent folder 📂C:\\Repos...    16 subfolders\n\t⏳ Checking 📂rust repository (1/16)...\n\t...\n\t✅ Checked all 16 Git repos in 📂C:\\Repos in 356s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$parentDir = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$parentDirName = (Get-Item \"$parentDir\").Name\n\tWrite-Host \"⏳ Checking parent folder 📂$parentDir...       \" -noNewline\n\tif (-not(Test-Path \"$parentDir\" -pathType container)) { throw \"Can't access folder: $parentDir\" }\n\t$folders = (Get-ChildItem \"$parentDir\" -attributes Directory)\n\t$numFolders = $folders.Count\n\t\"$numFolders subfolders\"\n\n\t[int]$step = 1\n\tforeach ($folder in $folders) {\n\t\t\"`n⏳ Checking 📂$folder repository ($step/$numFolders)...\"\n\t\t& \"$PSScriptRoot/check-repo.ps1\" \"$folder\"\n\t\t$step++\n\t}\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Checked all $numFolders Git repos in 📂$parentDir in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of Japanese Text-to-Speech in PowerShell\nDESCRIPTION: Complete script implementation that uses Windows SAPI to speak Japanese text. It accepts a text parameter, searches for a Japanese TTS voice, and uses that voice to speak the provided text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-japanese.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Japanese\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Japanese text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Japanese text to speak\n.EXAMPLE\n\tPS> ./speak-japanese.ps1 \"ハロー\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Japanese text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Japanese*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Japanese text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing cd-videos.ps1 Script Example (PowerShell)\nDESCRIPTION: Provides an example of how to run the cd-videos.ps1 script from the PowerShell prompt. The output shows the script changing the current directory to the user's Videos folder (e.g., C:\\\\Users\\\\Markus\\\\Videos) and displaying the new path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-videos.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-videos\n📂C:\\Users\\Markus\\Videos\n\n```\n\n----------------------------------------\n\nTITLE: Querying Latest Tag\nDESCRIPTION: This snippet queries the latest tag in the Git repository. It uses the `git rev-list --tags --max-count=1` command to retrieve the commit ID of the latest tag and the `git describe --tags` command to retrieve the tag name, then output both. This allows you to check what is the latest tag and which commit it's associated with.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (6/10) Querying latest tag...           \" -noNewline\n        $latestTagCommitID = (git -C \"$FullPath\" rev-list --tags --max-count=1)\n        $latestTagName = (git -C \"$FullPath\" describe --tags $latestTagCommitID)\n        Write-Host \"$latestTagName (at commit $latestTagCommitID)\"\n```\n\n----------------------------------------\n\nTITLE: PowerShell Module Management (PowerShellGet)\nDESCRIPTION: Explores commands to manage PowerShell modules using the PowerShellGet module. Requires the PowerShellGet module to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command -Module PowerShellGet                           # Explore commands to manage PowerShell modules\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a simple example of how to run the `show-obs-studio-manual.ps1` script from a PowerShell console. The `./` prefix indicates running the script from the current directory. It shows the most basic execution without any specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-obs-studio-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-obs-studio-manual\n```\n\n----------------------------------------\n\nTITLE: Example Output of Listing Bluetooth Devices (PowerShell)\nDESCRIPTION: This example shows a typical execution of the `list-bluetooth-devices.ps1` script from the PowerShell console. It demonstrates the formatted output, including the `FriendlyName`, `Status`, and `InstanceId` columns for connected Bluetooth devices.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-bluetooth-devices.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-bluetooth-devices.ps1\n\n\n\nFriendlyName                 Status  InstanceId\n------------                 ------  ----------\nG3 Headset                   OK      BTHENUM\\DEV_FC58FA7A51C6\\8&152049BE&0&BLUETOOTHDEVICE_FC58FA7A51C6\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Metadata and Usage Documentation\nDESCRIPTION: This snippet provides metadata, parameter information, usage example, author notes, and related links for the PowerShell script. It documents the script's support for common parameters and references an external MP3 playback helper script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-donkey-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a donkey sound\n.DESCRIPTION\n\tThis PowerShell script plays a donkey sound.\n.EXAMPLE\n\tPS> ./play-donkey-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Validating Repository and Git Installation in PowerShell\nDESCRIPTION: This code block checks if the provided path is a valid directory and verifies that Git is installed and accessible. It tests for directory existence and then executes `git --version`. If either check fails, an appropriate error message is thrown, indicating an issue accessing the repository or using Git.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access directory: $pathToRepo\" }\n\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n```\n\n----------------------------------------\n\nTITLE: Listing WIFI Networks with netsh in PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script lists available WIFI network profiles by executing the system command 'netsh wlan show profile'. It accepts standard PowerShell common parameters such as Verbose and Debug, providing optional enhanced output and control (parameters include Verbose, Debug, ErrorAction, and others). In its try block, the script calls the command, then exits with a success code. If an error occurs, it displays a formatted error message with the line number and exits with a failure code. The script requires Windows with netsh utility available and is run from a PowerShell session; expected output is a list of saved WIFI networks, and error handling is included for robustness.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-wifi.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists WIFI\n.DESCRIPTION\n\tThis PowerShell script lists the WIFI networks.\n.EXAMPLE\n\tPS> ./list-wifi.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t& netsh wlan show profile\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Header and Parameters Documentation\nDESCRIPTION: This snippet provides the metadata, parameters, usage example, and author/license notes for the PowerShell script, facilitating understanding and usage by users. It specifies the file pattern parameter for selecting scripts, supported common parameters, and includes example command usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-ps2bat.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts PowerShell scripts to batch files\n.DESCRIPTION\n\tThis PowerShell script converts one or more PowerShell scripts to .bat batch files.\n.PARAMETER Filepattern\n\tSpecifies the file pattern\n.EXAMPLE\n\tPS> ./convert-ps2bat.ps1 *.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Installing Git for Windows Using PowerShell\nDESCRIPTION: This PowerShell script automates the installation of Git for Windows by invoking the 'winget' package manager with specific flags to ensure package agreements are accepted. The script includes error handling that throws an exception when the installation fails and outputs informative messages to the user. It supports common PowerShell parameters such as Verbose and Debug for enhanced script control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-git-for-windows.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Git for Windows\n.DESCRIPTION\n\tThis PowerShell script installs Git for Windows.\n.EXAMPLE\n\tPS> ./install-git-for-windows.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Git for Windows, please wait...\"\n\n\t& winget install --id Git.Git -e --source winget --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Git for Windows installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating the Matrix Visual Effect Using PowerShell\nDESCRIPTION: This PowerShell script simulates the Matrix digital rain effect by displaying characters in a streaming pattern. It supports standard PowerShell common parameters such as Verbose and Debug, allowing enhanced control and troubleshooting. The script accepts no additional inputs and outputs the visual simulation directly to the console, functioning as a fun demonstration of PowerShell scripting techniques.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/simulate-matrix.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nsimulate-matrix.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Retrieving System Media Path Using PowerShell\nDESCRIPTION: Defines a function that determines the path to the Windows system Media directory where sound files are stored. It checks the operating system and throws exceptions if run on unsupported platforms (Linux or MacOS). On Windows, it verifies the existence of the Windows directory and the Media subdirectory before returning the media path. It uses environment variables and path validation to ensure correctness.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-system-sounds.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction GetPathToSystemMedia {\n\tif ($IsLinux) {\n\t\tthrow \"Not supported for Linux yet\"\n\t} elseif ($IsMacOS) {\n\t\t throw \"Not supported for MacOS yet\"\n\t} else {\n\t\t$WinPath = Resolve-Path \"$env:WINDIR\"\n        \tif (-not(Test-Path \"$WinPath\" -pathType container)) { throw \"Windows folder at 📁$WinPath doesn't exist\" }\n\n\t\t$MediaPath = \"$WinPath\\Media\"\n        \tif (-not(Test-Path \"$MediaPath\" -pathType container)) { throw \"Windows media at 📁$MediaPath doesn't exist\" }\n\n\t\treturn $MediaPath\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Common Parameters\nDESCRIPTION: This section describes common parameters supported by the script. These parameters provide extended control over script execution, like verbose output, debugging information, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-cortana.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Usage Parameters for list-submodules.ps1\nDESCRIPTION: Defines the command syntax and parameters for the list-submodules.ps1 script, including the optional RepoDir parameter and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-submodules.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-submodules.ps1 [[-RepoDir] <String>] [<CommonParameters>]\n\n-RepoDir <String>\n    Specifies the path to the repository (current working directory by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Windows Folder using PowerShell\nDESCRIPTION: This PowerShell code demonstrates invoking the cd-windows.ps1 script to set the working directory to the Windows folder. It expects the script to be available and executable in the current context. The output displays the new working directory path as confirmation. Supports common PowerShell parameters and assumes a Windows operating environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-windows.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./cd-windows\n📂C:\\Windows\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: This PowerShell code defines the parameters for the `write-blue.ps1` script. It includes the `-text` parameter, which is an optional string. If no text is provided, the script will prompt the user for input.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-blue.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/write-blue.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the text to write\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Understanding Common Parameters for open-fire-place.ps1 (PowerShell)\nDESCRIPTION: This section outlines the common parameters accepted by the 'open-fire-place.ps1' script. These are standard PowerShell parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allowing for fine-grained control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fire-place.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-fire-place.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Calling Decrypt-File Script from PowerShell Command Line\nDESCRIPTION: This snippet demonstrates how to invoke the 'decrypt-file.ps1' script from the PowerShell command line with explicit path and password arguments. It expects two parameters: the full file path and the password as a string. The script decrypts the specified file and removes the encrypted source on completion. This approach assumes both PowerShell and the script are available, and is suitable for automating file decryption in batch or manual workflows.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/decrypt-file.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./decrypt-file.ps1 C:\\MyFile.txt \"123\"\n\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Git Repo - PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to a specified Git repository. It first retrieves the folder name, either from a parameter or by prompting the user. Then it checks for common repository locations (Repos, repos, Repositories, repositories, source/repos), constructs the full path, verifies the directory's existence, and finally, sets the working directory and displays Git branch information using `git status`. It uses error handling with `try-catch` to manage potential issues during the process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-repo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to a repo\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the given local Git repository.\n.PARAMETER folderName\n\tSpecifies the folder name of the Git repository\n.EXAMPLE\n\tPS> ./cd-repo.ps1 rust\n\t📂C:\\Repos\\rust · on branch: ## main ... origin/main\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$folderName = \"\")\n\ntry {\n\tif (\"$folderName\" -eq \"\") { $folderName = Read-Host \"Enter the Git repository's folder name\" }\n\n        if (Test-Path \"~/Repos\" -pathType Container) {           # try short name in home dir\n                $path = \"~/Repos\"\n        } elseif (Test-Path \"~/repos\" -pathType Container) {\n                $path = \"~/repos\"\n        } elseif (Test-Path \"~/Repositories\" -pathType Container) { # try long name\n                $path = \"~/Repositories\"\n        } elseif (Test-Path \"~/repositories\" -pathType Container) {\n                $path = \"~/repositories\"\n        } elseif (Test-Path \"/Repos\" -pathType Container) { # try short name in root dir\n                $path = \"/Repos\"\n        } elseif (Test-Path \"/repos\" -pathType Container) {\n                $path = \"/repos\"\n        } elseif (Test-Path \"/Repositories\" -pathType Container) { # try long name\n                $path = \"/Repositories\"\n        } elseif (Test-Path \"/repositories\" -pathType Container) {\n                $path = \"/repositories\"\n        } elseif (Test-Path \"~/source/repos\" -pathType Container) { # try Visual Studio default\n                $path = \"~/source/repos\"\n\t} else {\n\t\tthrow \"No Git repositories folder in your home directory or in the root folder yet\"\n\t}\n\t$path += \"/\" + $folderName\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"The path to 📂$path doesn't exist (yet)\" }\n\n\t$path = Resolve-Path \"$path\"\n\tSet-Location \"$path\"\n\tWrite-Host \"📂$path · on branch: \" -noNewline\n\t& git status --short --branch --show-stash\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full PowerShell Profile Setup Implementation\nDESCRIPTION: Complete implementation of the set-profile.ps1 script that sets up a user's PowerShell profile. It queries the profile path, creates the profile file if needed, and copies a predefined profile to that location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-profile.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the user's PowerShell profile\n.DESCRIPTION\n\tThis PowerShell script sets the PowerShell profile for the current user.\n.EXAMPLE\n\tPS> ./set-profile\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ (1/3) Querying path to PowerShell profile 'CurrentUserCurrentHost'...\"\n\t$PathToProfile = $PROFILE.CurrentUserCurrentHost\n\t\"$PathToProfile\"\n\n\t\"⏳ (2/3) Creating the profile (if non-existent)...\"\n\t$Null = New-Item -Path $profile -ItemType \"file\" -Force\n\n\t\"⏳ (3/3) Copying my-profile.ps1...\"\n\t$PathToRepo = \"$PSScriptRoot/..\"\n\tCopy-Item \"$PathToRepo/scripts/my-profile.ps1\" \"$PathToProfile\" -force\n\n\t\"✔️ updated your PowerShell profile by my-profile.ps1 - it gets active on next login\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing Temporary Directories and Secure PowerShell Package Download (PowerShell)\nDESCRIPTION: This block prepares a temporary working directory, sets the .NET TLS protocol to 1.2 to avoid secure channel errors, fetches the latest PowerShell release metadata (for daily builds), selects and downloads the package for the detected OS and architecture, and gracefully handles progress and errors. Dependencies: .NET (System.IO, System.Net), PowerShell, suitable permissions, and platform support for temporary directories and web requests. Inputs: global variables for architecture, destination, daily build choice, and install preferences. Outputs: downloaded package in temp directory. Limitations: Supports only certain architectures, can throw on network or file errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n$tempDir = Join-Path ([System.IO.Path]::GetTempPath()) ([System.IO.Path]::GetRandomFileName())\n$null = New-Item -ItemType Directory -Path $tempDir -Force -ErrorAction SilentlyContinue\ntry {\n    # Setting Tls to 12 to prevent the Invoke-WebRequest : The request was\n    # aborted: Could not create SSL/TLS secure channel. error.\n    $originalValue = [Net.ServicePointManager]::SecurityProtocol\n    [Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12\n\n    if ($Daily) {\n        $metadata = Invoke-RestMethod 'https://aka.ms/pwsh-buildinfo-daily'\n        $release = $metadata.ReleaseTag -replace '^v'\n        $blobName = $metadata.BlobName\n\n        # Get version from currently installed PowerShell Daily if available.\n        $pwshPath = if ($IsWinEnv) {Join-Path $Destination \"pwsh.exe\"} else {Join-Path $Destination \"pwsh\"}\n        $currentlyInstalledVersion = if(Test-Path $pwshPath) {\n            ((& $pwshPath -version) -split \" \")[1]\n        }\n\n        if($currentlyInstalledVersion -eq $release) {\n            Write-Verbose \"Latest PowerShell Daily already installed.\" -Verbose\n            return\n        }\n\n        if ($IsWinEnv) {\n            if ($UseMSI) {\n                $packageName = \"PowerShell-${release}-win-${architecture}.msi\"\n            } else {\n                $packageName = \"PowerShell-${release}-win-${architecture}.zip\"\n            }\n        } elseif ($IsLinuxEnv) {\n            $packageName = \"powershell-${release}-linux-${architecture}.tar.gz\"\n        } elseif ($IsMacOSEnv) {\n            $packageName = \"powershell-${release}-osx-${architecture}.tar.gz\"\n        }\n\n        if ($architecture -ne \"x64\") {\n            throw \"The OS architecture is '$architecture'. However, we currently only support daily package for x64.\"\n        }\n\n\n        $downloadURL = \"https://pscoretestdata.blob.core.windows.net/${blobName}/${packageName}\"\n        Write-Verbose \"About to download package from '$downloadURL'\" -Verbose\n\n        $packagePath = Join-Path -Path $tempDir -ChildPath $packageName\n        if (!$PSVersionTable.ContainsKey('PSEdition') -or $PSVersionTable.PSEdition -eq \"Desktop\") {\n            # On Windows PowerShell, progress can make the download significantly slower\n            $oldProgressPreference = $ProgressPreference\n            $ProgressPreference = \"SilentlyContinue\"\n        }\n\n        try {\n            Invoke-WebRequest -Uri $downloadURL -OutFile $packagePath\n        } finally {\n            if (!$PSVersionTable.ContainsKey('PSEdition') -or $PSVersionTable.PSEdition -eq \"Desktop\") {\n                $ProgressPreference = $oldProgressPreference\n            }\n        }\n\n```\n\n----------------------------------------\n\nTITLE: cd-up2.ps1 Parameter Syntax\nDESCRIPTION: Displays the command-line syntax for executing the cd-up2.ps1 script. It shows the script path and indicates support for common PowerShell parameters (Verbose, Debug, ErrorAction, etc.), which control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up2.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-up2.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-submodules.ps1\nDESCRIPTION: Shows a simple example of how to execute the list-submodules.ps1 script with a specific repository path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-submodules.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-submodules.ps1 C:\\MyRepo\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Common Parameters\nDESCRIPTION: This snippet documents the standard PowerShell common parameters that the `check-battery.ps1` script supports. It lists common parameters like Verbose, Debug, and ErrorAction, which provide standard error handling and output control capabilities.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-battery.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-battery.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Game Initialization and Main Loop in PowerShell\nDESCRIPTION: This segment configures console dimensions, initializes game variables including paddle positions, ball state, and scores. It clears the console and draws initial game elements. The main loop handles user input for paddle control, updates ball position, redraws game elements, and manages game flow until exit command.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n<# Initialization and Main Loop #>\n$ui = (Get-Host).ui\n$rui = $ui.rawui\n$console = [System.Console]::BufferWidth = [System.Console]::WindowWidth = $rui.MaxWindowSize.Width\n[System.Console]::BufferHeight = [System.Console]::WindowHeight = $rui.MaxWindowSize.Height\n\n$player1 = 5\n$player2 = 5\n$ball = @{\n    X = 25\n    Y = 10\n    Dx = 1\n    Dy = 1\n}\n$scorePlayer1 = 0\n$scorePlayer2 = 0\n[System.Console]::Clear()\nDrawPaddle $player1 $true\nDrawPaddle $player2 $false\nDrawScores\nDrawFooter\n[System.Console]::TreatControlCAsInput = $true\n\nwhile ($true) {\n    if ([System.Console]::KeyAvailable) {\n        $key = [System.Console]::ReadKey($true).Key\n\n        if ($key -eq \"W\" -and $player1 -gt 0) {\n            ClearPaddle $player1 $true\n            $player1--\n            DrawPaddle $player1 $true\n        } elseif ($key -eq \"S\" -and $player1 -lt [System.Console]::WindowHeight - 5) {\n            ClearPaddle $player1 $true\n            $player1++\n            DrawPaddle $player1 $true\n        } elseif ($key -eq \"UpArrow\" -and $player2 -gt 0) {\n            ClearPaddle $player2 $false\n            $player2--\n            DrawPaddle $player2 $false\n        } elseif ($key -eq \"DownArrow\" -and $player2 -lt [System.Console]::WindowHeight - 5) {\n            ClearPaddle $player2 $false\n            $player2++\n            DrawPaddle $player2 $false\n        } elseif ($key -eq \"Escape\") {\n            break\n        }\n    }\n\n    ClearBall $ball.X $ball.Y\n    UpdateBall\n    DrawBall $ball.X $ball.Y\n\n    DrawPaddle $player1 $true\n    DrawPaddle $player2 $false\n\n    Start-Sleep -Milliseconds 100\n}\n[System.Console]::Clear()\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Parameters for open-facebook.ps1 PowerShell Script\nDESCRIPTION: Shows the command syntax and available common parameters for the script that opens Facebook's website in the default browser. The script supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-facebook.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-facebook.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Execution - PowerShell\nDESCRIPTION: This snippet shows an example of how to execute the `show-cape-town-city.ps1` script in PowerShell. The example uses the relative path `./show-cape-town-city` to run the script, assuming it's located in the current directory. No specific input parameters are shown as the script uses default behavior of showing Cape Town in Google Maps.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-cape-town-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-cape-town-city\n```\n\n----------------------------------------\n\nTITLE: Script Usage Example with Parameters\nDESCRIPTION: Shows the command syntax and available parameters for the change-wallpaper.ps1 script, including the optional Category parameter and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/change-wallpaper.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/change-wallpaper.ps1 [[-Category] <String>] [<CommonParameters>]\n\n-Category <String>\n    Specifies the photo category (beach, city, ...)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter for Search Pattern in PowerShell\nDESCRIPTION: This code snippet defines a parameter named 'SearchPattern' of type String for the PowerShell script. It specifies that the parameter is optional (Required? false), is accepted at position 1, has a default value of '*', does not accept pipeline input, and does not accept wildcard characters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dir.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n-SearchPattern <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                *\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for write-rot13.ps1 in PowerShell\nDESCRIPTION: This snippet outlines the parameters accepted by the write-rot13.ps1 script. It details the optional `-text` parameter used to specify the input string and mentions support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-rot13.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-rot13.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the text to write\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Initializing Script Variables\nDESCRIPTION: This section initializes key variables and sets up dependencies for the script.  It requires administrative privileges for execution, which is indicated by the #Requires -RunAsAdministrator directive.  The script uses the `Add-Type` cmdlet to load the System.Windows.Forms assembly, providing the foundation for the graphical user interface.  The `$TaskName` variable sets the name of the scheduled task.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-reboot-task.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n# Skript zum erstellen bzw. Anpassen eine Neustarttasks\n# Stannek GmbH - Version 1.3 - 15.06.2023 ES\n\n# Diese Skript muss als Administrator ausgeführt werden, ansonsten wird es nicht gestartet\n#Requires -RunAsAdministrator\n\n# Parameter\n$TaskName = \"einmaliger Neustart\"\n\n# Assemblys laden\nAdd-Type -AssemblyName System.Windows.Forms\n```\n\n----------------------------------------\n\nTITLE: Changing Current Directory to Temporary Folder in PowerShell\nDESCRIPTION: This PowerShell script snippet defines a function GetTempDir to reliably find the temporary directory path across different environments (Windows %TEMP%, %TMP%, Linux /tmp) and then attempts to change the current location to this path using Set-Location. It includes error handling via a try-catch block to manage cases where the directory does not exist or other issues occur, printing the final path or an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-temp.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the temporary folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the temporary folder.\n.EXAMPLE\n\tPS> ./cd-temp\n\t📁C:\\Users\\Markus\\AppData\\Local\\Temp\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetTempDir {\n        if (\"$env:TEMP\" -ne \"\") { return \"$env:TEMP\" }\n        if (\"$env:TMP\" -ne \"\")  { return \"$env:TMP\" }\n        if ($IsLinux) { return \"/tmp\" }\n        return \"C:\\Temp\"\n}\n\ntry {\n\t$path = GetTempDir\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Temporary folder at 📁$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📁$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Windows Terminal with winget (PowerShell)\nDESCRIPTION: This PowerShell script uninstalls Windows Terminal. It uses the `winget` package manager to uninstall the application with the ID `Microsoft.WindowsTerminal`. The script checks the exit code of the `winget` command to determine success or failure and displays appropriate messages.  It requires Windows Terminal to be installed via `winget` and `winget` itself to be properly installed and configured.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-windows-terminal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Windows Terminal\n.DESCRIPTION\n\tThis PowerShell script uninstalls Windows Terminal from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-windows-terminal\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Windows Terminal, please wait...\"\n\n\t& winget uninstall --id Microsoft.WindowsTerminal\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Windows Terminal, is it installed?\" }\n\n\t\"Windows Terminal is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running the close-vlc.ps1 PowerShell Script\nDESCRIPTION: This sample demonstrates how to execute the 'close-vlc.ps1' script from the PowerShell command prompt, which initiates the shutdown process for VLC media player. No external arguments are required, but common PowerShell parameters may be used as needed. Returns success status upon closing the application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-vlc.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-vlc.ps1\n```\n\n----------------------------------------\n\nTITLE: Listing PowerShell Script Parameters\nDESCRIPTION: Documents the command-line parameters supported by the check-outlook.ps1 script. It explicitly shows the script path and name, indicating that it accepts standard PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-outlook.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-outlook.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Script PowerShell\nDESCRIPTION: Shows a basic command-line example of how to run the show-windows-manual.ps1 script. The example executes the script directly from the current directory using ./show-windows-manual. No arguments are passed in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-windows-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-windows-manual\n\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of cd-pics PowerShell Script\nDESCRIPTION: Demonstrates how to execute the cd-pics.ps1 script and shows its expected output when run. The example shows the script changing to the user's pictures directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-pics.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-pics\n📂C:\\Users\\Markus\\Pictures\n```\n\n----------------------------------------\n\nTITLE: Upgrade Ubuntu Script Parameters PowerShell\nDESCRIPTION: This snippet shows the parameters supported by the upgrade-ubuntu.ps1 PowerShell script, which include common parameters such as Verbose, Debug, ErrorAction, WarningAction, OutBuffer, and PipelineVariable. No specific parameters are defined within the script itself, relying on the common PowerShell parameters for control and configuration.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upgrade-ubuntu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/upgrade-ubuntu.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Closing Microsoft Paint Application using PowerShell\nDESCRIPTION: This script closes the Microsoft Paint application by using TaskKill to terminate the mspaint.exe process. If Microsoft Paint is not running, it uses a text-to-speech script to notify the user.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-microsoft-paint.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Microsoft Paint app \n.DESCRIPTION\n\tThis PowerShell script closes the Microsoft Paint application gracefully.\n.EXAMPLE\n\tPS> ./close-microsoft-paint.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im mspaint.exe\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Microsoft Paint isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Current Weather for Cities Using PowerShell\nDESCRIPTION: Defines the List-City-Weather function that retrieves current weather data from the wttr.in service for a fixed list of cities. For each city, it invokes multiple web requests to fetch weather icon, temperature, precipitation with humidity, wind, and sunrise/sunset times using specific format strings. The function outputs objects containing these weather attributes. The script requires an internet connection and uses Invoke-WebRequest with basic parsing and a custom user agent. This snippet also includes a try-catch block that calls the function, formats the output as a table with specified column widths, and exits with appropriate exit codes based on success or failure. Common PowerShell parameters are supported for enhanced control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-city-weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the weather of cities\n.DESCRIPTION\n\tThis PowerShell script lists the current weather conditions of cities world-wide (west to east).\n.EXAMPLE\n\tPS> ./list-city-weather.ps1\n\n\tCITY                TEMP          RAIN            WIND         SUN\n\t----                ----          ----            ----         ---\n\tHawaii ⛅️           +25°C         0.0mm 69%       ↙5km/h       06:49:15 → 17:47:57\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction List-City-Weather {\n\t$cities = @(\"Hawaii\",\"Los Angeles\",\"Mexico City\",\"Dallas\",\"Miami\",\"New York\",\"Rio de Janeiro\",\"Paris\",\"London\",\"Berlin\",\"Cape Town\",\"Dubai\",\"Mumbai\",\"Singapore\",\"Hong Kong\",\"Perth\",\"Peking\",\"Tokyo\",\"Sydney\")\n\tforeach($city in $cities) {\n\t\t$icon = (Invoke-WebRequest http://wttr.in/${City}?format=\"%c\" -UserAgent \"curl\" -useBasicParsing).Content\n\t\t$temp = (Invoke-WebRequest http://wttr.in/${City}?format=\"%t\" -UserAgent \"curl\" -useBasicParsing).Content\n\t\t$rain = (Invoke-WebRequest http://wttr.in/${City}?format=\"%p %h\" -UserAgent \"curl\" -useBasicParsing).Content\n\t\t$wind = (Invoke-WebRequest http://wttr.in/${City}?format=\"%w\" -UserAgent \"curl\" -useBasicParsing).Content\n\t\t$sun = (Invoke-WebRequest http://wttr.in/${City}?format=\"%S → %s\" -UserAgent \"curl\" -useBasicParsing).Content\n\t\tNew-Object PSObject -Property @{ CITY=\"$city $icon\"; TEMP=$temp; RAIN=$rain; WIND=$wind; SUN=$sun }\n\t}\n}\n\ntry {\n\tList-City-Weather | Format-Table -property @{e='CITY';width=19},@{e='TEMP';width=9},@{e='RAIN';width=14},@{e='WIND';width=12},@{e='SUN';width=20}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Wake-on-LAN Packet\nDESCRIPTION: Iterates `numTimes`, calling the `Send-WOL` function with the provided MAC address, IP address, and UDP port to send the wake-up packet.  It includes a brief delay between sends and a success message. Error handling catches any exceptions and provides an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wake-up-host.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfor ($i = 0; $i -lt $numTimes; $i++) {\n\t\tSend-WOL $macAddr.Trim() $ipAddr.Trim() $udpPort\n\t\tStart-Sleep -milliseconds 100\t\n\t}\n\t\"✅ Sent magic packet to $ipAddr, UDP port $($udpPort) ($($numTimes)x). The device is up in a minute.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Windows Default Apps Settings via PowerShell - PowerShell\nDESCRIPTION: This snippet demonstrates how to use the script with common PowerShell parameters, allowing users to control output verbosity and error handling. It requires a Windows environment with PowerShell installed. The script does not require any additional dependencies and supports standard PowerShell common parameters for execution control. Input: optional common parameter flags; Output: the Windows Default Apps settings panel opened.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-default-apps-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-default-apps-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing open-magnifier.ps1 PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the open-magnifier.ps1 script from the PowerShell console. The script aims to launch the Windows Screen Magnifier. Input: None, Output: Windows Screen Magnifier application starts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-magnifier.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-magnifier\n```\n\n----------------------------------------\n\nTITLE: Full script content of play-big-ben.ps1\nDESCRIPTION: This snippet contains the entire PowerShell script for playing the Big Ben sound. It uses the play-mp3.ps1 script to play the Big Ben MP3 file located in the data/sounds directory. The script then exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-big-ben.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays the Big Ben sound\n.DESCRIPTION\n\tThis PowerShell script plays the sound of Big Ben.\n.EXAMPLE\n\tPS> ./play-big-ben.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/Big Ben.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example in PowerShell\nDESCRIPTION: This snippet provides an example of how to run the `check-ping.ps1` script using its default configuration (without specifying the `-hosts` parameter). It also shows a typical successful output format, indicating the online status, average, min, and max latency in milliseconds, and the number of failed pings versus the total.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ping.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-ping.ps1\n✅ Online with 18ms latency average (13ms...109ms, 0/10 ping loss)\n```\n\n----------------------------------------\n\nTITLE: Implementing French Text-to-Speech in PowerShell\nDESCRIPTION: Complete implementation of the speak-french.ps1 script that uses the Windows SAPI to speak text in French. The script finds an installed French voice, accepts text input as a parameter or prompts the user, and handles errors appropriately.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-french.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in French\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a French text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the French text to speak\n.EXAMPLE\n\tPS> ./speak-french.ps1 Salut\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the French text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- French*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No French text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Invocation with Common Parameters\nDESCRIPTION: This snippet demonstrates how to invoke the open-google-books.ps1 script and lists the common parameters supported by PowerShell scripts, such as Verbose, Debug, and ErrorAction. It provides context for understanding the script's potential execution options.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-books.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-google-books.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of Calibre Server PowerShell Script\nDESCRIPTION: Demonstrates how to execute the PowerShell script from the command line using default parameters. The user invokes the script using './start-calibre-server', which launches the Calibre server in background mode. No arguments are required for default behavior; custom parameters may be passed to override defaults. This example is suitable for both Windows PowerShell and cross-platform PowerShell Core environments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/start-calibre-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./start-calibre-server\n\n```\n\n----------------------------------------\n\nTITLE: smart-data2csv.ps1 Parameter Definition PowerShell\nDESCRIPTION: Defines the -Directory parameter for the smart-data2csv.ps1 script. This parameter specifies the path to the directory containing the S.M.A.R.T. JSON files. If no directory is provided, the script defaults to the current working directory. This parameter is not required and does not accept pipeline input or wildcard characters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/smart-data2csv.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/smart-data2csv.ps1 [[-Directory] <String>] [<CommonParameters>]\n\n-Directory <String>\n    Specifies the path to the directory\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Latest Git Tag with PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script identifies and displays the most recent Git tag in a specified local repository. It requires Git to be installed and available in the PATH and accepts an optional -RepoDir parameter to specify the repository path (defaults to current working directory). The script checks for directory access and validates Git's availability before executing Git commands to fetch the latest tag, its commit hash, and message, then outputs the information in a formatted string. Errors are handled gracefully with informative messages, and the script supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-latest-tag.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the repo's latest tag\n.DESCRIPTION\n\tThis PowerShell script lists the latest tag in a local Git repository.\n.PARAMETER RepoDir\n\tSpecifies the path to the local repository (current working dir by default)\n.EXAMPLE\n\tPS> ./list-latest-tag.ps1 C:\\MyRepo\n\t✅ Tag 'v1.0' at commit 4833ecbf1457dc86ad7f4d6e3 ('Version 1.0 released')\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$RepoDir = \"$PWD\")\n\ntry {\n\tif (-not(Test-Path \"$RepoDir\" -pathType container)) { throw \"Can't access directory: $RepoDir\" }\n\n\t$Null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t$LatestTagCommit = (git -C \"$RepoDir\" rev-list --tags --max-count=1)\n\t$LatestTagName = (git -C \"$RepoDir\" describe --tags $LatestTagCommit)\n\t$LatestTagMessage  = (git -C \"$RepoDir\" log --format=%B -n 1 $LatestTagCommit)\n\n\t\"✅ Tag '$LatestTagName' at commit $LatestTagCommit ('$LatestTagMessage')\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Moon Phase | PowerShell\nDESCRIPTION: Retrieves the current moon phase by making an HTTP GET request to `http://wttr.in/Moon` using `Invoke-WebRequest`. It sets a user agent to 'curl' and uses basic parsing to handle the response content. The script prints the received content and exits with status code 0 on success, or catches errors during the web request, prints an error message including the line number and the error details, and exits with status code 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/moon.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the current moon phase\n.DESCRIPTION\n\tThis PowerShell script prints the current moon phase.\n.EXAMPLE\n\tPS> ./moon.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t(Invoke-WebRequest http://wttr.in/Moon -userAgent \"curl\" -useBasicParsing).Content\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Check Time Until or Since Noon\nDESCRIPTION: This script compares the current time with noon and constructs a message indicating whether noon is upcoming or has already passed. It uses a helper function to format TimeSpan objects into readable strings and calls an external speech script to vocalize the message. The script supports common PowerShell parameters and includes error handling to report script errors with line references.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-noon.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks for Noon\n.DESCRIPTION\n\tThis PowerShell script checks the time until Noon and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-noon\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TimeSpanToString { param([TimeSpan]$Delta)\n\t$Result = \"\"\n\tif ($Delta.Hours -eq 1) {       $Result += \"1 hour and \"\n\t} elseif ($Delta.Hours -gt 1) { $Result += \"$($Delta.Hours) hours and \"\n\t}\n\tif ($Delta.Minutes -eq 1) { $Result += \"1 minute\"\n\t} else {                    $Result += \"$($Delta.Minutes) minutes\"\n\t}\n\treturn $Result\n}\n\ntry {\n\t$Now = [DateTime]::Now\n\t$Noon = Get-Date -Hour 12 -Minute 0 -Second 0\n\tif ($Now -lt $Noon) {\n\t\t$TimeSpan = TimeSpanToString($Noon - $Now)\n\t\t$Reply = \"Noon is in $TimeSpan.\"\n\t} else {\n\t\t$TimeSpan = TimeSpanToString($Now - $Noon)\n\t\t$Reply = \"Noon was $TimeSpan ago.\"\n\t}\n\t& \"$PSScriptRoot/speak-english.ps1\" \"$Reply\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a simple command to execute the `write-xmas-tree.ps1` script from the PowerShell console using its relative path. It demonstrates running the script with default parameters, which will draw the Christmas tree to the terminal.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-xmas-tree.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-xmas-tree.ps1\n\n\n```\n\n----------------------------------------\n\nTITLE: Closing Firefox Example - PowerShell Script Execution\nDESCRIPTION: This PowerShell example demonstrates how to execute the script. The command './close-firefox-browser' initiates the closing process without any arguments. The script is run from the current directory to initiate the closing of the browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-firefox-browser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-firefox-browser\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Playback in play-parrot-sound.ps1 (PowerShell)\nDESCRIPTION: Shows the full content of the 'play-parrot-sound.ps1' script. It includes comment-based help (synopsis, description, example, link, notes) and the core logic which calls the 'play-mp3.ps1' script, passing the path to the 'parrot.mp3' sound file located in a relative path '../data/sounds/'. The script depends on 'play-mp3.ps1' being in the same directory ($PSScriptRoot). It exits with code 0 on success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-parrot-sound.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a parrot sound\n.DESCRIPTION\n\tThis PowerShell script plays a parrot sound.\n.EXAMPLE\n\tPS> ./play-parrot-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/parrot.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Execution Example\nDESCRIPTION: Example showing how to execute the install-git-for-windows.ps1 PowerShell script from the command line by invoking it with the PowerShell prompt. This demonstrates the intended usage scenario.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-git-for-windows.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-git-for-windows.ps1\n```\n\n----------------------------------------\n\nTITLE: Example Usage of check-time-zone.ps1\nDESCRIPTION: Demonstrates running the script from the PowerShell prompt and shows the expected output format. The output displays the current time, time zone name, UTC offset, and DST information.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-time-zone.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-time-zone.ps1\n✅ 3:27 PM West Europe Summer Time (UTC+01:00:00 +1h DST)\n```\n\n----------------------------------------\n\nTITLE: Source Code for roll-a-dice.ps1 PowerShell Script\nDESCRIPTION: Contains the full PowerShell source code for 'roll-a-dice.ps1'. The script selects a random reply phrase and a random number from 1 to 6, then calls the 'speak-english.ps1' script (located in the same directory) to announce the result using text-to-speech. It depends on 'speak-english.ps1' for its TTS functionality and exits with a status code of 0 upon successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/roll-a-dice.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tReplies to \"Roll a dice\"\n.DESCRIPTION\n\tThis PowerShell script rolls a dice and returns the number by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./roll-a-dice\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n$Reply = \"It's\", \"I get\", \"Now it's\", \"OK, I have\" | Get-Random\n$Number = \"1\", \"2\", \"3\", \"4\", \"5\", \"6\" | Get-Random\n\n& \"$PSScriptRoot/speak-english.ps1\" \"$Reply $Number.\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Autostart Folder with PowerShell\nDESCRIPTION: This script opens the user's Windows autostart folder in File Explorer. It resolves the standard path to the Startup folder, validates its existence, and then uses another script to launch File Explorer at that location. The script includes error handling for cases where the folder doesn't exist.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-auto-start-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the autostart folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the user's autostart folder.\n.EXAMPLE\n\tPS> ./open-auto-start-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = resolve-path \"$HOME/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup\"\n\tif (-not(test-path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Autostart folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Super Mario Intro Theme using Console Beeps in PowerShell\nDESCRIPTION: This is the core script content for `play-super-mario.ps1`. It uses a series of `[console]::beep(frequency, duration)` commands to generate tones corresponding to the notes of the Super Mario intro theme. Each line represents a note with its specific frequency (in Hertz) and duration (in milliseconds). The script concludes with `exit 0` to indicate successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-super-mario.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays the Super Mario intro\n.DESCRIPTION\n\tThis PowerShell script plays the Super Mario intro.\n.EXAMPLE\n\tPS> ./play-super-mario\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n[console]::beep(659,250) ##E\n[console]::beep(659,250) ##E\n[console]::beep(659,300) ##E\n[console]::beep(523,250) ##C\n[console]::beep(659,250) ##E\n[console]::beep(784,300) ##G\n[console]::beep(392,300) ##g\n[console]::beep(523,275) ## C\n[console]::beep(392,275) ##g\n[console]::beep(330,275) ##e\n[console]::beep(440,250) ##a\n[console]::beep(494,250) ##b\n[console]::beep(466,275) ##a#\n[console]::beep(440,275) ##a\n[console]::beep(392,275) ##g\n[console]::beep(659,250) ##E\n[console]::beep(784,250) ## G\n[console]::beep(880,275) ## A\n[console]::beep(698,275) ## F\n[console]::beep(784,225) ## G\n[console]::beep(659,250) ## E\n[console]::beep(523,250) ## C\n[console]::beep(587,225) ## D\n[console]::beep(494,225) ## B\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Launching Screen Magnifier\nDESCRIPTION: This PowerShell script launches the Windows Screen Magnifier application. It includes information on common parameters supported by the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-screen-magnifier.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-screen-magnifier.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of pull-repos.ps1 with Output\nDESCRIPTION: An example showing how to use the pull-repos script with a specific directory parameter and the expected console output showing progress through the repositories.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pull-repos.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./pull-repos C:\\MyRepos\n⏳ (1) Searching for Git executable...       git version 2.43.0\n⏳ (2) Checking parent folder...             33 subfolders\n⏳ (3/35) Pulling into 📂base256U...\n...\n```\n\n----------------------------------------\n\nTITLE: Implementation of Window Titles Listing Script in PowerShell\nDESCRIPTION: The full script implementation that queries all processes with main window titles and formats them as a table. It includes error handling and returns proper exit codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-window-titles.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists window titles\n.DESCRIPTION\n\tThis PowerShell script queries all main window titles and lists them as a table.\n.EXAMPLE\n\tPS> ./list-window-titles.ps1\n\n\t   Id ProcessName          MainWindowTitle\n\t   -- -----------          ---------------\n\t11556 Spotify              Spotify Free\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Process | Where-Object {$_.mainWindowTitle} | Format-Table ID,ProcessName,MainWindowTitle -AutoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Speak Latin Text in PowerShell\nDESCRIPTION: This PowerShell script speaks the given text with a Latin text-to-speech (TTS) voice. It utilizes the `SAPI.SPVoice` COM object to find a Latin voice and speak the specified text. It also handles potential errors and exits with an appropriate status code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-latin.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Latin\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Latin text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Latin text to speak\n.EXAMPLE\n\tPS> ./speak-latin.ps1 Salve\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Latin text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Latin*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Latin text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Rook Movement Validation in PowerShell\nDESCRIPTION: This PowerShell snippet validates a Rook's move.  It ensures that the move is either horizontal or vertical (one of the axes is zero). It then checks for blocked paths by iterating along the move path, checking each square for an occupied piece. If the path is clear, it sets `$moveSuccess` to `$true` and `$attack` to `$true` if the destination square contains an enemy piece. Requires `$CurrentColumn`, `$CurrentRow`, `$MoveX`, `$MoveY`, `$board`, `$Empty`, `$DesiredColumn`, `$DesiredRow`, `$pc.firstmove`, `Write-Error`, and `Publish-Board`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_9\n\nLANGUAGE: PowerShell\nCODE:\n```\n            'Rook' {\n                if (([math]::abs($MoveX) -gt 0) -and ([math]::abs($MoveY) -gt 0)) {\n                    Write-Error \"Illegal Rook Move\"\n                } else {\n                    if ($MoveX -gt 0) {\n                        for ($i = 1; $i -lt $MoveX; $i++) {\n                            if ($board[($CurrentColumn + $i), $CurrentRow] -ne $Empty) {\n                                    Write-Error \"Illegal Rook Move: Blocked Path\"\n                                    Publish-Board\n                                    break\n                            }\n                        }\n                    } elseif ($MoveX -lt 0) {\n                        for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n                            if ($board[($CurrentColumn - $i), $CurrentRow] -ne $Empty) {\n                                    Write-Error \"Illegal Rook Move: Blocked Path\"\n                                    Publish-Board\n                                    break\n                            }\n                        }\n                    } elseif ($MoveY -gt 0) {\n                        for ($i = 1; $i -lt $MoveY; $i++) {\n                            if ($board[$CurrentColumn, ($CurrentRow + $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Rook Move: Blocked Path\"\n                                    Publish-Board\n                                    break\n                            }\n                        }\n                    } else {\n                        for ($i = 1; $i -lt [math]::abs($MoveY); $i++) {\n                            if ($board[$CurrentColumn, ($CurrentRow - $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Rook Move: Blocked Path\"\n                                    Publish-Board\n                                    break\n                            }\n                        }\n                    }\n                    $moveSuccess = $true\n                    $pc.firstmove = $false\n                    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                        $attack = $true\n                    }\n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition in PowerShell\nDESCRIPTION: Defines the `-text` parameter for the `speak-latin.ps1` PowerShell script. The parameter allows the user to specify the Latin text to be spoken. The script also supports common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-latin.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-latin.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Latin text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Show Pluto in Google Maps Parameters - PowerShell\nDESCRIPTION: This section describes the parameters supported by the 'show-planet-pluto.ps1' script. It indicates that the script supports common parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allowing for enhanced control and debugging during script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-pluto.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-planet-pluto.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Supported Common Parameters for the PowerShell Script\nDESCRIPTION: This code block specifies the common parameters that can be used with the 'list-outlook-sent.ps1' script. These include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters provide additional control over script execution, error handling, and output management when invoking the script from PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-outlook-sent.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-outlook-sent.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters for play-chess.ps1 Script in PowerShell\nDESCRIPTION: Specifies the common parameters supported by the `play-chess.ps1` script. These parameters (`Verbose`, `Debug`, `ErrorAction`, etc.) allow users to leverage standard PowerShell features for controlling script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-chess.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example PowerShell Script Execution\nDESCRIPTION: This snippet demonstrates how to execute the spell-word.ps1 script from the PowerShell command line. It shows passing the word \"Yoda\" as an argument and indicates that the expected result is auditory output (\"(listen)\").\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/spell-word.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./spell-word.ps1 Yoda\n(listen)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Script Usage and Output in PowerShell\nDESCRIPTION: This example demonstrates running the script from a PowerShell prompt and shows the typical output when the script executes successfully. It expects PowerShell environment compatibility. No input parameters are required, and the output will announce the current month.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-month.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-month\n✅ It's December.\n```\n\n----------------------------------------\n\nTITLE: Script Parameters and Common Parameters\nDESCRIPTION: This section documents the parameters supported by the `show-lisbon-city.ps1` script.  It highlights the inclusion of common parameters such as Verbose, Debug, and ErrorAction for script execution control and debugging capabilities. These parameters allow for customized script behavior and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-lisbon-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-lisbon-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This code block defines the command-line parameters accepted by the `export-to-serenade.ps1` script. It specifies parameter names (`WakeWord`, `FilePattern`, `Application`, `TargetFile`), data types (`String`), optionality, position, and default values. It also indicates support for PowerShell's common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-to-serenade.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nexport-to-serenade.ps1 [[-WakeWord] <String>] [[-FilePattern] <String>] [[-Application] <String>] [[-TargetFile] <String>] [<CommonParameters>]\n\n-WakeWord <String>\n    Specifies the wake word (none by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-FilePattern <String>\n    Specifies the file pattern for the scripts (\"$PSScriptRoot/*.ps1\" by default)\n    \n    Required?                    false\n    Position?                    2\n    Default value                \"$PSScriptRoot/*.ps1\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Application <String>\n    Specifies the application to be used\n    \n    Required?                    false\n    Position?                    3\n    Default value                terminal\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-TargetFile <String>\n    Specifies the target file (\"$HOME\\.serenade\\scripts\\PowerShell.js\" by default)\n    \n    Required?                    false\n    Position?                    4\n    Default value                \"$HOME\\.serenade\\scripts\\PowerShell.js\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying Windows Notifications with Motivational Quotes and Cat Images in PowerShell\nDESCRIPTION: This script fetches an inspirational quote from api-ninjas.com, downloads a random cat image from thecatapi.com, plays a cat sound effect, and displays everything in a Windows toast notification. It demonstrates API usage, JSON parsing, file downloads, and Windows notification integration.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-notification-motivation-quote.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n#Api key for quotes https://api.api-ninjas.com\n $headerQuote = @{\n    \"X-Api-Key\"=\"FZ/rIx6RAn/W7+3S10zrHQ==gWBfP5fO0xcUiKp3\"\n   }\n#calling api and getting quoute\n$quote = Invoke-WebRequest -Uri https://api.api-ninjas.com/v1/quotes?category=inspirational -Method GET -Headers $headerQuote\n#parsing json response\n$quoteObj = ConvertFrom-Json $([String]::new($quote.Content))\n\n$headlineText = $quoteObj.author\n$bodyText = $quoteObj.quote\n#defualt windows Icon for notification icon\n$logo = 'C:\\Windows\\System32\\@WindowsHelloFaceToastIcon.png'\n\n#get random picture of cat\n$image = Invoke-WebRequest -Uri 'https://api.thecatapi.com/v1/images/search?size=small' -Method Get\n#parsing json response\n$jsonObj = ConvertFrom-Json $([String]::new($image.Content))\n\n$wc = New-Object System.Net.WebClient\n#put cat picture into your user pictures folder\n$wc.DownloadFile($jsonObj.url, \"C:\\Users\\\" + $Env:Username + \"\\Pictures\\test.jpg\")\n\n\n$xml = @\"\n<toast>\n    <visual>\n        <binding template=\"ToastGeneric\">\n            <text>$($headlineText)</text>\n            <text>$($bodyText)</text>\n            <image placement=\"appLogoOverride\" src=\"$($logo)\"/>\n            <image placement=\"hero\" addImageQuery=\"true\" src=\"C:\\Users\\User\\Pictures\\test.jpg\"/>\n        </binding>\n    </visual>\n    <audio silent=\"true\"/>\n</toast>\n\"@\n\n#play cat mew with notification\n$MediaPlayer = [Windows.Media.Playback.MediaPlayer, Windows.Media, ContentType = WindowsRuntime]::New()\n$MediaPlayer.Source = [Windows.Media.Core.MediaSource]::CreateFromUri('https://v1.cdnpk.net/videvo_files/audio/premium/audio0023/watermarked/AnimalCat 6003_40_1_preview.mp3')\n$MediaPlayer.Volume = 10.\n$MediaPlayer.Play()\n\n#show notification\n$XmlDocument = [Windows.Data.Xml.Dom.XmlDocument, Windows.Data.Xml.Dom.XmlDocument, ContentType = WindowsRuntime]::New()\n$XmlDocument.loadXml($xml)\n$AppId = '{1AC14E77-02E7-4E5D-B744-2EB1AE5198B7}\\WindowsPowerShell\\v1.0\\powershell.exe'\n[Windows.UI.Notifications.ToastNotificationManager, Windows.UI.Notifications, ContentType = WindowsRuntime]::CreateToastNotifier($AppId).Show($XmlDocument)\n```\n\n----------------------------------------\n\nTITLE: Bishop Movement Validation in PowerShell\nDESCRIPTION: This PowerShell snippet validates a Bishop's move. It checks if the move is diagonal by ensuring that the absolute values of `$MoveX` and `$MoveY` are equal.  It then iterates through the path to ensure that no pieces are blocking the Bishop's move, setting `$moveSuccess` to `$true` and `$attack` to `$true` if the move is valid and lands on an opponent's piece. It uses `$CurrentColumn`, `$CurrentRow`, `$MoveX`, `$MoveY`, `$board`, `$Empty`, `$DesiredColumn`, `$DesiredRow` variables and the `Write-Error`, `Read-Input`, and `Publish-Board` cmdlets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n            'Bishop' {\n                if ([math]::abs($MoveX) -ne [math]::abs($MoveY)) {\n                    Write-Error \"Illegal Bishop Move: Not a Diagonal\"\n                } else {\n                    if ($MoveX -gt 0) {\n                        if ($MoveY -gt 0) {\n                            for ($i = 1; $i -lt $MoveX; $i++) {\n                                if ($board[($CurrentColumn + $i) , ($CurrentRow + $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Bishop Move: Blocked Path\"\n                                    Read-Input\n                                    break\n                                }\n                            }\n                        } else {\n                            for ($i = 1; $i -lt $MoveX; $i++) {\n                                if ($board[($CurrentColumn + $i) , ($CurrentRow - $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Bishop Move: Blocked Path\"\n                                    Read-Input\n                                    break\n                                }\n                            }\n                        }\n                    } else {\n                        if ($MoveY -gt 0) {\n                            for ($i = 1; $i -lt $MoveY; $i++) {\n                                if ($board[($CurrentColumn - $i) , ($CurrentRow + $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Bishop Move: Blocked Path\"\n                                    Publish-Board\n                                    break\n                                }\n                            }\n                        } else {\n                            for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n                                if ($board[($CurrentColumn - $i) , ($CurrentRow - $i)] -ne $Empty) {\n                                    Write-Error \"Illegal Bishop Move: Blocked Path\"\n                                    Publish-Board\n                                    break\n                                }\n                            }\n                        }\n                    }\n                    $moveSuccess = $true\n                    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                        $attack = $true\n                    }\n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for list-pins.ps1 Script in PowerShell\nDESCRIPTION: Defines the parameters accepted by the list-pins.ps1 script, including PinLength (default 5), Columns (default 12), and Rows (default 30), along with their types, default values, and whether they are required. It also indicates support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-pins.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-pins.ps1 [[-PinLength] <Int32>] [[-Columns] <Int32>] [[-Rows] <Int32>] [<CommonParameters>]\n\n-PinLength <Int32>\n    Specifies the PIN length\n    \n    Required?                    false\n    Position?                    1\n    Default value                5\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Columns <Int32>\n    Specifies the number of columns\n    \n    Required?                    false\n    Position?                    2\n    Default value                12\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Rows <Int32>\n    Specifies the number of rows\n    \n    Required?                    false\n    Position?                    3\n    Default value                30\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Query ISS Location and Announce via TTS\nDESCRIPTION: This PowerShell script retrieves the current geographic coordinates of the ISS from an external API and utilizes a secondary script to audibly announce its position. Dependencies include 'Invoke-WebRequest' for web requests and a local 'speak-english.ps1' script for speech synthesis. It handles exceptions gracefully and outputs error messages with script line numbers when failures occur.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-iss-position.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the ISS position\n.DESCRIPTION\n\tThis PowerShell script queries the position of the International Space Station (ISS) and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-iss-position\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$ISS = (Invoke-WebRequest \"http://api.open-notify.org/iss-now.json\" -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"The International Space Station is currently at $($ISS.iss_position.longitude)° longitude and $($ISS.iss_position.latitude)° latitude.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Script Logic for Listing Bluetooth Devices (PowerShell)\nDESCRIPTION: This is the main script block that retrieves and formats information about connected Bluetooth devices. It uses `Get-PnpDevice` to find hardware, filters for devices with the 'Bluetooth' class, sorts by friendly name, and displays the results in a table format with basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-bluetooth-devices.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists Bluetooth devices\n.DESCRIPTION\n\tThis PowerShell script lists all Bluetooth devices connected to the local computer.\n.EXAMPLE\n\tPS> ./list-bluetooth-devices.ps1\n\n\tFriendlyName                 Status  InstanceId\n\t------------                 ------  ----------\n\tG3 Headset                   OK      BTHENUM\\DEV_FC58FA7A51C6\\8&152049BE&0&BLUETOOTHDEVICE_FC58FA7A51C6\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-PnpDevice | Where-Object {$_.Class -eq \"Bluetooth\"} | Sort-Object -property FriendlyName | Format-Table -property FriendlyName,Status,InstanceId\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Amazon Website in Browser - PowerShell\nDESCRIPTION: This PowerShell script opens the Amazon website in the default web browser. It uses common parameters and includes an example of how to execute the script. No specific dependencies beyond PowerShell are needed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-amazon-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-amazon-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-amazon-website\n```\n\n----------------------------------------\n\nTITLE: Executing show-miami-city.ps1 (PowerShell)\nDESCRIPTION: This example demonstrates how to execute the `show-miami-city.ps1` script from a PowerShell console. Running this command without any parameters will trigger the script's default action, which is to open the default web browser and navigate to the Google Maps page centered on Miami, Florida.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-miami-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-miami-city\n```\n\n----------------------------------------\n\nTITLE: Launching File Explorer to Open E Drive Folder in PowerShell\nDESCRIPTION: This PowerShell script opens the E: drive folder in Windows File Explorer by invoking another script, open-file-explorer.ps1, with 'E:' as an argument. It supports standard PowerShell common parameters such as Verbose, Debug, and ErrorAction to control script behavior during execution. The expected input is none when running directly; the output is the invocation of File Explorer focused on the E: drive. The script requires open-file-explorer.ps1 to be located in the same script directory to function correctly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-e-drive.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the E: drive folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the E: drive folder.\n.EXAMPLE\n\tPS> ./open-e-drive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-file-explorer.ps1\" \"E:\"\n```\n\n----------------------------------------\n\nTITLE: Installing IrfanView via PowerShell Script with Error Handling - PowerShell\nDESCRIPTION: This snippet contains the core logic of the install-irfanview.ps1 script, which automates the installation of IrfanView through the Microsoft Store using winget. The script prints status messages, invokes winget with the required arguments, checks the result via $lastExitCode, and handles errors by displaying a formatted message with the script line number and exiting with code 1 on failure or 0 on success. Dependencies include the PowerShell environment and the winget command-line tool. No input parameters are needed except optional common PowerShell parameters; successful runs return a success message while errors result in explicit error output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-irfanview.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls IrfanView\n.DESCRIPTION\n\tThis PowerShell script installs IrfanView from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-irfan-view.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing IrfanView, please wait...\"\n\n\t& winget install \"IrfanView64\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"IrfanView installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Execution | PowerShell\nDESCRIPTION: Shows a basic example of how to run the `moon.ps1` script from the PowerShell command line without any additional parameters. Executing this command will cause the script to fetch and display the current moon phase.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/moon.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./moon.ps1\n```\n\n----------------------------------------\n\nTITLE: PowerShell Example Usage\nDESCRIPTION: The example demonstrates a simple execution of the script using the path relative to the current working directory. There are no specific input parameters required to execute the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-montreal-city.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-montreal-city\n```\n\n----------------------------------------\n\nTITLE: Example: Running install-signal-cli.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to execute the `install-signal-cli.ps1` script from the PowerShell prompt, providing a specific version number (`0.11.12`) as an argument to the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-signal-cli.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-signal-cli 0.11.12\n```\n\n----------------------------------------\n\nTITLE: PowerShell VPN Status Check Script: check-vpn.ps1\nDESCRIPTION: This PowerShell script queries the status of active VPN connections and displays whether they are connected or not. It supports common parameters for verbose and error handling, making it suitable for troubleshooting and status monitoring. The script is platform-aware, with a placeholder for Linux support, and outputs status messages or errors accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-vpn.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the VPN status\n.DESCRIPTION\n\tThis PowerShell script queries the status of the VPN connection(s) and prints it.\n.EXAMPLE\n\tPS> ./check-vpn.ps1\n\t✅ Internet VPN to NASA L2TP is connected\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$noVPN = $true\n\tif ($IsLinux) {\n\t\t# TODO\n\t} else {\n\t\t$connections = Get-VPNConnection\n\t\tforeach($connection in $connections) {\n\t\t\tWrite-Host \"✅ Internet VPN to $($connection.Name) is $($connection.ConnectionStatus.ToLower())\"\n\t\t\t$noVPN = $false\n\t\t}\n\t}\n\tif ($noVPN) { Write-Host \"⚠️ No VPN configured\" }\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving PowerShell Environment Details (PowerShell)\nDESCRIPTION: This snippet contains the core logic of the script. It defines a helper function to count PowerShell profiles and then uses built-in variables ($PSVersionTable, $IsLinux) and cmdlets (Get-Module, Get-Alias, Get-Command) to gather system information, format it into a status string, and print it. It includes a try-catch block for basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-powershell.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCheck the PowerShell status\n.DESCRIPTION\n\tThis PowerShell script queries the PowerShell status and prints it.\n.EXAMPLE\n\tPS> ./check-powershell.ps1\n\t✅ PowerShell 5.1.19041.2673 Desktop edition (1 profile, 10 modules, 1458 cmdlets, 172 aliases)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetNumberOfProfiles {\n\t[int]$count = 0\n\tif (Test-Path $PROFILE.AllUsersAllHosts) { $count++ }\n\tif (Test-Path $PROFILE.AllUsersCurrentHost) { $count++ }\n\tif (Test-Path $PROFILE.CurrentUserAllHosts) { $count++ }\n\tif (Test-Path $PROFILE.CurrentUserCurrentHost) { $count++ }\n\treturn $count\n}\n\ntry {\n\t$version = $PSVersionTable.PSVersion\n\t$edition = $PSVersionTable.PSEdition\n\t$numProfiles = GetNumberOfProfiles\n\t$numModules = (Get-Module).Count\n\t$numAliases = (Get-Alias).Count\n\tif ($IsLinux) {\n\t\t\"✅ PowerShell $version $edition edition ($numProfiles profile, $numModules modules, $numAliases aliases)\"\n\t} else {\n\t\t$numCmdlets = (Get-Command -Command-Type cmdlet).Count\n\t\t\"✅ PowerShell $version $edition edition ($numProfiles profile, $numModules modules, $numCmdlets cmdlets, $numAliases aliases)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters for open-wikipedia.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the command-line syntax for the `open-wikipedia.ps1` script, indicating its path and listing the standard PowerShell common parameters it accepts. These parameters (Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, OutVariable) allow control over script execution behavior, such as output verbosity and error handling, but the script itself doesn't define any custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wikipedia.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-wikipedia.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for search-files.ps1 Script in PowerShell\nDESCRIPTION: This snippet defines the command-line parameters for the `search-files.ps1` script using standard PowerShell parameter syntax documentation. It accepts `-textPattern` (the text string to search for) and `-filePattern` (the file specification, potentially including wildcards), both as optional positional string parameters. It also indicates support for standard PowerShell common parameters like Verbose, Debug, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-files.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/search-files.ps1 [[-textPattern] <String>] [[-filePattern] <String>] [<CommonParameters>]\n\n-textPattern <String>\n    Specifies the text pattern to search for\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-filePattern <String>\n    Specifies the files to search\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Querying BIOS Status - check-bios.ps1\nDESCRIPTION: This PowerShell script checks the BIOS status by retrieving system information on Windows and Linux systems, then displays the BIOS model, version, serial number, and manufacturer. Requires PowerShell and appropriate permissions; on Linux, 'sudo dmidecode' is used. The script handles different system types and formats output accordingly, including error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-bios.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the BIOS status\n.DESCRIPTION\n\tThis PowerShell script queries the BIOS status and prints it.\n.EXAMPLE\n\tPS> ./check-bios.ps1\n\t✅ BIOS model P62 v02.67, version HPQOEM - 5, S/N CZC1080B01 by HP\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$model = (sudo dmidecode -s system-product-name)\n\t\tif (\"$model\" -eq \"\") { exit 0 } # no information\n\t\tWrite-Progress \"Querying BIOS details...\"\n\t\t$version = (sudo dmidecode -s bios-version)\n\t\t$releaseDate = (sudo dmidecode -s bios-release-date)\n\t\t$manufacturer = (sudo dmidecode -s system-manufacturer)\n\t\tWrite-Progress -completed \"Done.\"\n\t} else {\n\t\t$details = Get-CimInstance -ClassName Win32_BIOS\n\t\t$model = $details.Name.Trim()\n\t\t$version = $details.Version.Trim()\n\t\t$serial = $details.SerialNumber.Trim()\n\t\t$manufacturer = $details.Manufacturer.Trim()\n\t}\n\tif ($model -eq \"To be filled by O.E.M.\") { $model = \"N/A\" }\n\tif ($version -eq \"To be filled by O.E.M.\") { $version = \"N/A\" }\n\tif (\"$releaseDate\" -ne \"\") { $releaseDate = \" of $releaseDate\" }\n\tif (\"$serial\" -eq \"\") { $serial = \"N/A\" }\n\tif ($serial -eq \"To be filled by O.E.M.\") { $serial = \"N/A\" }\n\tWrite-Host \"✅ BIOS model $model, version $($version)$($releaseDate), S/N $serial by $manufacturer\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing open-booking-com.ps1 Script in PowerShell\nDESCRIPTION: This is the source code for the `open-booking-com.ps1` script. It uses comment-based help for documentation (Synopsis, Description, Example, Link, Notes). The core functionality involves calling another script, `open-default-browser.ps1` (expected in the same directory, `$PSScriptRoot`), and passing the Booking.com URL (\"https://www.booking.com\") as an argument. It then exits with a status code of 0, indicating success. The script depends on the `open-default-browser.ps1` script being available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-booking-com.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Booking.com website\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Booking.com website.\n.EXAMPLE\n\tPS> ./open-booking-com\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.booking.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Writing Centered Text Using PowerShell\nDESCRIPTION: This PowerShell script writes a given string centered to the console window. It accepts an optional string parameter 'text' which specifies the text to write; if omitted, it prompts the user for input. The script calculates the number of spaces needed to center the text based on the console's maximum window width, then outputs the padded text using Write-Host. It supports common PowerShell parameters such as Verbose and Debug. Error handling catches exceptions and outputs meaningful messages with the error line number. This script requires a PowerShell environment with access to the console UI methods.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-centered.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text centered\n.DESCRIPTION\n\tThis PowerShell script writes the given text centered to the console.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-headline.ps1 \"Hello World\"\n\t\t\t\t\t\tHello World\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the text to write\" }\n\n\t$ui = (Get-Host).ui\n\t$rui = $ui.rawui \n\t[int]$numSpaces = ($rui.MaxWindowSize.Width - $text.Length) / 2\n\n\t[string]$spaces = \"\"\n\tfor ([int]$i = 0; $i -lt $numSpaces; $i++) { $spaces += \" \" }\n\tWrite-Host \"$spaces$text\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Firewall Status Logic in PowerShell\nDESCRIPTION: This PowerShell script block contains the core logic to determine firewall status. It checks `$IsLinux` to differentiate between Linux (using the `ufw` command via `sudo`) and Windows (reading a specific registry key) systems and prints the status with appropriate icons. It includes a `try-catch` block for basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-firewall.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the firewall status\n.DESCRIPTION\n\tThis PowerShell script queries the status of the firewall and prints it.\n.EXAMPLE\n\tPS> ./check-firewall.ps1\n\t✅ Firewall enabled\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\tWrite-Host \"✅ Firewall \" -noNewline\n\t\t& sudo ufw status\n\t} else {\n\t\t$enabled = (gp 'HKLM:\\SYSTEM\\ControlSet001\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\DomainProfile').EnableFirewall\n\t\tif ($enabled) {\n\t\t\tWrite-Host \"✅ Firewall enabled\"\n\t\t} else {\n\t\t\tWrite-Host \"⚠️ Firewall disabled\"\n\t\t}\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementation of PowerShell Recycle Bin Clearing Script\nDESCRIPTION: Full implementation of the clear-recycle-bin.ps1 script that uses Clear-RecycleBin cmdlet to empty the recycle bin with error handling and spoken confirmation using speak-english.ps1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clear-recycle-bin.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tClears the recycle bin folder\n.DESCRIPTION\n\tThis PowerShell script removes the content of the recycle bin folder permanently.\n\tIMPORTANT NOTE: this cannot be undo!\n.EXAMPLE\n\tPS> ./clear-recycle-bin\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tClear-RecycleBin -Confirm:$false\n\tif ($lastExitCode -ne \"0\") { throw \"'Clear-RecycleBin' failed\" }\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"It's clean now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of new-shortcut.ps1 PowerShell Script\nDESCRIPTION: A simple example showing how to use the new-shortcut.ps1 script to create a shortcut named 'HDD' in the C:\\Temp directory that points to the C:\\ drive.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-shortcut.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./new-shortcut C:\\Temp\\HDD C:\\\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Script Exit in PowerShell\nDESCRIPTION: This snippet provides error handling and script termination. It uses a `try-catch` block to catch any exceptions during the execution. Upon encountering an error, it writes an error message to the console and exits the script with an exit code of 1 (failure). If the script completes successfully, it exits with an exit code of 0 (success).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of translate-file.ps1 PowerShell Script\nDESCRIPTION: This example demonstrates how to execute the `translate-file.ps1` script. It shows the command-line usage where the script is invoked with the file path \"C:\\Memo.txt\", the source language \"en\" (English), and the target language \"de\" (German). The script reads content from the provided file and translates its content from English to German, outputting the results to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-file.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./translate-file C:\\Memo.txt en de\n```\n\n----------------------------------------\n\nTITLE: Speaking German Text via TTS in PowerShell Script\nDESCRIPTION: This PowerShell code implements a command-line utility that accepts a string (German text) to be spoken aloud via the Windows Speech API (SAPI). It searches for installed voices that match German language descriptors, selects a German voice, and uses it to speak the text. The script accepts the text as a parameter or prompts the user and handles errors if no appropriate voice is installed. Dependencies include the SAPI.SPVoice COM object and at least one installed German voice. Key parameter is -text, which is the input string; if omitted, the script prompts for input. Output is the spoken German text or an error if no German TTS voice is found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-german.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in German \n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a German text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the German text to speak\n.EXAMPLE\n\tPS> ./speak-german.ps1 Hallo\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the German text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- German*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No German text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage - PowerShell\nDESCRIPTION: This is a demonstration of how to execute the `open-toggl-website.ps1` script from the PowerShell command prompt. The script is run using its path, and it will open the Toggl Track website in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-toggl-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-toggl-website\n```\n\n----------------------------------------\n\nTITLE: Playing a Beep Sound - PowerShell\nDESCRIPTION: This PowerShell script plays a short beep sound. It supports common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. It takes no specific parameters besides the common ones. The script's primary function is to produce an audible sound via the operating system's sound capabilities.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-beep.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-beep.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio Code using PowerShell and winget\nDESCRIPTION: This PowerShell script automates the installation of Visual Studio Code using the winget package manager. It attempts to install Visual Studio Code, accepts package and source agreements, and handles potential errors during the installation process. The script uses a try-catch block to manage exceptions and provides appropriate exit codes to indicate success or failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-visual-studio-code.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Visual Studio Code\n.DESCRIPTION\n\tThis PowerShell script installs Visual Studio Code.\n.EXAMPLE\n\tPS> ./install-visual-studio-code.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Visual Studio Code, please wait...\"\n\n\t& winget install --id Microsoft.VisualStudioCode --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Visual Studio Code installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key with ssh-keygen in PowerShell\nDESCRIPTION: This PowerShell snippet executes the `ssh-keygen` command to create a new SSH key. It then checks for the presence of public key files (id_ed25519.pub or id_rsa.pub) and retrieves the public key content. The output displays the type of key created and the public key string. It includes error handling using a try-catch block to catch potential problems during the key generation or public key retrieval process, exiting with a status code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-ssh-key.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Creates a new SSH key\n.DESCRIPTION\n        This PowerShell script creates a new SSH key for the user.\n.EXAMPLE\n        PS> ./new-ssh-key.ps1\n\t✅ New SSH key of Ed25519 type saved to ~/.ssh - your public key is:\n\t    ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAILb8s5zU9YDApGQ82H45fMKVPMr5cw9fzh3PEBjZZ+Rm markus@PI\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t& ssh-keygen\n\tif ($lastExitCode -ne \"0\") { throw \"ssh-keygen failed\" }\n\n\tif (Test-Path \"~/.ssh/id_ed25519.pub\") {\n\t\t$publicKey = Get-Content \"~/.ssh/id_ed25519.pub\"\n\t\t$enc = \"Ed25519\"\n\t} elseif (Test-Path \"~/.ssh/id_rsa.pub\") {\n\t\t$publicKey = Get-Content \"~/.ssh/id_rsa.pub\"\n\t\t$enc = \"RSA\"\n\t} else {\n\t\tthrow \"No public key found.\"\n\t}\n\t\"✅ New SSH key of $enc type saved to ~/.ssh - your public key is:\"\n\t\"   $publicKey\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: List Motherboard Details PowerShell\nDESCRIPTION: This PowerShell script retrieves and displays the motherboard details by querying the Win32_BaseBoard WMI class. It uses Get-WmiObject to fetch the motherboard information. An error handling block is included to catch potential exceptions and print error messages along with the line number where the error occurred. The script exits with code 0 on success and 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-motherboard.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists motherboard details\n.DESCRIPTION\n\tThis PowerShell script lists the motherboard details.\n.EXAMPLE\n\tPS> ./list-motherboard.ps1\n\n\tManufacturer : Gigabyte Technology Co., Ltd.\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-WmiObject -Class Win32_BaseBoard\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Google Chrome Gracefully with PowerShell\nDESCRIPTION: This PowerShell script gracefully closes the Google Chrome web browser by invoking an auxiliary script close-program.ps1, passing it the display name and process names associated with Chrome. The script supports standard PowerShell common parameters such as Verbose and Debug for enhanced control. It exits with status code 0 upon successful closure. Dependencies include the presence of close-program.ps1 in the same script root directory, which performs the actual process termination.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-chrome.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Chrome browser\n.DESCRIPTION\n\tThis PowerShell script closes the Google Chrome Web browser gracefully.\n.EXAMPLE\n\tPS> ./close-chrome\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Google Chrome\" \"chrome\" \"chrome\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Running XML File Checker Example\nDESCRIPTION: This snippet shows an example command execution of the `check-xml-files.ps1` script, scanning the `C:\\Windows` directory. It also includes an example of the typical output generated by the script, showing the total files checked, invalid/valid counts, path, and elapsed time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-xml-files.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-xml-files.ps1 C:\\Windows\n...\n✅ Checked 3387 XML files (2462 invalid, 925 valid) within 📂C:\\Windows in 116 sec\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example (PowerShell)\nDESCRIPTION: This snippet provides an example of how to execute the export-to-manuals.ps1 script from the PowerShell command line without any arguments. It demonstrates the progress indicators and the final output message showing the number of manuals exported and the duration, using the default values for the file pattern and target directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-to-manuals.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./export-to-manuals.ps1\n⏳ (1/2) Reading PowerShell scripts from /home/mf/PowerShell/scripts/*.ps1 ... \n⏳ (2/2) Exporting Markdown manuals to /home/mf/PowerShell/docs ...\n✅ Exported 518 Markdown manuals in 28 sec.\n```\n\n----------------------------------------\n\nTITLE: Viewing cd-ssh.ps1 Script Parameters in PowerShell\nDESCRIPTION: Demonstrates the command syntax for running the cd-ssh.ps1 script and lists the common PowerShell parameters it supports, such as Verbose, Debug, and ErrorAction. This snippet illustrates how to invoke the script and what standard parameters can modify its behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-ssh.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-ssh.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing show-mexico-city.ps1 PowerShell Script Example\nDESCRIPTION: Provides a basic example of running the `show-mexico-city.ps1` script from a PowerShell prompt. It shows the simple command used to launch the script without any additional parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-mexico-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-mexico-city\n\n\n```\n\n----------------------------------------\n\nTITLE: Running show-jenkins-manual.ps1 in PowerShell\nDESCRIPTION: Demonstrates how to execute the script from a PowerShell prompt. This example shows the basic usage without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-jenkins-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-jenkins-manual\n```\n\n----------------------------------------\n\nTITLE: Closing Calculator Application - PowerShell\nDESCRIPTION: This PowerShell script closes the calculator application using the `Stop-Process` cmdlet.  It targets the process named \"CalculatorApp\". Upon successful termination of the process, the script then exits with a success code (0).  No specific parameters are required beyond PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-calculator.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the calculator application\n.DESCRIPTION\n\tThis PowerShell script closes the calculator application gracefully.\n.EXAMPLE\n\tPS> ./close-calculator\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStop-Process -name \"CalculatorApp\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to User Autostart Folder in PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to the user's autostart folder located at '~/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup'. It uses Resolve-Path to get the full path, verifies the folder exists, and sets the location. The script supports common PowerShell parameters like Verbose and Debug. On success, it outputs the directory path, and on failure, it outputs a descriptive error message with line number. Dependencies include a Windows OS environment and PowerShell execution policy allowing the script to run.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-autostart.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's autostart folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's autostart folder.\n.EXAMPLE\n\tPS> ./cd-autostart.ps1\n\t📂C:\\Users\\Markus\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"~/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup\"\n\tif (-not(Test-Path \"$path\" -pathType container)) {\n\t\tthrow \"Autostart folder at 📂$path doesn't exist (yet)\"\n\t}\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Showing script parameters - PowerShell\nDESCRIPTION: This snippet illustrates the parameter syntax for the `speak-time.ps1` script. It shows that the script accepts standard PowerShell common parameters like Verbose, Debug, etc., allowing for flexible scripting and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-time.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nspeak-time.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Git Extensions Closure - PowerShell\nDESCRIPTION: This snippet contains the core logic for closing the Git Extensions application. It uses the TaskKill /im GitExtensions.exe command to attempt to force-close the process and checks the $lastExitCode. If TaskKill reports failure, it executes another script (speak-english.ps1) to provide feedback before exiting with an error code (1); otherwise, it exits with code 0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-git-extensions.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Git Extensions app\n.DESCRIPTION\n\tThis PowerShell script closes the Git Extensions application gracefully.\n.EXAMPLE\n\tPS> ./close-git-extensions.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im GitExtensions.exe\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Git Extensions isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Exception Types in Current .NET AppDomain with PowerShell\nDESCRIPTION: This PowerShell script enumerates all loaded assemblies in the current AppDomain and iterates through their exported types to find those whose full name matches 'Exception', effectively identifying all exception classes currently available. It uses .NET reflection, pipelining each type through a filter and selecting the BaseType, Name, and FullName properties for output. The script requires no additional dependencies beyond the PowerShell runtime with .NET integration and supports all common parameters such as Verbose and Debug; it accepts no custom parameters. The output is a table of exception types, and the script is intended for diagnostic or inventory purposes; it assumes standard .NET assembly loading context and will silently continue if access to any assembly's types fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-error-types.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[appdomain]::CurrentDomain.GetAssemblies() | ForEach {\n    Try {\n        $_.GetExportedTypes() | Where {\n            $_.Fullname -match 'Exception'\n        }\n    } Catch {}\n} | Select BaseType,Name,FullName\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This snippet shows the parameter block definition for the 'list-folder.ps1' script. It defines an optional '-searchPattern' parameter of type String with a default value of '*' to specify which files/folders to list. It also indicates support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-folder.ps1 [[-searchPattern] <String>] [<CommonParameters>]\n\n-searchPattern <String>\n    Specifies the search pattern (\"*\" by default which means anything)\n    \n    Required?                    false\n    Position?                    1\n    Default value                *\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of count-lines.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the count-lines.ps1 script from the PowerShell console, providing a directory path ('C:\\Repos\\cmake') as input. Shows the typical success output format, including the total line count, file count, directory name, and execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/count-lines.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./count-lines.ps1 C:\\Repos\\cmake\n✅ Found 639921 lines in 11411 text files within 📂cmake in 34 sec.\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Listing Logic in PowerShell (list-updates.ps1)\nDESCRIPTION: This is the main script logic for list-updates.ps1. It includes comment-based help, checks the operating system using $IsLinux and $IsMacOS variables, and executes different commands accordingly: 'apt update' and 'apt list --upgradable' plus 'snap refresh --list' on Linux, or 'winget upgrade --include-unknown' on Windows. MacOS is currently unsupported. A try/catch block handles potential errors during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-updates.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists software updates\n.DESCRIPTION\n\tThis PowerShell script queries the latest available software updates for the\n\tlocal machine and lists it.\n\tNOTE: Use the script 'install-updates.ps1' to install the listed updates.\n.EXAMPLE\n\tPS> ./list-updates.ps1\n\n\tName               Id                    Version       Available        Source\n\t------------------------------------------------------------------------------\n\tGit                Git.Git               2.43.0        2.44.0           winget\n        ...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t\"⏳ (1/2) Querying package updates...\"\n\t\t& sudo apt update\n\t\t& sudo apt list --upgradable\n\t\t\"⏳ (2/2) Querying Snap updates...\"\n\t\t& sudo snap refresh --list\n\t} elseif ($IsMacOS) {\n\t\tthrow \"Sorry, MacOS not supported yet\"\n\t} else {\n\t\tWrite-Progress \"Querying updates from Microsoft Store and winget...\"\n\t\t\" \"\n\t\t& winget upgrade --include-unknown\n\t\tWrite-Progress -completed \"Done.\"\n\t}\n\t\" \"\n\t\"NOTE: Execute script 'install-updates.ps1' to install the listed updates.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Change to Windows Folder in PowerShell\nDESCRIPTION: This script sets the working directory to the Windows folder using PowerShell. It uses the built-in $env:WINDIR environment variable, checks the path with Resolve-Path and Test-Path, changes location using Set-Location, and confirms the action by outputting the path. Error handling is implemented to provide clear feedback and exit codes; dependencies are standard PowerShell cmdlets and environment variables, with no third-party requirements.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-windows.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t$path = Resolve-Path \"$env:WINDIR\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Windows directory at 📂$path doesn't exist\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Example of running list-ram.ps1 script\nDESCRIPTION: Demonstrates executing the script and shows a partial example of the output, which displays RAM details using the Win32_PhysicalMemory class properties.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ram.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-ram.ps1\n\n\n\n__GENUS              : 2\n__CLASS              : Win32_PhysicalMemory\n...\n```\n\n----------------------------------------\n\nTITLE: Main Execution Block - PowerShell\nDESCRIPTION: This snippet is the main execution block of the script. It converts the input text to uppercase, iterates through each row (1-4), and each character of the text. For each character, it calls the `BigChar` function to get the corresponding row of the large letter and concatenates it to a line string, which is then outputted to the console. The Try-Catch block handles any potential errors and provides informative error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-big.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tWrite-Output \"\"\n\t[char[]]$arrayOfChars = $text.ToUpper()\n\tfor ($row = 1; $row -lt 5; $row++) {\n\t\t$line = \"\"\n\t\tforeach($char in $arrayOfChars) {\n\t\t\t$line += BigChar $char $row\n\t\t}\n\t\tWrite-Output $line\n\t}\n\tWrite-Output \"\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Screen Magnifier Script\nDESCRIPTION: This example demonstrates how to execute the open-screen-magnifier.ps1 script. It assumes the script is located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-screen-magnifier.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-screen-magnifier\n```\n\n----------------------------------------\n\nTITLE: Declaring Common Parameter Support in PowerShell\nDESCRIPTION: This snippet declares that the script accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable), enabling consistent parameter handling across different scripts. These parameters are built into PowerShell and don't require explicit definition within the script logic itself.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-special-folders.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using check-independence-day.ps1 with Parameters\nDESCRIPTION: Shows how to execute the check-independence-day.ps1 script with its supported parameters, including common PowerShell parameters like Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-independence-day.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-independence-day.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Windows Defender\nDESCRIPTION: This script launches the Windows Defender application by invoking the 'Start-Process' cmdlet with 'windowsdefender:' URI. It includes metadata comments such as synopsis, description, example, and author notes. The script exits with code 0 upon success, indicating successful launch.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windows-defender.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches Windows Defender\n.DESCRIPTION\n\tThis script launches the Windows Defender application.\n.EXAMPLE\n\tPS> ./open-windows-defender\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process windowsdefender:\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Execution Example\nDESCRIPTION: This snippet demonstrates how to execute the `export-scripts2manuals.ps1` script. The command `./export-scripts2manuals.ps1` runs the script from the current directory. This will generate manuals based on the default file pattern or the provided `-FilePattern` parameter if specified.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-scripts2manuals.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS>./export-scripts2manuals.ps1\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Metadata and Usage Documentation\nDESCRIPTION: This comment block provides comprehensive documentation for the 'write-code.ps1' script, including its synopsis, description, parameters with their default values and options, as well as an example of usage and related links. It helps users understand the script's purpose, dependencies, and how to invoke it with different parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-code.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites code\n.DESCRIPTION\n\tThis PowerShell script generates and writes PowerShell code on the console (no AI, just for fun).\n.PARAMETER color\n\tSpecifies the text color to use (\"green\" by default)\n.PARAMETER speed\n\tSpecifies the speed in milliseconds per code line (500 by default)\n.EXAMPLE\n\tPS> ./write-code.ps1\n\ttry {\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n#>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PowerShell Script\nDESCRIPTION: This snippet provides a command-line example demonstrating how to execute the `close-file-explorer.ps1` script from a PowerShell prompt. It shows the basic syntax `./close-file-explorer` which runs the script in the current directory, assuming it has execution permission. The example highlights the simplicity of calling the script without any arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-file-explorer.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-file-explorer\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters - PowerShell\nDESCRIPTION: Documents the parameters accepted by the log-off script. Specifically mentions support for standard PowerShell common parameters like Verbose, Debug, etc., indicated by `[<CommonParameters>]`. No specific custom parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/log-off.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/log-off.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing list-pins.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates a basic example of how to execute the list-pins.ps1 script from the PowerShell prompt using default parameter values.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-pins.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-pins.ps1\n```\n\n----------------------------------------\n\nTITLE: Script Parameters Definition in PowerShell\nDESCRIPTION: Defines the command-line syntax for executing the play-wolf-sound.ps1 script. It shows the script path and indicates support for standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., which control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-wolf-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-wolf-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Searching for Git Executable\nDESCRIPTION: This snippet searches for the Git executable and retrieves its version information. It uses the `git --version` command. The script checks the exit code to ensure that the Git executable is found and available in the system's environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (1/10) Searching for Git executable...  \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n```\n\n----------------------------------------\n\nTITLE: Listing All Scheduled Tasks with PowerShell\nDESCRIPTION: This PowerShell script retrieves all scheduled tasks on the system using the `Get-ScheduledTask` cmdlet. The output is then formatted into a table using `Format-Table`, displaying the TaskName, TaskPath, and State properties with specified column widths. The script includes a `try...catch` block for basic error handling, printing an error message and exiting with status code 1 if an exception occurs, otherwise exiting with status code 0 upon successful completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-tasks.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all scheduled tasks\n.DESCRIPTION\n\tThis PowerShell script lists all scheduled tasks.\n.EXAMPLE\n\tPS> ./list-tasks.ps1\n\n\tTASKNAME                          TASKPATH                             STATE           \n\t--------                          --------                             -----\n\t.NET Framework NGEN v4.0.30319    \\Microsoft\\Windows\\.NET Framework\\   Ready      \n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell0\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-ScheduledTask | Format-Table -property @{e='TASKNAME';width=40},@{e='TASKPATH';width=55},@{e='STATE';width=10}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Cow Sound Using External MP3 Script in PowerShell\nDESCRIPTION: This is the main implementation of 'play-cow-sound.ps1'. It executes an external script 'play-mp3.ps1' to play a cow MP3 file located in a relative path. The script utilizes the $PSScriptRoot variable to resolve paths, ensuring compatibility regardless of the launch location. Dependencies include 'play-mp3.ps1' and access to the 'cow.mp3' sound file. The script exits with status 0 upon success. Ensure all referenced files exist at the specified locations.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-cow-sound.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a cow sound\n.DESCRIPTION\n\tThis PowerShell script plays a cow sound.\n.EXAMPLE\n\tPS> ./play-cow-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/cow.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Translating Text Files Using PowerShell Script\nDESCRIPTION: This PowerShell script translates text files into multiple languages by detecting the source language from filename patterns and invoking an external translation script for each target language. It handles file pattern input, loops through files, and manages translation file naming. Dependencies include the external 'translate-file.ps1' script and PowerShell environment. Key parameters include 'filePattern' for specifying files, and the script outputs translated files with language-specific suffixes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTranslates text files\n.DESCRIPTION\n\tThis PowerShell script translates text files into multiple languages.\n.PARAMETER filePattern\n\tSpecifies the file pattern of the text file(s) to be translated\n.EXAMPLE\n\tPS> ./translate-files C:\\Temp\\*.txt\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$filePattern = \"\")\n\nfunction DetectSourceLang { param([string]$Filename)\n\tif (\"$Filename\" -like \"*-Deutsch*\")  { return \"de\" }\n\tif (\"$Filename\" -like \"*-English*\")  { return \"en\" }\n\tif (\"$Filename\" -like \"*-Español*\")  { return \"es\" }\n\tif (\"$Filename\" -like \"*-Français*\") { return \"fr\" }\n\tif (\"$Filename\" -like \"*-Portuguese*\") { return \"pt\" }\n\treturn \"unknown\"\n}\n\nfunction TranslateFilename { param([string]$Filename, [string]$SourceLang, [string]$TargetLang)\n\t[string]$SourceLanguage = \"\"\n\tif ($SourceLang -eq \"de\") { $SourceLanguage = \"-Deutsch\" }\n\tif ($SourceLang -eq \"en\") { $SourceLanguage = \"-English\" }\n\tif ($SourceLang -eq \"es\") { $SourceLanguage = \"-Español\" }\n\tif ($SourceLang -eq \"fr\") { $SourceLanguage = \"-Français\" }\n\tif ($SourceLang -eq \"pt\") { $SourceLanguage = \"-Portuguese\" }\n\t[string]$TargetLanguage = \"-Unknown\"\n\tif ($TargetLang -eq \"ar\") { $TargetLanguage = \"-Arabic\" }\n\tif ($TargetLang -eq \"de\") { $TargetLanguage = \"-Deutsch\" }\n\tif ($TargetLang -eq \"en\") { $TargetLanguage = \"-English\" }\n\tif ($TargetLang -eq \"es\") { $TargetLanguage = \"-Español\" }\n\tif ($TargetLang -eq \"fr\") { $TargetLanguage = \"-Français\" }\n\tif ($TargetLang -eq \"pt\") { $TargetLanguage = \"-Portuguese\" }\n\treturn $Filename.replace($SourceLanguage, $TargetLanguage)\n}\n\ntry {\n\tif ($filePattern -eq \"\" ) { $filePattern = Read-Host \"Enter the file pattern of the text file(s) to be translated\" }\n\n\t$TargetLanguages = \"ar\",\"zh\",\"fr\",\"de\",\"hi\",\"ga\",\"it\",\"ja\",\"ko\",\"pt\",\"ru\",\"es\"\n\t$SourceFiles = Get-ChildItem -path \"$filePattern\"\n\tforeach($SourceFile in $SourceFiles) {\n\t\t$SourceLang = DetectSourceLang $SourceFile\n\t\tforeach($TargetLang in $TargetLanguages) {\n\t\t\tif ($SourceLang -eq $TargetLang) { continue }\n\t\t\tWrite-Host \"Translating $SourceFile from $SourceLang to $TargetLang ...\"\n\t\t\t$TargetFile = TranslateFilename $SourceFile $SourceLang $TargetLang\n\t\t\tWrite-Host \"$TargetFile\"\n\t\t\t& \"$PSScriptRoot/translate-file.ps1\" $SourceFile $SourceLang $TargetLang > $TargetFile\n\t\t}\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Changing working directory to templates folder in PowerShell\nDESCRIPTION: This PowerShell script changes the current working directory to the user's templates folder, handling both Linux and Windows environments. It resolves the correct templates folder path using platform-specific methods, verifies folder existence, and sets the location accordingly. In case of failure, it throws a descriptive error and exits with status code 1. The script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, and others. It expects no input parameters and outputs the templates folder path upon success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-templates.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the templates folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the templates folder.\n.EXAMPLE\n\tPS> ./cd-templates\n\t📂/home/Markus/Templates\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Templates\"\n\t} else {\n\t\t$path = [Environment]::GetFolderPath('Templates')\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Templates folder at 📂$path doesn\\'t exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Interactive Input if Parameters are Empty\nDESCRIPTION: If any of the required parameters (`CommitID`, `CommitMessage`, `Branches`) are not provided, the script prompts the user for interactive input using `read-host`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pick-commit.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n\tif ($CommitID -eq \"\") { $CommitID = read-host \"Enter the Git commit id to cherry-pick\" }\n\tif ($CommitMessage -eq \"\") { $CommitMessage = read-host \"Enter the commit message to use\" }\n\tif ($Branches -eq \"\") { $Branches = read-host \"Enter the branches (separated by spaces)\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-las-vegas-city.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the parameter block for the 'show-las-vegas-city.ps1' script. It indicates that the script accepts only the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) and has no script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-las-vegas-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-las-vegas-city.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Checking Outlook Inbox for Unread Mails in PowerShell\nDESCRIPTION: The core logic of the PowerShell script. It uses the .NET `Add-Type` cmdlet to load the Outlook COM interop assembly, creates an Outlook application object, accesses the MAPI namespace and the default Inbox folder (folder ID 6). It then iterates through the inbox items, checks the `Unread` property of each mail, prints a warning message for new mails, counts them, and finally reports if no new mails were found. Includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-outlook.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks Outlook's inbox \n.DESCRIPTION\n\tThis PowerShell script checks the inbox of Outlook for new/unread mails.\n.EXAMPLE\n\tPS> ./check-outlook.ps1\n\t✅ No new mails.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tAdd-Type -assembly \"Microsoft.Office.Interop.Outlook\"\n\t$Outlook = New-Object -comobject Outlook.Application\n\t$Namespace = $Outlook.GetNameSpace(\"MAPI\")\n\t$Inbox = $Namespace.GetDefaultFolder(6) # 6 = olFolderInbox\n\t[int]$Unread = 0\n\tforeach($Mail in $Inbox.Items) {\n\t\tif ($Mail.Unread -eq $false) { continue }\n\t\t\"⚠️ New mail '$($Mail.Subject)' from $($Mail.SenderName).\"\n\t\t$Unread++\n\t}\n\tif ($Unread -eq 0) { \"✅ No new mails.\" }\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing see-you-later.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates a basic example of how to run the see-you-later.ps1 script from a PowerShell prompt (PS>). Executing the script directly using its path triggers its default functionality, which is the text-to-speech reply.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/see-you-later.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./see-you-later\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Parameters | PowerShell\nDESCRIPTION: Documents the standard PowerShell common parameters supported by the script. These parameters provide control over script execution behavior like error handling and output buffering. No specific script parameters are defined beyond these standard ones.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/moon.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./moon.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using say-operating-system.ps1 PowerShell Script with Parameters\nDESCRIPTION: Shows the syntax for executing the say-operating-system.ps1 script. The script supports common PowerShell parameters like Verbose, Debug, and ErrorAction, but doesn't require any specific parameters for basic operation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-operating-system.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/say-operating-system.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Drawing the Player Scores in PowerShell\nDESCRIPTION: This function displays the current scores for both players at the top-center of the console window. It calculates the cursor position based on the console width and writes the score string at that location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDraws the current scores for Player 1 and Player 2 at the top of the console window.\n.DESCRIPTION\nThis function calculates the central position and displays the players' scores, updating dynamically during gameplay.\n#>\nfunction DrawScores {\n    $x = [System.Console]::WindowWidth / 2 - 4\n    [System.Console]::SetCursorPosition($x, 1)\n    [System.Console]::Write(\"$($script:scorePlayer1) - $($script:scorePlayer2)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Green-Colored Console Output in PowerShell Script\nDESCRIPTION: This snippet presents the full implementation of the write-green.ps1 script, containing inline documentation, parameter definition, input handling, and core output logic. The script accepts an optional '-text' parameter; if not supplied, it prompts the user interactively. The main operation uses 'write-host' with the '-foregroundColor green' parameter to print text in green, then exits with code 0. No external modules are required beyond built-in PowerShell cmdlets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-green.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text in a green foreground color\n.DESCRIPTION\n\tThis PowerShell script writes text in a green foreground color.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-green \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\nif ($text -eq \"\" ) { $text = read-host \"Enter the text to write\" }\n\nwrite-host -foregroundColor green \"$text\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Showing Los Angeles in Google Maps with PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to Google Maps centered on Los Angeles. It leverages the Start-Process cmdlet to open the browser with the specified URL. No external dependencies are required. The URL is hardcoded to point to Google Maps with Los Angeles coordinates.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-los-angeles-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-los-angeles-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Declaring and Documenting Script Parameters in PowerShell\nDESCRIPTION: This snippet defines parameter options for the PowerShell script, supporting user configuration of the web server port, user database file, and log file path with default values. Dependencies include PowerShell 5.0+ and the external 'calibre-server' executable. Parameters support named and positional use and may be customized per invocation. Expected input values are: Port (integer), UserDB (string path), and Logfile (string path). No advanced validation or parameter transformations are applied.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/start-calibre-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nstart-calibre-server.ps1 [[-Port] <Int32>] [[-UserDB] <String>] [[-Logfile] <String>] [<CommonParameters>]\n\n-Port <Int32>\n    Specifies the Web port number (8099 by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                8099\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-UserDB <String>\n    \n    Required?                    false\n    Position?                    2\n    Default value                \"$HOME/CalibreUsers.sqlite\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Logfile <String>\n    \n    Required?                    false\n    Position?                    3\n    Default value                \"$HOME/CalibreServer.log\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Providing Script Execution Example - PowerShell\nDESCRIPTION: This simple example demonstrates how to execute the `open-wolfram-alpha.ps1` script from a PowerShell prompt. Running `./open-wolfram-alpha` assumes the current directory contains the script or it's accessible via the PATH environment variable, launching the configured default web browser to WolframAlpha.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wolfram-alpha.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-wolfram-alpha\n```\n\n----------------------------------------\n\nTITLE: Defining PowerShell Script Parameters\nDESCRIPTION: Documents the command-line parameters accepted by the `ping-local-hosts.ps1` script. It specifically details the optional `-timeout` parameter, specifying its data type, position, default value, and lack of pipeline or wildcard support. It also notes the script's compatibility with standard PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-local-hosts.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./ping-local-hosts.ps1 [[-timeout] <Int32>] [<CommonParameters>]\n\n-timeout <Int32>\n    \n    Required?                    false\n    Position?                    1\n    Default value                600\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Checking Credentials in PowerShell\nDESCRIPTION: This PowerShell script defines a function that takes an optional target file path as a parameter. It prompts the user for their username and password, reads the saved credentials from the file, and compares the entered credentials against the saved ones. The script uses Get-Credential, ConvertTo-SecureString, and error handling via a try-catch block. Success or failure messages are displayed to the user.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-credentials.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks credentials \n.DESCRIPTION\n\tThis PowerShell script asks for credentials and checks them against saved ones (\"$HOME\\my.credentials\" by default).\n.PARAMETER TargetFile\n\tSpecifies the target file (\"$HOME\\my.credentials\" by default)\n.EXAMPLE\n\tPS> ./check-credentials.ps1\n\tEnter username and password, please.\n \t✅ Your credentials are correct.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$TargetFile = \"$HOME\\my.credentials\")\n\ntry {\n\tWrite-Host \"Enter username and password, please.\" -foreground red\n\t$credsFromUser = Get-Credential\n\n\t$secureString = Get-Content \"$TargetFile\" | ConvertTo-SecureString\n\t$credsFromFile = New-Object System.Management.Automation.PSCredential($credsFromUser.UserName, $secureString)\n\n\tif ($credsFromUser.UserName -ne $credsFromFile.UserName) { throw \"Sorry, your username is wrong.\" }\n\n\t$pw1 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($credsFromUser.Password))\n\t$pw2 = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($credsFromFile.Password))\n\tif ($pw1 -cne $pw2) { throw \"Sorry, your password is wrong.\" }\n\n\t\"✅ Your credentials are correct.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for fetch-repos.ps1 in PowerShell\nDESCRIPTION: Defines the `parentDirPath` parameter for the `fetch-repos.ps1` script. This parameter specifies the target directory containing Git repositories, defaults to the current working directory (`$PWD`), is optional, and accepts a string value. The script also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/fetch-repos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/fetch-repos.ps1 [[-parentDirPath] <String>] [<CommonParameters>]\n\n-parentDirPath <String>\n    Specifies the path to the parent folder\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: cd-videos.ps1 Full Script Source Code (PowerShell)\nDESCRIPTION: Displays the complete source code for the cd-videos.ps1 script. It includes comment-based help (Synopsis, Description, Example, Link, Notes) and the core logic which determines the Videos folder path based on OS ($IsLinux or Windows using [Environment]::GetFolderPath), checks if it exists using Test-Path, changes the location using Set-Location, outputs the path, and includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-videos.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's videos folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's videos folder.\n.EXAMPLE\n\tPS> ./cd-videos\n\t📂C:\\Users\\Markus\\Videos\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Videos\"\n\t} else {\n\t\t$path = [Environment]::GetFolderPath('MyVideos')\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Videos folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-serenade-manual.ps1 in PowerShell\nDESCRIPTION: This snippet outlines the parameters accepted by the `show-serenade-manual.ps1` script. It exclusively supports the standard PowerShell CommonParameters (like Verbose, Debug, ErrorAction, etc.), allowing users to control script execution details such as output verbosity and error handling. No custom parameters are defined for this script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-serenade-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-serenade-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using the cd-etc PowerShell Script\nDESCRIPTION: Example showing how to use the cd-etc.ps1 script to navigate to the /etc directory and view the confirmation output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-etc.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-etc\n📂C:\\Windows\\System32\\drivers\\etc\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for simulate-presence.ps1 (PowerShell)\nDESCRIPTION: Defines the command-line parameters for the `simulate-presence.ps1` script. It accepts an optional `-IPaddress` parameter (string) specifying the target Shelly1 device's IP address. If omitted, the script will prompt for it. The script also supports standard PowerShell common parameters like Verbose, Debug, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/simulate-presence.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/simulate-presence.ps1 [[-IPaddress] <String>] [<CommonParameters>]\n\n-IPaddress <String>\n    Specifies the IP address of the Shelly1 device\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementation of OS Updates Listing in PowerShell\nDESCRIPTION: The complete script that fetches and displays OS update information from an RSS feed. It includes parameter definitions, error handling, and formatting of the output display.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os-updates.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists OS updates\n.DESCRIPTION\n\tThis PowerShell script lists the latest updates for operating systems.\n.PARAMETER RSS_URL\n\tSpecifies the URL to the RSS feed\n.PARAMETER MaxCount\n\tSpecifies the number of news to list\n.EXAMPLE\n\tPS> ./list-os-updates.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$RSS_URL = \"https://distrowatch.com/news/dwd.xml\", [int]$MaxCount = 30)\n\ntry {\n\t\" \"\n\t\"Date  OS Update\"\n\t\"----  ---------\"\n\t[xml]$Content = (Invoke-WebRequest -URI $RSS_URL -userAgent \"curl\" -useBasicParsing).Content\n\n\n\t[int]$Count = 0\n\tforeach ($item in $Content.rss.channel.item) {\n\t\t\"$($item.title)\"\n\t\t$Count++\n\t\tif ($Count -eq $MaxCount) { break }\n\t}\n\t\"      (source: DistroWatch.com)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Supported Common Parameters for open-z-drive.ps1 in PowerShell\nDESCRIPTION: This snippet lists the common PowerShell parameters supported by the open-z-drive.ps1 script. These parameters allow fine-grained control of script execution, such as enabling verbose output or specifying error handling behavior. No code execution occurs—this is a reference for which flags can be used when running the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-z-drive.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-z-drive.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for check-network.ps1 (PowerShell)\nDESCRIPTION: This snippet describes the command-line syntax for the check-network.ps1 script. It shows that the script can be called without specific arguments but supports standard PowerShell CommonParameters like Verbose, Debug, ErrorAction, etc., which control how the script handles output, errors, and execution flow.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-network.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-network.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameter Syntax for list-empty-dirs.ps1 (PowerShell)\nDESCRIPTION: This snippet illustrates the command-line syntax for invoking the `list-empty-dirs.ps1` script. It shows the optional `-path` parameter for specifying the target directory tree and indicates that the script supports standard PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-empty-dirs.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-empty-dirs.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree (current working directory by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Common Parameters Usage\nDESCRIPTION: This snippet illustrates how to use common parameters with the `close-outlook.ps1` PowerShell script. It lists the common parameters that can be used such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-outlook.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Building using Autogen (PowerShell)\nDESCRIPTION: This snippet builds a repository using autogen.  It checks for autogen.sh, executes it with --force, then runs configure and make.  It requires autogen, configure, and make to be installed and accessible in the system's PATH.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/autogen.sh\" -pathType leaf) { \n\t\t\"⏳ Building 📂$dirName by using 'autogen.sh'...\"\n\t\tSet-Location \"$path/\"\n\n\t\t& ./autogen.sh --force\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing './autogen.sh --force' exited with error code $lastExitCode\" }\n\n\t\t& ./configure\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing './configure' exited with error code $lastExitCode\" }\n\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' exited with error code $lastExitCode\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Uninstalling 9 ZIP Using PowerShell\nDESCRIPTION: This PowerShell script uninstalls the 9 ZIP software package from the local computer by executing the 'winget uninstall' command. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction to control script behavior. The script catches errors when the uninstallation fails or if 9 ZIP is not installed, outputting useful error messages and exiting with appropriate status codes. The input parameter is optional common parameters, and no additional input is required. The output consists of status messages indicating success or failure. Winget must be installed and configured on the system for successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-nine-zip.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls 9 ZIP\n.DESCRIPTION\n\tThis PowerShell script uninstalls 9 ZIP from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-nine-zip\n.LINK\n\thttps://github.com/fleschutz/talk2windows\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling 9 ZIP, please wait...\"\n\n\t& winget uninstall \"9 ZIP - open rar, zip, 7zip, gzip\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall 9 ZIP, is it installed?\" }\n\n\t\"9 ZIP is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Bitcoin Rate Check Script with Common PowerShell Parameters - PowerShell\nDESCRIPTION: This snippet demonstrates the command-line usage and parameter support for the Bitcoin rate checking script. It supports various common PowerShell parameters such as Verbose, Debug, ErrorAction, and others that manage script execution behavior and output handling. No explicit input arguments are required aside from these common parameters, and the script outputs the current Bitcoin exchange rate, optionally announcing it via text-to-speech.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-bitcoin-rate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-bitcoin-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Building using Meson (PowerShell)\nDESCRIPTION: This snippet builds a repository using Meson.  It checks for `meson.build`, executes `meson . build --prefix=/usr/local`.  Requires Meson to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/meson.build\" -pathType leaf) {\n\t\t\"⏳ Building 📂$dirName by using Meson...\"\n\t\tSet-Location \"$path\"\n\t\t& meson . build --prefix=/usr/local\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'meson . build' exited with error code $lastExitCode\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Remove Git Tag with Parameter Documentation\nDESCRIPTION: This PowerShell script removes a Git tag either locally, remotely, or both, supporting parameters for customization and including error handling. It checks if Git is installed and if the repository path exists before executing deletion commands; outputs success or error messages accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-tag.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRemoves a Git tag (locally, remote, or both)\n.DESCRIPTION\n\tThis PowerShell script removes a Git tag, either locally, remote, or both.\n.PARAMETER TagName\n\tSpecifies the Git tag name\n.PARAMETER Mode\n\tSpecifies either locally, remote, or both\n.PARAMETER RepoDir\n\tSpecifies the path to the Git repository\n.EXAMPLE\n\tPS> ./remove-tag v1.7 locally\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$TagName = \"\", [string]$Mode = \"\", [string]$RepoDir = \"$PWD\")\n\ntry {\n\tif ($TagName -eq \"\") { $TagName = read-host \"Enter new tag name\" }\n\tif ($Mode -eq \"\") { $Mode = read-host \"Remove the tag locally, remote, or both\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif (-not(test-path \"$RepoDir\" -pathType container)) { throw \"Can't access directory: $RepoDir\" }\n\n\t$Null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tif (($Mode -eq \"locally\") -or ($Mode -eq \"both\")) {\n\t\t\"Removing local tag...\"\n\t\t& git -C \"$RepoDir\" tag --delete $TagName\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git tag --delete' failed with exit code $lastExitCode\" }\n\t}\n\n\tif (($Mode -eq \"remote\") -or ($Mode -eq \"both\")) {\n\t\t\"Removing remote tag...\"\n\t\t& git -C \"$RepoDir\" push origin :refs/tags/$TagName\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git push origin' failed with exit code $lastExitCode\" }\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ removed tag '$TagName' in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing open-fbi-website.ps1 (PowerShell)\nDESCRIPTION: This example demonstrates how to run the open-fbi-website.ps1 script from a PowerShell console. Executing this command will launch the default web browser and navigate to the FBI's website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fbi-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-fbi-website\n```\n\n----------------------------------------\n\nTITLE: Install Software Updates\nDESCRIPTION: This PowerShell script installs software updates for the local machine, checking for sufficient disk space and pending reboots before proceeding. It uses different package managers like winget (Windows), apt (Linux), snap (Linux), and softwareupdate (macOS) to install updates, and includes error handling to report issues.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-updates.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls software updates\n.DESCRIPTION\n\tThis PowerShell script installs software updates for the local machine (might need admin rights).\n\tHINT: Use the script 'list-updates.ps1' to list the latest software updates in advance.\n.EXAMPLE\n\tPS> ./install-updates.ps1\n\t⏳ (1/2) Checking update requirements...\n\t✅ Drive C: has 441 GB free (56% of 1TB used)\n\t✅ Swap space has 1GB free (2% of 1GB used)\n\t✅ No pending system reboot\n\n\t⏳ (2/2) Installing updates from winget and Microsoft Store...\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsLinux) {\n\t\t\"⏳ (1/5) Checking update requirements...\"\n\t\t& \"$PSScriptRoot/check-smart-devices.ps1\"\n\t\t& \"$PSScriptRoot/check-drive-space.ps1\" /\n\t\t& \"$PSScriptRoot/check-swap-space.ps1\"\n\t\t& \"$PSScriptRoot/check-pending-reboot.ps1\"\n\t\tStart-Sleep -seconds 3\n\t\t\"\"\n\t\t\"⏳ (2/5) Querying latest package information...\"\n\t\t& sudo apt update\n\n\t\t\"⏳ (3/5) Removing obsolete packages...\"\n\t\t& sudo apt autoremove --yes\n\n\t\t\"⏳ (4/5) Upgrading installed packages...\"\n\t\t& sudo apt upgrade --yes\n\n\t\t\"⏳ (5/5) Upgrading installed Snaps...\"\n\t\t& sudo snap refresh\n\t} elseif ($IsMacOS) {\n\t\tWrite-Progress \"⏳ Installing updates...\"\n\t\t& sudo softwareupdate -i -a\n\t\tWrite-Progress -completed \" \"\n\t} else {\n\t\t# Windows:\n\t\t\"⏳ (1/2) Checking update requirements...\"\n\t\t& \"$PSScriptRoot/check-smart-devices.ps1\"\n\t\t& \"$PSScriptRoot/check-drive-space.ps1\" C\n\t\t& \"$PSScriptRoot/check-swap-space.ps1\"\n\t\t& \"$PSScriptRoot/check-pending-reboot.ps1\"\n\t\tStart-Sleep -seconds 3\n\t\t\"\"\n\t\t\"⏳ (2/2) Installing updates from winget...\"\n\t\t\"\"\n\t\t& winget upgrade --all --source=winget\n\t\t# & winget upgrade --all --source=msstore # does not work\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Updates installed in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Opening M Drive PowerShell\nDESCRIPTION: This is the source code for the open-m-drive.ps1 script. Its purpose is to open the M: drive folder using File Explorer by calling another script, open-file-explorer.ps1, located in the same directory. It passes 'M:' as an argument to the external script and then exits with a success status.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-m-drive.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the M: drive folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the M: drive folder.\n.EXAMPLE\n\tPS> ./open-m-drive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-file-explorer.ps1\" \"M:\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Main Logic for Rebooting FRITZ!Box\nDESCRIPTION: Implements the core functionality to reboot a FRITZ!Box device by setting parameters, performing version checks, establishing secure soap communication, retrieving device information, and sending reboot command via SOAP requests. It requires network connectivity and proper credentials, and outputs the response from the reboot command.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/reboot-fritzbox.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$Username = \"\", [string]$Password = \"\")\n\nif ($Username -eq \"\") { $Username = read-host \"Enter username for FRITZ!Box\" }\nif ($Password -eq \"\") { $Password = read-host \"Enter password for FRITZ!Box\" }\n$FB_FQDN = \"fritz.box\"\n\nif ($PSVersionTable.PSVersion.Major -lt 3) {\n\twrite-host \"ERROR: Minimum Powershell Version 3.0 is required!\" -F Yellow\n\treturn\n}\n\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]'Tls,Tls11,Tls12'\n\n[xml]$serviceinfo = Invoke-RestMethod -Method GET -Uri \"http://$($FB_FQDN):49000/tr64desc.xml\"\n[System.Xml.XmlNamespaceManager]$ns = new-Object System.Xml.XmlNamespaceManager $serviceinfo.NameTable\n$ns.AddNamespace(\"ns\",$serviceinfo.DocumentElement.NamespaceURI)\n[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }\n\nfunction Execute-SOAPRequest { param([Xml]$SOAPRequest, [string]$soapactionheader, [String]$URL)\n    try {\n        $wr = [System.Net.WebRequest]::Create($URL)\n        $wr.Headers.Add('SOAPAction',$soapactionheader)\n        $wr.ContentType = 'text/xml; charset=\"utf-8\"'\n        $wr.Accept      = 'text/xml'\n        $wr.Method      = 'POST'\n        $wr.PreAuthenticate = $true\n        $wr.Credentials = [System.Net.NetworkCredential]::new($Username,$Password)\n\n        $requestStream = $wr.GetRequestStream()\n        $SOAPRequest.Save($requestStream)\n        $requestStream.Close()\n        [System.Net.HttpWebResponse]$wresp = $wr.GetResponse()\n        $responseStream = $wresp.GetResponseStream()\n        $responseXML = [Xml]([System.IO.StreamReader]($responseStream)).ReadToEnd()\n        $responseStream.Close()\n        return $responseXML\n    } catch {\n        if ($_.Exception.InnerException.Response){\n            throw ([System.IO.StreamReader]($_.Exception.InnerException.Response.GetResponseStream())).ReadToEnd()\n        } else {\n            throw $_.Exception.InnerException\n        }\n    }\n}\n\nfunction New-Request {\n    param(\n        [parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$urn,\n        [parameter(Mandatory=$true)][ValidateNotNullOrEmpty()][string]$action,\n        [hashtable]$parameter = @{},\n        $Protocol = 'https'\n    )\n        # SOAP Request Body Template\n        [xml]$request = @\" \n<?xml version=\"1.0\"?>\n<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n    <s:Body>\n    </s:Body>\n</s:Envelope>\n\"@\n    $service = $serviceinfo.SelectNodes('//ns:service',$ns) | ?{$_.ServiceType -eq $URN}\n    if(!$service){throw \"URN does not exist.\"}\n    $actiontag = $request.CreateElement('u',$action,$service.serviceType)\n    $parameter.GetEnumerator() | %{\n          $el = $request.CreateElement($_.Key)\n          $el.InnerText = $_.Value\n          $actiontag.AppendChild($el)| out-null\n    }\n    $request.GetElementsByTagName('s:Body')[0].AppendChild($actiontag) | out-null\n    $resp = Execute-SOAPRequest $request \"$($service.serviceType)#$($action)\" \"$($Protocol)://$($FB_FQDN):$(@{$true=$script:secport;$false=49000}[($Protocol -eq 'https')])$($service.controlURL)\"\n    return $resp\n}\n\n$script:secport = (New-Request -urn \"urn:dslforum-org:service:DeviceInfo:1\" -action 'GetSecurityPort' -proto 'http').Envelope.Body.GetSecurityPortResponse.NewSecurityPort\n\nfunction Reboot-FritzBox {\n    $resp = New-Request -urn 'urn:dslforum-org:service:DeviceConfig:1' -action 'Reboot'\n    return $resp.Envelope.Body.InnerText\n}\n\n$Result = Reboot-FritzBox\necho $Result\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Show-Dallas-City PowerShell Script Header and Description\nDESCRIPTION: Provides the script's purpose, indicating it displays Dallas city in a web browser using Google Maps. Mentions supported common parameters, example usage, author info, and links to related resources.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dallas-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-dallas-city.ps1 - Shows Dallas city in Google Maps\n\nThis script launches the Web browser with Google Maps at Dallas city (USA).\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage for check-time.ps1 (PowerShell)\nDESCRIPTION: Defines the parameters accepted by the `check-time.ps1` script. It primarily supports the standard PowerShell common parameters (like Verbose, Debug, ErrorAction) for advanced control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-time.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-time.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Speak Turkish Text Using COM SAPI Voice\nDESCRIPTION: This PowerShell script takes a string input and attempts to use a Turkish text-to-speech voice via the SAPI COM object. It prompts for input if no text is provided, searches for a Turkish voice among available voices, and speaks the text. Dependencies include Windows SAPI components for TTS functionality. The script handles errors if no suitable voice is found or other runtime issues occur, and outputs the spoken text to the system speech synthesizer.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-turkish.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Turkish\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Turkish text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Turkish text to speak\n.EXAMPLE\n\tPS> ./speak-turkish.ps1 Merhaba\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Turkish text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Turkish*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Turkish text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Change Directory to Public Folder\nDESCRIPTION: This script changes the working directory to the Public folder, supporting both Linux and Windows environments. It resolves the path based on the OS, checks if the directory exists, then sets the location. Error handling captures issues such as missing folders or unexpected errors, providing informative messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-public.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the Public folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the Public folder.\n.EXAMPLE\n\tPS> ./cd-public\n\t📂C:\\Users\\Public\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = Resolve-Path \"~/Public\"\n\t} else {\n\t\t$path = Resolve-Path \"~\\..\\Public\"\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Public folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Drives\nDESCRIPTION: These commands create new PowerShell drives (PSDrives). `New-PSDrive` creates a new drive, specifying the name, provider (Filesystem), and root path. The `-Persist` parameter creates a persistent mount visible in Windows Explorer.  \nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_23\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-PSDrive -Name videos -PSProvider Filesystem -Root x:\\data\\content\\videos  # Create a new PSDrive that points to a filesystem location\nNew-PSDrive -Name h -PSProvider FileSystem -Root '\\\\storage\\h$\\data' -Persist # Create a persistent mount on a drive letter, visible in Windows Explorer\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft Edge Browser Script in PowerShell\nDESCRIPTION: This PowerShell script launches the Microsoft Edge browser using a simple invocation. It supports typical PowerShell common parameters like Verbose, Debug, and others to manage execution behavior and output. The script does not require any additional parameters and outputs no direct result beyond the launching of the browser process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-edge-browser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-edge-browser.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-edge-browser\n```\n\n----------------------------------------\n\nTITLE: Invoking the show-notification.ps1 PowerShell Script with Parameters\nDESCRIPTION: Example usage of the show-notification.ps1 script showing default notification toast. It demonstrates how to call the script without any parameters, resulting in a notification displaying the default message and title for five seconds. There are no dependencies beyond the script itself, and common PowerShell parameters are supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-notification.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-notification.ps1\n```\n\n----------------------------------------\n\nTITLE: Using list-bluetooth-devices.ps1 with Common Parameters (PowerShell)\nDESCRIPTION: This snippet illustrates the standard command-line syntax for running the `list-bluetooth-devices.ps1` script. It highlights the acceptance of standard PowerShell common parameters for controlling script behavior, such as verbosity and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-bluetooth-devices.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-bluetooth-devices.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Describing PowerShell Script Parameters\nDESCRIPTION: This snippet documents the command-line parameters accepted by the spell-word.ps1 script. It specifically details the -word parameter used to provide the word for spelling and notes support for standard PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/spell-word.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/spell-word.ps1 [[-word] <String>] [<CommonParameters>]\n\n-word <String>\n    Specifies the word to spell (queried by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Chat Implementation Using Network Shared Files\nDESCRIPTION: Complete implementation of a chat system using network shared files. Includes functions for entering a chat, sending/receiving messages, and listing available chat channels. The script uses Out-GridView to display incoming messages and maintains a shared text file for communication.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enter-chat.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tEnters a chat using a common network shared file\n.DESCRIPTION\n\tThis PowerShell script enters a chat using a common network shared file.\n.EXAMPLE\n\tPS> ./enter-chat.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n# make sure you adjust this path\n# it must point to a network share where you have read and write permissions\n$ServerShare = \"\\\\myserver\\chathome\"\n\nfunction Enter-Chat \n{\n  param\n  (\n    [Parameter(Mandatory)]\n    [string]\n    $ChatChannelName,\n    \n    [string]\n    $Name = $env:USERNAME,\n    \n    [Switch]\n    $ShowOldPosts,\n    \n    $HomeShare = $ServerShare\n    \n  )\n  \n  if ($ShowOldPosts)\n  {\n    $Option = ''\n  }\n  else\n  {\n    $Option = '-Tail 0'\n  }\n\n  $Path = Join-Path -Path $HomeShare -ChildPath \"$ChatChannelName.txt\"\n  $exists = Test-Path -Path $Path\n  if ($exists -eq $false)\n  {\n    $null = New-Item -Path $Path -Force -ItemType File\n  }\n\n  $process = Start-Process -FilePath powershell -ArgumentList \"-noprofile -windowstyle hidden -command Get-COntent -Path '$Path' $Option -Wait | Out-GridView -Title 'Chat: [$ChatChannelName]'\" -PassThru\n\n  Write-Host \"To exit, enter: quit\"\n  \"[$Name entered the chat]\" | Add-Content -Path $Path\n  do\n  {\n    Write-Host \"[$ChatChannelName]: \" -ForegroundColor Green -NoNewline\n    $inputText = Read-Host \n    \n    $isStopCommand = 'quit','exit','stop','leave' -contains $inputText\n    if ($isStopCommand -eq $false)\n    {\n      \"[$Name] $inputText\" | Add-Content -Path $Path\n    }\n    \n    \n  } until ($isStopCommand -eq $true)\n  \"[$Name left the chat]\" | Add-Content -Path $Path\n  \n  $process | Stop-Process\n}\n\n\n\nfunction Get-ChatChannel\n{\n  param\n  (\n    $HomeShare = $ServerShare\n    \n  )\n\n  Get-ChildItem -Path $HomeShare -Filter *.txt -File |\n    ForEach-Object {\n      [PSCustomObject]@{\n        ChannelName = [System.IO.Path]::GetFileNameWithoutExtension($_.Name)\n        LastActive = $_.LastWriteTime\n        Started = $_.CreationTime\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pawn Move Validity in PowerShell\nDESCRIPTION: This snippet validates a pawn's move based on its position, move distance, and whether it's an attack or a regular move.  It checks if the move is within legal bounds and updates flags (`$attack`, `$moveSuccess`) accordingly. The code accounts for the pawn's first move, allowing it to move two squares. Dependencies include `$board`, `$pc`, `$Empty`, `$DesiredColumn`, `$DesiredRow`, `$MoveX`, `$MoveY`, and the `Write-Error` cmdlet.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n  \t\t\t\t'Pawn' {\n                    if ($MoveX -eq 0) {\n                        if ($pc.color -eq 'White') {\n                            if (($MoveY -gt 0) -and ($MoveY -lt 3)) {\n                                if ($pc.firstmove -eq $true) {\n                                    if ($MoveY -gt 2) {\n                                        Write-Error \"Illegal Pawn Move\"\n                                    }\n                                } else {\n                                    if ($MoveY -gt 1) {\n                                        Write-Error \"Illegal Pawn Move\"\n                                    }\n                                }\n                            }\n                        } else {\n                            if (($MoveY -lt 0) -and ($MoveY -gt -3)) {\n                                if ($pc.firstmove -eq $true) {\n                                    if ($MoveY -lt -2) {\n                                        Write-Error \"Illegal Pawn Move\"\n                                    }\n                                } else {\n                                    if ($MoveY -lt -1) {\n                                        Write-Error \"Illegal Pawn Move\"\n                                    }\n                                }\n                            }\n                        }\n                        if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                            Write-Error \"Illegal Pawn Move\"\n                        } else {\n                            $moveSuccess = $true\n                        }\n                    } elseif ($MoveX -eq 1) {\n                        if ($MoveY -eq 1) {\n                            if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                                $attack = $true\n                                $moveSuccess = $true\n                            }\n                        }\n                    } elseif ($MoveX -eq -1) {\n                        if ($MoveY -eq 1) {\n                            if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                                $attack = $true\n                                $moveSuccess = $true\n                            }\n                        }                  \n                    }\n                    if ($moveSuccess -eq $true) {\n                        if ($attack -eq $false) {\n                            $pc.firstmove = $false\n                        }\n                        } else {\n                            $attack = $true\n                            $moveSuccess = $true\n                            $pc.firstmove = $false\n                        }\n                    } else {\n                        #Catch-all, should never get here\n                        Write-Error \"Illegal Pawn Move\"\n                    }\n                }\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for install-h2static.ps1 in PowerShell\nDESCRIPTION: Specifies the command-line parameters for the install-h2static.ps1 script. It defines two optional parameters: `-port` (Int32, default 8070) to set the listening port and `-pathToMedia` (String, default '/media/') to set the root directory for serving files. It also indicates support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-h2static.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-h2static.ps1 [[-port] <Int32>] [[-pathToMedia] <String>] [<CommonParameters>]\n\n-port <Int32>\n    \n    Required?                    false\n    Position?                    1\n    Default value                8070\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-pathToMedia <String>\n    \n    Required?                    false\n    Position?                    2\n    Default value                /media/\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching PowerShell Manual - PowerShell\nDESCRIPTION: This snippet defines the usage of the show-powershell-manual.ps1 script that opens the PowerShell manual in a web browser. It supports all standard PowerShell common parameters such as Verbose, Debug, and ErrorAction, allowing enhanced control over execution behavior. The script expects no input parameters beyond the common ones and does not return output except for launching the browser. It requires PowerShell environment and a default web browser installed on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-powershell-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-powershell-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing PowerShell Aliases with Error Handling\nDESCRIPTION: This PowerShell script uses the `Get-Alias` cmdlet to retrieve and display all PowerShell aliases. It includes a `try-catch` block to handle potential errors during the alias retrieval process.  If an error occurs, it outputs an error message with the line number and the specific error details. The script then exits with a status code indicating success (0) or failure (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-aliases.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all PowerShell aliases\n.DESCRIPTION\n\tThis PowerShell scripts lists all PowerShell aliases.\n.EXAMPLE\n\tPS> ./list-aliases.ps1\n\n\tCommandType     Name                                               Version    Source\n\t----------     ----                                               -------    ------\n\tAlias           CFS -> ConvertFrom-String                          3.1.0.0    Microsoft.PowerShell.Utility\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Alias\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running CPU Temperature Check Script with PowerShell\nDESCRIPTION: Example showing how to execute the check-cpu-temp.ps1 script from PowerShell. The script checks the CPU temperature and outputs the result with an evaluation (good, in this case), showing 30.3 °C.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-cpu-temp.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-cpu-temp\n✔️ CPU has 30.3 °C: good\n```\n\n----------------------------------------\n\nTITLE: Running PowerShell Script Example\nDESCRIPTION: Provides a simple example of how to execute the check-outlook.ps1 script from the PowerShell command line. It shows the command `./check-outlook.ps1` and the expected output when no new emails are found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-outlook.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-outlook.ps1\n✅ No new mails.\n```\n\n----------------------------------------\n\nTITLE: Running check-time-zone.ps1 Script with Parameters\nDESCRIPTION: Shows the command syntax for running the check-time-zone.ps1 script with optional common parameters. The script supports standard PowerShell parameters like Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-time-zone.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-time-zone.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Script Execution - PowerShell\nDESCRIPTION: This snippet provides a practical example of how to execute the close-git-extensions.ps1 script from a PowerShell prompt. It demonstrates the basic command ./close-git-extensions.ps1, showing the minimal input required to trigger the script's functionality.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-git-extensions.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-git-extensions.ps1\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of list-submodules.ps1\nDESCRIPTION: The full PowerShell script implementation that lists Git submodules. It checks for Git installation, validates the repository, fetches updates, and displays submodule information.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-submodules.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the submodules in a Git repository\n.DESCRIPTION\n\tThis PowerShell script lists the submodules in the given Git repository.\n.PARAMETER RepoDir\n\tSpecifies the path to the repository (current working directory by default)\n.EXAMPLE\n\tPS> ./list-submodules.ps1 C:\\MyRepo\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$RepoDir = \"$PWD\")\n\ntry {\n\tWrite-Host \"⏳ (1/4) Searching for Git executable...   \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\t$RepoDirName = (Get-Item \"$RepoDir\").Name\n\tWrite-Host \"⏳ (2/4) Checking Git repository...        📂$RepoDirName\"\n\tif (-not(Test-Path \"$RepoDir\" -pathType container)) { throw \"Can't access folder: $RepoDir\" }\n\n\tWrite-Host \"⏳ (3/4) Fetching latest updates... \"\n\t& git -C \"$RepoDir\" fetch\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed\" }\n\n\tWrite-Host \"⏳ (4/4) Listing submodules... \"\n\t& git -C \"$RepoDir\" submodule\n\tif ($lastExitCode -ne \"0\") { throw \"'git submodule' failed\" }\n\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Script Execution\nDESCRIPTION: This snippet shows a simple example of executing the open-google-books.ps1 script from the PowerShell console. It demonstrates the basic command to run the script and open Google Books in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-books.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-google-books\n```\n\n----------------------------------------\n\nTITLE: Using list-repos.ps1 with Parameters\nDESCRIPTION: Shows the script usage pattern with optional parameters. The script accepts a parentDir parameter to specify the directory to scan for Git repositories.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-repos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-repos.ps1 [[-parentDir] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Common Parameters for check-midnight.ps1 PowerShell Script\nDESCRIPTION: Lists the common PowerShell parameters supported by the check-midnight.ps1 script including Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-midnight.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Spanish Text-to-Speech Logic in PowerShell\nDESCRIPTION: This PowerShell script implements text-to-speech functionality for Spanish. It accepts text via a parameter or prompts the user if none is provided. It then utilizes the `SAPI.SPVoice` COM object to iterate through available system voices, selects the first voice identified as Spanish, and uses it to speak the input text. Error handling is included for cases where no Spanish voice is installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-spanish.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Spanish \n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Spanish text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Spanish text to speak\n.EXAMPLE\n\tPS> ./speak-spanish.ps1 Hola\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Spanish text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Spanish*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Spanish text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting format and order parameters\nDESCRIPTION: This snippet sets the `$Format` and `$OrderBy` variables, which are used to construct the URL for the USGS API request.  `$Format` specifies the format of the data to be retrieved (CSV), and `$OrderBy` specifies the order in which the data should be sorted (by magnitude).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-earthquakes.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Format=\"csv\" # cap, csv, geojson, kml, kmlraw, quakeml, text, xml\n$OrderBy=\"magnitude\" # time, time-asc, magnitude, magnitude-asc\n```\n\n----------------------------------------\n\nTITLE: Illustrating Script Output PowerShell\nDESCRIPTION: This snippet provides an example of the output generated by the list-installed-software.ps1 script when executed. It demonstrates the tabular format and the columns displayed for each installed software entry, including DisplayName, DisplayVersion, and InstallDate.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-installed-software.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-installed-software.ps1\n\n\n\nDisplayName                            DisplayVersion                  InstallDate\n-----------                            --------------                  -----------\nCrystalDiskInfo 9.1.1                  9.1.1                           20230718\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Profile Parameters Definition\nDESCRIPTION: Defines the common parameters supported by the my-profile.ps1 script, including Verbose, Debug, ErrorAction, and other standard PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/my-profile.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Declaring Supported Parameters in PowerShell Script\nDESCRIPTION: This snippet displays the supported command-line parameters for the turn-volume-off.ps1 PowerShell script, including Verbose, Debug, ErrorAction, and others. It informs users that these common parameters may be utilized when executing the script, providing both flexibility and robust error handling. The snippet does not implement parameter handling but documents their availability for advanced usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-off.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/turn-volume-off.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing list-dir.ps1 with a Directory Path in PowerShell\nDESCRIPTION: This example demonstrates how to execute the 'list-dir.ps1' script, providing 'C:\\\\' as the search path.  This command lists the contents of the C:\\\\ directory, formatted in columns, as defined by the script's logic.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dir.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS>./list-dir C:\\\\\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Usage of write-value.ps1 PowerShell Script\nDESCRIPTION: Declares and documents the parameters of the write-value.ps1 script. Allows input of the value to display, its unit, and numeric ranges for different alert levels (red and yellow thresholds). Supports common PowerShell parameters for flexible invocation. Default values are defined to ensure fallback behavior if arguments are omitted.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-value.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/write-value.ps1 [[-value] <Single>] [[-unit] <String>] [[-redMin] <Single>] [[-yellowMin] <Single>] [[-yellowMax] <Single>] [[-redMax] <Single>] [<CommonParameters>]\n\n-value <Single>\n    Specifies the value\n    \n    Required?                    false\n    Position?                    1\n    Default value                0.5\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-unit <String>\n    \n    Required?                    false\n    Position?                    2\n    Default value                Mach\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-redMin <Single>\n    \n    Required?                    false\n    Position?                    3\n    Default value                0\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-yellowMin <Single>\n    \n    Required?                    false\n    Position?                    4\n    Default value                0\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-yellowMax <Single>\n    \n    Required?                    false\n    Position?                    5\n    Default value                0\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-redMax <Single>\n    \n    Required?                    false\n    Position?                    6\n    Default value                0\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using open-developer-settings.ps1 with Common Parameters\nDESCRIPTION: This snippet shows the syntax for using the open-developer-settings.ps1 script, including all common PowerShell parameters it supports such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-developer-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-developer-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing PowerShell Script Parameters\nDESCRIPTION: This snippet shows the parameter definition section for the `open-lockscreen-settings.ps1` script. It indicates that the script accepts standard PowerShell common parameters, which allow for control over script execution behavior like verbosity, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-lockscreen-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-lockscreen-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the open-dropbox-folder.ps1 Script\nDESCRIPTION: Example showing how to execute the script from PowerShell command line. The script doesn't require any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-dropbox-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-dropbox-folder\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage with Parameters\nDESCRIPTION: Shows the script syntax including common PowerShell parameters that are supported. This demonstrates how to call the script, though it doesn't require any specific parameters to function.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windy-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-windy-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script from Command Line (Shell)\nDESCRIPTION: Navigates to the specified directory (`<PATH>`) and executes a PowerShell script (`<SCRIPT>.ps1`) using the command line in a terminal application. Replace placeholders with actual path and script names.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncd <PATH>\n./<SCRIPT>.ps1\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-task-bar-settings Script (PowerShell)\nDESCRIPTION: Provides a simple example demonstrating how to execute the `open-task-bar-settings.ps1` script from a PowerShell prompt using its relative path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-task-bar-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-task-bar-settings\n```\n\n----------------------------------------\n\nTITLE: Invoking show-seattle-city.ps1 Script with Common Parameters in PowerShell\nDESCRIPTION: This snippet demonstrates how to call the show-seattle-city.ps1 script with optional PowerShell common parameters such as Verbose, Debug, and ErrorAction. These parameters allow for enhanced logging, debugging, and error management. The script itself expects no required positional arguments and will launch the user's default web browser directed at Google Maps for Seattle upon execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-seattle-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-seattle-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for print-image.ps1 Script (PowerShell)\nDESCRIPTION: Displays the command-line syntax and parameter details for the print-image.ps1 script. It accepts an optional 'Path' parameter (positional, first) specifying the image file path. Common PowerShell parameters like Verbose, Debug, etc., are also supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/print-image.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/print-image.ps1 [[-Path] <Object>] [<CommonParameters>]\n\n-Path <Object>\n    Specifies the path to the image file\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing open-one-drive.ps1 Example in PowerShell\nDESCRIPTION: This example shows how to run the open-one-drive.ps1 script from a PowerShell prompt to launch Microsoft OneDrive. The script is invoked using a relative path, assuming the script is present in the current working directory. No additional parameters are required, but standard PowerShell optional common parameters are supported for detailed control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-one-drive.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-one-drive\n\n```\n\n----------------------------------------\n\nTITLE: Opening Home Folder\nDESCRIPTION: This PowerShell script opens the user's home folder in File Explorer. It first resolves the home folder path, checks if it exists, and then calls the `open-file-explorer.ps1` script to open the folder. Error handling is included to catch cases where the home folder does not exist.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-home-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the home folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's home folder.\n.EXAMPLE\n\tPS> ./open-home-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = resolve-path \"$HOME\"\n\tif (-not(test-path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Home folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Source Code for Launching Microsoft Weather (PowerShell)\nDESCRIPTION: The complete PowerShell source code for `open-microsoft-weather.ps1`. It uses the `Start-Process` cmdlet with the `msnweather:` protocol handler to launch the application. Includes basic try-catch error handling to report issues and exit with appropriate status codes (0 for success, 1 for failure), along with comment-based help defining the script's synopsis, description, and example usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-weather.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Microsoft Weather app\n.DESCRIPTION\n\tThis script launches the Microsoft Weather application.\n.EXAMPLE\n\tPS> ./open-microsoft-weather\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process msnweather:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Script Execution Example (PowerShell)\nDESCRIPTION: Provides a simple example of how to run the `uninstall-firefox.ps1` script from the PowerShell console without any specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-firefox.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-firefox\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-facebook.ps1 PowerShell Script\nDESCRIPTION: Demonstrates how to execute the open-facebook.ps1 script from the PowerShell command line to launch Facebook's website in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-facebook.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-facebook\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Example Invocation\nDESCRIPTION: This example shows how to execute the `close-cortana.ps1` script from the PowerShell prompt.  The script is invoked by prepending `./` to the script name.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-cortana.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-cortana\n```\n\n----------------------------------------\n\nTITLE: Implementing open-deep-l-translator.ps1 Script (PowerShell)\nDESCRIPTION: Provides the source code for the `open-deep-l-translator.ps1` script. It utilizes a helper script, `open-default-browser.ps1` (expected in the same directory, $PSScriptRoot), to open the specified DeepL Translator URL (`https://www.deepl.com/translator`) in the system's default web browser. The script includes standard PowerShell help comments and exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-deep-l-translator.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the DeepL Translator website \n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the DeepL Translator website.\n.EXAMPLE\n\tPS> ./open-deep-l-translator\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.deepl.com/translator\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Setting Strict Mode - PowerShell\nDESCRIPTION: This snippet enforces strict mode in the PowerShell script, set to the latest version. Strict mode helps catch potential errors and enforces better coding practices by throwing exceptions for undeclared variables or references to non-existent properties. This ensures robustness and prevents unintended behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-big.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-StrictMode -Version Latest\n```\n\n----------------------------------------\n\nTITLE: Source Code for introduce-powershell.ps1 Script\nDESCRIPTION: Contains the full PowerShell source code for the introduce-powershell.ps1 script. The script clears the console, displays an ASCII art banner, shows the PowerShell version, and prints introductory messages and helpful links using the 'write-typewriter.ps1' helper script located in the same directory ($PSScriptRoot). It includes a try-catch block for basic error handling and exits with 0 on success or 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/introduce-powershell.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tIntroducing PowerShell\n.DESCRIPTION\n\tThis PowerShell script introduces PowerShell to new users and gives an overview of it.\n.EXAMPLE\n\tPS> ./introduce-powershell.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tClear-Host\n\t\"\"\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \" Hi $USERNAME, move into the fast lane by using . . .\" 200\n\t\"\"\n\tWrite-Host \"  _____                       _____ _          _ _ \" -foregroundColor blue\n\tWrite-Host \" |  __ \\                     / ____| |        | | |\" -foregroundColor blue\n\tWrite-Host \" | |__) |____      _____ _ _| (___ | |__   ___| | |\" -foregroundColor blue\n\tWrite-Host \" |  ___/ _ \\ \\ /\\ / / _ \\ '__\\___ \\| '_ \\ / _ \\ | |\" -foregroundColor blue\n\tWrite-Host \" | |  | (_) \\ V  V /  __/ |  ____) | | | |  __/ | |\" -foregroundColor blue\n\tWrite-Host \" |_|   \\___/ \\_/\\_/ \\___|_| |_____/|_| |_|\\___|_|_|\" -foregroundColor blue\n\t\"\"\n\t\"\"\n\t$version = $PSVersionTable.PSVersion\n\t$edition = $PSVersionTable.PSEdition\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Welcome to PowerShell $version $edition edition\" 25\n\t\"\"\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"PowerShell is open-source and free! It's available for Linux, Mac OS and Windows\" 25\n\t\"\"\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Enhance PowerShell by 500+ PowerShell scripts! Get them from: https://github.com/fleschutz/PowerShell\" 25\n\t\"\"\n\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Want to learn PowerShell? See the tutorial at: https://www.guru99.com/powershell-tutorial.html\" 25\n\t\"\"\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Need docs? See the official documentation at: https://docs.microsoft.com/en-us/powershell\" 25\n\t\"\"\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Want a cheat sheet? See: https://github.com/fleschutz/PowerShell/blob/master/docs/cheat-sheet.md\" 25\n\t\"\"\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Got questions? See the FAQ at: https://github.com/fleschutz/PowerShell/blob/master/docs/FAQ.md\" 25\n\t\"\"\n\tWrite-Host \" 🔷 \" -noNewline\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"Want to support and donate? Just follow: https://www.paypal.com/paypalme/Fleschutz\" 25\n\t\"\"\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"    NOTE: Use <Ctrl> + <Click> to open the links above in your browser\" 100\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Current Day Retrieval and Text-to-Speech with PowerShell\nDESCRIPTION: This PowerShell script determines the current day in English and uses a separate script for text-to-speech output. It sets the current culture to en-US to ensure the weekday name is in English, retrieves the day as a string (e.g., Sunday), and calls `speak-english.ps1` with the spoken message. It handles errors by reporting line number and error message, exiting with an appropriate status code. Dependencies include PowerShell environment and the `speak-english.ps1` script located in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-day.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDetermines the current day \n.DESCRIPTION\n\tThis PowerShell script determines and speaks the current day by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-day\n\t✅ It's Sunday.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentthread.currentculture=[system.globalization.cultureinfo]\"en-US\"\n\t$Weekday = (Get-Date -format \"dddd\")\n\t& \"$PSScriptRoot/speak-english.ps1\" \"It's $Weekday.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Google Maps at Jerusalem\nDESCRIPTION: This script opens the default web browser and navigates to Google Maps centered on Jerusalem, Israel. It supports common PowerShell parameters for enhanced control. The script does not require external dependencies and is intended for quick visualization. Key parameters include Verbose, Debug, and error handling options. The example demonstrates running the script directly from the command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-jerusalem-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-jerusalem-city.ps1 - Shows Jerusalem city in Google Maps\n\nThis script launches the Web browser with Google Maps at Jerusalem city (Israel).\n\n## Parameters\n```powershell\nshow-jerusalem-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```  \n\n## Example\n```powershell\nPS> ./show-jerusalem-city\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of show-jerusalem-city.ps1*\n```\n\n----------------------------------------\n\nTITLE: Launching File Explorer for D: Drive PowerShell\nDESCRIPTION: This PowerShell snippet opens the D: drive using File Explorer. It utilizes the `open-file-explorer.ps1` script located in the same directory. The script block executes `open-file-explorer.ps1` with \"D:\" as the argument, effectively navigating File Explorer to the D: drive.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-d-drive.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n& \"$PSScriptRoot/open-file-explorer.ps1\" \"D:\"\n```\n\n----------------------------------------\n\nTITLE: Invoking the Script with Common Parameters in PowerShell\nDESCRIPTION: This snippet demonstrates the syntax for launching the show-barcelona-city.ps1 script with support for all standard PowerShell common parameters. The script requires no specific arguments, but users may include optional common parameters such as Verbose or Debug to control output and error behavior. Inputs are command-line parameters; the script opens Google Maps targeted at Barcelona, producing no direct output in PowerShell but resulting in the default browser being opened to the specified location. PowerShell must be installed, and internet access is required for Google Maps.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-barcelona-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-barcelona-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementation of close-obs-studio.ps1 PowerShell script\nDESCRIPTION: The complete implementation of the script that closes OBS Studio by terminating its process (obs64.exe) and provides audio feedback if OBS is not running.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-obs-studio.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses OBS Studio\n.DESCRIPTION\n\tThis PowerShell script closes the OBS Studio application gracefully.\n.EXAMPLE\n\tPS> ./close-obs-studio.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im obs64.exe\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, OBS Studio isn't running\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters: PowerShell\nDESCRIPTION: This snippet shows the basic syntax for invoking the `play-vulture-sound.ps1` script and explicitly states that it accepts standard PowerShell Common Parameters like Verbose, Debug, etc. It provides a general overview of how to interact with the script from the command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-vulture-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-vulture-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Closing Notepad Application Using PowerShell Script - PowerShell\nDESCRIPTION: This snippet executes the close-program.ps1 script to gracefully terminate the Notepad process from PowerShell. It passes the parameters needed to identify the Notepad application ('Notepad', 'notepad', 'notepad') and exits with a success code. Dependencies include close-program.ps1 available in the same directory. Expected input is none (unless using common parameters), and the output is the closure of any running Notepad instances. Requires PowerShell and sufficient permissions to manage processes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-note-pad.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n& \"$PSScriptRoot/close-program.ps1\" \"Notepad\" \"notepad\" \"notepad\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Common Parameters for list-ssh-key.ps1 in PowerShell\nDESCRIPTION: Shows the common parameters supported by the `list-ssh-key.ps1` script, such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters control the script's execution behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ssh-key.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-ssh-key.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing list-voices.ps1 and Example Output (PowerShell)\nDESCRIPTION: Demonstrates how to execute the `list-voices.ps1` script in a PowerShell console. The example output displays a table listing the installed TTS voices along with their properties: Name, Culture, Gender, and Age.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-voices.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-voices.ps1\n\n\n\nName                     Culture  Gender     Age\n----                     -------  ------     ---\nMicrosoft David Desktop  en-US      Male   Adult\n...\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of list-installed-apps Script - PowerShell\nDESCRIPTION: This example shows how to execute the list-installed-apps.ps1 script from a PowerShell terminal to list all installed applications. No specific input parameters are required, but standard PowerShell common parameters can be supplied for debugging or verbose output. The expected result is a printed list of installed apps on the console. Prerequisite is a Windows environment with sufficient permissions to list installed applications.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-installed-apps.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-installed-apps\n```\n\n----------------------------------------\n\nTITLE: Closing Microsoft Store Application Implementation in PowerShell\nDESCRIPTION: This PowerShell script locates and forcefully terminates all instances of the Microsoft Store (WinStore.App.exe) using TaskKill. If the process is not running or termination fails, it calls a supporting speak-english.ps1 script to provide user feedback and returns a non-zero exit code. Requires access to TaskKill and assumes the helper script is present in the same directory. Script accepts CommonParameters for flexible PowerShell integration and is licensed under CC0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-microsoft-store.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Microsoft Store app\n.DESCRIPTION\n\tThis PowerShell script closes the Microsoft Store application gracefully.\n.EXAMPLE\n\tPS> ./close-microsoft-store.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im WinStore.App.exe /f /t\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Microsoft Store isn't running.\"\n\texit 1\n}\nexit 0 # success\n\n```\n\n----------------------------------------\n\nTITLE: Using Git Configuration Script via PowerShell Command Line Example\nDESCRIPTION: This example demonstrates how the configure-git.ps1 PowerShell script is run from the command line with user information as arguments. It shows the script's sequential output messages as it checks for the Git executable, prompts for details (if not supplied), sets various configuration options, and confirms successful changes. The snippet is intended to illustrate typical interaction flow, expected input parameters (full name, email address, editor), and output when the script completes successfully.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/configure-git.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./configure-git.ps1 \"Joe Doe\" joe@doe.com vim\n⏳ (1/5) Searching for Git executable...     git version 2.42.0.windows.1\n⏳ (2/5) Asking for user details...\n⏳ (3/5) Saving basic settings (autocrlf,symlinks,longpaths,etc.)...\n⏳ (4/5) Saving user settings (name,email,editor)...\n⏳ (5/5) Saving user shortcuts ('git br', 'git ls', 'git st', etc.)...\n✅ Saved your Git configuration to ~/.gitconfig in 11s.\n\n```\n\n----------------------------------------\n\nTITLE: Calculating SHA1 Hash Using PowerShell\nDESCRIPTION: This PowerShell script calculates and displays the SHA1 checksum of a specified file. It accepts an optional '-path' parameter to specify the file location; if omitted, it prompts the user to enter a file path. It validates the existence of the file before computing its SHA1 hash using the Get-FileHash cmdlet. On success, it outputs the hash with a success icon; on failure, it prints an error message and exits with an error code. The script includes support for common PowerShell parameters and is intended for simple file change validation only, due to SHA1's known security limitations.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/get-sha1.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the SHA1 hash of a file\n.DESCRIPTION\n\tThis PowerShell script calculates and prints the SHA1 checksum of the given file.\n\tNOTE: SHA1 is no longer considered secure, use it for simple change validation only!\n.PARAMETER path\n\tSpecifies the local file path to the file\n.EXAMPLE\n\tPS> ./get-sha1.ps1 C:\\MyFile.txt\n\t✅ SHA1 hash is 8105D424D350E308AED92BD9DDEB74A1B53C5D7C\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\")\n\ntry {\n\tif ($path -eq \"\" ) { $path = Read-Host \"Enter the file path\" }\n\tif (-not(Test-Path $path -pathType leaf)) { throw \"Invalid file path given: $path\" }\n\n\t$result = Get-FileHash -path $path -algorithm SHA1\n\n\t\"✅ SHA1 hash is $($result.Hash)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Retrieve and Speak Random Quote\nDESCRIPTION: This PowerShell script imports quote data from a CSV file, randomly selects a quote, and then invokes an external TTS script to speak the quote aloud. It includes error handling to manage potential import or execution issues, and uses PowerShell core features like Import-CSV, System.Random, and script invocation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/tell-quote.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTells a random quote by text-to-speech\n.DESCRIPTION\n\tThis PowerShell script selects a random quote from Data/quotes.csv and speaks it by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./tell-quote.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$table = Import-CSV \"$PSScriptRoot/../data/quotes.csv\"\n\n\t$randomNumberGenerator = New-Object System.Random\n\t$row = [int]$randomNumberGenerator.next(0, $table.Count - 1)\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"$($table[$row].QUOTE). By $($table[$row].AUTHOR).\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of cd-up.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the cd-up.ps1 script from the PowerShell command line. Running `.\\cd-up` changes the current directory to the parent directory and displays the new path (e.g., C:\\Users).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> .\\cd-up\n📂C:\\Users\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-folder.ps1\nDESCRIPTION: Demonstrates how to execute the 'list-folder.ps1' script from the PowerShell console. This example lists all contents (files and directories) within the root of the C: drive.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-folder.ps1 C:\\*\n```\n\n----------------------------------------\n\nTITLE: Defining Big Letter Functions - PowerShell\nDESCRIPTION: This group of code snippets defines functions for each letter (A-Z), digit (0-9), and some special characters, each named 'Big[Character]'. Each function takes an integer '$row' as a parameter, representing the row number (1-4) to generate for that letter's large text representation. A switch statement returns the appropriate string for each row, effectively drawing the character.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-big.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction BigA { param([int]$row)\n\tswitch($row) {\n\t1 { return \"   __   \" }\n\t2 { return \"  /__\\  \" }\n\t3 { return \" /(__)\\ \" }\n\t4 { return \"(__/\\__)\" }\n\t}\n}\n\nfunction BigB { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"| _  )\" }\n\t3 { return \"| _ ( \" }\n\t4 { return \"|____)\" }\n\t}\n}\n\nfunction BigC { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  ___ \" }\n\t2 { return \" / __)\" }\n\t3 { return \"( (__ \" }\n\t4 { return \" \\___)\" }\n\t}\n}\n\nfunction BigD { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____  \" }\n\t2 { return \"|  _ \\ \" }\n\t3 { return \"| (_) )\" }\n\t4 { return \"|____/ \" }\n\t}\n}\n\nfunction BigE { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"| ___)\" }\n\t3 { return \"| __) \" }\n\t4 { return \"|____)\" }\n\t}\n}\n\nfunction BigF { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"| ___)\" }\n\t3 { return \"| __) \" }\n\t4 { return \"|_)   \" }\n\t}\n}\n\nfunction BigG { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  ____ \" }\n\t2 { return \" / ___)\" }\n\t3 { return \"( (__-.\" }\n\t4 { return \" \\____|\" }\n\t}\n}\n\nfunction BigH { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _   _ \" }\n\t2 { return \"| |_| |\" }\n\t3 { return \"|  _  |\" }\n\t4 { return \"|_| |_|\" }\n\t}\n}\n\nfunction BigI { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _ \" }\n\t2 { return \"| |\" }\n\t3 { return \"| |\" }\n\t4 { return \"|_|\" }\n\t}\n}\n\nfunction BigJ { param([int]$row)\n\tswitch($row) {\n\t1 { return \"   __ \" }\n\t2 { return \"  (  |\" }\n\t3 { return \".-_) |\" }\n\t4 { return \"\\____|\" }\n\t}\n}\n\nfunction BigK { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _  _ \" }\n\t2 { return \"| |/ )\" }\n\t3 { return \"|   ( \" }\n\t4 { return \"|_|\\_)\" }\n\t}\n}\n\nfunction BigL { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _    \" }\n\t2 { return \"| |   \" }\n\t3 { return \"| |__ \" }\n\t4 { return \"|____)\" }\n\t}\n}\n\nfunction BigM { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _    _ \" }\n\t2 { return \"| \\  / |\" }\n\t3 { return \"|  \\/  |\" }\n\t4 { return \"|_|  |_|\" }\n\t}\n}\n\nfunction BigN { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _   _ \" }\n\t2 { return \"| \\ | |\" }\n\t3 { return \"|  \\| |\" }\n\t4 { return \"|_| \\_|\" }\n\t}\n}\n\nfunction BigO { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  ___  \" }\n\t2 { return \" / _ \\ \" }\n\t3 { return \"( (_) )\" }\n\t4 { return \" \\___/ \" }\n\t}\n}\n\nfunction BigP { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"|  _ \\\" }\n\t3 { return \"|  __/\" }\n\t4 { return \"|_|   \" }\n\t}\n}\n\nfunction BigQ { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  ____  \" }\n\t2 { return \" / _  \\ \" }\n\t3 { return \"( (_) ( \" }\n\t4 { return \" \\___/\\\\\" }\n\t}\n}\n\nfunction BigR { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"|  _ \\\" }\n\t3 { return \"|    /\" }\n\t4 { return \"|_|\\_)\" }\n\t}\n}\n\nfunction BigS { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"/  __) \" }\n\t3 { return \"\\__  \\\" }\n\t4 { return \"(____/\" }\n\t}\n}\n\nfunction BigT { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _____ \" }\n\t2 { return \"|_   _| \" }\n\t3 { return \"  | |  \" }\n\t4 { return \"  |_|  \" }\n\t}\n}\n\nfunction BigU { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _   _ \" }\n\t2 { return \"| | | |\" }\n\t3 { return \"| |_| |\" }\n\t4 { return \"|_____|\" }\n\t}\n}\n\nfunction BigV { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _  _ \" }\n\t2 { return \"( \\/ )\" }\n\t3 { return \" \\  / \" }\n\t4 { return \"  \\/  \" }\n\t}\n}\n\nfunction BigW { param([int]$row)\n\tswitch($row) {\n\t1 { return \" __    __ \" }\n\t2 { return \"\\  \\/\\/  /\" }\n\t3 { return \" \\      / \" }\n\t4 { return \"  \\_/\\_/  \" }\n\t}\n}\n\nfunction BigX { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _  _ \" }\n\t2 { return \"( \\/ )\" }\n\t3 { return \" )  ( \" }\n\t4 { return \"(_/\\_)\" }\n\t}\n}\n\nfunction BigY { param([int]$row)\n\tswitch($row) {\n\t1 { return \" _  _ \" }\n\t2 { return \"( \\/ )\" }\n\t3 { return \" \\  / \" }\n\t4 { return \" (__) \" }\n\t}\n}\n\nfunction BigZ { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"(_   )\" }\n\t3 { return \" / /_ \" }\n\t4 { return \"(____)\" }\n\t}\n}\n\nfunction Big0 { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  ___  \" }\n\t2 { return \" / _ \\ \" }\n\t3 { return \"( (_) )\" }\n\t4 { return \" \\___/ \" }\n\t}\n}\n\nfunction Big1 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ___ \" }\n\t2 { return \"/_  |\" }\n\t3 { return \"  | |\" }\n\t4 { return \"  |_|\" }\n\t}\n}\n\nfunction Big2 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ___  \" }\n\t2 { return \"(__ \\ \" }\n\t3 { return \" / _/ \" }\n\t4 { return \"(____)\" }\n\t}\n}\n\nfunction Big3 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ___ \" }\n\t2 { return \"(__ )\" }\n\t3 { return \" (_ \\\" \" }\n\t4 { return \"(___/\" }\n\t}\n}\n\nfunction Big4 { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  __  \" }\n\t2 { return \" /. | \" }\n\t3 { return \"(_  _)\" }\n\t4 { return \"  |_| \" }\n\t}\n}\n\nfunction Big5 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ____ \" }\n\t2 { return \"| ___)\" }\n\t3 { return \"|__ \\ \" }\n\t4 { return \"(___/ \" }\n\t}\n}\n\nfunction Big6 { param([int]$row)\n\tswitch($row) {\n\t1 { return \"  _  \" }\n\t2 { return \" / ) \" }\n\t3 { return \"/ _ \\\" }\n\t4 { return \"\\___/\" }\n\t}\n}\n\nfunction Big7 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ___ \" }\n\t2 { return \"(__ )\" }\n\t3 { return \" / / \" }\n\t4 { return \"(_/  \" }\n\t}\n}\n\nfunction Big8 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ___ \" }\n\t2 { return \"( _ )\" }\n\t3 { return \"/ _ \\\" }\n\t4 { return \"\\___/\" }\n\t}\n}\n\nfunction Big9 { param([int]$row)\n\tswitch($row) {\n\t1 { return \" ___ \" }\n\t2 { return \"/ _ \\\" }\n\t3 { return \"\\_  /\" }\n\t4 { return \" (_/ \" }\n\t}\n}\n\nfunction BigColon { param([int]$row)\n\tswitch($row) {\n\t1 { return \"   \" }\n\t2 { return \" o \" }\n\t3 { return \" o \" }\n\t4 { return \"   \" }\n\t}\n}\n\nfunction BigMinus { param([int]$row)\n\tswitch($row) {\n\t1 { return \"      \" }\n\t2 { return \" ____ \" }\n\t3 { return \"(____)\" }\n\t4 { return \"      \" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for list-printers.ps1 in PowerShell\nDESCRIPTION: Specifies the command-line syntax for the list-printers.ps1 script, indicating that it accepts the standard PowerShell common parameters (Verbose, Debug, ErrorAction, etc.) for controlling script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-printers.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-printers.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Printing a Single Month Calendar in PowerShell\nDESCRIPTION: This function, Print-Month, accepts a month and year to compute the first and last day, generate headers, and print a formatted calendar grid for the specified month. It handles alignment of days and weekends, displays days in a grid starting at the appropriate weekday, and uses global variable 'daysLine' for header formatting. Prerequisite: Set-Variable for 'daysLine' must be defined before usage. Outputs to terminal as a formatted calendar. Inputs: integer month (1-12), year (>0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-calendar.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Print-Month ($month, $year) {\n    $firstDayOfMonth = Get-Date -month $month -day 1 -year $year\n    $lastDayOfMonth = (Get-Date -month $firstDayOfMonth.AddMonths(1).Month -day 1 -year $firstDayOfMonth.AddMonths(1).Year).AddDays(-1)\n    \n    $header = (Get-Date $firstDayOfMonth -Format MMMM) + \" \" + $firstDayOfMonth.Year\n    Write-Host\n    Write-Host $header.ToUpper()\n    Write-Host \"__________________________\"\n    Write-Host $daysLine\n    \n    for ($day = $firstDayOfMonth; $day -le $lastDayOfMonth; $day = $day.AddDays(1)) {\n        if ($day.day -eq 1) {\n            Write-Host (\" \" * 4 * [int](Get-Date $day -uformat %u)) -NoNewLine\n        }\n        \n        Write-Host ((Get-Date $day -Format dd).ToString()) -NoNewLine \n        Write-Host \"  \" -NoNewLine\n        \n        if ($day.DayOfWeek -eq \"Saturday\") {\n            Write-Host\n        }\n    }\n    \n    if ($lastDayOfMonth.DayOfWeek -ne \"Saturday\") {\n        Write-Host\n    }\n\n    Write-Host\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing show-dubai-city.ps1\nDESCRIPTION: This example demonstrates how to execute the PowerShell script `show-dubai-city.ps1` from the PowerShell console. It assumes the script is located in the current directory. The script will open a web browser and navigate to Google Maps, centered on Dubai.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dubai-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-dubai-city\n```\n\n----------------------------------------\n\nTITLE: PowerShell script usage example\nDESCRIPTION: This code snippet shows an example of how to execute the connect-vpn.ps1 PowerShell script. It uses the relative path './connect-vpn.ps1' to run the script in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/connect-vpn.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./connect-vpn.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This snippet defines the parameters accepted by the `list-commits.ps1` script. It uses the `param()` block to specify the `pathToRepo` and `format` parameters, providing default values and descriptions. These parameters are used to determine which Git repository to inspect and how to format the output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$pathToRepo = \"$PWD\", [string]$format = \"pretty\")\n```\n\n----------------------------------------\n\nTITLE: Defining PowerShell Script Parameters\nDESCRIPTION: This snippet defines the parameters accepted by the `list-commit-statistics.ps1` script. It specifies the `-RepoDir` parameter, its type, optional nature, default value, and common parameters support.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commit-statistics.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-commit-statistics.ps1 [[-RepoDir] <String>] [<CommonParameters>]\n\n-RepoDir <String>\n    Specifies the path to the Git repository.\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Complete Source Code for check-santa.ps1\nDESCRIPTION: The full implementation of the check-santa.ps1 script that calculates days until Saint Nicholas Day and uses text-to-speech to announce it. The script captures the current date, calculates the difference to December 6th, and calls another script to speak the result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-santa.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the time until Saint Nicholas Day\n.DESCRIPTION\n\tThis PowerShell script checks the time until Saint Nicholas Day and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-santa\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Now = [DateTime]::Now\n\t$Diff = [Datetime](\"12/06/\" + $Now.Year) – $Now\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Saint Nicholas Day is in $($Diff.Days) days.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Running Sorting Algorithms in PowerShell\nDESCRIPTION: This PowerShell snippet defines a parameter `numIntegers` to specify the number of integers to sort. It then executes several sorting scripts (`measure-BubbleSort.ps1`, `measure-BucketSort.ps1`, etc.), passing the specified `numIntegers` value to each script. The script concludes with an exit code of 0 to indicate success. It relies on external scripts named with the format `measure-<algorithm>Sort.ps1` to perform the actual sorting and timing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-sorting-algorithms.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tMeasures the speed of sorting algorithms\n.DESCRIPTION\n\tThis PowerShell script measures the speed of several sorting algorithms and prints it.\n.PARAMETER numIntegers\n\tSpecifies the number of integers to sort (3000 by default)\n.EXAMPLE\n\tPS> ./measure-sorting-algorithms.ps1\n\t🧭 6.041 sec to sort 3000 integers by BubbleSort\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 3000)\n\n\" \"\n& \"$PSScriptRoot/measure-BubbleSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-BucketSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-CountingSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-HeapSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-InsertionSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-MergeSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-QuickSort.ps1\" $numIntegers\n& \"$PSScriptRoot/measure-SelectionSort.ps1\" $numIntegers\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Building using Imakefile (PowerShell)\nDESCRIPTION: This snippet builds a repository using Imakefile.  It checks for `Imakefile`, then executes `xmkmf` and `make -j4`.  Requires `xmkmf` and Make to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/Imakefile\" -pathType leaf) {\n\t\t\"⏳ Building 📂$dirName by using Imakefile...\"\n\t\tSet-Location \"$path/\"\n\n\t\t& xmkmf \n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'xmkmf' has failed\" }\n\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' has failed\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Full implementation of Windows Defender settings listing script\nDESCRIPTION: Complete PowerShell script that displays all Windows Defender settings using Get-MpPreference cmdlet. The script includes error handling and provides a note about where to find documentation for the settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-defender-settings.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the Windows Defender settings\n.DESCRIPTION\n\tThis PowerShell script lists the current settings of Windows Defender Antivirus.\n\tNOTE: use 'Set-MpPreference' to change settings (e.g. DisableScanningNetworkFiles)\n.EXAMPLE\n\tPS> ./list-defender-settings.ps1\n\n\tAttackSurfaceReductionOnlyExclusions          :\n\tCheckForSignaturesBeforeRunningScan           : False\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tWrite-Host \" \"\n\tWrite-Host \"Windows Defender Settings                               Value\"\n\tWrite-Host \"-------------------------                               -----\" -noNewline\n\tGet-MpPreference\n\t\"NOTE: Documentation at: https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/dn455323(v=vs.85)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: List Encrypted Files - PowerShell\nDESCRIPTION: This PowerShell script scans a directory tree for encrypted files.  It takes an optional path as a parameter, defaulting to the current working directory. It uses Get-ChildItem with the -attributes Encrypted flag to find encrypted files recursively. The script outputs the full name of each encrypted file found and reports the total count and elapsed time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-encrypted-files.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all encrypted files in a directory tree\n.DESCRIPTION\n\tThis PowerShell script scans a directory tree and lists all encrypted files.\n.PARAMETER path\n\tSpecifies the path to the directory tree (default is current working dir)\n.EXAMPLE\n\tPS> ./list-encrypted-files.ps1 C:\\Windows\n\t...\n\t✅ Found 0 encrypted files within 📂C:\\Windows in 41 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning $path for encrypted files...\"\n\t[int]$count = 0\n\tGet-ChildItem \"$path\" -attributes Encrypted -recurse | Foreach-Object {\n\t\t\"📄$($_.FullName)\"\n\t\t$count++\n\t}\n\tWrite-Progress -completed \" \"\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Found $count encrypted files within 📂$path in $elapsed sec\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Documenting Git Configuration Script Parameters in PowerShell\nDESCRIPTION: This PowerShell snippet defines the parameter structure for the configure-git.ps1 script, outlining three optional string parameters: fullName (the user's full name), emailAddress (the user's email address), and favoriteEditor (user's preferred text editor). Common PowerShell parameters such as -Verbose and -Debug are also supported. This enables users to invoke the script with varying sets of user details either directly on the command line or through prompts, supporting flexible automation and interactive use cases.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/configure-git.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/configure-git.ps1 [[-fullName] <String>] [[-emailAddress] <String>] [[-favoriteEditor] <String>] [<CommonParameters>]\n\n-fullName <String>\n    Specifies the user's full name\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-emailAddress <String>\n    Specifies the user's email address\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-favoriteEditor <String>\n    Specifies the user's favorite text editor\n    \n    Required?                    false\n    Position?                    3\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Disabling IPv6 on All Network Interfaces Using PowerShell\nDESCRIPTION: This PowerShell script disables IPv6 by removing the 'ms_tcpip6' component binding from all network interfaces. It requires administrator rights to execute successfully and includes error handling to report any issues encountered during execution. The script outputs a success message upon completion or an error message if it fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/disable-ipv6.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDisables IPv6 (requires admin rights)\n.DESCRIPTION\n\tThis PowerShell script disables IPv6 on all network interfaces of the local computer (requires administrator rights).\n.EXAMPLE\n\tPS> ./disable-ipv6.ps1\n\t✔ IPv6 is disabled now.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tDisable-NetAdapterBinding -Name '*' -ComponentID 'ms_tcpip6'\n\t\"✅ IPv6 is disabled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling\nDESCRIPTION: Catches any exceptions that occur during the execution of the script. If an error occurs, it outputs a message to the console including the line number where the error occurred.  The script then exits with an error code of 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-mysql2csv.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: List Automatic Variables in PowerShell\nDESCRIPTION: This function lists all automatic variables of PowerShell by calling the `AddItem` function for each variable. It adds the variable name and its content as properties to a PSObject, effectively creating a list of automatic variables and their values. Includes variables like `$args`, `$HOME`, `$PID`, `$PSVersionTable`, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-automatic-variables.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction ListAutomaticVariables {\n\tAddItem \"`$args\"\t\t\t\"$args\"\n\tAddItem \"`$ConsoleFileName\"\t\t\"$ConsoleFileName\"\n\tAddItem \"`$Error[0]\"\t\t\t\"$($Error[0])\"\n\tAddItem \"`$Event\"\t\t\t\"$Event\"\n\tAddItem \"`$EventArgs\"\t\t\t\"$EventArgs\"\n\tAddItem \"`$EventSubscriber\"\t\t\"$EventSubscriber\"\n\tAddItem \"`$ExecutionContext\"\t\t\"$ExecutionContext\"\n\tAddItem \"`$false\"\t\t\t\"$false\"\n\tAddItem \"`$foreach\"\t\t\t\"$foreach\"\n\tAddItem \"`$HOME\"\t\t\t\"$HOME\"\n\tAddItem \"`$input\"\t\t\t\"$input\"\n\tAddItem \"`$IsCoreCLR\"\t\t\t\"$IsCoreCLR\"\n\tAddItem \"`$IsLinux\"\t\t\t\"$IsLinux\"\n\tAddItem \"`$IsMacOS\"\t\t\t\"$IsMacOS\"\n\tAddItem \"`$IsWindows\"\t\t\t\"$IsWindows\"\n\tAddItem \"`$LastExitCode\"\t\t\"$LastExitCode\"\n\tAddItem \"`$Matches\"\t\t\t\"$Matches\"\n\tAddItem \"`$MyInvocation.PSScriptRoot\" \"$($MyInvocation.PSScriptRoot)\"\n\tAddItem \"`$MyInvocation.PSCommandPath\" \"$($MyInvocation.PSCommandPath)\"\n\tAddItem \"`$NestedPromptLevel\"\t\t\"$NestedPromptLevel\"\n\tAddItem \"`$null\"\t\t\t\"$null\"\n\tAddItem \"`$PID\"\t\t\t\t\"$PID\"\n\tAddItem \"`$PROFILE\"\t\t\t\"$PROFILE\"\n\tAddItem \"`$PSBoundParameters\"\t\t\"$PSBoundParameters\"\n\tAddItem \"`$PSCmdlet\"\t\t\t\"$PSCmdlet\"\n\tAddItem \"`$PSCommandPath\"\t\t\"$PSCommandPath\"\n\tAddItem \"`$PSCulture\"\t\t\t\"$PSCulture\"\n\tAddItem \"`$PSDebugContext\"\t\t\"$PSDebugContext\"\n\tAddItem \"`$PSHOME\"\t\t\t\"$PSHOME\"\n\tAddItem \"`$PSItem\"\t\t\t\"$PSItem\"\n\tAddItem \"`$PSScriptRoot\"\t\t\"$PSScriptRoot\"\n\tAddItem \"`$PSSenderInfo\"\t\t\"$PSSenderInfo\"\n\tAddItem \"`$PSUICulture\"\t\t\t\"$PSUICulture\"\n\tAddItem \"`$PSVersionTable.PSVersion\"\t\"$($PSVersionTable.PSVersion)\"\n\tAddItem \"`$PSVersionTable.PSEdition\"\t\"$($PSVersionTable.PSEdition)\"\n\tAddItem \"`$PSVersionTable.GitCommitId\"\t\"$($PSVersionTable.GitCommitId)\"\n\tAddItem \"`$PSVersionTable.OS\"\t\t\"$($PSVersionTable.OS)\"\n\tAddItem \"`$PSVersionTable.Platform\"\t\"$($PSVersionTable.Platform)\"\n\tAddItem \"`$PSVersionTable.PSCompatibleVersions\" \"$($PSVersionTable.PSCompatibleVersions)\"\n\tAddItem \"`$PSVersionTable.PSRemotingProtocolVersion\" \"$($PSVersionTable.PSRemotingProtocolVersion)\"\n\tAddItem \"`$PSVersionTable.SerializationVersion\" \"$($PSVersionTable.SerializationVersion)\"\n\tAddItem \"`$PSVersionTable.WSManStackVersion\" \"$($PSVersionTable.WSManStackVersion)\"\n\tAddItem \"`$PWD\"\t\t\t\t\"$PWD\"\n\tAddItem \"`$Sender\"\t\t\t\"$Sender\"\n\tAddItem \"`$ShellId\"\t\t\t\"$ShellId\"\n\tAddItem \"`$StackTrace\"\t\t\t\"$StackTrace\"\n\tAddItem \"`$switch\"\t\t\t\"$switch\"\n\tAddItem \"`$this\"\t\t\t\"$this\"\n\tAddItem \"`$true\"\t\t\t\"$true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the List Network Connections Script in PowerShell\nDESCRIPTION: Example showing how to run the list-network-connections.ps1 script from a PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-connections.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-network-connections.ps1\n```\n\n----------------------------------------\n\nTITLE: Writing a Random Joke to Console - PowerShell\nDESCRIPTION: This PowerShell script reads jokes from a CSV file (`jokes.csv`), selects a random joke, and prints it to the console.  It imports the CSV, uses a random number generator to choose a joke, extracts the joke text, and outputs it.  The script also includes error handling to catch potential issues during file import or processing. It uses the `Import-CSV` cmdlet. The script requires the `jokes.csv` file in the `data` folder. The output includes the selected joke formatted on the console and exits with a success or failure code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-joke.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites a random joke\n.DESCRIPTION\n\tThis PowerShell script selects a random joke from Data/jokes.csv and writes it to the console.\n.EXAMPLE\n\tPS> ./write-joke.ps1\n\tChuck Norris can dribble a bowling ball. 😂\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$table = Import-CSV \"$PSScriptRoot/../data/jokes.csv\"\n\n\t$randomNumberGenerator = New-Object System.Random\n\t$row = [int]$randomNumberGenerator.next(0, $table.Count - 1)\n\t$joke = $table[$row].JOKE\n\n\tWrite-Host \"`n$Joke 😂\" -foregroundColor Magenta\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Execution Command - PowerShell\nDESCRIPTION: This code provides a practical example of how to run the `open-holiday-check-website.ps1` script from a PowerShell console. It shows the command using a relative path (`./`) assuming the script is in the current working directory. Executing this command will launch the default web browser and navigate to the target website. Requires a PowerShell environment and a configured default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-holiday-check-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-holiday-check-website\n```\n\n----------------------------------------\n\nTITLE: Speaking Russian Text with TTS in PowerShell\nDESCRIPTION: This PowerShell script takes Russian text as input, either via a parameter or by prompting the user, and then uses a text-to-speech voice to speak the text.  It searches for a Russian voice and if it finds one it uses it to speak a predefined Russian sentence. If no voice is found, it throws an error. The script uses the SAPI.SPVoice COM object and handles potential errors. The script's output is the spoken Russian text, or error messages in case of failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-russian.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Russian\n.DESCRIPTION\n\tThis PowerShell script speaks the text with a Russian text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Russian text\n.EXAMPLE\n\tPS> ./speak-russian.ps1 \"Привет\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Russian text\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Russian*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak(\"Путин вторгся в Украину и проиграет войну!\")\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Russian text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Usage example of close-obs-studio.ps1 PowerShell script\nDESCRIPTION: A simple example demonstrating how to run the close-obs-studio.ps1 script from PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-obs-studio.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-obs-studio.ps1\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Show Frankfurt in Google Maps\nDESCRIPTION: This script opens the default web browser to Google Maps centered on Frankfurt city (Germany). It supports common PowerShell parameters for debugging and output control. The script's simplicity makes it suitable for quick geographic visualization without additional dependencies.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-frankfurt-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-frankfurt-city.ps1 - Shows Frankfurt city in Google Maps\n\nThis script launches the Web browser with Google Maps at Frankfurt city (Germany).\n\n## Parameters\n```powershell\nshow-frankfurt-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./show-frankfurt-city\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of show-frankfurt-city.ps1*\n```\n\n----------------------------------------\n\nTITLE: Using write-vertical.ps1 PowerShell Script\nDESCRIPTION: Example showing how to use the write-vertical.ps1 script to display text vertically. The script takes an optional text parameter and prints each character on a new line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-vertical.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-vertical \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Script Usage and Parameters in PowerShell\nDESCRIPTION: Shows the PowerShell command usage pattern and parameters for the speak-epub.ps1 script. The script accepts a filename parameter that specifies the path to the EPUB file to be read aloud.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-epub.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-epub.ps1 [[-Filename] <String>] [<CommonParameters>]\n\n-Filename <String>\n    Specifies the path to the Epub file\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a practical example of running the `open-github.ps1` script from a PowerShell prompt. The `./` prefix indicates execution from the current directory. Running this command will trigger the script's core functionality: opening the default web browser to the GitHub website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-github.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-github\n\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of List-Empty-Files.ps1 in PowerShell\nDESCRIPTION: This example shows how to use the list-empty-files.ps1 script to scan the C:\\Windows directory. It demonstrates the script's output, which includes the number of empty files found and the time taken to scan the directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-empty-files.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-empty-files.ps1 C:\\Windows\n...\n✅ Found 6 empty files within C:\\Windows in 54 sec\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository using Git (Shell)\nDESCRIPTION: Downloads the PowerShell sample scripts repository from GitHub using the Git command-line tool. Requires Git to be installed and accessible in the PATH.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/fleschutz/PowerShell\n```\n\n----------------------------------------\n\nTITLE: Example Script Execution - PowerShell\nDESCRIPTION: Provides a simple example demonstrating how to run the `open-dropbox-website.ps1` script from a PowerShell command prompt. This command executes the script using the standard relative path `./`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-dropbox-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-dropbox-website\n```\n\n----------------------------------------\n\nTITLE: Get Common Parameters in PowerShell\nDESCRIPTION: This snippet shows the common parameters supported by the PowerShell script. These parameters allow for controlling the script's verbosity, debugging, error handling, and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/scan-network.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Bitbucket Website Script (PowerShell)\nDESCRIPTION: This snippet defines the parameters accepted by the `open-bit-bucket-website.ps1` script. It explicitly states that the script supports standard PowerShell common parameters like Verbose, Debug, and ErrorAction, which control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bit-bucket-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-bit-bucket-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters for give-me-five.ps1 in PowerShell\nDESCRIPTION: This snippet outlines the command-line syntax for the give-me-five.ps1 script, indicating its support for standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., which control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/give-me-five.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ngive-me-five.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Opening Google Maps in Default Browser with PowerShell\nDESCRIPTION: PowerShell script that opens Google Maps in the default web browser by calling another script 'open-default-browser.ps1' with the Google Maps URL as parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-maps.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Maps\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Maps website.\n.EXAMPLE\n\tPS> ./open-google-maps\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.google.com/maps\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Independence Day Calculation and Text-to-Speech Implementation\nDESCRIPTION: The full script implementation that calculates days until or since Independence Day (July 4th) and uses text-to-speech to announce the result, with error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-independence-day.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the time until Independence Day\n.DESCRIPTION\n\tThis PowerShell script checks the time until Indepence Day and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-independence-day.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Now = [DateTime]::Now\n\t$IndependenceDay = [Datetime](\"07/04/\" + $Now.Year)\n\tif ($Now -lt $IndependenceDay) {\n\t\t$Diff = $IndependenceDay – $Now\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"Independence Day on July 4th is in $($Diff.Days) days.\"\n\t} else {\n\t\t$Diff = $Now - $IndependenceDay\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"Independence Day on July 4th was $($Diff.Days) days ago.\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of make-repo.ps1\nDESCRIPTION: Shows the basic command structure for executing the 'make-repo.ps1' script. An optional repository directory path can be provided as an argument.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nmake-repo.ps1 [<repo-dir>]\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for OpenStreetMap Script (PowerShell)\nDESCRIPTION: This section defines the common parameters supported by the open-street-map.ps1 script. It includes standard parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, enabling flexible script execution and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-street-map.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-street-map.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of write-credits.ps1 in PowerShell\nDESCRIPTION: The full implementation of the write-credits.ps1 script. It clears the console, displays a 'CREDITS' ASCII art header, and then calls write-animated.ps1 to display each credit line with an animation effect, followed by a big 'Thanx 4 watching' message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-credits.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites the credits \n.DESCRIPTION\n\tThis PowerShell script writes the credits for the PowerShell script collection.\n.EXAMPLE\n\tPS> ./write-credits.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tClear-Host\n\t\"\t\t\t ______     ______     ______     _____     __     ______   ______    \"\n\t\"\t\t\t/\\  ___\\   /\\  == \\   /\\  ___\\   /\\  __-.  /\\ \\   /\\__  _\\ /\\  ___\\   \"\n\t\"\t\t\t\\ \\ \\____  \\ \\  __<   \\ \\  __\\   \\ \\ \\/\\ \\ \\ \\ \\  \\/_/\\ \\/ \\ \\___  \\  \"\n\t\"\t\t\t \\ \\_____\\  \\ \\_\\ \\_\\  \\ \\_____\\  \\ \\____-  \\ \\_\\    \\ \\_\\  \\/\\_____\\ \"\n\t\"\t\t\t  \\/_____/   \\/_/ /_/   \\/_____/   \\/____/   \\/_/     \\/_/   \\/_____/ \"\n\t\"\"                                                       \n\t& \"$PSScriptRoot/write-animated.ps1\" \"Typos: Markus Fleschutz\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Keyboard: Rapoo 12335 E9270P WL Ultra-Slim Touch\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Operating Systems: Windows 11 24H2 & Ubuntu Server 24.04 LTS\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Console: Windows Terminal 1.20.11271.0\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Shell: PowerShell 5.1.22621.2506 & PowerShell 7.4.3\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Scripts: PowerShell Scripts 1.2\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"GitHub: github.com/fleschutz/PowerShell\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Git: version 2.45.0\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"SSH: OpenSSH version 7.7p1\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Unicode: version 13.0\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Song #1: Epic Song by BoxCat Games from Free Music Archive\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Song #2: Siesta by Jahzzar from Free Music Archive\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Executive Producer: Markus Fleschutz\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Special Thanks: Andrea Fleschutz\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"Copyright: (c) 2024. All Rights Reserved\"\n\t& \"$PSScriptRoot/write-animated.ps1\" \"* No Animals Were Harmed in the Making of This Film *\"\n\t& \"$PSScriptRoot/write-big.ps1\" \" Thanx 4 watching\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete pull-repos.ps1 PowerShell Script Implementation\nDESCRIPTION: The full implementation of the script that pulls updates into Git repositories. It checks for Git availability, processes all subfolders in the parent directory, and updates each repository including submodules with progress tracking.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pull-repos.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPulls updates into Git repos\n.DESCRIPTION\n\tThis PowerShell script pulls updates into all Git repositories in a folder (including submodules).\n.PARAMETER parentDir\n\tSpecifies the path to the parent folder\n.EXAMPLE\n\tPS> ./pull-repos C:\\MyRepos\n\t⏳ (1) Searching for Git executable...       git version 2.43.0\n\t⏳ (2) Checking parent folder...             33 subfolders\n\t⏳ (3/35) Pulling into 📂base256U...\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$parentDir = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1) Searching for Git executable...`t`t\" -NoNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2) Checking parent folder...`t`t\" -NoNewline\n\tif (-not(Test-Path \"$parentDir\" -pathType container)) { throw \"Can't access folder: $parentDir\" }\n\t$folders = (Get-ChildItem \"$parentDir\" -attributes Directory)\n\t$numFolders = $folders.Count\n\t$parentDirName = (Get-Item \"$parentDir\").Name\n\tWrite-Host \"$numFolders subfolders\"\n\n\t[int]$step = 3\n\t[int]$failed = 0\n\tforeach ($folder in $folders) {\n\t\t$folderName = (Get-Item \"$folder\").Name\n\t\tWrite-Host \"⏳ ($step/$($numFolders + 2)) Pulling into 📂$folderName...`t`t\" -NoNewline\n\n\t\t& git -C \"$folder\" pull --recurse-submodules --jobs=4\n\t\tif ($lastExitCode -ne \"0\") { $failed++; write-warning \"'git pull' in 📂$folderName failed\" }\n\n\t\t& git -C \"$folder\" submodule update --init --recursive\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git submodule update' in 📂$folder failed with exit code $lastExitCode\" }\n\t\t$step++\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\tif ($failed -eq 0) {\n\t\t\"✅ Pulled into $numFolders repos at 📂$parentDir in $($elapsed)s.\"\n\t\texit 0 # success\n\t} else {\n\t\t\"⚠️ Pulled into $numFolders repos at 📂$parentDir in $($elapsed)s but $failed failed!\"\n\t\texit 1\n\t}\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Change Working Directory to Recycle Bin - PowerShell Script - PowerShell\nDESCRIPTION: This snippet contains the core logic of the cd-recycle-bin.ps1 script. It defines a helper function to retrieve the current user's SID (used on Windows), constructs the appropriate recycle bin path based on the operating system (Windows or Linux), validates the path exists, changes the current location using Set-Location, outputs the final path, and includes robust error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-recycle-bin.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the recycle bin folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's recycle bin folder.\n.EXAMPLE\n\tPS> ./cd-recycle-bin\n\t📂C:\\$Recycle.Bin\\S-1-5-21-123404-23309-294260-1001\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetCurrentUserSID { [CmdletBinding()] param()\n\tAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n\treturn ([System.DirectoryServices.AccountManagement.UserPrincipal]::Current).SID.Value\n}\n\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = \"~/.local/share/Trash/\"\n\t} else {\n\t\t$path = \"C:\\`$Recycle.Bin\\$(GetCurrentUserSID)\"\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Recycle bin folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Common Parameters\nDESCRIPTION: This section describes that the script supports common parameters in PowerShell, including Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-montreal-city.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Implementing Cortana Launch Logic in PowerShell\nDESCRIPTION: This is the core PowerShell script (`open-cortana.ps1`) that launches the Cortana application. It uses a `try-catch` block for basic error handling and invokes `Start-Process` with the `ms-cortana2:` protocol URI. It exits with code 0 on success and 1 on failure, printing an error message if an exception occurs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cortana.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Cortana app\n.DESCRIPTION\n\tThis PowerShell script launches the Cortana application.\n.EXAMPLE\n\tPS> ./open-cortana\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process ms-cortana2:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Cryptocurrency Rates Function in PowerShell\nDESCRIPTION: Defines the ListCryptoRate function that takes a cryptocurrency symbol and name as parameters, queries the CryptoCompare API for current exchange rates in USD, EUR, RUB, and CNY, and returns a PowerShell object with the formatted results. This function depends on Invoke-WebRequest and requires internet connectivity. It parses JSON response content and constructs an object with currency rates as string properties.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-crypto-rates.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nfunction ListCryptoRate { param([string]$Symbol, [string]$Name)\n\t$rates = (Invoke-WebRequest -URI \"https://min-api.cryptocompare.com/data/price?fsym=$Symbol&tsyms=USD,EUR,RUB,CNY\" -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\tNew-Object PSObject -property @{ 'CRYPTOCURRENCY' = \"1 $Name ($Symbol) =\"; 'USD' = \"$($rates.USD)\"; 'EUR' = \"$($rates.EUR)\"; 'RUB' = \"$($rates.RUB)\"; 'CNY' = \"$($rates.CNY)\" }\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Speak Norwegian Text Using COM TTS Object\nDESCRIPTION: This PowerShell script initiates a Norwegian text-to-speech operation by creating a SAPI.SPVoice COM object, iterating through available voices to find a Norwegian one, and speaking the provided text. It requires the user to input text or pipe it in, and handles errors if no Norwegian voice is available. Dependencies include Microsoft Speech API installed on the system, and it supports common PowerShell parameters for debugging and control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-norwegian.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Norwegian\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Norwegian text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Norwegian text to speak\n.EXAMPLE\n\tPS> ./speak-norwegian.ps1 Hallo\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Norwegian text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Norwegian*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Norwegian text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Example for uninstall-spotify.ps1\nDESCRIPTION: Shows a simple example of how to execute the script from a PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-spotify.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-spotify\n```\n\n----------------------------------------\n\nTITLE: Format and Display Automatic Variables in PowerShell\nDESCRIPTION: This section of the script calls the `ListAutomaticVariables` function, formats the output as a table with 'Variable' and 'Content' columns, and handles potential errors. If an error occurs, it prints an error message including the script line number and the error details before exiting with code 1; otherwise, the script exits with code 0 indicating success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-automatic-variables.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ntry {\n\tListAutomaticVariables | format-table -property Variable,Content\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters (PowerShell)\nDESCRIPTION: Defines the parameters accepted by the open-speed-test.ps1 script. It shows the script's basic syntax including the path and notes that it only supports PowerShell common parameters, listing them. There are no unique parameters defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-speed-test.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-speed-test.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example PowerShell\nDESCRIPTION: This snippet provides an example of how to execute the `check-password.ps1` script from the PowerShell command line, passing the password 'qwerty' as an argument. It demonstrates the expected output when the password is found in known security breaches, including the warning emoji and the count of breaches.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-password.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-password qwerty\n⚠️  Bad password, it's already listed in 10584568 known security breaches!\n```\n\n----------------------------------------\n\nTITLE: Script Logic and Error Handling - PowerShell\nDESCRIPTION: This snippet contains the core logic of the `open-temporary-folder.ps1` script. It defines a function `GetTempDir` to determine the temporary directory path based on environment variables and operating system. The main part attempts to get the path, verifies it exists as a container, and then calls `open-file-explorer.ps1` to open the directory. A try-catch block handles potential errors during execution, providing informative output if an issue occurs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-temporary-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the temporary folder\n.DESCRIPTION\n\tThis script launches the File Explorer showing the temporary folder.\n.EXAMPLE\n\tPS> ./open-temporary-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetTempDir {\n\tif (\"$env:TEMP\" -ne \"\")\t{ return \"$env:TEMP\" }\n\tif (\"$env:TMP\" -ne \"\")\t{ return \"$env:TMP\" }\n\tif ($IsLinux) { return \"/tmp\" }\n\treturn \"C:\\Temp\"\n}\n\ntry {\n\t$Path = GetTempDir\n\tif (-not(test-path \"$Path\" -pathType container)) {\n\t\tthrow \"Temporary folder at 📂$Path doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$Path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Open Google Stadia in Browser\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to the Google Stadia website. It utilizes a helper script, open-default-browser.ps1, to handle the browser opening. The script exits with a success code (0) upon completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-stadia.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Stadia\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Stadia website.\n.EXAMPLE\n\tPS> ./open-google-stadia\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://stadia.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Example Execution of check-dns.ps1 (PowerShell)\nDESCRIPTION: This snippet provides a simple example of how to execute the check-dns.ps1 script from a PowerShell prompt and shows the expected output format, including the measured lookup time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-dns.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-dns.ps1\n✅ Internet DNS: 33.6ms lookup time\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling\nDESCRIPTION: This snippet implements a `try-catch` block to handle potential errors during script execution. It catches any exceptions and writes an error message including the line number and the error details. The script then exits with an error code (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Example Usage for Unused File Listing Script in PowerShell\nDESCRIPTION: This snippet demonstrates example invocation of the PowerShell script for finding unused files. It runs the script with a directory argument and illustrates the expected summary output. The example helps users understand usage patterns, required/optional arguments, and anticipate output structure. Requires that the script file exists and is executable; output may vary based on directory size and access rights.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-unused-files.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-unused-files.ps1 C:\\Windows\n...\n✅ Found 43729 unused files (no access for 100 days) within 📂C:\\Windows in 113 sec\n```\n\n----------------------------------------\n\nTITLE: Increasing Volume Using PowerShell Script (Example Usage)\nDESCRIPTION: This example demonstrates invoking the 'turn-volume-up.ps1' PowerShell script with default parameters to raise the system volume by 10%. No arguments are needed for the default behavior. The script must have execution privileges in the current environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-up.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS&gt; ./turn-volume-up\n\n```\n\n----------------------------------------\n\nTITLE: Executing the 'close-program.ps1' Script to Close Serenade.ai with PowerShell\nDESCRIPTION: This PowerShell code invokes an external script 'close-program.ps1' passing it the application name 'Serenade.ai' and related parameters to perform a graceful shutdown. It then exits with a success status code. It is the core logic of the 'close-serenade.ps1' script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-serenade.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n& \"$PSScriptRoot/close-program.ps1\" \"Serenade.ai\" \"serenade\" \"\"`nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Invoking Installation of IrfanView - PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the install-irfanview.ps1 script from PowerShell. The script installs IrfanView from the Microsoft Store using winget and supports common parameters such as Verbose or Debug. It does not require any arguments when run interactively but accepts standard PowerShell common parameters if needed. The snippet shows typical usage for initiating the installation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-irfanview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-irfan-view.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PowerShell Script Execution Syntax\nDESCRIPTION: Shows the command-line syntax for running the `uninstall-opera-browser.ps1` script, indicating that it supports standard PowerShell CommonParameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-opera-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-opera-browser.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Updating Ball Position and Handling Collisions in PowerShell\nDESCRIPTION: This function calculates the ball's next position based on its current velocity, detects collisions with top/bottom walls and paddles, and updates scores if the ball passes beyond paddles. It modifies the ball's direction and resets position upon scoring.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUpdates the ball position and detects collisions.\n.DESCRIPTION\nCalculates the next X and Y position for the ball based on current velocity. Inverts direction upon wall collision, detects paddle hits to invert X velocity, and increments scores if the ball goes past paddles.\n#>\nfunction UpdateBall {\n    $nextX = $script:ball.X + $script:ball.Dx\n    $nextY = $script:ball.Y + $script:ball.Dy\n\n    if ($nextY -lt 0 -or $nextY -ge [System.Console]::WindowHeight) {\n        $script:ball.Dy = -$script:ball.Dy\n        $nextY = $script:ball.Y\n    }\n\n    if ($nextX -eq 1 -and ($nextY -ge $player1 -and $nextY -le ($player1 + 4))) {\n        $script:ball.Dx = -$script:ball.Dx\n        $nextX = $script:ball.X\n    } elseif ($nextX -eq ([System.Console]::WindowWidth - 2) -and ($nextY -ge $player2 -and $nextY -le ($player2 + 4))) {\n        $script:ball.Dx = -$script:ball.Dx\n        $nextX = $script:ball.X\n    }\n\n    if ($nextX -lt 0) {\n        $script:scorePlayer2++\n        DrawScores\n        $nextX = [System.Console]::WindowWidth / 2\n    } elseif ($nextX -ge [System.Console]::WindowWidth) {\n        $script:scorePlayer1++\n        DrawScores\n        $nextX = [System.Console]::WindowWidth / 2\n    }\n\n    $script:ball.X = $nextX\n    $script:ball.Y = $nextY\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of enter-host.ps1 PowerShell Script\nDESCRIPTION: Demonstrates running the `enter-host.ps1` script to connect to a remote host named 'tux'. The example shows the script first pinging the host, then initiating the SSH connection with the detected username, and finally prompting for a password.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enter-host.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./enter-host.ps1 tux\n✅ tux is up and running (3ms latency).\n⏳ Connecting as user 'markus' using OpenSSH_for_Windows_9.5p1, LibreSSL 3.8.2\nmarkus@tux's password:\n...\n```\n\n----------------------------------------\n\nTITLE: Unmuting Audio Output Implementation in PowerShell\nDESCRIPTION: The full implementation of the turn-volume-on.ps1 script that unmutes system audio by sending the mute key (ASCII 173) using the Windows Script Host object.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-on.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTurn audio on\n.DESCRIPTION\n\tThis PowerShell script immediately unmutes the audio output.\n.EXAMPLE\n\tPS> .\\turn-volume-on\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$obj = new-object -com wscript.shell\n\t$obj.SendKeys([char]173)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: Provides a simple example demonstrating how to run the `ping-local-hosts.ps1` script from a PowerShell command prompt without any arguments. It shows the command used to invoke the script and the typical output format, listing the hostnames that responded successfully.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-local-hosts.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./ping-local-hosts.ps1\n✅ Up: hippo jenkins01 jenkins02 rocket vega\n\n\n```\n\n----------------------------------------\n\nTITLE: Clear DNS Cache PowerShell Script\nDESCRIPTION: This PowerShell script clears the DNS client cache of the local computer. It utilizes the `Clear-DnsClientCache` cmdlet. The script measures the execution time and provides feedback to the user, including the success status. It also incorporates error handling to gracefully manage potential issues during the cache clearing process. The script uses a try-catch block to handle potential errors. It will output the line number where the error occurred and the error message if any error occurred.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clear-dns-cache.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tClears the DNS cache\n.DESCRIPTION\n\tThis PowerShell script clears the DNS client cache of the local computer.\n.EXAMPLE\n\tPS> ./clear-dns-cache.ps1\n\t✅ Cleared DNS cache in 1s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tClear-DnsClientCache\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Cleared DNS cache in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing Time Zone Details\nDESCRIPTION: This PowerShell script retrieves and displays detailed information about the current time zone. It sets the culture to en-US for consistent formatting and uses the Get-Timezone cmdlet to fetch the time zone information. The script includes error handling and returns appropriate exit codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-timezone.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists time zone details\n.DESCRIPTION\n\tThis PowerShell script lists the details of the current time zone.\n.EXAMPLE\n\tPS> ./list-timezone\n\n\tId                         : Europe/Berlin\n\tDisplayName                : (UTC+01:00) Central European Standard Time\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentThread.currentCulture = [system.globalization.cultureInfo]\"en-US\"\n\tGet-Timezone \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Korean Text-to-Speech in PowerShell\nDESCRIPTION: The full PowerShell script (`speak-korean.ps1`) for Korean text-to-speech. It defines an optional `text` parameter, prompts the user if text isn't provided, creates a `SAPI.SPVoice` COM object, searches installed voices for one supporting Korean, sets that voice, speaks the input text using `TTS.Speak()`, and handles errors if no Korean voice is found. Requires a compatible Korean TTS voice installed on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-korean.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Korean\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Korean text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Korean text to speak\n.EXAMPLE\n\tPS> ./speak-korean.ps1 \"안녕하세요\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Korean text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Korean*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Korean text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling CrystalDiskInfo with winget in PowerShell\nDESCRIPTION: This PowerShell script attempts to uninstall CrystalDiskInfo using the winget package manager. It first displays a message to the user indicating that the uninstallation is in progress. Then, it executes the `winget uninstall \"CrystalDiskInfo\"` command. If the uninstallation fails (indicated by a non-zero exit code), it throws an error. Finally, it provides a success message and exits with code 0 upon successful uninstallation. It requires the winget package manager to be available and CrystalDiskInfo to be installed.  The script catches any exceptions, displays an error message with line number, and exits with an error code (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-crystal-disk-info.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls CrystalDiskInfo\n.DESCRIPTION\n\tThis PowerShell script uninstalls CrystalDiskInfo from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-crystal-disk-info\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling CrystalDiskInfo, please wait...\"\n\n\t& winget uninstall \"CrystalDiskInfo\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall CrystalDiskInfo, is it installed?\" }\n\n\t\"CrystalDiskInfo is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Bluetooth Settings Script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the open-bluetooth-settings.ps1 script from the PowerShell command line. Running this command will launch the Windows Bluetooth & other devices settings window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bluetooth-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-bluetooth-settings\n```\n\n----------------------------------------\n\nTITLE: Script to select and narrate a random Chuck Norris joke using PowerShell\nDESCRIPTION: This script reads jokes from a CSV file located at Data/jokes.csv, randomly selects one, and uses the system's TTS engine to speak the joke aloud. It supports various common PowerShell parameters for debugging, verbosity, and error handling, ensuring flexible execution. The script's core functionality includes file reading, random selection, and invoking TTS APIs, and it is intended for use on Windows systems with PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-joke.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## speak-joke.ps1 - Speaks a random Chuck Norris joke by text-to-speech\n\nThis script selects a random joke in Data/jokes.csv and uses text-to-speech (TTS) for output.\n\n## Parameters\n```powershell\nspeak-joke.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS>./speak-joke\n(listen and have fun)\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of speak-joke.ps1*\n```\n\n----------------------------------------\n\nTITLE: Documentation for open-youtube-website.ps1 PowerShell script\nDESCRIPTION: Provides detailed documentation, including purpose, parameters, usage examples, author info, and related links for the PowerShell script that opens YouTube in a web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-youtube-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-youtube-website.ps1 - Opens the YouTube website\n\nThis script launches the Web browser with the YouTube website.\n\n## Parameters\n```powershell\nopen-youtube-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-youtube-website\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-youtube-website.ps1*\n```\n\n----------------------------------------\n\nTITLE: Executing show-toronto-city.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates how to run the `show-toronto-city.ps1` script from the PowerShell command line. Executing this command will launch the default web browser and navigate to Google Maps centered on Toronto, Canada.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-toronto-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-toronto-city\n```\n\n----------------------------------------\n\nTITLE: Implementing VPN Disconnection Logic in disconnect-vpn.ps1 (PowerShell)\nDESCRIPTION: This PowerShell script disconnects the currently active VPN connection. It uses the `Get-VPNConnection` cmdlet to retrieve all configured VPN connections, iterates through them to find any with a 'Connected' status, and then executes `rasdial.exe` with the connection name and the `/DISCONNECT` argument to terminate the session. Basic error handling is included to report failures during the disconnection process or if no active connection is found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/disconnect-vpn.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDisconnects the VPN\n.DESCRIPTION\n\tThis PowerShell script disconnects the active VPN connection.\n.EXAMPLE\n\tPS> ./disconnect-vpn.ps1\n\tDisconnected now.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Connections = (Get-VPNConnection)\n\tforeach($Connection in $Connections) {\n\t\tif ($Connection.ConnectionStatus -ne \"Connected\") { continue }\n\t\t\"Disconnecting $($Connection.Name)...\"\n\t\t& rasdial.exe \"$($Connection.Name)\" /DISCONNECT\n\t\tif ($lastExitCode -ne \"0\") { throw \"Disconnect failed with exit code $lastExitCode\" }\n\t\t\"Disconnected now.\"\n\t\texit 0 # success\n\t}\n\tthrow \"No VPN connection found.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running Script in PowerShell\nDESCRIPTION: This snippet provides a simple example of how to execute the show-rome-city.ps1 script from a PowerShell command prompt. It shows the basic command syntax without any additional parameters, demonstrating the script's direct execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-rome-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-rome-city\n```\n\n----------------------------------------\n\nTITLE: Launching Windows Terminal in PowerShell\nDESCRIPTION: This snippet contains the core logic of the `open-windows-terminal.ps1` script. It includes standard PowerShell help comments (.SYNOPSIS, .DESCRIPTION, etc.) and uses the `Start-Process` cmdlet to launch the executable `wt.exe`, which is the Windows Terminal application. The script exits with code 0 indicating success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windows-terminal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Windows Terminal app\n.DESCRIPTION\n\tThis script launches the Windows Terminal application.\n.EXAMPLE\n\tPS> ./open-windows-terminal\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process wt.exe\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Example usage: Open BBC Website - PowerShell\nDESCRIPTION: This example demonstrates how to execute the open-bbc-website.ps1 script from the PowerShell console.  It shows the command required to launch the BBC website. There are no required dependencies other than PowerShell being available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bbc-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-bbc-website\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script via Remote SSH Login (Shell)\nDESCRIPTION: Connects to a remote machine via SSH, navigates to the specified directory (`<PATH>`), and executes a PowerShell script (`<SCRIPT>.ps1`). Requires SSH client/server setup and PowerShell on the remote machine.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncd <PATH>\n./<SCRIPT>.ps1\n```\n\n----------------------------------------\n\nTITLE: Common Parameters for check-gpu.ps1 PowerShell Script\nDESCRIPTION: Lists the common PowerShell parameters supported by the check-gpu.ps1 script, including Verbose, Debug, ErrorAction, and others that can be used when executing the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-gpu.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Declaring Script Parameters with PowerShell\nDESCRIPTION: This snippet documents the usage and supported common parameters for the check-operating-system.ps1 script. It ensures users can pass Verbose, Debug, ErrorAction, and other PowerShell standard parameters. These parameters allow customization of script output, error handling, warnings, and variable assignments in the pipeline. No custom parameters are introduced beyond these built-ins.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-operating-system.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ncheck-operating-system.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Launching Windows Screen Magnifier (magnify.exe) PowerShell\nDESCRIPTION: This PowerShell script launches the Windows Screen Magnifier application using the start-process cmdlet. It includes error handling to catch any exceptions during the process execution. The script exits with code 0 on success and code 1 on failure. Dependencies: Windows OS with Magnifier application available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-magnifier.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunch the Magnifier\n.DESCRIPTION\n\tThis script launches the Windows Screen Magnifier application.\n.EXAMPLE\n\tPS> ./open-magnifier\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tstart-process magnify.exe\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using merry-christmas.ps1 Script in PowerShell\nDESCRIPTION: Example of how to call the merry-christmas.ps1 script from PowerShell without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/merry-christmas.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./merry-christmas.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing the Script\nDESCRIPTION: This example shows how to execute the `open-cdc-website` script from the PowerShell prompt. It demonstrates the basic command-line invocation of the script. The expected output is the launch of the default web browser with the CDC website loaded.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cdc-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-cdc-website\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script\nDESCRIPTION: This example demonstrates how to run the `open-plex-website.ps1` script from the PowerShell command line. It uses the relative path `./` to execute the script located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-plex-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-plex-website\n```\n\n----------------------------------------\n\nTITLE: Executing Script - PowerShell Example\nDESCRIPTION: This snippet provides a simple example of how to execute the install-firefox.ps1 script from a PowerShell console. It shows running the script from the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-firefox.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-firefox.ps1\n```\n\n----------------------------------------\n\nTITLE: Close Outlook Application\nDESCRIPTION: This PowerShell script gracefully closes the Microsoft Outlook email application by using the `TaskKill` command to terminate the `outlook.exe` process. It checks the `$lastExitCode` to verify if the process was successfully terminated. If Outlook wasn't running, it executes another script to provide feedback and exits with code 1; otherwise, it exits with code 0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-outlook.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Microsoft Outlook app\n.DESCRIPTION\n\tThis PowerShell script closes the Microsoft Outlook email application gracefully.\n.EXAMPLE\n\tPS> ./close-outlook.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im outlook.exe\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Microsoft Outlook isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Implementing play-goat-sound.ps1 Script Logic\nDESCRIPTION: Contains the source code for the 'play-goat-sound.ps1' script. It includes comment-based help (Synopsis, Description, Example, Link, Notes) and the core logic, which executes the 'play-mp3.ps1' script located in the same directory, passing the path to the 'goat.mp3' sound file. The script exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-goat-sound.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a goat sound\n.DESCRIPTION\n\tThis PowerShell script plays a goat sound.\n.EXAMPLE\n\tPS> ./play-goat-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/goat.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Example Usage of check-santa.ps1\nDESCRIPTION: Demonstrates how to run the check-santa.ps1 script from the PowerShell command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-santa.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-santa\n```\n\n----------------------------------------\n\nTITLE: Parameters Signature - PowerShell\nDESCRIPTION: Details the command-line signature for the cd-desktop.ps1 script, showing the script name and indicating that it accepts standard PowerShell common parameters like Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-desktop.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-desktop.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-fbi-website.ps1 (PowerShell)\nDESCRIPTION: This snippet outlines the parameters accepted by the open-fbi-website.ps1 script. It explicitly mentions support for PowerShell's Common Parameters (like Verbose, Debug, ErrorAction, etc.), which allow for controlling script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fbi-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-fbi-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of Script - PowerShell\nDESCRIPTION: Demonstrates how to invoke the open-pinterest-website.ps1 PowerShell script to open the Pinterest website. The command can be run directly in the PowerShell terminal, assuming the script file is present and executable, and will launch the Pinterest website using the system's default web browser. No parameters are necessary for typical usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pinterest-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-pinterest-website\n\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This snippet shows the parameter definition for the `uninstall-bloatware.ps1` script. It indicates that the script accepts the standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., allowing users to control script behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-bloatware.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/uninstall-bloatware.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Checking Wind Conditions and TTS Output\nDESCRIPTION: This PowerShell script retrieves current wind conditions for a given location, parses the data, and uses a text-to-speech script to vocalize the wind information. It requires internet access to fetch weather data and depends on an auxiliary script located relative to its path. The script includes parameter handling, error catching, and provides an example invocation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-wind.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the wind conditions\n.DESCRIPTION\n\tThis PowerShell script determines the current wind conditions and replies by text-to-speech (TTS).\n.PARAMETER location\n\tSpecifies the location to use (determined automatically per default)\n.EXAMPLE\n\tPS> ./check-wind.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$location = \"\") # empty means determine automatically\n\ntry {\n\t$Weather = (Invoke-WebRequest http://wttr.in/${location}?format=j1 -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\t$WindSpeed = $Weather.current_condition.windspeedKmph\n\t$WindDir = $Weather.current_condition.winddir16Point\n\t$Area = $Weather.nearest_area.areaName.value\n\t$Region = $Weather.nearest_area.region.value\n\n\t& \"$PSScriptRoot/speak-english.ps1\" \"$($WindSpeed)km/h wind from $WindDir at $Area ($Region).\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Git Extensions using winget (PowerShell)\nDESCRIPTION: This PowerShell script uninstalls Git Extensions using the winget package manager. It includes error handling to catch issues during the uninstallation process, such as Git Extensions not being installed. The script outputs messages to the console indicating the progress and result of the uninstallation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-git-extensions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Git Extensions\n.DESCRIPTION\n\tThis PowerShell script uninstalls Git Extensions from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-git-extensions\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Git Extensions, please wait...\"\n\n\t& winget uninstall --id GitExtensionsTeam.GitExtensions\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Git Extensions, is it installed?\" }\n\n\t\"Git Extensions is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Google News in PowerShell\nDESCRIPTION: This PowerShell script opens the Google News website in the default web browser. It uses the `&` operator to call another PowerShell script named `open-default-browser.ps1`, passing the Google News URL as a parameter.  The script concludes with an `exit 0` statement to indicate successful execution.  Requires the `open-default-browser.ps1` script to be present.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-news.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google News\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google News website.\n.EXAMPLE\n\tPS> ./open-google-news\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://news.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Playing Frog Sound in PowerShell\nDESCRIPTION: This PowerShell script plays a frog sound by invoking another script play-mp3.ps1 with the path to a frog.mp3 audio file located in a relative data directory. It supports common PowerShell parameters such as Verbose and Debug. The script exits with a success code (0) after attempting to play the sound. Dependencies include the presence of play-mp3.ps1 and the frog.mp3 sound file in the specified relative path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-frog-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a frog sound\n.DESCRIPTION\n\tThis PowerShell script plays a frog sound.\n.EXAMPLE\n\tPS> ./play-frog-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/frog.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Checking Local Repository Path\nDESCRIPTION: This snippet checks if the provided path to the local Git repository is accessible and valid. It uses `Resolve-Path` to get the full path and `Test-Path` to verify if the path is a container. An error is thrown if the path is not accessible.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (2/10) Checking local repository...     \" -noNewline\n\t$FullPath = Resolve-Path \"$pathToRepo\"\n\tif (!(Test-Path \"$FullPath\" -pathType Container)) { throw \"Can't access folder: $FullPath\" }\n\t\"$FullPath\"\n```\n\n----------------------------------------\n\nTITLE: Listing Local Drives with Parameter Usage in PowerShell\nDESCRIPTION: Shows the command syntax for the list-drives.ps1 script, including available common parameters such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-drives.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-drives.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing simulate-presence.ps1 with IP Address (PowerShell)\nDESCRIPTION: Illustrates how to execute the `simulate-presence.ps1` script from the PowerShell console, passing the IP address '192.168.100.100' of the Shelly1 device as a command-line argument.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/simulate-presence.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./simulate-presence 192.168.100.100\n```\n\n----------------------------------------\n\nTITLE: Running open-ethernet-settings.ps1 Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to invoke the open-ethernet-settings.ps1 script from a PowerShell prompt to open the Windows Ethernet settings. It requires Windows with PowerShell installed and access to the script file. The script supports standard common parameters such as Verbose and Debug, and expects no custom arguments. Execution results in the display of the Ethernet settings panel; there is no programmatic output. Limitations include dependency on appropriate Windows OS versions and sufficient user permissions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ethernet-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-ethernet-settings\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example PowerShell\nDESCRIPTION: This snippet provides a simple example command line for executing the show-tether-rate.ps1 script from the PowerShell console. It demonstrates running the script from the current directory using the ./ prefix.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-tether-rate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-tether-rate\n\n```\n\n----------------------------------------\n\nTITLE: Executing show-new-york-city.ps1 to View NYC (PowerShell)\nDESCRIPTION: Provides an example command for executing the `show-new-york-city.ps1` script directly from the PowerShell prompt (PS>). Running this command will trigger the script's action, opening the default web browser displaying Google Maps centered on New York City.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-new-york-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-new-york-city\n```\n\n----------------------------------------\n\nTITLE: Executing the PowerShell Script\nDESCRIPTION: This snippet demonstrates how to execute the PowerShell script `show-los-angeles-city.ps1`. It shows the command to run the script from the PowerShell console using the relative path `./show-los-angeles-city`. No parameters are passed in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-los-angeles-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-los-angeles-city\n```\n\n----------------------------------------\n\nTITLE: Initializing and Launching an IPFS Daemon with PowerShell\nDESCRIPTION: This main script initializes and configures a local IPFS server, performing checks for the IPFS executable and applying required configurations like low-power profile, API/gateway restructuring, CORS, and rate limits. It attempts to increase the UDP receive buffer, then launches the IPFS daemon in the background, outputting logs to files, and provides runtime diagnostics. Dependencies: the IPFS CLI must be installed and accessible, and administrator/sudo rights are required for certain network changes. Inputs include no required arguments; outputs are status messages, and in the event of failure, a descriptive error message. It assumes compatibility with Unix-like environments supporting sysctl and nohup.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/start-ipfs-server.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tStart an IPFS server \n.DESCRIPTION\n\tThis PowerShell script starts a local IPFS server as a daemon process.\n.EXAMPLE\n\tPS> ./start-ipfs-server\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/5) Searching for IPFS executable...  \" -noNewline\n\t& ipfs --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'ipfs' - make sure IPFS is installed and available\" }\n\t\"⏳ (2/5) Init IPFS with profile 'lowpower'...\"\n\t& ipfs init --profile lowpower\n\n\t\"⏳ (3/5) Configuring IPFS...\"\n\t& ipfs config Addresses.API /ip4/0.0.0.0/tcp/5001\n\tif ($lastExitCode -ne \"0\") { throw \"'ipfs config Addresses.API' failed with exit code $lastExitCode\" }\n\n\t& ipfs config Addresses.Gateway /ip4/0.0.0.0/tcp/8765\n\tif ($lastExitCode -ne \"0\") { throw \"'ipfs config Addresses.Gateway' failed with exit code $lastExitCode\" }\n\n\t$Hostname = $(hostname)\n\t& ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '[\\\"http://miami:5001\\\", \\\"http://localhost:3000\\\", \\\"http://127.0.0.1:5001\\\", \\\"https://webui.ipfs.io\\\"]'\n\tif ($lastExitCode -ne \"0\") { throw \"'ipfs config Access-Control-Allow-Origin' failed with exit code $lastExitCode\" }\n\n\t& ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '[\\\"PUT\\\", \\\"POST\\\"]'\n\tif ($lastExitCode -ne \"0\") { throw \"'ipfs config Access-Control-Allow-Methods' failed with exit code $lastExitCode\" }\n\n\t& ipfs config --json AutoNAT.Throttle.GlobalLimit 1 # (30 by default)\n\tif ($lastExitCode -ne \"0\") { throw \"'ipfs config AutoNAT.Throttle.GlobalLimit 1' failed with exit code $lastExitCode\" }\n\n\t& ipfs config --json AutoNAT.Throttle.PeerLimit 1 # (3 by default)\n\tif ($lastExitCode -ne \"0\") { throw \"'ipfs config AutoNAT.Throttle.PeerLimit 1' failed with exit code $lastExitCode\" }\n\t\"\"\n\tWrite-Host \"⏳ (4/5) Increasing UDP receive buffer size...\" -noNewline\n\t& sudo sysctl -w net.core.rmem_max=2500000\n\tif ($lastExitCode -ne \"0\") { throw \"'sysctl' failed with exit code $lastExitCode\" }\n\t\"⏳ (5/5) Starting IPFS daemon...\"\n#\tStart-Process nohup 'ipfs daemon'\n\tStart-Process nohup -ArgumentList 'ipfs','daemon' -RedirectStandardOutput \"$HOME/console.out\" -RedirectStandardError \"$HOME/console.err\"\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅  started IPFS server in $Elapsed sec\"\n\t\"⚠️ NOTE: make sure your router does not block TCP/UDP port 4001 for IPv4 and IPv6\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Counting String Characters - PowerShell\nDESCRIPTION: This PowerShell script counts the characters within a string. It accepts a string via the `givenString` parameter or prompts the user if no parameter is provided.  It then uses the `.Length` property to determine the string's length and outputs the count. The script includes error handling within a `try-catch` block, providing informative error messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/count-characters.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCounts the number of characters\n.DESCRIPTION\n\tThis PowerShell script counts the number of characters in the given string.\n.PARAMETER GivenString\n\tSpecifies the given string.\n.EXAMPLE\n\tPS> ./count-characters.ps1 \"Hello World\"\n\t✅ 11 characters counted in 'Hello World'.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$givenString = \"\")\n\ntry {\n\tif ($givenString -eq \"\" ) { $givenString = Read-Host \"Enter the string\" }\n\n\t[int64]$numChars = $givenString.Length\n\t\"✅ $numChars characters counted in '$givenString'.\" \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Executing Unbound Installation Script in PowerShell - PowerShell\nDESCRIPTION: This example demonstrates how to invoke the installation script for Unbound directly from the PowerShell prompt. It assumes the script has executable permissions and is located in the current directory. No extra arguments are supplied in this usage scenario; administrator rights are necessary for successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-unbound-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-unbound-server.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Executing the check-dawn.ps1 Script (PowerShell)\nDESCRIPTION: This snippet demonstrates a basic example of how to execute the check-dawn.ps1 script from a PowerShell prompt. Running the script without any specific parameters will trigger its default behavior of querying and announcing the dawn time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-dawn.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-dawn\n```\n\n----------------------------------------\n\nTITLE: Opening Starbucks Website in PowerShell\nDESCRIPTION: This PowerShell script opens the Starbucks website in the default web browser. It utilizes the `Invoke-WebRequest` cmdlet to achieve this. There are no specific parameters defined in this context. The script supports common parameters like Verbose, Debug, etc.  It does not have any dependencies beyond the basic PowerShell environment. The output is opening a webpage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-starbucks-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-starbucks-website\n\n```\n\n----------------------------------------\n\nTITLE: Executing System Sound Playback Workflow Using PowerShell\nDESCRIPTION: The main script execution block attempts to retrieve the system media path and plays all WAV sound files located directly in the Media folder as well as in its subdirectories. It displays informative messages and uses error handling to catch and report issues with OS support or missing paths. On success, it exits with code 0; on failure, it outputs a warning message with the error line and exits with code 1. It utilizes the previously defined functions for path retrieval and playback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-system-sounds.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ntry {\n\t$path = GetPathToSystemMedia\n\tWrite-Host \"`n   S Y S T E M    S O U N D S     (at: $path)\" -foregroundColor green\n\tPlaySoundFiles \"$path\\*.wav\"\n\tPlaySoundFiles \"$path\\*\\*.wav\"\n\texit 0 # success\n} catch {\n        \"🔒 Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing OS Releases with PowerShell Script - PowerShell\nDESCRIPTION: This script downloads a CSV file containing OS releases from a remote source using invoke-webRequest, reads its contents via import-csv, and then outputs formatted information about each OS release and its IPFS download URL. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for flexible execution and debugging. The script handles errors gracefully, cleans up temporary files, and requires network access as a prerequisite; it expects the target CSV and directory structure to be accessible and writable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os-releases.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\twrite-progress \"Reading OS_IPFS_hashes.csv ...\"\n\n\t$PathToRepo = \"$PSScriptRoot/..\"\n\t$PathToCsvFile = \"$PathToRepo/data/os-release.csv\"\n\tinvoke-webRequest -URI \"https://fleschutz.droppages.com/downloads/OS_IPFS_hashes.csv\" -outFile \"$PathToCsvFile\"\n\n\t$Table = import-csv \"$PathToCsvFile\"\n\tremove-item -path \"$PathToCsvFile\"\n\n\twrite-output \"Operating System Releases\"\n\twrite-output \"=========================\"\n\tforeach ($Row in $Table) {\n\t\twrite-output \"* $($Row.Path.substring(3)) -> ipfs://$($Row.IPFS)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of Time Zone Checking PowerShell Script\nDESCRIPTION: Complete script implementation that queries the system's time zone and formats the output. The script sets culture to en-US, retrieves the current time and time zone information, determines if DST is in effect, and displays a formatted result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-time-zone.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the time zone\n.DESCRIPTION\n\tThis PowerShell script queries the local time zone and prints it.\n.EXAMPLE\n\tPS> ./check-time-zone.ps1\n\t✅ 3:27 PM West Europe Summer Time (UTC+01:00:00 +1h DST)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[system.threading.thread]::currentThread.currentCulture = [system.globalization.cultureInfo]\"en-US\"\n\t$Time = $((Get-Date).ToShortTimeString())\n\t$TZ = (Get-Timezone)\n\t$offset = $TZ.BaseUtcOffset\n\tif ($TZ.SupportsDaylightSavingTime) {\n\t\t$TZName = $TZ.DaylightName\n\t\t$DST=\" +1h DST\"\n\t} else {\n\t\t$TZName = $TZ.StandardName\n\t\t$DST=\"\"\n\t}\n\tWrite-Host \"✅ $Time $TZName (UTC+$($offset)$($DST))\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Build Call (PowerShell)\nDESCRIPTION: This code defines a recursive call to the `BuildInDir` function.  If no other build rules are found, and the directory exists as a container, it tries to build within a subfolder. This will handle nested projects.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/$dirName\" -pathType container) {\n\t\t\"⏳ No make rule found, trying subfolder 📂$($dirName)...\"\n\t\tBuildInDir \"$path/$dirName\"\n\n```\n\n----------------------------------------\n\nTITLE: Direct Remote Execution of install-powershell.ps1 from GitHub - PowerShell\nDESCRIPTION: Shows how to execute the install-powershell.ps1 script directly from the web using PowerShell remoting. The snippet uses Invoke-RestMethod to download the script and executes it immediately with the -daily flag. Dependencies are an internet connection, proper PowerShell security policies, and the 'PackageManagement' module for daily builds. This is suitable for unattended or headless setups.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS > Invoke this script directly from GitHub\nInvoke-Expression \"& { $(Invoke-RestMethod 'https://aka.ms/install-powershell.ps1') } -daily\"\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating script execution and output in PowerShell\nDESCRIPTION: This example shows how to execute the remind-me.ps1 script from the PowerShell console, providing the message 'Dentist' and a specific date and time. It then displays the script's output, which confirms the successful registration of a scheduled task named 'Reminder_[RandomNumber]' and its current state.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remind-me.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./remind-me \"Dentist\" \"4/10/2021 12:00 PM\"\n\n\n\nTaskPath                                       TaskName                          State\n--------                                       --------                          -----\n\\                                              Reminder_451733811                Ready\n\n```\n\n----------------------------------------\n\nTITLE: Creating PowerShell Script with Template File\nDESCRIPTION: This PowerShell script creates a new script file by copying content from a template file.  It accepts a filename as a parameter, defaulting to prompting the user for input if none is provided. The script uses `Copy-Item` to copy the template and outputs a success or error message accordingly. Dependencies: The script relies on a template file located at ../data/template.ps1. Key parameters: `-filename` which specifies the path and filename for the new script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-script.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a new PowerShell script\n.DESCRIPTION\n\tThis PowerShell script creates a new PowerShell script file by using the template file ../data/template.ps1.\n.PARAMETER filename\n\tSpecifies the path and filename to the new script\n.EXAMPLE\n\tPS> ./new-script myscript.ps1\n\t✅ Created the new 'myscript.ps1' PowerShell script in 1 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$filename = \"\")\n\ntry {\n\tif ($filename -eq \"\" ) { $filename = Read-Host \"Enter the new filename\" }\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tCopy-Item \"$PSScriptRoot/../data/template.ps1\" \"$filename\"\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Created the new '$filename' PowerShell script in $elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Documentation in PowerShell\nDESCRIPTION: This snippet documents the common parameters supported by the check-cpu.ps1 PowerShell script. It indicates that the script supports parameters like Verbose, Debug, ErrorAction, etc., which are standard in PowerShell scripts for controlling output and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-cpu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using write-marquee.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to use the write-marquee.ps1 script with a simple text parameter. This example shows the basic usage pattern for executing the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-marquee.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-marquee \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining PowerShell Script Parameters\nDESCRIPTION: This block defines the script's command-line parameters `sourcePath` and `targetPath`. It specifies that they are strings, optional (not required), and can be provided positionally. It also indicates support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/sync-folder.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/sync-folder.ps1 [[-sourcePath] <String>] [[-targetPath] <String>] [<CommonParameters>]\n\n-sourcePath <String>\n    Specifies the path to the source folder\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-targetPath <String>\n    Specifies the path to the target folder\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Muting Audio Output with PowerShell\nDESCRIPTION: This PowerShell script is designed to mute the default audio output device immediately.  It includes common parameters such as Verbose, Debug, ErrorAction, etc., which can be used to control the script's behavior. The script can be executed directly from the PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/mute-audio.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/mute-audio.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters (PowerShell)\nDESCRIPTION: This snippet outlines the parameters supported by the open-google-docs.ps1 script. It specifically notes support for common PowerShell parameters, which influence standard script behaviors like error reporting and verbosity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-docs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-google-docs.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for RSS Headline Retrieval in PowerShell\nDESCRIPTION: This snippet declares the parameters for the check-headlines.ps1 script, allowing users to specify an RSS feed URL (defaulting to https://yahoo.com/news/rss/world) and to limit the number of headlines returned (defaulting to 8). It outlines parameter attributes such as position, requirement, and pipeline acceptance, permitting flexible usage of the script with customizable input. It also supports the standard PowerShell common parameters for enhanced control over script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-headlines.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-headlines.ps1 [[-RSS_URL] <String>] [[-MaxCount] <Int32>] [<CommonParameters>]\n\n-RSS_URL <String>\n    Specifies the URL to the RSS feed\n    \n    Required?                    false\n    Position?                    1\n    Default value                https://yahoo.com/news/rss/world\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-MaxCount <Int32>\n    Specifies the number of news to list\n    \n    Required?                    false\n    Position?                    2\n    Default value                8\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing HeapSort Algorithm in PowerShell\nDESCRIPTION: This code snippet presents the complete implementation of the HeapSort algorithm in PowerShell, encapsulated within a class named `HeapSort`. It includes static methods `Sort` and `MaxHeapify`. The `Sort` method performs the HeapSort algorithm on a given list, and `MaxHeapify` maintains the heap property. The script also generates random integers, measures sorting time, and displays the output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-HeapSort.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Measures the speed of HeapSort\n.DESCRIPTION\n        This PowerShell script measures the speed of the HeapSort algorithm.\n        HeapSort is a comparison-based sorting algorithm. Heapsort can be thought of as an\n\timproved selection sort: like selection sort, heapsort divides its input into a sorted\n\tand an unsorted region, and it iteratively shrinks the unsorted region by extracting\n\tthe largest element from it and inserting it into the sorted region. Unlike selection\n\tsort, heapsort does not waste time with a linear-time scan of the unsorted region;\n\trather, heap sort maintains the unsorted region in a heap data structure to more quickly\n\tfind the largest element in each step.\n.PARAMETER numIntegers\n        Specifies the number of integers to sort\n.EXAMPLE\n        PS> ./measure-HeapSort.ps1\n        🧭 0.614 sec to sort 1000 integers by HeapSort \n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$numIntegers = 1000)\n\nclass HeapSort {\n    static Sort($targetList) {\n        $heapSize = $targetList.Count\n\n        for ([int]$p = ($heapSize - 1) / 2; $p -ge 0; $p--) {\n            [HeapSort]::MaxHeapify($targetList, $heapSize, $p)\n        }\n\n        for ($i = $targetList.Count - 1; $i -gt 0; $i--) {\n            $temp = $targetList[$i]\n            $targetList[$i] = $targetList[0]\n            $targetList[0] = $temp\n\n            $heapSize--\n            [HeapSort]::MaxHeapify($targetList, $heapSize, 0)\n        }\n    }\n\n    static MaxHeapify($targetList, $heapSize, $index) {\n        $left = ($index + 1) * 2 - 1\n        $right = ($index + 1) * 2\n        $largest = 0\n\n        if ($left -lt $heapSize -and $targetList[$left] -gt $targetList[$index]) {\n            $largest = $left\n        }\n        else {\n            $largest = $index\n        }\n\n        if ($right -lt $heapSize -and $targetList[$right] -gt $targetList[$largest]) {\n            $largest = $right\n        }\n\n        if ($largest -ne $index) {\n            $temp = $targetList[$index]\n            $targetList[$index] = $targetList[$largest]\n            $targetList[$largest] = $temp\n\n            [HeapSort]::MaxHeapify($targetList, $heapSize, $largest)\n        }\n    }\n}\n\n$list = (1..$numIntegers | foreach{Get-Random -minimum 1 -maximum $numIntegers})\n$stopWatch = [system.diagnostics.stopwatch]::startNew()\n[HeapSort]::Sort($list)\n[float]$elapsed = $stopWatch.Elapsed.TotalSeconds\n$elapsed3 = \"{0:N3}\" -f $elapsed # formatted to 3 decimal places\n\"🧭 $elapsed3 sec to sort $numIntegers integers by HeapSort\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Opening Internet Archive Website with PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to the Internet Archive website (archive.org). The script calls another script 'open-default-browser.ps1' to handle the browser launching functionality and exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-internet-archive.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Internet Archive website \n.DESCRIPTION\n\tThis script launches the Web browser with the Internet Archive website.\n.EXAMPLE\n\tPS> ./open-internet-archive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://archive.org\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Running enable-crash-dumps.ps1 (PowerShell)\nDESCRIPTION: Provides a basic example demonstrating how to execute the enable-crash-dumps.ps1 script from the PowerShell command line. Running it without parameters typically enables crash dumps using default settings defined within the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-crash-dumps.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./enable-crash-dumps.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Building using CMake (PowerShell)\nDESCRIPTION: This snippet builds a repository using CMake.  It checks for CMakeLists.txt, creates a build directory, executes `cmake` to generate a Makefile, executes `make -j4` for compilation and linking, and optionally runs `ctest -V` for tests. It requires CMake, Make, and CTest to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nif (Test-Path \"$path/CMakeLists.txt\" -pathType leaf) {\n\t\t\"⏳ (1/4) Building 📂$dirName by using CMake into 📂$dirName/_Build_Results...\"\n\t\tif (-not(Test-Path \"$path/_Build_Results/\" -pathType container)) { \n\t\t\t& mkdir \"$path/_Build_Results/\"\n\t\t}\n\t\tSet-Location \"$path/_Build_Results/\"\n\n\t\t\"⏳ (2/4) Executing 'cmake' to generate the Makefile...\"\n\t\t& cmake ..\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'cmake ..' exited with error code $lastExitCode\" }\n\n\t\t\"⏳ (3/4) Executing 'make -j4' to compile and link...\"\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' exited with error code $lastExitCode\" }\n\n\t\t\"⏳ (4/4) Executing 'ctest -V' to perform tests (optional)...\"\n\t\t& ctest -V\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'ctest -V' exited with error code $lastExitCode\" }\n\n\t}\n```\n\n----------------------------------------\n\nTITLE: Example of Running open-serenade-website PowerShell Script\nDESCRIPTION: A simple example demonstrating how to execute the open-serenade-website.ps1 script from a PowerShell prompt. The script requires no parameters and will open the Serenade.ai website in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-serenade-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-serenade-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: Defines the common parameters supported by the `check-sunrise.ps1` script. It supports Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-sunrise.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ncheck-sunrise.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Documentation for show-dallas-city.ps1\nDESCRIPTION: Documents the script's supported parameters, indicating it supports common PowerShell parameters such as Verbose, Debug, and ErrorAction to control script behavior during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dallas-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n## Parameters\n```powershell\nshow-dallas-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n```\n\n----------------------------------------\n\nTITLE: Executing write-quote.ps1 PowerShell script\nDESCRIPTION: This example demonstrates how to execute the write-quote.ps1 script in PowerShell.  It expects the script to be in the current directory. The script selects and displays a random quote from a CSV file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-quote.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-quote.ps1\n“ We must become the change we want to see. „\n                           - Mahatma Gandhi\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Google Maps in Montreal\nDESCRIPTION: This PowerShell script takes no specific parameters other than the standard CommonParameters. It is designed to open the default web browser and direct it to Google Maps, displaying the city of Montreal. The script effectively launches Google Maps at a predefined location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-montreal-city.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Script Parameters (PowerShell)\nDESCRIPTION: Defines the common parameters accepted by the `open-microsoft-weather.ps1` script. These parameters, like Verbose, Debug, and ErrorAction, allow for controlling script execution behavior but are standard PowerShell features rather than script-specific inputs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-weather.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-microsoft-weather.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Closing OneDrive Gracefully Using PowerShell\nDESCRIPTION: This PowerShell script is designed to close Microsoft's OneDrive application gracefully by terminating its process. It supports PowerShell's common parameters such as Verbose, Debug, ErrorAction, and others, enabling flexible output and error handling during execution. The script expects no additional input parameters besides these common parameters and completes without returning output, focusing solely on clean shutdown behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-one-drive.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/close-one-drive.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-one-drive\n```\n\n----------------------------------------\n\nTITLE: Sorting Objects\nDESCRIPTION: This command sorts objects by a specified property. `Get-Process` retrieves a list of processes, and `Sort-Object` sorts them by the `Id` property. The result is a sorted list of processes based on their ID.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_27\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Process | Sort-Object -Property Id                      # Sort objects by a given property name\n```\n\n----------------------------------------\n\nTITLE: Opening Twitter Website using PowerShell\nDESCRIPTION: This PowerShell script opens the Twitter website in the default web browser. It does not have any specific parameters but uses the common parameters supported by all PowerShell scripts, such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. The script will launch the default web browser and navigate to the Twitter website. There are no specific prerequisites beyond having a web browser installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-twitter-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-twitter-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example of Azure Manual Launch - PowerShell\nDESCRIPTION: This snippet provides an example of how to execute the `show-azure-manual.ps1` script. The command `PS> ./show-azure-manual` is executed, which initiates the script and opens the Microsoft Azure manual in the default web browser.\n\nDependencies: PowerShell environment and the `show-azure-manual.ps1` script.\n\nInput: None explicitly. Implicitly, the script is invoked.\n\nOutput: The Microsoft Azure manual is displayed in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-azure-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-azure-manual\n```\n\n----------------------------------------\n\nTITLE: Uninstalling IrfanView Using PowerShell and winget\nDESCRIPTION: This PowerShell script locates and uninstalls IrfanView64 using Windows Package Manager (winget). It displays user-facing status messages, handles errors by checking the exit code of the uninstall command, and exits with appropriate status codes based on success or failure. The script requires winget to be installed, and it assumes IrfanView is present; errors are thrown if not found or if uninstallation fails. Intended as a one-click solution for system administrators or end users.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-irfanview.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls IrfanView\n.DESCRIPTION\n\tThis PowerShell script uninstalls IrfanView from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-irfanview\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling IrfanView, please wait...\"\n\n\t& winget uninstall \"IrfanView64\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall IrfanView, is it installed?\" }\n\n\t\"IrfanView is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing list-news.ps1 Script Example PowerShell\nDESCRIPTION: This snippet provides an example of how to execute the list-news.ps1 script from the PowerShell command line with default parameters. It shows the typical output format, including the timestamp, headline, and source URL.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-news.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-news.ps1\n \n UTC   HEADLINES         (source: https://www.yahoo.com/news/world)\n ---   ---------\n09:15  Deadly Mediterranean wildfires kill more than 40\n...\n```\n\n----------------------------------------\n\nTITLE: Closing OneCalendar Application in PowerShell\nDESCRIPTION: This script closes the OneCalendar application by terminating its process using TaskKill. If the application isn't running, it uses a text-to-speech notification to inform the user.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-one-calendar.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the OneCalendar app \n.DESCRIPTION\n\tThis PowerShell script closes the OneCalendar application gracefully.\n.EXAMPLE\n\tPS> ./close-one-calendar.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /f /im CalendarApp.Gui.Win10.exe\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, OneCalendar isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Local Computer Processes with PowerShell\nDESCRIPTION: This PowerShell snippet implements a script that retrieves all processes running locally by using Get-Process and formats the output as a table showing the process Id, CPU usage as a percentage string, and the process name. It supports common PowerShell parameters like Verbose and Debug. Error handling is included to catch exceptions, output a descriptive error message with line number, and exit with a non-zero code upon failure. The output is automatically sized for readability.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-processes.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all local computer processes\n.DESCRIPTION\n\tThis PowerShell script lists all local computer processes.\n.EXAMPLE\n\tPS> ./list-processes.ps1\n\n\t   Id  CPU(s) ProcessName\n\t   --  ------ -----------\n\t 9712   0,39% 64DriverLoad\n\t ...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Process | Format-Table -Property Id, @{Label=\"CPU(s)\";Expression={ $_.CPU.ToString(\"N\") + \"%\" };Alignment=\"Right\"}, ProcessName -AutoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Script Usage Example for Plug and Play Device Check - PowerShell\nDESCRIPTION: This snippet demonstrates example usage of the check-pnp-devices.ps1 script in a PowerShell prompt. It shows the expected tabular output listing FriendlyName, Status, and InstanceId for each device. Required: Execution permission for the script and PowerShell's Get-PnpDevice support; input parameters are optional, as the script relies on common parameters only. Output consists of device details filtered to display relevant columns.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-pnp-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-pnp-devices.ps1\n\n\nFriendlyName                 Status  InstanceId\n------------                 ------  ----------\nMicrosoft-Controller         OK      ROOT\\SPACEPORT\\0000\n...\n```\n\n----------------------------------------\n\nTITLE: Open OpenStreetMap Website (PowerShell)\nDESCRIPTION: This script opens the OpenStreetMap website using PowerShell. It calls the `open-default-browser.ps1` script with the OpenStreetMap URL and then exits with a success code (0). The script requires `open-default-browser.ps1` to be in the same directory or accessible via the path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-street-map.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the OpenStreetMap website\n.DESCRIPTION\n\tThis script launches the Web browser with the OpenStreetMap website.\n.EXAMPLE\n\tPS> ./open-street-map\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.openstreetmap.org\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing OpenStreetMap Script (PowerShell)\nDESCRIPTION: This example shows how to execute the open-street-map.ps1 script from the PowerShell console. It demonstrates the simplest usage, requiring no specific parameters to open the OpenStreetMap website in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-street-map.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-street-map\n```\n\n----------------------------------------\n\nTITLE: Building using Gradle (PowerShell)\nDESCRIPTION: This snippet builds a repository using Gradle. It checks for `build.gradle`, then executes `gradle build` and `gradle test`. It requires Gradle to be installed and available in the system's PATH.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/build.gradle\" -pathType leaf) {\n\t\t\"⏳ Building 📂$dirName by using Gradle...\"\n\t\tSet-Location \"$path\"\n\n\t\t& gradle build\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'gradle build' exited with error code $lastExitCode\" }\n\n\t\t& gradle test\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'gradle test' exited with error code $lastExitCode\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Full Script Content: Launching Google Books\nDESCRIPTION: This snippet contains the complete source code of the open-google-books.ps1 PowerShell script. It includes the script's synopsis, description, example, and link. The core functionality involves calling open-default-browser.ps1 with the Google Books URL. The script assumes that open-default-browser.ps1 is located in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-books.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Books\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Books website.\n.EXAMPLE\n\tPS> ./open-google-books\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://books.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing open-fritz-box-website.ps1 Script in PowerShell\nDESCRIPTION: This snippet provides an example of how to execute the 'open-fritz-box-website.ps1' script in PowerShell to open the FRITZ!Box website. It requires the script file to be in the current directory and proper execution permissions set for PowerShell scripts. No input parameters are required for the basic operation, and the output will be the user's default browser opening the router web interface.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fritz-box-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-fritz-box-website\n\n```\n\n----------------------------------------\n\nTITLE: Specifying and Using Common PowerShell Parameters - PowerShell\nDESCRIPTION: This snippet documents how to invoke the open-videos-folders.ps1 script with support for standard PowerShell common parameters, such as Verbose, Debug, ErrorAction, and others. The script accepts these built-in parameters natively to control execution verbosity and error handling. No additional modules are required and inputs may include those common parameters, as detailed in official PowerShell documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-videos-folders.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-videos-folders.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Full script to check drive space in PowerShell\nDESCRIPTION: This PowerShell script, check-drive-space.ps1, checks the free space on a given drive. It takes the drive name and a minimum free space level as parameters, defaulting to 10GB if not provided. The script retrieves drive details, calculates free and used space, and outputs a message indicating the drive's status. It includes error handling for cases like invalid drive names.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-drive-space.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the drive space \n.DESCRIPTION\n\tThis PowerShell script checks the given drive for free space left (10 GB by default).\n.PARAMETER driveName\n\tSpecifies the drive name to check (e.g. \"C\")\n.PARAMETER minLevel\n\tSpecifies the minimum level in bytes (10GB by default)\n.EXAMPLE\n\tPS> ./check-drive-space.ps1 C\n\t✅ Drive C: uses 56% of 1TB - 442GB free\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$driveName = \"\", [int64]$minLevel = 10 * 1000 * 1000) # GB\n\nfunction Bytes2String { param([int64]$bytes)\n        if ($bytes -lt 1000) { return \"$bytes bytes\" }\n        $bytes /= 1000\n        if ($bytes -lt 1000) { return \"$($bytes)KB\" }\n        $bytes /= 1000\n        if ($bytes -lt 1000) { return \"$($bytes)MB\" }\n        $bytes /= 1000\n        if ($bytes -lt 1000) { return \"$($bytes)GB\" }\n        $bytes /= 1000\n        if ($bytes -lt 1000) { return \"$($bytes)TB\" }\n        $bytes /= 1000\n        return \"$($bytes)PB\"\n}\n\ntry {\n\tif ($driveName -eq \"\" ) { $driveName = Read-Host \"Enter the drive name to check\" }\n\n\t$details = (Get-PSDrive $driveName)\n        if (-not $IsLinux) { $driveName = $driveName + \":\" }\n\t[int64]$free = $details.Free\n        [int64]$used = $details.Used\n        [int64]$total = ($used + $free)\n\n\tif ($total -eq 0) {\n\t\tWrite-Host \"✅ Drive $driveName is empty\"\n        } elseif ($free -eq 0) {\n                Write-Host \"⚠️ Drive $driveName with $(Bytes2String $total) is full\"\n        } elseif ($free -lt $minLevel) {\n                Write-Host \"⚠️ Drive $driveName with $(Bytes2String $total) is nearly full, $(Bytes2String $free) free\"\n        } else {\n        \t[int64]$percent = ($used * 100) / $total\n                Write-Host \"✅ Drive $driveName uses $percent% of $(Bytes2String $total) - $(Bytes2String $free) free\"\n        }\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing the print-image.ps1 Script (PowerShell)\nDESCRIPTION: Demonstrates how to execute the print-image.ps1 script from the PowerShell console, providing the image file 'dog.jpg' as an argument. This will trigger the printer dialogue for the specified image.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/print-image.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./print-image dog.jpg\n```\n\n----------------------------------------\n\nTITLE: Describing Common Parameters for Netflix Website Script (PowerShell)\nDESCRIPTION: This snippet documents the parameter syntax for the open-netflix-website.ps1 script, indicating that it accepts standard PowerShell common parameters for controlling output and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-netflix-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-netflix-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Calculating Elapsed Time and Output\nDESCRIPTION: This snippet calculates the elapsed time and outputs a summary of the repository check. It uses a `stopWatch` to measure the execution time and formats the output to include the repository name and the time taken. It also exits the script with an exit code indicating success (0) or failure (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$repoDirName = (Get-Item \"$FullPath\").Name\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Checked 📂$repoDirName repo in $($elapsed)s.\"\n\texit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the Script - PowerShell\nDESCRIPTION: This example demonstrates how to execute the `show-edge-manual.ps1` PowerShell script.  Running the script opens the Microsoft Edge manual in the default web browser.  The script is executed from the PowerShell prompt using the relative path `./show-edge-manual`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-edge-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-edge-manual\n```\n\n----------------------------------------\n\nTITLE: Implementing Dutch Text-to-Speech in PowerShell\nDESCRIPTION: This script implements Text-to-Speech functionality for Dutch language in PowerShell. It defines an optional 'text' parameter, prompts for input if none is given, instantiates the SAPI.SPVoice COM object, iterates through available system voices to find one described as 'Dutch', sets it as the active voice, and speaks the provided text. Basic error handling is included for missing Dutch voices or other exceptions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-dutch.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Dutch\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Dutch text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Dutch text to speak\n.EXAMPLE\n\tPS> ./speak-dutch.ps1 Hallo\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Dutch text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Dutch*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Dutch text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Script Example in PowerShell\nDESCRIPTION: This example demonstrates the usage pattern for running the start-ipfs-server.ps1 script from a PowerShell prompt. It requires the script to be executable and available in the current directory. No arguments are needed unless customizing behavior with common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/start-ipfs-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./start-ipfs-server\n```\n\n----------------------------------------\n\nTITLE: PowerShell Operators\nDESCRIPTION: Demonstrates various operators in PowerShell, including assignment, arithmetic, comparison, string comparison, and type checking. It also illustrates the use of ternary operators and array membership checks.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n$a = 2                                                    # Basic variable assignment operator\n$a += 1                                                   # Incremental assignment operator\n$a -= 1                                                   # Decrement assignment operator\n\n$a -eq 0                                                  # Equality comparison operator\n$a -ne 5                                                  # Not-equal comparison operator\n$a -gt 2                                                  # Greater than comparison operator\n$a -lt 3                                                  # Less than comparison operator\n\n$FirstName = 'Trevor'\n$FirstName -like 'T*'                                     # Perform string comparison using the -like operator, which supports the wildcard (*) character. Returns $true\n\n$BaconIsYummy = $true\n$FoodToEat = $BaconIsYummy ? 'bacon' : 'beets'            # Sets the $FoodToEat variable to 'bacon' using the ternary operator\n\n'Celery' -in @('Bacon', 'Sausage', 'Steak', 'Chicken')    # Returns boolean value indicating if left-hand operand exists in right-hand array\n'Celery' -notin @('Bacon', 'Sausage', 'Steak')            # Returns $true, because Celery is not part of the right-hand list\n\n5 -is [string]                                            # Is the number 5 a string value? No. Returns $false.\n5 -is [int32]                                             # Is the number 5 a 32-bit integer? Yes. Returns $true.\n5 -is [int64]                                             # Is the number 5 a 64-bit integer? No. Returns $false.\n'Trevor' -is [int64]                                      # Is 'Trevor' a 64-bit integer? No. Returns $false.\n'Trevor' -isnot [string]                                  # Is 'Trevor' NOT a string? No. Returns $false.\n'Trevor' -is [string]                                     # Is 'Trevor' a string? Yes. Returns $true.\n$true -is [bool]                                          # Is $true a boolean value? Yes. Returns $true.\n$false -is [bool]                                         # Is $false a boolean value? Yes. Returns $true.\n5 -is [bool]                                              # Is the number 5 a boolean value? No. Returns $false.\n```\n\n----------------------------------------\n\nTITLE: Complete PowerShell Implementation of speak-epub.ps1\nDESCRIPTION: The full implementation of the speak-epub script that includes functions for text-to-speech conversion, EPUB extraction, parsing, and reading. The script unzips the EPUB file, navigates its XML structure, and reads the content using Windows SAPI voice.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-epub.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks an Epub file by text-to-speech (TTS).\n.DESCRIPTION\n\tThis PowerShell script speaks the content of the given Epub file by text-to-speech (TTS).\n.PARAMETER Filename\n\tSpecifies the path to the Epub file\n.EXAMPLE\n\tPS> ./speak-epub C:\\MyBook.epub\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Filename = \"\")\n\nfunction Speak { param([string]$Text)\n\twrite-output \"$Text\"\n\t$Voice = new-object -ComObject SAPI.SPVoice\n\t$Voices = $Voice.GetVoices()\n\tforeach ($OtherVoice in $Voices) {\n\t\t$Description = $OtherVoice.GetDescription()\n\t\tif ($Description -like \"*- English (United States)\") {\n\t\t\t$Voice.Voice = $OtherVoice\n\t\t\tbreak\n\t\t}\n\t}\n\t[void]$Voice.Speak($Text)\n}\n \nfunction ReadBook() { param([string]$book, [string]$bookPath, [int]$lineNumber = 0)\n\t$data = Get-Content $book\n\tfor([int]$i=$lineNumber;$i -lt $data.Count;$i++) {\n\t\tSet-Content -Path $bookPath\"\\progress.txt\" -Value ($book+\",\"+$i)\n\t\t$line = $data[$i]\n\t\tif ($line.Contains(\"<title>\")) {\n\t\t\t$line = $line -Replace \"<.+?>\",\"\"\n\t\t \tSpeak $line\n\t\t}\n\t\tif ($line.contains(\"<p\")) {\n\t\t\t$line = $line -Replace \"<.+?>\",\"\"\n\t\t\tSpeak $line\n\t\t}\n\t }\n\t Set-Content -Path $bookPath\"\\progress.txt\" -Value (\"\")\n}\n\nfunction UnzipFile() { param([string]$file, [string]$dest)\n\t$shell = new-object -com shell.application\n\t$zip = $shell.NameSpace($file)\n\tforeach($item in $zip.items()) {\n\t\t$shell.Namespace($dest).copyhere($item)\n\t}\n}\n \nif ($Filename -eq \"\") {\n\t$Filename = Read-Host \"Enter path to .epub file\"\n}\nwrite-output \"Reading $Filename ...\"\n$file = get-item $Filename\nif (-not(Test-Path $file.DirectoryName+\"\\\"$file.Name+\".zip\")) {\n\t$zipFile = $file.DirectoryName+\"\\\"$file.Name+\".zip\"\n\t$file.CopyTo($zipFile)\n}\n\n$destination = $file.DirectoryName+\"\\\"$file.Name.Replace($file.Extension,\"\")\nif (-not(Test-Path $destination)) {\n\tmd $destination\n\tUnzipFile -file $zipFile -dest $destination\n}\n \n[xml]$container = Get-Content $destination\"\\META-INF\\container.xml\"\n$contentFilePath = $container.container.rootfiles.rootfile.\"full-path\"\n[xml]$content = Get-Content $destination\"\\\"$contentFilePath\n$tmpPath = Get-Item $destination\"\\\"$contentFilePath\n$bookPath = $tmpPath.DirectoryName\n$progress = $null\n \nforeach($item in $content.package.manifest.Item) {\n\tif ($item.\"media-type\" -eq \"application/xhtml+xml\") {\n\t\tif (Test-Path $bookPath+\"\\progress.txt\") {\n\t\t\t$progress = Get-Content $bookPath\"\\progress.txt\"\n\t\t\t$progress = $progress.Split(\",\")\n\t\t}\n\t\t$bookFileName = $item.href\n\t\tif ($progress.Count -eq 2) {\n\t\t\tif ($progress[0] -eq $bookPath+\"\\\"$bookFileName) {\n\t\t\t\tReadBook -book $bookPath\"\\\"$bookFileName -bookPath $bookPath -lineNumber $progress[1]\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tReadBook -book $bookPath\"\\\"$bookFileName -bookPath $bookPath\n\t\t}\n\t}\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Using check-dns.ps1 with Common Parameters (PowerShell)\nDESCRIPTION: This snippet shows the basic syntax for running the check-dns.ps1 script and indicates that it supports standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-dns.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-dns.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft OneDrive via PowerShell Script\nDESCRIPTION: This PowerShell snippet provides the invocation syntax for the open-one-drive.ps1 script. It lists supported common parameters such as Verbose, Debug, ErrorAction, and others, enabling advanced control over script execution. No direct business logic is shown; the code outlines usage, expects the script and PowerShell environment to be available, and supports the standard input/output conventions of PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-one-drive.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-one-drive.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for write-uppercase.ps1 (PowerShell)\nDESCRIPTION: Specifies the parameters accepted by the `write-uppercase.ps1` script. The `-text` parameter is optional and accepts a string input. If not provided, the script prompts the user. The script also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-uppercase.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-uppercase.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the text to write (ask user by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Determining and Speaking Week Number with PowerShell\nDESCRIPTION: This PowerShell script calculates the current week number using `Get-Date -UFormat %V`. It then calls the `speak-english.ps1` script (assumed to exist in the same directory) to speak the result using text-to-speech.  The script utilizes a `try-catch` block for error handling and exits with a success or failure code. Dependencies include the `speak-english.ps1` script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-week.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDetermines the week number \n.DESCRIPTION\n\tThis PowerShell script determines and speaks the current week number by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-week.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$WeekNo = (Get-Date -UFormat %V)\n\t& \"$PSScriptRoot/speak-english.ps1\" \"It's week #$WeekNo.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Script Parameters Documentation - PowerShell\nDESCRIPTION: Documents the standard command-line parameters supported by the PowerShell script, specifically mentioning the inclusion of Common Parameters which provide built-in functionality for debugging, error handling, verbose output, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-vlc.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-vlc.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Basic Twitter Uninstallation Example in PowerShell\nDESCRIPTION: Demonstrates the basic usage of the script to uninstall Twitter without any additional parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-twitter.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-twitter\n```\n\n----------------------------------------\n\nTITLE: Running the close-edge-browser.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates the basic execution of the `close-edge-browser.ps1` script from a PowerShell prompt. Running this command without any additional parameters will initiate the process to gracefully close all running instances of the Microsoft Edge browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-edge-browser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-edge-browser\n```\n\n----------------------------------------\n\nTITLE: Using the list-defender-settings.ps1 script with parameters\nDESCRIPTION: Shows the command syntax for running the list-defender-settings.ps1 script, including available common parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-defender-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-defender-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Executing GDB Manual Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to invoke the show-gdb-manual.ps1 script from a PowerShell prompt to open the GDB manual. No additional parameters are required for typical usage. The output is the default web browser opening to the manual; there is no return value in the shell unless a common parameter is specified.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-gdb-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-gdb-manual\n\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of convert-md2html.ps1 Script\nDESCRIPTION: Complete PowerShell script implementation for converting Markdown files to HTML. The script checks for Pandoc availability, processes all files matching the provided pattern, and converts each to HTML using a custom template. It includes error handling and execution time tracking.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-md2html.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts Markdown file(s) into HTML \n.DESCRIPTION\n\tThis PowerShell script converts Markdown file(s) into HTML.\n.PARAMETER FilePattern\n\tSpecifies the file pattern to the Markdown file(s)\n.EXAMPLE\n\tPS> ./convert-md2html.ps1 *.md\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$FilePattern = \"\")\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($FilePattern -eq \"\" ) { $FilePattern = Read-Host \"Enter the file pattern to the Markdown file(s)\" }\n\n\tWrite-Host \"⏳ Searching for pandoc...\" \n\t$null = (pandoc --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'pandoc' - make sure it's installed and available\" }\n\n\tWrite-Host \"⏳ Converting...\"\n\tgci -r -i $FilePattern | foreach {\n\t\t$TargetPath = $_.directoryname + \"\\\" + $_.basename + \".html\"\n\t\tpandoc --standalone --template \"$PSScriptRoot/../data/templates/template.html\" -s $_.name -o $TargetPath\n\t}\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ converted in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Creating Windows VM with PowerShell\nDESCRIPTION: This PowerShell script creates a new Windows virtual machine. It first defines a hash table `$VM` that configures the VM's properties such as name, memory, storage, and boot settings.  Then, it utilizes the `New-VM` cmdlet to create the VM based on the specified parameters. It configures the processor count and adds a DVD drive, and mounts the Windows installation ISO. The script requires Hyper-V role enabled and appropriate ISO path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-windows-vm.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n```powershell\n$VMName = \"windows\"\n\n $VM = @{\n     Name = $VMName\n     MemoryStartupBytes = 4GB\n     Generation = 2\n     NewVHDPath = \"C:\\VirtualMachines\\$VMName\\Virtual Hard Disks\\$VMName.vhdx\"\n     NewVHDSizeBytes = 50GB\n     BootDevice = \"VHD\"\n     Path = \"C:\\VirtualMachines\\\"\n     SwitchName = 'vSwitch'\n }\n\n New-VM @VM\n Set-VMProcessor $VMName -count 1\n Add-VMDvdDrive $VMName\n Set-VMDvdDrive $VMName -Path \"C:\\iso\\Win10_21H1_English_x64.iso\"\nexit 0 # success\n```\n```\n\n----------------------------------------\n\nTITLE: Executing the open-twitter.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates how to run the `open-twitter.ps1` script from the PowerShell command line using its relative path. Executing this command will launch the default web browser and navigate to the Twitter website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-twitter.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-twitter\n```\n\n----------------------------------------\n\nTITLE: Listing Parameters for Cow Sound Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to invoke 'play-cow-sound.ps1' and lists the common PowerShell parameters available for script execution, such as Verbose, Debug, ErrorAction, WarningAction, and various output-related parameters. These parameters allow users to modify the script's runtime behavior by controlling verbosity, error handling, and output characteristics. No mandatory or custom parameters exist for this script; only built-in PowerShell common parameters are supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-cow-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/play-cow-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Full Script: install-rufus.ps1 (PowerShell)\nDESCRIPTION: The complete PowerShell script for installing Rufus. It uses 'winget install' targeting the Microsoft Store (`--source msstore`), automatically accepts necessary agreements (`--accept-package-agreements`, `--accept-source-agreements`), includes basic error checking by verifying `$lastExitCode` after the winget command, and provides user feedback messages. The script uses a try-catch block for error handling and exits with code 0 on success or 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-rufus.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Rufus\n.DESCRIPTION\n\tThis PowerShell script installs Rufus from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-rufus.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Rufus, please wait...\"\n\n\t& winget install \"Rufus\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Rufus installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Speak Text using SAPI.SPVoice in PowerShell\nDESCRIPTION: This PowerShell script reads text using the default text-to-speech (TTS) voice.  It takes a string parameter (`-text`) which defaults to an empty string.  If no text is provided, it prompts the user to enter text.  It then creates a `SAPI.SPVoice` COM object, calls the `Speak()` method with the input text, and handles exceptions with error output. The script exits with code 0 on success and 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-text.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text by the default text-to-speech voice\n.DESCRIPTION\n\tThis PowerShell script speaks the given text by the default text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the text to read\n.EXAMPLE\n\tPS> ./speak-text.ps1 Hi\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the text to speak\" }\n\n\t$Voice = new-object -ComObject SAPI.SPVoice\n\t[void]$Voice.Speak($text)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a basic example of how to execute the play-tetris-game.ps1 script from the PowerShell console. It shows the command PS> ./play-tetris-game which runs the script located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tetris-game.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-tetris-game\n\n```\n\n----------------------------------------\n\nTITLE: Executing Cryptocurrency Rate Listing with Error Handling in PowerShell\nDESCRIPTION: The script invokes the ListCryptoRates function, formats the collected data into a table displaying cryptocurrency symbols and their exchange rates in USD, EUR, RUB, and CNY, and writes an informational notice about source reliability and risks. It uses a try-catch block to handle exceptions cleanly by outputting an error message with script line information and exits with a status code indicating success or failure. It depends on PowerShell's built-in error handling and formatting cmdlets.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-crypto-rates.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ntry {\n\tListCryptoRates | Format-Table -property @{e='CRYPTOCURRENCY';width=28},USD,EUR,RUB,CNY\n\tWrite-Host \"(by cryptocompare.com • Crypto is volatile and unregulated • Capital at risk • Taxes may apply)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition in PowerShell\nDESCRIPTION: Defines the mandatory parameters for the PowerShell script: `$server`, `$database`, `$dbuser`, and `$dbpass`.  These parameters are used to establish a connection to the MySQL database.  They are marked as mandatory, ensuring the script receives the necessary information for connecting to the MySQL server.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-mysql-tables.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam(\n[Parameter(Mandatory=$true)]$server,\n[Parameter(Mandatory=$true)]$database,\n[Parameter(Mandatory=$true)]$dbuser,\n[Parameter(Mandatory=$true)]$dbpass\n)\n```\n\n----------------------------------------\n\nTITLE: Launch Browser: PowerShell Script for Traffic\nDESCRIPTION: This PowerShell script launches the default web browser to display the current traffic information on MSN using a specific URL. It relies on the `open-default-browser.ps1` script, expected to be in the same directory, to perform the browser opening action. The script exits with a success code upon completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-traffic.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tShows the current traffic \n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with MSN showing the current traffic.\n.EXAMPLE\n\tPS> ./show-traffic\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.msn.com/en-us/traffic?lvl=11&intent=roadClosures\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Define Common Parameters for PowerShell Script\nDESCRIPTION: This snippet defines the common parameters that are supported by the PowerShell script. These parameters are Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters are automatically available to all PowerShell scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-automatic-variables.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Common Parameters - PowerShell\nDESCRIPTION: Details the standard PowerShell common parameters supported by the script, including Verbose, Debug, ErrorAction, etc. These parameters provide control over script execution and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-trash.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of remember.ps1\nDESCRIPTION: Demonstrates how to use the remember.ps1 script to save a simple reminder. The example shows saving 'Buy apples' and the confirmation message that displays the file path and execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remember.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./remember.ps1 \"Buy apples\"\n✅ Saved to /home/Markus/Remember.csv in 0s.\n```\n\n----------------------------------------\n\nTITLE: Executing eBay Website Launcher Script in PowerShell\nDESCRIPTION: This example illustrates how to run the open-ebay-website.ps1 script from the PowerShell console. No input arguments are required, and executing the script will immediately open the eBay homepage in the default web browser. Common parameters may be appended as needed for advanced usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ebay-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-ebay-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open GitHub Website\nDESCRIPTION: This script launches the default web browser at the GitHub website URL. It supports common PowerShell parameters for enhanced control such as Verbose and Debug. Dependencies are minimal, primarily requiring PowerShell environment; no additional modules are necessary. The script accepts optional parameters for verbosity and error handling, and outputs nothing explicitly, just opening the webpage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-github-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-github-website.ps1 - Opens the GitHub website\n\nThis script launches the Web browser with the GitHub website.\n\n## Parameters\n```powershell\nopen-github-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-github-website\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-github-website.ps1*\n```\n\n----------------------------------------\n\nTITLE: Common Parameters Support in list-powershell-profiles.ps1 (PowerShell)\nDESCRIPTION: This section declares that the 'list-powershell-profiles.ps1' script accepts the standard PowerShell common parameters. These parameters (like Verbose, Debug, ErrorAction, etc.) provide consistent control over script execution behavior across different cmdlets and scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-powershell-profiles.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example of open-ipfs-website.ps1 Usage (PowerShell)\nDESCRIPTION: Demonstrates how to execute the open-ipfs-website.ps1 PowerShell script. It shows the command needed to run the script from the PowerShell console. The script is expected to open the IPFS website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ipfs-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-ipfs-website\n```\n\n----------------------------------------\n\nTITLE: Running list-ram.ps1 script with parameters\nDESCRIPTION: Shows the command syntax for running the list-ram.ps1 script, which supports common PowerShell parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ram.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-ram.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing show-euro-rate.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the `show-euro-rate.ps1` script from a PowerShell prompt. Running this command initiates the script, which will then launch the default web browser to display the current Euro exchange rate. No arguments are required for basic execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-euro-rate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-euro-rate\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Microsoft Teams Application\nDESCRIPTION: This script launches the Microsoft Teams application by invoking the Start-Process command with 'msteams:'. It includes a try-catch block to handle potential errors during process initiation and outputs error messages with script line references if failure occurs. Dependencies include PowerShell with access to start processes, and the script accepts common PowerShell parameters for debugging and output customization.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Microsoft Teams app\n.DESCRIPTION\n\tThis script launches the Microsoft Teams application.\n.EXAMPLE\n\tPS> ./open-microsoft-teams\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process msteams:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Close Mozilla Firefox Browser\nDESCRIPTION: This script gracefully terminates the Mozilla Firefox web browser process using PowerShell. It accepts common PowerShell parameters such as Verbose, Debug, and ErrorAction for enhanced control and debugging. The script is intended for automation tasks that require closing Firefox programmatically.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-mozilla-firefox.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## close-mozilla-firefox.ps1 - Closes Mozilla's Firefox Web browser\n\nThis script closes Mozilla's Firefox Web browser gracefully.\n\n## Parameters\n```powershell\n/home/markus/Repos/PowerShell/Scripts/close-mozilla-firefox.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./close-mozilla-firefox\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of close-mozilla-firefox.ps1*\n\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory to User Home - PowerShell\nDESCRIPTION: This snippet contains the core logic of the `cd-users.ps1` script. It attempts to resolve the user's home directory path using `Resolve-Path \"~/..\"`, verifies its existence using `Test-Path`, and sets the current location to that path using `Set-Location`. It outputs the resolved path and includes a basic try-catch block for error handling, reporting the line number and error message upon failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-users.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the users directory\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the users directory.\n.EXAMPLE\n\tPS> ./cd-users\n\t📂C:\\Users\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"~/..\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Users directory at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of remember.ps1\nDESCRIPTION: The full script implementation that handles saving text to a CSV file. It creates the CSV if needed, timestamps entries, and provides error handling. The script prompts for input if no text is provided and returns the file path and execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remember.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRemembers a text \n.DESCRIPTION\n\tThis PowerShell script saves the given text to 'Remember.csv' in your home folder.\n.PARAMETER text1\n\tSpecifies the text to memorize\n.EXAMPLE\n\tPS> ./remember.ps1 \"Buy apples\"\n\t✅ Saved to /home/Markus/Remember.csv in 0s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text1 = \"\", [string]$text2 = \"\", [string]$text3 = \"\")\n\ntry {\n\tif ($text1 -eq \"\") { $text1 = Read-Host \"Enter what needs to be remembered\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t[string]$timestampString = Get-Date -UFormat %s\n\t$timestampString = $timestampString -replace ',','.'\n\t[int64]$unixTimestamp = $timestampString\n\n\t$path = \"~/Remember.csv\"\n\n\tif (-not(Test-Path \"$path\" -pathType leaf)) {\n\t\tWrite-Output \"TIMESTAMP,TEXT\" > $path\n\t}\n\tWrite-Output \"$($unixTimestamp),$text1 $text2 $text3\" >> $path\n\t$path = Resolve-Path $path\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Saved to $path in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Converting CSV to Text File in PowerShell\nDESCRIPTION: This PowerShell script converts a CSV file into a text file format. It takes a file path as a parameter, reads the CSV data using Import-CSV, and iterates through each row to output a formatted string representing the CSV data.  Error handling is included to catch potential issues during the process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-csv2txt.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts a .CSV file into a text file\n.DESCRIPTION\n\tThis PowerShell script converts a .CSV file into a text file and prints it.\n.PARAMETER Path\n\tSpecifies the path to the .CSV file\n.EXAMPLE\n\tPS> ./convert-csv2txt salaries.csv\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Path = \"\")\n\ntry {\n\tif ($Path -eq \"\" ) { $Path = read-host \"Enter path to CSV file\" }\n\n\t$Table = Import-CSV -path \"$Path\" -header A,B,C,D,E,F,G,H\n\n\tforeach($Row in $Table) {\n\t\twrite-output \"* $($Row.A) $($Row.B) $($Row.C) $($Row.D) $($Row.E) $($Row.F) $($Row.G) $($Row.H)\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking Lion Sound Playback Script in PowerShell\nDESCRIPTION: This example demonstrates how to run the play-lion-sound.ps1 script from a PowerShell prompt. By executing './play-lion-sound', the script will play a lion sound. This assumes correct path resolution and that all script dependencies, such as the play-mp3.ps1 helper, are present in the environment. The snippet is intended for end-users wishing to activate audio playback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-lion-sound.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-lion-sound\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for close-mozilla-thunderbird.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the parameter signature for the close-mozilla-thunderbird.ps1 script. It indicates that the script primarily utilizes the standard PowerShell Common Parameters (Verbose, Debug, ErrorAction, etc.) to control its execution behavior, without defining custom script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-mozilla-thunderbird.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/close-mozilla-thunderbird.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Declaring Script Parameters in PowerShell\nDESCRIPTION: This snippet shows how to document and declare accepted command-line parameters for the play-lion-sound.ps1 script in PowerShell. It highlights support for PowerShell common parameters such as Verbose, Debug, ErrorAction, and others. These parameters allow users to control logging, error handling, and output buffering when executing the script. This enhances usability and consistency in automation contexts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-lion-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/play-lion-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching G: Drive in File Explorer with PowerShell Script\nDESCRIPTION: This PowerShell script invokes another script, 'open-file-explorer.ps1', passing 'G:' as the argument to open the G: drive folder in Windows File Explorer. It supports standard PowerShell common parameters (Verbose, Debug, ErrorAction, etc.), but requires 'open-file-explorer.ps1' to be present in the same directory. The script outputs nothing by default and returns exit code 0 on success; input consists solely of the optional common parameters, and there are no outputs other than opening the File Explorer window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-g-drive.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the G: drive folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the G: drive folder.\n.EXAMPLE\n\tPS> ./open-g-drive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-file-explorer.ps1\" \"G:\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters - PowerShell\nDESCRIPTION: This snippet defines the parameters for the PowerShell script. These parameters control the installation directory, the Jenkins URL, and the secret key. The script accepts these parameters via the command line or uses default values. The parameters are used to configure the agent's connection to the Jenkins controller.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-jenkins-agent.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$installDir = \"/opt/jenkins-agent\", [string]$jenkinsURL = \"http://tux:8080\", [string]$secretKey = \"\")\n```\n\n----------------------------------------\n\nTITLE: Executing Script PowerShell\nDESCRIPTION: This example demonstrates the basic usage of the open-m-drive.ps1 script from a PowerShell prompt. It shows how to execute the script using a relative path (./) without any additional arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-m-drive.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-m-drive\n```\n\n----------------------------------------\n\nTITLE: Defining and Documenting Parameters for PowerShell Script in PowerShell\nDESCRIPTION: This snippet shows the syntax and available parameters for the write-green.ps1 PowerShell script, including the '-text' parameter and common PowerShell script parameters. It serves as user-facing documentation to clarify usage, accepted arguments, and input behavior. The snippet does not execute functionality but provides essential context for correct invocation in scripts or command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-green.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/write-green.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the text to write\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters - PowerShell\nDESCRIPTION: This snippet outlines the parameters accepted by the script. It shows the basic syntax and indicates that the script supports standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bing-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-bing-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Handling Game Over and Exit in PowerShell\nDESCRIPTION: This code segment handles the game over scenario. It writes a \"GAME OVER\" message with a red background to the console, beeps, and then exits the script with a success code. This indicates that the snake has either collided with itself or a wall. It doesn't have dependencies beyond the PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-snake.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \" \"\nWrite-Host \"-----------------------------------\" -backgroundColor red\nWrite-Host \"| !!!   G A M E    O V E R    !!! |\" -backgroundColor red\nWrite-Host \"-----------------------------------\" -backgroundColor red\n[System.Console]::Beep(500,300)\nStart-Sleep -milliseconds 300\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the open-tik-tok-website.ps1 Script\nDESCRIPTION: This example demonstrates the basic usage of the `open-tik-tok-website.ps1` script by executing it directly from the PowerShell prompt (PS>). Running this command will launch the default web browser and navigate to the TikTok website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-tik-tok-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-tik-tok-website\n```\n\n----------------------------------------\n\nTITLE: Parameters Documentation\nDESCRIPTION: This section describes the parameters that the open-cnn-website.ps1 script accepts. In addition to the common PowerShell parameters, the script itself does not define any specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cnn-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-cnn-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-tunis-city.ps1 Script\nDESCRIPTION: Defines the parameters accepted by the show-tunis-city.ps1 PowerShell script. The script only supports the standard PowerShell common parameters (like Verbose, Debug, ErrorAction) for controlling script execution and handling output. No script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-tunis-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-tunis-city.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example of Running open-slash-dot-website.ps1\nDESCRIPTION: Demonstrates how to execute the open-slash-dot-website.ps1 script from the PowerShell command line. This example shows the basic usage without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-slash-dot-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-slash-dot-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage Example\nDESCRIPTION: This snippet demonstrates how to run the list-timezone.ps1 script from PowerShell and shows a sample of the expected output. The output includes the time zone ID, display name, and other related information.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-timezone.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-timezone\n\n\n\nId                         : Europe/Berlin\nDisplayName                : (UTC+01:00) Central European Standard Time\n...\n```\n\n----------------------------------------\n\nTITLE: Executing Bitbucket Website Script (PowerShell)\nDESCRIPTION: This example demonstrates how to run the `open-bit-bucket-website.ps1` script from a PowerShell console. It shows the basic command `./open-bit-bucket-website` without any specific parameters, indicating a default execution or simple launch.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bit-bucket-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-bit-bucket-website\n\n```\n\n----------------------------------------\n\nTITLE: Complete PowerShell Script for Uninstalling Spotify\nDESCRIPTION: The complete script that uninstalls Spotify using the winget package manager. It includes error handling to detect if the uninstallation failed and provides user feedback throughout the process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-spotify.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Spotify\n.DESCRIPTION\n\tThis PowerShell script uninstalls Spotify from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-spotify\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Spotify, please wait...\"\n\n\t& winget uninstall \"Spotify - Music and Podcasts\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Spotify, is it installed?\" }\n\n\t\"Spotify is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage and Common Parameters Documentation\nDESCRIPTION: Documentation snippet describing the usage of the install-git-for-windows.ps1 script including supported common PowerShell parameters like Verbose, Debug, and ErrorAction. It explains how to invoke the script with examples, and provides a link to the source repository maintained by the author.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-git-for-windows.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-git-for-windows.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Available Console Colors in PowerShell\nDESCRIPTION: This PowerShell script retrieves all available console colors using `[Enum]::GetValues([ConsoleColor])`. It then iterates through each color, formats the color name for consistent spacing, and uses `Write-Host` with `-ForegroundColor` and `-BackgroundColor` parameters to display the color name alongside visual examples. Basic error handling is included using a try/catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-console-colors.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all console colors\n.DESCRIPTION\n\tThis PowerShell script lists all available console colors.\n.EXAMPLE\n\tPS> ./list-console-colors.ps1\n\n\tColor     As Foreground     As Background\n\t-----     -------------     -------------\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Colors = [Enum]::GetValues([ConsoleColor])\n\t\"\"\n\t\"Color          As Foreground  As Background\"\n\t\"-----          -------------  -------------\"\n\tforeach($Color in $Colors) {\n\t\t$Color = \"$Color              \"\n\t\t$Color = $Color.substring(0, 15)\n\t\twrite-host -noNewline \"$Color\"\n\t\twrite-host -noNewline -foregroundcolor $Color \"$Color\"\n\t\twrite-host -noNewline -backgroundcolor $Color \"$Color\"\n\t\twrite-host \"\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VLC Player with Winget in PowerShell\nDESCRIPTION: This PowerShell script attempts to install the VLC media player using the `winget` package manager. It includes error handling for the installation process by checking the last exit code and measures the elapsed time using a stopwatch. The script uses a `try...catch` block to manage potential issues and exits with status code 0 for success or 1 for failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vlc.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls VLC\n.DESCRIPTION\n\tThis PowerShell script installs the VLC media player.\n.EXAMPLE\n\tPS> ./install-vlc.ps1\n\t⏳ Installing VLC media player...\n\t✅ Installation of VLC media player took 25 sec\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Installing VLC media player...\"\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t& winget install --id XPDM1ZW6815MQM --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"Can't install VLC media player, is it already installed?\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ Installation of VLC media player took $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating NTFS Junctions with PowerShell Script\nDESCRIPTION: This PowerShell script defines parameters for the new junction and its target. If parameters are not provided, it prompts the user for input. It uses the `New-Item` cmdlet with `-itemType Junction` to create the junction. Includes basic error handling for the `New-Item` command.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-junction.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreate a junction\n.DESCRIPTION\n\tThis PowerShell script creates a new junction, linking to a target.\n.PARAMETER junction\n\tSpecifies the file path to the new junction\n.PARAMETER target\n\tSpecifies the file path to the target\n.EXAMPLE\n\tPS> ./new-junction.ps1 D:\\Win10 C:\\Windows\n\t✅ Created new junction 'D:\\Windows' linking to: C:\\Windows\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$junction = \"\", [string]$target = \"\")\n\ntry {\n\tif ($junction -eq \"\" ) { $symlink = Read-Host \"Enter new junction filename\" }\n\tif ($target -eq \"\" ) { $target = Read-Host \"Enter path to target\" }\n\n\tNew-Item -path \"$symlink\" -itemType Junction -value \"$target\"\n\tif ($lastExitCode -ne \"0\") { throw \"Command 'New-Item' has failed\" }\n\n\t\"✅ Created new junction '$symlink' linking to: $target\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Main PowerShell Script to Query Hardware Components\nDESCRIPTION: This PowerShell script serves as the entry point that summarizes hardware details by invoking individual scripts for CPU, RAM, GPU, motherboard, BIOS, smart devices, power, and drives. It outputs a header and facilitates modular hardware querying, depending on other scripts located in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-hardware.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the hardware\n.DESCRIPTION\n\tThis PowerShell script queries the hardware details of the local computer and prints it.\n.EXAMPLE\n\tPS> ./check-hardware.ps1\n  \n   === H A R D W A R E ===\n\t✅ Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz (CPU0, 2701MHz, socket U3E1, 30.1°C)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nWrite-Host \"`n   === H A R D W A R E ===\" -foregroundColor green\n& \"$PSScriptRoot/check-cpu.ps1\"\n& \"$PSScriptRoot/check-ram.ps1\"\n& \"$PSScriptRoot/check-gpu.ps1\"\n& \"$PSScriptRoot/check-motherboard.ps1\"\n& \"$PSScriptRoot/check-bios.ps1\"\n& \"$PSScriptRoot/check-smart-devices.ps1\"\n& \"$PSScriptRoot/check-power.ps1\"\n& \"$PSScriptRoot/check-drives.ps1\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Generating and Displaying Sine Curves (PowerShell)\nDESCRIPTION: This PowerShell script snippet implements the core logic to generate and display sine curves in the console. It iterates from 0 to 1000, calculates scaled sine values using `[math]::sin`, dynamically constructs strings with spaces and asterisks based on the value's sign and magnitude, writes each line to the host using `Write-Host`, and pauses for 50 milliseconds between lines to create a visual animation effect.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-sine-curves.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Write sine curves\n.DESCRIPTION\n        This PowerShell script writes sine curves.\n.EXAMPLE\n        PS> ./write-sine-curves\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\n0..1000 | foreach {\n\t$Value = [int](40 * [math]::sin($_ / 10))\n\tif ($Value -gt 0) {\n\t\t$Line = \" \"*60+\"*\"*$value\n\t} else {\n\t\t$Line = \" \"*(60-(-1*$value))+\"*\"*($value*-1)\n\t}\n\tWrite-Host $Line\n\tStart-Sleep -milliseconds 50\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Manager Closure in PowerShell\nDESCRIPTION: This is the core PowerShell script (`close-task-manager.ps1`) that closes the Task Manager. It utilizes the external command `tskill` to terminate the `taskmgr` process and then exits with a status code of 0 to indicate success. The script includes comment-based help for documentation generation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-task-manager.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Task Manager\n.DESCRIPTION\n\tThis PowerShell script closes the Task Manager application gracefully.\n.EXAMPLE\n\tPS> ./close-task-manager.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntskill taskmgr\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Speaking Esperanto Text (PowerShell)\nDESCRIPTION: Implements the core logic of the script. It initializes a SAPI SPVoice object, iterates through available voices to find one matching '*- Esperanto*', sets the found voice, speaks the provided text, and includes basic error handling for missing voices.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-esperanto.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Esperanto\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with an Esperanto text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Esperanto text to speak\n.EXAMPLE\n\tPS> ./speak-esperanto.ps1 Saluton\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Esperanto text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Esperanto*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Esperanto text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Script Parameters for open-youtube.ps1 (PowerShell)\nDESCRIPTION: Defines the parameters accepted by the open-youtube.ps1 script. It primarily supports the standard PowerShell CommonParameters (Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable) for controlling script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-youtube.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-youtube.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Basic Execution Example for introduce-powershell.ps1\nDESCRIPTION: Provides a simple example of how to execute the introduce-powershell.ps1 script from the PowerShell console using its relative path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/introduce-powershell.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./introduce-powershell.ps1\n```\n\n----------------------------------------\n\nTITLE: Implementing Value and Range Visualization with Threshold-Based Coloring in PowerShell\nDESCRIPTION: Defines the WriteValueInRange function which takes a numeric value, unit, and threshold range values to print a formatted progress-like bar representing where the value lies within the specified ranges. The bar consists of '-' characters adjusted in length. The displayed value color changes to red if outside redMin or redMax, yellow if within warning yellow ranges, or green if within the normal range. The function calculates relative positioning for the display bar and uses Write-Host with -foregroundColor for color output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-value.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites a value with unit and range\n.DESCRIPTION\n\tThis PowerShell script writes the given value with the unit and the value range to the console.\n.PARAMETER value\n\tSpecifies the value\n.EXAMPLE\n\tPS> ./write-value.ps1 95.0 \"°C\" 0 10 90 100\n\t[0--------95°C-100]\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([float]$value = 0.5, [string]$unit = \"Mach\", [float]$redMin, [float]$yellowMin, [float]$yellowMax, [float]$redMax)\n\nfunction WriteValueInRange([float]$value, [string]$unit, [float]$redMin, [float]$yellowMin, [float]$yellowMax, [float]$redMax) {\n\t$line = \"------------------------------------------------\"\n\t$text = \"[$redMin$($value)$unit $redMax]\"\n\t[float]$total = 20.0 - $text.Length\n\tif ($value -gt $redMax) {\n\t\tWrite-Host \"[$redMin$($line.Substring(0, $total))$redMax]\" -noNewline\n\t\tWrite-Host \"$($value)$unit \" -noNewline -foregroundColor red\n\t} elseif ($value -lt $redMin) {\n\t\tWrite-Host \"$($value)$unit\" -noNewline -foregroundColor red\n\t\tWrite-Host \"[$redMin$($line.Substring(0, $total))$redMax] \" -noNewline\n\t} else {\n\t\t[float]$leftSide = (($value - $redMin) * $total) / ($redMax - $redMin)\n\t\tif ($leftSide -lt 1.0) { $leftSide = 1.0 }\n\t\tif ($leftSide -gt ($total - 1.0)) { $leftSide = $total - 1.0 }\n\t\tWrite-Host \"[$redMin$($line.Substring(0, $leftSide))\" -noNewline\n\t\tif (($value -le $yellowMin) -or ($value -ge $yellowMax)) {\n\t\t\tWrite-Host \"$($value)$unit\" -noNewline -foregroundColor yellow\n\t\t} else {\n\t\t\tWrite-Host \"$($value)$unit\" -noNewline -foregroundColor green\n\t\t}\n\t\tWrite-Host \"$($line.Substring(0, $total - $leftSide + 0.49))$redMax] \" -noNewline\n\t}\n}\n\nWriteValueInRange -3.5 \"°C\" 0 10 90 100\nWrite-Host \"CPU too cold\"\n\nWriteValueInRange 5 \"°C\" 0 10 90 100\nWrite-Host \"CPU quite cold\"\n\nWriteValueInRange 15 \"°C\" 0 10 90 100\nWrite-Host \"OK\"\n\nWriteValueInRange 50 \"°C\" 0 10 90 100\nWrite-Host \"OK\"\n\nWriteValueInRange 70 \"°C\" 0 10 90 100\nWrite-Host \"OK\"\n\nWriteValueInRange 95 \"°C\" 0 10 90 100\nWrite-Host \"CPU quite hot \"\n\nWriteValueInRange 110 \"°C\" 0 10 90 100\nWrite-Host \"CPU too hot \"\n\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Installing Firefox using winget - PowerShell\nDESCRIPTION: This snippet contains the core logic of the script. It uses a try-catch block to handle potential errors during installation. It executes the 'winget install' command to install 'Mozilla Firefox Browser' from the Microsoft Store, accepting necessary agreements, and checks the exit code for success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-firefox.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Mozilla Firefox\n.DESCRIPTION\n\tThis PowerShell script installs Mozilla Firefox from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-firefox.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Mozilla Firefox, please wait...\"\n\n\t& winget install \"Mozilla Firefox Browser\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Mozilla Firefox installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Play Tetris Melody using Beep in PowerShell\nDESCRIPTION: This PowerShell code snippet generates the Tetris melody by calling the `[System.Console]::Beep()` method with varying frequencies and durations, simulating the notes.  It uses `Start-Sleep` cmdlet to pause execution between notes.  The frequency is specified in Hertz (Hz), and the duration is specified in milliseconds.  The script exits with a status code of 0 upon completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tetris-melody.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(990,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1188,250)\n[System.Console]::Beep(1320,125)\n[System.Console]::Beep(1188,125)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(990,250)\n[System.Console]::Beep(880,500)\n[System.Console]::Beep(880,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1188,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(990,750)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1188,500)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1056,500)\n[System.Console]::Beep(880,500)\n[System.Console]::Beep(880,500)\nStart-Sleep -milliseconds 250\n[System.Console]::Beep(1188,500)\n[System.Console]::Beep(1408,250)\n[System.Console]::Beep(1760,500)\n[System.Console]::Beep(1584,250)\n[System.Console]::Beep(1408,250)\n[System.Console]::Beep(1320,750)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1188,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(990,500)\n[System.Console]::Beep(990,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1188,500)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1056,500)\n[System.Console]::Beep(880,500)\n[System.Console]::Beep(880,500)\nStart-Sleep -milliseconds 500\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(990,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1188,250)\n[System.Console]::Beep(1320,125)\n[System.Console]::Beep(1188,125)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(990,250)\n[System.Console]::Beep(880,500)\n[System.Console]::Beep(880,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1188,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(990,750)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1188,500)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1056,500)\n[System.Console]::Beep(880,500)\n[System.Console]::Beep(880,500)\nStart-Sleep -milliseconds 250\n[System.Console]::Beep(1188,500)\n[System.Console]::Beep(1408,250)\n[System.Console]::Beep(1760,500)\n[System.Console]::Beep(1584,250)\n[System.Console]::Beep(1408,250)\n[System.Console]::Beep(1320,750)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1188,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(990,500)\n[System.Console]::Beep(990,250)\n[System.Console]::Beep(1056,250)\n[System.Console]::Beep(1188,500)\n[System.Console]::Beep(1320,500)\n[System.Console]::Beep(1056,500)\n[System.Console]::Beep(880,500)\n[System.Console]::Beep(880,500)\nStart-Sleep -milliseconds 500\n[System.Console]::Beep(660,1000)\n[System.Console]::Beep(528,1000)\n[System.Console]::Beep(594,1000)\n[System.Console]::Beep(495,1000)\n[System.Console]::Beep(528,1000)\n[System.Console]::Beep(440,1000)\n[System.Console]::Beep(419,1000)\n[System.Console]::Beep(495,1000)\n[System.Console]::Beep(660,1000)\n[System.Console]::Beep(528,1000)\n[System.Console]::Beep(594,1000)\n[System.Console]::Beep(495,1000)\n[System.Console]::Beep(528,500)\n[System.Console]::Beep(660,500)\n[System.Console]::Beep(880,1000)\n[System.Console]::Beep(838,2000)\n[System.Console]::Beep(660,1000)\n[System.Console]::Beep(528,1000)\n[System.Console]::Beep(594,1000)\n[System.Console]::Beep(495,1000)\n[System.Console]::Beep(528,1000)\n[System.Console]::Beep(440,1000)\n[System.Console]::Beep(419,1000)\n[System.Console]::Beep(495,1000)\n[System.Console]::Beep(660,1000)\n[System.Console]::Beep(528,1000)\n[System.Console]::Beep(594,1000)\n[System.Console]::Beep(495,1000)\n[System.Console]::Beep(528,500)\n[System.Console]::Beep(660,500)\n[System.Console]::Beep(880,1000)\n[System.Console]::Beep(838,2000)\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for query-smart-data.ps1 in PowerShell\nDESCRIPTION: This snippet defines the command-line parameters accepted by the `query-smart-data.ps1` script. It specifically details the optional `-Directory` parameter for specifying the output path and mentions support for standard PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/query-smart-data.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/query-smart-data.ps1 [[-Directory] <String>] [<CommonParameters>]\n\n-Directory <String>\n    Specifies the path to the target directory\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Documentation and Metadata\nDESCRIPTION: Provides detailed documentation, description, example usage, author information, and related links for the PowerShell script. It serves as a comprehensive overview of the script's purpose and usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-home.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's home folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's home directory.\n.EXAMPLE\n\tPS> ./cd-home.ps1\n\t📂C:\\Users\\Markus\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Defining CommonParameters PowerShell\nDESCRIPTION: Documents the parameters accepted by the show-windows-manual.ps1 script. It specifically lists the standard PowerShell CommonParameters that can be used to control script execution behavior. No custom parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-windows-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-windows-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction,\n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Script Parameters\nDESCRIPTION: This snippet documents the parameters accepted by the `show-obs-studio-manual.ps1` script. It shows the basic syntax including `<CommonParameters>`, which represent standard PowerShell parameters like `Verbose`, `Debug`, etc., inherited from `[CmdletBinding()]`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-obs-studio-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-obs-studio-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Creating a scheduled reminder task in PowerShell\nDESCRIPTION: This is the core script content for remind-me.ps1. It defines parameters for the reminder message and time. The script creates a scheduled task action using the `msg` command to display the message, sets a trigger for a one-time execution at the specified time, generates a random name for the task, and registers the scheduled task using `Register-ScheduledTask`. Basic error handling is included.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remind-me.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreates a scheduled task that will display a popup message\n.DESCRIPTION\n\tThis PowerShell script creates a scheduled task that will display a popup message.\n.EXAMPLE\n\tPS> ./remind-me \"Dentist\" \"4/10/2021 12:00 PM\"\n\n\tTaskPath                                       TaskName                          State\n\t--------                                       --------                          -----\n\t\\                                              Reminder_451733811                Ready\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#requires -version 4\n\nparam([string]$Message = \"\", [datetime]$Time)\n\ntry {\n\tif ($Message -eq \"\") { $Message = read-host \"Enter reminder message\" }\n\n\t$Task = New-ScheduledTaskAction -Execute msg -Argument \"* $Message\"\n\t$Trigger = New-ScheduledTaskTrigger -Once -At $Time\n\t$Random = (Get-Random)\n\tRegister-ScheduledTask -Action $Task -Trigger $Trigger -TaskName \"Reminder_$Random\" -Description \"Reminder\"\n\texit 0\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PowerShell Script to Open Notepad Website\nDESCRIPTION: An example demonstrating how to run the open-note-pad-website.ps1 script from the PowerShell prompt without additional arguments. This triggers the script to open the Notepad website in the default browser. The snippet highlights the simplicity of invocation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-note-pad-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-note-pad-website\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-booking-com.ps1 Script in PowerShell\nDESCRIPTION: This snippet outlines the command-line syntax for the `open-booking-com.ps1` script. It indicates that the script supports the standard PowerShell common parameters (e.g., Verbose, Debug, ErrorAction) for controlling script execution and output, but it does not define any script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-booking-com.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-booking-com.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing open-deep-l-translator.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to run the `open-deep-l-translator.ps1` script from the PowerShell prompt. Executing this command will invoke the script, which in turn launches the default web browser and navigates to the DeepL Translator website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-deep-l-translator.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-deep-l-translator\n```\n\n----------------------------------------\n\nTITLE: Executing the open-outdoor-active.ps1 Script (PowerShell)\nDESCRIPTION: Provides an example command to execute the open-outdoor-active.ps1 script from the PowerShell prompt. Running this command without any additional parameters will launch the default web browser and navigate to the Outdoor Active website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-outdoor-active.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-outdoor-active\n```\n\n----------------------------------------\n\nTITLE: Running the uninstall-new-outlook.ps1 Script with Parameters\nDESCRIPTION: Shows the parameters accepted by the script, including the common PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-new-outlook.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/uninstall-new-outlook.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing cd-ssh.ps1 Script in PowerShell\nDESCRIPTION: Provides an example of executing the cd-ssh.ps1 script from the PowerShell prompt. The output shows the shell changing to the user's .ssh directory, indicated by the folder icon and the path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-ssh.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-ssh.ps1\n📂C:\\Users\\Markus\\.ssh\n```\n\n----------------------------------------\n\nTITLE: Using replace-in-files.ps1 with Parameters in PowerShell\nDESCRIPTION: Example showing how to call the replace-in-files script with specific pattern, replacement, and file pattern parameters to replace 'NSA' with 'No Such Agency' in all text files in a specific directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/replace-in-files.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./replace-in-files NSA \"No Such Agency\" C:\\Temp\\*.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Error Reporting Dump Settings Using PowerShell\nDESCRIPTION: This PowerShell script interactively configures Windows Error Reporting crash dump settings by modifying registry keys under HKLM. It defines multiple hexadecimal constants representing custom dump options, then prompts the user to select from disabling dumps, enabling full or mini dumps, or configuring custom dump parameters. For custom dumps, the user can input multiple options that are combined using bitwise addition and set in the registry. The script prompts for system reboot after applying changes to ensure settings take effect. Dependencies include administrative privileges to write registry keys and access to Windows Error Reporting registry paths.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-crash-dumps.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n#                                                                #\n##################################################################\n\n#Setting Values:\n$MDN = '0'\n$MDWDS = '1'\n$MDWFM = '2'\n$MDWHD = '4'\n$MDFM = '8'\n$MDSM = '10'\n$MDWUM = '20'\n$MDWIR = '40'\n$MMDFMP = '80'\n$MDWPTD = '100'\n$MDWPRWM = '200'\n$MDWOD = '400'\n$MDWFMI = '800'\n$MDWTI = '1000'\n$MDWCS = '2000'\n$MDWAS = '4000'\n$MDWFAS = '8000'\n$MDWPWCM = '10000'\n$MDIIM = '20000'\n$MDWTOI = '40000'\n\n$a = $MDN\n$b = $MDWDS\n$c = $MDWFM\n$d = $MDWHD\n$e = $MDFM\n$f = $MDSM\n$g = $MDWUM\n$h = $MDWIR\n$i = $MMDFMP\n$j = $MDWPTD\n$k = $MDWPRWM\n$l = $MDWOD\n$m = $MDWFMI\n$n = $MDWTI\n$o = $MDWCS\n$p = $MDWAS\n$q = $MDWFAS\n$r = $MDWPWCM\n$s = $MDIIM\n$t = $MDWTOI\n\n$0x = \"0x\"\n\n$array = @()\n\nClear-Host\nWrite-Host \"Setting up your machine to receive Usermode Dumps via WER.\"\nStart-Sleep -seconds 3\n\n\nNew-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpFolder\" -Value \"%LOCALAPPDATA%\\CrashDumps\" -PropertyType ExpandString -Force\nNew-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpCount\" -Value \"10\" -PropertyType DWORD -Force\n\nclear-host\nwrite-host \"What would you like to do?\"\nwrite-host \"(0) Disable Dumps and restore system to factory.\"\nwrite-host \"(1) Enable System for Full Dumps.\"\nwrite-host \"(2) Enable System for Mini Dumps.\"\nwrite-host \"(3) Enable System for custom dump with options.\"\n$NCD = Read-Host \"Enter a number option\"\n\nIf ($NCD -eq '3')\n{\n    \n    New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpType\" -Value \"0\" -PropertyType DWORD -Force\n    Do\n    {\n        clear-host\n        write-host \"Here are the optional custom dump  to add to your custom dump parameters:\"\n        write-host \"(1)  Mini Dump Normal\"\n        write-host \"(2)  Mini Dump With Data Segs\"\n        write-host \"(3)  Mini Dump With Full Memory\"\n        write-host \"(4)  Mini Dump With Handle Data\"\n        write-host \"(5)  Mini Dump Filter Memory\"\n        write-host \"(6)  Mini Dump Scan Memory\"\n        write-host \"(7)  Mini Dump With Unloaded Modules\"\n        write-host \"(8)  Mini Dump With Indirectly Referenced\"\n        write-host \"(9)  Memory Mini Dump Filter Module Paths\"\n        write-host \"(10) Mini Dump With Process Thread Data\"\n        write-host \"(11) Mini Dump With Private Read Write Memory\"\n        write-host \"(12) Mini Dump Without Optional Data\"\n        write-host \"(13) Mini Dump With Full Memory Info\"\n        write-host \"(14) Mini Dump With Thread Info\"\n        write-host \"(15) Mini Dump With Code Segs\"\n        write-host \"(16) Mini Dump Without Auxiliary State\"\n        write-host \"(17) Mini Dump With Full Auxiliary State\"\n        write-host \"(18) Mini Dump With Private Write Copy Memory\"\n        write-host \"(19) Mini Dump Ignore Inaccessible Memory\"\n        write-host \"(20) Mini Dump With Token Information\"\n        $Option = Read-Host \"Enter one number value at a time and press enter. (Press 'q' when finished)\"\n        if($Option -eq '1')\n        {\n            $array += [int]$a\n        }\n        ElseIf($Option -eq '2')\n        {\n            $array += [int]$b\n        }\n        ElseIf($Option -eq '3')\n        {\n            $array += [int]$c\n        }\n        ElseIf($Option -eq '4')\n        {\n            $array += [int]$d\n        }\n        ElseIf($Option -eq '5')\n        {\n            $array += [int]$e\n        }\n        ElseIf($Option -eq '6')\n        {\n            $array += [int]$f\n        }\n        ElseIf($Option -eq '7')\n        {\n            $array += [int]$g\n        }\n        ElseIf($Option -eq '8')\n        {\n            $array += [int]$h\n        }\n        ElseIf($Option -eq '9')\n        {\n            $array += [int]$i\n        }\n        ElseIf($Option -eq '10')\n        {\n            $array += [int]$j\n        }\n        ElseIf($Option -eq '11')\n        {\n        $array += [int]$k\n        }\n        ElseIf($Option -eq '12')\n        {\n            $array += [int]$l\n        }\n        ElseIf($Option -eq '13')\n        {\n            $array += [int]$m\n        }\n        ElseIf($Option -eq '14')\n        {\n            $array += [int]$n\n        }\n        ElseIf($Option -eq '15')\n        {\n            $array += [int]$o\n        }\n        ElseIf($Option -eq '16')\n        {\n            $array += [int]$p\n        }\n        ElseIf($Option -eq '17')\n        {\n            $array += [int]$q\n        } \n        ElseIf($Option -eq '18')\n        {\n            $array += [int]$r\n        } \n        ElseIf($Option -eq '19')\n        {\n            $array += [int]$s\n        } \n        ElseIf($Option -eq '20')\n        {\n            $array += [int]$t\n        }\n        ElseIf($Option -eq 'q')\n        {\n            write-host \"Closing application.\"\n            Start-Sleep -seconds 2\n        }\n        Else\n        {\n            write-host \"Invalid Option, Try again.\"\n            Start-Sleep -seconds 2\n        }  \n                                               \n    }\n    While($Option -ne \"q\")\n    $sum = $array -join '+'\n    $SumArray = Invoke-Expression $sum\n    $FinalSum = $0x + $SumArray\n\n    New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"CustomDumpFlags\" -Value \"$FinalSum\" -PropertyType DWORD -Force\n\n    write-host \" \"\n    write-host \"Setting up the system for crash dumps requires a reboot\"\n}\nElseIf ($NCD -eq '0')\n{\n    Remove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpCount\" -Force -ErrorAction SilentlyContinue\n    Remove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpType\" -Force -ErrorAction SilentlyContinue\n    Remove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpFolder\" -Force -ErrorAction SilentlyContinue\n    Remove-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"CustomDumpFlags\" -Force -ErrorAction SilentlyContinue\n    write-host \" \"\n    $reboot = read-host \"Registry reset to factory settings and cleared.  It is recommended to restart your machine, would you like to now?\"\n    if($reboot -eq \"Yes\" -or $reboot -eq \"Y\" -or $reboot -eq \"yes\" -or $reboot -eq \"y\")\n    {\n        shutdown -r\n    }\n    Else\n    {\n        write-host \"Please restart the machine for settings to take effect at your convenience.\"\n    }\n}\nElseIf ($NCD -eq '1')\n{\n    New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpType\" -Value \"2\" -PropertyType DWORD -Force\n    write-host \"The computer has been set up to create a Full Sized Dump and will be located in %LOCALAPPDATA%\\CrashDumps.\"\n    write-host \"The computer must also restart for settings to take effect.  Would you like to now? (Y/n)\"\n    if($reboot -eq \"Yes\" -or $reboot -eq \"Y\" -or $reboot -eq \"yes\" -or $reboot -eq \"y\")\n    {\n        shutdown -r\n    }\n    Else\n    {\n        write-host \"Please restart the machine for settings to take effect at your convenience.\"\n    }\n}\nElseIf ($NCD -eq '2')\n{\n    New-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\" -Name \"DumpType\" -Value \"1\" -PropertyType DWORD -Force\n    write-host \"The computer has been set up to create a Mini Dump and will be located in %LOCALAPPDATA%\\CrashDumps.\"\n    write-host \"The computer must also restart for settings to take effect.  Would you like to now? (Y/n)\"\n    if($reboot -eq \"Yes\" -or $reboot -eq \"Y\" -or $reboot -eq \"yes\" -or $reboot -eq \"y\")\n    {\n        shutdown -r\n    }\n    Else\n    {\n        write-host \"Please restart the machine for settings to take effect at your convenience.\"\n    }\n}\nElse\n{\n    Write-Host \"You did not enter a valid option.  Please re-run Get-Dump.ps1\"\n    Start-Sleep -seconds 5\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Main Script Logic for Converting PowerShell Scripts to Batch Files\nDESCRIPTION: This core code accepts a file pattern from the user, retrieves matching files, and converts each PowerShell script into a batch file by encoding the content and generating a new script that calls PowerShell with the encoded command. It implements error handling to catch runtime exceptions and provides user prompts when no pattern is specified.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-ps2bat.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([\n    [string]$Filepattern = \"\"\n])\n\nfunction Convert-PowerShellToBatch\n{\n    param\n    (\n        [Parameter(Mandatory,ValueFromPipeline,ValueFromPipelineByPropertyName)]\n        [string]\n        [Alias(\"FullName\")]\n        $Path\n    )\n \n    process\n    {\n        $encoded = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes((Get-Content -Path $Path -Raw -Encoding UTF8)))\n        $newPath = [Io.Path]::ChangeExtension($Path, \".bat\")\n        \"@echo off`npowershell.exe -NoExit -encodedCommand $encoded\" | Set-Content -Path $newPath -Encoding Ascii\n    }\n}\n \ntry {\n\tif ($Filepattern -eq \"\") { $Filepattern = Read-Host \"Enter path to the PowerShell script(s)\" }\n\n\t$Files = Get-ChildItem -path \"$Filepattern\"\n\tforeach ($File in $Files) {\n\t\tConvert-PowerShellToBatch \"$File\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for GitLab on Linux\nDESCRIPTION: This snippet updates the Linux package list and installs necessary dependencies such as curl, openssh-server, ca-certificates, tzdata, and perl. These packages are required for GitLab setup, including network tools, SSH server, certificates, timezone data, and Perl scripting support. It uses sudo for elevated privileges and executes command chaining for efficiency.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-gitlab.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n& sudo apt-get update\n& sudo apt-get install -y curl openssh-server ca-certificates tzdata perl\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Simulation Logic in simulate-presence.ps1 (PowerShell)\nDESCRIPTION: Contains the core logic of the `simulate-presence.ps1` script. It defines an optional `$IPaddress` parameter, prompts for input if the parameter is empty, and enters a loop (1000 iterations). Inside the loop, it calls an external script `switch-shelly1.ps1` (expected in the same directory) to turn the Shelly1 device on, waits 10 seconds using `Start-Sleep`, calls `switch-shelly1.ps1` again to turn it off, and waits 60 seconds. Basic error handling is implemented using a try-catch block to report errors and exit.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/simulate-presence.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSimulate a human against burglars\n.DESCRIPTION\n\tThis PowerShell script simulates the human presence against burglars. It switches a Shelly1 device on and off.\n.PARAMETER IPaddress\n\tSpecifies the IP address of the Shelly1 device\n.EXAMPLE\n\tPS> ./simulate-presence 192.168.100.100\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$IPaddress = \"\")\n\ntry {\n\tif ($IPaddress -eq \"\" ) { $IPaddress = Read-Host \"Enter IP address of the Shelly1 device\" }\n\n\tfor ([int]$i = 0; $i -lt 1000; $i++) {\n\t\t& \"$PSScriptRoot/switch-shelly1.ps1\" $IPaddress on 0\n\t\tStart-Sleep -seconds 10 # on for 10 seconds\n\t\t& \"$PSScriptRoot/switch-shelly1.ps1\" $IPaddress off 0\n\t\tStart-Sleep -seconds 60 # off for 60 seconds\n\t}\n\t\"✅ Done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for fetch-repo.ps1 Script (PowerShell)\nDESCRIPTION: Defines the parameters accepted by the fetch-repo.ps1 script. It takes an optional 'path' string parameter specifying the local Git repository directory, defaulting to the current working directory ($PWD). It also supports standard PowerShell CommonParameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/fetch-repo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/fetch-repo.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the file path to the local Git repository (default is working directory).\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing write-sine-curves.ps1 Script (PowerShell)\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to execute the write-sine-curves.ps1 script from a PowerShell console. It shows running the script from the current directory using './'.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-sine-curves.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-sine-curves\n\n\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example - PowerShell\nDESCRIPTION: This simple example demonstrates how to run the open-flight-radar.ps1 script from the PowerShell console. It shows the basic command to execute the script located in the current directory using the './' prefix.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-flight-radar.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-flight-radar\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for PowerShell Script\nDESCRIPTION: Documentation block detailing the script's parameters. It explains the -path parameter, its default value (current directory), position, and whether it accepts pipeline input or wildcards. It also explicitly mentions support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-read-only-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-read-only-files.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree (current working dir by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Writing a Random Quote PowerShell script\nDESCRIPTION: This PowerShell script selects a random quote and its author from a CSV file (quotes.csv) and writes them to the console with specified formatting. It includes error handling and outputs the quote in green and author in blue. The script expects the quotes.csv file to be located in the ../data/ directory relative to the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-quote.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites a random quote\n.DESCRIPTION\n\tThis PowerShell script selects a random quote from .../data/quotes.csv and writes it to the console.\n.EXAMPLE\n\tPS> ./write-quote.ps1\n\t“ We must become the change we want to see. „\n\t                           - Mahatma Gandhi\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$table = Import-CSV \"$PSScriptRoot/../data/quotes.csv\"\n\n\t$randomNumberGenerator = New-Object System.Random\n\t$row = [int]$randomNumberGenerator.next(0, $table.Count - 1)\n\t$quote = $table[$row].QUOTE\n\t$author = $table[$row].AUTHOR\n\t$spaces = \"                                                                                                                             \"\n\t$spaces = $spaces.Substring(0, $quote.Length - $author.Length)\n\n\tWrite-Host \"`n'“'\"$quote'„'\"\" -foregroundColor Green\n\tWrite-Host \"$spaces- $author\" -foregroundColor Blue\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage Example for Skype Launcher Script in PowerShell\nDESCRIPTION: This example demonstrates how to invoke the Skype launcher script from a PowerShell prompt using its supported parameters. No special dependencies are required, but the script must be executable and accessible in the provided path. The example showcases a typical command and supports common parameters such as Verbose and Debug to adjust script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-skype.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-skype\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft Edge Manual - PowerShell\nDESCRIPTION: This PowerShell script launches the Microsoft Edge web browser and opens the Microsoft Edge manual. It utilizes the script's comment-based help for automatic documentation generation. The script also supports common PowerShell parameters for controlling execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-edge-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-edge-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters and Common Parameters in PowerShell\nDESCRIPTION: This snippet illustrates the command signature for the `open-windy.ps1` script, showing its path and indicating that it supports the standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., for controlling script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windy.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-windy.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-cortana.ps1 Script (PowerShell)\nDESCRIPTION: This snippet shows the parameter syntax for the `open-cortana.ps1` script. It indicates that the script accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) for controlling script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cortana.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-cortana.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage\nDESCRIPTION: This example shows how to execute the open-cnn-website.ps1 script from the PowerShell prompt. It assumes the current directory is where the script is located.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cnn-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-cnn-website\n```\n\n----------------------------------------\n\nTITLE: Invoking Microsoft Store Close Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the close-microsoft-store.ps1 script in PowerShell to terminate the Microsoft Store application. This example assumes the script is in the current working directory and showcases basic script invocation. No additional parameters are required, but common PowerShell parameters are accepted for verbose output, error handling, and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-microsoft-store.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-microsoft-store.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Implementing open-edge.ps1 Script Logic in PowerShell\nDESCRIPTION: Contains the full source code for the open-edge.ps1 script. It includes comment-based help detailing the synopsis, description, example, and source link. The core functionality uses the `Start-Process` cmdlet with the 'microsoft-edge://' URI scheme to launch the Edge browser and then exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-edge.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Edge browser\n.DESCRIPTION\n\tThis PowerShell script launches the Microsoft Edge Web browser.\n.EXAMPLE\n\tPS> ./open-edge\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process microsoft-edge://\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Launching Snipping Tool with PowerShell\nDESCRIPTION: This PowerShell script starts the Snipping Tool application using the Start-Process cmdlet. It includes metadata comments about its purpose, author, and usage, with an example command for execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-snipping-tool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tStarts the Snipping Tool\n.DESCRIPTION\n\tThis script launches the Snipping Tool application.\n.EXAMPLE\n\tPS> ./open-snipping-tool\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process SnippingTool.exe\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing play-rick.ps1 script\nDESCRIPTION: This demonstrates how to execute the `play-rick.ps1` PowerShell script from the PowerShell console. It assumes the script is in the current directory. No specific parameters are needed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-rick.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-rick.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-san-francisco-city.ps1 Script in PowerShell\nDESCRIPTION: This snippet outlines the parameters for the 'show-san-francisco-city.ps1' script. It primarily accepts the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) which allow control over script execution behavior, but it does not define any script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-san-francisco-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-san-francisco-city.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example - PowerShell\nDESCRIPTION: This code snippet provides an example of how to execute the PowerShell script. The command './check-sunset' will run the script located in the current directory.  This simple execution will trigger the script's logic, likely fetching the sunset time and using TTS to announce it.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-sunset.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-sunset\n```\n\n----------------------------------------\n\nTITLE: Telling a Random Joke using TTS\nDESCRIPTION: This PowerShell script retrieves a random joke from a CSV file, and then uses text-to-speech (TTS) to speak the joke. It uses `Import-CSV` to read the CSV, `System.Random` to select a random row, and calls `speak-english.ps1` with the chosen joke. Error handling is included to catch any exceptions during the process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/tell-joke.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTells a random joke by text-to-speech\n.DESCRIPTION\n\tThis PowerShell script selects a random Chuck Norris joke in Data/jokes.csv and speaks it by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./tell-joke.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$table = Import-CSV \"$PSScriptRoot/../data/jokes.csv\"\n\n\t$randomNumberGenerator = New-Object System.Random\n\t$row = [int]$randomNumberGenerator.next(0, $table.count - 1)\n\n\t& \"$PSScriptRoot/speak-english.ps1\" $table[$row].Joke\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Processing GUI Result and Task Setup\nDESCRIPTION: This snippet handles the GUI result, calculates the task trigger time based on the user's input from the date and time pickers, and then either updates an existing scheduled task or creates a new one.  If the dialog result is not \"OK\" the script exits.  The script retrieves the date and time from the `datePicker` and `TimePicker` objects and constructs the `$TaskDatetrigger` variable. It uses the `Get-ScheduledTask`, `Set-ScheduledTask`, `New-ScheduledTaskTrigger`, `New-ScheduledTaskAction`, `New-ScheduledTaskSettingsSet`, `New-ScheduledTaskPrincipal`, and `Register-ScheduledTask` cmdlets for managing the scheduled task.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-reboot-task.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n# Skript abbrechen, wenn Fenster geschlossen wird\nIf ($mainForm.DialogResult -eq \"Cancel\") {Break}\n\n# Datum und Uhrzeit aus Abfrage für Task aufbereiten\n$TaskDatetrigger = Get-Date -Date $datePicker.Value.Date -Hour $TimePicker.Value.TimeOfDay.Hours -Minute $TimePicker.Value.TimeOfDay.Minutes\n\n# Erstelle Task oder passe vorhanden Task an\n\n# TaskTrigger Zeit setzen\n$TaskTrigger = New-ScheduledTaskTrigger -At $TaskDatetrigger -Once\n\nIf ((Get-ScheduledTask -TaskName $Taskname -ErrorAction SilentlyContinue).TaskName -eq $TaskName) \n    {# Setzt den neue Tasktrigger\n    Set-ScheduledTask -TaskName $Taskname -Trigger $TaskTrigger\n    }\nElse\n    {# Erstellt Neustart Task, da keiner vorhanden ist\n    $TaskAction = New-ScheduledTaskAction -Execute \"shutdown.exe\" -Argument \"/r /f /t 5\"\n    $TaskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -ExecutionTimeLimit 00:15:00\n    $TaskSettings.StartWhenAvailable = $false\n    $TaskPrincipal = New-ScheduledTaskPrincipal -UserId $(Get-WMIObject -class Win32_ComputerSystem | select UserName).username -RunLevel Highest -LogonType Interactive\n    Register-ScheduledTask -Action $TaskAction -Trigger $TaskTrigger -Settings $TaskSettings -Principal $TaskPrincipal -TaskName $TaskName -Description \"Führt einen Neustart des Computers zu einer festgelegten Zeit aus\"\n    }\n\n# Pruefe Task ob dieser deaktiviert ist\nIf ((Get-ScheduledTask -TaskName $Taskname).State -eq \"Disabled\") {Enable-ScheduledTask -TaskName $TaskName}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Regular Expressions\nDESCRIPTION: Illustrates how to use regular expressions in PowerShell for pattern matching against strings and arrays, including retrieving matches and working with the `$matches` variable. Requires understanding of regex syntax.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\n'Trevor' -match '^T\\w*'                                   # Perform a regular expression match against a string value. # Returns $true and populates $matches variable\n$matches[0]                                               # Returns 'Trevor', based on the above match\n\n@('Joe', 'Billy', 'Bobby') -match '^B'                    # Perform a regular expression match against an array of string values. Returns Billy, Bobby\n\n$regex = [regex]'(\\w{3,8})'\n$regex.Matches('Bobby Dillon Joe Jacob').Value            # Find multiple matches against a singleton string value.\n```\n\n----------------------------------------\n\nTITLE: Supporting Common Parameters for Script Invocation in PowerShell\nDESCRIPTION: This snippet demonstrates how the PowerShell script can be executed with standard common parameters such as Verbose, Debug, and ErrorAction. These parameters allow users to control the script's output, error handling, and debugging options without modifying the script itself. Proper use of these parameters improves usability and flexibility for different deployment scenarios.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-irfanview.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-irfanview.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Walmart Website using PowerShell Script - PowerShell\nDESCRIPTION: This snippet shows how to execute 'open-walmart-website.ps1', a script that opens the Walmart website in the default web browser. It supports standard PowerShell common parameters such as Verbose, Debug, ErrorAction, and others for controlling output and error behavior. No additional dependencies are required aside from PowerShell; inputs may include any of the common parameters, and the script does not return output but triggers the browser to open.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-walmart-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-walmart-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the Jingle Bells Script in PowerShell\nDESCRIPTION: Demonstrates the command-line syntax for running the `play-jingle-bells.ps1` script. It also notes that the script supports standard PowerShell common parameters like `-Verbose`, `-Debug`, `-ErrorAction`, etc., which can modify its execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-jingle-bells.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-jingle-bells.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to /etc in PowerShell\nDESCRIPTION: Script that changes the current working directory to the /etc directory, with platform detection to work on both Windows and Linux. It verifies the directory exists before changing to it and displays the new location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-etc.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChanges to the /etc directory\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the /etc directory.\n.EXAMPLE\n\tPS> ./cd-etc\n\t📂C:\\Windows\\System32\\drivers\\etc\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinx) {\n\t\t$path = \"/etc\"\n\t} else {\n\t\t$path = Resolve-Path \"$env:WINDIR\\System32\\drivers\\etc\"\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) {\n\t\tthrow \"/etc directory at 📂$path doesn't exist (yet)\"\n\t}\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Execution Example - PowerShell\nDESCRIPTION: Demonstrates how to execute the script from a typical PowerShell prompt (PS>) using a relative path. It also illustrates the script's output, which includes a file icon and the resolved path to the desktop directory upon successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-desktop.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-desktop\n📂/home/Markus/Desktop\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Common Parameters - PowerShell\nDESCRIPTION: This snippet lists the standard PowerShell common parameters that open-help.ps1 supports, such as Verbose, Debug, and ErrorAction. While not executable code, the snippet clarifies the capabilities available to script users and is relevant for those who want to leverage PowerShell's extended parameter support.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-help.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Showing Script Parameters in PowerShell\nDESCRIPTION: This snippet illustrates the command-line signature for the script, indicating that it can be executed without specific arguments but supports standard PowerShell common parameters for controlling output, error handling, and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-repos-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-repos-folder.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Yahoo Website Script - PowerShell\nDESCRIPTION: This example shows how to execute the open-yahoo-website.ps1 script. The script is run from the current directory and opens the Yahoo website in the user's default web browser. No specific parameters are passed to the script. The script assumes that the user has a default web browser configured.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-yahoo-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-yahoo-website\n```\n\n----------------------------------------\n\nTITLE: Opening Google Maps for Hong Kong - PowerShell\nDESCRIPTION: This PowerShell script, `show-hong-kong-city.ps1`, opens the default web browser and navigates to Google Maps, displaying the city of Hong Kong. The script uses the common parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. There are no specific parameters for this script, and the expected output is the Google Maps website focused on Hong Kong.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-hong-kong-city.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Executing open-task-manager.ps1\nDESCRIPTION: Shows a basic example of how to run the `open-task-manager.ps1` script from the PowerShell command line to launch the Windows Task Manager.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-task-manager.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-task-manager\n```\n\n----------------------------------------\n\nTITLE: Parameters for show-washington-city.ps1 PowerShell script\nDESCRIPTION: This snippet shows the parameter syntax for the show-washington-city.ps1 script. It supports common PowerShell parameters but doesn't require any specific parameters for its basic functionality.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-washington-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-washington-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running Color Settings Script - PowerShell Example\nDESCRIPTION: This code snippet provides an example of how to execute the 'open-color-settings.ps1' script from the PowerShell prompt.  It demonstrates a basic execution without any additional arguments or parameters, assuming the script is accessible in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-color-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-color-settings\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-start-page.ps1 in PowerShell\nDESCRIPTION: Shows the command-line syntax for the open-start-page.ps1 script, highlighting that it accepts common PowerShell parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters control standard script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-start-page.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-start-page.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Launching RDP Client with Optional Hostname\nDESCRIPTION: This script launches the Windows Remote Desktop Protocol (mstsc.exe). When a hostname is provided, it initiates a remote connection directly to that machine; otherwise, it opens the RDP client to allow manual connection. The script supports common PowerShell parameters like Verbose and Debug, and requires PowerShell environment with access to 'mstsc.exe' located in the system directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-rdp.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Opens the RDP app\n.DESCRIPTION\n        This script launches the Remote Desktop Protocol (RDP) application.\n\tNOTE: Documentation of mstsc at: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/mstsc\n.EXAMPLE\n        PS> ./open-rdp.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$hostname = \"\")\n\nif ($hostname -eq \"\") {\n\t& Start-Process \"$env:windir\\system32\\mstsc.exe\"\n} else {\n\t& Start-Process \"$env:windir\\system32\\mstsc.exe\" -ArgumentList \"/v:$hostname\"\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Closing 3D-Viewer Application - PowerShell\nDESCRIPTION: This PowerShell script closes the 3D-Viewer application.  It uses TaskKill to terminate the process '3DViewer.exe' with the force option.  It checks the exit code of the TaskKill command to determine whether the process was successfully terminated. If the exit code is not 0, it calls another script ('speak-english.ps1') to alert the user and then exits with a non-zero code indicating an error. The script has no parameters as shown in the examples, and is intended to be run directly.  It assumes that 'speak-english.ps1' is present in the same directory or accessible from the environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-three-d-viewer.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the 3D-Viewer app \n.DESCRIPTION\n\tThis PowerShell script closes the 3D-Viewer application gracefully.\n.EXAMPLE\n\tPS> ./close-three-d-viewer.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im 3DViewer.exe /f\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, 3D Viewer isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Launching Azure Manual with Common Parameters - PowerShell\nDESCRIPTION: This PowerShell script, `show-azure-manual.ps1`, launches the Microsoft Azure manual in a web browser. It leverages the `<CommonParameters>` which allows for standard parameter usage such as `Verbose`, `Debug`, etc. No specific parameters are defined in this example beyond the common parameters.\n\nDependencies: PowerShell environment.\n\nParameters: Supports common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\nOutput: Launches the Azure manual in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-azure-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-azure-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Execution in PowerShell\nDESCRIPTION: This example demonstrates how to execute the open-duck-duck-go.ps1 script in PowerShell. It simply shows the command to run the script from the PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-duck-duck-go.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-duck-duck-go\n```\n\n----------------------------------------\n\nTITLE: Launching Desktop Folder in File Explorer using PowerShell\nDESCRIPTION: This PowerShell script resolves the user's desktop folder path and launches File Explorer pointing to that folder. It verifies that the desktop folder exists as a directory and throws a custom error if it does not. The script invokes a secondary script 'open-file-explorer.ps1' with the resolved path. It supports all common PowerShell parameters such as Verbose, Debug, and ErrorAction, allowing flexible invocation and error reporting. On success, it exits with code 0; on failure, it outputs a descriptive error message including the script line number and exits with code 1. Dependencies include the PowerShell runtime and the helper script 'open-file-explorer.ps1' located in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-desktop-folder.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the desktop folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the user's desktop folder.\n.EXAMPLE\n\tPS> ./open-desktop-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = resolve-path \"$HOME/Desktop\"\n\tif (-not(test-path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Desktop folder at 📁$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"🔙⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Chess Moves for Validity in PowerShell\nDESCRIPTION: This PowerShell function simulates and validates potential chess moves for a given piece and destination, returning both the success and attack status without modifying the main game state. It checks for out-of-bounds access, illegal source/destination, friendly fire, and specific movement rules depending on piece type (with partial pawn logic shown). The function depends on correct implementation of Get-Column, Get-Row, and expects $board and $Empty to be defined. Inputs are source and destination in algebraic notation, and output is a boolean array indicating move success and attack. Key constraints include type checking and early error exits for invalid actions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nFunction Test-Move {\n    param ([string]$src, [string]$dst)\n\n    [bool]$attack = $false\n    [bool]$moveSuccess = $false\n    [bool[]]$status = @($moveSuccess, $attack)\n\n    try {\n        [Int]$CurrentColumn = Get-Column $src[0]\n        [Int]$CurrentRow = Get-Row $src[1]\n        [Int]$DesiredColumn = Get-Column $dst[0]\n        [Int]$DesiredRow = Get-Row $dst[1]\n\n        $pc = $board[$CurrentColumn, $CurrentRow]\n    } catch {\n        Write-Error \"Out of bounds\"\n        return $status\n    }\n\n    #Moving nothing, nowhere, or trying to capture your own piece\n    if ($board[$CurrentColumn, $CurrentRow] -eq $Empty) {\n        Write-Error \"There is nothing there.\"\n        return $status\n    } elseif (($CurrentRow -eq $DesiredRow) -and ($CurrentColumn -eq $DesiredColumn)) {\n        Write-Error \"That wouldn't move anywhere.\"\n        return $status\n    } elseif ($board[$DesiredColumn, $DesiredRow] -ne $Empty -and `\n              $pc.Color -eq $board[$DesiredColumn, $DesiredRow].Color) {\n        Write-Error \"Collision with own team\"\n        return $status\n    } else {\n        [int]$MoveX = $DesiredColumn - $CurrentColumn\n        [int]$MoveY = $DesiredRow - $CurrentRow\n        \n        #Pieces playable\n        switch ($pc.Type) {\n            'Pawn' {\n                $MoveX = [math]::abs($MoveX)\n                if (($MoveX -gt 1) -or ([math]::abs($MoveY) -gt 2)) {\n                    return $status\n                } else {\n                    #Force pawns to only move \"forward\"\n                    if ($pc.Color -eq 'Black') {\n                        $MoveY *= -1\n                    }\n                    if (($MoveX -eq 0) -and ($MoveY -eq 1)) {\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Terminating Microsoft Edge Process\nDESCRIPTION: This code utilizes the TaskKill command to forcefully terminate all instances of the Microsoft Edge browser by process image name. It then checks the script's exit code; if unsuccessful, it calls an auxiliary script to inform the user that Edge isn't running, and exits with code 1. On success, it exits with code 0, indicating proper termination.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-edge.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nTaskKill /im msedge.exe /f /t\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Microsoft Edge isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Script Parameters\nDESCRIPTION: Documents the script's usage syntax including its path and indicates support for standard PowerShell common parameters. This allows users to control script behavior related to error handling, debugging, and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-screen-magnifier.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/close-screen-magnifier.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Script - PowerShell Example\nDESCRIPTION: This snippet provides a practical demonstration of how to execute the `show-madrid-city.ps1` script from a PowerShell command prompt. The example `./show-madrid-city` shows the simplest way to run the script without any custom arguments, illustrating the default operation of launching the web browser to the specified location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-madrid-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-madrid-city\n\n```\n\n----------------------------------------\n\nTITLE: Launching Google Maps for Munich City in PowerShell\nDESCRIPTION: This PowerShell script launches the user's default web browser and navigates to Google Maps with Munich city (Germany) displayed. It supports standard PowerShell common parameters like Verbose, Debug, and ErrorAction to allow detailed and controlled script execution. The script does not require any input parameters and serves as a shortcut to open a predefined location in a browser. Dependencies include PowerShell environment and network access for Google Maps. Expected output is the web browser opening with the Munich map view.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-munich-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-munich-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-munich-city\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Google Earth Web Browser\nDESCRIPTION: This PowerShell script opens the Google Earth website by invoking an auxiliary script. It is designed for automation and supports common PowerShell parameters. The script is documented with a synopsis, description, example, and author notes, making it easy to understand and modify.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-earth.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Earth\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Earth website.\n.EXAMPLE\n\tPS> ./open-google-earth\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://earth.google.com/web/\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Using list-latest-tags.ps1 Script from Command Line\nDESCRIPTION: Example showing how to execute the list-latest-tags.ps1 script with a parameter specifying the repository parent directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-latest-tags.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-latest-tags C:\\MyRepos\n```\n\n----------------------------------------\n\nTITLE: Opening Color Settings - PowerShell\nDESCRIPTION: This PowerShell script opens the Windows color settings panel. It utilizes the common parameters available in PowerShell scripts for logging, debugging, and error handling.  No specific parameters are defined for the script itself, relying on the common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-color-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-color-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for watch-news.ps1 Script\nDESCRIPTION: This snippet defines the parameters accepted by the watch-news.ps1 script. `-URL` specifies the RSS feed source (defaults to Yahoo World News), and `-timeInterval` sets the refresh frequency in seconds (defaults to 60). Both parameters are optional and positional. The script also supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-news.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/watch-news.ps1 [[-URL] <String>] [[-timeInterval] <Int32>] [<CommonParameters>]\n\n-URL <String>\n    Specifies the URL to the RSS feed (Yahoo World News by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                https://news.yahoo.com/rss/world\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-timeInterval <Int32>\n    Specifies the time interval in seconds between two Web requests (60 seconds by default)\n    \n    Required?                    false\n    Position?                    2\n    Default value                60\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Supported CommonParameters Listing - PowerShell\nDESCRIPTION: This snippet documents the supported CommonParameters for the script, which include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters allow advanced usage, such as debugging information or error handling customization, and require no changes to the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-docs.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-docs.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script: show-berlin-city.ps1 - Opens Berlin in Google Maps\nDESCRIPTION: This script launches the default web browser to display Berlin, Germany, on Google Maps. It supports PowerShell common parameters such as Verbose, Debug, and ErrorAction, enabling users to customize script behavior. The script is lightweight, requires no external dependencies, and is suitable for quick location visualization.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-berlin-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-berlin-city.ps1 - Shows Berlin city in Google Maps\n\n# This script launches the Web browser with Google Maps at Berlin city (Germany).\n\n# Parameters\n```powershell\nshow-berlin-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n# Example Usage\n```powershell\nPS> ./show-berlin-city\n```\n\n# Notes\nAuthor: Markus Fleschutz · License: CC0\n\n# Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of show-berlin-city.ps1*\n```\n\n----------------------------------------\n\nTITLE: Declaring Parameters for Git Repository Synchronization Script in PowerShell\nDESCRIPTION: This PowerShell snippet defines the parameter structure and accepted common parameters for the sync-repo.ps1 script. The primary parameter 'path' specifies the Git repository location, with a default of the current directory, while standard PowerShell common parameters (such as Verbose, Debug) are also supported. The snippet provides context for how users specify input and what options are available when running the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/sync-repo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/sync-repo.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the Git repository (current working directory by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition and Usage Instructions for PowerShell Script\nDESCRIPTION: This PowerShell snippet provides the command-line interface and parameter documentation for download-file.ps1. The script accepts the -URL parameter to specify the download target, with support for common PowerShell parameters such as Verbose and Debug. The parameter block defines requirements, position, default values, and pipeline support, guiding users on input expectations and script usage. The snippet demonstrates usage patterns and available options for invoking the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/download-file.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/download-file.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies the URL where to download from\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Git Commits in Compact Format in PowerShell\nDESCRIPTION: This snippet uses `git log` to display Git commit information in a compact format. It adds headers and utilizes the `--graph` and `--abbrev-commit` options for a more concise and graphical representation. It utilizes custom formatting to present relevant commit data in a readable format.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t} elseif ($format -eq \"compact\") {\n\t\t\"\"\n\t\t\"List of Git Commits\"\n\t\t\"-------------------\"\n\t\t& git -C \"$pathToRepo\" log --graph --pretty=format:'%Cred%h%Creset%C(yellow)%d%Creset %s %C(bold blue)by %an %cr%Creset' --abbrev-commit\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git log' failed\" }\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell script parameters\nDESCRIPTION: This section defines the common parameters supported by the PowerShell script check-ether-rate.ps1. These parameters include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allowing for detailed control and error handling during script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ether-rate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ncheck-ether-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-repos.ps1\nDESCRIPTION: Demonstrates running the script against a specific repository directory and shows the output format with repository details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-repos.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-repos.ps1 C:\\MyRepos\n\n\n\nREPOSITORY   LATEST TAG   BRANCH    REMOTE URL                        STATUS\n----------   ----------   ------    ----------                        ------\n📂cmake      v3.30.2      master    https://github.com/Kitware/CMake  ✅clean ↓0\n...\n```\n\n----------------------------------------\n\nTITLE: Running Set-Profile Script Example\nDESCRIPTION: A simple example showing how to execute the set-profile script without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-profile.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./set-profile\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-flipboard-website.ps1\nDESCRIPTION: This example demonstrates how to execute the open-flipboard-website.ps1 script from the PowerShell prompt. It shows a basic invocation of the script, assuming it's located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-flipboard-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-flipboard-website\n```\n\n----------------------------------------\n\nTITLE: Using open-serenade-website.ps1 with Parameters\nDESCRIPTION: A code example showing the syntax and parameters for the open-serenade-website.ps1 script. It demonstrates how to call the script with common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-serenade-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-serenade-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Describing PowerShell Script Syntax and Parameters\nDESCRIPTION: Documents the command signature for the `open-baidu-website.ps1` PowerShell script, indicating it accepts standard PowerShell CommonParameters. It also provides a description of what CommonParameters are and their purpose in influencing script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-baidu-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-baidu-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DistroWatch Website Opening Script in PowerShell\nDESCRIPTION: A simple example showing how to run the open-distro-watch-website.ps1 script to open the DistroWatch website in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-distro-watch-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-distro-watch-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Calculating and Announcing Days Until New Year\nDESCRIPTION: This PowerShell script computes the number of days remaining until the upcoming New Year and uses an external script to vocalize the message via text-to-speech. It supports common PowerShell parameters for debugging and output management, and handles errors by reporting the script line number and error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/tell-new-year.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTells the time until New Year\n.DESCRIPTION\n\tThis PowerShell script calculates the time until New Year and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./tell-new-year.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$now = [DateTime]::Now\n\t$NewYear = [Datetime](\"12/31/\" + $now.Year)\n\t$days = ($NewYear – $now).Days + 1\n\tif ($days -gt 1) {\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"New Year is in $days days.\"\n\t} elseif ($days -eq 1) {\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"New Year is tomorrow.\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft Paint Application in PowerShell\nDESCRIPTION: Complete PowerShell script that launches Microsoft Paint application with error handling. The script calls start-process to execute mspaint.exe and includes error capture with line number reporting.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-paint.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Microsoft Paint app\n.DESCRIPTION\n\tThis script launches the Microsoft Paint application.\n.EXAMPLE\n\tPS> ./open-microsoft-paint\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tstart-process mspaint.exe\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Emoji Output Using PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script writes a single emoji (💩) to the console when executed. It supports standard PowerShell common parameters such as Verbose, Debug, and ErrorAction, but does not require any additional dependencies. The main functionality uses Write-Output to display the emoji and exits with a success code. Input is not required, and the script will ignore any provided arguments, always outputting the same result. Constraints: Only valid in PowerShell environments with UTF-8 output capability.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-shit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites shit\n.DESCRIPTION\n\tThis PowerShell script writes shit to the console (fun).\n.EXAMPLE\n\tPS> ./write-shit.ps1\n\t💩\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nWrite-Output \"💩\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Example Output of list-console-colors.ps1 in PowerShell Console\nDESCRIPTION: Shows the expected output format when running the `list-console-colors.ps1` script. It displays a table listing each console color name, followed by visual examples of that color used as foreground and background text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-console-colors.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-console-colors.ps1\n\n\n\nColor     As Foreground     As Background\n-----     -------------     -------------\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Syntax for open-wolfram-alpha-website.ps1\nDESCRIPTION: The formal parameter syntax for the open-wolfram-alpha-website.ps1 script. It accepts common PowerShell parameters such as Verbose, Debug, ErrorAction, etc., but doesn't require any specific parameters for its basic functionality.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wolfram-alpha-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nopen-wolfram-alpha-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Microsoft Bing Homepage\nDESCRIPTION: This script launches the web browser and navigates to the Microsoft Bing homepage. It does not require external dependencies beyond PowerShell itself and supports common parameters such as Verbose and Debug for troubleshooting. The script's primary purpose is to facilitate quick access to Bing via command-line execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-bing.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-microsoft-bing.ps1 - Opens the Microsoft Bing website\n\nThis script launches the Web browser with the Microsoft Bing website.\n\n## Parameters\n```powershell\n/home/markus/Repos/PowerShell/Scripts/open-microsoft-bing.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-microsoft-bing\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Gracefully Close the Snipping Tool\nDESCRIPTION: This PowerShell script closes the Snipping Tool application gracefully by invoking an external script 'close-program.ps1' with appropriate parameters. It supports common PowerShell parameters for flexible script execution and includes metadata annotations for documentation purposes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-snipping-tool.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Snipping Tool\n.DESCRIPTION\n\tThis PowerShell script closes the Snipping Tool application gracefully.\n.EXAMPLE\n\tPS> ./close-snipping-tool.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Snipping Tool\" \"SnippingTool.exe\" \"\"\necho exit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Using show-kansas-city.ps1 PowerShell Script\nDESCRIPTION: Example of how to execute the show-kansas-city.ps1 script from PowerShell to open Kansas City in Google Maps.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-kansas-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-kansas-city\n```\n\n----------------------------------------\n\nTITLE: Executing play-mp3.ps1 and Playing an MP3 in PowerShell\nDESCRIPTION: This PowerShell snippet defines a script that continuously plays an MP3 file (Big Ben) to wake up a human. It utilizes another script, play-mp3.ps1, which is expected to be located in the same directory and it's used to play the sound. The script runs in a loop, playing the sound indefinitely. Dependencies: play-mp3.ps1 script and an MP3 file of Big Ben. The expected output is the continuous playing of the audio.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wake-up-human.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWakes up an human\n.DESCRIPTION\n\tThis PowerShell script plays the sound of Big Ben to wake a human up.\n.EXAMPLE\n\tPS> ./wake-up-human.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ndo {\n\t& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/Big Ben.mp3\"\n} while ($true)\n```\n\n----------------------------------------\n\nTITLE: Invoking show-volkswagen-manual.ps1 with Common Parameters in PowerShell\nDESCRIPTION: This code snippet demonstrates the accepted parameter structure for running 'show-volkswagen-manual.ps1', including support for standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. Dependencies include PowerShell itself and access to a web browser. Expected input is script execution with optional named parameters; the script launches the Volkswagen manual URL in the system\\'s default browser. Output is the display of the manual in the browser; no values are returned to the script shell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-volkswagen-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-volkswagen-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Install Microsoft Teams using winget\nDESCRIPTION: This PowerShell script automates the installation of Microsoft Teams from the Microsoft Store via winget. It includes error handling to verify successful installation and outputs status messages. Dependencies include winget and internet connectivity; key parameters allow support for common PowerShell options. It outputs success or failure messages depending on the command result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-microsoft-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Microsoft Teams\n.DESCRIPTION\n\tThis PowerShell script installs Microsoft Teams from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-microsoft-teams.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Microsoft Teams, please wait...\"\n\n\t& winget install --id Microsoft.Teams --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Microsoft Teams installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for FTP File Upload in PowerShell\nDESCRIPTION: This PowerShell code defines the parameters for the upload-file.ps1 script. It specifies the expected input for the file path, FTP server URL, username, and password. The parameters are defined with their data types and descriptions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upload-file.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/upload-file.ps1 [[-File] <String>] [[-URL] <String>] [[-Username] <String>] [[-Password] <String>] [<CommonParameters>]\n\n-File <String>\n    Specifies the path to the local file\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-URL <String>\n    Specifies the FTP server URL\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Username <String>\n    Specifies the user name\n    \n    Required?                    false\n    Position?                    3\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Password <String>\n    Specifies the password\n    \n    Required?                    false\n    Position?                    4\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running Script Example in PowerShell\nDESCRIPTION: This example demonstrates how to execute the install-vlc.ps1 script from the PowerShell command line. It shows the expected output messages indicating the start of the installation process and the successful completion with the elapsed time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vlc.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-vlc.ps1\n⏳ Installing VLC media player...\n✅ Installation of VLC media player took 25 sec\n```\n\n----------------------------------------\n\nTITLE: Implementing Chrome Browser Launch Logic in PowerShell\nDESCRIPTION: This code represents the full implementation of the 'open-chrome.ps1' script, including parameter definition, main logic, and error handling. It defines a single parameter ('URL') with a default, attempts to start Chrome pointing to that URL using 'Start-Process', exits with code 0 on success, and on failure outputs a descriptive error message and exits with code 1. The script does not require external modules but does require Chrome to be installed and accessible as 'chrome.exe'.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-chrome.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Chrome browser\n.DESCRIPTION\n\tThis PowerShell script launches the Google Chrome Web browser.\n.EXAMPLE\n\tPS> ./open-chrome\n.PARAMETER URL\n\tSpecifies an optional URL\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$URL = \"http://www.fleschutz.de\")\n\ntry {\n\tStart-Process chrome.exe \"$URL\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-whats-app-website.ps1 Script in PowerShell\nDESCRIPTION: Shows the parameter block for the `open-whats-app-website.ps1` script. The script primarily utilizes the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction) and does not define any custom parameters for its operation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-whats-app-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-whats-app-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-music-folder.ps1\nDESCRIPTION: Demonstrates the basic execution of the script from a PowerShell prompt. The example shows how to run the script with its default parameters to open the music folder.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-music-folder.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-music-folder\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for poweroff.ps1 (PowerShell)\nDESCRIPTION: Specifies that the poweroff.ps1 script accepts the standard PowerShell CommonParameters (Verbose, Debug, ErrorAction, etc.). No unique script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/poweroff.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/poweroff.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-update-settings.ps1 in PowerShell\nDESCRIPTION: This snippet shows the parameter signature for the `open-update-settings.ps1` script. It indicates that the script primarily accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) for controlling script execution behavior, but has no script-specific custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-update-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-update-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Core Script Logic for Listing Unicode Emojis in PowerShell\nDESCRIPTION: This snippet contains the complete source code for the `list-emojis.ps1` script. The script primarily consists of comment-based help defining its purpose and usage, followed by a series of strings enclosed in double quotes. These strings are implicitly written to the console, displaying the header and the categorized lists of Unicode 13.0 emojis. The script concludes by exiting with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-emojis.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists available Emojis \n.DESCRIPTION\n\tThis PowerShell script lists the emojis of Unicode 13.0 sorted by category.\n.EXAMPLE\n\tPS> ./list-emojis.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n\"Emojis of Unicode 13.0 sorted by Category\"\n\"=========================================\"\n\"\"\n\"Smileys: 😀 😁 😂 🤣 😃 😄 😅 😆 😉 😊 😋 😎 😍 😘 🥰 😗 😙 😚 ☺️ 🙂 🤗 🤩 🤔 🤨 😐 😑 😶 🙄 😏 😣 😥 😮 🤐 😯 😪 😫 😴 😌 😛 😜 😝 🤤 😒 😓 😔 😕 🙃 🤑 😲 ☹️ 🙁 😖 😞 😟 😤 😢 😭 😦 😧 😨 😩 🤯 😬 😰 😱 🥵 🥶 😳 🤪 😵 😡 😠 🤬 😷 🤒 🤕 🤢 🤮 🤧 😇 🤠 🤡 🥳 🥴 🥺 🤥 🤫 🤭 🧐 🤓 😈 👿 👹 👺 💀 👻 👽 🤖 💩 😺 😸 😹 😻 😼 😽 🙀 😿 😾\"\n\"\"\n\"People: 👶 👧 🧒 👦 👩 🧑 👨 👵 🧓 👴 👲 👳‍♀️ 👳‍♂️ 🧕 🧔 👱‍♂️ 👱‍♀️ 👨‍🦰 👩‍🦰 👨‍🦱 👩‍🦱 👨‍🦲 👩‍🦲 👨‍🦳 👩‍🦳 🦸‍♀️ 🦸‍♂️ 🦹‍♀️ 🦹‍♂️ 👮‍♀️ 👮‍♂️ 👷‍♀️ 👷‍♂️ 💂‍♀️ 💂‍♂️ 🕵️‍♀️ 🕵️‍♂️ 👩‍⚕️ 👨‍⚕️ 👩‍🌾 👨‍🌾 👩‍🍳 👨‍🍳 👩‍🎓 👨‍🎓 👩‍🎤 👨‍🎤 👩‍🏫 👨‍🏫 👩‍🏭 👨‍🏭 👩‍💻 👨‍💻 👩‍💼 👨‍💼 👩‍🔧 👨‍🔧 👩‍🔬 👨‍🔬 👩‍🎨 👨‍🎨 👩‍🚒 👨‍🚒 👩‍✈️ 👨‍✈️ 👩‍🚀 👨‍🚀 👩‍⚖️ 👨‍⚖️ 👰 🤵 👸 🤴 🤶 🎅 🧙‍♀️ 🧙‍♂️ 🧝‍♀️ 🧝‍♂️ 🧛‍♀️ 🧛‍♂️ 🧟‍♀️ 🧟‍♂️ 🧞‍♀️ 🧞‍♂️ 🧜‍♀️ 🧜‍♂️ 🧚‍♀️ 🧚‍♂️ 👼 🤰 🤱 🙇‍♀️ 🙇‍♂️ 💁‍♀️ 💁‍♂️ 🙅‍♀️ 🙅‍♂️ 🙆‍♀️ 🙆‍♂️ 🙋‍♀️ 🙋‍♂️ 🤦‍♀️ 🤦‍♂️ 🤷‍♀️ 🤷‍♂️ 🙎‍♀️ 🙎‍♂️ 🙍‍♀️ 🙍‍♂️ 💇‍♀️ 💇‍♂️ 💆‍♀️ 💆‍♂️ 🧖‍♀️ 🧖‍♂️ 💅 🤳 💃 🕺 👯‍♀️ 👯‍♂️ 🕴 🚶‍♀️ 🚶‍♂️ 🏃‍♀️ 🏃‍♂️ 👫 👭 👬 💑 👩‍❤️‍👩 👨‍❤️‍👨 💏 👩‍❤️‍💋‍👩 👨‍❤️‍💋‍👨 👪 👨‍👩‍👧 👨‍👩‍👧‍👦 👨‍👩‍👦‍👦 👨‍👩‍👧‍👧 👩‍👩‍👦 👩‍👩‍👧 👩‍👩‍👧‍👦 👩‍👩‍👦‍👦 👩‍👩‍👧‍👧 👨‍👨‍👦 👨‍👨‍👧 👨‍👨‍👧‍👦 👨‍👨‍👦‍👦 👨‍👨‍👧‍👧 👩‍👦 👩‍👧 👩‍👧‍👦 👩‍👦‍👦 👩‍👧‍👧 👨‍👦 👨‍👧 👨‍👧‍👦 👨‍👦‍👦 👨‍👧‍👧 🤲 👐 🙌 👏 🤝 👍 👎 👊 ✊ 🤛 🤜 🤞 ✌️ 🤟 🤘 👌 👈 👉 👆 👇 ☝️ ✋ 🤚 🖐 🖖 👋 🤙 💪 🦵 🦶 🖕 ✍️ 🙏 💍 💄 💋 👄 👅 👂 👃 👣 👁 👀 🧠 🦴 🦷 🗣 👤 👥\"\n\"\"\n\"Clothings & Accessoires: 🧥 👚 👕 👖 👔 👗 👙 👘 👠 👡 👢 👞 👟 🥾 🥿 🧦 🧤 🧣 🎩 🧢 👒 🎓 ⛑ 👑 👝 👛 👜 💼 🎒 👓 🕶 🥽 🥼 🌂 🧵 🧶\"\n\"\"\n\"Animals & Nature: 🐶 🐱 🐭 🐹 🐰 🦊 🦝 🐻 🐼 🦘 🦡 🐨 🐯 🦁 🐮 🐷 🐽 🐸 🐵 🙈 🙉 🙊 🐒 🐔 🐧 🐦 🐤 🐣 🐥 🦆 🦢 🦅 🦉 🦚 🦜 🦇 🐺 🐗 🐴 🦄 🐝 🐛 🦋 🐌 🐚 🐞 🐜 🦗 🕷 🕸 🦂 🦟 🦠 🐢 🐍 🦎 🦖 🦕 🐙 🦑 🦐 🦀 🐡 🐠 🐟 🐬 🐳 🐋 🦈 🐊 🐅 🐆 🦓 🦍 🐘 🦏 🦛 🐪 🐫 🦙 🦒 🐃 🐂 🐄 🐎 🐖 🐏 🐑 🐐 🦌 🐕 🐩 🐈 🐓 🦃 🕊 🐇 🐁 🐀 🐿 🦔 🐾 🐉 🐲 🌵 🎄 🌲 🌳 🌴 🌱 🌿 ☘️ 🍀 🎍 🎋 🍃 🍂 🍁 🍄 🌾 💐 🌷 🌹 🥀 🌺 🌸 🌼 🌻 🌞 🌝 🌛 🌜 🌚 🌕 🌖 🌗 🌘 🌑 🌒 🌓 🌔 🌙 🌎 🌍 🌏 💫 ⭐️ 🌟 ✨ ⚡️ ☄️ 💥 🔥 🌪 🌈 ☀️ 🌤 ⛅️ 🌥 ☁️ 🌦 🌧 ⛈ 🌩 🌨 ❄️ ☃️ ⛄️ 🌬 💨 💧 💦 ☔️ ☂️ 🌊 🌫\"\n\"\"\n\"Foods & Drinks: 🍏 🍎 🍐 🍊 🍋 🍌 🍉 🍇 🍓 🍈 🍒 🍑 🍍 🥭 🥥 🥝 🍅 🍆 🥑 🥦 🥒 🥬 🌶 🌽 🥕 🥔 🍠 🥐 🍞 🥖 🥨 🥯 🧀 🥚 🍳 🥞 🥓 🥩 🍗 🍖 🌭 🍔 🍟 🍕 🥪 🥙 🌮 🌯 🥗 🥘 🥫 🍝 🍜 🍲 🍛 🍣 🍱 🥟 🍤 🍙 🍚 🍘 🍥 🥮 🥠 🍢 🍡 🍧 🍨 🍦 🥧 🍰 🎂 🍮 🍭 🍬 🍫 🍿 🧂 🍩 🍪 🌰 🥜 🍯 🥛 🍼 ☕️ 🍵 🥤 🍶 🍺 🍻 🥂 🍷 🥃 🍸 🍹 🍾 🥄 🍴 🍽 🥣 🥡 🥢\"\n\"\"\n\"Sport & Hobbby: ⚽️ 🏀 🏈 ⚾️ 🥎 🏐 🏉 🎾 🥏 🎱 🏓  Badminton 🥅 🏒 🏑 🥍 🏏 ⛳️ 🏹 🎣 🥊 🥋 🎽 ⛸ 🥌 🛷 🛹 🎿 ⛷ 🏂 🏋️‍♀️ 🏋🏻‍♀️ 🏋🏼‍♀️ 🏋🏽‍♀️ 🏋🏾‍♀️ 🏋🏿‍♀️ 🏋️‍♂️ 🏋🏻‍♂️ 🏋🏼‍♂️ 🏋🏽‍♂️ 🏋🏾‍♂️ 🏋🏿‍♂️ 🤼‍♀️ 🤼‍♂️ 🤸‍♀️ 🤸🏻‍♀️ 🤸🏼‍♀️ 🤸🏽‍♀️ 🤸🏾‍♀️ 🤸🏿‍♀️ 🤸‍♂️ 🤸🏻‍♂️ 🤸🏼‍♂️ 🤸🏽‍♂️ 🤸🏾‍♂️ 🤸🏿‍♂️ ⛹️‍♀️ ⛹🏻‍♀️ ⛹🏼‍♀️ ⛹🏽‍♀️ ⛹🏾‍♀️ ⛹🏿‍♀️ ⛹️‍♂️ ⛹🏻‍♂️ ⛹🏼‍♂️ ⛹🏽‍♂️ ⛹🏾‍♂️ ⛹🏿‍♂️ 🤺 🤾‍♀️ 🤾🏻‍♀️ 🤾🏼‍♀️ 🤾🏾‍♀️ 🤾🏾‍♀️ 🤾🏿‍♀️ 🤾‍♂️ 🤾🏻‍♂️ 🤾🏼‍♂️ 🤾🏽‍♂️ 🤾🏾‍♂️ 🤾🏿‍♂️ 🏌️‍♀️ 🏌🏻‍♀️ 🏌🏼‍♀️ 🏌🏽‍♀️ 🏌🏾‍♀️ 🏌🏿‍♀️ 🏌️‍♂️ 🏌🏻‍♂️ 🏌🏼‍♂️ 🏌🏽‍♂️ 🏌🏾‍♂️ 🏌🏿‍♂️ 🏇 🏇🏻 🏇🏼 🏇🏽 🏇🏾 🏇🏿 🧘‍♀️ 🧘🏻‍♀️ 🧘🏼‍♀️ 🧘🏽‍♀️ 🧘🏾‍♀️ 🧘🏿‍♀️ 🧘‍♂️ 🧘🏻‍♂️ 🧘🏼‍♂️ 🧘🏽‍♂️ 🧘🏾‍♂️ 🧘🏿‍♂️ 🏄‍♀️ 🏄🏻‍♀️ 🏄🏼‍♀️ 🏄🏽‍♀️ 🏄🏾‍♀️ 🏄🏿‍♀️ 🏄‍♂️ 🏄🏻‍♂️ 🏄🏼‍♂️ 🏄🏽‍♂️ 🏄🏾‍♂️ 🏄🏿‍♂️ 🏊‍♀️ 🏊🏻‍♀️ 🏊🏼‍♀️ 🏊🏽‍♀️ 🏊🏾‍♀️ 🏊🏿‍♀️ 🏊‍♂️ 🏊🏻‍♂️ 🏊🏼‍♂️ 🏊🏽‍♂️ 🏊🏾‍♂️ 🏊🏿‍♂️ 🤽‍♀️ 🤽🏻‍♀️ 🤽🏼‍♀️ 🤽🏽‍♀️ 🤽🏾‍♀️ 🤽🏿‍♀️ 🤽‍♂️ 🤽🏻‍♂️ 🤽🏼‍♂️ 🤽🏽‍♂️ 🤽🏾‍♂️ 🤽🏿‍♂️ 🚣‍♀️ 🚣🏻‍♀️ 🚣🏼‍♀️ 🚣🏽‍♀️ 🚣🏾‍♀️ 🚣🏿‍♀️ 🚣‍♂️ 🚣🏻‍♂️ 🚣🏼‍♂️ 🚣🏽‍♂️ 🚣🏾‍♂️ 🚣🏿‍♂️ 🧗‍♀️ 🧗🏻‍♀️ 🧗🏼‍♀️ 🧗🏽‍♀️ 🧗🏾‍♀️ 🧗🏿‍♀️ 🧗‍♂️ 🧗🏻‍♂️ 🧗🏼‍♂️ 🧗🏽‍♂️ 🧗🏾‍♂️ 🧗🏿‍♂️ 🚵‍♀️ 🚵🏻‍♀️ 🚵🏼‍♀️ 🚵🏽‍♀️ 🚵🏾‍♀️ 🚵🏿‍♀️ 🚵‍♂️ 🚵🏻‍♂️ 🚵🏼‍♂️ 🚵🏽‍♂️ 🚵🏾‍♂️ 🚵🏿‍♂️ 🚴‍♀️ 🚴🏻‍♀️ 🚴🏼‍♀️ 🚴🏽‍♀️ 🚴🏾‍♀️ 🚴🏿‍♀️ 🚴‍♂️ 🚴🏻‍♂️ 🚴🏼‍♂️ 🚴🏽‍♂️ 🚴🏾‍♂️ 🚴🏿‍♂️ 🏆 🥇 🥈 🥉 🏅 🎖 🏵 🎗 🎫 🎟 🎪 🤹‍♀️ 🤹🏻‍♀️ 🤹🏼‍♀️ 🤹🏽‍♀️ 🤹🏾‍♀️ 🤹🏿‍♀️ 🤹‍♂️ 🤹🏻‍♂️ 🤹🏼‍♂️ 🤹🏽‍♂️ 🤹🏾‍♂️ 🤹🏿‍♂️ 🎭 🎨 🎬 🎤 🎧 🎼 🎹 🥁 🎷 🎺 🎸 🎻 🎲 🧩 ♟ 🎯 🎳 🎮 🎰\"\n\"\"\n\"Travel & Locations: 🚗 🚕 🚙 🚌 🚎 🏎 🚓 🚑 🚒 🚐 🚚 🚛 🚜 🛴 🚲 🛵 🏍 🚨 🚔 🚍 🚘 🚖 🚡 🚠 🚟 🚃 🚋 🚞 🚝 🚄 🚅 🚈 🚂 🚆 🚇 🚊 🚉 ✈️ 🛫 🛬 🛩 💺 🛰 🚀 🛸 🚁 🛶 ⛵️ 🚤 🛥 🛳 ⛴ 🚢 ⚓️ ⛽️ 🚧 🚦 🚥 🚏 🗺 🗿 🗽 🗼 🏰 🏯 🏟 🎡 🎢 🎠 ⛲️ ⛱ 🏖 🏝 🏜 🌋 ⛰ 🏔 🗻 🏕 ⛺️ 🏠 🏡 🏘 🏚 🏗 🏭 🏢 🏬 🏣 🏤 🏥 🏦 🏨 🏪 🏫 🏩 💒 🏛 ⛪️ 🕌 🕍 🕋 ⛩ 🛤 🛣 🗾 🎑 🏞 🌅 🌄 🌠 🎇 🎆 🌇 🌆 🏙 🌃 🌌 🌉 🌁\"\n\"\"\n\"Objects: ⌚️ 📱 📲 💻 ⌨️ 🖥 🖨 🖱 🖲 🕹 🗜 💽 💾 💿 📀 📼 📷 📸 📹 🎥 📽 🎞 📞 ☎️ 📟 📠 📺 📻 🎙 🎚 🎛 ⏱ ⏲ ⏰ 🕰 ⌛️ ⏳ 📡 🔋 🔌 💡 🔦 🕯 🗑 🛢 💸 💵 💴 💶 💷 💰 💳 🧾 💎 ⚖️ 🔧 🔨 ⚒ 🛠 ⛏ 🔩 ⚙️ ⛓ 🔫 💣 🔪 🗡 ⚔️ 🛡 🚬 ⚰️ ⚱️ 🏺 🧭 🧱 🔮 🧿 🧸 📿 💈 ⚗️ 🔭 🧰 🧲 🧪 🧫 🧬 🧯 🔬 🕳 💊 💉 🌡 🚽 🚰 🚿 🛁 🛀 🛀🏻 🛀🏼 🛀🏽 🛀🏾 🛀🏿 🧴 🧵 🧶 🧷 🧹 🧺 🧻 🧼 🧽 🛎 🔑 🗝 🚪 🛋 🛏 🛌 🖼 🛍 🧳 🛒 🎁 🎈 🎏 🎀 🎊 🎉 🧨 🎎 🏮 🎐 🧧 ✉️ 📩 📨 📧 💌 📥 📤 📦 🏷 📪 📫 📬 📭 📮 📯 📜 📃 📄 📑 📊 📈 📉 🗒 🗓 📆 📅 📇 🗃 🗳 🗄 📋 📁 📂 🗂 🗞 📰 📓 📔 📒 📕 📗 📘 📙 📚 📖 🔖 🔗 📎 🖇 📐 📏 📌 📍 ✂️ 🖊 🖋 ✒️ 🖌 🖍 📝 ✏️ 🔍 🔎 🔏 🔐 🔒 🔓\"\n\"\"\n\"Symbols: ❤️ 🧡 💛 💚 💙 💜 🖤 💔 ❣️ 💕 💞 💓 💗 💖 💘 💝 💟 ☮️ ✝️ ☪️ 🕉 ☸️ ✡️ 🔯 🕎 ☯️ ☦️ 🛐 ⛎ ♈️ ♉️ ♊️ ♋️ ♌️ ♍️ ♎️ ♏️ ♐️ ♑️ ♒️ ♓️ 🆔 ⚛️ 🉑 ☢️ ☣️ 📴 📳 🈶 🈚️ 🈸 🈺 🈷️ ✴️ 🆚 💮 🉐 ㊙️ ㊗️ 🈴 🈵 🈹 🈲 🅰️ 🅱️ 🆎 🆑 🅾️ 🆘 ❌ ⭕️ 🛑 ⛔️ 📛 🚫 💯 💢 ♨️ 🚷 🚯 🚳 🚱 🔞 📵 🚭 ❗️ ❕ ❓ ❔ ‼️ ⁉️ 🔅 🔆 〽️ ⚠️ 🚸 🔱 ⚜️ 🔰 ♻️ ✅ 🈯️ 💹 ❇️ ✳️ ❎ 🌐 💠 Ⓜ️ 🌀 💤 🏧 🚾 ♿️ 🅿️ 🈳 🈂️ 🛂 🛃 🛄 🛅 🚹 🚺 🚼 🚻 🚮 🎦 📶 🈁 🔣 ℹ️ 🔤 🔡 🔠 🆖 🆗 🆙 🆒 🆕 🆓 0️⃣ 1️⃣ 2️⃣ 3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔢 #️⃣ *️⃣ ⏏️ ▶️ ⏸ ⏯ ⏹ ⏺ ⏭ ⏮ ⏩ ⏪ ⏫ ⏬ ◀️ 🔼 🔽 ➡️ ⬅️ ⬆️ ⬇️ ↗️ ↘️ ↙️ ↖️ ↕️ ↔️ ↪️ ↩️ ⤴️ ⤵️ 🔀 🔁 🔂 🔄 🔃 🎵 🎶 ➕ ➖ ➗ ✖️ ♾ 💲 💱 ™️ ©️ ®️ 〰️ ➰ ➿ 🔚 🔙 🔛 🔝 🔜 ✔️ ☑️ 🔘 ⚪️ ⚫️ 🔴 🔵 🔺 🔻 🔸 🔹 🔶 🔷 🔳 🔲 ▪️ ▫️ ◾️ ◽️ ◼️ ◻️ ⬛️ ⬜️ 🔈 🔇 🔉 🔊 🔔 🔕 📣 📢 👁‍🗨 💬 💭 🗯 ♠️ ♣️ ♥️ ♦️ 🃏 🎴 🀄️ 🕐 🕑 🕒 🕓 🕔 🕕 🕖 🕗 🕘 🕙 🕚 🕛 🕜 🕝 🕞 🕟 🕠 🕡 🕢 🕣 🕤 🕥 🕦 🕧\"\n\"\"\n\"Flags: 🏳️ 🏴 🏁 🚩 🏳️‍🌈 🏴‍☠️ 🇦🇫 🇦🇽 🇦🇱 🇩🇿 🇦🇸 🇦🇩 🇦🇴 🇦🇮 🇦🇶 🇦🇬 🇦🇷 🇦🇲 🇦🇼 🇦🇺 🇦🇹 🇦🇿 🇧🇸 🇧🇭 🇧🇩 🇧🇧 🇧🇾 🇧🇪 🇧🇿 🇧🇯 🇧🇲 🇧🇹 🇧🇴 🇧🇦 🇧🇼 🇧🇷 🇮🇴 🇻🇬 🇧🇳 🇧🇬 🇧🇫 🇧🇮 🇰🇭 🇨🇲 🇨🇦 🇮🇨 🇨🇻 🇧🇶 🇰🇾 🇨🇫 🇹🇩 🇨🇱 🇨🇳 🇨🇽 🇨🇨 🇨🇴 🇰🇲 🇨🇬 🇨🇩 🇨🇰 🇨🇷 🇨🇮 🇭🇷 🇨🇺 🇨🇼 🇨🇾 🇨🇿 🇩🇰 🇩🇯 🇩🇲 🇩🇴 🇪🇨 🇪🇬 🇸🇻 🇬🇶 🇪🇷 🇪🇪 🇪🇹 🇪🇺 🇫🇰 🇫🇴 🇫🇯 🇫🇮 🇫🇷 🇬🇫 🇵🇫 🇹🇫 🇬🇦 🇬🇲 🇬🇪 🇩🇪 🇬🇭 🇬🇮 🇬🇷 🇬🇱 🇬🇩 🇬🇵 🇬🇺 🇬🇹 🇬🇬 🇬🇳 🇬🇼 🇬🇾 🇭🇹 🇭🇳 🇭🇰 🇭🇺 🇮🇸 🇮🇳 🇮🇩 🇮🇷 🇮🇶 🇮🇪 🇮🇲 🇮🇱 🇮🇹 🇯🇲 🇯🇵 🎌 🇯🇪 🇯🇴 🇰🇿 🇰🇪 🇰🇮 🇽🇰 🇰🇼 🇰🇬 🇱🇦 🇱🇻 🇱🇧 🇱🇸 🇱🇷 🇱🇾 🇱🇮 🇱🇹 🇱🇺 🇲🇴 🇲🇰 🇲🇬 🇲🇼 🇲🇾 🇲🇻 🇲🇱 🇲🇹 🇲🇭 🇲🇶 🇲🇷 🇲🇺 🇾🇹 🇲🇽 🇫🇲 🇲🇩 🇲🇨 🇲🇳 🇲🇪 🇲🇸 🇲🇦 🇲🇿 🇲🇲 🇳🇦 🇳🇷 🇳🇵 🇳🇱 🇳🇨 🇳🇿 🇳🇮 🇳🇪 🇳🇬 🇳🇺 🇳🇫 🇰🇵 🇲🇵 🇳🇴 🇴🇲 🇵🇰 🇵🇼 🇵🇸 🇵🇦 🇵🇬 🇵🇾 🇵🇪 🇵🇭 🇵🇳 🇵🇱 🇵🇹 🇵🇷 🇶🇦 🇷🇪 🇷🇴 🇷🇺 🇷🇼 🇼🇸 🇸🇲 🇸🇦 🇸🇳 🇷🇸 🇸🇨 🇸🇱 🇸🇬 🇸🇽 🇸🇰 🇸🇮 🇬🇸 🇸🇧 🇸🇴 🇿🇦 🇰🇷 🇸🇸 🇪🇸 🇱🇰 🇧🇱 🇸🇭 🇰🇳 🇱🇨 🇵🇲 🇻🇨 🇸🇩 🇸🇷 🇸🇿 🇸🇪 🇨🇭 🇸🇾 🇹🇼 🇹🇯 🇹🇿 🇹🇭 🇹🇱 🇹🇬 🇹🇰 🇹🇴 🇹🇹 🇹🇳 🇹🇷 🇹🇲 🇹🇨 🇹🇻 🇻🇮 🇺🇬 🇺🇦 🇦🇪 🇬🇧 🏴󠁧󠁢󠁥󠁮󠁧󠁿 🏴󠁧󠁢󠁳󠁣󠁴󠁿 🏴󠁧󠁢󠁷󠁬󠁳󠁿 🇺🇳 🇺🇸 🇺🇾 🇺🇿 🇻🇺 🇻🇦 🇻🇪 🇻🇳 🇼🇫 🇪🇭 🇾🇪 🇿🇲 🇿🇼\"\n\"\"\n\"Arrows: ← → ↑ ↓ ↔ ↕ ↖ ↗ ↘ ↙ ⤡ ⤢ ↚ ↛ ↮ ⟵ ⟶ ⟷ ⇦ ⇨ ⇧ ⇩ ⬄ ⇳ ⬁ ⬀ ⬂ ⬃ ⬅ ( ⮕ ➡ ) ⬆ ⬇ ⬉ ⬈ ⬊ ⬋ ⬌ ⬍ 🡐 🡒 🡑 🡓 🡔 🡕 🡖 🡗 🡘 🡙 🠹 🠸 🠻 🠺 🡄 🡆 🡅 🡇 🠼 🠾 🠽 🠿 🡀 🡂 🡁 🡃 🠐 🠒 🠑 🠓 🠔 🠖 🠕 🠗 🠘 🠚 🠙 🠛 🠜 🠞 🠝 🠟 ⭠ ⭢ ⭡ ⭣ ⭤ ⭥ ⭦ ⭧ ⭨ ⭩ 🠀 🠂 🠁 🠃 🠄 🠆 🠅 🠇 🠈 🠊 🠉 🠋 🠠 🠢 🠡 🠣 🠤 🠦 🠥 🠧 🠨 🠪 🠩 🠫 🠬 🠮 🠭 🠯 🠰 🠲 🠱 🠳 🡠 🡢 🡡 🡣 🡤 🡥 🡦 🡧 🡨 🡪 🡩 🡫 🡬 🡭 🡮 🡯 🡰 🡲 🡱 🡳 🡴 🡵 🡶 🡷 🡸 🡺 🡹 🡻 🡼 🡽 🡾 🡿 🢀 🢂 🢁 🢃 🢄 🢅 🢆 🢇 ⮈ ⮊ ⮉ ⮋ ➲ ⮜ ⮞ ⮝ ⮟ ⮘ ⮚ ⮙ ⮛ ➢ ➣ ➤\"\n\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Core Script Logic (PowerShell)\nDESCRIPTION: This snippet contains the complete source code for the open-google-docs.ps1 script. It includes the comment-based help block defining synopsis, description, example, link, and notes. The functional part calls an external script 'open-default-browser.ps1' with the Google Docs URL and then exits successfully.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-docs.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Docs\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Docs website.\n.EXAMPLE\n\tPS> ./open-google-docs\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://docs.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Using write-credits.ps1 PowerShell Script\nDESCRIPTION: Example showing how to execute the write-credits.ps1 script without any parameters. The script doesn't require any input parameters to run.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-credits.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-credits.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for install-paint-3d.ps1 Script\nDESCRIPTION: Shows the command-line syntax for the `install-paint-3d.ps1` script. It primarily highlights the availability of standard PowerShell CommonParameters like Verbose, Debug, ErrorAction, etc., which can be used to control script execution behavior. No specific custom parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-paint-3d.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-paint-3d.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing User Groups using Get-LocalGroup - PowerShell\nDESCRIPTION: This PowerShell script lists the user groups on the local computer using the `Get-LocalGroup` cmdlet. The script also includes a try-catch block for error handling, which captures and displays any errors that occur during the execution of the `Get-LocalGroup` command. The script will exit with a status code indicating success (0) or failure (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-user-groups.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the user groups\n.DESCRIPTION\n\tThis PowerShell script lists the user groups of the local computer.\n.EXAMPLE\n\tPS> ./list-user-groups.ps1\n\n\tName                 Description\n\t----\t                 -----------\n\tAdministrators\t       Administrators have complete and unrestricted access to the computer/domain\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-LocalGroup\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Speak Greek Text with TTS - PowerShell\nDESCRIPTION: This PowerShell script speaks the given text with a Greek text-to-speech (TTS) voice. It uses the `SAPI.SPVoice` COM object to find a Greek voice and speak the provided or user-entered text. The script handles errors if no Greek voice is found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-greek.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Greek\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Greek text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Greek text to speak\n.EXAMPLE\n\tPS> ./speak-greek.ps1 \"γεια\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Greek text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($Voice in $TTS.GetVoices()) {\n\t\tif ($Voice.GetDescription() -like \"*- Greek*\") { \n\t\t\t$TTS.Voice = $Voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Greek text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Script Execution Example (PowerShell)\nDESCRIPTION: This example demonstrates the fundamental way to run the `show-blender-manual.ps1` script from a PowerShell prompt. It shows invoking the script using its relative path `./show-blender-manual`. This usage does not include any common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-blender-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-blender-manual\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Common Parameters in PowerShell Script\nDESCRIPTION: Highlights the inclusion of support for standard PowerShell common parameters such as Verbose, Debug, ErrorAction, and others. This allows users to control script behavior with these built-in parameters when executing the script. The parameters enhance debugging, error handling, and output formatting capabilities. This snippet shows the declaration but does not include additional implementation details since PowerShell adds support automatically when declared.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-city-weather.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Parameters in PowerShell Script\nDESCRIPTION: This snippet outlines the syntax and parameters for the PowerShell script locate-city.ps1. It specifies the optional -city parameter for the city name, and documents support for standard common parameters like Verbose, Debug, ErrorAction, and others. The context ensures users know the expected arguments, default values, and pipeline/wildcard support before executing the script. No external dependencies are needed other than PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/locate-city.ps1 [[-city] <String>] [<CommonParameters>]\n\n-city <String>\n    Specifies the name of the city to look for\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open Google Search in Default Browser\nDESCRIPTION: This PowerShell script invokes another script to open Google Search in the default web browser. It includes a help comment block with synopsis, description, example, link, and author notes. The script executes the secondary script with the Google URL and exits with a success status. It requires 'open-default-browser.ps1' to be present in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-search.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Search\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Search website.\n.EXAMPLE\n\tPS> ./open-google-search\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Implementing open-fire-place.ps1 (PowerShell)\nDESCRIPTION: Displays the full source code of the 'open-fire-place.ps1' script. It includes standard PowerShell comment-based help (synopsis, description, example, link, notes). The script's core functionality involves calling another script, 'open-default-browser.ps1' (expected in the same directory, $PSScriptRoot), passing the URL 'https://freefireplaces.com' as an argument, and then exiting with a status code of 0 to indicate success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fire-place.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens a fire place website\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with a fire place website.\n.EXAMPLE\n\tPS> ./open-fire-place\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://freefireplaces.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Installing Opera GX using winget - PowerShell\nDESCRIPTION: This PowerShell script installs Opera GX from the Microsoft Store.  It uses the `winget` command to install the application, including necessary flags to accept agreements.  The script also includes basic error handling, catching exceptions and displaying error messages if the installation fails. It checks the exit code of the `winget install` command.  It expects `winget` to be available on the system (Windows 10 2004 or later and Windows 11).  The output is a success or error message with the line number where the error occurred.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-opera-gx.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Opera GX\n.DESCRIPTION\n\tThis PowerShell script installs Opera GX from Microsoft Store.\n.EXAMPLE\n\tPS> ./install-opera-gx.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Opera GX, please wait...\"\n\n\t& winget install \"Opera GX\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Opera GX installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Volume Adjustment in PowerShell Script\nDESCRIPTION: This snippet outlines the parameter set for the 'turn-volume-up.ps1' script. The primary parameter is '-percent', an optional integer to specify the percentage increase in volume (default: 10). The script also supports standard PowerShell common parameters such as Verbose and Debug for enhanced control during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-up.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/turn-volume-up.ps1 [[-percent] <Int32>] [<CommonParameters>]\n\n-percent <Int32>\n    Specifies the percent number\n    \n    Required?                    false\n    Position?                    1\n    Default value                10\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Execution Example\nDESCRIPTION: This snippet demonstrates how to execute the open-google-stadia.ps1 script from the PowerShell console. It shows the basic command required to run the script, which is simply calling the script's name prefixed with './' to indicate the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-stadia.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-google-stadia\n```\n\n----------------------------------------\n\nTITLE: PowerShell Example Invocation\nDESCRIPTION: This example demonstrates how to invoke the `give-reply.ps1` script with the `-text` parameter set to \"Hello World\". It shows the command that would be executed in the PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/give-reply.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./give-reply \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Using open-help.ps1 - PowerShell Script\nDESCRIPTION: This PowerShell script opens several browser tabs with key PowerShell help pages for the user, utilizing supporting local scripts for formatted output and URL launching. Dependencies include write-typewriter.ps1 for message display and open-URL.ps1 for opening web pages; both should be located in the same $PSScriptRoot directory. Parameters supported are all PowerShell common parameters, and the user can invoke the script directly. The script provides visible feedback, robust error handling with try/catch, and notes on interacting with links. Expected input is simply running the script; output is the opening of browser tabs to official documentation, tutorials, FAQs, and cheat sheets, with a focus on error resilience.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-help.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Provide help to the user\n.DESCRIPTION\n        This PowerShell script launches new tabs in the Web browser with help pages.\n.EXAMPLE\n        PS> ./open-help.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"\"\n\t& \"$PSScriptRoot/write-typewriter.ps1\" \"OK - DON'T PANIC - HELP IS ON THE WAY...\" 150\n\t\"\"\n\t& \"$PSScriptRoot/open-URL.ps1\" -text \"1. See the official PowerShell documentation at: \" \"https://docs.microsoft.com/en-us/powershell\" \n\tStart-Sleep -milliseconds 50\n\n\t& \"$PSScriptRoot/open-URL.ps1\" -text \"2. A PowerShell tutorial is at: \" \"https://www.guru99.com/powershell-tutorial.html\" \n\tStart-Sleep -milliseconds 50\n\n\t& \"$PSScriptRoot/open-URL.ps1\" -text \"3. PowerShell FAQ's can be found here: \" \"https://github.com/fleschutz/PowerShell/blob/main/docs/FAQ.md\" \n\tStart-Sleep -milliseconds 50\n\n\t& \"$PSScriptRoot/open-URL.ps1\" -text \"4. A PowerShell Cheat Sheet is at: \" \"https://github.com/fleschutz/PowerShell/blob/main/docs/cheat-sheet.md\"\n\t\"\"\n\t\"NOTE: Use <Ctrl> + <Click> to open the links in your browser.\"\n        exit 0 # success\n} catch {\n        \"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing open-world-news-website.ps1 in PowerShell\nDESCRIPTION: Demonstrates how to run the `open-world-news-website.ps1` script from the PowerShell command line. Executing this command will open the default web browser to the Reuters World News website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-world-news-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-world-news-website\n```\n\n----------------------------------------\n\nTITLE: Script Parameters for check-date.ps1 PowerShell\nDESCRIPTION: This snippet shows the general syntax for running the check-date.ps1 script and lists the standard PowerShell common parameters it supports.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-date.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-date.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Execution Example PowerShell\nDESCRIPTION: Provides a straightforward example demonstrating how to execute the script from a PowerShell console. This snippet shows the simplest way to run the uninstall process without specifying any additional parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-visual-studio-code.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-visual-studio-code\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Play Elk Sound\nDESCRIPTION: This snippet contains the complete PowerShell script that plays an elk sound by invoking an external script 'play-mp3.ps1' with the specified sound file path. It includes metadata comments, parameter support, and a success exit code. The script relies on the PowerShell environment and assumes the external script exists at the given path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-elk-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays an elk sound\n.DESCRIPTION\n\tThis PowerShell script plays an elk sound.\n.EXAMPLE\n\tPS> ./play-elk-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$(PSScriptRoot)/play-mp3.ps1\" \"$(PSScriptRoot)/../data/sounds/elk.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Invoking Windows WLAN Settings Script Using PowerShell\nDESCRIPTION: This snippet demonstrates how to invoke the 'open-wifi-settings.ps1' PowerShell script to launch the Windows WLAN settings application. The script supports standard PowerShell common parameters such as Verbose, Debug, and ErrorAction, allowing for flexible execution configurations. No required arguments are needed for basic usage; the script is intended for environments with access to the Windows platform and requires no additional dependencies.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wifi-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-wifi-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Usage Parameters for check-santa.ps1\nDESCRIPTION: Shows the command-line parameters supported by the check-santa.ps1 script, including common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-santa.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-santa.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Linux Snaps with PowerShell\nDESCRIPTION: This script installs 19 basic Linux snaps including development tools, applications, and servers. It verifies Linux is the operating system, uses sudo to install the snaps, and provides timing feedback. The script handles errors through try-catch and provides a clear success or failure message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-basic-snaps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls basic Linux snaps \n.DESCRIPTION\n\tThis PowerShell script installs 18 basic Linux snaps.\n.EXAMPLE\n\tPS> ./install-basic-snaps.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\tif (!$IsLinux) { throw \"Only Linux currently support snaps\" }\n\n\t\"⏳ Installing 19 Snaps (sorted alphabetically)...\"\n\tsudo snap install ant\n\tsudo snap install audacity\n\tsudo snap install bashtop\n\tsudo snap install chromium\n\tsudo snap install cmake\n\tsudo snap install cups\n\tsudo snap install emacs --classic\n\tsudo snap install ffmpeg --edge\n\tsudo snap install firefox\n\tsudo snap install gimp\n\tsudo snap install go\n\tsudo snap install gradle --classic\n\tsudo snap install groovy --classic\n\tsudo snap install hugo\n\tsudo snap install jenkins --edge --classic \n\tsudo snap install nano --classic\n\tsudo snap install nextcloud\n\tsudo snap install node --classic\n\tsudo snap install plexmediaserver\n\t\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ installed 19 Snaps in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Mouse Pointer - PowerShell\nDESCRIPTION: This snippet contains the core logic of the PowerShell script to move the mouse pointer. It first adds the necessary System.Windows.Forms assembly, then checks if explicit x/y coordinates are provided (defaulting to -1). If not, it retrieves the current cursor position and offsets it slightly (+5 pixels). Finally, it sets the cursor position using the System.Drawing.Point object and includes basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/move-mouse-pointer.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n        Moves the mouse pointer\n.DESCRIPTION\n        This PowerShell script moves the mouse pointer either to the given x/y coordinate or just slightly.\n.PARAMETER x\n        Specifies the x coordinate in pixels\n.PARAMETER y\n        Specifies the y coordinate in pixels\n.EXAMPLE\n        PS> ./move-mouse-pointer.ps1 100 100\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$x = -1, [int]$y = -1)\n\ntry {\n\tAdd-Type -AssemblyName System.Windows.Forms\n\n\tif (($x -eq -1) -and ($y -eq -1)) {\n\t\t$Pos = [System.Windows.Forms.Cursor]::Position\n\t\t$x = $pos.X + 5\n\t\t$y = $pos.Y + 5\n\t}\n\t[System.Windows.Forms.Cursor]::Position = New-Object System.Drawing.Point($x, $y)\n\texit 0 # success\n} catch {\n        \"‼️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Lookup Script Logic PowerShell\nDESCRIPTION: This core script snippet defines parameters, handles missing inputs by prompting the user, imports data from a `zip-codes.csv` file located two directories up, iterates through the data to find a match for the provided country and zip code, prints the location details if found, and exits with a success code (0) or throws an error if no match is found, resulting in an exit code (1). It depends on the existence and format of the `../data/zip-codes.csv` file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-zip-code.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the geo location of a zip-code\n.DESCRIPTION\n\tThis PowerShell script prints the geographic location of the given zip-code.\n.PARAMETER CountryCode\n\tSpecifies the country code\n.PARAMETER ZipCode\n\tSpecifies the zip code\n.EXAMPLE\n\tPS> ./locate-zip-code.ps1 de 87600\n\t* DE 87600 Kaufbeuren is at 47.8824°N, 10.6219°W\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$CountryCode = \"\", [string]$ZipCode = \"\")\n\ntry {\n\tif ($CountryCode -eq \"\" ) { $CountryCode = read-host \"Enter the country code\" }\n\tif ($ZipCode -eq \"\" ) { $ZipCode = read-host \"Enter the zip code\" }\n\n\twrite-progress \"Reading zip-codes.csv...\"\n\t$Table = import-csv \"$PSScriptRoot/../data/zip-codes.csv\"\n\n\t$FoundOne = 0\n\tforeach($Row in $Table) {\n\t\tif ($Row.country -eq $CountryCode) {\n\t\t\tif ($Row.postal_code -eq $ZipCode) {\n\t\t\t\t$Country=$Row.country\n\t\t\t\t$City = $Row.city\n\t\t\t\t$Lat = $Row.latitude\n\t\t\t\t$Lon = $Row.longitude\n\t\t\t\twrite-output \"* $Country $ZipCode $City is at $Lat°N, $Lon°W\"\n\t\t\t\t$FoundOne = 1\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($FoundOne) {\n\t\texit 0 # success\n\t}\n\tthrow \"Zip-code $ZipCode in country $CountryCode not found\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Scan Network using Nmap in PowerShell\nDESCRIPTION: This snippet shows how to scan a network using Nmap with PowerShell. It retrieves IP addresses configured either via DHCP or manually, constructs an Nmap command with appropriate arguments, and then executes Nmap to perform the network scan. It assumes Nmap is installed and in the system's PATH, or that the `$location` variable is correctly set to the Nmap executable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/scan-network.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$a = Get-NetIPAddress | Where-Object -FilterScript { $_.SuffixOrigin -eq \"DHCP\" -or  $_.SuffixOrigin -eq \"manual\" } # | Format-Table -property IPAddress -autoSize\n\n$arguments = \"-sT -T3\" # Set sane defaults for command string\n$location = \"nmap\" # In case nmap is not in PATH\n$targets = \"\"\n\nforeach ( $i in $a ) {\n    $s = $i.IPAddress + \"/\" + $i.PrefixLength\n    $targets = $targets + \" \" + $s\n}\n$arguments = $arguments + \" \" + $targets\n\nStart-Process $location -ArgumentList $arguments -Wait \n```\n\n----------------------------------------\n\nTITLE: Launching the Calculator Application with Error Handling in PowerShell\nDESCRIPTION: The complete PowerShell script `open-calculator.ps1`. It uses the `Start-Process` cmdlet with the URI scheme `ms-calculator:` to launch the Windows Calculator. A try/catch block handles potential errors during the process launch, outputting an error message and exiting with status code 1 if an error occurs, otherwise exiting with 0 for success. The script includes standard PowerShell comment-based help.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-calculator.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the calculator application\n.DESCRIPTION\n\tThis PowerShell script launches the calculator application.\n.EXAMPLE\n\tPS> ./open-calculator\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process ms-calculator:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using show-msbuild-manual.ps1 with Parameters\nDESCRIPTION: Demonstrates the syntax for using the show-msbuild-manual PowerShell script with common parameters. The script supports standard PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-msbuild-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-msbuild-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of list-os-updates.ps1\nDESCRIPTION: Demonstrates the basic usage of the script without any parameters, which will use the default RSS feed URL and display up to 30 updates.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os-updates.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-os-updates.ps1\n```\n\n----------------------------------------\n\nTITLE: Translating Text with LibreTranslate API in PowerShell\nDESCRIPTION: This script defines a function `UseLibreTranslate` that interfaces with the LibreTranslate API. It takes text, source language, and target language as input. It constructs a POST request to the LibreTranslate API, converts the response to JSON, and extracts the translated text.  It also includes a `Start-Sleep` function to prevent rate limiting by the API. The function returns the translated text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-file.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nfunction UseLibreTranslate { param([string]$Text, [string]$SourceLang, [string]$TargetLang)\n\t$Parameters = @{\"q\"=\"$Text\"; \"source\"=\"$SourceLang\"; \"target\"=\"$TargetLang\"; }\n\t$Result = (Invoke-WebRequest -Uri https://libretranslate.de/translate -Method POST -Body ($Parameters|ConvertTo-Json) -ContentType \"application/json\" -useBasicParsing).content | ConvertFrom-Json\n\tStart-Sleep -seconds 6 # 10 requests per minute maximum\n\treturn $Result.translatedText\n}\n```\n\n----------------------------------------\n\nTITLE: Using speak-japanese.ps1 Script with Parameters\nDESCRIPTION: Shows the syntax and parameters for the speak-japanese.ps1 script. The script accepts a text parameter for the Japanese text to be spoken and supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-japanese.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-japanese.ps1 [[-text] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Paint 3D with Error Handling\nDESCRIPTION: This code attempts to start the Paint 3D application using the start-process cmdlet. It includes try-catch blocks to handle errors gracefully, outputting an error message if the process fails and exiting with a status code. Dependencies include PowerShell and the ms-paint executable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-paint-three-d.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tstart-process ms-paint:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for cd-up.ps1 Script in PowerShell\nDESCRIPTION: This snippet shows the command-line syntax for the cd-up.ps1 script, indicating that it accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., for controlling script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-up.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Text Parameter\nDESCRIPTION: Defines the '-text' parameter for the PowerShell script.  This parameter specifies the Danish text to be spoken. If no text is provided via the parameter, the script prompts the user to enter the text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-danish.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n-text <String>\n    Specifies the Danish text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n```\n\n----------------------------------------\n\nTITLE: Example Usage of show-hong-kong-city.ps1 - PowerShell\nDESCRIPTION: This snippet demonstrates the basic usage of the PowerShell script. The command `./show-hong-kong-city` executes the script without any parameters. This will open Google Maps in the user's default browser, displaying the city of Hong Kong. The only dependency is the PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-hong-kong-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-hong-kong-city\n```\n\n----------------------------------------\n\nTITLE: Specifying Supported Parameters in PowerShell\nDESCRIPTION: This snippet illustrates how the script accepts common PowerShell parameters such as Verbose, Debug, ErrorAction, and others. These parameters allow users to control runtime behavior, handle errors, and debug output. The script relies on these built-in parameters but does not define any custom ones, supporting flexibility in invocation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-month.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-month.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example: Opening Twitter Website in PowerShell\nDESCRIPTION: This example demonstrates how to execute the `open-twitter-website.ps1` script. No parameters are passed. The script is run from the PowerShell prompt using the relative path './' to access the script from the current directory.  The output is the Twitter website opening in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-twitter-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-twitter-website\n```\n\n----------------------------------------\n\nTITLE: Opening Instagram Website - PowerShell\nDESCRIPTION: This PowerShell script opens the Instagram website using the default web browser. It leverages the common parameters such as Verbose, Debug, and ErrorAction. The script does not require any input parameters and its action is to open the browser to the Instagram website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-instagram-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-instagram-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Script Invocation - PowerShell\nDESCRIPTION: This snippet shows how to execute the open-videos-folder script from a PowerShell prompt. The script should be called from its directory or with the appropriate path to trigger its functionality of opening the user's Videos folder. No parameters are required for typical usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-videos-folders.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-videos-folder\n\n```\n\n----------------------------------------\n\nTITLE: Script Usage Parameters PowerShell\nDESCRIPTION: Displays the standard usage syntax for the script, indicating that it accepts common PowerShell parameters (like Verbose, Debug, etc.) to control script behavior and output. This is a documentation snippet showing how to invoke the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-visual-studio-code.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-visual-studio-code.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: play-rick.ps1 Script Content\nDESCRIPTION: This PowerShell script opens the default web browser and navigates to the YouTube URL for Rick Astley's \"Never Gonna Give You Up\" song. It utilizes the `open-default-browser.ps1` script (assumed to be in the same directory) to launch the browser. After opening the browser, it prints a Rick-rolled message and exits with code 0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-rick.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays Rick Astley\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with YouTube playing Rick Astley.\n.EXAMPLE\n\tPS> ./play-rick.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.youtube.com/watch?v=v7ScGV5128A\"\n\"You've been Rick-Rolled 🤣\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Core Script Logic - PowerShell\nDESCRIPTION: This snippet contains the main functional code of the `close-windows-terminal.ps1` script. It executes a helper script `close-program.ps1` located in the same directory, passing the window title \"Windows Terminal\" and process names \"WindowsTerminal\" as arguments to handle the closing operation. It then exits with a success code (0). This script depends on the presence and functionality of the `close-program.ps1` script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-windows-terminal.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Windows Terminal app\n.DESCRIPTION\n\tThis PowerShell script closes the Windows Terminal application gracefully.\n.EXAMPLE\n\tPS> ./close-windows-terminal.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Windows Terminal\" \"WindowsTerminal\" \"WindowsTerminal\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Running see-you.ps1 with Common Parameters in PowerShell\nDESCRIPTION: This snippet illustrates how to execute the 'see-you.ps1' script in PowerShell, optionally passing any of the common parameters such as Verbose, Debug, or ErrorAction. The script responds to the phrase 'see you' by outputting a spoken message using text-to-speech functionality. Parameters control script behavior and output but do not influence the text-to-speech content; expected input is simply invoking the script, and output is an audible message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/see-you.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nsee-you.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Suppressing SSH Login Messages on Linux (Shell)\nDESCRIPTION: Creates an empty `.hushlogin` file in the user's home directory to prevent the display of message-of-the-day (MOTD) and other informational messages upon SSH login.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\necho > ~/.hushlogin\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters for write-sine-curves.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the command-line syntax for the write-sine-curves.ps1 script. It indicates that the script can be executed directly and supports standard PowerShell CommonParameters like Verbose, Debug, ErrorAction, etc., which control script behavior and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-sine-curves.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-sine-curves.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: speak-thai.ps1 PowerShell Script Implementation\nDESCRIPTION: Complete implementation of the script that speaks text in Thai. It uses SAPI.SPVoice COM object to find a Thai text-to-speech voice and speak the provided text. If no Thai voice is found, it throws an error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-thai.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Thai\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Thai text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Thai text to speak\n.EXAMPLE\n\tPS> ./speak-thai.ps1 \"สวัสดี\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Thai text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Thai*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Thai text-to-speech voice found - please install one.\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Git Fetch Logic in PowerShell (fetch-repos.ps1)\nDESCRIPTION: Contains the complete `fetch-repos.ps1` script. It takes an optional `parentDirPath`, validates Git installation and the target path, iterates through subdirectories executing `git fetch --all --recurse-submodules --prune --prune-tags --force` in each, reports progress, handles errors, and measures execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/fetch-repos.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tFetches updates into Git repos\n.DESCRIPTION\n\tThis PowerShell script fetches updates into all Git repositories in a folder (including submodules).\n.PARAMETER parentDirPath\n\tSpecifies the path to the parent folder\n.EXAMPLE\n\tPS> ./fetch-repos.ps1 C:\\MyRepos\n\t⏳ (1) Searching for Git executable...       git version 2.46.0.windows.1\n\t⏳ (2) Checking parent folder...             33 subfolders\n\t⏳ (3/35) Fetching into 📂curl...\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$parentDirPath = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1) Searching for Git executable...     \" -noNewline\n\t& git --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Host \"⏳ (2) Checking parent folder...           \" -noNewline\n\tif (-not(Test-Path \"$parentDirPath\" -pathType container)) { throw \"Can't access folder: $parentDirPath\" }\n\t$folders = (Get-ChildItem \"$parentDirPath\" -attributes Directory)\n\t$numFolders = $folders.Count\n\t$parentDirPathName = (Get-Item \"$parentDirPath\").Name\n\tWrite-Host \"$numFolders subfolders\"\n\n\t[int]$step = 3\n\tforeach ($folder in $folders) {\n\t\t$folderName = (Get-Item \"$folder\").Name\n\t\tWrite-Host \"⏳ ($step/$($numFolders + 2)) Fetching into 📂$folderName...`t`t\"\n\n\t\t& git -C \"$folder\" fetch --all --recurse-submodules --prune --prune-tags --force\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git fetch --all' in 📂$folder failed with exit code $lastExitCode\" }\n\n\t\t$step++\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Fetched into $numFolders repos at 📂$parentDirPath in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell as Default Shell on Linux (Shell)\nDESCRIPTION: Changes the default login shell for the specified user to PowerShell. Requires PowerShell to be installed at `/usr/bin/pwsh` and that path to be added to `/etc/shells`. Replace `<USERNAME>` with the actual user name.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nchsh -s /usr/bin/pwsh <USERNAME>\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Parameters - PowerShell\nDESCRIPTION: This snippet outlines the invocation of the 'show-calgary-city.ps1' script with optional support for PowerShell's standard common parameters such as Verbose, Debug, ErrorAction, and others. These parameters allow users to control output verbosity, handle errors, and manage output pipelining when executing the script. No user-specific parameters are required; the script simply supports these common options by default with all values being optional.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-calgary-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-calgary-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Specifying Script Parameters in PowerShell\nDESCRIPTION: This snippet demonstrates the format for invoking the 'open-slash-dot.ps1' PowerShell script with common command-line parameters. The script accepts standard PowerShell common parameters (such as Verbose and Debug) for enhanced control over script output and error handling. Input consists of the script path followed by any of the listed parameters, and no positional parameters are required; all are optional and standard to PowerShell scripting.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-slash-dot.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-slash-dot.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for list-anagrams.ps1\nDESCRIPTION: Defines the parameters for the list-anagrams.ps1 script. It specifies the '-Word' parameter, which takes a string input representing the word to generate anagrams from. It also defines the '-Columns' parameter, an integer that specifies the number of columns to use for the output. The script supports common parameters like Verbose, Debug, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-anagrams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-anagrams.ps1 [[-Word] <String>] [[-Columns] <Int32>] [<CommonParameters>]\n\n-Word <String>\n    Specifies the word to use\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Columns <Int32>\n    Specifies the number of columns\n    \n    Required?                    false\n    Position?                    2\n    Default value                8\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the show-tunis-city.ps1 Script\nDESCRIPTION: Provides an example of how to execute the show-tunis-city.ps1 script from the PowerShell console. Running the script without any specific parameters will launch the default web browser and navigate to Google Maps centered on Tunis.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-tunis-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-tunis-city\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameters for open-music-folder.ps1\nDESCRIPTION: Shows the command-line syntax for the script, demonstrating that it accepts common PowerShell parameters such as Verbose, Debug, ErrorAction, etc. This segment illustrates the standard usage format for the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-music-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-music-folder.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of uninstall-new-outlook.ps1\nDESCRIPTION: Demonstrates how to execute the script from the PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-new-outlook.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-new-outlook.ps1\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-activation-settings.ps1 in PowerShell\nDESCRIPTION: This snippet shows the parameter signature for the `open-activation-settings.ps1` script. It indicates that the script accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) for controlling execution behavior, output, and error handling, but has no script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-activation-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-activation-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Command Parameters for play-files.ps1\nDESCRIPTION: Defines the parameters accepted by the play-files.ps1 script, including the optional filePattern parameter and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-files.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-files.ps1 [[-filePattern] <String>] [<CommonParameters>]\n\n-filePattern <String>\n    Specifies the file pattern ('*' by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                *\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing show-las-vegas-city.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates how to execute the 'show-las-vegas-city.ps1' script from a PowerShell prompt. Running this command will launch the system's default web browser and navigate to the Google Maps page for Las Vegas.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-las-vegas-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-las-vegas-city\n```\n\n----------------------------------------\n\nTITLE: Executing the NBC Website Script in PowerShell\nDESCRIPTION: Example of running the open-nbc-website.ps1 script from PowerShell to launch the NBC website in the default browser. The script supports common PowerShell parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-nbc-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-nbc-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running the BucketSort measurement script with PowerShell\nDESCRIPTION: Example of how to execute the measure-BucketSort.ps1 script in PowerShell, showing the expected output format including the time taken to sort 1000 integers.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-BucketSort.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./measure-BucketSort.ps1\n🧭 0.065 sec to sort 1000 integers by BucketSort\n```\n\n----------------------------------------\n\nTITLE: HeapSort Parameters and Common Parameters\nDESCRIPTION: This section defines the parameters that can be passed to the `measure-HeapSort.ps1` script. The `-numIntegers` parameter specifies the number of integers to sort, with a default value of 1000. It also mentions the common parameters supported by the script, such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-HeapSort.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/measure-HeapSort.ps1 [[-numIntegers] <Int32>] [<CommonParameters>]\n\n-numIntegers <Int32>\n    Specifies the number of integers to sort\n    \n    Required?                    false\n    Position?                    1\n    Default value                1000\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Declaring Supported Parameters in PowerShell Script\nDESCRIPTION: This snippet lists the supported common parameters for the PowerShell script, such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters control debugging output, error handling, and other core behaviors. Users may specify these flags as desired when executing the script to affect its runtime verbosity and error management.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-c-drive.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-c-drive.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-edge.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command-line syntax for the open-edge.ps1 script, indicating that it accepts the standard PowerShell CommonParameters (like Verbose, Debug, ErrorAction, etc.). It doesn't define any script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-edge.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-edge.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing see-you.ps1 Directly in PowerShell\nDESCRIPTION: This example demonstrates the direct invocation of 'see-you.ps1' from the PowerShell command line. No arguments are required; the script will produce a text-to-speech reply when run. The expected output is a spoken message, and there are no input parameters or dependencies other than those required to execute PowerShell scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/see-you.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./see-you\n\n```\n\n----------------------------------------\n\nTITLE: Launching eBay Website in Default Browser Using PowerShell\nDESCRIPTION: This script launches the default web browser and opens the eBay website URL. It supports standard PowerShell common parameters allowing users to utilize Verbose, Debug, and error handling in their execution. The primary input is implicit - the script runs without required arguments. The output is an opened browser window/tab directing to https://www.ebay.com. This script depends on PowerShell's ability to invoke the default browser and assumes internet connectivity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ebay.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-ebay.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-ebay\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters for Directory Tree - PowerShell\nDESCRIPTION: Specifies the input parameters available for the script, particularly the optional DirTree string parameter for the root directory path. This documentation block clarifies parameter requirements, default values, position, and PowerShell's common parameters such as Verbose and Debug. Input is expected to be a directory path, and no output is produced at this stage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-empty-dirs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/remove-empty-dirs.ps1 [[-DirTree] <String>] [<CommonParameters>]\n\n-DirTree <String>\n    Specifies the path to the directory tree\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters for PowerShell Unbound Installation Script - PowerShell\nDESCRIPTION: This snippet provides the command-line syntax and outlines the common parameters supported by the installer script, such as Verbose, Debug, and ErrorAction. These parameters facilitate runtime behavior customization, logging, and error management. Users can supply these parameters when invoking the script to adjust its operational characteristics; no additional dependencies are required to use these arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-unbound-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-unbound-server.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Time Zones - PowerShell\nDESCRIPTION: This script lists all time zones available on the system by invoking Get-Timezone with the -listavailable parameter and formatting the output as a table. It employs a try/catch structure for error handling, printing a warning and exiting with a nonzero code if any error occurs. The script requires only standard Windows PowerShell and does not depend on external modules; inputs are optional standard parameters, and output is a formatted table. Limitations include platform dependence on the PowerShell Get-Timezone cmdlet.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-timezones.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all available time zones\n.DESCRIPTION\n\tThis PowerShell script lists all available time zones.\n.EXAMPLE\n\tPS> ./list-timezones\n\n\tId                              DisplayName                            SupportsDaylight\n                                                                               SavingTime\n\t--                              -----------                            ----------------\n\tHawaiian Standard Time          (UTC-10:00) Hawaii                     False\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-Timezone -listavailable | Format-Table -property Id,DisplayName,SupportsDaylightSavingTime\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Google Maps for Moscow City - PowerShell\nDESCRIPTION: This PowerShell script opens Google Maps centered on Moscow city. It uses the `Invoke-Expression` cmdlet to open a new web browser window pointing to the specified Google Maps URL. This script requires no specific dependencies beyond the standard PowerShell environment and a default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-moscow-city.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Calculating Days Until Easter Sunday and Text-To-Speech Announcement in PowerShell\nDESCRIPTION: This PowerShell script calculates the difference in days between the current date and Easter Sunday of the year 2022, then invokes a text-to-speech script to announce whether Easter Sunday is upcoming or has passed. It uses common PowerShell parameters, includes error handling to report any script errors with their line numbers, and exits with appropriate status codes on success or failure. Prerequisites include the presence of a speak-english.ps1 script in the same directory for TTS functionality.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-easter-sunday.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the time until Easter Sunday\n.DESCRIPTION\n\tThis PowerShell script checks the time until Easter Sunday and replies by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-easter-sunday\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$Now = [DateTime]::Now\n\t$Easter = [Datetime](\"04/17/2022\")\n\tif ($Now -lt $Easter) {\n\t\t$Diff = $Easter – $Now\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"Easter Sunday on April 17 is in $($Diff.Days) days.\"\n\t} else {\n\t\t$Diff = $Now - $Easter\n\t\t& \"$PSScriptRoot/speak-english.ps1\" \"Easter Sunday on April 17 was $($Diff.Days) days ago.\"\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example (PowerShell)\nDESCRIPTION: This snippet provides an example of how to run the `play-tic-tac-toe-game.ps1` script from the PowerShell command line. It shows the basic command to launch the script without any explicit arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tic-tac-toe-game.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-tic-tac-toe-game\n```\n\n----------------------------------------\n\nTITLE: Showing Parameters for open-proxy-settings PowerShell Script\nDESCRIPTION: This snippet displays the command syntax for the open-proxy-settings.ps1 script, indicating that it accepts standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-proxy-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-proxy-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing Skype using winget - PowerShell\nDESCRIPTION: This PowerShell script installs Skype from the Microsoft Store using the `winget` command.  It attempts to install Skype, handles potential errors during the installation process, and provides appropriate feedback to the user. The script exits with code 0 on success and code 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-skype.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Skype\n.DESCRIPTION\n\tThis PowerShell script installs Skype from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-skype.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Skype, please wait...\"\n\n\t& winget install \"Skype\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Skype installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example of executing show-tokyo-city.ps1\nDESCRIPTION: A simple example showing how to execute the script from PowerShell. This command will launch the web browser and navigate to Tokyo city in Google Maps.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-tokyo-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-tokyo-city\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft Store - PowerShell\nDESCRIPTION: This PowerShell script launches the Microsoft Store application using the `Start-Process` cmdlet. The script takes no specific parameters but supports common PowerShell parameters like Verbose and Debug.  It initiates the process by providing the URI scheme `ms-windows-store:` to the `Start-Process` command, which instructs the OS to launch the Microsoft Store application. Finally, the script exits with a success code of 0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-store.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tStarts the Microsoft Store app\n.DESCRIPTION\n\tThis script launches the Microsoft Store application.\n.EXAMPLE\n\tPS> ./open-microsoft-store\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process ms-windows-store:\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage Example\nDESCRIPTION: A simple example showing how to execute the open-email-client.ps1 script from a PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-email-client.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-email-client\n```\n\n----------------------------------------\n\nTITLE: Listing Script Signature and Supported Parameters in PowerShell\nDESCRIPTION: This snippet documents the command-line signature for 'open-g-drive.ps1', including support for PowerShell's standard common parameters. No exclusive parameters are specified; all listed parameters (Verbose, Debug, ErrorAction, etc.) follow PowerShell conventions. This serves as interface documentation for users intending to pass standard flags.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-g-drive.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-g-drive.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing write-rot13.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates a basic example of how to execute the write-rot13.ps1 script from a PowerShell prompt, providing the string \"Hello World\" as input for ROT13 processing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-rot13.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-rot13 \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for ping-internet.ps1 Script (PowerShell)\nDESCRIPTION: Describes the command-line parameters accepted by the ping-internet.ps1 script. It details the optional '-hosts' parameter for specifying target hosts (comma-separated string, defaults to a list of 10 internet servers) and mentions support for common PowerShell parameters like Verbose, Debug, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-internet.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/ping-internet.ps1 [[-hosts] <String>] [<CommonParameters>]\n\n-hosts <String>\n    Specifies the hosts to ping, seperated by commata (10 Internet servers by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                bing.com,cnn.com,dropbox.com,github.com,google.com,ibm.com,live.com,meta.com,x.com,youtube.com\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: User Creation and Encryption Logic\nDESCRIPTION: This core script section attempts to create a new user with an encrypted home directory. It checks for Linux environment, installs necessary utilities, and executes user creation commands. It also measures execution time and handles exceptions, outputting success or error messages accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-user.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tif ($username -eq \"\") { $username = Read-Host \"Enter the new user name\" }\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif ($IsLinux) {\n \t\t& sudo apt install ecryptfs-utils\n \t\t& sudo adduser --encrypt-home $username\n\t} else {\n \t\tthrow \"Not supported yet\"\n\t}\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Created user account '$username' with encrypted home directory in $($elapsed)s.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Install Google Chrome Using winget\nDESCRIPTION: This PowerShell script installs the Google Chrome browser by executing the winget command. It handles success and failure cases, displaying relevant messages and using try-catch for error management. Dependencies include winget being installed on the system, and it accepts common PowerShell parameters for enhanced control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-chrome.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Chrome\n.DESCRIPTION\n\tThis PowerShell script installs the Google Chrome browser.\n.EXAMPLE\n\tPS> ./install-chrome.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Google Chrome, please wait...\"\n\n\t& winget install --id Google.Chrome --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Google Chrome installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Remote Desktop with Error Handling - PowerShell\nDESCRIPTION: This PowerShell script uses the `start-process` cmdlet to launch the Remote Desktop application (ms-rd:). It's enclosed in a `try-catch` block for error handling. If the process starts successfully, the script exits with a success code (0).  If an error occurs, an error message, including the line number and error details, is displayed, and the script exits with an error code (1).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-remote-desktop.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Remote Desktop app\n.DESCRIPTION\n\tThis script launches the Remote Desktop application.\n.EXAMPLE\n\tPS> ./open-remote-desktop\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tstart-process ms-rd:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Network Adapters\nDESCRIPTION: This PowerShell script restarts all local network adapters. It requires administrator privileges to function correctly. The script uses Get-NetAdapter to retrieve all network adapters and then restarts them using Restart-NetAdapter. A stopwatch measures the execution time, and the script outputs a success or error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/restart-network-adapters.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tRestarts the network adapters (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script restarts all local network adapters (needs admin rights).\n.EXAMPLE\n\tPS> ./restart-network-adapters\n.LINK\n\thtts://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\ntry {\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tGet-NetAdapter | Restart-NetAdapter \n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ restarted all local network adapters in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Supported Parameters for GDB Manual Script in PowerShell\nDESCRIPTION: This snippet displays the parameter usage for the show-gdb-manual.ps1 script, listing all supported common PowerShell execution parameters. These include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. When running the script, users can optionally supply these standard switches to control script behavior and output handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-gdb-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-gdb-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing a VM and Its Files (PowerShell)\nDESCRIPTION: This PowerShell script automates the removal of a virtual machine. It sets the target VM name to 'debian', configures the script to silently continue if the VM is already stopped, forcefully stops the VM using 'Stop-VM', forcefully removes the VM definition using 'Remove-VM', recursively deletes the VM's directory located at 'C:\\VirtualMachines\\debian', and concludes by exiting with a success code of 0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-vm.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n$VMName = \"debian\"\n$WarningPreference = 'SilentlyContinue' # If VM already stopped\nStop-VM $VMName -Force\nRemove-VM $VMName -Force\nRemove-Item -Path \"C:\\VirtualMachines\\$VMName\" -Recurse\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Implementation\nDESCRIPTION: This snippet contains the complete source code for the `give-reply.ps1` PowerShell script. It includes parameter declaration, the `GetTempDir` function to determine a suitable temporary directory, and the main logic for writing the text to the console, speaking the text using TTS (if not running on Linux), and saving the text to a file. Error handling is also included.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/give-reply.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tGives a reply \n.DESCRIPTION\n\tThis PowerShell script gives a reply in English on the console and by text-to-speech (TTS).\n.PARAMETER text\n\tSpecifies the text to speak\n.EXAMPLE\n\tPS> ./give-reply \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\nfunction GetTempDir {\n\tif (\"$env:TEMP\" -ne \"\")\t{ return \"$env:TEMP\" }\n\tif (\"$env:TMP\" -ne \"\")\t{ return \"$env:TMP\" }\n\tif ($IsLinux) { return \"/tmp\" }\n\treturn \"C:\\Temp\"\n}\n\ntry {\n\tWrite-Host '“'$text' ”' # to write the reply on the console\n\tif (!$IsLinux) { \n\t\t$TTS = New-Object -ComObject SAPI.SPVoice\n\t\tforeach($Voice in $TTS.GetVoices()) {\n\t\t\tif ($Voice.GetDescription() -like \"*- English*\") { $TTS.Voice = $Voice }\n\t\t}\n\t\t[void]$TTS.Speak($text)\n\t}\n\t\"$text\" > \"$(GetTempDir)/last_reply_given.txt\" # to remember last reply\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Main Script Logic (PowerShell)\nDESCRIPTION: This snippet contains the core implementation of the `close-spotify.ps1` script. It invokes an external helper script located in the same directory (`close-program.ps1`), passing 'Spotify' as the window title and 'spotify' as the process name to be closed. The script then exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-spotify.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses Spotify\n.DESCRIPTION\n\tThis PowerShell script closes the Spotify application gracefully.\n.EXAMPLE\n\tPS> ./close-spotify.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Spotify\" \"spotify\" \"\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing show-planet-earth.ps1 - PowerShell\nDESCRIPTION: This demonstrates how to execute the show-planet-earth.ps1 script within a PowerShell environment.  The script is invoked using './show-planet-earth' in the PowerShell console. This is a simple example showing basic script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-earth.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-planet-earth\n```\n\n----------------------------------------\n\nTITLE: Example Execution of Script (PowerShell)\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to execute the `close-spotify.ps1` script from a PowerShell console. It shows the basic command to run the script from its location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-spotify.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-spotify.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing the tell-joke.ps1 Script\nDESCRIPTION: This example demonstrates how to execute the tell-joke.ps1 PowerShell script. Running the script will select a random joke and output it via text-to-speech. The user should be able to hear the joke being spoken after running the command.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/tell-joke.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./tell-joke.ps1\n(listen and enjoy)\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Script Execution - PowerShell\nDESCRIPTION: This snippet illustrates the parameter syntax for the open-pay-pal-website.ps1 script. It shows that the script accepts standard PowerShell CommonParameters, which control aspects like error handling and output verbosity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pay-pal-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-pay-pal-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the Script - PowerShell\nDESCRIPTION: This example demonstrates how to run the open-pay-pal-website.ps1 script from the PowerShell command line. It shows the basic command `./open-pay-pal-website` which launches the default web browser to the PayPal website without any specific arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pay-pal-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-pay-pal-website\n\n\n```\n\n----------------------------------------\n\nTITLE: Showing Script Parameters in PowerShell\nDESCRIPTION: This snippet illustrates the parameter syntax for the `open-time-settings.ps1` script. It shows that the script accepts standard PowerShell common parameters, which control aspects like verbosity, debugging, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-time-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-time-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Logging Off User - PowerShell Script\nDESCRIPTION: Contains the main implementation of the log-off script. It uses `Invoke-CimMethod` on the `Win32_Operatingsystem` class with the `Win32Shutdown` method and `Flags = 0` to perform the log-off. A try/catch block is included for basic error handling, outputting an error message and exiting with a non-zero code on failure, and exiting with 0 on success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/log-off.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLog off the current user\n.DESCRIPTION\n\tThis PowerShell script logs off the current Windows user.\n.EXAMPLE\n\tPS> ./log-off.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tInvoke-CimMethod -ClassName Win32_Operatingsystem -MethodName Win32Shutdown -Arguments @{ Flags = 0 }\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running open-hr-works-website.ps1 (PowerShell)\nDESCRIPTION: This example demonstrates how to execute the 'open-hr-works-website.ps1' script from the PowerShell command line. Running this command will launch the default web browser and navigate to the HRworks website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-hr-works-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-hr-works-website\n```\n\n----------------------------------------\n\nTITLE: Parameter Syntax: write-in-emojis.ps1 (PowerShell)\nDESCRIPTION: Documents the command-line parameters accepted by the script, including the optional -text parameter for specifying input text and standard CommonParameters supported by PowerShell scripts. It shows the expected syntax format for invoking the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-in-emojis.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-in-emojis.ps1 [[-text] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Listing Common Parameters for disconnect-vpn.ps1 (PowerShell)\nDESCRIPTION: Displays the common parameters supported by the 'disconnect-vpn.ps1' script. These standard PowerShell parameters like Verbose, Debug, ErrorAction, etc., allow users to control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/disconnect-vpn.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/disconnect-vpn.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Closing Paint 3D via Process Termination - PowerShell\nDESCRIPTION: This main script snippet forcibly closes the Paint 3D application by invoking Taskkill on its process 'PaintStudio.View.exe'. If Paint 3D is not running, it calls a helper script called 'speak-english.ps1' to announce the status and exits with code 1. It supports standard PowerShell script parameters, expects Paint 3D to be installed, and requires 'speak-english.ps1' to be present in the same folder. Output is determined by the running status of Paint 3D; either the process ends or a notification message is spoken.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-paint-three-d.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Paint 3D app \n.DESCRIPTION\n\tThis PowerShell script closes the Paint 3D application gracefully.\n.EXAMPLE\n\tPS> ./close-paint-3d.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nTaskKill /im PaintStudio.View.exe /f\nif ($lastExitCode -ne \"0\") {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, Paint 3D isn't running.\"\n\texit 1\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Download Directory from URL using PowerShell\nDESCRIPTION: This PowerShell script downloads a folder (including subfolders) from the given URL using the wget command. It checks if wget is installed and provides error handling for download failures. The script takes a URL as input, or prompts the user if the URL is not provided. It then uses wget to mirror the directory, convert links, adjust extensions, get page requisites, and exclude parent directories. Finally, it reports the download time and exits with a success or error code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/download-dir.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDownloads a folder (including subfolders) from an URL\n.DESCRIPTION\n\tThis PowerShell script downloads a folder (including subfolders) from the given URL.\n.PARAMETER URL\n\tSpecifies the URL where to download from\n.EXAMPLE\n\tPS> ./download-dir.ps1 https://www.cnn.com\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$URL = \"\")\n\ntry {\n\tif ($URL -eq \"\") { $URL = Read-Host \"Enter directory URL to download\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t& wget --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'wget' - make sure wget is installed and available\" }\n\n\t& wget --mirror --convert-links --adjust-extension --page-requisites --no-parent $URL --directory-prefix . --no-verbose\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'wget --mirror $URL'\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ downloaded directory from $URL in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Script Parameters and Common PowerShell Switches in PowerShell\nDESCRIPTION: This snippet shows how to declare the script file and its support for standard PowerShell common parameters, such as Verbose and Debug. No input parameters specific to the script are needed, but it supports PowerShell's built-in parameter switches for enhanced logging, debugging, and pipeline behaviors. Users can provide these common parameters to adjust feedback and output as needed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-print-jobs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/remove-print-jobs.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Describing Script Parameters PowerShell\nDESCRIPTION: This snippet details the parameters accepted by the `check-password.ps1` script, specifically the optional `-password` parameter for providing the password directly and support for PowerShell Common Parameters. It outlines the parameter's type, position, default value, and whether it accepts pipeline input or wildcard characters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-password.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-password.ps1 [[-password] <String>] [<CommonParameters>]\n\n-password <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Script Execution with Path (PowerShell)\nDESCRIPTION: Provides a practical example of executing the `get-sha256.ps1` script from the PowerShell console, specifying a file path `C:\\MyFile.txt`. It also shows the expected output format, displaying the success symbol and the calculated SHA256 hash.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/get-sha256.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./get-sha256.ps1 C:\\MyFile.txt\n✅ SHA256 hash is CEB4AD71524996EB8AA3ADCE04F1E45636A4B58B8BF4462E6971CF2E56B4293E\n```\n\n----------------------------------------\n\nTITLE: Example execution of check-drive-space.ps1 in PowerShell\nDESCRIPTION: This snippet shows an example of how to execute the check-drive-space.ps1 script. It invokes the script with the 'C' drive as the argument, checking its free space and displaying a message indicating the drive's usage and free space.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-drive-space.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-drive-space.ps1 C\n✅ Drive C: uses 56% of 1TB - 442GB free\n```\n\n----------------------------------------\n\nTITLE: Example Usage of write-uppercase.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to run the `write-uppercase.ps1` script from the PowerShell command line. It passes the string \"Hello World\" as an argument and shows the resulting uppercase output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-uppercase.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-uppercase.ps1 \"Hello World\"\nHELLO WORLD\n```\n\n----------------------------------------\n\nTITLE: Declaring Script Parameters in PowerShell\nDESCRIPTION: This snippet defines the accepted command-line parameter DirTree for the script, along with PowerShell's supported common parameters. It specifies that DirTree is an optional string parameter representing the target directory path; if omitted, the script will prompt the user for input. Dependencies include the PowerShell runtime environment. Expected input is the directory path as a string, with output determined by subsequent script logic.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-files.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-files.ps1 [[-DirTree] <String>] [<CommonParameters>]\n\n-DirTree <String>\n    Specifies the path to the directory tree\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing All Environment Variables\nDESCRIPTION: This PowerShell script lists all environment variables available in the current session. It utilizes 'Get-ChildItem' on the 'env:' provider to retrieve environment variable data and includes error handling to catch and report execution issues. The script outputs the variables' names and values, facilitating system diagnostics and configuration reviews.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-environment-variables.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists all environment variables\n.DESCRIPTION\n\tThis PowerShell script lists all environment variables.\n.EXAMPLE\n\tPS> ./list-environment-variables.ps1\n\n\tName                           Value\n\t----                           -----\n\tALLUSERSPROFILE                C:\\ProgramData\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-ChildItem env:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a VM in PowerShell\nDESCRIPTION: This snippet demonstrates how to import a virtual machine in PowerShell using the `Import-VM` cmdlet. It first defines the VM name, then finds the VM configuration file (.vmcx). It imports the VM, copies the VHD files to a new destination, sets the VM path, generates a new ID, and finally starts the VM. The script exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/import-vm.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$VMName = \"debian\"\nGet-ChildItem \"C:\\packer\\$VMName\\Virtual Machines\\*.vmcx\" | Import-VM -Copy -VhdDestinationPath \"C:\\VirtualMachines\\$VMName\\Virtual Hard Disks\" -VirtualMachinePath \"C:\\VirtualMachines\\$VMName\" -GenerateNewId\nStart-VM $VMName\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Implementing English Text-to-Speech in PowerShell\nDESCRIPTION: This is the core script logic. It defines a parameter for input text, falls back to `Read-Host` if no text is provided, creates a SAPI.SPVoice COM object, iterates through available voices to find an English one, sets the voice, speaks the text, and handles potential errors by printing a message and exiting with a non-zero code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-english.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in English\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with an English text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the English text to speak\n.EXAMPLE\n\tPS> ./speak-english.ps1 Hi\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the English text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- English*\") {\n\t\t\t$TTS.Voice = $voice\n\t\t}\n\t}\n\t[void]$TTS.Speak($text)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Responding to 'Come on' with Text-to-Speech in PowerShell\nDESCRIPTION: This PowerShell snippet represents the usage pattern for the come-on.ps1 script, which replies to the input phrase 'Come on' through text-to-speech output. It supports all standard PowerShell CommonParameters such as Verbose and Debug to manage execution behavior. The snippet shows how to invoke the script directly in a PowerShell prompt, expecting no input arguments and producing a spoken reply instead.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/come-on.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncome-on.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./come-on\n```\n\n----------------------------------------\n\nTITLE: Launching Unsplash Website in PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser and opens the Unsplash website. It accepts standard PowerShell common parameters such as Verbose, Debug, ErrorAction, and others for managing script execution behavior. No additional dependencies are required beyond a standard PowerShell environment. The script does not take any custom input parameters and does not return output other than opening the browser window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-unsplash-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-unsplash-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: HeapSort Script Example\nDESCRIPTION: This example shows how to execute the `measure-HeapSort.ps1` script. Running the script displays the elapsed time to sort the default number of integers (1000) using HeapSort. The output includes the execution time in seconds and the number of integers sorted.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-HeapSort.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./measure-HeapSort.ps1\n🧭 0.614 sec to sort 1000 integers by HeapSort\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Decreasing System Volume\nDESCRIPTION: This PowerShell script reduces the system's audio volume by a specified percentage, defaulting to 10%. It employs COM automation to send keyboard shortcuts to the Windows system, controlling volume levels programmatically. The script requires no additional dependencies beyond PowerShell and Windows COM objects, and it includes error handling to report script issues. Parameters allow customization of the volume reduction amount, and the script outputs success or error messages accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-down.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tTurns the volume down\n.DESCRIPTION\n\tThis PowerShell script turns the audio volume down (-10% by default).\n.PARAMETER percent\n\tSpecifies the percent number\n.EXAMPLE\n\tPS> ./turn-volume-down\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$percent = 10)\n\ntry {\n\t$obj = New-Object -com wscript.shell\n\tfor ([int]$i = 0; $i -lt $percent; $i += 2) {\n\t\t$obj.SendKeys([char]174) # each tick is -2%\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Open Recycle Bin in PowerShell\nDESCRIPTION: This is an example of how to run the open-recycle-bin.ps1 script.  The script is executed directly from the current directory using the './' prefix, signifying the current directory.  No arguments are passed to the script in this simple example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-recycle-bin.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-recycle-bin\n```\n\n----------------------------------------\n\nTITLE: Running play-pac-man-game.ps1\nDESCRIPTION: Demonstrates the basic execution of the script from a PowerShell command prompt to launch the Pac-Man game in a web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pac-man-game.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-pac-man-game\n```\n\n----------------------------------------\n\nTITLE: Opening Snap Store Website Using PowerShell Script\nDESCRIPTION: This snippet demonstrates how to call the open-snap-store-website.ps1 script to launch the default web browser and navigate to the Snap Store website. The script supports common PowerShell parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-snap-store-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-snap-store-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Specifying Parameters for open-fritz-box-website.ps1 Script in PowerShell\nDESCRIPTION: This snippet demonstrates the usage syntax for the 'open-fritz-box-website.ps1' PowerShell script, including optional common parameters such as Verbose, Debug, and ErrorAction. It details how users can provide these parameters at invocation to control script output and error handling. The snippet assumes a PowerShell environment and requires no additional modules.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fritz-box-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-fritz-box-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Opening Google Maps for Hamburg - PowerShell\nDESCRIPTION: This PowerShell script opens the default web browser and navigates it to Google Maps, centered on Hamburg, Germany. The script uses the Invoke-Expression cmdlet to run the command which opens the browser with a specific URL. The only dependency is a web browser being installed on the system. There are no parameters to specify, it directly opens the browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-hamburg-city.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Script Parameters Declaration for check-admin.ps1 - PowerShell\nDESCRIPTION: This snippet documents the supported parameters of check-admin.ps1, specifying that it accepts the standard set of PowerShell common parameters such as Verbose, Debug, ErrorAction, and others. It serves as both usage documentation and a direct invocation template for users or scripts. Dependencies include PowerShell runtime that supports parameterization. Input is a direct script call with optional named parameters, output is context-specific and determined by script logic. There are no inherent constraints except those imposed by the script's scope and PowerShell runtime.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-admin.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-admin.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for write-calendar.ps1 Script\nDESCRIPTION: Defines the optional parameters `-Month` and `-Year` for the `write-calendar.ps1` script. `-Month` specifies the month number (defaulting to the current month), and `-Year` specifies the year (defaulting to the current year). The script also supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-calendar.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nwrite-calendar.ps1 [[-Month] <Int32>] [[-Year] <Int32>] [<CommonParameters>]\n\n-Month <Int32>\n    If specified, will limit output to a single month with this numeral value.\n    \n    Required?                    false\n    Position?                    1\n    Default value                (Get-Date).Month\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Year <Int32>\n    If specified, will output an entire year.\n    \n    Required?                    false\n    Position?                    2\n    Default value                (Get-Date).Year\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters and Usage for `open-mozilla-firefox.ps1`\nDESCRIPTION: Defines the parameters accepted by the `open-mozilla-firefox.ps1` script and shows a basic execution example. The script accepts an optional positional `-URL` parameter (String) to specify a web address and supports standard PowerShell common parameters. The example demonstrates running the script without any arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-mozilla-firefox.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-mozilla-firefox.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies an optional URL\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-mozilla-firefox\n\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Script Parameters\nDESCRIPTION: This snippet shows the standard format for documenting parameters in a PowerShell script's comment-based help. It specifically lists the common parameters available for the `open-plex-website.ps1` script, including `Verbose`, `Debug`, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-plex-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-plex-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using list-hidden-files.ps1 with Parameters\nDESCRIPTION: Example showing the script's parameters and usage syntax with CommonParameters support.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-hidden-files.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-hidden-files.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree (default is current working dir)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Windows VPN Settings Script with Common Parameters - PowerShell\nDESCRIPTION: This code snippet shows the command-line usage for invoking the open-vpn-settings.ps1 script in PowerShell, supporting standard common parameters such as Verbose, Debug, ErrorAction, and others. It is intended for users familiar with PowerShell command execution. The snippet does not require external dependencies beyond PowerShell itself and is typically executed from a terminal.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-vpn-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-vpn-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters in PowerShell\nDESCRIPTION: This section specifies that the script supports common PowerShell parameters.  These parameters allow for standard control over the script's execution and error handling. The parameters listed include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. There are no dependencies or required inputs.  The output provides the common parameters supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-git-extensions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n [<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing open-proxy-settings PowerShell Script Example\nDESCRIPTION: This snippet provides a basic example of how to run the open-proxy-settings.ps1 script from the PowerShell command prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-proxy-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-proxy-settings\n```\n\n----------------------------------------\n\nTITLE: Listing Latest Git Commits Live in PowerShell\nDESCRIPTION: This PowerShell script continuously lists the latest commit in a specified local Git repository in real-time. It accepts parameters for repository path, update interval, and typing speed. The script checks for Git presence, validates the repository path, performs Git fetch operations, and then continually fetches the latest commit's Unix timestamp, message, author, and references. It converts the timestamp to local time and outputs commit information using a typewriter effect via an external helper script. It handles errors gracefully by reporting issues and terminating with an error code. Dependencies include Git and the write-typewriter.ps1 script located alongside the main script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commits-live.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tList commits live in real-time.\n.DESCRIPTION\n\tThis PowerShell script permanently lists the latest commit in a Git repository in real-time.\n.PARAMETER pathToRepo\n\tSpecifies the file path to the local Git repository.\n.EXAMPLE\n\tPS> ./commit-ticker.ps1\n\t❇️ Updated general.csv by Markus Fleschutz (HEAD -> main, origin/main, origin/HEAD)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$pathToRepo = \"$PWD\", [int]$updateInterval = 30, [int]$speed = 17)\n\ntry {\n\tWrite-Progress \"Searching for Git executable...\"\n\t$null = (git --version)\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'git' - make sure Git is installed and available\" }\n\n\tWrite-Progress \"Checking file patch to Git repository...\"\n\tif (-not(Test-Path \"$pathToRepo\" -pathType container)) { throw \"Can't access directory: $pathToRepo\" }\n\n\tWrite-Progress \"Fetching updates...\"\n\t& git -C \"$pathToRepo\" fetch --all --recurse-submodules=no --jobs=1 --quiet\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed\" }\n\tWrite-Progress -completed \"Done.\"\n\n\t$prevLine = \"\"\n\t$tzOffset = (Get-Timezone).BaseUtcOffset.TotalSeconds\n\tfor (;;) {\n\t\t$line = (git -C \"$pathToRepo\" log origin --format=format:'%at %s by %an%d' --max-count=1)\n\t\tif ($line -ne $prevLine) {\n\t\t\t$unixTimestamp = [int64]$line.Substring(0,10)\n\t\t\t$time = (Get-Date -day 1 -month 1 -year 1970 -hour 0 -minute 0 -second 0).AddSeconds($unixTimestamp)\n\t\t\t$time = $time.AddSeconds($tzOffset)\n\t\t\t$timeString = $time.ToString(\"HH:mm\")\n\t\t\t$message = $line.Substring(11)\n\t\t\t& \"$PSScriptRoot/write-typewriter.ps1\" \"❇️ $timeString $message\" $speed\n\t\t\t$prevLine = $line\n\t\t} else {\n\t\t\tStart-Sleep -seconds $updateInterval\n\t\t}\n\t\t& git -C \"$pathToRepo\" fetch --all --recurse-submodules=no --jobs=1 --quiet\n\t\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed\" }\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Example Usage and Output in PowerShell\nDESCRIPTION: This snippet presents an example command for invoking the script ('./list-ascii-table.ps1') in PowerShell and shows the format of the expected console output. The output features columns for ASCII character codes in decimal, octal, hexadecimal, binary, HTML entities, symbols, and descriptions. No input parameters are required for this demonstration; output is sent to the standard console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ascii-table.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-ascii-table.ps1\n\n\n\nDec    Oct   Hex     Binary    HTML    Symbol     Description\n---    ---   ---     ------    ----    ------     -----------\n0    000    00    00000000   &#00;    NUL       Null character\n...\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for Code Generation Speed and Color in PowerShell\nDESCRIPTION: Defines input parameters for the script: a string parameter 'color' with default 'green', and an integer parameter 'speed' with default 500 milliseconds. These parameters allow users to customize the text color and output speed when running the script, enabling dynamic control over the code display appearance.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-code.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$color = \"green\", [int]$speed = 500) # milliseconds\n```\n\n----------------------------------------\n\nTITLE: Example Execution of smart-data2csv.ps1 PowerShell\nDESCRIPTION: Demonstrates a basic execution of the smart-data2csv.ps1 script.  It assumes the script is executed from the directory containing the S.M.A.R.T. JSON files or that the -Directory parameter is supplied with the correct path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/smart-data2csv.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./smart-data2csv\n```\n\n----------------------------------------\n\nTITLE: Script Metadata and Licensing Information\nDESCRIPTION: States the author of the script as Markus Fleschutz, along with licensing under CC0, denoting public domain dedication. Also mentions the automatic generation of documentation from comment-based help.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dallas-city.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n*Generated by convert-ps2md.ps1 using the comment-based help of show-dallas-city.ps1*\n\n```\n\n----------------------------------------\n\nTITLE: Describing Parameters for check-mac-address.ps1 in PowerShell\nDESCRIPTION: Defines the parameters accepted by the `check-mac-address.ps1` script. It includes the optional `-MAC` parameter for specifying the address and mentions support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-mac-address.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-mac-address.ps1 [[-MAC] <String>] [<CommonParameters>]\n\n-MAC <String>\n    Specifies the MAC address to check\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Output for WSL Distribution Listing (PowerShell)\nDESCRIPTION: This example snippet shows the typical output when running the script, displaying installed/available WSL distributions with their name, state, and version in a formatted table, followed by online distributions and the overall WSL status.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-wsl-distros.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-wsl-distros.ps1\nNAME            STATE           VERSION\n* Ubuntu-24.04    Stopped         2\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: This snippet defines the parameters supported by the open-google-stadia.ps1 script, including common parameters like Verbose, Debug, ErrorAction, etc. It indicates that the script accepts these standard PowerShell parameters for controlling execution behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-stadia.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-google-stadia.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - PowerShell\nDESCRIPTION: Defines the parameters supported by the open-amazon.ps1 script.  It showcases the use of CommonParameters in PowerShell scripts, including Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.  These parameters allow for detailed control over the script's execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-amazon.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-amazon.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running show-honolulu-city.ps1 Script - PowerShell\nDESCRIPTION: This example shows how to run the `show-honolulu-city.ps1` script. It uses the command `.\\show-honolulu-city` from the PowerShell prompt.  The script itself is not included in the output, it simply indicates the command to invoke the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-honolulu-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-honolulu-city\n```\n\n----------------------------------------\n\nTITLE: Get CPU Architecture in PowerShell\nDESCRIPTION: This function, GetCPUArchitecture, determines the CPU architecture. It checks the PROCESSOR_ARCHITECTURE environment variable first. On Linux, it checks the OS name and uses Is64BitOperatingSystem to determine the architecture (x64, x86, ARM64, ARM32) based on the OS type (generic, raspi).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-cpu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction GetCPUArchitecture {\n\tif (\"$env:PROCESSOR_ARCHITECTURE\" -ne \"\") { return \"$env:PROCESSOR_ARCHITECTURE\" }\n\tif ($IsLinux) {\n\t\t$Name = $PSVersionTable.OS\n\t\tif ($Name -like \"*-generic *\") {\n\t\t\tif ([System.Environment]::Is64BitOperatingSystem) { return \"x64\" } else { return \"x86\" }\n\t\t} elseif ($Name -like \"*-raspi *\") {\n\t\t\tif ([System.Environment]::Is64BitOperatingSystem) { return \"ARM64\" } else { return \"ARM32\" }\n\t\t} elseif ([System.Environment]::Is64BitOperatingSystem) { return \"64-bit\" } else { return \"32-bit\" }\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Parameter Usage PowerShell\nDESCRIPTION: This snippet illustrates the command line usage of the list-installed-software.ps1 script. It shows how the script can be invoked without specific parameters or with standard PowerShell common parameters like Verbose or Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-installed-software.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-installed-software.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for speak-italian.ps1 in PowerShell\nDESCRIPTION: Defines the parameters accepted by the speak-italian.ps1 script. The primary parameter is `-text`, a string representing the Italian text to speak. It's optional, positional (1st), and doesn't accept pipeline input or wildcards. The script also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-italian.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-italian.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Italian text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameters of show-dubai-city.ps1\nDESCRIPTION: This section describes the parameters supported by the PowerShell script `show-dubai-city.ps1`. It primarily highlights the support for common parameters, which enable various control options during script execution, such as verbose output, debugging, error handling, and variable management. These parameters are standard in PowerShell scripts and enhance their flexibility.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dubai-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-dubai-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Fibonacci Numbers in PowerShell\nDESCRIPTION: This script calculates and prints the first 100 Fibonacci numbers using a recursive approach. It defines a recursive function 'fibo' that computes each Fibonacci number and then iterates from 0 to 100, displaying each number in sequence.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-fibonacci.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the Fibonacci numbers\n.DESCRIPTION\n\tThis PowerShell script lists the first 100 Fibonacci numbers.\n.EXAMPLE\n\tPS> ./list-fibonacci.ps1\n\t1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction fibo([int]$n) {\n    if ($n -lt 2) { return 1 }\n    return (fibo($n - 1)) + (fibo($n - 2))\n}\n\n\nforeach ($i in 0..100) {\n\tWrite-Host \"$(fibo $i), \" -noNewline\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Uninstalling Microsoft Teams\nDESCRIPTION: This PowerShell script uninstalls Microsoft Teams from the local machine using winget. It includes comments describing the script's purpose, usage, and author information, along with error handling to catch and report issues during uninstallation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-microsoft-teams.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Microsoft Teams\n.DESCRIPTION\n\tThis PowerShell script uninstalls Microsoft Teams from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-microsoft-teams\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Microsoft Teams, please wait...\"\n\n\t& winget uninstall --id Microsoft.Teams\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Microsoft Teams, is it installed?\" }\n\n\t\"Microsoft Teams is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Launching OpenTopoMap Website PowerShell Script\nDESCRIPTION: A PowerShell script that launches the OpenTopoMap website in the default web browser. It supports the common PowerShell parameters including Verbose, Debug, and ErrorAction which enable enhanced control of the script's execution behavior. The script expects no additional input parameters besides the common ones and outputs the opened website in the browser. Dependencies include a PowerShell environment and an internet connection for website access.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-topo-map.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-topo-map.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Winget-based Opera Browser Uninstallation in PowerShell\nDESCRIPTION: This core PowerShell script attempts to uninstall Opera Browser using the `winget uninstall \"Opera Browser\"` command. It includes a `try-catch` block for error handling, checking the `$lastExitCode` of the `winget` command to determine success or failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-opera-browser.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Opera Browser\n.DESCRIPTION\n\tThis PowerShell script uninstalls Opera Browser from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-opera-browser\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Opera Browser, please wait...\"\n\n\t& winget uninstall \"Opera Browser\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Opera Browser, is it installed?\" }\n\n\t\"Opera Browser is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-google-chrome.ps1 Script (PowerShell)\nDESCRIPTION: Defines the parameters accepted by the `open-google-chrome.ps1` script. It includes an optional `-URL` parameter (positional) of type String to specify a web address to open upon launch. The script also supports standard PowerShell common parameters for advanced control and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-chrome.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-google-chrome.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies an optional URL\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the disconnect-vpn.ps1 Script (PowerShell Example)\nDESCRIPTION: Provides an example of how to execute the 'disconnect-vpn.ps1' script in a PowerShell console. Running the script as shown will initiate the VPN disconnection process and output 'Disconnected now.' upon successful completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/disconnect-vpn.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./disconnect-vpn.ps1\nDisconnected now.\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: Provides a simple command-line example demonstrating how to execute the `close-screen-magnifier.ps1` script from the PowerShell console using its relative path `./`. No parameters are explicitly shown in this basic example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-screen-magnifier.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-screen-magnifier\n\n\n```\n\n----------------------------------------\n\nTITLE: Using open-wired-website.ps1 Parameters in PowerShell\nDESCRIPTION: Shows the syntax for using the open-wired-website.ps1 script, including supported common PowerShell parameters such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wired-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-wired-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documentation for 'close-serenade.ps1' PowerShell Script\nDESCRIPTION: Comprehensive comment-based documentation describing the purpose, usage, parameters, example, notes, and links related to the 'close-serenade.ps1' script. It aids users in understanding how to invoke the script and its functionality.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-serenade.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Serenade.ai application\n.DESCRIPTION\n\tThis PowerShell script closes the Serenade.ai application gracefully.\n.EXAMPLE\n\tPS> ./close-serenade.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Updates\nDESCRIPTION: This snippet fetches remote updates for the Git repository. It uses the `git -C \"$FullPath\" fetch --all --recurse-submodules --tags --force --quiet` command. It fetches all remotes, submodules, tags, and forces the update. The script checks the exit code for success and throws an error if the fetch fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (5/10) Fetching remote updates...       \" -noNewline\n\t& git -C \"$FullPath\" fetch --all --recurse-submodules --tags --force --quiet\n\tif ($lastExitCode -ne \"0\") { throw \"'git fetch' failed with exit code $lastExitCode\" }\n\tWrite-Host \"OK\"\n```\n\n----------------------------------------\n\nTITLE: Checking Earth Script Execution - PowerShell\nDESCRIPTION: This snippet illustrates how to run the `check-earth.ps1` script. It's executed directly from the PowerShell prompt using the script's relative path. No specific parameters are passed in the example, implying it uses default or no parameters for this execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-earth.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-earth\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for install-signal-cli.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the parameter definition block for the `install-signal-cli.ps1` script. It defines an optional string parameter `-Version` to specify the version of `signal-cli` to install. It also indicates support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-signal-cli.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-signal-cli.ps1 [[-Version] <String>] [<CommonParameters>]\n\n-Version <String>\n    Specifies the version to install\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Z Drive with open-z-drive.ps1 in PowerShell\nDESCRIPTION: This snippet illustrates how to invoke the open-z-drive.ps1 script using PowerShell. The script supports standard common parameters such as Verbose, Debug, ErrorAction, and others as listed in the documentation. Input is a straightforward script call and expected output is the opening of the Z: drive in File Explorer. Requires PowerShell and access to the specified script file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-z-drive.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./open-z-drive\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This example demonstrates how to run the `open-themes-settings.ps1` script from a PowerShell console. It shows the simple command needed to invoke the script, which directly launches the Windows themes settings window without requiring any specific arguments. The expected outcome is the immediate opening of the relevant system settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-themes-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-themes-settings\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for clone-shallow.ps1 in PowerShell\nDESCRIPTION: Defines the command-line parameters for the clone-shallow.ps1 script. It accepts an optional -targetDir parameter specifying the destination path for the cloned repository, defaulting to the current working directory ($PWD). It also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clone-shallow.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/clone-shallow.ps1 [[-targetDir] <String>] [<CommonParameters>]\n\n-targetDir <String>\n    Specifies the file path to the target directory (current working directory by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters Support in PowerShell Script\nDESCRIPTION: Specifies that the script supports PowerShell CommonParameters allowing users to use standard cmdlet parameters such as Verbose, Debug, ErrorAction, and others for better script interaction and control over output, error, and pipeline behaviors. No additional dependencies are required as these are built-in PowerShell features.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-fractal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of Paint 3D Closing Script - PowerShell\nDESCRIPTION: This code snippet demonstrates how to execute the close-paint-three-d.ps1 PowerShell script from the command line to close Paint 3D. Users should have execution permissions and the script path accessible. The example can be modified with parameter switches as described in the parameter documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-paint-three-d.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-paint-3d.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Using speak-french.ps1 Command Syntax\nDESCRIPTION: Shows the command syntax and parameters for the speak-french.ps1 script. The script accepts a text parameter for the French text to be spoken and supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-french.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-french.ps1 [[-text] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Starting PowerShell without Banner (Shell)\nDESCRIPTION: Launches the PowerShell executable (`powershell.exe`) with the `-nologo` command-line option to suppress the startup banner message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\npowershell.exe -nologo\n```\n\n----------------------------------------\n\nTITLE: Executing open-outdoor-active-website using PowerShell Script\nDESCRIPTION: Demonstrates running the open-outdoor-active-website.ps1 script from the PowerShell command line. This execution opens the Outdoor Active website in the default browser without any mandatory parameters, leveraging PowerShell's script invocation pattern. No additional dependencies are required beyond having PowerShell installed, and the expected output is the launching of the default browser to the website. Supports typical PowerShell common parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-outdoor-active-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-outdoor-active-website\n```\n\n----------------------------------------\n\nTITLE: Launching Notepad Website Using PowerShell Script\nDESCRIPTION: This snippet shows how to invoke the open-note-pad-website.ps1 script that launches the default web browser to open the Notepad website. It accepts common PowerShell parameters such as Verbose, Debug, ErrorAction, and others to customize execution behavior. The script does not require any positional parameters and is intended for straightforward use.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-note-pad-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-note-pad-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open Downloads Folder\nDESCRIPTION: This script opens the user's Downloads folder using File Explorer. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction to facilitate debugging and error handling. The script does not take additional parameters and is mainly for convenience.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-downloads.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-downloads.ps1 - Opens the downloads folder\n\nThis script starts the File Explorer with the downloads folder.\n\n## Parameters\n```powershell\nopen-downloads.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-file-explorer\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-downloads.ps1*\n```\n\n----------------------------------------\n\nTITLE: Launching Yahoo Website Using PowerShell\nDESCRIPTION: This PowerShell script opens the default web browser and navigates to the Yahoo website. It supports standard common parameters such as Verbose, Debug, and ErrorAction for script control and error handling. The script expects no additional inputs besides these parameters and performs a straightforward browser launch, serving as a utility for quick access to Yahoo.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-yahoo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-yahoo.ps1 [<CommonParameters>]  \n\n[<CommonParameters>]  \n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction,  \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-yahoo\n```\n\n----------------------------------------\n\nTITLE: Specifying Usage Parameters in PowerShell Script\nDESCRIPTION: This code block outlines the script usage syntax and lists the common PowerShell parameters (Verbose, Debug, ErrorAction, etc.) supported by 'close-vlc.ps1'. Users should have PowerShell available and understand how to pass native parameters to scripts. There are no code actions performed directly; it serves as a parameter reference.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-vlc.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/close-vlc.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Play Rattlesnake Sound\nDESCRIPTION: This PowerShell script plays a rattlesnake sound by invoking an external script 'play-mp3.ps1' with the path to the MP3 file. It includes inline documentation, example usage, and author/license information. Dependencies include the external script 'play-mp3.ps1' and the MP3 file location. It outputs the sound and exits with success status.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-rattlesnake-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a rattlesnake sound\n.DESCRIPTION\n\tThis PowerShell script plays a rattlesnake sound.\n.EXAMPLE\n\tPS> ./play-rattlesnake-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/rattlesnake.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Using list-os-updates.ps1 with Parameters\nDESCRIPTION: Example of how to use the list-os-updates.ps1 script, showing the available parameters including RSS_URL for specifying the feed source and MaxCount for limiting the number of results.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os-updates.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-os-updates.ps1 [[-RSS_URL] <String>] [[-MaxCount] <Int32>] [<CommonParameters>]\n\n-RSS_URL <String>\n    Specifies the URL to the RSS feed\n    \n    Required?                    false\n    Position?                    1\n    Default value                https://distrowatch.com/news/dwd.xml\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-MaxCount <Int32>\n    Specifies the number of news to list\n    \n    Required?                    false\n    Position?                    2\n    Default value                30\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch a Web Browser for White House Website\nDESCRIPTION: This PowerShell script initiates the default web browser to open the White House website. It supports common parameters for debugging, verbosity, and error handling. The script requires PowerShell environment and is intended for quick access to the specified URL.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-white-house-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-white-house-website.ps1 - Opens the White House website\n\nThis script launches the Web browser with the White House website.\n\n## Parameters\n```powershell\nopen-white-house-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-white-house-website\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-white-house-website.ps1*\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for Translate File PowerShell Script\nDESCRIPTION: This snippet defines the parameters for the PowerShell script `translate-file.ps1`. It includes the parameters `-File`, `-SourceLang`, and `-TargetLang`, which specify the input file path, the source language, and the target language, respectively. The script also includes support for common parameters. These parameters accept input from the command line and allow the user to specify the file to translate and the source and target languages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-file.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/translate-file.ps1 [[-File] <String>] [[-SourceLang] <String>] [[-TargetLang] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Example usage of show-gcc-manual PowerShell script\nDESCRIPTION: Demonstrates how to execute the show-gcc-manual.ps1 script from a PowerShell prompt to open the GCC manual.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-gcc-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-gcc-manual\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters and Common Parameters in PowerShell\nDESCRIPTION: This snippet declares the command line invocation for the script and lists supported PowerShell common parameters such as Verbose, Debug, and ErrorAction. These parameters enhance script diagnostics and execution control. It is not executable code but rather specifies the available options for users when running the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/start-ipfs-server.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/start-ipfs-server.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Writing Text in Lowercase\nDESCRIPTION: This PowerShell script converts an input string to lowercase and prints the result. It accepts a parameter for the text to be converted or prompts the user if no parameter is provided. The script supports standard PowerShell common parameters for enhanced control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-lowercase.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text in lowercase letters\n.DESCRIPTION\n\tThis PowerShell script writes the given text in lowercase letters.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-lowercase \"Hello World\"\n\ttarget output: hello world\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\nif ($text -eq \"\" ) { $text = Read-Host \"Enter the text to write\" }\n\nWrite-Output $text.ToLower()\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters (PowerShell)\nDESCRIPTION: This snippet describes the common parameters supported by the `play-tic-tac-toe-game.ps1` script. It lists the standard PowerShell common parameters that can be used to control script behavior like verbosity and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tic-tac-toe-game.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-tic-tac-toe-game.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Adjusting Speech Rate and Volume with Feedback\nDESCRIPTION: Modifies the speech rate (speed at which text is spoken) to various levels and announces each state. Similarly, it changes volume levels and provides spoken confirmation, testing the range of rate and volume parameters supported by the COM object, ensuring speech output adapts accordingly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-test.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Voice.rate = -10\nSpeak(\"I'm speaking very, very slow at speed rate -10.\")\n$Voice.rate = -5\nSpeak(\"I'm speaking very slow at speed rate -5.\")\n$Voice.rate = -3\nSpeak(\"I'm speaking slow at rate -3.\")\n$Voice.rate = 0\nSpeak(\"I'm speaking quite normal at speed rate 0.\")\n$Voice.rate = 2\nSpeak(\"I'm speaking fast at speed rate 2.\")\n$Voice.rate = 5\nSpeak(\"I'm speaking very fast at speed rate 5.\")\n$Voice.rate = 10\nSpeak(\"I'm speaking very, very fast at speed rate 10.\")\n$Voice.rate = $DefaultRate\n\n$Voice.volume = 100\nSpeak(\"Let's try 100% volume.\")\n$Voice.volume = 75\nSpeak(\"Let's try 75% volume.\")\n$Voice.volume = 50\nSpeak(\"Let's try 50% volume.\")\n$Voice.volume = 25\nSpeak(\"Let's try 25% volume.\")\n$Voice.volume = $DefaultVolume\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-flipboard-website.ps1\nDESCRIPTION: This section defines the parameters supported by the open-flipboard-website.ps1 script. It indicates that the script supports common parameters such as Verbose, Debug, ErrorAction, and others, allowing for detailed control during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-flipboard-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-flipboard-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Usage Example for open-screen-clip.ps1\nDESCRIPTION: Demonstrates how to execute the open-screen-clip.ps1 script from a PowerShell prompt. This example shows the basic command without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-screen-clip.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-screen-clip\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for check-zenith.ps1 Script in PowerShell\nDESCRIPTION: This section outlines the parameters accepted by the check-zenith.ps1 script. It primarily highlights the script's support for the standard PowerShell common parameters (Verbose, Debug, ErrorAction, etc.), indicating how users can control its execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-zenith.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-zenith.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-apps.ps1\nDESCRIPTION: A simple example showing how to execute the list-apps.ps1 script without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-apps.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-apps.ps1\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell using Snap on Linux (Shell)\nDESCRIPTION: Installs PowerShell Core using the Snap package manager on compatible Linux distributions and creates a symbolic link for the `pwsh` command in `/usr/bin`. Requires sudo privileges and Snap pre-installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ sudo snap install PowerShell\n$ sudo ln -s /snap/bin/pwsh /usr/bin/pwsh\n```\n\n----------------------------------------\n\nTITLE: Describing `close-task-manager.ps1` Parameters in PowerShell\nDESCRIPTION: Displays the syntax for executing the `close-task-manager.ps1` script, emphasizing its compatibility with standard PowerShell common parameters (e.g., Verbose, Debug, ErrorAction). No script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-task-manager.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/close-task-manager.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-developer-settings.ps1\nDESCRIPTION: A simple example showing how to execute the script from a PowerShell prompt to open Windows developer settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-developer-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-developer-settings\n```\n\n----------------------------------------\n\nTITLE: Implementing Lion Sound Playback with MP3 Helper in PowerShell\nDESCRIPTION: This snippet contains the main implementation of play-lion-sound.ps1, including a structured comment block for documentation consistent with PowerShell best practices. It invokes the play-mp3.ps1 helper script with the path to a lion MP3 file to perform the actual audio playback, then exits with a success code. Requires both play-mp3.ps1 and the audio file to be accessible relative to the executing script. Input is implicit (no user input required); output is the lion sound played on the system audio device.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-lion-sound.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a lion sound\n.DESCRIPTION\n\tThis PowerShell script plays a lion sound.\n.EXAMPLE\n\tPS> ./play-lion-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/lion.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Listing Recycle Bin Contents with PowerShell Script\nDESCRIPTION: This PowerShell script enumerates and displays the items in the recycle bin by accessing the Shell.Application COM object with NameSpace(0x0a). The script outputs the Name, Size, and Path properties of each recycled file. It supports standard PowerShell common parameters (e.g., Verbose, Debug, ErrorAction), requires no external dependencies beyond standard Windows and PowerShell environments, and exits with code 0 on success or 1 on failure. The script expects no arguments but supports optional common parameters, and will write error details on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-recycle-bin.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the content of the recycle bin folder\n.DESCRIPTION\n\tThis PowerShell script lists the content of the recycle bin folder.\n.EXAMPLE\n\tPS> ./list-recycle-bin.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t(New-Object -ComObject Shell.Application).NameSpace(0x0a).Items() | Select-Object Name,Size,Path\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing and formatting output\nDESCRIPTION: This snippet calls the `ListEarthquakes` function and formats the output into a table using `Format-Table`. It catches potential errors during the execution of the script and prints an error message including the line number and the error details to the console. The script exits with code 0 if successful and 1 if an error occurs.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-earthquakes.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tListEarthquakes | Format-Table -property @{e='MAG';width=5},@{e='LOCATION';width=50},@{e='DEPTH';width=8},'TIME UTC' \n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GUI Elements with Windows Forms\nDESCRIPTION: This snippet defines the graphical user interface. It creates the main form, labels, date/time pickers, and the 'OK' button using Windows Forms objects. The form is customized with a title, font, size, and position. The date and time pickers are configured with a specific format, and the OK button's click event closes the form and sets the result to \"OK\".\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-reboot-task.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n## Abfrage Fenster ##\n\n# Erstellt das Hauptfenster\n$font = New-Object System.Drawing.Font(\"Arial\", 11)\n$mainForm = New-Object System.Windows.Forms.Form\n$mainForm.Text = \"Neustart-Task planen\"\n$mainForm.Font = $font\n$mainForm.ForeColor = \"Black\"\n$mainForm.BackColor = \"White\"\n$mainForm.Width = 300\n$mainForm.Height = 200\n$mainForm.StartPosition = \"CenterScreen\"\n$mainForm.MaximizeBox = $False\n\n# Erzeugt das Description Label\n$DescriptLabel = New-Object System.Windows.Forms.Label\n$DescriptLabel.Text = \"Wann soll der Computer neustarten?\"\n$DescriptLabel.Location = \"15, 10\"\n$DescriptLabel.Height = 22\n$DescriptLabel.Width = 280\n# Fügt Label zum Hauptfenster hinzu\n$mainForm.Controls.Add($DescriptLabel)\n\n\n# Rezeugt das DatePicker Label\n$datePickerLabel = New-Object System.Windows.Forms.Label\n$datePickerLabel.Text = \"Datum\"\n$datePickerLabel.Location = \"15, 45\"\n$datePickerLabel.Height = 22\n$datePickerLabel.Width = 90\n# Fügt Label zum Hauptfenster hinzu\n$mainForm.Controls.Add($datePickerLabel)\n\n# Erzeugt das TimePicker Label\n$TimePickerLabel = New-Object System.Windows.Forms.Label\n$TimePickerLabel.Text = \"Uhrzeit\"\n$TimePickerLabel.Location = \"15, 80\"\n$TimePickerLabel.Height = 22\n$TimePickerLabel.Width = 90\n# Fügt Label zum Hauptfenster hinzu\n$mainForm.Controls.Add($TimePickerLabel)\n\n# Erzeugt das DatePicker-Feld\n$datePicker = New-Object System.Windows.Forms.DateTimePicker\n$datePicker.Location = \"110, 42\"\n$datePicker.Width = \"150\"\n$datePicker.Format = [windows.forms.datetimepickerFormat]::custom\n$datePicker.CustomFormat = \"dd/MM/yyyy\"\n# Fügt DatePicker-Feld zum Hauptfenster hinzu\n$mainForm.Controls.Add($datePicker)\n\n# Erzeugt das TimePicker-Feld\n$TimePicker = New-Object System.Windows.Forms.DateTimePicker\n$TimePicker.Location = \"110, 77\"\n$TimePicker.Width = \"150\"\n$TimePicker.Format = [windows.forms.datetimepickerFormat]::custom\n$TimePicker.CustomFormat = \"HH:mm\"\n$TimePicker.ShowUpDown = $TRUE\n# Fügt TimePicker-Feld zum Hauptfenster hinzu\n$mainForm.Controls.Add($TimePicker)\n\n# Erzeugt den OK Button\n$okButton = New-Object System.Windows.Forms.Button\n$okButton.Location = \"15, 130\"\n$okButton.ForeColor = \"Black\"\n$okButton.BackColor = \"White\"\n$okButton.Text = \"OK\"\n# Legt die Button Aktion fest (DialogResult auf OK und Eingabefenster schließen\n$okButton.add_Click({$mainForm.DialogResult = \"OK\";$mainForm.close()})\n# Fügt Button zum Hauptfenster hinzu\n$mainForm.Controls.Add($okButton)\n\n# Fensterausgabe\n[void] $mainForm.ShowDialog()\n\n## Ende Abfrage Fenster ##\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Download Script in PowerShell\nDESCRIPTION: This PowerShell example demonstrates how to invoke the download-file.ps1 script by passing a URL, specifically 'https://www.cnn.com/index.html', as an argument. The example illustrates the expected usage pattern and required input parameter for successful execution. No additional dependencies are needed beyond those listed in the main documentation, and the output will depend on the script's result on downloading the specified file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/download-file.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./download-file.ps1 https://www.cnn.com/index.html\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameter Description\nDESCRIPTION: This section describes the common parameters supported by the PowerShell script. These parameters provide options for controlling the script's behavior, such as verbosity, debugging, error handling, and output redirection. It lists parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-visual-studio-code.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-visual-studio-code.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Showing Cairo city in Google Maps\nDESCRIPTION: This PowerShell script opens the default web browser and navigates to Google Maps, displaying Cairo, Egypt.  It uses the common parameters for PowerShell scripts. No specific inputs are required as it directly executes the command.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-cairo-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-cairo-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Getting Help in PowerShell\nDESCRIPTION: Demonstrates how to use `Get-Command` and `Get-Help` cmdlets to find available commands, retrieve help topics, and get information on specific parameters. This is essential for learning and understanding PowerShell commands and their usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Command                                               # Retrieves a list of all the commands available to PowerShell\n                                                          # (native binaries in $env:PATH + cmdlets / functions from PowerShell modules)\nGet-Command -Module Microsoft*                            # Retrieves a list of all the PowerShell commands exported from modules named Microsoft*\nGet-Command -Name *item                                   # Retrieves a list of all commands (native binaries + PowerShell commands) ending in \"item\"\n\nGet-Help                                                  # Get all help topics\nGet-Help -Name about_Variables                            # Get help for a specific about_* topic (aka. man page)\nGet-Help -Name Get-Command                                # Get help for a specific PowerShell function\nGet-Help -Name Get-Command -Parameter Module              # Get help for a specific parameter on a specific command\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: Defines the parameters for the script, including MAC address, IP address, UDP port, and the number of times to send the wake-up packet. Default values are provided for the UDP port (9) and the number of times (3).  It prompts for MAC and IP address if not provided as input parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wake-up-host.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$macAddr = \"\", [string]$ipAddr = \"\", [int]$udpPort = 9, [int]$numTimes = 3)\n\ttry {\n\tif ($macAddr -eq \"\" ) { $macAddr = Read-Host \"Enter the host's MAC address, e.g. 11:22:33:44:55:66\" }\n\tif ($ipAddr -eq \"\" ) { $ipAddr = Read-Host \"Enter the subnet address, e.g. 192.168.178.255\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for speak-korean.ps1 in PowerShell\nDESCRIPTION: Shows the parameter block definition for the `speak-korean.ps1` script. It defines an optional `-text` parameter of type String, which accepts the Korean text to be spoken (positional at index 1). It also indicates support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-korean.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-korean.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Korean text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Initializing Ukrainian Text-to-Speech with PowerShell\nDESCRIPTION: This PowerShell script allows the user to input Ukrainian text either as a parameter or via prompt, and speaks the text using Windows SAPI text-to-speech, specifically targeting Ukrainian voices. It requires PowerShell on a Windows environment with at least one Ukrainian TTS voice installed. The script handles parameter parsing, dynamic prompting, voice enumeration, and error reporting if the appropriate voice is not available. The main parameter is -text, which accepts the string to be spoken; the script supports standard PowerShell common parameters and outputs spoken audio. If no Ukrainian voices are found, the script exits with an error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-ukrainian.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Ukrainian\n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Ukrainian text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Ukranian text to speak\n.EXAMPLE\n\tPS> ./speak-ukrainian.ps1 \"Привіт\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Ukrainian text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Ukrainian*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Ukrainian text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Metadata & Documentation\nDESCRIPTION: This snippet contains the metadata and documentation block for the `open-d-drive.ps1` PowerShell script. It includes the synopsis, a detailed description, an example of how to use the script, a link to the GitHub repository, and author information with licensing details. This documentation is crucial for understanding the script's purpose and usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-d-drive.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the D: drive folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer with the D: drive folder.\n.EXAMPLE\n\tPS> ./open-d-drive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Script Parameters\nDESCRIPTION: This snippet documents the syntax for invoking the `open-windows-terminal.ps1` script. It explicitly states that the script supports standard PowerShell common parameters like Verbose, Debug, and ErrorAction, which influence script execution behavior. No specific custom parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windows-terminal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-windows-terminal.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running open-glider-tracker-website.ps1 with Parameters\nDESCRIPTION: Example of how to use the script with its parameters. The script accepts common PowerShell parameters such as Verbose, Debug, ErrorAction, and others.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-glider-tracker-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-glider-tracker-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using check-motherboard.ps1 Script with Common Parameters\nDESCRIPTION: Documents the command-line syntax for the check-motherboard.ps1 script, showing how to invoke it and indicating support for standard PowerShell common parameters. Common parameters allow control over verbose output, error handling, and other script behaviors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-motherboard.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-motherboard.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Playing Horse Sound Using PowerShell\nDESCRIPTION: This PowerShell script plays a horse sound by calling an external MP3 playback script with the path to a horse audio file. It supports all standard PowerShell common parameters such as Verbose and Debug, allowing flexible script execution and troubleshooting. The script exits with a status code of 0 upon successful playback, indicating successful completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-horse-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a horse sound\n.DESCRIPTION\n\tThis PowerShell script plays a horse sound.\n.EXAMPLE\n\tPS> ./play-horse-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/horse.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Running list-os.ps1 Script Example in PowerShell\nDESCRIPTION: Provides a simple example of how to execute the list-os.ps1 script from the PowerShell prompt. Running this command will trigger the script to detect and display the current operating system's version details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-os.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing `close-task-manager.ps1` in PowerShell\nDESCRIPTION: Shows a simple command-line example for running the `close-task-manager.ps1` script from a PowerShell console to terminate the Task Manager process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-task-manager.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-task-manager.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Using close-thunderbird.ps1 Script\nDESCRIPTION: Example showing how to execute the close-thunderbird.ps1 script from a PowerShell prompt. This script takes no parameters and closes the Thunderbird application if it's running.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-thunderbird.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-thunderbird.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing open-activation-settings.ps1 in PowerShell\nDESCRIPTION: This example demonstrates how to run the `open-activation-settings.ps1` script from the PowerShell command line. Executing this command will launch the Windows activation settings window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-activation-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-activation-settings\n\n```\n\n----------------------------------------\n\nTITLE: Launch Notepad Application in PowerShell\nDESCRIPTION: This PowerShell script attempts to launch the Notepad application using the Start-Process cmdlet. It uses a try-catch block to handle potential errors during the execution of the command. If the Notepad application is successfully launched, the script exits with a code of 0. If an error occurs, the script outputs an error message and exits with a code of 1.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-note-pad.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Notepad app\n.DESCRIPTION\n\tThis script launches the Notepad application.\n.EXAMPLE\n\tPS> ./open-note-pad\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process notepad.exe\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Write-Blue Script Implementation\nDESCRIPTION: This PowerShell script writes text in a blue foreground color.  It accepts a string parameter named 'text'. If the 'text' parameter is not provided, the script prompts the user to enter the text. Finally, it uses the `Write-Host` cmdlet to display the text in blue, exiting with a success code of 0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-blue.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites text in a blue foreground color\n.DESCRIPTION\n\tThis PowerShell script writes text in a blue foreground color.\n.PARAMETER text\n\tSpecifies the text to write\n.EXAMPLE\n\tPS> ./write-blue \"Hello World\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\nif ($text -eq \"\" ) { $text = read-host \"Enter the text to write\" }\n\nwrite-host -foregroundColor blue \"$text\"\n\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL and Exporting to CSV\nDESCRIPTION: Connects to a MySQL database using the provided credentials and query.  The results are then exported to a CSV file named 'mysql_table.csv' in the same directory as the script.  The Invoke-MySqlQuery function is assumed to be available, and its definition is not included in this snippet.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-mysql2csv.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t$csvfilepath = \"$PSScriptRoot\\mysql_table.csv\"\n\t$result = Invoke-MySqlQuery  -ConnectionString \"server=$server; database=$database; user=$username; password=$password; pooling = false; convert zero datetime=True\" -Sql $query -CommandTimeout 10000\n\t$result | Export-Csv $csvfilepath -NoTypeInformation\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters for open-outdoor-active.ps1 Script (PowerShell)\nDESCRIPTION: This section shows the command-line syntax for the open-outdoor-active.ps1 script, highlighting that it accepts the standard PowerShell common parameters. These parameters (like Verbose, Debug, ErrorAction) control script execution details such as output verbosity and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-outdoor-active.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-outdoor-active.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Bash Manual in Web Browser using PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser to display the Bash manual. It supports all common PowerShell script parameters such as Verbose, Debug, and ErrorAction for flexible scripting and error handling. Its primary function is to provide quick access to the Bash manual while running within a PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-bash-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-bash-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-bash-manual\n```\n\n----------------------------------------\n\nTITLE: Invoking the Outlook Inbox Listing Script in PowerShell\nDESCRIPTION: This code demonstrates a typical invocation of the script from a PowerShell prompt using its relative path. This example does not provide additional arguments, and illustrates the base case scenario, which simply runs the script to output inbox listings. Output consists of formatted table rows, each detailing received time and subject of each email in the Outlook inbox.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-outlook-inbox.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-outlook-inbox.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Describing Common Parameters in PowerShell\nDESCRIPTION: This section documents the standard PowerShell common parameters supported by the script. These parameters provide control over script execution behavior, including verbose output, debugging, error handling, warning actions, output buffering, and variable assignment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vlc.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-vlc.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Rendering Footer Instructions in PowerShell\nDESCRIPTION: This function displays instructional text at the bottom of the console window, informing players of controls and how to quit the game. It centers the text horizontally based on console width.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDisplays game control instructions at the bottom of the console.\n.DESCRIPTION\nThe function calculates the centered position for the instruction text and writes it at the last line of the console window.\n#>\nfunction DrawFooter {\n    $text = \"| Player 1: <W> moves up, <S> moves down | Player 2: <UP> or <DOWN> | <ESC> to quit |\"\n    $x = ([System.Console]::WindowWidth - $text.Length) / 2\n    $y = [System.Console]::WindowHeight - 1\n    [System.Console]::SetCursorPosition($x, $y)\n    [System.Console]::Write($text)\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters PowerShell\nDESCRIPTION: This snippet illustrates the documentation format for the parameters supported by the PowerShell script, specifically highlighting the inclusion of standard Common Parameters provided by PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-mission-impossible.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/play-mission-impossible.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script: Geolocating an IP Address using Invoke-RestMethod\nDESCRIPTION: This script, locate-ipaddress.ps1, takes an optional IP address parameter and retrieves its geographic location by invoking the REST API at ip-api.com. It handles user input, API request, and error management, providing output of the location data or error messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-ipaddress.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the geo location of the given IP address\n.DESCRIPTION\n\tThis PowerShell script prints the geographic location of the given IP address.\n.PARAMTER IPaddress\n\tSpecifies the IP address\n.EXAMPLE\n\tPS> ./locate-ipaddress.ps1 177.144.67.98\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$IPaddress= \"\")\n\ntry {\n\tif ($IPaddress -eq \"\" ) { $IPaddress = read-host \"Enter IP address to locate\" }\n\n\t$result = Invoke-RestMethod -Method Get -Uri \"http://ip-api.com/json/$IPaddress\"\n\twrite-output $result\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters - PowerShell Help\nDESCRIPTION: This snippet documents the parameters available for the `open-file-explorer.ps1` script. It details the `-Path` parameter, which specifies the folder to open, indicating it is optional. It also lists the standard PowerShell `CommonParameters` supported by the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-file-explorer.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-file-explorer.ps1 [[-Path] <String>] [<CommonParameters>]\n\n-Path <String>\n    Specifies the path to the folder to display\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-euro-rate.ps1 in PowerShell\nDESCRIPTION: Defines the parameters accepted by the `show-euro-rate.ps1` script. It primarily highlights the support for PowerShell's Common Parameters (like Verbose, Debug, ErrorAction, etc.), which control script behavior regarding output and error handling. No script-specific parameters are defined beyond the common ones.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-euro-rate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-euro-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining PowerShell Script Parameters\nDESCRIPTION: This snippet defines the available parameters for the list-news.ps1 script. It specifies the parameter names, data types, default values, and descriptions, enabling users to customize the RSS feed URL, the maximum number of headlines to list, and the output display speed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-news.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-news.ps1 [[-RSS_URL] <String>] [[-maxLines] <Int32>] [[-speed] <Int32>] [<CommonParameters>]\n\n-RSS_URL <String>\n    Specifies the URL to the RSS feed (Yahoo World News by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                https://news.yahoo.com/rss/world\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-maxLines <Int32>\n    Specifies the maximum number of lines to list (24 by default)\n    \n    Required?                    false\n    Position?                    2\n    Default value                24\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-speed <Int32>\n    Specifies the speed to write the text (10 ms by default)\n    \n    Required?                    false\n    Position?                    3\n    Default value                5\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining a PowerShell Class\nDESCRIPTION: This code defines a PowerShell class named `Person`. It includes properties for `FirstName`, `LastName`, and `Age`, as well as constructors and a method to return the full name.  Classes are a feature of PowerShell for object-oriented programming.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_29\n\nLANGUAGE: PowerShell\nCODE:\n```\nclass Person {\n  [string] $FirstName                                       # Define a class property as a string\n  [string] $LastName = 'Doe'                                # Define a class property with a default value\n  [int] $Age                                                # Define a class property as an integer\n  \n  Person() {                                                # Add a default constructor (no input parameters) for a class\n  }\n  \n  Person([string] $FirstName) {                             # Define a class constructor with a single string parameter\n    $this.FirstName = $FirstName\n  }\n  \n  [string] FullName() {\n    return '{0} {1}' -f $this.FirstName, $this.LastName\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-microsoft-website.ps1 in PowerShell\nDESCRIPTION: This snippet outlines the parameters accepted by the `open-microsoft-website.ps1` script. It primarily highlights the support for standard PowerShell Common Parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, which control script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-microsoft-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Execution of check-date.ps1 in PowerShell\nDESCRIPTION: This example demonstrates how to run the check-date.ps1 script from the PowerShell console and shows a typical output, displaying the current date.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-date.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-date\n✔️ It's Sunday, October 17, 2021\n```\n\n----------------------------------------\n\nTITLE: Registering for Filesystem Events\nDESCRIPTION: This code registers for filesystem events. It creates a `FileSystemWatcher` object to monitor a directory (`c:\\tmp`).  `Register-ObjectEvent` is used to subscribe to the `Created` event, executing a script block when a new file is created. The `$Watcher` object must persist in the session for the event handler to remain active.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n#### Register for filesystem events\n$Watcher = [System.IO.FileSystemWatcher]::new('c:\\tmp')\nRegister-ObjectEvent -InputObject $Watcher -EventName Created -Action {\n  Write-Host -Object 'New file created!!!'\n}                                                           \n```\n\n----------------------------------------\n\nTITLE: Invoking Zurich City in Google Maps via PowerShell Script\nDESCRIPTION: This code demonstrates calling the show-zurich-city.ps1 PowerShell script, which opens Zurich city in Google Maps in your default web browser. The script supports all standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. It is run directly in the PowerShell prompt, and does not require user input; any output is handled automatedly. Dependencies include PowerShell itself and a web browser installed on the environment. No additional parameters are required beyond the supported common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-zurich-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-zurich-city\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of check-health.ps1\nDESCRIPTION: The complete script implementation that checks system health. It uses three sub-scripts to check hardware, software, and network components separately and returns a success exit code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-health.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the system health \n.DESCRIPTION\n\tThis PowerShell script queries the system health of the local computer (hardware, software, and network) and prints it.\n.EXAMPLE\n\tPS> ./check-health.ps1\n  \n\tH A R D W A R E\n\t✅ Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz (CPU0, 2701MHz, socket U3E1, 30.1°C)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/check-hardware.ps1\"\n& \"$PSScriptRoot/check-software.ps1\"\n& \"$PSScriptRoot/check-network.ps1\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the show-british-pound-rate.ps1 Script\nDESCRIPTION: This example demonstrates how to run the 'show-british-pound-rate.ps1' script directly from the PowerShell command line. Executing this command will trigger the script to open the default web browser and navigate to a page displaying the British Pound exchange rate.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-british-pound-rate.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-british-pound-rate\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script with Parameter\nDESCRIPTION: This snippet shows an example of how to run the `export-to-serenade.ps1` script from the PowerShell command line. It demonstrates passing 'Computer' as the `WakeWord` parameter and displays the typical console output indicating script progress and successful completion, including the number of scripts found and the output file path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-to-serenade.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./export-to-serenade.ps1 Computer\n⏳ Found 534 PowerShell scripts...\n⏳ Writing custom JavaScript file: C:\\Users\\Markus\\.serenade\\scripts\\PowerShell.js...\n✔️ Exported to Serenade with wake word \"Computer\" in 3 sec\n```\n\n----------------------------------------\n\nTITLE: Executing Windows Maps Settings Script via PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the open-maps-settings.ps1 script in PowerShell to launch the Windows Maps settings. The script supports all standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. No additional input is required, and the script simply opens the relevant settings interface when run.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-maps-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-maps-settings\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for list-voices.ps1 Script (PowerShell)\nDESCRIPTION: This snippet shows the parameter definition for the `list-voices.ps1` script. It indicates that the script accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) for enhanced control and debugging.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-voices.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-voices.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using inspect-exe.ps1 Script with Parameters\nDESCRIPTION: Shows the command syntax for calling the inspect-exe.ps1 script with its optional parameter. The script accepts a path to an executable file and supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/inspect-exe.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/inspect-exe.ps1 [[-PathToExe] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Core Logic: write-in-emojis.ps1 (PowerShell)\nDESCRIPTION: Implements the main functionality of the script. It defines the 'text' parameter, prompts the user for input if the parameter is not provided, loads word-to-emoji mappings from a CSV file, iterates through the mappings to replace words in the input text with emojis, writes the modified text to the console, and includes basic error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-in-emojis.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Writes text in Emojis\n.DESCRIPTION\n        This PowerShell script replaces certain words in the given text by Emojis and writes it to the console.\n.PARAMETER text\n        Specifies the text\n.EXAMPLE\n        PS> ./write-in-emojis.ps1 \"I love my folder\"\n        I💘️my📂\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\")  { $text = Read-Host \"Enter the text\" }\n\t\n\t$table = Import-CSV \"$PSScriptRoot/../data/emojis.csv\"\n\tforeach($row in $table) {\n\t\t$text = $text -Replace \"\\s?$($row.WORD)\\s?\",\"$($row.EMOJI)️\"\n\t}\n\tWrite-Output $text\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Operating System Query Script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the check-operating-system.ps1 script at the PowerShell prompt. It requires the script file to be present and executable in the current directory. No arguments are required for basic usage, but common PowerShell parameters can be included as needed. The script outputs operating system details based on the detected platform.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-operating-system.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-operating-system\n\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters - PowerShell\nDESCRIPTION: This snippet documents the command-line parameters accepted by the `show-madrid-city.ps1` script. It specifically highlights that the script supports standard PowerShell Common Parameters, which are used for controlling script behavior like error handling and verbosity. These parameters are not unique to the script's primary function of opening Google Maps.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-madrid-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-madrid-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using play-pac-man-game.ps1 with Parameters\nDESCRIPTION: Shows the parameter syntax for the PowerShell script. The script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pac-man-game.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-pac-man-game.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Execution of show-lisbon-city.ps1\nDESCRIPTION: This example demonstrates how to execute the `show-lisbon-city.ps1` script from the PowerShell command line. The script is invoked using `./show-lisbon-city`, which opens the default web browser and navigates to Google Maps displaying Lisbon city.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-lisbon-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-lisbon-city\n```\n\n----------------------------------------\n\nTITLE: Describing PowerShell Script Parameters\nDESCRIPTION: This snippet presents the standard PowerShell command syntax for invoking the `export-scripts2serenade.ps1` script, explicitly including support for `CommonParameters`. It lists the supported common parameters like Verbose, Debug, etc., which can control script execution behavior and output verbosity. This structure is typical for well-documented PowerShell scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-scripts2serenade.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nexport-scripts2serenade.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of show-atlanta-city.ps1 PowerShell Script\nDESCRIPTION: Demonstrates how to execute the show-atlanta-city.ps1 script from the PowerShell command line. When run, the script will open the default web browser and navigate to Google Maps showing Atlanta.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-atlanta-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-atlanta-city\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of Vivaldi Installation Script in PowerShell\nDESCRIPTION: This line demonstrates how to execute the install-vivaldi.ps1 script from within PowerShell. It assumes the script is located in the current directory and that the execution policy allows script running. No command-line arguments are required for default installation, and the script will use available common parameters if specified.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vivaldi.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-vivaldi.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters\nDESCRIPTION: This snippet outlines the parameters the script accepts. It explicitly mentions support for common parameters, including Verbose, Debug, and ErrorAction, which are crucial for debugging and understanding the script's execution.  These parameters allow users to control the level of detail in the output and how the script handles errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-reboot-task.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Opening Toggl Track Website - PowerShell\nDESCRIPTION: This PowerShell script utilizes the `open-toggl-website.ps1` script to launch the Toggl Track website in the default web browser.  It supports common PowerShell parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. The script doesn't take any specific parameters besides the common ones.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-toggl-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-toggl-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-stack-overflow.ps1 Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the open-stack-overflow.ps1 script from the PowerShell command line to open Stack Overflow. No additional parameters are required for this basic usage. The output is the launching of the default web browser with the Stack Overflow site.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-stack-overflow.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-stack-overflow\n```\n\n----------------------------------------\n\nTITLE: PowerShell Execution Example\nDESCRIPTION: This example demonstrates how to execute the `say-hello.ps1` script from the PowerShell console.  It shows the basic command `./say-hello` to run the script. No specific input is provided, as the script is triggered by saying \"Say hello\" and uses text-to-speech.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-hello.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./say-hello\n```\n\n----------------------------------------\n\nTITLE: Executing CSV to Text Conversion in PowerShell\nDESCRIPTION: This PowerShell code demonstrates how to execute the 'convert-csv2txt.ps1' script. It shows an example of providing the CSV file path as a parameter. The script then processes the CSV file and outputs the converted text to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-csv2txt.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./convert-csv2txt salaries.csv\n```\n\n----------------------------------------\n\nTITLE: Example Usage: Running the Script from PowerShell\nDESCRIPTION: This example demonstrates how to invoke the script from the PowerShell command prompt using its relative path. No arguments are required, and it will open the C: drive in File Explorer. It illustrates basic running instructions for users unfamiliar with PowerShell syntax.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-c-drive.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-c-drive\n\n```\n\n----------------------------------------\n\nTITLE: Example usage of close-system-settings.ps1\nDESCRIPTION: This code block demonstrates how to execute the close-system-settings.ps1 script from the PowerShell console. It shows a simple invocation using the relative path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-system-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-system-settings\n```\n\n----------------------------------------\n\nTITLE: Describing Script Parameters in PowerShell\nDESCRIPTION: This snippet shows the command line syntax for running the play-tetris-game.ps1 script. It highlights that the script accepts standard PowerShell CommonParameters. These parameters control aspects like verbosity, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tetris-game.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-tetris-game.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Git Manual in PowerShell\nDESCRIPTION: This PowerShell script opens the Git manual within the user's default web browser. It accepts common PowerShell parameters like Verbose, Debug, and ErrorAction for standard scripting practices. The script does not require any input parameters and its main output is the side effect of launching the browser to show the manual page.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-git-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-git-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-git-manual\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for speak-croatian.ps1 PowerShell Script\nDESCRIPTION: This snippet shows the usage and parameters for the speak-croatian.ps1 script, which takes a single optional parameter '-text' to specify the Croatian string to be spoken. It details the script's support for common PowerShell parameters and outlines how input is accepted, including whether it is required, its position, and pipeline input behavior. The snippet informs users of requirements and input expectations for running the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-croatian.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-croatian.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Croatian text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Showing Script Syntax and Parameters - PowerShell\nDESCRIPTION: This snippet illustrates the command-line syntax for invoking the `open-wolfram-alpha.ps1` script. It indicates that the script accepts standard PowerShell Common Parameters, which provide control over output verbosity, error handling, and other execution aspects.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wolfram-alpha.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-wolfram-alpha.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Checking Dusk Time Using Web Request in PowerShell\nDESCRIPTION: This PowerShell snippet defines the core logic for the check-dusk.ps1 script, which determines the time of dusk by querying wttr.in for dusk data, parsing the result, and outputting how long until or since dusk. It defines a helper function for formatting TimeSpan objects and provides robust error handling with informative output. Dependencies include internet access to wttr.in, PowerShell 5.1 or later, and permissions to run scripts. The main input is the HTTP response from wttr.in, and the expected output is a text string indicating the dusk time and the difference relative to now. The script supports all common PowerShell parameters for flexibility.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-dusk.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the time of dusk \n.DESCRIPTION\n\tThis PowerShell script queries the time of dusk and answers by text-to-speech (TTS).\n.EXAMPLE\n\tPS> ./check-dusk.ps1\n\tDusk is in 2 hours at 8 PM.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TimeSpanToString { param([TimeSpan]$Delta)\n        $Result = \"\"\n        if ($Delta.Hours -eq 1) {       $Result += \"1 hour and \"\n        } elseif ($Delta.Hours -gt 1) { $Result += \"$($Delta.Hours) hours and \"\n        }\n        if ($Delta.Minutes -eq 1) { $Result += \"1 minute\"\n        } else {                    $Result += \"$($Delta.Minutes) minutes\"\n        }\n        return $Result\n}\n\ntry {\n\t[system.threading.thread]::currentThread.currentCulture=[system.globalization.cultureInfo]\"en-US\"\n\t$String = (Invoke-WebRequest http://wttr.in/?format=\"%d\" -UserAgent \"curl\" -useBasicParsing).Content\n\t$Hour,$Minute,$Second = $String -split ':'\n\t$Dusk = Get-Date -Hour $Hour -Minute $Minute -Second $Second\n\t$Now = [DateTime]::Now\n\tif ($Now -lt $Dusk) {\n                $TimeSpan = TimeSpanToString($Dusk - $Now)\n                $Reply = \"Dusk is in $TimeSpan at $($Dusk.ToShortTimeString()).\"\n        } else {\n                $TimeSpan = TimeSpanToString($Now - $Dusk)\n                $Reply = \"Dusk was $TimeSpan ago at $($Dusk.ToShortTimeString()).\"\n        }\n\tWrite-Output $Reply\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening Apps Folder with PowerShell\nDESCRIPTION: This PowerShell script launches the File Explorer and navigates to the UWP apps folder. It uses the `open-file-explorer.ps1` script, passing \"shell:AppsFolder\" as a parameter, which tells the File Explorer to open the specific folder.  The script then exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-apps-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Apps folder\n.DESCRIPTION\n\tThis PowerShell script launches the File Explorer showing the UWP apps folder.\n.EXAMPLE\n\tPS> ./open-apps-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-file-explorer.ps1\" \"shell:AppsFolder\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Definition\nDESCRIPTION: This snippet defines the parameter for the `give-reply.ps1` script.  It declares the `-text` parameter as a string, specifies its position, and indicates that it's not required.  The snippet also mentions the script supports common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/give-reply.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ngive-reply.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Weather Check Script with Parameter Definitions\nDESCRIPTION: Defines parameters, usage, and example command for 'check-weather.ps1', including support for common PowerShell parameters and documentation notes. It helps users understand the script's input requirements and optional settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/check-weather.ps1 [[-location] <String>] [<CommonParameters>]\n\n-location <String>\n    Specifies the location to use (determined automatically per default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Details for -RepoDir Parameter\nDESCRIPTION: Describes the '-RepoDir' parameter for the 'make-repo.ps1' script. It specifies the target directory for the repository, is not required, can be provided positionally (as the first argument), defaults to the current working directory ('$PWD'), and does not accept pipeline input or wildcards.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repo.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n-RepoDir <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Script Usage with PowerShell Invocation\nDESCRIPTION: This usage example demonstrates running the 'open-g-drive.ps1' script directly from the PowerShell command line. No required arguments are shown, highlighting that the script can be invoked as-is. Expected behavior is opening the File Explorer at the G: drive, contingent on all prerequisite scripts being available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-g-drive.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-g-drive\n```\n\n----------------------------------------\n\nTITLE: Executing close-mozilla-thunderbird.ps1 (PowerShell)\nDESCRIPTION: This example demonstrates the basic execution of the close-mozilla-thunderbird.ps1 script from a PowerShell prompt. Running this command will attempt to gracefully close the Mozilla Thunderbird application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-mozilla-thunderbird.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-mozilla-thunderbird\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Header and Metadata\nDESCRIPTION: This section contains the script's comment block, describing its purpose, usage example, author, licensing, and external links. It serves as documentation embedded within the script for clarity and reference.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-user.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCreate a new user\n.DESCRIPTION\n\tThis PowerShell script creates a new user account with an encrypted home directory.\n.EXAMPLE\n\tPS> ./new-user.ps1 Joe\n\t✅ Created user account 'Joe' with encrypted home directory in 11s.\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Drawing the Ball in PowerShell\nDESCRIPTION: This function draws the game ball at a specified X and Y coordinate, rendering a red circle emoji. It performs boundary checks to avoid drawing outside the console window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_4\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDraws the ball at specified coordinates.\n.DESCRIPTION\nThis function sets the cursor position to the ball's coordinates and writes a red circle emoji ('🔴'). It includes boundary checks to prevent drawing outside the console boundaries.\n#>\nfunction DrawBall($x, $y) {\n    if ($x -lt 0 -or $x -ge [System.Console]::WindowWidth - 1 -or $y -lt 0 -or $y -ge [System.Console]::WindowHeight) {\n        return\n    }\n    [System.Console]::SetCursorPosition($x, $y)\n    Write-Host \"🔴\" -noNewline\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters | PowerShell\nDESCRIPTION: This snippet documents the script's parameter usage, indicating that it supports standard PowerShell Common Parameters like Verbose, Debug, and ErrorAction. It shows the basic command syntax without specific custom parameters. The script requires administrator privileges to run the main installation logic.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-wsl.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-wsl.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying reboot.ps1 Script Parameters (PowerShell)\nDESCRIPTION: This snippet shows the command-line syntax for the reboot.ps1 script, highlighting its support for PowerShell's CommonParameters (like Verbose, Debug, ErrorAction, etc.).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/reboot.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/reboot.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Script Execution: PowerShell\nDESCRIPTION: This snippet provides a basic example of how to execute the `play-vulture-sound.ps1` script from the PowerShell command prompt. It demonstrates invoking the script using a relative path `./`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-vulture-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-vulture-sound\n\n```\n\n----------------------------------------\n\nTITLE: Opening OneDrive Folder in PowerShell\nDESCRIPTION: This PowerShell script opens the File Explorer and navigates to the user's OneDrive folder.  It uses `resolve-path` to determine the OneDrive directory, then executes another script, `open-file-explorer.ps1`, passing the resolved OneDrive path as a parameter. It also includes error handling using a `try-catch` block to manage potential issues during the process. Requires the presence of another script called `open-file-explorer.ps1` and assumes the OneDrive directory exists.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-one-drive-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the OneDrive folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's OneDrive folder.\n.EXAMPLE\n\tPS> ./open-one-drive-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDirs = resolve-path \"$HOME/OneDrive*\"\n\tforeach($TargetDir in $TargetDirs) {\n\t\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\t\texit 0 # success\n\t}\n\tthrow \"No OneDrive folder at 📂$HOME/Dropbox\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Full Year Calendar\nDESCRIPTION: Shows how to use the `write-calendar.ps1` script to display the calendar for an entire specified year (2013 in this case) by providing the year as the first argument.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-calendar.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-calendar 2013\nOutputs the calendar for 2013.\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of speak-croatian.ps1 in PowerShell\nDESCRIPTION: This snippet demonstrates a practical example of how to invoke the speak-croatian.ps1 script from the PowerShell console, passing the Croatian word 'zdravo' as the argument. The example shows basic usage for users intending to quickly test or utilize the script for single-phrase synthesis. No prerequisites beyond the script and a Croatian TTS voice are needed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-croatian.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-croatian.ps1 zdravo\n\n```\n\n----------------------------------------\n\nTITLE: Show Apple Manual Parameters - PowerShell\nDESCRIPTION: Defines the parameters supported by the show-apple-manual.ps1 script. It lists common parameters available in PowerShell, such as Verbose, Debug, ErrorAction, and others, that can be used to control the script's behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-apple-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-apple-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Opening Google Photos in Default Web Browser using PowerShell\nDESCRIPTION: This script launches the default web browser and navigates to the Google Photos website. It uses another script 'open-default-browser.ps1' located in the same directory to handle browser launching, and returns exit code 0 on success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-photos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Photos\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Photos website.\n.EXAMPLE\n\tPS> ./open-google-photos\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://photos.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Opening Office 365 Website\nDESCRIPTION: This PowerShell script launches the Microsoft Office 365 website in the default browser by calling an auxiliary script 'open-default-browser.ps1' with the appropriate URL. It includes metadata, usage notes, and references for maintainers and users.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-office-365.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Microsoft Office 365\n.DESCRIPTION\n\tThis script launches the Web browser with the Microsoft Office 365 website.\n.EXAMPLE\n\tPS> ./open-office-365\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://portal.office.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters for PowerShell Script\nDESCRIPTION: This snippet illustrates the parameter signature for the `close-file-explorer.ps1` script. It shows that the script accepts only standard PowerShell common parameters, with no custom-defined parameters. This provides information on how to call the script with debugging or verbose options.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-file-explorer.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/close-file-explorer.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Error Handling and Exit Codes\nDESCRIPTION: This snippet uses a `try-catch` block to handle errors during script execution. It outputs the error message along with the line number where the error occurred. The script exits with code 0 on success and 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pick-commit.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ cherry picked $CommitID into $NumBranches branches in $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Common PowerShell Parameters\nDESCRIPTION: Declaration indicating the script supports standard PowerShell common parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allowing for flexible control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-frames2mp4.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-italian.ps1 in PowerShell\nDESCRIPTION: Demonstrates a simple execution of the speak-italian.ps1 script from the PowerShell command line. It passes the Italian word \"Ciao\" as the text argument to be spoken by the TTS engine.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-italian.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-italian.ps1 Ciao\n```\n\n----------------------------------------\n\nTITLE: Convert-md2html.ps1 Usage Example\nDESCRIPTION: Shows a simple example of using the script to convert all Markdown files in the current directory to HTML format. This command will process all files with the .md extension.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-md2html.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./convert-md2html.ps1 *.md\n```\n\n----------------------------------------\n\nTITLE: Launching URL with PowerShell Script open-space-weather.ps1\nDESCRIPTION: This snippet contains the source code for the `open-space-weather.ps1` script. It executes another script `open-default-browser.ps1` located in the same directory, passing the Space Weather URL as an argument, and then exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-space-weather.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Space Weather website \n.DESCRIPTION\n\tThis script launches the Web browser with the Space Weather website.\n.EXAMPLE\n\tPS> ./open-space-weather\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.spaceweather.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Implementing PowerShell Word Spelling Logic\nDESCRIPTION: This is the core script content of spell-word.ps1. It defines the -word parameter, prompts the user if no argument is provided, converts the word to uppercase letters separated by commas, and executes a helper script (speak-english.ps1) to speak the result. It includes basic error handling. Dependencies: speak-english.ps1 in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/spell-word.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpells a word\n.DESCRIPTION\n\tThis PowerShell script spells the given word by text-to-speech (TTS).\n.PARAMETER word\n        Specifies the word to spell (queried by default)\n.EXAMPLE\n\tPS> ./spell-word.ps1 Yoda\n\t(listen)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$word = \"\")\n\ntry {\n\tif ($word -eq \"\" ) { $word = Read-Host \"Enter the word to spell\" }\n\n\t[char[]]$array = $word.ToUpper()\n\t$reply = \"\"\n\tforeach($char in $array) {\n\t\t$reply += $char + \", \"\n\t}\n\t& \"$PSScriptRoot/speak-english.ps1\" $reply\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching VPN Settings via Script Example - PowerShell\nDESCRIPTION: This usage example demonstrates how to run the open-vpn-settings PowerShell script from the terminal to launch Windows VPN settings. No additional arguments are required, and the only prerequisite is an environment with access to PowerShell and the script file itself. The script leverages the ms-settings protocol handler.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-vpn-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-vpn-settings\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameters for play-parrot-sound.ps1 (PowerShell)\nDESCRIPTION: Displays the path to the 'play-parrot-sound.ps1' script and lists the common PowerShell parameters it supports, such as Verbose, Debug, ErrorAction, etc. These parameters control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-parrot-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-parrot-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Opening FlightRadar24 Website - PowerShell\nDESCRIPTION: This snippet contains the core logic of the open-flight-radar.ps1 script. It executes another script, `open-default-browser.ps1`, passing the FlightRadar24 URL (`https://www.flightradar24.com`) as an argument, effectively opening the website in the default web browser. The script then exits with a success code (0). Requires the `open-default-browser.ps1` script to be present in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-flight-radar.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens FlightRadar24\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the FlightRadar24 website.\n.EXAMPLE\n\tPS> ./open-flight-radar\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.flightradar24.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Opening Google Calendar Script Implementation\nDESCRIPTION: The complete PowerShell script that opens Google Calendar in the default web browser. It includes comment-based help and calls another script to open the default browser with the Google Calendar URL.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-calendar.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Calendar\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Calendar website.\n.EXAMPLE\n\tPS> ./open-google-calendar\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://calendar.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing play-goat-sound.ps1 Example\nDESCRIPTION: Provides a basic example command to run the 'play-goat-sound.ps1' script from the PowerShell prompt. This command executes the script located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-goat-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-goat-sound\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameter Support for install-audacity.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the command syntax for the install-audacity.ps1 script, highlighting that it supports the standard PowerShell common parameters (Verbose, Debug, ErrorAction, etc.) for controlling script execution. No script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-audacity.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-audacity.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Change Directory to Jenkins Home\nDESCRIPTION: This PowerShell script detects Jenkins installation directories and sets the current location to the Jenkins home directory. It checks for standard paths, handles errors if neither is found, and outputs the active path or an error message. Dependencies include PowerShell standard cmdlets like Test-Path and Set-Location. The script accepts common PowerShell parameters for debugging and output control. It outputs the current Jenkins directory path on success or an error message on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-jenkins.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChanges to the Jenkins home directory\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the Jenkins home directory.\n.EXAMPLE\n\tPS> ./cd-jenkins\n\t📂C:\\Users\\Markus\\.jenkins\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif (Test-Path \"~/.jenkins\" -pathType container) {\n\t\t$path = \"~/.jenkins\"\n\t} elseif (Test-Path \"/var/snap/jenkins\" -pathType container) {\n\t\t$path = \"/var/snap/jenkins\"\n\t} else {\n\t\tthrow \"No Jenkins home directory found - is Jenkins installed?\"\n\t}\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Common Parameters Declaration\nDESCRIPTION: Declares that the script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, and others. These parameters allow users to control the script's behavior and output verbosity. There is no explicit code implementation shown, only a comment stating supported parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-apps.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for PowerShell Script convert-md2pdf.ps1\nDESCRIPTION: Defines the supported common parameters for the PowerShell script, including verbosity, debugging, error and warning handling, output buffering, pipeline variables, and output variables. These parameters enhance script flexibility and control during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-md2pdf.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing the Daily Build using install-powershell.ps1 - PowerShell\nDESCRIPTION: Demonstrates how to invoke the install-powershell.ps1 script to install a daily build of PowerShell. The example uses the -Daily switch, which requires the 'PackageManagement' module to be available, and will fetch and install the latest daily development package. Output is the side-effect of installation; there are no returned values.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS > Install the daily build\n.\\install-powershell.ps1 -Daily\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of remove-dir-tree.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the `remove-dir-tree.ps1` script from the PowerShell console. The example provides `C:\\Temp` as the target directory path to be removed recursively and silently.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-dir-tree.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./remove-dir-tree.ps1 C:\\Temp\n```\n\n----------------------------------------\n\nTITLE: Implementing a Countdown Timer in PowerShell Script\nDESCRIPTION: This snippet contains the full source of the 'set-timer.ps1' PowerShell script. The script reads an optional integer parameter for countdown seconds, prompts the user if not supplied, then decrements and displays the countdown using an external 'write-big' script for formatted output. Key dependencies are PowerShell standard modules and the './write-big' script. The script handles errors gracefully and exits with an appropriate status code. Input is the number of seconds to count down, and output is a visual countdown in the console, ending with a completion message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-timer.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets a timer for a countdown\n.DESCRIPTION\n\tThis PowerShell script sets a timer for a countdown.\n.PARAMETER Seconds\n\tSpecifies the number of seconds\n.EXAMPLE\n\tPS> ./set-timer 60\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$Seconds = 0)\n\ntry {\n\tif ($Seconds -eq 0 ) { [int]$Seconds = read-host \"Enter number of seconds\" }\n\n\tfor ($i = $Seconds; $i -gt 0; $i--) {\n\t\tClear-Host\n\t\t./write-big \"T-$i seconds\"\n\t\tStart-Sleep -seconds 1\n\t}\n\n\t\"✅ $Seconds seconds countdown finished\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using show-jenkins-manual.ps1 with Parameters in PowerShell\nDESCRIPTION: Shows the syntax for running the show-jenkins-manual.ps1 script, including the support for common PowerShell parameters such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-jenkins-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-jenkins-manual.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for enter-host.ps1 PowerShell Script\nDESCRIPTION: Defines the command-line parameters for the `enter-host.ps1` script. The `-remoteHost` parameter specifies the target hostname or IP address and is optional (position 1). The script also supports standard PowerShell common parameters for controlling output and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enter-host.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/enter-host.ps1 [[-remoteHost] <String>] [<CommonParameters>]\n\n-remoteHost <String>\n    Specifies the remote hostname or IP address\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Invoking Wikipedia Website Launch via PowerShell Script\nDESCRIPTION: This code snippet demonstrates how to invoke the 'open-wikipedia-website.ps1' PowerShell script from the command line to open the Wikipedia homepage in the system's default web browser. The script supports common parameters such as Verbose, Debug, and ErrorAction, which allow users to control execution verbosity and error handling. No additional dependencies are required beyond PowerShell; expected input is a simple invocation and output is the launching of a browser window directed at Wikipedia.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wikipedia-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-wikipedia-website\n\n```\n\n----------------------------------------\n\nTITLE: Opening Windows VPN Settings Using ms-settings Protocol - PowerShell\nDESCRIPTION: This PowerShell script snippet directly opens the VPN settings page in Windows by calling Start-Process with the ms-settings:network-vpn URI. It includes metadata comments describing the script's purpose, parameters, and example usage. No external modules are required; the script is compatible with Windows environments supporting ms-settings protocol. Upon execution, it launches the VPN settings UI and exits with code 0 to indicate success.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-vpn-settings.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the VPN settings\n.DESCRIPTION\n\tThis PowerShell script launches the VPN settings of Windows.\n.EXAMPLE\n\tPS> ./open-vpn-settings\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process ms-settings:network-vpn\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Knight Movement Validation in PowerShell\nDESCRIPTION: This snippet validates the movement of a knight. It checks if the move is an 'L' shape (2 squares in one direction and 1 square in the other). It also checks if the destination square is occupied.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_16\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MoveX = [math]::abs($MoveX)\n$MoveY = [math]::abs($MoveY)\n\nif ((($MoveX -eq 1) -and ($MoveY -eq 2)) -or (($MoveX -eq 2) -and ($MoveY -eq 1))) {\n    $status[0] = $true\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $status[1] = $true\n    }\n} else {\n    return $status\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters - PowerShell\nDESCRIPTION: This snippet documents the command-line syntax for the close-git-extensions.ps1 script. It shows the basic execution command and explicitly lists the PowerShell common parameters that the script supports, indicating no script-specific parameters are used for the core task.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-git-extensions.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/close-git-extensions.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running play-beep.ps1 Example - PowerShell\nDESCRIPTION: This snippet provides an example demonstrating how to execute the 'play-beep.ps1' script. It's a simple command to run the script from the current directory. There are no arguments being passed in this execution example, leveraging the script's default behavior.  The output is the audible beep.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-beep.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-beep\n```\n\n----------------------------------------\n\nTITLE: Example Usage of search-repo.ps1 PowerShell Script\nDESCRIPTION: Demonstrates how to execute the search-repo.ps1 script from the PowerShell prompt. This example searches for the text pattern 'UFO' in the current directory's Git repository and shows sample output lines where the pattern is found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-repo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./search-repo.ps1 UFO\nlist-calendar.ps1:            Write-Host (\" \" * 4 * [int](Get-Date $day -uformat %u)) -NoNewLine\nlist-calendar.ps1:            $dayOffset = [int](Get-Date -day 1 -month ($month + $i) -year $year -uformat %u)\n```\n\n----------------------------------------\n\nTITLE: Launching CDC Website\nDESCRIPTION: This script launches the Web browser with the CDC website (Centers for Disease Control and Prevention). It utilizes PowerShell to execute the browser command. No specific dependencies are required other than a functional PowerShell environment and a configured default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cdc-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-cdc-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Specifying Script Parameters PowerShell\nDESCRIPTION: Defines the command-line parameters available for the new-email.ps1 script. The -EmailAddress parameter accepts a string for the recipient's email, defaulting to 'markus@fleschutz.de'. The script also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-email.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/new-email.ps1 [[-EmailAddress] <String>] [<CommonParameters>]\n\n-EmailAddress <String>\n    Specifies the email address fill in\n    \n    Required?                    false\n    Position?                    1\n    Default value                markus@fleschutz.de\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Opening Windows System Settings Using PowerShell Script\nDESCRIPTION: This script launches the Windows system settings application. It supports common parameters such as Verbose, Debug, ErrorAction, and others for flexible execution and troubleshooting. The script can be run directly from PowerShell with optional parameters for advanced control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-system-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-system-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n# Example usage\nPS> ./open-system-settings\n```\n\n----------------------------------------\n\nTITLE: Example Usage of write-value.ps1 PowerShell Script\nDESCRIPTION: Shows a sample invocation of the script providing specific numeric values and units. Demonstrates the console output format which includes a range bar visually representing the value position between redMin and redMax boundaries with the unit appended.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-value.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-value.ps1 95.0 \"°C\" 0 10 90 100\n[0--------95°C-100]\n```\n\n----------------------------------------\n\nTITLE: Using show-tokyo-city.ps1 PowerShell script\nDESCRIPTION: This PowerShell script opens Google Maps at Tokyo city location in the default web browser. It requires no parameters and is executed with a simple command line call.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-tokyo-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-tokyo-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameters for play-goat-sound.ps1\nDESCRIPTION: Displays the command syntax for the 'play-goat-sound.ps1' script, highlighting its support for PowerShell common parameters like Verbose, Debug, ErrorAction, etc. These parameters allow for controlling script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-goat-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-goat-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Common Parameters Support (PowerShell)\nDESCRIPTION: Indicates that the script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters are built into PowerShell and provide standard ways to control script behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-linux-vm.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example of using speak-finnish.ps1\nDESCRIPTION: Demonstrates how to use the script to speak the Finnish greeting 'Hei'.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-finnish.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-finnish.ps1 Hei\n```\n\n----------------------------------------\n\nTITLE: Executing Script with Text - PowerShell\nDESCRIPTION: This example demonstrates how to execute the `speak-hindi.ps1` script from the PowerShell console. It shows the command `./speak-hindi.ps1` followed by the Hindi text 'नमस्ते' enclosed in double quotes, illustrating how to pass the input string to the script's `-text` parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-hindi.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-hindi.ps1 \"नमस्ते\"\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Example Usage\nDESCRIPTION: This snippet demonstrates how to execute the hibernate.ps1 script in PowerShell.  It shows the command used to run the script and the expected output, including a message indicating that the computer is going to sleep. This provides users with a simple example of how to use the script in a terminal or command prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/hibernate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./hibernate.ps1\nIt's 5:04 PM, going to sleep now... 😴💤\n```\n\n----------------------------------------\n\nTITLE: Checking Submodule Status\nDESCRIPTION: This snippet checks the status of submodules in the Git repository using the `git -C \"$FullPath\" submodule status` command. It checks the exit code after running the command, and an error is thrown if the command fails, indicating an issue with the submodules.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (9/10) Checking submodule status...\"\n\t& git -C \"$FullPath\" submodule status\n\tif ($lastExitCode -ne \"0\") { throw \"'git submodule status' failed with exit code $lastExitCode\" }\n```\n\n----------------------------------------\n\nTITLE: Executing the watch-news.ps1 Script\nDESCRIPTION: Demonstrates how to execute the watch-news.ps1 script from the PowerShell prompt using its default parameters. The output shows the source URL followed by timestamps (UTC) and corresponding headlines fetched from the RSS feed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-news.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./watch-news.ps1\n\n\n\nUTC   HEADLINES           (source: https://www.yahoo.com/news/world)\n ---   ---------\n14:29  Niger coup: Ecowas deadline sparks anxiety in northern Nigeria\n...\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This is an example of how to execute the `speak-quote.ps1` script. The example shows how to run the script from the PowerShell prompt. No parameters are passed in this case, implying the use of default settings or behavior, such as selecting a random quote and speaking it using text-to-speech.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-quote.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS>./speak-quote\n(listen and learn)\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters\nDESCRIPTION: This section displays the common parameters supported by the PowerShell script. These parameters include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, providing flexibility in controlling script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-updates.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-updates.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open Facebook Website\nDESCRIPTION: This script launches the default web browser to open Facebook. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for debugging and control. The script does not explicitly require dependencies beyond PowerShell environment and outputs the Facebook page in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-facebook-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-facebook-website.ps1 - Opens the Facebook website\n\nThis script launches the Web browser with the Facebook website.\n\n## Parameters\n```powershell\nopen-facebook-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-facebook-website\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-facebook-website.ps1*\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for check-dawn.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the parameter definition for the check-dawn.ps1 script. It indicates that the script accepts the standard PowerShell common parameters, such as Verbose, Debug, ErrorAction, etc., allowing for flexible execution control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-dawn.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-dawn.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Play Elephant Sound Script\nDESCRIPTION: This PowerShell script plays an elephant sound by calling the `play-mp3.ps1` script with the path to the elephant sound MP3 file. It exits with a status code of 0 to indicate success. The script uses a relative path to locate both the `play-mp3.ps1` script and the sound file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-elephant-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays an elephant sound\n.DESCRIPTION\n\tThis PowerShell script plays an elephant sound.\n.EXAMPLE\n\tPS> ./play-elephant-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/elephant.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for see-you-later.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command syntax for executing the see-you-later.ps1 script. It highlights that the script accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, which control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/see-you-later.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nsee-you-later.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: text\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using convert-md2html.ps1 Script with Parameters\nDESCRIPTION: Demonstrates the command syntax for the convert-md2html.ps1 script, showing available parameters and their requirements. This snippet provides the formal parameter definition and common PowerShell parameter support.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-md2html.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/convert-md2html.ps1 [[-FilePattern] <String>] [<CommonParameters>]\n\n-FilePattern <String>\n    Specifies the file pattern to the Markdown file(s)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-tik-tok-website.ps1 Script\nDESCRIPTION: This snippet outlines the parameters accepted by the `open-tik-tok-website.ps1` script. It primarily shows that the script supports the standard PowerShell common parameters (like Verbose, Debug, ErrorAction) for controlling execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-tik-tok-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-tik-tok-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Set Working Directory to Trash - PowerShell\nDESCRIPTION: This script block defines the logic to change the current working directory to the user's trash or recycle bin folder. It includes a helper function `GetCurrentUserSID` for Windows path construction and handles both Windows (`C:\\$Recycle.Bin\\<SID>`) and Linux (`~/.local/share/Trash/`) trash paths. It verifies the path exists and changes the location using `Set-Location` within a try-catch block for robust error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-trash.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the trash folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's trash folder.\n.EXAMPLE\n\tPS> ./cd-trash\n\t📂C:\\$Recycle.Bin\\S-1-5-21-123404-23309-294260-1001\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction GetCurrentUserSID { [CmdletBinding()] param()\n\tAdd-Type -AssemblyName System.DirectoryServices.AccountManagement\n\treturn ([System.DirectoryServices.AccountManagement.UserPrincipal]::Current).SID.Value\n}\n\n\ntry {\n\tif ($IsLinux) {\n\t\t$path = \"~/.local/share/Trash/\"\n\t} else {\n\t\t$path = \"C:\\`$Recycle.Bin\\$(GetCurrentUserSID)\"\n\t}\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Trash folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the check-zenith.ps1 Script in PowerShell\nDESCRIPTION: Provides a basic example of how to execute the check-zenith.ps1 script from a PowerShell prompt. Running the script without any specific parameters triggers its default behavior of querying the zenith time and announcing it via TTS.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-zenith.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-zenith\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameters Definition\nDESCRIPTION: This section documents the parameters supported by the `say-hello.ps1` script. It indicates that the script accepts common parameters like Verbose, Debug, ErrorAction, etc., which are standard in PowerShell scripts. No custom parameters are defined beyond the common ones.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-hello.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nsay-hello.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Netflix Application using PowerShell\nDESCRIPTION: This snippet is a PowerShell script that launches the Netflix application by invoking the Start-Process cmdlet with 'netflix:' URI. It includes metadata comments describing its purpose, author, and usage example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-netflix.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Netflix app\n.DESCRIPTION\n\tThis script launches the Netflix application.\n.EXAMPLE\n\tPS> ./open-netflix\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process netflix:\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing cd-up2.ps1 Script Example\nDESCRIPTION: Provides an example command demonstrating how to run the cd-up2.ps1 script from the PowerShell prompt. The output shows the result of changing the directory two levels up, potentially to the root drive C:\\ depending on the starting location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up2.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-up2\n📂C:\\\n```\n\n----------------------------------------\n\nTITLE: Example Execution of Close-OneDrive Script - PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the `close-onedrive.ps1` script from the PowerShell prompt. It takes no specific parameters other than the standard PowerShell common parameters. The script gracefully closes the OneDrive folder.  No special dependencies or prerequisites are specified, other than having OneDrive installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-onedrive.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-onedrive\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to execute the `thank-you.ps1` script from a PowerShell console. It shows the standard way to run a local script using the `./` prefix.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/thank-you.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./thank-you\n\n\n```\n\n----------------------------------------\n\nTITLE: Listing Script Usage Example - PowerShell Invocation\nDESCRIPTION: This snippet gives an example invocation for running the open-help.ps1 script, demonstrating usage without additional arguments. The illustration helps users see how to execute the script directly from the shell, relying on any required dependencies in the script location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-help.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-help.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example | PowerShell\nDESCRIPTION: This snippet provides a practical example of how to run the list-network-shares.ps1 script from a PowerShell console. It shows the command used (./list-network-shares.ps1) and illustrates the formatted output, including the shared folder name, path, and description.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-network-shares.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-network-shares.ps1\n✅ Shared folder \\\\LAPTOP\\Public -> D:\\Public (\"Public folder for file transfer\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Data Integrity\nDESCRIPTION: This snippet verifies the integrity of the Git repository's data using `git fsck`. The script checks the exit code and throws an error if the `fsck` command fails, indicating data corruption or other issues in the repository.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (7/10) Verifying data integrity...\"\n\t& git -C \"$FullPath\" fsck \n\tif ($lastExitCode -ne \"0\") { throw \"'git fsck' failed with exit code $lastExitCode\" }\n```\n\n----------------------------------------\n\nTITLE: Supported Common Parameters - PowerShell\nDESCRIPTION: This section documents the standard PowerShell common parameters that are supported when executing the `open-temporary-folder.ps1` script. These parameters provide standard functionality for controlling script output, debugging, and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-temporary-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Implementation to Play Donkey Sound\nDESCRIPTION: This code executes an external PowerShell script to play an MP3 file of a donkey sound. It constructs the path dynamically based on the script's location, calls the helper script, and exits successfully. Dependencies include a script to play MP3 files and the specific MP3 file path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-donkey-sound.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/donkey.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Google Contacts Launcher Script Implementation\nDESCRIPTION: PowerShell script that opens Google Contacts in the default web browser by calling another helper script. The script executes the open-default-browser.ps1 script with the Google Contacts URL and returns a success exit code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-contacts.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Contacts\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Contacts website.\n.EXAMPLE\n\tPS> ./open-google-contacts\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://contacts.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Example Execution of Ubuntu Upgrade PowerShell\nDESCRIPTION: This snippet shows an example of how to execute the upgrade-ubuntu.ps1 PowerShell script. It is a simple execution, directly calling the script with no specified parameters. The script expects to be run in a PowerShell environment and will prompt the user for input at various stages of the upgrade process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upgrade-ubuntu.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> .\\upgrade-ubuntu.ps1\n```\n\n----------------------------------------\n\nTITLE: Speak French Text Example Usage\nDESCRIPTION: A simple example showing how to use the speak-french.ps1 script to say 'Salut' (Hello) in French.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-french.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-french.ps1 Salut\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Files\nDESCRIPTION: These commands create empty files. `New-Item` creates a new file. `Set-Content` with an empty string creates an empty file. `[System.IO.File]::WriteAllText` from the .NET Base Class Library provides another method to create an empty file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_14\n\nLANGUAGE: PowerShell\nCODE:\n```\nNew-Item -Path c:\\test\\myrecipes.txt                        # Create an empty file\nSet-Content -Path c:\\test.txt -Value ''                     # Create an empty file\n[System.IO.File]::WriteAllText('testing.txt', '')           # Create an empty file using .NET Base Class Library\n```\n\n----------------------------------------\n\nTITLE: Example Usage PowerShell\nDESCRIPTION: This snippet provides an example of how to execute the `locate-zip-code.ps1` script from the PowerShell command line. It demonstrates passing 'de' as the country code and '87600' as the zip code, showing the expected output format including the country, zip code, city, latitude, and longitude.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-zip-code.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./locate-zip-code.ps1 de 87600\n* DE 87600 Kaufbeuren is at 47.8824°N, 10.6219°W\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for PowerShell Script\nDESCRIPTION: This snippet details the parameters accepted by the `write-xmas-tree.ps1` script. It specifies the name, type, required status, position, default value, and pipeline/wildcard support for each parameter, including Size, XPos, colors, Idx, count, and duration, as well as standard common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-xmas-tree.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-xmas-tree.ps1 [[-Size] <Array>] [[-XPos] <Int32>] [[-colors] <Array>] [[-Idx] <Int32>] [[-count] <Int32>] [[-duration] <Int32>] [<CommonParameters>]\n\n-Size <Array>\n    \n    Required?                    false\n    Position?                    1\n    Default value                @(21,8,4)\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-XPos <Int32>\n    tree height, trunk width, trunk height\n    \n    Required?                    false\n    Position?                    2\n    Default value                50\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-colors <Array>\n    starting x position\n    \n    Required?                    false\n    Position?                    3\n    Default value                @(\"blue\", \"green\", \"cyan\", \"red\", \"yellow\", \"magenta\")\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Idx <Int32>\n    \n    Required?                    false\n    Position?                    4\n    Default value                (Get-Random -Min 0 -Max ($colors.Length-1))\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-count <Int32>\n    \n    Required?                    false\n    Position?                    5\n    Default value                100\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-duration <Int32>\n    \n    Required?                    false\n    Position?                    6\n    Default value                250\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Parameters in PowerShell\nDESCRIPTION: This snippet illustrates the syntax used in comment-based help to document the inclusion of PowerShell common parameters for a script. It shows how the script signature is presented along with the section explaining Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-paris-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-paris-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Comments and Metadata for Launching Paint 3D\nDESCRIPTION: This section provides structured comments and metadata annotations describing the script's purpose, author, and linking information. It serves as documentation annotations within the script to facilitate understanding and maintenance.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-paint-three-d.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Paint 3D app\n.DESCRIPTION\n\tThis script launches the Paint 3D application.\n.EXAMPLE\n\tPS> ./open-paint-3d\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: cd-videos.ps1 Script Parameters (PowerShell)\nDESCRIPTION: Defines the command-line usage for the cd-videos.ps1 script. It shows that the script accepts the standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., allowing for control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-videos.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-videos.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Using a PowerShell Class\nDESCRIPTION: This code instantiates a `Person` object, sets the `FirstName` property, and calls the `FullName()` method. `[Person]::new()` creates a new instance of the `Person` class.  The object's properties can then be set, and its methods called.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_30\n\nLANGUAGE: PowerShell\nCODE:\n```\n$Person01 = [Person]::new()                                 # Instantiate a new Person object.\n$Person01.FirstName = 'Joe'                                 # Set the FirstName property on the Person object.\n$Person01.FullName()                                        # Call the FullName() method on the Person object. Returns 'Trevor Sullivan'\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Example Output\nDESCRIPTION: An example PowerShell command line demonstrating how to execute the enable-ipv6.ps1 script. The snippet shows the typical successful output message indicating IPv6 has been enabled. It serves as a usage example for users invoking the script from the command prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-ipv6.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./enable-ipv6.ps1\n✅ IPv6 is enabled now.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters\nDESCRIPTION: This snippet defines the parameter `$pathToRepo`. It specifies the file path to the local Git repository, defaulting to the current working directory. It accepts a string input and is used to specify the Git repository's location for the script to operate on.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nparam([string]$pathToRepo = \"$PWD\")\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the Script - PowerShell\nDESCRIPTION: This example demonstrates how to execute the PowerShell script to launch the Google Find My Device website. It utilizes the script's name for execution, demonstrating minimal user input to achieve the desired action.  The script uses the `.` operator to execute the script from the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/find-android-phone.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-android-phone\n```\n\n----------------------------------------\n\nTITLE: Common Parameters in PowerShell\nDESCRIPTION: This snippet describes the common parameters supported by PowerShell scripts.  These parameters provide standard functionalities such as controlling verbosity, debugging, error handling, and output redirection. It's included as part of the documentation of the `import-vm.ps1` script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/import-vm.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage\nDESCRIPTION: This PowerShell example demonstrates how to execute the `show-ant-manual.ps1` script. It simply calls the script from the PowerShell prompt, assuming the script is located in the current directory or a directory included in the `$env:PATH` environment variable. No specific parameters are passed in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-ant-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-ant-manual\n```\n\n----------------------------------------\n\nTITLE: Supported Common Parameters - PowerShell Script - PowerShell\nDESCRIPTION: This code snippet documents the standard PowerShell common parameters that the cd-recycle-bin.ps1 script supports. These parameters provide built-in capabilities like controlling output verbosity, debugging, and error handling for the script's execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-recycle-bin.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a basic example demonstrating how to execute the `open-windows-terminal.ps1` script from a PowerShell command prompt. It shows invoking the script using its relative path `./`, assuming the current directory contains the script file. The command requires no arguments for basic execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windows-terminal.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-windows-terminal\n\n\n```\n\n----------------------------------------\n\nTITLE: Running the ASCII Clock Script from the Command Line in PowerShell\nDESCRIPTION: This snippet shows an example command to execute the write-clock.ps1 script from a PowerShell prompt. It illustrates direct invocation, triggering the real-time ASCII clock display. There are no required parameters, as the script can be run standalone for default behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-clock.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-clock.ps1\n```\n\n----------------------------------------\n\nTITLE: Build Script Parameter Declaration (PowerShell)\nDESCRIPTION: Defines a parameter named 'path' to specify the Git repository's path. It's a string parameter with a default value set to the current working directory (`$PWD`). This parameter isn't required and accepts pipeline input.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$path = \"$PWD\")\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters PowerShell\nDESCRIPTION: This snippet illustrates the command-line signature of the open-m-drive.ps1 script and highlights that it supports PowerShell's common parameters. Users can append parameters like Verbose, Debug, etc., to the script invocation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-m-drive.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-m-drive.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Announce the Current Date Using Text-to-Speech\nDESCRIPTION: This script outputs the current date audibly by utilizing PowerShell's TTS features. It accepts common PowerShell parameters such as Verbose and Debug for improved execution control. The script is intended for use in automation or accessibility scenarios where hearing the date is preferred over visual display.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-date.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/say-date.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```powershell\nPS> ./say-date\n(It's Sunday, October 17, 2021)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-drives.ps1 PowerShell Script\nDESCRIPTION: Demonstrates how to execute the list-drives.ps1 script and shows the expected output format with drive name, root path, used space in GB, and free space in GB.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-drives.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-drives.ps1\n\n\n\nName Root Used (GB) Free (GB)\n---- ---- --------- ---------\nC    C:\\     6648,1     744,2\n```\n\n----------------------------------------\n\nTITLE: Running the Firefox Manual PowerShell Script\nDESCRIPTION: Example showing how to execute the show-firefox-manual.ps1 script from PowerShell. The script launches the default web browser and navigates to the Firefox manual documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-firefox-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-firefox-manual\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters in PowerShell\nDESCRIPTION: This block documents the command-line parameters accepted by the `speak-english.ps1` script. It details the `-text` parameter for providing input text and mentions support for common PowerShell parameters. It specifies whether parameters are required, their position, default values, and pipeline/wildcard acceptance.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-english.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-english.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the English text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Definition for list-latest-tags.ps1\nDESCRIPTION: The parameter specifications for the list-latest-tags.ps1 script, showing the available options, their default values, and whether they are required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-latest-tags.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-latest-tags.ps1 [[-ParentDir] <String>] [<CommonParameters>]\n\n-ParentDir <String>\n    Specifies the path to the parent folder\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for speak-spanish.ps1 Script in PowerShell\nDESCRIPTION: This snippet outlines the parameter definition for the `speak-spanish.ps1` script. It specifies an optional string parameter `-text` (positional) for the Spanish text input and indicates support for standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-spanish.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-spanish.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Spanish text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using Script Parameters in PowerShell\nDESCRIPTION: This snippet shows the general usage pattern for the `check-firewall.ps1` script, including the possibility of using standard PowerShell Common Parameters like `Verbose` or `ErrorAction` to control script behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-firewall.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-firewall.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage - Opening File Explorer - PowerShell\nDESCRIPTION: This snippet provides a simple example demonstrating how to execute the `open-file-explorer.ps1` script from a PowerShell prompt without specifying a path. This command will launch File Explorer using the script's default behavior, typically opening the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-file-explorer.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-file-explorer\n```\n\n----------------------------------------\n\nTITLE: Using the upload-to-dropbox.ps1 script with parameters\nDESCRIPTION: Shows the command-line syntax and parameters for the upload-to-dropbox.ps1 script, including the required SourceFilePath parameter and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upload-to-dropbox.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/upload-to-dropbox.ps1 [-SourceFilePath] <String> [<CommonParameters>]\n\n-SourceFilePath <String>\n    \n    Required?                    true\n    Position?                    1\n    Default value                \n    Accept pipeline input?       true (ByValue)\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Common Parameter Support\nDESCRIPTION: Indicates that the 'make-repo.ps1' script supports the standard PowerShell common parameters (Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, OutVariable) for controlling script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repo.md#_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n[<CommonParameters>]\n    This cmdlet supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell script execution example\nDESCRIPTION: This code shows an example of executing the PowerShell script and the expected output. The script retrieves the motherboard manufacturer and displays it along with other related details. This allows for quick identification of the motherboard and verification that the script is working as intended.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-motherboard.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-motherboard.ps1\n\n\n\nManufacturer : Gigabyte Technology Co., Ltd.\n...\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Script Parameters\nDESCRIPTION: This snippet documents the parameter block structure and lists the common PowerShell parameters supported by the open-mozilla-thunderbird.ps1 script. It shows the script's path and how parameters are represented in the help documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-mozilla-thunderbird.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-mozilla-thunderbird.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Detailed Script Syntax\nDESCRIPTION: Provides the full syntax for the 'make-repo.ps1' script, including the optional strongly-typed '-RepoDir' parameter and the placeholder for standard PowerShell common parameters. The path indicates the script's location in this specific environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/make-repo.ps1 [[-RepoDir] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Declaration and Validation\nDESCRIPTION: This snippet declares the script's parameters: `CommitID`, `CommitMessage`, `Branches`, and `RepoDir`. It also includes a validation check to ensure the `RepoDir` exists.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/pick-commit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$CommitID = \"\", [string]$CommitMessage = \"\", [string]$Branches = \"\", [string]$RepoDir = \"$PWD\")\n\ntry {\n\tif (-not(Test-Path \"$RepoDir\" -pathType container)) { throw \"Can't access directory: $RepoDir\" }\n\tSet-Location \"$RepoDir\"\n```\n\n----------------------------------------\n\nTITLE: Defining Common Parameters for PowerShell Script\nDESCRIPTION: This snippet outlines the standard PowerShell common parameters supported by the script, such as Verbose, Debug, ErrorAction, and others. These parameters provide standard ways to control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-dog-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-dog-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Definition PowerShell\nDESCRIPTION: This snippet defines the command-line parameters accepted by the `locate-zip-code.ps1` script. It shows the parameter names (`-CountryCode`, `-ZipCode`), their types (`String`), whether they are required (both false), their position, and indicates support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-zip-code.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/locate-zip-code.ps1 [[-CountryCode] <String>] [[-ZipCode] <String>] [<CommonParameters>]\n\n-CountryCode <String>\n    Specifies the country code\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-ZipCode <String>\n    Specifies the zip code\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Printing Error and Exiting PowerShell Script (PowerShell)\nDESCRIPTION: Prints an error message prefixed with 'ERROR:' to the host console and terminates the current PowerShell script with a non-zero exit code (typically 1). This signals failure and provides a parseable error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\n# Example implementation based on description\nWrite-Host \"ERROR: An error occurred during script execution.\"\nexit 1\n```\n\n----------------------------------------\n\nTITLE: Example Execution of mute-audio.ps1 in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the `mute-audio.ps1` script from the PowerShell command line. It shows the basic command to run the script from its directory using `./mute-audio`. No specific input parameters are shown in the example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/mute-audio.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./mute-audio\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Play M3U Playlist Files\nDESCRIPTION: This script accepts a playlist file path as input, validates its existence, reads the playlist contents, skips comment lines, verifies each audio file exists, and then invokes another script to play each MP3 file via Windows MediaPlayer. It includes error handling and user prompts for input.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-m3u.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a .M3U playlist\n.DESCRIPTION\n\tThis PowerShell script plays the given playlist (in .M3U file format)\n.PARAMETER filename\n\tSpecifies the path to the playlist\n.EXAMPLE\n\tPS> ./play-m3u.ps1 C:\\MyPlaylist.m3u\n\t   ▶️ Playing '01 Sandy beach - strong waves.mp3' (02:54) ...\n\t   ...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$filename = \"\")\n\ntry {\n\tif ($filename -eq \"\" ) { $filename = Read-Host \"Enter the path to the .M3U playlist file\" }\n\n\tif (-not(Test-Path \"$filename\" -pathType leaf)) { throw \"Can't access playlist file: $filename\" }\n\t$lines = Get-Content $filename\n\n\tAdd-Type -assemblyName presentationCore\n\t$MediaPlayer = New-Object system.windows.media.mediaplayer\n\n\tforeach ($line in $lines) {\n\t\tif ($line[0] -eq \"#\") { continue }\n\t\tif (-not(Test-Path \"$line\" -pathType leaf)) { throw \"Can't access audio file: $line\" }\n\t\t$fullPath = (Get-ChildItem \"$line\").fullname\n\n\t\t& \"$PSScriptRoot/play-mp3.ps1\" $fullPath\n\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for send-tcp.ps1 Script (PowerShell)\nDESCRIPTION: Defines the command-line parameters accepted by the send-tcp.ps1 script. It specifies the target IP address (-TargetIP), target port number (-TargetPort), and the message content (-Message). It also notes support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-tcp.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/send-tcp.ps1 [[-TargetIP] <String>] [[-TargetPort] <Int32>] [[-Message] <String>] [<CommonParameters>]\n\n-TargetIP <String>\n    Specifies the target IP address\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-TargetPort <Int32>\n    Specifies the target port number\n    \n    Required?                    false\n    Position?                    2\n    Default value                0\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Message <String>\n    Specifies the message to send\n    \n    Required?                    false\n    Position?                    3\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Describing script parameters in PowerShell\nDESCRIPTION: This snippet outlines the command-line parameters accepted by the remind-me.ps1 script. It details the -Message (string) and -Time (DateTime) parameters, specifying their position, default values, and whether they accept pipeline input or wildcard characters, along with standard PowerShell CommonParameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remind-me.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/remind-me.ps1 [[-Message] <String>] [[-Time] <DateTime>] [<CommonParameters>]\n\n-Message <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Time <DateTime>\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running the SSH Server Installation Script in PowerShell\nDESCRIPTION: This example shows how to invoke the install-ssh-server.ps1 script from the PowerShell prompt with default options, requiring administrator privileges. The script will proceed with the SSH server installation on the local system without extra arguments. No special parameters are needed; successful execution results in installation and startup of the SSH service.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-ssh-server.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-ssh-server.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Executing list-os.ps1 with Common Parameters in PowerShell\nDESCRIPTION: Demonstrates the command-line syntax for executing the list-os.ps1 script. It highlights the availability of standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., which can modify the script's execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-os.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-os.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters PowerShell\nDESCRIPTION: This section defines the command-line parameters available for the `encrypt-file.ps1` script. It specifies the `-Path` parameter for the file location and the `-Password` parameter for the encryption key, both being optional.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/encrypt-file.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/encrypt-file.ps1 [[-Path] <String>] [[-Password] <String>] [<CommonParameters>]\n\n-Path <String>\n    Specifies the path to the file to encrypt\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Password <String>\n    Specifies the password to use\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Building using Makefile (PowerShell)\nDESCRIPTION: This snippet builds a repository using Makefile. It checks for `Makefile` and executes `make -j4`.  Requires Make to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/Makefile\" -pathType leaf) {\n\t\t\"⏳ Building 📂$dirName by using Makefile...\"\n\t\tSet-Location \"$path\"\n\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' has failed\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for play-chess-game.ps1 Script (PowerShell)\nDESCRIPTION: This snippet defines the parameters accepted by the play-chess-game.ps1 script. It primarily indicates support for the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) which control script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess-game.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-chess-game.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: text\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Building using makefile (PowerShell)\nDESCRIPTION: This snippet builds a repository using makefile. It checks for `makefile` and executes `make -j4`. Requires Make to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_8\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/makefile\" -pathType leaf) {\n\t\t\"⏳ Building 📂$dirName by using makefile...\"\n\t\tSet-Location \"$path\"\n\n\t\t& make -j4\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'make -j4' has failed\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Alert Script Usage Parameters in PowerShell\nDESCRIPTION: Defines the script parameters and common parameters supported by the alert.ps1 script. The script takes an optional message parameter that specifies the alert text to be sent.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/alert.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/alert.ps1 [[-Message] <String>] [<CommonParameters>]\n\n-Message <String>\n    Specifies the alert message\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Showing Script Parameters PowerShell\nDESCRIPTION: This snippet displays the command-line syntax for the play-cube-game.ps1 script, including optional common parameters. It clarifies that the script supports standard PowerShell common parameters like Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-cube-game.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-cube-game.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Folder Sync Script Example\nDESCRIPTION: This example demonstrates how to run the `sync-folder.ps1` script from a PowerShell console. It shows the typical usage pattern where source and target paths are provided directly as arguments after the script name.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/sync-folder.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./sync-folder.ps1 C:\\MyPhotos D:\\Backups\\MyPhotos\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Chrome Launch Script in PowerShell\nDESCRIPTION: This code demonstrates a typical example invocation of the script from the PowerShell console without specifying an explicit URL. It shows that executing './open-chrome' will trigger the launch of Chrome, using the default URL parameter. The snippet clarifies practical usage for new users and confirms minimal parameter requirements for operation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-chrome.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-chrome\n\n```\n\n----------------------------------------\n\nTITLE: Running Chrome Browser Example - PowerShell\nDESCRIPTION: This is an example usage of the `open-chrome-browser.ps1` script.  It shows how to invoke the script without specifying a URL, thus using the default URL. No parameters are passed in this specific example. The output is the Chrome browser launching with the default URL.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-chrome-browser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-chrome-browser\n```\n\n----------------------------------------\n\nTITLE: Setting Execute Permissions on Linux (Shell)\nDESCRIPTION: Uses the `chmod` command on Linux to grant execute permissions (`+rx`) to all users (`a`) for the specified file (e.g., a PowerShell script). This is necessary to run the script directly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nchmod a+rx <filename>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of close-chrome-browser.ps1 PowerShell Script\nDESCRIPTION: Demonstrates how to execute the close-chrome-browser.ps1 script from a PowerShell prompt to close the Google Chrome browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-chrome-browser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-chrome-browser\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for add-memo.ps1\nDESCRIPTION: This snippet details the parameters accepted by the `add-memo.ps1` PowerShell script. It includes the optional `-text` parameter for specifying the memo content directly and mentions support for standard PowerShell CommonParameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/add-memo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./add-memo.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the text to memorize\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example of Using close-google-chrome.ps1\nDESCRIPTION: Demonstrates how to execute the script from a PowerShell prompt to close Google Chrome browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-google-chrome.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-google-chrome\n```\n\n----------------------------------------\n\nTITLE: Script Usage Parameters for remove-user.ps1\nDESCRIPTION: Defines the command-line parameters for the remove-user.ps1 script, including the optional 'username' parameter and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-user.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/remove-user.ps1 [[-username] <String>] [<CommonParameters>]\n\n-username <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters - PowerShell\nDESCRIPTION: Explains the parameters accepted by the script, highlighting its support for standard PowerShell Common Parameters. It shows the basic script syntax with parameter placeholder and lists the common parameters included.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dublin-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-dublin-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example usage of list-defender-settings.ps1\nDESCRIPTION: Demonstrates how to run the script and shows a snippet of the expected output, which displays Windows Defender settings in a list format.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-defender-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-defender-settings.ps1\n\n\n\nAttackSurfaceReductionOnlyExclusions          :\nCheckForSignaturesBeforeRunningScan           : False\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell function 'Convert-ImageToAscii' for converting images to ASCII art\nDESCRIPTION: This PowerShell function converts an image file to ASCII art by resizing the image, analyzing pixel brightness, and mapping brightness levels to ASCII symbols. It supports auto-sizing based on terminal window size and custom dimensions, with optional inversion of symbol brightness. Dependencies include .NET's System.Drawing assembly for image processing. The function processes input parameters, handles image resizing, pixel brightness calculation, and outputs the ASCII art as text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-image2ascii.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tConverts images to ASCII art\n.DESCRIPTION\n\tThis PowerShell script converts an image to ASCII art.\n.EXAMPLE\n\tPS> ./convert-image2ascii -InFile \"C:\\Folder\\Image.jpg\" -Width 32 -Height 32\n.NOTES\n\tAuthor: Fxbyy\n #>\n \n function Convert-ImageToAscii {\n    [CmdletBinding(DefaultParameterSetName = 'AutoSize')]\n    param (\n        [Parameter(Mandatory = $true)]\n        [string] $InFile,\n\n        [Parameter(Mandatory = $false, ParameterSetName = 'CustomSize')]\n        [int] $Width,\n\n        [Parameter(Mandatory = $false, ParameterSetName = 'CustomSize')]\n        [int] $Height,\n\n        [Parameter(Mandatory = $false)]\n        [switch] $Invert\n    )\n \n    begin {\n        $tempFile = \"$PSScriptRoot\\temp.jpg\"\n        [void][System.Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\")\n\n        $img = [System.Drawing.Image]::FromFile((Get-Item $InFile))\n\n        if ($PSCmdlet.ParameterSetName -eq 'AutoSize') {\n            [int]$Height = $Host.UI.RawUI.WindowSize.Height * ($img.Size.Width / $img.Size.Height)\n            [int]$Width = $Height * ($img.Size.Width / $img.Size.Height)\n        } else {\n            if ($null -eq $Height -or $Height -eq 0) {\n                [int]$Height = $Width * ($img.Size.Height / $img.Size.Width)\n            } elseif ($null -eq $Width -or $Width -eq 0) {\n                [int]$Width = $Height * ($img.Size.Width / $img.Size.Height)\n            }\n        }\n    }\n \n    process {\n        $bmp = New-Object System.Drawing.Bitmap($Width, $Height)\n\n        $graph = [System.Drawing.Graphics]::FromImage($bmp)\n        $graph.DrawImage($img, 0, 0, $Width, $Height)\n\n        $graph.Dispose()\n        $img.Dispose()\n\n        if ($Invert) {\n            $symbols = \" .,:~+t?xmoX#M%@\"\n        } else {\n            $symbols = \"@%M#Xomx?t+~:,. \"\n        }\n        $res = \"\"\n\n        foreach ($h in 1..$bmp.Height) {\n            foreach ($w in 1..$bmp.Width) {\n                $px = $bmp.GetPixel($w - 1, $h - 1)\n                $brightness = (0.2126 * $px.R + 0.7152 * $px.G + 0.0722 * $px.B)\n\n                if ($brightness -le 15) { $res += $symbols[0] + \" \" } \n                elseif ($brightness -le 31) { $res += $symbols[1] + \" \" }\n                elseif ($brightness -le 47) { $res += $symbols[2] + \" \" }\n                elseif ($brightness -le 63) { $res += $symbols[3] + \" \" }\n                elseif ($brightness -le 79) { $res += $symbols[4] + \" \" }\n                elseif ($brightness -le 95) { $res += $symbols[5] + \" \" }\n                elseif ($brightness -le 111) { $res += $symbols[6] + \" \" }\n                elseif ($brightness -le 127) { $res += $symbols[7] + \" \" }\n                elseif ($brightness -le 143) { $res += $symbols[8] + \" \" }\n                elseif ($brightness -le 159) { $res += $symbols[9] + \" \" }\n                elseif ($brightness -le 175) { $res += $symbols[10] + \" \" }\n                elseif ($brightness -le 191) { $res += $symbols[11] + \" \" }\n                elseif ($brightness -le 207) { $res += $symbols[12] + \" \" }\n                elseif ($brightness -le 223) { $res += $symbols[13] + \" \" }\n                elseif ($brightness -le 249) { $res += $symbols[14] + \" \" }\n                else { $res += $symbols[15] + \" \" }\n\n            }\n            $res += \"`n\"\n        }\n    }\n \n    end {\n        $BitMap.Dispose()\n        Remove-Item $tempFile -Force\n\n        $res\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Detailed Syntax for make-repos.ps1 Script\nDESCRIPTION: Outlines the complete syntax for the `make-repos.ps1` script, specifying the optional `-ParentDir` parameter of type String and indicating support for PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repos.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/make-repos.ps1 [[-ParentDir] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing show-system-rescue-manual.ps1 Script\nDESCRIPTION: Demonstrates how to run the `show-system-rescue-manual.ps1` script from the PowerShell prompt. Executing this command without any parameters will launch the default web browser and navigate to the SystemRescue online manual page.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-system-rescue-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-system-rescue-manual\n```\n\n----------------------------------------\n\nTITLE: Example Usage of check-repos.ps1\nDESCRIPTION: Shows an example of running the script on a specific repository folder 'C:\\Repos', demonstrating the expected output including progress indicators and completion time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repos.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-repos.ps1 C:\\Repos\n⏳ Checking parent folder 📂C:\\Repos...    16 subfolders\n⏳ Checking 📂rust repository (1/16)...\n...\n✅ Checked all 16 Git repos in 📂C:\\Repos in 356s.\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters - PowerShell\nDESCRIPTION: This snippet documents the parameters accepted by the install-firefox.ps1 script. It indicates that the script primarily relies on standard PowerShell Common Parameters for controlling execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-firefox.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-firefox.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Parameters for open-baidu.ps1 in PowerShell\nDESCRIPTION: Shows the command syntax and common parameters supported by the script. It accepts standard PowerShell common parameters such as Verbose, Debug, and various error handling options.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-baidu.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-baidu.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using close-microsoft-edge.ps1 with Parameters\nDESCRIPTION: Demonstrates how to run the PowerShell script to close Microsoft Edge with all available parameters. The script supports common PowerShell parameters like Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-microsoft-edge.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/close-microsoft-edge.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Opening BBC Website in Browser - PowerShell\nDESCRIPTION: This PowerShell script opens the BBC website in the default web browser.  It leverages the start-process cmdlet. This script supports common parameters like Verbose, Debug, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bbc-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-bbc-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-english.ps1 in PowerShell\nDESCRIPTION: Provides a basic command-line example demonstrating how to execute the `speak-english.ps1` script with the text \"Hi\" passed as an argument. This shows the typical syntax for invoking the script from a PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-english.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-english.ps1 Hi\n\n\n```\n\n----------------------------------------\n\nTITLE: Alert Script Implementation in PowerShell\nDESCRIPTION: The complete alert.ps1 script implementation that captures an alert message and sends it to the Pushbullet API. It includes parameter handling, help documentation, and error handling with try-catch blocks.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/alert.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tHandles and escalates an alert \n.DESCRIPTION\n\tThis PowerShell script handles and escalates the given alert message.\n.PARAMETER message\n\tSpecifies the alert message\n.EXAMPLE\n\tPS> ./alert.ps1 \"Harddisk failure\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Message = \"\")\n\ntry {\n\tif ($Message -eq \"\" ) { $URL = read-host \"Enter alert message\" }\n\n\techo \"ALERT: $Message\"\n\n\tcurl --header \"Access-Token: o.PZl5XCp6SBl4F5PpaNXGDfFpUJZKAlEb\" --header \"Content-Type: application/json\" --data-binary '{\"type\": \"note\", \"title\": \"ALERT\", \"body\": \"$Message\"}' --request POST https://api.pushbullet.com/v2/pushes\n\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Documentation Header for Closing Microsoft Edge Browser\nDESCRIPTION: This snippet provides the header comment block that details the script's synopsis, description, example usage, related links, and author notes. It serves as a documentation overview embedded within the script to inform users of its purpose and licensing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-edge.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Edge browser\n.DESCRIPTION\n\tThis PowerShell script closes the Microsoft Edge Web browser gracefully.\n.EXAMPLE\n\tPS> ./close-edge\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script and Viewing Output Example\nDESCRIPTION: This example demonstrates how to execute the `list-commit-statistics.ps1` script without specifying a repository path (using the default current directory). It shows the expected formatted output listing commit counts and corresponding authors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-commit-statistics.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-commit-statistics.ps1\n \n       Commits Author\n       ------- ------\n   2034 Markus Fleschutz <markus.fleschutz@gmail.com>\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Time Zones with PowerShell Script - PowerShell\nDESCRIPTION: This code block demonstrates the accepted parameters for the list-timezones.ps1 script, detailing support for standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. These allow for flexible command-line execution, control over error handling, and variable outputs. Users can pass these built-in switches to modify script behavior; no additional dependencies beyond core PowerShell are required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-timezones.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-timezones.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing check-software.ps1 script in PowerShell\nDESCRIPTION: Example demonstrating how to run the check-software.ps1 script and view its output, which displays software status information including Windows version and installation date.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-software.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-software.ps1\n\n\n\n=== S O F T W A R E ===\n✅ Windows 10 Pro 64-Bit (v10.0.19045, since 5/2/2021)\n...\n```\n\n----------------------------------------\n\nTITLE: Example Usage of list-emojis.ps1 PowerShell Script\nDESCRIPTION: This snippet provides a simple example of how to execute the `list-emojis.ps1` script from a PowerShell prompt. Running the script without any specific parameters will output the categorized list of emojis directly to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-emojis.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-emojis.ps1\n\n\n```\n\n----------------------------------------\n\nTITLE: Using cd-pics.ps1 Script with Parameters\nDESCRIPTION: Shows the syntax for using the cd-pics.ps1 script with common PowerShell parameters. This section outlines the command structure and available common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-pics.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-pics.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Invoking Audio Muting via PowerShell Example\nDESCRIPTION: This snippet shows the command-line usage example for running the script that mutes the system audio. Users execute the ./turn-volume-off script, which requires minimal interaction and no additional arguments. The snippet highlights how the script is intended to be run in a PowerShell environment, serving as an entry-point reference.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-off.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./turn-volume-off\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for Username Input\nDESCRIPTION: This snippet defines a parameter 'username' that can be provided as a command-line argument when executing the script. If not provided, the script prompts the user to enter a username interactively.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-user.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$username = \"\")\n```\n\n----------------------------------------\n\nTITLE: Grouping Objects\nDESCRIPTION: This command groups objects by a specified property. `Get-Process` retrieves a list of processes, and `Group-Object` groups them by the `Name` property.  The result shows processes with the same name grouped together.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_26\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-Process | Group-Object -Property Name                   # Group objects by property name\n```\n\n----------------------------------------\n\nTITLE: Script Parameters for check-cpu-temp.ps1\nDESCRIPTION: Shows the available parameters for the check-cpu-temp.ps1 script. The script supports common PowerShell parameters but does not require any specific parameters for basic operation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-cpu-temp.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/check-cpu-temp.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing PowerShell Drives\nDESCRIPTION: This command lists all PowerShell drives (PSDrives) on the system. The `Get-PSDrive` cmdlet retrieves a list of available PSDrives, which can represent filesystems, registry locations, or other data stores.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_22\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-PSDrive                                                 # List all the PSDrives on the system\n```\n\n----------------------------------------\n\nTITLE: Example Command-Line Invocation of PowerShell Script in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the write-green.ps1 script from the command line, passing a text argument to be displayed in green. The example helps users understand proper invocation syntax and the expected way to supply the '-text' parameter directly. No external dependencies are required beyond PowerShell itself.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-green.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-green \"Hello World\"\n\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This snippet shows the parameters accepted by the open-bluetooth-settings.ps1 script. It primarily supports the standard PowerShell CommonParameters (like Verbose, Debug, ErrorAction, etc.) allowing for flexible control over script execution and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bluetooth-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-bluetooth-settings.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing clone-shallow.ps1 in PowerShell\nDESCRIPTION: Demonstrates how to execute the clone-shallow.ps1 PowerShell script from the command line, providing a specific target directory 'C:\\MyRepos' as a positional argument.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clone-shallow.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./clone-shallow C:\\MyRepos\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This example demonstrates the basic command line usage to execute the `play-mission-impossible.ps1` script from a PowerShell prompt, indicating that running the script will result in the Mission Impossible theme playing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-mission-impossible.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-mission-impossible.ps1\n(listen and enjoy)\n```\n\n----------------------------------------\n\nTITLE: Using open-slash-dot-website.ps1 with Parameters\nDESCRIPTION: Shows the syntax for running the open-slash-dot-website.ps1 script with common PowerShell parameters. The script supports standard PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-slash-dot-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-slash-dot-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Core Implementation of play-wolf-sound.ps1 in PowerShell\nDESCRIPTION: Displays the complete source code for play-wolf-sound.ps1. It includes comment-based help detailing its synopsis, description, example usage, related links, and author notes. The script's primary action is to call another script, 'play-mp3.ps1' (using its path relative to the current script via $PSScriptRoot), passing the relative path to the 'wolf.mp3' sound file as an argument. Successful execution results in an exit code of 0. This script depends on the 'play-mp3.ps1' script being in the same directory and the 'wolf.mp3' file being in '../data/sounds/' relative to the script location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-wolf-sound.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a wolf sound\n.DESCRIPTION\n\tThis PowerShell script plays a wolf sound.\n.EXAMPLE\n\tPS> ./play-wolf-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/wolf.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound Playback in play-gorilla-sound.ps1 using PowerShell\nDESCRIPTION: This is the source code for 'play-gorilla-sound.ps1'. It includes comment-based help explaining its synopsis, description, and usage. The core functionality involves invoking another script, 'play-mp3.ps1' (expected in the same directory), using the call operator '&', and passing the relative path to the 'gorilla.mp3' sound file as an argument. The script depends on 'play-mp3.ps1' and the specified MP3 file. It exits with code 0 upon successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-gorilla-sound.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a gorilla sound\n.DESCRIPTION\n\tThis PowerShell script plays a gorilla sound.\n.EXAMPLE\n\tPS> ./play-gorilla-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/gorilla.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Parameter Description\nDESCRIPTION: Describes the common parameters supported by the `play-2048-game.ps1` script.  These parameters include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.  The script supports these standard PowerShell parameters to control output and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-2048-game.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nplay-2048-game.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the Tower Game Script in PowerShell\nDESCRIPTION: Shows how to run the play-tower-game.ps1 script to launch the Tower game in a web browser. This script accepts common PowerShell parameters like Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tower-game.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nplay-tower-game.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing QuickSort Measurement Script in PowerShell\nDESCRIPTION: Shows an example of running the QuickSort measurement script and its output. The example demonstrates that sorting 1000 integers took 0.085 seconds using the QuickSort algorithm.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-QuickSort.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./measure-QuickSort.ps1\n🧭 0.085 sec to sort 1000 integers by QuickSort\n```\n\n----------------------------------------\n\nTITLE: Executing close-google-chrome.ps1 with Parameters\nDESCRIPTION: Shows the execution syntax of the script with available parameters. The script supports common PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-google-chrome.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/close-google-chrome.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing poweroff.ps1 (PowerShell)\nDESCRIPTION: Provides an example of how to execute the poweroff.ps1 script from the PowerShell command line to initiate an immediate shutdown of the local computer. Running this command requires administrator privileges.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/poweroff.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./poweroff\n```\n\n----------------------------------------\n\nTITLE: Displaying Common Parameters\nDESCRIPTION: This snippet shows the common parameters supported by the PowerShell script. These parameters provide options for controlling the script's behavior, such as verbosity, debugging, error handling, and output management. Understanding and utilizing these parameters can greatly enhance the user's experience and control over the script's execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/tell-joke.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/tell-joke.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing speak-korean.ps1 in PowerShell\nDESCRIPTION: Demonstrates how to execute the `speak-korean.ps1` script from the PowerShell console. It passes the Korean text \"안녕하세요\" as an argument, which corresponds to the optional `-text` parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-korean.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-korean.ps1 \"안녕하세요\"\n```\n\n----------------------------------------\n\nTITLE: Using write-location.ps1 script with parameters\nDESCRIPTION: Shows the command syntax for running the write-location.ps1 script with optional common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-location.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/write-location.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Example: Running make-repos.ps1\nDESCRIPTION: Provides a practical example of how to run the `make-repos.ps1` script from the PowerShell prompt, explicitly setting the target parent directory to `C:\\MyRepos`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repos.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS>./make-repos C:\\MyRepos\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Documentation\nDESCRIPTION: This section documents the parameters supported by the show-ether-rate.ps1 script. It indicates that the script supports the common PowerShell parameters, such as Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-ether-rate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-ether-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Google Play Website Using PowerShell\nDESCRIPTION: This PowerShell script opens the Google Play Store URL by calling a helper script 'open-default-browser.ps1' located in the same directory. It accepts common PowerShell parameters like Verbose and Debug for better control during execution. The script exits with a success status code (0) after launching the URL. Dependencies include the 'open-default-browser.ps1' script to handle browser invocation, and it expects to be run in an environment where PowerShell is available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-play.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Play\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Play website.\n.EXAMPLE\n\tPS> ./open-google-play\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://play.google.com/store\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing list-apps.ps1 script with common parameters\nDESCRIPTION: Shows the command syntax for executing the list-apps.ps1 script which supports common PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-apps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-apps.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of play-files.ps1\nDESCRIPTION: Demonstrates how to use the play-files.ps1 script to play all MP3 files in the current directory, showing the output format with playing status.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-files.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-files.ps1 *.mp3\n   ▶️ Playing '01 Sandy beaches - strong waves.mp3' (02:54) ...\n   ...\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Time Zone Listing Script - PowerShell\nDESCRIPTION: This snippet provides a sample output from running the list-timezones.ps1 script, showing how time zone information is displayed in a formatted table with columns for Id, DisplayName, and SupportsDaylightSavingTime. This gives users an expectation of output structure and typical usage patterns. No parameters are required by default; results are shown directly in the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-timezones.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-timezones\n\n\n\nId                              DisplayName                            SupportsDaylight\n                                                                              SavingTime\n--                              -----------                            ----------------\nHawaiian Standard Time          (UTC-10:00) Hawaii                     False\n...\n```\n\n----------------------------------------\n\nTITLE: Executing the Script (PowerShell)\nDESCRIPTION: Provides an example command showing how to execute the `open-microsoft-weather.ps1` script from a PowerShell prompt. Running this command will attempt to launch the Microsoft Weather application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-weather.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-microsoft-weather\n```\n\n----------------------------------------\n\nTITLE: Executing the open-display-settings.ps1 Script (PowerShell)\nDESCRIPTION: Demonstrates the basic execution of the open-display-settings.ps1 script from the PowerShell command line. Running this command without any specific parameters will launch the Windows display settings application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-display-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-display-settings\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PowerShell Script open-space-weather.ps1\nDESCRIPTION: This snippet demonstrates a basic example of executing the `open-space-weather.ps1` script from the PowerShell command line. It shows running the script using the relative path `./`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-space-weather.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-space-weather\n```\n\n----------------------------------------\n\nTITLE: Example Usage and Output\nDESCRIPTION: This snippet demonstrates how to execute the cd-scripts.ps1 script from the PowerShell command line and shows the expected output, which is the path to the script's directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-scripts.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./cd-scripts.ps1\n📁C:\\Repos\\PowerShell\\scripts\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters and Example Usage in PowerShell\nDESCRIPTION: This snippet shows the script's parameter block and an example invocation, detailing configurable options for password length, number of columns, and number of rows. It explains accepted PowerShell parameter notation, default values, and common pipeline support. Inputs include optional arguments for password length, columns, and rows; output is a list of formatted passwords. Dependencies are limited to the PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-passwords.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-passwords.ps1 [[-PasswordLength] <Int32>] [[-Columns] <Int32>] [[-Rows] <Int32>] [<CommonParameters>]\n\n-PasswordLength <Int32>\n    Specifies the length of the password\n    \n    Required?                    false\n    Position?                    1\n    Default value                15\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Columns <Int32>\n    Specifies the number of columns\n    \n    Required?                    false\n    Position?                    2\n    Default value                6\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Rows <Int32>\n    Specifies the number of rows\n    \n    Required?                    false\n    Position?                    3\n    Default value                30\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-passwords.ps1\n\n\n\n\"4yE=[mu\"Az|IE@   PZ}E9Q\"&?.!%49`   zU3[E7`xA)(6W_3   :wd'a(O@fr}.Z8=\n...\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Execution Example\nDESCRIPTION: This PowerShell code provides an example of how to execute the `write-blue.ps1` script. It passes the string \"Hello World\" as the `-text` parameter, which will cause the script to output \"Hello World\" to the console in blue.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-blue.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-blue \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Basic Script Usage Example\nDESCRIPTION: Demonstrates how to execute the change-wallpaper script from the PowerShell command line without any parameters, which will download a random image from Unsplash.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/change-wallpaper.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./change-wallpaper\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters for Directory Tree Listing in PowerShell\nDESCRIPTION: This snippet demonstrates the parameter definition for specifying the target path and supported common parameters in the directory tree listing PowerShell script. The 'path' parameter expects a string path to the directory root and defaults to the current directory. Common PowerShell parameters like Verbose, Debug, and ErrorAction are also supported, enabling advanced users to customize script execution. No external dependencies are required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dir-tree.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-dir-tree.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the directory tree\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example: Executing PowerShell Script\nDESCRIPTION: This snippet provides a simple example of how to run the `show-paris-city.ps1` script from the PowerShell command line. It shows the command using the relative path `./`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-paris-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-paris-city\n```\n\n----------------------------------------\n\nTITLE: Executing the show-singapore-city.ps1 Script - PowerShell\nDESCRIPTION: This example demonstrates how to execute the `show-singapore-city.ps1` script in PowerShell. The script is invoked using `./show-singapore-city` from the PowerShell prompt. This command will open the default web browser and display Google Maps centered on Singapore.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-singapore-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-singapore-city\n```\n\n----------------------------------------\n\nTITLE: Uninstalling PowerShell Modules\nDESCRIPTION: This command uninstalls a PowerShell module. The `Uninstall-Module` cmdlet is used to remove a module installed via `Install-Module`.  The command removes the specified module from the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_11\n\nLANGUAGE: PowerShell\nCODE:\n```\nUninstall-Module -Name NameIT                               # Uninstall module called \"NameIT\", only if it was installed via Install-Module\n```\n\n----------------------------------------\n\nTITLE: Common Parameters Support in make-repos.ps1\nDESCRIPTION: Indicates that the `make-repos.ps1` script supports the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.), allowing for fine-grained control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repos.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This cmdlet supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Define AddItem Function in PowerShell\nDESCRIPTION: This function creates a new PSObject with 'Variable' and 'Content' properties. It takes two string parameters: `$Variable` and `$Content`, and assigns them to the corresponding properties of the PSObject. This function is used to construct objects representing PowerShell automatic variables.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-automatic-variables.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction AddItem { param([string]$Variable, [string]$Content)\n\tnew-object PSObject -property @{ 'Variable' = \"$Variable\"; 'Content' = \"$Content\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Yahoo Website - PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to the Yahoo website. It doesn't take any specific parameters but utilizes the common PowerShell parameters. It requires PowerShell to be installed and functioning. The script's output is the opening of the Yahoo website in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-yahoo-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-yahoo-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing check-firewall.ps1 Example in PowerShell\nDESCRIPTION: This example demonstrates how to run the `check-firewall.ps1` script from a PowerShell prompt (`PS>`) and shows the expected output when the firewall is determined to be enabled on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-firewall.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-firewall.ps1\n✅ Firewall enabled\n\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of inspect-exe.ps1\nDESCRIPTION: Demonstrates how to use the script to inspect an executable file by providing the file path as an argument.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/inspect-exe.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./inspect-exe C:\\MyApp.exe\n```\n\n----------------------------------------\n\nTITLE: Example Usage of remove-user.ps1\nDESCRIPTION: Shows how to execute the remove-user.ps1 script with a username parameter and displays the expected output including confirmation and execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-user.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./remove-user.ps1 Joe\n✅ Removed user 'Joe' including home directory in 11s.\n```\n\n----------------------------------------\n\nTITLE: Running Script Example in PowerShell\nDESCRIPTION: This snippet provides a simple example of how to execute the `play-imperial-march.ps1` script from the PowerShell command line. It shows the command and indicates the expected output is audio.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-imperial-march.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-imperial-march.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing the Chrome Uninstallation Script in PowerShell\nDESCRIPTION: Provides a basic example of running the `uninstall-chrome.ps1` script directly from the PowerShell command line without any additional parameters to initiate the Google Chrome uninstallation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-chrome.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-chrome.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing the play-wolf-sound Script in PowerShell\nDESCRIPTION: Demonstrates the basic command to execute the play-wolf-sound.ps1 script from the PowerShell prompt when located in the current directory. This triggers the script to play the wolf sound.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-wolf-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-wolf-sound\n```\n\n----------------------------------------\n\nTITLE: Executing speak-dutch.ps1 (PowerShell)\nDESCRIPTION: Provides an example of how to run the `speak-dutch.ps1` script from the PowerShell command line. It passes the Dutch word \"Hallo\" as the text to be spoken.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-dutch.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-dutch.ps1 Hallo\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Signature in PowerShell\nDESCRIPTION: This snippet shows the standard parameter signature for the `play-imperial-march.ps1` script. It indicates the script path and notes that it accepts PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-imperial-march.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/play-imperial-march.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Parameters for show-london-city PowerShell Script\nDESCRIPTION: This snippet shows the parameter syntax for the show-london-city.ps1 script, including common PowerShell parameters that are supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-london-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nshow-london-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the Vim Manual Script - PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the script, launching the Vim manual in the default browser. The user simply runs the script from the PowerShell console. The output is the Vim manual in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-vim-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-vim-manual\n```\n\n----------------------------------------\n\nTITLE: Using speak-finnish.ps1 script with parameters\nDESCRIPTION: Shows the command syntax and parameters for the speak-finnish.ps1 script, including the optional text parameter and common PowerShell parameters that the script supports.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-finnish.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-finnish.ps1 [[-text] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Running Script Example PowerShell\nDESCRIPTION: This snippet provides a practical example of how to execute the play-cube-game.ps1 script from a PowerShell command prompt. It uses the common ./ prefix to indicate executing the script in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-cube-game.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-cube-game\n\n```\n\n----------------------------------------\n\nTITLE: Executing play-gorilla-sound.ps1 in PowerShell\nDESCRIPTION: Demonstrates the basic command to execute the 'play-gorilla-sound.ps1' script from a PowerShell terminal. Running this command will trigger the playback of the gorilla sound.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-gorilla-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-gorilla-sound\n```\n\n----------------------------------------\n\nTITLE: Executing the open-cortana.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates how to run the `open-cortana.ps1` script from the PowerShell command line to launch the Cortana application. It assumes the script is in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cortana.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-cortana\n```\n\n----------------------------------------\n\nTITLE: Executing install-h2static.ps1 in PowerShell\nDESCRIPTION: Provides a simple example of how to execute the `install-h2static.ps1` script from the PowerShell command line using its default parameter values.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-h2static.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-h2static.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-glider-tracker-website.ps1\nDESCRIPTION: Simple example showing how to execute the script from PowerShell. This will open the default web browser and navigate to the GliderTracker website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-glider-tracker-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-glider-tracker-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Parameter Support\nDESCRIPTION: This snippet indicates that the `open-thunderbird.ps1` script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, and others, allowing for enhanced control and debugging during script execution. These parameters are automatically available in PowerShell scripts and can be used to modify the script's behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-thunderbird.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Terminating VLC Using close-program.ps1 in PowerShell\nDESCRIPTION: This script invokes the auxiliary 'close-program.ps1' script, passing identifiers for VLC media player to ensure correct process targeting. It then exits with code 0 to signal success. Requires the 'close-program.ps1' script to be located in the same directory (or reachable via $PSScriptRoot), and that PowerShell is run with permission to terminate other processes. The script performs no error handling itself and assumes that 'close-program.ps1' manages all shutdown logic.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-vlc.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the VLC media player application\n.DESCRIPTION\n\tThis PowerShell script closes the VLC media player application gracefully.\n.EXAMPLE\n\tPS> ./close-vlc.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"VLC media player\" \"vlc\" \"vlc\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Playing Sound Files Using PowerShell\nDESCRIPTION: Defines a function that receives a file pattern (e.g., a path with wildcard) and retrieves all matching sound files. It uses a helper script 'play-mp3.ps1' to play each sound file sequentially with a 500-millisecond pause between files. It relies on the presence of 'play-mp3.ps1' in the script root directory and the accessibility of the sound files matching the given pattern.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-system-sounds.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction PlaySoundFiles([string]$filePattern) {\n\t$files = Get-ChildItem \"$filePattern\"\n\tforeach($file in $files) {\n\t\t& \"$PSScriptRoot/play-mp3.ps1\" \"$file\"\n\t\tStart-Sleep -milliseconds 500\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Script Syntax with Parameters - PowerShell\nDESCRIPTION: Displays the basic syntax for invoking the `speak-date.ps1` script. It indicates that the script accepts standard PowerShell common parameters, which can be used to control verbose output, debugging, error handling, etc. These parameters provide standard ways to interact with PowerShell cmdlets and scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-date.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nspeak-date.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using translate-text.ps1 script with parameters\nDESCRIPTION: Shows the syntax and available parameters for the translate-text.ps1 script. Parameters include the text to translate, source language code (defaults to English), and target language code (defaults to all supported languages).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-text.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/translate-text.ps1 [[-Text] <String>] [[-SourceLangCode] <String>] [[-TargetLangCode] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing the Knot Resolver Installation Script in PowerShell\nDESCRIPTION: Provides an example command to execute the `install-knot-resolver.ps1` script from the PowerShell prompt in the current directory. This initiates the Knot Resolver installation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-knot-resolver.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-knot-resolver.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Executing show-msbuild-manual in PowerShell\nDESCRIPTION: Example showing how to run the show-msbuild-manual script from a PowerShell prompt. This simple execution launches a web browser to the MSBuild documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-msbuild-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-msbuild-manual\n```\n\n----------------------------------------\n\nTITLE: Example Execution of check-sunrise.ps1\nDESCRIPTION: Demonstrates how to execute the `check-sunrise.ps1` script in a PowerShell environment. This is a basic example without any specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-sunrise.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-sunrise\n```\n\n----------------------------------------\n\nTITLE: Example PowerShell Usage\nDESCRIPTION: A simple example showing how to execute the script from a PowerShell prompt. The script opens the windy.com website in the default web browser when run.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-windy-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-windy-website\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-epub.ps1 in PowerShell\nDESCRIPTION: Demonstrates a simple example of how to use the speak-epub script to read an EPUB file located at C:\\MyBook.epub using text-to-speech.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-epub.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-epub C:\\MyBook.epub\n```\n\n----------------------------------------\n\nTITLE: Executing install-rufus.ps1 Script (PowerShell)\nDESCRIPTION: Provides a simple example demonstrating how to run the install-rufus.ps1 script from the PowerShell command line to initiate the Rufus installation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-rufus.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-rufus.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Launching LightningMaps.org in Default Browser Using PowerShell\nDESCRIPTION: This PowerShell snippet executes the open-default-browser.ps1 helper script with the URL for LightningMaps.org as a parameter, launching the user’s default web browser to visualize current lightning activity via OpenStreetMap. The script supports all common PowerShell parameters including Verbose, Debug, ErrorAction, WarningAction, OutputBuffer, and PipelineVariable for enhanced usability and debugging. Dependencies include open-default-browser.ps1 and a functional PowerShell environment; inputs are optional (common parameters), while the main output is the side-effect of opening the designated URL, and the script exits with a success code upon completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-lightnings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.lightningmaps.org\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the Calculator Launch Script in PowerShell\nDESCRIPTION: Provides a basic example demonstrating how to execute the `open-calculator.ps1` script directly from the PowerShell command line to launch the calculator application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-calculator.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-calculator\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech Function Definition in PowerShell\nDESCRIPTION: Defines a function named 'Speak' that outputs text to the console and invokes the COM object method to perform speech synthesis with the given text. It encapsulates the core TTS call, allowing reuse for various speech commands.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-test.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Speak([string]$Text) { \n\tWrite-Output \"📣 $Text\"\n\t[void]$Voice.speak(\"$Text\")\n}\n```\n\n----------------------------------------\n\nTITLE: Playing Mission Impossible Theme PowerShell\nDESCRIPTION: This is the core PowerShell script content. It uses a series of calls to `[System.Console]::Beep(frequency, duration)` to generate the specific tones and timings required to play the Mission Impossible theme tune. It includes a `try...catch` block for basic error handling during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-mission-impossible.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays the Mission Impossible theme\n.DESCRIPTION\n\tThis PowerShell script plays the Mission Impossible theme.\n.EXAMPLE\n\tPS> ./play-mission-impossible.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(932,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(1047,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[console]::Beep(699,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(740,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(932,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(1047,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(784,150)\n\tStart-Sleep -m 300\n\t[System.Console]::Beep(699,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(740,150)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(932,150)\n\t[System.Console]::Beep(784,150)\n\t[System.Console]::Beep(587,1200)\n\tStart-Sleep -m 75\n\t[System.Console]::Beep(932,150)\n\t[System.Console]::Beep(784,150)\n\t[System.Console]::Beep(554,1200)\n\tStart-Sleep -m 75\n\t[System.Console]::Beep(932,150)\n\t[System.Console]::Beep(784,150)\n\t[System.Console]::Beep(523,1200)\n\tStart-Sleep -m 150\n\t[System.Console]::Beep(466,150)\n\t[System.Console]::Beep(523,150)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Basic usage example of translate-text script\nDESCRIPTION: Demonstrates how to use the translate-text.ps1 script to translate 'Hello World' from English to all supported languages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/translate-text.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./translate-text \"Hello World\" en all\n```\n\n----------------------------------------\n\nTITLE: Executing give-me-five.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates the basic execution command for the give-me-five.ps1 script from a PowerShell prompt. Running this command triggers the script's default text-to-speech response.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/give-me-five.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./give-me-five\n\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example - PowerShell\nDESCRIPTION: Provides a simple command-line example demonstrating how to execute the `show-dublin-city.ps1` script from a PowerShell prompt. It shows the basic execution syntax without any additional parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-dublin-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-dublin-city\n```\n\n----------------------------------------\n\nTITLE: Play Pig Sound Script PowerShell\nDESCRIPTION: This is the main content of the `play-pig-sound.ps1` script. It utilizes the `play-mp3.ps1` script to play the pig sound, which is located in the `../data/sounds/pig.mp3` directory relative to the script's root. The script exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pig-sound.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a pig sound\n.DESCRIPTION\n\tThis PowerShell script plays a pig sound.\n.EXAMPLE\n\tPS> ./play-pig-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/pig.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Script Usage and Common Parameters in PowerShell\nDESCRIPTION: This PowerShell code snippet details the recommended usage and available common parameters accepted by the 'list-ascii-table.ps1' script. It informs users about how to execute the script and lists standard PowerShell parameters like Verbose, Debug, ErrorAction, and others. No special dependencies are required, and these parameters enable advanced execution behavior and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ascii-table.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/list-ascii-table.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for watch-ping PowerShell Script\nDESCRIPTION: This snippet defines the parameters accepted by the `watch-ping.ps1` script. It specifies the `-hostname` to ping (default: 'windows.com') and the `-timeInterval` in milliseconds between pings (default: 1000). It also indicates support for common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/watch-ping.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/watch-ping.ps1 [[-hostname] <String>] [[-timeInterval] <Int32>] [<CommonParameters>]\n\n-hostname <String>\n    Specifies the hostname or IP address to ping (windows.com by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                windows.com\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-timeInterval <Int32>\n    Specifies the time interval in milliseconds between two pings (1000 by default)\n    \n    Required?                    false\n    Position?                    2\n    Default value                1000\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing Christmas Tree Animation Script in PowerShell\nDESCRIPTION: This snippet contains the full source code for the `write-xmas-tree.ps1` script. It defines parameters, clears the host, and enters a loop to repeatedly draw the Christmas tree and trunk, print a holiday message, and pause. The tree branches cycle through specified colors, and the animation continues for a defined count.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-xmas-tree.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Writes a Xmas tree\n.DESCRIPTION\n        This PowerShell script writes a christmas tree to the terminal.\n.EXAMPLE\n        PS> ./write-xmas-tree.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nparam( [array]$Size=@(21,8,4), # tree height, trunk width, trunk height\n       [int]$XPos=50, # starting x position \n       [array]$colors = @(\"blue\", \"green\", \"cyan\", \"red\", \"yellow\", \"magenta\"),\n       [int]$Idx = (Get-Random -Min 0 -Max ($colors.Length-1)),\n       [int]$count = 100,\n       [int]$duration = 250)  # ms\n\nClear-Host\ndo {\n\t[console]::SetCursorPosition(0,0)\n\tWrite-Host \"`n`t`t`tMerry Christmas\" -foregroundColor yellow\n\tWrite-Host \"`t`t`t       &\"        -foregroundColor yellow     \n\tWrite-Host \"`t`t`t Happy New Year\" -foregroundColor yellow\n\tfor ( $i=1; $i -le $Size[0]; $i++ ) {\n        \t$line = \" \" * ($XPos - $i) + \"*\" * ($i * 2)\n        \t$Idx = $Idx % $colors.Length\n        \tWrite-Host $line -foregroundColor $colors[$Idx]\n        \t$Idx++\n \t}  \n\n \tfor ( $j=1; $j -le $Size[2]; $j++ ){\n        \t$line = \" \" * ( $XPos - ( $Size[1] / 2 ) ) + \"#\" * $Size[1]\n        \tWrite-Host $line -foregroundColor DarkGreen\n    \t}\n\n\n\tStart-Sleep -milliseconds $duration\n\t$count--\n} while ($count -gt 0)\n\n\n```\n\n----------------------------------------\n\nTITLE: Using open-pixabay.ps1 with Parameters in PowerShell\nDESCRIPTION: Shows the command syntax for running the open-pixabay.ps1 script. The script supports common PowerShell parameters such as Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pixabay.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-pixabay.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Skype with Error Handling in PowerShell Script\nDESCRIPTION: This PowerShell script attempts to start the Skype application using Start-Process with the skype: URI scheme. It employs a try-catch block to gracefully handle launch failures by reporting errors with the precise script line number and error details, then exits with an appropriate status code. No external dependencies are required beyond Skype being installed and accessible; the script supports the common PowerShell parameters and expects to be run on a system with the Skype app available.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-skype.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tStart-Process skype:\n\texit 0 # success\n} catch {\n\t\"\\u26A0\\uFE0F Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-spanish.ps1 Script in PowerShell\nDESCRIPTION: This snippet provides a simple example of how to run the `speak-spanish.ps1` script from the PowerShell command line, providing the Spanish word \"Hola\" as the text to be synthesized into speech.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-spanish.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-spanish.ps1 Hola\n```\n\n----------------------------------------\n\nTITLE: New-Symlink Parameter Definition\nDESCRIPTION: Defines the parameters accepted by the `new-symlink.ps1` script. It accepts `-symlink` for the symlink path and `-target` for the target path. These parameters are optional, and if not provided, the script prompts the user for input.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/new-symlink.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/new-symlink.ps1 [[-symlink] <String>] [[-target] <String>] [<CommonParameters>]\n\n-symlink <String>\n    Specifies the file path to the new symlink file\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-target <String>\n    Specifies the file path to the target\n    \n    Required?                    false\n    Position?                    2\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Random Quote Text-to-Speech with PowerShell\nDESCRIPTION: This usage example demonstrates how to invoke the 'say-quote.ps1' PowerShell script to listen to a randomly selected quote. The script requires access to a quotes CSV file at 'Data/quotes.csv' and relies on the system's text-to-speech capabilities; it does not require additional dependencies beyond standard PowerShell modules. The supported parameters include all common PowerShell parameters, enabling debugging, output control, and more. Input is the script invocation, output is an audible reading of a random quote.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-quote.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./say-quote\n(listen and learn)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Directory to OneDrive - PowerShell\nDESCRIPTION: This PowerShell script sets the current working directory to the user's OneDrive folder. It first resolves the path to the OneDrive directory using `Resolve-Path \"~/OneDrive\"`. It then checks if the directory exists and throws an error if not. If the directory exists, it changes the location using `Set-Location` and outputs the OneDrive path to the console. The script includes error handling to catch any exceptions during execution and provides informative output. The script uses common parameters for debugging and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-onedrive.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the user's OneDrive folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the user's OneDrive folder.\n.EXAMPLE\n\tPS> ./cd-onedrive\n\t📂C:\\Users\\Markus\\OneDrive\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"~/OneDrive\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"No OneDrive folder at 📂$path - is OneDrive installed?\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage (PowerShell)\nDESCRIPTION: Demonstrates how to execute the script from the PowerShell command line, passing the text to be spoken directly as an argument.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-esperanto.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-esperanto.ps1 Saluton\n\n\n```\n\n----------------------------------------\n\nTITLE: Declaring support for common PowerShell parameters in installation script\nDESCRIPTION: This snippet specifies that the PowerShell script supports a set of common parameters, such as Verbose, Debug, and ErrorAction, which control script behavior during execution. These parameters facilitate debugging and verbose output without additional code. It is a prerequisite to enabling enhanced debugging and output control within the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-gitlab.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Execution Example\nDESCRIPTION: This section provides an example of how to execute the show-ether-rate.ps1 script in the PowerShell console. It shows the command needed to run the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-ether-rate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-ether-rate\n```\n\n----------------------------------------\n\nTITLE: Executing Pluto Google Maps Script - PowerShell\nDESCRIPTION: This section demonstrates how to execute the 'show-planet-pluto.ps1' script. The provided example shows the command used in the PowerShell console to run the script, which will then open the Google Maps page focused on planet Pluto.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-pluto.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-planet-pluto\n```\n\n----------------------------------------\n\nTITLE: Example Usage of City Locator PowerShell Script\nDESCRIPTION: Demonstrates how to invoke the locate-city.ps1 script with the city name 'Amsterdam' as input. The script outputs location results for all matching cities, including country, region, population, latitude, and longitude. This snippet helps users understand expected output formatting and serves as a usage test case.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/locate-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./locate-city.ps1 Amsterdam\n* Amsterdam (United States, New York, population 21241) is at 42.9420°N, -74.1907°W\n* Amsterdam (Netherlands, Noord-Holland, population 1031000) is at 52.3500°N, 4.9166°W\n\n```\n\n----------------------------------------\n\nTITLE: Running query-smart-data.ps1 Example in PowerShell\nDESCRIPTION: This snippet provides a basic example of how to execute the `query-smart-data.ps1` script from the PowerShell console. Running the script without any parameters will default the output directory for the S.M.A.R.T. data files to the current working directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/query-smart-data.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./query-smart-data\n\n\n```\n\n----------------------------------------\n\nTITLE: Drawing Game Elements in PowerShell\nDESCRIPTION: The `Z` function is used to draw elements on the console. It takes a coordinate object `$c` and a character `$t` as input. It sets the cursor position to the given coordinate and writes the character to the console with a green foreground color, without adding a newline. This function relies on the PowerShell Host and UI elements for controlling the console display.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-snake.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nfunction Z($c,$t) {\n\t$u.CursorPosition=$c\n\tWrite-Host $t -noNewline -foregroundColor green\n}\n```\n\n----------------------------------------\n\nTITLE: Example of uploading a file to Dropbox\nDESCRIPTION: Simple example showing how to use the upload-to-dropbox.ps1 script to upload a file named 'my.txt' to Dropbox.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upload-to-dropbox.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> .\\upload-to-dropbox.ps1 my.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters for PowerShell Script\nDESCRIPTION: This snippet shows the command-line syntax for the `open-themes-settings.ps1` script. It highlights that the script accepts standard PowerShell common parameters, which control error handling, verbosity, and output formatting. The parameters section clarifies how users can interact with the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-themes-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-themes-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition in PowerShell\nDESCRIPTION: This snippet defines the parameters for the `export-scripts2manuals.ps1` script. It specifies the `-FilePattern` parameter, which is optional and accepts a string representing the file pattern for the scripts. The default value is `$PSScriptRoot/*.ps1`, indicating that it processes all .ps1 files in the script's root directory. It also indicates support for common parameters like Verbose, Debug, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-scripts2manuals.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nexport-scripts2manuals.ps1 [[-FilePattern] <String>] [<CommonParameters>]\n\n-FilePattern <String>\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PSScriptRoot/*.ps1\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example: Creating a Repository\nDESCRIPTION: Demonstrates how to run the 'make-repo.ps1' script from the PowerShell prompt to create a new Git repository structure within the 'C:\\MyRepo' directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/make-repo.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS>./make-repo C:\\MyRepo\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Specific Month and Year Calendar\nDESCRIPTION: Illustrates calling `write-calendar.ps1` with both month (04 for April) and year (2011) arguments to output the calendar for that specific month.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-calendar.md#_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-calendar 04 2011\nOutputs the calendar for April, 2011.\n```\n\n----------------------------------------\n\nTITLE: Executing the show-san-francisco-city.ps1 Script in PowerShell\nDESCRIPTION: This example demonstrates how to run the 'show-san-francisco-city.ps1' script from a PowerShell prompt. Executing this command triggers the script's action, which is to launch the default web browser and navigate to Google Maps centered on San Francisco.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-san-francisco-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-san-francisco-city\n```\n\n----------------------------------------\n\nTITLE: Executing the Script in PowerShell\nDESCRIPTION: Provides a simple example of how to execute the open-microsoft-solitaire.ps1 script from a PowerShell prompt to launch the Microsoft Solitaire application.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-solitaire.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-microsoft-solitaire\n```\n\n----------------------------------------\n\nTITLE: Executing open-booking-com.ps1 Script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the `open-booking-com.ps1` script from a PowerShell prompt. Running this command will trigger the script to open the Booking.com homepage in the system's default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-booking-com.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-booking-com\n```\n\n----------------------------------------\n\nTITLE: Executing open-edge.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to run the open-edge.ps1 script from the PowerShell command line. Executing this command will launch the Microsoft Edge browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-edge.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-edge\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Execution Example\nDESCRIPTION: This example demonstrates how to execute the install-visual-studio-code.ps1 PowerShell script. It shows the basic command required to run the script from the PowerShell console, assuming the current directory contains the script file. It assumes that the user has PowerShell installed and configured correctly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-visual-studio-code.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-visual-studio-code.ps1\n```\n\n----------------------------------------\n\nTITLE: Launching Web Browser with AccuWeather in PowerShell\nDESCRIPTION: This PowerShell script (open-accu-weather.ps1) launches the default web browser directed to the AccuWeather website. It supports common PowerShell parameters for verbose output, debugging, and error handling. The script calls another script 'open-default-browser.ps1' to perform the browser opening operation, passing the URL as an argument. Expected input is minimal, primarily being invocation of the script with optional parameters; the output is the browser opening the specified webpage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-accu-weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the AccuWeather website\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the AccuWeather website.\n.EXAMPLE\n\tPS> ./open-accu-weather\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.accuweather.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Syntax (PowerShell)\nDESCRIPTION: This snippet shows the command-line syntax for invoking the `close-spotify.ps1` script. It indicates that the script accepts standard PowerShell common parameters which can control verbosity, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-spotify.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/close-spotify.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition\nDESCRIPTION: Defines the script's parameters: server, database, username, password, and query. Default values are empty strings, allowing the script to prompt the user for input if these parameters are not provided during script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-mysql2csv.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$server = \"\", [string]$database = \"\", [string]$username = \"\", [string]$password = \"\", [string]$query = \"\")\n```\n\n----------------------------------------\n\nTITLE: Listing PowerShell Cheat Sheet\nDESCRIPTION: This PowerShell script displays a cheat sheet with basic PowerShell commands and variable usage.  It doesn't take any specific parameters, but accepts common PowerShell parameters like Verbose, Debug etc. The script directly outputs the cheat sheet content as a series of string literals, covering basic commands, variable assignment, and control keys. It is a simple script, designed to present information to the user. The script exits with a status code of 0 to indicate successful execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-cheat-sheet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the PowerShell cheat sheet\n.DESCRIPTION\n\tThis PowerShell script lists the PowerShell cheat sheet.\n.EXAMPLE\n\tPS> ./list-cheat-sheet.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n\"PowerShell Cheat Sheet\"\n\"======================\"\n\"\"\n\"Basic Commands\"\n\"--------------\"\n\"         Cmdlet : Commands built into shell written in .NET\"\n\"      Functions : Commands written in PowerShell language\"\n\"      Parameter : Argument to a Cmdlet/Function/Script\"\n\"          Alias : Shortcut for a Cmdlet or Function\"\n\"        Scripts : Text files with .ps1 extension\"\n\"   Applications : Existing windows programs\"\n\"      Pipelines : Pass objects Get-process word | Stop-Process\"\n\"         Ctrl+c : Interrupt current command\"\n\"     Left/right : Navigate editing cursor\"\n\"Ctrl+left/right : Navigate a word at a time\"\n\"     Home / End : End Move to start / end of line\"\n\"      Up / down : Move up and down through history\"\n\"         Insert : Toggles between insert/overwrite mode\"\n\"             F7 : Command history in a window\"\n\"Tab / Shift-Tab : Command line completion\"\n\"\"\n\"Variables\"\n\"---------\"\n\"             `$var = `\"string`\" : Assign variable\"\n\"`$a,`$b = 0 or `$a,`$b = 'a','b' : Assign multiple variables\"\n\"               `$a,`$b = `$b,`$a : Flip variables\"\n\"                 `$var=[int]5 : Strongly typed variable\"\n\"\n\"\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the install-audacity.ps1 Script (PowerShell)\nDESCRIPTION: Provides an example command demonstrating how to execute the install-audacity.ps1 script from the PowerShell command line to begin the Audacity installation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-audacity.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-audacity.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Executing open-wired-website.ps1 in PowerShell\nDESCRIPTION: Demonstrates how to execute the open-wired-website.ps1 script from the PowerShell command line to open the WIRED website in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wired-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-wired-website\n```\n\n----------------------------------------\n\nTITLE: Listing CPU Details Using PowerShell\nDESCRIPTION: This PowerShell script retrieves and lists detailed CPU information from the system by querying the Win32_Processor WMI class. It supports standard PowerShell common parameters like Verbose and Debug for better script control. The script outputs hardware details such as CPU caption, device ID, and other relevant properties. It includes a try-catch block to handle and report errors gracefully, exiting with appropriate status codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-cpu.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists CPU details\n.DESCRIPTION\n\tThis PowerShell script lists the CPU details.\n.EXAMPLE\n\tPS> ./list-cpu.ps1\n\n\tCaption           : Intel64 Family 6 Model 94 Stepping 3\n\tDeviceID          : CPU0\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-WmiObject -Class Win32_Processor\n\texit 0 # success\n} catch {\n\t\"\\u26A0\\uFE0F Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching voice control manual using PowerShell\nDESCRIPTION: This PowerShell script called show-voice-manual.ps1 opens the web browser to display the voice control manual. It supports standard PowerShell common parameters including Verbose, Debug, and ErrorAction, allowing detailed execution control and error management. It accepts no additional custom parameters and serves as a simple utility to provide documentation access.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-voice-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-voice-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Specifying Script Parameters for Text File Editing in PowerShell\nDESCRIPTION: This snippet illustrates the possible parameters and syntax for invoking the 'edit.ps1' script in PowerShell. It documents the 'path' argument, which specifies the file to edit, and details about supported common parameters. No implementation logic is included; this defines required inputs and accepted command-line structure. Expected input is a string path to a file, and outputs depend on called script behavior. This definition is used for user instruction and script parsing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/edit.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/edit.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the text file (will be queried if none given)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Closing Magnifier with PowerShell\nDESCRIPTION: This PowerShell script uses the `tskill` command to close the Magnifier application. It first defines a comment block providing script metadata such as synopsis, description, example, link, and notes. Then, it executes the `tskill magnify` command to terminate the Magnifier process and finally exits the script with a success code of 0. No specific parameters are used in the direct implementation of the script's primary function. The script requires no dependencies beyond the standard PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-magnifier.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Magnifier\n.DESCRIPTION\n\tThis PowerShell script closes the Windows Screen Magnifier application gracefully.\n.EXAMPLE\n\tPS> ./close-magnifier.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntskill magnify\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Launching Screen Sketch via PowerShell - PowerShell\nDESCRIPTION: This PowerShell script uses the Start-Process cmdlet to open the Screen Sketch application (ms-screensketch: protocol). It is intended for Windows environments where Screen Sketch is installed, and supports common PowerShell parameter sets such as Verbose, Debug, and ErrorAction. The script returns an exit code of 0 upon success or 1 with an error message if launching fails, providing context-aware error output by referencing the failing script line. No input arguments are required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-screen-sketch.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches Screen Sketch\n.DESCRIPTION\n\tThis script launches the Screen Sketch application.\n.EXAMPLE\n\tPS> ./open-screen-sketch\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process ms-screensketch:\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-checklist.ps1 in PowerShell\nDESCRIPTION: This snippet demonstrates example invocation of the speak-checklist.ps1 script at the PowerShell prompt, passing 'handwashing' as the checklist name argument. The script is run directly from the shell and illustrates typical parameter usage. No special environment or dependencies are required beyond PowerShell itself.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-checklist.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-checklist.judge yiips1 handwashing\n\n```\n\n----------------------------------------\n\nTITLE: Toggling Num Lock State Using PowerShell\nDESCRIPTION: This PowerShell script toggles the keyboard's Num Lock key state by sending a simulated keypress event through the WScript.Shell COM object. The script includes error handling with a try-catch block to capture and display any execution errors and returns an exit code indicating success or failure. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for enhanced scripting control. The main input is an optional invocation with common parameters; no explicit parameters are required. The output is the toggled Num Lock state and any error messages if exceptions occur.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/toggle-num-lock.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tToggle Num Lock\n.DESCRIPTION\n\tThis PowerShell script toggles the Num Lock key state.\n.EXAMPLE\n\tPS> ./toggle-num-lock\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$wsh = New-Object -ComObject WScript.Shell\n\t$wsh.SendKeys('{NUMLOCK}')\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for search-repo.ps1 PowerShell Script\nDESCRIPTION: Defines the command-line parameters for the search-repo.ps1 script. It accepts an optional text pattern (`-textPattern`) to search for and an optional path (`-path`) to the local Git repository (defaults to the current directory '$PWD'). The script also supports standard PowerShell common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-repo.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/search-repo.ps1 [[-textPattern] <String>] [[-path] <String>] [<CommonParameters>]\n\n-textPattern <String>\n    Specifies the text pattern to search for\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-path <String>\n    Specifies the file path to the local Git repository\n    \n    Required?                    false\n    Position?                    2\n    Default value                \"$PWD\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running the check-health.ps1 Script with Parameters\nDESCRIPTION: Shows the syntax for running the check-health.ps1 script with common PowerShell parameters. The script supports standard PowerShell common parameters like Verbose and Debug.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-health.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-health.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of check-health.ps1\nDESCRIPTION: Demonstrates how to run the check-health.ps1 script and shows a sample of the output, which begins with hardware information including CPU details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-health.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-health.ps1\n \nH A R D W A R E\n✅ Intel(R) Core(TM) i5-6400 CPU @ 2.70GHz (CPU0, 2701MHz, socket U3E1, 30.1°C)\n...\n```\n\n----------------------------------------\n\nTITLE: Using close-chrome-browser.ps1 PowerShell Script with Parameters\nDESCRIPTION: Shows the syntax for using the close-chrome-browser.ps1 script, which supports common PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-chrome-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nclose-chrome-browser.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for suspend.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the command-line syntax for the `suspend.ps1` script. It indicates that the script accepts standard PowerShell common parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/suspend.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/suspend.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching OBS Studio in PowerShell\nDESCRIPTION: This PowerShell script attempts to launch OBS Studio by checking for the executable in two common installation paths. It uses the `TryLaunching` function to check for the executable and start the process if it exists. If OBS Studio cannot be launched from either location, an error message is displayed, and the script exits.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-obs-studio.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches OBS Studio\n.DESCRIPTION\n\tThis script launches the OBS Studio application.\n.EXAMPLE\n\tPS> ./open-obs-studio\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TryLaunching { param([string]$Path, [string]$Dir)\n\tif (test-path \"$Path\" -pathType leaf) {\n\t\tstart-process -FilePath \"$Path\" -WorkingDirectory \"$Dir\"\n\t\texit 0 # success\n\t}\n}\n\ntry {\n\tTryLaunching \"C:\\Program Files (x86)\\OBS Studio\\bin\\64bit\\obs64.exe\" \"C:\\Program Files (x86)\\OBS Studio\\bin\\64bit\\\"\n\tTryLaunching \"C:\\Program Files\\OBS Studio\\bin\\64bit\\obs64.exe\" \"C:\\Program Files\\OBS Studio\\bin\\64bit\\\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Execution of show-planet-mars.ps1\nDESCRIPTION: This example shows how to execute the show-planet-mars.ps1 script from the PowerShell command line.  It simply involves calling the script using './show-planet-mars'.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-mars.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-planet-mars\n```\n\n----------------------------------------\n\nTITLE: Running the open-onedrive.ps1 Script in PowerShell\nDESCRIPTION: This example demonstrates the basic execution of the `open-onedrive.ps1` script from a PowerShell prompt. Running the script as shown will trigger its primary function: opening the user's OneDrive folder in File Explorer.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-onedrive.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-onedrive\n```\n\n----------------------------------------\n\nTITLE: Parameter Usage Example for list-suggestions.ps1 in PowerShell\nDESCRIPTION: Demonstrates the command-line syntax and parameters for the list-suggestions.ps1 script. Shows the available parameters including the optional 'text' parameter that specifies the word or sentence to get suggestions for.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-suggestions.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-suggestions.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the word or sentence to get suggestions for.\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters for show-firefox-manual.ps1\nDESCRIPTION: Parameter definition for the show-firefox-manual.ps1 script. The script accepts common PowerShell parameters but doesn't require any specific parameters to function.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-firefox-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nshow-firefox-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running the Jingle Bells Script Example in PowerShell\nDESCRIPTION: Provides a basic example of how to execute the `play-jingle-bells.ps1` script from the PowerShell console. Running this command will trigger the script to play the 'Jingle Bells' melody using the system's console beep.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-jingle-bells.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-jingle-bells.ps1\n(listen and enjoy)\n```\n\n----------------------------------------\n\nTITLE: Example of Executing Show-Planet-Venus Script - PowerShell\nDESCRIPTION: This PowerShell code demonstrates how to execute the `show-planet-venus.ps1` script.  It provides a simple command that can be used in the PowerShell console to trigger the script's primary function, which is opening Google Maps and displaying planet Venus.  The script expects no specific input parameters in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-venus.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-planet-venus\n```\n\n----------------------------------------\n\nTITLE: Using show-gcc-manual PowerShell script syntax\nDESCRIPTION: Shows the syntax for the show-gcc-manual.ps1 script which opens the GCC manual in a web browser. The script supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-gcc-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-gcc-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing add-memo.ps1 with Sample Memo\nDESCRIPTION: Demonstrates how to run the `add-memo.ps1` script from the PowerShell console, providing the memo text \"Buy apples\" as an argument. The output confirms the successful saving of the memo to the specified CSV file.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/add-memo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./add-memo.ps1 \"Buy apples\"\n✔️ saved to 📄/home/markus/Memos.csv\n```\n\n----------------------------------------\n\nTITLE: Opening User Videos Folder via File Explorer - PowerShell\nDESCRIPTION: This code implements the main logic for launching the user's Videos folder in File Explorer, handling cases where the folder may not exist. The script resolves the user's Videos directory, checks for its presence as a container, and invokes a companion script to open it. It uses structured error handling to display meaningful error messages with line numbers, returning exit code 0 on success and 1 on failure. Requires: PowerShell, existence of $HOME/Videos (or permission to create it), and the 'open-file-explorer.ps1' script in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-videos-folders.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the user's videos folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's videos folder.\n.EXAMPLE\n\tPS> ./open-videos-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = Resolve-Path \"$HOME/Videos\"\n\tif (-not(Test-Path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Videos folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Repository Status\nDESCRIPTION: This snippet checks the status of the Git repository. It uses the `git -C \"$FullPath\" status` command. The script checks the exit code to ensure the command was successful; if unsuccessful, an error is thrown.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (10/10) Checking repo status...         \" -noNewline\n\t& git -C \"$FullPath\" status \n\tif ($lastExitCode -ne \"0\") { throw \"'git status --short' failed with exit code $lastExitCode\" }\n```\n\n----------------------------------------\n\nTITLE: Showing Amsterdam in Google Maps using PowerShell\nDESCRIPTION: This script launches the default browser with Google Maps centered on Amsterdam. It accepts common PowerShell parameters such as Verbose, Debug, and ErrorAction for enhanced control; no additional arguments are required beyond supporting these parameters. The script's main purpose is to provide a quick way to visualize Amsterdam location in a web browser from PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-amsterdam-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-amsterdam-city.ps1 - Shows Amsterdam city in Google Maps\n\nThis script launches the Web browser with Google Maps at Amsterdam city (Netherlands).\n\n## Parameters\n```powershell\nshow-amsterdam-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./show-amsterdam-city\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of show-amsterdam-city.ps1*\n```\n\n----------------------------------------\n\nTITLE: Executing open-update-settings.ps1 in PowerShell\nDESCRIPTION: This example demonstrates how to run the `open-update-settings.ps1` script from a PowerShell prompt. Executing this command will launch the Windows Update settings window on the local machine.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-update-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-update-settings\n\n```\n\n----------------------------------------\n\nTITLE: Clearing the Paddle in PowerShell\nDESCRIPTION: This function erases a paddle from the console at a specified Y position by overwriting the paddle blocks with spaces. It positions itself similarly to 'DrawPaddle' based on side and Y coordinate.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tClears a paddle from its current position.\n.DESCRIPTION\nUsing the same positioning logic as 'DrawPaddle', this function overwrites the paddle's blocks with spaces to erase its visual representation on the console.\n#>\nfunction ClearPaddle($y, $isLeft) {\n    if ($isLeft) {\n        $x = 0\n    } else {\n        $x = [System.Console]::WindowWidth - 1\n    }\n    for ($i = 0; $i -lt 5; $i++) {\n        [System.Console]::SetCursorPosition($x, $y + $i)\n        [System.Console]::Write(\" \")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Script Usage for Directory Tree Display in PowerShell\nDESCRIPTION: This snippet provides an example usage of the directory tree PowerShell script. It shows the expected command-line invocation and the resulting output, which includes folder and file icons, file sizes, and total statistics. The script expects a directory path as input and outputs a formatted tree structure with icons representing file types.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-dir-tree.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-dir-tree.ps1 C:\\MyFolder\n├📂Results\n│ ├📄sales.txt (442K)\n(2 folders, 1 file, 442K file size in total)\n\n```\n\n----------------------------------------\n\nTITLE: Calling Script to Close Netflix Processes - PowerShell\nDESCRIPTION: This PowerShell snippet represents the core logic of the `close-netflix.ps1` script. It calls an external script `close-program.ps1` located in the same directory (`$PSScriptRoot`) and passes process names ('Netflix', 'ApplicationFrameHost', 'RuntimeBroker') as arguments to be closed. It then exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-netflix.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses the Netflix app\n.DESCRIPTION\n\tThis PowerShell script closes the Netflix application gracefully.\n.EXAMPLE\n\tPS> ./close-netflix.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Netflix\" \"ApplicationFrameHost\" \"RuntimeBroker\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the PowerShell script\nDESCRIPTION: This example shows how to execute the PowerShell script check-ether-rate.ps1 from the PowerShell console.  It demonstrates a basic invocation of the script using './check-ether-rate'.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ether-rate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-ether-rate\n```\n\n----------------------------------------\n\nTITLE: Viewing Common Parameters for open-task-manager.ps1\nDESCRIPTION: Demonstrates the command signature for `open-task-manager.ps1`, indicating that it accepts the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) for controlling script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-task-manager.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-task-manager.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage - PowerShell\nDESCRIPTION: Illustrates how to execute the open-amazon.ps1 script from the PowerShell console. It shows the basic command to run the script using the relative path. The expected outcome is the opening of Amazon's website in the default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-amazon.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-amazon\n```\n\n----------------------------------------\n\nTITLE: Executing roll-a-dice.ps1 in PowerShell\nDESCRIPTION: Provides a simple example of how to execute the 'roll-a-dice.ps1' script from the PowerShell command line. Running this command triggers the script to generate a random number between 1 and 6 and announce it using a text-to-speech engine via a helper script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/roll-a-dice.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./roll-a-dice\n```\n\n----------------------------------------\n\nTITLE: Documenting Script Parameters - PowerShell\nDESCRIPTION: This snippet documents the parameters accepted by the `close-windows-terminal.ps1` script. It shows the script's expected path and indicates full support for standard PowerShell common parameters like Verbose, Debug, and ErrorAction, which can control script behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-windows-terminal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/close-windows-terminal.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the install-paint-3d.ps1 Script\nDESCRIPTION: Demonstrates a simple example of how to run the `install-paint-3d.ps1` script from the PowerShell command line in the current directory. This command initiates the installation process described in the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-paint-3d.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-paint-3d.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition for show-boston-city.ps1 in PowerShell\nDESCRIPTION: This snippet details the parameters supported by the `show-boston-city.ps1` PowerShell script. Specifically, it mentions support for common parameters such as Verbose, Debug, ErrorAction, etc., which are inherent features of PowerShell scripts. These parameters enable fine-grained control over script execution and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-boston-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-boston-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Calculating and Rendering Mandelbrot Fractal Animation in PowerShell\nDESCRIPTION: Defines a CalculateFractal function that computes the Mandelbrot fractal values for each console screen coordinate by iterating complex number calculations up to a maximum count. It populates a global character buffer with characters representing escape counts to visualize fractal density. The script sets up console UI dimensions, initializes parameters for fractal boundaries and zoom, and continuously animates the fractal by adjusting zoom levels, updating the buffer and rendering that buffer in green text at the console origin. Dependencies include PowerShell's host UI RawUI for screen size and .NET's System.String for buffer conversion. Inputs include fractal area coordinates and zoom levels, with output rendered as colored console characters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-fractal.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Writes a fractal\n.DESCRIPTION\n        This PowerShell script writes an animated Mandelbrot fractal.\n.EXAMPLE\n        PS> ./write-fractal.ps1\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\nfunction CalculateFractal([float]$left, [float]$top, [float]$xside, [float]$yside, [float]$zoom) { \n\t[int]$maxx = $rui.MaxWindowSize.Width\n\t[int]$maxy = $rui.MaxWindowSize.Height\n\t[float]$xscale = $xside / $maxx \n\t[float]$yscale = $yside / $maxy \n\tfor ([int]$y = 0; $y -lt $maxy; $y++) { \n\t\tfor ([int]$x = 0; $x -lt $maxx; $x++) { \n\t\t\t[float]$cx = $x * $xscale + $left\n\t\t\t[float]$cy = $y * $yscale + $top\n\t\t\t[float]$zx = 0\n\t\t\t[float]$zy = 0\n\t\t\tfor ([int]$count = 0; ($zx * $zx + $zy * $zy -lt 4) -and ($count -lt $MAXCOUNT); $count++) { \n\t\t\t\t[float]$tempx = $zx * $zx - $zy * $zy + $cx\n\t\t\t\t$zy = $zoom * $zx * $zy + $cy\n\t\t\t\t$zx = $tempx\n\t\t\t} \n\t\t\t$global:buf[$y * $maxx + $x] = $([char](65 + $count))\n\t\t} \n\t}\n}\n\n$MAXCOUNT = 30 \n$ui = (Get-Host).ui\n$rui = $ui.rawui\n[float]$left = -1.75 \n[float]$top = -0.25 \n[float]$xside = 0.25 \n[float]$yside = 0.45 \n$buffer0 = \"\"\n1..($rui.MaxWindowSize.Width * $rui.MaxWindowSize.Height) | ForEach-Object { $buffer0 += \" \" }\n$global:buf = $buffer0.ToCharArray()\n\nwhile ($true) {\n\tfor ([float]$zoom = 4.0; $zoom -gt 1.1; $zoom -= 0.02) {\n\t\tCalculateFractal $left $top $xside $yside $zoom\n\t\t[console]::SetCursorPosition(0,0)\n\t\t[string]$Screen = New-Object system.string($global:buf, 0, $global:buf.Length)\n\t\tWrite-Host -foreground green $Screen -noNewline\n\t}\n\tfor ([float]$zoom = 1.1; $zoom -lt 4.0; $zoom += 0.02) {\n\t\tCalculateFractal $left $top $xside $yside $zoom\n\t\t[console]::SetCursorPosition(0,0)\n\t\t[string]$Screen = New-Object system.string($global:buf, 0, $global:buf.Length)\n\t\tWrite-Host -foreground green $Screen -noNewline\n\t}\n}\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing open-fire-place.ps1 (PowerShell)\nDESCRIPTION: Provides a simple example of how to execute the 'open-fire-place.ps1' script from a PowerShell prompt. This command assumes the script is located in the current working directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fire-place.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-fire-place\n```\n\n----------------------------------------\n\nTITLE: Example Usage of say-operating-system.ps1 PowerShell Script\nDESCRIPTION: Demonstrates how to execute the say-operating-system.ps1 script from a PowerShell prompt. The script requires no parameters and will vocalize operating system details when run.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-operating-system.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./say-operating-system\n(listen)\n```\n\n----------------------------------------\n\nTITLE: Building using build.bat (PowerShell)\nDESCRIPTION: This snippet builds a repository using build.bat . It checks for build.bat in a specific directory and executes the build process. This requires the .bat file and related tools/dependencies to be present in the specific directory specified in the `Test-Path` check.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/build-repo.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\n} elseif (Test-Path \"$path/attower/src/build/DevBuild/build.bat\" -pathType leaf) {\n\t\t\"⏳ Building 📂$dirName by using build.bat ...\"\n\t\tSet-Location \"$path/attower/src/build/DevBuild/\"\n\n\t\t& ./build.bat build-all-release\n\t\tif ($lastExitCode -ne \"0\") { throw \"Executing 'build.bat build-all-release' exited with error code $lastExitCode\" }\n\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters in PowerShell\nDESCRIPTION: Shows the command-line syntax for the `open-calculator.ps1` script, highlighting the availability of standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc. These parameters control script execution details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-calculator.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-calculator.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using install-calibre-server.ps1 script with parameters\nDESCRIPTION: Shows the usage syntax of the script with all available parameters including port number, media folder location, user database path, and log file location.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-calibre-server.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-calibre-server.ps1 [[-port] <Int32>] [[-mediaFolder] <String>] [[-userDB] <String>] [[-logfile] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing the reboot.ps1 Script (PowerShell)\nDESCRIPTION: Provides an example command for running the reboot.ps1 script from the PowerShell prompt to initiate an immediate system reboot.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/reboot.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./reboot\n\n```\n\n----------------------------------------\n\nTITLE: Example Executing PowerShell Script\nDESCRIPTION: This snippet shows how to run the `write-powershell-profile.ps1` script without any parameters, demonstrating the output produced during the profile path query and file copy operations, followed by a success message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-powershell-profile.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-powershell-profile.ps1\n⏳ (1/2) Querying path to profile 'CurrentUserCurrentHost'...\n         C:\\Users\\Markus\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n⏳ (2/2) Copying file 'my-profile.ps1'...\n✔️ New PowerShell profile written - it gets active on next login\n\n```\n\n----------------------------------------\n\nTITLE: Executing the open-white-house script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the open-white-house.ps1 script in a PowerShell environment. The script opens the White House website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-white-house.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-white-house\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-onedrive PowerShell Script\nDESCRIPTION: A simple example demonstrating how to execute the script from a PowerShell prompt. This example shows the shortened command name version of the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-onedrive-folder.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-onedrive\n```\n\n----------------------------------------\n\nTITLE: Speaking Mandarin Text Using PowerShell Text-to-Speech\nDESCRIPTION: This PowerShell script accepts an optional Mandarin text string parameter and plays it aloud using the SAPI SPVoice COM object. It enumerates installed TTS voices to find one with 'Mandarin' in the description, sets the voice, and speaks the text. The script supports common PowerShell parameters for error and debugging control. If no voice is found, it throws an error. The input text can be provided as a parameter or entered interactively. Dependencies include a Windows environment with SAPI voices that support Mandarin.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-mandarin.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Mandarin \n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Mandarin text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Mandarin text to speak\n.EXAMPLE\n\tPS> ./speak-mandarin.ps1 \"你好\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Mandarin text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Mandarin*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Mandarin text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Running the Countdown Timer PowerShell Script\nDESCRIPTION: This example demonstrates how to execute the 'set-timer.ps1' script from a PowerShell prompt, setting a countdown for 60 seconds. It illustrates usage for users, requiring only the script filename and the desired countdown value as parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-timer.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./set-timer 60\n```\n\n----------------------------------------\n\nTITLE: Showing Script Parameters and Common Parameters - PowerShell\nDESCRIPTION: This snippet illustrates the command-line syntax for the `cd-users.ps1` script, indicating that it accepts standard PowerShell common parameters. It provides a template for how to call the script and notes the availability of common parameters for controlling execution such as Verbose or ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-users.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-users.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Describing Script Parameters - PowerShell\nDESCRIPTION: This snippet illustrates the standard syntax for invoking the open-flight-radar.ps1 script, showing its location and indicating support for PowerShell's Common Parameters. Common Parameters provide standard functionality like verbose output, debugging, and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-flight-radar.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-flight-radar.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet shows a basic command-line example of how to run the `open-four-square.ps1` script from the PowerShell console. It demonstrates the command `./open-four-square` without any arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-four-square.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-four-square\n\n```\n\n----------------------------------------\n\nTITLE: Launching Microsoft Solitaire via Start-Process in PowerShell\nDESCRIPTION: The complete PowerShell script content for open-microsoft-solitaire.ps1. It includes metadata comments (Synopsis, Description, Example, Link, Notes) and uses the Start-Process cmdlet with a specific URI (xboxliveapp-1297287741:) to launch the Microsoft Solitaire application. It exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-solitaire.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches Microsoft Solitaire \n.DESCRIPTION\n\tThis script launches the Microsoft Solitaire application.\n.EXAMPLE\n\tPS> ./open-microsoft-solitaire\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nStart-Process xboxliveapp-1297287741:\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example (PowerShell)\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to run the open-google-docs.ps1 script from the PowerShell console. It shows calling the script using a relative path without any arguments.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-docs.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-google-docs\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for convert-docx2md.ps1 Script (PowerShell)\nDESCRIPTION: Defines the command-line parameters for the convert-docx2md.ps1 script. It accepts an optional -FilePattern string (positional) to specify the DOCX files to convert, defaulting to prompting the user if not provided. It also supports standard PowerShell CommonParameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-docx2md.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/convert-docx2md.ps1 [[-FilePattern] <String>] [<CommonParameters>]\n\n-FilePattern <String>\n    Specifies the file pattern to the .DOCX file(s)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying the Current Month Calendar\nDESCRIPTION: Demonstrates running the `write-calendar.ps1` script without any parameters. This command outputs the calendar for the current month of the current year.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-calendar.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-calendar\nOutputs the current month.\n```\n\n----------------------------------------\n\nTITLE: Queen Movement Validation in PowerShell\nDESCRIPTION: This snippet validates the movement of a queen. It checks if the move is diagonal or straight (horizontal/vertical) and if there are any pieces blocking the path. Combines the logic of the Rook and Bishop.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_19\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ([math]::abs($MoveX) -eq [math]::abs($MoveY)) {\n    if ($MoveX -gt 0) {\n        if ($MoveY -gt 0) {\n            for ($i = 1; $i -lt $MoveX; $i++) {\n                if ($board[($CurrentColumn + $i) , ($CurrentRow + $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        } else {\n            for ($i = 1; $i -lt $MoveX; $i++) {\n                if ($board[($CurrentColumn + $i) , ($CurrentRow - $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        }\n    } else {\n        if ($MoveY -gt 0) {\n            for ($i = 1; $i -lt $MoveY; $i++) {\n                if ($board[($CurrentColumn - $i), ($CurrentRow + $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        } else {\n            for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n                if ($board[($CurrentColumn - $i) , ($CurrentRow - $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        }\n    }\n    $status[0] = $true\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $status[1] = $true\n    }\n} elseif (($MoveX -ne 0 -and $MoveY -eq 0) -or `\n        ($MoveX -eq 0 -and $MoveY -ne 0)) {\n    if ($MoveX -gt 0) {\n        for ($i = 1; $i -lt $MoveX; $i++) {\n            if ($board[($CurrentColumn + $i), $CurrentRow] -ne $Empty) {\n                return $status\n            }\n        }\n    } elseif ($MoveX -lt 0) {\n        for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n            if ($board[($CurrentColumn - $i), $CurrentRow] -ne $Empty) {\n                return $status\n            }\n        }\n    } elseif ($MoveY -gt 0) {\n        for ($i = 1; $i -lt $MoveY; $i++) {\n            if ($board[$CurrentColumn, ($CurrentRow + $i)] -ne $Empty) {\n                return $status\n            }\n        }\n    } else {\n        for ($i = 1; $i -lt [math]::abs($MoveY); $i++) {\n            if ($board[$CurrentColumn, ($CurrentRow - $i)] -ne $Empty) {\n                return $status\n            }\n        }\n    }\n    $status[0] = $true\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $status[1] = $true\n    }\n} else {\n    return $status\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Paint 3D via PowerShell Script - PowerShell\nDESCRIPTION: This PowerShell script automates the removal of \"Paint 3D\" from a Windows computer by calling the winget command-line tool. It handles errors by checking the exit code, outputs informative messages, and supports common PowerShell script parameters such as Verbose and Debug. The script requires that winget is installed and accessible in the system path and expects no specific input except optional common PowerShell parameters; it returns an exit code of 0 on success and 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-paint-3d.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Paint 3D\n.DESCRIPTION\n\tThis PowerShell script uninstalls Paint 3D from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-paint-3d\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Paint 3D, please wait...\"\n\n\t& winget uninstall \"Paint 3D\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Paint 3D, is it installed?\" }\n\n\t\"Paint 3D is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This snippet defines the parameters accepted by the `write-powershell-profile.ps1` script using standard PowerShell parameter syntax. It specifies a single optional parameter, `-path`, which defaults to `$PSScriptRoot/my-profile.ps1`. It also indicates support for common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-powershell-profile.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./write-powershell-profile.ps1 [[-path] <String>] [<CommonParameters>]\n\n-path <String>\n    Specifies the path to the new profile ($PSScriptRoot/my-profile.ps1 by default)\n    \n    Required?                    false\n    Position?                    1\n    Default value                \"$PSScriptRoot/my-profile.ps1\"\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Show Denver City in Google Maps PowerShell Script\nDESCRIPTION: This script opens a web browser with Google Maps centered on Denver, USA. It supports common PowerShell parameters to customize execution. No external dependencies are required. The script is intended for quick visualization of Denver in mapping applications.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-denver-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## show-denver-city.ps1 - Shows Denver city in Google Maps\n\nThis script launches the Web browser with Google Maps at Denver city (USA).\n\n## Parameters\n```powershell\nshow-denver-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\\n\n## Example\n```powershell\nPS> ./show-denver-city\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n```\n\n----------------------------------------\n\nTITLE: Using open-wolfram-alpha-website.ps1 with PowerShell\nDESCRIPTION: Example of how to execute the open-wolfram-alpha-website.ps1 script from a PowerShell prompt. This script launches the default web browser and navigates to the WolframAlpha website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wolfram-alpha-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-wolfram-alpha-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage Syntax\nDESCRIPTION: The syntax pattern for using the open-email-client.ps1 script, showing available parameters. This includes common PowerShell parameters that can be used with the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-email-client.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-email-client.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the unmute-audio.ps1 Script in PowerShell\nDESCRIPTION: This example shows the basic command to execute the unmute-audio.ps1 script from the PowerShell prompt. Running this command will unmute the system's audio output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/unmute-audio.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> .\\unmute-audio.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing Instagram Website Script - PowerShell\nDESCRIPTION: This example demonstrates how to execute the `open-instagram-website.ps1` script.  The script is run by simply typing the script's path, presuming it's accessible in the current directory or a path configured in the environment variables. No parameters are required as specified in the script's definition.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-instagram-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-instagram-website\n```\n\n----------------------------------------\n\nTITLE: Close Cortana Application in PowerShell\nDESCRIPTION: This PowerShell script closes the Cortana application. It calls the `close-program.ps1` script, passing \"Cortana\" as the application name, title, and process name. The script exits with a success code (0).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-cortana.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tCloses Microsoft's Cortana application\n.DESCRIPTION\n\tThis PowerShell script closes Microsoft's Cortana application gracefully.\n.EXAMPLE\n\tPS> ./close-cortana\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/close-program.ps1\" \"Cortana\" \"Cortana\" \"Cortana\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Providing Simple PowerShell Script Execution Example\nDESCRIPTION: Provides a basic example of how to run the `uninstall-opera-browser.ps1` script from the PowerShell command line without specifying any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-opera-browser.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-opera-browser\n```\n\n----------------------------------------\n\nTITLE: Running the Tesla Website Launcher Script in PowerShell\nDESCRIPTION: This example demonstrates how to execute the script to open the Tesla website in a web browser. The script requires no parameters and can be run directly from the PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-tesla-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-tesla-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Opening Windows Date & Time Settings\nDESCRIPTION: This script launches the Windows date & time settings panel. It supports common PowerShell parameters like Verbose, Debug, and ErrorAction. The script is designed to be run from the command line with optional parameters for debugging and output control. It is authored by Markus Fleschutz and available under CC0 license, with a usage example included.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-date-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-date-settings.ps1 - Opens Windows date & time settings\n\nThis script launches the Windows date & time settings.\n\n## Parameters\n```powershell\nopen-date-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-date-settings\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-date-settings.ps1*\n```\n\n----------------------------------------\n\nTITLE: Describing PowerShell Script Parameters\nDESCRIPTION: This snippet outlines the command-line syntax for the `open-four-square.ps1` script, specifically mentioning the inclusion of standard PowerShell `CommonParameters`. It shows the script path and the placeholder for these parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-four-square.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-four-square.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters in PowerShell\nDESCRIPTION: This snippet documents the parameters supported by the show-rome-city.ps1 script. It explicitly mentions that the script accepts standard PowerShell common parameters like Verbose, Debug, etc. It serves as a parameter definition block for documentation purposes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-rome-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-rome-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Default Web Browser in PowerShell with Optional URL\nDESCRIPTION: This PowerShell script launches the default web browser on the user's system, optionally navigating to a specified URL. It defines a single optional parameter '-URL' which accepts a string to specify the web address to open. If no URL is supplied, it defaults to \"http://www.fleschutz.de\". The script supports standard PowerShell common parameters such as Verbose and Debug. The expected input is a string URL, and the output is the opening of a web browser window. Dependencies include a standard PowerShell environment and a registered default web browser on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-browser.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-browser.ps1 [[-URL] <String>] [<CommonParameters>]\n\n-URL <String>\n    Specifies the URL\n    \n    Required?                    false\n    Position?                    1\n    Default value                http://www.fleschutz.de\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example of Running cd-users Script - PowerShell\nDESCRIPTION: This snippet shows a practical example of executing the `cd-users.ps1` script from the PowerShell prompt. It demonstrates the command `./cd-users` and the expected output, which includes a visual indicator (📂) and the path to the user's home directory (C:\\Users).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-users.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./cd-users\n📂C:\\Users\n\n\n```\n\n----------------------------------------\n\nTITLE: Character Selection - PowerShell\nDESCRIPTION: This function, `BigChar`, takes a character and a row number as input. It uses a switch statement to determine which `Big[Character]` function to call based on the input character. This allows the script to dynamically select the correct function for each character in the text. The function returns a blank space if the character is not defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-big.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction BigChar { param([string]$char, [int]$row)\n\tswitch($char) {\n\t'A' { return BigA $row }\n\t'B' { return BigB $row }\n\t'C' { return BigC $row }\n\t'D' { return BigD $row }\n\t'E' { return BigE $row }\n\t'F' { return BigF $row }\n\t'G' { return BigG $row }\n\t'H' { return BigH $row }\n\t'I' { return BigI $row }\n\t'J' { return BigJ $row }\n\t'K' { return BigK $row }\n\t'L' { return BigL $row }\n\t'M' { return BigM $row }\n\t'N' { return BigN $row }\n\t'O' { return BigO $row }\n\t'P' { return BigP $row }\n\t'Q' { return BigQ $row }\n\t'R' { return BigR $row }\n\t'S' { return BigS $row }\n\t'T' { return BigT $row }\n\t'U' { return BigU $row }\n\t'V' { return BigV $row }\n\t'W' { return BigW $row }\n\t'X' { return BigX $row }\n\t'Y' { return BigY $row }\n\t'Z' { return BigZ $row }\n\t'0' { return Big0 $row }\n\t'1' { return Big1 $row }\n\t'2' { return Big2 $row }\n\t'3' { return Big3 $row }\n\t'4' { return Big4 $row }\n\t'5' { return Big5 $row }\n\t'6' { return Big6 $row }\n\t'7' { return Big7 $row }\n\t'8' { return Big8 $row }\n\t'9' { return Big9 $row }\n\t':' { return BigColon $row }\n\t'-' { return BigMinus $row }\n\t}\n\treturn \"      \"\n}\n```\n\n----------------------------------------\n\nTITLE: Speaking a Markdown Checklist with Text-to-Speech in PowerShell\nDESCRIPTION: This is the main implementation of the speak-checklist.ps1 script. It loads a specified Markdown checklist, audibly speaks each unchecked item using another script (speak-english.ps1), and waits for the user to say 'check' (via speech recognition) before proceeding to the next item. Parameters and error handling are integrated, and the script requires access to the System.Speech .NET assembly and the related speak-english.ps1 script. Expects a string 'name' as input and outputs speech and log messages; requires Windows PowerShell with speech support.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-checklist.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks a checklist by text-to-speech\n.DESCRIPTION\n\tThis PowerShell script speaks the given Markdown checklist by text-to-speech (TTS).\n.PARAMETER name\n\tSpecifies the name of the checklist\n.EXAMPLE\n\tPS> ./speak-checklist.judge yiips1 handwashing\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$name = \"handwashing\")\n\nfunction WaitForCheck {\n\t$engine = New-Object -typeName System.Speech.Recognition.SpeechRecognitionEngine\n\t$grammar = New-Object -typeName System.Speech.Recognition.GrammarBuilder\n\t$grammar.Append(\"check\");\n\t$engine.LoadGrammar($grammar);\n\t$engine.SetInputToDefaultAudioDevice();\n\tdo { $got = $engine.Recognize() } while (\"$($got.text)\" -ne \"check\")\n}\n\ntry {\n\tAdd-Type -AssemblyName System.Speech\n\tif ($name -eq \"\") { $name = Read-Host \"Enter the name of the checklist\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\tClear-Host\n\tWrite-Host \"\"\n\t$lines = Get-Content -path \"$PSScriptRoot/../data/checklists/$name.md\"\n\t$headline = \"\"\n\tforeach($line in $lines) {\n\t\tif ($line -match \"- \\[ \\].*\") {\n\t\t\tWrite-Host \"`n✅ $($line.Substring(6))\" -foregroundColor yellow -noNewline\n\t\t\t& \"$PSScriptRoot/speak-english.ps1\" $($line.Substring(6))\n\t\t\tWrite-Host \" Say 'CHECK'...\"\n\t\t\tWaitForCheck\n\t\t} else {\n\t\t\tWrite-Host $line\n\t\t}\t\t\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\tWrite-Host \"`n✅ Checklist completed in $($elapsed)s.\"\n\t& \"$PSScriptRoot/speak-english.ps1\" \"You're done.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening Google Calendar in PowerShell Usage Example\nDESCRIPTION: Shows how to execute the open-google-calendar.ps1 script from PowerShell to open Google Calendar in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-calendar.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-google-calendar\n```\n\n----------------------------------------\n\nTITLE: Invoking Windows Printer Settings via PowerShell Script - PowerShell\nDESCRIPTION: This code snippet demonstrates the command to execute the PowerShell script for opening the Windows printer settings. It can be run directly in a PowerShell terminal. The script supports common PowerShell parameters such as Verbose, Debug, ErrorAction, and others for enhanced control over execution. The only expected input is the invocation of the script itself, which opens the printer settings; no output is returned unless parameters like Verbose or Debug are specified. The script requires PowerShell to be installed and accessible on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-printer-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-printer-settings\n```\n\n----------------------------------------\n\nTITLE: PowerShell script usage example\nDESCRIPTION: This example shows how to execute the 'show-us-dollar-rate.ps1' script from the PowerShell command line, utilizing default parameters to launch the web browser and display the USD exchange rate.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-us-dollar-rate.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-us-dollar-rate\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Apps Settings Using PowerShell\nDESCRIPTION: This PowerShell script opens the Windows apps settings window. It accepts common PowerShell parameters like Verbose, Debug, and ErrorAction for customizable script execution. There are no additional input parameters required aside from optional common parameters. The script's output is the launching of the settings UI. Dependencies include running on a Windows OS with PowerShell. It is a straightforward invocation without constraints and designed for quick access to the apps settings interface.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-apps-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-apps-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-apps-settings\n```\n\n----------------------------------------\n\nTITLE: Opening Windows Background Settings in PowerShell\nDESCRIPTION: This PowerShell script launches the Windows background settings panel. It supports common parameters for controlling the script's behavior. The script is intended for use within a PowerShell environment to quickly access background settings.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-background-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-background-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters for list-updates.ps1 in PowerShell\nDESCRIPTION: Shows the command-line syntax for executing the list-updates.ps1 script. It indicates that the script supports the standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., allowing for control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-updates.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-updates.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Retrieving WMI Information\nDESCRIPTION: These commands retrieve information from Windows Management Instrumentation (WMI).  `Get-CimInstance` is used to query different WMI classes, such as `Win32_BIOS`, `Win32_DiskDrive`, `Win32_PhysicalMemory`, `Win32_NetworkAdapter`, and `Win32_VideoController`, to retrieve system information.  These commands are Windows-specific.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_18\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-CimInstance -ClassName Win32_BIOS                       # Retrieve BIOS information\nGet-CimInstance -ClassName Win32_DiskDrive                  # Retrieve information about locally connected physical disk devices\nGet-CimInstance -ClassName Win32_PhysicalMemory             # Retrieve information about install physical memory (RAM)\nGet-CimInstance -ClassName Win32_NetworkAdapter             # Retrieve information about installed network adapters (physical + virtual)\nGet-CimInstance -ClassName Win32_VideoController            # Retrieve information about installed graphics / video card (GPU)\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage Example\nDESCRIPTION: Example showing how to execute the install-edge.ps1 script from the PowerShell command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-edge.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-edge.ps1\n```\n\n----------------------------------------\n\nTITLE: Opening DuckDuckGo Website in Browser\nDESCRIPTION: This PowerShell script opens the DuckDuckGo website in the default web browser. It leverages the open-default-browser.ps1 script, passing the DuckDuckGo URL as a parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-duck-duck-go.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the DuckDuckGo website \n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the DuckDuckGo website.\n.EXAMPLE\n\tPS> ./open-duck-duck-go\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://duckduckgo.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing check-mac-address.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the `check-mac-address.ps1` script from the PowerShell console, providing a valid MAC address as an argument, and shows the expected success output indicating the address is valid.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-mac-address.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-mac-address 11:22:33:44:55:66\n✅ MAC address 11:22:33:44:55:66 is valid\n```\n\n----------------------------------------\n\nTITLE: Executing open-google-mail.ps1\nDESCRIPTION: This shows how to execute the open-google-mail.ps1 script from the PowerShell prompt.  It opens the default browser and navigates to the Google Mail website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-mail.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-google-mail\n```\n\n----------------------------------------\n\nTITLE: Example Usage of check-time.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to execute the `check-time.ps1` script from the PowerShell console. Running the script without any specific parameters will trigger its default behavior of determining and speaking the current time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-time.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-time\n\n```\n\n----------------------------------------\n\nTITLE: Playing Jingle Bells with PowerShell Beep Function\nDESCRIPTION: This is the core PowerShell script that plays 'Jingle Bells'. It defines musical note frequencies (e.g., C, G, AA) and durations (e.g., QUARTER, HALF) in `$Notes` and `$Duration` PowerShell objects. It then sequentially calls the static `[System.Console]::Beep` method with specific note frequencies and durations, interspersed with `Start-Sleep` for rests, to produce the song's melody. Basic error handling is included via a try-catch block.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-jingle-bells.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Plays Jingle Bells\n.DESCRIPTION\n        This PowerShell script plays the famous Jingle Bells song.\n.EXAMPLE\n        PS> ./play-jingle-bells.ps1\n\t(listen and enjoy)\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n$Notes = New-Object -TypeName psobject -Property @{\n    REST    = 0\n    GbelowC = 196\n    A       = 220\n    Asharp  = 233\n    B       = 247\n    C       = 262\n    Csharp  = 277\n    D       = 294\n    Dsharp  = 311\n    E       = 330\n    F       = 349\n    Fsharp  = 370\n    G       = 392\n    Gsharp  = 415\n    AA      = 440\n    AAsharp = 466\n    BB      = 493\n    CC      = 523\n    CCsharp = 554\n    DD      = 587\n    DDsharp = 622\n    EE      = 659\n    FF      = 698\n    FFsharp = 740\n    GG      = 784\n    GGsharp = 830\n    }\n$Duration = New-Object -TypeName psobject -Property @{\n    WHOLE     = 1600\n    HALF      = 800\n    QUARTER   = 400\n    EIGHTH    = 200\n    SIXTEENTH = 100\n    }\n\ntry {\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.C, $Duration.HALF   )\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.D, $Duration.HALF   )\n\tStart-Sleep -m $Duration.EIGHTH\n\t[System.Console]::Beep($Notes.D, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.E, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.E, $Duration.HALF)\n\tStart-Sleep -m $Duration.EIGHTH\n\t[System.Console]::Beep($Notes.E, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.C, $Duration.HALF   )\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.C, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.D, $Duration.HALF   )\n\tStart-Sleep -m $Duration.QUARTER\n\t[System.Console]::Beep($Notes.D, $Duration.EIGHTH )\n\t[System.Console]::Beep($Notes.E, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.DD, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.HALF)\n\t[System.Console]::Beep($Notes.CC, $Duration.HALF)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\tStart-Sleep -m $Duration.EIGHTH\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.AA, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.HALF)\n\t[System.Console]::Beep($Notes.CC, $Duration.HALF)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.AA, $Duration.HALF)\n\tStart-Sleep -m $Duration.EIGHTH\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.AA, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.AA, $Duration.EIGHTH)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.CC, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.BB, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.G, $Duration.QUARTER)\n\t[System.Console]::Beep($Notes.F, $Duration.HALF)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Google Maps with Singapore city - PowerShell\nDESCRIPTION: This PowerShell script launches the default web browser and navigates to Google Maps, centered on Singapore city. It leverages common parameters and outputs to the console. The script assumes that a default web browser is configured on the system.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-singapore-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-singapore-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for remove-dir-tree.ps1 Script in PowerShell\nDESCRIPTION: Shows the parameter definition syntax for the `remove-dir-tree.ps1` script. It defines an optional string parameter `-pathToDirTree` at position 1 to specify the target directory. The script also supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remove-dir-tree.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/remove-dir-tree.ps1 [[-pathToDirTree] <String>] [<CommonParameters>]\n\n-pathToDirTree <String>\n    Specifies the file path to the directory tree\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of FTP File Upload Script in PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to execute the upload-file.ps1 script. It simply shows the command to run the script without any specific parameters provided, relying on the script to prompt for the necessary information.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/upload-file.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> .\\upload-file.ps1\n```\n\n----------------------------------------\n\nTITLE: Parameter Syntax for uninstall-spotify.ps1\nDESCRIPTION: Defines the command syntax for running the script, including support for common PowerShell parameters such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-spotify.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-spotify.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Clearing the Ball in PowerShell\nDESCRIPTION: This function removes the ball from its current position by overwriting with a space, with boundary checks to ensure valid cursor positions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_5\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tClears the ball from its current position.\n.DESCRIPTION\nOverwrites the specified coordinates with a space to erase the ball's previous rendering, with boundary validation.\n#>\nfunction ClearBall($x, $y) {\n    if ($x -lt 0 -or $x -ge [System.Console]::WindowWidth - 1 -or $y -lt 0 -or $y -ge [System.Console]::WindowHeight) {\n        return\n    }\n    [System.Console]::SetCursorPosition($x, $y)\n    [System.Console]::Write(\" \")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Game Loop and Logic in PowerShell\nDESCRIPTION: This is the main game loop, handling snake movement, food consumption, and collision detection. It uses the arrow keys for input. It checks for collisions and food consumption. The game updates the snake's position, draws the snake and food, and handles game over conditions. Dependencies include the `Z` function and console input/output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-snake.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nwhile(0..$w-contains$x-and($b=$x+$y*($w+1))-ge0-and($n=$a[$b])-and$s-notcontains$n) {\n\tZ $n \"O\"\n\tsleep -M 99\n\twhile($u.KeyAvailable-and1..4-contains($k=$u.ReadKey(15).VirtualKeyCode-36)-and$d%2-ne$k%2) {\n\t\t$d=$k\n\t}\n\tswitch($d) {\n\t1 { --$x }\n\t2 { --$y }\n\t3 { ++$x }\n\t4 { ++$y }\n\t}\n\t$s+=$n\n\tif ($s-contains$f) {\n\t\t$f=$a|random\n\t} else {\n\t\t$p,$s=$s\n\t\tZ $p ' '\n\t}\n\tZ $f \"🔶\"\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open Recycle Bin Folder\nDESCRIPTION: The PowerShell script 'open-recycle-bin-folder.ps1' launches the File Explorer with the user's recycle bin folder by executing 'start shell:recyclebinfolder'. It includes error handling to catch and report any issues during execution, and it is designed to be run with optional PowerShell common parameters for debugging and control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-recycle-bin-folder.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the recycle bin folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's recycle bin folder.\n.EXAMPLE\n\tPS> ./open-recycle-bin-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tstart shell:recyclebinfolder\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Parameters for open-screen-clip.ps1\nDESCRIPTION: Defines the available parameters for the open-screen-clip.ps1 script. This script only supports the common PowerShell parameters and doesn't require any specific parameters to function.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-screen-clip.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/open-screen-clip.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing show-serenade-manual.ps1 in PowerShell\nDESCRIPTION: This example demonstrates how to run the `show-serenade-manual.ps1` script from a PowerShell console. Executing this command without any additional parameters will trigger the script's core functionality, which is opening the default web browser to the URL of the Serenade manual.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-serenade-manual.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-serenade-manual\n```\n\n----------------------------------------\n\nTITLE: Running show-seattle-city.ps1 Script Example in PowerShell\nDESCRIPTION: This example demonstrates running the show-seattle-city.ps1 script in a PowerShell prompt. No arguments are needed unless custom common parameters are necessary. On execution, it opens Google Maps focused on Seattle using the user's default browser. The script assumes PowerShell is installed and the script file is present in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-seattle-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-seattle-city\n```\n\n----------------------------------------\n\nTITLE: Executing play-chess-game.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates how to execute the play-chess-game.ps1 script from a PowerShell prompt. Running the script as shown will launch the default web browser to the configured chess game URL.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess-game.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-chess-game\n```\n\n----------------------------------------\n\nTITLE: Running check-independence-day.ps1 Script Example\nDESCRIPTION: Demonstrates the basic usage of the script without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-independence-day.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-independence-day.ps1\n```\n\n----------------------------------------\n\nTITLE: Updating the Internal Chess Board State in PowerShell\nDESCRIPTION: Defines the `Update-Board` function responsible for synchronizing the internal `$board` array with the current state of chess pieces. It filters the `$Script:WhitePieces` and `$Script:BlackPieces` arrays to get only living pieces, then iterates through them, placing each piece object at its `CurrentColumn` and `CurrentRow` coordinates within the `$board` array. Finally, it fills any null (empty) squares on the board with the `$Empty` placeholder object.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n#Update the status of all the pieces and place them\nFunction Update-Board {\n    #Get arrays of all piece that are still alive\n    [Array]$CurrentWhite = $Script:WhitePieces | Where-Object {$_.Alive -eq $true}\n    [Array]$CurrentBlack = $Script:BlackPieces | Where-Object {$_.Alive -eq $true}\n\n    #Place all the white pieces\n    foreach ($pc in $CurrentWhite) {\n        $board[($pc.CurrentColumn),($pc.CurrentRow)] = $pc\n    }\n    #Place all the black pieces\n    foreach ($pc in $CurrentBlack) {\n        $board[($pc.CurrentColumn),($pc.CurrentRow)] = $pc\n    }\n\n    #Check for spaces without a piece in them, then fill it with the empty placeholder.\n    for ($i = 0; $i -le 7; $i++) {\n        for ($j = 0; $j -le 7; $j++) {\n            if ($board[$i, $j] -eq $null) {\n                $board[$i, $j] = $Empty\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: King Movement Validation in PowerShell\nDESCRIPTION: This snippet validates the movement of a king. It checks if the move is one square in any direction, or if it's a castling move. Includes checks to see if the king has previously moved before castling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_20\n\nLANGUAGE: PowerShell\nCODE:\n```\n$MoveX = [math]::abs($MoveX)\n$MoveY = [math]::abs($MoveY)\n\nif (($MoveX -le 1) -and ($MoveY -le 1)) {\n    $status[0] = $true\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $status[1] = $true\n    } elseif (($pc.firstmove -eq $true) -and `\n        ($pc.color -eq 'White')) {\n    if (($dst -eq 'G1') -and `\n        ($wHR.firstmove -eq $true)) {\n```\n\n----------------------------------------\n\nTITLE: Initializing PowerShell Script to Check Drive Space with Parameter Definitions\nDESCRIPTION: This PowerShell script initializes parameters for drive space monitoring, including a minimum warning level defaulting to 5GB, and supports common PowerShell parameters. It sets the foundation for querying drive information and handling errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-drives.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the drive space\n.DESCRIPTION\n\tThis PowerShell script queries the free space of all drives and prints it.\n.PARAMETER minLevel\n\tSpecifies the minimum warning level (5GB by default)\n.EXAMPLE\n\tPS> ./check-drives.ps1\n\t✅ Drive C: uses 489GB (53%) of 930GB, D: uses 3TB (87%) of 4TB, E: is empty\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int64]$minLevel = 5GB)\n```\n\n----------------------------------------\n\nTITLE: Opening CIA website with PowerShell\nDESCRIPTION: This script launches the web browser with the CIA website (Central Intelligence Agency). It supports common parameters like Verbose, Debug, ErrorAction, etc. It's authored by Markus Fleschutz and licensed under CC0.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cia-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-cia-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Open HolidayCheck Website\nDESCRIPTION: This script launches the Web browser with the HolidayCheck website. It accepts common PowerShell parameters for verbose output, debugging, and error handling to facilitate debugging and logging. The script does not require external dependencies and is intended for quick automation of opening the website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-holiday-check.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# open-holiday-check.ps1 - Opens the HolidayCheck website\n\n# This script launches the Web browser with the HolidayCheck website.\n\n# Parameters\n# The script supports common PowerShell parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n# Example usage\n# ./open-holiday-check.ps1\n\n# Notes\n# Author: Markus Fleschutz\n# License: CC0\n\nStart-Process \"https://www.holidaycheck.com\"\n\n```\n\n----------------------------------------\n\nTITLE: Launching Pinterest Website with PowerShell Script - PowerShell\nDESCRIPTION: This script, when executed, opens the Pinterest website in the user's default web browser. It supports standard PowerShell common parameters such as Verbose, Debug, ErrorAction, and others for enhanced control over execution and error handling. No required parameters are necessary for basic operation; the script is invoked directly without arguments, and output is only the effect of launching the browser to the Pinterest homepage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pinterest-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-pinterest-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Executing the FRITZ!Box Script in PowerShell\nDESCRIPTION: This example demonstrates how to run the `open-fritz-box.ps1` script from the PowerShell command line. Executing this command will launch the system's default web browser and navigate to the FRITZ!Box web interface login page.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fritz-box.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-fritz-box\n```\n\n----------------------------------------\n\nTITLE: Using clear-recycle-bin.ps1 Script with Parameters\nDESCRIPTION: Shows the command-line syntax for executing the clear-recycle-bin.ps1 script, including the supported common parameters for PowerShell scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/clear-recycle-bin.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/clear-recycle-bin.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameters for open-task-bar-settings Script (PowerShell)\nDESCRIPTION: Describes the command line parameters supported by the `open-task-bar-settings.ps1` script. It lists the command syntax and specifies that it supports standard PowerShell common parameters like Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-task-bar-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-task-bar-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using remember.ps1 Script with Parameters\nDESCRIPTION: Shows the command syntax and parameters for the remember.ps1 script. The script accepts three optional text parameters and common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/remember.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/remember.ps1 [[-text1] <String>] [[-text2] <String>] [[-text3] <String>] [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example - PowerShell\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to execute the move-mouse-pointer.ps1 script. It shows how to pass the desired x and y coordinates (100, 100) as positional arguments to the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/move-mouse-pointer.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./move-mouse-pointer.ps1 100 100\n\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Printing QR Code ASCII Art\nDESCRIPTION: This script outputs a stylized QR code pattern as ASCII art to the console using multiple Write-Host commands with color settings. It requires PowerShell and standard console support; it does not generate dynamic QR codes but displays a fixed pattern. The script includes metadata, example usage, and author notes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-qr-code.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites a QR code\n.DESCRIPTION\n\tThis PowerShell script writes \"Hello World\" as QR code to the console output.\n.EXAMPLE\n\tPS> ./write-qr-code.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nWrite-Host \"                             \" -foregroundColor black -backgroundColor white\nWrite-Host \"                             \" -foregroundColor black -backgroundColor white\nWrite-Host \"                             \" -foregroundColor black -backgroundColor white\nWrite-Host \"    ▄▄▄▄▄▄▄ ▄ ▄▄▄ ▄▄▄▄▄▄▄    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    █ ▄▄▄ █ ▄▄▀█  █ ▄▄▄ █    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    █ ███ █ █▀ ▄▀ █ ███ █    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    █▄▄▄▄▄█ ▄▀█▀█ █▄▄▄▄▄█    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    ▄▄▄▄  ▄ ▄▄▄██▄  ▄▄▄ ▄    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    ▀ █ ▀▄▄▀█▀▀█▀█▀█▀▀▀▄█    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    ▄▄██▀▀▄▄█ ▄▀▄▄▄▀ ▀ ▀▄    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    ▄▄▄▄▄▄▄ ▀▀██▄▄██▄ ▀ ▀    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    █ ▄▄▄ █  ▀▄ ▄▀ ▀ ██▀▀    \" -foregroundColor black -backgroundColor white\nWrite-Host \"    █ ███ █ █▄  ▄ ▀▄ ▀█▀     \" -foregroundColor black -backgroundColor white\nWrite-Host \"    █▄▄▄▄▄█ █▀▄█ ███▀ ▄ ▀    \" -foregroundColor black -backgroundColor white\nWrite-Host \"                             \" -foregroundColor black -backgroundColor white\nWrite-Host \"                             \" -foregroundColor black -backgroundColor white\nWrite-Host \"                             \" -foregroundColor black -backgroundColor white\n\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition in ping-weather.ps1 (PowerShell)\nDESCRIPTION: This section defines the parameters for the `ping-weather.ps1` script. It includes the `Location` parameter, which specifies the location to query (defaults to automatic detection), and the `UpdateInterval` parameter, which sets the update frequency in seconds (defaults to 600 seconds).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-weather.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nparam([string]$Location = \"\", [int]$UpdateInterval = 600)\n```\n\n----------------------------------------\n\nTITLE: Calling Playback Script in PowerShell\nDESCRIPTION: This snippet contains the main logic of the play-dog-sound.ps1 script. It delegates the task of playing the sound to another script, 'play-mp3.ps1', located relative to the current script, and passes the path to the 'dog.mp3' file as an argument. The script then exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-dog-sound.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a dog sound\n.DESCRIPTION\n\tThis PowerShell script plays a dog sound.\n.EXAMPLE\n\tPS> ./play-dog-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/dog.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-latin.ps1\nDESCRIPTION: Shows an example of how to execute the `speak-latin.ps1` script.  It demonstrates invoking the script with the text \"Salve\".\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-latin.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-latin.ps1 Salve\n```\n\n----------------------------------------\n\nTITLE: Launching Recycle Bin in PowerShell\nDESCRIPTION: This PowerShell script, open-recycle-bin.ps1, opens the user's recycle bin folder using File Explorer.  It leverages common parameters for extended control, including Verbose, Debug, and ErrorAction. No specific parameters are defined in the provided script, but the script supports common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-recycle-bin.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-recycle-bin.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing play-parrot-sound.ps1 (PowerShell)\nDESCRIPTION: Provides an example command demonstrating how to execute the 'play-parrot-sound.ps1' script directly from the PowerShell command line. This command triggers the playback of the parrot sound.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-parrot-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-parrot-sound\n\n```\n\n----------------------------------------\n\nTITLE: Showing Script Execution Example | PowerShell\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to execute the `install-wsl.ps1` script. It shows a basic invocation using the relative path `./` without any additional arguments. This is the typical command users would run to initiate the default WSL installation process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-wsl.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./install-wsl.ps1\n\n\n```\n\n----------------------------------------\n\nTITLE: Drawing the Paddle in PowerShell\nDESCRIPTION: This function draws a vertical paddle either on the left or right edge of the console at a specified Y position. It uses a loop to render five vertical blocks representing the paddle height.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-pong.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tDraws a paddle at a specified vertical position for either left or right side of the console.\n.DESCRIPTION\nDepending on the 'isLeft' parameter, it positions the paddle either on the leftmost column or rightmost column. It draws a vertical line of 5 blocks labeled '▌'.\n#>\nfunction DrawPaddle($y, $isLeft) {\n\tif ($isLeft) {\n\t\t$x = 0\n\t} else {\n\t\t$x = [System.Console]::WindowWidth - 1\n\t}\n\tfor ($i = 0; $i -lt 5; $i++) {\n\t\t[System.Console]::SetCursorPosition($x, $y + $i)\n\t\t[System.Console]::Write(\"▌\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing convert-docx2md.ps1 Script Example (PowerShell)\nDESCRIPTION: Example command demonstrating how to execute the convert-docx2md.ps1 script to convert all .docx files in the current directory to Markdown format. This requires the script to be executable from the current location and pandoc to be installed and in the system's PATH.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/convert-docx2md.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./convert-docx2md *.docx\n```\n\n----------------------------------------\n\nTITLE: Initializing Snake Game in PowerShell\nDESCRIPTION: This code initializes the game environment by setting up the screen size, hiding the cursor, and creating an array representing the game board. It defines variables for the snake's initial position, direction, and food location. Dependencies include PowerShell and its console capabilities.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-snake.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlay the Snake game\n.DESCRIPTION\n\tThis PowerShell script lets you play the famous Snake game.\n\tNOTE: use the arrow keys to control the snake\n.EXAMPLE\n\tPS> ./play-snake.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n$w=($q=($u=$Host.UI.RawUi).WindowSize).Width-1\n$u.CursorSize=0\n$a=0..($q.Height-1)|%{$i=$_;0..$w|%{@{X=$_;Y=$i}}};$s=($f=$n=$a[($x=$y=$d=3)]),$n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of speak-japanese.ps1\nDESCRIPTION: Demonstrates how to use the script to speak a Japanese greeting (\"ハロー\", which means \"Hello\").\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-japanese.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-japanese.ps1 \"ハロー\"\n```\n\n----------------------------------------\n\nTITLE: Example Execution of check-motherboard.ps1 Script\nDESCRIPTION: Provides a practical example of how to run the check-motherboard.ps1 script from a PowerShell prompt and shows the expected output. It demonstrates a successful execution indicating the detected motherboard model and manufacturer.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-motherboard.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./check-motherboard.ps1\n✅ Motherboard Calla_LC by LN\n\n```\n\n----------------------------------------\n\nTITLE: Invoking the Discord Uninstallation PowerShell Script\nDESCRIPTION: This example demonstrates how to execute the 'uninstall-discord.ps1' script from the command line, optionally accepting common PowerShell parameters such as Verbose, Debug, and ErrorAction. No arguments are strictly required but standard PowerShell parameters are accepted for enhanced output or error handling. The output is dependent on the script’s execution and potential error states.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-discord.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-discord.ps1 [<CommonParameters>]\n\n```\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./uninstall-discord\n\n```\n\n----------------------------------------\n\nTITLE: Running Script Example - PowerShell\nDESCRIPTION: This example demonstrates how to execute the send-email.ps1 script from the PowerShell command line without specifying any parameters. Running the script this way will prompt the user to enter the necessary email details interactively.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/send-email.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./send-email\n\n\n```\n\n----------------------------------------\n\nTITLE: Setting PowerShell Profile with Parameters Usage\nDESCRIPTION: Shows the command syntax for running the set-profile.ps1 script, including common parameter options.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/set-profile.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./set-profile.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing the Script to Open Default Apps Settings - PowerShell\nDESCRIPTION: This snippet provides an example command to run the script from a PowerShell prompt. It requires the open-default-apps-settings.ps1 script to be accessible from the working directory. No input parameters are mandatory; running the script opens the Windows Default Apps settings window with no further output returned.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-default-apps-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-default-apps-settings\n\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Wake-On-LAN Script in PowerShell\nDESCRIPTION: Provides a practical example of how to execute the `wakeup.ps1` script from the PowerShell console. It demonstrates passing the MAC address and IP address as positional parameters. This helps users quickly understand the basic command structure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/wakeup.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./wakeup 11:22:33:44:55:66 192.168.100.100\n```\n\n----------------------------------------\n\nTITLE: Using open-onedrive-folder.ps1 with Parameters\nDESCRIPTION: Shows the syntax and available parameters for the open-onedrive-folder.ps1 script. The script supports common PowerShell parameters but doesn't require any specific parameters to function.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-onedrive-folder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-onedrive-folder.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameters for unmute-audio.ps1 in PowerShell\nDESCRIPTION: This snippet demonstrates the command structure for the unmute-audio.ps1 script, showing its path and indicating that it accepts common PowerShell parameters. These parameters control aspects like verbose output, debugging, and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/unmute-audio.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/unmute-audio.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: close-system-settings.ps1 Parameter Definition\nDESCRIPTION: This code block defines the parameters supported by the close-system-settings.ps1 PowerShell script, including common parameters such as Verbose, Debug, and ErrorAction. It allows users to control the script's behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-system-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nclose-system-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing list-clipboard.ps1 Script Example\nDESCRIPTION: Provides an example of how to run the list-clipboard.ps1 script from the PowerShell console. It demonstrates the command invocation and the expected output format, which includes an emoji and the clipboard text (in this case, 'test').\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-clipboard.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-clipboard.ps1\n📋 test\n\n```\n\n----------------------------------------\n\nTITLE: Sample Usage Output of Current Day Announcement in PowerShell\nDESCRIPTION: Demonstrates sample output from running the `check-day.ps1` script. When executed in PowerShell, the script outputs a success symbol and states the current day of the week, illustrating the expected user-visible result after the day is spoken via TTS.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-day.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-day\n✅ It's Sunday.\n```\n\n----------------------------------------\n\nTITLE: Showing Script Usage Example PowerShell\nDESCRIPTION: This snippet provides an example of how to execute the `encrypt-file.ps1` script from the PowerShell command line. It shows encrypting a file located at `C:\\MyFile.txt` using the password `\"123\"`.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/encrypt-file.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./encrypt-file.ps1 C:\\MyFile.txt \"123\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Common Parameters Support in PowerShell\nDESCRIPTION: This snippet indicates that the 'list-local-ip.ps1' script accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., allowing for more control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-local-ip.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Script Parameters Syntax\nDESCRIPTION: This snippet shows the syntax for executing the `open-github.ps1` script, including the path and optional parameters. It also documents the common PowerShell parameters like Verbose, Debug, and ErrorAction, which provide standard control over script execution and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-github.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-github.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-world-news-website.ps1 in PowerShell\nDESCRIPTION: Specifies the common parameters supported by the `open-world-news-website.ps1` script. These parameters include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, allowing for standard PowerShell control over script execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-world-news-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-world-news-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Specifying Common Parameters for PowerShell Script Usage - PowerShell\nDESCRIPTION: This code snippet lists the common PowerShell parameters available for use with the close-paint-three-d.ps1 script, such as Verbose and Debug. It is intended as a reference for users running the script on the command line, ensuring they are aware of the available controls for script execution behavior. Prerequisites include basic familiarity with PowerShell scripting and parameter usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-paint-three-d.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/close-paint-three-d.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of list-suggestions.ps1 in PowerShell\nDESCRIPTION: Shows a simple example of running the script with a single parameter 'Joe', which returns Google search suggestions related to that name like 'joe biden' and 'joe cocker'.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-suggestions.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-suggestions.ps1 Joe\njoe biden\njoe cocker\n...\n```\n\n----------------------------------------\n\nTITLE: Opening Pixabay Website PowerShell Script\nDESCRIPTION: This PowerShell script opens the Pixabay website in the default web browser. It utilizes common PowerShell parameters such as Verbose, Debug, and ErrorAction. It does not require any specific dependencies beyond the PowerShell environment and the system's default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pixabay-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-pixabay-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-system-rescue-manual.ps1\nDESCRIPTION: Displays the parameter signature for the `show-system-rescue-manual.ps1` script. The script primarily utilizes the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) for controlling script execution behavior, output, and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-system-rescue-manual.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-system-rescue-manual.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Google Maps in PowerShell Example Usage\nDESCRIPTION: Example showing how to use the open-google-maps.ps1 script from PowerShell command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-maps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-google-maps\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters for install-rufus.ps1 (PowerShell)\nDESCRIPTION: Shows the command-line syntax for the install-rufus.ps1 script, indicating that it accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., for controlling script execution and output. No script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-rufus.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-rufus.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-hr-works-website.ps1 (PowerShell)\nDESCRIPTION: This snippet shows the parameter block for the 'open-hr-works-website.ps1' script. It indicates that the script accepts the standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., allowing for control over script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-hr-works-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-hr-works-website.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of show-volkswagen-manual.ps1 in PowerShell\nDESCRIPTION: This example shows how to run the 'show-volkswagen-manual.ps1' script from a PowerShell prompt without specifying any additional parameters. Running this command opens the Volkswagen manual in the default web browser. Requires PowerShell, the script file accessible in the current directory, and internet access; no output is produced beyond the browser action.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-volkswagen-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-volkswagen-manual\n\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Specific Month in the Current Year\nDESCRIPTION: Provides an example of running `write-calendar.ps1` with only the month argument (7 for July). This outputs the calendar for the specified month in the current year.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-calendar.md#_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./write-calendar 7\nOutputs the calendar for July of this year.\n```\n\n----------------------------------------\n\nTITLE: Bishop Movement Validation in PowerShell\nDESCRIPTION: This snippet validates the movement of a bishop. It checks if the move is diagonal and if there are any pieces blocking the path. It calculates if the absolute difference of the X and Y coordinates is equal and iterates through the board checking for empty positions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nif ([math]::abs($MoveX) -ne [math]::abs($MoveY)) {\n    return $status\n} else {\n    if ($MoveX -gt 0) {\n        if ($MoveY -gt 0) {\n            for ($i = 1; $i -lt $MoveX; $i++) {\n                if ($board[($CurrentColumn + $i) , ($CurrentRow + $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        } else {\n            for ($i = 1; $i -lt $MoveX; $i++) {\n                if ($board[($CurrentColumn + $i) , ($CurrentRow - $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        }\n    } else {\n        if ($MoveY -gt 0) {\n            for ($i = 1; $i -lt $MoveY; $i++) {\n                if ($board[($CurrentColumn - $i) , ($CurrentRow + $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        } else {\n            for ($i = 1; $i -lt [math]::abs($MoveX); $i++) {\n                if ($board[($CurrentColumn - $i) , ($CurrentRow - $i)] -ne $Empty) {\n                    return $status\n                }\n            }\n        }\n    }\n    $status[0] = $true\n    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n        $status[1] = $true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters for play-gorilla-sound.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command-line signature for the 'play-gorilla-sound.ps1' script. It indicates that the script accepts the standard PowerShell common parameters (like Verbose, Debug, ErrorAction, etc.) for controlling script behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-gorilla-sound.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-gorilla-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Stack Overflow Website with PowerShell Script\nDESCRIPTION: This PowerShell script opens the Stack Overflow website in the user's default browser by calling another script named open-default-browser.ps1 with the Stack Overflow URL as a parameter. It supports standard PowerShell common parameters such as Verbose and Debug. No external dependencies are required beyond open-default-browser.ps1 being available in the script root. Takes no input parameters by default; the expected output is launching the browser or an exit code. Do not run if the open-default-browser.ps1 script is missing.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-stack-overflow.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Stack Overflow website\n.DESCRIPTION\n\tThis script launches the Web browser with the Stack Overflow website.\n.EXAMPLE\n\tPS> ./open-stack-overflow\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://stackoverflow.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Opening Google Mail in Browser (PowerShell)\nDESCRIPTION: This PowerShell script opens the Google Mail website in the default web browser using the `open-default-browser.ps1` script. It defines synopsis, description, example, link and notes using comment-based help.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-mail.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens Google Mail\n.DESCRIPTION\n\tThis PowerShell script launches the Web browser with the Google Mail website.\n.EXAMPLE\n\tPS> ./open-google-mail\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://mail.google.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Showing Script Parameters for Vivaldi Installation in PowerShell\nDESCRIPTION: This PowerShell snippet shows the script filepath and references the set of common parameters available for the command invocation. It relies on Windows PowerShell and assumes access to standard command-line interface, with customization through common flags such as Verbose and Debug. No runtime logic is included; it serves to guide users about script parameters and supported flags.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-vivaldi.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/install-vivaldi.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying the Chess Board in PowerShell\nDESCRIPTION: Defines the `Publish-Board` function in PowerShell. This function clears the console (`Clear`) and then uses `Write-Host` commands to draw the current state of the chess board, retrieving piece icons from the global `$board` 2D array. It requires the `Update-Board` function to have been run previously to populate the `$board` array correctly.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n#Update-Board must be run before Publish-Board\n#Draws the board to the screen and displays all the icons\nFunction Publish-Board {\n    Clear\n    Write-Host \"`n`n\"\n    Write-Host '     A   B   C   D   E   F   G   H'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 8 |'$board[0,7].Icon'|'$board[1,7].Icon'|'$board[2,7].Icon'|'$board[3,7].Icon'|'$board[4,7].Icon'|'$board[5,7].Icon'|'$board[6,7].Icon'|'$board[7,7].Icon'| 8'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 7 |'$board[0,6].Icon'|'$board[1,6].Icon'|'$board[2,6].Icon'|'$board[3,6].Icon'|'$board[4,6].Icon'|'$board[5,6].Icon'|'$board[6,6].Icon'|'$board[7,6].Icon'| 7'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 6 |'$board[0,5].Icon'|'$board[1,5].Icon'|'$board[2,5].Icon'|'$board[3,5].Icon'|'$board[4,5].Icon'|'$board[5,5].Icon'|'$board[6,5].Icon'|'$board[7,5].Icon'| 6'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 5 |'$board[0,4].Icon'|'$board[1,4].Icon'|'$board[2,4].Icon'|'$board[3,4].Icon'|'$board[4,4].Icon'|'$board[5,4].Icon'|'$board[6,4].Icon'|'$board[7,4].Icon'| 5'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 4 |'$board[0,3].Icon'|'$board[1,3].Icon'|'$board[2,3].Icon'|'$board[3,3].Icon'|'$board[4,3].Icon'|'$board[5,3].Icon'|'$board[6,3].Icon'|'$board[7,3].Icon'| 4'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 3 |'$board[0,2].Icon'|'$board[1,2].Icon'|'$board[2,2].Icon'|'$board[3,2].Icon'|'$board[4,2].Icon'|'$board[5,2].Icon'|'$board[6,2].Icon'|'$board[7,2].Icon'| 3'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 2 |'$board[0,1].Icon'|'$board[1,1].Icon'|'$board[2,1].Icon'|'$board[3,1].Icon'|'$board[4,1].Icon'|'$board[5,1].Icon'|'$board[6,1].Icon'|'$board[7,1].Icon'| 2'\n    Write-Host '   --------------------------------- '\n    Write-Host ' 1 |'$board[0,0].Icon'|'$board[1,0].Icon'|'$board[2,0].Icon'|'$board[3,0].Icon'|'$board[4,0].Icon'|'$board[5,0].Icon'|'$board[6,0].Icon'|'$board[7,0].Icon'| 1'\n    Write-Host '   --------------------------------- '\n    Write-Host '     A   B   C   D   E   F   G   H'\n}\n```\n\n----------------------------------------\n\nTITLE: Executing list-printers.ps1 in PowerShell\nDESCRIPTION: Provides an example command for executing the list-printers.ps1 script directly from the PowerShell command line in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-printers.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-printers.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: This snippet provides a simple example of how to run the `open-lockscreen-settings.ps1` script directly from a PowerShell command prompt. It shows the basic command syntax required to launch the script using its relative path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-lockscreen-settings.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-lockscreen-settings\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Launch Jitsi Meet Website\nDESCRIPTION: This script initiates the web browser to open the Jitsi Meet URL, leveraging an external script for the browser launch. It includes documentation comments, example usage, and notes about the author and licensing. The script is designed to be run directly with optional common PowerShell parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-jitsi-meet.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Jitsi Meet website\n.DESCRIPTION\n\tThis script launches the Web browser with the Jitsi Meet website.\n.EXAMPLE\n\tPS> ./open-jitsi-meet\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$(Split-Path -Parent $MyInvocation.MyCommand.Definition)/open-default-browser.ps1\" \"https://meet.jit.si/\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Usage in PowerShell\nDESCRIPTION: Demonstrates how to execute the `uninstall-chrome.ps1` script, highlighting the optional use of common PowerShell parameters like Verbose, Debug, ErrorAction, etc. These parameters modify the script's execution behavior and output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-chrome.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-chrome.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Executing the Uninstall Script in PowerShell\nDESCRIPTION: This example demonstrates how to run the `uninstall-bloatware.ps1` script from a PowerShell console. Navigate to the script's directory and execute it using dot-sourcing (`./`).\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-bloatware.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-bloatware.ps1\n\n```\n\n----------------------------------------\n\nTITLE: Executing suspend.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to execute the `suspend.ps1` script from the PowerShell command line to initiate the computer suspension process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/suspend.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./suspend\n```\n\n----------------------------------------\n\nTITLE: Example of Executing PowerShell Script\nDESCRIPTION: This snippet demonstrates how to execute the open-mozilla-thunderbird.ps1 script from a PowerShell console. It shows the basic command to launch the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-mozilla-thunderbird.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-mozilla-thunderbird\n\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage Example\nDESCRIPTION: Example showing how to execute the voice recorder script from PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-voice-recorder.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-voice-recorder.ps1\n```\n\n----------------------------------------\n\nTITLE: Executing list-console-colors.ps1 with Common Parameters in PowerShell\nDESCRIPTION: Demonstrates the command-line syntax for executing the `list-console-colors.ps1` script. It highlights that the script accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., for controlling script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-console-colors.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-console-colors.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Script Example - PowerShell\nDESCRIPTION: This example demonstrates how to run the open-bing-website.ps1 script from a PowerShell prompt. It shows the minimal command required to execute the script and open the Bing website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bing-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-bing-website\n\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating a PowerShell Script Example\nDESCRIPTION: This snippet provides a template for showing how to execute a PowerShell script (`.\\template.ps1` is used as a placeholder here) from the command line. It demonstrates the standard `PS>` prompt notation and the use of a relative path (`.\\`) to invoke the script. The surrounding text indicates this section is meant to contain actual usage examples for the `export-scripts2serenade.ps1` script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/export-scripts2serenade.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS>.\\template.ps1 ← enter example here (repeat this attribute for more than one example)\n```\n\n----------------------------------------\n\nTITLE: Example Usage\nDESCRIPTION: Provides an example of how to execute the `play-2048-game.ps1` script.  It shows the command to run the script from the PowerShell prompt.  This assumes the script is in the current directory or the path is set appropriately.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-2048-game.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-2048-game\n```\n\n----------------------------------------\n\nTITLE: Example Usage of install-one-calendar.ps1 - PowerShell\nDESCRIPTION: This code snippet demonstrates how to execute the `install-one-calendar.ps1` script from the PowerShell command line.  It assumes the script is located in the current directory or that the path to the script is known. No specific parameters are passed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-one-calendar.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./install-one-calendar.ps1\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-youtube.ps1 (PowerShell)\nDESCRIPTION: Demonstrates how to execute the open-youtube.ps1 script from the PowerShell command line to open YouTube in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-youtube.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-youtube\n```\n\n----------------------------------------\n\nTITLE: Executing open-wikipedia.ps1 Script (PowerShell)\nDESCRIPTION: This example demonstrates the basic execution of the `open-wikipedia.ps1` script from a PowerShell prompt. Running this command will trigger the script's primary function: launching the system's default web browser and navigating to the Wikipedia website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-wikipedia.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-wikipedia\n```\n\n----------------------------------------\n\nTITLE: Running Netflix Website Script Example (PowerShell)\nDESCRIPTION: This snippet provides a simple command-line example demonstrating how to execute the open-netflix-website.ps1 script without any specific parameters from the PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-netflix-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-netflix-website\n\n```\n\n----------------------------------------\n\nTITLE: Script Usage Example for opening Google Contacts\nDESCRIPTION: Example showing how to execute the open-google-contacts.ps1 script from PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-contacts.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-google-contacts\n```\n\n----------------------------------------\n\nTITLE: Executing Open Speed Test Script (PowerShell)\nDESCRIPTION: Provides a basic example demonstrating how to execute the open-speed-test.ps1 script from the PowerShell command line. It shows the command ./open-speed-test run from the script's directory. No specific arguments are used in this example.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-speed-test.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-speed-test\n```\n\n----------------------------------------\n\nTITLE: Executing open-start-page.ps1 in PowerShell\nDESCRIPTION: Provides an example command to execute the open-start-page.ps1 script from the PowerShell console. Running this command launches the script without any specific parameters, causing it to open the Startpage website in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-start-page.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-start-page\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of open-slash-dot.ps1 in PowerShell\nDESCRIPTION: This example shows how to execute the 'open-slash-dot.ps1' script from the PowerShell command line without specifying any additional parameters. No arguments are needed by default, and executing the script will open the slashdot.org website in the system's default web browser. The input is the relative script path, and there are no return values other than the browser launching; this example is intended for demonstration purposes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-slash-dot.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-slash-dot\n\n```\n\n----------------------------------------\n\nTITLE: Example Invocation of open-walmart-website.ps1 - PowerShell\nDESCRIPTION: This example demonstrates how to run the script 'open-walmart-website.ps1' directly from the PowerShell prompt. The command launches the Walmart website in the default web browser and, optionally, any supported common parameters may be added to modify behavior. The script does not require any input arguments unless customization through common parameters is desired.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-walmart-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-walmart-website\n\n```\n\n----------------------------------------\n\nTITLE: open-bit-bucket.ps1 Example - PowerShell\nDESCRIPTION: This is an example of how to execute the open-bit-bucket.ps1 script. It shows the command `./open-bit-bucket` being run from the PowerShell prompt.  The expected outcome is the Bitbucket website opening in the user's default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bit-bucket.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-bit-bucket\n```\n\n----------------------------------------\n\nTITLE: Executing the play-big-ben.ps1 script\nDESCRIPTION: This snippet demonstrates how to execute the play-big-ben.ps1 script in PowerShell. It shows the command to run the script and the expected output.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-big-ben.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-big-ben.ps1\n(listen and enjoy)\n```\n\n----------------------------------------\n\nTITLE: Opening FourSquare Website - PowerShell\nDESCRIPTION: This PowerShell snippet is an example of how to execute the `open-four-square-website.ps1` script. It demonstrates the basic command execution. No specific parameters are shown in the example; it assumes a direct call to the script, which launches the FourSquare website in the default web browser.  No dependencies besides PowerShell itself are required.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-four-square-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-four-square-website\n```\n\n----------------------------------------\n\nTITLE: Example Usage of open-cia-website.ps1\nDESCRIPTION: This example demonstrates how to execute the `open-cia-website.ps1` script. The expected outcome is that the default web browser will open and navigate to the CIA website. This assumes the script is located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-cia-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-cia-website\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters for Tesla Website Launcher\nDESCRIPTION: This shows the parameter syntax for the open-tesla-website.ps1 script. The script accepts only common PowerShell parameters and no specific parameters of its own.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-tesla-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nopen-tesla-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Usage Example of open-baidu.ps1 in PowerShell\nDESCRIPTION: Demonstrates how to execute the script to open the Baidu website in the default web browser. The example shows the simple command to run the script from the PowerShell prompt.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-baidu.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-baidu\n```\n\n----------------------------------------\n\nTITLE: Executing open-whats-app-website.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the `open-whats-app-website.ps1` script from a PowerShell prompt. Running this command will trigger the script to open the WhatsApp website in the system's default web browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-whats-app-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-whats-app-website\n```\n\n----------------------------------------\n\nTITLE: Example Usage of the Script in PowerShell Terminal\nDESCRIPTION: This code snippet shows how to run the show-barcelona-city.ps1 script from the PowerShell command line. By invoking './show-barcelona-city', the script executes and opens Barcelona city on Google Maps in the user's default browser. No additional configuration or arguments are needed. The only requirements are PowerShell and an active internet connection.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-barcelona-city.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-barcelona-city\n```\n\n----------------------------------------\n\nTITLE: Executing open-instagram PowerShell Script\nDESCRIPTION: This snippet demonstrates the execution of the 'open-instagram.ps1' script.  The command './open-instagram' launches the script.  It is assumed that the script is located in the current directory.  The common parameters such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable are also supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-instagram.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-instagram\n```\n\n----------------------------------------\n\nTITLE: Executing play-bee-sound.ps1 Script\nDESCRIPTION: This snippet executes the play-bee-sound.ps1 script.  It utilizes the & operator to call another PowerShell script with the path to an MP3 file as a parameter. The supporting script, play-mp3.ps1, is assumed to be in the same directory. The script then exits successfully.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-bee-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/bee.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: open-bit-bucket.ps1 Parameters - PowerShell\nDESCRIPTION: This section describes the parameters for the open-bit-bucket.ps1 script. It indicates that the script accepts common parameters such as Verbose, Debug, ErrorAction, and others, as defined by PowerShell's common parameter set. No specific parameters are defined in this part of the documentation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-bit-bucket.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-bit-bucket.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameter Information\nDESCRIPTION: This code snippet displays the parameters that the PowerShell script supports.  It shows how common parameters like Verbose, Debug, ErrorAction, etc., are available for use with the script. The specific parameters are used to modify the script's behavior, like providing more detailed output or controlling error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/hibernate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/hibernate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-twitter.ps1 Script (PowerShell)\nDESCRIPTION: This snippet shows the parameter signature for the `open-twitter.ps1` script. It indicates that the script accepts the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) but does not define any script-specific parameters. Executing the script path initiates the action.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-twitter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-twitter.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Supporting Common Parameters (PowerShell)\nDESCRIPTION: This section lists the Common Parameters supported by the script, which are standard PowerShell parameters controlling error handling, verbosity, output buffering, and variables. Their presence allows for consistent scripting practices.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-countries.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameters for show-british-pound-rate.ps1\nDESCRIPTION: This section illustrates the syntax for viewing the parameters of the 'show-british-pound-rate.ps1' script. It specifically highlights that the script supports the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) for controlling script execution behavior. No script-specific parameters are defined.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-british-pound-rate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-british-pound-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell script show-us-dollar-rate.ps1 with parameter documentation\nDESCRIPTION: This snippet defines the script's parameters, indicating support for common PowerShell parameters such as Verbose and Debug, enabling users to control script verbosity, error handling, and output buffering during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-us-dollar-rate.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-us-dollar-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for open-display-settings.ps1 Script (PowerShell)\nDESCRIPTION: This snippet outlines the parameters accepted by the open-display-settings.ps1 script. It primarily highlights the support for common PowerShell parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable, indicating standard script behavior and control options.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-display-settings.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-display-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Common Parameters\nDESCRIPTION: This snippet shows the common parameters supported by PowerShell scripts, including Verbose, Debug, ErrorAction, and others. These parameters allow for controlling the verbosity, debugging behavior, and error handling of the script during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-obs-studio.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Script Parameter Syntax - PowerShell\nDESCRIPTION: Shows the command-line syntax for the `open-dropbox-website.ps1` script. It indicates that the script accepts standard PowerShell common parameters, allowing for control over verbosity, error handling, and output buffering.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-dropbox-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-dropbox-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Viewing Script Parameters in PowerShell\nDESCRIPTION: This snippet displays the command signature for `open-fritz-box.ps1`, indicating that it accepts the standard PowerShell Common Parameters (like Verbose, Debug, ErrorAction, etc.) but has no script-specific custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-fritz-box.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-fritz-box.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Playing Melody with Beeps in PowerShell\nDESCRIPTION: This PowerShell script plays the Imperial March melody by making a series of calls to the `[System.Console]::Beep` method. Each call specifies a frequency (Hz) and duration (milliseconds) to produce a specific note. The script is wrapped in a try-catch block for basic error handling, exiting with status 0 on success or 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-imperial-march.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays the Imperial March (Star Wars)\n.DESCRIPTION\n\tThis PowerShell script plays the Imperial March used in the Star Wars film series.\n.EXAMPLE\n\tPS> ./play-imperial-march.ps1\n\t(listen and enjoy)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t[System.Console]::beep(440, 500)      \n\t[System.Console]::beep(440, 500)\n\t[System.Console]::beep(440, 500)       \n\t[System.Console]::beep(349, 350)       \n\t[System.Console]::beep(523, 150)       \n\t[System.Console]::beep(440, 500)       \n\t[System.Console]::beep(349, 350)       \n\t[System.Console]::beep(523, 150)       \n\t[System.Console]::beep(440, 1000)\n\t[System.Console]::beep(659, 500)       \n\t[System.Console]::beep(659, 500)       \n\t[System.Console]::beep(659, 500)       \n\t[System.Console]::beep(698, 350)       \n\t[System.Console]::beep(523, 150)       \n\t[System.Console]::beep(415, 500)       \n\t[System.Console]::beep(349, 350)       \n\t[System.Console]::beep(523, 150)       \n\t[System.Console]::beep(440, 1000)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using show-atlanta-city.ps1 PowerShell Script Parameters\nDESCRIPTION: Details the available parameters for the show-atlanta-city.ps1 script. The script supports common PowerShell parameters like Verbose, Debug, ErrorAction, and others.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-atlanta-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-atlanta-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for show-toronto-city.ps1 (PowerShell)\nDESCRIPTION: This code block outlines the parameters accepted by the `show-toronto-city.ps1` script. It primarily indicates support for the standard PowerShell Common Parameters (e.g., Verbose, Debug, ErrorAction), allowing users to control script execution behavior, although the script itself doesn't define custom parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-toronto-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-toronto-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Common Parameters in PowerShell Script\nDESCRIPTION: Specifies the common parameters accepted by open-outdoor-active-website.ps1 for enhanced control and diagnostics. These include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. This snippet, intended as documentation, outlines optional flags that can be used to control script behavior and output; inputs are the parameter flags and outputs are modified script diagnostics or handling as per user choice.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-outdoor-active-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-outdoor-active-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Using speak-thai.ps1 PowerShell Script\nDESCRIPTION: Example showing how to use the script to speak Thai text. The script is called with the Thai greeting 'สวัสดี' as a parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-thai.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./speak-thai.ps1 \"สวัสดี\"\n```\n\n----------------------------------------\n\nTITLE: Script Syntax with Common Parameters - PowerShell\nDESCRIPTION: This snippet displays the command syntax for invoking the `open-holiday-check-website.ps1` script. It indicates that the script accepts PowerShell common parameters, allowing users to control debugging, error handling, and verbose output. The only dependency is a PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-holiday-check-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-holiday-check-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Supported Parameters\nDESCRIPTION: This snippet lists the standard PowerShell CommonParameters that are supported by the cd-scripts.ps1 script. These parameters provide standard ways to handle errors, debugging, verbosity, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-scripts.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/cd-scripts.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing show-cairo-city.ps1 PowerShell script\nDESCRIPTION: This example demonstrates how to execute the show-cairo-city.ps1 PowerShell script. No input is needed; the script directly opens Google Maps in a web browser with Cairo displayed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-cairo-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-cairo-city\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Usage and Parameters Documentation\nDESCRIPTION: Describes the usage of the play-frog-sound.ps1 script including supported common parameters such as Verbose, Debug, ErrorAction, and more. The parameters enable standard PowerShell command-line modifier functionality. An example execution command is provided to illustrate basic usage without additional parameters. There are no additional input parameters specific to this script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-frog-sound.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-frog-sound.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching Google Maps for Chicago - PowerShell\nDESCRIPTION: This PowerShell snippet demonstrates how to use the script to open Google Maps and center it on Chicago.  It uses the default common parameters available to all PowerShell scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-chicago-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-chicago-city\n```\n\n----------------------------------------\n\nTITLE: Script Execution Example\nDESCRIPTION: This snippet shows an example of how to execute the `close-outlook.ps1` PowerShell script. It demonstrates the command to run the script from the PowerShell console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-outlook.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./close-outlook.ps1\n```\n\n----------------------------------------\n\nTITLE: Using the Turn Volume On Script in PowerShell\nDESCRIPTION: Example showing how to run the turn-volume-on.ps1 script from the PowerShell command line.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/turn-volume-on.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> .\\turn-volume-on\n```\n\n----------------------------------------\n\nTITLE: Displaying Parameters for enable-crash-dumps.ps1 (PowerShell)\nDESCRIPTION: Shows the command syntax for the enable-crash-dumps.ps1 script. It indicates that the script accepts standard PowerShell common parameters (like Verbose, Debug, ErrorAction) for controlling execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enable-crash-dumps.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/enable-crash-dumps.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Power Schemes with PowerShell\nDESCRIPTION: This script executes the Windows powercfg command with the /list parameter to display all configured power schemes on the system. It supports PowerShell common parameters like Verbose and Debug, allowing integration in larger scripts or command pipelines. The script performs minimal processing and exits with a success status code upon completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-power-schemes.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npowercfg /list\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Viewing Parameters for roll-a-dice.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command-line syntax for the 'roll-a-dice.ps1' script, including the standard PowerShell common parameters it supports (Verbose, Debug, ErrorAction, etc.). It demonstrates how the script is invoked and lists the available common controls.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/roll-a-dice.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/roll-a-dice.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters for eBay Website Launcher in PowerShell\nDESCRIPTION: This snippet demonstrates the script signature for open-ebay-website.ps1 and details the common parameters it supports, such as Verbose and Debug, which are standard in PowerShell scripts. No additional parameters are necessary for operation. These parameters allow users to control logging, error handling, and variable output when executing the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ebay-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-ebay-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Documenting Common Parameters in PowerShell\nDESCRIPTION: This block explicitly lists the common parameters supported by the PowerShell script cd-temp.ps1. It serves as documentation indicating that standard PowerShell parameters like Verbose, Debug, and ErrorAction can be used with this script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-temp.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n\n```\n\n----------------------------------------\n\nTITLE: Documenting PowerShell Common Parameters\nDESCRIPTION: This snippet documents the parameters supported by the `thank-you.ps1` script. It specifically mentions that the script accepts all standard PowerShell Common Parameters, listing them out for clarity.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/thank-you.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nthank-you.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing Parameters for close-edge-browser.ps1 (PowerShell)\nDESCRIPTION: This snippet outlines the parameters accepted by the `close-edge-browser.ps1` script. It specifically notes that the script supports the standard PowerShell Common Parameters (Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable), allowing control over script execution behavior and output handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-edge-browser.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nclose-edge-browser.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Definition - PowerShell\nDESCRIPTION: This snippet defines the common parameters supported by the `show-cape-town-city.ps1` script. It lists the common parameters like Verbose, Debug, ErrorAction, ErrorVariable, and others, indicating that the script adheres to standard PowerShell parameter conventions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-cape-town-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-cape-town-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Parameter Declaration for open-ethernet-settings.ps1 in PowerShell\nDESCRIPTION: This snippet details the accepted parameters when invoking open-ethernet-settings.ps1. The script uses PowerShell's [<CommonParameters>] construct to support standard flags such as Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. These parameters are optional and provide standardized control of execution behavior, error handling, and output formatting. There are no script-specific arguments, and the snippet assumes the user is familiar with PowerShell's parameter conventions.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ethernet-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-ethernet-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for play-super-mario.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command-line syntax for running the `play-super-mario.ps1` script. It indicates that the script accepts the standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., for controlling script execution behavior.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-super-mario.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/play-super-mario.ps1 [<CommonParameters>]\n```\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters - PowerShell\nDESCRIPTION: This code snippet defines the parameters accepted by the `speak-hindi.ps1` script. It specifies the optional `-text` parameter for providing the Hindi string to be spoken and indicates support for standard PowerShell common parameters. This defines the command-line interface for the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-hindi.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-hindi.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Hindi text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters PowerShell\nDESCRIPTION: This snippet shows the syntax for running the show-tether-rate.ps1 script. It explicitly indicates support for standard PowerShell common parameters, allowing users to control verbose output, debugging, error handling, and other execution aspects.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-tether-rate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-tether-rate.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Adding GitLab repository and installing GitLab EE package\nDESCRIPTION: This snippet fetches the GitLab package repository setup script via curl and pipes it directly into sudo bash, which executes the script to add the GitLab Enterprise Edition repository to the system's package manager. This facilitates the subsequent installation or update of GitLab EE packages using the system's package tools.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-gitlab.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n& curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Playing a Cat Sound (`play-cat-sound.ps1`)\nDESCRIPTION: This PowerShell script plays a cat sound by invoking an auxiliary script (`play-mp3.ps1`) with the path to the cat MP3 file. It includes a synopsis, description, example usage, and author notes. The script expects to run in an environment where `play-mp3.ps1` exists and can handle MP3 playback.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-cat-sound.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a cat sound\n.DESCRIPTION\n\tThis PowerShell script plays a cat sound.\n.EXAMPLE\n\tPS> ./play-cat-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/cat.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Metadata and Usage Documentation\nDESCRIPTION: Provides an overview of the script purpose, parameters, example usage, author, license, and related links. Serves as inline documentation to help users understand script intent and usage.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/reboot-fritzbox.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tReboots the FRITZ!Box device\n.DESCRIPTION\n\tThis PowerShell script reboots the FRITZ!Box device\n.PARAMETER Username\n\tSpecifies the user name\n.PARAMETER Password\n\tSpecifies the password\n.EXAMPLE\n\tPS> ./reboot-fritzbox\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n```\n\n----------------------------------------\n\nTITLE: Executing script example - PowerShell\nDESCRIPTION: This snippet provides a basic example of how to run the `speak-time.ps1` script from a PowerShell console. It demonstrates invoking the script directly in the current directory using `./speak-time` to trigger the text-to-speech output of the current time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-time.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS>./speak-time\n```\n\n----------------------------------------\n\nTITLE: Implementing MAC Address Validation in PowerShell\nDESCRIPTION: Provides the full source code for the `check-mac-address.ps1` script. It defines an optional `MAC` parameter, includes comment-based help, implements an `IsMACAddressValid` function using regex to check formats (colon-separated, hyphen-separated, or no separator), prompts for input if the MAC parameter is empty, outputs validation status, and includes basic try/catch error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-mac-address.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the given MAC address for validity\n.DESCRIPTION\n\tThis PowerShell script checks the given MAC address for validity\n\tSupported MAC address formats are: 00:00:00:00:00:00 or 00-00-00-00-00-00 or 000000000000.\n.PARAMETER MAC\n\tSpecifies the MAC address to check\n.EXAMPLE\n\tPS> ./check-mac-address 11:22:33:44:55:66\n\t✅ MAC address 11:22:33:44:55:66 is valid\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$MAC = \"\")\n\nfunction IsMACAddressValid { param([string]$mac)\n\t$RegEx = \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})|([0-9A-Fa-f]{2}){6}$\"\n\tif ($mac -match $RegEx) {\n\t\treturn $true\n\t} else {\n\t\treturn $false\n\t}\n}\n\ntry {\n\tif ($MAC -eq \"\" ) {\n\t\t$MAC = read-host \"Enter MAC address to validate\"\n\t}\n\tif (IsMACAddressValid $MAC) {\n\t\t\"✅ MAC address $MAC is valid\"\n\t\texit 0 # success\n\t} else {\n\t\twrite-warning \"Invalid MAC address: $MAC\"\n\t\texit 1\n\t}\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: ListEarthquakes function definition\nDESCRIPTION: This code defines the `ListEarthquakes` function which retrieves earthquake data from the USGS API, converts the CSV data to PowerShell objects, and formats the output. It uses `Invoke-WebRequest` to fetch the data, `ConvertFrom-CSV` to parse the CSV response, and `New-Object` to create custom PSObjects for each earthquake to ensure consistent formatting. The `Write-Progress` cmdlets provide feedback to the user during the data loading process.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-earthquakes.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction ListEarthquakes { \n\tWrite-Progress \"Loading data from earthquake.usgs.gov...\"\n\t$quakes = (Invoke-WebRequest -URI \"https://earthquake.usgs.gov/fdsnws/event/1/query?format=$Format&minmagnitude=$minMagnitude&orderby=$OrderBy\" -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-CSV\n\tWrite-Progress -completed \"done.\"\n\n\tforeach($quake in $quakes) {\n\t\t[int]$depth = $quake.depth\n\t\tNew-Object PSObject -Property @{ MAG=$quake.mag; DEPTH=\"$depth km\"; LOCATION=$quake.place; 'TIME UTC'=$quake.time }\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Git Extensions Application in PowerShell\nDESCRIPTION: This PowerShell script launches the Git Extensions application. It defines a function, TryToExec, to attempt to execute the application. The script searches for the GitExtensions.exe in two typical installation directories. If found, it attempts to launch it.  It uses the start-process cmdlet with the working directory set appropriately. Requires PowerShell runtime. The script expects the Git Extensions executable to exist in one of the specified paths; otherwise, it displays an error. It will also execute a fallback script 'speak-english.ps1' from the same directory if the Git Extensions application cannot be found.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-git-extensions.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches Git Extensions \n.DESCRIPTION\n\tThis PowerShell script launches the Git Extensions application.\n.EXAMPLE\n\tPS> ./open-git-extensions\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TryToExec { param($Folder, $Binary)\n\tif (test-path \"$Folder/$Binary\" -pathType leaf) {\n\t\tstart-process \"$Folder/$Binary\" -WorkingDirectory \"$Folder\"\n\t\texit 0 # success\n\t}\n}\n\ntry {\n\tTryToExec \"C:\\Program Files (x86)\\GitExtensions\" \"GitExtensions.exe\"\n\tTryToExec \"C:\\Program Files\\GitExtensions\" \"GitExtensions.exe\"\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry, can't find Git Extensions.\"\n\texit 1\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Displaying Weather Data (PowerShell)\nDESCRIPTION: This snippet retrieves weather data from the wttr.in API using `Invoke-WebRequest`, converts the JSON response to a PowerShell object, and then extracts relevant information such as temperature, precipitation, wind speed, and cloud cover. It then formats and displays the data in a readable format, updating at the specified interval. An error message is displayed if retrieving weather data fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/ping-weather.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t$Weather = (Invoke-WebRequest -URI http://wttr.in/${Location}?format=j1 -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n        $Area = $Weather.nearest_area.areaName.value\n        $Region = $Weather.nearest_area.region.value\n\t\"Current weather conditions at $Area ($Region), updating every $($UpdateInterval / 60) min...\"\n\tdo {\n\t\t\n\t\t$Description = $Weather.current_condition.WeatherDesc.value\n\t\t$TempC = $Weather.current_condition.temp_C\n\t\t$PrecipMM = $Weather.current_condition.precipMM\n\t\t$WindSpeed = $Weather.current_condition.windspeedKmph\n\t\t$WindDir = $Weather.current_condition.winddir16Point\n\t\t$Clouds = $Weather.current_condition.cloudcover\n\t\t$Humidity = $Weather.current_condition.humidity\n\t\t$UV = $Weather.current_condition.uvIndex\n\t\t$Visib = $Weather.current_condition.visibility \n\t\t$Pressure = $Weather.current_condition.pressure\n\t\t$Time = $Weather.current_condition.observation_time\n\n\t\t\"🕗$Time UTC  🌡$($TempC)°C  ☂️$($PrecipMM)mm  💨$($WindSpeed)km/h from $WindDir  ☁️$($Clouds)%  💧$($Humidity)%  ☀️UV$UV  👀$($Visib)km  $($Pressure)hPa  $Description\"\n\t\tStart-Sleep -s $UpdateInterval\n\t\t$Weather = (Invoke-WebRequest -URI http://wttr.in/${Location}?format=j1 -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\t} while ($true)\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Install Windows Terminal using winget (PowerShell)\nDESCRIPTION: This PowerShell script installs Windows Terminal from the Microsoft Store using the `winget` command-line package manager. It accepts package and source agreements automatically, and includes error handling to check if the installation was successful. The script returns an exit code of 0 on success and 1 on failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-windows-terminal.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Windows Terminal\n.DESCRIPTION\n\tThis PowerShell script installs Windows Terminal from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-windows-terminal.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Windows Terminal, please wait...\"\n\n\t& winget install --id Microsoft.WindowsTerminal --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Windows Terminal installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to Calculate and List PI Digits\nDESCRIPTION: The script defines a function 'List-Pi' which performs complex big integer calculations to iteratively generate digits of PI. It accepts a parameter for the number of digits to list (defaulting to 1000), outputs each digit in sequence, and handles potential errors during execution. Dependencies include the .NET BigInteger type and PowerShell core features. It outputs the digits directly to the console without returning values.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-pi.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists PI\n.DESCRIPTION\n\tThis PowerShell script calculates and lists the digits of the mathematical constant PI.\n.PARAMETER digits\n\tSpecifies the number of digits to list (1000 by default)\n.EXAMPLE\n\tPS> ./list-pi.ps1\n\t3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([int]$Digits = 1000)\n\nfunction List-Pi ( $Digits ) {\n\t$Big = [bigint[]](0..10)\n \n\t$ndigits = 0\n \n  \t$q = $t = $k = $Big[1]\n  \t$r =           $Big[0]\n\t$l = $n =      $Big[3]\n\n\t# calculate first digit\n\t$nr = ( $Big[2] * $q + $r ) * $l\n\t$nn = ( $q * ( $Big[7] * $k + $Big[2] ) + $r * $l ) / ( $t * $l )\n\t$q *= $k\n\t$t *= $l\n\t$l += $Big[2]\n\t$k = $k + $Big[1]\n\t$n = $nn\n\t$r = $nr\n\n \tWrite-Host \"$($n).\" -noNewline\n \t$ndigits++\n\n \t$nr = $Big[10] * ( $r - $n * $t )\n \t$n = ( ( $Big[10] * ( 3 * $q + $r ) ) / $t ) - 10 * $n\n \t$q *= $Big[10]\n \t$r = $nr\n\n \twhile ($ndigits -lt $Digits) {\n \t\tif ($Big[4] * $q + $r - $t -lt $n * $t) {\n \t\t\tWrite-Host \"$n\" -noNewline\n \t\t\t$ndigits++\n \t\t\t$nr = $Big[10] * ( $r - $n * $t )\n \t\t\t$n = ( ( $Big[10] * ( 3 * $q + $r ) ) / $t ) - 10 * $n\n \t\t\t$q *= $Big[10]\n \t\t\t$r = $nr\n \t\t} else {\n \t\t\t$nr = ( $Big[2] * $q + $r ) * $l\n \t\t\t$nn = ( $q * ( $Big[7] * $k + $Big[2] ) + $r * $l ) / ( $t * $l )\n \t\t\t$q *= $k\n \t\t\t$t *= $l\n \t\t\t$l += $Big[2]\n \t\t\t$k = $k + $Big[1]\n \t\t\t$n = $nn\n \t\t\t$r = $nr\n \t\t}\n       }\nWrite-Host \"...  ($Digits digits)\"\n}\n\ntry {\n\tList-Pi $Digits\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script to List mDNS UDP Endpoints and Associated Processes\nDESCRIPTION: This PowerShell script retrieves UDP endpoints listening on port 5353, which is standard for mDNS, and displays local address, port, process ID, and process name for each endpoint. It supports common PowerShell parameters like Verbose and Debug for enhanced control. The script combines networking cmdlets with process querying to provide comprehensive endpoint insights.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-mDNS.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nGet-NetUDPEndpoint -localPort 5353 | Select-Object LocalAddress,LocalPort,OwningProcess,@{ Name=\"Process\"; Expression={((Get-Process -Id $_.OwningProcess).Name )} }\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Executing the say-time.ps1 Script in PowerShell\nDESCRIPTION: This example demonstrates how to run the say-time.ps1 script directly from a PowerShell prompt. Executing the script causes the system's text-to-speech engine to audibly announce the current time. The output shown represents the spoken phrase.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/say-time.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./say-time\n(It's 2:23 PM)\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Navigating to Git Repositories Folder\nDESCRIPTION: This PowerShell script sets the working directory to the user's Git repositories folder by checking various standard locations. It supports an optional subpath parameter (not included in the code snippet) and handles errors if no directory is found. Dependencies include PowerShell's Test-Path and Set-Location cmdlets. The script outputs the selected directory path or an error message. It is useful for automating navigation to the repositories folder across different systems and configurations.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-repos.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to the Git repos folder\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to the Git repositories folder.\n.PARAMETER subpath\n\tSpecifies an additional relative subpath (optional)\n.EXAMPLE\n\tPS> ./cd-repos.ps1\n\t📂C:\\Repos\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif (Test-Path \"~\\Repos\" -pathType Container) {         \t# try short name in home dir\n\t\t$path = \"~\\Repos\"\n\t} elseif (Test-Path \"~\\repos\" -pathType Container) {\n\t\t$path = \"~\\repos\"\n\t} elseif (Test-Path \"~\\Repositories\" -pathType Container) { \t# try long name\n\t\t$path = \"~\\Repositories\"\n\t} elseif (Test-Path \"~\\repositories\" -pathType Container) {\n\t\t$path = \"~\\repositories\"\n\t} elseif (Test-Path \"/Repos\" -pathType Container) { \t# try short name in root dir\n\t\t$path = \"/Repos\"\n\t} elseif (Test-Path \"/repos\" -pathType Container) {\n\t\t$path = \"/repos\"\n\t} elseif (Test-Path \"/Repositories\" -pathType Container) { \t# try long name\n\t\t$path = \"/Repositories\"\n\t} elseif (Test-Path \"/repositories\" -pathType Container) {\n\t\t$path = \"/repositories\"\n\t} elseif (Test-Path \"~\\source\\repos\" -pathType Container) { \t# try Visual Studio default\n\t\t$path = \"~\\source\\repos\"\n\t} else {\n\t\tthrow \"No Git repositories folder in your home directory or in the root folder yet\"\n\t}\n\t$path = Resolve-Path $path\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell script parameters example\nDESCRIPTION: This code shows the common parameters supported by the PowerShell script. These parameters offer ways to control the script's behavior, error reporting, and output. Common parameters like Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable provide standard options for managing script execution and data flow.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-motherboard.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./list-motherboard.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Displaying Script Parameters in PowerShell\nDESCRIPTION: Shows the command-line syntax for invoking the `install-knot-resolver.ps1` script. It indicates that the script accepts standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., but defines no script-specific parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-knot-resolver.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/install-knot-resolver.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Common Parameters for install-octoprint.ps1 PowerShell Script\nDESCRIPTION: Defines the common parameters supported by the install-octoprint.ps1 script, including options for verbose output, debugging, and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-octoprint.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Opening Windows USB Settings\nDESCRIPTION: A PowerShell script named 'open-usb-settings.ps1' which launches the Windows USB settings application upon execution. It supports common PowerShell parameters such as Verbose, Debug, and ErrorAction for improved script control. The script is intended for users who want quick access to USB settings via PowerShell commands.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-usb-settings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n## open-usb-settings.ps1 - Opens Windows USB settings\n\nThis script launches the Windows USB settings application.\n\n## Parameters\n```powershell\nopen-usb-settings.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n## Example\n```powershell\nPS> ./open-usb-settings\n\n```\n\n## Notes\nAuthor: Markus Fleschutz · License: CC0\n\n## Related Links\nhttps://github.com/fleschutz/PowerShell\n\n*Generated by convert-ps2md.ps1 using the comment-based help of open-usb-settings.ps1*\n```\n\n----------------------------------------\n\nTITLE: Show Apple Manual Example - PowerShell\nDESCRIPTION: Provides an example of how to execute the show-apple-manual.ps1 script in the PowerShell console.  It shows the basic command to run the script from the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-apple-manual.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-apple-manual\n```\n\n----------------------------------------\n\nTITLE: Scanning and Filtering Unused Files in Directories with PowerShell\nDESCRIPTION: This main snippet implements directory tree scanning, file access time evaluation, and result presentation. It starts by initializing a stopwatch for elapsed time calculation, resolves the provided path, shows progress with Write-Progress, and computes a cutoff date by subtracting the days threshold from the current date. Using Get-ChildItem -Recurse and Where-Object, it filters files whose LastAccessTime is older than the cutoff, counts them, and prints their full paths alongside a summary line. Script is robust to exceptions, providing clear error messages and exit codes. Requires standard PowerShell modules and permission to enumerate target directories.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-unused-files.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t$path = Resolve-Path \"$path\"\n\tWrite-Progress \"Scanning $path for unused files...\"\n\n\t$cutOffDate = (Get-Date).AddDays(-$Days)\n \t[int]$count = 0\n\tGet-ChildItem -path $path -recurse | Where-Object {$_.LastAccessTime -le $cutOffDate} | Foreach-Object {\n\t\t\"📄$($_.FullName)\"\n                $count++\n        }\n\n\tWrite-Progress -completed \" \"\n        [int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n        \"✅ Found $count unused files (no access for $days days) within 📂$path in $elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Twitter Uninstallation Script with Parameters in PowerShell\nDESCRIPTION: Shows how to execute the uninstall-twitter.ps1 script with its supported common parameters. The script supports standard PowerShell parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-twitter.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./uninstall-twitter.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Launching White House website with PowerShell\nDESCRIPTION: This script opens the White House website in the default web browser using PowerShell. It includes parameter information, an example of usage, and author/license details.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-white-house.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/home/markus/Repos/PowerShell/Scripts/open-white-house.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Installing Discord via PowerShell Script\nDESCRIPTION: This PowerShell script installs Discord from the Microsoft Store by invoking the winget package manager. It requires winget to be installed and accessible on the system. The script outputs informative messages about the installation status, uses error handling to catch failures from the winget command, and returns an appropriate exit code (0 for success, 1 for failure). It supports PowerShell common parameters to facilitate debugging and output customization.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-discord.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Discord\n.DESCRIPTION\n\tThis PowerShell script installs Discord from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-discord.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Discord, please wait...\"\n\n\t& winget install \"Discord\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Discord installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using Speak-Danish Script\nDESCRIPTION: This is an example demonstrating how to invoke the speak-danish.ps1 script from the PowerShell console. It passes the Danish word \"Hej\" as the text to be spoken by the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-danish.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-danish.ps1 Hej\n```\n\n----------------------------------------\n\nTITLE: Get Power Status and Print Result\nDESCRIPTION: This PowerShell script queries and displays the power status. It checks if the system is running on Linux or Windows. For Windows, it uses System.Windows.Forms to retrieve battery information. It outputs a formatted string indicating the battery status, including percentage, remaining time, and power scheme. The script exits with code 0 on success and 1 on error.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-power.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the power status\n.DESCRIPTION\n\tThis PowerShell script queries the power status and prints it.\n.EXAMPLE\n\tPS> ./check-power.ps1\n\t⚠️ Battery 9% only with 54min remaining (power scheme is 'HP Optimized') \n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux) {\n\t\t$reply = \"✅ AC powered\" # TODO, just guessing :-)\n\t} else {\n\t\tAdd-Type -Assembly System.Windows.Forms\n\t\t$details = [System.Windows.Forms.SystemInformation]::PowerStatus\n\t\t[int]$percent = 100 * $details.BatteryLifePercent\n\t\t[int]$remaining = $details.BatteryLifeRemaining / 60\n\t\t$powerScheme = (powercfg /getactivescheme)\n\t\t$powerScheme = $powerScheme -Replace \"^(.*)  \\(\",\"\"\n\t\t$powerScheme = $powerScheme -Replace \"\\)$\",\"\"\n\t\tif ($details.PowerLineStatus -eq \"Online\") {\n\t\t\tif ($details.BatteryChargeStatus -eq \"NoSystemBattery\") {\n\t\t\t\t$reply = \"✅ AC powered\"\n\t\t\t} elseif ($percent -ge 95) {\n\t\t\t\t$reply = \"✅ Battery full ($percent%, power scheme is '$powerScheme')\"\n\t\t\t} else {\n\t\t\t\t$reply = \"✅ Battery charging ($percent%, power scheme is '$powerScheme')\"\n\t\t\t}\n\t\t} else { # must be offline\n\t\t\tif (($remaining -eq 0) -and ($percent -ge 60)) {\n\t\t\t\t$reply = \"✅ Battery $percent% full (power scheme is '$powerScheme')\"\n\t\t\t} elseif ($remaining -eq 0) {\n\t\t\t\t$reply = \"✅ Battery at $percent% (power scheme is '$powerScheme')\"\n\t\t\t} elseif ($remaining -le 5) {\n\t\t\t\t$reply = \"⚠️ Battery LOW ($percent%, $($remaining)min remaining, power scheme is '$powerScheme')\"\n\t\t\t} elseif ($remaining -le 30) {\n\t\t\t\t$reply = \"⚠️ Battery low ($percent%, $($remaining)min remaining, power scheme is '$powerScheme')\"\n\t\t\t} elseif ($percent -lt 10) {\n\t\t\t\t$reply = \"⚠️ Battery $percent% only with $($remaining)min remaining (power scheme is '$powerScheme') \"\n\t\t\t} elseif ($percent -ge 90) {\n\t\t\t\t$reply = \"✅ Battery full ($percent%, $($remaining)min remaining, power scheme is '$powerScheme')\"\n\t\t\t} else {\n\t\t\t\t$reply = \"✅ Battery $percent% with $($remaining)min remaining (power scheme is '$powerScheme') \"\n\t\t\t}\n\t\t}\n\t}\n\tWrite-Host $reply\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Horizontal Console Bar Charts with PowerShell\nDESCRIPTION: This PowerShell script defines a function WriteChartLine to display a horizontal bar chart in the console using Unicode block elements. It takes a label, a value, and a maximum reference, scaling the bar appropriately, and formats the output with percentage or fractional indication depending on the value of Max. The script includes a demonstration of chart generation for bowling results and relies only on standard PowerShell cmdlets, requiring no external dependencies. Expected inputs are string and float values for the label and data; the bar resolution is set to 40 units, and the display adjusts for values below a whole-unit by using fractional Unicode blocks.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/write-chart.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tWrites a chart\n.DESCRIPTION\n\tThis PowerShell script writes an horizontal chart to the console.\n.EXAMPLE\n\tPS> ./write-chart.ps1\n\t\n\tBOWLING RESULTS 2024\n\t████████████████▏ 40.5% Joe\n\t████████████▎ 30.9% Tom\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction WriteChartLine { param([string]$Text, [float]$Value, [float]$Max)\n\t$Num = ($Value * 40.0) / $Max\n\twhile ($Num -ge 1.0) {\n\t\tWrite-Host -noNewLine \"█\"\n\t\t$Num -= 1.0\n\t}\n\tif ($Num -ge 0.875) {\n\t\tWrite-Host -noNewLine \"▉\"\n\t} elseif ($Num -ge 0.75) {\n\t\tWrite-Host -noNewLine \"▊\"\n\t} elseif ($Num -ge 0.625) {\n\t\tWrite-Host -noNewLine \"▋\"\n\t} elseif ($Num -ge 0.5) {\n\t\tWrite-Host -noNewLine \"▌\"\n\t} elseif ($Num -ge 0.375) {\n\t\tWrite-Host -noNewLine \"▍\"\n\t} elseif ($Num -ge 0.25) {\n\t\tWrite-Host -noNewLine \"▎\"\n\t} elseif ($Num -ge 0.125) {\n\t\tWrite-Host -noNewLine \"▏\"\n\t}\n\tif ($Max -eq 100.0) {\n\t\tWrite-Host \" $($Value)% $Text\"\n\t} else {\n\t\tWrite-Host \" $Value / $Max $Text\"\n\t}\n}\n\nWrite-Host \"`nBOWLING RESULTS 2024\" -foregroundColor green\nWriteChartLine \"Joe\" 40.5 100.0\nWriteChartLine \"Tom\" 30.9 100.0\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Installing PowerShell Modules\nDESCRIPTION: These commands install PowerShell modules from the PowerShell Gallery. The `Install-Module` cmdlet is used with parameters to specify the module name, scope (CurrentUser), and version. The `-Force` parameter bypasses confirmation prompts. Installation can be done with admin rights or for the current user only.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_10\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module -Name NameIT -Scope CurrentUser -Force       # Install a module to your personal directory (non-admin)\nInstall-Module -Name NameIT -Force                          # Install a module to your personal directory (admin / root)\nInstall-Module -Name NameIT -RequiredVersion 1.9.0          # Install a specific version of a module\n```\n\n----------------------------------------\n\nTITLE: Playing MP3 Sound File: PowerShell\nDESCRIPTION: This snippet contains the core logic of the `play-vulture-sound.ps1` script. It invokes another script, `play-mp3.ps1`, passing it the full path to the `vulture.mp3` sound file located in a relative directory. The script then exits with a success code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-vulture-sound.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPlays a vulture sound\n.DESCRIPTION\n\tThis PowerShell script plays a vulture sound.\n.EXAMPLE\n\tPS> ./play-vulture-sound\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/play-mp3.ps1\" \"$PSScriptRoot/../data/sounds/vulture.mp3\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters in PowerShell Script - PowerShell\nDESCRIPTION: This snippet defines how to invoke the 'check-my-balance.ps1' script and lists the supported common PowerShell parameters such as Verbose, Debug, ErrorAction, WarningAction, and others. It illustrates the flexible usage of command-line parameters for script execution, but does not specify custom parameters unique to this script. Users should provide any relevant common parameters as needed to control verbosity, error handling, and output behavior. The snippet assumes a standard PowerShell environment with no additional dependencies beyond base PowerShell.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-my-balance.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncheck-my-balance.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing Network Check Helper Scripts in check-network.ps1 (PowerShell)\nDESCRIPTION: This is the core implementation of the check-network.ps1 script. It begins by printing a green network header. Its primary function is to execute a series of other scripts located in the same directory (`$PSScriptRoot`) using the call operator (`&`) to perform specific network checks such as firewall status, IP addresses, network shares, DNS, VPN, and SSH keys. The script exits with a success code (0) upon completion.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-network.md#_snippet_2\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks the network\n.DESCRIPTION\n\tThis PowerShell script queries the network details of the local computer and prints it.\n.EXAMPLE\n\tPS> ./check-network.ps1\n\n\t   === N E T W O R K ===\n\t✅ Firewall enabled\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nWrite-Host \"`n   === N E T W O R K ===\" -foregroundColor green\n& \"$PSScriptRoot/check-firewall\"\n& \"$PSScriptRoot/list-local-ip.ps1\"\n& \"$PSScriptRoot/ping-local-devices.ps1\"\n& \"$PSScriptRoot/list-network-shares.ps1\"\n& \"$PSScriptRoot/list-internet-ip.ps1\"\n& \"$PSScriptRoot/ping-internet.ps1\"\n& \"$PSScriptRoot/check-dns.ps1\"\n& \"$PSScriptRoot/check-vpn.ps1\"\n& \"$PSScriptRoot/list-ssh-key.ps1\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Describing Parameters for Firewall Script in PowerShell\nDESCRIPTION: This snippet presents the parameter block and usage syntax for the add-firewall-rules.ps1 script. It explains available parameters such as PathToExecutables (string, specifying the directory location), Direction (string, either 'Inbound' or 'Outbound'), and FirewallProfile (array, e.g., 'Domain', 'Private', 'Public') with their defaults. Dependencies: PowerShell, administrator rights. Inputs are parameter flags; output is the enabling of firewall rules for found executables.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/add-firewall-rules.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/add-firewall-rules.ps1 [[-PathToExecutables] <String>] [[-Direction] <String>] [[-FirewallProfile] <Array>] [<CommonParameters>]\n\n-PathToExecutables <String>\n    Specifies the path to the executables.\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-Direction <String>\n    Specifies the direction for the firewall rule. Can be 'Inbound' or 'Outbound'. Default is 'Inbound'.\n    \n    Required?                    false\n    Position?                    2\n    Default value                Inbound\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n-FirewallProfile <Array>\n    \n    Required?                    false\n    Position?                    3\n    Default value                @(\"Domain\", \"Private\")\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Main Script Logic in PowerShell\nDESCRIPTION: This section contains the main logic of the check-cpu.ps1 script. It queries CPU status, determines architecture, retrieves CPU name and other details (speed, socket) using WMI on Windows. On Linux, it uses placeholders for certain values. It calculates CPU temperature, displays a status message based on temperature, and handles potential errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-cpu.md#_snippet_3\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\tWrite-Progress \"Querying CPU status...\"\n\t$status = \"✅\"\n\t$arch = GetCPUArchitecture\n\tif ($IsLinux) {\n\t\t$cpuName = \"$arch CPU\"\n\t\t$arch = \"\"\n\t\t$deviceID = \"\"\n\t\t$speed = \"\"\n\t\t$socket = \"\"\n\t} else {\n\t\t$details = Get-WmiObject -Class Win32_Processor\n\t\t$cpuName = $details.Name.trim()\n\t\t$arch = \"$arch, \"\n\t\t$deviceID = \", $($details.DeviceID)\"\n\t\t$speed = \", $($details.MaxClockSpeed)MHz\"\n\t\t$socket = \", $($details.SocketDesignation) socket\"\n\t}\n\t$cores = [System.Environment]::ProcessorCount\n\t$celsius = GetCPUTemperature\n\tif ($celsius -eq 99999.9) {\n\t\t$temp = \"\"\n\t} elseif ($celsius -gt 80) {\n\t\t$temp = \", $($celsius)°C TOO HOT\"\n\t\t$status = \"⚠️\"\n\t} elseif ($celsius -gt 50) {\n\t\t$temp = \", $($celsius)°C HOT\"\n\t\t$status = \"⚠️\"\n\t} elseif ($celsius -lt 0) {\n\t\t$temp = \", $($celsius)°C TOO COLD\"\n\t\t$status = \"⚠️\"\n\t} else {\n\t\t$temp = \", $($celsius)°C\"\n\t} \n\n\tWrite-Progress -completed \"Done.\"\n\tWrite-Host \"$status $cpuName ($($arch)$cores cores$($temp)$($deviceID)$($speed)$($socket))\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Example Execution\nDESCRIPTION: This example demonstrates how to execute the `open-pixabay-website.ps1` script from the PowerShell prompt. No specific parameters are passed in this scenario, relying on the script's default behavior to launch the website. The execution requires that the script file is present and accessible.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pixabay-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-pixabay-website\n```\n\n----------------------------------------\n\nTITLE: Example Usage of PowerShell Script\nDESCRIPTION: This is an example showing how to execute the `open-background-settings.ps1` script from the PowerShell prompt. The expected outcome is the opening of the Windows background settings window.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-background-settings.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-background-settings\n```\n\n----------------------------------------\n\nTITLE: Uninstalling One Calendar Using PowerShell\nDESCRIPTION: This PowerShell script uninstalls the One Calendar application via the winget package manager. It uses a try-catch block for error handling, measures the duration of the uninstallation, and outputs informative messages about the process. The script supports all standard PowerShell common parameters, allowing for verbose, debug, and error control operations. It requires winget to be installed and accessible in the system environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-one-calendar.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls One Calendar\n.DESCRIPTION\n\tThis PowerShell script uninstalls One Calendar from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-one-calendar.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"⏳ Uninstalling One Calendar ...\"\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t& winget uninstall \"One Calendar\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall One Calendar, is it installed?\" }\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✔️ Removal of One Calendar tool $Elapsed sec\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Running Maintenance Tasks\nDESCRIPTION: This snippet runs Git's maintenance tasks. It uses the `git -C \"$FullPath\" maintenance run` command. The script checks the exit code and throws an error if the maintenance command fails.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-repo.md#_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nWrite-Host \"⏳ (8/10) Running maintenance tasks...\"\n\t& git -C \"$FullPath\" maintenance run\n\tif ($lastExitCode -ne \"0\") { throw \"'git maintenance run' failed with exit code $lastExitCode\" }\n```\n\n----------------------------------------\n\nTITLE: Example Usage of close-microsoft-edge.ps1\nDESCRIPTION: A simple example showing how to execute the close-microsoft-edge.ps1 script from the PowerShell command line to close Microsoft Edge browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/close-microsoft-edge.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./close-microsoft-edge\n\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters\nDESCRIPTION: This section describes the parameters supported by the open-duck-duck-go.ps1 script. It indicates that the script supports common parameters like Verbose, Debug, ErrorAction, etc.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-duck-duck-go.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-duck-duck-go.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Parameters Declaration\nDESCRIPTION: This snippet documents the common parameters supported by the `speak-quote.ps1` script. These parameters include Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable.  These parameters are standard in PowerShell and provide common functionality like controlling the level of detail in the output or handling errors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-quote.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script Documentation for 'show-toyota-manual.ps1' Parameters\nDESCRIPTION: Describes the parameters supported by the PowerShell script, including common parameters like Verbose, Debug, and ErrorAction, which enhance scripting control during execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-toyota-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-toyota-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Example usage of show-washington-city.ps1 PowerShell script\nDESCRIPTION: This snippet demonstrates how to execute the show-washington-city.ps1 script from a PowerShell prompt, which will open the default web browser and navigate to Washington city in Google Maps.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-washington-city.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-washington-city\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering PowerShell Repositories\nDESCRIPTION: These commands manage PowerShell module repositories. `Register-PSRepository` configures a private PowerShell module registry, specifying the repository name and source location (URI). `Unregister-PSRepository` removes a registered repository.  The `<repo>` and `<uri>` placeholders need to be replaced with actual values.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_12\n\nLANGUAGE: PowerShell\nCODE:\n```\nRegister-PSRepository -Name <repo> -SourceLocation <uri>    # Configure a private PowerShell module registry\nUnregister-PSRepository -Name <repo>                        # Deregister a PowerShell Repository\n```\n\n----------------------------------------\n\nTITLE: Checking IPv4 Address Validity with PowerShell\nDESCRIPTION: This PowerShell script verifies whether a specified IPv4 address is valid based on a regular expression pattern. It accepts an optional 'Address' parameter as a string representing the IPv4 address to check; if no address is provided, it prompts the user interactively. The script defines the 'IsIPv4AddressValid' function that returns a boolean indicating validity. It outputs a confirmation message on success or a warning on failure, and exits with code 0 for success or 1 for failure. It supports common PowerShell parameters such as Verbose and Debug. Dependencies include PowerShell environment and basic regex support. Input is a string IPv4 address, and output consists of console messages and exit codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-ipv4-address.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tChecks an IPv4 address for validity\n.DESCRIPTION\n\tThis PowerShell script checks the given IPv4 address for validity.\n.PARAMETER Address\n\tSpecifies the IPv4 address to check\n.EXAMPLE\n\tPS> ./check-ipv4-address 192.168.11.22\n\t✅ IPv4 192.168.11.22 is valid\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$Address = \"\")\n\nfunction IsIPv4AddressValid { param([string]$IP)\n\t$RegEx = \"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n\tif ($IP -match $RegEx) {\n\t\treturn $true\n\t} else {\n\t\treturn $false\n\t}\n}\n\ntry {\n\tif ($Address -eq \"\" ) { $Address = read-host \"Enter IPv4 address to validate\" }\n\n\tif (IsIPv4AddressValid $Address) {\n\t\t\"✅ IPv4 $Address is valid\"\n\t\texit 0 # success\n\t} else {\n\t\twrite-warning \"Invalid IPv4 address: $Address\"\n\t\texit 1\n\t}\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full Script Content of open-start-page.ps1 in PowerShell\nDESCRIPTION: Displays the complete source code for the open-start-page.ps1 script. It includes comment-based help (synopsis, description, example, link, notes). The core functionality involves calling another script, 'open-default-browser.ps1' located in the same directory ($PSScriptRoot), passing the Startpage URL as an argument. It then exits with a success code (0). Dependency: Requires 'open-default-browser.ps1' to be present in the same directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-start-page.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the Startpage website \n.DESCRIPTION\n\tThis script launches the Web browser with the Startpage website.\n.EXAMPLE\n\tPS> ./open-start-page\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n& \"$PSScriptRoot/open-default-browser.ps1\" \"https://www.startpage.com\"\nexit 0 # success\n```\n\n----------------------------------------\n\nTITLE: Calculating MD5 Checksum with PowerShell\nDESCRIPTION: This PowerShell script calculates and displays the MD5 checksum of a specified file. It accepts a file path parameter, prompts the user if none is provided, and validates the file's existence before computing the hash with Get-FileHash using the MD5 algorithm. The script handles errors gracefully by providing meaningful messages and exits with status codes accordingly. Dependencies include PowerShell with the Get-FileHash cmdlet. Input is a file path string, output is the MD5 hash printed to the console.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/get-md5.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints the MD5 checksum of a file\n.DESCRIPTION\n\tThis PowerShell script calculates and prints the MD5 checksum of the given file.\n\tNOTE: MD5 is no longer considered secure, use it for simple change validation only!\n.PARAMETER path\n\tSpecifies the file path to the file\n.EXAMPLE\n\tPS> ./get-md5.ps1 C:\\MyFile.txt\n\t✅ MD5 hash is 041E16F16E60AD250EB794AF0681BD4A\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"\")\n\ntry {\n\tif ($path -eq \"\" ) { $path = Read-Host \"Enter the file path\" }\n\tif (-not(Test-Path $path -pathType leaf)) { throw \"Invalid file path given: $path\" }\n\n\t$result = Get-FileHash -path $path -algorithm MD5\n\n\t\"✅ MD5 hash is $($result.Hash)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Discord Using PowerShell and Winget\nDESCRIPTION: This code snippet contains the complete script logic that attempts to uninstall Discord using the 'winget' package manager via PowerShell. It prints status messages, checks for uninstall errors by evaluating the '$lastExitCode', and handles errors by outputting helpful messages with line numbers. Requires 'winget' to be installed and Discord to be present on the system; outputs success or failure messages as appropriate and uses standard PowerShell exception handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-discord.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\ntry {\n\t\"Uninstalling Discord, please wait...\"\n\n\t& winget uninstall \"Discord\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Discord, is it installed?\" }\n\n\t\"Discord is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing PowerShell Script Listing Logic\nDESCRIPTION: This PowerShell script defines a function `ListScripts` to read script metadata from a CSV file (`scripts.csv`), optionally filter by a specified category, and output custom objects. The main script block executes this function, formats the output as a table, and includes basic try/catch error handling. It requires a `scripts.csv` file in the parent directory's `data` folder.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-scripts.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the PowerShell scripts\n.DESCRIPTION\n\tThis PowerShell script lists the Mega collection of PowerShell scripts (sorted alphabetically and optionally by category).\n.PARAM category\n\tSpecifies the desired category: audio, desktop, filesystem, fun, git, misc, or: * (default)\n.EXAMPLE\n\tPS> ./list-scripts.ps1\n\n\t No Script                    Category   Description\n\t -- ------                    --------   -----------\n\t  1 add-firewall-rules.ps1    misc       Adds firewall rules for executables (needs admin rights)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$category = \"*\")\n\nfunction ListScripts([string]$category) { \n\tWrite-Progress \"Loading data from ../data/script.csv...\"\n\t$table = Import-CSV \"$PSScriptRoot/../data/scripts.csv\"\n\t[int]$No = 1\n\tforeach($row in $table) {\n\t\tif ($row.CATEGORY -like $category) { \n\t\t\tNew-Object PSObject -Property @{\n\t\t\t\t'No' = $No++\n\t\t\t\t'Script' = $row.SCRIPT\n\t\t\t\t'Category' = $row.CATEGORY\n\t\t\t\t'Description' = $row.DESCRIPTION\n\t\t\t}\n\t\t}\n\t}\n\tWrite-Progress -completed \" \"\n}\n\ntry {\n\tListScripts $category | Format-Table -property No,Script,Category,Description\n#\t$files = Get-ChildItem -path \"./*.ps1\" -attributes !Directory\n#\tforeach ($file in $files) {\n#\t\t$help = Get-Help $file -full\n#\t\tWrite-Output \"$($file.Name), ,`\"$($help.Synopsis)`\",\"\"\n#\t}\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Netflix via winget in PowerShell\nDESCRIPTION: This PowerShell script attempts to uninstall Netflix using the `winget uninstall` command. It includes error handling to catch potential issues during the uninstallation process, such as Netflix not being installed. The script checks the `$lastExitCode` to confirm success and outputs messages indicating the progress and result of the operation.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/uninstall-netflix.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tUninstalls Netflix\n.DESCRIPTION\n\tThis PowerShell script uninstalls Netflix from the local computer.\n.EXAMPLE\n\tPS> ./uninstall-netflix\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Uninstalling Netflix, please wait...\"\n\n\t& winget uninstall \"Netflix\"\n\tif ($lastExitCode -ne \"0\") { throw \"Can't uninstall Netflix, is it installed?\" }\n\n\t\"Netflix is uninstalled now.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Vim Manual Script - PowerShell\nDESCRIPTION: This script utilizes the default web browser to display the Vim manual. It leverages common PowerShell parameters such as Verbose, Debug, ErrorAction, etc.  The script accepts no specific parameters beyond the common parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-vim-manual.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Viewing Common Parameters for hello-world.ps1 in PowerShell\nDESCRIPTION: This snippet shows the command syntax for executing the hello-world.ps1 script and indicates its support for standard PowerShell common parameters such as Verbose, Debug, ErrorAction, etc. These parameters control aspects like output detail and error handling.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/hello-world.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/hello-world.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running the show-london-city PowerShell Script\nDESCRIPTION: This example demonstrates how to execute the show-london-city.ps1 script from PowerShell to open Google Maps showing London city.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-london-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-london-city\n```\n\n----------------------------------------\n\nTITLE: Executing open-microsoft-website.ps1 in PowerShell\nDESCRIPTION: This snippet demonstrates how to execute the `open-microsoft-website.ps1` script from a PowerShell prompt. Running the script as shown will open the default web browser and navigate to the Microsoft website.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-microsoft-website.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-microsoft-website\n```\n\n----------------------------------------\n\nTITLE: Entering a PowerShell Chat with Basic Parameters\nDESCRIPTION: Shows how to run the script with default parameters to enter a chat session. This basic invocation uses the current username and doesn't display previous messages.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/enter-chat.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n./enter-chat.ps1\n```\n\n----------------------------------------\n\nTITLE: Example Usage of fetch-repo.ps1 Script (PowerShell)\nDESCRIPTION: Demonstrates executing the fetch-repo.ps1 script without any parameters, causing it to operate on the repository in the current directory. The output shows the script's progress checking for Git, verifying the local repository path, fetching updates, and reporting success with execution time.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/fetch-repo.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./fetch-repo.ps1\n⏳ (1/3) Searching for Git executable...  git version 2.41.0.windows.3\n⏳ (2/3) Checking local repository...     C:\\Repos\\rust\n⏳ (3/3) Fetching updates (including submodules)...\n✅ Updates fetched into 📂rust repo in 2s.\n```\n\n----------------------------------------\n\nTITLE: Publishing Files/Folders to IPFS\nDESCRIPTION: This PowerShell script publishes files and folders to IPFS, generating a hash list and digital forensic hashes. It uses the `ipfs` command-line tool and `hashdeep` for checksum generation, requiring these tools to be installed and accessible in the system's PATH. The script accepts a file pattern, hash list path, and digital forensic hashes path as parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/publish-to-ipfs.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPublishes files & folders to IPFS\n.DESCRIPTION\n\tThis script publishes the given files and folders to IPFS.\n.PARAMETER FilePattern\n\tSpecifies the file pattern\n.PARAMETER HashList\n\tSpecifies the path to the resulting hash list\n.PARAMETER DF_Hashes\n\tSpecifies the path to the resulting digital forensic hashes\n.EXAMPLE\n\tPS> ./publish-to-ipfs C:\\MyFile.txt\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$FilePattern = \"\", [string]$HashList = \"IPFS_hashes.txt\", [string]$DF_Hashes = \"file_checksums.xml\")\n\ntry {\n\tif ($FilePattern -eq \"\") { $FilePattern = read-host \"Enter file(s)/directories to publish\" }\n\n\t$StopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tWrite-Host \"⏳ (1/3) Searching for IPFS executable...\" -NoNewline\n\t& ipfs --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'ipfs' - make sure IPFS is installed and available\" }\n\n\tif (test-path \"$FilePattern\" -pathType container) {\n\t\t\"⏳ (2/3) Publishing folder $FilePattern/...\"\n\t\t& ipfs add -r \"$FilePattern\" > $HashList\n\t\t[int]$Count = 1\n\t\t\"\"\n\t\t\"⏳ (3/3) Calculating digital forensics hashes to $DF_HASHES ...\"\n\t\t& nice hashdeep -c md5,sha1,sha256 -r -d -l -j 1 \"$FilePattern\" > $DF_Hashes\n\t} else {\n\t\t$FileList = (get-childItem \"$FilePattern\")\n\t\tforeach ($File in $FileList) {\n\t\t\tif (test-path \"$FilePattern\" -pathType container) {\n\t\t\t\t\"⏳ (2/3) Publishing folder $File/...\"\n\t\t\t\t& ipfs add -r \"$File\" >> $HashList\n\t\t\t} else {\n\t\t\t\t\"⏳ (3/3) Publishing file $File...\"\n\t\t\t\t& ipfs add \"$File\" >> $HashList\n\t\t\t}\n\t\t}\n\t\t[int]$Count = $FileList.Count\n\t}\n\n\t[int]$Elapsed = $StopWatch.Elapsed.TotalSeconds\n\t\"✅ published $Count file(s)/folder(s) to IPFS in $Elapsed sec\"\n\t\"  NOTE: to publish it to IPNS execute: ipfs name publish <HASH>\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Full implementation of Calibre server installation script\nDESCRIPTION: Complete PowerShell script that installs and configures a Calibre server on Linux. The script updates packages, installs Calibre, verifies installation, creates necessary directories, and starts the server as a background process with configurable parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-calibre-server.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls the Calibre server (needs admin rights)\n.DESCRIPTION\n\tThis PowerShell script installs and starts a local Calibre server as background process.\n.PARAMETER port\n\tSpecifies the Web port number (8099 by default)\n.PARAMETER mediaFolder\n\tSpecifies the file path to the media ('/opt/Calibre Library' by default)\n.PARAMETER userDB\n\tSpecifies the file path to the user database ('/opt/CalibreUsers.sqlite' by default)\n.PARAMETER logfile\n\tSpecifies the file path to the log file ('/opt/CalibreServer.log' by default)\n.EXAMPLE\n\tPS> ./install-calibre-server.ps1\n\t⏳ (1/5) Updating package infos...\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\n#Requires -RunAsAdministrator\n\nparam([int]$port = 8099, [string]$mediaFolder = \"/opt/Calibre Library\", [string]$userDB = \"/opt/CalibreUsers.sqlite\", [string]$logfile = \"/opt/CalibreServer.log\")\n\ntry {\n\tif (-not $IsLinux) { throw \"Sorry, currently only supported on Linux\" }\n\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\t\"`n⏳ (1/5) Updating package infos...\"\n\t& sudo apt update -y\n\tif ($lastExitCode -ne \"0\") { throw \"'apt update' failed\" }\n\n\t\"`n⏳ (2/5) Installing Calibre package...\"\n\t& sudo apt install calibre -y\n\tif ($lastExitCode -ne \"0\") { throw \"'apt install calibre' failed\" }\n\n\t\"`n⏳ (3/5) Searching for Calibre server executable...\" \n\t& calibre-server --version\n\tif ($lastExitCode -ne \"0\") { throw \"Can't execute 'calibre-server' - make sure Calibre server is installed and available\" }\n\n\t\"`n⏳ (4/5) Creating media folder at: $mediaFolder ... (if non-existent)\"\n\t& mkdir $mediaFolder\n\n\t\"`n⏳ (5/5) Starting Calibre server as background process...\"\n\t& sudo calibre-server --port $port --num-per-page 100 --userdb $userDB --log $logfile --daemonize $mediaFolder\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ Installed and started Calibre server on port $port in $($elapsed)s.\"\n\t\"   (media at: $mediaFolder, user DB: $userDB, logging to: $logfile)\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Listing USB Devices\nDESCRIPTION: This PowerShell script retrieves all USB devices connected to the local machine, filters them by class, sorts by friendly name, and formats the output into a table displaying friendly names, statuses, and instance IDs. The script includes a try-catch block for error handling, outputs errors with line numbers if execution fails, and is intended for system audits or diagnostics.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-usb-devices.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists USB devices\n.DESCRIPTION\n\tThis PowerShell script lists all USB devices connected to the local computer.\n.EXAMPLE\n\tPS> ./list-usb-devices.ps1\n\n\tFriendlyName                 Status  InstanceId\n\t------------                 ------  ----------\n\tUSB-Root-Hub (USB 3.0)       OK      USB\\ROOT_HUB30\\4&2060378&0&0\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tGet-PnpDevice | Where-Object {$_.Class -eq \"USB\"} | Sort-Object -property FriendlyName | Format-Table -property FriendlyName,Status,InstanceId\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Manager Launch in PowerShell\nDESCRIPTION: Presents the complete source code for the `open-task-manager.ps1` script. It uses the `Start-Process` cmdlet within a `try...catch` block to launch `taskmgr.exe`. The script exits with status code 0 upon successful execution and 1 if an error occurs, printing the error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-task-manager.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tStarts the Task Manager\n.DESCRIPTION\n\tThis script launches the Windows Task Manager application.\n.EXAMPLE\n\tPS> ./open-task-manager\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tStart-Process taskmgr.exe\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Switching into a PowerShell Drive\nDESCRIPTION: This command switches the current location to a PowerShell drive (PSDrive). `Set-Location` changes the current working directory to the specified PSDrive's root path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cheat-sheet.md#_snippet_24\n\nLANGUAGE: PowerShell\nCODE:\n```\nSet-Location -Path videos:                                  # Switch into PSDrive context\n```\n\n----------------------------------------\n\nTITLE: Showing Bitcoin Rate - Example in PowerShell\nDESCRIPTION: This PowerShell snippet presents an example of how to execute the \"show-bitcoin-rate.ps1\" script.  It demonstrates the basic usage of the script from the PowerShell prompt.  No specific parameters are used in this simple call.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-bitcoin-rate.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./show-bitcoin-rate\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script Example\nDESCRIPTION: Shows a practical example of how to run the `open-baidu-website.ps1` script from a PowerShell command prompt. The `./` prefix indicates running the script from the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-baidu-website.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-baidu-website\n\n\n```\n\n----------------------------------------\n\nTITLE: speak-greek.ps1 Example Usage - PowerShell\nDESCRIPTION: Shows an example of how to execute the `speak-greek.ps1` script with the Greek word \"γεια\" (hello). This demonstrates a basic usage of the script with a specified text.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-greek.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-greek.ps1 \"γεια\"\n```\n\n----------------------------------------\n\nTITLE: Executing speak-date.ps1 Script - PowerShell\nDESCRIPTION: Provides a simple example demonstrating how to execute the `speak-date.ps1` script from the PowerShell console. This command assumes the script is located in the current directory and, when run, will initiate the text-to-speech process to announce the current date.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-date.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS>./speak-date\n```\n\n----------------------------------------\n\nTITLE: PowerShell Script for Installing MiniDLNA Server\nDESCRIPTION: This PowerShell script automates the installation of the MiniDLNA server on Linux systems via Snap. It includes parameter documentation, a workflow with error handling, and status messages for user feedback. Dependencies include PowerShell with support for executing system commands and administrative privileges for installing Snap packages. The script verifies the OS type, installs MiniDLNA, and reports success or failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-mini-dlna.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls MiniDLNA\n.DESCRIPTION\n\tThis PowerShell script installs the MiniDLNA server.\n.EXAMPLE\n\tPS> ./install-mini-dlna.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif (-not($IsLinux)) { throw \"Sorry, only Linux installation currently supported\" }\n\n\t\"⏳ (1/4) Installing MiniDLNA from Snap Store...\"\n\t& sudo snap install minidlna-jdstrand\n\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\t\"✅ MiniDLNA installed in $($elapsed)s.\"\n\t\"   Configuration: /var/snap/minidlna-jdstrand/current/minidlna.conf\"\n\t\"   Log file: /var/snap/minidlna-jdstrand/current/home/minidlna.log\"\n\texit 0 # success\n} catch {\n\t\"Sorry: $($Error[0])\"\n\texit 1\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing open-google-chrome.ps1 Script Example (PowerShell)\nDESCRIPTION: Demonstrates a basic example of how to execute the `open-google-chrome.ps1` script from the PowerShell command line. Running the script without any arguments will launch the Google Chrome browser, typically opening its default start page or restoring the previous session.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-google-chrome.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./open-google-chrome\n```\n\n----------------------------------------\n\nTITLE: Querying MySQL Tables in PowerShell\nDESCRIPTION: This snippet connects to a MySQL database using the provided credentials and retrieves a list of tables. It uses `Invoke-MySqlQuery` to execute the `SHOW TABLES` SQL command. The results are then exported to a CSV file named `mysql_tables.csv` in the script's root directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-mysql-tables.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n$csvfilepath = \"$PSScriptRoot\\mysql_tables.csv\"\n$result = Invoke-MySqlQuery  -ConnectionString \"server=$server; database=$database; user=$dbuser; password=$dbpass; pooling = false; convert zero datetime=True\" -Sql \"SHOW TABLES\" -CommandTimeout 10000\n$result | Export-Csv $csvfilepath -NoTypeInformation\n```\n\n----------------------------------------\n\nTITLE: Executing introduce-powershell.ps1 with Common Parameters\nDESCRIPTION: Demonstrates the command syntax for running the introduce-powershell.ps1 script. It highlights that the script supports standard PowerShell common parameters like Verbose, Debug, ErrorAction, etc., allowing for flexible execution control.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/introduce-powershell.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/introduce-powershell.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Script Parameters in PowerShell\nDESCRIPTION: This snippet outlines the basic call signature for the show-sydney-city.ps1 script and lists the standard PowerShell common parameters that are available for use with this script, such as Verbose, Debug, and ErrorAction.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-sydney-city.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nshow-sydney-city.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing PowerShell Profile Locations (PowerShell)\nDESCRIPTION: This PowerShell script defines two functions, 'ListProfile' and 'ListProfiles', to identify and check the existence of the four standard PowerShell profile files ($PROFILE.AllUsersAllHosts, $PROFILE.AllUsersCurrentHost, $PROFILE.CurrentUserAllHosts, $PROFILE.CurrentUserCurrentHost). It uses 'Test-Path' to verify existence and 'New-Object PSObject' to structure the output, finally presenting the results in a table using 'Format-Table'. Basic try/catch error handling is included.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-powershell-profiles.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the PowerShell profiles\n.DESCRIPTION\n\tThis PowerShell script lists the user's PowerShell profiles.\n.EXAMPLE\n\tPS> ./list-powershell-profiles.ps1\n\t\n\tPrio  Profile Name           Location                                                         Existent\n\t----  ------------           --------                                                         --------\n\t1     AllUsersAllHosts       /opt/PowerShell/profile.ps1                                      no\n\t2     AllUsersCurrentHost    /opt/PowerShell/Microsoft.PowerShell_profile.ps1                 no\n\t3     CurrentUserAllHosts    /home/markus/.config/powershell/profile.ps1                      no\n\t4     CurrentUserCurrentHost /home/markus/.config/powershell/Microsoft.PowerShell_profile.ps1 yes\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction ListProfile { param([int]$prio, [string]$profileName, [string]$Location)\n\tif (Test-Path \"$Location\") { $Exists = \"yes\" } else { $Exists = \"no\" }\n\tNew-Object PSObject -Property @{ 'Prio'=\"$prio\"; 'Profile Name'=\"$profileName\"; 'Location'=\"$Location\"; 'Exists'=\"$Exists\" }\n}\n\nfunction ListProfiles { \n\tListProfile 1 \"AllUsersAllHosts\"       $PROFILE.AllUsersAllHosts\n\tListProfile 2 \"AllUsersCurrentHost\"    $PROFILE.AllUsersCurrentHost\n\tListProfile 3 \"CurrentUserAllHosts\"    $PROFILE.CurrentUserAllHosts\n\tListProfile 4 \"CurrentUserCurrentHost\" $PROFILE.CurrentUserCurrentHost\n}\n\ntry {\n\tListProfiles | Format-Table -property Prio,'Profile Name',Exists,Location\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Listing WSL Distributions and Status (PowerShell)\nDESCRIPTION: This PowerShell script lists installed and available Windows Subsystem for Linux (WSL) distributions and their status. It includes a check to ensure it's run on Windows, executes `wsl.exe` commands to list verbose, online, and status information, and handles errors using a `try-catch` block, exiting with appropriate codes.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-wsl-distros.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n        Lists distros for Windows Subsystem for Linux\n.DESCRIPTION\n        This PowerShell script lists installed/available Linux distributions for Windows Subsystem for Linux (WSL).\n.EXAMPLE\n        PS> ./list-wsl-distros.ps1\n\t  NAME            STATE           VERSION\n\t* Ubuntu-24.04    Stopped         2\n\t...\n.LINK\n        https://github.com/fleschutz/PowerShell\n.NOTES\n        Author: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\tif ($IsLinux -or $IsMacOS) { throw \"Requires Windows Subsystem for Linux (WSL)\" }\n\n\t& wsl.exe --list --verbose\n\t\" \"\n\t& wsl.exe --list --online\n\t\" \"\n\t& wsl.exe --status\n\texit 0 # success\n} catch {\n        \"⚠️ Error: $($Error[0]) in script line $($_.InvocationInfo.ScriptLineNumber).\"\n        exit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Path Nonexistence in Environment Settings (PowerShell)\nDESCRIPTION: Test-PathNotInSettings checks that the supplied directory path exists, is not null or empty, and is not already present in the environment PATH variable. It adapts to platform differences by querying process/user/machine PATH via registry or env vars, and normalizes directory separators. Throws exceptions on error. Inputs: a string $Path. Output: boolean true if valid, or throws. Dependencies: System.Environment, System.IO, and optional platform-dependent registry access. Designed as a ValidateScript for path-modifying operations.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-powershell.md#_snippet_6\n\nLANGUAGE: PowerShell\nCODE:\n```\nfunction Test-PathNotInSettings($Path) {\n    if ([string]::IsNullOrWhiteSpace($Path)) {\n        throw 'Argument is null'\n    }\n\n    # Remove ending DirectorySeparatorChar for comparison purposes\n    $Path = [System.Environment]::ExpandEnvironmentVariables($Path.TrimEnd([System.IO.Path]::DirectorySeparatorChar));\n\n    if (-not [System.IO.Directory]::Exists($Path)) {\n        throw \"Path does not exist: $Path\"\n    }\n\n    # [System.Environment]::GetEnvironmentVariable automatically expands all variables\n    [System.Array] $InstalledPaths = @()\n    if ([System.Environment]::OSVersion.Platform -eq \"Win32NT\") {\n        $InstalledPaths += @(([System.Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::User)) -split ([System.IO.Path]::PathSeparator))\n        $InstalledPaths += @(([System.Environment]::GetEnvironmentVariable('PATH', [System.EnvironmentVariableTarget]::Machine)) -split ([System.IO.Path]::PathSeparator))\n    } else {\n        $InstalledPaths += @(([System.Environment]::GetEnvironmentVariable('PATH'), [System.EnvironmentVariableTarget]::Process) -split ([System.IO.Path]::PathSeparator))\n    }\n\n    # Remove ending DirectorySeparatorChar in all items of array for comparison purposes\n    $InstalledPaths = $InstalledPaths | ForEach-Object { $_.TrimEnd([System.IO.Path]::DirectorySeparatorChar) }\n\n    # if $InstalledPaths is in setting return false\n    if ($InstalledPaths -icontains $Path) {\n        throw 'Already in PATH environment variable'\n    }\n\n    return $true\n}\n```\n\n----------------------------------------\n\nTITLE: Script Parameters and Usage Example in PowerShell\nDESCRIPTION: Defines the script parameters and shows an example of executing the script with default settings. The script accepts an optional parameter to specify the number of integers to sort, defaulting to 1000 if not provided.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/measure-QuickSort.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/measure-QuickSort.ps1 [[-numIntegers] <Int32>] [<CommonParameters>]\n\n-numIntegers <Int32>\n    Specifies the number of integers to sort\n    \n    Required?                    false\n    Position?                    1\n    Default value                1000\n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for WSL Distribution Listing Script (PowerShell)\nDESCRIPTION: This snippet illustrates the command-line syntax for the PowerShell script, showing how to invoke it and indicating support for standard PowerShell Common Parameters. No specific custom parameters are defined beyond these.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-wsl-distros.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/list-wsl-distros.ps1 [<CommonParameters>]\n```\n\n----------------------------------------\n\nTITLE: Launching Google Maps in Browser - PowerShell\nDESCRIPTION: This PowerShell script launches a web browser and navigates to Google Maps, displaying a view of planet Earth. It utilizes the common parameters available in PowerShell, offering options for debugging and error handling. This script is designed to be executed directly in a PowerShell environment.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-planet-earth.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-planet-earth.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Implementing File Search Logic in search-files.ps1 PowerShell Script\nDESCRIPTION: This is the main implementation of the `search-files.ps1` PowerShell script. It defines parameters `textPattern` and `filePattern` with default empty string values. It includes a `ListLocations` function that utilizes the `Select-String` cmdlet to find text patterns in the specified files and then formats the results into custom PSObjects with 'FILE' and 'LINE' properties. The script prompts the user for input using `Read-Host` if parameters are not provided. It uses a try-catch block for basic error handling, executes the search using `ListLocations`, pipes the results to `Format-Table` for display, and exits with status code 0 for success or 1 for failure.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/search-files.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSearches for text in files\n.DESCRIPTION\n\tThis PowerShell script searches for the given text pattern in the given files.\n.PARAMETER textPattern\n\tSpecifies the text pattern to search for\n.PARAMETER filePattern\n\tSpecifies the files to search \n.EXAMPLE\n\tPS> ./search-files.ps1 UFO *.ps1\n\n\tFILE                                              LINE\n\t----                                              ----\n\t/home/Markus/PowerShell/scripts/check-month.ps1   17: $MonthName = (Get-Date -UFormat %B)\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$textPattern = \"\", [string]$filePattern = \"\")\n\nfunction ListLocations { param([string]$textPattern, [string]$filePattern)\n\t$list = Select-String -path $filePattern -pattern \"$textPattern\" \n\tforeach($item in $list) { New-Object PSObject -Property @{ 'FILE'=\"$($item.Path)\"; 'LINE'=\"$($item.LineNumber):$($item.Line)\" }\t}\n\t\"✅ Found $($list.Count) lines containing '$textPattern' in $filePattern.\"\n}\n\ntry {\n\tif ($textPattern -eq \"\" ) { $textPattern = Read-Host \"Enter the text pattern, e.g. 'UFO'\" }\n\tif ($filePattern -eq \"\" ) { $filePattern = Read-Host \"Enter the file pattern, e.g. '*.ps1'\" }\n\n\tListLocations $textPattern $filePattern | Format-Table -property FILE,LINE -autoSize\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: open-ipfs-website.ps1 Parameters (PowerShell)\nDESCRIPTION: Defines the parameters supported by the open-ipfs-website.ps1 PowerShell script. It lists common parameters such as Verbose, Debug, ErrorAction, and others. This helps users understand the available options for running the script.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-ipfs-website.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nopen-ipfs-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running Vienna City Viewer Script in PowerShell\nDESCRIPTION: This code demonstrates how to invoke the 'show-vienna-city.ps1' PowerShell script from the command line. The script requires no specific dependencies apart from PowerShell itself and utilizes the user's default browser to open the Vienna location in Google Maps. It accepts all PowerShell common parameters, allowing the user to control verbosity, error handling, and output behaviors. Input is not required as all actions are handled internally, and output consists of launching the web browser; the script does not return additional data.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-vienna-city.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./show-vienna-city\n```\n\n----------------------------------------\n\nTITLE: Launching Pictures Folder Using PowerShell\nDESCRIPTION: This PowerShell script resolves the user's Pictures folder path to ensure it exists, then launches File Explorer pointing to that directory by calling another script. It handles errors by catching exceptions, printing detailed error information including the offending script line number, and exiting with a failure code. The script supports standard PowerShell common parameters such as Verbose and Debug for flexible execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pictures-folder.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tOpens the user's pictures folder\n.DESCRIPTION\n\tThis script launches the File Explorer with the user's pictures folder.\n.EXAMPLE\n\tPS> ./open-pictures-folder\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$TargetDir = resolve-path \"$HOME/Pictures\"\n\tif (-not(test-path \"$TargetDir\" -pathType container)) {\n\t\tthrow \"Pictures folder at 📂$TargetDir doesn't exist (yet)\"\n\t}\n\t& \"$PSScriptRoot/open-file-explorer.ps1\" \"$TargetDir\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Tower Game Script\nDESCRIPTION: Demonstrates the basic execution of the play-tower-game script from PowerShell prompt, without any parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tower-game.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./play-tower-game\n```\n\n----------------------------------------\n\nTITLE: Specifying PowerShell Script Common Parameters\nDESCRIPTION: This PowerShell snippet provides documentation about the script's usage and the set of common parameters it supports, including Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, WarningVariable, OutBuffer, PipelineVariable, and OutVariable. Users can pass these parameters to control script output and behavior according to standard PowerShell conventions. It is for reference and does not require code execution.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-stack-overflow.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n/Repos/PowerShell/scripts/open-stack-overflow.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Adding Scripts Directory to PATH on Linux (Bash)\nDESCRIPTION: Appends the specified path to the PowerShell scripts directory to the user's PATH environment variable in the `.profile` file for Bash users. This makes the scripts executable from any location in the terminal. Replace `/path/to/PowerShell/scripts` with the actual path.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/FAQ.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\nPATH=\"$PATH:/path/to/PowerShell/scripts\"\n```\n\n----------------------------------------\n\nTITLE: Launching Ant Manual\nDESCRIPTION: This PowerShell script launches the web browser with the Apache Ant manual. It utilizes common parameters such as Verbose, Debug, and ErrorAction for controlling script execution. The script depends on the user having a web browser installed and configured.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/show-ant-manual.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nshow-ant-manual.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for count-lines.ps1 Script in PowerShell\nDESCRIPTION: Defines the syntax for calling the count-lines.ps1 script. It accepts an optional string parameter '-pathToDirTree' to specify the target directory. Common PowerShell parameters are also supported.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/count-lines.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/count-lines.ps1 [[-pathToDirTree] <String>] [<CommonParameters>]\n\n-pathToDirTree <String>\n    Specifies the path to the directory tree.\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Defining Parameters for speak-dutch.ps1 (PowerShell)\nDESCRIPTION: Specifies the command-line parameters for the `speak-dutch.ps1` script. It accepts an optional `-text` parameter of type String, representing the Dutch text to speak. The script also supports PowerShell Common Parameters.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-dutch.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/speak-dutch.ps1 [[-text] <String>] [<CommonParameters>]\n\n-text <String>\n    Specifies the Dutch text to speak\n    \n    Required?                    false\n    Position?                    1\n    Default value                \n    Accept pipeline input?       false\n    Accept wildcard characters?  false\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Running open-pixabay.ps1 in PowerShell\nDESCRIPTION: A simple example showing how to execute the open-pixabay script from a PowerShell prompt to open the Pixabay website in the default browser.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-pixabay.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./open-pixabay\n```\n\n----------------------------------------\n\nTITLE: cd-up2.ps1 Script Implementation\nDESCRIPTION: The complete PowerShell source code for the cd-up2.ps1 script. It uses 'Resolve-Path ../..' to determine the target directory two levels up, 'Test-Path' to verify its existence as a container (directory), and 'Set-Location' to change the current working directory. Basic error handling is implemented using a try-catch block to report issues and exit with a non-zero status code.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/cd-up2.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSets the working directory to two directory levels up\n.DESCRIPTION\n\tThis PowerShell script changes the working directory to two directory level up.\n.EXAMPLE\n\tPS> ./cd-up2\n\t📂C:\\\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t$path = Resolve-Path \"../..\"\n\tif (-not(Test-Path \"$path\" -pathType container)) { throw \"Folder at 📂$path doesn't exist (yet)\" }\n\tSet-Location \"$path\"\n\t\"📂$path\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Hindi Text-to-Speech - PowerShell\nDESCRIPTION: This PowerShell script implements the core logic for Hindi text-to-speech. It initializes the SAPI.SPVoice COM object, iterates through available voices to find one supporting Hindi, sets the identified voice, and uses it to speak the provided text. It includes error handling for cases where no Hindi voice is found and provides a fallback to prompting the user if the text parameter is empty. Requires a Windows operating system with a Hindi TTS voice installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-hindi.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tSpeaks text in Hindi \n.DESCRIPTION\n\tThis PowerShell script speaks the given text with a Hindi text-to-speech (TTS) voice.\n.PARAMETER text\n\tSpecifies the Hindi text to speak\n.EXAMPLE\n\tPS> ./speak-hindi.ps1 \"नमस्ते\"\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$text = \"\")\n\ntry {\n\tif ($text -eq \"\") { $text = Read-Host \"Enter the Hindi text to speak\" }\n\n\t$TTS = New-Object -ComObject SAPI.SPVoice\n\tforeach ($voice in $TTS.GetVoices()) {\n\t\tif ($voice.GetDescription() -like \"*- Hindi*\") { \n\t\t\t$TTS.Voice = $voice\n\t\t\t[void]$TTS.Speak($text)\n\t\t\texit 0 # success\n\t\t}\n\t}\n\tthrow \"No Hindi text-to-speech voice found - please install one\"\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata and Synopsis for play-chess.ps1 PowerShell Script\nDESCRIPTION: Provides metadata for the play-chess.ps1 script using PowerShell comment-based help. Includes a synopsis, a detailed description of its purpose and origin, version information, author, and date. It highlights the limitation that Unicode chess pieces render correctly only in PowerShell ISE.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n    Local multiplayer chess game in PowerShell.\n\n.DESCRIPTION\n    Started off of code from https://github.com/bhassen99/POSH-Chess, which was very\nmuch incomplete. I kept the board shape, but have changed everything else.\nThe unicode chess pieces unfortunately do not render in the base PowerShell console, \nthey only appear when run in PowerShell ISE.\n\n.NOTES\n    Name: Chess.ps1\n    Version: 0.3.1\n    Author: Michael Shen\n    Date: 10-19-2017\n#>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft Powertoys with winget - PowerShell\nDESCRIPTION: This PowerShell snippet installs Microsoft Powertoys using the `winget` package manager.  It first displays an installation message. The script uses `winget install` with arguments to automatically accept package and source agreements. It checks the exit code for errors and throws an exception if the installation fails.  Requires the winget package manager to be installed and accessible. It outputs messages to the console indicating the installation progress and result.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-power-toys.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Microsoft Powertoys\n.DESCRIPTION\n\tThis PowerShell script installs the Microsoft Powertoys.\n.EXAMPLE\n\tPS> ./install-power-toys.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Microsoft Powertoys, please wait...\"\n\n\t& winget install Microsoft.Powertoys --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Microsoft Powertoys installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing PowerShell Script with Text Input\nDESCRIPTION: Demonstrates how to run the `speak-swedish.ps1` script from the PowerShell command line, passing the desired Swedish text \"Hallå\" as an argument. This provides a basic example of script invocation with the `-text` parameter.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/speak-swedish.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./speak-swedish.ps1 Hallå\n\n```\n\n----------------------------------------\n\nTITLE: Running play-tetris-melody.ps1\nDESCRIPTION: This is an example of how to run the `play-tetris-melody.ps1` script in the PowerShell console. It assumes that the script is located in the current directory.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-tetris-melody.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\nPS> ./play-tetris-melody\n```\n\n----------------------------------------\n\nTITLE: Scanning a Folder for Malware (PowerShell)\nDESCRIPTION: This PowerShell script scans a folder for malware using either ESET Endpoint Security or Windows Defender. It first checks if the specified path is a valid directory. Then, it checks for the presence of ESET or Windows Defender executables. If found, it executes the scan and checks the exit code for potential threats. Finally, it reports whether malware was found and the time taken for the scan.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/scan-folder.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tScans a folder for malware\n.DESCRIPTION\n\tThis PowerShell script scans a folder for malware (including subfolders). Requires ESET Endpoint Security or Windows Defender.\n.PARAMETER path\n\tSpecifies the file path to the folder (default is working directory).\n.EXAMPLE\n\tPS> ./scan-folder.ps1 C:\\Windows\n\t⏳ Scanning C:\\Windows with ESET Endpoint Security...\n\t...\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$path = \"$PWD\")\n\ntry {\n\t$stopWatch = [system.diagnostics.stopwatch]::startNew()\n\n\tif (-not(Test-Path $path -pathType container)) { throw \"Invalid file path: $path\" }\n\t$path = Resolve-Path $path\n\n\tif (Test-Path \"C:\\Program Files\\ESET\\ESET Security\\ecls.exe\" -pathType leaf) {\n\t\tWrite-Host \"⏳ Scanning $path with ESET Endpoint Security...\"\n\t\t& \"C:\\Program Files\\ESET\\ESET Security\\ecls.exe\" $path\n\t\tif ($lastExitCode -ne 0) { throw \"ESET Endpoibnt Security exited with code $lastExitCode - POTENTIAL THREAT !!!\" }\n\n\t} elseif (Test-Path \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -pathType leaf) {\n\t\tWrite-Host \"⏳ Scanning $path with Windows Defender...\"\n\t\t& \"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -Scan -ScanType 2 -File $path\n\t\tif ($lastExitCode -ne 0) { throw \"Windows Defender exited with code $lastExitCode - POTENTIAL THREAT !!!\" }\n\n\t} else {\n\t\tthrow \"No ESET Endpoint Security or Windows Defender available - please install one.\"\n\t}\n\t[int]$elapsed = $stopWatch.Elapsed.TotalSeconds\n\tWrite-Host \"✅ Scanned $path in $($elapsed)s: No malware found.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error: $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Full Implementation of inspect-exe.ps1\nDESCRIPTION: Complete script implementation that retrieves and displays detailed version information about an executable file. It includes error handling and accepts an optional path parameter or prompts the user for input.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/inspect-exe.md#_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.SYNOPSIS\n\tPrints basic information of an executable file\n.DESCRIPTION\n\tThis PowerShell script prints basic information of an executable file.\n.PARAMETER PathToExe\n\tSpecifies the path to the executable file\n.EXAMPLE\n\tPS> ./inspect-exe C:\\MyApp.exe\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$PathToExe = \"\")\n\ntry {\n\tif ($PathToExe -eq \"\" ) { $PathToExe = read-host \"Enter path to executable file\" }\n\n\tGet-ChildItem $PathToExe | % {$_.VersionInfo} | Select *\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Knight Moves in PowerShell\nDESCRIPTION: This snippet validates a knight's move. It calculates the absolute values of the horizontal and vertical move distances (`$MoveX`, `$MoveY`). The move is deemed successful (`$moveSuccess = $true`) if the knight moves in an 'L' shape (1 square in one direction and 2 in the other).  The `$attack` flag is set if the destination square is occupied.  It depends on `$MoveX`, `$MoveY`, `$board`, `$DesiredColumn`, and `$DesiredRow` variables.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/play-chess.md#_snippet_7\n\nLANGUAGE: PowerShell\nCODE:\n```\n            'Knight' {\n                $MoveX = [math]::abs($MoveX)\n                $MoveY = [math]::abs($MoveY)\n\n                if ((($MoveX -eq 1) -and ($MoveY -eq 2)) -or (($MoveX -eq 2) -and ($MoveY -eq 1))) {\n                    $moveSuccess = $true\n                    if ($board[$DesiredColumn, $DesiredRow] -ne $Empty) {\n                        $attack = $true\n                    }\n                } else {\n                    Write-Error \"Illegal Knight Move\"\n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Supporting Common Parameters - PowerShell\nDESCRIPTION: This code snippet indicates that the PowerShell script `open-topo-map-website.ps1` is designed to support standard PowerShell common parameters, allowing for verbose output, debugging, error handling, and other standard behaviors.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-topo-map-website.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nopen-topo-map-website.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Listing NINA Warnings with Optional Regional Filtering in PowerShell\nDESCRIPTION: This PowerShell script defines a function to query and parse JSON warning data from various NINA warning sources or a specified regional key (ARS). It retrieves warning metadata including titles in English or German, start and expiry dates, severity, and urgency, outputting a formatted summary. The script accepts an optional parameter ARS for filtering by official German regional key and supports common PowerShell parameters for enhanced control. It handles errors and progress display internally.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-nina-warnings.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLists the current NINA warnings\n.DESCRIPTION\n\tThis PowerShell script queries the current NINA warnings and lists it.\n.PARAMETER ARS\n\tSpecifies the official regional key in Germany (\"Amtlicher Regionalschlüssel\", e.g. 09777, none by default)\n.EXAMPLE\n\tPS> ./list-nina-warnings.ps1\n\n\t⚠️ Official SEVERE WEATHER WARNING of SEVERE THUNDERSTORMS with VERY HEAVY RAIN and HAIL\n\t   🕘 2024-06-26T07:53:00+02:00 ... 2024-06-26T08:45:00+02:00 (by DWD, Update, Severe, Immediate)\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nparam([string]$ARS = \"\")\n\nfunction ListWarningsOf([string]$source, [string]$URL)\n{\n\tWrite-Progress \"Loading NINA - $source warnings...\"\n\t$warnings = (Invoke-WebRequest -URI $URL -userAgent \"curl\" -useBasicParsing).Content | ConvertFrom-Json\n\tWrite-Progress -completed \"Done.\"\n\n\tforeach($warning in $warnings) {\n\t\t$title = $warning.i18nTitle.en\n\t\tif (\"$title\" -eq \"\") { $title = $warning.i18nTitle.de }\n\t\t$startDate = $warning.startDate\n\t\t$expiresDate = $warning.expiresDate\n\t\t$severity = $warning.severity\n\t\t$urgency = $warning.urgency\n\t\t$type = $warning.type\n\t\tWrite-Output \"\"\n\t\tWrite-Output \"⚠️ $title\"\n\t\tif (\"$type\" -ne \"\") {\n\t\t\tWrite-Output \"   🕘 $($startDate)...$expiresDate (by $source, $type, $severity, $urgency)\"\n\t\t}\n\t}\n}\n\ntry {\n\tif (\"$ARS\" -ne \"\") {\n\t\tListWarningsOf \"Region\" \"https://warnung.bund.de/api31/dashboard/$($ARS)0000000.json\"\n\t} else {\n\t\tListWarningsOf \"Katwarn\" \"https://warnung.bund.de/api31/katwarn/mapData.json\"\n\t\tListWarningsOf \"DWD\"     \"https://warnung.bund.de/api31/dwd/mapData.json\"\n\t\tListWarningsOf \"Police\"  \"https://warnung.bund.de/api31/police/mapData.json\"\n\t\tListWarningsOf \"LHP\"     \"https://warnung.bund.de/api31/lhp/mapData.json\"\n\t\tListWarningsOf \"Biwapp\"  \"https://warnung.bund.de/api31/biwapp/mapData.json\"\n\t} \t\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Thunderbird PowerShell\nDESCRIPTION: This PowerShell script launches the Thunderbird email application. It first defines a function `TryToExec` that checks for the existence of the Thunderbird executable and starts it if found. The script then tries to execute Thunderbird from a default installation path. If it fails (Thunderbird is not found), it catches the exception and executes another script (`speak-english.ps1`) to speak the error message.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/open-thunderbird.md#_snippet_1\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tLaunches the Thunderbird app\n.DESCRIPTION\n\tThis script launches the Mozilla Thunderbird email application.\n.EXAMPLE\n\tPS> ./open-thunderbird\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\nfunction TryToExec { param($Folder, $Binary)\n        if (test-path \"$Folder/$Binary\" -pathType leaf) {\n                start-process \"$Folder/$Binary\" -WorkingDirectory \"$Folder\"\n                exit 0 # success\n        }\n}\n\ntry {\n\tTryToExec \"C:\\Program Files (x86)\\Mozilla Thunderbird\" \"thunderbird.exe\"\n\tthrow \"It seems Thunderbird isn't installed yet.\"\n} catch {\n\t& \"$PSScriptRoot/speak-english.ps1\" \"Sorry: $($Error[0])\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Netflix using winget - PowerShell\nDESCRIPTION: This PowerShell script installs the Netflix application using the winget package manager. It first displays a message indicating that the installation is in progress. It then uses the `winget install` command to install Netflix, specifying the source as 'msstore' and accepting package and source agreements. After installation, it checks the exit code to determine success or failure. Error handling is implemented using a `try-catch` block, which captures any exceptions and outputs an error message. The script exits with a status code: 0 for success, 1 for failure. Requires the winget package manager to be installed.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/install-netflix.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n<#\n.SYNOPSIS\n\tInstalls Netflix\n.DESCRIPTION\n\tThis PowerShell script installs Netflix from the Microsoft Store.\n.EXAMPLE\n\tPS> ./install-netflix.ps1\n.LINK\n\thttps://github.com/fleschutz/PowerShell\n.NOTES\n\tAuthor: Markus Fleschutz | License: CC0\n#>\n\ntry {\n\t\"Installing Netflix, please wait...\"\n\n\t& winget install \"Netflix\" --source msstore --accept-package-agreements --accept-source-agreements\n\tif ($lastExitCode -ne \"0\") { throw \"'winget install' failed\" }\n\n\t\"Netflix installed successfully.\"\n\texit 0 # success\n} catch {\n\t\"⚠️ Error in line $($_.InvocationInfo.ScriptLineNumber): $($Error[0])\"\n\texit 1\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Balance Check Script Example - PowerShell\nDESCRIPTION: This example demonstrates how to execute the 'check-my-balance.ps1' script from the PowerShell prompt using './check-my-balance'. It shows a basic usage scenario without additional parameters, highlighting the script's default behavior. Users should have script execution permissions and, if applicable, adjust their execution policy to allow running local scripts.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-my-balance.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./check-my-balance\n```\n\n----------------------------------------\n\nTITLE: Invoking PowerShell Script with CommonParameters Support\nDESCRIPTION: Example command line usage of the `check-day.ps1` script, illustrating its support for standard PowerShell common parameters such as Verbose, Debug, and ErrorAction. The snippet demonstrates running the script in the PowerShell console and shows typical successful output indicating the current weekday spoken aloud.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/check-day.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n/Repos/PowerShell/scripts/check-day.ps1 [<CommonParameters>]\n\n[<CommonParameters>]\n    This script supports the common parameters: Verbose, Debug, ErrorAction, ErrorVariable, WarningAction, \n    WarningVariable, OutBuffer, PipelineVariable, and OutVariable.\n```\n\n----------------------------------------\n\nTITLE: Executing list-ssh-key.ps1 Script in PowerShell\nDESCRIPTION: Demonstrates how to execute the `list-ssh-key.ps1` script from the PowerShell prompt. This example shows the basic command without any additional parameters to display the user's public SSH key.\nSOURCE: https://github.com/fleschutz/powershell/blob/main/docs/list-ssh-key.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nPS> ./list-ssh-key.ps1\n```"
  }
]