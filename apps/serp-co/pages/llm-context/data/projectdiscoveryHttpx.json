[
  {
    "owner": "projectdiscovery",
    "repo": "httpx",
    "content": "TITLE: Httpx Command-Line Usage and Options\nDESCRIPTION: This snippet outlines the full usage syntax and available flags for the httpx tool. It covers options for input, probes, matchers, filters, rate limiting, output formatting, and more.\nSOURCE: https://github.com/projectdiscovery/httpx/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nUsage:\n  ./httpx [flags]\n\nFlags:\nhttpx is a fast and multi-purpose HTTP toolkit that allows running multiple probes using the retryablehttp library.\n\nUsage:\n  ./httpx [flags]\n\nFlags:\nINPUT:\n   -l, -list string      input file containing list of hosts to process\n   -rr, -request string  file containing raw request\n   -u, -target string[]  input target host(s) to probe\n\nPROBES:\n   -sc, -status-code      display response status-code\n   -cl, -content-length   display response content-length\n   -ct, -content-type     display response content-type\n   -location              display response redirect location\n   -favicon               display mmh3 hash for '/favicon.ico' file\n   -hash string           display response body hash (supported: md5,mmh3,simhash,sha1,sha256,sha512)\n   -jarm                  display jarm fingerprint hash\n   -rt, -response-time    display response time\n   -lc, -line-count       display response body line count\n   -wc, -word-count       display response body word count\n   -title                 display page title\n   -bp, -body-preview     display first N characters of response body (default 100)\n   -server, -web-server   display server name\n   -td, -tech-detect      display technology in use based on wappalyzer dataset\n   -method                display http request method\n   -websocket             display server using websocket\n   -ip                    display host ip\n   -cname                 display host cname\n   -extract-fqdn, -efqdn  get domain and subdomains from response body and header in jsonl/csv output\n   -asn                   display host asn information\n   -cdn                   display cdn/waf in use (default true)\n   -probe                 display probe status\n\nHEADLESS:\n   -ss, -screenshot                 enable saving screenshot of the page using headless browser\n   -system-chrome                   enable using local installed chrome for screenshot\n   -ho, -headless-options string[]  start headless chrome with additional options\n   -esb, -exclude-screenshot-bytes  enable excluding screenshot bytes from json output\n   -ehb, -exclude-headless-body     enable excluding headless header from json output\n   -st, -screenshot-timeout value   set timeout for screenshot in seconds (default 10s)\n   -sid, -screenshot-idle value     set idle time before taking screenshot in seconds (default 1s)\n\nMATCHERS:\n   -mc, -match-code string            match response with specified status code (-mc 200,302)\n   -ml, -match-length string          match response with specified content length (-ml 100,102)\n   -mlc, -match-line-count string     match response body with specified line count (-mlc 423,532)\n   -mwc, -match-word-count string     match response body with specified word count (-mwc 43,55)\n   -mfc, -match-favicon string[]      match response with specified favicon hash (-mfc 1494302000)\n   -ms, -match-string string[]        match response with specified string (-ms admin)\n   -mr, -match-regex string[]         match response with specified regex (-mr admin)\n   -mcdn, -match-cdn string[]         match host with specified cdn provider (cloudfront, fastly, google)\n   -mrt, -match-response-time string  match response with specified response time in seconds (-mrt '< 1')\n   -mdc, -match-condition string      match response with dsl expression condition\n\nEXTRACTOR:\n   -er, -extract-regex string[]   display response content with matched regex\n   -ep, -extract-preset string[]  display response content matched by a pre-defined regex (url,ipv4,mail)\n\nFILTERS:\n   -fc, -filter-code string            filter response with specified status code (-fc 403,401)\n   -fep, -filter-error-page            filter response with ML based error page detection\n   -fd, -filter-duplicates             filter out near-duplicate responses (only first response is retained)\n   -fl, -filter-length string          filter response with specified content length (-fl 23,33)\n   -flc, -filter-line-count string     filter response body with specified line count (-flc 423,532)\n   -fwc, -filter-word-count string     filter response body with specified word count (-fwc 423,532)\n   -ffc, -filter-favicon string[]      filter response with specified favicon hash (-ffc 1494302000)\n   -fs, -filter-string string[]        filter response with specified string (-fs admin)\n   -fe, -filter-regex string[]         filter response with specified regex (-fe admin)\n   -fcdn, -filter-cdn string[]         filter host with specified cdn provider (cloudfront, fastly, google)\n   -frt, -filter-response-time string  filter response with specified response time in seconds (-frt '> 1')\n   -fdc, -filter-condition string      filter response with dsl expression condition\n   -strip                              strips all tags in response. supported formats: html,xml (default html)\n\nRATE-LIMIT:\n   -t, -threads int              number of threads to use (default 50)\n   -rl, -rate-limit int          maximum requests to send per second (default 150)\n   -rlm, -rate-limit-minute int  maximum number of requests to send per minute\n\nMISCELLANEOUS:\n   -pa, -probe-all-ips        probe all the ips associated with same host\n   -p, -ports string[]        ports to probe (nmap syntax: eg http:1,2-10,11,https:80)\n   -path string               path or list of paths to probe (comma-separated, file)\n   -tls-probe                 send http probes on the extracted TLS domains (dns_name)\n   -csp-probe                 send http probes on the extracted CSP domains\n   -tls-grab                  perform TLS(SSL) data grabbing\n   -pipeline                  probe and display server supporting HTTP1.1 pipeline\n   -http2                     probe and display server supporting HTTP2\n   -vhost                     probe and display server supporting VHOST\n   -ldv, -list-dsl-variables  list json output field keys name that support dsl matcher/filter\n\nUPDATE:\n   -up, -update                 update httpx to latest version\n   -duc, -disable-update-check  disable automatic httpx update check\n\nOUTPUT:\n   -o, -output string                     file to write output results\n   -oa, -output-all                       filename to write output results in all formats\n   -sr, -store-response                   store http response to output directory\n   -srd, -store-response-dir string       store http response to custom directory\n   -ob, -omit-body                        omit response body in output\n   -csv                                   store output in csv format\n   -csvo, -csv-output-encoding string     define output encoding\n   -j, -json                              store output in JSONL(ines) format\n   -irh, -include-response-header         include http response (headers) in JSON output (-json only)\n   -irr, -include-response                include http request/response (headers + body) in JSON output (-json only)\n   -irrb, -include-response-base64        include base64 encoded http request/response in JSON output (-json only)\n   -include-chain                         include redirect http chain in JSON output (-json only)\n   -store-chain                           include http redirect chain in responses (-sr only)\n   -svrc, -store-vision-recon-cluster     include visual recon clusters (-ss and -sr only)\n   -pr, -protocol string                  protocol to use (unknown, http11)\n   -fepp, -filter-error-page-path string  path to store filtered error pages (default \"filtered_error_page.json\")\n\nCONFIGURATIONS:\n   -config string                   path to the httpx configuration file (default $HOME/.config/httpx/config.yaml)\n   -r, -resolvers string[]          list of custom resolver (file or comma separated)\n   -allow string[]                  allowed list of IP/CIDR's to process (file or comma separated)\n   -deny string[]                   denied list of IP/CIDR's to process (file or comma separated)\n   -sni, -sni-name string           custom TLS SNI name\n   -random-agent                    enable Random User-Agent to use (default true)\n   -H, -header string[]             custom http headers to send with request\n   -http-proxy, -proxy string       http proxy to use (eg http://127.0.0.1:8080)\n   -unsafe                          send raw requests skipping golang normalization\n   -resume                          resume scan using resume.cfg\n   -fr, -follow-redirects           follow http redirects\n   -maxr, -max-redirects int        max number of redirects to follow per host (default 10)\n   -fhr, -follow-host-redirects     follow redirects on the same host\n   -rhsts, -respect-hsts            respect HSTS response headers for redirect requests\n   -vhost-input                     get a list of vhosts as input\n   -x string                        request methods to probe, use 'all' to probe all HTTP methods\n   -body string                     post body to include in http request\n   -s, -stream                      stream mode - start elaborating input targets without sorting\n   -sd, -skip-dedupe                disable dedupe input items (only used with stream mode)\n   -ldp, -leave-default-ports       leave default http/https ports in host header (eg. http://host:80 - https://host:443\n   -ztls                            use ztls library with autofallback to standard one for tls13\n   -no-decode                       avoid decoding body\n   -tlsi, -tls-impersonate          enable experimental client hello (ja3) tls randomization\n   -no-stdin                        Disable Stdin processing\n   -hae, -http-api-endpoint string  experimental http api endpoint\n\nDEBUG:\n   -health-check, -hc        run diagnostic check up\n   -debug                    display request/response content in cli\n   -debug-req                display request content in cli\n   -debug-resp               display response content in cli\n   -version                  display httpx version\n   -stats                    display scan statistic\n```\n\n----------------------------------------\n\nTITLE: Basic httpx Scanning Commands for HTTP Reconnaissance\nDESCRIPTION: A comprehensive set of httpx command examples showing various scanning options. These commands demonstrate how to use httpx for silent scanning, title extraction, status code checking, TLS information gathering, and more when performing web reconnaissance.\nSOURCE: https://github.com/projectdiscovery/httpx/blob/main/cmd/functional-test/testcases.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscanme.sh {{binary}} -silent \nscanme.sh {{binary}} -silent -l test-data/request.txt\nscanme.sh {{binary}} -silent -request test-data/raw-request.txt\nscanme.sh {{binary}} -silent -title\nscanme.sh {{binary}} -silent -sc\nscanme.sh {{binary}} -silent -td\nscanme.sh {{binary}} -silent -probe\nscanme.sh {{binary}} -silent -no-fallback\nscanme.sh {{binary}} -silent -cl\nscanme.sh {{binary}} -silent -server\nscanme.sh {{binary}} -silent -ip\nscanme.sh {{binary}} -silent -tls-grab\nscanme.sh {{binary}} -silent -unsafe\nscanme.sh {{binary}} -silent -x all\nscanme.sh {{binary}} -silent -body 'a=b'\nscanme.sh {{binary}} -silent -exclude cdn\nscanme.sh {{binary}} -silent -ports https:443\nscanme.sh {{binary}} -silent -ztls\nscanme.sh {{binary}} -silent -jarm\nhttps://scanme.sh?a=1*1 {{binary}} -silent\nhttps://scanme.sh:443 {{binary}} -asn\nscanme.sh {{binary}} -silent -tls-impersonate\nexample.com {{binary}} -silent -bp -strip\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic httpx Options in Go\nDESCRIPTION: This code snippet demonstrates how to use httpx as a library in Go by creating an Option struct and configuring it with CLI-equivalent options. It includes instructions for initializing a runner and executing the enumeration.\nSOURCE: https://github.com/projectdiscovery/httpx/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Example usage of httpx as a library\noptions := &runner.Options{\n    // Populate with CLI-equivalent options\n}\n\n// Validate the options\nif err := options.ValidateOptions(); err != nil {\n    return err\n}\n\n// Create the runner\nhttpxRunner, err := runner.New(options)\nif err != nil {\n    return err\n}\ndefer httpxRunner.Close()\n\n// Run the enumeration\nerr = httpxRunner.RunEnumeration()\n```\n\n----------------------------------------\n\nTITLE: Displaying Httpx Help Information in Shell\nDESCRIPTION: This command shows the help information for the httpx tool, displaying all available switches and options.\nSOURCE: https://github.com/projectdiscovery/httpx/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhttpx -h\n```\n\n----------------------------------------\n\nTITLE: Installing httpx with Go\nDESCRIPTION: Command to install the httpx tool using Go's package manager. Requires Go 1.21 or later for successful installation.\nSOURCE: https://github.com/projectdiscovery/httpx/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo install -v github.com/projectdiscovery/httpx/cmd/httpx@latest\n```\n\n----------------------------------------\n\nTITLE: HTTP/2 GET Request with Query Parameters\nDESCRIPTION: A simple HTTP/2 GET request to the '/search' endpoint with a 'q=test' query parameter. This demonstrates the basic format of an HTTP request line using HTTP/2 protocol.\nSOURCE: https://github.com/projectdiscovery/httpx/blob/main/cmd/functional-test/test-data/raw-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /search?q=test HTTP/2\n```"
  }
]