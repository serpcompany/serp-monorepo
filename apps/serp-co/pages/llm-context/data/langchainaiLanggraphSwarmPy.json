[
  {
    "owner": "langchain-ai",
    "repo": "langgraph-swarm-py",
    "content": "TITLE: Implementing Basic Multi-Agent Swarm\nDESCRIPTION: Complete example showing how to create a basic swarm with two agents (Alice and Bob) using LangGraph\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_openai import ChatOpenAI\n\nfrom langgraph.checkpoint.memory import InMemorySaver\nfrom langgraph.prebuilt import create_react_agent\nfrom langgraph_swarm import create_handoff_tool, create_swarm\n\nmodel = ChatOpenAI(model=\"gpt-4o\")\n\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\nalice = create_react_agent(\n    model,\n    [add, create_handoff_tool(agent_name=\"Bob\")],\n    prompt=\"You are Alice, an addition expert.\",\n    name=\"Alice\",\n)\n\nbob = create_react_agent(\n    model,\n    [create_handoff_tool(agent_name=\"Alice\", description=\"Transfer to Alice, she can help with math\")],\n    prompt=\"You are Bob, you speak like a pirate.\",\n    name=\"Bob\",\n)\n\ncheckpointer = InMemorySaver()\nworkflow = create_swarm(\n    [alice, bob],\n    default_active_agent=\"Alice\"\n)\napp = workflow.compile(checkpointer=checkpointer)\n\nconfig = {\"configurable\": {\"thread_id\": \"1\"}}\nturn_1 = app.invoke(\n    {\"messages\": [{\"role\": \"user\", \"content\": \"i'd like to speak to Bob\"}]},\n    config,\n)\nprint(turn_1)\nturn_2 = app.invoke(\n    {\"messages\": [{\"role\": \"user\", \"content\": \"what's 5 + 7?\"}]},\n    config,\n)\nprint(turn_2)\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory in Multi-Agent Swarm\nDESCRIPTION: Example showing how to add short-term and long-term memory to a swarm system using checkpointers and stores\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph.checkpoint.memory import InMemorySaver\nfrom langgraph.store.memory import InMemoryStore\n\n# short-term memory\ncheckpointer = InMemorySaver()\n# long-term memory\nstore = InMemoryStore()\n\nmodel = ...\nalice = ...\nbob = ...\n\nworkflow = create_swarm(\n    [alice, bob],\n    default_active_agent=\"Alice\"\n)\n\n# Compile with checkpointer/store\napp = workflow.compile(\n    checkpointer=checkpointer,\n    store=store\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Customer Support Tools and Agents\nDESCRIPTION: Defines mock data, search and booking tools for flights and hotels, and creates agents using LangGraph Swarm. It includes handoff tools for transferring control between agents and a checkpointer for maintaining conversation state.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport datetime\nfrom collections import defaultdict\nfrom typing import Callable\n\nfrom langchain_core.runnables import RunnableConfig\nfrom langgraph.checkpoint.memory import MemorySaver\nfrom langgraph.prebuilt import create_react_agent\nfrom langgraph_swarm import create_handoff_tool, create_swarm\n\n# Mock data for tools\nRESERVATIONS = defaultdict(lambda: {\"flight_info\": {}, \"hotel_info\": {}})\nTOMORROW = (datetime.date.today() + datetime.timedelta(days=1)).isoformat()\nFLIGHTS = [\n    {\n        \"departure_airport\": \"BOS\",\n        \"arrival_airport\": \"JFK\",\n        \"airline\": \"Jet Blue\",\n        \"date\": TOMORROW,\n        \"id\": \"1\",\n    }\n]\nHOTELS = [\n    {\n        \"location\": \"New York\",\n        \"name\": \"McKittrick Hotel\",\n        \"neighborhood\": \"Chelsea\",\n        \"id\": \"1\",\n    }\n]\n\n\n# Flight tools\ndef search_flights(\n    departure_airport: str,\n    arrival_airport: str,\n    date: str,\n) -> list[dict]:\n    \"\"\"Search flights.\n\n    Args:\n        departure_airport: 3-letter airport code for the departure airport. If unsure, use the biggest airport in the area\n        arrival_airport: 3-letter airport code for the arrival airport. If unsure, use the biggest airport in the area\n        date: YYYY-MM-DD date\n    \"\"\"\n    # return all flights for simplicity\n    return FLIGHTS\n\n\ndef book_flight(\n    flight_id: str,\n    config: RunnableConfig,\n) -> str:\n    \"\"\"Book a flight.\"\"\"\n    user_id = config[\"configurable\"].get(\"user_id\")\n    flight = [flight for flight in FLIGHTS if flight[\"id\"] == flight_id][0]\n    RESERVATIONS[user_id][\"flight_info\"] = flight\n    return \"Successfully booked flight\"\n\n\n# Hotel tools\ndef search_hotels(location: str) -> list[dict]:\n    \"\"\"Search hotels.\n\n    Args:\n        location: offical, legal city name (proper noun)\n    \"\"\"\n    # return all hotels for simplicity\n    return HOTELS\n\n\ndef book_hotel(\n    hotel_id: str,\n    config: RunnableConfig,\n) -> str:\n    \"\"\"Book a hotel\"\"\"\n    user_id = config[\"configurable\"].get(\"user_id\")\n    hotel = [hotel for hotel in HOTELS if hotel[\"id\"] == hotel_id][0]\n    RESERVATIONS[user_id][\"hotel_info\"] = hotel\n    return \"Successfully booked hotel\"\n\n\n# Handoff tools\ntransfer_to_hotel_assistant = create_handoff_tool(\n    agent_name=\"hotel_assistant\",\n    description=\"Transfer user to the hotel-booking assistant that can search for and book hotels.\",\n)\ntransfer_to_flight_assistant = create_handoff_tool(\n    agent_name=\"flight_assistant\",\n    description=\"Transfer user to the flight-booking assistant that can search for and book flights.\",\n)\n\n\n# Define agent prompt\ndef make_prompt(base_system_prompt: str) -> Callable[[dict, RunnableConfig], list]:\n    def prompt(state: dict, config: RunnableConfig) -> list:\n        user_id = config[\"configurable\"].get(\"user_id\")\n        current_reservation = RESERVATIONS[user_id]\n        system_prompt = (\n            base_system_prompt\n            + f\"\\n\\nUser's active reservation: {current_reservation}\"\n            + f\"Today is: {datetime.datetime.now()}\"\n        )\n        return [{\"role\": \"system\", \"content\": system_prompt}] + state[\"messages\"]\n\n    return prompt\n\n\n# Define agents\nflight_assistant = create_react_agent(\n    model,\n    [search_flights, book_flight, transfer_to_hotel_assistant],\n    prompt=make_prompt(\"You are a flight booking assistant\"),\n    name=\"flight_assistant\",\n)\n\nhotel_assistant = create_react_agent(\n    model,\n    [search_hotels, book_hotel, transfer_to_flight_assistant],\n    prompt=make_prompt(\"You are a hotel booking assistant\"),\n    name=\"hotel_assistant\",\n)\n\n# Compile and run!\ncheckpointer = MemorySaver()\nbuilder = create_swarm(\n    [flight_assistant, hotel_assistant], default_active_agent=\"flight_assistant\"\n)\n\n# Important: compile the swarm with a checkpointer to remember\n# previous interactions and last active agent\napp = builder.compile(checkpointer=checkpointer)\n```\n\n----------------------------------------\n\nTITLE: Implementing Joke Generation Graph\nDESCRIPTION: Creating a complete implementation of the joke generation system using LangGraph, including state management and conditional logic.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/src/agent/agent.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_core.messages import HumanMessage\nfrom langchain_openai import ChatOpenAI\nfrom langgraph.graph import END, START, StateGraph\nfrom typing_extensions import TypedDict\n\n\nclass State(TypedDict):\n    topic: str  # The topic provided by the user\n    joke: str  # The generated joke\n    has_punchline: bool  # Whether the joke has a punchline\n\n\ndef generate_joke(state: State):\n    \"\"\"Generate a joke with a punchline based on the provided topic.\"\"\"\n    llm = ChatOpenAI(model=\"gpt-3.5-turbo\")\n    prompt = f\"Create a joke about {state['topic']}. Format it with a setup followed by 'punchline:' and then the actual punchline.\"\n    response = llm.invoke([HumanMessage(content=prompt)])\n    return {\"joke\": response.content}\n\n\ndef check_punchline(state: State):\n    \"\"\"Check if the joke contains the word 'punchline'.\"\"\"\n    if \"punchline\" in state[\"joke\"].lower():\n        return {\"has_punchline\": True}\n    else:\n        return {\"has_punchline\": False}\n\n\ndef decide_next_step(state: State):\n    \"\"\"Decide whether to end the process.\"\"\"\n    if state[\"has_punchline\"]:\n        return \"end\"\n    else:\n        return \"end\"\n\n\ndef build_graph():\n    graph = StateGraph(State)\n    graph.add_node(\"generate_joke\", generate_joke)\n    graph.add_node(\"check_punchline\", check_punchline)\n    graph.add_edge(START, \"generate_joke\")\n    graph.add_edge(\"generate_joke\", \"check_punchline\")\n    graph.add_conditional_edges(\"check_punchline\", decide_next_step, {\"end\": END})\n    return graph.compile()\n\n\njoke_graph = build_graph()\nresult = joke_graph.invoke({\"topic\": \"cats\"})\n```\n\n----------------------------------------\n\nTITLE: Customizing Agent Implementation\nDESCRIPTION: Example showing how to customize agent implementation with custom state schema and state transformation\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import TypedDict, Annotated\n\nfrom langchain_core.messages import AnyMessage\nfrom langgraph.graph import StateGraph, add_messages\nfrom langgraph_swarm import SwarmState\n\nclass AliceState(TypedDict):\n    alice_messages: Annotated[list[AnyMessage], add_messages]\n\nalice = (\n    StateGraph(AliceState)\n    .add_node(\"model\", ...)\n    .add_node(\"tools\", ...)\n    .add_edge(...)\n    ...\n    .compile()\n)\n\ndef call_alice(state: SwarmState):\n    response = alice.invoke({\"alice_messages\": state[\"messages\"]})\n    return {\"messages\": response[\"alice_messages\"]}\n\ndef call_bob(state: SwarmState):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Handoff Tool\nDESCRIPTION: Example of creating a custom handoff tool with additional functionality like task description and state injection\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated\n\nfrom langchain_core.tools import tool, BaseTool, InjectedToolCallId\nfrom langchain_core.messages import ToolMessage\nfrom langgraph.types import Command\nfrom langgraph.prebuilt import InjectedState\n\ndef create_custom_handoff_tool(*, agent_name: str, name: str | None, description: str | None) -> BaseTool:\n\n    @tool(name, description=description)\n    def handoff_to_agent(\n        task_description: Annotated[str, \"Detailed description of what the next agent should do, including all of the relevant context.\"],\n        state: Annotated[dict, InjectedState],\n        tool_call_id: Annotated[str, InjectedToolCallId],\n    ):\n        tool_message = ToolMessage(\n            content=f\"Successfully transferred to {agent_name}\",\n            name=name,\n            tool_call_id=tool_call_id,\n        )\n        messages = state[\"messages\"]\n        return Command(\n            goto=agent_name,\n            graph=Command.PARENT,\n            update={\n                \"messages\": messages + [tool_message],\n                \"active_agent\": agent_name,\n                \"task_description\": task_description,\n            },\n        )\n\n    return handoff_to_agent\n```\n\n----------------------------------------\n\nTITLE: Creating and Executing Swarm Agents\nDESCRIPTION: Initializing planner and researcher agents, creating the swarm, and executing initial request for joke generation.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/src/agent/agent.ipynb#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph.checkpoint.memory import InMemorySaver\n\nplanner_agent = create_react_agent(\n    model,\n    prompt=planner_prompt_formatted,\n    tools=[fetch_doc, transfer_to_researcher_agent],\n    name=\"planner_agent\",\n)\n\nresearcher_agent = create_react_agent(\n    model,\n    prompt=researcher_prompt,\n    tools=[fetch_doc, transfer_to_planner_agent],\n    name=\"researcher_agent\",\n)\n\ncheckpointer = InMemorySaver()\nagent_swarm = create_swarm(\n    [planner_agent, researcher_agent], default_active_agent=\"planner_agent\"\n)\napp = agent_swarm.compile(checkpointer=checkpointer)\n\nrequest = \"Create a LangGraph application that is a prompt chain: it takes a topic from a user, generates a joke, and checks if the joke has a punchline.\"\nconfig = {\"configurable\": {\"thread_id\": \"1\"}}\nprint_stream(\n    app.stream(\n        {\"messages\": [{\"role\": \"user\", \"content\": request}]}, config, subgraphs=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Swarm Workflow\nDESCRIPTION: Example of manually creating a swarm workflow with custom agent implementations\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom langgraph_swarm import add_active_agent_router\n\nworkflow = (\n    StateGraph(SwarmState)\n    .add_node(\"Alice\", call_alice, destinations=(\"Bob\",))\n    .add_node(\"Bob\", call_bob, destinations=(\"Alice\",))\n)\nworkflow = add_active_agent_router(\n    builder=workflow,\n    route_to=[\"Alice\", \"Bob\"],\n    default_active_agent=\"Alice\",\n)\n\napp = workflow.compile()\n```\n\n----------------------------------------\n\nTITLE: Processing User Queries with LangGraph Swarm\nDESCRIPTION: Demonstrates the usage of the LangGraph Swarm application by processing user queries for flight and hotel bookings, showcasing agent interactions and handoffs.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprint_stream(\n    app.stream(\n        {\n            \"messages\": [\n                {\n                    \"role\": \"user\",\n                    \"content\": \"i am looking for a flight from boston to ny tomorrow\",\n                }\n            ]\n        },\n        config,\n        subgraphs=True,\n    )\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint_stream(\n    app.stream(\n        {\"messages\": [{\"role\": \"user\", \"content\": \"yes please\"}]},\n        config,\n        subgraphs=True,\n    )\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint_stream(\n    app.stream(\n        {\n            \"messages\": [\n                {\"role\": \"user\", \"content\": \"now i'd like to book a hotel as well\"}\n            ]\n        },\n        config,\n        subgraphs=True,\n    )\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint_stream(\n    app.stream(\n        {\"messages\": [{\"role\": \"user\", \"content\": \"yes please\"}]},\n        config,\n        subgraphs=True,\n    )\n)\n```\n\nLANGUAGE: python\nCODE:\n```\nprint_stream(\n    app.stream(\n        {\n            \"messages\": [\n                {\"role\": \"user\", \"content\": \"i wanna talk to flight assistant now\"}\n            ]\n        },\n        config,\n        subgraphs=True,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swarm Agents and Models\nDESCRIPTION: Setting up chat models, creating handoff tools, and configuring model parameters for both OpenAI and Anthropic models.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/src/agent/agent.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain.chat_models import init_chat_model\nfrom langgraph.prebuilt import create_react_agent\nfrom langgraph_swarm import create_handoff_tool, create_swarm\n\nmodel = init_chat_model(model=\"gpt-4o\", model_provider=\"openai\")\n\nmodel = init_chat_model(\n    model=\"claude-3-7-sonnet-latest\",\n    model_provider=\"anthropic\",\n    max_tokens=20_000,\n    thinking={\"type\": \"enabled\", \"budget_tokens\": 16_000},\n)\n\ntransfer_to_planner_agent = create_handoff_tool(\n    agent_name=\"planner_agent\",\n    description=\"Transfer the user to the planner_agent for clarifying questions related to the user's request.\",\n)\ntransfer_to_researcher_agent = create_handoff_tool(\n    agent_name=\"researcher_agent\",\n    description=\"Transfer the user to the researcher_agent to perform research and implement the solution to the user's request.\",\n)\n\nllms_txt = \"LangGraph:https://langchain-ai.github.io/langgraph/llms.txt\"\nnum_urls = 3\nplanner_prompt_formatted = planner_prompt.format(llms_txt=llms_txt, num_urls=num_urls)\n```\n\n----------------------------------------\n\nTITLE: Processing Follow-up Request\nDESCRIPTION: Handling a follow-up request with specific formatting requirements for the joke generation system.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/src/agent/agent.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nrequest = \"1. User will pass a topic. 2. Format the joke with 'setup:' and 'punchline:' 3. Just  py script. No UI or deployment. 4. Use OpenAI. 5. Format can be a string.\"\nprint_stream(\n    app.stream(\n        {\"messages\": [{\"role\": \"user\", \"content\": request}]}, config, subgraphs=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Stream Output Formatter\nDESCRIPTION: Defines a function to format and print the stream output from the chat application, handling various update types and message formats.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef print_stream(stream):\n    for ns, update in stream:\n        print(f\"Namespace '{ns}'\")\n        for node, node_updates in update.items():\n            if node_updates is None:\n                continue\n\n            if isinstance(node_updates, (dict, tuple)):\n                node_updates_list = [node_updates]\n            elif isinstance(node_updates, list):\n                node_updates_list = node_updates\n            else:\n                raise ValueError(node_updates)\n\n            for node_updates in node_updates_list:\n                print(f\"Update from node '{node}'\")\n                if isinstance(node_updates, tuple):\n                    print(node_updates)\n                    continue\n                messages_key = next(\n                    (k for k in node_updates.keys() if \"messages\" in k), None\n                )\n                if messages_key is not None:\n                    node_updates[messages_key][-1].pretty_print()\n                else:\n                    print(node_updates)\n\n        print(\"\\n\\n\")\n\n    print(\"\\n===\\n\")\n```\n\n----------------------------------------\n\nTITLE: Configuring User Session\nDESCRIPTION: Sets up a configuration dictionary with a unique thread ID and user ID for the chat session.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport uuid\n\nconfig = {\"configurable\": {\"thread_id\": str(uuid.uuid4()), \"user_id\": \"1\"}}\n```\n\n----------------------------------------\n\nTITLE: Initializing ChatOpenAI Model\nDESCRIPTION: Creates an instance of the ChatOpenAI model using the GPT-4 variant.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom langchain_openai import ChatOpenAI\n\nmodel = ChatOpenAI(model=\"gpt-4o\")\n```\n\n----------------------------------------\n\nTITLE: Running LangGraph Dev Server for Customer Support System\nDESCRIPTION: This command starts the LangGraph development server with specific configuration for the customer support system. It uses the inmem provider, sets Python version to 3.11, and includes the current directory as an editable package.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx --refresh --from \"langgraph-cli[inmem]\" --with-editable . --python 3.11 langgraph dev\n```\n\n----------------------------------------\n\nTITLE: Running LangGraph Development Server for Swarm Researcher Example\nDESCRIPTION: Command to start the LangGraph development server with the inmem module, using Python 3.11 and including editable dependencies. This allows running the swarm researcher example locally.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuvx --refresh --from \"langgraph-cli[inmem]\" --with-editable . --python 3.11 langgraph dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment for LangGraph Swarm\nDESCRIPTION: Installation of required packages and setting up OpenAI API key\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install langgraph-swarm langchain-openai\n\nexport OPENAI_API_KEY=<your_api_key>\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Graph Using Mermaid\nDESCRIPTION: Generates and displays a visual representation of the application graph using Mermaid.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndisplay(Image(app.get_graph().draw_mermaid_png()))\n```\n\n----------------------------------------\n\nTITLE: Importing Base Dependencies\nDESCRIPTION: Importing custom prompt templates and utility functions for the swarm system.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/src/agent/agent.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom prompts import planner_prompt, researcher_prompt\nfrom utils import fetch_doc, print_stream\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for API Keys\nDESCRIPTION: Sets up environment variables for Anthropic and OpenAI API keys, as well as LangSmith tracing configuration.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nos.environ[\"ANTHROPIC_API_KEY\"] = \"\"\nos.environ[\"OPENAI_API_KEY\"] = \"\"\n\n# turn on langsmith tracing\nos.environ[\"LANGSMITH_API_KEY\"] = \"\"\nos.environ[\"LANGSMITH_TRACING_V2\"] = \"true\"\n```\n\n----------------------------------------\n\nTITLE: Importing IPython Display Functions\nDESCRIPTION: Imports the Image and display functions from IPython.display for visualizing the application graph.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import Image, display\n```\n\n----------------------------------------\n\nTITLE: Installing LangGraph Swarm Package\nDESCRIPTION: Basic pip installation command for the langgraph-swarm library\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install langgraph-swarm\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installing necessary Python packages for LangGraph swarm implementation including LangChain adapters, OpenAI and Anthropic integrations.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/research/src/agent/agent.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n! pip install langchain-mcp-adapters langgraph \"langchain[anthropic]\" \"langchain[openai]\" langgraph-swarm httpx markdownify\n```\n\n----------------------------------------\n\nTITLE: Installing Required Libraries for LangGraph Swarm\nDESCRIPTION: Installs the necessary Python libraries for working with LangGraph Swarm, including langchain_openai, langgraph, and langgraph-swarm.\nSOURCE: https://github.com/langchain-ai/langgraph-swarm-py/blob/main/examples/customer_support/src/agent/customer_support.ipynb#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n! pip install langchain_openai langgraph langgraph-swarm\n```"
  }
]