[
  {
    "owner": "harishsg993010",
    "repo": "hawkinsdb",
    "content": "TITLE: Implementing Error Handling in HawkinsDB\nDESCRIPTION: Demonstrates proper error handling techniques for HawkinsDB operations, including handling validation errors and checking operation results.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import ValidationError\n\ntry:\n    # Add entity with validation\n    result = db.add_entity({\n        \"name\": \"Test\",\n        \"column\": \"Semantic\",\n        \"properties\": {\n            \"age\": \"42\"  # Will be converted to integer\n        }\n    })\n    \n    if result[\"success\"]:\n        print(f\"Added: {result['entity_name']}\")\n    else:\n        print(f\"Error: {result['message']}\")\n        \nexcept ValidationError as e:\n    print(f\"Validation error: {str(e)}\")\nexcept Exception as e:\n    print(f\"General error: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Basic HawkinsDB Usage Example\nDESCRIPTION: Demonstrates initializing HawkinsDB, storing knowledge with multiple perspectives using reference frames, and querying the database using natural language through LLM interface.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB, LLMInterface\n\n# Initialize\ndb = HawkinsDB()\nllm = LLMInterface(db)\n\n# Store knowledge with multiple perspectives\ndb.add_entity({\n    \"column\": \"Semantic\",\n    \"name\": \"Coffee Cup\",\n    \"properties\": {\n        \"type\": \"Container\",\n        \"material\": \"Ceramic\",\n        \"capacity\": \"350ml\"\n    },\n    \"relationships\": {\n        \"used_for\": [\"Drinking Coffee\", \"Hot Beverages\"],\n        \"found_in\": [\"Kitchen\", \"Coffee Shop\"]\n    }\n})\n\n# Query using natural language\nresponse = llm.query(\"What can you tell me about the coffee cup?\")\nprint(response)\n```\n\n----------------------------------------\n\nTITLE: Adding Semantic and Episodic Memories to HawkinsDB\nDESCRIPTION: Example demonstrating how to add semantic and episodic memories to the database, including property and relationship definitions. The semantic memory example adds information about a cat, while the episodic memory records an observation of a cat in a garden.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Add semantic memory\nsemantic_memory = {\n    \"name\": \"cat\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"animal\",\n        \"size\": \"medium\",\n        \"characteristics\": [\"furry\", \"agile\", \"carnivorous\"]\n    },\n    \"relationships\": {\n        \"habitat\": [\"homes\", \"outdoors\"],\n        \"behavior\": [\"hunting\", \"sleeping\", \"grooming\"]\n    }\n}\n\nresult = db.add_entity(semantic_memory)\nresponse = llm.query(\n    \"Explain the behaviours of cat\",\n)\n\n# Add episodic memory\nimport time\n\nepisodic_memory = {\n    \"name\": \"cat_observation\",\n    \"column\": \"Episodic\",\n    \"properties\": {\n        \"timestamp\": time.time(),\n        \"action\": \"Observed cat behavior\",\n        \"location\": \"Garden\",\n        \"details\": \"Cat was chasing a butterfly\"\n    },\n    \"relationships\": {\n        \"relates_to\": [\"cat\"],\n        \"observed_by\": [\"human\"]\n    }\n}\n\nresult = db.add_entity(episodic_memory)\n```\n\n----------------------------------------\n\nTITLE: Direct Entity Enrichment with ConceptNetEnricher in Python\nDESCRIPTION: Demonstrates how to initialize HawkinsDB and ConceptNetEnricher, add a basic entity, enrich it with common-sense knowledge, and query the enriched entity to view the added properties and relationships.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB, ConceptNetEnricher\n\n# Initialize\ndb = HawkinsDB()\nenricher = ConceptNetEnricher()\n\n# Add basic entity\nentity_data = {\n    \"name\": \"Dog\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"Animal\",\n        \"category\": \"Pet\"\n    }\n}\ndb.add_entity(entity_data)\n\n# Enrich the entity\nenriched_result = enricher.enrich_entity(db, \"Dog\", \"Animal\")\nprint(f\"Enrichment status: {enriched_result}\")\n\n# Query enriched entity\nenriched_dog = db.query_frames(\"Dog\")\nprint(\"Enriched properties:\", enriched_dog[\"Semantic\"].properties)\nprint(\"Enriched relationships:\", enriched_dog[\"Semantic\"].relationships)\n```\n\n----------------------------------------\n\nTITLE: Initializing LLM Interface in Python for HawkinsDB\nDESCRIPTION: This snippet demonstrates how to initialize the LLM Interface with HawkinsDB, including options for auto-enrichment and additional settings like confidence threshold and enrichment depth.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB, LLMInterface\n\n# Initialize database and LLM interface with auto-enrichment\ndb = HawkinsDB()\nllm = LLMInterface(db, auto_enrich=True)\n\n# Or initialize without auto-enrichment for more control\nllm_manual = LLMInterface(db, auto_enrich=False)\n\n# Configure additional settings (optional)\nllm = LLMInterface(\n    db,\n    auto_enrich=True,\n    confidence_threshold=0.7,  # Minimum confidence for accepting properties\n    max_enrichment_depth=2,    # Maximum depth for ConceptNet enrichment\n    validate_properties=True    # Enable strict property validation\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Entities from Text in Python using LLM Interface\nDESCRIPTION: This code snippet shows how to add an entity to HawkinsDB using natural language text through the LLM Interface. It demonstrates the process of converting unstructured text into a structured entity.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Add entity using natural language\nresult = llm.add_from_text(\"\"\"\n    A Tesla Model 3 is an electric car manufactured by Tesla. \n    It has autopilot capabilities, a glass roof, and typically comes \n    in various colors including red, white, and black.\n\"\"\")\n\nif result[\"success\"]:\n    print(f\"Added entity: {result['entity_name']}\")\n    print(f\"Enriched: {result['enriched']}\")\n```\n\n----------------------------------------\n\nTITLE: Querying with Natural Language in Python using LLM Interface\nDESCRIPTION: This snippet illustrates how to perform natural language queries on the HawkinsDB using the LLM Interface. It includes examples of general querying and specific entity querying with metadata.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Ask questions about stored entities\nresponse = llm.query(\"What features does the Tesla Model 3 have?\")\nprint(f\"Answer: {response['response']}\")\n\n# Query specific entity details\ndetails = llm.query_entity(\"Tesla_Model_3\", include_metadata=True)\nprint(f\"Entity details: {details}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Backend in HawkinsDB (Python)\nDESCRIPTION: Demonstrates how to initialize HawkinsDB, enable SQLite storage, and optionally set a custom storage path. This configuration should be done before any database operations.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB\n\n# Initialize database\ndb = HawkinsDB()\n\n# Enable SQLite storage\ndb.config.set_storage_backend('sqlite')\n\n# Optionally configure SQLite path (default: ./hawkins_memory.db)\ndb.config.set_storage_path('path/to/your/database.db')\n```\n\n----------------------------------------\n\nTITLE: Initializing HawkinsDB with SQLite Storage\nDESCRIPTION: Code snippet showing how to initialize HawkinsDB with SQLite storage backend and set up the LLM interface.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB , LLMInterface\n\n# Initialize with SQLite storage\ndb = HawkinsDB(storage_type=\"sqlite\", db_path=\"memory.db\")\nllm = LLMInterface(db)\n```\n\n----------------------------------------\n\nTITLE: Automatic Enrichment via LLM Interface in Python\nDESCRIPTION: Shows how to use HawkinsDB with LLMInterface to automatically enrich entities extracted from text. This example creates an entity from a description of a golden retriever and verifies the automatic enrichment.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB, LLMInterface\n\n# Initialize with auto-enrichment\ndb = HawkinsDB()\nllm = LLMInterface(db, auto_enrich=True)\n\n# Add entity with automatic enrichment\nresult = llm.add_from_text(\n    \"A golden retriever is a friendly dog breed known for its golden coat\"\n)\n\n# Verify enrichment\nif result[\"success\"]:\n    entity_name = result[\"entity_name\"]\n    enriched_data = db.query_frames(entity_name)\n    \n    # Print enriched properties\n    semantic_frame = enriched_data.get(\"Semantic\")\n    if semantic_frame:\n        print(\"Enriched properties:\", semantic_frame.properties)\n        print(\"Added relationships:\", semantic_frame.relationships)\n```\n\n----------------------------------------\n\nTITLE: Adding Entities to HawkinsDB with SQLite Backend (Python)\nDESCRIPTION: Shows how to add an entity with properties and relationships to the HawkinsDB using SQLite backend. This operation persists the data in the SQLite database.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nentity_data = {\n    \"name\": \"Tesla Model 3\",\n    \"properties\": {\n        \"color\": \"red\",\n        \"year\": 2023\n    },\n    \"relationships\": {\n        \"located_in\": [\"garage\"]\n    }\n}\n\nresult = db.add_entity(entity_data)\n```\n\n----------------------------------------\n\nTITLE: Querying Data from HawkinsDB with SQLite Backend (Python)\nDESCRIPTION: Demonstrates how to query frames for a specific entity and list all entities in the HawkinsDB using SQLite backend. These operations retrieve data from the persistent storage.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Get all frames for an entity\nframes = db.query_frames(\"Tesla Model 3\")\n\n# List all entities\nentities = db.list_entities()\n```\n\n----------------------------------------\n\nTITLE: Physical Characteristics Enrichment in Python\nDESCRIPTION: Demonstrates how to enrich an entity with physical attributes from ConceptNet. This example adds a car entity and then enriches it specifically with physical characteristics.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Example of physical characteristics enrichment\ncar_data = {\n    \"name\": \"Car\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Vehicle\"}\n}\ndb.add_entity(car_data)\nenricher.enrich_properties(db, \"Car\", [\"physical_attributes\"])\n```\n\n----------------------------------------\n\nTITLE: Question-Answering System in Python with LLM Interface\nDESCRIPTION: This snippet shows how to build a simple question-answering system using the LLM Interface. It demonstrates processing multiple questions and handling responses.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Build a simple QA system\ndef answer_questions(questions):\n    for question in questions:\n        response = llm.query(question)\n        if response[\"success\"]:\n            print(f\"Q: {question}\")\n            print(f\"A: {response['response']}\")\n        else:\n            print(f\"Could not answer: {question}\")\n\n# Example usage\nquestions = [\n    \"What programming languages are in the database?\",\n    \"What is Python used for?\",\n    \"Compare JavaScript and Java\"\n]\nanswer_questions(questions)\n```\n\n----------------------------------------\n\nTITLE: Using the LLM Interface with HawkinsDB\nDESCRIPTION: Shows how to initialize and use the LLM Interface to convert natural language to structured data and perform context-aware queries.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import HawkinsDB, LLMInterface\n\n# Initialize\ndb = HawkinsDB()\nllm = LLMInterface(\n    db,\n    auto_enrich=True,\n    confidence_threshold=0.7,\n    max_enrichment_depth=2\n)\n\n# Convert natural language to structured data\nresult = llm.add_from_text(\"\"\"\n    The respiratory system is responsible for taking in oxygen \n    and releasing carbon dioxide. Key organs include the lungs, \n    trachea, and diaphragm.\n\"\"\")\nprint(f\"Added entity: {result['entity_name']}\")\n\n# Complex querying with context\nresponse = llm.query(\n    \"What are the main components of the respiratory system?\",\n)\nprint(f\"Response: {response}\")\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Integrating ConceptNet for Knowledge Enrichment\nDESCRIPTION: Demonstrates how to use the ConceptNetEnricher to automatically enrich entity data with additional knowledge from ConceptNet.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import ConceptNetEnricher\n\n# Initialize\ndb = HawkinsDB()\nenricher = ConceptNetEnricher()\n\n# Add and enrich entity\nentity_data = {\n    \"name\": \"Dog\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"Animal\",\n        \"category\": \"Pet\"\n    }\n}\ndb.add_entity(entity_data)\nenriched_result = enricher.enrich_entity(db, \"Dog\", \"Animal\")\n```\n\n----------------------------------------\n\nTITLE: Knowledge Base Population in Python with LLM Interface\nDESCRIPTION: This code demonstrates how to use the LLM Interface to populate a knowledge base with multiple related entities. It shows batch processing of text descriptions to add entities.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Add multiple related entities\ndescriptions = [\n    \"Python is a high-level programming language known for its readability\",\n    \"JavaScript is a programming language used primarily for web development\",\n    \"Java is a widely-used object-oriented programming language\"\n]\n\nfor desc in descriptions:\n    result = llm.add_from_text(desc)\n    if result[\"success\"]:\n        print(f\"Added programming language: {result['entity_name']}\")\n```\n\n----------------------------------------\n\nTITLE: Batch Enrichment of Multiple Entities in Python\nDESCRIPTION: Shows how to efficiently enrich multiple related entities in a batch. This approach is more efficient than enriching entities individually, especially when working with a group of similar entities.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Enrich multiple related entities\nentities = [\"Dog\", \"Cat\", \"Hamster\"]\nentity_type = \"Pet\"\n\nfor entity in entities:\n    enricher.enrich_entity(db, entity, entity_type)\n```\n\n----------------------------------------\n\nTITLE: Behavior Information Enrichment in Python\nDESCRIPTION: Shows how to enrich an entity with behavioral characteristics from ConceptNet. This example adds a cat entity and then specifically enriches it with common behaviors.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Enriching with behavior information\nanimal_data = {\n    \"name\": \"Cat\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Pet\"}\n}\ndb.add_entity(animal_data)\nenricher.enrich_properties(db, \"Cat\", [\"behaviors\"])\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Python with LLM Interface\nDESCRIPTION: This snippet illustrates best practices for error handling when using the LLM Interface. It shows how to catch and handle exceptions, as well as checking the success status of operations.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    result = llm.add_from_text(text_description)\n    if result[\"success\"]:\n        print(f\"Added: {result['entity_name']}\")\n        if result[\"enriched\"]:\n            print(\"Entity was enriched with ConceptNet data\")\n    else:\n        print(f\"Error: {result['message']}\")\nexcept Exception as e:\n    print(f\"Error processing text: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Enricher with Confidence Thresholds in Python\nDESCRIPTION: Shows how to create a custom enricher by extending the ConceptNetEnricher class. This implementation sets a minimum confidence threshold and provides custom filtering logic for ConceptNet relations.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb import ConceptNetEnricher\n\nclass CustomEnricher(ConceptNetEnricher):\n    def __init__(self):\n        super().__init__()\n        self.min_confidence = 0.7  # Set minimum confidence threshold\n        \n    def filter_relations(self, relations):\n        \"\"\"Custom filtering of ConceptNet relations\"\"\"\n        return [r for r in relations if r.weight >= self.min_confidence]\n```\n\n----------------------------------------\n\nTITLE: Confidence-based Filtering with Custom Enricher in Python\nDESCRIPTION: Demonstrates how to implement confidence-based filtering by creating a custom enricher that extends ConceptNetEnricher. This implementation sets a minimum confidence threshold and filters relations accordingly.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Example of confidence-based filtering\nclass CustomEnricher(ConceptNetEnricher):\n    def __init__(self):\n        super().__init__()\n        self.min_confidence = 0.7  # Set minimum confidence threshold\n        \n    def filter_relations(self, relations):\n        \"\"\"Custom filtering of ConceptNet relations\"\"\"\n        return [r for r in relations if r.weight >= self.min_confidence]\n```\n\n----------------------------------------\n\nTITLE: Querying Memories in HawkinsDB\nDESCRIPTION: Shows how to retrieve specific entities from the database and list all stored entities.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Query specific entity\ncat_info = db.query_frames(\"cat\")\n\n# List all entities\nentities = db.list_entities()\n```\n\n----------------------------------------\n\nTITLE: Enriching a Technical Concept in Python\nDESCRIPTION: Shows how to add and enrich a technical concept (laptop) using ConceptNet. This example adds a laptop entity with basic properties and then enriches it with additional knowledge from ConceptNet.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Add and enrich a technical concept\ncomputer_data = {\n    \"name\": \"Laptop\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"Computer\",\n        \"category\": \"Device\"\n    }\n}\ndb.add_entity(computer_data)\nenricher.enrich_entity(db, \"Laptop\", \"Computer\")\n```\n\n----------------------------------------\n\nTITLE: Enriching a Natural Concept in Python\nDESCRIPTION: Demonstrates how to add and enrich a natural concept (oak tree) using ConceptNet. This example adds an oak tree entity with basic properties and then enriches it with additional knowledge.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Add and enrich a natural concept\ntree_data = {\n    \"name\": \"Oak_Tree\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"Tree\",\n        \"category\": \"Plant\"\n    }\n}\ndb.add_entity(tree_data)\nenricher.enrich_entity(db, \"Oak_Tree\", \"Tree\")\n```\n\n----------------------------------------\n\nTITLE: Enriching an Abstract Concept in Python\nDESCRIPTION: Shows how to add and enrich an abstract concept (happiness) using ConceptNet. This example adds a happiness entity with basic properties and then enriches it with additional knowledge about this emotion.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Add and enrich an abstract concept\nconcept_data = {\n    \"name\": \"Happiness\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"Emotion\",\n        \"category\": \"Feeling\"\n    }\n}\ndb.add_entity(concept_data)\nenricher.enrich_entity(db, \"Happiness\", \"Emotion\")\n```\n\n----------------------------------------\n\nTITLE: HasA Relationship Discovery in Python\nDESCRIPTION: Shows how to discover and add part-whole relationships from ConceptNet. This example adds a car entity and then enriches it with HasA relationships to identify its component parts.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Discovering part-whole relationships\ncar_data = {\n    \"name\": \"Car\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Vehicle\"}\n}\ndb.add_entity(car_data)\nenricher.enrich_relationships(db, \"Car\", relationship_types=[\"HasA\"])\n```\n\n----------------------------------------\n\nTITLE: CapableOf Relationship Discovery in Python\nDESCRIPTION: Demonstrates how to discover and add capability relationships from ConceptNet. This example adds a robot entity and then enriches it with CapableOf relationships to identify its potential actions.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Finding capability relationships\nrobot_data = {\n    \"name\": \"Robot\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Machine\"}\n}\ndb.add_entity(robot_data)\nenricher.enrich_relationships(db, \"Robot\", relationship_types=[\"CapableOf\"])\n```\n\n----------------------------------------\n\nTITLE: UsedFor Relationship Discovery in Python\nDESCRIPTION: Shows how to discover and add utility relationships from ConceptNet. This example adds a screwdriver entity and then enriches it with UsedFor relationships to identify its purposes.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Discovering utility relationships\ntool_data = {\n    \"name\": \"Screwdriver\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Tool\"}\n}\ndb.add_entity(tool_data)\nenricher.enrich_relationships(db, \"Screwdriver\", relationship_types=[\"UsedFor\"])\n```\n\n----------------------------------------\n\nTITLE: IsA Relationship Discovery in Python\nDESCRIPTION: Demonstrates how to discover and add IsA relationships from ConceptNet. This example adds a laptop entity and then enriches it specifically with IsA relationships to determine its classifications.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Example of IsA relationship discovery\ncomputer_data = {\n    \"name\": \"Laptop\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"Device\",\n        \"manufacturer\": \"Generic\"\n    }\n}\ndb.add_entity(computer_data)\nenricher.enrich_relationships(db, \"Laptop\", relationship_types=[\"IsA\"])\n```\n\n----------------------------------------\n\nTITLE: Property Validation in Python with LLM Interface\nDESCRIPTION: This code demonstrates the automatic property validation feature of the LLM Interface. It shows how properties are validated and properly typed when adding entities from text.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# The LLM interface automatically validates properties\nresult = llm.add_from_text(\"\"\"\n    The speed of light is approximately 299,792,458 meters per second.\n    It is a fundamental physical constant represented by 'c'.\n\"\"\")\n\n# Properties are validated and properly typed\nprint(result[\"entity_data\"][\"properties\"])\n```\n\n----------------------------------------\n\nTITLE: Confidence Scoring in Python with LLM Interface\nDESCRIPTION: This snippet shows how to retrieve and check confidence scores for entity properties using the LLM Interface. It demonstrates querying with metadata to access confidence information.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Query with metadata to see confidence scores\nresponse = llm.query_entity(\n    \"Speed_of_Light\",\n    include_metadata=True\n)\n\n# Check confidence scores for properties\nfor prop, value in response[\"data\"][\"Semantic\"][\"properties\"].items():\n    print(f\"{prop}: {value[0]['confidence']}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Storage Backend in HawkinsDB\nDESCRIPTION: Demonstrates how to initialize HawkinsDB with a custom SQLite path and perform basic database operations with error handling.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Initialize with custom SQLite path\ndb = HawkinsDB(\n    storage_type=\"sqlite\",\n    db_path=\"custom_path/memory.db\"\n)\n\n# Basic operations\ntry:\n    # Add entity\n    result = db.add_entity(entity_data)\n    \n    # Query data\n    frames = db.query_frames(\"entity_name\")\n    \n    # Cleanup\n    db.cleanup()  # Close connections\nexcept Exception as e:\n    print(f\"Storage error: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Selective Property Enrichment in Python\nDESCRIPTION: Demonstrates how to enrich only specific properties of an entity rather than performing comprehensive enrichment. This targeted approach can improve performance and focus enrichment on the most relevant aspects.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Enrich specific properties\nenricher.enrich_properties(\n    db,\n    entity_name=\"Car\",\n    properties=[\"parts\", \"capabilities\", \"location\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Location-based Enrichment in Python\nDESCRIPTION: Demonstrates how to enrich an entity with location information from ConceptNet. This example adds a hammer entity and then enriches it with typical locations where it might be found.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Location-based enrichment\ntool_data = {\n    \"name\": \"Hammer\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Tool\"}\n}\ndb.add_entity(tool_data)\nenricher.enrich_properties(db, \"Hammer\", [\"locations\"])\n```\n\n----------------------------------------\n\nTITLE: Concept Relationship Enrichment in Python\nDESCRIPTION: Shows how to enrich an entity with related concepts from ConceptNet. This example adds an apple entity and then enriches it with conceptually related information.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Concept relationship enrichment\nfruit_data = {\n    \"name\": \"Apple\",\n    \"column\": \"Semantic\",\n    \"properties\": {\"type\": \"Fruit\"}\n}\ndb.add_entity(fruit_data)\nenricher.enrich_properties(db, \"Apple\", [\"related_concepts\"])\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Entity Enrichment in Python\nDESCRIPTION: Demonstrates comprehensive error handling for the enrichment process. This example shows how to handle errors, verify successful enrichment, and extract the enriched properties and relationships.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    enriched = enricher.enrich_entity(db, entity_name, entity_type)\n    if enriched:\n        print(\"Successfully enriched entity\")\n        \n        # Verify enrichment\n        result = db.query_frames(entity_name)\n        if result:\n            semantic_frame = result.get(\"Semantic\")\n            if semantic_frame:\n                print(\"Enriched properties:\", semantic_frame.properties)\n                print(\"Enriched relationships:\", semantic_frame.relationships)\n    else:\n        print(\"No enrichment data found\")\n        \nexcept Exception as e:\n    print(f\"Error during enrichment: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Semantic Memory Data Structure\nDESCRIPTION: Demonstrates how to structure semantic memory data for photosynthesis, including its properties and relationships with other concepts.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nsemantic_data = {\n    \"name\": \"Photosynthesis\",\n    \"column\": \"Semantic\",\n    \"properties\": {\n        \"type\": \"biological_process\",\n        \"location\": \"plant_cells\",\n        \"components\": [\"chlorophyll\", \"sunlight\", \"water\", \"carbon_dioxide\"],\n        \"products\": [\"glucose\", \"oxygen\"]\n    },\n    \"relationships\": {\n        \"occurs_in\": [\"plants\", \"algae\"],\n        \"requires\": [\"light_energy\", \"chloroplasts\"],\n        \"produces\": [\"chemical_energy\", \"organic_compounds\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Episodic Memory Data Structure\nDESCRIPTION: Shows how to structure episodic memory data for a programming experience, including temporal information and relationships to other events.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nepisodic_data = {\n    \"name\": \"first_python_project\",\n    \"column\": \"Episodic\",\n    \"properties\": {\n        \"timestamp\": time.time(),\n        \"duration\": \"2 hours\",\n        \"location\": \"home_office\",\n        \"outcome\": \"successful\"\n    },\n    \"relationships\": {\n        \"involves\": [\"Python_Language\"],\n        \"followed_by\": [\"code_review\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in HawkinsDB Operations (Python)\nDESCRIPTION: Illustrates proper error handling for database operations in HawkinsDB. It catches and differentiates between data validation errors and general storage errors.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    result = db.add_entity(entity_data)\nexcept ValueError as e:\n    print(f\"Invalid data: {str(e)}\")\nexcept Exception as e:\n    print(f\"Storage error: {str(e)}\")\n```\n\n----------------------------------------\n\nTITLE: Bulk Operations in HawkinsDB with SQLite Backend (Python)\nDESCRIPTION: Shows how to perform bulk operations by adding multiple entities in a loop. This approach is useful for inserting large amounts of data efficiently.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nentities = [\n    {\"name\": \"Entity1\", \"properties\": {...}},\n    {\"name\": \"Entity2\", \"properties\": {...}}\n]\n\nfor entity in entities:\n    db.add_entity(entity)\n```\n\n----------------------------------------\n\nTITLE: Custom Entity Processing in Python with LLM Interface\nDESCRIPTION: This code snippet demonstrates how to create a custom LLM Interface by subclassing the base class and overriding the property processing method. It allows for custom logic in entity processing.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb.llm_interface import LLMInterface\n\nclass CustomLLMInterface(LLMInterface):\n    def _process_properties(self, properties):\n        \"\"\"Custom property processing\"\"\"\n        processed = super()._process_properties(properties)\n        # Add custom processing logic\n        return processed\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Queries with SQLite Backend in HawkinsDB (Python)\nDESCRIPTION: Demonstrates how to execute custom SQL queries using the SQLite storage backend. This allows for more flexible and specific data retrieval or manipulation.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom hawkinsdb.storage import get_storage_backend\n\nstorage = get_storage_backend('sqlite')\nstorage.execute_query(\"SELECT * FROM entities WHERE name LIKE ?\", (\"%Tesla%\",))\n```\n\n----------------------------------------\n\nTITLE: Multiple Source Validation for Enrichment in Python\nDESCRIPTION: Shows how to configure the ConceptNetEnricher to require multiple sources for validation. This approach ensures higher quality enrichment by only accepting information confirmed by multiple sources.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Enrichment with multiple sources\nenricher = ConceptNetEnricher(\n    validate_sources=True,\n    min_sources=2\n)\nenricher.enrich_entity(db, \"Computer\", \"Device\")\n```\n\n----------------------------------------\n\nTITLE: Context-Aware Enrichment in Python\nDESCRIPTION: Demonstrates how to perform context-aware enrichment by specifying a domain when initializing the ConceptNetEnricher. This focuses the enrichment on information relevant to a specific context or domain.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/conceptnet_guide.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Context-aware enrichment\nenricher = ConceptNetEnricher(\n    context_aware=True,\n    domain=\"technology\"\n)\nenricher.enrich_entity(db, \"Smartphone\", \"Device\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up HawkinsDB Resources (Python)\nDESCRIPTION: Shows how to properly close database connections and free resources when finished using HawkinsDB. This is important for preventing resource leaks and database locks.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/sqlite_backend.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndb.cleanup()  # Closes connections and frees resources\n```\n\n----------------------------------------\n\nTITLE: Automated Documentation in Python with LLM Interface\nDESCRIPTION: This code snippet demonstrates how to use the LLM Interface to generate structured documentation from text descriptions. It includes adding system descriptions and querying for specific aspects.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Generate structured documentation from text\ndef document_system(description):\n    # Add system description\n    result = llm.add_from_text(description)\n    if not result[\"success\"]:\n        return False\n        \n    # Query for important aspects\n    components = llm.query(\"What are the main components?\")\n    features = llm.query(\"What are the key features?\")\n    requirements = llm.query(\"What are the system requirements?\")\n    \n    return {\n        \"components\": components[\"response\"],\n        \"features\": features[\"response\"],\n        \"requirements\": requirements[\"response\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: API Reference for LLM Interface in Python\nDESCRIPTION: This snippet provides an API reference for the main methods of the LLM Interface class. It includes method signatures for adding entities, querying, and retrieving entity details.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/llm_interface_guide.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef add_entity(self, entity_json: Union[str, Dict]) -> Dict[str, Any]:\n    \"\"\"Add entity from structured data\"\"\"\n    \ndef add_from_text(self, text: str) -> Dict[str, Any]:\n    \"\"\"Add entity from natural language text\"\"\"\n    \ndef query(self, question: str) -> Dict[str, Any]:\n    \"\"\"Answer questions about entities\"\"\"\n    \ndef query_entity(self, name: str, include_metadata: bool = False) -> Dict[str, Any]:\n    \"\"\"Query specific entity details\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom ConceptNet Enricher\nDESCRIPTION: Shows how to extend the base ConceptNetEnricher class to create a custom enricher with specific filtering capabilities.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CustomEnricher(ConceptNetEnricher):\n    def __init__(self):\n        super().__init__()\n        self.min_confidence = 0.7\n        \n    def filter_relations(self, relations):\n        return [r for r in relations if r.weight >= self.min_confidence]\n\n# Use custom enricher\ncustom_enricher = CustomEnricher()\ncustom_enricher.enrich_entity(db, \"Dog\", \"Animal\")\n```\n\n----------------------------------------\n\nTITLE: Installing HawkinsDB via pip\nDESCRIPTION: Command to install the HawkinsDB package using pip package manager.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install hawkinsdb\n```\n\n----------------------------------------\n\nTITLE: Installing HawkinsDB Package using pip\nDESCRIPTION: Commands for installing HawkinsDB with different feature sets using pip package manager. Includes basic installation, full feature installation, and specific feature installation options.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Basic installation\npip install hawkinsdb\n\n# Recommended installation with all features\npip install hawkinsdb[all]\n\n# Install specific features\npip install hawkinsdb[conceptnet]  # ConceptNet tools\n```\n\n----------------------------------------\n\nTITLE: Development Setup for HawkinsDB\nDESCRIPTION: Instructions for setting up a development environment for HawkinsDB, including cloning the repository, installing development dependencies, and running tests.\nSOURCE: https://github.com/harishsg993010/hawkinsdb/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Clone and set up\ngit clone https://github.com/your-username/hawkinsdb.git\ncd hawkinsdb\npip install -e \".[dev]\"\npytest tests/\n```"
  }
]