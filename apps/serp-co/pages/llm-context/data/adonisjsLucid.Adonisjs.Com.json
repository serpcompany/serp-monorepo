[
  {
    "owner": "adonisjs",
    "repo": "lucid.adonisjs.com",
    "content": "TITLE: Creating a Record with Instance Methods in Lucid ORM\nDESCRIPTION: This example shows how to create a new record by first creating a model instance, assigning values to its properties, and then calling the 'save' method to persist it to the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nconst user = new User()\n\n// Assign username and email\nuser.username = 'virk'\nuser.email = 'virk@adonisjs.com'\n\n// Insert to the database\nawait user.save()\n\nconsole.log(user.$isPersisted) // true\n```\n\n----------------------------------------\n\nTITLE: Using Transactions in TypeScript with AdonisJS Lucid\nDESCRIPTION: Shows how to use the useTransaction method to wrap a query inside a database transaction. This is useful for ensuring data consistency across multiple operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await db.transaction()\n\ndb\n  .from('users')\n  .useTransaction(trx) // ðŸ‘ˆ\n  .where('id', 1)\n  .update({ email: 'virk@adonisjs.com' })\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreate Method in Lucid ORM\nDESCRIPTION: This example shows how to use 'updateOrCreate' to either create a new record or update an existing one. It requires search criteria and the attributes to insert or update.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\n// User.updateOrCreate(searchPayload, persistancePayload)\nawait User.updateOrCreate(\n  { email: 'virk@adonisjs.com' },\n  { password: 'secret' }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Record with the Create Method in Lucid ORM\nDESCRIPTION: This snippet demonstrates how to create and persist a new record to the database using the static 'create' method of a Lucid model. It returns a model instance with the $isPersisted property set to true.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\nconst user = await User.create({\n  username: 'virk',\n  email: 'virk@adonisjs.com',\n})\n\nconsole.log(user.$isPersisted) // true\n```\n\n----------------------------------------\n\nTITLE: Updating a Record with Save Method in Lucid ORM\nDESCRIPTION: This snippet demonstrates the standard approach for updating records: finding the record first, modifying its properties, and then calling 'save' to persist the changes to the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\n\nuser.lastLoginAt = DateTime.local() // Luxon dateTime is used\n\nawait user.save()\n```\n\n----------------------------------------\n\nTITLE: Finding a Record by Primary Key in Lucid ORM\nDESCRIPTION: This example demonstrates how to find a record using its primary key with the 'find' method. It returns a model instance if found, or null if no matching record exists.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n// SQL: SELECT * from \"users\" WHERE \"id\" = 1 LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Preloading Nested Relationships in AdonisJS Lucid\nDESCRIPTION: Demonstrates how to preload deeply nested relationships by chaining preload calls within callback functions, retrieving a complex data structure in a single query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('posts', (postsQuery) => {\n  postsQuery.preload('comments', (commentsQuery) => {\n    commentsQuery.preload('user')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Persisting New Model with Relationships in a Transaction\nDESCRIPTION: Demonstrates creating a new user and their profile in a single transaction. This ensures that both records are either committed together or rolled back if an error occurs, maintaining data integrity.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport User from '#models/user'\n\nawait db.transaction(async (trx) => {\n  const user = new User()\n  user.username = 'virk'\n\n  user.useTransaction(trx)\n  await user.save()\n\n  /**\n   * The relationship will implicitly reference the\n   * transaction from the user instance\n   */\n  await user.related('profile').create({\n    fullName: 'Harminder Virk',\n    avatar: 'some-url.jpg',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting a Single Record with the Insert Query Builder\nDESCRIPTION: Demonstrates how to insert a single record into a database table using the insert method. For PostgreSQL, MSSQL, and Oracle, the returning method is used to fetch the ID of the inserted row.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .table('users')\n  .returning('id')\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing with beforeSave Hook in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the beforeSave hook to automatically hash a user's password before saving it to the database. It checks if the password has been modified and only hashes it if necessary.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\nimport { column, beforeSave, BaseModel } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare email: string\n\n  @column()\n  declare password: string\n\n  @beforeSave()\n  static async hashPassword(user: User) {\n    if (user.$dirty.password) {\n      user.password = await hash.make(user.password)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Records with CreateMany Method in Lucid ORM\nDESCRIPTION: This example demonstrates how to create multiple model instances at once using the 'createMany' method. It issues one insert query for each model instance to ensure lifecycle hooks are executed for every instance.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.createMany([\n  {\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  },\n  {\n    email: 'romain@adonisjs.com',\n    password: 'secret',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction in Lucid ORM\nDESCRIPTION: Initializes a new database transaction using the Lucid ORM's db service. This creates a transaction object that can be used for subsequent database operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nconst trx = await db.transaction()\n```\n\n----------------------------------------\n\nTITLE: Applying Query Scopes in AdonisJS Lucid ORM\nDESCRIPTION: Demonstrates how to define and use query scopes with the withScopes method in AdonisJS Lucid ORM.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\nimport { scope } from '@adonisjs/lucid/orm'\n\nexport default class Team extends BaseModel {\n\n  public static forUser = scope((query, user: User) => {\n    const subQuery = Database\n      .from('user_teams')\n      .select('team_id')\n      .where('user_teams.user_id', user.id)\n\n    query.whereIn('id', subQuery)\n  })\n\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nTeam\n  .query()\n  .withScopes((scopes) => scopes.forUser(auth.user))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nTeam\n  .query()\n  .apply((scopes) => scopes.forUser(auth.user))\n```\n\n----------------------------------------\n\nTITLE: Basic Lucid Model Structure in TypeScript\nDESCRIPTION: Example of a basic Lucid model with primary key and timestamp columns, showing the essential structure of a model class.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Using beforeSave Hook for Password Hashing in TypeScript\nDESCRIPTION: This snippet shows how to implement a beforeSave hook to hash a user's password before saving it to the database. It uses the $dirty property to check if the password has been modified.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeSave } from '@adonisjs/lucid/orm'\n\nclass User extends BaseModel {\n  @beforeSave()\n  static async hashPassword(user: User) {\n    if (user.$dirty.password) {\n      user.password = await Hash.make(user.password)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Cascade Deletion in Migration for AdonisJS\nDESCRIPTION: Demonstrates how to configure a foreign key constraint with an onDelete CASCADE action in a database migration. This setup ensures that when a parent record is deleted, all related child records are automatically deleted as well.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable(this.tableName, (table) => {\n  table.increments('id')\n  table\n    .integer('user_id')\n    .unsigned()\n    .references('users.id')\n    // highlight-start\n    .onDelete('CASCADE')\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Relationship in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Shows how to define a many-to-many relationship between User and Skill models using the @manyToMany decorator. This enables managing skills associated with a user through a pivot table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport Skill from '#models/skill'\nimport type { ManyToMany } from '@adonisjs/lucid/types/relations'\nimport { column, BaseModel, manyToMany } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  // highlight-start\n  @manyToMany(() => Skill)\n  declare skills: ManyToMany<typeof Skill>\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive User Model Definition in TypeScript\nDESCRIPTION: A complete example of a User model with various column types, including primary key, regular fields, hidden fields, and timestamps.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare username: string\n\n  @column()\n  declare email: string\n\n  @column({ serializeAs: null })\n  declare password: string\n\n  @column()\n  declare avatarUrl: string | null\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering by Related Records in AdonisJS Lucid ORM\nDESCRIPTION: Demonstrates the use of has and whereHas methods to filter parent model rows based on the existence of related records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().has('posts')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().has('posts', '>=', 2)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().whereHas('posts', (postsQuery) => {\n  postsQuery.where('status', 'published')\n})\n```\n\n----------------------------------------\n\nTITLE: Using withCount for Relationship Counting in Lucid ORM\nDESCRIPTION: Shows how to use the withCount method, a simplified version of withAggregate specifically for counting related records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().withCount('comments')\n\nposts.forEach((post) => {\n  console.log(post.$extras.comments_count)\n})\n```\n\n----------------------------------------\n\nTITLE: Using OrFail Variations for Finding Records in Lucid ORM\nDESCRIPTION: This example shows how to use the 'orFail' variations of find methods which raise an exception with a 404 status code when no matching row is found, instead of returning null.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\nconst user = await User.firstOrFail()\nconst user = await User.findByOrFail('email', 'virk@adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: Using Query Builder with Lucid ORM Models\nDESCRIPTION: This snippet demonstrates how to use the query builder API for more complex database queries. The ModelQueryBuilder returns an array of model instances rather than plain JavaScript objects.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query()\n  .where('countryCode', 'IN')\n  .orWhereNull('countryCode')\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreateMany Method with Multiple Keys in Lucid ORM\nDESCRIPTION: This example shows how to use 'updateOrCreateMany' with multiple keys to find duplicates. If a row exists with the same combination of keys, it will be updated; otherwise, a new row will be created.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\n// User.updateOrCreateMany(keys, arrayOfObjects)\nawait User.updateOrCreateMany(['email', 'username'], [\n  {\n    email: 'foo@example.com',\n    username: 'foo',\n  },\n  {\n    email: 'bar@example.com',\n    username: 'bar',\n  },\n  {\n    email: 'baz@example.com',\n    username: 'baz',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Using Fill Method to Create a Record in Lucid ORM\nDESCRIPTION: This snippet shows how to use the 'fill' method to assign multiple attributes to a model at once and then save it to the database. This approach combines property assignment with the save operation in a fluent interface.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nconst user = new User()\n\n// Assign username and email using the fill method and then save\nawait user\n  .fill({ username: 'virk', email: 'virk@adonisjs.com' })\n  .save()\n\nconsole.log(user.$isPersisted) // true\n```\n\n----------------------------------------\n\nTITLE: Using firstOrCreate Method in Lucid ORM\nDESCRIPTION: This example shows how to use the 'firstOrCreate' method to search for a record and create it only if it doesn't exist. It accepts search criteria and attributes to save when creating a new record.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\n// User.firstOrCreate(searchPayload, savePayload)\nawait User.firstOrCreate(\n  { email: 'virk@adonisjs.com' },\n  { password: 'secret' }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Records in TypeScript using AdonisJS Lucid\nDESCRIPTION: Demonstrates how to use the first and firstOrFail methods to retrieve a single record from a database query. These methods are useful for queries that are expected to return a single result.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await db\n  .from('users')\n  .where('id', 1)\n  .first()\n\nif (user) {\n  console.log(user.id)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await db\n  .from('users')\n  .where('id', 1)\n  .firstOrFail()\n```\n\n----------------------------------------\n\nTITLE: Configuring Pretty Printing for Debug Queries\nDESCRIPTION: This snippet shows how to enable pretty printing of debug queries by setting the 'prettyPrintDebugQueries' flag to true in the database configuration. This automatically registers an event listener that prints SQL queries to the console in a readable format.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/debugging.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/database.ts\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/lucid'\n\nconst dbConfig = defineConfig({\n  // highlight-start\n  prettyPrintDebugQueries: true,\n  // highlight-end\n  connection: 'postgres',\n  connections: {\n    postgres: {\n      client: 'pg',\n      connection: {\n        // ...\n      },\n      debug: true\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using fetchOrCreateMany Method in Lucid ORM\nDESCRIPTION: This snippet demonstrates how to use 'fetchOrCreateMany' to create multiple rows if they don't exist. It requires a unique key for finding duplicates and an array of objects to persist.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\n// User.fetchOrCreateMany(key, arrayOfObjects)\nawait User.fetchOrCreateMany('email', [\n  {\n    email: 'foo@example.com',\n    username: 'foo',\n  },\n  {\n    email: 'bar@example.com',\n    username: 'bar',\n  },\n  {\n    email: 'baz@example.com',\n    username: 'baz',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in AdonisJS\nDESCRIPTION: TypeScript configuration for setting up database connections in AdonisJS, including environment variables and migration settings.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/lucid'\n\nconst dbConfig = defineConfig({\n  connection: 'postgres',\n  connections: {\n    postgres: {\n      client: 'pg',\n      connection: {\n        host: env.get('DB_HOST'),\n        port: env.get('DB_PORT'),\n        user: env.get('DB_USER'),\n        password: env.get('DB_PASSWORD'),\n        database: env.get('DB_DATABASE'),\n      },\n      migrations: {\n        naturalSort: true,\n        paths: ['database/migrations'],\n      },\n    },\n  },\n})\n\nexport default dbConfig\n```\n\n----------------------------------------\n\nTITLE: Defining HasOne Relationship in User Model\nDESCRIPTION: Implementation of a HasOne relationship on the User model using the @hasOne decorator. This establishes that a user has one profile.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport Profile from '#models/profile'\nimport type { HasOne } from '@adonisjs/lucid/types/relations'\nimport { column, BaseModel, hasOne } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @hasOne(() => Profile)\n  declare profile: HasOne<typeof Profile>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in TypeScript with AdonisJS Lucid\nDESCRIPTION: Shows how to use the paginate method for offset-based pagination in database queries. This method automatically handles counting total rows and provides a rich set of pagination-related information.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = request.input('page', 1)\nconst limit = 20\n\nconst results = await db\n  .from('users')\n  .paginate(page, limit)\n```\n\n----------------------------------------\n\nTITLE: Finding a Record by Column Value in Lucid ORM\nDESCRIPTION: This snippet shows how to find a record by a specific column name and value using the 'findBy' method. Like 'find', it returns a model instance or null when no matching record is found.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findBy('email', 'virk@adonisjs.com')\n// SQL: SELECT * from \"users\" WHERE \"email\" = 'virk@adonisjs.com' LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Retrieving the First Record in Lucid ORM\nDESCRIPTION: This snippet shows how to fetch the first record from a database table using the 'first' method. It returns null when there are no records in the table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.first()\n// SQL: SELECT * from \"users\" LIMIT 1;\n```\n\n----------------------------------------\n\nTITLE: Preloading Relationships in AdonisJS Lucid ORM\nDESCRIPTION: Shows how to preload relationships using the preload method, including examples of preloading multiple and nested relationships.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('posts')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.query().preload('posts', (postsQuery) => {\n  postsQuery.where('status', 'published')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nUser.query().preload('posts').preload('profile')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query()\n  .preload('posts', (postsQuery) => {\n    postsQuery.preload('comments', (commentsQuery) => {\n      commentsQuery.preload('user')\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Using updateOrCreateMany Method with a Single Key in Lucid ORM\nDESCRIPTION: This snippet demonstrates how to use 'updateOrCreateMany' to sync rows by avoiding duplicates. It requires a unique key for finding duplicate rows and an array of objects to persist or update.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\n// User.updateOrCreateMany(key, arrayOfObjects)\nawait User.updateOrCreateMany('email', [\n  {\n    email: 'foo@example.com',\n    username: 'foo',\n  },\n  {\n    email: 'bar@example.com',\n    username: 'bar',\n  },\n  {\n    email: 'baz@example.com',\n    username: 'baz',\n  },\n])\n```\n\n----------------------------------------\n\nTITLE: Performing Insert Operations with a Transaction\nDESCRIPTION: Uses a transaction object to perform an insert operation on the users table. The transaction object provides an insertQuery method similar to the db module.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait trx.insertQuery().table('users').insert({ username: 'virk' })\n```\n\n----------------------------------------\n\nTITLE: Syncing Pivot Rows with Additional Pivot Columns in AdonisJS\nDESCRIPTION: Demonstrates syncing a many-to-many relationship while including additional pivot table columns. The example shows how to define proficiency levels for different skills using an object with ID keys and value objects.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\nawait user.related('skills').sync({\n  [1]: {\n    proficiency: 'Beginner',\n  },\n  [2]: {\n    proficiency: 'Master',\n  },\n  [3]: {\n    proficiency: 'Master',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in Select Statements\nDESCRIPTION: Shows how to use subqueries in select statements to generate dynamic columns. This example selects the last login IP address for each user from the user_logins table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .select(\n    db\n      .from('user_logins')\n      .select('ip_address')\n      .whereColumn('users.id', 'user_logins.user_id')\n      .orderBy('id', 'desc')\n      .limit(1)\n      .as('last_login_ip')\n  )\n```\n\n----------------------------------------\n\nTITLE: Deleting a Post by ID in AdonisJS\nDESCRIPTION: TypeScript example of using Lucid's query builder to delete a post by its ID in an AdonisJS controller.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async delete({ request, params }: HttpContext) {\n    const id = params.id\n\n    const updateRowsCount = await db\n      .query()\n      .from('posts')\n      .where('id', id)\n      .delete()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Table with AdonisJS Schema Builder\nDESCRIPTION: Shows how to create a new database table using the 'createTable' method. It defines a 'users' table with an auto-incrementing ID, name field, and timestamps.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async up() {\n    this.schema.createTable('users', (table) => {\n      table.increments()\n      table.string('name')\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preloading Multiple Relationships Simultaneously\nDESCRIPTION: Shows how to preload multiple relationships at once by chaining preload calls, retrieving both user profiles and posts in a single query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('profile').preload('posts')\n```\n\n----------------------------------------\n\nTITLE: Fetching All Records with the All Method in Lucid ORM\nDESCRIPTION: This snippet shows how to retrieve all records from a database table using the 'all' static method. It returns an array of model instances representing all rows in the table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.all()\n// SQL: SELECT * from \"users\" ORDER BY \"id\" DESC;\n```\n\n----------------------------------------\n\nTITLE: Detaching Records from a Many-to-Many Relationship in AdonisJS Lucid\nDESCRIPTION: Demonstrates how to remove relationships from a pivot table using the detach method. This can be done selectively by providing specific IDs or by removing all relationships when called without arguments.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst skill = await Skill.find(1)\n\nawait user.related('skills').detach([skill.id])\n\n// Remove all skills for the user\nawait user.related('skills').detach()\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting Records with Query Builder in Lucid ORM\nDESCRIPTION: This snippet demonstrates how to perform bulk deletes using the query builder directly. While this bypasses model hooks, it's efficient for removing multiple records that match specific criteria.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().where('isVerified', false).delete()\n```\n\n----------------------------------------\n\nTITLE: Creating Related Records with create Method in Lucid ORM\nDESCRIPTION: Demonstrates how to create and associate a new related model using the create method. The foreign key is automatically set based on the relationship.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail(1)\nconst comment = await post.related('comments').create({\n  body: 'This is a great post',\n})\n\nconsole.log(comment.postId === post.id) // true\n```\n\n----------------------------------------\n\nTITLE: Executing Queries in TypeScript with AdonisJS Lucid\nDESCRIPTION: Shows different ways to execute database queries using the query builder, including Promise-based approaches and async/await syntax.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .then((users) => {\n  })\n  .catch((error) => {\n  })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await db.from('users')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await db.from('users').exec()\n```\n\n----------------------------------------\n\nTITLE: Advanced whereHas Usage with Count Operators in Lucid ORM\nDESCRIPTION: Shows how to combine whereHas constraints with operators to filter based on specific counts of related records that meet certain conditions.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().whereHas(\n  'comments',\n  (query) => {\n    query.where('isApproved', true)\n  },\n  '>',\n  2\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Where Groups with Callbacks\nDESCRIPTION: Shows how to create grouped where conditions using callback functions. This allows for complex queries with multiple conditions grouped by AND/OR logic.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .where((query) => {\n    query\n      .where('username', 'virk')\n      .whereNull('deleted_at')\n  })\n  .orWhere((query) => {\n    query\n      .where('email', 'virk@adonisjs.com')\n      .whereNull('deleted_at')\n  })\n```\n\n----------------------------------------\n\nTITLE: Performing Multi-row Inserts with the Query Builder\nDESCRIPTION: Shows how to insert multiple records at once using the multiInsert method, which accepts an array of objects and generates a single SQL query to insert all rows.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .table('users')\n  .multiInsert([\n    {\n      username: 'virk',\n      email: 'virk@adonisjs.com',\n      password: 'secret',\n    },\n    {\n      username: 'romain',\n      email: 'romain@adonisjs.com',\n      password: 'secret',\n    }\n  ])\n\n/**\nINSERT INTO \"users\"\n  (\"email\", \"password\", \"username\")\nvalues\n  ('virk@adonisjs.com', 'secret', 'virk'),\n  ('romain@adonisjs.com', 'secret', 'romain')\n*/\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination in a Controller with Edge Template Integration\nDESCRIPTION: Complete example of implementing pagination in a PostsController, fetching paginated posts from the database and passing them to an Edge template with a custom base URL for pagination links.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport db from '@adonisjs/lucid/services/db'\n\nclass PostsController {\n  async index({ request, view }: HttpContext) {\n    const page = request.input('page', 1)\n    const limit = 10\n\n    const posts = await db.from('posts').paginate(page, limit)\n\n    // Changes the baseURL for the pagination links\n    posts.baseUrl('/posts')\n\n    return view.render('posts/index', { posts })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationships in Lucid ORM with TypeScript\nDESCRIPTION: Demonstrates how to lazy load related models after fetching a parent model. This allows for loading relationships when needed rather than during the initial query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\n// Lazy load the profile\nawait user.load('profile')\nconsole.log(user.profile) // Profile | null\n\n// Lazy load the posts\nawait user.load('posts')\nconsole.log(user.posts) // Post[]\n```\n\n----------------------------------------\n\nTITLE: Using Managed Transactions in Lucid ORM\nDESCRIPTION: Demonstrates managed transactions which automatically handle commit and rollback operations. The transaction commits if the callback executes successfully or rolls back if an exception occurs.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.transaction(async (trx) => {\n  await trx.insertQuery().table('users').insert({ username: 'virk' })\n})\n```\n\n----------------------------------------\n\nTITLE: Complete Transaction Example with Manual Commit/Rollback\nDESCRIPTION: Demonstrates a complete transaction flow with manual commit and rollback handling using a try/catch block. If the query succeeds, the transaction is committed; otherwise, it's rolled back.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await db.transaction()\n\ntry {\n  await trx.insertQuery().table('users').insert({ username: 'virk' })\n\n  await trx.commit()\n} catch (error) {\n  await trx.rollback()\n}\n```\n\n----------------------------------------\n\nTITLE: Using join in AdonisJS Lucid Query Builder (TypeScript)\nDESCRIPTION: Explains how to use the join method for SQL joins between tables. It covers basic joins, callback-based joins with multiple conditions, and grouping join constraints.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .join('user_logins', 'users.id', '=', 'user_logins.user_id')\n  .select('users.*')\n  .select('user_logins.ip_address')\n  .select('user_logins.country')\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  // highlight-start\n  .join('user_logins', (query) => {\n    query\n      .on('users.id', '=', 'user_logins.user_id')\n      .andOnVal('user_logins.created_at', '>', '2020-10-09')\n  })\n  // highlight-end\n  .select('users.*')\n  .select('user_logins.ip_address')\n  .select('user_logins.country')\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .join('user_logins', (query) => {\n    query\n      // highlight-start\n      .on((subquery) => {\n        subquery\n          .on('users.id', '=', 'user_logins.user_id')\n          .andOnVal('user_logins.created_at', '>', '2020-10-09')\n      })\n      .orOn((subquery) => {\n        subquery\n          .on('users.id', '=', 'user_logins.account_id')\n          .andOnVal('user_logins.created_at', '>', '2020-10-09')\n      })\n      // highlight-end\n  })\n  .select('users.*')\n  .select('user_logins.ip_address')\n  .select('user_logins.country')\n```\n\n----------------------------------------\n\nTITLE: Associating Models with belongsTo Relationships in Lucid ORM\nDESCRIPTION: Demonstrates how to associate two existing models for a belongsTo relationship using the associate method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\n\nconst profile = new Profile()\nprofile.avatarUrl = 'foo.jpg'\nawait profile.related('user').associate(user)\n```\n\n----------------------------------------\n\nTITLE: Using WhereColumn in Subquery Joins\nDESCRIPTION: Shows how to use whereColumn in a subquery to join related data. This example retrieves the last login IP address for each user by matching user IDs between tables.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .select(\n    db\n      .from('user_logins')\n      .select('ip_address')\n      .whereColumn('users.id', 'user_logins.user_id') // ðŸ‘ˆ\n      .orderBy('id', 'desc')\n      .limit(1)\n      .as('last_login_ip')\n  )\n```\n\n----------------------------------------\n\nTITLE: Finding Multiple Records by Column Value in Lucid ORM\nDESCRIPTION: This example demonstrates how to find multiple records by one or more column values using the 'findManyBy' method. It returns an array of model instances or an empty array if no matches are found.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.findManyBy('status', 'active')\n// SQL: SELECT * from \"users\" WHERE \"status\" = 'active';\n\nconst posts = await Post.findManyBy({ status: 'published', userId: 1 })\n// SQL: SELECT * from \"posts\" WHERE \"status\" = 'published' AND \"userId\" = 1;\n```\n\n----------------------------------------\n\nTITLE: Serializing Pagination Results to JSON\nDESCRIPTION: Demonstrates how to convert pagination results to JSON using the toJSON method, which returns pagination metadata and the data rows in a structured format.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await db.from('posts').paginate(page, limit)\nreturn posts.toJSON()\n```\n\n----------------------------------------\n\nTITLE: Preloading Basic Relationship in AdonisJS Lucid\nDESCRIPTION: Shows how to preload a relationship alongside the main query, retrieving user profiles as part of the user data fetch.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('profile')\n\nusers.forEach((user) => {\n  console.log(user.profile)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraint\nDESCRIPTION: Adds a foreign key constraint to existing table columns with optional custom key name and cascade options.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.foreign('user_id').references('users.id')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntable\n  .foreign('user_id')\n  .references('users.id')\n  .onDelete('CASCADE')\n```\n\n----------------------------------------\n\nTITLE: Conditional Query Building with If/Unless in AdonisJS\nDESCRIPTION: Conditional query building helpers that allow adding constraints based on conditions. Includes both if and unless methods with optional else callbacks.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .if(searchQuery, (query) => {\n    query.where('first_name', 'like', `%${searchQuery}%`)\n    query.where('last_name', 'like', `%${searchQuery}%`)\n  })\n\ndb\n  .from('users')\n  .if(\n    condition,\n    (query) => {}, // if condition met\n    (query) => {}, // otherwise execute this\n  )\n\ndb\n  .from('projects')\n  .unless(filters.status, () => {\n    query.where('status', 'active')\n  })\n\ndb\n  .from('users')\n  .unless(\n    condition,\n    (query) => {}, // if condition met\n    (query) => {}, // otherwise execute this\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Model Query Builder in TypeScript\nDESCRIPTION: Demonstrates how to create a model query builder instance from a User model extending BaseModel.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {}\n\n// Returns model query builder instance\nUser.query()\n```\n\n----------------------------------------\n\nTITLE: Accessing the Insert Query Builder in AdonisJS Lucid\nDESCRIPTION: Shows how to import and initialize the insert query builder in AdonisJS. You can either use the insertQuery() method or table() method to get an instance of the query builder.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\ndb.insertQuery()\n\n// selecting table also returns an instance of the query builder\ndb.table('users')\n```\n\n----------------------------------------\n\nTITLE: Incrementing Column Values in TypeScript using AdonisJS Lucid\nDESCRIPTION: Demonstrates how to use the increment method to increase the value of one or more columns in a database table. It shows single column incrementation and multiple column incrementation using an object.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('accounts')\n  .where('id', 1)\n  .increment('balance', 10)\n\n/**\nUPDATE \"accounts\"\nSET\n  \"balance\" = \"balance\" + 10\nWHERE\n  \"id\" = 1\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('accounts')\n  .where('id', 1)\n  .increment({\n    balance: 10,\n    credit_limit: 5\n  })\n\n/**\nUPDATE \"accounts\"\nSET\n  \"balance\" = \"balance\" + 10,\n  \"credit_limit\" = \"credit_limit\" + 5\nWHERE\n  \"id\" = 1\n*/\n```\n\n----------------------------------------\n\nTITLE: Using WhereColumn for Column Comparisons\nDESCRIPTION: Demonstrates using the whereColumn method to compare two columns in a query. This example finds users whose updated_at date is more recent than their created_at date.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereColumn('updated_at', '>', 'created_at')\n```\n\n----------------------------------------\n\nTITLE: Using beforeFind Hook to Ignore Deleted Records in TypeScript\nDESCRIPTION: This snippet shows how to implement a beforeFind hook to exclude deleted records from find operations by adding a constraint to the query builder.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeFind } from '@adonisjs/lucid/orm'\nimport type { ModelQueryBuilderContract } from '@adonisjs/lucid/types/model'\n\nexport default class User extends BaseModel {\n  @beforeFind()\n  static ignoreDeleted(query: ModelQueryBuilderContract<typeof User>) {\n    query.whereNull('is_deleted')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Raw Queries in Where Clauses\nDESCRIPTION: Shows how to use raw SQL queries as values in where clauses. This provides flexibility for complex conditions that may be difficult to express using the query builder methods.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('user_groups')\n  .where(\n    'user_id',\n    db\n      .raw(`select \"user_id\" from \"users\" where \"users\".\"user_id\" = ?`, [1])\n      .wrap('(', ')')\n  )\n```\n\n----------------------------------------\n\nTITLE: Using Relationship Query Builder in Lucid ORM\nDESCRIPTION: Shows how to access and use the query builder for a relationship using the related method. The relationship queries are automatically scoped to the parent model instance.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst posts = await user.related('posts').query()\n```\n\n----------------------------------------\n\nTITLE: Preloading Relationship with Query Constraints\nDESCRIPTION: Demonstrates how to modify the relationship query using a callback function when preloading relationships, adding conditions to filter the related data.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('profile', (profileQuery) => {\n  profileQuery.where('isActive', true)\n})\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Managed Transactions\nDESCRIPTION: Shows how to return values from a managed transaction callback. The example inserts a user record and returns the generated user ID which can be accessed at the top-level scope.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst userId = await db.transaction(async (trx) => {\n  const response = await trx.insertQuery().table('users').insert({ username: 'virk' })\n\n  return response[0] // ðŸ‘ˆ return value\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a User Factory in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a factory for a User model using AdonisJS Lucid's Factory class. It uses Faker.js to generate random data for username, email, and password fields.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: database/factories/user.ts\nimport User from '#models/user'\nimport Factory from '@adonisjs/lucid/factories'\n\nexport const UserFactory = Factory.define(User, ({ faker }) => {\n  return {\n    username: faker.internet.userName(),\n    email: faker.internet.email(),\n    password: faker.internet.password(),\n  }\n}).build()\n```\n\n----------------------------------------\n\nTITLE: Idempotent Country Seeder Implementation\nDESCRIPTION: Example of creating an idempotent seeder using updateOrCreateMany to prevent duplicate entries\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseSeeder } from '@adonisjs/lucid/seeders'\nimport Country from '#models/country'\n\nexport default class CountrySeeder extends BaseSeeder {\n  async run() {\n    const uniqueKey = 'isoCode'\n\n    await Country.updateOrCreateMany(uniqueKey, [\n      {\n        isoCode: 'IN',\n        name: 'India',\n      },\n      {\n        isoCode: 'FR',\n        name: 'France',\n      },\n      {\n        isoCode: 'TH',\n        name: ' Thailand',\n      },\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhereIn with Multiple Columns and Subqueries\nDESCRIPTION: Shows how to use whereIn with multiple columns and a subquery. This allows checking multiple column values against results from another query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereIn(\n    ['id', 'email'],\n    db\n      .from('accounts')\n      .select('user_id', 'email')\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Scope with Arguments in AdonisJS Lucid ORM\nDESCRIPTION: This example demonstrates how to create a query scope that accepts arguments. The scope filters projects based on user permissions.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport User from '#models/user'\nimport { BaseModel, column, scope } from '@adonisjs/lucid/orm'\n\nexport default class Project extends BaseModel {\n  static visibleTo = scope((query, user: User) => {\n    if (user.isAdmin) {\n      return\n    }\n\n    /**\n     * Non-admin users can only view their own team's projects\n     */\n    query.where('teamId', user.teamId)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeDelete Hook for Cache Removal in TypeScript\nDESCRIPTION: This example demonstrates the use of a beforeDelete hook to remove a post from the cache before deleting it from the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeDelete } from '@adonisjs/lucid/orm'\n\nclass Post extends BaseModel {\n  @beforeDelete()\n  static async removeFromCache(post: Post) {\n    await Cache.remove(`post-${post.id}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Merge Method to Update Records in Lucid ORM\nDESCRIPTION: This example shows how to use the 'merge' method to update multiple attributes at once and then save the model. It provides a fluent interface for updating records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.merge({ lastLoginAt: DateTime.local() }).save()\n```\n\n----------------------------------------\n\nTITLE: Using WhereIn with Subqueries\nDESCRIPTION: Demonstrates using a subquery to generate the values for a whereIn clause. This example finds users who have logged in before a specific date.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereIn(\n    'id',\n    db\n      .from('user_logins')\n      .select('user_id')\n      .where('created_at', '<', '2020-09-09')\n  )\n```\n\n----------------------------------------\n\nTITLE: Using Raw Queries in Select Statements\nDESCRIPTION: Demonstrates how to use raw SQL queries within select statements for more complex or specific operations. This allows incorporating native SQL that may not be directly expressible through the query builder API.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .select(\n    db.raw(`\n      (select ip_address from user_logins where users.id = user_logins.user_id limit 1) as last_login_ip\n    `)\n  )\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Row with Query Builder in Lucid ORM\nDESCRIPTION: This example shows how to fetch a single row using the query builder by chaining the 'first' method. There is also a 'firstOrFail' variation available for when no record exists.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User\n  .query()\n  .where('countryCode', 'IN')\n  .orWhereNull('countryCode')\n  .first()\n```\n\n----------------------------------------\n\nTITLE: Setting Isolation Level with Managed Transactions\nDESCRIPTION: Demonstrates how to set the isolation level when using managed transactions by passing an options object as the second argument to the transaction method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.transaction(\n  async (trx) => {\n    // use trx here\n  },\n  {\n    isolationLevel: 'read committed',\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using Select Method with Basic Column Selection\nDESCRIPTION: Demonstrates how to select specific columns from a database table using the select method. You can pass columns as multiple arguments or as an array.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\ndb\n  .from('users')\n  .select('id', 'username', 'email')\n```\n\n----------------------------------------\n\nTITLE: Creating Models with Relationships Using Factories in TypeScript\nDESCRIPTION: This snippet shows how to create a user with associated posts using the previously defined UserFactory with relationships. It demonstrates creating nested relationships and applying states to relationships.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await UserFactory.with('posts', 3).create()\nuser.posts.length // 3\n\nconst user = await UserFactory.with('posts', 3, (post) => post.apply('published')).create()\n\nconst user = await UserFactory.with('posts', 3, (post) => post.apply('published'))\n  .with('posts', 2)\n  .create()\n\nuser.posts.length // 5\n\nconst user = await UserFactory.with('posts', 2, (post) => post.with('comments', 5)).create()\n```\n\n----------------------------------------\n\nTITLE: Using Where Clause with Operators\nDESCRIPTION: Demonstrates using the where method with comparison operators to create more specific filters. This example filters users created after a specific date.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .where('created_at', '>', '2020-09-09')\n```\n\n----------------------------------------\n\nTITLE: Adding Reporter Data to Raw Queries in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Demonstrates how to add additional data to the query reporter using the reporterData method. This data can be accessed in the 'db:query' event listener for logging or monitoring purposes.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .rawQuery(sql, bindings)\n  .reporterData({ userId: auth.user.id })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/lucid/services/emitter'\n\nemitter.on('db:query', (query) => {\n  console.log(query.userId)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Named Placeholders in Raw SQL Queries with AdonisJS Lucid (TypeScript)\nDESCRIPTION: Demonstrates the use of named placeholders in raw SQL queries. This allows for more readable and maintainable queries, especially when dealing with multiple parameters.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndb.rawQuery(\n  'select * from users where id = :id',\n  {\n    id: 1,\n  }\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb.rawQuery(\n  'select * from users where :column: = :value',\n  {\n    column: 'id',\n    value: 1,\n  }\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb.rawQuery(\n  'select * from user_logins inner join users on :column1: = :column2:',\n  {\n    column1: 'users.id',\n    column2: 'user_logins.user_id',\n  }\n)\n\n/**\nSELECT * FROM\n  user_logins\nINNER JOIN\n  users\nON\n  \"users\".\"id\" = \"user_logins\".\"user_id\"\n*/\n```\n\n----------------------------------------\n\nTITLE: Saving Related Models with save Method in Lucid ORM\nDESCRIPTION: Shows how to create a model instance and associate it with a parent model using the save method. The foreign key is automatically managed.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail(1)\n\nconst comment = new Comment()\ncomment.body = 'This is a great post'\n\nawait post.related('comments').save(comment)\n\nconsole.log(comment.postId === post.id) // true\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Individual Queries\nDESCRIPTION: These snippets show how to enable debugging for individual queries using the 'debug' method on various query builder instances. This approach allows targeted debugging of specific operations without enabling it globally.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/debugging.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Select\ndb\n  .query()\n  .select('*')\n  // highlight-start\n  .debug(true)\n  // highlight-end\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Insert\ndb\n  .insertQuery()\n  // highlight-start\n  .debug(true)\n  // highlight-end\n  .insert({})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Raw\ndb\n  .rawQuery('select * from users')\n  // highlight-start\n  .debug(true)\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using beforeFetch Hook to Ignore Deleted Records in TypeScript\nDESCRIPTION: This snippet shows how to implement a beforeFetch hook to exclude deleted records from fetch operations by adding a constraint to the query builder.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeFetch } from '@adonisjs/lucid/orm'\nimport type { ModelQueryBuilderContract } from '@adonisjs/lucid/types/model'\n\nexport default class User extends BaseModel {\n  @beforeFetch()\n  static ignoreDeleted(query: ModelQueryBuilderContract<typeof User>) {\n    query.whereNull('is_deleted')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Related Records with createMany in Lucid ORM\nDESCRIPTION: Demonstrates how to create multiple related records at once using the createMany method, available for hasMany and manyToMany relationships.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst comments = await Post.related('comments').createMany([\n  {\n    body: 'This is a great post.'\n  },\n  {\n    body: 'Well written.'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Relationships in Factories with TypeScript\nDESCRIPTION: This code demonstrates how to define relationships in factories. It shows a UserFactory with a 'posts' relationship, allowing for the creation of users with associated posts.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const PostFactory = Factory.define(Post, ({ faker }) => {\n  return {\n    title: faker.lorem.sentence(),\n    content: faker.lorem.paragraphs(4),\n    status: 'DRAFT',\n  }\n}).build()\n\nexport const UserFactory = Factory.define(User, ({ faker }) => {\n  return {\n    username: faker.internet.userName(),\n    email: faker.internet.email(),\n    password: faker.internet.password(),\n  }\n})\n  .relation('posts', () => PostFactory) // ðŸ‘ˆ\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Value Transformation in Serialization\nDESCRIPTION: Shows how to transform property values during serialization using a custom serialize function.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/serializing_models.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column.dateTime({\n    autoCreate: true,\n    serialize: (value: DateTime | null) => {\n      return value ? value.setZone('utc').toISO() : value\n    },\n  })\n  declare createdAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Records by Relationship Existence in Lucid ORM\nDESCRIPTION: Shows how to use the has method to filter records based on the existence of related records. This can include conditions on the number of related records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// Get posts with one or more comments\nconst posts = await Post.query().has('comments')\n\n// Get posts with more than 2 comments\nconst posts = await Post.query().has('comments', '>', 2)\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationship Counts with loadCount in Lucid ORM\nDESCRIPTION: Demonstrates how to lazy load relationship counts on a single model instance after it has been fetched from the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail()\nawait post.loadCount('comments')\n\nconsole.log(post.$extras.comments_count)\n```\n\n----------------------------------------\n\nTITLE: Creating Tables with Table Builder in AdonisJS\nDESCRIPTION: Example showing how to access the table builder instance through schema builder methods.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async up() {\n    this.schema.createTable('users', (table) => {\n      console.log(table) // ðŸ‘ˆ Table builder\n    })\n\n    this.schema.table('users', (table) => {\n      console.log(table) // ðŸ‘ˆ Table builder\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Posts with Pagination in AdonisJS\nDESCRIPTION: TypeScript example of using Lucid's query builder to select posts with pagination in an AdonisJS controller.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async index({ request }: HttpContext) {\n    const page = request.input('page', 1)\n    const limit = 20\n\n    const posts = await db\n      .query()\n      .from('posts')\n      .select('*')\n      .orderBy('id', 'desc')\n      .paginate(page, limit)\n\n    return posts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregating Related Data in AdonisJS Lucid ORM\nDESCRIPTION: Shows how to use withAggregate method to perform custom aggregate functions on related data.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User\n  .query()\n  .withAggregate('accounts', (query) => {\n    query.sum('balance').as('accountsBalance')\n  })\n  .firstOrFail()\n\nconsole.log(user.$extras.accountsBalance)\n```\n\n----------------------------------------\n\nTITLE: Initializing Query Builder in AdonisJS Lucid\nDESCRIPTION: Shows how to create a query builder instance either with or without a table selection. This is the foundation for building any SELECT, UPDATE, or DELETE queries with Lucid.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\n/**\n * Creates query builder instance\n */\nconst query = db.query()\n\n/**\n * Creates query builder instance and also selects\n * the table\n */\nconst queryWithTableSelection = db.from('users')\n```\n\n----------------------------------------\n\nTITLE: Property Hiding in Serialization\nDESCRIPTION: Demonstrates how to hide sensitive properties from serialized output using serializeAs: null.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/serializing_models.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare email: string\n\n  @column({ serializeAs: null })\n  declare password: string\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Database Connections in AdonisJS\nDESCRIPTION: TypeScript example showing how to close an open database connection using Lucid in AdonisJS.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\nawait db.manager.close('pg')\n```\n\n----------------------------------------\n\nTITLE: Using beforeUpdate Hook for Avatar Assignment in TypeScript\nDESCRIPTION: This snippet shows how to use a beforeUpdate hook to assign a new random avatar URL to a user before updating the record in the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeUpdate } from '@adonisjs/lucid/orm'\n\nclass User extends BaseModel {\n  @beforeUpdate()\n  static async assignAvatar(user: User) {\n    user.avatarUrl = getRandomAvatar()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Record with Snake-Case Column Conversion\nDESCRIPTION: Example showing how Lucid automatically converts camelCase property names to snake_case in database queries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.create({ avatarUrl: 'foo.jpg' })\n\n// EXECUTED QUERY\n// insert into \"users\" (\"avatar_url\") values (?)\n```\n\n----------------------------------------\n\nTITLE: Saving Multiple Related Models with saveMany in Lucid ORM\nDESCRIPTION: Shows how to save multiple pre-instantiated model instances as related records using the saveMany method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst comment1 = new Comment()\ncomment1.body = 'This is a great post'\n\nconst comment2 = new Comment()\ncomment2.body = 'Well written'\n\nawait Post.related('comments').saveMany([comment1, comment2])\n```\n\n----------------------------------------\n\nTITLE: Custom Primary Key Configuration in TypeScript\nDESCRIPTION: Example of configuring a custom primary key for a Lucid model using the static primaryKey property.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Basemodel {\n  static primaryKey = 'email'\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereHas Method to Filter by Relationships with Conditions\nDESCRIPTION: Demonstrates the whereHas method that allows you to add constraints to the relationship query when filtering by relationship existence.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().whereHas('comments', (query) => {\n  query.where('isApproved', true)\n})\n```\n\n----------------------------------------\n\nTITLE: Comparing db.rawQuery and db.raw in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Illustrates the difference between db.rawQuery and db.raw methods. db.rawQuery is used for standalone queries, while db.raw is used to pass raw queries by reference to other queries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Self executable raw query\nconst result = await db.rawQuery('select * from users')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Passing raw query by reference\nawait db.select(\n  'id',\n  db.raw('select ip_address from user_logins'),\n)\n```\n\n----------------------------------------\n\nTITLE: Defining HasMany Relationship in User Model\nDESCRIPTION: Implementation of a HasMany relationship on the User model using the @hasMany decorator. This establishes that a user has many posts.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from '#models/post'\nimport type { HasMany } from '@adonisjs/lucid/types/relations'\nimport { column, BaseModel, hasMany } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @hasMany(() => Post)\n declare posts: HasMany<typeof Post>\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Update Operations with AdonisJS Lucid\nDESCRIPTION: Shows how to use the update method to modify one or more database rows, with the query builder providing additional constraints for the update operation.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nconst affectedRows = db\n  .from('users')\n  .where('id', 1)\n  .update({ email: 'virk@adonisjs.com' })\n```\n\n----------------------------------------\n\nTITLE: Merging Attributes with Factory Data in TypeScript\nDESCRIPTION: This code demonstrates how to override default factory attributes using the 'merge' method. It shows examples for both single and multiple instance creation with merged attributes.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait UserFactory.merge({ email: 'test@example.com' }).create()\n\nawait UserFactory.merge([{ email: 'foo@example.com' }, { email: 'bar@example.com' }]).createMany(3)\n```\n\n----------------------------------------\n\nTITLE: Debugging Queries in TypeScript using AdonisJS Lucid\nDESCRIPTION: Demonstrates how to enable or disable debugging for individual queries using the debug method. This is useful for troubleshooting and optimizing database operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .debug(true)\n```\n\n----------------------------------------\n\nTITLE: Creating Users Migration for HasManyThrough Relationship\nDESCRIPTION: Migration definition for the users table which serves as the intermediate table in a has-many-through relationship, containing a foreign key reference to countries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Users extends BaseSchema {\n  protected tableName = 'users'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      // highlight-start\n      table.increments('id').primary()\n      table.integer('country_id').unsigned().references('countries.id')\n      // highlight-end\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Column Aliases with AS Expression\nDESCRIPTION: Shows how to create aliases for column names using the 'as' expression. This allows renaming columns in the query results for better readability or compatibility.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .select('id', 'email as userEmail')\n```\n\n----------------------------------------\n\nTITLE: Adding Relationships to Existing Model in a Transaction\nDESCRIPTION: Shows how to fetch an existing user and create a new profile for them within a transaction. The transaction is passed to the findOrFail method and implicitly used by the relationship methods.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport User from '#models/user'\n\nawait db.transaction(async (trx) => {\n  const user = await User.findOrFail(1, { client: trx })\n\n  /**\n   * The relationship will implicitly reference the\n   * transaction from the user instance\n   */\n  await user.related('profile').create({\n    fullName: 'Harminder Virk',\n    avatar: 'some-url.jpg',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Query Scopes with Arguments and Builder Type in AdonisJS Lucid ORM\nDESCRIPTION: This snippet demonstrates how to define a query scope that accepts arguments and uses the Builder type, allowing for proper TypeScript inference.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Post extends BaseModel {\n  static firstScope = scope((scopeQuery, user: User) => {\n    const query = scopeQuery as Builder\n    query\n      .withScopes((scopes) => scopes.secondScope())\n      .where('teamId', user.teamId)\n  })\n\n  static secondScope = scope((query) => {\n    query.whereNull('deletedAt')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using From Method to Define Database Table\nDESCRIPTION: Shows how to use the from method to specify which database table to query. This is a fundamental part of building any database query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\ndb.from('users')\n```\n\n----------------------------------------\n\nTITLE: Creating manyToMany Relationships with attach Method in Lucid ORM\nDESCRIPTION: Demonstrates how to create relationships in a pivot table for a manyToMany relationship using the attach method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst skill = await Skill.find(1)\n\n// Performs insert query inside the pivot table\nawait user.related('skills').attach([skill.id])\n```\n\n----------------------------------------\n\nTITLE: Updating Records Directly with Query Builder in Lucid ORM\nDESCRIPTION: This snippet demonstrates how to update records directly using the query builder. This approach bypasses model hooks and automatic timestamp updates but can be useful for bulk updates.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.query().where('id', 1).update({ lastLoginAt: new Date() })\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Select, Update, or Delete Query Builder\nDESCRIPTION: Demonstrates passing a transaction to an existing query builder for select, update, or delete operations. This makes the operation part of the transaction context.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\nconst trx = await db.transaction()\n\nawait db\n  .query({ client: trx })\n  .from('users')\n  .where('id', 1)\n  .update(payload)\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination with Lucid ORM in TypeScript\nDESCRIPTION: Demonstrates how to paginate database results using the paginate method from Lucid. The method accepts the page number and limit of rows to fetch, executing an additional query to count total rows.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst page = request.input('page', 1)\nconst limit = 10\n\nconst posts = await db.from('posts').paginate(page, limit)\nconsole.log(posts)\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Lucid Models\nDESCRIPTION: Shows how to associate a transaction with a Lucid model instance using the useTransaction method. The transaction is accessed within the model via the $trx property.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport db from '@adonisjs/lucid/services/db'\n\nawait db.transaction(async (trx) => {\n  const user = new User()\n  user.username = 'virk'\n\n  user.useTransaction(trx)\n  await user.save()\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Model Serialization in TypeScript\nDESCRIPTION: Demonstrates basic serialization of single and multiple model instances using the serialize() method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/serializing_models.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.find(1)\nconst postJSON = post.serialize()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.all()\nconst postsJSON = posts.map((post) => post.serialize())\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Pivot Columns in Many-to-Many Relationship\nDESCRIPTION: Shows how to include additional columns from the pivot table in a many-to-many relationship, such as proficiency level between users and skills.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  pivotColumns: ['proficiency'],\n})\ndeclare skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Using WhereExists with Callback Subqueries\nDESCRIPTION: Demonstrates using whereExists with a callback function to create a subquery. This example finds users who have logged in at least once by checking for related records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereExists((query) => {\n    query\n      .from('user_logins')\n      .whereColumn('users.id', 'user_logins.user_id')\n      .limit(1)\n  })\n```\n\n----------------------------------------\n\nTITLE: Creating Profiles Table Migration with Foreign Key for HasOne Relationship\nDESCRIPTION: Migration file for creating the profiles table with a user_id foreign key column that references the users.id column. This establishes a HasOne relationship.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Profiles extends BaseSchema {\n  protected tableName = 'profiles'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.integer('user_id').unsigned().references('users.id').onDelete('CASCADE') // delete profile when user is deleted\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Database Calls in Factories with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the 'makeStubbed' method to create in-memory model instances without hitting the database. It also shows how to customize the stub id generation process.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await UserFactory.with('posts', 2).makeStubbed()\n\nconsole.log(user.id) // <some-id>\nconsole.log(user.$isPersisted) // false\n\nimport { Factory } from '@adonisjs/lucid/factories'\n\nFactory.stubId((counter, model) => {\n  return BigInt(counter)\n})\n\nimport { randomUUID } from 'node:crypto'\n\nFactory.define(Post, () => {\n  return {}\n}).before('makeStubbed', (_, model) => {\n  model.id = randomUUID()\n})\n```\n\n----------------------------------------\n\nTITLE: Using Basic Where Clause\nDESCRIPTION: Shows the basic usage of the where method to filter results based on a column value. The example retrieves users with a specific username.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\ndb\n  .from('users')\n  .where('username', 'virk')\n```\n\n----------------------------------------\n\nTITLE: Syncing Pivot Rows in a Many-to-Many Relationship with Simple IDs\nDESCRIPTION: Shows how to use the sync method to synchronize pivot table rows. The example demonstrates syncing with an array of IDs, which will ensure only the specified relationships exist in the pivot table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\n// Only skills with id 1, 2, 3 will stay in the pivot table\nawait user.related('skills').sync([1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Using Relationships Loader to Load Multiple Relationships\nDESCRIPTION: Shows how to use the relationships loader for efficiently loading multiple relationships in a single operation.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// Using the relationships loader\nawait user.load((loader) => {\n  loader.load('profile').load('posts')\n})\n```\n\n----------------------------------------\n\nTITLE: Using beforePaginate Hook to Ignore Deleted Records in TypeScript\nDESCRIPTION: This snippet shows how to implement a beforePaginate hook to exclude deleted records from paginate operations by adding constraints to both the count and main queries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforePaginate } from '@adonisjs/lucid/orm'\nimport type { ModelQueryBuilderContract } from '@adonisjs/lucid/types/model'\n\nexport default class User extends BaseModel {\n  @beforePaginate()\n  static ignoreDeleted (\n    countQuery: ModelQueryBuilderContract<typeof User>,\n    query: ModelQueryBuilderContract<typeof User>\n  ) {\n    query.whereNull('is_deleted')\n    countQuery.whereNull('is_deleted')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereBetween in AdonisJS Lucid Query Builder (TypeScript)\nDESCRIPTION: Demonstrates how to use the whereBetween method to filter results within a range. It shows basic usage, as well as using subqueries and raw queries for dynamic range values.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereBetween('age', [18, 60])\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: With sub queries\ndb\n  .from('users')\n  .whereBetween('age', [\n    db.from('participation_rules').select('min_age'),\n    db.from('participation_rules').select('max_age'),\n  ])\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: With raw queries\ndb\n  .from('users')\n  .whereBetween('age', [\n    db.raw('(select min_age from participation_rules)'),\n    db.raw('(select max_age from participation_rules)'),\n  ])\n```\n\n----------------------------------------\n\nTITLE: Adding Pivot Table Extra Columns when Attaching Relations in Lucid ORM\nDESCRIPTION: Shows how to include additional columns in the pivot table when creating manyToMany relationships with the attach method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.related('skills').attach({\n  [skill.id]: {\n    proficiency: 'Beginner'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Paginated Results Serialization\nDESCRIPTION: Shows how to serialize paginated results with metadata and data properties.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/serializing_models.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().paginate(1)\nconst paginationJSON = posts.serialize()\n\n/**\n {\n    meta: {},\n    data: []\n }\n */\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Using Lucid Model in TypeScript\nDESCRIPTION: Example of encoding date formatting behavior within a Lucid model class, showing how to define a date column with custom serialization.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nclass User extends BaseModel {\n  @column.date({\n    serialize: (value) => value.toFormat('dd LLL yyyy'),\n  })\n  declare dob: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhereExists with Direct Subqueries\nDESCRIPTION: Shows how to use whereExists with a directly passed subquery. This is an alternative syntax to the callback approach for creating existence checks.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereExists(\n    db\n      .from('user_logins')\n      .whereColumn('users.id', 'user_logins.user_id')\n      .limit(1)\n  )\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Relationships in Lucid ORM\nDESCRIPTION: Demonstrates two approaches for loading multiple relationships on a model instance: calling the load method multiple times, or using the relationships loader.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// Calling \"load\" method multiple times\nawait user.load('profile')\nawait user.load('posts')\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries in Where Clauses\nDESCRIPTION: Demonstrates how to use subqueries as values in where clauses for dynamic filtering. This example finds user groups for a specific user by ID.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('user_groups')\n  .where(\n    'user_id',\n    db\n      .from('users')\n      .select('user_id')\n      .where('users.user_id', 1)\n  )\n```\n\n----------------------------------------\n\nTITLE: SimplePaginator Object Structure in Lucid\nDESCRIPTION: Shows the structure of the SimplePaginator object returned by the paginate method, which includes pagination metadata such as current page, total pages, and navigation properties.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nSimplePaginator {\n  perPage: 10,\n  currentPage: 1,\n  firstPage: 1,\n  isEmpty: false,\n  total: 50,\n  hasTotal: true,\n  lastPage: 5,\n  hasMorePages: true,\n  hasPages: true\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Subquery Results in AdonisJS\nDESCRIPTION: Demonstrates how to order query results based on a subquery, such as ordering posts by the number of comments they have received.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst commentsCountQuery = db\n  .from('comments')\n  .count('*')\n  .whereColumn('posts.id', '=', 'comments.post_id')\n\ndb\n  .from('posts')\n  .orderBy(commentsCountQuery, 'desc')\n```\n\n----------------------------------------\n\nTITLE: Using Factories to Create Model Instances in TypeScript\nDESCRIPTION: This snippet shows how to use the previously defined UserFactory to create single or multiple user instances. It demonstrates both the 'create' and 'createMany' methods.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UserFactory } from '#database/factories/user'\n\nconst user = await UserFactory.create()\n\nconst users = await UserFactory.createMany(10)\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Insert Query Builder\nDESCRIPTION: Shows how to pass a transaction to an existing insert query builder instance, making the insert operation part of the transaction. The transaction must be committed separately.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\nconst trx = await db.transaction()\n\nawait db\n  .insertQuery({ client: trx })\n  .table('users')\n  .insert({ username: 'virk' })\n\nawait trx.commit()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Record in Lucid ORM\nDESCRIPTION: This example shows how to delete a record by first fetching it from the database and then calling the 'delete' method. This approach ensures that model hooks are triggered.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/crud_operations.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.findOrFail(1)\nawait user.delete()\n```\n\n----------------------------------------\n\nTITLE: Self-Assigning Primary Key with UUID in TypeScript\nDESCRIPTION: Example of configuring a Lucid model to self-assign UUIDs as primary keys using a beforeCreate hook.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { randomUUID } from 'node:crypto'\nimport { BaseModel, beforeCreate } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  static selfAssignPrimaryKey = true\n\n  @column({ isPrimary: true })\n  declare id: string\n\n  @beforeCreate()\n  static assignUuid(user: User) {\n    user.id = randomUUID()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Unique Validation Rule with VineJS in AdonisJS\nDESCRIPTION: Example of using the 'unique' validation rule provided by Lucid to ensure an email is unique in the users table. The rule is applied to a string field in a VineJS schema.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/validation.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nconst schema = vine.object({\n  email: vine\n    .string()\n    // highlight-start\n    .unique({\n      table: 'users',\n      column: 'email',\n    }),\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Deleting Records in TypeScript using AdonisJS Lucid\nDESCRIPTION: Demonstrates how to use the delete method to remove records from a database table. It can be combined with other query builder methods to add constraints.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .where('id', 1)\n  .delete()\n```\n\n----------------------------------------\n\nTITLE: Customizing HasOne Relationship Keys\nDESCRIPTION: Examples showing how to customize the foreign key and local key parameters in a HasOne relationship definition. This allows for non-standard column naming.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@hasOne(() => Profile, {\n  foreignKey: 'profileUserId', // defaults to userId\n})\ndeclare profile: HasOne<typeof Profile>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@hasOne(() => Profile, {\n  localKey: 'uuid', // defaults to id\n})\ndeclare profile: HasOne<typeof Profile>\n```\n\n----------------------------------------\n\nTITLE: Numeric Column Types in AdonisJS\nDESCRIPTION: Implementation of various numeric column types including increments, integer, bigInteger, float, and decimal.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.increments('id')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.increments('other_id', { primaryKey: false })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.integer('visits')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.bigInteger('visits')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('products', (table) => {\n  table.float('price')\n\n  /**\n   * Explicit precision and scale\n   */\n  table.float('price', 8, 2)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('products', (table) => {\n  table.decimal('price')\n\n  /**\n   * Explicit precision and scale\n   */\n  table.decimal('price', 8, 2)\n})\n```\n\n----------------------------------------\n\nTITLE: Using WhereIn with Multiple Columns\nDESCRIPTION: Shows how to use whereIn with multiple columns simultaneously. This allows checking for combinations of column values against a list of value tuples.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereIn(['id', 'email'], [\n    [1, 'virk@adonisjs.com']\n  ])\n\n// SQL: select * from \"users\" where (\"id\", \"email\") in ((?, ?))\n```\n\n----------------------------------------\n\nTITLE: Adding Unique Constraint\nDESCRIPTION: Adds a unique index constraint to table columns with an optional index name.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.unique(['slug', 'tenant_id'])\n})\n```\n\n----------------------------------------\n\nTITLE: Counting Related Records in AdonisJS Lucid ORM\nDESCRIPTION: Demonstrates the use of withCount method to count related records and add the count to the model's $extras object.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().withCount('posts')\n\nusers.forEach((user) => {\n  console.log(user.$extras.posts_count)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User\n  .query()\n  .withCount('posts')\n  .preload('posts')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User\n  .query()\n  .withCount('posts', (query) => {\n    query.as('totalPosts')\n  })\n  .firstOrFail()\n\nconsole.log(user.$extras.totalPosts)\n```\n\n----------------------------------------\n\nTITLE: Implementing Exists Validation Rules with Callbacks and Options in VineJS\nDESCRIPTION: Demonstrates two approaches to using the 'exists' validation rule: with a callback function that queries the database to verify existence, and with an options object specifying the table and column to check.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/validation.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Usage with callback\nconst schema = vine.object({\n  slug: vine\n    .string()\n    // highlight-start\n    .exists((db, value) => {\n      const row = await db.from('categories').where('slug', value).first()\n      return row ? true : false\n    }),\n  // highlight-end\n})\n\n// Usage with options\nconst schema = vine.object({\n  slug: vine\n    .string()\n    // highlight-start\n    .exists({ table: 'categories', column: 'slug' }),\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Query Client and KnexJS Query in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Shows how to access the underlying database query client and KnexJS query instances from a raw query. This can be useful for advanced query manipulation or debugging.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.rawQuery(sql, bindings)\nconsole.log(query.client)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.rawQuery(sql, bindings)\nconsole.log(query.knexQuery)\n```\n\n----------------------------------------\n\nTITLE: Selectively Disabling Pivot Table Timestamps\nDESCRIPTION: Shows how to selectively enable or disable specific timestamp columns in a many-to-many relationship's pivot table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  pivotTimestamps: {\n    createdAt: 'creation_date',\n    updatedAt: false // turn off update at timestamp field\n  }\n})\nskills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Using distinct for Filtering Unique Values in TypeScript\nDESCRIPTION: Demonstrates how to use the distinct method to filter unique values from a table. You can specify one or more column names to find distinct values or call the method without parameters to eliminate duplicate rows.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .distinct('country')\n\ndb\n  .from('users')\n  .distinct('country', 'locale')\n```\n\n----------------------------------------\n\nTITLE: Loading Relationship Aggregates with withAggregate in Lucid ORM\nDESCRIPTION: Demonstrates how to load aggregate values for relationships, such as counting related records. The aggregate values are stored in the $extras object of the model.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().withAggregate('comments', (query) => {\n  query.count('*').as('comments_count')\n})\n\nposts.forEach((post) => {\n  console.log(post.$extras.comments_count)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Read-Write Replicas in AdonisJS\nDESCRIPTION: TypeScript configuration for setting up read-write replicas in AdonisJS, demonstrating how to define multiple read servers and a single write server.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst dbConfig = defineConfig({\n  connection: 'postgres',\n  connections: {\n    postgres: {\n      client: 'pg',\n      connection: {\n        user: env.get('DB_USER'),\n        password: env.get('DB_PASSWORD'),\n        database: env.get('DB_DATABASE'),\n      },\n      replicas: {\n        read: {\n          connection: [\n            {\n              host: '192.168.1.1',\n            },\n            {\n              host: '192.168.1.2',\n            },\n          ],\n        },\n        write: {\n          connection: {\n            host: '196.168.1.3',\n          },\n        },\n      },\n      migrations: {\n        naturalSort: true,\n        paths: ['database/migrations'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Savepoints in Transactions\nDESCRIPTION: Demonstrates the creation of savepoints for nested transactions. Savepoints allow for partial transaction rollback and reduce the number of required database connections.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\n// Transaction is created\nconst trx = await db.transaction()\n\n// This time, a save point is created\nconst savepoint = await trx.transaction()\n\n// also rollbacks the savepoint\nawait trx.rollback()\n```\n\n----------------------------------------\n\nTITLE: Basic Sorting with orderBy in AdonisJS Lucid\nDESCRIPTION: Shows how to apply the ORDER BY clause to sort query results by a specific column in ascending or descending order.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .orderBy('created_at', 'desc')\n```\n\n----------------------------------------\n\nTITLE: Performing Select Operations with a Transaction\nDESCRIPTION: Uses a transaction object to perform a select operation, retrieving all records from the users table within the current transaction context.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait trx.query().select('*').from('users')\n```\n\n----------------------------------------\n\nTITLE: Altering a Table with AdonisJS Schema Builder\nDESCRIPTION: Shows how to alter an existing table using the 'alterTable' method. This example drops the 'name' column and adds 'first_name' and 'last_name' columns to the 'user' table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async up() {\n    this.schema.alterTable('user', (table) => {\n      /**\n       * Drop the name column\n       */\n      table.dropColumn('name')\n\n      /**\n       * Add first_name and last_name columns\n       */\n      table.string('first_name')\n      table.string('last_name')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Naming Strategy Globally to BaseModel\nDESCRIPTION: Shows how to apply a custom naming strategy globally to all models by assigning it to the BaseModel class.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@adonisjs/lucid/orm'\nBaseModel.namingStrategy = new CamelCaseNamingStrategy()\n```\n\n----------------------------------------\n\nTITLE: Defining a Query Scope in AdonisJS Lucid ORM\nDESCRIPTION: This snippet demonstrates how to define a query scope as a static property on a model class. The scope filters published posts based on the current date.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\n\nimport {\n  scope,\n  column,\n  BaseModel,\n} from '@adonisjs/lucid/orm'\n\nexport default class Post extends BaseModel {\n  static published = scope((query) => {\n    query.where('publishedOn', '<=', DateTime.utc().toSQLDate())\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic User Seeder Implementation\nDESCRIPTION: Example of a basic seeder class that creates multiple users using Lucid model\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseSeeder } from '@adonisjs/lucid/seeders'\nimport User from '#models/user'\n\nexport default class UserSeeder extends BaseSeeder {\n  async run() {\n    await User.createMany([\n      {\n        email: 'virk@adonisjs.com',\n        password: 'secret',\n      },\n      {\n        email: 'romain@adonisjs.com',\n        password: 'supersecret',\n      },\n    ])\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Attribute Merging in AdonisJS Lucid Factories\nDESCRIPTION: Shows how to customize the merge behavior in factories using the merge handler. This allows for fine-grained control over how attributes are merged into model instances.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nFactory.define(User, () => {})\n  .merge((user, attributes, ctx) => {\n    user.merge(attributes)\n  })\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Counting Multiple Columns with Object Syntax in AdonisJS\nDESCRIPTION: Demonstrates how to count multiple columns in a single query by passing an object to the count method, where each key is the alias and each value is the column to count.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await db\n  .from('users')\n  .count({\n    'active': 'is_active',\n    'total': '*',\n  })\n\nconsole.log(users[0].total)\nconsole.log(users[0].active)\n```\n\n----------------------------------------\n\nTITLE: Custom Table Name Configuration in TypeScript\nDESCRIPTION: Example of setting a custom database table name for a Lucid model, overriding the default naming convention.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class User extends BaseModel {\n  static table = 'app_users'\n}\n```\n\n----------------------------------------\n\nTITLE: Using with for Common Table Expressions (CTEs)\nDESCRIPTION: Shows how to use the with method to create Common Table Expressions (CTEs) in PostgreSQL, Oracle, SQLite3, and MSSQL databases.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .query()\n  .with('aliased_table', (query) => {\n    query.from('users').select('*')\n  })\n  .select('*')\n  .from('aliased_table')\n\n/**\nWITH \"aliased_table\" AS (\n  SELECT * FROM \"users\"\n)\nSELECT * FROM \"aliased_table\"\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Union Queries with Array of Callbacks\nDESCRIPTION: Shows how to create multiple union queries by passing an array of callback functions to the union method, with each callback defining a different query to union.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereNull('last_name')\n  // highlight-start\n  .union([\n    (query) => {\n      query.from('users').whereNull('first_name')\n    },\n    (query) => {\n      query.from('users').whereNull('email')\n    },\n  ], true)\n  // highlight-end\n\n// highlight-start\n/**\nSELECT * FROM \"users\" WHERE \"last_name\" IS NULL\nUNION\n(SELECT * FROM \"users\" WHERE \"first_name\" IS NULL)\nUNION\n(SELECT * FROM \"users\" WHERE \"email\" IS NULL)\n*/\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Main Seeder Implementation\nDESCRIPTION: Example of a main seeder file that controls the execution order of other seeders\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseSeeder } from '@adonisjs/lucid/seeders'\nimport app from '@adonisjs/core/services/app'\n\nexport default class IndexSeeder extends BaseSeeder {\n  private async seed(Seeder: { default: typeof BaseSeeder }) {\n    if (\n      !Seeder.default.environment ||\n      (!Seeder.default.environment.includes('development') && app.inDev) ||\n      (!Seeder.default.environment.includes('testing') && app.inTest) ||\n      (!Seeder.default.environment.includes('production') && app.inProduction)\n    ) {\n      return\n    }\n\n    await new Seeder.default(this.client).run()\n  }\n\n  async run() {\n    await this.seed(await import('#database/seeders/category'))\n    await this.seed(await import('#database/seeders/user'))\n    await this.seed(await import('#database/seeders/post'))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the Underlying KnexJS Query\nDESCRIPTION: Demonstrates how to access the underlying KnexJS query instance, which can be useful for utilizing KnexJS features not directly exposed by the Lucid query builder.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.insertQuery()\nconsole.log(query.knexQuery)\n```\n\n----------------------------------------\n\nTITLE: Defining BelongsTo Relationship in Profile Model\nDESCRIPTION: Implementation of a BelongsTo relationship on the Profile model using the @belongsTo decorator. This is the inverse of HasOne, establishing that a profile belongs to a user.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport type { BelongsTo } from '@adonisjs/lucid/types/relations'\nimport { column, BaseModel, belongsTo } from '@adonisjs/lucid/orm'\n\nexport default class Profile extends BaseModel {\n  // Foreign key is still on the same model\n  @column()\n  declare userId: number\n\n  @belongsTo(() => User)\n  declare user: BelongsTo<typeof User>\n}\n```\n\n----------------------------------------\n\nTITLE: Paginating Results in AdonisJS Lucid ORM\nDESCRIPTION: Demonstrates how to use the paginate method to paginate query results and serialize the paginated data.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().paginate(1)\nconst paginationJSON = posts.serialize({\n  fields: ['title', 'id']\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Query Scopes with Builder Type in AdonisJS Lucid ORM\nDESCRIPTION: This example shows how to use the Builder type when defining query scopes that call other scopes, improving TypeScript type inference.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class Post extends BaseModel {\n  static firstScope = scope((query: Builder) => {\n    query.withScopes((scopes) => scopes.secondScope())\n  })\n\n  static secondScope = scope((query) => {\n    query.whereNull('deletedAt')\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Database Connection Configuration in TypeScript\nDESCRIPTION: Example of configuring a Lucid model to use a specific database connection instead of the default one.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class User extends BaseModel {\n  static connection = 'pg'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Seeder using Ace CLI\nDESCRIPTION: Command to generate a new seeder file using the Ace CLI tool\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:seeder User\n\n# CREATE: database/seeders/user_seeder.ts\n```\n\n----------------------------------------\n\nTITLE: Modifying Relationship Queries During Lazy Loading in Lucid ORM\nDESCRIPTION: Shows how to add constraints to relationship queries when lazy loading by passing a callback function to the load method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.load('profile', (profileQuery) => {\n  profileQuery.where('isActive', true)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Formatted Models in TypeScript\nDESCRIPTION: Example of retrieving and using model instances with the formatting applied through the toJSON method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.all()\nreturn users.map((user) => user.toJSON()) // date is formatted during `toJSON` call\n```\n\n----------------------------------------\n\nTITLE: Running Database Seeders\nDESCRIPTION: Commands to execute database seeders, including running all seeders or specific files\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# runs all\nnode ace db:seed\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace db:seed --files \"./database/seeders/user_seeder.ts\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace db:seed -i\n```\n\n----------------------------------------\n\nTITLE: Getting SQL and Bindings with toSQL Method\nDESCRIPTION: Demonstrates how to use the toSQL method to get the query SQL and bindings as an object. This is useful for inspecting and debugging the generated SQL.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = db\n  .table('users')\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n  // highlight-start\n  .toSQL()\n  // highlight-end\n\nconsole.log(output)\n```\n\n----------------------------------------\n\nTITLE: Implementing groupBy for Data Aggregation in AdonisJS\nDESCRIPTION: Shows how to use the groupBy method to apply the GROUP BY clause to a query, which groups rows with the same values into summary rows.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('logs')\n  .select('url')\n  .groupBy('url')\n```\n\n----------------------------------------\n\nTITLE: Using WhereIn with Callback Subqueries\nDESCRIPTION: Demonstrates how to use a callback function to create a subquery for whereIn. This approach allows building the subquery dynamically within the whereIn method call.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereIn(\n    'id',\n    (query) => query.from('user_logins').select('user_id')\n  )\n```\n\n----------------------------------------\n\nTITLE: Returning Plain Objects in AdonisJS Lucid ORM\nDESCRIPTION: Shows how to use the pojo method to return query results as plain JavaScript objects instead of model instances.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().pojo()\n\nconsole.log(posts[0] instanceof Post) // false\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Key Using Column Decorator in TypeScript\nDESCRIPTION: Alternative approach to define a primary key in a Lucid model using the isPrimary option in the column decorator.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends Basemodel {\n  @column({ isPrimary: true })\n  declare email: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Pivot Attributes for Many-to-Many Relationships in TypeScript\nDESCRIPTION: This code shows how to define pivot attributes when creating many-to-many relationships using factories. It demonstrates setting a user's role within a team for a User-Team relationship.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait UserFactory.with('teams', 1, (team) => {\n  team.pivotAttributes({ role: 'admin' })\n}).create()\n\nawait UserFactory.with('teams', 2, (team) => {\n  team.pivotAttributes([{ role: 'admin' }, { role: 'moderator' }])\n}).create()\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Post in AdonisJS\nDESCRIPTION: TypeScript example of using Lucid's query builder to insert a new post in an AdonisJS controller.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async store({ request }: HttpContext) {\n    const title = request.input('title')\n    const description = request.input('description')\n\n    const id = await db\n      .insertQuery()\n      .table('posts')\n      .insert({\n        title,\n        description,\n      })\n      .returning('id')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure of Serialized Pagination Results\nDESCRIPTION: Shows the default JSON structure returned when serializing pagination results, which includes metadata about pagination and the actual data records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"meta\": {\n    \"total\": 50,\n    \"perPage\": 5,\n    \"currentPage\": 1,\n    \"lastPage\": 10,\n    \"firstPage\": 1,\n    \"firstPageUrl\": \"/?page=1\",\n    \"lastPageUrl\": \"/?page=10\",\n    \"nextPageUrl\": \"/?page=2\",\n    \"previousPageUrl\": null\n  },\n  \"data\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming a Table with AdonisJS Schema Builder\nDESCRIPTION: Demonstrates how to rename a table using the 'renameTable' method. This example renames the 'user' table to 'app_users'.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async up() {\n    this.schema.renameTable('user', 'app_users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhereILike for Case-Insensitive Pattern Matching\nDESCRIPTION: Shows how to use the whereILike method for case-insensitive substring searches. This method generates dialect-specific SQL to achieve case-insensitive LIKE comparisons.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('posts')\n  .whereILike('title', '%Adonis 101%')\n```\n\n----------------------------------------\n\nTITLE: Adding Table Index\nDESCRIPTION: Adds an index to a table over specified columns with optional index name and type.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('users', (table) => {\n  table.index(['first_name', 'last_name'], 'user_name_index')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Materialized CTEs with withMaterialized\nDESCRIPTION: Shows how to use the withMaterialized method to create materialized Common Table Expressions in PostgreSQL and SQLite3 databases, which can improve performance for complex CTEs.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .query()\n  .withMaterialized('aliased_table', (query) => {\n    query.from('users').select('*')\n  })\n  .select('*')\n  .from('aliased_table')\n\n/**\nWITH \"aliased_table\" AS MATERIALIZED (\n  SELECT * FROM \"users\"\n)\nSELECT * FROM \"aliased_table\"\n*/\n```\n\n----------------------------------------\n\nTITLE: Using groupByRaw for Custom SQL Group By Clauses\nDESCRIPTION: Demonstrates how to use the groupByRaw method to write a custom SQL GROUP BY statement, including advanced features like WITH ROLLUP.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('sales')\n  .select('year')\n  .groupByRaw('year WITH ROLLUP')\n```\n\n----------------------------------------\n\nTITLE: Explicit Column Name Definition in TypeScript\nDESCRIPTION: Example of explicitly defining a database column name for a model property, overriding the default naming convention.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ columnName: 'user_id', isPrimary: true })\n  declare id: number\n}\n```\n\n----------------------------------------\n\nTITLE: Using Lucid Models with Unique Validation Rule in VineJS\nDESCRIPTION: Example of using a Lucid model directly within the callback function for the 'unique' validation rule, checking if an email already exists in the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/validation.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst schema = vine.object({\n  email: vine\n    .string()\n    // highlight-start\n    .unique((_, value) => {\n      const row = await User.findBy('email', value)\n      return row ? false : true\n    }),\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Limiting Preloaded Relationships with groupLimit in Lucid ORM\nDESCRIPTION: Demonstrates how to use the groupLimit method to limit the number of related records for each parent record. Uses SQL window functions to apply a limit on a per-parent basis.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().preload('comments', (query) => {\n  query.groupLimit(3)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Migration for HasManyThrough Relationship\nDESCRIPTION: Migration definition for the posts table which serves as the target table in a has-many-through relationship, containing a foreign key reference to users.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Posts extends BaseSchema {\n  protected tableName = 'posts'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      // highlight-start\n      table.increments('id').primary()\n      table.integer('user_id').unsigned().references('users.id')\n      // highlight-end\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table with AdonisJS Schema Builder\nDESCRIPTION: Shows how to drop an existing table using the 'dropTable' method. This example drops the 'users' table in the down method of a migration.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async down() {\n    this.schema.dropTable('users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Table Migration with Foreign Key for HasMany Relationship\nDESCRIPTION: Migration file for creating the posts table with a user_id foreign key column that references the users.id column. This establishes a HasMany relationship.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Posts extends BaseSchema {\n  protected tableName = 'posts'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.integer('user_id').unsigned().references('users.id').onDelete('CASCADE') // delete post when user is deleted\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to withCount in Lucid ORM\nDESCRIPTION: Shows how to add filtering constraints to the withCount method to count only related records that match specific criteria.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query().withCount('comments', (query) => {\n  query.where('isApproved', true)\n})\n```\n\n----------------------------------------\n\nTITLE: Column Management Operations in AdonisJS\nDESCRIPTION: Methods for dropping single columns, multiple columns, and renaming columns in database tables.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.table('users', (table) => {\n  table.dropColumn('name')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.table('users', (table) => {\n  table.dropColumns('first_name', 'last_name')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.table('users', (table) => {\n  table.renameColumn('name', 'full_name')\n})\n```\n\n----------------------------------------\n\nTITLE: Applying a Query Scope in AdonisJS Lucid ORM\nDESCRIPTION: This snippet shows how to apply a previously defined query scope using the withScopes method on a query builder instance.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nPost.query().withScopes((scopes) => scopes.published())\n```\n\n----------------------------------------\n\nTITLE: Formatting Date Fields Without Models in TypeScript\nDESCRIPTION: Example showing how date formatting is implemented without using data models, requiring manual formatting in every query result.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nconst users = await db.from('users').select('*')\n\nreturn users.map((user) => {\n  user.dob = DateTime.fromJSDate(user.dob).toFormat('dd LLL yyyy')\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Model Query Builder\nDESCRIPTION: Demonstrates passing a transaction to a model query builder, making the resulting query operate within the transaction context. This is useful for fetching or updating model instances within a transaction.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport User from '#models/user'\n\nconst trx = await db.transaction()\n\nconst users = await User\n  .query({ client: trx })\n  .where('is_active', true)\n```\n\n----------------------------------------\n\nTITLE: Customizing Pagination Key Names with Naming Strategy\nDESCRIPTION: Demonstrates how to customize the key names in the serialized pagination results by overriding the naming strategy to use snake_case instead of the default camelCase.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await db.from('posts').paginate(page, limit)\n\nposts.namingStrategy = {\n  paginationMetaKeys() {\n    return {\n      total: 'total',\n      perPage: 'per_page',\n      currentPage: 'current_page',\n      lastPage: 'last_page',\n      firstPage: 'first_page',\n      firstPageUrl: 'first_page_url',\n      lastPageUrl: 'last_page_url',\n      nextPageUrl: 'next_page_url',\n      previousPageUrl: 'previous_page_url',\n    }\n  },\n}\n\nreturn posts.toJSON()\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dropping a PostgreSQL Schema with AdonisJS\nDESCRIPTION: Demonstrates how to conditionally drop a PostgreSQL schema if it exists using the 'dropSchemaIfExists' method. This ensures idempotent schema operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass FoundationSchema extends BaseSchema {\n  async down() {\n    this.schema.dropSchemaIfExists('public')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive CTEs with Column Names\nDESCRIPTION: Shows how to use the withRecursive method to create recursive Common Table Expressions with explicitly specified column names for the CTE.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .query()\n  .withRecursive('tree', (query) => {\n    query\n      .from('accounts')\n      .select('amount', 'id')\n      .where('id', 1)\n      .union((subquery) => {\n        subquery\n          .from('accounts as a')\n          .select('a.amount', 'a.id')\n          .innerJoin('tree', 'tree.id', '=', 'a.parent_id')\n      })\n  }, ['amount', 'id'])\n  .sum('amount as total')\n  .from('tree')\n```\n\n----------------------------------------\n\nTITLE: Using forPage for Pagination in AdonisJS Lucid\nDESCRIPTION: Shows how to use the forPage method as a convenient way to implement pagination by specifying a page number and number of rows per page.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('posts')\n  .forPage(request.input('page', 1), 20)\n```\n\n----------------------------------------\n\nTITLE: Using Like Operator in Where Clause\nDESCRIPTION: Demonstrates using the LIKE operator with the where method for pattern matching in text columns. This example searches for posts with a specific substring in the title.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('posts')\n  .where('title', 'like', '%Adonis 101%')\n```\n\n----------------------------------------\n\nTITLE: Customizing Count Property Name with withCount in Lucid ORM\nDESCRIPTION: Demonstrates how to specify a custom name for the count property using the as method within the withCount callback.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.query()\n  // highlight-start\n  .withCount('comments', (query) => {\n    query.as('commentsCount')\n  })\n// highlight-end\n\nposts.forEach((post) => {\n  // highlight-start\n  console.log(post.$extras.commentsCount)\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Factory Hooks in AdonisJS Lucid\nDESCRIPTION: Demonstrates how to define before and after hooks for factory events like create. These hooks allow performing actions at specific points in the factory lifecycle.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nFactory.define(Post, () => {})\n  .before('create', () => {})\n  .after('create', () => {})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom relationPivotTable Method\nDESCRIPTION: Shows how to customize the pivot table naming for many-to-many relationships by implementing the relationPivotTable method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  relationPivotTable(\n    _relation: 'manyToMany',\n    model: typeof BaseModel,\n    relatedModel: typeof BaseModel\n  ) {\n    return string.snakeCase(\n      [relatedModel.name, model.name]\n        .sort()\n        .join('_')\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Query Hooks in Lucid ORM Models\nDESCRIPTION: Shows how to define an onQuery hook when defining relationships that automatically applies constraints to all queries executed for that relationship.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport UserEmail from '#models/user_email'\nimport type { HasMany } from '@adonisjs/lucid/types/model'\nimport { column, BaseModel, hasMany } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @hasMany(() => UserEmail)\n  declare emails: HasMany<typeof UserEmail>\n\n  @hasMany(() => UserEmail, {\n    // highlight-start\n    onQuery: (query) => {\n      query.where('isActive', true)\n    },\n    // highlight-start\n  })\n  declare activeEmails: HasMany<typeof UserEmail>\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Custom Naming Strategy to a Specific Model\nDESCRIPTION: Demonstrates how to apply a custom naming strategy to a specific model class.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends BaseModel {\n  public static namingStrategy = new MyCustomNamingStrategy()\n}\n```\n\n----------------------------------------\n\nTITLE: Dropping Foreign Key\nDESCRIPTION: Removes an existing foreign key constraint from table columns.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.dropForeign('user_id')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining HasManyThrough Relationship on the Model\nDESCRIPTION: Shows how to define a has-many-through relationship on the Country model to access posts through users, creating an indirect relationship between countries and posts.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from '#models/post'\nimport User from '#models/user'\nimport type { HasManyThrough } from '@adonisjs/lucid/types/relations'\nimport { column, BaseModel, hasManyThrough } from '@adonisjs/lucid/orm'\n\nexport default class Country extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  // highlight-start\n  @hasManyThrough([() => Post, () => User])\n  declare posts: HasManyThrough<typeof Post>\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Update with Returning Columns in PostgreSQL, Oracle, or MSSQL\nDESCRIPTION: Demonstrates how to use the update method with PostgreSQL, Oracle, or MSSQL to update rows and return specific columns from the updated rows, providing more information than just the count of affected rows.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = db\n  .from('users')\n  .where('id', 1)\n  .update(\n    { email: 'virk@adonisjs.com' },\n    ['id', 'email'] // columns to return\n  )\n\nconsole.log(rows[0].id)\nconsole.log(rows[0].email)\n```\n\n----------------------------------------\n\nTITLE: Creating Skills Table Migration for ManyToMany Relationship\nDESCRIPTION: Migration file for creating the skills table with a primary key. This table will be part of a many-to-many relationship with the users table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Skills extends BaseSchema {\n  protected tableName = 'skills'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Column Value Transformation with Encryption in TypeScript\nDESCRIPTION: Example of using prepare and consume methods to encrypt and decrypt a sensitive column value during database operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// In this example, we are using the `encryption` module from the `@adonisjs/core` package\n// @see https://docs.adonisjs.com/guides/security/encryption\nimport encryption from '@adonisjs/core/services/encryption'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({\n    prepare: (value: string | null) => (value ? encryption.encrypt(value) : null),\n    consume: (value: string | null) => (value ? encryption.decrypt(value) : null),\n  })\n  declare token: string | null\n}\n```\n\n----------------------------------------\n\nTITLE: Using WhereLike for Case-Sensitive Pattern Matching\nDESCRIPTION: Demonstrates using the whereLike method for case-sensitive substring searches. This method adds a WHERE clause with LIKE operator for pattern matching on column values.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('posts')\n  .whereLike('title', '%Adonis 101%')\n```\n\n----------------------------------------\n\nTITLE: Dropping Primary Key\nDESCRIPTION: Removes the primary key constraint from a table with optional constraint name.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.dropPrimary()\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout for Insert Operations\nDESCRIPTION: Demonstrates how to set a timeout for an insert query. An exception is raised if the query exceeds the specified timeout (in milliseconds).\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .table('users')\n  // highlight-start\n  .timeout(2000)\n  // highlight-end\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n```\n\n----------------------------------------\n\nTITLE: Generating SQL Statements in TypeScript using AdonisJS Lucid\nDESCRIPTION: Demonstrates how to use toSQL and toQuery methods to generate SQL statements from query builder chains. This is useful for debugging and understanding the generated queries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = db\n  .from('users')\n  .where('id', 1)\n  .toSQL()\n\nconsole.log(output)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = db\n  .from('users')\n  .where('id', 1)\n  .toSQL()\n  .toNative()\n\nconsole.log(output)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = db\n  .from('users')\n  .where('id', 1)\n  .toQuery()\n\nconsole.log(output)\n// select * from \"users\" where \"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Schema and Query Aliasing in AdonisJS\nDESCRIPTION: Methods for specifying PostgreSQL schema and creating query aliases. Useful for organizing database objects and creating subqueries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .withSchema('public')\n  .select('*')\n\ndb\n  .from('users')\n  .select(\n    db\n      .from('user_logins')\n      .select('ip_address')\n      .whereColumn('users.id', 'user_logins.user_id')\n      .orderBy('id', 'desc')\n      .limit(1)\n      .as('last_login_ip')\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing afterPaginate Hook in TypeScript\nDESCRIPTION: This example demonstrates the use of an afterPaginate hook, which receives an instance of the SimplePaginator class after a paginate operation has been executed.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforePaginate } from '@adonisjs/lucid/orm'\nimport type { SimplePaginatorContract } from '@adonisjs/lucid/types/querybuilder'\n\nexport default class User extends BaseModel {\n  @afterPaginate()\n  static afterPaginateHook(users: SimplePaginatorContract<User>) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using whereRaw in AdonisJS Lucid Query Builder (TypeScript)\nDESCRIPTION: Shows how to use the whereRaw method for custom SQL conditions. It emphasizes the importance of using bind parameters for security and demonstrates dynamic column name usage.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereRaw(`username = ${username}`)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereRaw('username = ?', [username])\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereRaw('?? = ?', ['users.username', username])\n```\n\n----------------------------------------\n\nTITLE: Using WhereNull for NULL Value Checking\nDESCRIPTION: Shows how to use the whereNull method to find rows where a column has a NULL value. This is commonly used for filtering soft-deleted records.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereNull('deleted_at')\n```\n\n----------------------------------------\n\nTITLE: Using WhereExists with Raw Queries\nDESCRIPTION: Demonstrates using whereExists with a raw SQL query. This provides flexibility for complex existence checks that might be difficult to express with the query builder.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereExists(\n    db.raw(\n      'select * from user_logins where users.id = user_logins.user_id'\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Query in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Demonstrates how to execute a raw SQL query using the db.rawQuery method in AdonisJS Lucid. This method allows direct execution of SQL strings while maintaining safety against SQL injection.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nawait db.rawQuery('select * from users')\n```\n\n----------------------------------------\n\nTITLE: URL Range Object Structure for Pagination\nDESCRIPTION: Illustrates the structure of objects returned by the getUrlsForRange method, which includes URL, page number, active status, and separator information for building pagination interfaces.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    url: '/?page=1',\n    page: 1,\n    isActive: true,\n    isSeperator: false,\n  },\n  {\n    url: '/?page=2',\n    page: 2,\n    isActive: true,\n    isSeperator: false,\n  },\n  // ...\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Builder Type for Query Scopes in AdonisJS Lucid ORM\nDESCRIPTION: This code defines a Builder type to help with TypeScript inference when working with query scopes within other scopes.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ModelQueryBuilderContract } from '@adonisjs/lucid/types/model'\n\ntype Builder = ModelQueryBuilderContract<typeof Post>\n```\n\n----------------------------------------\n\nTITLE: Using having in AdonisJS Lucid Query Builder (TypeScript)\nDESCRIPTION: Demonstrates the usage of having and havingRaw methods for filtering grouped results. It shows basic comparison and using aggregate functions in having clauses.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('exams')\n  .select('user_id')\n  .groupBy('user_id')\n  .having('score', '>', 80)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('exams')\n  .select('user_id')\n  .groupBy('user_id')\n  .havingRaw('SUM(score) > ?', [200])\n```\n\n----------------------------------------\n\nTITLE: Implementing afterFetch Hook in TypeScript\nDESCRIPTION: This example demonstrates the use of an afterFetch hook, which receives an array of model instances after a fetch operation has been executed.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, afterFetch } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @afterFetch()\n  static afterFetchHook(users: User[]) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Client with AdonisJS Lucid Factories\nDESCRIPTION: Demonstrates how to use a custom query client instance with a factory. This provides more control over the database interactions in factory operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryClient = Database.connection('tenant-1')\nawait Factory.client(queryClient).create()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Columns After Insert with the Returning Method\nDESCRIPTION: Demonstrates the returning method which allows retrieving one or more columns' values after an insert operation. This works with PostgreSQL, MSSQL, and Oracle databases.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = db\n  .table('users')\n  .returning(['id', 'username'])\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n\nconsole.log(rows[0].id, rows[0].username)\n```\n\n----------------------------------------\n\nTITLE: Updating a Post by ID in AdonisJS\nDESCRIPTION: TypeScript example of using Lucid's query builder to update a post by its ID in an AdonisJS controller.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async update({ request, params }: HttpContext) {\n    const id = params.id\n    const title = request.input('title')\n    const description = request.input('description')\n\n    const updateRowsCount = await db\n      .query()\n      .from('posts')\n      .where('id', id)\n      .update({\n        title,\n        description,\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom tableName Method\nDESCRIPTION: Shows how to customize the table name derivation logic by implementing the tableName method in a custom naming strategy.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  tableName(model: typeof BaseModel) {\n    return string.singular(string.snakeCase(model.name))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Derived Tables with Subqueries\nDESCRIPTION: Demonstrates how to use derived tables by passing a subquery or closure to the from method. This example calculates the average of total marks for users by first creating a derived table of summed marks.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\ndb\n  .from((subquery) => {\n    subquery\n      .from('user_exams')\n      .sum('marks as total')\n      .groupBy('user_id')\n      .as('total_marks')\n  })\n  .avg('total_marks.total')\n```\n\n----------------------------------------\n\nTITLE: Implementing afterFind Hook in TypeScript\nDESCRIPTION: This example demonstrates the use of an afterFind hook, which receives the model instance after a find operation has been executed.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, afterFind } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @afterFind()\n  static afterFindHook(user: User) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Union Queries with Query Builder Instances\nDESCRIPTION: Demonstrates how to create union queries by passing an array of query builder instances instead of callback functions.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereNull('last_name')\n  // highlight-start\n  .union([\n    db.from('users').whereNull('first_name'),\n    db.from('users').whereNull('email')\n  ], true)\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Migration in AdonisJS\nDESCRIPTION: Command for generating both a Lucid model and its corresponding migration file using the -m flag.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:model User -m\n\n# CREATE: database/migrations/1618903673925_users.ts\n# CREATE: app/Models/User.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Factory States for Post Model in TypeScript\nDESCRIPTION: This snippet shows how to define factory states, allowing for variations of the factory. It creates a 'published' state for a Post factory, which changes the status from 'DRAFT' to 'PUBLISHED'.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from '#models/post'\nimport { Factory } from '@adonisjs/lucid/factories'\n\nexport const PostFactory = Factory.define(Post, ({ faker }) => {\n  return {\n    title: faker.lorem.sentence(),\n    content: faker.lorem.paragraphs(4),\n    status: 'DRAFT',\n  }\n})\n  .state('published', (post) => (post.status = 'PUBLISHED')) // ðŸ‘ˆ\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading Relationship Aggregates with loadAggregate in Lucid ORM\nDESCRIPTION: Shows how to lazy load custom aggregates for relationships on a model instance that has already been fetched.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst post = await Post.findOrFail()\nawait post.loadAggregate('comments', (query) => {\n  query.count('*').as('commentsCount')\n})\n\nconsole.log(post.$extras.commentsCount)\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL with AdonisJS Schema Builder\nDESCRIPTION: Shows how to execute raw SQL queries using the 'raw' method of the schema builder. This example sets the SQL mode before altering a table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async up() {\n    this.schema\n      .raw(\"SET sql_mode='TRADITIONAL'\")\n      .table('users', (table) => {\n        table.dropColumn('name')\n        table.string('first_name')\n        table.string('last_name')\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Pivot Rows Without Detaching Existing Records\nDESCRIPTION: Shows how to use the sync method with the detach option disabled. This allows adding new relationships without removing any existing ones from the pivot table.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .related('skills')\n  // Add skills with id 1,2,3, but do not remove any\n  // rows from the pivot table\n  .sync([1, 2, 3], false)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Debug Mode in Database Configuration\nDESCRIPTION: This snippet demonstrates how to enable debug mode globally for a database connection by setting the 'debug' flag to true in the config/database.ts file. This will activate query debugging for all queries on the specified connection.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/debugging.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/database.ts\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/lucid'\n\nconst dbConfig = defineConfig({\n  connection: 'postgres',\n  connections: {\n    postgres: {\n      client: 'pg',\n      connection: {\n        host: env.get('DB_HOST'),\n        port: env.get('DB_PORT'),\n        user: env.get('DB_USER'),\n        password: env.get('DB_PASSWORD'),\n        database: env.get('DB_DATABASE'),\n      },\n      // highlight-start\n      debug: true\n      // highlight-end\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using with for CTEs with Column Names\nDESCRIPTION: Demonstrates how to use the with method to create Common Table Expressions (CTEs) with explicitly specified column names for the CTE.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .query()\n  .with('aliased_table', (query) => {\n    query.from('users').select('id', 'email')\n  }, ['id', 'email'])\n  .select('*')\n  .from('aliased_table')\n\n/**\nWITH \"aliased_table\" (id, email) AS (\n  SELECT * FROM \"users\"\n)\nSELECT * FROM \"aliased_table\"\n*/\n```\n\n----------------------------------------\n\nTITLE: Text and String Columns in AdonisJS\nDESCRIPTION: Methods for adding text and string columns with various configurations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('posts', (table) => {\n  table.text('content_markdown', 'longtext')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('posts', (table) => {\n  table.string('title')\n\n  // Explicit length\n  table.string('title', 100)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing beforeCreate Hook for Avatar Assignment in TypeScript\nDESCRIPTION: This example demonstrates the use of a beforeCreate hook to assign a random avatar URL to a user before inserting the record into the database.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/hooks.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeCreate } from '@adonisjs/lucid/orm'\n\nclass User extends BaseModel {\n  @beforeCreate()\n  static assignAvatar(user: User) {\n    user.avatarUrl = getRandomAvatar()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Table Configuration in AdonisJS\nDESCRIPTION: Methods for configuring table properties such as comments, engine, and charset.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.comment('Manages the app users')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.engine('MyISAM')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.charset('utf8')\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Wrapped Union Queries in AdonisJS\nDESCRIPTION: Demonstrates how to create a union query with wrapped subqueries by passing true as the second argument to the union method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereNull('last_name')\n  .union((query) => {\n    query.from('users').whereNull('first_name')\n  }, true) // ðŸ‘ˆ\n\n/**\nSELECT * FROM \"users\" WHERE \"last_name\" IS NULL\nUNION\n(SELECT * FROM \"users\" WHERE \"first_name\" IS NULL)\n*/\n```\n\n----------------------------------------\n\nTITLE: Applying Row Locks in TypeScript using AdonisJS Lucid\nDESCRIPTION: Demonstrates how to use forUpdate, forShare, skipLocked, and noWait methods for row-level locking in database queries. These are useful for managing concurrent access to data.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = db\n  .from('users')\n  .where('id', 1)\n  .useTransaction(trx)\n  .forUpdate() // ðŸ‘ˆ\n  .first()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = db\n  .from('users')\n  .where('id', 1)\n  .useTransaction(trx)\n  .forShare() // ðŸ‘ˆ\n  .first()\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .where('id', 1)\n  .forUpdate()\n  .skipLocked() // ðŸ‘ˆ\n  .first()\n\n/**\nSELECT * FROM \"users\"\nWHERE \"id\" = 1\nFOR UPDATE SKIP LOCKED\n*/\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .where('id', 1)\n  .forUpdate()\n  .noWait() // ðŸ‘ˆ\n  .first()\n\n/**\nSELECT * FROM \"users\"\nWHERE \"id\" = 1\nFOR UPDATE NOWAIT\n*/\n```\n\n----------------------------------------\n\nTITLE: Working with Pivot Columns in Many-to-Many Preloading\nDESCRIPTION: Shows how to access pivot table columns when preloading many-to-many relationships, including specifying additional columns to retrieve at runtime.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().preload('skills', (query) => {\n  query.pivotColumns(['proficiency'])\n})\n\nusers.forEach((user) => {\n  user.skills.forEach((skill) => {\n    console.log(skill.$extras.pivot_proficiency)\n    console.log(skill.$extras.pivot_user_id)\n    console.log(skill.$extras.pivot_skill_id)\n    console.log(skill.$extras.pivot_created_at)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Date Column Definitions in TypeScript\nDESCRIPTION: Example showing how to define date and dateTime columns in a Lucid model, with auto-creation and auto-update options for timestamps.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column.date()\n  declare dob: DateTime\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Special Column Types in AdonisJS\nDESCRIPTION: Implementation of special column types including boolean, binary, enum, json, jsonb, and uuid.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('posts', (table) => {\n  table.boolean('is_published')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.binary('binary_column')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.enu('account_status', ['PENDING', 'ACTIVE', 'SUSPENDED'], {\n    useNative: true,\n    enumName: 'user_account_status',\n    existingType: false,\n  })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('projects', (table) => {\n  table.json('settings')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('projects', (table) => {\n  table.jsonb('settings')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.uuid('user_id')\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Database Connections in AdonisJS\nDESCRIPTION: TypeScript example demonstrating how to switch between different database connections at runtime using Lucid in AdonisJS.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\n/**\n * Get query client for \"pg\" connection\n */\nconst pg = db.connection('pg')\n\n/**\n * Execute query\n */\nawait pg.query().select('*').from('posts')\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Reporter Data in Query Events\nDESCRIPTION: Demonstrates how to access custom reporter data in the db:query event listener. This allows for custom logging or tracking of queries with additional context.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/lucid/services/emitter'\n\nemitter.on('db:query', (query) => {\n  console.log(query.userId)\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing HasMany Relationship Keys\nDESCRIPTION: Examples showing how to customize the foreign key and local key parameters in a HasMany relationship definition. This allows for non-standard column naming.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@hasMany(() => Post, {\n  foreignKey: 'authorId', // defaults to userId\n})\ndeclare posts: HasMany<typeof Post>\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@hasMany(() => Post, {\n  localKey: 'uuid', // defaults to id\n})\ndeclare posts: HasMany<typeof Post>\n```\n\n----------------------------------------\n\nTITLE: Date and Time Columns in AdonisJS\nDESCRIPTION: Implementation of various date and time column types including date, dateTime, time, and timestamp.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.date('dob')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table\n    .dateTime('some_time', { useTz: true })\n    .defaultTo(this.now())\n\n  // Or define the precision\n  table\n    .dateTime('some_time', { precision: 6 })\n    .defaultTo(this.now(6))\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.time('some_time', { precision: 6 })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.timestamp('created_at')\n\n  // Enable timestampz and DATETIME2 for MSSQL\n  table.timestamp('created_at', { useTz: true })\n\n  // Use precision with MySQL\n  table.timestamp('created_at', { precision: 6 })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom relationPivotForeignKey Method\nDESCRIPTION: Shows how to customize pivot table foreign key naming by implementing the relationPivotForeignKey method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  relationPivotForeignKey(\n    _relation: 'manyToMany',\n    model: typeof BaseModel\n  ) {\n    return string.snakeCase(`${model.name}_${model.primaryKey}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sideloading Data in AdonisJS Lucid ORM\nDESCRIPTION: Shows how to use the sideload method to pass arbitrary data to model instances created after executing the query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await User.query().sideload(auth.user)\n\nusers.forEach((user) => {\n  console.log(user.$sideloaded.user === auth.user) // true\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Transaction Isolation Level\nDESCRIPTION: Shows how to define the isolation level when creating a new transaction. The isolation level determines how transaction concurrency is handled.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/transactions.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.transaction({\n  isolationLevel: 'read uncommitted',\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Builder in AdonisJS Migration\nDESCRIPTION: Demonstrates how to access the schema builder instance in an AdonisJS migration file. The schema builder is available via the 'this.schema' property in the migration class.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nclass UserSchema extends BaseSchema {\n  async up() {\n    console.log(this.schema)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Recursive CTEs with withRecursive\nDESCRIPTION: Demonstrates how to use the withRecursive method to create recursive Common Table Expressions for hierarchical data queries, such as calculating the sum of all children accounts of a parent account.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .query()\n  .withRecursive('tree', (query) => {\n    query\n      .from('accounts')\n      .select('amount', 'id')\n      .where('id', 1)\n      .union((subquery) => {\n        subquery\n          .from('accounts as a')\n          .select('a.amount', 'a.id')\n          .innerJoin('tree', 'tree.id', '=', 'a.parent_id')\n      })\n  })\n  .sum('amount as total')\n  .from('tree')\n```\n\n----------------------------------------\n\nTITLE: Using WhereIn with Simple Values\nDESCRIPTION: Demonstrates the basic usage of whereIn to filter rows where a column value matches any value in a list. This example finds users with specific IDs.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereIn('id', [1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Decrementing Column Values in TypeScript using AdonisJS Lucid\nDESCRIPTION: Shows how to use the decrement method to decrease the value of a column in a database table. The API is similar to the increment method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('accounts')\n  .where('id', 1)\n  .decrement('balance', 10)\n```\n\n----------------------------------------\n\nTITLE: Using whereJson in AdonisJS Lucid Query Builder (TypeScript)\nDESCRIPTION: Demonstrates how to use the whereJson method to query JSON columns in the database. It shows basic object matching and using subqueries for dynamic JSON values.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereJson('address', { city: 'XYZ', pincode: '110001' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereJson(\n    'address',\n    db\n      .select('address')\n      .from('user_address')\n      .where('address.user_id', 1)\n  )\n```\n\n----------------------------------------\n\nTITLE: Clearing Query Conditions in AdonisJS Lucid\nDESCRIPTION: Methods to clear having clause, limit, and offset from queries. These methods allow resetting specific query constraints.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.query().having('total', '>', 100)\nquery.clone().clearHaving()\n\nconst query = db.query().limit(20)\nquery.clone().clearLimit()\n\nconst query = db.query().offset(20)\nquery.clone().clearOffset()\n```\n\n----------------------------------------\n\nTITLE: Creating Pivot Table Migration for ManyToMany Relationship\nDESCRIPTION: Migration file for creating the skill_user pivot table with foreign keys to both users and skills tables. This table enables the many-to-many relationship between users and skills.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class SkillUsers extends BaseSchema {\n  protected tableName = 'skill_user'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.integer('user_id').unsigned().references('users.id')\n      table.integer('skill_id').unsigned().references('skills.id')\n      table.unique(['user_id', 'skill_id'])\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Schema for SQL Operations in AdonisJS\nDESCRIPTION: Demonstrates how to specify a schema for SQL DDL operations using the 'withSchema' method. This example creates a 'users' table in the 'public' schema.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async up() {\n    this.schema\n      .withSchema('public')\n      .createTable('users', (table) => {\n        table.increments()\n        table.string('name')\n        table.timestamp('created_at', { useTz: true })\n        table.timestamp('updated_at', { useTz: true })\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Timestamps in Pivot Table for Many-to-Many Relationship\nDESCRIPTION: Shows how to enable automatic timestamp management for pivot tables in many-to-many relationships using the pivotTimestamps property.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  pivotTimestamps: true\n})\ndeclare skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Connections with AdonisJS Lucid Factories\nDESCRIPTION: Shows how to specify a custom database connection when using a factory. This allows targeting specific database connections for factory operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait Factory.connection('tenant-1').create()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Column Type\nDESCRIPTION: Creates a column with a specific raw database type that isn't covered by standard table builder API.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.specificType('mac_address', 'macaddr')\n})\n```\n\n----------------------------------------\n\nTITLE: Using count Aggregate with Alias in AdonisJS\nDESCRIPTION: Demonstrates how to use the count aggregate function with an alias to count rows in a query result. Note that in PostgreSQL, count returns a string representation of a bigint.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await db\n  .from('users')\n  .count('* as total')\n\nconsole.log(users[0].total)\n```\n\n----------------------------------------\n\nTITLE: Customizing Model Instantiation in AdonisJS Lucid Factories\nDESCRIPTION: Demonstrates how to customize the process of instantiating a model instance for a factory using the newUp handler. This allows for more control over model creation.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nFactory.define(User, () => {})\n  .newUp((attributes, ctx) => {\n    const user = new User()\n    user.fill(attributes)\n\n    return user\n  })\n  .build()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom paginationMetaKeys Method\nDESCRIPTION: Shows how to customize pagination metadata keys by implementing the paginationMetaKeys method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  paginationMetaKeys() {\n    return {\n      total: 'total',\n      perPage: 'per_page',\n      currentPage: 'current_page',\n      lastPage: 'last_page',\n      firstPage: 'first_page',\n      firstPageUrl: 'first_page_url',\n      lastPageUrl: 'last_page_url',\n      nextPageUrl: 'next_page_url',\n      previousPageUrl: 'previous_page_url',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Pagination Links in Edge Template\nDESCRIPTION: Shows how to render posts with pagination links in an Edge template. It uses the getUrlsForRange method to generate an array of page links for navigation.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<div>\n  @each(post in posts)\n    <h1>{{ post.title }}</h1>\n    <p> {{ excerpt(post.body, 200) }} </p>\n  @endeach\n</div>\n\n<hr>\n\n// highlight-start\n<div>\n  @each(anchor in posts.getUrlsForRange(1, posts.lastPage))\n    <a href=\"{{ anchor.url }}\">\n      {{ anchor.page }}\n    </a>\n  @endeach\n</div>\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Dropping a PostgreSQL Schema with AdonisJS\nDESCRIPTION: Shows how to drop a PostgreSQL schema using the 'dropSchema' method. This example drops the 'public' schema in the down method of a migration.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass FoundationSchema extends BaseSchema {\n  async down() {\n    this.schema.dropSchema('public')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Associations with dissociate Method in Lucid ORM\nDESCRIPTION: Shows how to remove a belongsTo relationship by setting the foreign key to null using the dissociate method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nawait profile = await Profile.findOrFail(1)\nawait profile.related('user').dissociate()\n```\n\n----------------------------------------\n\nTITLE: Applying Limit for Result Size Control in AdonisJS\nDESCRIPTION: Demonstrates how to use the limit method to restrict the number of rows returned by a query, typically used for pagination or limiting result set size.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\ndb.from('posts').limit(20)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom columnName Method\nDESCRIPTION: Shows how to customize column name derivation by implementing the columnName method in a custom naming strategy.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  columnName(_model: typeof BaseModel, propertyName: string) {\n    return string.snakeCase(propertyName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Connection Seeder Implementation\nDESCRIPTION: Example of a seeder that uses a custom database connection specified via command line\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseSeeder } from '@adonisjs/lucid/seeders'\nimport User from '#models/user'\n\nexport default class UserSeeder extends BaseSeeder {\n  async run() {\n    await User.create(\n      {\n        email: 'virk@adonisjs.com',\n        password: 'secret',\n      },\n      {\n        connection: this.connection, // ðŸ‘ˆ\n      }\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Column Aliases with Object Notation\nDESCRIPTION: Demonstrates creating column aliases using object key-value pairs, where keys are the alias names and values are the actual column names.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .select({\n    id: 'id',\n\n    // Key is alias name\n    userEmail: 'email'\n  })\n```\n\n----------------------------------------\n\nTITLE: Applying Offset for Pagination in AdonisJS Queries\nDESCRIPTION: Shows how to use the offset method to skip a specified number of rows in the query results, typically used for pagination.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\ndb.from('posts').offset(11)\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeouts in TypeScript with AdonisJS Lucid\nDESCRIPTION: Shows how to set a timeout for database queries using the timeout method. This can help prevent long-running queries from impacting system performance.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .timeout(2000)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .timeout(2000, { cancel: true })\n```\n\n----------------------------------------\n\nTITLE: Setting Column Nullable\nDESCRIPTION: Modifies a column to allow NULL values.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.setNullable('full_name')\n})\n```\n\n----------------------------------------\n\nTITLE: Using orderByRaw for Custom SQL Order By Clauses\nDESCRIPTION: Shows how to use the orderByRaw method to define a custom SQL ORDER BY clause using a raw SQL string, allowing for more complex sorting logic.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nconst commentsCountQuery = db\n  .raw(\n    'select count(*) from comments where posts.id = comments.post_id'\n  )\n  .wrap('(', ')')\n\ndb\n  .from('posts')\n  .orderBy(commentsCountQuery, 'desc')\n```\n\n----------------------------------------\n\nTITLE: Globally Overriding Pagination Naming Strategy in Service Provider\nDESCRIPTION: Shows how to globally override the naming strategy for pagination by configuring the SimplePaginator class in an AdonisJS service provider's ready method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/pagination.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimplePaginator } from '@adonisjs/lucid/database'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationService) {}\n\n  async ready() {\n    // highlight-start\n    SimplePaginator.namingStrategy = {\n      paginationMetaKeys() {\n        return {\n          // ... same as above\n        }\n      },\n    }\n    // highlight-end\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Query Scope with Arguments in AdonisJS Lucid ORM\nDESCRIPTION: This snippet illustrates how to apply a query scope that accepts arguments, passing the required user object to the scope.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_scopes.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nProject.query().withScopes((scopes) => scopes.visibleTo(auth.user))\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with Factory in AdonisJS\nDESCRIPTION: Command for generating a Lucid model along with a factory file using the -f flag for testing purposes.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:model User -f\n\n# CREATE: app/Models/User.ts\n# CREATE: database/factories/User.ts\n```\n\n----------------------------------------\n\nTITLE: Dropping Nullable Constraint\nDESCRIPTION: Removes the nullable constraint from a column. Will fail if column contains NULL values.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.dropNullable('full_name')\n})\n```\n\n----------------------------------------\n\nTITLE: Model with Computed Properties\nDESCRIPTION: Example of adding computed properties to serialized output using the @computed decorator.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/serializing_models.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport string from '@adonisjs/core/helpers/string'\nimport { BaseModel, column, computed } from '@adonisjs/lucid/orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare body: string\n\n  @computed()\n  get excerpt() {\n    return string.truncate(this.body, 50)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Renaming in Serialization\nDESCRIPTION: Shows how to rename properties during serialization using the serializeAs option.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/serializing_models.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class Post extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column({ serializeAs: 'content' })\n  declare body: string\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Many-to-Many Relationship Keys in AdonisJS Lucid\nDESCRIPTION: Demonstrates how to customize the relationship keys in a many-to-many relationship, including the local key, related key, and pivot foreign keys.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  localKey: 'id',\n  pivotForeignKey: 'user_id',\n  relatedKey: 'id',\n  pivotRelatedForeignKey: 'skill_id',\n})\ndeclare skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Specifying Connection or Client Using Query Method in AdonisJS Lucid\nDESCRIPTION: Shows an alternative way to specify a custom connection or client using the query method. This maintains API uniformity between factories and Lucid models.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/model_factories.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait Factory.query({ connection: 'tenant-1' }).create()\n```\n\n----------------------------------------\n\nTITLE: Converting SQL to Native Format with toNative Method\nDESCRIPTION: Shows how to format the SQL query according to the specific database dialect using the toNative method after calling toSQL.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = db\n  .table('users')\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n  .toSQL()\n  .toNative()\n\nconsole.log(output)\n```\n\n----------------------------------------\n\nTITLE: Using distinct without Parameters in AdonisJS Lucid\nDESCRIPTION: Shows how to call the distinct method without parameters to eliminate duplicate rows in a query result.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\ndb.from('users').distinct()\n```\n\n----------------------------------------\n\nTITLE: Dialect-Specific Query Building in AdonisJS\nDESCRIPTION: Methods for adding dialect-specific query constraints using ifDialect and unlessDialect helpers. Useful for database-specific query customization.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .query()\n  .ifDialect('postgres', (query) => {\n      query.whereJson('address', { city: 'XYZ', pincode: '110001' })\n    }, \n  )\n\ndb\n  .from('users')\n  .ifDialect('postgres',\n    (query) => {}, // if dialect is postgres\n    (query) => {}, // otherwise execute this\n  )\n\ndb\n  .from('users')\n  .unlessDialect('postgres', (query) => {\n      query.whereJson('address', { city: 'XYZ', pincode: '110001' })\n    } \n  )\n\ndb\n  .from('users')\n  .query()\n  .unlessDialect('postgres',\n    (query) => {}, // if dialect is anything other than postgres\n    (query) => {}  // otherwise execute this\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Reference in AdonisJS Lucid ORM\nDESCRIPTION: Shows how to access the model reference from which the query instance was created using the model property.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/query_builder.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(User.query().model === User) // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Cancellation with Timeout\nDESCRIPTION: Shows how to configure a query to be cancelled when it exceeds a timeout. This feature works with MySQL and PostgreSQL databases.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .table('users')\n  .timeout(2000, { cancel: true })\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing Unique Validation Rules with Callbacks and Options in VineJS\nDESCRIPTION: Demonstrates two approaches to using the 'unique' validation rule: with a callback function that directly queries the database, and with an options object specifying the table and column to check.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/validation.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Usage with callback\nconst schema = vine.object({\n  email: vine\n    .string()\n    // highlight-start\n    .unique((db, value) => {\n      const row = await db.from('users').where('email', value).first()\n      return row === null\n    }),\n  // highlight-end\n})\n\n// Usage with options\nconst schema = vine.object({\n  email: vine\n    .string()\n    // highlight-start\n    .unique({ table: 'users', column: 'email' }),\n    // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Lucid ORM via Package Manager\nDESCRIPTION: Commands to install the Lucid ORM package using npm, yarn, or pnpm.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/lucid\n```\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @adonisjs/lucid\n```\n\nLANGUAGE: sh\nCODE:\n```\npnpm add @adonisjs/lucid\n```\n\n----------------------------------------\n\nTITLE: Creating Union Queries with Callback Functions\nDESCRIPTION: Shows how to build up a union query by using the union method with a callback function to define the second query to union with.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .whereNull('last_name')\n  .union((query) => {\n    query.from('users').whereNull('first_name')\n  })\n\n/**\nSELECT * FROM \"users\" WHERE \"last_name\" IS NULL\nUNION\nSELECT * FROM \"users\" WHERE \"first_name\" IS NULL\n*/\n```\n\n----------------------------------------\n\nTITLE: Creating Countries Migration for HasManyThrough Relationship\nDESCRIPTION: Migration definition for the countries table which serves as the base table in a has-many-through relationship between Country, User, and Post models.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Countries extends BaseSchema {\n  protected tableName = 'countries'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      // highlight-start\n      table.increments('id').primary()\n      // highlight-end\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Naming Strategy to Specific Pagination Result\nDESCRIPTION: Shows how to apply a custom naming strategy to a specific paginated query result.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\nconst paginator = await db.from('users').paginate()\npaginator.namingStrategy = new CamelCaseNamingStrategy()\n\nreturn paginator.toJSON()\n```\n\n----------------------------------------\n\nTITLE: Using Where Clause with Luxon Date\nDESCRIPTION: Shows how to use the Luxon DateTime library with where clauses to create dynamic date-based filters. This approach allows for more flexible date handling in queries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .where('created_at', '>', DateTime.local().toSQLDate())\n```\n\n----------------------------------------\n\nTITLE: Sorting with Array of Objects in AdonisJS Lucid\nDESCRIPTION: Shows how to sort query results by passing an array of objects to the orderBy method, where each object specifies a column and sort order.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .orderBy([\n    {\n      column: 'username',\n      order: 'asc',\n    },\n    {\n      column: 'created_at',\n      order: 'desc',\n    }\n  ])\n```\n\n----------------------------------------\n\nTITLE: Conditionally Dropping a Table with AdonisJS\nDESCRIPTION: Demonstrates how to conditionally drop a table if it exists using the 'dropTableIfExists' method. This is useful for ensuring idempotent migrations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserSchema extends BaseSchema {\n  async down() {\n    this.schema.dropTableIfExists('users')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CamelCaseNamingStrategy in Lucid ORM\nDESCRIPTION: Shows how to create a custom naming strategy by extending the built-in CamelCaseNamingStrategy class.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { CamelCaseNamingStrategy } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  //... define all the required methods\n}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Date Objects Instead of Luxon in TypeScript\nDESCRIPTION: Example of using standard JavaScript Date objects instead of Luxon DateTime for date fields in a Lucid model.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({\n    consume: (v: string) => new Date(v),\n    prepare: (v: Date) => v.toISOString(), \n  )\n  declare updatedAt: Date\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Migration in AdonisJS Lucid\nDESCRIPTION: Migration file for creating the users table with an auto-incrementing primary key. This table serves as the parent table in relationship examples.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class Users extends BaseSchema {\n  protected tableName = 'users'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').primary()\n      table.timestamp('created_at', { useTz: true })\n      table.timestamp('updated_at', { useTz: true })\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Query Timeout in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Demonstrates how to set a timeout for raw queries using the timeout method. It also shows how to cancel the query when the timeout is exceeded for MySQL and PostgreSQL.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait db\n  .rawQuery('select * from users')\n  .timeout(2000)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait db\n  .rawQuery('select * from users')\n  .timeout(2000, { cancel: true })\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Schema with AdonisJS\nDESCRIPTION: Demonstrates how to create a PostgreSQL schema using the 'createSchema' method. This example creates a 'public' schema.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/schema_builder.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass FoundationSchema extends BaseSchema {\n  async up() {\n    this.schema.createSchema('public')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lucid ORM in AdonisJS\nDESCRIPTION: Commands to configure Lucid ORM in an AdonisJS project, with an option to specify the database dialect.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/installation.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/lucid\n\n# Configure with MYSQL\nnode ace configure @adonisjs/lucid --db=mysql\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Columns with Multiple orderBy Calls\nDESCRIPTION: Demonstrates how to sort query results by multiple columns by calling the orderBy method multiple times with different sort criteria.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('users')\n  .orderBy('username', 'asc')\n  .orderBy('created_at', 'desc')\n```\n\n----------------------------------------\n\nTITLE: Chaining Methods with Relationship Query Builder in Lucid ORM\nDESCRIPTION: Demonstrates how to chain additional query constraints when using a relationship query builder to customize the query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await user.related('posts').query().where('isPublished', true).paginate(1)\n```\n\n----------------------------------------\n\nTITLE: Cloning Queries in TypeScript with AdonisJS Lucid\nDESCRIPTION: Shows how to use the clone method to create a new query builder object with all constraints applied from the original query. This is useful for creating variations of a base query.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.from('users').select('id', 'email')\nconst clonedQuery = query.clone().clearSelect()\n\nawait query // select \"id\", \"email\" from \"users\"\nawait clonedQuery // select * from \"users\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom relationLocalKey Method\nDESCRIPTION: Shows how to customize the local key for relationships by implementing the relationLocalKey method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  relationLocalKey(\n    relation: string,\n    model: typeof BaseModel,\n    relatedModel: typeof BaseModel\n  ) {\n    if (relation === 'belongsTo') {\n      return relatedModel.primaryKey\n    }\n\n    return model.primaryKey\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using distinctOn for PostgreSQL Queries in AdonisJS\nDESCRIPTION: Demonstrates the PostgreSQL-specific distinctOn method which returns the first row of each group of rows where the specified columns contain the same values.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .from('logs')\n  .distinctOn('url')\n  .orderBy('created_at', 'DESC')\n```\n\n----------------------------------------\n\nTITLE: Manually Listening for Database Query Events\nDESCRIPTION: This snippet demonstrates how to manually listen for the 'db:query' event to handle debug logs with custom logic. In this example, query information is passed to the application logger instead of using the built-in pretty printing functionality.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/debugging.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/events.ts\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('db:query', function (query) {\n  logger.debug(query)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Lucid Model with Ace CLI\nDESCRIPTION: Command for generating a new Lucid model using the AdonisJS CLI tool.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/introduction.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:model User\n\n# CREATE: app/Models/User.ts\n```\n\n----------------------------------------\n\nTITLE: Registering Naming Strategy with SimplePaginator\nDESCRIPTION: Shows how to apply a custom naming strategy to the SimplePaginator for use with direct database queries.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SimplePaginator } from '@adonisjs/lucid/database'\n\nSimplePaginator.namingStrategy = new MyCustomNamingStrategy()\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Seeder Implementation\nDESCRIPTION: Example of a seeder that only runs in specific environments using the environment property\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/guides/seeders.md#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseSeeder } from '@adonisjs/lucid/seeders'\n\nexport default class UserSeeder extends BaseSeeder {\n  static environment = ['development', 'testing']\n\n  async run() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative count Syntax with Separate Alias Parameter\nDESCRIPTION: Shows an alternative way to use the count aggregate function by providing the column name and alias as separate parameters.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst users = await db\n  .from('users')\n  .count('*', 'total')\n\nconsole.log(users[0].total)\n```\n\n----------------------------------------\n\nTITLE: Table Inheritance in PostgreSQL\nDESCRIPTION: Sets the parent table for inheritance. Only applicable to PostgreSQL databases.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('capitals', (table) => {\n  table.inherits('cities')\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Table Index\nDESCRIPTION: Removes an existing index from table columns with optional index name specification.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('users', (table) => {\n  table.dropIndex(['first_name', 'last_name'], 'user_name_index')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom relationForeignKey Method\nDESCRIPTION: Shows how to customize foreign key naming for relationships by implementing the relationForeignKey method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  relationForeignKey(\n    relation: string,\n    model: typeof BaseModel,\n    relatedModel: typeof BaseModel\n  ) {\n    if (relation === 'belongsTo') {\n      return string.camelCase(`${relatedModel.name}_${relatedModel.primaryKey}`)\n    }\n\n    return string.camelCase(`${model.name}_${model.primaryKey}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Pivot Table for Many-to-Many Relationship\nDESCRIPTION: Shows how to define a custom pivot table name for a many-to-many relationship instead of using the automatically generated name.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  pivotTable: 'user_skills',\n})\ndeclare skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Setting Table Collation in MySQL\nDESCRIPTION: Sets the collation for a database table. Only applicable to MySQL databases.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.createTable('users', (table) => {\n  table.collate('utf8_unicode_ci')\n})\n```\n\n----------------------------------------\n\nTITLE: Dropping Unique Constraint\nDESCRIPTION: Removes an existing unique constraint from table columns.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/migrations/table_builder.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nthis.schema.alterTable('posts', (table) => {\n  table.dropUnique(['email'])\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom serializedName Method\nDESCRIPTION: Shows how to customize the property names in serialized JSON by implementing the serializedName method.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/naming_strategy.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { CamelCaseNamingStrategy, BaseModel } from '@adonisjs/lucid/orm'\n\nclass MyCustomNamingStrategy extends CamelCaseNamingStrategy {\n  serializedName(_model: typeof BaseModel, propertyName: string) {\n    return string.snakeCase(propertyName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Reporting and Event Handling in AdonisJS\nDESCRIPTION: Implementation of reporter data functionality for query profiling and event emission. Allows passing additional metadata to query events.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.from('users')\n\nawait query\n  .reporterData({ userId: auth.user.id })\n  .select('*')\n\nEvent.on('db:query', (query) => {\n  console.log(query.userId)\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging Raw Queries in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Shows how to enable debugging for individual raw queries using the debug method. This allows for fine-grained control over query debugging.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait db\n  .rawQuery('select * from users')\n  .debug(true)\n```\n\n----------------------------------------\n\nTITLE: Generated SQL for Where Groups\nDESCRIPTION: Shows the SQL that gets generated from the where groups example. This demonstrates how the query builder translates the method calls into SQL syntax.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM \"users\"\n  WHERE (\n    \"username\" = ? AND \"deleted_at\" IS NULL\n  )\n  or (\n    \"email\" = ? AND \"deleted_at\" IS NULL\n  )\n```\n\n----------------------------------------\n\nTITLE: Using wrap Method on Raw Query in AdonisJS Lucid (TypeScript)\nDESCRIPTION: Demonstrates the use of the wrap method to enclose a raw query with a prefix and suffix. This is particularly useful when passing the raw query as a reference.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.select(\n  'id',\n  db\n    .raw('select ip_address from user_logins')\n    .wrap('(', ')'),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Reporter Data to Query Events\nDESCRIPTION: Shows how to add custom data to the query reporter, which can be accessed in the db:query event or the profiler. Useful for adding context to query logs.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.table('users')\n\nawait query\n  .reporterData({ userId: auth.user.id })\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n```\n\n----------------------------------------\n\nTITLE: Enabling Query Debugging for Insert Operations\nDESCRIPTION: Shows how to enable debugging for an individual insert query using the debug method. This allows seeing the generated SQL query and execution details for troubleshooting.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst rows = db\n  .table('users')\n  // highlight-start\n  .debug(true)\n  // highlight-end\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n```\n\n----------------------------------------\n\nTITLE: Getting Formatted SQL with Bindings Applied using toQuery\nDESCRIPTION: Demonstrates the toQuery method which returns the SQL query as a string with all bindings already applied to the placeholders, showing the exact query that will be executed.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst output = db\n  .table('users')\n  .insert({\n    username: 'virk',\n    email: 'virk@adonisjs.com',\n    password: 'secret',\n  })\n  .toQuery()\n\nconsole.log(output)\n/**\nINSERT INTO \"users\"\n  (\"email\", \"password\", \"username\")\nvalues\n  ('virk@adonisjs.com', 'secret', 'virk')\n*/\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching in Query Building with AdonisJS\nDESCRIPTION: Implementation of match helper for executing conditional blocks in queries. Similar to switch statements in JavaScript.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/select.md#2025-04-19_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\ndb\n  .query()\n  .match(\n    [\n      auth.isSuperUser, (query) => query.whereIn('status', ['published', 'draft'])\n    ],\n    [\n      auth.user, (query) => query.where('user_id', auth.user.id)\n    ],\n    (query) => query.where('status', 'published').where('is_public', true)\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing the Database Query Client\nDESCRIPTION: Shows how to access the underlying database query client instance from the query builder, which might be needed for advanced operations.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/insert.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = db.insertQuery()\nconsole.log(query.client)\n```\n\n----------------------------------------\n\nTITLE: Customizing Pivot Table Timestamp Column Names\nDESCRIPTION: Demonstrates how to customize the timestamp column names in a pivot table for a many-to-many relationship.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/models/relationships.md#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n@manyToMany(() => Skill, {\n  pivotTimestamps: {\n    createdAt: 'creation_date',\n    updatedAt: 'updation_date'\n  }\n})\ndeclare skills: ManyToMany<typeof Skill>\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Entry for Documentation\nDESCRIPTION: Example JSON configuration for a documentation entry, showing the permalink, title, content path, and category properties.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permalink\": \"introduction\",\n  \"title\": \"Introduction\",\n  \"contentPath\": \"./introduction.md\",\n  \"category\": \"Guides\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Algolia Search Configuration\nDESCRIPTION: Optional JSON configuration for integrating Algolia search into the documentation website, including API keys and index name.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"search\": {\n    \"appId\": \"\",\n    \"indexName\": \"\",\n    \"apiKey\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Development Server\nDESCRIPTION: Command to start the development server for local preview of the documentation website.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing the Documentation Boilerplate with Degit\nDESCRIPTION: Command to clone the documentation boilerplate repository using degit, which downloads the repo without git history.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit dimerapp/docs-boilerplate <my-website>\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Documentation Collections\nDESCRIPTION: TypeScript code showing how to create and configure multiple documentation collections with different URL prefixes.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Docs\nconst docs = new Collection()\n  .db(new URL('../content/docs/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/docs')\n\nawait docs.boot()\n\n// API reference\nconst apiReference = new Collection()\n  .db(new URL('../content/api_reference/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/api')\n\nawait apiReference.boot()\n\nexport const collections = [docs, apiReference]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom GitHub Link in Edge Template\nDESCRIPTION: This snippet illustrates how to define custom markup for the GitHub link in the header using the 'github' slot. It allows for additional information to be displayed alongside the link.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('github')\n    <span> Github (11K+ Stars) </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Theme Switcher in Edge Template\nDESCRIPTION: This code shows how to create a custom theme switcher button in the header using the 'themeSwitcher' slot. It uses Alpine.js directives to conditionally display text based on the current theme.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('themeSwitcher')\n    <span x-if=\"store.darkMode.enabled\"> Dark </span>\n    <span x-if=\"!store.darkMode.enabled\"> Light </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Customizing Popup Menu Trigger in Edge Template\nDESCRIPTION: This snippet demonstrates how to define custom markup for the popup menu trigger in the website header using the 'popupMenu' slot. The trigger is only displayed in mobile view.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('popMenu')\n    <span> Open popup menu </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Setting Up Website Configuration\nDESCRIPTION: JSON configuration file for website settings including navigation links, GitHub repository, edit links, and copyright information.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"home\": {\n      \"title\": \"Your project name\",\n      \"href\": \"/\"\n    },\n    \"github\": {\n      \"title\": \"Your project on Github\",\n      \"href\": \"https://github.com/dimerapp\"\n    }\n  },\n  \"fileEditBaseUrl\": \"https://github.com/dimerapp/docs-boilerplate/blob/develop\",\n  \"copyright\": \"Your project legal name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Bindings in Raw SQL Queries with AdonisJS Lucid (TypeScript)\nDESCRIPTION: Shows how to use bindings in raw SQL queries to prevent SQL injection. It demonstrates using placeholders for values and column names in the query string.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/content/docs/query_builders/raw.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.rawQuery(\n  'select * from users where id = ?',\n  [1]\n)\n\n// SELECT * FROM \"users\" WHERE \"id\" = 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndb.rawQuery(\n  'select * from users where ?? = ?',\n  ['users.id', 1]\n)\n\n// SELECT * FROM \"users\" WHERE \"users\".\"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Folder Structure\nDESCRIPTION: Shows the complete folder structure of the documentation boilerplate, including assets, bin, content, src, templates, and vscode_grammars directories.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\nâ”œâ”€â”€ assets\nâ”‚  â”œâ”€â”€ app.css\nâ”‚  â””â”€â”€ app.js\nâ”œâ”€â”€ bin\nâ”‚  â”œâ”€â”€ build.ts\nâ”‚  â””â”€â”€ serve.ts\nâ”œâ”€â”€ content\nâ”‚  â”œâ”€â”€ docs\nâ”‚  â””â”€â”€ config.json\nâ”œâ”€â”€ src\nâ”‚  â”œâ”€â”€ bootstrap.ts\nâ”‚  â””â”€â”€ collections.ts\nâ”œâ”€â”€ templates\nâ”‚  â”œâ”€â”€ elements\nâ”‚  â”œâ”€â”€ layouts\nâ”‚  â”œâ”€â”€ partials\nâ”‚  â””â”€â”€ docs.edge\nâ”œâ”€â”€ vscode_grammars\nâ”‚  â”œâ”€â”€ dotenv.tmLanguage.json\nâ”‚  â””â”€â”€ main.ts\nâ”œâ”€â”€ package-lock.json\nâ”œâ”€â”€ package.json\nâ”œâ”€â”€ README.md\nâ”œâ”€â”€ tsconfig.json\nâ””â”€â”€ vite.config.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Menu in Website Settings\nDESCRIPTION: Optional JSON configuration for defining a navigation menu in the website header with custom links.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"menu\": [\n    {\n      \"href\": \"/docs/introduction\",\n      \"title\": \"Docs\",\n    },\n    {\n      \"href\": \"https://blog.project.com\",\n      \"title\": \"Blog\",\n    },\n    {\n      \"href\": \"https://github.com/project/releases\",\n      \"title\": \"Releases\",\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Code Block Theme\nDESCRIPTION: TypeScript code showing how to configure the theme for syntax highlighting in code blocks using the Renderer class.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport const renderer = new Renderer(view, pipeline)\n  .codeBlocksTheme('material-theme-palenight')\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for the Documentation Project\nDESCRIPTION: Commands to navigate to the project directory and install the required npm dependencies.\nSOURCE: https://github.com/adonisjs/lucid.adonisjs.com/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd <my-website>\nnpm i\n```"
  }
]