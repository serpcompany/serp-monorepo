[
  {
    "owner": "hyperledger",
    "repo": "anoncreds-spec",
    "content": "TITLE: Representing Individual Credential Cryptographic Proof Data Structure in JSON\nDESCRIPTION: This JSON snippet defines the structure of the cryptographic proof data generated for each individual credential used in a W3C AnonCreds presentation. The `sub_proof` object contains `primary_proof` and optionally `non_revoc_proof`, which encapsulate the underlying CL cryptographic proof components before being encoded into the `proofValue` of the credential's proof object.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n                sub_proof: {\n                    \"primary_proof\": { ... },\n                    \"non_revoc_proof\": { ... }  \n                }\n            }\n```\n\n----------------------------------------\n\nTITLE: Defining AnonCreds Public Credential Definition JSON Structure - JSON\nDESCRIPTION: This snippet presents the typical public JSON structure (credential definition) used for credential issuance and verification within the AnonCreds and Hyperledger Indy ecosystems. Required fields include identifiers ('issuerId', 'schemaId'), signature type, tag, and a 'value' object holding the primary CL-RSA public key (modulus 'n'), per-attribute fragments ('r'), random context ('rctxt'), a residue ('s'), and a main value ('z'). Dependencies: All cryptographic values must be generated according to the specification. Key parameters: attribute fragments, link secret, primary public key values. Expected output is a JSON conforming to the AnonCreds specification, containing only public key material and suitable for publication on a ledger or shared with verifiers. All integer fields are expected to be 2048-bit decimal-encoded values.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuerId\": \"did:indy:sovrin:SGrjRL82Y9ZZbzhUDXokvQ\",\n  \"schemaId\": \"did:indy:sovrin:SGrjRL82Y9ZZbzhUDXokvQ/anoncreds/v0/SCHEMA/MemberPass/1.0\",\n  \"type\": \"CL\",\n  \"tag\": \"latest\",\n  \"value\": {\n    \"primary\": {\n      \"n\": \"779...397\",\n      \"r\": {\n        \"birthdate\": \"294...298\",\n        \"birthlocation\": \"533...284\",\n        \"citizenship\": \"894...102\",\n        \"expiry_date\": \"650...011\",\n        \"facephoto\": \"870...274\",\n        \"firstname\": \"656...226\",\n        \"link_secret\": \"521...922\",\n        \"name\": \"410...200\",\n        \"uuid\": \"226...757\"\n      },\n      \"rctxt\": \"774...977\",\n      \"s\": \"750..893\",\n      \"z\": \"632...005\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Restrictions for Attribute and Predicate Requests in AnonCreds JSON\nDESCRIPTION: This snippet provides examples and explanation for the 'restrictions' property, which defines logical conditions that source credentials must satisfy to be accepted for attributes or predicates. Restrictions are specified as a list of JSON objects where each object contains key-value pairs that must match credential properties, combined using AND logic within objects and OR logic between objects. Typical properties include schema ID, issuer DID, credential definition ID, and attribute existence or specific attribute values. This mechanism allows precise control over acceptable credentials for a presentation proof.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_request.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n      \"restrictions\": [\n        {\n          \"issuer_did\": \"<did>\",\n          \"schema_id\": \"id\"\n        },\n        {\n          \"cred_def_id\" : \"<id>\",\n          \"attr::color::marker\": \"1\",\n          \"attr::color::value\" : \"red\"\n        }\n      ]\n```\n\n----------------------------------------\n\nTITLE: Representing Revealed Attribute in W3C AnonCreds Presentation Subject JSON\nDESCRIPTION: This JSON snippet shows how a revealed attribute, such as \"firstName\", is represented within the `credentialSubject` property of a W3C AnonCreds presentation. When an attribute's value is revealed to the verifier, it appears as a simple key-value pair where the value is a string or other basic type.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"credentialSubject\":{\n            ...\n            \"firstName\":\"Alice\",\n            ...\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Public Credential Definition Revocation Keys\nDESCRIPTION: This JSON snippet describes the format of a credential definition with revocation enabled. It features an `issuerId`, `schemaId`, `type`, `tag`, and a `value` object containing `primary` (omitted) and `revocation` data. The `revocation` object includes public key material like `g`, `g_dash`, `h`, `h0`, `h1`, `h2`, `h_cap`, `htilde`, `pk`, `u`, and `y`, essential for verifying credential revocation status.  These values are derived from cryptographic operations.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"issuerId\": \"did:indy:sovrin:F72i3Y3Q4i466efjYJYCHM\",\n  \"schemaId\": \"did:indy:sovrin:F72i3Y3Q4i466efjYJYCHM/anoncreds/v0/SCHEMA/state_license/4.2.0\",\n  \"type\": \"CL\",\n  \"tag\": \"latest\",\n  \"value\": {\n    \"primary\": {â€¦},\n    \"revocation\": {\n      \"g\": \"1 154...813 1 11C...D0D 2 095..8A8\",\n      \"g_dash\": \"1 1F0...3B5 1 229...41D 1 04B...F7D 1 061...8B7 2 095...8A8 1 000...000\",\n      \"h\": \"1 131...0DD 1 0D5...66E 2 095...8A8\",\n      \"h0\": \"1 1AF...246 1 127...361 2 095...8A8\",\n      \"h1\": \"1 242...F14 1 1AC...2FF 2 095...8A8\",\n      \"h2\": \"1 072...7A1 1 09E...622 2 095...8A8\",\n      \"h_cap\": \"1 196...C53 1 238...38B 1 196...C7E 1 198...D31 2 095...8A8 1 000...000\",\n      \"htilde\": \"1 1D5...797 1 034...232 2 095...8A8\",\n      \"pk\": \"1 0E7...A88 1 007...4B8 2 095...8A8\",\n      \"u\": \"1 18E...44B 1 018...F71 1 0D8...2C2 1 003...4CF 2 095...8A8 1 000...000\",\n      \"y\": \"1 068...F6B 1 16C...F7E 1 01F...68A 1 1E3...9F9 2 095...8A8 1 000...000\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AnonCreds W3C Context JSON\nDESCRIPTION: This is the JSON representation of the AnonCreds context.  It defines the terms and vocabularies used within AnonCreds credentials and proofs. This context can be cached locally to avoid repeated network requests.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[[insert: ./data/anoncreds-w3c-context.json ]]\n```\n\n----------------------------------------\n\nTITLE: Credential Subject Format for AnonCreds W3C Credentials\nDESCRIPTION: Demonstrates how to structure the credentialSubject property in AnonCreds W3C credentials, showing raw claim values rather than encoded values.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"credentialSubject\": {\n    \"firstName\": \"Alice\",\n    \"lastName\": \"Jones\",\n    \"age\": \"18\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing AnonCreds Credential JSON Structure - Hyperledger - JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a generated AnonCreds credential, including details on schema and credential definition IDs, encodable attributes, signatures, and correctness proofs. It illustrates how raw and encoded attribute values are stored, supporting both revocable (via revocation registry and witness fields which may be null) and non-revocable credentials. This structure is required for interoperability in Hyperledger Aries implementations, and fields should be populated according to the specification requirements for each use case; the actual output is a JSON object representing the credential issued by an issuer.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schema_id\": string,\n    \"cred_def_id\": string,\n    \"rev_reg_id\": null,\n    \"values\": {\n        \"first_name\": {\n            \"raw\": \"Alice\",\n            \"encoded\": \"113...335\"\n        },\n        \"last_name\": {\n            \"raw\": \"Garcia\",\n            \"encoded\": \"532...452\"\n        },\n        \"birthdate_dateint\": {\n            \"raw\": \"19981119\",\n            \"encoded\": \"19981119\"\n        }\n    },\n    \"signature\": {\n        \"p_credential\": {\n            \"m_2\": \"992...312\",\n            \"a\": \"548...252\",\n            \"e\": \"259...199\",\n            \"v\": \"977...597\"\n        },\n        \"r_credential\": null\n    },\n    \"signature_correctness_proof\": {\n        \"se\": \"898...935\",\n        \"c\": \"935...598\"\n    },\n    \"rev_reg\": null,\n    \"witness\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Expiration via Status in W3C AnonCreds JSON\nDESCRIPTION: This JSON snippet shows the `credentialStatus` property used to represent credential expiration information according to the AnonCreds Announced Revocation Data Flow. By referencing a specific revocation registry `id` and using the \"AnonCredsCredentialStatusList2023\" type, it indicates that the credential's expiration status is managed through checks against the referenced status list rather than a standard `expirationDate`.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"credentialStatus\": {\n    \"type\": \"AnonCredsCredentialStatusList2023\",\n    \"id\": \"did:sov:NcYxiDXkpYi6ov5FcYDi1e:4:NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0:tag:CL_ACCUM:TAG_1\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying a RevRegEntry JSON Object in AnonCreds Revocation\nDESCRIPTION: This JSON snippet represents an example of a Revocation Registry Entry (RevRegEntry) object as published on the ledger, illustrating key properties used during the revocation or activation of credentials. It contains fields such as 'revocDefType' to denote the revocation algorithm, 'revocRegDefId' referencing the relevant revocation registry, and the 'value' object which holds the current and previous accumulator states as well as lists of credential indices that were issued or revoked. This data is critical for maintaining the accumulator used in non-revocation proofs and supporting the verification of credential status changes. The snippet serves as an example format and does not include full payload details.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_revocation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"data\": {\n    \"revocDefType\": \"CL_ACCUM\",\n    \"revocRegDefId\": \"4xE68b6S5VRFrKMMG1U95M:4:4xE68b6S5VRFrKMMG1U95M:3:CL:59232:default:CL_ACCUM:4ae1cc6c-f6bd-486c-8057-88f2ce74e960\",\n    \"value\": {\n        \"accum\": \"21 116...567\",\n        \"prevAccum\": \"21 128...C3B\",\n        \"issued\": [\n        ],\n        \"revoked\": [\n            172\n        ]\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: AnonCreds Definition Schema in W3C Credentials\nDESCRIPTION: Shows how to include AnonCreds definition information using the credentialSchema property to reference both schema and credential definition identifiers.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"credentialSchema\": {\n    \"type\": \"AnonCredsDefinition\",\n    \"definition\": \"did:sov:3avoBCqDMFHFaKUHug9s8W:3:CL:13:default\",\n    \"schema\": \"did:sov:3avoBCqDMFHFaKUHug9s8W:2:fabername:0.1.0\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Issuance Date Format for AnonCreds W3C Credentials\nDESCRIPTION: Shows the correct format for the issuanceDate property in AnonCreds W3C credentials using XMLSCHEMA11-2 combined date-time format.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"issuanceDate\": \"2010-01-01T19:23:24Z\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: AnonCreds W3C Context Implementation\nDESCRIPTION: The context definition for AnonCreds W3C credentials, showing how to properly set the @context attribute to include standard W3C and AnonCreds-specific contexts.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://raw.githubusercontent.com/hyperledger/anoncreds-spec/main/data/anoncreds-w3c-context.json\"\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining W3C AnonCreds Presentation Types in JSON\nDESCRIPTION: This JSON snippet demonstrates the `type` property for a W3C AnonCreds presentation. It specifies \"VerifiablePresentation\" as the general type and \"AnonCredsPresentation\" as an additional type, indicating that the presentation follows the AnonCreds-specific structure defined within the specified `@context`.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  ... \n  \"type\": [\n    \"VerifiablePresentation\",         // general verifiable presentation definition\n    \"AnonCredsPresentation\"           // definition for AnonCreds presentation\n  ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating AnonCreds Setup Data Flow with Mermaid\nDESCRIPTION: This Mermaid sequence diagram visualizes the setup process for AnonCreds, showing interactions between the Verifiable Data Registry, Schema Publisher, Issuer, and Holder. It details steps like publishing schemas, creating and publishing credential definitions, optionally creating and publishing revocation registries, and creating link secrets.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant L as Verifiable<br>Data Registry\n    participant SP as Schema Publisher\n    participant I as Issuer\n    participant H as Holder\n\n    Note over L, H: Schema Publisher: Publish Schema\n\n    SP ->> L: Publish Schema (Schema)\n    L ->> I: Schema ID,<br>Schema Transaction ID\n\n    Note over L, H: Issuer: Create, Store and Publish CredDef\n\n    I ->> I: create_and_store_credential_def<br>(Schema, tag, support_revocation)\n    Note right of I:   store public / <br> private keys and<br>correctness proof\n    I ->> L: Publish CredDef (CredDef)\n\n    Note over L, H: Issuer: Create, Store and Publish Revocation Registry (Optional)\n\n    I ->> I: create_and_store_revoc_reg (intCredDef)\n    Note right of I: get keys\n    Note right of I: store revoc_reg_def,<br>revoc_reg_accum,<br>priv_key,<br>tails_generator\n    I ->> L: Publish RevReg <br>(revoc_reg_id,<br>revoc_reg_def_json,<br>revoc_reg_entry_json)\n\n    Note over L, H: Holder: Create and Store Link Secret\n\n    H ->> H: anoncreds_prover_create_link_secret\n    H ->> H: store link secret\n    rect rgb(191, 223, 255)\n      Note left of H: ðŸ’¡The \"Verifier\" role is<br>omitted in this<br>diagram, since<br>it is not required<br>for the setup\n    end\n```\n\n----------------------------------------\n\nTITLE: Representing Aggregated Cryptographic Proof Data Structure in JSON\nDESCRIPTION: This JSON snippet defines the structure of the aggregated cryptographic proof data generated across all credentials in a W3C AnonCreds presentation. The `aggregated` object contains `c_hash` and `c_list`, which are components of the CL aggregate proof demonstrating the consistent use of the link secret, before being encoded into the `proofValue` of the main presentation proof object.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n            aggregated: { \n                \"c_hash\": \"...\",\n                \"c_list\": [...]\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining AnonCreds Private Credential Definition JSON Structure - JSON\nDESCRIPTION: This snippet illustrates the JSON format for a private credential definition as produced by the credential generation process, containing the issuer's private keys ('p' and 'q'). No revocation support is implied by the null value of 'r_key'. Dependencies: The values must be securely generated using cryptographic primitives as specified, and securely stored by the issuer. Input parameters: random safe primes 'p' and 'q'. Output: A JSON object with a 'p_key' containing both primes and a null 'r_key'. All numeric values are large safe primes, usually 1024 bits or above. The structure is intended for internal storage and must not be disclosed publicly.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"p_key\": {\n    \"p\": \"123...782\",\n    \"q\": \"234...456\"\n  },\n  \"r_key\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Overall W3C AnonCreds Presentation Proof Structure in JSON\nDESCRIPTION: This JSON snippet shows the structure of the main `proof` object for the entire W3C AnonCreds presentation. It uses the `AnonCredsPresentationProof2023` type and includes the `challenge` (nonce from the presentation request) and the `proofValue`, which contains the encoded aggregated CL proof data across all included credentials.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proof\": {\n    \"type\": \"AnonCredsPresentationProof2023\",\n    \"challenge\": \"182453895158932070575246\",\n    \"proofValue\": \"AAAgtMR4DrkY--ZVgKHmUANE04ET7TzUxZ0vZmVcNt4nCkwBABUACQJ69kJVIxHVAQAIAaJ19l-agSA\"\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Revocation Status List Example\nDESCRIPTION: This JSON snippet provides an example of an initial, published Revocation Status List object. It includes the revRegDefId, revocationList, currentAccumulator, and timestamp. The revocationList shows which credentials are initially revoked (1) or not (0).\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"revRegDefId\": \"4xE68b6S5VRFrKMMG1U95M:4:4xE68b6S5VRFrKMMG1U95M:3:CL:59232:default:CL_ACCUM:4ae1cc6c-f6bd-486c-8057-88f2ce74e960\",\n  \"revocationList\": [0, 1, 1, 0],\n  \"currentAccumulator\": \"21 124C594B6B20E41B681E92B2C43FD165EA9E68BC3C9D63A82C8893124983CAE94 21 124C5341937827427B0A3A32113BD5E64FB7AB39BD3E5ABDD7970874501CA4897 6 5438CB6F442E2F807812FD9DC0C39AFF4A86B1E6766DBB5359E86A4D70401B0F 4 39D1CA5C4716FFC4FE0853C4FF7F081DFD8DF8D2C2CA79705211680AC77BF3A1 6 70504A5493F89C97C225B68310811A41AD9CD889301F238E93C95AD085E84191 4 39582252194D756D5D86D0EED02BF1B95CE12AED2FA5CD3C53260747D891993C\",\n  \"timestamp\": 1669640864487\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Predicate in W3C AnonCreds Presentation Subject JSON\nDESCRIPTION: This JSON snippet demonstrates how a predicate, such as a range check on \"age\" without revealing the exact value, is represented within the `credentialSubject` of a W3C AnonCreds presentation. The value is an array containing an object of type \"AnonCredsPredicate\", detailing the `predicate` type (e.g., \">=\") and the `value` used in the check.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"credentialSubject\":{\n            ...\n            \"age\":[\n                {\n                  \"type\":\"AnonCredsPredicate\",\n                  \"predicate\":\">=\",\n                  \"value\":18\n                }\n            ]\n            ...\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Proof Structure for Individual W3C AnonCreds Credentials in Presentation JSON\nDESCRIPTION: This JSON snippet outlines the structure of the `proof` object for a single verifiable credential within a W3C AnonCreds presentation's `verifiableCredential` array. It uses the `AnonCredsPresentationProof2023` type and contains the `proofValue`, which holds the encoded cryptographic proof data (including primary and non-revocation proofs), and an optional `timestamp` if revocation is supported.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n  \"proof\": {\n    \"type\": \"AnonCredsPresentationProof2023\",\n    \"proofValue\": \"AAEBAnr2Ql...0UhJ-bIIdWFKVWxjU3ePxv_7HoY5pUw\",\n    \"timestamp\": Option<1234567>,\n  }\n```\n\n----------------------------------------\n\nTITLE: Representing Credential Status in W3C AnonCreds JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for including revocation status information in a W3C AnonCreds credential. It uses the `credentialStatus` property, setting the `type` to \"AnonCredsCredentialStatusList2023\" to indicate the use of the AnonCreds revocation flow and the `id` to the specific revocation registry identifier where status can be checked.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"credentialStatus\": {\n    \"type\": \"AnonCredsCredentialStatusList2023\",\n    \"id\": \"did:sov:NcYxiDXkpYi6ov5FcYDi1e:4:NcYxiDXkpYi6ov5FcYDi1e:3:CL:NcYxiDXkpYi6ov5FcYDi1e:2:gvt:1.0:tag:CL_ACCUM:TAG_1\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Presentation Request Example - JSON\nDESCRIPTION: This JSON snippet provides an example of a full presentation request, including a `nonce`, `name`, `version`, `requested_attributes`, and `requested_predicates`. The `requested_attributes` section defines the attributes requested along with the related restrictions. The `requested_predicates` section defines the predicates requested, including the name, type, and value. The example includes a `non_revoked` item to specify the non-revocation interval for the presentation request.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_request.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"nonce\":\"168240505120030101\",\n   \"name\":\"Proof of Education\",\n   \"version\":\"1.0\",\n   \"requested_attributes\":{\n      \"0_degree_uuid\":{\n         \"names\":[\n            \"name\",\n            \"date\",\n            \"degree\"\n         ],\n         \"restrictions\":[\n            {\n               \"schema_name\":\"degree schema\"\n            }\n         ]\n      },\n      \"0_self_attested_thing_uuid\":{\n         \"name\":\"self_attested_thing\"\n      },\n      \"non_revoked\": {\n        \"from\": 1673885735,\n        \"to\": 1673885735,\n      }\n   },\n   \"requested_predicates\":{\n      \"0_age_GE_uuid\":{\n         \"name\":\"birthdate_dateint\",\n         \"p_type\":\"<=\",\n         \"p_value\":20030101,\n         \"restrictions\":[\n            {\n               \"schema_name\":\"degree schema\"\n            }\n         ]\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds W3C Credential Structure\nDESCRIPTION: A reference example of a complete AnonCreds credential represented in W3C Verifiable Credentials format.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[[insert: ./data/W3CCredential.json ]]\n```\n\n----------------------------------------\n\nTITLE: Type Definition for AnonCreds W3C Credentials\nDESCRIPTION: Shows how to properly define the type of an AnonCreds credential in W3C format, including both standard VerifiableCredential and AnonCreds-specific types.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  ... \n  \"type\": [\n    \"VerifiableCredential\",         // general verifiable credential definition\n    \"AnonCredsCredential\",          // definition for AnonCreds credentials\n  ]\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying W3C AnonCreds Presentation JSON-LD Context\nDESCRIPTION: This JSON snippet illustrates the required `@context` property for a W3C AnonCreds presentation. It includes the standard \"https://www.w3.org/2018/credentials/v1\" context and an AnonCreds-specific context URI to define custom structures like `AnonCredsPresentation`. This context is essential for resolving the presentation's format.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"@context\": [\n    \"https://www.w3.org/2018/credentials/v1\",\n    \"https://raw.githubusercontent.com/hyperledger/anoncreds-spec/main/data/anoncreds-w3c-context.json\"\n  ],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: AnonCreds Presentation Data Flow Diagram\nDESCRIPTION: This diagram illustrates the sequence of interactions between the Verifiable Data Registry (L), Schema Publisher (SP), Issuer (I), Holder (H), and Verifier (V) in the AnonCreds presentation data flow. The diagram shows the steps of creating a presentation request, sending the request, selecting credentials, requesting revocation entries, generating the presentation, sending the presentation, requesting credential definitions and revocation entries, and verifying the presentation.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_overview.md#_snippet_0\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant L as Verifiable<br>Data Registry\n    participant SP as Schema Publisher\n    participant I as Issuer\n    participant H as Holder   \n    participant V as Verifier \n    Note over L, V: AnonCreds Presentation Data Flow\n    V->>V: Create presentation request\n    V->>H: Send presentation request\n    H->>H: Select credentials to satisfy the presentation request\n    H->>L: If necessary: Request revocation entries  \n    L->>H: Return revocation entries  \n    H->>H: Generate presentation\n    H->>V: Send presentation\n    V->>L: Request credential definitions, revocation entries  \n    L->>V: Return credential definitions, revocation entries  \n    V->>V: Verify presentation\n```\n\n----------------------------------------\n\nTITLE: Issuer Identification in AnonCreds W3C Credentials\nDESCRIPTION: Demonstrates how to represent the issuer in AnonCreds W3C credentials using a resolvable DID URL.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"issuer\": \"did:sov:3avoBCqDMFHFaKUHug9s8W\",\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing AnonCreds Issuance Flow - Mermaid\nDESCRIPTION: This Mermaid diagram visualizes the sequence of interactions and data exchanges among the Issuer, Holder, and Verifiable Data Registry during the AnonCreds credential issuance process. It illustrates the steps from the initial Credential Offer to the final verification and storage of the issued credential.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    autonumber\n    participant L as Verifiable<br>Data Registry\n    participant I as Issuer\n    participant H as Holder\n\n  I ->> I: Create Credential Offer\n  I ->> H: Send Credential Offer\n  H ->> H: Verify Credential Offer\n  opt\n    H ->> L: Request Schema\n    L ->> H: Return Schema\n  end\n  H ->> L: Request Credential Definition\n  L ->> H: Return Credential Definition\n  H ->> H: Create Credential Request\n  H ->> I: Send Credential Request\n  I ->> I: Verify Credential Request\n  I ->> I: Issue Credential\n  I ->> H: Send Credential\n  H ->> H: Remove Credential Blinding\n  H ->> H: Verify and Store Credential\n\n\n  rect rgb(191, 223, 255)\n    Note left of H: ðŸ’¡The \"Verifier\" and \"Schema Publisher\" roles are<br>omitted in this diagram, since they do not participate<br>in the credential issuance data flow.\n  end\n```\n\n----------------------------------------\n\nTITLE: Defining AnonCreds Presentation Request in JSON\nDESCRIPTION: This JSON snippet defines the overall structure of a presentation request that the verifier creates to initiate the presentation data flow with the holder. It includes fields such as a unique nonce, requested attributes and predicates with their identifiers, optional non-revocation intervals, and versioning. The snippet specifies the expected data types and optional nature of some fields, illustrating the payload that guides the holder in constructing the presentation.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_request.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": string,\n    \"version\": string,\n    \"nonce\": string,\n    \"requested_attributes\": {\n        \"<attr_referent>\": <attr_info>,\n        ..., \n    },\n    \"requested_predicates\": {\n        \"<predicate_referent>\": <predicate_info>,\n        ..., \n     },\n    \"non_revoked\": Optional<non_revoc_interval>,\n    \"ver\": Optional<str>\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing the AnonCreds Credential Request (JSON)\nDESCRIPTION: Defines the overall JSON structure for a Credential Request sent by the holder to the issuer. It includes essential fields like `entropy` (a random string, formerly `prover_did`), `cred_def_id` (identifier of the public credential definition), `blinded_ms` (the blinded link secret), `blinded_ms_correctness_proof` (proof of correctness for the blinded secret), and a `nonce` (for replay protection).\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entropy\": \"BZpdQDGp2ifid3u3Up17MG\",\n    \"cred_def_id\": \"GvLGiRogTJubmj5B36qhYz:3:CL:8:faber.agent.degree_schema\",\n    \"blinded_ms\": {\n        # Structure detailed below\n    },\n    \"blinded_ms_correctness_proof\": {\n        # Structure detailed below\n    },\n    \"nonce\": \"604812518357657692681285\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Requested Attribute Information in AnonCreds JSON\nDESCRIPTION: This JSON snippet details the format for describing requested attributes within a presentation request. An attribute request must include either the 'name' or 'names' properties (but not both) to specify which attributes from held credentials are requested. Optional restrictions define constraints on the source credential to restrict which credentials satisfy the request. A non-revocation interval may be set at this level to enforce freshness of credentials.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_request.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": <string>,\n    \"names\": <[string, string]>,\n    \"restrictions\": <restrictions>,\n    \"non_revoked\": <non_revoc_interval>\n}\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Revealed Attribute Group JSON\nDESCRIPTION: This JSON snippet illustrates how a group of revealed attributes from a single source credential is represented within the 'revealed_attrs' section of an AnonCreds presentation proof. It maps the request attribute group name to details including the source credential index and a map of attribute names within the group to their raw and encoded values.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n\"revealed_attrs\": {\n        \"consent_attrs\": {      # The request attribute name from the presentation request\n          \"sub_proof_index\": 1, # The index of the source credential primary proof for the claims\n          \"values\": {           # An entry for the each of the names in the request attribute group\n            \"claim_name\": {     # The name of the claim, its raw and encoded value\n              \"raw\": \"205b1ea0-7848-48d4-b52b-339122d84f62\",\n              \"encoded\": \"46414468020333259158238797309781111434265856695713363124410805958145233348633\"\n            }\n          }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining Requested Predicate Information in AnonCreds JSON\nDESCRIPTION: This JSON snippet describes the format for predicate requests within a presentation request. Each predicate targets an attribute in a source credential and includes the attribute name, predicate type (such as \">=\", \">\", \"<=\", \"<\"), and an integer value to compare against. Restrictions and optional non-revocation intervals further constrain acceptable source credentials and freshness requirements respectively. This structure supports zero-knowledge proofs for predicate assertions.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_request.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"name\": string,\n    \"p_type\": string,\n    \"p_value\": int,\n    \"restrictions\": <restrictions>,\n    \"non_revoked\": <non_revoc_interval>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Blinded Link Secret Correctness Proof Structure (JSON)\nDESCRIPTION: Outlines the JSON structure for the `blinded_ms_correctness_proof` field within a Credential Request. This ZK proof demonstrates the holder's knowledge of the link secret used to generate the `blinded_ms` without revealing the secret itself. It includes the challenge `c`, the proof value `v_dash_cap`, proof components related to hidden attributes `m_caps` (specifically for 'master_secret'), and `r_caps` (empty in this version).\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"blinded_ms_correctness_proof\": {\n    \"c\": \"702...737\",\n    \"v_dash_cap\": \"202...924\",\n    \"m_caps\": {\n        \"master_secret\": \"907...913\"\n    },\n    \"r_caps\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Revocation Interval - JSON\nDESCRIPTION: This JSON snippet defines the structure of the `non_revoked` item, which is used in presentation requests to specify a non-revocation interval. It includes `from` and `to` timestamps, representing the start and end of the interval, respectively. The `non_revoked` item can be placed at the outer level of the presentation request to apply to all attributes and predicates or at the attribute/predicate level to apply only to specific items. The `from` and `to` values are unsigned long long values representing Unix timestamps.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_request.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"from\": Optional<int>,\n    \"to\": Optional<int>,\n}\n```\n\n----------------------------------------\n\nTITLE: Revocation Registry Definition Object Example\nDESCRIPTION: This code snippet shows an example of a Revocation Registry Definition object in JSON format. It includes fields such as issuerId, revocDefType, credDefId, tag, and value, which contains publicKeys, maxCredNum, tailsLocation, and tailsHash. This object is published to a Verifiable Data Registry.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuerId\": \"did:web:example.org\",\n  \"revocDefType\": \"CL_ACCUM\",\n  \"credDefId\": \"Gs6cQcvrtWoZKsbBhD3dQJ:3:CL:140384:mctc\",\n  \"tag\": \"MyCustomCredentialDefinition\",\n  \"value\": {\n    \"publicKeys\": {\n      \"accumKey\": {\n        \"z\": \"1 0BB...386\"\n      }\n    },\n    \"maxCredNum\": 666,\n    \"tailsLocation\": \"https://my.revocations.tails/tailsfile.txt\",\n    \"tailsHash\": \"91zvq2cFmBZmHCcLqFyzv7bfehHH5rMhdAG5wTjqy2PE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Blinded Link Secret Structure (JSON)\nDESCRIPTION: Specifies the JSON structure for the `blinded_ms` field within a Credential Request. It contains the blinded link secret (`u`), derived using the issuer's public key and a blinding factor; `ur`, which is populated only if revocation is supported; `hidden_attributes`, which always contains 'master_secret' in AnonCreds v1.0; and `committed_attributes`, an empty object in this version.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"blinded_ms\": {\n    \"u\": \"331...544\",\n    \"ur\": null,  # Populated when the credential definition supports revoation\n    \"hidden_attributes\": [\n        \"master_secret\"\n    ],\n    \"committed_attributes\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining r_credential JSON Structure\nDESCRIPTION: This snippet defines the `r_credential` JSON data structure. It includes elements like `sigma`, `c`, `vr_prime_prime`, `witness_signature`, `g_i`, `i`, and `m2`, which are used in the revocation process.  The values within are described in the document.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"r_credential\": {\n        \"sigma\": \"1 14C...8A8\",\n        \"c\": \"12A...BB6\",\n        \"vr_prime_prime\": \"0F3...FC4\",\n        \"witness_signature\": {\n            \"sigma_i\": \"1 1D72...000\",\n            \"u_i\": \"1 0B3...000\",\n            \"g_i\": \"1 10D...8A8\"\n        },\n        \"g_i\": \"1 10D7...8A8\",\n        \"i\": 1,\n        \"m2\": \"FDC...283\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key Correctness Proof Structure (Credential Offer) - JSON\nDESCRIPTION: This JSON snippet outlines the structure of the key correctness proof embedded within the Credential Offer, based on the Schnorr Protocol. It contains cryptographic values (\"c\", \"xz_cap\", \"xr_cap\") used by the Holder to cryptographically verify that the Issuer possesses the correct private key for the referenced Credential Definition.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"key_correctness_proof\": {\n    \"c\": \"103...961\",\n    \"xz_cap\": \"563...205\",\n    \"xr_cap\": [\n        [\n            \"<attribute 1>\",\n            \"821...452\"\n        ],\n        [\n            \"master_secret\",\n            \"156...104\"\n        ],\n        [\n            \"<attribute 1>\",\n            \"196...694\"\n        ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AnonCreds Proof Identifiers Structure JSON\nDESCRIPTION: This JSON snippet defines the structure for entries within the 'identifiers' array of an AnonCreds presentation proof. Each entry specifies the necessary identifiers (schema_id, cred_def_id, and optionally rev_reg_id, timestamp) for the verifier to retrieve cryptographic material needed to verify a corresponding source credential proof.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n\"identifiers\": [\n      {\n        \"schema_id\": \"CsQY9MGeD3CQP4EyuVFo5m:2:MYCO Biomarker:0.0.3\",\n        \"cred_def_id\": \"CsQY9MGeD3CQP4EyuVFo5m:3:CL:14951:MYCO_Biomarker\",\n      }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Revealed Attribute JSON\nDESCRIPTION: This JSON snippet illustrates how a single revealed attribute is represented within the 'revealed_attrs' section of an AnonCreds presentation proof. It maps the requested attribute name to details including the source credential index and both the raw and encoded attribute values.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n\"revealed_attrs\": {\n        \"consent_attrs\": {      # The request attribute name from the presentation request\n          \"sub_proof_index\": 1, # The index of the source credential primary proof for the claim\n          \"raw\": \"205b1ea0-7848-48d4-b52b-339122d84f62\",  # The raw and encoded claim values\n          \"encoded\": \"46414468020333259158238797309781111434265856695713363124410805958145233348633\"\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Private Credential Definition Revocation Keys\nDESCRIPTION: This JSON snippet represents the format of a private credential definition with revocation enabled. It contains the `p_key` (omitted in the example) and `r_key` objects. The `r_key` defines the revocation private key, including 'x' and 'sk' values, both integers modulo q. This data is used by the issuer for credential revocation.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"p_key\": {\n    \"p\": \"123...782\",\n    \"q\": \"234...456\"\n  },\n  \"r_key\": {\n    \"x\": \"332...566\",\n    \"sk\": \"992...237\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Schema Object Structure (JSON)\nDESCRIPTION: This JSON snippet shows an example structure for an AnonCreds Schema object. It includes fields for the issuer ID (adhering to Issuer Identifiers rules), schema name, a version string, and an array of attribute names ('attrNames') that will be included in credentials based on this schema.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_setup.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"issuerId\": \"https://example.org/issuers/74acabe2-0edc-415e-ad3d-c259bac04c15\",\n  \"name\": \"Example schema\",\n  \"version\": \"0.0.1\",\n  \"attrNames\": [\"name\", \"age\", \"vmax\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of the AnonCreds Presentation Object (JSON)\nDESCRIPTION: Defines the JSON structure for the 'presentation' object in AnonCreds. It includes the main 'proof' object (containing an array of 'proofs' for each credential and an 'aggregated_proof'), the 'requested_proof' mapping, and 'identifiers' for schemas and credential definitions.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"presentation\": {\n    \"proof\": {\n      \"proofs\": [\n        {\n          \"primary_proof\": {\n            \"eq_proof\": {\n              # Described in detail below\n            },\n            \"ge_proofs\": [\n              # Described in detail below\n            ]\n          }\n        }\n      ],\n      \"aggregated_proof\": {\n        # Described in detail below\n      }\n    },\n    \"requested_proof\": {\n      # Described in detail below\n    }\n    \"identifiers\": {\n      # Described in details below\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Aggregated Proof JSON\nDESCRIPTION: This JSON snippet provides an example of the 'aggregated_proof' object within an AnonCreds presentation proof. It shows sample values for the 'c_hash' (Fiat-Shamir challenge) and the 'c_list' array of cryptographic commitments.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"aggregated_proof\": {\n        \"c_hash\": \"81763443376178433216866153835042672285397553441148068557996780431098922863180\",\n        \"c_list\": [\n          [\n            2,\n            122,\n            246,\n            66,\n            85,\n            35,\n            17,\n            213,\n            1\n          ],\n          [\n            1,\n            162,\n            117,\n            246,\n            95,\n            154,\n            129,\n            32\n          ]\n        ]\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining Credential Offer Structure - JSON\nDESCRIPTION: This JSON snippet specifies the required fields for a Credential Offer, which initiates the AnonCreds issuance flow. It includes references to the relevant Schema and Credential Definition, a unique nonce for security, and a key correctness proof enabling the Holder to verify the Issuer's key.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schema_id\": string,\n    \"cred_def_id\": string,\n    \"nonce\": string,\n    \"key_correctness_proof\" : <key_correctness_proof>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AnonCreds GE Proof Structure JSON\nDESCRIPTION: This JSON snippet defines the structure for a single Greater-than or Equal-to (GE) proof within the 'ge_proofs' array of an AnonCreds presentation proof. It includes fields for cryptographic values ('u', 'r', 'mj', 'alpha', 't') and the associated predicate details.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nge_proofs: [\n  {\n    u,\n    r,\n    mj,\n    alpha,\n    t,\n    predicate\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Unrevealed Attributes JSON\nDESCRIPTION: This JSON snippet illustrates the structure for 'unrevealed_attrs' in an AnonCreds presentation proof. It lists attributes requested by the verifier that the holder chose not to reveal, mapping the attribute name to the index of the relevant source credential proof.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n\"unrevealed_attrs\": {\n        \"consent_attrs\": {      # The request attribute name from the presentation request\n          \"sub_proof_index\": 1  # The index of the source credential primary proof for the claim\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining rev_reg JSON Structure\nDESCRIPTION: This snippet defines the `rev_reg` JSON data structure. It contains the `accum` element which holds the accumulator value of the issuer and is updated when a revocation credential is created and published to the ledger.  The document describes its purpose.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"rev_reg\": {\n        \"accum\": \"21 118...1FB\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Predicates JSON\nDESCRIPTION: This JSON snippet illustrates the structure for the 'predicates' section in an AnonCreds presentation proof. It lists predicates requested by the verifier, mapping the predicate name to the index of the source credential proof used to satisfy the predicate.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n\"predicates\": {\n        \"consent_attrs\": {      # The request predicate name from the presentation request\n          \"sub_proof_index\": 1, # The index of the source credential primary proof for the claim\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Showing Hidden Attribute Values in AnonCreds Proof JSON\nDESCRIPTION: This JSON snippet illustrates the structure and content of the 'm' field within an AnonCreds presentation proof. It maps hidden attribute names to their corresponding calculated cryptographic values (m_hat), represented here as large base10 strings.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"services\": \"14860984314279608355643170908802532226194914773406547259519961082467311361623076451869406343140860447342041426195737612897540117192702117380288330928866665314831926780606136352645\",\n    \"sub_subject_identifier\": \"11736177517163751882849070942823049196298287414132249166618760803125435466270948777194044507635346721244111946358927525083691171695431736819244809221351813271261283779276670885101\",\n    \"moc_method_of_collection\": \"10026360820367693771310999595495505533281326977349798360729122862705999157070660881611421445424239119786180921960380892002204780026072600494332540208429642332890963846523547470729\",\n    \"jurisdiction_data_processing\": \"15829143141425514118932461858094583045441924952665872659029333578019676797278419825311275014912077620757631693167948665554731430154156737419706553672424812320891308795411687679270\",\n    \"iss_internet_processing_uri\": \"6900796243066434651671715348976599009606292569990892886896520779618011026060325075822786686418461731663661832508437549373109822105600719490952253743950241384782222356411498407620\",\n    \"version_consent_specification\": \"7796257942256624260327966366702213561879098947042014532961291550019706546662478888172243088973621029223408695289700984802154645011280488167967047321149956253054269901250137513345\",\n    \"policy_url\": \"12241676508867847022708464707584814145889660003604359058532137895063826021524887759921830911553663255421852525705197991376264187781979066233701110706958983099645275940668404311601\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining AnonCreds Aggregated Proof Structure JSON\nDESCRIPTION: This JSON snippet defines the required structure for the 'aggregated_proof' object in an AnonCreds presentation proof. It includes the 'c_hash' for the challenge and a list ('c_list') of commitments used in the aggregation process.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n\"aggregated_proof\": {\n        \"c_hash\": \"base10string\",\n        \"c_list\": [ [\"base10string\"] ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example AnonCreds Self-Attested Attributes JSON\nDESCRIPTION: This JSON snippet provides an example of the 'self_attested_attrs' section within an AnonCreds presentation proof. This section contains attributes that the holder provides to the verifier without cryptographic proof from an issuer, attested only by the holder.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n\"self_attested_attrs\": {\n        \"consent_attrs\": \"I agree to share my data with the verifier\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining witness JSON Structure\nDESCRIPTION: This snippet defines the `witness` JSON data structure. It includes the `omega` element, which is calculated based on non-revoked indices and the accumulator. The purpose of the `omega` is detailed in the accompanying document.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_issuance.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"witness\": {\n        \"omega\": \"21 124...AC8\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Structure and Example Data for eq_proof (JSON)\nDESCRIPTION: Illustrates the JSON structure and example data for the 'eq_proof' component within a primary proof. It contains revealed attributes ('revealed_attrs'), the blinded issuer signature components ('a_prime', 'e', 'v'), and the blinded representations of unrevealed attributes ('m').\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"eq_proof\": {\n  \"revealed_attrs\": {\n    \"jti_unique_identifier\": \"46414468020333259158238797309781111434265856695713363124410805958145233348633\"\n  },\n  \"a_prime\": \"52825780315318905340996188008133401356826233601375100674436798295026172087388431332751168238882607201020021795967828258295811342078457860422414605408183505911891895360825745994390769724939582542658347473498091021796952186290990181881158576706521445646669342676592451422000320708168877298354804819261007033664223006892049856834172427934815827786052257552492013807885418893279908149441273603109213847535482251568996326545234910687135167595657148526602160452192374611721411569543183642580629352619161783646990187905911781524203367796090408992624211661598980626941053749241077719601278347846928693650092940416717449494816\",\n  \"e\": \"40342480172543061520030194979861449480343743039487113094246205723322643070249538229638327935935486373873622430409109409257546971244601965\",\n  \"v\": \"217871997575635857881367472262154388060800564043554848081521162883333745687724235201324121915821236796357195214089699645741515836727882126142579489701412861659136426497703162695983681701205672924385915403141611021784136285588350763399255203187442277784718461565122805239422370067600654500115262174706580098147603414365915243447789285877195068031630371954678432401446457453517813298670236942253026249413255471803997869331683293818651006043399070308083119054618677128448043841313844695654424369871669436628257531643623230026240200330490039607166147891705813033761093730859310423856156850596341547950105490585959768382544221555877471751940512766452511773683786023245283041103270102119125303027835868565240336923422734962345750992898991606841120358203160628015844345063465293475128118937815965000466081345494616126511595974927544434058100817176268040385848789013718618727873445834393897904247054897801708217939187593785671914\",\n  \"m\": {\n    \"iat_consent_timestamp\": \"7919242808448912829024078929834347184203169048480606699350973804205285806978474375691141504249426249676222104091995582731720654507393708298132400435805626192291975477967402460279\",\n    \"master_secret\": \"3455871040557234123393960708120725061759594951341120214330342075748561632734634451036095543889895409812764789858455375956895105746442946098665140470124325622343440794421325163223\",\n    \"data_controller\": \"16070549690575784944224634793654539357398383214512772967411296056738507137421264813779497172425030465490587794790393434847583852932544021088761347641812155158324233253206392974293\",\n    \"notice\": \"2790610958721083178459621377821800672322230987466716467063649577108407884592339521820875278264969393963213925568888672412150769438560815981777952572004955362915245795447078373509\",\n    \"sensitive\": \"13552814315985495030467505807226704038231487014593307078913973520081443107274508887651839292151852713782653522711975492131914644109941607616672243509214979259100892541150351227883\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Multi-Credential Presentation Placeholder (JSON)\nDESCRIPTION: A placeholder JSON example illustrating a multi-credential presentation without revocation. This example is intended to be replaced with one containing two requested attributes, one predicate, one unrevealed attribute, and one self-attested attribute.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/data_flow_presentation_create_presentation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[[insert: ./data/MutiCredentialPresentation.json ]]\n```\n\n----------------------------------------\n\nTITLE: Installing prerequisites and rendering the specification locally with npm\nDESCRIPTION: Commands for setting up and running the local development environment to render the AnonCreds specification. This includes installing dependencies, running the live rendering process, and generating the specification file.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/EditingTheSpec.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm run edit\nnpm run render\n```\n\n----------------------------------------\n\nTITLE: AnonCreds CL Proof Format for W3C Credentials\nDESCRIPTION: Demonstrates the structure of the proof property containing an AnonCreds CL signature in W3C credential format.\nSOURCE: https://github.com/hyperledger/anoncreds-spec/blob/main/spec/w3c_representation.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"proof\": [\n    {\n      \"type\": \"AnonCredsProof2023\",\n      \"signature\": \"AAAgf9w5lZg....RYp8Z_x3FqdwRHoWruiF0FlM\"\n    }\n  ]\n  ...\n}\n```"
  }
]