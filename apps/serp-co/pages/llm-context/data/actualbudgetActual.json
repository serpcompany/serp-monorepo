[
  {
    "owner": "actualbudget",
    "repo": "actual",
    "content": "TITLE: Customizing Transaction Normalization in JavaScript\nDESCRIPTION: This code snippet demonstrates how to customize the `normalizeTransaction` method when integrating a new bank. It creates a shallow copy of the transaction object, modifies specific fields, and then calls the fallback `normalizeTransaction` method from `integration-bank.js` to complete the normalization process. This approach ensures that the original transaction data remains available while allowing for specific adjustments.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/sync-server/src/app-gocardless/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Fallback from './integration-bank.js';\n\nexport default {\n  ...\n\n  normalizeTransaction(transaction, booked) {\n    // create a shallow copy of the transaction object\n    const editedTrans = { ...transaction };\n\n    // make any changes required to the copy\n    editedTrans.remittanceInformationUnstructured = transaction.remittanceInformationStructured;\n\n    // call the fallback method, passing in your edited transaction as the 3rd parameter\n    // this will calculate the date, payee name and notes fields based on your changes\n    // but leave the original fields available for mapping in the UI\n    return Fallback.normalizeTransaction(transaction, booked, editedTrans);\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Actual Budget API with npm\nDESCRIPTION: This command installs the `@actual-app/api` package from npm, allowing you to interact with the Actual Budget API in your JavaScript projects. It adds the package and its dependencies to your `node_modules` directory and updates your `package.json` file.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/api/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nnpm install @actual-app/api\n```\n\n----------------------------------------\n\nTITLE: Installing Actual Sync Server using npm\nDESCRIPTION: Installs the @actual-app/sync-server package globally using npm. This allows users to execute actual-server commands directly in their terminal. Node.js v18 or higher is required.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/sync-server/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --location=global @actual-app/sync-server\n```\n\n----------------------------------------\n\nTITLE: Modifying Protobuf for CSP Compatibility\nDESCRIPTION: This snippet displays the required modification to the generated protobuf code to ensure compatibility with Content Security Policy (CSP) directives. Replacing the original code with `var global = globalThis;` allows the code to function correctly within the constraints of CSP.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/crdt/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar global = globalThis;\n```\n\n----------------------------------------\n\nTITLE: Run Visual Regression Tests in Docker via yarn\nDESCRIPTION: This snippet demonstrates how to run visual regression tests inside a standardized Docker container using yarn. It supports connecting to a default local server (https://localhost:3001), specifying a different IP and port, and updating snapshots. This assumes docker and yarn are installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# By default, this connects to https://localhost:3001\nyarn vrt:docker\n\n    # To use a different ip and port:\n    yarn vrt:docker --e2e-start-url https://ip:port\n\n    # To update snapshots, use the following command:\n    yarn vrt:docker --e2e-start-url https://ip:port --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Running Actual Server with custom configuration\nDESCRIPTION: Executes the actual-server command with a custom configuration file specified using the --config option. This allows users to override the default settings with their own configurations. The config file is passed as an argument.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/sync-server/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nactual-server --config ./config.json\n```\n\n----------------------------------------\n\nTITLE: Running Actual Server with default configuration\nDESCRIPTION: Executes the actual-server command with the default configuration. This starts the server with its predefined settings. No specific configuration file is specified.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/sync-server/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nactual-server\n```\n\n----------------------------------------\n\nTITLE: Running E2E tests against remote server\nDESCRIPTION: This snippet shows how to run E2E tests against a remote server by setting the E2E_START_URL environment variable. This requires yarn to be installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nE2E_START_URL=http://my-remote-server.com yarn e2e\n```\n\n----------------------------------------\n\nTITLE: Run VRT against remote server locally\nDESCRIPTION: This snippet demonstrates how to run visual regression tests against a remote server locally by setting the E2E_START_URL environment variable.  This requires yarn to be installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nE2E_START_URL=https://my-remote-server.com yarn vrt\n```\n\n----------------------------------------\n\nTITLE: Running E2E tests against local server\nDESCRIPTION: This snippet demonstrates how to start the development server and then run the E2E tests against it.  The development server is expected to be running on localhost:3001. This requires yarn to be installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Start the development server\nyarn start\n\n# Run against the local server (localhost:3001)\nyarn e2e\n```\n\n----------------------------------------\n\nTITLE: Run Visual Regression Tests in Docker Manually\nDESCRIPTION: This snippet details running visual regression tests manually inside a Docker container.  It includes commands for starting the container, troubleshooting potential errors related to reference format, and executing the visual regression tests, ensuring they are run against an HTTPS server, using an IP and port noted earlier. This assumes docker is installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# Run docker container\ndocker run --rm --network host -v $(pwd):/work/ -w /work/ -it mcr.microsoft.com/playwright:v1.41.1-jammy /bin/bash\n\n    # If you receive an error such as \"docker: invalid reference format\", please instead use the following command:\n    docker run --rm --network host -v ${pwd}:/work/ -w /work/ -it mcr.microsoft.com/playwright:v1.41.1-jammy /bin/bash\n\n# Once inside the docker container, run the VRT tests: important - they MUST be ran against a HTTPS server.\n# Use the ip and port noted earlier\nE2E_START_URL=https://ip:port yarn vrt\n\n    # To update snapshots, use the following command:\n    E2E_START_URL=https://ip:port yarn vrt --update-snapshots\n```\n\n----------------------------------------\n\nTITLE: Run VRT against remote server in Docker\nDESCRIPTION: This snippet demonstrates how to run visual regression tests against a remote server within the standardized Docker container using yarn. It allows for specifying the server URL through an environment variable or as a command-line argument. This assumes docker and yarn are installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nE2E_START_URL=https://my-remote-server.com yarn vrt:docker\n\n    # Or pass in server URL as argument\n    yarn vrt:docker --e2e-start-url https://my-remote-server.com\n```\n\n----------------------------------------\n\nTITLE: Start dev instance with HTTPS using docker\nDESCRIPTION: This snippet shows how to start a dev instance with HTTPS enabled, using docker compose. This is required for visual regression tests.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nHTTPS=true docker compose up --build\n```\n\n----------------------------------------\n\nTITLE: Start dev instance with HTTPS\nDESCRIPTION: This snippet shows how to start a dev instance with HTTPS enabled. This is required for visual regression tests. This requires yarn to be installed.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/desktop-client/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nHTTPS=true yarn start\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Code\nDESCRIPTION: This snippet shows the original generated protobuf code that's incompatible with Content Security Policy (CSP) directives due to its reliance on various global object checks. It's generated by default when compiling protobuf definitions using the `protoc` compiler.\nSOURCE: https://github.com/actualbudget/actual/blob/master/packages/crdt/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar global = (function() { return this || window || global || self || Function('return this')(); }).call(null);\n```"
  }
]