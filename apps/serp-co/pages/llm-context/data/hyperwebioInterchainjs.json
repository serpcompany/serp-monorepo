[
  {
    "owner": "hyperweb-io",
    "repo": "interchainjs",
    "content": "TITLE: Wallet Generation and Transaction Signing with InterchainJS\nDESCRIPTION: Comprehensive example showing wallet generation, authentication setup, and transaction signing using InterchainJS DirectSigner.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import wallet and HD path utilities from the SDK packages\nimport { Secp256k1Auth } from '@interchainjs/auth/secp256k1';\nimport { HDPath } from '@interchainjs/types';\n// Import the DirectSigner from our SDK\nimport { DirectSigner } from '@interchainjs/cosmos/signers/direct';\nimport { Bip39, Random } from '@interchainjs/crypto';\nimport { toEncoders } from '@interchainjs/cosmos/utils';\nimport { MsgSend } from 'interchainjs/cosmos/bank/v1beta1/tx';\n\n(async () => {\n  // Generate a mnemonic using the SDK utility\n  const mnemonic = Bip39.encode(Random.getBytes(16)).toString();\n\n  // Derive authentication objects (wallet accounts) using the SDK's Secp256k1Auth\n  // Here we derive the first account using the standard Cosmos HD path.\n  const [auth] = Secp256k1Auth.fromMnemonic(mnemonic, [\n    HDPath.cosmos(0, 0, 0).toString(),\n  ]);\n\n  // Prepare any encoders required for your message types\n  const encoders:Encoder[] = toEncoders(MsgSend);\n\n  // Define your RPC endpoint (ensure it points to a working Cosmos RPC node)\n  const rpcEndpoint = 'http://your-rpc-endpoint:26657';\n\n  // Create a DirectSigner instance using the auth object and your RPC endpoint.\n  // The options object can include chain-specific settings (like the bech32 prefix).\n  const signer = new DirectSigner(auth, encoders, rpcEndpoint, {\n    prefix: 'cosmos', // Replace with your chain's prefix if different\n  });\n\n  // Retrieve the wallet address from the signer\n  const address = await signer.getAddress();\n  console.log('Wallet address:', address);\n\n  // ----- Transaction Example -----\n  // Build your transaction message (e.g., a bank MsgSend). Refer to @interchainjs/cosmos-types for details.\n  const msg = {\n    // Example message object; adjust fields according to your chain and message type\n    // For instance, if using bank.MsgSend, you would populate:\n    typeUrl: '/cosmos.bank.v1beta1.MsgSend',\n    value: { fromAddress: address, toAddress: address, amount: [{ denom: 'uatom', amount: '1' }] }\n  };\n\n  // Sign and broadcast the transaction.\n  // The signAndBroadcast method handles building the transaction and sending it over RPC.\n  const result = await signer.signAndBroadcast([msg]);\n  console.log('Transaction hash:', result.hash);\n})();\n```\n\n----------------------------------------\n\nTITLE: Direct Signer Implementation with Wallet\nDESCRIPTION: Example of implementing DirectSigner using Secp256k1HDWallet with a mnemonic and cosmos configuration\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectSigner } from \"@interchainjs/cosmos/signers/direct\";\nimport { DirectWallet, SignDoc } from \"@interchainjs/cosmos/types\";\nimport { toEncoder } from \"@interchainjs/cosmos/utils\";\nimport { MsgSend } from \"@interchainjs/cosmos-types/cosmos/bank/v1beta1/tx\";\nimport { HDPath } from \"@interchainjs/types\";\n\nconst directWallet = Secp256k1HDWallet.fromMnemonic(\"<MNEMONIC_WORDS>\", [\n  {\n    // bech32_prefix\n    prefix: \"cosmos\",\n    // use cosmos hdpath built by HDPath\n    // we can get cosmos hdpath \"m/44'/118'/0'/0/0\" by this:\n    hdPath: HDPath.cosmos().toString(),\n  },\n]);\nconst signer = await DirectSigner.fromWallet(wallet, [toEncoder(MsgSend)], <RPC_ENDPOINT>);\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages with SigningClient in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and broadcast a message using the SigningClient in InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst msg = {\n  typeUrl: MsgSend.typeUrl,\n  value: MsgSend.fromPartial({\n    amount: [\n      {\n        denom: \"uatom\",\n        amount: \"1000\",\n      },\n    ],\n    toAddress: address,\n    fromAddress: address,\n  }),\n};\n\nconst fee: StdFee = {\n  amount: [\n    {\n      denom: \"uatom\",\n      amount: \"1000\",\n    },\n  ],\n  gas: \"86364\",\n};\nconst response = await signingClient.signAndBroadcast(address, [msg], fee);\n```\n\n----------------------------------------\n\nTITLE: Using Tree Shakable Helpers for Transactions\nDESCRIPTION: Example demonstrating how to use tree shakable helpers for querying validator info and executing delegation transactions.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Import helpers\nimport { getValidator } from \"@interchainjs/cosmos/staking/v1beta1/query.rpc.func\";\nimport { delegate } from \"@interchainjs/cosmos/staking/v1beta1/tx.rpc.func\";\n\n// Query validator info\nconst { validator } = await getValidator(endpoint, {\n  validatorAddr: \"cosmosvaloper1...\",\n});\n\n// Execute delegation\nconst result = await delegate(\n  signingClient,\n  signerAddress,\n  {\n    delegatorAddress: signerAddress,\n    validatorAddress: validator.operatorAddress,\n    amount: { denom: \"uatom\", amount: \"1000000\" },\n  },\n  fee,\n  \"Delegation via InterchainJS\"\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing SigningClient in JavaScript\nDESCRIPTION: This snippet shows how to initialize a SigningClient using InjectiveJS, connecting with a signer and RPC endpoint.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SigningClient } from \"@interchainjs/cosmos/signing-client\";\nimport { defaultSignerOptions } from \"@interchainjs/injective/defaults\";\n\nconst signingClient = await SigningClient.connectWithSigner(\n  await getRpcEndpoint(),\n  new AminoGenericOfflineSigner(aminoOfflineSigner),\n  {\n    signerOptions: defaultSignerOptions.Cosmos,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Blockchain Data with RPC Clients\nDESCRIPTION: Example of using RPC clients to query account balances from Cosmos bank module and Injective exchange module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllBalances } from \"injectivejs/cosmos/bank/v1beta1/query.rpc.func\";\nimport { getExchangeBalances } from \"injectivejs/injective/exchange/v1beta1/query.rpc.func\";\n\n{ getRpcEndpoint } = useChain(\"injective\");\n\nconst endpoint = await getRpcEndpoint();\n\n// now you can query the cosmos modules\nconst balance = await getAllBalances(endpoint, {\n  address: \"inj1addresshere\",\n});\n\nconst exchangeBalance = await getExchangeBalances(endpoint, {});\n```\n\n----------------------------------------\n\nTITLE: Constructing Secp256k1HDWallet from Mnemonic in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Secp256k1HDWallet instance using a mnemonic phrase and HD paths. It initializes a wallet with two accounts using the Cosmos HD path.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/wallet.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Secp256k1HDWallet } from \"@interchainjs/cosmos/wallets/secp256k1hd\";\nimport { HDPath } from \"@interchainjs/types\";\n\n// init wallet with two accounts using two hd paths\nconst wallet = Secp256k1HDWallet.fromMnemonic(\n  \"<MNEMONIC_WORDS>\",\n  // use cosmos hdpath built by HDPath\n  // we can get cosmos hdpath \"m/44'/118'/0'/0/0\" and \"m/44'/118'/0'/0/1\" by this:\n  [0, 1].map((i) => ({\n    prefix: \"cosmos\",\n    hdPath: HDPath.cosmos(0, 0, i).toString(),\n  }))\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing SigningClient in JavaScript\nDESCRIPTION: This code snippet shows how to initialize a SigningClient using InterchainJS for connecting with wallets and signing messages.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SigningClient } from \"@interchainjs/cosmos/signing-client\";\n\nconst signingClient = await SigningClient.connectWithSigner(\n  await getRpcEndpoint(),\n  new AminoGenericOfflineSigner(aminoOfflineSigner)\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Blockchain Data with RPC Client\nDESCRIPTION: Example showing how to create and use an RPC client to query balance data from a Cosmos-based blockchain.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllBalances } from \"@interchainjs/cosmos/bank/v1beta1/query.rpc.func\";\n\n{ getRpcEndpoint } = useChain(\"cosmoshub\");\n\nconst endpoint = await getRpcEndpoint();\n\n// now you can query the cosmos modules\nconst balance = await getAllBalances(endpoint,{\n  address: \"cosmos1addresshere\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Circuit Query and Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet illustrates the import of query and transaction helper functions for the Circuit module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getAccount,\n  getAccounts,\n  getDisabledList,\n} from \"@interchainjs/cosmos/circuit/v1/query.rpc.func\";\n\n// tx helpers\nimport {\n  authorizeCircuitBreaker,\n  tripCircuitBreaker,\n  resetCircuitBreaker,\n} from \"@interchainjs/cosmos/circuit/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Querying RPC Endpoints\nDESCRIPTION: Example of using RPC clients to query cosmos modules and injective modules for balance information\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getAllBalances } from \"injectivejs/cosmos/bank/v1beta1/query.rpc.func\";\nimport { getExchangeBalances } from \"injectivejs/injective/exchange/v1beta1/query.rpc.func\";\n\n{ getRpcEndpoint } = useChain(\"injective\");\n\nconst endpoint = await getRpcEndpoint();\n\n// now you can query the cosmos modules\nconst balance = await getAllBalances(endpoint, {\n  address: \"inj1addresshere\",\n});\n\n// you can also query the injective modules\nconst exchangeBalance = await getExchangeBalances(endpoint, {});\n```\n\n----------------------------------------\n\nTITLE: Combined Query and Transaction Example\nDESCRIPTION: Complete example demonstrating how to combine query and transaction helpers for a staking scenario, including validator querying and delegation execution.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Import helpers\nimport { createQueryRpc } from \"@interchainjs/cosmos/utils\";\nimport { getValidator } from \"@interchainjs/cosmos/staking/v1beta1/query.rpc.func\";\nimport { delegate } from \"@interchainjs/cosmos/staking/v1beta1/tx.rpc.func\";\n\n// Query validator info\nconst { validator } = await getValidator(endpoint, {\n  validatorAddr: \"cosmosvaloper1...\",\n});\n\n// Execute delegation\nconst result = await delegate(\n  signingClient,\n  signerAddress,\n  {\n    delegatorAddress: signerAddress,\n    validatorAddress: validator.operatorAddress,\n    amount: { denom: \"uatom\", amount: \"1000000\" },\n  },\n  fee,\n  \"Delegation via InterchainJS\"\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Exchange Transaction Helper Functions\nDESCRIPTION: Complete list of transaction helper functions available in the Exchange module for market operations, position management, and more.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  activateStakeGrant,\n  adminUpdateBinaryOptionsMarket,\n  authorizeStakeGrants,\n  batchCancelBinaryOptionsOrders,\n  batchCancelDerivativeOrders,\n  batchCancelSpotOrders,\n  batchCreateDerivativeLimitOrders,\n  batchCreateSpotLimitOrders,\n  batchUpdateOrders,\n  cancelBinaryOptionsOrder,\n  cancelDerivativeOrder,\n  cancelSpotOrder,\n  createBinaryOptionsLimitOrder,\n  createBinaryOptionsMarketOrder,\n  createDerivativeLimitOrder,\n  createDerivativeMarketOrder,\n  createSpotLimitOrder,\n  createSpotMarketOrder,\n  decreasePositionMargin,\n  deposit,\n  emergencySettleMarket,\n  externalTransfer,\n  increasePositionMargin,\n  instantBinaryOptionsMarketLaunch,\n  instantExpiryFuturesMarketLaunch,\n  instantPerpetualMarketLaunch,\n  instantSpotMarketLaunch,\n  liquidatePosition,\n  privilegedExecuteContract,\n  rewardsOptOut,\n  subaccountTransfer,\n  updateDerivativeMarket,\n  updateParams,\n  updateSpotMarket,\n  withdraw,\n} from \"injectivejs/injective/exchange/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Importing Query and Transaction Helpers\nDESCRIPTION: Example showing how to import specific query and transaction helper functions for blockchain interactions.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getValidator } from \"@interchainjs/cosmos/staking/v1beta1/query.rpc.func\";\nimport { useGetValidators } from \"@interchainjs/react/cosmos/staking/v1beta1/query.rpc.react\";\n```\n\n----------------------------------------\n\nTITLE: Importing IBC Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet demonstrates the import of query and transaction helper functions for the IBC module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getParams,\n  getDenomHash,\n  getEscrowAddress,\n  getTotalEscrowForDenom,\n} from \"@interchainjs/ibc/applications/transfer/v1/query.rpc.func\";\n\n// tx helpers\nimport {\n  transfer,\n  updateParams,\n} from \"@interchainjs/ibc/applications/transfer/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Combining Query and Transaction Helpers for Staking\nDESCRIPTION: Shows how to combine both query and transaction helpers in a staking scenario. The example demonstrates querying validator information and then executing a delegation transaction.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Import helpers\nimport { getValidator } from \"@interchainjs/cosmos/staking/v1beta1/query.rpc.func\";\nimport { delegate } from \"@interchainjs/cosmos/staking/v1beta1/tx.rpc.func\";\n\n// Query validator info\nconst { validator } = await getValidator(endpoint, {\n  validatorAddr: \"cosmosvaloper1...\",\n});\n\n// Execute delegation\nconst result = await delegate(\n  singingClient,\n  signerAddress,\n  {\n    delegatorAddress: signerAddress,\n    validatorAddress: validator.operatorAddress,\n    amount: { denom: \"uatom\", amount: \"1000000\" },\n  },\n  fee,\n  \"Delegation via InterchainJS\"\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Transaction Helper Functions\nDESCRIPTION: Transaction helper functions for Cosmos modules including distribution, bank, staking, and governance to interact with core blockchain functionality.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  fundCommunityPool,\n  communityPoolSpend,\n  depositValidatorRewardsPool,\n} from \"injectivejs/cosmos/distribution/v1beta1/tx.rpc.func\";\n\nimport {\n  send,\n  multiSend,\n} from \"injectivejs/cosmos/bank/v1beta1/tx.rpc.func\";\n\nimport {\n  delegate,\n  undelegate,\n  cancelUnbondingDelegation,\n  createValidator,\n} from \"injectivejs/cosmos/staking/v1beta1/tx.rpc.func\";\n\nimport {\n  deposit,\n  submitProposal,\n  vote,\n  voteWeighted,\n} from \"injectivejs/cosmos/gov/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Using Vue Composable Hooks for Blockchain Queries\nDESCRIPTION: Demonstrates how to use Vue composable hooks for blockchain queries. This example shows fetching a balance with reactive components and configuration options.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import only what you need\nimport { useGetBalance } from '@interchainjs/vue/cosmos/bank/v1beta1/query.rpc.vue';\n\n// Initialize RPC endpoint and address, then you can get balance by tree shakable hooks\n  const request = computed(() => ({\n    address: address.value,\n    denom,\n  }));\n\n  const {\n    data: balance,\n    isSuccess: isBalanceLoaded,\n    isLoading: isFetchingBalance,\n    refetch: refetchBalance\n  } = useGetBalance({\n    request,\n    options: {\n      enabled: !!address,\n      select: ({ balance }) =>\n        new BigNumber(balance?.amount ?? 0).multipliedBy(\n          10 ** -COIN_DISPLAY_EXPONENT\n        ),\n    },\n    clientResolver: rpcEndpoint,\n  })\n```\n\n----------------------------------------\n\nTITLE: UniSigner Interface Definition\nDESCRIPTION: Core interface definition for UniSigner showing the main signing methods: signArbitrary, signDoc, and sign\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/** you can import { UniSigner } from \"@interchainjs/types\" */\nexport interface UniSigner<SignDoc, Tx> {\n  ...\n  signArbitrary(data: Uint8Array): IKey;\n  signDoc: (doc: SignDoc) => Promise<SignDocResponse<SignDoc>>;\n  sign(\n    messages: unknown,\n    ...args: unknown[]\n  ): Promise<SignResponse<SignDoc, Tx>>;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages with SigningClient in JavaScript\nDESCRIPTION: This snippet demonstrates how to create and broadcast a message using the SigningClient in InjectiveJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst msg = {\n  typeUrl: MsgSend.typeUrl,\n  value: MsgSend.fromPartial({\n    amount: [\n      {\n        denom: \"inj\",\n        amount: \"1000\",\n      },\n    ],\n    toAddress: address,\n    fromAddress: address,\n  }),\n};\n\nconst fee: StdFee = {\n  amount: [\n    {\n      denom: \"inj\",\n      amount: \"864\",\n    },\n  ],\n  gas: \"86364\",\n};\nconst response = await signingClient.signAndBroadcast(address, [msg], fee);\n```\n\n----------------------------------------\n\nTITLE: Importing Distribution Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet illustrates the import of query and transaction helper functions for the Distribution module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getParams,\n  getValidatorDistributionInfo,\n  getValidatorOutstandingRewards,\n  getValidatorCommission,\n  getValidatorSlashes,\n  getDelegationRewards,\n  getDelegationTotalRewards,\n} from \"@interchainjs/cosmos/distribution/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport {\n  setWithdrawAddress,\n  withdrawDelegatorReward,\n  withdrawValidatorCommission,\n  fundCommunityPool,\n  communityPoolSpend,\n  updateParams,\n} from \"@interchainjs/cosmos/distribution/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages with Signing Client\nDESCRIPTION: Demonstrates how to create and broadcast a MsgSend message using the signing client.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst msg = {\n  typeUrl: MsgSend.typeUrl,\n  value: MsgSend.fromPartial({\n    amount: [\n      {\n        denom: \"inj\",\n        amount: \"1000\",\n      },\n    ],\n    toAddress: address,\n    fromAddress: address,\n  }),\n};\n\nconst fee: StdFee = {\n  amount: [\n    {\n      denom: \"inj\",\n      amount: \"864\",\n    },\n  ],\n  gas: \"86364\",\n};\nconst response = await signingClient.signAndBroadcast(address, [msg], fee);\n```\n\n----------------------------------------\n\nTITLE: Defining Cosmos Amino Signer Interface in TypeScript\nDESCRIPTION: This snippet defines the CosmosAminoSigner interface using the UniSigner type with specific type parameters for Cosmos Amino signing.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CosmosAminoSigner = UniSigner<\n  CosmosSignArgs,\n  TxRaw,\n  StdSignDoc,\n  string,\n  BroadcastResponse\n>;\n```\n\n----------------------------------------\n\nTITLE: Initializing SigningClient with InjectiveJS\nDESCRIPTION: Shows how to initialize a SigningClient using InjectiveJS, connecting with a signer and specifying signer options for Injective.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SigningClient } from \"@interchainjs/cosmos/signing-client\";\nimport { defaultSignerOptions } from \"@interchainjs/injective/defaults\";\n\nconst signingClient = await SigningClient.connectWithSigner(\n  await getRpcEndpoint(),\n  new AminoGenericOfflineSigner(aminoOfflineSigner),\n  {\n    signerOptions: defaultSignerOptions.Cosmos,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Importing CosmWasm Transaction Helper Functions\nDESCRIPTION: Transaction helper functions for CosmWasm module to deploy and interact with smart contracts on the Injective blockchain.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  executeContract,\n  clearAdmin,\n  instantiateContract,\n  instantiateContract2,\n  migrateContract,\n  pinCodes,\n  removeCodeUploadParamsAddresses,\n  storeAndInstantiateContract,\n  storeCode,\n  sudoContract,\n  unpinCodes,\n  updateAdmin,\n  updateContractLabel,\n  updateInstantiateConfig,\n  addCodeUploadParamsAddresses,\n  storeAndMigrateContract,\n} from \"injectivejs/cosmwasm/wasm/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Composing Exchange Messages with TypeUrl (Complete List)\nDESCRIPTION: Complete list of typed messages available in the MessageComposer for the Exchange module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/exchange/v1beta1/tx.registry\";\n\nconst {\n  adminUpdateBinaryOptionsMarket,\n  batchCancelBinaryOptionsOrders,\n  batchCancelDerivativeOrders,\n  batchCancelSpotOrders,\n  batchCreateDerivativeLimitOrders,\n  batchCreateSpotLimitOrders,\n  batchUpdateOrders,\n  cancelBinaryOptionsOrder,\n  cancelDerivativeOrder,\n  cancelSpotOrder,\n  createBinaryOptionsLimitOrder,\n  createBinaryOptionsMarketOrder,\n  createDerivativeLimitOrder,\n  createDerivativeMarketOrder,\n  createSpotLimitOrder,\n  createSpotMarketOrder,\n  deposit,\n  exec,\n  externalTransfer,\n  increasePositionMargin,\n  instantBinaryOptionsMarketLaunch,\n  instantExpiryFuturesMarketLaunch,\n  instantPerpetualMarketLaunch,\n  instantSpotMarketLaunch,\n  liquidatePosition,\n  rewardsOptOut,\n  subaccountTransfer,\n  withdraw,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Importing Authz Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet demonstrates how to import query and transaction helper functions for the Authz module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getGrants,\n  getGranterGrants,\n  getGranteeGrants,\n} from \"@interchainjs/cosmos/authz/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport {\n  grant,\n  revoke,\n  exec,\n} from \"@interchainjs/cosmos/authz/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Messages with InjectiveJS\nDESCRIPTION: Demonstrates how to create and broadcast a message using InjectiveJS, including setting up the message, specifying fees, and handling the response.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst msg = {\n  typeUrl: MsgSend.typeUrl,\n  value: MsgSend.fromPartial({\n    amount: [\n      {\n        denom: \"inj\",\n        amount: \"1000\",\n      },\n    ],\n    toAddress: address,\n    fromAddress: address,\n  }),\n};\n\nconst fee: StdFee = {\n  amount: [\n    {\n      denom: \"inj\",\n      amount: \"864\",\n    },\n  ],\n  gas: \"86364\",\n};\nconst response = await signingClient.signAndBroadcast(address, [msg], fee);\n```\n\n----------------------------------------\n\nTITLE: Using Tree-Shakable Query Helper Functions\nDESCRIPTION: Example of importing and using a tree-shakable query helper function to get blockchain balances. Demonstrates bundle size optimization through selective importing.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import only what you need\nimport { getAllBalances } from \"@interchainjs/cosmos/bank/v1beta1/query.rpc.func\";\n\n// Now you can query the blockchain\nconst balance = await getAllBalances(endpoint, {\n  address: \"cosmos1addresshere\",\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Distribution Messages in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and destructure message composers for Cosmos distribution operations using InjectiveJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/distribution/v1beta1/tx.registry\";\n\nconst {\n  fundCommunityPool,\n  setWithdrawAddress,\n  withdrawDelegatorReward,\n  withdrawValidatorCommission,\n} = MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Importing NFT Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet illustrates the import of query and transaction helper functions for the NFT module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getBalance,\n  getOwner,\n  getClass,\n  getClasses,\n  getNFTs,\n  getNFT,\n} from \"@interchainjs/cosmos/nft/v1/query.rpc.func\";\n\n// tx helpers\nimport { send } from \"@interchainjs/cosmos/nft/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Direct Signer Transaction Example\nDESCRIPTION: Example of using DirectSigner to sign and broadcast transactions with fee and memo information.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectSigner } from '@interchainjs/cosmos/signers/direct';\n// (Wallet generation code as shown above is assumed to have been run)\n\n// Build your transaction message (e.g., a bank message)\nconst msg = {\n  // Construct your message based on the schema from @interchainjs/cosmos-types\n};\n\n// Optionally, set fee and memo information\nconst fee = {\n  amount: [\n    {\n      denom: 'uatom',\n      amount: '5000',\n    },\n  ],\n  gas: '200000',\n};\n\n// Sign and broadcast the transaction\nconst result = await signer.signAndBroadcast([msg], {\n  fee,\n  memo: 'migration transaction test',\n});\nconsole.log('Transaction hash:', result.hash);\n```\n\n----------------------------------------\n\nTITLE: Importing Transaction Helpers\nDESCRIPTION: Example of importing transaction helper functions for broadcasting blockchain transactions.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { delegate } from \"@interchainjs/cosmos/staking/v1beta1/tx.rpc.func\";\nimport { useDelegate } from \"@interchainjs/react/cosmos/staking/v1beta1/tx.rpc.react\";\n```\n\n----------------------------------------\n\nTITLE: Importing Staking Query and Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet demonstrates the import of query and transaction helper functions for the Staking module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getValidators,\n  getValidator,\n  getValidatorDelegations,\n  getValidatorUnbondingDelegations,\n  getDelegation,\n  getUnbondingDelegation,\n} from \"@interchainjs/cosmos/staking/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport {\n  createValidator,\n  editValidator,\n  delegate,\n  undelegate,\n  redelegate,\n} from \"@interchainjs/cosmos/staking/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Importing Peggy Messages from InjectiveJS\nDESCRIPTION: Demonstrates how to import and destructure Peggy-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/peggy/v1/tx.registry\";\n\nconst {\n  cancelSendToEth,\n  confirmBatch,\n  depositClaim,\n  eRC20DeployedClaim,\n  requestBatch,\n  sendToEth,\n  setOrchestratorAddresses,\n  submitBadSignatureEvidence,\n  valsetConfirm,\n  valsetUpdateClaim,\n  withdrawClaim,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Advanced SigningClient Configuration in JavaScript\nDESCRIPTION: This snippet shows advanced configuration for manually constructing a SigningClient with custom proto registry and amino converters.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    cosmosAminoConverters,\n    cosmosProtoRegistry,\n    cosmwasmAminoConverters,\n    cosmwasmProtoRegistry,\n    ibcProtoRegistry,\n    ibcAminoConverters,\n    injectiveAminoConverters,\n    injectiveProtoRegistry\n} from 'injectivejs';\n\nconst signer: OfflineSigner = /* create your signer (see above)  */\nconst rpcEndpoint = 'https://rpc.cosmos.directory/injective'; // or another URL\n\nconst protoRegistry: ReadonlyArray<[string, GeneratedType]> = [\n    ...cosmosProtoRegistry,\n    ...cosmwasmProtoRegistry,\n    ...ibcProtoRegistry,\n    ...injectiveProtoRegistry\n];\n\nconst aminoConverters = {\n    ...cosmosAminoConverters,\n    ...cosmwasmAminoConverters,\n    ...ibcAminoConverters,\n    ...injectiveAminoConverters\n};\n\nconst registry = new Registry(protoRegistry);\nconst aminoTypes = new AminoTypes(aminoConverters);\n\nconst signingClient = await SigningClient.connectWithSigner(rpcEndpoint, signer);\n\nsigningClient.addEncoders(registry);\nsigningClient.addConverters(aminoTypes);\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Bank Messages in JavaScript\nDESCRIPTION: This snippet shows how to import and destructure message composers for Cosmos bank operations using InjectiveJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/bank/v1beta1/tx.registry\";\n\nconst { multiSend, send } = MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Composing IBC Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the IBC module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/ibc/applications/transfer/v1/tx.registry\";\n\nconst { transfer } = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Importing IBC Messages from InjectiveJS\nDESCRIPTION: Illustrates how to import and destructure IBC-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/ibc/applications/transfer/v1/tx.registry\";\n\nconst { transfer } = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Advanced SigningClient Setup with InjectiveJS\nDESCRIPTION: Illustrates an advanced setup for manually constructing a SigningClient with InjectiveJS, including registry and converter configurations.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    cosmosAminoConverters,\n    cosmosProtoRegistry,\n    cosmwasmAminoConverters,\n    cosmwasmProtoRegistry,\n    ibcProtoRegistry,\n    ibcAminoConverters,\n    injectiveAminoConverters,\n    injectiveProtoRegistry\n} from 'injectivejs';\n\nconst signer: OfflineSigner = /* create your signer (see above)  */\nconst rpcEndpoint = 'https://rpc.cosmos.directory/injective'; // or another URL\n\nconst protoRegistry: ReadonlyArray<[string, GeneratedType]> = [\n    ...cosmosProtoRegistry,\n    ...cosmwasmProtoRegistry,\n    ...ibcProtoRegistry,\n    ...injectiveProtoRegistry\n];\n\nconst aminoConverters = {\n    ...cosmosAminoConverters,\n    ...cosmwasmAminoConverters,\n    ...ibcAminoConverters,\n    ...injectiveAminoConverters\n};\n\nconst registry = new Registry(protoRegistry);\nconst aminoTypes = new AminoTypes(aminoConverters);\n\nconst signingClient = await SigningClient.connectWithSigner(rpcEndpoint, signer);\n\nsigningClient.addEncoders(registry);\nsigningClient.addConverters(aminoTypes);\n```\n\n----------------------------------------\n\nTITLE: Using SignerFromBrowser for Ethereum Transactions\nDESCRIPTION: Example of using SignerFromBrowser to send an Ethereum transaction in a browser environment. It demonstrates how to create a signer, send a transaction, and wait for the receipt.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignerFromBrowser } from \"@interchainjs/ethereum/signers/SignerFromBrowser\"\nconst signer = new SignerFromBrowser(window.ethereum)\nconst tx = await signer.send({\n  to: recipientAddress,\n  value: BigInt(10**18),\n})\nconst receipt = await tx.wait()\n```\n\n----------------------------------------\n\nTITLE: Initializing Signing Client with Signer Options\nDESCRIPTION: Creates a SigningClient using ConnectWithSigner and default signer options for Cosmos.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SigningClient } from \"@interchainjs/cosmos/signing-client\";\nimport { defaultSignerOptions } from \"@interchainjs/injective/defaults\";\n\nconst signingClient = await SigningClient.connectWithSigner(\n  await getRpcEndpoint(),\n  new AminoGenericOfflineSigner(aminoOfflineSigner),\n  {\n    signerOptions: defaultSignerOptions.Cosmos,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Class Diagram for Wallet Implementation in Mermaid\nDESCRIPTION: A class diagram showing the relationships between ICosmosWallet, OfflineDirectSigner, OfflineAminoSigner, and Secp256k1HDWallet. It illustrates the inheritance and implementation relationships between these classes and interfaces.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/wallet.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class ICosmosWallet {\n        +getAccounts() Promise~AccountData[]~\n    }\n\n    class OfflineDirectSigner {\n        +getAccounts() Promise~AccountData[]~\n        +signDirect(signerAddress: string, signDoc: CosmosDirectDoc) Promise~DirectSignResponse~\n    }\n\n    class OfflineAminoSigner {\n        +getAccounts() Promise~AccountData[]~\n        +signAmino(signerAddress: string, signDoc: CosmosAminoDoc) Promise~AminoSignResponse~\n    }\n\n    class Secp256k1HDWallet {\n        +accounts: ICosmosAccount[]\n        +options: SignerConfig\n        +getAccounts() Promise~AccountData[]~\n        +signDirect(signerAddress: string, signDoc: CosmosDirectDoc) Promise~DirectSignResponse~\n        +signAmino(signerAddress: string, signDoc: CosmosAminoDoc) Promise~AminoSignResponse~\n        +toOfflineDirectSigner() OfflineDirectSigner\n        +toOfflineAminoSigner() OfflineAminoSigner\n        +fromMnemonic(mnemonic: string, derivations: AddrDerivation[], options?: WalletOptions) Secp256k1HDWallet\n        -getAcctFromBech32Addr(address: string) ICosmosAccount\n    }\n\n    OfflineDirectSigner <|.. Secp256k1HDWallet\n    OfflineAminoSigner <|.. Secp256k1HDWallet\n    ICosmosWallet <|.. Secp256k1HDWallet\n\n    style OfflineDirectSigner fill:#f9f,stroke:#333,stroke-width:2px\n    style OfflineAminoSigner fill:#f9f,stroke:#333,stroke-width:2px\n    style ICosmosWallet fill:#f9f,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Using Custom React Query Hooks\nDESCRIPTION: Implementation of a custom React hook for querying balance information. Shows integration with react-query context and demonstrates conditional query execution.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-react/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Import only what you need\nimport { defaultContext } from \"@tanstack/react-query\";\nimport { useGetBalance } from \"@interchainjs/react/cosmos/bank/v1beta1/query.rpc.react\";\n\n// Initialize RPC endpoint and address\nconst { rpcEndpoint } =\n  useQueryHooks(defaultChainName, {\n    context: defaultContext,\n    enabled: !!address,\n  });\n\n//Now you can get balance by tree shakable hooks\nconst balanceRes = useGetBalance({\n  request: {\n    address: address || '',\n    denom: 'osmo',\n  },\n  options: {\n    context: defaultContext,\n    enabled: !!address && !!rpcEndpoint,\n    select: ({ balance }) => balance?.amount,\n    staleTime: 0,\n  },\n  clientResolver: rpcEndpoint,\n})\n\nconst balance = balanceRes?.data\n```\n\n----------------------------------------\n\nTITLE: Initializing RPC Query Client in JavaScript\nDESCRIPTION: Creates an RPC query client for interacting with Cosmos and Injective modules. Demonstrates querying balance information.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { injective } from \"injective-vue\";\n\nconst { createRPCQueryClient } = injective.ClientFactory;\nconst client = await createRPCQueryClient({ rpcEndpoint: RPC_ENDPOINT });\n\n// now you can query the cosmos modules\nconst balance = await client.cosmos.bank.v1beta1.allBalances({\n  address: \"inj1addresshere\",\n});\n\n// you can also query the injective modules\nconst balances = await client.injective.exchange.v1beta1.exchangeBalances();\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Governance Messages from InjectiveJS\nDESCRIPTION: Demonstrates how to import and destructure Cosmos Governance-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/gov/v1beta1/tx.registry\";\n\nconst { deposit, submitProposal, vote, voteWeighted } =\n  cosmos.gov.v1beta1.MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Installing @interchainjs/ethereum Package\nDESCRIPTION: Command to install the @interchainjs/ethereum package using npm.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @interchainjs/ethereum\n```\n\n----------------------------------------\n\nTITLE: Implementing Amino Signer Class in TypeScript\nDESCRIPTION: This snippet implements the AminoSigner class, which extends AminoSignerBase and implements the CosmosAminoSigner interface. It includes methods for creating signers from wallets and handling transaction signing.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AminoSigner\n  extends AminoSignerBase<CosmosAminoDoc>\n  implements CosmosAminoSigner\n{\n  constructor(\n    auth: Auth,\n    encoders: Encoder[],\n    converters: AminoConverter[],\n    endpoint?: string | HttpEndpoint,\n    options?: SignerOptions\n  ) {\n    super(auth, encoders, converters, endpoint, options);\n  }\n\n  getTxBuilder(): BaseCosmosTxBuilder<CosmosAminoDoc> {\n    return new AminoTxBuilder(new BaseCosmosTxBuilderContext(this));\n  }\n\n  async getAccount() {\n    // Implementation details...\n  }\n\n  static async fromWallet(\n    signer: OfflineAminoSigner | IAminoGenericOfflineSigner,\n    encoders: Encoder[],\n    converters: AminoConverter[],\n    endpoint?: string | HttpEndpoint,\n    options?: SignerOptions\n  ) {\n    // Implementation details...\n  }\n\n  static async fromWalletToSigners(\n    signer: OfflineAminoSigner | IAminoGenericOfflineSigner,\n    encoders: Encoder[],\n    converters: AminoConverter[],\n    endpoint?: string | HttpEndpoint,\n    options?: SignerOptions\n  ) {\n    // Implementation details...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Direct Signing Implementation Example\nDESCRIPTION: Example showing how to use DirectSigner for signing and broadcasting messages on Injective blockchain. Demonstrates importing signer, initializing with auth, encoders and RPC endpoint, and broadcasting messages.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import * from \"@interchainjs/injective\"; // Error: use sub-imports, to ensure small app size\nimport { DirectSigner } from \"@interchainjs/injective/signers/direct\";\n\nconst signer = new DirectSigner(<AUTH>, <ENCODER>[], <RPC_ENDPOINT>); // **ONLY** rpc endpoint is supported for now\nconst result = await signer.signAndBroadcast(<MESSAGE>[]);\nconsole.log(result.hash); // the hash of TxRaw\n```\n\n----------------------------------------\n\nTITLE: Importing CosmWasm Messages from InjectiveJS\nDESCRIPTION: Shows how to import and destructure CosmWasm-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmwasm/wasm/v1/tx.registry\";\n\nconst {\n  clearAdmin,\n  executeContract,\n  instantiateContract,\n  migrateContract,\n  storeCode,\n  updateAdmin,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: CosmJS Legacy Transaction Signing\nDESCRIPTION: Example of the old CosmJS transaction signing and broadcasting approach.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectSecp256k1HdWallet } from \"@cosmjs/proto-signing\";\nimport { SigningStargateClient } from \"@cosmjs/stargate\";\nimport { makeCosmoshubPath } from \"@cosmjs/crypto\";\n\n(async () => {\n  const mnemonic = \"your mnemonic here\";\n  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n    hdPaths: [makeCosmoshubPath(0)],\n  });\n  const [account] = await wallet.getAccounts();\n  const rpcEndpoint = 'http://your-rpc-endpoint:26657';\n  const client = await SigningStargateClient.connectWithSigner(rpcEndpoint, wallet);\n  \n  const msg = {\n    // Construct your message here\n  };\n  const fee = {\n    amount: [{ denom: 'uatom', amount: '5000' }],\n    gas: '200000',\n  };\n  const memo = \"CosmJS transaction test\";\n  \n  const result = await client.signAndBroadcast(account.address, [msg], fee, memo);\n  console.log(\"Transaction hash:\", result.transactionHash);\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing CosmWasm Query and Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet illustrates the import of query and transaction helper functions for the CosmWasm module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getContractInfo,\n  getContractHistory,\n  getContractsByCode,\n  getAllContractState,\n  getRawContractState,\n  getSmartContractState,\n  getCode,\n  getCodes,\n} from \"@interchainjs/cosmwasm/wasm/v1/query.rpc.func\";\n\n// tx helpers\nimport {\n  storeCode,\n  instantiateContract,\n  migrateContract,\n  updateAdmin,\n  clearAdmin,\n} from \"@interchainjs/cosmwasm/wasm/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Direct Signer Implementation with Auth\nDESCRIPTION: Example of implementing DirectSigner using Secp256k1Auth with a mnemonic and cosmos HDPath\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectSigner } from \"@interchainjs/cosmos/signers/direct\";\nimport { toEncoder } from \"@interchainjs/cosmos/utils\";\nimport { Secp256k1Auth } from \"@interchainjs/auth/secp256k1\";\nimport { MsgSend } from \"@interchainjs/cosmos-types/cosmos/bank/v1beta1/tx\";\nimport {\n  HDPath\n} from '@interchainjs/types';\n\n\nconst [auth] = Secp256k1Auth.fromMnemonic(\"<MNEMONIC_WORDS>\", [\n    // use cosmos hdpath built by HDPath\n    // we can get cosmos hdpath \"m/44'/118'/0'/0/0\" by this:\n    HDPath.cosmos().toString(),\n]);\nconst signer = new DirectSigner(auth, [toEncoder(MsgSend)], <RPC_ENDPOINT>);\n```\n\n----------------------------------------\n\nTITLE: Importing Auction Transaction Helper Functions\nDESCRIPTION: Example of importing the bid transaction helper function from the Auction module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { bid } from \"injectivejs/injective/auction/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Starship Dependencies\nDESCRIPTION: Command to install all required dependencies for running Starship. This checks for and installs kubectl, kind, and helm if they are not already present on the system.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup\n```\n\n----------------------------------------\n\nTITLE: Importing Bank Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet shows the import statements for query and transaction helper functions related to the Bank module in InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getAllBalances,\n  getDenomMetadata,\n  getSupply,\n  getParams,\n} from \"@interchainjs/cosmos/bank/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport {\n  send,\n  multiSend,\n} from \"@interchainjs/cosmos/bank/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Amino Signer Implementation\nDESCRIPTION: Example of using AminoSigner for legacy compatibility, showing setup and transaction broadcasting.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AminoSigner } from '@interchainjs/cosmos/signers/amino';\nimport { toEncoders, toConverters } from '@interchainjs/cosmos/utils';\nimport { MsgSend } from 'interchainjs/cosmos/bank/v1beta1/tx';\n\n(async () => {\n  const [auth] = Secp256k1Auth.fromMnemonic(mnemonic, [\n    HDPath.cosmos(0, 0, 0).toString(),\n  ]);\n  const rpcEndpoint = 'http://your-rpc-endpoint:26657';\n\n  // Create an AminoSigner instance\n  const aminoSigner = new AminoSigner(\n    auth,\n    toEncoders(MsgSend),\n    toConverters(MsgSend),\n    rpcEndpoint,\n    { prefix: 'cosmos' }\n  );\n\n  // Build your message and set fee/memo if needed\n  const msg = {\n    // Your message fields here\n  };\n\n  const fee = {\n    amount: [\n      {\n        denom: 'uatom',\n        amount: '5000',\n      },\n    ],\n    gas: '200000',\n  };\n\n  const result = await aminoSigner.signAndBroadcast({\n    messages: [msg], fee\n  });\n  console.log('Transaction hash:', result.hash);\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Tree-Shakable Query Helpers in InterchainJS\nDESCRIPTION: Demonstrates how to import and use tree-shakable query helper functions for optimized bundle size. The example shows querying blockchain balances using the getAllBalances helper.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchain-vue/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Import only what you need\nimport { getAllBalances } from \"@interchainjs/cosmos/bank/v1beta1/query.rpc.func\";\n\n// Now you can query the blockchain\nconst balance = await getAllBalances(endpoint, {\n  address: \"cosmos1addresshere\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Starship in InterchainJS\nDESCRIPTION: This command installs necessary dependencies for running Starship, including checking and installing system requirements and fetching Helm charts.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup\n```\n\n----------------------------------------\n\nTITLE: Importing Feegrant Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet shows the import of query and transaction helper functions for the Feegrant module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getAllowance,\n  getAllowances,\n  getAllowancesByGranter,\n} from \"@interchainjs/cosmos/feegrant/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport {\n  grantAllowance,\n  revokeAllowance,\n  pruneAllowances,\n} from \"@interchainjs/cosmos/feegrant/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Amino Transaction Builder in TypeScript\nDESCRIPTION: This code snippet extends the BaseCosmosTxBuilder class to create an AminoTxBuilder, which handles building and serializing Amino transactions for Cosmos.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AminoTxBuilder extends BaseCosmosTxBuilder<CosmosAminoDoc> {\n  constructor(\n    protected ctx: BaseCosmosTxBuilderContext<\n      AminoSignerBase<CosmosAminoDoc>\n    >\n  ) {\n    // Set the sign mode\n    super(SignMode.SIGN_MODE_LEGACY_AMINO_JSON, ctx);\n  }\n\n  // Build the signing document\n  async buildDoc({\n    messages,\n    fee,\n    memo,\n    options,\n  }: CosmosSignArgs): Promise<CosmosAminoDoc> {\n    // Implementation details...\n  }\n\n  // Serialize the signing document\n  async buildDocBytes(doc: CosmosAminoDoc): Promise<Uint8Array> {\n    // Implementation details...\n  }\n\n  async syncSignedDoc(\n    txRaw: TxRaw,\n    signResp: SignDocResponse<CosmosAminoDoc>\n  ): Promise<TxRaw> {\n    // Implementation details...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: InterchainJS Modern Wallet Generation\nDESCRIPTION: Example of the new InterchainJS wallet generation approach using Secp256k1Auth.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Secp256k1Auth } from '@interchainjs/auth/secp256k1';\nimport { HDPath } from '@interchainjs/types';\nimport { Bip39, Random } from '@interchainjs/crypto';\n\n(async () => {\n  const mnemonic = Bip39.encode(Random.getBytes(16)).toString();\n  const [auth] = Secp256k1Auth.fromMnemonic(mnemonic, [\n    HDPath.cosmos(0, 0, 0).toString(),\n  ]);\n  console.log(\"Wallet address:\", await auth.getAddress());\n})();\n```\n\n----------------------------------------\n\nTITLE: Deploying Starship Mini-Cosmos Ecosystem in Bash\nDESCRIPTION: Command to deploy the Starship mini-cosmos ecosystem using the config file 'configs/config.yaml' as the genesis file.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Gov Query and Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet illustrates the import of query and transaction helper functions for the Gov module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getProposal,\n  getProposals,\n  getVote,\n  getVotes,\n  getParams,\n  getDeposit,\n  getDeposits,\n  getTallyResult,\n} from \"@interchainjs/cosmos/gov/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport {\n  submitProposal,\n  deposit,\n  vote,\n  voteWeighted,\n} from \"@interchainjs/cosmos/gov/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Using SignerFromPrivateKey for Ethereum Transactions\nDESCRIPTION: Example of using SignerFromPrivateKey to send an Ethereum transaction using a private key. It shows how to create a signer, send an EIP1559 transaction with auto gas limit, and wait for the receipt.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SignerFromPrivateKey } from \"@interchainjs/ethereum/signers/SignerFromPrivateKey\"\nconst signer = new SignerFromPrivateKey(privateKey, RPC_URL)\nconst { txHash, wait } = await signer.sendEIP1559TransactionAutoGasLimit(\n  recipientAddress,\n  amount\n)\nconst receipt = await wait()\n```\n\n----------------------------------------\n\nTITLE: Migration Import Changes\nDESCRIPTION: Example of the required import statements when migrating to InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bip39, Random } from '@interchainjs/crypto';\nimport { Secp256k1Auth } from '@interchainjs/auth/secp256k1';\nimport { HDPath } from '@interchainjs/types';\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Starship Environment for InterchainJS\nDESCRIPTION: This snippet shows commands for running tests and watching for changes in the Starship environment. It uses yarn commands to execute tests and enable watch mode.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# test\nyarn starship:test\n\n# watch\nyarn starship:watch\n```\n\n----------------------------------------\n\nTITLE: Importing Group Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet demonstrates the import of query and transaction helper functions for the Group module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getGroupInfo,\n  getGroupPolicyInfo,\n  getGroupMembers,\n  getGroupsByAdmin,\n  getGroupPoliciesByGroup,\n  getGroupPoliciesByAdmin,\n} from \"@interchainjs/cosmos/group/v1/query.rpc.func\";\n\n// tx helpers\nimport {\n  createGroup,\n  updateGroupMetadata,\n  updateGroupMembers,\n  updateGroupAdmin,\n  updateGroupPolicyMetadata,\n  submitProposal,\n  vote,\n  exec,\n} from \"@interchainjs/cosmos/group/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Converting Between Bech32 and Hex Addresses in JavaScript\nDESCRIPTION: Demonstrates the usage of toBech32() and fromBech32() functions to convert between bech32 and hex address formats. The example shows conversion from hex to bech32 and vice versa using the 'tiov' prefix.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/encoding/README.md#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n>> toBech32(\"tiov\", fromHex(\"1234ABCD0000AA0000FFFF0000AA00001234ABCD\"))\n'tiov1zg62hngqqz4qqq8lluqqp2sqqqfrf27dzrrmea'\n>> toHex(fromBech32(\"tiov1zg62hngqqz4qqq8lluqqp2sqqqfrf27dzrrmea\").data)\n'1234abcd0000aa0000ffff0000aa00001234abcd'\n```\n\n----------------------------------------\n\nTITLE: InterchainJS Modern Transaction Signing\nDESCRIPTION: Example of the new InterchainJS transaction signing and broadcasting approach.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectSigner } from '@interchainjs/cosmos/signers/direct';\n\n(async () => {\n  // Assume wallet generation using InterchainJS methods as shown earlier has been completed.\n  \n  const msg = {\n    // Construct your message here using @interchainjs/cosmos-types\n  };\n  const fee = {\n    amount: [{ denom: 'uatom', amount: '5000' }],\n    gas: '200000',\n  };\n  const memo = \"InterchainJS transaction test\";\n  \n  const result = await signer.signAndBroadcast({\n    messages: [msg], fee, memo\n  });\n  console.log(\"Transaction hash:\", result.hash);\n})();\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Starship\nDESCRIPTION: Commands for executing tests once or in watch mode with Starship. These commands run the predefined test suites against the deployed infrastructure.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# test\nyarn starship:test\n\n# watch\nyarn starship:watch\n```\n\n----------------------------------------\n\nTITLE: Importing Mint Query and Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet shows the import of query and transaction helper functions for the Mint module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getParams,\n  getInflation,\n  getAnnualProvisions,\n} from \"@interchainjs/cosmos/mint/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport { updateParams } from \"@interchainjs/cosmos/mint/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Installing InjectiveJS with npm\nDESCRIPTION: Command to install the InjectiveJS package via npm package manager.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install injectivejs\n```\n\n----------------------------------------\n\nTITLE: Direct Signing Implementation Example\nDESCRIPTION: Example showing how to use DirectSigner for signing and broadcasting transactions. Demonstrates the basic setup and usage with AUTH, ENCODER, and RPC endpoint parameters.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import * from \"@interchainjs/cosmos\"; // Error: use sub-imports, to ensure small app size\nimport { DirectSigner } from \"@interchainjs/cosmos/signers/direct\";\n\nconst signer = new DirectSigner(<AUTH>, <ENCODER>[], <RPC_ENDPOINT>); // **ONLY** rpc endpoint is supported for now\nconst result = await signer.signAndBroadcast(<MESSAGE>[]);\nconsole.log(result.hash); // the hash of TxRaw\n```\n\n----------------------------------------\n\nTITLE: Running Starship Tests in Shell\nDESCRIPTION: Commands for running and watching Starship tests.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# test\nyarn starship:test\n\n# watch\nyarn starship:watch\n```\n\n----------------------------------------\n\nTITLE: Importing Oracle Transaction Helper Functions\nDESCRIPTION: Transaction helper functions for the Oracle module to relay price data from various sources like Band Protocol, Coinbase, and Pyth.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  relayBandRates,\n  relayCoinbaseMessages,\n  relayPriceFeedPrice,\n  relayProviderPrices,\n  relayPythPrices,\n  relayStorkMessage,\n  requestBandIBCRates,\n} from \"injectivejs/injective/oracle/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Installing InterchainJS via NPM\nDESCRIPTION: Command to install the InterchainJS package using npm package manager.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install interchainjs\n```\n\n----------------------------------------\n\nTITLE: Auth and Wallet Interface Comparison in TypeScript\nDESCRIPTION: TypeScript interface definitions comparing Auth and Wallet interfaces. This code shows how Auth handles signing of binary data while Wallet provides methods for signing specific document formats (DirectDoc and AminoDoc) used in Cosmos-based networks.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/auth.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/** you can import { Auth, Wallet } from \"@interchainjs/types\" */\n\nexport interface Auth {\n  ...,\n  sign: (data: Uint8Array) => Signature;\n}\n\nexport interface Wallet<Account, SignDoc> {\n  ...,\n  async signDirect(\n    signerAddress: string,\n    signDoc: CosmosDirectDoc\n  ): Promise<DirectSignResponse>;\n  async signAmino(\n    signerAddress: string,\n    signDoc: CosmosAminoDoc\n  ): Promise<AminoSignResponse>;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devnet Tests for Ethereum\nDESCRIPTION: Command to execute the devnet tests in the networks/ethereum directory of the project.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:devnet\n```\n\n----------------------------------------\n\nTITLE: Importing Exchange Transaction Helper Functions\nDESCRIPTION: Example of importing transaction helper functions for the Exchange module to create and manage positions and deposits.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createDeposit,\n  createLiquidatePosition,\n  createActivateStakeGrant,\n} from \"injectivejs/injective/exchange/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Installing InterchainJS Auth Package\nDESCRIPTION: Command to install the @interchainjs/auth package using npm\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/auth/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @interchainjs/auth\n```\n\n----------------------------------------\n\nTITLE: Defining EIP-712 Signer Types in TypeScript\nDESCRIPTION: Type definitions for the EIP-712 signing process, including transaction request, document, address, and broadcast response types\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nSignArgs = TransactionRequest;\n\nTx = string; // Serialized signed transaction as a hex string.\n\nDoc = TransactionRequest;\n\nAddressResponse = string;\n\nBroadcastResponse = TransactionResponse;\n\nBroadcastOpts = unknown;\n\nSignDocResp = string; // Signature string of the signed document.\n```\n\n----------------------------------------\n\nTITLE: Manual Port Forwarding for Ethereum Node\nDESCRIPTION: Command to manually set up port forwarding from the Ethereum node pod to the local machine on port 8545. This allows direct interaction with the Ethereum node.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl port-forward pods/ethereum-1337-0 8545:8545\n```\n\n----------------------------------------\n\nTITLE: Composing Exchange Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the Exchange module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/exchange/v1beta1/tx.registry\";\n\nconst { createSpotLimitOrder, createSpotMarketOrder, deposit } =\n  MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Installing Injective React Package\nDESCRIPTION: Command to install the injective-react npm package\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install injective-react\n```\n\n----------------------------------------\n\nTITLE: Implementing ByteAuth Interface for Secp256k1 in TypeScript\nDESCRIPTION: This code snippet shows the implementation of the ByteAuth interface for Secp256k1 authentication, which allows signing of arbitrary byte arrays.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Secp256k1Auth implements ByteAuth<RecoveredSignatureType> {\n  // Implementation details...\n}\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Starship Environment\nDESCRIPTION: Commands for stopping port forwarding, cleaning up deployments, and removing Starship infrastructure. This ensures proper resource cleanup after testing.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# stop port forwarding (done by clean() too)\n# yarn starship stop-ports\n\n# stop ports and delete & remove helm chart\nyarn starship clean\n```\n\n----------------------------------------\n\nTITLE: Composing Auction Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the Auction module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/auction/v1beta1/tx.registry\";\n\nconst { bid } = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Installing injective-vue via npm\nDESCRIPTION: Command to install the injective-vue package using npm.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install injective-vue\n```\n\n----------------------------------------\n\nTITLE: Implementing UniEip712Signer Interface\nDESCRIPTION: Definition of the UniEip712Signer interface that extends UniSigner with specific types for EIP-712 signing\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniSigner } from \"@interchainjs/types\";\nimport { TransactionRequest, TransactionResponse } from \"ethers\";\n\nexport type UniEip712Signer = UniSigner<\n  TransactionRequest,\n  string,\n  TransactionRequest,\n  string,\n  TransactionResponse,\n  unknown,\n  string\n>;\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kind Cluster for Starship in Bash\nDESCRIPTION: Optional command to delete the Kind cluster used for Starship if it was created using Kind.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship clean-kind\n```\n\n----------------------------------------\n\nTITLE: Composing Oracle Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the Oracle module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/oracle/v1beta1/tx.registry\";\n\nconst {\n  relayBandRates,\n  relayCoinbaseMessages,\n  relayPriceFeedPrice,\n  relayProviderPrices,\n  requestBandIBCRates,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Composing Peggy Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the Peggy module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/peggy/v1/tx.registry\";\n\nconst {\n  cancelSendToEth,\n  confirmBatch,\n  depositClaim,\n  eRC20DeployedClaim,\n  requestBatch,\n  sendToEth,\n  setOrchestratorAddresses,\n  submitBadSignatureEvidence,\n  valsetConfirm,\n  valsetUpdateClaim,\n  withdrawClaim,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Implementing Eip712Signer Class\nDESCRIPTION: Main signer implementation class that handles transaction signing and broadcasting using the EIP-712 standard\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  IKey,\n  SignDocResponse,\n  SignResponse,\n  BroadcastOptions,\n  Auth,\n  isDocAuth,\n  HttpEndpoint,\n} from \"@interchainjs/types\";\nimport {\n  JsonRpcProvider,\n  Provider,\n  TransactionRequest,\n  TransactionResponse,\n} from \"ethers\";\nimport { UniEip712Signer } from \"../types\";\nimport { Eip712DocAuth } from \"../types/docAuth\";\nimport { IEthereumGenericOfflineSigner } from \"../types/wallet\";\n\nexport class Eip712Signer implements UniEip712Signer {\n  provider: Provider;\n  docAuth: Eip712DocAuth;\n\n  constructor(auth: Auth, public endpoint: string) {\n    this.provider = new JsonRpcProvider(endpoint);\n    this.docAuth = auth as Eip712DocAuth;\n  }\n\n  static async fromWallet(\n    signer: IEthereumGenericOfflineSigner,\n    endpoint?: string\n  ) {\n    const auth = await Eip712DocAuth.fromOfflineSigner(signer);\n\n    return new Eip712Signer(auth, endpoint);\n  }\n\n  async getAddress(): Promise<string> {\n    return this.docAuth.address;\n  }\n\n  signArbitrary(data: Uint8Array): IKey | Promise<IKey> {\n    throw new Error(\"Method not supported.\");\n  }\n\n  async signDoc(doc: TransactionRequest): Promise<string> {\n    return this.docAuth.signDoc(doc);\n  }\n\n  broadcastArbitrary(\n    data: Uint8Array,\n    options?: unknown\n  ): Promise<TransactionResponse> {\n    throw new Error(\"Method not supported.\");\n  }\n\n  async sign(\n    args: TransactionRequest\n  ): Promise<\n    SignResponse<\n      string,\n      TransactionRequest,\n      TransactionResponse,\n      BroadcastOptions\n    >\n  > {\n    const result = await this.signDoc(args);\n\n    return {\n      tx: result,\n      doc: args,\n      broadcast: async () => {\n        return this.provider.broadcastTransaction(result);\n      },\n    };\n  }\n\n  async signAndBroadcast(\n    args: TransactionRequest\n  ): Promise<TransactionResponse> {\n    const result = await this.signDoc(args);\n\n    return this.provider.broadcastTransaction(result);\n  }\n\n  broadcast(tx: string): Promise<TransactionResponse> {\n    return this.provider.broadcastTransaction(tx);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Kind Cluster\nDESCRIPTION: Optional command to delete the local Kind Kubernetes cluster. This completely removes the local infrastructure when it's no longer needed.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship clean-kind\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Staking Messages in JavaScript\nDESCRIPTION: This snippet illustrates how to import and destructure message composers for Cosmos staking operations using InjectiveJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/staking/v1beta1/tx.registry\";\n\nconst {\n  beginRedelegate,\n  createValidator,\n  delegate,\n  editValidator,\n  undelegate,\n} = MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Composing OCR Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the OCR module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/ocr/v1beta1/tx.registry\";\n\nconst {\n  acceptPayeeship,\n  createFeed,\n  fundFeedRewardPool,\n  setPayees,\n  transferPayeeship,\n  transmit,\n  updateFeed,\n  withdrawFeedRewardPool,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Creating OfflineSigner from Secp256k1HDWallet in TypeScript\nDESCRIPTION: This snippet shows how to create an OfflineSigner object from a Secp256k1HDWallet instance. It demonstrates hiding the private key by converting the wallet to an offline direct signer and retrieving the first account's address.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/wallet.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nprotoSigner = wallet.toOfflineDirectSigner();\naddress = (await protoSigner.getAccounts())[0].address;\n```\n\n----------------------------------------\n\nTITLE: Package Header Markdown\nDESCRIPTION: Repository header markdown including logo, build status badges, and license information.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/crypto/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @interchainjs/crypto\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/hyperweb-io/interchainjs/refs/heads/main/assets/logo.svg\" width=\"280\">\n</p>\n\n<p align=\"center\" width=\"100%\">\n  <a href=\"https://github.com/hyperweb-io/interchainjs/actions/workflows/run-tests.yaml\">\n    <img height=\"20\" src=\"https://github.com/hyperweb-io/interchainjs/actions/workflows/run-tests.yaml/badge.svg\" />\n  </a>\n   <a href=\"https://github.com/hyperweb-io/interchainjs/blob/main/LICENSE-MIT\"><img height=\"20\" src=\"https://img.shields.io/badge/license-MIT-blue.svg\"></a>\n   <a href=\"https://github.com/hyperweb-io/interchainjs/blob/main/LICENSE-Apache\"><img height=\"20\" src=\"https://img.shields.io/badge/license-Apache-blue.svg\"></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Governance Messages in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and destructure message composers for Cosmos governance operations using InjectiveJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/gov/v1beta1/tx.registry\";\n\nconst { deposit, submitProposal, vote, voteWeighted } =\n  cosmos.gov.v1beta1.MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Composing Insurance Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the Insurance module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/injective/insurance/v1beta1/tx.registry\";\n\nconst { createInsuranceFund, requestRedemption, underwrite } =\n  MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Defining and Implementing Generic Offline Signer for Cosmos Amino in TypeScript\nDESCRIPTION: This snippet defines the IAminoGenericOfflineSigner interface and implements the AminoGenericOfflineSigner class for handling offline signing of Cosmos Amino transactions.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface IAminoGenericOfflineSigner\n  extends IGenericOfflineSigner<\n    string,\n    CosmosAminoDoc,\n    AminoSignResponse,\n    IAminoGenericOfflineSignArgs,\n    AccountData\n  > {}\n\nexport class AminoGenericOfflineSigner\n  implements IAminoGenericOfflineSigner\n{\n  constructor(public offlineSigner: OfflineAminoSigner) {}\n\n  readonly signMode: string = SIGN_MODE.AMINO;\n\n  getAccounts(): Promise<readonly AccountData[]> {\n    return this.offlineSigner.getAccounts();\n  }\n\n  sign({ signerAddress, signDoc }: IAminoGenericOfflineSignArgs) {\n    return this.offlineSigner.signAmino(signerAddress, signDoc);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Bank Messages from InjectiveJS\nDESCRIPTION: Shows how to import and destructure Cosmos Bank-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/bank/v1beta1/tx.registry\";\n\nconst { multiSend, send } = MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Composing CosmWasm Messages with TypeUrl\nDESCRIPTION: Example of importing and using MessageComposer to create typed messages for the CosmWasm module.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmwasm/wasm/v1/tx.registry\";\n\nconst {\n  clearAdmin,\n  executeContract,\n  instantiateContract,\n  migrateContract,\n  storeCode,\n  updateAdmin,\n} = MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Using Transaction Hooks\nDESCRIPTION: Implementation of React hooks for delegation and validator queries using react-query\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useDelegate } from \"injective-react/cosmos/staking/v1beta1/tx.rpc.react\";\nimport { useGetValidators } from \"injective-react/cosmos/staking/v1beta1/query.rpc.react\";\n\nconst {\n  data,\n  isSuccess: isGetValidatorsDone,\n  isLoading: isGetValidatorsLoading,\n} = useGetValidators({\n  request: {\n    status: \"BOND_STATUS_BONDED\",\n  },\n  options: {\n    context: defaultContext,\n    enabled: !validatorAddress,\n  },\n  rpcClient,\n});\n\nconst { mutate: delegate, isSuccess: isDelegateSuccess } = useDelegate({\n  clientResolver: signingClient,\n  options: {\n    context: defaultContext,\n    onSuccess: (data: any) => {\n      console.log(\"onSuccess\", data);\n    },\n    onError: (error) => {\n      console.log(\"onError\", error);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Visualizing InterchainJS Components and Signers with Mermaid Diagram\nDESCRIPTION: A mermaid diagram illustrating how InterchainJS connects different signer types to various network classes, showing the adaptability for Cosmos, Injective, Ethereum, and custom networks.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    signers --> cosmos_signer[\"Cosmos Network\"]\n    signers --> injective_signer[\"Injective Network\"]\n    signers --> ethereum_signer[\"Ethereum Network\"]\n    signers --> implement_signer[\"ANY Network\"]\n\n    cosmos_signer --> cosmos_amino[\"Amino Signer\"]\n    cosmos_signer --> cosmos_direct[\"Direct Signer\"]\n\n    ethereum_signer --> ethereum_eip712[\"EIP712 Signer\"]\n\n    injective_signer --> injective_amino[\"Amino Signer\"]\n    injective_signer --> injective_direct[\"Direct Signer\"]\n\n    implement_signer --> any_signer[\"Any Signer\"]\n\n    style signers fill:#f9f,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Composing Exchange Messages in JavaScript\nDESCRIPTION: Imports and destructures exchange-related message composers from the injective-vue library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { injective } from \"injective-vue\";\n\nconst { createSpotLimitOrder, createSpotMarketOrder, deposit } =\n  injective.exchange.v1beta1.MessageComposer.withTypeUrl;\n```\n\n----------------------------------------\n\nTITLE: Advanced Signing Client Configuration in JavaScript\nDESCRIPTION: Shows how to manually construct a signing client with custom proto registry and amino converters.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    cosmosAminoConverters,\n    cosmosProtoRegistry,\n    cosmwasmAminoConverters,\n    cosmwasmProtoRegistry,\n    ibcProtoRegistry,\n    ibcAminoConverters,\n    injectiveAminoConverters,\n    injectiveProtoRegistry\n} from 'injective-vue';\n\nconst signer: OfflineSigner = /* create your signer (see above)  */\nconst rpcEndpoint = 'https://rpc.cosmos.directory/injective'; // or another URL\n\nconst protoRegistry: ReadonlyArray<[string, GeneratedType]> = [\n    ...cosmosProtoRegistry,\n    ...cosmwasmProtoRegistry,\n    ...ibcProtoRegistry,\n    ...injectiveProtoRegistry\n];\n\nconst aminoConverters = {\n    ...cosmosAminoConverters,\n    ...cosmwasmAminoConverters,\n    ...ibcAminoConverters,\n    ...injectiveAminoConverters\n};\n\nconst registry = new Registry(protoRegistry);\nconst aminoTypes = new AminoTypes(aminoConverters);\n\nconst signingClient = await SigningClient.connectWithSigner(rpcEndpoint, signer);\n\nsigningClient.addEncoders(registry);\nsigningClient.addConverters(aminoTypes);\n```\n\n----------------------------------------\n\nTITLE: Visualizing InterchainJS Encoders and Auth Components with Mermaid Diagram\nDESCRIPTION: A mermaid diagram showing the relationship between encoders, authentication modules, and utility components within the InterchainJS ecosystem.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    encoders[Encoders] --> auth[\"@interchainjs/auth\"]\n    encoders --> utils[\"@interchainjs/utils\"]\n    encoders --> cosmos_types[\"@interchainjs/cosmos-types\"]\n\n    auth --> secp256k1_auth[\"Secp256k1 Auth\"]\n    auth --> ethSecp256k1_auth[\"EthSecp256k1 Auth\"]\n\n    utils --> signer_utils[\"Signer Utilities\"]\n    utils --> crypto_utils[\"Crypto Utilities\"]\n\n    style encoders fill:#f9f,stroke:#333,stroke-width:2px\n    style auth fill:#ccf,stroke:#333,stroke-width:2px\n    style utils fill:#ccf,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Distribution Messages from InjectiveJS\nDESCRIPTION: Demonstrates how to import and destructure Cosmos Distribution-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/distribution/v1beta1/tx.registry\";\n\nconst {\n  fundCommunityPool,\n  setWithdrawAddress,\n  withdrawDelegatorReward,\n  withdrawValidatorCommission,\n} = MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Installing InterchainJS Dependencies\nDESCRIPTION: Command to install the required InterchainJS packages including cosmos, auth, and cosmos-types modules.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @interchainjs/cosmos @interchainjs/auth @interchainjs/cosmos-types\n```\n\n----------------------------------------\n\nTITLE: InterchainJS Component Architecture Diagram\nDESCRIPTION: Mermaid diagram showing the component architecture of InterchainJS, including signers and network connections.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    signers --> cosmos_signer[\"Cosmos Network\"]\n    signers --> injective_signer[\"Injective Network\"]\n    signers --> ethereum_signer[\"Ethereum Network\"]\n    signers --> implement_signer[\"ANY Network\"]\n\n    cosmos_signer --> cosmos_amino[\"Amino Signer\"]\n    cosmos_signer --> cosmos_direct[\"Direct Signer\"]\n\n    ethereum_signer --> ethereum_eip712[\"EIP712 Signer\"]\n\n    injective_signer --> injective_amino[\"Amino Signer\"]\n    injective_signer --> injective_direct[\"Direct Signer\"]\n\n    implement_signer --> any_signer[\"Any Signer\"]\n\n    style signers fill:#f9f,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Importing Cosmos Staking Messages from InjectiveJS\nDESCRIPTION: Illustrates how to import and destructure Cosmos Staking-related message composers from the InjectiveJS library.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-react/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MessageComposer } from \"injectivejs/cosmos/staking/v1beta1/tx.registry\";\n\nconst {\n  beginRedelegate,\n  createValidator,\n  delegate,\n  editValidator,\n  undelegate,\n} = MessageComposer.fromPartial;\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Interchain Tools\nDESCRIPTION: A comprehensive table listing different categories of tools available in the Interchain JavaScript stack, including chain information tools, wallet connectors, signing clients, SDK clients, starter kits, UI kits, testing frameworks, and smart contract development tools.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/types/README.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Category              | Tools                                                                                                                  | Description                                                                                           |\n|----------------------|------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|\n| **Chain Information**   | [**Chain Registry**](https://github.com/hyperweb-io/chain-registry), [**Utils**](https://www.npmjs.com/package/@chain-registry/utils), [**Client**](https://www.npmjs.com/package/@chain-registry/client) | Everything from token symbols, logos, and IBC denominations for all assets you want to support in your application. |\n| **Wallet Connectors**| [**Interchain Kit**](https://github.com/hyperweb-io/interchain-kit)<sup>beta</sup>, [**Cosmos Kit**](https://github.com/hyperweb-io/cosmos-kit) | Experience the convenience of connecting with a variety of web3 wallets through a single, streamlined interface. |\n| **Signing Clients**          | [**InterchainJS**](https://github.com/hyperweb-io/interchainjs)<sup>beta</sup>, [**CosmJS**](https://github.com/cosmos/cosmjs) | A single, universal signing interface for any network |\n| **SDK Clients**              | [**Telescope**](https://github.com/hyperweb-io/telescope)                                                          | Your Frontend Companion for Building with TypeScript with Cosmos SDK Modules. |\n| **Starter Kits**     | [**Create Interchain App**](https://github.com/hyperweb-io/create-interchain-app)<sup>beta</sup>, [**Create Cosmos App**](https://github.com/hyperweb-io/create-cosmos-app) | Set up a modern Interchain app by running one command. |\n| **UI Kits**          | [**Interchain UI**](https://github.com/hyperweb-io/interchain-ui)                                                   | The Interchain Design System, empowering developers with a flexible, easy-to-use UI kit. |\n| **Testing Frameworks**          | [**Starship**](https://github.com/hyperweb-io/starship)                                                             | Unified Testing and Development for the Interchain. |\n| **TypeScript Smart Contracts** | [**Create Hyperweb App**](https://github.com/hyperweb-io/create-hyperweb-app)                              | Build and deploy full-stack blockchain applications with TypeScript |\n| **CosmWasm Contracts** | [**CosmWasm TS Codegen**](https://github.com/CosmWasm/ts-codegen)                                                   | Convert your CosmWasm smart contracts into dev-friendly TypeScript classes. |\n```\n\n----------------------------------------\n\nTITLE: Secp256k1 Authentication Example\nDESCRIPTION: Example demonstrating how to create a Secp256k1 authentication instance from a mnemonic and sign data\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/auth/README.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// import * from \"@interchainjs/auth\"; // Error: use sub-imports, to ensure small app size\nimport { Secp256k1Auth } from \"@interchainjs/auth/secp256k1\";\n\nconst [directAuth] = Secp256k1Auth.fromMnemonic(generateMnemonic(), [\n  \"m/44'/118'/0'/0/0\",\n]);\nconst signature = auth.sign(Uint8Array.from([1, 2, 3]));\nconsole.log(signature.toHex());\n```\n\n----------------------------------------\n\nTITLE: Importing OCR Transaction Helper Functions\nDESCRIPTION: Transaction helper functions for the OCR (Off-Chain Reporting) module, including creating and managing price feeds.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  acceptPayeeship,\n  createFeed,\n  fundFeedRewardPool,\n  setPayees,\n  transferPayeeship,\n  transmit,\n  updateFeed,\n  withdrawFeedRewardPool,\n} from \"injectivejs/injective/ocr/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Visualizing Auth, Wallet, and Signer Relationships with Mermaid\nDESCRIPTION: A mermaid diagram showing the hierarchical relationship between Auth, Wallet, and Signer components. The diagram illustrates how Auth handles private keys and signing, how Wallet provides account management and offline signing capabilities, and how Signer builds on these with additional features.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/auth-wallet-signer.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph AuthType[Auth]\n        ByteAuth --> |privateKey| PrivateKey\n        PrivateKey --> |sign| SignedTx\n        OfflineSigner[Hide PrivateKey] --> DocAuth\n        DocAuth --> |signDoc| SignedTx\n    end\n\n    Wallet --> |accounts| IAccount[Account]\n    Wallet --> |toOfflineSigner| OfflineSigner\n\n    Signer --> |prefix| Prefix\n    Signer --> |account| Account\n    Signer --> |encoders| Encoder\n    Signer --> |signAndBroadCast| SignAndBroadCast\n\n    Account --> |auth| Auth\n```\n\n----------------------------------------\n\nTITLE: HD Path Derivation for Cosmos Network\nDESCRIPTION: Example showing how to derive HD paths for Cosmos network using both HDPath helper and direct string path\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/auth/README.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HDPath } from \"@interchainjs/types\";\n\n// derive with Cosmos default HD path \"m/44'/118'/0'/0/0\"\nconst [auth] = Secp256k1Auth.fromMnemonic(\"<MNEMONIC_WORDS>\", [\n  // use cosmos hdpath built by HDPath\n  // we can get cosmos hdpath \"m/44'/118'/0'/0/0\" by this:\n  HDPath.cosmos().toString(),\n]);\n// is identical to\nconst [auth] = Secp256k1Auth.fromMnemonic(\"<MNEMONIC_WORDS>\", [\n  \"m/44'/118'/0'/0/0\",\n]);\n```\n\n----------------------------------------\n\nTITLE: Importing Insurance Transaction Helper Functions\nDESCRIPTION: Transaction helper functions for the Insurance module, including creating insurance funds and managing redemptions.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  createInsuranceFund,\n  requestRedemption,\n  underwrite,\n} from \"injectivejs/injective/insurance/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Class Diagram of Auth Module Implementation in Mermaid\nDESCRIPTION: A comprehensive class diagram showing the relationships between Auth interfaces and their concrete implementations. It illustrates how ByteAuth and DocAuth extend the base Auth interface, and how various implementations like Secp256k1Auth, AminoDocAuth, and DirectDocAuth relate to each other.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/auth.md#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nclassDiagram\n    class Auth {\n        <<interface>>\n        +string algo\n        +string hdPath\n        +IKey getPublicKey(isCompressed: boolean)\n    }\n\n    class ByteAuth {\n        <<interface>>\n        +ISignatureWraper~Sig~ sign(data: Uint8Array)\n    }\n\n    class DocAuth {\n        <<interface>>\n        +string address\n        +SignDocResponse~Doc~ signDoc(doc: Doc)\n    }\n\n    ByteAuth --|> Auth\n    DocAuth --|> Auth\n    BaseDocAuth ..|> DocAuth\n\n    class BaseDocAuth {\n        <<abstract>>\n        +abstract Promise~SignDocResponse~ signDoc(doc: Doc)\n    }\n\n    class AminoDocAuth {\n        +Promise~SignDocResponse~ signDoc(doc: StdSignDoc)\n        +static Promise~AminoDocAuth[]~ fromOfflineSigner(offlineSigner: OfflineAminoSigner)\n    }\n\n    class DirectDocAuth {\n        +Promise~SignDocResponse~ signDoc(doc: SignDoc)\n        +static Promise~DirectDocAuth[]~ fromOfflineSigner(offlineSigner: OfflineDirectSigner)\n    }\n\n    BaseDocAuth <|-- AminoDocAuth\n    BaseDocAuth <|-- DirectDocAuth\n\n    class Secp256k1Auth {\n        +Key privateKey\n        +string algo\n        +string hdPath\n        +Secp256k1Auth(privateKey: Uint8Array | HDKey | Key, hdPath?: string)\n        +static Secp256k1Auth[] fromMnemonic(mnemonic: string, hdPaths: string[], options?: AuthOptions)\n        +Key getPublicKey(isCompressed?: boolean)\n        +ISignatureWraper~RecoveredSignatureType~ sign(data: Uint8Array)\n    }\n\n    Secp256k1Auth ..|> ByteAuth\n\n    style Auth fill:#f9f,stroke:#333,stroke-width:2px\n    style ByteAuth fill:#f9f,stroke:#333,stroke-width:2px\n    style DocAuth fill:#f9f,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Implementing Eip712DocAuth Class\nDESCRIPTION: Authentication handler class for EIP-712 document signing, extending BaseDocAuth with methods for signature generation\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/tutorial.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseDocAuth, IKey, SignDocResponse } from \"@interchainjs/types\";\nimport { IEthereumGenericOfflineSigner } from \"./wallet\";\nimport { TransactionRequest } from \"ethers\";\n\nexport class Eip712DocAuth extends BaseDocAuth<\n  IEthereumGenericOfflineSigner,\n  TransactionRequest,\n  unknown,\n  string,\n  string,\n  string\n> {\n  constructor(\n    offlineSigner: IEthereumGenericOfflineSigner,\n    address: string\n  ) {\n    super(offlineSigner, address);\n  }\n\n  static async fromOfflineSigner(\n    offlineSigner: IEthereumGenericOfflineSigner\n  ) {\n    const [account] = await offlineSigner.getAccounts();\n\n    return new Eip712DocAuth(offlineSigner, account);\n  }\n\n  getPublicKey(): IKey {\n    throw new Error(\"For EIP712, public key is not needed\");\n  }\n\n  signDoc(doc: TransactionRequest): Promise<string> {\n    return this.offlineSigner.sign(doc);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Peggy Transaction Helper Functions\nDESCRIPTION: Transaction helper functions for the Peggy module to interact with Ethereum bridge functionality, including deposits, withdrawals, and batch operations.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  blacklistEthereumAddresses,\n  cancelSendToEth,\n  confirmBatch,\n  depositClaim,\n  eRC20DeployedClaim,\n  requestBatch,\n  revokeEthereumBlacklist,\n  sendToEth,\n  setOrchestratorAddresses,\n  submitBadSignatureEvidence,\n  valsetConfirm,\n  valsetUpdateClaim,\n  withdrawClaim,\n} from \"injectivejs/injective/peggy/v1/msgs.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Starship for InterchainJS\nDESCRIPTION: This command deploys the Starship environment using the configuration specified in 'configs/config.yaml' as the genesis file.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship deploy\n```\n\n----------------------------------------\n\nTITLE: Importing InjectiveAminoSigner from @interchainjs/injective Package\nDESCRIPTION: This code snippet demonstrates how to import the AminoSigner class from the Injective package in the InterchainJS library. This signer is specifically designed to work with Injective chain transactions in Amino format.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AminoSigner } from \"@interchainjs/injective/amino\"\n```\n\n----------------------------------------\n\nTITLE: Importing IBC Transaction Helper Functions\nDESCRIPTION: Transaction helper function for the IBC module to handle token transfers between different blockchains.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injectivejs/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { transfer } from \"injectivejs/ibc/applications/transfer/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Deploying and Managing Starship Environment for InterchainJS\nDESCRIPTION: This snippet provides a series of commands for setting up, deploying, and managing a Starship environment. It includes steps for helm setup, pod deployment, port forwarding, and environment cleanup.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# setup helm/starship\nyarn starship setup\n\n# sanity check\nyarn starship get-pods\n\n# deploy starship\nyarn starship deploy\n\n# wait til STATUS=Running\nyarn starship wait-for-pods\nor\nwatch yarn starship get-pods\n\n# port forwarding\nyarn starship start-ports\n\n# check pids\nyarn starship port-pids\n```\n\n----------------------------------------\n\nTITLE: Importing Crisis Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet shows the import of transaction helper functions for the Crisis module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// tx helpers\nimport {\n  verifyInvariant,\n  updateParams,\n} from \"@interchainjs/cosmos/crisis/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Generating Code for InterchainJS\nDESCRIPTION: Command for running codegen to bundle SDK and contracts into InterchainJS. Contract schemas are located in './contracts' and protos in './proto'. Configuration settings can be found in 'scripts/interchainjs.telescope.json'.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nyarn codegen\n```\n\n----------------------------------------\n\nTITLE: Deploying and Managing Starship Environment in Shell\nDESCRIPTION: Commands for setting up, deploying, and managing a Starship environment. Includes steps for sanity checks, deployment, waiting for pods, port forwarding, and checking port PIDs.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# setup helm/starship\nyarn starship setup\n\n# sanity check\nyarn starship get-pods\n\n# deploy starship\nyarn starship deploy\n\n# wait til STATUS=Running\nyarn starship wait-for-pods\nor\nwatch yarn starship get-pods\n\n# port forwarding\nyarn starship start-ports\n\n# check pids\nyarn starship port-pids\n```\n\n----------------------------------------\n\nTITLE: Importing Evidence Query and Transaction Helpers in JavaScript\nDESCRIPTION: This code snippet demonstrates the import of query and transaction helper functions for the Evidence module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport {\n  getEvidence,\n  getAllEvidence,\n} from \"@interchainjs/cosmos/evidence/v1beta1/query.rpc.func\";\n\n// tx helpers\nimport { submitEvidence } from \"@interchainjs/cosmos/evidence/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Importing UniSigner Types\nDESCRIPTION: Basic imports for UniSigner interface and BaseSigner from InterchainJS types package\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/signer.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { UniSigner } from \"@interchainjs/types\";\nimport { BaseSigner } from \"@interchainjs/types\";\n```\n\n----------------------------------------\n\nTITLE: Deploying Starship Infrastructure\nDESCRIPTION: Command to deploy the Starship infrastructure to the connected Kubernetes cluster. This creates the mini-cosmos ecosystem defined in the config file.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship deploy\n```\n\n----------------------------------------\n\nTITLE: Importing Vesting Transaction Helpers in JavaScript\nDESCRIPTION: This snippet shows the import of transaction helper functions for the Vesting module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// tx helpers\nimport {\n  createVestingAccount,\n  createPermanentLockedAccount,\n  createPeriodicVestingAccount,\n} from \"@interchainjs/cosmos/vesting/v1beta1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: InterchainJS Encoders Architecture Diagram\nDESCRIPTION: Mermaid diagram showing the encoders architecture of InterchainJS, including auth and utility modules.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    encoders[Encoders] --> auth[\"@interchainjs/auth\"]\n    encoders --> utils[\"@interchainjs/utils\"]\n    encoders --> cosmos_types[\"@interchainjs/cosmos-types\"]\n\n    auth --> secp256k1_auth[\"Secp256k1 Auth\"]\n    auth --> ethSecp256k1_auth[\"EthSecp256k1 Auth\"]\n\n    utils --> signer_utils[\"Signer Utilities\"]\n    utils --> crypto_utils[\"Crypto Utilities\"]\n\n    style encoders fill:#f9f,stroke:#333,stroke-width:2px\n    style auth fill:#ccf,stroke:#333,stroke-width:2px\n    style utils fill:#ccf,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Running Interchainjs Tests with Starship\nDESCRIPTION: Command to execute the test suite against the deployed Starship infrastructure. This runs end-to-end tests for the Interchainjs project.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn starship:test\n```\n\n----------------------------------------\n\nTITLE: Installing and Building InterchainJS\nDESCRIPTION: Commands for cloning the repo, installing dependencies, and building the project in development mode.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn build:dev\n```\n\n----------------------------------------\n\nTITLE: Setting up Injective test environment\nDESCRIPTION: Instructions for setting up the test environment for Injective network integration. It involves setting the TEST_PRIVATE_KEY in the development environment file and running the test command.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/TestnetGuide.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n1. set TEST_PRIVATE_KEY on networks/injective/.env.development according to networks/injective/.env.development.example\n2. run `yarn injective:test`\n```\n\n----------------------------------------\n\nTITLE: Stopping Starship Infrastructure in Bash\nDESCRIPTION: Command to stop the Starship deployments, including stopping port-forwarding and deleting all deployed Helm charts.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship clean\n```\n\n----------------------------------------\n\nTITLE: Installing InterchainJS Cosmos Package\nDESCRIPTION: Command to install the @interchainjs/cosmos package using npm package manager.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @interchainjs/cosmos\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Cluster Connection\nDESCRIPTION: Command to check connection to the Kubernetes cluster by listing all pods. This confirms that kubectl is properly configured to access the cluster.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Starship Resources\nDESCRIPTION: Command to stop and remove the Starship deployment from the Kubernetes cluster. This stops port forwarding and deletes all deployed Helm charts.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship clean\n```\n\n----------------------------------------\n\nTITLE: Installing Injective Package\nDESCRIPTION: Command to install the @interchainjs/injective package via npm package manager.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @interchainjs/injective\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Chain ID\nDESCRIPTION: cURL command to query the chain ID from the Ethereum node using JSON-RPC. This verifies the node is running and accessible.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":1}' \\\n  http://localhost:8545/\n```\n\n----------------------------------------\n\nTITLE: Stopping Starship Infrastructure\nDESCRIPTION: Command to tear down the Starship infrastructure after development or testing is complete. This cleans up the Kubernetes resources.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn starship:stop\n```\n\n----------------------------------------\n\nTITLE: Deploying and Managing Starship with Quick Commands\nDESCRIPTION: Quick reference commands for setting up, deploying, monitoring, and testing with Starship. These commands handle helm setup, deployment, port forwarding, and status checking.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# setup helm/starship\nyarn starship setup\n\n# sanity check\nyarn starship get-pods\n\n# deploy starship\nyarn starship deploy\n\n# wait til STATUS=Running\nyarn starship get-pods\n\n# port forwarding\nyarn starship start-ports\n\n# check pids\nyarn starship port-pids\n```\n\n----------------------------------------\n\nTITLE: Running Starship Tests\nDESCRIPTION: Command to execute the end-to-end tests against the deployed infrastructure. This runs the test suite against the running Starship environment.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship:test\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Connection in Bash\nDESCRIPTION: Command to verify the connection to a Kubernetes cluster by listing pods.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Setting Up Starship Dependencies\nDESCRIPTION: Command to install required dependencies for Starship. This checks and installs system dependencies and fetches helm charts needed for the testing infrastructure.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup\n```\n\n----------------------------------------\n\nTITLE: Creating Local Kubernetes Cluster with Kind\nDESCRIPTION: Command to set up a local Kubernetes cluster using Kind. This provides the infrastructure needed to run Starship tests without requiring a managed Kubernetes service.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup-kind\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Connection Status\nDESCRIPTION: Command to verify the connection to the Kubernetes cluster by listing all running pods. This confirms that the cluster is accessible before deploying Starship.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Running Starship Tests\nDESCRIPTION: Command to execute end-to-end tests against the deployed Starship infrastructure. This runs the test suite defined in the project against the cosmos ecosystem.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship:test\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Ethereum New Block Headers\nDESCRIPTION: JSON-RPC WebSocket subscription request to monitor new block headers. This allows tracking the latest blocks on the Ethereum chain in real-time.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"eth_subscribe\", \"params\": [\"newHeads\"]}\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Cluster Connection for InterchainJS\nDESCRIPTION: This command verifies the connection to the Kubernetes cluster by listing the available pods.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get pods\n```\n\n----------------------------------------\n\nTITLE: Running Ethers-specific Tests for Ethereum\nDESCRIPTION: Command to execute the Ethers.js-specific tests in the networks/ethereum directory of the project.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:ethers\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Starship Deployments\nDESCRIPTION: Command to stop port forwarding and delete all deployed helm charts. This cleans up the Starship infrastructure when testing is complete.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship clean\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kind Cluster for Starship in Bash\nDESCRIPTION: Command to create a local Kind cluster for Starship, providing access to a Kubernetes cluster locally.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup-kind\n```\n\n----------------------------------------\n\nTITLE: Deploying Starship Infrastructure for Interchainjs\nDESCRIPTION: Command to deploy the Starship infrastructure for Interchainjs development and testing. This initializes the required environment in Kubernetes.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn starship\n```\n\n----------------------------------------\n\nTITLE: Checking Ethereum Account Balance\nDESCRIPTION: cURL command to check the balance of a specific Ethereum address using JSON-RPC. This demonstrates how to interact with accounts on the test chain.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"0x7e5f4552091a69125d5dfcb7b8c2659029395bdf\", \"latest\"],\"id\":1}' \\\n  http://localhost:8545\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Kubernetes Cluster with Kind\nDESCRIPTION: Command to set up a local Kubernetes cluster using Kind. This provides the infrastructure needed to run Starship locally for development and testing.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/injective/starship/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup-kind\n```\n\n----------------------------------------\n\nTITLE: Connecting to Ethereum WebSocket for Block Updates\nDESCRIPTION: Command to connect to the Ethereum node's WebSocket interface for real-time data. This establishes a WebSocket connection for subscribing to blockchain events.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nwscat -c ws://127.0.0.1:8546\n```\n\n----------------------------------------\n\nTITLE: Deploying Starship Infrastructure\nDESCRIPTION: Command to create the mini-cosmos ecosystem based on the config file. This deploys all necessary components for the test environment in Kubernetes.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Starship Dependencies in Bash\nDESCRIPTION: Command to set up and install all necessary dependencies for running Starship e2e tests. This includes checking for and installing required tools, and fetching Helm charts.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests for InterchainJS with Starship\nDESCRIPTION: This command executes the end-to-end tests for InterchainJS in the Starship environment.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship:test\n```\n\n----------------------------------------\n\nTITLE: Running Starship End-to-End Tests in Bash\nDESCRIPTION: Command to execute the end-to-end tests in the Starship environment.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship:test\n```\n\n----------------------------------------\n\nTITLE: Running Ganache Ethereum Node with Preset Accounts\nDESCRIPTION: Command to start a local Ethereum node using Ganache with two pre-configured accounts, each having 1000000000000000000 wei (1 ETH).\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ganache \\\n  --account=\"0x0000000000000000000000000000000000000000000000000000000000000001,1000000000000000000\" \\\n  --account=\"0x0000000000000000000000000000000000000000000000000000000000000002,1000000000000000000\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Starship Deployment for InterchainJS\nDESCRIPTION: This command stops port forwarding and deletes all deployed Helm charts, effectively cleaning up the Starship environment.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run starship clean\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Kubernetes Cluster with Kind for InterchainJS\nDESCRIPTION: This command creates a local Kubernetes cluster using Kind, providing access to a Kubernetes environment for Starship deployment.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship setup-kind\n```\n\n----------------------------------------\n\nTITLE: Alternative Ganache Startup using Yarn Script\nDESCRIPTION: Alternative command to start the Ganache Ethereum node using a predefined yarn script.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/devnet/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn run-ganache\n```\n\n----------------------------------------\n\nTITLE: Removing Kind Kubernetes Cluster for InterchainJS\nDESCRIPTION: This command deletes the Kind Kubernetes cluster if it was used for the Starship deployment.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship clean-kind\n```\n\n----------------------------------------\n\nTITLE: Removing Kind Kubernetes Cluster\nDESCRIPTION: Command to delete the local Kind Kubernetes cluster. This completely removes the Kubernetes infrastructure when it's no longer needed.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/ethereum/starship/README.md#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nyarn starship clean-kind\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Amino Sign Verification with Special Characters\nDESCRIPTION: Fix for amino sign verification failing when special characters are present\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/amino/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- fail amino sign verify with special chars ([de483c2](https://github.com/cosmos/cosmjs/commit/de483c24c82a04bab90c921f99f2124e3497641d))\n```\n\n----------------------------------------\n\nTITLE: Feature Addition - Timeout Height BigInt Implementation\nDESCRIPTION: Implementation change to use BigInt instead of Long for timeout height functionality.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/packages/amino/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- **timeout-height:** use bigint instead long ([f771c52](https://github.com/cosmos/cosmjs/commit/f771c52c0a0ffed87255114630408224314670e1))\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Starship Environment for InterchainJS\nDESCRIPTION: This snippet demonstrates how to clean up and tear down the Starship environment. It includes commands to stop port forwarding and remove the Helm chart.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/starship/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# stop port forwarding (done by clean() too)\n# yarn starship stop-ports\n\n# stop ports and delete & remove helm chart\nyarn starship clean\n```\n\n----------------------------------------\n\nTITLE: CosmJS Legacy Wallet Generation\nDESCRIPTION: Example of the old CosmJS wallet generation approach for comparison purposes.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/docs/migration-from-cosmjs.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DirectSecp256k1HdWallet } from \"@cosmjs/proto-signing\";\nimport { makeCosmoshubPath } from \"@cosmjs/crypto\";\n\n(async () => {\n  const mnemonic = \"your mnemonic here\";\n  const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, {\n    hdPaths: [makeCosmoshubPath(0)],\n  });\n  const [account] = await wallet.getAccounts();\n  console.log(\"Wallet address:\", account.address);\n})();\n```\n\n----------------------------------------\n\nTITLE: Importing Consensus Query and Transaction Helpers in JavaScript\nDESCRIPTION: This snippet demonstrates the import of query and transaction helper functions for the Consensus module from InterchainJS.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/interchainjs/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// query helpers\nimport { getParams } from \"@interchainjs/cosmos/consensus/v1/query.rpc.func\";\n\n// tx helpers\nimport { updateParams } from \"@interchainjs/cosmos/consensus/v1/tx.rpc.func\";\n```\n\n----------------------------------------\n\nTITLE: Tearing Down Starship Environment in Shell\nDESCRIPTION: Commands for stopping port forwarding, cleaning up, and removing the Starship Helm chart.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/networks/cosmos/starship/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# stop port forwarding (done by clean() too)\n# yarn starship stop-ports\n\n# stop ports and delete & remove helm chart\nyarn starship clean\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands for injective-vue\nDESCRIPTION: Shell commands for setting up the development environment and generating code for injective-vue.\nSOURCE: https://github.com/hyperweb-io/interchainjs/blob/main/libs/injective-vue/README.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nyarn\nyarn build:dev\n\n# Codegen\nyarn codegen\n\n# Publishing\nyarn build\nyarn publish\n```"
  }
]