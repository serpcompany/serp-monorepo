[
  {
    "owner": "sparkdevnetwork",
    "repo": "rock",
    "content": "TITLE: Simple Line Plotting with Flot\nDESCRIPTION: This snippet demonstrates a simple line plot from (0, 0) to (1, 1) using Flot.  It includes data represented as an array of arrays and sets the y-axis maximum value to 1. This provides a basic example of how to define data and options for a Flot chart.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot($(\"#placeholder\"), [ [[0, 0], [1, 1]] ], { yaxis: { max: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Axis Options in Flot\nDESCRIPTION: This code snippet shows how to configure various options for the x and y axes in a Flot chart. It includes settings for showing/hiding the axis, positioning, mode (time series), timezone, color, tick color, font, min/max values, autoscaling, transforms, ticks, tick size, tick formatter, tick decimals, label size, and tick length.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nxaxis, yaxis: {\n    show: null or true/false\n    position: \"bottom\" or \"top\" or \"left\" or \"right\"\n    mode: null or \"time\" (\"time\" requires jquery.flot.time.js plugin)\n    timezone: null, \"browser\" or timezone (only makes sense for mode: \"time\")\n\n    color: null or color spec\n    tickColor: null or color spec\n    font: null or font spec object\n\n    min: null or number\n    max: null or number\n    autoscaleMargin: null or number\n    \n    transform: null or fn: number -> number\n    inverseTransform: null or fn: number -> number\n    \n    ticks: null or number or ticks array or (fn: axis -> ticks array)\n    tickSize: number or array\n    minTickSize: number or array\n    tickFormatter: (fn: number, object -> string) or string\n    tickDecimals: null or number\n\n    labelWidth: null or number\n    labelHeight: null or number\n    reserveSpace: null or true\n    \n    tickLength: null or number\n\n    alignTicksWithAxis: null or number\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plugin Code for Robustness\nDESCRIPTION: This snippet shows how to wrap plugin code in an immediately invoked function expression (IIFE) to avoid polluting the global namespace. It also demonstrates how to handle potential conflicts with other JavaScript libraries by explicitly passing in the jQuery object.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/PLUGINS.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n    // plugin definition\n    // ...\n})(jQuery);\n```\n\n----------------------------------------\n\nTITLE: Basic Flot Plotting with jQuery\nDESCRIPTION: This snippet demonstrates the basic usage of the Flot plotting function in JavaScript. It uses jQuery to select the placeholder div element and calls the $.plot() function to draw the chart. It takes three arguments: the placeholder element, the data to plot, and an options object for customization.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot($(\"#placeholder\"), data, options);\n```\n\n----------------------------------------\n\nTITLE: Complete Data Specification Example\nDESCRIPTION: This JavaScript code snippet presents a complete example of a data specification for Flot, including multiple data series with labels and data points.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n[ { label: \"Foo\", data: [ [10, 1], [17, -14], [30, 5] ] },\n  { label: \"Bar\", data: [ [11, 13], [19, 11], [30, -7] ] }\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Flot Plotting Javascript\nDESCRIPTION: This snippet demonstrates the basic usage of the Flot plotting function. It takes a jQuery selector for the placeholder div, an array of data series, and an optional object with settings as arguments. The $.plot() function is called to render the graph within the specified div element. jQuery is a prerequisite.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/README.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.plot($(\"#placeholder\"), data, options);\n```\n\n----------------------------------------\n\nTITLE: Configuring X and Y Axes in Flot\nDESCRIPTION: This JavaScript snippet shows the configuration options for the xaxis and yaxis properties in Flot. It includes options for showing/hiding the axis, setting the position, mode (time series requires the flot.time.js plugin), timezone, color, tick color, font, min/max values, autoscaling, transform functions, ticks, tick size, tick formatter, tick decimals, label width/height, and tick length.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nxaxis, yaxis: {\n    show: null or true/false\n    position: \"bottom\" or \"top\" or \"left\" or \"right\"\n    mode: null or \"time\" (\"time\" requires jquery.flot.time.js plugin)\n    timezone: null, \"browser\" or timezone (only makes sense for mode: \"time\")\n\n    color: null or color spec\n    tickColor: null or color spec\n    font: null or font spec object\n\n    min: null or number\n    max: null or number\n    autoscaleMargin: null or number\n    \n    transform: null or fn: number -> number\n    inverseTransform: null or fn: number -> number\n    \n    ticks: null or number or ticks array or (fn: axis -> ticks array)\n    tickSize: number or array\n    minTickSize: number or array\n    tickFormatter: (fn: number, object -> string) or string\n    tickDecimals: null or number\n\n    labelWidth: null or number\n    labelHeight: null or number\n    reserveSpace: null or true\n    \n    tickLength: null or number\n\n    alignTicksWithAxis: null or number\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flot Grid Properties in JavaScript\nDESCRIPTION: This code snippet shows the available options for customizing the grid in a Flot chart. It includes properties for showing/hiding the grid, controlling layering, setting colors, adjusting margins, defining markings, and configuring border styles and interactivity.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid: {\n    show: boolean\n    aboveData: boolean\n    color: color\n    backgroundColor: color/gradient or null\n    margin: number or margin object\n    labelMargin: number\n    axisMargin: number\n    markings: array of markings or (fn: axes -> array of markings)\n    borderWidth: number or object with \"top\", \"right\", \"bottom\" and \"left\" properties with different widths\n    borderColor: color or null or object with \"top\", \"right\", \"bottom\" and \"left\" properties with different colors\n    minBorderMargin: number or null\n    clickable: boolean\n    hoverable: boolean\n    autoHighlight: boolean\n    mouseActiveRadius: number\n}\n\ninteraction: {\n    redrawOverlayInterval: number or -1\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Flot Debug Plugin Example\nDESCRIPTION: This snippet provides a complete example of a Flot plugin that alerts the user with information about each series in the plot.  It demonstrates how to define options, use hooks to modify plot behavior, and access series data.  The plugin allows controlling the level of debug information via an option.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/PLUGINS.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n    function init(plot) {\n        var debugLevel = 1;\n\n        function checkDebugEnabled(plot, options) {\n            if (options.debug) {\n                debugLevel = options.debug;\n                plot.hooks.processDatapoints.push(alertSeries);\n            }\n        }\n\n        function alertSeries(plot, series, datapoints) {\n            var msg = \"series \" + series.label;\n            if (debugLevel > 1) {\n                msg += \" with \" + series.data.length + \" points\";\n                alert(msg);\n            }\n        }\n\n        plot.hooks.processOptions.push(checkDebugEnabled);\n    }\n\n    var options = { debug: 0 };\n      \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: \"simpledebug\",\n        version: \"0.1\"\n    });\n})(jQuery);\n```\n\n----------------------------------------\n\nTITLE: Flot Data Series Options Configuration (JavaScript)\nDESCRIPTION: This code snippet demonstrates the basic structure for configuring data series options in Flot. It shows how to specify the appearance of lines, points, and bars, including visibility, line width, fill, color, radius, symbol, bar width, and alignment.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nseries: {\n    lines, points, bars: {\n        show: boolean\n        lineWidth: number\n        fill: boolean or number\n        fillColor: null or color/gradient\n    }\n\n    lines, bars: {\n        zero: boolean\n    }\n\n    points: {\n        radius: number\n        symbol: \"circle\" or function\n    }\n\n    bars: {\n        barWidth: number\n        align: \"left\", \"right\" or \"center\"\n        horizontal: boolean\n    }\n\n    lines: {\n        steps: boolean\n    }\n\n    shadowSize: number\n    highlightColor: color or number\n}\n\ncolors: [ color1, color2, ... ]\n```\n\n----------------------------------------\n\nTITLE: Flot Series Options Configuration\nDESCRIPTION: This JavaScript snippet shows the configuration options for customizing the appearance of data series in a Flot chart. It includes settings for lines, points, and bars, allowing control over their visibility, style, and behavior. The options are copied to each series, enabling global settings or overrides for individual series.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nseries: {\n    lines, points, bars: {\n        show: boolean\n        lineWidth: number\n        fill: boolean or number\n        fillColor: null or color/gradient\n    }\n\n    lines, bars: {\n        zero: boolean\n    }\n\n    points: {\n        radius: number\n        symbol: \"circle\" or function\n    }\n\n    bars: {\n        barWidth: number\n        align: \"left\", \"right\" or \"center\"\n        horizontal: boolean\n    }\n\n    lines: {\n        steps: boolean\n    }\n\n    shadowSize: number\n    highlightColor: color or number\n}\n\ncolors: [ color1, color2, ... ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Flot Plot\nDESCRIPTION: This JavaScript code snippet demonstrates how to initialize a Flot plot using the $.plot() function. It takes a placeholder (a jQuery object or DOM element), data, and options as arguments to create the plot within the specified placeholder.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar plot = $.plot(placeholder, data, options)\n```\n\n----------------------------------------\n\nTITLE: Specifying Series Data with Label and Data in JavaScript\nDESCRIPTION: This example shows how to specify data for a Flot chart series, including a label and an array of data points.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.plot($(\"#placeholder\"), [ { label: \"Foo\", data: [[0, 10], [7, 3]] } ], ...);\n```\n\n----------------------------------------\n\nTITLE: Transforming X Axis to Logarithmic Scale in Flot\nDESCRIPTION: This JavaScript snippet shows how to use the transform and inverseTransform functions to turn the x axis into a natural logarithm scale in Flot. It requires defining both functions to ensure proper data representation and interaction. This example allows for plotting data on a logarithmic scale while maintaining proper mouse interaction.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nxaxis: {\n    transform: function (v) { return Math.log(v); },\n    inverseTransform: function (v) { return Math.exp(v); }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Weekday Names in Flot.js\nDESCRIPTION: This snippet customizes the weekday names displayed on the chart axis using the 'dayNames' option. An array of 7 strings representing the weekday names in a specific language can be supplied (e.g. French).\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ndayNames: [\"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\"]\n```\n\n----------------------------------------\n\nTITLE: Convert DateTime to Timestamp in .NET\nDESCRIPTION: This .NET code snippet demonstrates how to convert a DateTime object to a JavaScript timestamp (milliseconds since epoch).\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_22\n\nLANGUAGE: aspx\nCODE:\n```\npublic static int GetJavascriptTimestamp(System.DateTime input)\n{\n    System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks);\n    System.DateTime time = input.Subtract(span);\n    return (long)(time.Ticks / 10000);\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line Using Markings in JavaScript\nDESCRIPTION: This code demonstrates how to draw a line parallel to the x-axis at y = 1 using the 'markings' option in Flot.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarkings: [ { yaxis: { from: 1, to: 1 } }, ... ]\n```\n\n----------------------------------------\n\nTITLE: Data Series Object Example\nDESCRIPTION: This JavaScript code snippet illustrates a simple data series object for Flot, specifying a label and data. The label is used in the legend, and the data is an array of [x, y] coordinates.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    label: \"y = 3\",\n    data: [[0, 3], [10, 3]]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing SignalR Hubs in ASP.NET MVC 4 (HTML)\nDESCRIPTION: This snippet shows how to reference the auto-generated SignalR Hub JavaScript proxy in an ASP.NET MVC 4 application. The script tag points to '~/signalr/hubs', which is where the proxy is dynamically generated. Ensure this script is included in your layout or view.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Installers/RockInstaller/packages/Microsoft.AspNet.SignalR.2.0.3/readme.txt#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"~/signalr/hubs\"></script>\n```\n\n----------------------------------------\n\nTITLE: Transforming Data with processDatapoints Hook (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the `processDatapoints` hook in Flot to transform data. In this example, all y coordinates of the data points are multiplied by 2. It highlights the importance of maintaining data integrity after modification.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n    function multiply(plot, series, datapoints) {\n        var points = datapoints.points, ps = datapoints.pointsize;\n        for (var i = 0; i < points.length; i += ps)\n            points[i + 1] *= 2;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Axes with Flot.js\nDESCRIPTION: This snippet demonstrates how to configure multiple axes (one x-axis and two y-axes) in Flot. The 'xaxes' and 'yaxes' options are used to define the properties of each axis, such as position and minimum value.  This allows for plotting data series with different scales or units on the same chart.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xaxes: [ { position: \"top\" } ],\n    yaxes: [ { }, { position: \"right\", min: 20 } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing SignalR Hubs in Regular ASP.NET (HTML)\nDESCRIPTION: This snippet illustrates how to reference the SignalR Hub JavaScript proxy in a regular ASP.NET application. It uses `ResolveClientUrl` to generate the correct URL for the script or registers the script via the ScriptManager using an app root relative path.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Installers/RockInstaller/packages/Microsoft.AspNet.SignalR.2.0.3/readme.txt#_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script src='<%: ResolveClientUrl(\"~/signalr/hubs\") %>'></script>\n```\n\n----------------------------------------\n\nTITLE: Flot Data Series Configuration\nDESCRIPTION: This JavaScript code configures a data series with a label and data points. It also disables click events for this specific series.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{ data: [...], label: \"Foo\", clickable: false }\n```\n\n----------------------------------------\n\nTITLE: Setting Plot Options\nDESCRIPTION: This JavaScript code snippet shows how to set plot options for a Flot chart. It demonstrates how to configure the series options to show lines and points.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar options = {\n    series: {\n        lines: { show: true },\n        points: { show: true }\n    }\n};\n\n$.plot(placeholder, data, options);\n```\n\n----------------------------------------\n\nTITLE: Customizing Legend Label Formatting\nDESCRIPTION: This JavaScript code snippet demonstrates how to customize the legend label formatting using the `labelFormatter` option. It creates clickable links for each legend label.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nlabelFormatter: function(label, series) {\n    // series is the series object for the label\n    return '<a href=\"#\" + label + '\">' + label + '</a>';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Stripes Using Markings Function in JavaScript\nDESCRIPTION: This JavaScript function creates vertical stripes as markings in a Flot chart. It iterates through the x-axis range and pushes a new marking for each stripe.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarkings: function (axes) {\n    var markings = [];\n    for (var x = Math.floor(axes.xaxis.min); x < axes.xaxis.max; x += 2)\n        markings.push({ xaxis: { from: x, to: x + 1 } });\n    return markings;\n}\n```\n\n----------------------------------------\n\nTITLE: Flot Chart Series Style Example\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the style of a Flot chart's data series, specifically focusing on lines and points. It shows how to enable lines with filling and set a custom fill color with transparency, while also enabling points with no filling. These options are applied to the `series` configuration object.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    series: {\n        lines: { show: true, fill: true, fillColor: \"rgba(255, 255, 255, 0.8)\" },\n        points: { show: true, fill: false }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Customize Month Names - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to customize month names in Flot using the `monthNames` option. It provides an array of month names for a specific locale.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nmonthNames: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Placeholder Div HTML\nDESCRIPTION: This snippet showcases the creation of a placeholder div element, which serves as the container for the Flot graph.  It's essential to set the width and height of this div, either inline or via CSS, so that the plotting library can correctly scale the graph. Without specified dimensions, the graph may not render properly.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/README.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"placeholder\"></div>\n```\n\n----------------------------------------\n\nTITLE: Custom Tick Formatter Function in Flot.js\nDESCRIPTION: This snippet demonstrates how to use a custom tick formatter function to format the values on an axis. The function takes the value and axis object as input and returns a formatted string.  This example formats December 24 as 24/12.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ntickFormatter: function (val, axis) {\n    var d = new Date(val);\n    return d.getUTCDate() + \"/\" + (d.getUTCMonth() + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Tick Size for Time Axis in Flot.js\nDESCRIPTION: This snippet configures the minimum tick size for a time axis. The 'minTickSize' option is an array containing the value and unit of the tick size. This ensures that the tick interval is at least the specified duration.  In this case, the minimum tick size is set to one month.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nminTickSize: [1, \"month\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing Ticks with Values and Labels\nDESCRIPTION: This code snippet shows how to explicitly define ticks with custom values and labels. It defines an array of arrays, where each inner array contains the tick value and its corresponding label. This approach provides complete control over the placement and appearance of ticks.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nticks: [[0, \"zero\"], [1.2, \"one mark\"], [2.4, \"two marks\"]]\n```\n\n----------------------------------------\n\nTITLE: Defining a Draw Hook in Flot (JavaScript)\nDESCRIPTION: This snippet demonstrates how to define a simple draw hook in Flot using JavaScript.  The hook displays an alert message. It shows how to pass the hook into the plot options and access it again later through the plot object.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n  // define a simple draw hook\n  function hellohook(plot, canvascontext) { alert(\"hello!\"); };\n\n  // pass it in, in an array since we might want to specify several\n  var plot = $.plot(placeholder, data, { hooks: { draw: [hellohook] } });\n\n  // we can now find it again in plot.hooks.draw[0] unless a plugin\n  // has added other hooks\n```\n\n----------------------------------------\n\nTITLE: Transforming X-Axis to Logarithmic Scale\nDESCRIPTION: This JavaScript code snippet transforms the x-axis into a natural logarithmic scale. It uses the Math.log() function for the 'transform' option and Math.exp() for the 'inverseTransform' option to convert between data values and the plot's coordinate system.  This is useful for visualizing data with a wide range of values.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nxaxis: {\n    transform: function (v) { return Math.log(v); },\n    inverseTransform: function (v) { return Math.exp(v); }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Plot Click Event in JavaScript\nDESCRIPTION: This code snippet shows how to bind a 'plotclick' event to a placeholder element in a Flot chart using jQuery. It alerts the coordinates of the click and highlights the clicked data point if present.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.plot($(\"#placeholder\"), [ d ], { grid: { clickable: true } });\n\n$(\"#placeholder\").bind(\"plotclick\", function (event, pos, item) {\n    alert(\"You clicked at \" + pos.x + \", \" + pos.y);\n    // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ...\n    // if you need global screen coordinates, they are pos.pageX, pos.pageY\n\n    if (item) {\n        highlight(item.series, item.datapoint);\n        alert(\"You clicked a point!\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Tick Formatter with Suffixes\nDESCRIPTION: This JavaScript code snippet defines a custom tick formatter function that adds suffixes (B, kB, MB) to the tick labels based on their values. It formats the tick values with the appropriate suffix and the specified number of decimal places (axis.tickDecimals).\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction suffixFormatter(val, axis) {\n    if (val > 1000000)\n        return (val / 1000000).toFixed(axis.tickDecimals) + \" MB\";\n    else if (val > 1000)\n        return (val / 1000).toFixed(axis.tickDecimals) + \" kB\";\n    else\n        return val.toFixed(axis.tickDecimals) + \" B\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Background Gradient\nDESCRIPTION: This JavaScript code configures the background color of the grid with a gradient that transitions from black to gray.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\ngrid: {\n    backgroundColor: { colors: [\"#000\", \"#999\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Grid Options\nDESCRIPTION: This JavaScript code defines various options for customizing the grid in a Flot chart. It includes properties for showing/hiding the grid, setting colors, margins, markings, interactivity settings (clickable, hoverable), and mouse radius.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\ngrid: {\n    show: boolean\n    aboveData: boolean\n    color: color\n    backgroundColor: color/gradient or null\n    margin: number or margin object\n    labelMargin: number\n    axisMargin: number\n    markings: array of markings or (fn: axes -> array of markings)\n    borderWidth: number or object with \"top\", \"right\", \"bottom\" and \"left\" properties with different widths\n    borderColor: color or null or object with \"top\", \"right\", \"bottom\" and \"left\" properties with different colors\n    minBorderMargin: number or null\n    clickable: boolean\n    hoverable: boolean\n    autoHighlight: boolean\n    mouseActiveRadius: number\n}\n\ninteraction: {\n    redrawOverlayInterval: number or -1\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Series Gradient\nDESCRIPTION: This JavaScript code defines gradient scaling for series colors, including brightness and opacity adjustments.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n{ colors: [{ opacity: 0.8 }, { brightness: 0.6, opacity: 0.8 } ] }\n```\n\n----------------------------------------\n\nTITLE: Custom Suffix Formatter in Flot\nDESCRIPTION: This JavaScript snippet shows a custom tick formatter function for Flot that adds a suffix (B, kB, MB) to the tick labels based on the value. It formats the value with the appropriate suffix and a specified number of decimal places determined by the axis.tickDecimals property. This can improve readability of the plot when dealing with large numbers.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction suffixFormatter(val, axis) {\n    if (val > 1000000)\n        return (val / 1000000).toFixed(axis.tickDecimals) + \" MB\";\n    else if (val > 1000)\n        return (val / 1000).toFixed(axis.tickDecimals) + \" kB\";\n    else\n        return val.toFixed(axis.tickDecimals) + \" B\";\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tick Generator for Pi Intervals in Flot\nDESCRIPTION: This JavaScript snippet defines a custom tick generator function for creating ticks at intervals of pi on the x axis in Flot. The function calculates the tick values and their corresponding labels. This example is suitable for plotting trigonometric functions where you want the x-axis ticks to be multiples of pi.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction piTickGenerator(axis) {\n    var res = [], i = Math.floor(axis.min / Math.PI);\n    do {\n        var v = i * Math.PI;\n        res.push([v, i + \"\\u03c0\"]);\n        ++i;\n    } while (v < axis.max);\n    return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Markings Array in JavaScript\nDESCRIPTION: This example shows how to define an array of markings to draw lines and rectangular areas in the background of the plot. The color of the marking is also specified.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nmarkings: [ { xaxis: { from: 0, to: 2 }, yaxis: { from: 10, to: 10 }, color: \"#bb0000\" }, ... ]\n```\n\n----------------------------------------\n\nTITLE: Defining Series-Specific Options\nDESCRIPTION: This example showcases how to define options that are specific to each series in the plot, similar to how points and lines options are handled in core Flot. The series-specific options are defined within the series object in the main options object.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/PLUGINS.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    series: {\n        downsample: {\n            algorithm: null,\n            maxpoints: 1000\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Margin Object\nDESCRIPTION: This JavaScript code defines the structure for specifying margins around the grid. It allows for individual top, left, bottom, and right margins to be set in pixels.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nmargin: {\n    top: top margin in pixels\n    left: left margin in pixels\n    bottom: bottom margin in pixels\n    right: right margin in pixels\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Plot Object via jQuery\nDESCRIPTION: This JavaScript code snippet shows how to access the Flot plot object when using Flot as a jQuery chainable property. It utilizes the .data(\"plot\") method to retrieve the plot object associated with the placeholder element.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar plot = $(\"#placeholder\").plot(data, options).data(\"plot\");\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Markings Array\nDESCRIPTION: This JavaScript code defines how to specify markings on the plot area. Each marking defines a rectangular area using x and y axis ranges with optional color specification.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nmarkings: [ { xaxis: { from: 0, to: 2 }, yaxis: { from: 10, to: 10 }, color: \"#bb0000\" }, ... ]\n```\n\n----------------------------------------\n\nTITLE: Flot Custom Point Symbol Definition (JavaScript)\nDESCRIPTION: This code defines a custom point symbol for Flot charts. The function `cross` takes the drawing context, x and y coordinates, radius, and shadow information as input and draws a cross symbol. This can be used to customize the appearance of points in the chart.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nfunction cross(ctx, x, y, radius, shadow) {\n    var size = radius * Math.sqrt(Math.PI) / 2;\n    ctx.moveTo(x - size, y - size);\n    ctx.lineTo(x + size, y + size);\n    ctx.moveTo(x - size, y + size);\n    ctx.lineTo(x + size, y - size);\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Axes Configuration - Flot (Updated)\nDESCRIPTION: This code snippet shows the new configuration format for multiple axes in Flot, using xaxes and yaxes arrays instead of the previous x2axis/y2axis options. This allows for easier management of multiple axes and requires plugins to be updated accordingly.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/NEWS.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xaxes: [ { ... }, { ... } ],\n    yaxes: [ { ... }, { ... } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Javascript Timestamp in Javascript\nDESCRIPTION: This code snippet retrieves the current Javascript timestamp, which represents the number of milliseconds since January 1, 1970 00:00:00 UTC.  This value is essential for representing time series data in Flot.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nalert((new Date()).getTime())\n```\n\n----------------------------------------\n\nTITLE: Customizing Time Format in Flot.js\nDESCRIPTION: This code shows how to customize the time format of the x-axis in Flot using the 'timeformat' option.  The example sets the format to 'YYYY/MM/DD', resulting in tick labels like '2000/12/24'.  A subset of strftime specifiers is supported. Make sure the time plugin is included for time series support.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nxaxis: {\n    mode: \"time\",\n    timeformat: \"%Y/%m/%d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Line Marking\nDESCRIPTION: This JavaScript code demonstrates how to draw a horizontal line on the plot using markings.  It sets the 'from' and 'to' values for the yaxis to the same value to create a line.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nmarkings: [ { yaxis: { from: 1, to: 1 } }, ... ]\n```\n\n----------------------------------------\n\nTITLE: Transforming Data Points with a Hook in Flot\nDESCRIPTION: This JavaScript snippet shows how to use the `processDatapoints` hook to transform data.  The example multiplies all y-coordinates by 2.  It demonstrates how to access the `datapoints.points` array and `datapoints.pointsize` to modify the normalized data points before Flot calculates min/max values for the axes.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_49\n\nLANGUAGE: JavaScript\nCODE:\n```\n    function multiply(plot, series, datapoints) {\n        var points = datapoints.points, ps = datapoints.pointsize;\n        for (var i = 0; i < points.length; i += ps)\n            points[i + 1] *= 2;\n    }\n```\n\n----------------------------------------\n\nTITLE: Binding Events with a Hook in Flot\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `bindEvents` hook to set up event handlers on the plot's event holder.  It shows how to bind a `mousedown` event to display an alert with the mouse coordinates.  It also clarifies that custom plot events are generated on the placeholder div, not the event holder itself.  It highlights the use of jQuery events and the interaction with the canvas element.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\n    function (plot, eventHolder) {\n        eventHolder.mousedown(function (e) {\n            alert(\"You pressed the mouse at \" + e.pageX + \" \" + e.pageY);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Format Time Axis - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to format the time axis using the `timeformat` option in Flot. It specifies a format string to display the year, month, and day.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nxaxis: {\n    mode: \"time\",\n    timeformat: \"%Y/%m/%d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Point Offset in Flot\nDESCRIPTION: This JavaScript snippet retrieves the calculated offset of a data point within the placeholder div using the `pointOffset()` method. It specifies the x and y coordinates, as well as the x and y axis references, to calculate the offset.  The `left` and `top` properties of the returned object contain the offset within the div.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\no = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 })\n// o.left and o.top now contains the offset within the div\n```\n\n----------------------------------------\n\nTITLE: Flot Chart Color Theme Definition (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to specify a color theme for a Flot chart. The `colors` array defines a list of colors that will be used for the data series in the chart. If there are more series than colors, Flot will generate additional colors by lightening or darkening the colors in the theme.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_31\n\nLANGUAGE: js\nCODE:\n```\ncolors: [\"#d18b2c\", \"#dba255\", \"#919733\"]\n```\n\n----------------------------------------\n\nTITLE: Flot Colors Array Example\nDESCRIPTION: This JavaScript snippet shows an example of how to define a color theme for a Flot chart using the `colors` array. The array contains a list of hexadecimal color codes that will be used to color the data series in the chart. If there are more data series than colors, Flot will generate additional colors by lightening and darkening the existing ones.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\ncolors: [\"#d18b2c\", \"#dba255\", \"#919733\"]\n```\n\n----------------------------------------\n\nTITLE: Example Data Format for Flot\nDESCRIPTION: This JavaScript code snippet provides an example of the raw data format for Flot plots, which consists of an array of points represented as [x, y] coordinates. Both x and y values must be numbers.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n[ [1, 3], [2, 14.01], [3.5, 3.14] ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Summernote - JavaScript\nDESCRIPTION: This JavaScript code snippet initializes the Summernote editor on a specific element (identified by its ID).  It requires jQuery and Summernote to be included in the page.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function() {\n  $('#summernote').summernote();\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Flot Gradient Colors\nDESCRIPTION: This JavaScript code shows how to specify an array of colors to create a gradient in Flot. The colors define the transition of the gradient.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n{ colors: [ color1, color2, ... ] }\n```\n\n----------------------------------------\n\nTITLE: Flot Item Object Structure\nDESCRIPTION: This JavaScript code defines the structure of the item object that is passed to the \"plotclick\" and \"plothover\" event handlers. It contains information about the data point, series, and screen coordinates.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nitem: {\n    datapoint: the point, e.g. [0, 2]\n    dataIndex: the index of the point in the data array\n    series: the series object\n    seriesIndex: the index of the series\n    pageX, pageY: the global screen coordinates of the point\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Gradient with Colors in JavaScript\nDESCRIPTION: This example demonstrates how to define a gradient with an array of colors for use in Flot chart backgrounds and series.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ colors: [ color1, color2, ... ] }\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient for Series Colors in JavaScript\nDESCRIPTION: This example shows how to specify the gradient as an object that specifies the scaling of the brightness and the opacity of the series color.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ colors: [{ opacity: 0.8 }, { brightness: 0.6, opacity: 0.8 } ] }\n```\n\n----------------------------------------\n\nTITLE: Multiple Axes Configuration - Flot\nDESCRIPTION: This code snippet demonstrates the updated configuration for multiple axes in Flot. The previous x2axis/y2axis options are replaced with xaxes and yaxes arrays, allowing for more flexible axis management. This change requires plugins that interact with axes to be updated to accommodate the new array structure.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/NEWS.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xaxis: { ... }, x2axis: { ... },\n    yaxis: { ... }, y2axis: { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple Axes with xaxes and yaxes Arrays - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to configure multiple axes using the xaxes and yaxes arrays in Flot chart options. It sets the position of the x-axis to the top and the y-axis to the right, with a minimum value of 20 for the second y-axis.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xaxes: [ { position: \"top\" } ],\n    yaxes: [ { }, { position: \"right\", min: 20 } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line with Flot Javascript\nDESCRIPTION: This snippet provides a simple example of drawing a line from (0, 0) to (1, 1) using Flot. It includes an array containing the data points and an options object to set the maximum value on the y-axis. This demonstrates a minimal working example for creating a plot with Flot, utilizing jQuery.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/README.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.plot($(\"#placeholder\"), [ [[0, 0], [1, 1]] ], { yaxis: { max: 1 } });\n```\n\n----------------------------------------\n\nTITLE: Customizing Month Names in Flot.js\nDESCRIPTION: This snippet customizes the month names displayed on the chart axis using the `monthNames` option.  It provides an array of 12 strings representing the month names in a specific language (e.g., Danish).\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmonthNames: [\"jan\", \"feb\", \"mar\", \"apr\", \"maj\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\"]\n```\n\n----------------------------------------\n\nTITLE: Custom Legend Sorting Function\nDESCRIPTION: This JavaScript code snippet shows how to provide a custom comparator function to sort legend entries alphabetically. It compares the \"label\" properties of two legend entries to determine the sorting order.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nsorted: function(a, b) {\n    // sort alphabetically in ascending order\n    return a.label == b.label ? 0 : (\n        a.label > b.label ? 1 : -1\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Ticks with a Function\nDESCRIPTION: This JavaScript code snippet defines a custom tick generator function for the x-axis, suitable for trigonometric functions. The function calculates tick values at intervals of pi and formats them with the pi symbol (\\u03c0). It returns an array of tick value/label pairs.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction piTickGenerator(axis) {\n    var res = [], i = Math.floor(axis.min / Math.PI);\n    do {\n        var v = i * Math.PI;\n        res.push([v, i + \"\\u03c0\"]);\n        ++i;\n    } while (v < axis.max);\n    return res;\n}\n```\n\n----------------------------------------\n\nTITLE: Including Excanvas for IE Support HTML\nDESCRIPTION: This code snippet demonstrates how to include Excanvas, a canvas emulator, for supporting Internet Explorer versions less than 9. It utilizes conditional comments to target specific IE versions and includes the excanvas.min.js script. This is necessary because older versions of IE do not natively support the HTML5 canvas element.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/README.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]-->\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color Gradient for Grid in JavaScript\nDESCRIPTION: This example demonstrates how to set a background color gradient for the grid in a Flot chart, using an object with a 'colors' array.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrid: {\n    backgroundColor: { colors: [\"#000\", \"#999\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Flot Plotclick Event\nDESCRIPTION: This JavaScript code demonstrates how to bind to the \"plotclick\" event in Flot. The event handler retrieves the coordinates of the click and highlights the data point if clicked.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot($(\"#placeholder\"), [ d ], { grid: { clickable: true } });\n\n$(\"#placeholder\").bind(\"plotclick\", function (event, pos, item) {\n    alert(\"You clicked at \" + pos.x + \", \" + pos.y);\n    // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ...\n    // if you need global screen coordinates, they are pos.pageX, pos.pageY\n\n    if (item) {\n        highlight(item.series, item.datapoint);\n        alert(\"You clicked a point!\");\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Flot Tick Labels\nDESCRIPTION: This HTML snippet demonstrates the generated structure for x-axis labels in a Flot chart. The labels are contained within a div with classes 'flot-x-axis' and 'flot-x1-axis', and each label itself is a div with the class 'flot-tick-label'. This structure allows for styling the labels using CSS.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<div class='flot-x-axis flot-x1-axis'>\n    <div class='flot-tick-label'>January 2013</div>\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Disappearing Bars with Gradient in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create bars that gradually disappear using a gradient with varying opacity in a Flot chart.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nbars: {\n    show: true,\n    lineWidth: 0,\n    fill: true,\n    fillColor: { colors: [ { opacity: 0.8 }, { opacity: 0.1 } ] }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Events with bindEvents Hook (JavaScript)\nDESCRIPTION: This code illustrates how to use the `bindEvents` hook in Flot to attach event handlers to the plot. In this example, a `mousedown` event handler is attached to the event holder, displaying an alert with the mouse coordinates when the mouse button is pressed.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n    function (plot, eventHolder) {\n        eventHolder.mousedown(function (e) {\n            alert(\"You pressed the mouse at \" + e.pageX + \" \" + e.pageY);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Flot Axis Label Structure\nDESCRIPTION: This HTML snippet demonstrates the structure of axis labels generated by Flot.  It shows how the labels are contained within div elements with classes 'flot-x-axis' and 'flot-x1-axis', and how individual tick labels are given the class 'flot-tick-label'. This allows for CSS styling of axis labels.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class='flot-x-axis flot-x1-axis'>\n    <div class='flot-tick-label'>January 2013</div>\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting Placeholder Dimensions Inline HTML\nDESCRIPTION: This example demonstrates how to set the width and height of the placeholder div element inline using the style attribute.  The dimensions are crucial for Flot to correctly render and scale the graph. This approach provides a quick and direct way to specify the size of the plot area.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/README.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"placeholder\" style=\"width:600px;height:300px\"></div>\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Draw Hook in Flot\nDESCRIPTION: This JavaScript snippet defines a simple draw hook function called `hellohook` that displays an alert message. It then shows how to pass this hook to Flot using the `hooks` option during plot creation.  The hook is added to the `draw` array, which allows it to be executed during the drawing phase. Finally, it demonstrates how to access the hook later via the `plot.hooks.draw` array.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\n  // define a simple draw hook\n  function hellohook(plot, canvascontext) { alert(\"hello!\"); };\n\n  // pass it in, in an array since we might want to specify several\n  var plot = $.plot(placeholder, data, { hooks: { draw: [hellohook] } });\n\n  // we can now find it again in plot.hooks.draw[0] unless a plugin\n  // has added other hooks\n```\n\n----------------------------------------\n\nTITLE: Tick Color Configuration - Flot (Updated)\nDESCRIPTION: This code demonstrates the updated configuration for setting tick colors in Flot. The 'tickColor' option is now defined within each axis configuration, providing more granular control over the appearance of individual axes. A base color will autogenerate a tick color by adding transparency.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/NEWS.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ xaxis: { tickColor: \"#000\"}, yaxis: { tickColor: \"#000\"} }\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Bar Gradient\nDESCRIPTION: This JavaScript code configures bars with a gradient fill that gradually fades away, without an outline.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nbars: {\n    show: true,\n    lineWidth: 0,\n    fill: true,\n    fillColor: { colors: [ { opacity: 0.8 }, { opacity: 0.1 } ] }\n}\n```\n\n----------------------------------------\n\nTITLE: Datapoint Format Options in Flot\nDESCRIPTION: This JavaScript snippet shows the structure of the `datapoints.format` array, which specifies how a point is normalized and how it interferes with axis scaling. It demonstrates how to define `x`, `y`, `number`, `required`, `defaultValue`, and `autoscale` properties to control the normalization process of data points. This configuration allows fine-grained control over how Flot interprets and processes the data before plotting.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\n    {\n        x, y: boolean,\n        number: boolean,\n        required: boolean,\n        defaultValue: value,\n        autoscale: boolean\n    }\n```\n\n----------------------------------------\n\nTITLE: Target Element - HTML\nDESCRIPTION: This code snippet shows how to define a div element that will be replaced by the Summernote editor. The div should be placed within the `<body>` tag.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"summernote\">Hello Summernote</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Flot Version Number\nDESCRIPTION: This code snippet specifies how to obtain the version number of the Flot library using the static property `$.plot.version`.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_51\n\nLANGUAGE: JavaScript\nCODE:\n```\n$.plot.version\n```\n\n----------------------------------------\n\nTITLE: Custom Point Symbol Function - Flot\nDESCRIPTION: This JavaScript function defines a custom symbol for points in a Flot chart. It draws a cross shape using the provided canvas context, x and y coordinates, radius, and shadow information.  The function ensures the symbol's area is similar to a circle with the given radius for consistent visual weight.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction cross(ctx, x, y, radius, shadow) {\n    var size = radius * Math.sqrt(Math.PI) / 2;\n    ctx.moveTo(x - size, y - size);\n    ctx.lineTo(x + size, y + size);\n    ctx.moveTo(x - size, y + size);\n    ctx.lineTo(x + size, y - size);\n}\n```\n\n----------------------------------------\n\nTITLE: BS3 Spinner Template Configuration - jQuery\nDESCRIPTION: This JavaScript snippet defines the default spinner template used when the loading state is activated. It overrides the default settings for both the standard modal and the modal manager. This is important when using Bootstrap 3 to ensure the loading spinner is styled correctly.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/bootstrap-modal/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.modal.defaults.spinner = $.fn.modalmanager.defaults.spinner = \n        '<div class=\"loading-spinner\" style=\"width: 200px; margin-left: -100px;\">' +\n            '<div class=\"progress progress-striped active\">' +\n                '<div class=\"progress-bar\" style=\"width: 100%;\"></div>' +\n            '</div>' +\n        '</div>';\n```\n\n----------------------------------------\n\nTITLE: Default Datapoint Format in Flot\nDESCRIPTION: This JavaScript snippet shows the default format array used by Flot to normalize data points.  It indicates that a point consists of two numeric values, the first plotted on the x-axis and the second on the y-axis. Both values are required for the point to be valid.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\n    [\n        { x: true, number: true, required: true },\n        { y: true, number: true, required: true }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Get Series Color with Flot getData()\nDESCRIPTION: This JavaScript snippet retrieves the color assigned to a data series in a Flot plot using the `getData()` method. It iterates through the series array and alerts the color of each series.  This allows developers to access and utilize properties assigned to the data series internally by Flot.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nvar series = plot.getData();\nfor (var i = 0; i < series.length; ++i)\n    alert(series[i].color);\n```\n\n----------------------------------------\n\nTITLE: Custom Tab Indexing in Modal Forms - HTML\nDESCRIPTION: This HTML snippet illustrates how to use 'data-tabindex' to specify the tab order within a modal form instead of the standard 'tabindex' attribute. This allows finer control over the tabbing behavior within the modal.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/bootstrap-modal/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" data-tabindex=\"1\" />\n    <input type=\"text\" data-tabindex=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Defining Option - New Code\nDESCRIPTION: This code demonstrates the new way of defining an option using properties. The `Option` attribute is used to specify the short name (\"o\"), long name (\"my-option\"), a default value (10), and help text. This approach uses a property with getter and setter, making it compatible with recent library versions.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/Applications/CheckVariableNaming/packages/CommandLineParser.1.9.71/readme.txt#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nclass Options {\n  [Option(\"o\", \"my-option\", DefaultValue=10, HelpText=\"This is an option!\")]\n  public int MyOption { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with dotnet publish\nDESCRIPTION: This command builds a Docker image for the Rock.CloudPrint.Service application using the dotnet publish command.  It specifies the Linux operating system and x64 architecture.  Docker Desktop must be running for this command to succeed.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/RockCloudPrint/Publishing.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd Rock.CloudPrint.Service\ndotnet publish --os linux --arch x64 /t:PublishContainer\n```\n\n----------------------------------------\n\nTITLE: Mapping SignalR Hubs in Owin Startup Class (C#)\nDESCRIPTION: This snippet demonstrates how to map SignalR hubs in an Owin Startup class. The `Configuration` method is used to register the SignalR route using `app.MapSignalR()`. This is essential for enabling SignalR functionality in the application. Requires the Microsoft.Owin and Owin namespaces.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Installers/RockInstaller/packages/Microsoft.AspNet.SignalR.2.0.3/readme.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing Microsoft.Owin;\nusing Owin;\nusing MyWebApplication;\n\nnamespace MyWebApplication\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.MapSignalR();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate offset of data point in Flot\nDESCRIPTION: This code snippet shows how to calculate the offset of a data point at (x, y) in data space within the placeholder div using the pointOffset method. It takes xpos and ypos as input for x and y coordinates, and xaxis and yaxis as optional axis references.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\no = pointOffset({ x: xpos, y: ypos, xaxis: 2, yaxis: 3 })\n// o.left and o.top now contains the offset within the div\n```\n\n----------------------------------------\n\nTITLE: Default Tick Formatter\nDESCRIPTION: This JavaScript code snippet shows the default tick formatter function used by Flot. It takes a tick value and an axis object as input and returns a string representation of the value, rounded to the specified number of decimal places (axis.tickDecimals).\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction formatter(val, axis) {\n    return val.toFixed(axis.tickDecimals);\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Docker Image to Tar Archive\nDESCRIPTION: This command saves the Docker image named 'rock-cloudprint-service' to a tar archive file named 'rock-cloudprint-service.tar'. This is used for distributing the image for beta testing.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/RockCloudPrint/Publishing.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker save rock-cloudprint-service -o rock-cloudprint-service.tar\n```\n\n----------------------------------------\n\nTITLE: Defining Option with Short Name\nDESCRIPTION: This code snippet demonstrates how to define an option with a short name using the `Option` attribute. It specifies a short name ('o'), a long name (\"my-option\"), a default value (10), and help text.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/Applications/CheckVariableNaming/packages/CommandLineParser.1.9.71/readme.txt#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[Option('o', \"my-option\", DefaultValue=10, HelpText=\"This is an option!\")]\npublic int MyOption { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Reversing Y Axis Values in Flot\nDESCRIPTION: This JavaScript snippet demonstrates how to reverse the order of values on the y axis in Flot using the transform and inverseTransform functions. By returning the negative of the input value in both functions, the y-axis values are displayed in inverse order. This may be useful for certain data visualizations where inverting the y-axis provides more clarity.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nyaxis: {\n    transform: function (v) { return -v; },\n    inverseTransform: function (v) { return -v; }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parser State\nDESCRIPTION: This code shows how to access the parser state within an options class.  The `ParserState` attribute is used to mark a property of type `IParserState` that will receive the parser's state.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/Applications/CheckVariableNaming/packages/CommandLineParser.1.9.71/readme.txt#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Options {\n  [ParserState]\n  public IParserState LastParserState { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: MS Test Example: String Extension Test\nDESCRIPTION: This C# code snippet demonstrates a basic unit test using the MS Test framework. It tests the `AsDoubleOrNull()` extension method on a string to ensure that a valid integer string is correctly converted to a double. The test class is decorated with `[TestClass]` and the test method with `[TestMethod]`.  It uses `Assert.That.AreEqual` to check if the converted value matches the expected double value.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.Tests/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Rock.Tests.Utility.ExtensionMethods\n{\n    [TestClass]\n    public class StringExtensionsTest\n    {\n        [TestMethod]\n        public void AsDouble_ValidInteger()\n        {\n            var output = @\"3\".AsDoubleOrNull();\n            Assert.That.AreEqual( 3.0d, output );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Tick Formatter - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to define a custom tick formatter function to format time axis tick labels in Flot. It formats December 24 as 24/12.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\ntickFormatter: function (val, axis) {\n    var d = new Date(val);\n    return d.getUTCDate() + \"/\" + (d.getUTCMonth() + 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Tool with Settings\nDESCRIPTION: This code shows initializing the Table tool with additional settings like inlineToolbar and config. The config object specifies the initial number of rows and columns for the table. inlineToolbar enables inline editing options for the table.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.JavaScript.EditorJs/src/vendor/table/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = EditorJS({\n  ...\n  \n  tools: {\n    ...\n    table: {\n      class: Table,\n      inlineToolbar: true,\n      config: {\n        rows: 2,\n        cols: 3,\n      },\n    },\n  },\n  \n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Code Signing Executable with SignTool\nDESCRIPTION: This command signs the Rock.CloudPrint.Desktop.exe executable using signtool.exe.  It uses the SparkDevelopmentNetwork.cer certificate and provides a description for the signature. This is necessary to ensure a proper UAC dialog is displayed when the application self-elevates.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/RockCloudPrint/Publishing.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nsigntool.exe sign /f SparkDevelopmentNetwork.cer /d \"Rock Cloud Print\" Rock.CloudPrint.Desktop\\bin\\Release\\net8.0-windows\\publish\\Rock.CloudPrint.Desktop.exe\n```\n\n----------------------------------------\n\nTITLE: Table Tool Output Data Format\nDESCRIPTION: This JSON snippet shows the output data format of the Table tool, including the 'type', 'withHeadings' boolean indicating if the first row is used as headings, and 'content' which is a 2D array containing the table data.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.JavaScript.EditorJs/src/vendor/table/README.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\" : \"table\",\n    \"data\" : {\n        \"withHeadings\": true,\n        \"content\" : [ [ \"Kine\", \"Pigs\", \"Chicken\" ], [ \"1 pcs\", \"3 pcs\", \"12 pcs\" ], [ \"100$\", \"200$\", \"150$\" ] ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Help Screen Shortcut\nDESCRIPTION: This code snippet demonstrates a shortcut for displaying a help screen. The `HelpOption` attribute marks a method that returns a string containing the help text. The `HelpText.AutoBuild` method is used to automatically generate the help text based on the options class.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/Applications/CheckVariableNaming/packages/CommandLineParser.1.9.71/readme.txt#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[HelpOption]\npublic string GetUsage()\n{\n  return HelpText.AutoBuild(this,\n    (HelpText current) => HelpText.DefaultParsingErrorsHandler(this, current));\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Flot Debug Plugin Example\nDESCRIPTION: This snippet presents a complete example of a Flot plugin that alerts the series label when processing data points. It showcases how to define options, use hooks to interact with Flot's lifecycle, and store plot-specific state in the init function. Options include a debug level to determine the level of alerting. Requires jQuery and Flot.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/PLUGINS.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n    function init(plot) {\n        var debugLevel = 1;\n\n        function checkDebugEnabled(plot, options) {\n            if (options.debug) {\n                debugLevel = options.debug;\n                plot.hooks.processDatapoints.push(alertSeries);\n            }\n        }\n\n        function alertSeries(plot, series, datapoints) {\n            var msg = \"series \" + series.label;\n            if (debugLevel > 1) {\n                msg += \" with \" + series.data.length + \" points\";\n                alert(msg);\n            }\n        }\n\n        plot.hooks.processOptions.push(checkDebugEnabled);\n    }\n\n    var options = { debug: 0 };\n      \n    $.plot.plugins.push({\n        init: init,\n        options: options,\n        name: \"simpledebug\",\n        version: \"0.1\"\n    });\n})(jQuery);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flot Plugin\nDESCRIPTION: This snippet demonstrates the basic structure for initializing a Flot plugin. It defines an init function that is called when a plot is created. The plugin's options are also defined and the plugin is pushed onto the $.plot.plugins array, making it available for use in Flot plots.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/PLUGINS.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myCoolPluginInit(plot) {\n    plot.coolstring = \"Hello!\";\n};\n\n$.plot.plugins.push({ init: myCoolPluginInit, options: { ... } });\n\n// if $.plot is called, it will return a plot object with the\n// attribute \"coolstring\"\n```\n\n----------------------------------------\n\nTITLE: Default Tick Formatter in Flot\nDESCRIPTION: This JavaScript snippet presents the default tick formatter function used in Flot. It takes a value and an axis object as input and returns a string representation of the value with a specified number of decimal places determined by the axis.tickDecimals property. It allows to customize the way ticks are formatted.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction formatter(val, axis) {\n    return val.toFixed(axis.tickDecimals);\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring Table Module\nDESCRIPTION: This line imports the Table module into your JavaScript application, making it available for use with Editor.js.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.JavaScript.EditorJs/src/vendor/table/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst Table = require('@editorjs/table');\n```\n\n----------------------------------------\n\nTITLE: Writing a MSTest Test Method in C#\nDESCRIPTION: This code snippet demonstrates a basic MSTest test method in C#.  It resides within a test class decorated with `[TestClass]` and performs a simple assertion using `Assert.That.AreEqual`. The example increments through a series of attendance codes and validates the result.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.Tests.Integration/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace Rock.Tests.Integration.Model\n{\n    [TestClass]\n    public class AttendanceCodeTests\n    {\n        [TestMethod]\n        public void Increment100SequentialNumericCodes()\n        {\n            AttendanceCode code = null;\n            for ( int i = 0; i < 100; i++ )\n            {\n                code = AttendanceCodeService.GetNew( 0, 0, 3, false );\n            }\n\n            Assert.That.AreEqual( \"100\", code.Code );\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Margin Object in JavaScript\nDESCRIPTION: This example shows how to define a margin object to customize the spacing between the canvas edge and the grid in Flot. It includes properties for top, left, bottom, and right margins, each specified in pixels.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nmargin: {\n    top: top margin in pixels\n    left: left margin in pixels\n    bottom: bottom margin in pixels\n    right: right margin in pixels\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Javascript Wrapping Example\nDESCRIPTION: Demonstrates the proper way to format a conditional statement with complex logic, emphasizing that it should not be wrapped arbitrarily if it's within the 80-character limit. The correct example demonstrates a more readable alternative to the previous one.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n    if (a == 1 && b == 2 && c == 3) {}  // This block is correct!\n```\n\n----------------------------------------\n\nTITLE: Including Summernote CSS/JS - HTML\nDESCRIPTION: This code snippet demonstrates how to include the necessary CSS and JavaScript files for Summernote in an HTML page. It includes jQuery, Bootstrap, and Summernote's CSS and JS files.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- include libraries(jQuery, bootstrap) -->\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js\"></script> \n<link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/css/bootstrap.min.css\" />\n<script type=\"text/javascript\" src=\"//cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min.js\"></script>\n\n<!-- include summernote css/js-->\n<link href=\"summernote.css\" rel=\"stylesheet\">\n<script src=\"summernote.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Deprecated Tick Color - Flot\nDESCRIPTION: This snippet illustrates the deprecation of 'tickColor' in the grid options and its replacement with a corresponding option on the axes. This change enhances the configuration of tick colors for individual axes instead of applying a global setting.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/NEWS.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ grid: { tickColor: \"#000\" }}\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Spacing Example\nDESCRIPTION: Demonstrates correct spacing within a JavaScript `for` loop and `if` statement according to Flot's style guidelines.  It omits spaces around array indices and parameter lists. The code showcases the preferred style.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n    for (var i = 0; i < data.length; i++) {  // This block is correct!\n        if (data[i] > 1) {\n            data[i] = 2;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Destroying Summernote - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to destroy the Summernote instance on an element, effectively removing the editor and reverting the element to its original state.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$('#summernote').summernote('destroy');\n```\n\n----------------------------------------\n\nTITLE: Start Local Server - Bash\nDESCRIPTION: This bash command starts a local server to assist in the development of Summernote. It will open a browser on http://localhost:3000 and automatically reload the page if source code is changed.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngrunt server\n```\n\n----------------------------------------\n\nTITLE: Code Signing MSI Installer with SignTool\nDESCRIPTION: This command signs the Rock.CloudPrint.Installer.msi installer package using signtool.exe. It utilizes the SparkDevelopmentNetwork.cer certificate and includes a description.  This step is crucial for verifying the integrity and authenticity of the installer.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/RockCloudPrint/Publishing.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nsigntool.exe sign /f SparkDevelopmentNetwork.cer /d \"Rock Cloud Print\" Rock.CloudPrint.Installer\\bin\\x64\\Release\\Rock.CloudPrint.Installer.msi\n```\n\n----------------------------------------\n\nTITLE: Set Minimum Tick Size - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to set a minimum tick size for the time axis in Flot using the `minTickSize` option.  It sets the minimum tick size to one month.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nminTickSize: [1, \"month\"]\n```\n\n----------------------------------------\n\nTITLE: Flot Series Lines and Points Customization (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to configure lines and points in a Flot chart series. It sets the line to be visible with filling and a semi-transparent white color, and also displays visible points without filling.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nvar options = {\n    series: {\n        lines: { show: true, fill: true, fillColor: \"rgba(255, 255, 255, 0.8)\" },\n        points: { show: true, fill: false }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Ruby Code Examples for Time Conversion in Flot 0.8.2\nDESCRIPTION: This code snippet represents Ruby examples that were added to the Flot documentation in version 0.8.2 for time conversion.  These examples likely demonstrate how to format or manipulate time-related data for use within Flot charts.  The code is not provided directly within this log, but the documentation improvement is noted.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/NEWS.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Karma Configuration Example\nDESCRIPTION: This code snippet provides an example of how to configure Karma for testing Summernote. It shows how to specify the browsers and reporters to use.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nkarma: {\n  all: {\n    browsers: ['PhantomJS'],\n    reporters: ['progress']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Font Object for Flot Axis Labels\nDESCRIPTION: This JavaScript snippet shows how to define a custom font object for styling axis tick labels in Flot. It includes properties for size, lineHeight, style, weight, family, variant, and color. The size and lineHeight must be specified in pixels.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    size: 11,\n    lineHeight: 13,\n    style: \"italic\",\n    weight: \"bold\",\n    family: \"sans-serif\",\n    variant: \"small-caps\",\n    color: \"#545454\"\n}\n```\n\n----------------------------------------\n\nTITLE: Post-build Event Command Line (Example 2)\nDESCRIPTION: This is another example of the post-build event command line for the CheckScannerUtility project.  It calls the Visual Studio developer command prompt and then uses editbin.exe to disable NXCOMPAT, which is necessary to avoid compatibility issues with the MagTek driver. This example is from a newer Visual Studio installation.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/Wpf/CheckScannerUtility/ReadMe.txt#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\ncall \"$(DevEnvDir)..\\Tools\\VsDevCmd.bat\"\n\"C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\VC\\Tools\\MSVC\\14.40.33807\\bin\\Hostx86\\x86\\editbin.exe\" /NXCOMPAT:NO \"$(TargetPath)\"\n```\n\n----------------------------------------\n\nTITLE: Correct JavaScript Statement Wrapping\nDESCRIPTION: Presents the correct way to format a complex `if` statement in JavaScript according to Flot's guidelines. The statement is kept on a single line since wrapping would reduce readability.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n    if (a == 1 && b == 2 && c == 3) {}  // This block is correct!\n```\n\n----------------------------------------\n\nTITLE: Get HTML Source Code - JavaScript\nDESCRIPTION: This JavaScript code retrieves the HTML source code from the Summernote editor. It uses the `code` method of the Summernote API.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar html = $('#summernote').summernote('code');\n```\n\n----------------------------------------\n\nTITLE: Convert DateTime to Timestamp in Python\nDESCRIPTION: This Python code snippet demonstrates how to convert a datetime object to a Unix timestamp (in milliseconds). It uses `calendar.timegm` for UTC conversion and multiplies by 1000.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ncalendar.timegm(datetime_object.timetuple()) * 1000\n```\n\n----------------------------------------\n\nTITLE: Convert Time to Timestamp in Ruby\nDESCRIPTION: This Ruby code snippet shows how to get a Unix timestamp (in milliseconds) from a Time, DateTime, or ActiveSupport::TimeWithZone object. The `#to_i` method is used and the result multiplied by 1000.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nTime.now.to_i * 1000     # => 1383582043000\n# ActiveSupport examples:\nDateTime.now.to_i * 1000 # => 1383582043000\nActiveSupport::TimeZone.new('Asia/Shanghai').now.to_i * 1000\n# => 1383582043000\n```\n\n----------------------------------------\n\nTITLE: Post-build Event Command Line (Example 1)\nDESCRIPTION: This is an example of the post-build event command line for the CheckScannerUtility project. It calls the Visual Studio developer command prompt and then uses editbin.exe to disable NXCOMPAT, which is necessary to avoid compatibility issues with the MagTek driver. This example is from an older Visual Studio installation.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/Wpf/CheckScannerUtility/ReadMe.txt#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\ncall \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\Tools\\VsDevCmd.bat\"\n\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\VC\\Tools\\MSVC\\14.25.28610\\bin\\Hostx86\\x86\\editbin.exe\" /NXCOMPAT:NO \"$(TargetPath)\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Interactivity for a Data Series in JavaScript\nDESCRIPTION: This example shows how to disable interactivity (hovering and clicking) for a specific data series in a Flot chart by setting 'clickable' and 'hoverable' options to false.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ data: [...], label: \"Foo\", clickable: false }\n```\n\n----------------------------------------\n\nTITLE: Convert Date to Timestamp in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to convert a date string to a Unix timestamp (in milliseconds) using the `strtotime` function and multiplying by 1000. Assumes the date string is in UTC.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nstrtotime(\"2002-02-20 UTC\") * 1000\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Image from Tar Archive\nDESCRIPTION: This command loads a Docker image from a tar archive file named 'rock-cloudprint-service.tar'. This is used to install a previously saved Docker image for beta testing.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Applications/RockCloudPrint/Publishing.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker load -i rock-cloudprint-service.tar\n```\n\n----------------------------------------\n\nTITLE: Migrating Dual Axes Configuration in Flot (JavaScript)\nDESCRIPTION: This code demonstrates how to migrate from the old dual axes configuration (x2axis, y2axis) to the new array-based configuration (xaxes, yaxes) in Flot. This change was introduced to support an unlimited number of axes. The old configuration used separate options for each axis, while the new configuration uses arrays to define multiple axes.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/NEWS.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xaxis: { ... }, x2axis: { ... },\n    yaxis: { ... }, y2axis: { ... }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    xaxes: [ { ... }, { ... } ],\n    yaxes: [ { ... }, { ... } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Flot Version Number (JavaScript)\nDESCRIPTION: This snippet shows how to access the version number of the Flot library using the `$.plot.version` property. This is useful for checking the installed version and ensuring compatibility with plugins or other code.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot.version\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Statement Wrapping\nDESCRIPTION: Shows an example of incorrect statement wrapping in JavaScript. The example wraps a complex `if` statement with multiple conditions unnecessarily, violating Flot's style guidelines, which favor readability over strict line length adherence in such cases.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n    if (a == 1 &&    // This block is wrong!\n        b == 2 &&\n        c == 3) {}\n```\n\n----------------------------------------\n\nTITLE: Initializing Table Tool in Editor.js\nDESCRIPTION: This code shows how to integrate the Table tool into the Editor.js configuration.  It adds a 'table' entry to the 'tools' object, specifying the Table class.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.JavaScript.EditorJs/src/vendor/table/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar editor = EditorJS({\n  ...\n  \n  tools: {\n    ...\n    table: {\n      class: Table,\n    }\n  }\n  \n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Option - Old Code\nDESCRIPTION: This code demonstrates an old way of defining an option using fields, which is no longer supported. The `Option` attribute is used to specify the short name (\"o\"), long name (\"my-option\"), and help text. This approach is outdated and should be replaced with the new code example.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/Applications/CheckVariableNaming/packages/CommandLineParser.1.9.71/readme.txt#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nclass Options {\n  [Option(\"o\", \"my-option\", HelpText=\"This is an option!\")]\n  public int MyOption = 10;\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing the Y-Axis\nDESCRIPTION: This JavaScript code snippet reverses the y-axis so that the values appear in inverse order. It uses a simple negative transformation for both the 'transform' and 'inverseTransform' options. This is useful when you want to display data with the highest values at the bottom of the chart.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nyaxis: {\n    transform: function (v) { return -v; },\n    inverseTransform: function (v) { return -v; }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Debug Plugin in Flot\nDESCRIPTION: This code snippet illustrates how to use the debug plugin within a Flot chart. The debug option is passed within the options object when the $.plot function is called, enabling the plugin with a specific debug level.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/PLUGINS.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    $.plot($(\"#placeholder\"), [...], { debug: 2 });\n```\n\n----------------------------------------\n\nTITLE: Publish to Meteor - Bash\nDESCRIPTION: This command executes the `meteor/publish.sh` script, presumably to publish the package to the Meteor Atmosphere package registry. The script needs to be executable and properly configured for publishing to Meteor.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/MAINTAIN.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmeteor/publish.sh\n```\n\n----------------------------------------\n\nTITLE: Getting Javascript Timestamp in Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to generate a Javascript timestamp using the `#to_i` method on a `Time`, `DateTime`, or `ActiveSupport::TimeWithZone` object (latter two from the `active_support` gem). The result, representing seconds since the Unix epoch, is then multiplied by 1000 to convert it to milliseconds.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nTime.now.to_i * 1000     # => 1383582043000\n# ActiveSupport examples:\nDateTime.now.to_i * 1000 # => 1383582043000\nActiveSupport::TimeZone.new('Asia/Shanghai').now.to_i * 1000\n# => 1383582043000\n```\n\n----------------------------------------\n\nTITLE: Conditional Excanvas Inclusion (IE < 9)\nDESCRIPTION: This snippet demonstrates how to conditionally include Excanvas, a canvas emulator, for Internet Explorer versions less than 9. This allows Flot charts to render in older versions of IE that do not natively support the HTML5 canvas element. It utilizes conditional comments, a feature specific to IE, to load the script.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/README.md#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!--[if lte IE 8]><script language=\"javascript\" type=\"text/javascript\" src=\"excanvas.min.js\"></script><![endif]-->\n```\n\n----------------------------------------\n\nTITLE: Modifying series options in Flot\nDESCRIPTION: This code demonstrates the change in how series-specific options are specified in Flot 0.6.  The 'lines', 'points', 'bars', and 'shadowSize' options have been moved to a sub-object called 'series'. This snippet highlights how to update existing code to reflect this change to ensure compatibility.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/NEWS.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  $.plot(placeholder, data, { series: { lines: { show: true }}})\n```\n\n----------------------------------------\n\nTITLE: Migrating Tick Color Configuration in Flot (JavaScript)\nDESCRIPTION: This snippet illustrates the migration from the old 'tickColor' option within the 'grid' configuration to the new configuration where 'tickColor' is set directly on the axes. This change provides more granular control over tick colors for individual axes.  The old configuration applied a global tick color, while the new configuration allows setting a different tick color for each axis.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/NEWS.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ grid: { tickColor: \"#000\" }}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ xaxis: { tickColor: \"#000\"}, yaxis: { tickColor: \"#000\"} }\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Styles in Flot\nDESCRIPTION: This code snippet shows how to directly control the font styles of the axis tick labels using an object. It includes properties for size, lineHeight, style, weight, family, variant, and color.  Size and lineHeight must be specified in pixels.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    size: 11,\n    lineHeight: 13,\n    style: \"italic\",\n    weight: \"bold\",\n    family: \"sans-serif\",\n    variant: \"small-caps\",\n    color: \"#545454\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Flot Plugin\nDESCRIPTION: This snippet demonstrates the basic structure for initializing a Flot plugin.  It defines an initialization function that adds a custom attribute to the plot object. The plugin is then registered by pushing an object containing the init function and options into the $.plot.plugins array.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/PLUGINS.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myCoolPluginInit(plot) {\n    plot.coolstring = \"Hello!\";\n};\n\n$.plot.plugins.push({ init: myCoolPluginInit, options: { ... } });\n\n// if $.plot is called, it will return a plot object with the\n// attribute \"coolstring\"\n```\n\n----------------------------------------\n\nTITLE: Constraining Modal Height to Window - jQuery\nDESCRIPTION: This JavaScript code snippet shows how to dynamically constrain the maximum height of the modal body to the window height, accounting for the header and footer. This ensures the modal content remains visible within the viewport, but this is overwritten when the window resizes.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/bootstrap-modal/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.fn.modal.defaults.maxHeight = function(){\n        // subtract the height of the modal header and footer\n        return $(window).height() - 165; \n    }\n```\n\n----------------------------------------\n\nTITLE: Inline Styling for Placeholder Div\nDESCRIPTION: This snippet shows how to set the width and height of the placeholder div using inline CSS styling.  This allows the graph to be scaled correctly.  The width and height are explicitly set to 600px and 300px, respectively. It is an alternative to using an external stylesheet.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"placeholder\" style=\"width:600px;height:300px\"></div>\n```\n\n----------------------------------------\n\nTITLE: Getting Javascript Timestamp in PHP\nDESCRIPTION: This snippet shows how to generate a Javascript timestamp from a date string in PHP. The `strtotime` function converts the date string to a Unix timestamp (seconds since the Unix epoch), which is then multiplied by 1000 to obtain the equivalent Javascript timestamp (milliseconds since the Javascript epoch).  Ensure the correct timezone is specified.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nstrtotime(\"2002-02-20 UTC\") * 1000\n```\n\n----------------------------------------\n\nTITLE: Defining Flot Markings Function\nDESCRIPTION: This JavaScript code defines a function to create vertical stripes on the plot. It iterates through the x-axis range and pushes a new marking for each stripe into an array, which is then returned.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nmarkings: function (axes) {\n    var markings = [];\n    for (var x = Math.floor(axes.xaxis.min); x < axes.xaxis.max; x += 2)\n        markings.push({ xaxis: { from: x, to: x + 1 } });\n    return markings;\n}\n```\n\n----------------------------------------\n\nTITLE: Placeholder Div Creation for Flot Chart\nDESCRIPTION: This snippet demonstrates how to create a placeholder div element in HTML for a Flot chart. The div's ID is set to \"placeholder\", and it can be styled with CSS to define the width and height of the chart.  The width and height must be set for Flot to correctly scale the graph.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/README.md#_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"placeholder\"></div>\n```\n\n----------------------------------------\n\nTITLE: Example Format Array for Datapoints (JavaScript)\nDESCRIPTION: This code shows the default format array for datapoints in Flot.  It specifies that each point consists of two numeric values, representing x and y coordinates respectively. Both values are required for the point to be valid.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n    [\n        { x: true, number: true, required: true },\n        { y: true, number: true, required: true }\n    ]\n```\n\n----------------------------------------\n\nTITLE: Getting Javascript Timestamp in .NET (C#)\nDESCRIPTION: This C# snippet shows how to convert a .NET DateTime object to a Javascript timestamp. It calculates the difference between the input time and the Javascript epoch (January 1, 1970) in ticks, then divides by 10000 to obtain the number of milliseconds.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\npublic static int GetJavascriptTimestamp(System.DateTime input)\n{\n    System.TimeSpan span = new System.TimeSpan(System.DateTime.Parse(\"1/1/1970\").Ticks);\n    System.DateTime time = input.Subtract(span);\n    return (long)(time.Ticks / 10000);\n}\n```\n\n----------------------------------------\n\nTITLE: Data Item Object Structure in JavaScript\nDESCRIPTION: This example outlines the structure of the 'item' object passed to the plotclick event handler in Flot, including datapoint, dataIndex, series, seriesIndex, pageX, and pageY properties.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nitem: {\n    datapoint: the point, e.g. [0, 2]\n    dataIndex: the index of the point in the data array\n    series: the series object\n    seriesIndex: the index of the series\n    pageX, pageY: the global screen coordinates of the point\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Plugin Code in an Anonymous Function\nDESCRIPTION: This snippet demonstrates how to wrap plugin code in an anonymous function to avoid name pollution and ensure compatibility with different JavaScript libraries. This is a standard practice when developing Flot plugins to prevent conflicts with other code on the page.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/PLUGINS.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(function ($) {\n    // plugin definition\n    // ...\n})(jQuery);\n```\n\n----------------------------------------\n\nTITLE: Build Summernote - Bash\nDESCRIPTION: These bash commands are used to build summernote. First, the dependencies are installed using `npm install`, then grunt is used to build the full version and the minified version.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# grunt-cli is need by grunt; you might have this installed already\nnpm install -g grunt-cli\nnpm install\n\n# build full version of summernote: dist/summernote.js\ngrunt build\n\n# generate minified copy: dist/summernote.min.js, dist/summernote.css\ngrunt dist\n```\n\n----------------------------------------\n\nTITLE: Accessing Data Series Color in Flot\nDESCRIPTION: This code snippet demonstrates how to access the color assigned to a data series by Flot. It retrieves the data series using `plot.getData()`, iterates through the series, and accesses the `color` property of each series.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nvar series = plot.getData();\nfor (var i = 0; i < series.length; ++i)\n    alert(series[i].color);\n```\n\n----------------------------------------\n\nTITLE: Defining Series-Specific Options\nDESCRIPTION: This snippet illustrates how to define options specific to each series in a Flot chart. These options are placed within the 'series' property of the options object and are automatically copied to each series.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/PLUGINS.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n    series: {\n        downsample: {\n            algorithm: null,\n            maxpoints: 1000\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get JavaScript Timestamp - JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to get a Javascript timestamp, which is the number of milliseconds since January 1, 1970 00:00:00 UTC, from a JavaScript Date object.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nalert((new Date()).getTime())\n```\n\n----------------------------------------\n\nTITLE: Getting Javascript Timestamp in Python\nDESCRIPTION: This Python snippet converts a datetime object into a Javascript timestamp. It uses the `calendar.timegm` function to get the Unix timestamp in seconds and then multiplies by 1000 to convert it to milliseconds.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/API.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncalendar.timegm(datetime_object.timetuple()) * 1000\n```\n\n----------------------------------------\n\nTITLE: Page Container Structure for Modal - HTML\nDESCRIPTION: This HTML snippet demonstrates the recommended page structure for preventing background scrolling when a modal is open. The content is wrapped in a 'page-container' div. This ensures that the page doesn't shift due to the scrollbar appearing/disappearing when the modal opens.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/bootstrap-modal/README.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<body>\n\t\t<div class=\"page-container\">\n\t\t\t<div class=\"navbar navbar-fixed-top\">...</div>\n\t\t\t<div class=\"container\">...</div>\n\t\t</div>\n\t</body>\n```\n\n----------------------------------------\n\nTITLE: Customize Weekday Names - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to customize weekday names in Flot using the `dayNames` option. It provides an array of day names for a specific locale.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/API.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\ndayNames: [\"dim\", \"lun\", \"mar\", \"mer\", \"jeu\", \"ven\", \"sam\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Table Tool via NPM or Yarn\nDESCRIPTION: These commands install the @editorjs/table package as a dev dependency using npm or yarn. This allows you to use the Table tool in your Editor.js instance.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.JavaScript.EditorJs/src/vendor/table/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i --save-dev @editorjs/table\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @editorjs/table --dev\n```\n\n----------------------------------------\n\nTITLE: Loading State with ModalManager - jQuery\nDESCRIPTION: This code snippet demonstrates how to use the ModalManager to display a loading state. It targets the 'body' element and calls the 'modalmanager' function with the 'loading' argument. This is a common way to indicate that content is being loaded or processed.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/bootstrap-modal/README.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n$('body').modalmanager('loading');\n```\n\n----------------------------------------\n\nTITLE: Using the Debug Plugin\nDESCRIPTION: This code demonstrates how to use the simple debug plugin by passing a debug option to the $.plot function.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/PLUGINS.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot($(\"#placeholder\"), [...], { debug: 2 });\n```\n\n----------------------------------------\n\nTITLE: Referencing SignalR Hubs in ASP.NET MVC 3 (HTML)\nDESCRIPTION: This snippet demonstrates how to reference the SignalR Hub JavaScript proxy in an ASP.NET MVC 3 application. It utilizes `Url.Content` to ensure the correct path to the script is resolved, especially when the application is deployed in a virtual directory.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Installers/RockInstaller/packages/Microsoft.AspNet.SignalR.2.0.3/readme.txt#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"@Url.Content(\"~/signalr/hubs\")\"></script>\n```\n\n----------------------------------------\n\nTITLE: Modifying series options in Flot\nDESCRIPTION: This code demonstrates the change in how series-specific options are specified in Flot 0.6.  The 'lines', 'points', 'bars', and 'shadowSize' options have been moved to a sub-object called 'series'. This snippet highlights how to update existing code to reflect this change to ensure compatibility.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/NEWS.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot(placeholder, data, { lines: { show: true }})\n```\n\n----------------------------------------\n\nTITLE: Flot series options change\nDESCRIPTION: This snippet illustrates the API change in Flot v0.6 where series-specific options like \"lines\", \"points\", \"bars\", and \"shadowSize\" are moved to a sub-object called \"series\". This change simplifies plugin writing and improves code clarity. Backward compatibility is maintained to prevent older code from breaking.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/NEWS.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot(placeholder, data, { lines: { show: true }})\n```\n\nLANGUAGE: javascript\nCODE:\n```\n$.plot(placeholder, data, { series: { lines: { show: true }}})\n```\n\n----------------------------------------\n\nTITLE: Publish to npm - Bash\nDESCRIPTION: This command publishes the current package to the npm registry. It requires the user to be logged in to npm with appropriate publishing permissions. It assumes that the package.json file is correctly configured.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/MAINTAIN.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: Installing FontAwesome.WPF Package\nDESCRIPTION: This command installs the FontAwesome.WPF package using the Package Manager Console in Visual Studio. This is required to resolve errors related to Font Awesome WPF during the compilation of the Rock.CodeGeneration project. The package provides the necessary WPF controls for displaying Font Awesome icons.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Rock.CodeGeneration/README.md#_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Package FontAwesome.WPF\n```\n\n----------------------------------------\n\nTITLE: Build and Publish Dist Files - Bash\nDESCRIPTION: This script checks out the master branch, pulls the latest changes, builds distribution files using Grunt, commits the changes, and pushes them to the remote repository. It assumes Grunt is installed and configured for the project.  The script prepares the distribution files for a new release.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/MAINTAIN.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# change branch\ngit checkout master\n# fetch all changes\ngit pull\n# build dist files and binary(.zip) for release post\ngrunt dist\n# Push new dist files to remote repository.\ngit commit -a -m \"Update dist files\"\ngit push origin\n```\n\n----------------------------------------\n\nTITLE: Parsing Arguments with Default Parser\nDESCRIPTION: This code demonstrates how to parse command-line arguments using the default parser. It checks if the arguments are successfully parsed, and if so, it consumes the values.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/Applications/CheckVariableNaming/packages/CommandLineParser.1.9.71/readme.txt#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nif (CommandLineParser.Default.ParseArguments(args, options)) {\n  // consume values here\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Codebase with cloc\nDESCRIPTION: This command uses `cloc` to analyze the Rock project's codebase. It includes specific file extensions like .cs, .aspx, .ascx, .ashx, .js, .ts, .css, .less, and .obs, and forces the language of .obs files to be \"Vuejs component\". It analyzes various directories within the Rock and RockWeb folders and excludes certain directories and files based on defined criteria.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/Dev Tools/count-lines-of-code.txt#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncloc --include-ext=cs,aspx,ascx,ashx,js,ts,css,less,obs --force-lang=\"Vuejs component\",obs Rock Rock.* RockWeb/App_Code RockWeb/*.* RockWeb/Blocks RockWeb/Scripts/Rock RockWeb/Styles/_*.* RockWeb/Styles/Blocks RockWeb/Styles/rock-components RockWeb/Themes --exclude-content auto-generated --not-match-f=Designer.cs --exclude-dir=CodeGenerated,node_modules,dist\n```\n\n----------------------------------------\n\nTITLE: Correct Javascript Spacing Example\nDESCRIPTION: Demonstrates the correct spacing around parameter lists, loop definitions, and array/object indices according to Flot's coding style. This example is presented as the preferred way to format JavaScript code within the Flot project.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    for (var i = 0; i < data.length; i++) {  // This block is correct!\n        if (data[i] > 1) {\n            data[i] = 2;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: JavaScript Comment Block Example\nDESCRIPTION: Illustrates the proper formatting for multi-line comments in JavaScript according to Flot's style guide. It includes an empty line above and below the comment block and uses `//` for the comment.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n    var a = 5;\n\n    // We're going to loop here\n    // TODO: Make this loop faster, better, stronger!\n\n    for (var x = 0; x < 10; x++) {}\n```\n\n----------------------------------------\n\nTITLE: Javascript Comment Block Example\nDESCRIPTION: Illustrates the proper use of comments in JavaScript code within the Flot project. Specifically, it demonstrates the required empty lines above and below comment blocks. The comment block is implemented using `//` syntax.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n    var a = 5;\n\n    // We're going to loop here\n    // TODO: Make this loop faster, better, stronger!\n\n    for (var x = 0; x < 10; x++) {}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Javascript Spacing Example\nDESCRIPTION: Demonstrates incorrect spacing around parameter lists, loop definitions, and array/object indices according to Flot's coding style.  This example is explicitly provided to illustrate what *not* to do when formatting JavaScript code for the Flot project.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    for ( var i = 0; i < data.length; i++ ) {  // This block is wrong!\n        if ( data[ i ] > 1 ) {\n            data[ i ] = 2;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Javascript Wrapping Example\nDESCRIPTION: Illustrates incorrect wrapping of complex logic in JavaScript, violating the 80-character line limit unnecessarily.  This example highlights a scenario where readability is diminished by prematurely wrapping the code.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/flot/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    if (a == 1 &&    // This block is wrong!\n        b == 2 &&\n        c == 3) {}\n```\n\n----------------------------------------\n\nTITLE: Test Summernote - Bash\nDESCRIPTION: These bash commands are used to test summernote with karma and phantomJS.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngrunt test\n```\n\n----------------------------------------\n\nTITLE: Incorrect JavaScript Spacing Example\nDESCRIPTION: Illustrates incorrect spacing within a JavaScript `for` loop and `if` statement.  The example uses spaces around array indices and parameter lists, violating Flot's style guidelines.  The code is provided as an example of what *not* to do.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n    for ( var i = 0; i < data.length; i++ ) {  // This block is wrong!\n        if ( data[ i ] > 1 ) {\n            data[ i ] = 2;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Ruby Time Conversion Example (Flot 0.8.2)\nDESCRIPTION: This code snippet showcases Ruby examples related to time conversion, which were added in Flot version 0.8.2. This code demonstrates how to convert and format time-related data for use with the Flot charting library.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/RockWeb/Scripts/flot/NEWS.md#_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Pull Request Template (Markdown)\nDESCRIPTION: This is a template for creating pull requests for the Summernote project. It outlines the key sections to include in a PR description, such as a summary of changes, where to start the review, testing instructions, background context, related tickets, and screenshots (if applicable). It also includes a checklist to ensure all necessary steps have been taken before submitting the PR.\nSOURCE: https://github.com/sparkdevnetwork/rock/blob/develop/libs/Summernote/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#### What does this PR do?\n\n- awesome stuff\n- really cool feature\n- refactor X\n\n#### Where should the reviewer start?\n\n- start on the src/summernote.js\n\n#### How should this be manually tested?\n\n- click here and here\n\n#### Any background context you want to provide?\n\n- the gem needed to be updated... yada yada\n\n#### What are the relevant tickets?\n\n\n#### Screenshots (if for frontend)\n\n\n### Checklist\n- [ ] added relevant tests\n- [ ] didn't break anything\n- [ ] ...\n```"
  }
]