[
  {
    "owner": "kybernetwork",
    "repo": "kyberswap-documentation.git",
    "content": "TITLE: Executing Fill Order Transaction (TypeScript)\nDESCRIPTION: This snippet shows how to execute the fill order transaction on-chain using an ethers.js signer instance. It sends a transaction to the limit order contract with the encoded data as the calldata. The `maxFeePerGas` and `maxPriorityFeePerGas` parameters are also specified to control gas fees.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst fillOrderTx = await signer.sendTransaction({\n    data: data.data.encodedData,\n    to: limitOrderContract,\n    from: signerAddress,\n    maxFeePerGas: 100000000000,\n    maxPriorityFeePerGas: 100000000000\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Limit Order Parameters in TypeScript\nDESCRIPTION: Creates a request body object with the necessary parameters for a limit order, including chain ID, asset addresses, amounts, and expiration time.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody: CreateOrderUnsignedBody = {\n    chainId: ChainId.MATIC.toString(),\n    makerAsset: makerAsset.address, // USDC\n    takerAsset: takerAsset.address, // KNC\n    maker: signerAddress,\n    allowedSenders: [signerAddress], // Included so that only our account can fill this order\n    makingAmount: \"10000\", // 0.01 USDC\n    takingAmount: \"20000000000000000\", // 0.02 KNC\n    expiredAt: Math.floor(Date.now() / 1000) + 60 * 60 // 60mins\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating KyberSwap Widget with Custom Theme in JavaScript\nDESCRIPTION: This snippet demonstrates how to import and use the KyberSwap Widget component with a custom theme. It includes placeholders for the theme, token list, provider, and default token out.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/customizing-the-kyberswap-widget.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Widget } from \"@kyberswap/widgets\";\n\nconst theme: Theme = {\n  // Check out the theme examples below\n}\n\n<Widget\n  client=\"yourCompanyNameHere\"\n  theme={theme}\n  tokenList={[]}\n  provider={ethersProvider}\n  defaultTokenOut={defaultTokenOut[chainId]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Embedding KyberSwap Widget in React\nDESCRIPTION: Example of how to import and use the KyberSwap Widget component in a React application. It demonstrates basic configuration options including setting a client ID, theme, token list, and enabling specific features.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/integrating-the-kyberswap-widget.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Widget } from \"@kyberswap/widgets\";\n\n<Widget\n    client=\"yourCompanyNameHere\"\n    theme={theme}\n    tokenList={[]}\n    enableRoute = true\n    enableDexes=\"kyberswap-elastic,uniswapv3,uniswap\"\n    provider={ethersProvider}\n    defaultTokenOut={defaultTokenOut[chainId]}\n    title={<div>Custom Title</div>}\n/>\n```\n\n----------------------------------------\n\nTITLE: Approving Token Spending (TypeScript)\nDESCRIPTION: This snippet shows how to approve the limit order contract to spend the taker's ERC20 tokens if the current allowance is insufficient. It checks the current allowance and, if needed, calls the `approve` function on the ERC20 token contract. The code sets high `maxFeePerGas` and `maxPriorityFeePerGas` values, which may need adjusting depending on network conditions.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (Number(limitOrderContractAllowance) < spendingAmount) {\n    console.log(`Insufficient allowance, getting approval for ${await tokenContract.symbol()}...`);\n    try {\n        // Call the ERC20 approve method\n        const approvalTx = await tokenContract.approve(\n            spenderAddress, \n            BigInt(spendingAmount), \n            {maxFeePerGas: 100000000000, maxPriorityFeePerGas: 100000000000}\n            );\n\n        // Wait for the approve tx to be executed\n        const approvalTxReceipt = await approvalTx.wait();\n        console.log(`Approve tx executed with hash: ${approvalTxReceipt?.hash}`);\n\n    } catch(error) {\n        console.log(error);\n    }\n};    \n```\n\n----------------------------------------\n\nTITLE: Signing EIP712 Create Order Message in KyberSwap\nDESCRIPTION: Uses ethers.js to sign the EIP712 typed data returned by KyberSwap's Limit Order service for creating a new order.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await signer.signTypedData(\n    unsignedOrderReturnData.domain,\n    { Order: unsignedOrderReturnData.types.Order },\n    unsignedOrderReturnData.message\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Request Body for Swap Route Encoding\nDESCRIPTION: Prepares the request body for the POST API call that encodes the swap route. It includes the route summary, sender and recipient addresses, and slippage tolerance to ensure the swap executes within acceptable boundaries.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/developer-guides/execute-a-swap-with-the-aggregator-api.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody = {\n    routeSummary: routeSummary,\n    sender: signerAddress,\n    recipient: signerAddress,\n    slippageTolerance: 10 //0.1%\n}\n```\n\n----------------------------------------\n\nTITLE: Approving Token Spending for KyberSwap Limit Orders\nDESCRIPTION: Checks if the current allowance is sufficient, and if not, calls the ERC20 token's approve method to increase the allowance for the KyberSwap Limit Order contract.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (Number(limitOrderContractAllowance) < spendingAmount) {\n    console.log(`Insufficient allowance, getting approval for ${await tokenContract.symbol()}...`);\n    try {\n        // Call the ERC20 approve method\n        const approvalTx = await tokenContract.approve(\n            spenderAddress, \n            BigInt(spendingAmount), \n            {maxFeePerGas: 100000000000, maxPriorityFeePerGas: 100000000000}\n            );\n\n        // Wait for the approve tx to be executed\n        const approvalTxReceipt = await approvalTx.wait();\n        console.log(`Approve tx executed with hash: ${approvalTxReceipt?.hash}`);\n\n    } catch(error) {\n        console.log(error);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Posting Create Order to KyberSwap API\nDESCRIPTION: Sends a POST request to the KyberSwap Limit Order API to create a new order with the signed message and order details.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst {data} = await axios.post(\n    LimitOrderDomain+targetPath,\n    requestBody\n);\n```\n\n----------------------------------------\n\nTITLE: Submitting Gasless Cancel Order Request in TypeScript\nDESCRIPTION: This code demonstrates how to submit the gasless cancel order request to the KyberSwap API using axios.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/gasless-cancel.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst {data} = await axios.post(\n    LimitOrderDomain+targetPath,\n    requestBody,\n    {headers: {Origin: 'https://kyberswap.com'}}\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing KyberSwap Liquidity Widget in React\nDESCRIPTION: Example of how to import and use the LiquidityWidget component in a React application. Includes configuration for theme, provider, chainId, poolType, and other props.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-liquidity-widget/integrating-the-kyberswap-liquidity-widget.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LiquidityWidget } from \"@kyberswap/liquidity-widgets\";\n\n<LiquidityWidget\n  theme={{\n    text: \"#FFFFFF\",\n    subText: \"#B6AECF\",\n    icons: \"#a9a9a9\",\n    layer1: \"#27262C\",\n    dialog: \"#27262C\",\n    layer2: \"#363046\",\n    stroke: \"#363046\",\n    chartRange: \"#5DC5D2\",\n    chartArea: \"#457F89\",\n    accent: \"#5DC5D2\",\n    warning: \"#F4B452\",\n    error: \"#FF5353\",\n    success: \"#189470\",\n    fontFamily: \"Kanit, Sans-serif\",\n    borderRadius: \"20px\",\n    buttonRadius: \"16px\",\n    boxShadow: \"0px 4px 4px rgba(0, 0, 0, 0.04)\",\n  }}\n  provider={ethersProvider}\n  chainId={56}\n  poolType={PoolType.DEX_PANCAKESWAPV3}\n  poolAddress=\"0x36696169c63e42cd08ce11f5deebbcebae652050\"\n  onDismiss={() => {\n    console.log(\"Dismiss\");\n  }}\n  source=\"zap-widget-demo\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Executing Swap Transaction with Ethers.js\nDESCRIPTION: Submits the encoded swap transaction to the blockchain using ethers.js. The transaction includes the encoded swap data, sender and recipient addresses, and gas parameters to ensure proper execution on the network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/developer-guides/execute-a-swap-with-the-aggregator-api.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst executeSwapTx = await signer.sendTransaction({\n    data: encodedSwapData,\n    from: signerAddress,\n    to: routerContract,\n    maxFeePerGas: 1000000000000,\n    maxPriorityFeePerGas: 1000000000000        \n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Fill Order Request Body (TypeScript)\nDESCRIPTION: This snippet demonstrates how to format the request body for the `/read-ks/api/v1/encode/fill-order-to` API endpoint. It creates a `FillOrderBody` object, including the order ID, taking amount, threshold amount, target address (signer), and the operator signature. This formatted request body is essential for encoding the fill order data.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody: FillOrderBody = {\n    orderId: Number(targetOrderId),\n    takingAmount: takingAmount.toString(),\n    thresholdAmount: '0',\n    target: signerAddress,\n    operatorSignature: operatorSignature[0].operatorSignature\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Swap Route Parameters with TypeScript\nDESCRIPTION: Sets up the required parameters for querying the KyberSwap Aggregator API to get optimal swap routes. This includes specifying the input and output tokens along with the amount to be swapped.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/developer-guides/execute-a-swap-with-the-aggregator-api.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPathConfig = {\n    params: {\n        tokenIn: tokenIn.address,\n        tokenOut: tokenOut.address,\n        amountIn: Number(1*10**tokenIn.decimals).toString()\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Posting Encode Data Request (TypeScript)\nDESCRIPTION: This snippet shows how to send a POST request to the `/read-ks/api/v1/encode/fill-order-to` endpoint using Axios. It posts the `requestBody` containing the fill order parameters and retrieves the encoded data from the response. The `LimitOrderDomain` and `targetPath` variables need to be defined to specify the API endpoint.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst {data} = await axios.post(\n    LimitOrderDomain+targetPath,\n    requestBody\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding KyberSwap iFrame in JavaScript\nDESCRIPTION: This code snippet demonstrates how to incorporate the KyberSwap iFrame into a web application by specifying necessary attributes such as client ID, input and output currencies, and additional parameters for fee handling.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/iframe-alternative.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\"<iframe\\n      style={{ margin: 'auto' }}\\n      width=\\\"500px\\\"\\n      height=\\\"900px\\\"\\n      src=\\\"{customDomain}?clientId={yourClientId}&tab=swap&inputCurrency=ETH&outputCurrency=0xe4DDDfe67E7164b0FE14E218d80dC4C08eDC01cB&isInBps=1&chargeFeeBy=currency_in&feeReceiver=0xDcFCD5dD752492b95ac8C1964C83F992e7e39FA9&feeAmount=500&chainId=42161\\\"\\n    />\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Token Lists for KyberSwap Widget in JavaScript\nDESCRIPTION: This code example demonstrates how to pass a custom token list to the KyberSwap Widget, including token details such as name, address, symbol, decimals, chainId, and logoURI.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/customizing-the-kyberswap-widget.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Widget } from \"@kyberswap/widgets\";\n\n// You can also pass a list of tokens as JSON, as long as the format is correct\nconst MY_TOKEN_LIST = [\n    {\n    \"name\": \"KNC\",\n    \"address\": \"0x1C954E8fe737F99f68Fa1CCda3e51ebDB291948C\",\n    \"symbol\": \"KNC\",\n    \"decimals\": 18,\n    \"chainId\": 1,\n    \"logoURI\": \"https://s2.coinmarketcap.com/static/img/coins/64x64/9444.png\"\n  },\n    {\n    \"name\": \"Tether USD\",\n    \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    \"symbol\": \"USDT\",\n    \"decimals\": 6,\n    \"chainId\": 1,\n    \"logoURI\": \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xdAC17F958D2ee523a2206206994597C13D831ec7/logo.png\"\n  },\n  {\n    \"name\": \"USD Coin\",\n    \"address\": \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n    \"symbol\": \"USDC\",\n    \"decimals\": 6,\n    \"chainId\": 1,\n    \"logoURI\": \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48/logo.png\"\n  },\n]\n\n<Widget\n    theme={theme}\n    tokenList={MY_TOKEN_LIST}\n    provider={ethersProvider}\n    defaultTokenOut={defaultTokenOut[chainId]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Signing EIP712 Cancel Order Message in TypeScript\nDESCRIPTION: This code demonstrates how to sign the EIP712 cancel order message using ethers.js signTypedData function.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/gasless-cancel.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst signature = await signer.signTypedData(\n    unsignedOrderReturnData.domain,\n    { CancelOrder: unsignedOrderReturnData.types.CancelOrder },\n    unsignedOrderReturnData.message\n);\n```\n\n----------------------------------------\n\nTITLE: Building Zap-In Route with Fetch in JavaScript\nDESCRIPTION: This snippet shows how to make a POST request to build a zap-in route using the Fetch API in JavaScript. It includes the necessary headers and JSON body for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://zap-api.kyberswap.com/polygon/api/v1/in/route/build', {\n  method: 'POST',\n  headers: {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'x-client-id': 'zap-docs'\n  },\n  body: JSON.stringify({\n    'sender': '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    'recipient': '0x5cb738DAe833Ec21fe65ae1719fAd8ab8cE7f23D',\n    'route': 'KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg==',\n    'deadline': 1800000000,\n    'source': 'zap-docs'\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Active Maker Orders in TypeScript\nDESCRIPTION: This snippet demonstrates how to query active maker orders using the KyberSwap API. It sets up the parameters for the API call, including the chain ID, maker address, and order status.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/hard-cancel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPathConfig = {\n    params: {\n        chainId: ChainId.MATIC,\n        maker: signerAddress,\n        status: \"active\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders for Specific Maker and Assets (TypeScript)\nDESCRIPTION: This snippet demonstrates how to filter retrieved orders based on the maker's address and the maker/taker asset addresses.  It filters the orders array, ensuring that the maker, makerAsset, and takerAsset match the specified values. The targetOrderId is then extracted from the first matching order, which will be used in subsequent steps to get the operator signature.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await getOrders();\nconst targetOrders = orders.filter(order => \n    order.maker.toLowerCase() == signerAddress.toLowerCase() &&\n    order.makerAsset.toLowerCase() == makerAsset.address.toLowerCase() &&\n    order.takerAsset.toLowerCase() == takerAsset.address.toLowerCase()\n);\nconst targetOrderId = Number(targetOrders[0].id);\n```\n\n----------------------------------------\n\nTITLE: Building Zap-In Route with Requests in Python\nDESCRIPTION: This snippet demonstrates how to make a POST request to build a zap-in route using the Requests library in Python. It includes the necessary headers and JSON body for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'content-type': 'application/json',\n    'x-client-id': 'zap-docs',\n}\n\njson_data = {\n    'sender': '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    'recipient': '0x5cb738DAe833Ec21fe65ae1719fAd8ab8cE7f23D',\n    'route': 'KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg==',\n    'deadline': 1800000000,\n    'source': 'zap-docs',\n}\n\nresponse = requests.post('https://zap-api.kyberswap.com/polygon/api/v1/in/route/build', headers=headers, json=json_data)\n```\n\n----------------------------------------\n\nTITLE: Filtering Target Orders for Cancellation in TypeScript\nDESCRIPTION: This code snippet filters the retrieved maker orders to find the target order for cancellation based on the maker and taker asset addresses. It then selects the order ID of the last matching order.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/hard-cancel.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await getMakerOrders();\nconst targetOrders = orders.filter(order => \n    order.makerAsset.toLowerCase() == makerAsset.address.toLowerCase() &&\n    order.takerAsset.toLowerCase() == takerAsset.address.toLowerCase()\n);\nconst targetOrderId = Number(targetOrders[targetOrders.length-1].id);\n```\n\n----------------------------------------\n\nTITLE: Formatting Create Order Request for KyberSwap API\nDESCRIPTION: Formats the request body for the create order API call by combining the unsigned order request body with the signature and salt.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody: CreateOrderSignedBody = {\n    ...unsignedOrderReqBody,\n    salt: unsignedOrderReturnData.message.salt,\n    signature: signature\n};\n```\n\n----------------------------------------\n\nTITLE: Building Zap-In Route with Net::HTTP in Ruby\nDESCRIPTION: This snippet shows how to make a POST request to build a zap-in route using the Net::HTTP library in Ruby. It includes the necessary headers and JSON body for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'net/http'\nrequire 'json'\n\nuri = URI('https://zap-api.kyberswap.com/polygon/api/v1/in/route/build')\nreq = Net::HTTP::Post.new(uri)\nreq.content_type = 'application/json'\nreq['accept'] = 'application/json'\nreq['x-client-id'] = 'zap-docs'\n\nreq.body = {\n  'sender' => '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n  'recipient' => '0x5cb738DAe833Ec21fe65ae1719fAd8ab8cE7f23D',\n  'route' => 'KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg==',\n  'deadline' => 1800000000,\n  'source' => 'zap-docs'\n}.to_json\n\nreq_options = {\n  use_ssl: uri.scheme == 'https'\n}\nres = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|\n  http.request(req)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring API Parameters for Operator Signature (TypeScript)\nDESCRIPTION: This snippet configures the API parameters required to request an operator signature for a specific order ID. It creates a `targetPathConfig` object with the chain ID and the target order ID as parameters.  This configuration will be used to send a request to `/read-partner/api/v1/orders/operator-signature` to get the signature needed for filling the order.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPathConfig = {\n    params: {\n        chainId: ChainId.MATIC.toString(),\n        orderIds: targetOrderId\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Taking Amount (TypeScript)\nDESCRIPTION: This snippet demonstrates how to calculate the taking amount, which represents the amount of taker asset to be exchanged for maker asset. The code retrieves the target order and divides its `takingAmount` by 2, effectively filling half of the order. The snippet highlights how a taker might partially fill an order.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await getOrders();\nconst targetOrder = orders.filter(order => order.id == targetOrderId.toString());\nconst takingAmount = Number(targetOrder[0].takingAmount)/2;\n```\n\n----------------------------------------\n\nTITLE: Configuring API Parameters for Order Retrieval (TypeScript)\nDESCRIPTION: This snippet shows how to configure the API parameters for retrieving limit orders using the `/read-partner/api/v1/orders` endpoint. It specifies the chain ID, maker asset address (USDC), and taker asset address (KNC) as parameters within the `targetPathConfig` object. This configuration is used to filter and retrieve relevant orders from the KyberSwap service.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/fill-limit-order.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPathConfig = {\n    params: {\n        chainId: ChainId.MATIC,\n        makerAsset: makerAsset.address, // USDC\n        takerAsset: takerAsset.address  // KNC  \n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Cancel Order Request in TypeScript\nDESCRIPTION: This snippet shows how to format the request body for cancelling batch orders. It creates an object with an array of order IDs to be cancelled.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/hard-cancel.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody: CancelBatchOrdersBody = {\n    orderIds: [targetOrderId]\n};\n```\n\n----------------------------------------\n\nTITLE: Querying Zap-In Route with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to make a GET request to the zap-in route endpoint using cURL in Bash. It includes the necessary headers and query parameters for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://zap-api.kyberswap.com/polygon/api/v1/in/route?dex=DEX_UNISWAPV3&pool.id=0xb46388f104ff88aac68626a316aaf3a924f32055&position.tickLower=-24800&position.tickUpper=32400&tokensIn=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE&amountsIn=1000000000000000000&slippage=100\" \\\n -H \"accept: application/json\"\\\n -H \"x-client-id: zap-docs\"\n```\n\n----------------------------------------\n\nTITLE: Configuring KyberSwap Widget Theme\nDESCRIPTION: A TypeScript configuration object for customizing the visual appearance of the KyberSwap widget, including color schemes, border radii, and typography\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme: Theme = {\n  primary: '#1C1C1C',\n  secondary: '#0F0F0F',\n  dialog: '#313131',\n  borderRadius: '20px',\n  buttonRadius: '24px',\n  stroke: '#505050',\n  interactive: '#292929',\n  accent: '##28E0B9',\n  success: '189470',\n  warning: 'FF9901',\n  error: 'FF537B',\n  text: '#FFFFFF',\n  subtext: 'A9A9A9',\n  fontFamily: 'Work Sans',\n}\n```\n\n----------------------------------------\n\nTITLE: Installing KyberSwap Widget via npm\nDESCRIPTION: Command to install the KyberSwap widgets library using npm package manager.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/integrating-the-kyberswap-widget.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @kyberswap/widgets\n```\n\n----------------------------------------\n\nTITLE: Building Zap-In Route with cURL in Bash\nDESCRIPTION: This snippet demonstrates how to make a POST request to build a zap-in route using cURL in Bash. It includes the necessary headers and JSON body for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://zap-api.kyberswap.com/polygon/api/v1/in/route/build\" \\\n -H \"accept: application/json\"\\\n -H \"content-type: application/json\"\\\n -H \"x-client-id: zap-docs\" \\\n -d '{\"sender\":\"0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270\",\"recipient\":\"0x5cb738DAe833Ec21fe65ae1719fAd8ab8cE7f23D\",\"route\":\"KLUv/WALBWUVAKavgSFAb9qflX03+n9Wj9hEtiy3sD717uBIcklIUtb9UBVFASZwAG8AewCseGGDZz+f91M98txGAZqZqQsXPJhqdXGMHUIosW9O3X9D9ykvz587bZntFA+ybObckq051tD33d6immunvvu1fJ584ZaJB7tzeUH7jBfGkjJLmzw1GHNfFpS6uHNC7SJxoQMzFkbw7EKHR7EubGBGFDwMD76LRM+krFq9qkyNUC9kEi1HIhRHC7BQ8iwgDMREw9E88FRyoQUe3d1X1WmZdd13nzPVJkbpFzKe9ImUFau7UkkdoU7rrkob/cLF8yr1lzvRdntKumohg+d/c1MyvypzJ3ZnVvmqUP/CCZ4MFRR4b3mPgEmai5fykypW/M+uUGc6UqjV+vaERXQuLpywCFTMSWW+a2rki1JyJv301E6EuKEkvAnDloWPaYxxsAqB13BIFJo3IWEHB3k7n1FCrqvSKw5wk4ZUrp6p7OnTanbzoEAo2KPg8SYgEsWHb+4OUMcV4GmAOiwMlcrDQ6WC3tilpdQOpUrWinl/I8SaO19ljaGwCjy58OK5R0HTdAWK0Cu13SgoCBMNCNMGIhgMvlCiiXg8g4PuNRIRjmcBsBUAktd4MIa1iAeTaFy8CLOY4HlIKM1baBwUDqZ/XfvWqSrba5ma77q5X5V6i/o178ZAIBHMcHBY+BoKRIInQCBAAkOIkfEBRAi1htoyA+Fh2bFWvRh8hvz97PowAKx1qdsQ5xjp2pgs22UIOyQAShdlhjfwZzCdB+z1ohnGvFnSTTKxnORd4epZFuIeA+w2wAw7LgAorNLwQsqNf+xgg82V4vgsD37S9QzcQQb7FtadgPK3lKx7U4HBskxWQGuCP0HydKwMJ+YSsBBVIoM2YptDA0F2jZS8pJQuID3loJeJAg==\",\"deadline\":1800000000,\"source\":\"zap-docs\"}' \n```\n\n----------------------------------------\n\nTITLE: Querying Zap-In Route with Net::HTTP in Ruby\nDESCRIPTION: This snippet shows how to make a GET request to the zap-in route endpoint using the Net::HTTP library in Ruby. It includes the necessary headers for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'net/http'\n\nuri = URI('https://zap-api.kyberswap.com/polygon/api/v1/in/route?dex=DEX_UNISWAPV3&pool.id=0xb46388f104ff88aac68626a316aaf3a924f32055&position.tickLower=-24800&position.tickUpper=32400&tokensIn=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE&amountsIn=1000000000000000000&slippage=100')\nreq = Net::HTTP::Get.new(uri)\nreq['accept'] = 'application/json'\nreq['x-client-id'] = 'zap-docs'\n\nreq_options = {\n  use_ssl: uri.scheme == 'https'\n}\nres = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|\n  http.request(req)\nend\n```\n\n----------------------------------------\n\nTITLE: Build Route API for Zap Out\nDESCRIPTION: OpenAPI specification for building zap-out routes. This POST endpoint is located at /api/v1/out/route/build.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n{% openapi src=\"../../../.gitbook/assets/openapi (1).yaml\" path=\"/api/v1/out/route/build\" method=\"post\" %}\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Message Definitions for KyberSwap Zap Operations\nDESCRIPTION: Defines the protocol buffer messages and enums for KyberSwap's zap functionality, including pool operations, position management, and transaction routing. Contains request/response structures for getting routes, building transactions, and managing liquidity positions.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-grpc-api.md#2025-04-21_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage AggregatorOptions {\n  bool disable = 1;\n  string included_sources = 2;\n  string excluded_sources = 3;\n}\n\nmessage Pool {\n  string id = 1 [(buf.validate.field).string.pattern = \"^0x[0-9A-Za-z]{40}$\"];\n}\n\nmessage Position {\n  option (buf.validate.message).cel = {\n    id: \"position.ticks_check\"\n    message: \"tick_lower must be less than tick_upper\"\n    expression: \"!(has(this.tick_lower) || has(this.tick_upper)) || this.tick_lower < this.tick_upper\"\n  };\n  optional string id = 1;\n  optional sint32 tick_lower = 2;\n  optional sint32 tick_upper = 3;\n}\n\nmessage GetInRouteResponse {\n  int32 code = 1;\n  string message = 2;\n  Data data = 3;\n  string request_id = 4;\n\n  message Data {\n    PoolDetails pool_details = 1;\n    PositionDetails position_details = 2;\n    ZapDetails zap_details = 3;\n    bytes route = 4;\n    string router_address = 5;\n    string gas = 6;\n    string gas_usd = 7;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Maker Orders API Endpoint in YAML\nDESCRIPTION: OpenAPI specification for the GET endpoint to query maker orders. This endpoint allows retrieval of order information based on various parameters.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/maker-apis.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.1.yaml\" path=\"/read-ks/api/v1/orders\" method=\"get\" %}\n```\n\n----------------------------------------\n\nTITLE: Create Order API Endpoint in YAML\nDESCRIPTION: OpenAPI specification for the POST endpoint to create limit orders. This endpoint is used to submit signed order data.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/maker-apis.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml\" path=\"/write/api/v1/orders\" method=\"post\" %}\n```\n\n----------------------------------------\n\nTITLE: Gasless Cancel Order API Endpoint in YAML\nDESCRIPTION: OpenAPI specification for the POST endpoint to cancel orders without gas fees. This endpoint is used to submit signed cancellation data.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/maker-apis.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml\" path=\"/write/api/v1/orders/cancel\" method=\"post\" %}\n```\n\n----------------------------------------\n\nTITLE: Hard Cancel Order API Endpoint in YAML\nDESCRIPTION: OpenAPI specification for the POST endpoint to encode hard cancellation of batch orders. This endpoint prepares the data for on-chain cancellation.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/maker-apis.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml\" path=\"/read-ks/api/v1/encode/cancel-batch-orders\" method=\"post\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Fees for KyberSwap Widget in JavaScript\nDESCRIPTION: This snippet shows how to set up transaction facilitation fees for the KyberSwap Widget by passing fee-related parameters.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/customizing-the-kyberswap-widget.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Widget } from \"@kyberswap/widgets\";\n\n<Widget  feeSetting={\n    feeAmount: 100,\n    feeReceiver: \"0xDcFCD5dD752492b95ac8C1964C83F992e7e39FA9\",\n    chargeFeeBy: \"currency_in\",\n    isInBps: true,\n} />\n```\n\n----------------------------------------\n\nTITLE: Query Orders API Endpoint\nDESCRIPTION: GET endpoint for querying limit orders with various query parameters.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/taker-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npath: /read-partner/api/v1/orders\nmethod: get\n```\n\n----------------------------------------\n\nTITLE: Fetching Trading Pairs for KyberSwap Limit Orders\nDESCRIPTION: This Swagger documentation describes the API endpoint for retrieving trading pairs available for limit orders. It uses the OpenAPI specification from the LimitOrderAPIs_v1.2.yaml file.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/general-apis.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml\" path=\"/read-partner/api/v1/orders/pairs\" method=\"get\" %}\n[LimitOrderAPIs_v1.2.yaml](../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Preparing Cancel Order Request in TypeScript\nDESCRIPTION: This snippet shows how to prepare the request body for cancelling an order using the KyberSwap API.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/gasless-cancel.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody: CancelOrderUnsignedBody = {\n    chainId: ChainId.MATIC.toString(),\n    maker: signerAddress,\n    orderIds: [targetOrderId]\n};\n```\n\n----------------------------------------\n\nTITLE: Limit Order Protocol Addresses by Blockchain Network\nDESCRIPTION: Static contract addresses for DSLOProtocol and LimitOrderProtocol across multiple blockchain networks, providing consistent deployment addresses for cross-chain limit order functionality\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/contracts/limit-order-contract-addresses.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **DSLOProtocol:** `0xcab2FA2eeab7065B45CBcF6E3936dDE2506b4f6C`\n* **LimitOrderProtocol:** `0x227B0c196eA8db17A665EA6824D972A64202E936`\n```\n\n----------------------------------------\n\nTITLE: Get Route API for Zap Out\nDESCRIPTION: OpenAPI specification for retrieving zap-out routes. This GET endpoint is located at /api/v1/out/route.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n{% openapi src=\"../../../.gitbook/assets/openapi (1).yaml\" path=\"/api/v1/out/route\" method=\"get\" %}\n```\n\n----------------------------------------\n\nTITLE: Defining DecodeMigrateRouteRequest and Response Messages in Protobuf\nDESCRIPTION: Defines request and response structures for decoding a zap-migrate route. The request includes the route bytes, while the response provides a JSON representation of the decoded route.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-grpc-api.md#2025-04-21_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage DecodeMigrateRouteRequest {\n  bytes route = 1;\n}\n\nmessage DecodeMigrateRouteResponse {\n  int32 code = 1;\n  string message = 2;\n  Data data = 3;\n  string request_id = 4;\n\n  message Data {\n    string json = 1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing KyberSwap Widget Title in JavaScript\nDESCRIPTION: This code snippet shows how to set a custom title for the KyberSwap Widget using either a ReactNode or a string value.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/customizing-the-kyberswap-widget.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Widget } from \"@kyberswap/widgets\";\n\n<Widget\n  title={\n    <div>Custom Title</div>\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Build Route API for Migration\nDESCRIPTION: OpenAPI specification for the route building endpoint used in migration scenarios. This POST endpoint is located at /api/v1/migrate/route/build.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n{% openapi src=\"../../../.gitbook/assets/zap_service.yaml\" path=\"/api/v1/migrate/route/build\" method=\"post\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Trade Parameters in KyberSwap\nDESCRIPTION: Advanced settings for traders to customize trading experience, including max slippage, transaction time limit, and liquidity source selection\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-interface/user-guides/instantly-swap-at-superior-rates.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* **Max Slippage:** The maximum amount of slippage before the trade is reverted.\n* **Transaction Time Limit:** Time from submission that the transaction is valid.\n* **Degen Mode:** Advanced trading mode with reduced safeguards.\n* **Liquidity Sources:** Select DEXes for trade routing\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Width for KyberSwap Widget in JavaScript\nDESCRIPTION: This example demonstrates how to customize the width of the KyberSwap Widget by passing a valid CSS number or width value.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/customizing-the-kyberswap-widget.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Widget } from \"@kyberswap/widgets\";\n\n<Widget\n  width={360}\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining BuildMigrateRouteResponse Message in Protobuf\nDESCRIPTION: Defines the response structure for building a zap-migrate transaction. Includes fields for error handling, response data (router address, call data, and value), and request tracking.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-grpc-api.md#2025-04-21_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BuildMigrateRouteResponse {\n  int32 code = 1;\n  string message = 2;\n  Data data = 3;\n  string request_id = 4;\n\n  message Data {\n    string router_address = 1;\n    string call_data = 2;\n    string value = 3;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Ethereum (ChainID: 1)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on the Ethereum mainnet. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on Ethereum.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-ethereum\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for BSC (ChainID: 56)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Binance Smart Chain. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on BSC.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-bsc\n```\n\n----------------------------------------\n\nTITLE: Querying Zap-In Route with Requests in Python\nDESCRIPTION: This snippet demonstrates how to make a GET request to the zap-in route endpoint using the Requests library in Python. It includes the necessary headers and query parameters for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\nheaders = {\n    'accept': 'application/json',\n    'x-client-id': 'zap-docs',\n}\n\nparams = {\n    'dex': 'DEX_UNISWAPV3',\n    'pool.id': '0xb46388f104ff88aac68626a316aaf3a924f32055',\n    'position.tickLower': '-24800',\n    'position.tickUpper': '32400',\n    'tokensIn': '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE',\n    'amountsIn': '1000000000000000000',\n    'slippage': '100',\n}\n\nresponse = requests.get('https://zap-api.kyberswap.com/polygon/api/v1/in/route', params=params, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Defining GetMigrateRouteResponse Message in Protobuf\nDESCRIPTION: Defines the response structure for retrieving the best route for zap-migrate operations. Includes fields for error handling, response data, and request tracking.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-grpc-api.md#2025-04-21_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage GetMigrateRouteResponse {\n  int32 code = 1;\n  string message = 2;\n  Data data = 3;\n  string request_id = 4;\n\n  message Data {\n    PoolDetails pool_details = 1;\n    PositionDetails position_details = 2;\n    ZapDetails zap_details = 3;\n    bytes route = 4;\n    string router_address = 5;\n    string gas = 6;\n    string gas_usd = 7;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Polygon PoS (ChainID: 137) - Primary\nDESCRIPTION: Primary subgraph endpoint URL for querying KyberSwap Aggregator data on Polygon PoS. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on Polygon.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-polygon\n```\n\n----------------------------------------\n\nTITLE: ZapValidator Contract Address for Multiple Chains\nDESCRIPTION: This code snippet provides the contract address for the ZapValidator across multiple blockchain networks including Arbitrum, Avalanche, Base, BSC, Blast, Ethereum, Linea, Optimism, Polygon, Scroll, and Polygon-Zkevm.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-deployed-contract-addresses.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n0xF989d5f7926258a45b6F32CEAD5627fd026e1857\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Zap-In Route with Fetch in JavaScript\nDESCRIPTION: This snippet shows how to make a GET request to the zap-in route endpoint using the Fetch API in JavaScript. It includes the necessary headers for the API call.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-http-api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfetch('https://zap-api.kyberswap.com/polygon/api/v1/in/route?dex=DEX_UNISWAPV3&pool.id=0xb46388f104ff88aac68626a316aaf3a924f32055&position.tickLower=-24800&position.tickUpper=32400&tokensIn=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE&amountsIn=1000000000000000000&slippage=100', {\n  headers: {\n    'accept': 'application/json',\n    'x-client-id': 'zap-docs'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: ZapValidator Contract Address for ZkSync\nDESCRIPTION: This code snippet provides the contract address for the ZapValidator specifically for the ZkSync blockchain network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-deployed-contract-addresses.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```\n0xD4112dd5C3359f912A0A14c729163ab4bdD2029C\n```\n```\n\n----------------------------------------\n\nTITLE: ZapExecutor Contract Address for ZkSync\nDESCRIPTION: This code snippet provides the contract address for the ZapExecutor specifically for the ZkSync blockchain network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-deployed-contract-addresses.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```\n0x15785def0fbed1d94fd407d96a1319906ed406fd\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Cancel Transaction On-Chain in TypeScript\nDESCRIPTION: This snippet shows how to execute the batch cancel transaction on-chain using ethers.js. It sends a transaction with the encoded data to the limit order contract, including gas fee parameters.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/hard-cancel.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst cancelOrderTx = await signer.sendTransaction({\n    data: data.data.encodedData,\n    to: limitOrderContract,\n    from: signerAddress,\n    maxFeePerGas: 100000000000,\n    maxPriorityFeePerGas: 100000000000\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Polygon PoS (ChainID: 137) - Alternative\nDESCRIPTION: Alternative subgraph endpoint URL for querying KyberSwap Aggregator data on Polygon PoS. This is a Kyber-hosted endpoint that can be used as a backup or alternative to the primary Graph-hosted endpoint.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://polygon-graph.kyberengineering.io/subgraphs/name/kybernetwork/kyberswap-aggregator-polygon\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Base (ChainID: 8453)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Base. This Kyber-hosted endpoint allows GraphQL queries to access indexed data from KyberSwap smart contracts on the Base network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://base-graph.kyberengineering.io/subgraphs/name/kybernetwork/kyberswap-aggregator-base\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for zkSync Era (ChainID: 324)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on zkSync Era. This Kyber-hosted endpoint allows GraphQL queries to access indexed data from KyberSwap smart contracts on the zkSync Era network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://zksync-graph.kyberengineering.io/subgraphs/name/kybernetwork/kyberswap-aggregator-zksync\n```\n\n----------------------------------------\n\nTITLE: Formatting Cancel Order Request Body in TypeScript\nDESCRIPTION: This snippet shows how to format the final request body for cancelling an order, including the signature.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/gasless-cancel.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestBody: CancelOrderSignedBody = {\n    ...unsignedOrderReqBody,\n    signature: signature\n};\n```\n\n----------------------------------------\n\nTITLE: Calculating Positive Slippage Example in Markdown\nDESCRIPTION: Example calculation showing positive slippage of 0.5% when the actual output (2010) exceeds the estimated output (2000).\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/foundational-topics/decentralized-finance/slippage.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n$$\nSlippage=\\frac{2010-2000}{2000}*100\\%=0.5\\%\n$$\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Polygon zkEVM (ChainID: 1101)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Polygon zkEVM. This Kyber-hosted endpoint allows GraphQL queries to access indexed data from KyberSwap smart contracts on the Polygon zkEVM network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://polygon-zkevm-graph.kyberengineering.io/subgraphs/name/kybernetwork/kyberswap-aggregator-polygon-zkevm\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Linea (ChainID: 59144)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Linea. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on the Linea network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://graph-query.linea.build/subgraphs/name/kybernetwork/kyberswap-aggregator-linea\n```\n\n----------------------------------------\n\nTITLE: Querying Active Maker Orders in TypeScript\nDESCRIPTION: This snippet demonstrates how to query active orders for a specific Maker on the Polygon chain using the KyberSwap API.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/gasless-cancel.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPathConfig = {\n    params: {\n        chainId: ChainId.MATIC,\n        maker: signerAddress,\n        status: \"active\"\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Scroll (ChainID: 534352)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Scroll. This Kyber-hosted endpoint with GraphQL suffix allows queries to access indexed data from KyberSwap smart contracts on the Scroll network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://scroll-graph.kyberengineering.io/subgraphs/name/kybernetwork/kyberswap-aggregator-scroll/graphql\n```\n\n----------------------------------------\n\nTITLE: Calculating New Making Amount in KyberSwap\nDESCRIPTION: Calculates the new making amount by adding the current active making amount to the new order's making amount.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst currentMakingAmount = await getMakerActiveAmount();\nconst newMakingAmount = Number(currentMakingAmount) + Number(unsignedOrderReqBody.makingAmount);\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenAPI Specification YAML\nDESCRIPTION: Provides a link to download the OpenAPI specification YAML file for the KyberSwap Aggregator EVM APIs.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/aggregator-api-specification/evm-swaps.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% file src=\"../../../.gitbook/assets/KyberSwapAggregator_EVMAPIs_v2.10.0.yaml\" %}\n```\n\n----------------------------------------\n\nTITLE: Querying Active Making Amount in KyberSwap\nDESCRIPTION: Sets up the parameters for querying the active making amount for a specific token and maker address using KyberSwap's API.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/create-limit-order.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst targetPathConfig = {\n    params: {\n        chainId: ChainId.MATIC,\n        makerAsset: makerAsset.address,\n        maker: signerAddress\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Fill Single Order API Endpoint\nDESCRIPTION: POST endpoint for filling a single limit order.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/taker-apis.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npath: /read-ks/api/v1/encode/fill-order-to\nmethod: post\n```\n\n----------------------------------------\n\nTITLE: HTML Chain Support Matrix Table Rows\nDESCRIPTION: HTML table rows showing feature support flags for different blockchain networks in KyberSwap. Each row represents a chain with boolean values indicating feature availability.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-supported-chains-dexes.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<tr><td><code>zksync</code> (<code>324</code>)</td><td>false</td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>false</td><td>false</td><td>false</td></tr>\n```\n\nLANGUAGE: html\nCODE:\n```\n<tr><td><code>sonic</code>(<code>146</code>)</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td><td>true</td></tr>\n```\n\nLANGUAGE: html\nCODE:\n```\n<tr><td><code>berachain</code>(<code>80094</code>)</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>true</td><td>true</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td><td>false</td></tr>\n```\n\n----------------------------------------\n\nTITLE: Calculating Voting Rewards APR Formula in KyberDAO\nDESCRIPTION: Mathematical formula used to calculate the Annual Percentage Rate (APR) for KyberDAO voting rewards. This formula considers the total KNC rewards, average KNC voted in KIPs (Kyber Improvement Proposals), and the time period in days.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/governance/kyberdao/user-guides/voting.md#2025-04-21_snippet_0\n\nLANGUAGE: tex\nCODE:\n```\nVoteAPR = \\frac{\\text{Total KNC Rewards}}{\\text{Average KNC Voted In KIPs}}*\\frac{365}{\\text{TimePeriod}_\\text{days}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Zap Fee Protocol Fee Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that outlines the protocol fee rates for different token pair categories in the Zap API. It includes stable, correlated, common, and exotic pairs.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zap-fee-model.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Pair Category   | Protocol Fee |\n| --------------- | ------------ |\n| Stable pair     | 0.01%        |\n| Correlated pair | 0.025%       |\n| Common pair     | 0.1%         |\n| Exotic pair     | 0.25%        |\n```\n\n----------------------------------------\n\nTITLE: Fill Batch Orders API Endpoint\nDESCRIPTION: POST endpoint for filling multiple limit orders in a batch.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/taker-apis.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npath: /read-ks/api/v1/encode/fill-batch-orders-to\nmethod: post\n```\n\n----------------------------------------\n\nTITLE: Rendering DEX Protocol Table in HTML\nDESCRIPTION: An HTML table structure containing rows of DEX protocol information, including protocol identifiers, names, and website links. Each row represents a different DEX protocol or version.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/dex-ids.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<tr><td>gyroscope-2clp</td><td>Balancer 2CLP</td><td><a href=\"https://gyro.finance\">https://gyro.finance</a></td></tr>\n<tr><td>gyroscope-3clp</td><td>Balancer 3CLP</td><td><a href=\"https://gyro.finance\">https://gyro.finance</a></td></tr>\n<tr><td>gyroscope-eclp</td><td>Balancer ECLP</td><td><a href=\"https://gyro.finance\">https://gyro.finance</a></td></tr>\n<tr><td>horiza</td><td>Horiza</td><td><a href=\"https://app.horiza.io/\">https://app.horiza.io/</a></td></tr>\n<tr><td>horizon-dex</td><td>HorizonDEX</td><td><a href=\"https://app.horizondex.io/swap\">https://app.horizondex.io/swap</a></td></tr>\n<!-- ... additional rows ... -->\n<tr><td>ramses</td><td>RAMSES V1</td><td><a href=\"https://app.ramses.exchange/\">https://app.ramses.exchange/</a></td></tr>\n```\n\n----------------------------------------\n\nTITLE: KNC Staking Tiers Table in Markdown\nDESCRIPTION: Markdown table showing the different KNC staking tiers and their corresponding gas refund percentages. The table illustrates the three-tier system starting from 500 KNC up to 10,000 KNC with refunds ranging from 10% to 20%.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/governance/knc-token/gas-refund-program.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Staked KNC | Gas Refund |\n| ---------- | ---------- |\n| 500 KNC    | 10%        |\n| 5,000 KNC  | 15%        |\n| 10,000 KNC | 20%        |\n```\n\n----------------------------------------\n\nTITLE: Get Operator Signature API Endpoint\nDESCRIPTION: GET endpoint for retrieving the operator signature for limit orders.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/taker-apis.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npath: /read-partner/api/v1/orders/operator-signature\nmethod: get\n```\n\n----------------------------------------\n\nTITLE: Calculating Negative Slippage Example in Markdown\nDESCRIPTION: Example calculation showing negative slippage of -0.5% when the actual output (1990) is less than the estimated output (2000).\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/foundational-topics/decentralized-finance/slippage.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n$$\nSlippage=\\frac{1990-2000}{2000}*100\\%=-0.5\\%\n$$\n```\n\n----------------------------------------\n\nTITLE: Calculating Zero Slippage Example in Markdown\nDESCRIPTION: Example calculation showing zero slippage when the actual output matches the estimated output exactly.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/foundational-topics/decentralized-finance/slippage.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n$$\nSlippage=\\frac{2000-2000}{2000}*100\\%=0\\%\n$$\n```\n\n----------------------------------------\n\nTITLE: Defining BuildMigrateRouteRequest Message in Protobuf\nDESCRIPTION: Defines the request structure for building a zap-migrate transaction. Includes fields for sender and recipient addresses, route data, deadline, source, and NFT burning option. Incorporates field validations for addresses and deadline.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-grpc-api.md#2025-04-21_snippet_4\n\nLANGUAGE: protobuf\nCODE:\n```\nmessage BuildMigrateRouteRequest {\n  string sender = 1 [(buf.validate.field).string.pattern = \"^0x[0-9A-Za-z]{40}$\"];\n  string recipient = 2 [(buf.validate.field) = {\n    string: {pattern: \"^0x[0-9A-Za-z]{40}$\"}\n    ignore: IGNORE_IF_UNPOPULATED\n  }];\n  bytes route = 3;\n  fixed32 deadline = 4 [(buf.validate.field).cel = {\n    id: \"deadline.gte_now\"\n    message: \"deadline must be in the future\"\n    expression: \"this == 0u || this > int(now)\"\n  }];\n  string source = 5;\n  bool burn_nft = 6;\n}\n```\n\n----------------------------------------\n\nTITLE: Chain Identifiers in Markdown Format\nDESCRIPTION: Code snippets defining blockchain identifiers with their chain IDs. These identifiers are used to reference specific blockchain networks within the dex support matrix.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-supported-chains-dexes.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`arbitrum` (`42161`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`avalanche` (`43114`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`base` (`8453`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`blast` (`81457`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`bsc` (`56`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`ethereum` (`1`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`linea` (`59144`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`optimism` (`10`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`polygon` (`137`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`polygon-zkevm` (`1101`)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n`scroll` (`534352`)\n```\n\n----------------------------------------\n\nTITLE: Token Contract Governance Roles\nDESCRIPTION: Definition of governance roles including Owner, Minter, and Proxy admin control with their respective contract addresses and permissions.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/governance/knc-token/knc-contract-addresses.md#2025-04-21_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nOwner: 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650\nMinter: 0x6758a66cd25fef7767a44895041678fc4ae9afd0\nProxy Admin: 0x6758a66cd25fef7767a44895041678fc4ae9afd0\nGovernance Implementation: 0x7Ec8FcC26bE7e9E85B57E73083E5Fe0550d8A7fE\n```\n\n----------------------------------------\n\nTITLE: Defining Fee and Slippage Parameters in Protobuf\nDESCRIPTION: Defines fields for fee recipient address, fee percentage, and slippage tolerance. Includes validation rules for each field to ensure correct formatting and value ranges.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/zaas-grpc-api.md#2025-04-21_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nstring fee_address = 7 [(buf.validate.field) = {\n  string: {pattern: \"^0x[0-9A-Za-z]{40}$\"}\n  ignore: IGNORE_IF_UNPOPULATED\n}];\nuint32 fee_pcm = 8 [(buf.validate.field).uint32 = {\n  gte: 0\n  lte: 100000\n}];\nuint32 slippage = 9 [(buf.validate.field).uint32 = {\n  gte: 0\n  lte: 10000\n}];\n```\n\n----------------------------------------\n\nTITLE: Displaying KyberDAO Operator Multisig Address in Markdown\nDESCRIPTION: This code snippet uses Markdown formatting to display the KyberDAO Operator Multisig address with a clickable link to Etherscan. It's wrapped in a hint style for emphasis.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/governance/kyberdao/kyberdao-operator-multisig.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\n#### KyberDAO Operator Multisig address:&#x20;\n\n#### [`0xe6a7338cba0a1070adfb22c07115299605454713`](https://etherscan.io/address/0xe6a7338cba0a1070adfb22c07115299605454713)\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Constructing the EIP-2612 Permit Message Hash in Solidity\nDESCRIPTION: The structure of the message hash that needs to be signed by the token owner to create a valid permit. This includes the domain separator from the token contract and the typed data encoding per EIP-712.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/aggregator-api-specification/permit.md#2025-04-21_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\nkeccak256(abi.encodePacked(\n   hex\"1901\",\n   DOMAIN_SEPARATOR,\n   keccak256(abi.encode(\n            keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"),\n            owner,\n            spender,\n            value,\n            nonce,\n            deadline))\n))\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure For KyberSwap Notifications\nDESCRIPTION: Structured markdown documentation describing the notification center functionality, including headers and image references for visual guidance.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-interface/notifications/notification-center.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Customize Your Notification Preferences\n---\n\n# Notification Center\n\n## Introduction\n\nThe notification center functions as the control panel for all KyberSwap notifications. In addition to having a view of all notifications within a single page, the notification centre allows users to subscribe to multiple [notification types](./#types-of-notifications), configure notification thresholds, and redirect notifications to their [preferred channels](./#notification-channels).\n```\n\n----------------------------------------\n\nTITLE: EIP-2612 Permit Function Signature in Solidity\nDESCRIPTION: The permit function signature for EIP-2612 tokens that enables gasless approvals. This function allows token owners to delegate spending rights via a signature rather than an approval transaction.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/aggregator-api-specification/permit.md#2025-04-21_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external\n```\n\n----------------------------------------\n\nTITLE: Embedding JSON File in Markdown\nDESCRIPTION: This snippet demonstrates how to embed a JSON file in a markdown document using GitBook's file embedding syntax. The file contains pair category information for PancakeSwap V3 pools.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zap-fee-model.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% file src=\"../../.gitbook/assets/zap_fee_pancakeswapv3.json\" %}\nPair category for PancakeSwap V3 pools\n{% endfile %}\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Optimism (ChainID: 10)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Optimism. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on the Optimism network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-optimism\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Arbitrum (ChainID: 42161)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Arbitrum. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on the Arbitrum network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-arbitrum\n```\n\n----------------------------------------\n\nTITLE: Markdown Structure for KyberSwap Documentation\nDESCRIPTION: Markdown formatted documentation showing the structure of KyberSwap's quickstart guide with user and developer guides presented in card-style tables.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/quickstart/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Jump Right Into The KyberSwap Ecosystem\n---\n\n# Quickstart\n\n## User Guides\n\nBeginner friendly guides to get you started\n\n<table data-view=\"cards\"><thead><tr><th></th><th data-hidden></th><th data-hidden></th><th data-hidden data-card-cover data-type=\"files\"></th><th data-hidden data-card-target data-type=\"content-ref\"></th></tr></thead><tbody><tr><td><strong>Get Crypto With Fiat (Cards, Mobile, Banks)</strong></td><td></td><td></td><td><a href=\"../../.gitbook/assets/userg-get crypto w fiat.png\">userg-get crypto w fiat.png</a></td><td><a href=\"../../kyberswap-solutions/kyberswap-interface/user-guides/get-crypto-with-fiat.md\">get-crypto-with-fiat.md</a></td></tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Avalanche (ChainID: 43114)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Avalanche. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on the Avalanche C-Chain.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-avalanche\n```\n\n----------------------------------------\n\nTITLE: Accessing KyberSwap Aggregator Subgraph for Fantom (ChainID: 250)\nDESCRIPTION: Subgraph endpoint URL for querying KyberSwap Aggregator data on Fantom. Use this URL with GraphQL queries to access indexed data from KyberSwap smart contracts on the Fantom Opera network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/subgraphs.md#2025-04-21_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.thegraph.com/subgraphs/name/kybernetwork/kyberswap-aggregator-fantom\n```\n\n----------------------------------------\n\nTITLE: ZapRouter Contract Address for Multiple Chains\nDESCRIPTION: This code snippet provides the contract address for the ZapRouter across multiple blockchain networks including Arbitrum, Avalanche, Base, BSC, Blast, Ethereum, Linea, Optimism, Polygon, Scroll, and Polygon-Zkevm.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-deployed-contract-addresses.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n0x0e97C887b61cCd952a53578B04763E7134429e05\n```\n```\n\n----------------------------------------\n\nTITLE: ZapExecutor Contract Address for Multiple Chains\nDESCRIPTION: This code snippet provides the contract address for the ZapExecutor across multiple blockchain networks including Arbitrum, Avalanche, Base, BSC, Blast, Ethereum, Linea, Optimism, Polygon, Scroll, and Polygon-Zkevm.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-deployed-contract-addresses.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n0x63b0a0d33FE906C668b1DE4875Bfaf562A9D8c5b\n```\n```\n\n----------------------------------------\n\nTITLE: ZapRouter Contract Address for ZkSync\nDESCRIPTION: This code snippet provides the contract address for the ZapRouter specifically for the ZkSync blockchain network.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/zaps-deployed-contract-addresses.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\n0xa56fed87768c7fde0597f5090356af30aed9d22e\n```\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenAPI Specification for KyberSwap Limit Order APIs\nDESCRIPTION: Link to download the YAML file containing the OpenAPI specification for KyberSwap Limit Order APIs version 1.2.1.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/maker-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% file src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.1.yaml\" %}\n```\n\n----------------------------------------\n\nTITLE: Downloading OpenAPI Specification for KyberSwap Limit Order APIs\nDESCRIPTION: This snippet provides a link to download the OpenAPI specification file for KyberSwap Limit Order APIs version 1.2.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/general-apis.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{% file src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml\" %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Addresses for KyberSwap Configurations\nDESCRIPTION: This Swagger documentation outlines the API endpoint for fetching contract addresses used in KyberSwap configurations. It references the OpenAPI specification from the LimitOrderAPIs_v1.2.yaml file.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/limit-order-api-specification/general-apis.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n{% swagger src=\"../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml\" path=\"/read-ks/api/v1/configs/contract-address\" method=\"get\" %}\n[LimitOrderAPIs_v1.2.yaml](../../../.gitbook/assets/LimitOrderAPIs_v1.2.yaml)\n{% endswagger %}\n```\n\n----------------------------------------\n\nTITLE: Installing KyberSwap Liquidity Widget with npm\nDESCRIPTION: Command to install the KyberSwap Liquidity Widget package using npm.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-liquidity-widget/integrating-the-kyberswap-liquidity-widget.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @kyberswap/widgets\n```\n\n----------------------------------------\n\nTITLE: Installing KyberSwap Liquidity Widget with Yarn\nDESCRIPTION: Command to install the KyberSwap Liquidity Widget package using Yarn.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-liquidity-widget/integrating-the-kyberswap-liquidity-widget.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @kyberswap/widgets\n```\n\n----------------------------------------\n\nTITLE: Installing KyberSwap Widget via yarn\nDESCRIPTION: Command to install the KyberSwap widgets library using yarn package manager.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-widget/developer-guides/integrating-the-kyberswap-widget.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @kyberswap/widgets\n```\n\n----------------------------------------\n\nTITLE: Degen Mode Activation Safety Guidelines\nDESCRIPTION: Configuration and safety warnings for enabling high-risk trading mode with overridden protective features\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-interface/user-guides/instantly-swap-at-superior-rates.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* Configure max slippage ≥ 20% and ≤ 50%\n* Confirm trades with price impact ≥10%\n* Proceed with swaps when price impact cannot be calculated\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning for Exotic Tokens in Markdown\nDESCRIPTION: This markdown snippet shows how to format a warning message about importing exotic tokens with limited liquidity. It includes information about slippage and price impact risks.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-interface/user-guides/add-your-favourite-tokens.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% hint style=\"info\" %}\n#### Importing exotic tokens\n\nDo note that KyberSwap will display a warning if you try to add less frequently swapped tokens. This is because such tokens usually has limited liquidity which could result in negative outcomes due to  greater [slippage](../../../getting-started/foundational-topics/decentralized-finance/slippage.md) and [price impact](../../../getting-started/foundational-topics/decentralized-finance/price-impact.md) risks.&#x20;\n\n![](<../../../.gitbook/assets/Screenshot 2023-04-11 at 4.38.51 PM.png>)\n\nUsers are advised to proceed carefully when trading such exotic tokens as changing market conditions can significantly impact the outcome of a trade. It is highly recommended that users safeguard their transactions by using KyberSwap's [Max Slippage](broken-reference) feature when trading exotic tokens.\n{% endhint %}\n```\n\n----------------------------------------\n\nTITLE: Displaying KyberSwap Zap Protocol Fee Structure in Markdown\nDESCRIPTION: This markdown table shows the protocol fee structure for different pair categories in KyberSwap's Zap feature. It outlines fees for stable, correlated, common, and exotic pairs.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/fee-schedule.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Pair Category   | Protocol Fee |\n| --------------- | ------------ |\n| Stable pair     | 0.01%        |\n| Correlated pair | 0.025%       |\n| Common pair     | 0.1%         |\n| Exotic pair     | 0.25%        |\n```\n\n----------------------------------------\n\nTITLE: HTML Table of KyberSwap Supported Liquidity Sources\nDESCRIPTION: An HTML table fragment listing supported liquidity sources for KyberSwap. Each row contains the source identifier, name, and a link to the source's website. The table includes various DEXs, AMMs, and DeFi protocols across different blockchain networks.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-aggregator/dex-ids.md#2025-04-21_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n</td><td>RAMSES CL</td><td><a href=\"https://app.ramses.exchange/\">https://app.ramses.exchange/</a></td></tr><tr><td>retro</td><td>Retro AMM</td><td><a href=\"https://retro.finance/swap\">https://retro.finance/swap</a></td></tr><tr><td>retro-v3</td><td>Retro CL</td><td><a href=\"https://retro.finance/swap\">https://retro.finance/swap</a></td></tr><tr><td>ring-swap</td><td>Ring Exchange</td><td><a href=\"https://ring.exchange\">https://ring.exchange</a></td></tr><tr><td>rocketpool-reth</td><td>RocketPool rETH</td><td><a href=\"https://rocketpool.net\">https://rocketpool.net</a></td></tr><tr><td>rocketswap-v2</td><td>RocketSwap V2</td><td><a href=\"https://app.rocketswap.cc/exchange/swap\">https://app.rocketswap.cc/exchange/swap</a></td></tr><tr><td>renzo-ezeth</td><td>Renzo</td><td><a href=\"https://www.renzoprotocol.com\">https://www.renzoprotocol.com</a></td></tr><tr><td>saddle (!)</td><td>Saddle</td><td><a href=\"https://saddle.exchange/\">https://saddle.exchange/</a></td></tr><tr><td>safeswap</td><td>SafeSwap</td><td><a href=\"https://app.safeswap.io/\">https://app.safeswap.io/</a></td></tr><tr><td>scale</td><td>Equalizer</td><td><a href=\"https://base.equalizer.exchange/\">https://base.equalizer.exchange/</a></td></tr><tr><td>scrollswap</td><td>Scroll_Swap</td><td><a href=\"https://dex.scrollswap.app/#/swap\">https://dex.scrollswap.app/#/swap</a></td></tr><tr><td>shibaswap</td><td>ShibaSwap</td><td><a href=\"https://shibaswap.com/\">https://shibaswap.com/</a></td></tr><tr><td>skydrome</td><td>SkyDrome Finance</td><td><a href=\"https://app.skydrome.finance/swap\">https://app.skydrome.finance/swap</a></td></tr><tr><td>skydrome-v2</td><td>SkyDrome Finance</td><td><a href=\"https://app.skydrome.finance/swap\">https://app.skydrome.finance/swap</a></td></tr><tr><td>smardex</td><td>SmarDex</td><td><a href=\"https://smardex.io/swap\">https://smardex.io/swap</a></td></tr><tr><td>solidly-v3</td><td>Solidly V3</td><td><a href=\"https://solidly.exchange/\">https://solidly.exchange/</a></td></tr><tr><td>spacefi</td><td>SpaceFi</td><td><a href=\"https://swap-zksync.spacefi.io/#/swap\">https://swap-zksync.spacefi.io/#/swap</a></td></tr><tr><td>sparta-dex</td><td>Sparta Dex</td><td><a href=\"https://app.spartadex.io/\">https://app.spartadex.io/</a></td></tr><tr><td>spiritswap</td><td>SpiritSwap</td><td><a href=\"https://www.spiritswap.finance/\">https://www.spiritswap.finance/</a></td></tr><tr><td>spookyswap</td><td>SpookySwap</td><td><a href=\"https://spooky.fi/\">https://spooky.fi/</a></td></tr><tr><td>stratum-finance</td><td>Stratum Finance</td><td><a href=\"https://stratumexchange.com\">https://stratumexchange.com</a></td></tr><tr><td>squadswap</td><td>SquadSwap</td><td><a href=\"https://squadswap.com\">https://squadswap.com</a></td></tr><tr><td>sushiswap</td><td>SushiSwap</td><td><a href=\"https://www.sushi.com/swap\">https://www.sushi.com/swap</a></td></tr><tr><td>sushiswap-v3</td><td>SushiSwap V3</td><td><a href=\"https://www.sushi.com/swap\">https://www.sushi.com/swap</a></td></tr><tr><td>swapbased</td><td>SwapBased V2</td><td><a href=\"https://swapbased.finance/#/swap\">https://swapbased.finance/#/swap</a></td></tr><tr><td>swapbased-v3</td><td>SwapBased V3</td><td><a href=\"https://swapbased.finance/#/swap\">https://swapbased.finance/#/swap</a></td></tr><tr><td>swapbased-perp</td><td>SwapBased Perps</td><td><a href=\"https://perps.swapbased.finance/trade\">https://perps.swapbased.finance/trade</a></td></tr><tr><td>swap-blast</td><td>SwapBlast</td><td><a href=\"https://swapblast.finance/#/\">https://swapblast.finance/#/</a></td></tr><tr><td>swapr</td><td>Swapr</td><td><a href=\"https://swapr.eth.link/\">https://swapr.eth.link/</a></td></tr><tr><td>swell-sweth</td><td>Swell</td><td><a href=\"https://www.swellnetwork.io\">https://www.swellnetwork.io</a></td></tr><tr><td>swell-rsweth</td><td>Swell</td><td><a href=\"https://www.swellnetwork.io\">https://www.swellnetwork.io</a></td></tr><tr><td>synapse</td><td>Synapse</td><td><a href=\"https://synapseprotocol.com/\">https://synapseprotocol.com/</a></td></tr><tr><td>syncswap</td><td>SyncSwap</td><td><a href=\"https://syncswap.xyz/\">https://syncswap.xyz/</a></td></tr><tr><td>synthetix</td><td>Synthetix</td><td><a href=\"https://synthetix.io/\">https://synthetix.io/</a></td></tr><tr><td>synthswap</td><td>SynthSwap V2</td><td><a href=\"https://www.synthswap.io/exchange/besttrade\">https://www.synthswap.io/exchange/besttrade</a></td></tr><tr><td>synthswap-perp</td><td>SynthSwap Perps</td><td><a href=\"https://perps.synthswap.io/#/trade\">https://perps.synthswap.io/#/trade</a></td></tr><tr><td>synthswap-v3</td><td>SynthSwap V3</td><td><a href=\"https://www.synthswap.io/exchange/besttrade\">https://www.synthswap.io/exchange/besttrade</a></td></tr><tr><td>thena</td><td>Thena V1</td><td><a href=\"https://www.thena.fi/swap\">https://www.thena.fi/swap</a></td></tr><tr><td>thena-fusion</td><td>Thena Fusion</td><td><a href=\"https://www.thena.fi/swap\">https://www.thena.fi/swap</a></td></tr><tr><td>thruster-v2</td><td>Thruster V2</td><td><a href=\"https://app.thruster.finance\">https://app.thruster.finance</a></td></tr><tr><td>thruster-v2-degen</td><td>Thruster Degen</td><td><a href=\"https://app.thruster.finance\">https://app.thruster.finance</a></td></tr><tr><td>thruster-v3</td><td>Thruster V3</td><td><a href=\"https://app.thruster.finance\">https://app.thruster.finance</a></td></tr><tr><td>traderjoe</td><td>TraderJoe V1</td><td><a href=\"https://traderjoexyz.com/\">https://traderjoexyz.com/</a></td></tr><tr><td>traderjoe-v20</td><td>TraderJoe V2.0</td><td><a href=\"https://traderjoexyz.com/\">https://traderjoexyz.com/</a></td></tr><tr><td>traderjoe-v21</td><td>TradeJoe V2.1</td><td><a href=\"https://traderjoexyz.com/\">https://traderjoexyz.com/</a></td></tr><tr><td>trisolaris (!)</td><td>Trisolaris</td><td><a href=\"https://www.trisolaris.io/\">https://www.trisolaris.io/</a></td></tr><tr><td>usdfi</td><td>USDFI</td><td><a href=\"https://usdfi.com/\">https://usdfi.com/</a></td></tr><tr><td>uniswap</td><td>Uniswap V2</td><td><a href=\"https://app.uniswap.org/\">https://app.uniswap.org/</a></td></tr><tr><td>uniswapv3</td><td>Uniswap V3</td><td><a href=\"https://app.uniswap.org/\">https://app.uniswap.org/</a></td></tr><tr><td>valleyswap (!)</td><td>Valleyswap</td><td></td></tr><tr><td>valleyswap-v2 (!)</td><td>Valleyswap V2</td><td></td></tr><tr><td>velocore</td><td>Velocore</td><td><a href=\"https://app.velocore.xyz/swap\">https://app.velocore.xyz/swap</a></td></tr><tr><td>velocore-v2-cpmm</td><td>Velocore CPMM V2</td><td><a href=\"https://app.velocore.xyz/swap\">https://app.velocore.xyz/swap</a></td></tr><tr><td>velocore-v2-wombat-stable</td><td>Velocore Wombat StableSwap V2</td><td><a href=\"https://app.velocore.xyz/swap\">https://app.velocore.xyz/swap</a></td></tr><tr><td>velodrome</td><td>Velodrome</td><td><a href=\"https://app.velodrome.finance/\">https://app.velodrome.finance/</a></td></tr><tr><td>velodrome-v2</td><td>Velodrome V2</td><td><a href=\"https://app.velodrome.finance/\">https://app.velodrome.finance/</a></td></tr><tr><td>verse</td><td>Verse</td><td><a href=\"https://verse.bitcoin.com/\">https://verse.bitcoin.com/</a></td></tr><tr><td>vesync</td><td>veSync</td><td><a href=\"https://app.vesync.finance/swap\">https://app.vesync.finance/swap</a></td></tr><tr><td>vodoo</td><td>VooDoo.trade</td><td><a href=\"https://voodoo.trade/\">https://voodoo.trade/</a></td></tr><tr><td>vooi</td><td>vooi</td><td><a href=\"https://vooi.io/\">https://vooi.io/</a></td></tr><tr><td>vvs</td><td>VVS Finance</td><td><a href=\"https://vvs.finance/\">https://vvs.finance/</a></td></tr><tr><td>wagmi</td><td>Wagmi</td><td><a href=\"https://app.wagmi.com/#/trade/swap\">https://app.wagmi.com/#/trade/swap</a></td></tr><tr><td>wagyuswap</td><td>WagyuSwap</td><td><a href=\"https://exchange.wagyuswap.app/\">https://exchange.wagyuswap.app/</a></td></tr><tr><td>wannaswap (!)</td><td>WannaSwap</td><td><a href=\"https://wannaswap.finance/\">https://wannaswap.finance/</a></td></tr><tr><td>wault (!)</td><td>Wault</td><td></td></tr><tr><td>wombat</td><td>Wombat</td><td><a href=\"https://app.wombat.exchange/swap\">https://app.wombat.exchange/swap</a></td></tr><tr><td>woofi-v2</td><td>WOOFi V2</td><td><a href=\"https://fi.woo.org/swap/\">https://fi.woo.org/swap/</a></td></tr><tr><td>yetiswap</td><td>YetiSwap</td><td><a href=\"https://exchange.yetiswap.app/\">https://exchange.yetiswap.app/</a></td></tr><tr><td>yuzuswap</td><td>YuzuSwap</td><td><a href=\"https://app.yuzu-swap.com/\">https://app.yuzu-swap.com/</a></td></tr><tr><td>zebra</td><td>Zebra V1</td><td><a href=\"https://zebra.xyz/#/swap\">https://zebra.xyz/#/swap</a></td></tr><tr><td>zebra-v2</td><td>Zebra V2</td><td><a href=\"https://zebra.xyz/#/swap\">https://zebra.xyz/#/swap</a></td></tr><tr><td>zero</td><td>Zero Dex</td><td><a href=\"https://www.zkzero.fi\">https://www.zkzero.fi</a></td></tr><tr><td>zipswap</td><td>ZipSwap</td><td><a href=\"https://ipfs.zipswap.fi/\">https://ipfs.zipswap.fi/</a></td></tr><tr><td>zkera-finance</td><td>zkEra</td><td><a href=\"https://zkera.fi\">https://zkera.fi</a></td></tr><tr><td>zkswap</td><td>ZKSwap (ZKSpace)</td><td><a href=\"https://zks.app/\">https://zks.app/</a></td></tr><tr><td>zkswap-finance</td><td>zkSwap Finance</td><td><a href=\"https://zkswap.finance/swap\">https://zkswap.finance/swap</a></td></tr><tr><td>zyberswap-v3</td><td>ZyberSwap V3</td><td><a href=\"https://app.zyberswap.io/exchange/besttrade\">https://app.zyberswap.io/exchange/besttrade</a></td></tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Defining Native Token Address in Markdown\nDESCRIPTION: Specifies the address used to represent the chain's native token in the API. This is a constant value used across different chains to represent their respective native tokens.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/kyberswap-zap-as-a-service/kyberswap-zap-as-a-service-zaas-api/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE`\n```\n\n----------------------------------------\n\nTITLE: Modifying Metamask RPC Settings for Polygon Network\nDESCRIPTION: Step-by-step instructions for changing the RPC endpoint in Metamask to optimize network connectivity for the Polygon network. This guide demonstrates how to add a custom RPC URL to potentially improve transaction speeds on congested networks.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/quickstart/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Step 1**: Open your Metamask wallet and click on \"My accounts\" (the circular button at the top right of the window) and then click on \"Settings\".\n\n<img src=\"https://support.kyberswap.com/hc/article_attachments/14435445235865\" alt=\"001a_MyAccountsCircularButton.png\" data-size=\"original\"><img src=\"https://support.kyberswap.com/hc/article_attachments/14435414408857\" alt=\"001b_Settings.png\" data-size=\"original\">\n\n**Step 2**: Go to Networks and click the \"Add Network\" button.\n\n<img src=\"https://support.kyberswap.com/hc/article_attachments/14435414474905\" alt=\"002a_Networks.png\" data-size=\"original\"><img src=\"https://support.kyberswap.com/hc/article_attachments/14435445381913\" alt=\"002c_AddNetworkButton.png\" data-size=\"original\">\n\nThis will open up a browser tab with more Metamask Settings.\n\n**Step 3**: Click \"Add a network manually\" to proceed.\n\n<img src=\"https://support.kyberswap.com/hc/article_attachments/14435414534169\" alt=\"003a_BrowserTab.png\" data-size=\"original\">\n\n**Step 4**: On the screen that appears, specify the new network. For the purposes of this guide we are going to specify an alternate Polygon Mainnet connection setting named \"Polygon Mainnet 2\".\n\nUnder \"New RPC URL\" change the URL to the RPC URL that you would like to use. (For a list of public RPC URLs and private RPC providers on the Polygon network, please refer to [Polygon's wiki](https://wiki.polygon.technology/docs/develop/network-details/endpoints/).) For this example we're using [`https://polygon-rpc.com`](https://polygon-rpc.com/)\n\nClick the \"Save\" button when you are done.\n\n<img src=\"https://support.kyberswap.com/hc/article_attachments/14435445460249\" alt=\"003b_AddNetworkManually.png\" data-size=\"original\">\n\nThe newly defined network that uses the new RPC should now appear in your Networks list.\n\n<img src=\"https://support.kyberswap.com/hc/article_attachments/14435445464217\" alt=\"003c_NewNetworkAppears.png\" data-size=\"original\">\n```\n\n----------------------------------------\n\nTITLE: Adding Markdown Tabs for User Guides in KyberSwap Documentation\nDESCRIPTION: This code snippet demonstrates the use of markdown tabs to organize user guides for traders on the KyberSwap platform. It includes links to various features such as adding favorite tokens and swapping at preferred rates.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/foundational-topics/decentralized-finance/stablecoins.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% tabs %}\n{% tab title=\"Traders\" %}\n* [Add Your Favourite Tokens](../../../kyberswap-solutions/kyberswap-interface/user-guides/add-your-favourite-tokens.md)\n* Instantly Swap At Superior Rates\n* [Swap At Your Preferred Rates](../../../kyberswap-solutions/kyberswap-interface/user-guides/trade-at-your-preferred-rates.md)\n{% endtab %}\n{% endtabs %}\n```\n\n----------------------------------------\n\nTITLE: Calculating Slippage Percentage Formula in Markdown\nDESCRIPTION: Mathematical formula for calculating slippage as a percentage difference between actual and estimated output. The formula is displayed using markdown math notation.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/getting-started/foundational-topics/decentralized-finance/slippage.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$$\nSlippage=\\frac{actualOutput-estimatedOutput}{estimatedOutput}*100\\%\n$$\n```\n\n----------------------------------------\n\nTITLE: Ethereum KNC Token Contract Structure\nDESCRIPTION: Main KNC token contract implementation on Ethereum including AdminUpgradeabilityProxy and KyberNetworkTokenV2 implementation addresses.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/governance/knc-token/knc-contract-addresses.md#2025-04-21_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\nAdminUpgradeabilityProxy (KNC): 0xdeFA4e8a7bcBA345F687a2f1456F5Edd9CE97202\nKyberNetworkTokenV2 (Implementation): 0xe5E8E834086F1a964f9A089eB6Ae11796862e4CE\n```\n\n----------------------------------------\n\nTITLE: Posting Encode Data Request for Order Cancellation in TypeScript\nDESCRIPTION: This code demonstrates how to send a POST request to the KyberSwap API to get the encoded data for cancelling batch orders. The encoded data will be used as calldata for the on-chain transaction.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/hard-cancel.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst {data} = await axios.post(\n    LimitOrderDomain+targetPath,\n    requestBody\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Orders by Asset Pair in TypeScript\nDESCRIPTION: This code filters the retrieved orders to find a specific order matching the desired maker and taker asset pair.\nSOURCE: https://github.com/kybernetwork/kyberswap-documentation.git/blob/main/kyberswap-solutions/limit-order/developer-guides/gasless-cancel.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst orders = await getOrders();\nconst targetOrder = orders.filter(order => \n    order.maker.toLowerCase() == signerAddress.toLowerCase() &&\n    order.makerAsset.toLowerCase() == makerAsset.address.toLowerCase() &&\n    order.takerAsset.toLowerCase() == takerAsset.address.toLowerCase()\n);\nconst targetOrderId = Number(targetOrder[0].id);\n```"
  }
]