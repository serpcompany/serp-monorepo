[
  {
    "owner": "com-lihaoyi",
    "repo": "mill",
    "content": "TITLE: Basic Mill Commands for Building and Testing\nDESCRIPTION: Basic Mill commands for compiling, running tests, and checking compilation. These commands are the foundation for working with Mill in Scala projects.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/core/resolve/test/resources/examples/javac/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmill clean\nmill compile\nmill verify\nmill test\nmill foo.compile\nmill foo.test\nmill foo.test.compile\nmill foo.test -- com.your.module.FooSpec\nmill foo.run\nmill foo.runBackground\n```\n\n----------------------------------------\n\nTITLE: Mill REPL Commands and Version Management\nDESCRIPTION: Commands for launching Scala REPL sessions, resolving dependencies, and managing Mill versions. Includes utilities for cross-building.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/core/resolve/test/resources/examples/javac/readme.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmill -i foo.console\nmill resolve _\nmill resolve _.compile\nmill foo.allSourceFiles\nmill --disable-ticker\nmill --version\nmill -w foo.compile\n```\n\n----------------------------------------\n\nTITLE: Mill Publishing and Assembly Commands\nDESCRIPTION: Commands for publishing artifacts, creating assembly JARs (fat JARs), and various utility operations. These are used for deployment and distribution of Scala projects.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/core/resolve/test/resources/examples/javac/readme.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmill foo.assembly\nmill foo.test.assembly\nmill foo.publish\nmill foo.publishLocal\nmill foo.{foo1,foo2}.publishLocal\n\n# Add a specific ivy repo\nmill --repositories \"https://oss.sonatype.org/content/repositories/releases\"\n\n# Set publish repo\nexport SONATYPE_USERNAME=myuser\nexport SONATYPE_PASSWORD=mypass\nmill foo.publish\n\n# Cross-build\nmill foo[2.13.6].compile\nmill -j 4 __.compile\nmill show foo.scalaVersion\n```\n\n----------------------------------------\n\nTITLE: Mill Debugging and Reports Generation\nDESCRIPTION: Commands for debugging Mill builds, generating reports, and creating IntelliJ IDEA project files. These are helpful for development and troubleshooting.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/core/resolve/test/resources/examples/javac/readme.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmill show test.sources\nmill show test.testFramework\nmill show __.scalaVersion\nmill show \"sys.env.get('JAVA_HOME')\"\nmill inspect __.sources\nmill path __.sources\nmill mill.scalalib.GenIdea/idea\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard robots.txt File with No Restrictions\nDESCRIPTION: This robots.txt configuration allows all web crawlers and search engine bots to access all parts of the website. It includes a reference to the robots.txt standard documentation and sets no crawling restrictions.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/javascriptlib/basic/2-react/foo/public/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Executing Basic Mill Commands for Scala Project\nDESCRIPTION: Basic Mill build tool commands for compiling, running, and testing a Scala application. Uses template variable $name for the project name which gets formatted in camelCase.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/scalalib/test/resources/giter8/hello.g8/src/main/g8/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# compile\nmill $name;format=\"camel\"$.compile\n\n# run\nmill $name;format=\"camel\"$.run\n\n# test\nmill $name;format=\"camel\"$.test\n```\n\n----------------------------------------\n\nTITLE: Defining Git Module for Mill in Scala\nDESCRIPTION: This snippet defines the Git module object that provides utility methods for interacting with Git repositories in Mill build files. It includes methods for checking repository status, getting repository information, and executing Git commands.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/core/exec/test/resources/examples/javac/readme.md#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\npackage mill.modules\n\nimport geny.Generator\nimport mill.define.{Command, Target, Task}\nimport mill.api.{Logger, PathRef, Result}\nimport os.{CommandResult, Path, RelPath}\n\n\n/**\n * Git utilities, for working with Git repositories within Mill builds.\n */\nobject Git {\n  val GitRepoNotFound = \"Not a git repository\"\n\n  /**\n   * Returns true if the given folder is a git repository.\n   */\n  def isGitRepo(p: Path): Boolean = os.isDir(p / \".git\")\n\n  /**\n   * Returns the commit hash of the current HEAD.\n   */\n  def githash(p: Path): String = {\n    os.proc(\"git\", \"rev-parse\", \"HEAD\").call(cwd = p).out.trim\n  }\n\n  def gitHead(p: Path): GitHead = {\n    val rawHash = githash(p)\n    os.proc(\"git\", \"symbolic-ref\", \"HEAD\").call(cwd = p, check = false) match {\n      case CommandResult(0, out, _) =>\n        val branch = out.trim().split(\"/\").last\n        GitRef(rawHash, branch)\n      case _ => GitHash(rawHash)\n    }\n  }\n\n  /**\n   * Checks if there is uncommitted changes.\n   * @return\n   */\n  def isDirty(p: Path): Boolean = {\n    os.proc(\"git\", \"status\", \"--porcelain\").call(cwd = p).out.bytes.nonEmpty\n  }\n\n  /**\n   * Returns the git root directory.\n   */\n  def gitRoot(repo: Path): Path = {\n    val proc = os.proc(\"git\", \"rev-parse\", \"--show-toplevel\").call(cwd = repo)\n    Path(proc.out.trim, os.pwd)\n  }\n\n  /**\n   * Returns the last (newest) tag for the given ref.\n   */\n  def latestTag(repo: Path, ref: String = \"HEAD\"): Option[Tag] = {\n    val currentTags = {\n      val tagProc = os.proc(\n        \"git\",\n        \"for-each-ref\",\n        \"--points-at\",\n        ref,\n        \"--format=%(objectname) %(refname)\",\n        \"refs/tags\"\n      ).call(cwd = repo).out.text().split(\"\\n\").filter(_.nonEmpty)\n\n      tagProc\n        .map(_.split(\" refs/tags/\"))\n        .map {\n          case Array(hash, name) =>\n            val annotated = os.proc(\n              \"git\",\n              \"cat-file\",\n              \"-t\",\n              hash\n            ).call(cwd = repo).out.text().trim == \"tag\"\n            NormalTag(hash, name, annotated)\n          case other =>\n            throw new Exception(s\"Don't know how to handle: ${other.toList}\")\n        }.toList\n    }\n\n    currentTags.headOption\n  }\n\n  /**\n   * Returns the previous tag according to git describe, or None if no such tag can be found.\n   */\n  def previousTag(repo: Path, ref: String = \"HEAD\"): Option[Tag] = {\n    val proc = os.proc(\n      \"git\",\n      \"describe\",\n      \"--abbrev=0\",\n      \"--tags\",\n      ref + \"^\"\n    ).call(cwd = repo, check = false)\n\n    if (proc.exitCode == 0) {\n      val tag = proc.out.text().trim()\n      val tagProc = os.proc(\n        \"git\",\n        \"show-ref\",\n        \"-d\",\n        \"--tags\",\n        tag\n      ).call(cwd = repo, check = false)\n\n      if (tagProc.exitCode == 0) {\n        // If the tag resolves to multiple hashes, there's both a lightweight and an annotated tag.\n        // The annotated tag is likely what the user wants to see, since git tag -l tags show the\n        // annotated tags, not the lightweight ones.\n        val hashes = tagProc.out.text().trim().split(\"\\n\")\n          .map(_.split(\"\\\\s\").head)\n\n        if (hashes.length == 2) {\n          Some(NormalTag(hashes(0), tag, annotated = true))\n        } else if (hashes.nonEmpty) {\n          val annotated = os.proc(\n            \"git\",\n            \"cat-file\",\n            \"-t\",\n            hashes(0)\n          ).call(cwd = repo).out.text().trim == \"tag\"\n          Some(NormalTag(hashes(0), tag, annotated))\n        } else None\n      } else None\n    } else None\n  }\n\n  def localBranch(repo: Path): String = {\n    /* `git rev-parse --abbrev-ref HEAD` won't work with detached HEAD */\n    os.proc(\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\")\n      .call(cwd = repo).out.trim\n  }\n\n  def remoteUri(repo: Path, remote: String = \"origin\"): String = {\n    os.proc(\"git\", \"config\", \"--get\", s\"remote.$remote.url\")\n      .call(cwd = repo).out.trim\n  }\n\n  def gitStatus(repo: Path): Seq[Path] = {\n    os.proc(\"git\", \"status\", \"--porcelain\")\n      .call(cwd = repo)\n      .out\n      .lines()\n      .filter(!_.startsWith(\"??\"))\n      .map(x => repo / RelPath(x.drop(3)))\n  }\n\n  def syncLocalRepo(repo: Path, remote: String = \"origin\", remoteBranch: String = null): CommandResult = {\n    os.proc(\n      \"git\", \"pull\", remote, Option(remoteBranch).getOrElse(localBranch(repo))\n    ).call(cwd = repo)\n  }\n\n  def findGitRepoRoot(cwd: os.Path): Option[os.Path] = {\n    if (os.isDir(cwd / \".git\")) Some(cwd)\n    else {\n      val parent = cwd / os.up\n      if (parent == cwd) None\n      else findGitRepoRoot(parent)\n    }\n  }\n\n  /**\n   * A CLI command that will find all files on your file system which are git\n   * repositories\n   */\n  def findRepoRoots(roots: os.Path*): Command[Vector[os.Path]] = T.command {\n    val out = Generator.from(roots).flatMap(findRepoRoots).toVector.sorted\n    if (T.log.debugEnabled) {\n      T.log.debug(out.map(_.toString).mkString(\"\\n\"))\n    }\n    out\n  }\n\n  /**\n   * Stream all directories in `from` which are nested git repository root directories.\n   */\n  def findRepoRoots(from: os.Path)(implicit logger: Logger): Generator[os.Path] = {\n    val visited = collection.mutable.Set.empty[os.Path]\n    Generator.selfClosing(visit(from, visited, from)(logger))\n  }\n\n  private def visit(\n      root: os.Path,\n      visited: collection.mutable.Set[os.Path],\n      from: os.Path\n  )(implicit logger: Logger): IterableOnce[os.Path] = {\n    if (os.exists(from / \".git\")) {\n      logger.debug(s\"Found git repository $from\")\n      Iterator(from)\n    } else if (os.isDir(from)) {\n      try {\n        val children = os.list(from).filter(os.isDir)\n        children.flatMap { child =>\n          if (visited.contains(child)) Iterator.empty\n          else {\n            try {\n              logger.debug(s\"Looking for git repositories in $child\")\n              visited.add(child)\n              visit(root, visited, child)\n            } catch {\n              case e: Exception =>\n                logger.warn(s\"Error walking tree at $child: ${e.getMessage}\")\n                Iterator.empty\n            }\n          }\n        }\n      } catch {\n        case e: Exception =>\n          logger.warn(s\"Error walking tree at $from: ${e.getMessage}\")\n          Iterator.empty\n      }\n    } else Iterator.empty\n  }\n\n  /**\n   * Locate all modules in a directory tree that aren't under a version control\n   * system. You can use this command to identify which modules need to be committed\n   * to version control.\n   */\n  def findUnversionedModules(root: os.Path): Generator[os.Path] = {\n    val buildFiles = collectBuildFiles(root)\n    val roots = findGitRoots(buildFiles.map(_.path))\n    val moduleDirs = buildFiles.flatMap(_.childDirs)\n\n    Generator.selfClosing(moduleDirs.map(_.path).filterNot(path => roots.exists(root => path.startsWith(root))).sorted)\n  }\n\n  private def findGitRoots(paths: geny.Generator[os.Path]): Set[os.Path] = {\n    paths.flatMap(getGitRoot).toSet\n  }\n\n  private def getGitRoot(path: os.Path): Option[os.Path] = {\n    var current = path\n    while (current.toString.nonEmpty) {\n      if (os.exists(current / \".git\")) return Some(current)\n      current = current / os.up\n    }\n    None\n  }\n\n  private def collectBuildFiles(dir: os.Path): Generator[BuildFile] = {\n    Generator.from(os.walk(dir))\n      .filter(_.last == \"build.sc\")\n      .map(path => BuildFile(path))\n  }\n\n  private class BuildFile(val path: os.Path) {\n    lazy val childDirs: Set[MillModule] = {\n      val parent = path / os.up\n      os.list(parent)\n        .filter(os.isDir)\n        .map(dir => MillModule(dir))\n        .filter(_.containsModuleSource)\n        .toSet\n    }\n  }\n\n  private class MillModule(val path: os.Path) {\n    def containsModuleSource: Boolean = {\n      os.list(path).exists(isSource)\n    }\n\n    private def isSource(path: os.Path): Boolean = {\n      val name = path.last\n      os.isFile(path) && (name.endsWith(\".scala\") || name.endsWith(\".java\"))\n    }\n  }\n}\n\nsealed trait GitHead {\n  def hash: String\n}\ncase class GitRef(hash: String, ref: String) extends GitHead\ncase class GitHash(hash: String) extends GitHead\n\ntrait Tag {\n  def hash: String\n  def name: String\n}\n\ncase class NormalTag(hash: String, name: String, annotated: Boolean) extends Tag\n```\n\n----------------------------------------\n\nTITLE: Defining Mill Build Configuration in Scala\nDESCRIPTION: This snippet sets up the build configuration for a project using the Mill build tool. It imports necessary modules, defines project structure, and specifies dependencies and settings for different modules.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/fundamentals/tasks/2-primary-tasks/bar/src2/file.txt#2025-04-20_snippet_0\n\nLANGUAGE: Scala\nCODE:\n```\nimport mill._\nimport mill.define.Sources\nimport mill.scalalib._\nimport mill.scalalib.publish._\nimport mill.scalalib.api.ZincWorkerUtil\nimport coursier.maven.MavenRepository\nimport $ivy.`com.lihaoyi::mill-contrib-buildinfo:$MILL_VERSION`\nimport mill.contrib.buildinfo.BuildInfo\n\nval binCrossScalaVersions = Seq(\"2.12.17\", \"2.13.10\", \"3.2.2\")\nval fullCrossScalaVersions = Seq(\"2.12.17\", \"2.13.10\", \"3.1.3\", \"3.2.2\")\n\ninterdef millSourcePath = T.source(millSourcePath)\ninterdef millDiscover = Discover.inner(\n  implicitly[mill.define.Discover[_]].value.asInstanceOf[Discover[this.type]]\n)\n\nobject Deps {\n  def acyclic = ivy\"com.lihaoyi:::acyclic:0.3.9\"\n  def scalatest = ivy\"org.scalatest::scalatest::3.2.16\"\n  def scalatestplus = ivy\"org.scalatestplus::scalacheck-1-17::3.2.16.0\"\n  def scalacheck = ivy\"org.scalacheck::scalacheck::1.17.0\"\n  def sourcecode = ivy\"com.lihaoyi::sourcecode::0.3.0\"\n  def mainargs = ivy\"com.lihaoyi::mainargs::0.5.4\"\n  def os = ivy\"com.lihaoyi::os-lib:0.9.1\"\n  def utest = ivy\"com.lihaoyi::utest::0.8.1\"\n  def upickle = ivy\"com.lihaoyi::upickle::3.1.0\"\n  def scalacheckMagnolia = ivy\"com.github.chocpanda::scalacheck-magnolia::0.5.1\"\n}\n\nval testFramework = \"mill.UTestFramework\"\n\nval millApiSourcePath = Path(os.pwd) / \"out\" / \"scalalib\" / \"worker\" / \"dest\"\n\ntrait MillBasePublishModule extends PublishModule {\n  def publishVersion = GitHead.current()\n  def pomSettings = PomSettings(\n    description = artifactName(),\n    organization = \"com.lihaoyi\",\n    url = \"https://github.com/com-lihaoyi/mill\",\n    licenses = Seq(License.MIT),\n    versionControl = VersionControl.github(\"com-lihaoyi\", \"mill\"),\n    developers = Seq(\n      Developer(\"lihaoyi\", \"Li Haoyi\", \"https://github.com/lihaoyi\")\n    )\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JVM Options for Mill Build Tool\nDESCRIPTION: This snippet defines JVM options for the Mill build tool. It sets a custom property and configures the thread stack size.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/core/constants/test/resources/file-wo-final-newline.txt#2025-04-20_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# comment after an empty line\n-DPROPERTY_PROPERLY_SET_VIA_JVM_OPTS=value-from-file\n-Xss120m\n```\n\n----------------------------------------\n\nTITLE: Configuring JVM Options for Mill Build Tool\nDESCRIPTION: Sets custom JVM options including a custom property and stack size allocation. Defines a property PROPERTY_PROPERLY_SET_VIA_JVM_OPTS and sets JVM stack size to 120MB.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/runner/server/client/test/resources/file-wo-final-newline.txt#2025-04-20_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n-DPROPERTY_PROPERLY_SET_VIA_JVM_OPTS=value-from-file\n-Xss120m\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Target in Mill Extension\nDESCRIPTION: Example of implementing a custom target in a Mill extension. This code demonstrates how to define a target that can be used in Mill build files.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_6\n\nLANGUAGE: scala\nCODE:\n```\ndef foo = T { ... }\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Structure for SBT Multi-Project Example\nDESCRIPTION: Shows the directory structure of the multi-project build, including common code, multiple sub-projects, build configuration files, and the main build.sbt file.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/main/init/sbt/test/resources/sbt-multi-project-example/README.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n* sbt-multi-project-example/\n    * common/\n        * src/\n        * test/\n    * multi1/\n        * src/\n        * test/\n    * multi2/\n        * src/\n        * test/\n    * project/\n        * build.properties\n        * plugins.sbt\n    * build.sbt\n```\n\n----------------------------------------\n\nTITLE: Testing Mill Development Build with Run Script\nDESCRIPTION: Instructions on how to use the run script to test changes to Mill without having to publish a new version. This command runs the Mill build tool from the development source.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./mill -i dev.run foo.compile\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests After Changes\nDESCRIPTION: Commands for running integration tests after making changes to the Mill codebase. This ensures that your changes don't break existing functionality.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./mill -i integration\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Integration Test\nDESCRIPTION: Command demonstrating how to run a specific integration test with Mill. This is useful when you want to test a specific functionality rather than running all integration tests.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./mill -i \"integration[0.7].test\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL JDBC Connection in Java\nDESCRIPTION: This code demonstrates how to establish a connection to a MySQL database using JDBC. It includes loading the driver, specifying the connection URL, and creating the connection with database credentials.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/fundamentals/modules/6-modules/bar/src/file.txt#2025-04-20_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.sql.*;\n\npublic class JdbcExample {\n   static final String DB_URL = \"jdbc:mysql://localhost:3306/mydb\";\n   static final String USER = \"username\";\n   static final String PASS = \"password\";\n\n   public static void main(String[] args) {\n      Connection conn = null;\n      try {\n         // Register JDBC driver\n         Class.forName(\"com.mysql.jdbc.Driver\");\n         \n         // Open a connection\n         System.out.println(\"Connecting to database...\");\n         conn = DriverManager.getConnection(DB_URL, USER, PASS);\n         \n         // Do something with the connection\n         \n         // Close connection\n         conn.close();\n      } catch(SQLException se) {\n         se.printStackTrace();\n      } catch(Exception e) {\n         e.printStackTrace();\n      } finally {\n         try {\n            if(conn != null) conn.close();\n         } catch(SQLException se) {\n            se.printStackTrace();\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying NumPy Dependency Version in Requirements File\nDESCRIPTION: Defines a dependency on NumPy version 2.1.2 for a Python project. This line would typically be found in a requirements.txt file used by pip to install project dependencies.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/pythonlib/dependencies/2-pip-requirements/requirements.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy==2.1.2\n```\n\n----------------------------------------\n\nTITLE: Installing testpkg-mill with pip\nDESCRIPTION: Command to install the testpkg-mill package using pip package manager.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/pythonlib/publishing/1-publish-module/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install testpkg-mill\n```\n\n----------------------------------------\n\nTITLE: Using the greet module from testpkg-mill\nDESCRIPTION: Example of importing the greet module from testpkg and calling its hello function with a parameter.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/pythonlib/publishing/1-publish-module/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import testpkg.greet\ntestpkg.greet.hello(\"world\")\n```\n\n----------------------------------------\n\nTITLE: Running ScalariForms for Mill\nDESCRIPTION: Command showing how to run ScalariForms on the Mill codebase, which helps enforce consistent code formatting across the project.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./mill -i mill.scalalib.scalafmt.ScalafmtModule/checkFormatAll __.sources\n```\n\n----------------------------------------\n\nTITLE: Formatting Mill Codebase with ScalariForms\nDESCRIPTION: Command to format all source files using ScalariForms, which automatically applies consistent formatting to the code according to the project's style guidelines.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./mill -i mill.scalalib.scalafmt.ScalafmtModule/reformatAll __.sources\n```\n\n----------------------------------------\n\nTITLE: Running Mill CI Tests\nDESCRIPTION: Command for running the CI tests locally, which helps verify that your changes pass all the tests that will be run in continuous integration environments.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/feature/import-ivy-worker-invalidation/resources/app/conf/dummy.txt#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./mill -i ci.githubActions\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Basic robots.txt configuration that allows all web crawlers and bots complete access to the website. Uses standard robots.txt syntax to specify no restrictions for any user agent.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/javascriptlib/basic/5-client-server-hello/client/public/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the default configuration for web crawlers, allowing unrestricted access to the entire website. It specifies that all user agents (*) are permitted to access all content, as indicated by the empty Disallow directive.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/javascriptlib/basic/6-client-server-realistic/client/public/robots.txt#2025-04-20_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Declaration of initial-watchValue2 in Scala\nDESCRIPTION: This appears to be a variable or constant declaration named 'initial-watchValue2' in the Mill build tool. It likely represents an initial state or default value for a file watching mechanism.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/integration/invalidation/watch-source-input/resources/watchValue.txt#2025-04-20_snippet_0\n\nLANGUAGE: scala\nCODE:\n```\ninitial-watchValue2\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter\nDESCRIPTION: Basic YAML front matter configuration for a documentation page in Jekyll, specifying the layout template.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/scalalib/test/resources/dottydoc/static/docs/index.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: doc-page\n---\n```\n\n----------------------------------------\n\nTITLE: Inline Code Formatting in Markdown\nDESCRIPTION: Demonstrates how to format inline code in GitHub markdown using backticks.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/fundamentals/cross/10-static-blog/post/3-My-Third-Post.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`var example = true`\n```\n\n----------------------------------------\n\nTITLE: Block Code Formatting in Markdown with JavaScript Example\nDESCRIPTION: Shows how to format a longer block of code in GitHub markdown by indenting with four spaces. The example uses JavaScript to illustrate a conditional statement.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/fundamentals/cross/10-static-blog/post/3-My-Third-Post.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n    if (isAwesome) {\n      return true\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Headings Using Hash Symbols\nDESCRIPTION: Demonstrates how to create headings in Markdown using the hash (#) symbol. Shows that multiple hash symbols create lower-level headings.\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/fundamentals/cross/10-static-blog/post/2-My-Second-Post.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#\n```\n\nLANGUAGE: markdown\nCODE:\n```\n##\n```\n\n----------------------------------------\n\nTITLE: Displaying Text Output\nDESCRIPTION: Simple text output showing the word \"World!\"\nSOURCE: https://github.com/com-lihaoyi/mill/blob/main/example/fundamentals/tasks/3-anonymous-tasks/data/world.txt#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nWorld!\n```"
  }
]