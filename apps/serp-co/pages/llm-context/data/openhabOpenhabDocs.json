[
  {
    "owner": "openhab",
    "repo": "openhab-docs",
    "content": "TITLE: Examples of Item Definitions in openHAB\nDESCRIPTION: Provides multiple examples of Item definitions in openHAB, showcasing different item types, labels, icons, groups, tags, and binding configurations for various smart home devices and sensors.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSwitch Kitchen_Light \"Kitchen Light\" {channel=\"mqtt:topic:...\" }\nString Bedroom_Sonos_CurrentTitle \"Title [%s]\" (gBedRoom) {channel=\"sonos:...\"}\nNumber:Power Bathroom_WashingMachine_Power \"Power [%.0f W]\" <energy> (gPower) {channel=\"homematic:...\"}\n\nNumber:Temperature Livingroom_Temperature \"Temperature [%.1f Â°C]\" <temperature> (gTemperature, gLivingroom) [\"Setpoint\", \"Temperature\"] {knx=\"1/0/15+0/0/15\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Structure in Rules DSL\nDESCRIPTION: The fundamental syntax structure for defining a rule in openHAB Rules DSL. Each rule requires a unique name, one or more trigger conditions, and a script block containing the actions to execute when triggered.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nrule \"<RULE_NAME>\"\nwhen\n    <TRIGGER_CONDITION> [or <TRIGGER_CONDITION2> [or ...]]\nthen\n    <SCRIPT_BLOCK>\nend\n```\n\n----------------------------------------\n\nTITLE: Thing Configuration Examples\nDESCRIPTION: Examples showing how to configure different types of Things including a network device, astro moon, and NTP server with their specific parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_1\n\nLANGUAGE: xtend\nCODE:\n```\nThing network:device:webcam \"Webcam\" @ \"Living Room\" [ hostname=\"192.168.0.2\", timeout=\"5000\", ... ]\nThing astro:moon:home [ geolocation=\"50.12345,10.98765\", interval=300 ]\nThing ntp:ntp:local [ hostname=\"de.pool.ntp.org\" ]\n```\n\n----------------------------------------\n\nTITLE: Using Transformations in Rules\nDESCRIPTION: Demonstrates how to apply transformations in openHAB rules using MAP, JSONPATH, and JS transformations to convert data values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nvar condition = transform(\"MAP\", \"window_esp.map\", \"CLOSED\")\nvar temperature = transform(\"JSONPATH\", \"$.temperature\", jsonstring)\nvar fahrenheit = transform(\"JS\", \"convert-C-to-F.js\", temperature)\n```\n\n----------------------------------------\n\nTITLE: Basic Rule Syntax Example\nDESCRIPTION: Demonstrates the basic syntax format for defining rules in the next-gen rule engine.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nON item_id state changed IF item_id.state == desired_value THEN item_id2.state = desired_value2\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for openHAB Bindings\nDESCRIPTION: The standard directory and file layout for an openHAB binding project, showing the expected OSGi bundle structure with source code organization, configuration files, internationalization resources, and documentation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|- doc                    Images and other assets used in the README.md\n|- src/main\n|---- feature\n|-------- feature.xml     Your OSGi feature file\n|---- java                Your Java code\n|-------- org/openhab/[...]\n|- src/main/resources/OH-INF\n|---- addon\n|-------- addon.xml       Binding name, description and other meta data\n|---- config              Configuration description files when not in things files\n|-------- *.xml\n|---- i18n                Your localized binding texts\n|-------- *_<local>.properties\n|---- thing               One or more xml files with thing descriptions\n|-------- *.xml\n|- src/test\n|---- java                It's easy to write unit tests and fellow developers will thank you\n|-------- org/openhab/[...]\n|---- resources           Any resource files used in your unit tests, like test data\n|-------- [...]\n|- NOTICE                 License information\n|                         3rd party content has to be given in the NOTICE file\n|- pom.xml                Build system file: Describe your dependencies here\n|- README.md              The file describing your binding\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Item State in openHAB\nDESCRIPTION: Example showing how to retrieve the state of an Item from 24 hours ago using the persistedState method. This demonstrates accessing historical data from the persistence service in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nTemperature.persistedState(now.minusDays(1))\n```\n\n----------------------------------------\n\nTITLE: Defining Items in openHAB Java Configuration\nDESCRIPTION: Demonstrates the syntax for defining Items in openHAB using Java-like configuration. The example shows the structure including item type, name, label, icon, groups, tags, and binding configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nitemtype itemname \"labeltext [stateformat]\" <iconname> (group1, group2, ...) [\"tag1\", \"tag2\", ...] {bindingconfig}\n```\n\n----------------------------------------\n\nTITLE: Configuring Voice System Rule Patterns with Item Metadata\nDESCRIPTION: Examples of rule patterns that can be registered with the voice system interpreter through Item metadata. These patterns show how to match spoken commands and extract parameters to send commands to Items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n\"start? watch|watching $*$ on $name$\" -> Matches \"start watching some show on tv\" and sends command \"some show\".\n\n\"watch|play $*$ on tv\" -> Matches \"play some show on tv\" and sends command \"some show\".\n\n\"watch|play $cmd$\" -> Matches \"play some show\" and sends command \"some_show_id\", only if the Item metadata `commandDescription` contains `some_show_id=some show`.\n\n\"start? watch|watching $cmd$ at|on? $name$\" -> Matches \"watch some show tv\" and sends command \"some_show_id\", only if Item `commandDescription` contains `some_show_id=some show`.\n```\n\n----------------------------------------\n\nTITLE: Implementing ThingHandlerFactory in an openHAB Binding\nDESCRIPTION: This code demonstrates how to implement a ThingHandlerFactory for a weather binding that supports a specific ThingType and creates the appropriate ThingHandler instances. It shows the basic structure required for factory implementation including the supportsThingType and createHandler methods.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\n@Component(configurationPid = \"binding.myweatherbinding\", service = ThingHandlerFactory.class)\npublic class WeatherHandlerFactory extends BaseThingHandlerFactory {\n\n    private static final Collection<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections.singleton(WeatherBindingConstants.THING_TYPE_WEATHER);\n\n    @Override\n    public boolean supportsThingType(ThingTypeUID thingTypeUID) {\n        return SUPPORTED_THING_TYPES_UIDS.contains(thingTypeUID);\n    }\n\n    @Override\n    protected @Nullable ThingHandler createHandler(Thing thing) {\n        ThingTypeUID thingTypeUID = thing.getThingTypeUID();\n\n        if (WeatherBindingConstants.THING_TYPE_WEATHER.equals(thingTypeUID)) {\n            return new WeatherHandler(thing);\n        }\n\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Transformation Service Implementation in Java\nDESCRIPTION: Implementation of a basic transformation service that appends ',bro!' to input strings. Shows the basic structure with OSGi component annotation and TransformationService interface implementation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/transformations/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\n@Component(immediate = true, property = { \"openhab.transform=BRO\" })\npublic class TheBroTransformationService implements TransformationService {\n    private final Logger logger = LoggerFactory.getLogger(TheBroTransformationService.class);\n\n    @Override\n    public @Nullable String transform(String config, String input) throws TransformationException {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Subscriber in Java for OpenHAB\nDESCRIPTION: Demonstrates how to create an event subscriber that listens for ItemStateEvent and ItemCommandEvent. Implements EventSubscriber interface with topic filtering and event handling logic.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/events.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Component(immediate = true, service = EventSubscriber.class)\npublic class SomeItemEventSubscriber implements EventSubscriber {\n\n    private final Set<String> subscribedEventTypes = Set.of(ItemStateEvent.TYPE, ItemCommandEvent.TYPE);\n    private final EventFilter eventFilter = new TopicEventFilter(\"openhab/items/ItemX/.*\");\n\n    @Override\n    public Set<String> getSubscribedEventTypes() {\n        return subscribedEventTypes;\n    }\n\n    @Override\n    public EventFilter getEventFilter() {\n        return eventFilter;\n    }\n\n    @Override\n    public void receive(Event event) {\n        String topic = event.getTopic();\n        String type = event.getType();\n        String payload = event.getPayload();\n        if (event instanceof ItemCommandEvent) {\n            ItemCommandEvent itemCommandEvent = (ItemCommandEvent) event;\n            String itemName = itemCommandEvent.getItemName();\n            Command command = itemCommandEvent.getItemCommand();\n            // ...\n        } else if (event instanceof ItemStateEvent) {\n            ItemStateEvent itemStateEvent = (ItemStateEvent) event;\n            // ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Type with Channels in XML\nDESCRIPTION: Comprehensive example showing Thing type definition with multiple channels and channel type definitions including state configurations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    <label>Sample Thing</label>\n    <description>Some sample description</description>\n    <channels>\n        <channel id=\"switch\" typeId=\"power-switch\" />\n        <channel id=\"temperature\" typeId=\"setpoint-temperature\" />\n        <channel id=\"room-humidity\" typeId=\"humidity\" />\n    </channels>\n</thing-type>\n<channel-type id=\"setpoint-temperature\" advanced=\"true\">\n    <item-type>Number</item-type>\n    <label>Setpoint Temperature</label>\n    <category>Temperature</category>\n    <state min=\"12\" max=\"30\" step=\"0.5\" pattern=\"%.1f Â°C\" readOnly=\"false\" />\n</channel-type>\n<channel-type id=\"humidity\">\n    <item-type unitHint=\"%\">Number:Dimensionless</item-type>\n    <label>Humidity</label>\n    <state readOnly=\"true\" pattern=\"%.1f %%\"/>\n</channel-type>\n```\n\n----------------------------------------\n\nTITLE: Implementing ThingHandlerFactory with Dynamic Description Provider in openHAB\nDESCRIPTION: Implementation of a ThingHandlerFactory that injects a DynamicStateDescriptionProvider into thing handlers. This pattern allows handlers to modify dynamic channel information at runtime.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class ExampleHandlerFactory extends BaseThingHandlerFactory {\n\n    private final ExampleDynamicStateDescriptionProvider stateDescriptionProvider;\n\n    @Activate\n    public ExampleHandlerFactory(final @Reference ExampleDynamicStateDescriptionProvider stateDescriptionProvider) {\n        this.stateDescriptionProvider = stateDescriptionProvider;\n    }\n\n    @Override\n    protected ThingHandler createHandler(Thing thing) {\n        if (EXAMPLE_THING_TYPE.equals(thing.getThingTypeUID())) {\n            return new ExampleHandler(thing, stateDescriptionProvider);\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Full openHAB Sitemap Example\nDESCRIPTION: This comprehensive example demonstrates a complete openHAB sitemap configuration. It includes various elements such as Frames, Switches, Text elements, Groups, and nested blocks with Selection and Slider widgets.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nsitemap demo label=\"My home automation\" {\n    Frame label=\"Date\" {\n        Text item=Date\n    }\n    Frame label=\"Demo\" {\n        Switch item=Lights icon=\"light\"\n        Text item=LR_Temperature label=\"Livingroom [%.1f Â°C]\"\n        Group item=Heating\n        Text item=LR_Multimedia_Summary label=\"Multimedia [%s]\" staticIcon=\"video\" {\n            Selection item=LR_TV_Channel mappings=[0=\"off\", 1=\"DasErste\", 2=\"BBC One\", 3=\"Cartoon Network\"]\n            Slider item=LR_TV_Volume\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Frame Elements in openHAB Sitemap\nDESCRIPTION: This code snippet shows how to use Frames to visually distinguish elements on a sitemap page. Frames act as containers that group related UI elements together.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFrame label=\"Date\" {\n    Text item=Date\n}\nFrame label=\"Demo\" {\n    Switch item=Lights icon=\"light\"\n    Text item=LR_Temperature label=\"Livingroom [%.1f Â°C]\"\n    Group item=Heating\n    Text item=LR_Multimedia_Summary label=\"Multimedia [%s]\" staticIcon=\"video\" {\n        Selection item=LR_TV_Channel mappings=[0=\"off\", 1=\"DasErste\", 2=\"BBC One\", 3=\"Cartoon Network\"]\n        Slider item=LR_TV_Volume\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ModuleTypeProvider in Java for OpenHAB\nDESCRIPTION: Creates a ModuleTypeProvider service that exposes custom trigger, condition and action types to the OpenHAB automation engine. The provider manages a static collection of module types for temperature monitoring, presence detection, and air conditioner control.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\n@Component(immediately=true, service={ModuleTypeProvider.class})\npublic class MyModuleTypeProvider implements ModuleTypeProvider {\n\n    private Map<String, ModuleType> providedModuleTypes;\n\n    public MyModuleTypeProvider() {\n        providedModuleTypes = new HashMap<>();\n        providedModuleTypes.put(TemperatureTriggerType.UID, TemperatureTriggerType.initialize());\n        providedModuleTypes.put(PresenceConditionType.UID, PresenceConditionType.initialize());\n        providedModuleTypes.put(AirConditionerActionType.UID, AirConditionerActionType.initialize());\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends ModuleType> T getModuleType(String UID, Locale locale) {\n        return (T) providedModuleTypes.get(UID);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <T extends ModuleType> Collection<T> getModuleTypes(Locale locale) {\n        return (Collection<T>) providedModuleTypes.values();\n    }\n\n    @Override\n    public void addProviderChangeListener(ProviderChangeListener<ModuleType> listener) {\n        // does nothing because this provider does not change\n    }\n\n    @Override\n    public Collection<ModuleType> getAll() {\n        return Collections.unmodifiableCollection(providedModuleTypes.values());\n    }\n\n    @Override\n    public void removeProviderChangeListener(ProviderChangeListener<ModuleType> listener) {\n        // does nothing because this provider does not change\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicCommandDescriptionProvider in Java for openHAB\nDESCRIPTION: Complete implementation of a DynamicCommandDescriptionProvider that allows runtime modification of channel command options. This provider maintains a map of channel UIDs to command options and provides dynamic command descriptions for channels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = { DynamicCommandDescriptionProvider.class, ExampleDynamicCommandDescriptionProvider.class })\npublic class ExampleDynamicCommandDescriptionProvider implements DynamicCommandDescriptionProvider {\n\n    private final Map<ChannelUID, @Nullable List<CommandOption>> channelOptionsMap = new ConcurrentHashMap<>();\n\n    /**\n     * For a given channel UID, set a {@link List} of {@link CommandOption}s that should be used for the channel,\n     * instead of the one defined statically in the {@link ChannelType}.\n     *\n     * @param channelUID the channel UID of the channel\n     * @param options a {@link List} of {@link CommandOption}s\n     */\n    public void setCommandOptions(ChannelUID channelUID, List<CommandOption> options) {\n        channelOptionsMap.put(channelUID, options);\n    }\n\n    @Override\n    public @Nullable CommandDescription getCommandDescription(Channel channel,\n            @Nullable CommandDescription originalCommandDescription, @Nullable Locale locale) {\n        List<CommandOption> options = channelOptionsMap.get(channel.getUID());\n        if (options == null) {\n            return null;\n        }\n\n        return CommandDescriptionBuilder.create().withCommandOptions(options).build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Options for Channel Types in OpenHAB\nDESCRIPTION: This XML snippet shows how to define command options for a channel in OpenHAB. It specifies a list of commands that can be sent to a device, which the UI can render as a dropdown or push buttons for user interaction.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<command>\n    <options>\n        <option value=\"ALARM\">Alarm</option>\n        <option value=\"LSELECT\">Long Alarm</option>\n    </options>\n</command>\n```\n\n----------------------------------------\n\nTITLE: Audio Architecture Markdown Documentation\nDESCRIPTION: Markdown documentation explaining the audio architecture components including audio streams, formats, sources, sinks, TTS, and STT services. Includes explanations of each component's role and functionality within the system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/audio.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Audio & Voice\n\nAudio and voice features are an important aspect of any smart home solution as it is a very natural way to interact with the user.\n\nopenHAB has a very modular architecture that enables many different use cases.\nAt its core, there is the notion of an _audio stream_.\nAudio streams are provided by _audio sources_ and consumed by _audio sinks_.\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Description XML Structure\nDESCRIPTION: Complete XML schema for defining configuration descriptions in openHAB. Shows the structure for parameters, parameter groups, options, and filters. Must be placed in the bundle's /OH-INF/config/ folder with .xml extension.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/config-xml.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config-description:config-descriptions\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:config-description=\"https://openhab.org/schemas/config-description/v1.0.0\"\n    xsi:schemaLocation=\"https://openhab.org/schemas/config-description/v1.0.0\n        https://openhab.org/schemas/config-description-1.0.0.xsd\">\n\n  <config-description uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\">\n    <parameter-group name=\"String\">\n      <label>String</label>\n      <description>String</description>\n      <context>String</context>\n      <advanced>{true|false}</advanced>\n    </parameter-group>\n\n    <parameter name=\"String\" type=\"{text|integer|decimal|boolean}\" min=\"Decimal\" max=\"Decimal\" step=\"Decimal\" pattern=\"String\" required=\"{true|false}\" readOnly=\"{true|false}\" multiple=\"{true|false}\" groupName=\"String\" unit=\"A|cd|K|kg|m|mol|s|g|rad|sr|Hz|N|Pa|J|W|C|V|F|Î©|S|Wb|T|H|Cel|lm|lx|Bq|Gy|Sv|kat|m/s2|m2v|m3|kph|%|l|ms|min|h|d|week|y\">\n      <context>{network-address|network-interface|serial-port|password|password-create|color|date|datetime|email|month|week|dayOfWeek|time|tel|url|item|thing|group|tag|service|channel|rule|location}</context>\n      <required>{true|false}</required>\n      <default>String</default>\n      <label>String</label>\n      <description>String</description>\n      <unitLabel>String</unitLabel>\n      <options>\n        <option value=\"String\">String</option>\n      </options>\n      <filter>\n        <criteria name=\"String\">String</criteria>\n      </filter>\n    </parameter>\n  </config-description>\n\n  <config-description uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\">\n    ...\n  </config-description>\n...\n</config-description:config-descriptions>\n```\n\n----------------------------------------\n\nTITLE: Logging Methods in OpenHAB Rules (Java)\nDESCRIPTION: Java signatures and examples for the various logging methods available in rules. Shows how to use logDebug, logInfo, logWarn, and logError to troubleshoot rule execution.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nlogDebug(String loggerName, String format, Object... args)\nlogInfo(String loggerName, String format, Object... args)\nlogWarn(String loggerName, String format, Object... args)\nlogError(String loggerName, String format, Object... args)\n```\n\nLANGUAGE: java\nCODE:\n```\nlogDebug(\"kitchen\", \"Kitchen light turned on\")\n```\n\nLANGUAGE: text\nCODE:\n```\nlog:set DEBUG org.openhab.core.model.script.kitchen\n```\n\n----------------------------------------\n\nTITLE: Updating Thing Status in openHAB Thing Handler\nDESCRIPTION: Shows how to update the status of a Thing in a Thing Handler, including setting the status detail and description.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nupdateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR);\n\n// With additional status description\nupdateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"HTTP 403 - Access denied\");\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Sunrise (Java DSL)\nDESCRIPTION: This Java DSL snippet defines a rule that raises blinds and adjusts temperature when the sun rises. It uses the Astro Binding's channel event to trigger the actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nrule \"Raise the blinds & adjust temperature on sunrise\"\nwhen\n  Channel 'astro:sun:home:rise#event' triggered START\nthen\n  gBlinds.sendCommand(UP)\n  gThermostat.sendCommand(INCREASE)\nend\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Rule Technologies for openHAB\nDESCRIPTION: A table listing different rule technologies compatible with openHAB, including their native support status, language type, and additional notes. The table provides a quick overview for users to compare and choose an appropriate rule engine.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_overview.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                                  | Native             | Language/Graphical | Notes                                    |\n| ----------------------------------------------------- | ------------------ | ------------------ | ---------------------------------------- |\n| [Blockly](rules_blockly.html)                         | :heavy_check_mark: | Graphical          | Only available through the UI            |\n| [GraalVM JavaScript](/addons/automation/jsscripting/) | :heavy_check_mark: | ECMAScript 11      | Enabled by installing an official add-on |\n| [Groovy](/addons/automation/groovyscripting/)         | :heavy_check_mark: | Groovy 3.0         | Enabled by installing an official add-on |\n| [HABApp](https://habapp.readthedocs.io/)              | :x:                | >= Python 3.8      | A third-party solution                   |\n| [JRuby](/addons/automation/jrubyscripting/)           | :heavy_check_mark: | Ruby 3.1           | Enabled by installing an official add-on |\n| [Jython](/addons/automation/jythonscripting)          | :heavy_check_mark: | Python 2.7         | Enabled by installing an official add-on |\n| NodeRed                                               | :x:                | Graphical          | Own UI. A third-party solution           |\n| Nashorn JavaScript                                    | :heavy_check_mark: | ECMAScript 5.1     | Deprecated                               |\n| [RulesDSL](/docs/configuration/rules-dsl.html)        | :heavy_check_mark: | RulesDSL           | Built-in                                 |\n```\n\n----------------------------------------\n\nTITLE: Creating Chromecast Widget in OpenHAB YAML\nDESCRIPTION: A custom widget implementation for controlling Chromecast devices. It includes media controls, volume slider, and display of current media information. The widget uses a prefix parameter to dynamically reference related Items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nuid: chromecast_widget\ntags:\n  - card\nprops:\n  parameters:\n    - description: How all the Items associated with this chromecast starts\n      label: Item prefix\n      name: prefix\n      required: false\n      type: TEXT\n    - description: Title for the widget\n      label: Static Title\n      name: title\n      required: false\n  parameterGroups: []\ntimestamp: Feb 2, 2021, 12:15:54 PM\ncomponent: f7-card\nconfig:\n  title: =props.title\nslots:\n  default:\n    - component: f7-row\n      slots:\n        default:\n          - component: oh-image\n            config:\n              item: =props.prefix+\"_Image\"\n              style:\n                width: 100%\n                height: auto\n    - component: f7-row\n      config:\n        class:\n          - justify-content-left\n      slots:\n        default:\n          - component: f7-col\n            slots:\n              default:\n                - component: Label\n                  config:\n                    class:\n                      - text-align-center\n                    text: =items[props.prefix+\"_MediaArtist\"].state\n          - component: f7-col\n            slots:\n              default:\n                - component: Label\n                  config:\n                    class:\n                      - text-align-center\n                    text: =items[props.prefix+\"_MediaTitle\"].state\n    - component: f7-row\n      config:\n        class:\n          - padding-top\n          - padding-bottom\n      slots:\n        default:\n          - component: f7-col\n            slots:\n              default:\n                - component: oh-player-controls\n                  config:\n                    item: =props.prefix+\"_MediaControl\"\n          - component: f7-col\n            slots:\n              default:\n                - component: oh-slider\n                  config:\n                    item: =props.prefix+\"_Volume\"\n                    min: 0\n                    max: 100\n                    step: 10\n                    unit: \"%\"\n                    label: true\n                - component: oh-button\n                  config:\n                    text: Stop\n                    iconF7: stop\n                    fill: true\n                    color: red\n                    action: command\n                    actionCommand: ON\n                    actionFeedback: Media Stopped\n                    actionItem: =props.prefix+\"_Stop\"\n                    class:\n                      - margin-top\n    - component: f7-row\n      config:\n        class:\n          - justify-content-center\n      slots:\n        default:\n          - component: Label\n            config:\n              text: =items[props.prefix+\"_App\"].state\n```\n\n----------------------------------------\n\nTITLE: Adding openHAB Repository Key on apt-based Systems\nDESCRIPTION: Commands to add the openHAB repository key to package manager on Debian-based systems. This creates the necessary GPG key configuration for secure package verification.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL \"https://openhab.jfrog.io/artifactory/api/gpg/key/public\" | gpg --dearmor > openhab.gpg\nsudo mkdir /usr/share/keyrings\nsudo mv openhab.gpg /usr/share/keyrings\nsudo chmod u=rw,g=r,o=r /usr/share/keyrings/openhab.gpg\n```\n\n----------------------------------------\n\nTITLE: Defining Group Items in openHAB\nDESCRIPTION: This snippet demonstrates how to create a Group Item and associate other Items with it using openHAB's syntax. It shows the creation of a 'groundFloor' Group and two Switch Items that are members of this group.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/items.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGroup groundFloor\nSwitch kitchenLight (groundFloor)\nSwitch livingroomLight (groundFloor)\n```\n\n----------------------------------------\n\nTITLE: Rule Template Definition - JSON\nDESCRIPTION: Complete rule template definition with triggers, conditions, actions and configuration descriptions\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\":\"SampleRuleTemplate\",\n    \"description\":\"Sample Rule Template\",\n    \"tags\":[\n      \"sample\",\n      \"rule\",\n      \"template\"\n    ],\n    \"configDescriptions\":[\n         {\n          \"name\":\"condition_operator\",\n          \"type\": \"TEXT\",\n          \"description\": \"Valid operators are =,>,<,!=\",\n          \"required\": true\n        },\n         {\n          \"name\":\"condition_constraint\",\n          \"type\": \"TEXT\",\n          \"description\": \"Right operand which is compared with the input.\",\n          \"required\": true\n        }\n    ],\n    \"triggers\": [\n      {\n        \"id\": \"CompositeSampleTriggerTemplateID\",\n        \"type\": \"CompositeSampleTrigger\",\n        \"label\": \"Sample Trigger\",\n        \"description\": \"This is a sample composite trigger\"\n      }\n    ],\n    \"conditions\": [\n      {\n        \"id\": \"SampleConditionTemplateID\",\n        \"type\": \"SampleCondition\",\n        \"label\": \"Sample Condition\",\n        \"description\": \"This is a sample condition\",\n        \"configuration\": {\n          \"operator\": \"$condition_operator\",\n          \"constraint\": \"$condition_constraint\"\n        },\n        \"inputs\": {\n          \"conditionInput\": \"CompositeSampleTriggerTemplateID.compositeTriggerOutput\"\n        }\n      }\n    ],\n    \"actions\": [\n      {\n        \"id\": \"CompositeActionTemplateID\",\n        \"type\": \"CompositeSampleAction\",\n        \"label\": \"Sample Action\",\n        \"description\": \"This is a sample action\",\n        \"configuration\": {\n          \"compositeMessage\": \"Hello World!!!\"\n        },\n        \"inputs\": {\n          \"compositeActionInput\": \"CompositeSampleTriggerTemplateID.compositeTriggerOutput\"\n        }\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding openHAB Beta Repository on apt-based Systems\nDESCRIPTION: Command to add the openHAB beta repository to the apt sources list. This repository contains new features that are currently in the testing phase.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho 'deb [signed-by=/usr/share/keyrings/openhab.gpg] https://openhab.jfrog.io/artifactory/openhab-linuxpkg testing main' | sudo tee /etc/apt/sources.list.d/openhab.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unique Instance ID in Java\nDESCRIPTION: Demonstrates how to obtain a unique identifier for external system communication using the org.openhab.core.id bundle.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/tools.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nString uuid = InstanceUUID.get();\n```\n\n----------------------------------------\n\nTITLE: Adding openHAB Unstable Repository on apt-based Systems\nDESCRIPTION: Command to add the openHAB unstable repository to the apt sources list. This repository contains daily snapshot builds with the latest changes, suitable for testing or development purposes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\necho 'deb [signed-by=/usr/share/keyrings/openhab.gpg] https://openhab.jfrog.io/artifactory/openhab-linuxpkg unstable main' | sudo tee /etc/apt/sources.list.d/openhab.list\n```\n\n----------------------------------------\n\nTITLE: Complete Persistence Configuration Example in Java\nDESCRIPTION: This comprehensive example demonstrates a complete persistence configuration file in openHAB, including strategies, filters, and item persistence settings.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n// persistence strategies have a name and definition and are referred to in the \"Items\" section\nStrategies {\n        everyHour : \"0 0 * * * ?\"\n        everyDay  : \"0 0 0 * * ?\"\n}\n\nFilters {\n        fivepercent : > % 5\n        atMostOnceAMinute : T 1 m\n  }\n/*\n * Each line in this section defines for which Item(s) which strategy(ies) should be applied.\n * You can list single items, use \"*\" for all items or \"groupitem*\" for all members of a group\n * Item (excl. the group Item itself).\n */\nItems {\n        // persist the Item state of Heating_Mode and Notifications_Active on every change and restore them from the db at startup\n        Heating_Mode, Notifications_Active: strategy = everyChange, restoreOnStartup\n\n        // additionally, persist all temperature and weather values every hour\n        Temperature*, Weather* : strategy = everyHour\n\n        // persist all items every day, except items in the weather group and the cellar temperature\n        *, !Weather*, !CellarTemperature: strategy = everyDay\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Item State Presentation Formatting in openHAB\nDESCRIPTION: Various examples showing how to format the state presentation for different Item types in openHAB, including temperature, string, date time, number with percentage, and location coordinates.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nNumber:Temperature    Livingroom_Temperature   \"Temperature [%.1f Â°C]\"             // e.g. \"23.5 Â°C\"\nString    Livingroom_TV_Channel    \"Now Playing [%s]\"                  // e.g. \"Lorem ipsum\"\nDateTime  Livingroom_TV_LastUpdate \"Last Update [%1$ta %1$tR]\"         // e.g. \"Sun 15:26\"\nNumber    Livingroom_Clock_Battery \"Battery Charge [%d %%]\"            // e.g. \"50 %\"\nLocation  My_Location              \"My Location [%2$sÂ°N %3$sÂ°E %1$sm]\" // e.g. \"49.26Â°N 123.19Â°E 0m\"\n```\n\n----------------------------------------\n\nTITLE: Creating openHAB Snapshots Repository Configuration for RPM-based Systems\nDESCRIPTION: Repository configuration for snapshot openHAB releases on RPM-based systems. This provides access to daily builds with the latest changes, suitable for testing or development.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n[openHAB-Snapshots]\nname=openHAB Snapshots\nbaseurl=https://openhab.jfrog.io/artifactory/openhab-linuxpkg-rpm/unstable\ngpgcheck=1\ngpgkey=https://openhab.jfrog.io/artifactory/api/gpg/key/public\nenabled=1\n```\n\n----------------------------------------\n\nTITLE: Implementing Bridge-Bound Discovery Service in Java\nDESCRIPTION: Example showing how to implement a discovery service that is bound to a bridge handler using ThingHandlerService and AbstractThingHandlerDiscoveryService. The service is created as a PROTOTYPE component with automatic handler injection.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n@Component(scope = ServiceScope.PROTOTYPE, service = YourBindingDiscoveryService.class)\npublic class <YourBindingDiscoveryService> extends AbstractThingHandlerDiscoveryService<YourBridgeHandler> {\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicStateDescriptionProvider in Java for openHAB\nDESCRIPTION: Complete implementation of a DynamicStateDescriptionProvider that allows runtime modification of channel state options. This provider maintains a map of channel UIDs to state options and overrides the getStateDescription method to provide dynamic state descriptions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = { DynamicStateDescriptionProvider.class, ExampleDynamicStateDescriptionProvider.class })\npublic class ExampleDynamicStateDescriptionProvider implements DynamicStateDescriptionProvider {\n\n    private final Map<ChannelUID, @Nullable List<StateOption>> channelOptionsMap = new ConcurrentHashMap<>();\n\n    /**\n     * For a given channel UID, set a {@link List} of {@link StateOption}s that should be used for the channel, instead\n     * of the one defined statically in the {@link ChannelType}.\n     *\n     * @param channelUID the channel UID of the channel\n     * @param options a {@link List} of {@link StateOption}s\n     */\n    public void setStateOptions(ChannelUID channelUID, List<StateOption> options) {\n        channelOptionsMap.put(channelUID, options);\n    }\n\n    @Override\n    public @Nullable StateDescription getStateDescription(Channel channel, @Nullable StateDescription original,\n            @Nullable Locale locale) {\n        List<StateOption> options = channelOptionsMap.get(channel.getUID());\n        if (options == null) {\n            return null;\n        }\n\n        StateDescriptionFragmentBuilder builder = (original == null) ? StateDescriptionFragmentBuilder.create()\n                : StateDescriptionFragmentBuilder.create(original);\n        return builder.withOptions(options).build().toStateDescription();\n    }\n\n    @Deactivate\n    public void deactivate() {\n        channelOptionsMap.clear();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Build Tools on Arch Linux\nDESCRIPTION: Command to install necessary build tools on Arch Linux for compiling openHAB package from source.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Sy --needed base-devel\n```\n\n----------------------------------------\n\nTITLE: Rule Structure Table in Markdown\nDESCRIPTION: Defines the three main components of an OpenHAB rule using a markdown table format. Shows the structure of triggers, conditions, and actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name        | Rule Part                | Purpose                                                  |\n| ----------- | ------------------------ | -------------------------------------------------------- |\n| `Trigger`   | _When __t__ happens_ | Causes the rule run when the defined event happens.      |\n| `Condition` | _if __c___           | Which condition has to be met that the rule really runs? |\n| `Action`    | _then do __a___      | What should be done when the rule runs?                  |\n```\n\n----------------------------------------\n\nTITLE: Controlling Heating Based on Temperature in Java\nDESCRIPTION: This script snippet shows how to control a heating system based on temperature. It sends an ON command to the Heating item if the Temperature state is below 20.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nif (Temperature.state < 20) {\n    Heating.sendCommand(ON)\n}\n```\n\n----------------------------------------\n\nTITLE: Using openHAB Command Line Interface\nDESCRIPTION: Example usage of the openHAB CLI tool, showing various commands for managing openHAB, including start, stop, backup, and restore operations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nUsage:  openhab-cli command [options]\n\nPossible commands:\n  start [--debug]     -- Starts openHAB in the terminal.\n  stop                -- Stops any running instance of openHAB.\n  status              -- Checks to see if openHAB is running.\n  console             -- Opens the openHAB console.\n  backup [filename]   -- Stores the current configuration of openHAB.\n  restore filename    -- Restores the openHAB configuration from a backup.\n  showlogs            -- Displays the log messages of openHAB.\n  info                -- Displays distribution information.\n```\n\n----------------------------------------\n\nTITLE: Programmatically Creating OpenHAB Rules with RuleRegistry\nDESCRIPTION: Java component that programmatically defines and registers a rule to the RuleRegistry. It creates a rule with triggers, conditions, and actions for a lights automation scenario. Rules added this way can be modified through user interfaces.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\n@Component(immediately=true)\npublic class MyRuleRegistrationComponent {\n    @Reference\n    protected @NonNullByDefault({}) RuleRegistry ruleRegistry;\n\n    @Activated\n    public void activated() {\n        ruleRegistry.add(createACRule());\n    }\n\n    private Rule createACRule() {\n        // initialize the trigger\n        String triggerId = \"LightsSwitchOnRuleTrigger\";\n        List<Trigger> triggers = new ArrayList<Trigger>();\n        triggers.add(new Trigger(triggerId, LightsTriggerType.UID, null));\n\n        // initialize the condition - here the tricky part is the referring into the condition input - trigger output.\n        // The syntax is a similar to the JUEL syntax.\n        Configuration config = new Configuration();\n        config.put(StateConditionType.CONFIG_STATE, \"on\");\n        List<Condition> conditions = new ArrayList<Condition>();\n        Map<String, String> inputs = new HashMap<String, String>();\n        inputs.put(StateConditionType.INPUT_CURRENT_STATE, triggerId + \".\" + StateConditionType.INPUT_CURRENT_STATE);\n        conditions.add(new Condition(\"LightsStateCondition\", StateConditionType.UID, config, inputs));\n\n        // initialize the action - here the tricky part is the referring into the action configuration parameter - the\n        // template configuration parameter. The syntax is a similar to the JUEL syntax.\n        config = new Configuration();\n        config.put(WelcomeHomeActionType.CONFIG_DEVICE, \"Lights\");\n        config.put(WelcomeHomeActionType.CONFIG_RESULT, \"Lights are switched on\");\n        List<Action> actions = new ArrayList<Action>();\n        actions.add(new Action(\"LightsSwitchOnAction\", WelcomeHomeActionType.UID, config, null));\n\n        // initialize the configDescriptions\n        List<ConfigDescriptionParameter> configDescriptions = new ArrayList<ConfigDescriptionParameter>();\n        final ConfigDescriptionParameter device = ConfigDescriptionParameterBuilder\n                .create(WelcomeHomeRulesProvider.CONFIG_UNIT, Type.TEXT).withRequired(true).withReadOnly(true)\n                .withMultiple(false).withLabel(\"Device\").withDescription(\"Device description\").build();\n        final ConfigDescriptionParameter result = ConfigDescriptionParameterBuilder\n                .create(WelcomeHomeRulesProvider.CONFIG_EXPECTED_RESULT, Type.TEXT).withRequired(true)\n                .withReadOnly(true).withMultiple(false).withLabel(\"Result\").withDescription(\"Result description\")\n                .build();\n        configDescriptions.add(device);\n        configDescriptions.add(result);\n\n        // initialize the configuration\n        config = new Configuration();\n        config.put(CONFIG_UNIT, \"Lights\");\n        config.put(CONFIG_EXPECTED_RESULT, \"The lights are switched on.\");\n\n        // create the rule\n        Rule lightsSwitchOn = new Rule(L_UID);\n        lightsSwitchOn.setTriggers(triggers);\n        lightsSwitchOn.setConfigurationDescriptions(configDescriptions);\n        lightsSwitchOn.setConditions(conditions);\n        lightsSwitchOn.setActions(actions);\n\n        // initialize the tags\n        Set<String> tags = new HashSet<String>();\n        tags.add(\"lights\");\n\n        // set the tags\n        lightsSwitchOn.setTags(tags);\n\n        return lightsSwitchOn;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding openHAB User to System Groups in Bash\nDESCRIPTION: Commands to add the openHAB user to necessary system groups for hardware access and audio privileges.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser openhab dialout\nsudo adduser openhab tty\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo adduser openhab audio\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic OSGi Bundle Manifest File in XML\nDESCRIPTION: A simple example of an OSGi manifest file that defines a bundle with its symbolic name, version, execution environment requirements, and package dependencies. The manifest includes both imported and exported packages that the bundle will use and provide.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/osgi.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nManifest-Version: 1.0\nBundle-ManifestVersion: 2\nBundle-Name: Example Plug-in\nBundle-SymbolicName: com.example.myosgi; singleton:=true\nBundle-Version: 1.0.0\nBundle-RequiredExecutionEnvironment: JavaSE-11\nImport-Package: org.example.required\nExport-Package: org.example.provided\n```\n\n----------------------------------------\n\nTITLE: Implementing OSGi Declarative Service with Configuration Admin\nDESCRIPTION: This snippet demonstrates how to create an OSGi Declarative Service component that handles configuration updates using the Configuration Admin service. It shows the usage of @Component, @Activate, @Modified, and @Deactivate annotations, as well as how to handle configuration properties.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/configadmin.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.Map;\n\nimport org.osgi.service.component.ComponentContext;\nimport org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Deactivate;\nimport org.osgi.service.component.annotations.Modified;\nimport org.osgi.service.event.Event;\nimport org.osgi.service.event.EventHandler;\n\n@Component(service = { TimeEventHandler.class, EventHandler.class }, property = { \"event.topics=some/topic\" })\n@NonNullByDefault\npublic class TimeEventHandler implements EventHandler {\n\n    // Use the default formatter\n    private SimpleDateFormat dateFormatter = new SimpleDateFormat();\n\n    @Activate\n    protected void activate(ComponentContext context, Map<String, Object> properties) {\n        modified(properties);\n    }\n\n    /**\n     * This method could be called by multiple threads\n     */\n    @Modified\n    public synchronized void modified(Map<String, Object> properties) {\n        // note, that Config Admin may send an empty configuration\n        if (properties != null) {\n            String pattern = (String) properties.get(\"formatting\");\n            dateFormatter = new SimpleDateFormat(pattern);\n        }\n    }\n\n    @Deactivate\n    protected void deactivate(ComponentContext context, Map<String, Object> properties) {\n        modified(properties);\n    }\n\n    @Override\n    public void handleEvent(@Nullable Event event) {\n        Long timeInMillis = (Long) event.getProperty(\"time\");\n        Date date = new Date(timeInMillis);\n        System.out.println(\"The current time is: \" + dateFormatter.format(date));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Item State Persistence and Restoration in openHAB\nDESCRIPTION: Configuration example showing how to set up persistence strategies for items, including restoration on startup. The code defines two timing strategies (everyHour and everyDay) and specifies two items to be persisted on every change and restored at startup.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nStrategies {\n        everyHour : \"0 0 * * * ?\"\n        everyDay  : \"0 0 0 * * ?\"\n}\n\nItems {\n  item1, item2 : strategy = everyChange, restoreOnStartup\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring openHAB Configuration on macOS\nDESCRIPTION: Commands to restore openHAB configuration from a backup file using the restore script.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd $OPENHAB_HOME\n\nsudo $OPENHAB_RUNTIME/bin/restore $OPENHAB_BACKUPS/myBackup.zip\n```\n\n----------------------------------------\n\nTITLE: Accessing Translated Text with TranslationProvider in Java\nDESCRIPTION: Java code showing how to programmatically retrieve localized text using the TranslationProvider OSGi service. The provider parses files in the OH-INF/i18n folder and caches translations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nString text = i18nProvider.getText(bundleContext.getBundle(), \"my.key\", \"DefaultValue\", Locale.GERMAN);\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET Request with Blockly\nDESCRIPTION: Demonstrates how to send a simple HTTP GET request using Blockly. The block accepts a destination URI as a string.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-http.md#2025-04-09_snippet_0\n\nLANGUAGE: blockly\nCODE:\n```\n![http-get-simple](../images/blockly/blockly-http-get-simple.png)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for openHAB Backup Script on macOS\nDESCRIPTION: Command to show help information for the openHAB backup script.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$OPENHAB_RUNTIME/bin/backup --help\n```\n\n----------------------------------------\n\nTITLE: Default Template for Custom Widget in openHAB MainUI\nDESCRIPTION: This code snippet shows the default template structure for a new custom widget in openHAB. It includes the basic properties, parameters, and configuration settings that form the foundation for any custom widget.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuid: widget_5c7a60b74f\nprops:\n  parameterGroups: []\n  parameters:\n    - name: prop1\n      label: Prop 1\n      type: TEXT\n      description: A text prop\n    - name: item\n      label: Item\n      type: TEXT\n      context: item\n      description: An item to control\ntags: []\ncomponent: f7-card\nconfig:\n  title: '=(props.item) ? \"State of \" + props.item : \"Set props to test!\"'\n  footer: =props.prop1\n  content: =items[props.item].displayState || items[props.item].state\n```\n\n----------------------------------------\n\nTITLE: Defining Auto Update Policy in Channel Type XML\nDESCRIPTION: Example demonstrating how to set auto update policies for channel types and override them in channel definitions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_19\n\nLANGUAGE: xml\nCODE:\n```\n<channel-type id=\"channel-type-id\">\n    <label>Channel with an auto update policy</label>\n    <autoUpdatePolicy>recommend</autoUpdatePolicy>\n</channel-type>\n\n<thing-type id=\"thing-type-id\">\n    <label>Sample Thing</label>\n    <description>Thing type which overrides the auto update policy of a channel</description>\n    <channels>\n      <channel id=\"instance\" typeId=\"channel\">\n        <autoUpdatePolicy>default</autoUpdatePolicy>\n      </channel>\n    </channels>\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Basic Thing Definition in Xtend\nDESCRIPTION: Basic syntax for defining a Thing in openHAB configuration files. Shows the required and optional parameters including binding ID, type ID, thing ID, label, location, and configuration parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_0\n\nLANGUAGE: xtend\nCODE:\n```\nThing <binding_id>:<type_id>:<thing_id> \"Label\" @ \"Location\" [ <parameters> ]\n```\n\n----------------------------------------\n\nTITLE: Restarting NGINX Service\nDESCRIPTION: Command to restart the NGINX service after making configuration changes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for openHAB\nDESCRIPTION: Complete Docker Compose configuration for openHAB with volume mappings, network settings, device mappings, and environment variables.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\nservices:\n\n  frontail:     # place frontail configuration here ... \n  grafana:      # place grafana configuration here ...\n  influxdb:     # place influx configuration here ...\n  zigbee2mqtt:  # place zigbee2mqtt configuration here ..\n  mosquitto:    # place mosquitto configuration here ...\n\n  openhab:\n    depends_on:\n      - frontail\n      - influxdb\n      - grafana\n      - zigbee2mqtt\n    container_name: ${COMPOSE_PROJECT_NAME}-server\n    image: openhab/openhab:4.1.0-debian\n    restart: unless-stopped\n    network_mode: host\n    group_add:\n      - tty\n    volumes:\n      - /etc/localtime:/etc/localtime\n      - /etc/timezone:/etc/timezone\n      - $OPENHAB_CONF/ssh:/openhab/.ssh\n      - $OPENHAB_ADDONS:/openhab/addons\n      - $OPENHAB_CONF:/openhab/conf\n      - $OPENHAB_USERDATA:/openhab/userdata\n    devices:\n      - /dev/serial/by-id/usb-0658_0200-if00:/dev/ttyACM2\n      - /dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller_D-if00-port0:/dev/ttyUSB0\n    environment:\n      - CRYPTO_POLICY=unlimited\n      - EXTRA_JAVA_OPTS=${EXTRA_JAVA_OPTS} \n```\n\n----------------------------------------\n\nTITLE: Installing Apache Utilities for Password Generation\nDESCRIPTION: Command to install apache2-utils package, which includes htpasswd for generating password files.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install apache2-utils\n```\n\n----------------------------------------\n\nTITLE: Defining OpenHAB Add-on Structure in XML\nDESCRIPTION: XML schema for defining an OpenHAB add-on's metadata including its type, name, description, configuration, and discovery methods. The configuration can be either embedded or referenced from another location. Required fields include addon ID, type, and name.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/addon.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<addon:addon id=\"addonID\"\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:addon=\"https://openhab.org/schemas/addon/v1.0.0\"\n    xsi:schemaLocation=\"https://openhab.org/schemas/addon/v1.0.0\n        https://openhab.org/schemas/addon-1.0.0.xsd\">\n\n  <type>String</type>\n  <name>String</name>\n  <description>String</description>\n\n  <service-id>String</service-id>\n\n  <config-description>\n    ...\n  </config-description>\n  OR\n  <config-description-ref uri=\"{addon|thing-type|channel-type|any_other}:addonID:...\" />\n\n  <discovery-methods>\n    ...\n  </discovery-methods>\n\n</addon:addon>\n```\n\n----------------------------------------\n\nTITLE: Handling Refresh Command in ThingHandler with ExpiringCacheAsync\nDESCRIPTION: Shows how to implement the handleCommand method in a ThingHandler using ExpiringCacheAsync for efficient state updates.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/tools.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic void handleCommand(ChannelUID channelUID, Command command) {\n    if (command instanceof RefreshType) {\n        switch (channelUID.getId()) {\n            case CHANNEL_1:\n                cache1.getValue(updater).thenAccept(value -> updateState(CHANNEL_1, value));\n                break;\n            ...\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventHandler in Java for OSGi Event Handling\nDESCRIPTION: This code snippet demonstrates how to create an EventHandler in Java to receive events through the OSGi Event Admin Service. It shows the implementation of the handleEvent method and the use of component properties to specify event topics.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/eventadmin.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage com.example.handler;\n\nimport org.osgi.service.event.Event;\nimport org.osgi.service.event.EventHandler;\nimport org.osgi.service.log.LogService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component(service = {LogEventHandler.class,EventHandler.class}, property = \"event.topics=*\")\npublic class LogEventHandler implements EventHandler {\n    Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @Override\n    public void handleEvent(Event event) {\n        logger.info(\" Received event with topic: {}\", event.getTopic());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing User from NGINX Password File\nDESCRIPTION: Command to remove an existing user from the NGINX password file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo htpasswd -D /etc/nginx/.htpasswd username\n```\n\n----------------------------------------\n\nTITLE: Writing a Mockito Test for MyBindingHandler in Java\nDESCRIPTION: This snippet illustrates how to use Mockito for mocking dependencies in a unit test. It sets up mocks for ThingHandlerCallback and Thing, and verifies interactions with the mocked objects.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/tests.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@ExtendWith(MockitoExtension.class)\npublic class MyBindingHandlerTest {\n\n    private ThingHandler handler;\n\n    private @Mock ThingHandlerCallback callbackMock;\n    private @Mock Thing thingMock;\n\n    @BeforeEach\n    public void setUp() {\n        handler = new MyBindingHandler(thingMock);\n        handler.setCallback(callbackMock);\n    }\n\n    @AfterEach\n    public void tearDown() {\n        // Free any resources, like open database connections, files etc.\n        handler.dispose();\n    }\n\n    @Test\n    public void initializeShouldCallTheCallback() {\n        // we expect the handler#initialize method to call the callbackMock during execution and\n        // pass it the thingMock and a ThingStatusInfo object containing the ThingStatus of the thingMock.\n        handler.initialize();\n\n        // verify the interaction with the callbackMock.\n        // Check that the ThingStatusInfo given as second parameter to the callbackMock was build with the ONLINE status:\n        verify(callbackMock).statusUpdated(eq(thingMock), argThat(arg -> arg.getStatus().equals(ThingStatus.ONLINE)));\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: QuantityType Operations and Conversions in Java\nDESCRIPTION: Examples of working with QuantityType, including unit conversions, comparisons, and arithmetic operations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n// define a QuantityType variable\nvar myTemperature = 20|Â°C\n\n// get units in text\nvar myUnits = myTemperature.getUnit.toString  // gives \"Â°C\"\n\n// convert a quantity state into a different unit:\nvar fahrenheit = myTemperature.toUnit(\"Â°F\")   // will contain quantity 68Â°F\n\n// convert quantity value to DecimalType\nvar myDecimal = new DecimalType(fahrenheit.doubleValue) // myDecimal == 68\nvar myCentigrade = fahrenheit.toUnit(\"Â°C\").toBigDecimal  // 20\n\n// access scalar values as int, double, float\nvar myInt = fahrenheit.intValue\nvar mydouble = fahrenheit.doubleValue\nvar myfloat = fahrenheit.floatValue\n\n// check if a number item state is a QuantityType\nvar isQuantity = myItem.state instanceof QuantityType\n\n// comparing Quantities\n// Tempting ... if (fahrenheit > 10) but NO!! that will not work as expected\nif (fahrenheit > 10|Â°C) { logInfo(\"test\", \"It's warm.\") }\n```\n\n----------------------------------------\n\nTITLE: Creating SSL Certificates Directory\nDESCRIPTION: Command to create directory for storing SSL certificates.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir -p /etc/ssl/certs\n```\n\n----------------------------------------\n\nTITLE: Timer Creation and Management in OpenHAB Rules\nDESCRIPTION: Demonstrates how to create, reschedule and cancel timers in OpenHAB rules. Shows handling of item state changes and timer lifecycle management including error logging.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nvar Timer myTimer = null\n\nrule \"timer example\"\nwhen\n    Item YourItem changed\nthen\n    if (YourItem.state == ON) {\n        if (myTimer !== null) {\n            logInfo(\"rules\", \"Timer rescheduled\")\n            myTimer.reschedule(now.plusMinutes(5))\n        } else {\n            myTimer = createTimer(now.plusMinutes(5), [ |\n                logInfo(\"rules\", \"Timer activated\")\n                //Do something...\n            ])\n            logInfo(\"rules\", \"Timer created\")\n        }\n    } else {\n        logInfo(\"rules\", \"Timer canceled\")\n        myTimer?.cancel()\n        myTimer = null\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Colortemperaturepicker Element in openHAB Sitemap\nDESCRIPTION: Defines a Colortemperaturepicker element for adjusting the color temperature of RGB or RGBW lights.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nColortemperaturepicker item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>]\n```\n\n----------------------------------------\n\nTITLE: Complex HTTP POST Request with Headers and Timeout in Blockly\nDESCRIPTION: Demonstrates a more complex HTTP POST request in Blockly, including setting a custom header and timeout.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-http.md#2025-04-09_snippet_3\n\nLANGUAGE: blockly\nCODE:\n```\n![http-post-complex](../images/blockly/blockly-http-post-complex.png)\n```\n\n----------------------------------------\n\nTITLE: Obtaining Let's Encrypt Certificate\nDESCRIPTION: Example certbot command to obtain SSL certificate using webroot authentication.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo certbot certonly --webroot -w /var/www/mydomain -d mydomain\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Assertion Methods in Java\nDESCRIPTION: This code snippet showcases different assertion methods from JUnit and Hamcrest, providing examples of when to use each type of assertion for different scenarios in unit testing.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/tests.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void assertionsToBeUsed() {\n    // use JUnit assertions for very basic checks:\n    assertNotNull(new Object());\n    assertNull(null);\n\n    boolean booleanValue = true;\n    assertTrue(booleanValue); // test boolean values only, no conditions or constraints\n\n    // use Hamcrest assertions for everything else:\n    assertThat(\"myString\", is(\"myString\"));\n    assertThat(\"myString\", is(instanceOf(String.class)));\n    assertThat(\"myString\", containsString(\"yS\"));\n    assertThat(List.of(\"one\", \"two\"), hasItem(\"two\"));\n    assertThat(List.of(\"one\", \"two\"), hasSize(2));\n\n    // also valuable for null/boolean checks as the error output is advanced:\n    assertThat(null, is(nullValue()));\n    assertThat(new Object(), is(not(nullValue())));\n    assertThat(true, is(not(false)));\n}\n```\n\n----------------------------------------\n\nTITLE: MQTT Bridge Configuration\nDESCRIPTION: Complex example demonstrating MQTT broker bridge configuration with multiple Things and channels including switches, sensors, and status information.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_3\n\nLANGUAGE: xtend\nCODE:\n```\nBridge mqtt:broker:MyMQTTBroker [ host=\"192.168.178.50\", secure=false, username=\"MyUserName\", password=\"MyPassword\"] {\n  Thing topic sonoff_Dual_Thing \"Light_Dual\" @ \"Sonoff\" {\n    Channels:\n      Type switch : PowerSwitch1  [ stateTopic=\"stat/sonoff_dual/POWER1\" , commandTopic=\"cmnd/sonoff_dual/POWER1\", on=\"ON\", off=\"OFF\"]\n      Type switch : PowerSwitch2  [ stateTopic=\"stat/sonoff_dual/POWER2\" , commandTopic=\"cmnd/sonoff_dual/POWER2\", on=\"ON\", off=\"OFF\"]\n      Type string : Version [stateTopic=\"stat/sonoff_dual/STATUS2\", transformationPattern=\"JSONPATH:$.StatusFWR.Version\"]\n      }\n  Thing topic sonoff_TH_Thing \"Light_TH\" @ \"Sonoff\" {\n    Channels:\n      Type switch : PowerSwitch  [ stateTopic=\"stat/sonoff_TH/POWER\", commandTopic=\"cmnd/sonoff_TH/POWER\", on=\"ON\", off=\"OFF\" ]\n      Type string : Version [stateTopic=\"stat/sonoff_TH/STATUS2\", transformationPattern=\"JSONPATH:$.StatusFWR.Version\"]\n      Type number : Temperature [stateTopic=\"tele/sonoff_TH/SENSOR\", transformationPattern=\"JSONPATH:$.AM2301.Temperature\"]\n      Type number : Humidity [stateTopic=\"tele/sonoff_TH/SENSOR\", transformationPattern=\"JSONPATH:$.AM2301.Humidity\"]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete NGINX Server Configuration\nDESCRIPTION: Full NGINX server configuration including SSL, proxy settings, and security headers.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nserver {\n    listen                          80;\n    server_name                     mydomain_or_myip;\n    return 301                      https://$server_name$request_uri;\n}\nserver {\n    listen                          443 ssl;\n    server_name                     mydomain_or_myip;\n\n    # Cross-Origin Resource Sharing.\n    add_header 'Access-Control-Allow-Origin' '*' always;\n    add_header 'Access-Control-Allow_Credentials' 'true' always;\n    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;\n    add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;\n\n    # openHAB 3 api authentication\n    add_header Set-Cookie X-OPENHAB-AUTH-HEADER=1;\n\n    ssl_certificate                 /etc/letsencrypt/live/mydomain/fullchain.pem;\n    ssl_certificate_key             /etc/letsencrypt/live/mydomain/privkey.pem;\n    add_header                      Strict-Transport-Security \"max-age=31536000\";\n\n    location / {\n        proxy_http_version                      1.1;\n        proxy_pass                              http://localhost:8080/;\n        proxy_set_header Host                   $http_host;\n        proxy_set_header X-Real-IP              $remote_addr;\n        proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto      $scheme;\n        proxy_set_header Upgrade                $http_upgrade;\n        proxy_set_header Connection             \"Upgrade\";\n        proxy_set_header Authorization          \"\";\n        satisfy                                 any;\n        allow                                   192.168.0.0/24;\n        allow                                   127.0.0.1;\n        deny                                    all;\n        auth_basic                              \"Username and Password Required\";\n        auth_basic_user_file                    /etc/nginx/.htpasswd;\n    }\n\n    location /.well-known/acme-challenge/ {\n        root                                    /var/www/mydomain;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Item Attributes in Blockly\nDESCRIPTION: This snippet shows how to access various attributes of an Item, such as name, label, state, and tags, using Blockly blocks.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_4\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-getItemAttributes-fix](../images/blockly/blockly-getItemAttributes-fix.png)\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Markdown\nDESCRIPTION: Demonstrates the markdown syntax for displaying keyboard shortcuts for saving settings\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/settings/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>Ctrl</kbd> + <kbd>S</kbd>\n```\n\n----------------------------------------\n\nTITLE: Color Item HSB to RGB Conversion\nDESCRIPTION: Shows how to convert HSBType color values to 8-bit RGB representation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n//Example for conversion to 8-bit representation\n// In rule body\nval red = (MyColorItem.state as HSBType).red / 100 * 255\nval green = (MyColorItem.state as HSBType).green / 100 * 255\nval blue = (MyColorItem.state as HSBType).blue / 100 * 255\n```\n\n----------------------------------------\n\nTITLE: NGINX Configuration for openHAB Authentication and SSL Proxy\nDESCRIPTION: NGINX server configuration that implements HTTP to HTTPS redirection and basic authentication for openHAB. It includes CORS headers, allows local network access without authentication, and requires authentication for external access.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n# openHAB NGINX config\n\nserver {\n    listen                          2020; #This is simply an unused port, it can be any number\n\n    server_name                     your_domain.com;\n\n    return 301                      https://$server_name$request_uri;\n}\n\nserver {\n    listen                          7443 ssl; #This is simply an unused port, it can be any number\n    server_name                     your_domain.com;\n\n    add_header 'Access-Control-Allow-Origin' '*' always;\n    add_header 'Access-Control-Allow_Credentials' 'true' always;\n    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;\n    add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;\n    add_header Set-Cookie X-OPENHAB-AUTH-HEADER=1;\n\n    location / {\n        proxy_http_version                      1.1;\n        proxy_pass                              https://localhost:8443/; #Update the port number if needed\n        proxy_set_header Host                   $http_host;\n        proxy_set_header X-Real-IP              $remote_addr;\n        proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto      $scheme;\n        proxy_set_header Upgrade                $http_upgrade;\n        proxy_set_header Connection             \"Upgrade\";\n        proxy_set_header Authorization          \"\";\n        satisfy                                 any;\n        allow                                   192.168.1.0/24;\n        allow                                   127.0.0.1;\n        deny                                    all;\n        auth_basic                              \"Username and Password Required\";\n        auth_basic_user_file                    /volume1/openHAB/userdata/.htpasswd; #Update with your userdata folder if different\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Air Conditioner Action Type in OpenHAB\nDESCRIPTION: Implements an action type for controlling an air conditioner with multiple power levels based on temperature thresholds. It accepts temperature input and includes configuration for different temperature-based activation levels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class AirConditionerActionType extends ActionType {\n    public static final String UID = \"AirConditionerActionType\";\n\n    public static final String CONFIG_LEVEL1_MIN_TEMP = \"level1_min_temp\";\n    public static final String CONFIG_LEVEL2_MIN_TEMP = \"level2_min_temp\";\n\n    public static ActionType initialize() {\n        final ConfigDescriptionParameter temp1 = ConfigDescriptionParameterBuilder.create(CONFIG_LEVEL1_MIN_TEMP, Type.INTEGER)\n                .withRequired(true).withReadOnly(true).withMultiple(false).withLabel(\"Temperature for level 1\")\n                .withDescription(\"Level 1 on the given temperature in Celsius\").build();\n        final ConfigDescriptionParameter temp2 = ConfigDescriptionParameterBuilder.create(CONFIG_LEVEL2_MIN_TEMP, Type.INTEGER)\n                .withRequired(true).withReadOnly(true).withMultiple(false).withLabel(\"Temperature for level 2\")\n                .withDescription(\"Level 2 on the given temperature in Celsius\").build();\n        List<ConfigDescriptionParameter> config = new ArrayList<ConfigDescriptionParameter>();\n        config.add(temp1);\n        config.add(temp2);\n\n        Input currentTemperature = new Input(TemperatureTriggerType.DATA_CURRENT_TEMPERATURE, Integer.class.getName(), \"Current Temperature\", \"Depending on this temperature input the AC will turn on\", null, true, null, null);\n        List<Input> input = new ArrayList<>();\n        input.add(currentTemperature);\n\n        return new AirConditionerActionType(config, input);\n    }\n\n    public AirConditionerActionType(List<ConfigDescriptionParameter> config, List<Input> input) {\n        super(UID, config, \"Switch an air conditioner\", \"Control an air conditioner. Depending on the configuration and inputs it is switched into different power levels.\", null,\n                Visibility.VISIBLE, input, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Color Item with Hue Channel\nDESCRIPTION: Basic example of defining a Color item linked to a Hue lamp channel, which would be used with other profiles in subsequent examples.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nColor Bedroom_Light { channel=\"hue:0210:1:bulb1:color\" }\n```\n\n----------------------------------------\n\nTITLE: Upgrading openHAB using APT\nDESCRIPTION: This code snippet demonstrates the commands to upgrade openHAB using APT package manager on Debian-based systems. It includes updating the package list, installing openHAB, and optionally purging openHAB2 leftovers.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/migration/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update\nsudo apt install openhab\n\n# Optional: Purge openHAB2 leftovers and reinstall\nsudo apt purge openhab2\nsudo apt install --reinstall openhab\nsudo openhab-cli reset-ownership\n```\n\n----------------------------------------\n\nTITLE: Statistical Calculations on Persisted States in OpenHAB\nDESCRIPTION: Methods for calculating time-weighted statistical values (Riemann sum, average, variance, standard deviation) on persisted Item states across different time ranges. These methods use ZonedDateTime parameters and return State objects.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\n<item>.riemannSumSince(ZonedDateTime)\n<item>.riemannSumUntil(ZonedDateTime)\n<item>.riemannSumBetween(ZonedDateTime, ZonedDateTime)\n<item>.averageSince(ZonedDateTime)\n<item>.averageUntil(ZonedDateTime)\n<item>.averageBetween(ZonedDateTime, ZonedDateTime)\n<item>.varianceSince(ZonedDateTime)\n<item>.varianceUntil(ZonedDateTime)\n<item>.varianceBetween(ZonedDateTime, ZonedDateTime)\n<item>.deviationSince(ZonedDateTime)\n<item>.deviationUntil(ZonedDateTime)\n<item>.deviationBetween(ZonedDateTime, ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for New openHAB Binding Development\nDESCRIPTION: Git command to create and checkout a new branch for binding development. This follows the recommended Git workflow for openHAB contribution.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <mynewbranch>\n```\n\n----------------------------------------\n\nTITLE: Creating a Quantity Block in Blockly\nDESCRIPTION: This snippet demonstrates how to create a Quantity block in Blockly, which combines a value with a unit of measurement. It shows examples of creating quantities from strings, separate value and unit inputs, and from temperature items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-uom.md#2025-04-09_snippet_0\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-quantity](../images/blockly/blockly-quantity.png)\n![blockly-quantity-unit](../images/blockly/blockly-quantity-with-unit.png)\n![blockly-quantity-temperature-item](../images/blockly/blockly-quantity-temp-item.png)\n```\n\n----------------------------------------\n\nTITLE: Fresh Installation of openHAB on YUM/DNF-based Systems\nDESCRIPTION: This code snippet demonstrates how to perform a fresh installation of openHAB on YUM/DNF-based systems. It includes removing the old openHAB2 package and installing the new openHAB package.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/migration/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo dnf remove openhab2\nsudo dnf install openhab\n```\n\n----------------------------------------\n\nTITLE: Play Audio with Volume Workaround - Blockly\nDESCRIPTION: Shows a workaround for cases where playing audio with volume doesn't work correctly on devices like Google Minis. The solution involves setting the volume first using an item channel, then playing the audio after a short delay.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-voice-and-multimedia.md#2025-04-09_snippet_0\n\nLANGUAGE: blockly\nCODE:\n```\n- Add volume item channel for sink device\n- Set volume via item command\n- Wait 500ms\n- Play audio on sink\n```\n\n----------------------------------------\n\nTITLE: Example URL for Add-on Documentation\nDESCRIPTION: Sample URL showing the documentation page for the Network Binding. The ID of the binding can be extracted from the URL path.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.openhab.org/addons/bindings/network/\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Event Types in OpenHAB\nDESCRIPTION: Example of implementing a custom event type by extending AbstractEvent class with proper type definition and data transfer object handling.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/events.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npublic class SunriseEvent extends AbstractEvent {\n\n    public static final String TYPE = SunriseEvent.class.getSimpleName();\n\n    private final SunriseDTO sunriseDTO;\n\n    SunriseEvent(String topic, String payload, SunriseDTO sunriseDTO) {\n        super(topic, payload, null);\n        this.sunriseDTO = sunriseDTO;\n    }\n\n    @Override\n    public String getType() {\n        return TYPE;\n    }\n\n    public SunriseDTO getSunriseDTO() {\n        return sunriseDTO;\n    }\n\n    @Override\n    public String toString() {\n        return \"Sunrise at '\" + getSunriseDTO.getTime() + \"'.'\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring expire Parameter Examples for Items\nDESCRIPTION: Multiple examples showing how to use the expire parameter with Items to trigger automatic updates or commands after a specified period of inactivity. Shows different time formats and ways to specify the expiration behavior.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nPlayer MyPlayer   { expire=\"1h,command=STOP\" }                // send STOP command after one hour\nNumber MyChannel  { channel=\"xxx\", expire=\"5m,state=0\" }      // update state to 0 after five minutes\nString MyMessage  { channel=\"xxx\", expire=\"3m12s,Hello\" }     // update state to Hello after three minutes and 12 seconds\nSwitch MySwitch   { channel=\"xxx\", expire=\"2h\" }              // update state to Undefined two hours after last value\n```\n\n----------------------------------------\n\nTITLE: Configuring expire Parameter Examples for Items\nDESCRIPTION: Multiple examples showing how to use the expire parameter with Items to trigger automatic updates or commands after a specified period of inactivity. Shows different time formats and ways to specify the expiration behavior.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nPlayer MyPlayer   { expire=\"1h,command=STOP\" }                // send STOP command after one hour\nNumber MyChannel  { channel=\"xxx\", expire=\"5m,state=0\" }      // update state to 0 after five minutes\nString MyMessage  { channel=\"xxx\", expire=\"3m12s,Hello\" }     // update state to Hello after three minutes and 12 seconds\nSwitch MySwitch   { channel=\"xxx\", expire=\"2h\" }              // update state to Undefined two hours after last value\n```\n\n----------------------------------------\n\nTITLE: Using Audio Actions in DSL Rules\nDESCRIPTION: Examples of using the playSound() and playStream() functions in DSL rules to control audio playback with various parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nplaySound(\"doorbell.mp3\")\nplaySound(\"doorbell.mp3\", new PercentType(25))\nplaySound(\"sonos:PLAY5:kitchen\", \"doorbell.mp3\")\nplaySound(\"sonos:PLAY5:kitchen\", \"doorbell.mp3\", new PercentType(25))\n\nplayStream(\"example.com\")\nplayStream(\"sonos:PLAY5:kitchen\", \"example.com\")\n```\n\n----------------------------------------\n\nTITLE: Listing Available Add-ons via openHAB Console\nDESCRIPTION: Command to list available online and offline add-ons using the openHAB console. This is an alternative to the feature:list command.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nopenhab:addons list\n```\n\n----------------------------------------\n\nTITLE: Implementing Composite ItemStateChangeTrigger Module Type\nDESCRIPTION: JSON configuration for a composite module type that extends a system module type. This example creates an ItemStateChangeTrigger that wraps a GenericEventTrigger, providing a simpler interface for triggering rules based on item state changes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"uid\":\"ItemStateChangeTrigger\",\n   \"label\":\"Item State Trigger\",\n   \"description\":\"This triggers a rule if an items state changed\",\n   \"configDescriptions\":[\n      {\n         \"name\":\"itemName\",\n         \"type\":\"TEXT\",\n         \"context\":\"item\",\n         \"label\":\"item name\",\n         \"description\":\"the name of the item which's state change should be observed\",\n         \"required\":true\n      }\n   ],\n   \"children\":[\n      {\n         \"id\":\"itemStateChangeTriggerID\",\n         \"type\":\"GenericEventTrigger\",\n         \"configuration\":{\n            \"eventSource\":\"$itemName\",\n            \"eventTopic\":\"openhab/items/*\",\n            \"eventTypes\":\"ItemStateEvent\"\n         }\n      }\n   ],\n   \"outputs\":[\n      {\n         \"name\":\"event\",\n         \"type\":\"org.openhab.core.events.Event\",\n         \"description\":\"the event of the item state change\",\n         \"label\":\"event\",\n         \"reference\":\"itemStateChangeTriggerID.event\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Quantities in Blockly\nDESCRIPTION: This snippet demonstrates how to convert quantities from one unit to another in Blockly. It shows examples of converting watts to kilowatts and how to use the conversion block with an Item.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-uom.md#2025-04-09_snippet_3\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-quantity-conversion](../images/blockly/blockly-quantity-conversion.png)\n\n![blockly-quantity-conversion-item](../images/blockly/blockly-quantity-conversion-item.png)\n```\n\n----------------------------------------\n\nTITLE: Defining Group with State Aggregation in OpenHAB\nDESCRIPTION: Syntax for creating a Group with a specific item type and aggregation function. This allows deriving the Group's state from its member Items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nGroup[:itemtype[:function]] groupname [\"labeltext\"] [<iconname>] [(group1, group2, ...)]\n```\n\n----------------------------------------\n\nTITLE: Applying Topic Filter to WebSocket Events in JSON (JavaScript)\nDESCRIPTION: Example of applying a topic filter to the WebSocket connection. It includes the filter type, topic, payload with filter rules, source, and eventId.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"WebSocketEvent\",\n    \"topic\": \"openhab/websocket/filter/topic\",\n    \"payload\": \"[\\\"openhab/items/*/command\\\", \\\"!openhab/items/MyItem/command\\\"]\",\n    \"source\": \"WebSocketTestInstance\",\n    \"eventId\": \"10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Text Element Definition in openHAB Sitemap\nDESCRIPTION: Defines the Text element which presents data as normal text. Values can be formatted using string formatters and transformations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nText [item=<itemname>] [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>]\n```\n\n----------------------------------------\n\nTITLE: Counting Persisted States in OpenHAB Persistence Service\nDESCRIPTION: Methods for counting the number of persisted states and state changes of an Item within different time ranges. These methods take ZonedDateTime parameters to define the time boundaries and return count values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n<item>.countSince(ZonedDateTime)\n<item>.countUntil(ZonedDateTime)\n<item>.countBetween(ZonedDateTime, ZonedDateTime)\n<item>.countStateChangesSince(ZonedDateTime)\n<item>.countStateChangesUntil(ZonedDateTime)\n<item>.countStateChangesBetween(ZonedDateTime, ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: Examples of Group State Aggregation in OpenHAB\nDESCRIPTION: Various examples of Group Items with different aggregation functions, demonstrating how to create groups for lights, temperatures, and device statuses with derived states.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nGroup:Number                  Lights       \"Active Lights [%d]\"              // e.g. \"2\"\nGroup:Switch:OR(ON,OFF)       Lights       \"Active Lights [%d]\"              // e.g. ON and \"2\"\nGroup:Switch:AND(ON,OFF)      Lights       \"Active Lights [%d]\"              // e.g. ON and \"2\"\nGroup:Switch:XOR(ON,OFF)      Lights       \"Active Lights [%d]\"              // e.g. ON and \"1\"\nGroup:Number:Temperature:AVG  Temperatures \"All Room Temperatures [%.1f Â°C]\" // e.g. \"21.3 Â°C\"\nGroup:DateTime:EARLIEST       LatestUpdate \"Latest Update [%1$tY.%1$tm.%1$tY %1$tH:%1$tM:%1$tS]\"\nGroup:DateTime:LATEST         LastSeen     \"Last Seen [%1$tY.%1$tm.%1$tY %1$tH:%1$tM:%1$tS]\"\nGroup:Number:COUNT(\"OFFLINE\") OfflineDevices \"Offline Devices [%d]\"     // e.g. \"2\"\n```\n\n----------------------------------------\n\nTITLE: EventHandler Service Implementation in Java\nDESCRIPTION: Shows how to implement and register an EventHandler service using DS annotations. Includes topic subscription and event handling.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/osgids.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = {MyService.class, EventHandler.class}, immediate = true, property = { \"event.topics=some/topic\" })\n@NonNullByDefault\npublic class MyService implements EventHandler {\n    @Activate\n    protected void activate(BundleContext context) {\n        System.out.println(\"Bundle is activated!\");\n    }\n\n    @Deactivate\n    protected void deactivate(BundleContext context) {\n        System.out.println(\"Bundle is deactivated!\");\n    }\n\n    @Override\n    public void handleEvent(Event event) {\n        String topic = event.getTopic();\n        System.out.println(\"Received event with topic: \" + topic);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Log Statement Block in OpenHAB Blockly\nDESCRIPTION: Log statement block for sending entries to the OpenHAB log file with a defined severity level. Severity levels include error, warn, info, debug, and trace. Since version 3.3, the attached block is not restricted to string type.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-logging.md#2025-04-09_snippet_1\n\nLANGUAGE: blockly\nCODE:\n```\n![log-statement](../images/blockly/blockly-logging-log.png)\n```\n\n----------------------------------------\n\nTITLE: Defining Temperature Item with Channel Binding in Java\nDESCRIPTION: Example of how to define a Temperature Item in openHAB with a channel binding placeholder. The Item uses the Number:Temperature type with a formatted label showing the temperature in Celsius.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nNumber:Temperature Livingroom_Temperature \"Temperature [%.1f Â°C]\" {channel=\"...\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Label, Value, and Icon Colors in openHAB Sitemap\nDESCRIPTION: This snippet demonstrates the syntax for setting conditional colors for labels, values, and icons in an openHAB sitemap. It shows how to use comparison operators and combine multiple conditions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nlabelcolor=[item_name operator value = \"color\", item_name operator value AND item_name operator value = \"color\", ... ]\nvaluecolor=[item_name operator value = \"color\", item_name operator value AND item_name operator value = \"color\", ... ]\niconcolor=[item_name operator value = \"color\", item_name operator value AND item_name operator value = \"color\",... ]\n```\n\n----------------------------------------\n\nTITLE: Processing Item Tags and Groups in Blockly\nDESCRIPTION: This snippet shows how to handle Item attributes that return arrays (tags and groups) using a for-loop in Blockly.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_6\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-specialArrayHandling](../images/blockly/blockly-specialArrayHandling.png)\n```\n\n----------------------------------------\n\nTITLE: Listing OpenHAB Start Levels in Plain Text\nDESCRIPTION: This snippet provides a list of OpenHAB start levels and their descriptions. It shows the different stages of the system startup process and what happens at each level.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n00 - OSGi framework has been started.\n10 - OSGi application start level has been reached, i.e. bundles are activated.\n20 - Model entities (items, things, links, persist config) have been loaded, both from db as well as files.\n30 - Item states have been restored from persistence service, where applicable.\n40 - Rules are loaded and parsed, both from db as well as dsl and script files.\n50 - Rule engine has executed all \"system started\" rules and is active.\n70 - User interface is up and running. (planned, not included yet)\n80 - All things have been initialized. (planned, not included yet)\n100 - Startup is fully complete.\n```\n\n----------------------------------------\n\nTITLE: Using the autoupdate Parameter with Channel Binding\nDESCRIPTION: Example showing how to use the autoupdate parameter when linking an Item to a channel. Setting autoupdate to false prevents openHAB from automatically updating the Item state after sending a command.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nSwitch Garage_Gate {channel=\"xxx\", autoupdate=\"false\"}\n```\n\n----------------------------------------\n\nTITLE: Implementing Polling in openHAB Thing Handler\nDESCRIPTION: Shows how to set up a polling job in a Thing Handler's initialize method and cancel it in the dispose method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void initialize() {\n    pollingJob = scheduler.scheduleWithFixedDelay(this::pollingCode, 0, 30, TimeUnit.SECONDS);\n}\n\nprivate void pollingCode() {\n    // execute some binding specific polling code\n}\n\n@Override\npublic void dispose() {\n    final job = pollingJob;\n    if (job != null) {\n        job.cancel(true);\n        pollingJob = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Source Filter to WebSocket Events in JSON (JavaScript)\nDESCRIPTION: Example of applying a source filter to the WebSocket connection. It includes the filter type, topic, payload with source names to exclude, source, and eventId.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"WebSocketEvent\",\n    \"topic\": \"openhab/websocket/filter/source\",\n    \"payload\": \"[\\\"WebSocketTestInstance\\\", \\\"RuleEngineImpl\\\"]\",\n    \"source\": \"WebSocketTestInstance\",\n    \"eventId\": \"10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Rule to Toggle Light with Serial Button\nDESCRIPTION: Example of a rule that toggles a light when a button is pressed. This demonstrates the traditional approach before using profiles.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nwhen\n    Channel \"serialbutton:button:mybutton:button\" triggered PRESSED\nthen\n    if (Bedroom_Light.getStateAs(OnOffType) != ON)\n        Bedroom_Light.sendCommand(ON)\n    else\n        Bedroom_Light.sendCommand(OFF)\nend\n```\n\n----------------------------------------\n\nTITLE: Time-Based Trigger Syntax in Rules DSL\nDESCRIPTION: Syntax for time-based triggers in Rules DSL that can execute rules at specific times. Supports predefined times (midnight, noon), item-based times with optional offsets, and cron expressions for complex scheduling.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nTime is midnight\nTime is noon\nTime is <item> [timeOnly] [offset=N]\nTime cron \"<cron expression>\"\n```\n\n----------------------------------------\n\nTITLE: Let's Encrypt Domain Validation Configuration\nDESCRIPTION: NGINX configuration for Let's Encrypt domain validation endpoint.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n  location /.well-known/acme-challenge/ {\n    root                            /var/www/mydomain;\n  }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Item State Logging in Blockly\nDESCRIPTION: This snippet illustrates an incorrect attempt to log an Item's state directly, which is not possible in openHAB 3 Blockly.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_2\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-getItemStateDoesntFit](../images/blockly/blockly-getItemStateDoesntFit.png)\n```\n\n----------------------------------------\n\nTITLE: Listing Text-to-Speech Services using Console Command\nDESCRIPTION: Console command to list all available Text-to-Speech services in the openHAB system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice ttsservices\n* VoiceRSS (voicerss)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenHAB Presence Condition Handler\nDESCRIPTION: Java implementation of a condition handler that evaluates temperature conditions based on configured operators and thresholds.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic class PresenceConditionHandler extends BaseModuleHandler<Condition> implements ConditionHandler {\n    final ItemRegistry itemRegistry;\n    public PresenceConditionHandler(Condition module, ItemRegistry itemRegistry) {\n        super(module);\n        this.itemRegistry = itemRegistry;\n    }\n\n    @Override\n    public boolean isSatisfied(Map<String, Object> context) {\n        Number left = (Number) context.get(TemperatureConditionType.INPUT_CURRENT_TEMPERATURE);\n        Number right = (Number) module.getConfiguration().get(TemperatureConditionType.CONFIG_TEMPERATURE);\n        String operator = (String) module.getConfiguration().get(TemperatureConditionType.CONFIG_OPERATOR);\n        if (TemperatureConditionType.OPERATOR_HEATING.equals(operator)) {\n            if (left != null && right != null && left.intValue() < right.intValue()) {\n                return true;\n            }\n        } else if (TemperatureConditionType.OPERATOR_COOLING.equals(operator)) {\n            if (left != null && right != null && left.intValue() > right.intValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Condition Module Types Definition\nDESCRIPTION: JSON definition of condition module types with their configuration parameters and input requirements.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n   \"conditions\":[\n      {\n         \"uid\":\"SampleCondition\",\n         \"label\":\"SampleCondition label\",\n         \"description\":\"Sample Condition description\",\n         \"configDescriptions\":[\n            {\n               \"name\":\"operator\",\n               \"type\":\"TEXT\",\n               \"description\":\"Valid operators are =,>,<,!=\",\n               \"required\":true\n            },\n            {\n               \"name\":\"constraint\",\n               \"type\":\"TEXT\",\n               \"description\":\"Right operand which is compared with the input.\",\n               \"required\":true\n            }\n         ],\n         \"inputs\":[\n            {\n               \"name\":\"conditionInput\",\n               \"type\":\"java.lang.String\",\n               \"label\":\"ConditionInput label\",\n               \"description\":\"Left operand which will be evaluated.\",\n               \"required\":true\n            }\n         ]\n      }\n   ]\n```\n\n----------------------------------------\n\nTITLE: Using Text-to-Speech with Console Command\nDESCRIPTION: Console command to convert text to speech and play it through the default audio sink using the default voice.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice say Hello world!\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX for openHAB Reverse Proxy\nDESCRIPTION: NGINX server block configuration for setting up a reverse proxy for openHAB. Includes server name, CORS headers, and proxy settings.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nserver {\n    listen                                    80;\n    server_name                               mydomain_or_myip;\n\n    # Cross-Origin Resource Sharing\n    add_header 'Access-Control-Allow-Origin' '*' always;\n    add_header 'Access-Control-Allow_Credentials' 'true' always;\n    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range' always;\n    add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;\n\n    location / {\n        proxy_http_version                    1.1;\n        proxy_pass                            http://localhost:8080/;\n        proxy_set_header Host                 $http_host;\n        proxy_set_header X-Real-IP            $remote_addr;\n        proxy_set_header X-Forwarded-For      $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto    $scheme;\n        proxy_read_timeout                    3600;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Condition Type in OpenHAB\nDESCRIPTION: Defines a condition type that checks for presence based on an item's state. It includes configuration for the presence item and provides output for the presence state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class PresenceConditionType extends ConditionType {\n   public static final String UID = \"PresenceConditionType\";\n   public static final String DATA_PRESENCE = \"presence\";\n   public static final String CONFIG_PRESENCE_ITEM = \"presence\";\n\n   public static ConditionType initialize() {\n      List<ConfigDescriptionParameter> config = new ArrayList<>();\n\n      ConfigDescriptionParameter presenceItemConfig;\n      presenceItemConfig = ConfigDescriptionParameterBuilder.create(CONFIG_PRESENCE_ITEM, Type.TEXT)\n         .withRequired(true).withReadOnly(true).withMultiple(false).withLabel(\"Presence item\")\n         .withDescription(\"The item that decides if this condition is satisfied\").build();\n\n      config.add(presenceItemConfig);\n\n      List<Input> input = new ArrayList<>();\n\n      List<Output> output = new ArrayList<>();\n      Output state = new Output(DATA_PRESENCE, \"State\", \"Presence\",\n         \"Indicates the state of the presence detector via an ON or OFF\", null, null, null);\n      output.add(state);\n\n      return new PresenceConditionType(config, input, output);\n   }\n\n   public PresenceConditionType(List<ConfigDescriptionParameter> config, List<Input> input, List<Input> output) {\n      super(UID, config, \"Presence Condition\", \"This condition is satisfied when the configure presence item is in ON state\", output, Visibility.VISIBLE, input);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Presence Condition Type in OpenHAB\nDESCRIPTION: Defines a condition type that checks for presence based on an item's state. It includes configuration for the presence item and provides output for the presence state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class PresenceConditionType extends ConditionType {\n   public static final String UID = \"PresenceConditionType\";\n   public static final String DATA_PRESENCE = \"presence\";\n   public static final String CONFIG_PRESENCE_ITEM = \"presence\";\n\n   public static ConditionType initialize() {\n      List<ConfigDescriptionParameter> config = new ArrayList<>();\n\n      ConfigDescriptionParameter presenceItemConfig;\n      presenceItemConfig = ConfigDescriptionParameterBuilder.create(CONFIG_PRESENCE_ITEM, Type.TEXT)\n         .withRequired(true).withReadOnly(true).withMultiple(false).withLabel(\"Presence item\")\n         .withDescription(\"The item that decides if this condition is satisfied\").build();\n\n      config.add(presenceItemConfig);\n\n      List<Input> input = new ArrayList<>();\n\n      List<Output> output = new ArrayList<>();\n      Output state = new Output(DATA_PRESENCE, \"State\", \"Presence\",\n         \"Indicates the state of the presence detector via an ON or OFF\", null, null, null);\n      output.add(state);\n\n      return new PresenceConditionType(config, input, output);\n   }\n\n   public PresenceConditionType(List<ConfigDescriptionParameter> config, List<Input> input, List<Input> output) {\n      super(UID, config, \"Presence Condition\", \"This condition is satisfied when the configure presence item is in ON state\", output, Visibility.VISIBLE, input);\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing OpenHAB Voice Dialogs via Command Line\nDESCRIPTION: Commands for starting, listing, registering, stopping, and unregistering dialogs in OpenHAB. Also includes commands for single-shot dialogs and transcription.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# start a dialog\nopenhab> openhab:voice startdialog --source javasound --sink sonos:PLAY5:kitchen --hlis system,rulehli --stt voicerss --tts voskstt --keyword terminator --ks rustpotterks\n# list running dialogs\nopenhab> openhab:voice dialogs\n# register a dialog (same as start but persisting the configuration to spawn dialog on restart or temporal service unavailability).\nopenhab> openhab:voice registerdialog --source javasound --sink sonos:PLAY5:kitchen --hlis system,rulehli --tts voicerss --stt voskstt --keyword terminator --ks rustpotterks\n# list dialogs registrations\nopenhab> openhab:voice dialogregs\n# stop a dialog\nopenhab> openhab:voice stopdialog --source javasound\n# unregister a dialog, and stop if running\nopenhab> openhab:voice unregisterdialog --source javasound\n# run single shot dialog\nopenhab> openhab:voice listenandanswer --source javasound --sink sonos:PLAY5:kitchen --hlis system,rulehli --tts voicerss --stt voskstt --keyword terminator --ks rustpotterks\n# run transcription and output to the console\nopenhab> openhab:voice transcribe --source javasound --stt voskstt\n```\n\n----------------------------------------\n\nTITLE: Listing Available Speech-to-Text Services via Console\nDESCRIPTION: Console command to check which Speech-to-Text services are available in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice sttservices\n* Vosk (voskstt)\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Value Fetching for ExpiringCacheAsync\nDESCRIPTION: Demonstrates how to implement a Supplier for ExpiringCacheAsync that handles asynchronous device state updates using CompletableFuture.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/tools.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass FetchValueFromDevice implements Supplier<CompletableFuture<double>>, DeviceStateUpdateListener {\n    CompletableFuture<double> c;\n\n    @Override\n    CompletableFuture<double> get() {\n       if (c != null) {\n          c = new CompletableFuture<double>();\n          doSuperImportantAsyncStuffHereToGetRefreshedValue( (DeviceStateUpdateListener)this );\n       }\n       return c;\n    }\n\n    // Here you process the callback from your device refresh method\n    @Override\n    void asyncCallbackFromDeviceStateRefresh(double newValue) {\n       // Notify the future that we have something\n       if (c != null) {\n          c.complete(newValue);\n          c = null;\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Location Item Point Type Operations in Java\nDESCRIPTION: Examples of creating and handling PointType objects for Location items, including initialization from coordinates and string representations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n// Creation\nval location = new PointType(new DecimalType(50.12345), new DecimalType(10.12345))\n// Creation from String; ATTENTION: do not add space after comma\nval PointType home = new PointType(\"12.121212,123.123123\")\n\n// Loading from an Item\nval PointType location = Device_Coordinates.state as PointType\n```\n\n----------------------------------------\n\nTITLE: Listing Available Keyword Spotter Services via Console\nDESCRIPTION: Console command to check which Keyword Spotter services are available in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice keywordspotters\n* Porcupine (porcupineks)\n```\n\n----------------------------------------\n\nTITLE: Checking Available Audio Sources using Console Command\nDESCRIPTION: Console command to list all available audio sources in the openHAB system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:audio sources\n* System Microphone (javasound)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Debug Logging in Java for OpenHAB\nDESCRIPTION: Demonstrates incorrect usage of debug logging, which should not be used as a replacement for framework update methods.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nvoid myFun() {\n    logger.debug(\"And now the thing goes online\"); // DON'T, DON'T, really DON'T do that\n    updateState(ThingState.ONLINE);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ephemeris Settings in ephemeris.cfg\nDESCRIPTION: This snippet demonstrates how to configure Ephemeris settings in the ephemeris.cfg file, including country, region, and custom daysets.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ncountry=de\nregion=nw\ndayset-workday=[MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY]\ndayset-weekend=[SATURDAY,SUNDAY]\ndayset-trash=[MONDAY]\n```\n\n----------------------------------------\n\nTITLE: Testing Human Language Interpreter via Console\nDESCRIPTION: Console command to test the default human language interpreter in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice interpret turn on the light\n```\n\n----------------------------------------\n\nTITLE: Method Injection Service Component in Java\nDESCRIPTION: Illustrates method injection pattern for service component implementation with explicit set/unset methods for service references. Includes lifecycle handling.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/osgids.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = MyService.class, immediate = true)\n@NonNullByDefault\npublic class MyService {\n    protected @NonNullByDefault({}) ItemRegistry itemRegistry;\n\n    @Activate\n    protected void activate(BundleContext context) {\n        System.out.println(\"Bundle is activated!\");\n    }\n\n    @Deactivate\n    protected void deactivate(BundleContext context) {\n        System.out.println(\"Bundle is deactivated!\");\n    }\n\n    @Reference\n    public void setItemRegistry(ItemRegistry itemRegistry) {\n        this.itemRegistry = itemRegistry;\n        System.out.println(\"Log service is available!\");\n    }\n\n    public void unsetItemRegistry(ItemRegistry itemRegistry) {\n        System.out.println(\"Log service is not available anymore!\");\n        this.itemRegistry = null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Persistence Strategies in Java\nDESCRIPTION: This snippet shows how to define named persistence strategies using cron expressions in openHAB's persistence configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nStrategies {\n  <strategyName1> : \"cronexpression1\"\n  <strategyName2> : \"cronexpression2\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Last Item Change with Default Value in Java\nDESCRIPTION: Code to get the last change timestamp of a Humidity Item from the default persistence service, defaulting to current time if the last state differs from current state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nvar lastChange = Humidity.lastChange()\nlastChange = (lastChange !== null) ? lastChange : now\n```\n\n----------------------------------------\n\nTITLE: Inline DSL Script Transformation Example\nDESCRIPTION: Shows how to use an inline DSL script transformation that calculates string length without creating a separate file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nDSL(|\"String has \" + input.length + \" characters\")\n```\n\n----------------------------------------\n\nTITLE: Basic String-based Item Command\nDESCRIPTION: Example showing how to send a command to an item using a dynamically constructed item name string.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nval index = 5\nsendCommand(\"My_Lamp_\" + index, ON)\n```\n\n----------------------------------------\n\nTITLE: Creating udev Rules for Persistent Serial Device Names in Linux\nDESCRIPTION: This shell snippet demonstrates how to create persistent device names for USB serial devices using udev rules in Linux. It maps vendor and product IDs along with serial numbers to consistent symlinks that won't change after system reboot.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/serial.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nSUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0403\", ATTRS{idProduct}==\"6001\", ATTRS{serial}==\"AE01F0PD\", SYMLINK+=\"ttyMySensors\"\nSUBSYSTEM==\"tty\", ATTRS{idVendor}==\"10c4\", ATTRS{idProduct}==\"ea60\", ATTRS{serial}==\"0001\", SYMLINK+=\"ttyCulStick\"\n```\n\n----------------------------------------\n\nTITLE: Updating Speedtest Summary at Start Level in Java\nDESCRIPTION: This rule logs the state of Speedtest_Summary when the system reaches start level 50. It demonstrates how to use the 'System reached start level' trigger and access item states.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nrule \"Speedtest update\"\nwhen\n    System reached start level 50\nthen\n    logInfo(\"Speedtest\", \"We now have the following state right after startup: \" + Speedtest_Summary.state)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Discovery Results with Localized Labels in Java\nDESCRIPTION: Java code demonstrating how to create a discovery result with a localized label. The code uses a builder pattern to create a discovery result with properties, bridge, and a label that can be translated.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nDiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n        .withBridge(bridgeUID).withLabel(\"Local Weather And Forecast\").build();\n```\n\n----------------------------------------\n\nTITLE: String Item State Handling in Java and Shell\nDESCRIPTION: Examples of converting String item states and parsing hexadecimal values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n//Loading from an Item\nval stateAsString = MyStringItem.state.toString\n```\n\nLANGUAGE: shell\nCODE:\n```\n//Loading hexvalue from string\nval itemvalue = new java.math.BigDecimal(Integer::parseInt(myHexValue, 16))\n```\n\n----------------------------------------\n\nTITLE: Hex Value Conversions\nDESCRIPTION: Examples of converting between hexadecimal values and numeric types.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n// to convert a hex_code (a number expressed in hexadecimals) to a Number type\nval dimVal =  Integer.parseInt(hex_code, 16) as Number\n//for very large_hex_codes use\nval dimVal = Long.valueOf(large_hex_code, 16).longValue() as Number\n\n// and here an additional example to convert an integer_value to hex_code string\nvar String hex = Long.toHexString(integer_value);\n```\n\n----------------------------------------\n\nTITLE: Send Notification to Specific User via Blockly\nDESCRIPTION: Sends a notification to a specific openHAB cloud user via their email address. Requires the user to have an openHAB cloud account and the mobile app installed. This functionality uses cloud notification rather than the mail binding.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-notifications.md#2025-04-09_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Running Maven Clean Install for openHAB Add-on\nDESCRIPTION: This command runs a clean installation of the project, including all necessary builds and checks. It should be executed from the repository root to ensure the build works smoothly.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Typical UI Component Structure in YAML\nDESCRIPTION: Shows the basic structure of a UI component in YAML format, including the component type, configuration properties, and slots for child components.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/building-pages.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponent: oh-type\nconfig:\n  prop1: value1\n  prop2: value2\n  prop3: =expression\n  ...\nslots:\n  default:\n    - component: ...\n      config: ...\n      slots: ...\n    - component: ...\n  anotherSlot:\n    - component: ...\n      ...\n  ...\n```\n\n----------------------------------------\n\nTITLE: Generic Event Trigger Configuration - JSON\nDESCRIPTION: System module type definition for GenericEventTrigger with configuration parameters and output definitions\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"uid\":\"GenericEventTrigger\",\n   \"label\":\"Basic Event Trigger\",\n   \"description\":\"Triggers Rules on Events\",\n   \"configDescriptions\": [\n      {\n         \"name\": \"topic\",\n         \"type\": \"TEXT\",\n         \"label\": \"Topic\",\n         \"description\": \"the topic, as a file-system style glob (*, ** and {} operators). will match all events if empty\",\n         \"required\": true,\n         \"default\": \"\"\n      },\n      {\n         \"name\": \"source\",\n         \"type\": \"TEXT\",\n         \"label\": \"Source\",\n         \"description\": \"the source of the event (e.g. org.openhab.core.expire, etc.). will match all events if empty\",\n         \"required\": true,\n         \"default\": \"\"\n      },\n      {\n         \"name\": \"types\",\n         \"type\": \"TEXT\",\n         \"label\": \"Event Type\",\n         \"description\": \"the event type the trigger should listen to. multiple types can be specified comma-separated. will match all events if empty\",\n         \"required\": true,\n         \"default\": \"\"\n      },\n      {\n         \"name\": \"payload\",\n         \"type\": \"TEXT\",\n         \"label\": \"Event Payload\",\n         \"description\": \"A regex to match the event's serialized payload. will match all events if empty\",\n         \"required\": true,\n         \"default\": \"\"\n      }\n   ],\n   \"outputs\":[\n      {\n         \"name\":\"event\",\n         \"type\":\"org.openhab.core.events.Event\",\n         \"label\":\"Event\",\n         \"description\":\"The events which was sent.\",\n         \"reference\":\"event\"\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring mDNS and UPnP Discovery for Philips Hue Binding in OpenHAB\nDESCRIPTION: This XML snippet demonstrates how to configure mDNS and UPnP discovery methods for the Philips Hue binding in OpenHAB. It specifies the binding type, name, description, and connection type, along with the discovery parameters for both mDNS and UPnP services.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/addon.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<addon:addon id=\"bindingID\"\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:addon=\"https://openhab.org/schemas/addon/v1.0.0\"\n    xsi:schemaLocation=\"https://openhab.org/schemas/addon/v1.0.0\n        https://openhab.org/schemas/addon-1.0.0.xsd\">\n\n  <type>binding</type>\n  <name>hue Binding</name>\n  <description>The hue Binding integrates the Philips hue system. It allows to control hue bulbs.</description>\n\n  <connection>local</connection>\n\n  <discovery-methods>\n    <discovery-method>\n      <serviceType>mdns</serviceType>\n      <discovery-parameters>\n        <discovery-parameter>\n          <name>mdnsServiceType</name>\n          <value>_hue._tcp.local.</value>\n        </discovery-parameter>\n      </discovery-parameters>\n    </discovery-method>\n    <discovery-method>\n      <service-type>upnp</service-type>\n      </match-properties>\n        <match-property>\n          <name>modelName</name>\n          <regex>Philips hue bridge</regex>\n        </match-property>\n      </match-properties>\n    </discovery-method>\n  </discovery-methods>\n\n</addon:addon>\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Rules DSL\nDESCRIPTION: Examples of variable declarations in Rules DSL that can be accessed by all rules in a file. Variables can be declared with or without initial values and can be modifiable or read-only.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// a variable with an initial value. Note that the variable type is automatically inferred\nvar counter = 0\n\n// a read-only value, again the type is automatically inferred\nval msg = \"This is a message\"\n\n// an uninitialized variable where we have to provide the type (as it cannot be inferred from an initial value)\nvar Number x\n```\n\n----------------------------------------\n\nTITLE: Applying Map and JSON Transformations in Item Labels\nDESCRIPTION: Examples showing how to use MAP, JSONPATH, and JS transformations in the state part of Item labels to present human-readable or processed information.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nContact Livingroom_Window        \"Window [MAP(window_esp.map):%s]\"             {/*Some Binding*/}\nNumber  Kitchen_Temperature_C    \"Temperature [JSONPATH($.temperature):%s Â°C]\" {/*Some Binding*/}\nNumber  Livingroom_Temperature_F \"Temperature [JS(convert-C-to-F.js):%s Â°F]\"   {/*Some Binding*/}\n```\n\n----------------------------------------\n\nTITLE: Executing openHAB as Restricted User in Bash\nDESCRIPTION: Command to start openHAB as the restricted 'openhab' user using sudo and bash.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nsudo su -s /bin/bash -c '/opt/openhab/start.sh' openhab\n```\n\n----------------------------------------\n\nTITLE: Group Element Definition in openHAB Sitemap\nDESCRIPTION: Defines the Group element which creates a clickable entry that reveals a new view showing all group items using the Default element type.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nGroup item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>]\n```\n\n----------------------------------------\n\nTITLE: Defining a Number Temperature Item with State Presentation in openHAB\nDESCRIPTION: Example of a Temperature Item definition with a formatted state presentation that displays the value with one decimal place followed by the Celsius symbol.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nNumber:Temperature Livingroom_Temperature \"Temperature [%.1f Â°C]\"\n```\n\n----------------------------------------\n\nTITLE: String Length Transformation in Ruby\nDESCRIPTION: A JRuby transformation script that calculates the length of an input string using Ruby's string interpolation syntax.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n\"String has #{input.length} characters\"\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Type with Bridge Support in XML\nDESCRIPTION: XML configuration showing how to define a Thing type that can be associated with a bridge, including basic metadata like label, description and category.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    <supported-bridge-type-refs>\n        <bridge-type-ref id=\"bridge-type-id\" />\n    </supported-bridge-type-refs>\n    <label>Sample Thing</label>\n    <description>Some sample description</description>\n    <category>Lightbulb</category>\n    ...\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Configuring Circle Marker in YAML\nDESCRIPTION: Configuration for circle markers using markerConfig property that gets passed to the LCircle component. Used for customizing the appearance and behavior of circle markers on the map.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/map-pages.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmarkerConfig:\n  # Properties passed to LCircle component\n```\n\n----------------------------------------\n\nTITLE: Receiving ItemStateEvent in JSON via WebSocket (JavaScript)\nDESCRIPTION: Example of an ItemStateEvent received from openHAB through the WebSocket connection. It includes the event type, topic, and payload containing the item's state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ItemStateEvent\",\n    \"topic\": \"openhab/items/DTR/state\",\n    \"payload\": \"{\\\"type\\\":\\\"Quantity\\\",\\\"value\\\":\\\"5 MB/s\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Backing Up and Restoring openHAB in Bash\nDESCRIPTION: Commands to create a backup of openHAB configuration and restore from a backup file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nsudo $OPENHAB_RUNTIME/bin/backup\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo $OPENHAB_RUNTIME/bin/backup /path/to/backups/folder/myBackup.zip\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo $OPENHAB_RUNTIME/bin/restore $OPENHAB_BACKUPS/myBackup.zip\n```\n\n----------------------------------------\n\nTITLE: String Length Transformation in Groovy\nDESCRIPTION: A Groovy transformation script that calculates the length of an input string using Groovy's string interpolation syntax.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\n\"String has ${input.length()} characters\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Item with Icon in openHAB\nDESCRIPTION: Example showing how to associate an icon with a Switch Item using angle brackets to specify the icon name.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nSwitch Livingroom_Light \"Livingroom Ceiling Light\" <switch>\n```\n\n----------------------------------------\n\nTITLE: Sending WebSocket Heartbeat in JSON (JavaScript)\nDESCRIPTION: Example of sending a heartbeat message to keep the WebSocket connection alive. It includes the event type, topic, payload, and source.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"WebSocketEvent\",\n    \"topic\": \"openhab/websocket/heartbeat\",\n    \"payload\": \"PING\",\n    \"source\": \"WebSocketTestInstance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Types for ACME Weather Binding in XML\nDESCRIPTION: This XML snippet defines thing types, channels, and config parameters for an ACME Weather binding. It includes definitions for weather information, precipitation, and temperature channels with various options and configurations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_5\n\nLANGUAGE: XML\nCODE:\n```\n<thing:thing-descriptions bindingId=\"acmeweather\">\n    <thing-type id=\"weather\">\n        <label>Weather Information</label>\n        <description>Provides various weather data from the ACME Weather Service.</description>\n        <channels>\n            <channel id=\"precipitation\" typeId=\"precipitation\" />\n            <channel id=\"temperature\" typeId=\"temperature\" />\n            <channel id=\"minTemperature\" typeId=\"temperature\">\n                <label>Min. Temperature</label>\n                <description>Minimum temperature in degrees Celsius (metric) or Fahrenheit (imperial).</description>\n            </channel>\n        </channels>\n        <config-description>\n            <parameter name=\"location\" type=\"text\">\n                <label>Location</label>\n                <description>Location for the weather information. Syntax is WOEID, see https://en.wikipedia.org/wiki/WOEID.</description>\n                <required>true</required>\n            </parameter>\n        </config-description>\n    </thing-type>\n    <channel-type id=\"precipitation\">\n        <item-type>String</item-type>\n        <label>Precipitation</label>\n        <description>Current precipitation (dry, rain, snow).</description>\n        <state readOnly=\"true\" pattern=\"%s\">\n            <options>\n                <option value=\"dry\">dry</option>\n                <option value=\"rain\">rain</option>\n                <option value=\"snow\">snow</option>\n            </options>\n        </state>\n    </channel-type>\n    <channel-type id=\"temperature\">\n        <item-type>Number</item-type>\n        <label>Temperature</label>\n        <description>Current temperature in degrees Celsius (metric) or Fahrenheit (imperial).</description>\n        <state readOnly=\"true\" pattern=\"%d Value\" />\n        <config-description>\n            <parameter name=\"unit\" type=\"text\" required=\"true\">\n                <label>Temperature unit</label>\n                <description>Select the temperature unit.</description>\n                <options>\n                    <option value=\"C\">Degree Celsius</option>\n                    <option value=\"F\">Degree Fahrenheit</option>\n                </options>\n                <default>C</default>\n            </parameter>\n        </config-description>\n    </channel-type>\n    <channel-type id=\"cmd-channel\">\n        <item-type>String</item-type>\n        <label>Device Commands</label>\n        <description>Send one of the defined command options to the device.</description>\n        <command>\n            <options>\n                <option value=\"RESET\">Reset</option>\n                <option value=\"CMD_1\">Command 1</option>\n                <option value=\"CMD_2\">Command 2</option>\n            </options>\n        </command>\n    </channel-type>\n</thing:thing-descriptions>\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Path in Floorplan Page\nDESCRIPTION: Example showing how to specify the URL path for floorplan background images stored in the static directory. Images should be stored in /conf/html/[your directory]/.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/floorplan-pages.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/static/floorplan/FloorPlan3Dsmall.jpg\n```\n\n----------------------------------------\n\nTITLE: Script Command Line Structure Example\nDESCRIPTION: Shows the command line structure for scripts with parameters, illustrating how parameters should be passed when calling scripts from the console.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npath/to/my/script.sh itemState1 itemState2\n```\n\n----------------------------------------\n\nTITLE: Installing Samba and Editing Configuration (Shell)\nDESCRIPTION: Commands to install Samba and open its configuration file for editing. This is the first step in setting up network sharing for openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install samba samba-common-bin\nsudo vim /etc/samba/smb.conf\n```\n\n----------------------------------------\n\nTITLE: English Properties File for Discovery Result Labels\nDESCRIPTION: Properties file defining English labels for discovery results. This file follows the pattern 'discovery.<binding-id>.<thing-type-id>.<bridge-id>.<thing-id>.label' to provide translations for discovery results.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# discovery result\ndiscovery.darksky.weather-and-forecast.api.local.label = Local Weather And Forecast\n```\n\n----------------------------------------\n\nTITLE: Displaying Network Interfaces for UPnP Configuration\nDESCRIPTION: Command to list available network interfaces and their IP addresses to identify the correct interface for UPnP configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n> ip --brief address show\nlo               UNKNOWN        127.0.0.1/8 ::1/128 \neno1             UP             192.168.0.65/24  \neno1.4@eno1      UP             192.168.6.97/24  \ndocker0          DOWN           172.17.0.1/16  \nbr-7406c5aa57f0  UP             172.25.0.1/16  \n```\n\n----------------------------------------\n\nTITLE: Sending HTTP POST Request with Blockly\nDESCRIPTION: Illustrates a simple HTTP POST request block in Blockly. It includes fields for the destination URI, MIME-type of the content, and the content to be sent.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-http.md#2025-04-09_snippet_2\n\nLANGUAGE: blockly\nCODE:\n```\n![http-post-simple](../images/blockly/blockly-http-post-simple.png)\n```\n\n----------------------------------------\n\nTITLE: Defining Trigger Channel Types in XML for OpenHAB\nDESCRIPTION: This XML snippet demonstrates how to define a trigger channel type for a thing in OpenHAB. It shows the structure for creating a channel that can emit event payloads such as 'PRESSED', 'RELEASED', and 'DOUBLE_PRESSED'.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    <label>Sample Thing</label>\n    <description>Some sample description</description>\n    <channels>\n        <channel id=\"sample-channel\" typeId=\"trigger-channel\" />\n    </channels>\n</thing-type>\n<channel-type id=\"trigger-channel\">\n    <kind>trigger</kind>\n    <label>Trigger Channel</label>\n    <event>\n        <options>\n            <option value=\"PRESSED\">pressed</option>\n            <option value=\"RELEASED\">released</option>\n            <option value=\"DOUBLE_PRESSED\">double pressed</option>\n        </options>\n    </event>\n</channel-type>\n```\n\n----------------------------------------\n\nTITLE: Defining Constants with oh-context Component\nDESCRIPTION: Example of defining named constants with oh-context component and using them in style expressions for cleaner and more maintainable code.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n- component: oh-context\n  config:\n    constants:\n      modeColor:\n        heat: orange\n        cool: blue\n        auto: green\n        off: white\n  slots:\n    default:\n      - component: Label\n        config:\n          text: =@@hvacModeItem\n          style:\n            background: =const.modeColor[@@hvacModeItem] || 'red'\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP PUT Request with JSON Payload in Blockly\nDESCRIPTION: Shows how to send an HTTP PUT request using Blockly, including constructing a JSON payload using a Dictionary and a List.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-http.md#2025-04-09_snippet_4\n\nLANGUAGE: blockly\nCODE:\n```\n![http-put-simple](../images/blockly/blockly-http-put-simple.png)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Samba User and Permissions (Shell)\nDESCRIPTION: Commands to create a Samba user, set its password, and adjust file permissions for openHAB directories. This ensures proper access control for the shared folders.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_45\n\nLANGUAGE: shell\nCODE:\n```\nsudo smbpasswd -a openhab\nsudo chown -hR openhab:openhab /etc/openhab /opt/openhab/conf\n```\n\n----------------------------------------\n\nTITLE: Synology DSM 7.2 USB Driver Boot Script\nDESCRIPTION: Boot script for Synology DSM 7.2 to load USB serial drivers and set proper permissions for Z-Wave USB devices. This should be configured as a scheduled task to run at system startup.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nchmod 760 /var/lock\ninsmod /lib/modules/cp210x.ko > /dev/null 2>&1 # cp210x.ko sample\nchown root:dialout /dev/ttyACM0\nchmod g+rw /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule Actions with Input Parameters\nDESCRIPTION: Example of implementing a rule action method with proper annotations for input parameters and static wrapper method for DSL compatibility.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n    @RuleAction(label = \"@text/actionLabel\", description = \"@text/actionDesc\")\n    public void publishMQTT(\n            @ActionInput(name = \"topic\", label = \"@text/actionInputTopicLabel\", description = \"@text/actionInputTopicDesc\") @Nullable String topic,\n            @ActionInput(name = \"value\", label = \"@text/actionInputValueLabel\", description = \"@text/actionInputValueDesc\") @Nullable String value) {\n        ...\n    }\n\n    public static void publishMQTT(@Nullable ThingActions actions, @Nullable String topic, @Nullable String value) {\n        if (actions instanceof MQTTActions) {\n            ((MQTTActions) actions).publishMQTT(topic, value);\n        } else {\n            throw new IllegalArgumentException(\"Instance is not an MQTTActions class.\");\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Logging Item Object in Blockly\nDESCRIPTION: This snippet shows how to retrieve an Item object and assign it to a variable for logging. It demonstrates that the Item object itself cannot be directly logged.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_1\n\nLANGUAGE: blockly\nCODE:\n```\n![logging-getItem](../images/blockly/blockly-getItem-with-var.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring Local-Only Network Interface Access in openHAB\nDESCRIPTION: This configuration restricts openHAB's HTTP server to only accept connections from the local loopback interface (127.0.0.1), preventing access from other network interfaces for enhanced security.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/security.md#2025-04-09_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\nOPENHAB_HTTP_ADDRESS=127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions in JavaScript Expressions\nDESCRIPTION: Demonstrates how to use arrow functions in expressions, specifically with the find() method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntitle: =someItemList.find((x) => x.name === 'KitchenSwitch').label\n```\n\n----------------------------------------\n\nTITLE: Forwarding Item State as Command in Blockly\nDESCRIPTION: This snippet shows how to get the state of one Item and immediately send it as a command to another Item.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_8\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-sendCommandExample2](../images/blockly/blockly-sendCommandExample2.png)\n```\n\n----------------------------------------\n\nTITLE: Verifying and Restarting Samba Configuration (Shell)\nDESCRIPTION: Commands to check the Samba configuration file for correctness and restart the Samba service. This applies the new settings and makes the shares available.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\nsamba-tool testparm\n\n# Linux init systems based on sysVinit\nsudo service smbd restart\n# Linux init systems based on systemd\nsudo systemctl restart smbd.service\n```\n\n----------------------------------------\n\nTITLE: System Channel Types Reference Table\nDESCRIPTION: Markdown table defining the standard system channel types in OpenHAB. Each row represents a channel type with its ID, reference typeId, item type, category, tags, and detailed description. The table covers various functionalities from basic device controls to specific sensor measurements.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Channel Type ID       | Reference typeId             | Item Type                | Category         | Tags                      | Description                                                                                                                                                                                                             |\n|-----------------------|------------------------------|--------------------------|------------------|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| signal-strength       | system.signal-strength       | Number                   | QualityOfService | Measurement, Level        | Represents signal strength of a device as a Number with values 0, 1, 2, 3 or 4; 0 being worst strength and 4 being best strength.                                                                                       |\n| low-battery           | system.low-battery           | Switch                   | LowBattery       | LowBattery, Energy        | Represents a low battery warning with possible values on (low battery) and off (battery ok).                                                                                                                            |\n| battery-level         | system.battery-level         | Number                   | Battery          | Measurement, Energy       | Represents the battery level as a percentage (0-100%). Bindings for things supporting battery level in a different format (e.g. 4 levels) should convert to a percentage to provide a consistent battery level reading. |\n```\n\n----------------------------------------\n\nTITLE: System Channel Types Reference Table\nDESCRIPTION: Markdown table defining the standard system channel types in OpenHAB. Each row represents a channel type with its ID, reference typeId, item type, category, tags, and detailed description. The table covers various functionalities from basic device controls to specific sensor measurements.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Channel Type ID       | Reference typeId             | Item Type                | Category         | Tags                      | Description                                                                                                                                                                                                             |\n|-----------------------|------------------------------|--------------------------|------------------|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| signal-strength       | system.signal-strength       | Number                   | QualityOfService | Measurement, Level        | Represents signal strength of a device as a Number with values 0, 1, 2, 3 or 4; 0 being worst strength and 4 being best strength.                                                                                       |\n| low-battery           | system.low-battery           | Switch                   | LowBattery       | LowBattery, Energy        | Represents a low battery warning with possible values on (low battery) and off (battery ok).                                                                                                                            |\n| battery-level         | system.battery-level         | Number                   | Battery          | Measurement, Energy       | Represents the battery level as a percentage (0-100%). Bindings for things supporting battery level in a different format (e.g. 4 levels) should convert to a percentage to provide a consistent battery level reading. |\n```\n\n----------------------------------------\n\nTITLE: Setting Dynamic Icons for Temperature Trend\nDESCRIPTION: This example shows how to set dynamic icons for a TemperatureTrend item based on its state. It demonstrates three equivalent ways to achieve the same result.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nText item=TemperatureTrend icon=[\"UP\"=f7:arrowtriangle_up, \"DOWN\"=f7:arrowtriangle_down, f7:arrowtriangle_right]\nText item=TemperatureTrend icon=[==\"UP\"=f7:arrowtriangle_up, ==\"DOWN\"=f7:arrowtriangle_down, f7:arrowtriangle_right]\nText item=TemperatureTrend icon=[TemperatureTrend==\"UP\"=f7:arrowtriangle_up, TemperatureTrend==\"DOWN\"=f7:arrowtriangle_down, f7:arrowtriangle_right]\n```\n\n----------------------------------------\n\nTITLE: Parsing String to Number in Blockly\nDESCRIPTION: This block converts a String representation of a floating point number into a Number type block.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-standard-ext.md#2025-04-09_snippet_2\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-math-parse-number.png](../images/blockly/blockly-math-parse-number.png)\n```\n\n----------------------------------------\n\nTITLE: Defining GenericCompareCondition Module Type in JSON\nDESCRIPTION: JSON configuration for the GenericCompareCondition module type that compares a value against a configuration property using operators like <, >, =. The condition takes an input object and compares it with a configured value using the specified comparison operator.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"uid\":\"GenericCompareCondition\",\n   \"label\":\"CompareCondition\",\n   \"description\":\"configurable compare condition\",\n   \"configDescriptions\":[\n      {\n         \"name\":\"inputproperty\",\n         \"label\":\"Input property\",\n         \"type\":\"TEXT\",\n         \"description\":\"property of the input to be compared\",\n         \"required\":false\n      },\n      {\n         \"name\":\"right\",\n         \"type\":\"TEXT\",\n         \"label\":\"compare with\",\n         \"description\":\"the value to be compared with the input\",\n         \"required\":true\n      },\n      {\n         \"name\":\"operator\",\n         \"type\":\"TEXT\",\n         \"description\":\"the compare operator, allowed are <, >, =\",\n         \"required\":true,\n         \"defaultValue\":\"=\"\n      }\n   ],\n      \"inputs\": [\n         {\n            \"name\":\"input\",\n            \"type\": \"java.lang.Object\",\n            \"label\": \"input\",\n            \"description\": \"The input which will be compared.\",\n            \"required\":true\n         }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Variables with oh-context in YAML\nDESCRIPTION: Shows how to use the oh-context component to define variables with default values in a widget configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- component: oh-context\n  config:\n    variables:\n      setBrightness: 75\n  slots:\n    default:\n      - component: oh-slider\n        config:\n          variable: setBrightness\n      - component: Label\n        config:\n          text: =vars.setBrightness\n```\n\n----------------------------------------\n\nTITLE: Retrieving HSB Values from Item State in Blockly\nDESCRIPTION: This block allows retrieval of individual Hue, Saturation, or Brightness values from an Item's HSB color state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-standard-ext.md#2025-04-09_snippet_4\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-colors-hsb.png](../images/blockly/blockly-colors-hsb.png)\n```\n\n----------------------------------------\n\nTITLE: Password Change Command\nDESCRIPTION: Shell command to change the console password by modifying the users.properties file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/console.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo sed -i -e \"s/openhab = .*,/openhab = securePassword,/g\" /var/lib/openhab/etc/users.properties\n```\n\n----------------------------------------\n\nTITLE: Receiving WebSocketEvent Error in JSON (JavaScript)\nDESCRIPTION: Example of an error message received when openHAB can't process a sent message. It includes the error type, topic, payload with error description, and the eventId of the original message.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"WebSocketEvent\",\n    \"topic\": \"openhab/websocket/response/failed\",\n    \"payload\": \"Processing error: Topic does not match event type.\",\n    \"eventId\": \"17\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Available Add-ons in openHAB\nDESCRIPTION: Example output from the feature:list command showing available add-ons. The output includes binding names, versions, and installation status.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n...\nopenhab-binding-mqtt                      | 3.0.0.M5         |          | Started     | openhab-addons-3.0.0.M5 | MQTT Binding\nopenhab-binding-netatmo                   | 3.0.0.M5         |          | Started     | openhab-addons-3.0.0.M5 | Netatmo Binding\nopenhab-binding-onewire                   | 3.0.0.M5         |          | Uninstalled | openhab-addons-3.0.0.M5 | OneWire Binding\n...\nopenhab-binding-network                   | 3.0.0.M5         |          | Uninstalled | openhab-addons-3.0.0.M5 | Network Binding\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Burglar Alarm with Timer in Blockly\nDESCRIPTION: This comprehensive example demonstrates a burglar alarm system using timers in Blockly. The rule is triggered when the burglar-alarm-item or reset-button-item changes. It allows resetting the timer if a reset button is pressed during the trigger time, before alerting the police.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_7\n\nLANGUAGE: blockly\nCODE:\n```\nComprehensive Timer Example\n```\n\n----------------------------------------\n\nTITLE: Sample Rule Instance JSON Definition\nDESCRIPTION: Complete example of a rule definition in JSON format, showing triggers, conditions, and actions with their configurations and relationships.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"uid\":\"sample.rule1\",\n        \"name\":\"SampleRule\",\n        \"tags\":[\n            \"sample\",\n            \"rule\"\n        ],\n        \"description\":\"Sample Rule definition.\",\n        \"triggers\":[\n            {\n                \"id\":\"SampleTriggerID\",\n                \"type\":\"SampleTrigger\"\n            }\n        ],\n        \"conditions\":[\n            {\n                \"id\":\"SampleConditionID\",\n                \"type\":\"SampleCondition\",\n                \"configuration\":{\n                    \"operator\":\"=\",\n                    \"constraint\":\"dtag\"\n                },\n                \"inputs\":{\n                    \"conditionInput\":\"SampleTriggerID.triggerOutput\"\n                }\n            }\n        ],\n        \"actions\":[\n            {\n                \"id\":\"SampleActionID\",\n                \"type\":\"SampleAction\",\n                \"configuration\":{\n                    \"message\":\">>> Hello World!!!\"\n                }\n            }\n        ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Webview Element in OpenHAB Sitemap\nDESCRIPTION: Syntax for embedding live webpage content in the user interface. Includes options for labels and height configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nWebview item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] url=\"<url>\" [height=<heightvalue>]\n```\n\nLANGUAGE: java\nCODE:\n```\nWebview url=\"https://www.openhab.org\" height=5\n```\n\n----------------------------------------\n\nTITLE: Automating Actions When Leaving Home (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a rule that turns off lights and decreases temperature when the presence status changes to OFF, indicating that someone has left home.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rules, triggers, items } = require('openhab');\n\nrules.JSRule({\n  name: 'Turn off the lights & adjust temperature on leaving',\n  description: 'When you leave home, turn off the lights and lower the temperature',\n  triggers: [\n    triggers.ItemCommandTrigger('Presence', 'OFF') // Triggers when Item Presence is commanded OFF\n  ],\n  execute: (event) => {\n      items.getItem('gLights').sendCommand('OFF');\n      items.getItem('gTheromstat').sendCommand('DECREASE');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Quantity Computations in Blockly\nDESCRIPTION: This snippet shows how to perform computations (addition, subtraction, division, multiplication) with quantities in Blockly. It demonstrates the smart type detection feature and how it handles different units of measurement.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-uom.md#2025-04-09_snippet_1\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-quantity-multiplication](../images/blockly/blockly-quantity-multiplication.png)\n\n![blockly-quantity-smart-computation](../images/blockly/blockly-quantity-smart-computation.png)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Audio Sinks using Console Command\nDESCRIPTION: Console command to list all available audio output devices (sinks) in the openHAB system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:audio sinks\n* System Speaker (enhancedjavasound)\n  Web Audio (webaudio)\n```\n\n----------------------------------------\n\nTITLE: Updating a Bundle from Local File in openHAB Console\nDESCRIPTION: This command shows how to update a bundle using a local file on the openHAB server. It's useful for developers testing self-compiled bundles.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/bundles.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nopenhab>bundle:update 303 file:///localhost/srv/openhab-sys/org.openhab.binding.my-3.4.0-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Window Open Reminder (Ruby)\nDESCRIPTION: This Ruby snippet defines a rule that sends a reminder notification if a window is left open for an hour. It uses a group state change trigger with a built-in delay.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrule \"Window open reminder\" do\n  changed gWindows.members, to: OPEN, for: 1.hour\n  run do |event|\n    # Item guaranteed to be OPEN here, no need to check\n    Notification.send(\"#{event.item.label} is open for an hour!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Thing Configuration in openHAB Thing Handler\nDESCRIPTION: Demonstrates how to update the configuration of a Thing in a Thing Handler when changes occur in an external system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprotected void deviceConfigurationChanged(DeviceConfig deviceConfig) {\n    Configuration configuration = editConfiguration();\n    configuration.put(\"parameter1\", deviceConfig.getValue1());\n    configuration.put(\"parameter2\", deviceConfig.getValue2());\n    updateConfiguration(configuration);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Element in OpenHAB Sitemap\nDESCRIPTION: Syntax for creating an input element that allows entering text, numbers and dates/times to update underlying items. Supports formatting and input hints for specific widget types.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nInput item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [inputHint=\"<inputHint>\"]\n```\n\nLANGUAGE: java\nCODE:\n```\nInput item=Meter_Reading label=\"Meter [%.0f %unit%]\" staticIcon=energy inputHint=\"number\"\n```\n\n----------------------------------------\n\nTITLE: Updating Thing Properties in Java for openHAB Binding\nDESCRIPTION: This code shows how to modify Thing properties in an openHAB binding by editing and updating properties including serial number and firmware version. It uses the editProperties() method to retrieve the properties map and updateProperties() to commit changes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprotected void devicePropertiesChanged(DeviceInfo deviceInfo) {\n    Map<String, String> properties = editProperties();\n    properties.put(Thing.PROPERTY_SERIAL_NUMBER, deviceInfo.getSerialNumber());\n    properties.put(Thing.PROPERTY_FIRMWARE_VERSION, deviceInfo.getFirmwareVersion());\n    updateProperties(properties);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Item Persistence in Java\nDESCRIPTION: This snippet illustrates how to configure which items should be persisted with specific strategies and filters in openHAB's persistence configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nItems {\n    <itemlist1> : strategy = <strategy1>, <strategy2>, ... [filter = <filter1>, <filter2>, ...]\n    <itemlist2> : strategy = <strategyX>, <strategyY>, ...\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing openHAB Backup and Restore Scripts\nDESCRIPTION: Shows the location of backup and restore scripts for openHAB on different systems. These scripts back up both text-based configs and UI configurations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/tips-and-tricks.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nFor other systems, under `$OH_HOME/runtime/bin` you will find `backup.sh` and `restore.sh` (or `.bat`).\n```\n\n----------------------------------------\n\nTITLE: Example of Colorpicker Element Usage\nDESCRIPTION: Shows an example of using the Colorpicker element for controlling an LED light's color.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nColorpicker item=LR_LEDLight_Color label=\"LED Light Color\" staticIcon=colorwheel\n```\n\n----------------------------------------\n\nTITLE: Updating Thing Structure by Adding Channels in openHAB\nDESCRIPTION: This example demonstrates how to modify the structure of a Thing by adding a new channel. It uses ThingBuilder to create and attach a channel to the existing Thing, then updates the Thing with the new structure.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nprotected void thingStructureChanged() {\n    ThingBuilder thingBuilder = editThing();\n    Channel channel = ChannelBuilder.create(new ChannelUID(\"bindingId:type:thingId:1\"), \"String\").build();\n    thingBuilder.withChannel(channel);\n    updateThing(thingBuilder.build());\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Item OFF using POST Request in Bash\nDESCRIPTION: This snippet demonstrates how to switch an item named 'My_Item' OFF using a POST request to the OpenHAB REST API. It sets the Content-Type header to text/plain and accepts JSON responses.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/restdocs.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST --header \"Content-Type: text/plain\" --header \"Accept: application/json\" -d \"OFF\" \"http://{openHAB_IP}:8080/rest/items/My_Item\"\n```\n\n----------------------------------------\n\nTITLE: Defining Slider Element in openHAB Sitemap\nDESCRIPTION: Defines a Slider element for adjusting values using a sliding control. It supports optional switch functionality and customizable value ranges.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nSlider item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [switchSupport] [minValue=<min value>] [maxValue=<max value>] [step=<step value>] [releaseOnly]\n```\n\n----------------------------------------\n\nTITLE: Default Implementation of Thing Update Handler in openHAB\nDESCRIPTION: This snippet shows the default implementation of the thingUpdated method from BaseThingHandler. When a Thing's structure changes during runtime, this method disposes of the current Thing instance, replaces it with the updated one, and reinitializes it.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void thingUpdated(Thing thing) {\n    dispose();\n    this.thing = thing;\n    initialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Timer with Reschedule on Retrigger\nDESCRIPTION: Shows timer implementation with rescheduling logic when retriggered.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nif (cache.private.exists('MyTimer') === false || cache.private.get('MyTimer').hasTerminated()) {\n  cache.private.put('MyTimer', actions.ScriptExecution.createTimer('MyTimer', time.ZonedDateTime.now().plusSeconds(10), function () {\n    cache.private.remove('MyTimer');\n  }));\n} else {\n  cache.private.get('MyTimer').reschedule(time.ZonedDateTime.now().plusSeconds(10));\n};\n```\n\n----------------------------------------\n\nTITLE: Example of Slider Element Usage\nDESCRIPTION: Demonstrates a simple usage of the Slider element for controlling kitchen temperature.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nSlider item=KI_Temperature label=\"Kitchen\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling openHAB on Yum/Dnf-Based Systems\nDESCRIPTION: Commands to completely remove openHAB and its repository from RPM-based systems using yum or dnf.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum remove openhab*\nsudo rm /etc/yum.repos.d/openhab.repo\n```\n\n----------------------------------------\n\nTITLE: Removing Older Discovery Results in OpenHAB\nDESCRIPTION: Example from Hue binding showing how to override stopScan to remove older discovery results.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    protected synchronized void stopScan() {\n        super.stopScan();\n        removeOlderResults(getTimestampOfLastScan());\n    }\n```\n\n----------------------------------------\n\nTITLE: QuantityType Math Operations in Java\nDESCRIPTION: Examples of mathematical operations with QuantityType, demonstrating unit handling and temperature calculations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n// add a QuantityType variable\nvar miles = 2|mi\nvar metres = 10|m\nvar distance = miles + metres // result 2.0062 mi\n// The result uses units of first given quantity\n\nvar area = metres * metres // result 100 mÂ²\n// New appropriate units are used for result\n\nvar fahr = 68|Â°F\nvar centi = 1|Â°C\nvar sumTemps = fahr + centi // result 101.80 Â°F\n// Probably not what you expected\n// Temperatures are always absolute, not interval or increment scale.\n// 1Â°C has been converted to 33.8Â°F, not to the interval 1.8Â°F\n\n// There is a mathematical trick for this\nvar increment = fahr + centi - 0|Â°C  // result 69.80 Â°F\n// \"subtracting zero\" fixes the offset in the different scales\n```\n\n----------------------------------------\n\nTITLE: Defining Selection Element in openHAB Sitemap\nDESCRIPTION: Defines a Selection element that renders options as a dropdown menu or modal dialog prompt. It's similar to a Switch with multiple states but offers a cleaner UI.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nSelection item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [mappings=\"<mapping definition>\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Bridge-Bound Discovery Service in Java\nDESCRIPTION: Implementation of the initialize method in a bridge-bound discovery service, showing how to properly set up bridge UID and call super initialization.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n    private @NonNullByDefault({}) ThingUID bridgeUid;\n\n    @Override\n    public void initialize() {\n        bridgeUid = thingHandler.getThing().getUID();\n        super.initialize();\n    }\n```\n\n----------------------------------------\n\nTITLE: Print Statement Block in OpenHAB Blockly\nDESCRIPTION: Print statement block for creating a print statement in the rule that logs to stdout. It allows logging arbitrary text to the standard output.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-logging.md#2025-04-09_snippet_2\n\nLANGUAGE: blockly\nCODE:\n```\n![print-to-stdout](../images/blockly/blockly-logging-print.png)\n```\n\n----------------------------------------\n\nTITLE: OpenHAB Developer Tools Page Layout in Markdown\nDESCRIPTION: Front matter and structure definition for the developer tools documentation page, specifying layout and title for the page.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/developer/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: documentation\ntitle: Developer Tools - Overview\n---\n```\n\n----------------------------------------\n\nTITLE: Installing and Updating Bundles via URL in openHAB Console\nDESCRIPTION: These commands demonstrate how to install a new bundle from a URL and then update it to a newer version. It uses the bundle:install and bundle:update commands.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/bundles.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nopenhab> bundle:install https://github.com/myrepy/my-binding/raw/main/org.openhab.binding.my-3.4.0-SNAPSHOT.jar\n\nopenhab> bundle:list | grep My\n\n303 | Active   |  80 | 3.4.0                 | openHAB Add-ons :: Bundles :: My Binding\n\nopenhab> bundle:update 303 https://github.com/myrepy/my-binding/raw/main/org.openhab.binding.my-3.4.1-SNAPSHOT.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Thing Type Visibility in XML\nDESCRIPTION: Example showing how to control whether a Thing type should be listed in user interfaces using the listed attribute.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\" listed=\"false\">\n    ...\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Advanced Profile Examples with Hysteresis, Battery Level, Range, and Timestamp Offset\nDESCRIPTION: Examples demonstrating various advanced profiles including hysteresis for temperature alerts, battery level monitoring, range checking for humidity alerts, and timestamp offset for scheduling before sunrise.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\n/** Hysteresis Profile **/\nNumber:Temperature Outdoor_Temperature { channel=\"openweathermap:weather-and-forecast:api:local:current#temperature\" }\n// Triggers a temperature high alarm (Switch = ON) as of 30 Â°c and stays ON until temperature drops below 29 Â°C\nSwitch Outdoor_Temperature_High_Alert { channel=\"openweathermap:weather-and-forecast:api:local:current#temperature\" [profile=\"system:hysteresis\", lower=\"29 Â°C\", upper=\"30 Â°C\"] }\n// Temperature low alert below 0 Â°C\nSwitch Outdoor_Temperature_Low_Alert { channel=\"openweathermap:weather-and-forecast:api:local:current#temperature\" [profile=\"system:hysteresis\", lower=\"0 Â°C\", inverted=\"true\"] }\n\n/** Battery Level Profile **/\nNumber Battery_Level { channel=\"serialbutton:button:mybutton:battery-level\" }\n// Indicates a battery low alarm if battery level drops below 15\nSwitch Low_Battery { channel=\"serialbutton:button:mybutton:battery-level\" [profile=\"system:hysteresis\", lower=15, inverted=\"true\"] }\n\n/** Range Profile **/\nNumber:Dimensionless Outdoor_Humidity { channel=\"openweathermap:weather-and-forecast:api:local:current#humidity\" }\n// Triggers a humidity low / high alarm (Switch = ON) if humidity drops below 40 % or exceeds 60 %\nSwitch Outdoor_Humidity_Alert { channel=\"openweathermap:weather-and-forecast:api:local:current#humidity\" [profile=\"system:range\", lower=\"40 %\", upper=\"60 %\", inverted=\"true\"] }\n\n/** Timestamp Offset **/\n// 30 min before sunrise\nDateTime Sunrise { channel=\"astro:sun:home:rise#start\" [profile=\"system:timestamp-offset\", offset=-1800] }\n```\n\n----------------------------------------\n\nTITLE: Example of Button Elements in Buttongrid\nDESCRIPTION: Demonstrates the usage of Button elements as children of a Buttongrid, creating a remote control interface with various buttons for different functions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nButtongrid label=\"Remote Control\" staticIcon=screen {\n    Button row=1 column=1 item=RemoteControl label=\"Power\" staticIcon=switch-off stateless click=POWER\n    Button row=1 column=2 item=RemoteControl label=\"Menu\" stateless click=MENU\n    Button row=1 column=3 item=RemoteControl label=\"Exit\" stateless click=EXIT\n    Button row=2 column=2 item=RemoteControl label=\"Up\" staticIcon=f7:arrowtriangle_up stateless click=UP\n    Button row=4 column=2 item=RemoteControl label=\"Down\" staticIcon=f7:arrowtriangle_down stateless click=DOWN\n    Button row=3 column=1 item=RemoteControl label=\"Left\" staticIcon=f7:arrowtriangle_left stateless click=LEFT\n    Button row=3 column=3 item=RemoteControl label=\"Right\" staticIcon=f7:arrowtriangle_right stateless click=RIGHT\n    Button row=3 column=2 item=RemoteControl label=\"Ok\" stateless click=OK\n    Button row=2 column=4 item=RemoteControl label=\"Volume +\" stateless click=VOL_PLUS\n    Button row=4 column=4 item=RemoteControl label=\"Volume -\" stateless click=VOL_MINUS\n    Button row=3 column=4 item=RemoteControl label=\"Mute\" staticIcon=soundvolume_mute stateless click=MUTE\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Exporting Packages in OSGi Bundle\nDESCRIPTION: XML snippet showing how to explicitly export packages from an imported dependency to make them available to other bundles, with version control options.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/buildsystem.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n  <properties>\n    <bnd.exportpackage>foo.bar.*;version=\"1.0.0\"</bnd.exportpackage>\n  </properties>\n```\n\n----------------------------------------\n\nTITLE: Implementing Light Discovery Handler in Java\nDESCRIPTION: Example of a discovery service implementation that handles the discovery of new light devices. It creates discovery results with properties, bridge association and labels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n    private void onLightAddedInternal(FullLight light) {\n        ThingUID thingUID = getThingUID(light);\n        if (thingUID != null) {\n            ThingUID bridgeUID = hueBridgeHandler.getThing().getUID();\n            Map<String, Object> properties = new HashMap<>(1);\n            properties.put(LIGHT_ID, light.getId());\n            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n                    .withBridge(bridgeUID).withLabel(light.getName()).build();\n            thingDiscovered(discoveryResult);\n        } else {\n            logger.debug(\"discovered unsupported light of type '{}' with id {}\", light.getModelID(), light.getId());\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Thing Configuration Class Definition\nDESCRIPTION: Example of a configuration class used to declare parameters that can match auto discovery representation properties.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic class MyThingConfiguration {\n    public String uniqueId;\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Configuration Class Definition\nDESCRIPTION: Example of a configuration class used to declare parameters that can match auto discovery representation properties.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npublic class MyThingConfiguration {\n    public String uniqueId;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with YAML Syntax in Widget Expressions\nDESCRIPTION: Alternative method to create objects using YAML's native key-value syntax, achieving the same result as the JavaScript object expression method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nactionVariable: myObject\nactionVariableValue:\n  name: =props.item\n  selected: =true\n```\n\n----------------------------------------\n\nTITLE: OSGi Component and Service Annotation Example\nDESCRIPTION: Example showing the required OSGi Declarative Services annotations for defining components and service references in openHAB bindings, including proper null annotation usage.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Component(service=MyCoolService.class)\npublic class MyCoolService {\n    @Reference\n    private @NonNullByDefault({}) ItemRegistry itemRegistry;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Channel Linking with Profiles\nDESCRIPTION: Example of using profiles with multi-channel linking to replace the need for rules. This links a light to both a Hue channel and a button channel with the rawbutton-toggle-switch profile.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nColor Bedroom_Light {\n  channel=\"hue:0210:1:bulb1:color\",\n  channel=\"serialbutton:button:mybutton:button\" [profile=\"system:rawbutton-toggle-switch\"]\n}\nDateTime Bedroom_Light_Updated { channel=\"hue:0210:1:bulb1:color\" [profile=\"system:timestamp-update\"] }\nDateTime Bedroom_Light_Changed { channel=\"hue:0210:1:bulb1:color\" [profile=\"system:timestamp-change\"] }\n```\n\n----------------------------------------\n\nTITLE: Switch Element Examples in openHAB Sitemap\nDESCRIPTION: Examples of Switch elements: a simple On/Off light switch and a multi-state TV channel selector with custom channel mappings.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nSwitch item=LR_CeilingLight label=\"Ceiling Light\" icon=light\nSwitch item=LR_TV_Channel label=\"TV Channel\" mappings=[0=\"DasErste\", 1=\"BBC One\", 2=\"Cartoon Network\"]\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Java for OpenHAB\nDESCRIPTION: Demonstrates how to properly initialize a non-static, final logger in a Java class for OpenHAB development.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nclass MyCoolClass {\n    private final Logger logger = LoggerFactory.getLogger(MyCoolClass.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling RefreshType Command in openHAB Thing Handler\nDESCRIPTION: Shows how to handle RefreshType commands in a Thing Handler to update channel states when the framework requests a refresh.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleCommand(ChannelUID channelUID, Command command) {\n    if (command instanceof RefreshType) {\n\n        updateWeatherData();\n\n        switch (channelUID.getId()) {\n            case CHANNEL_TEMPERATURE:\n                updateState(channelUID, getTemperature());\n                break;\n            case CHANNEL_HUMIDITY:\n                [...]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Startup Refresh Rule in openHAB Rules DSL\nDESCRIPTION: Rule to handle persistence startup issues by refreshing rules after system start.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nvar boolean reloadOnce = true\nrule \"Refresh rules after persistence service has started\"\n  when System started\nthen\n  if(reloadOnce)\n    executeCommandLine(\"$OPENHAB_CONF/rules/rules_refresh.sh\")\n  else\n    println(\"reloadOnce is false\")\n  reloadOnce = false\nend\n```\n\n----------------------------------------\n\nTITLE: Switch Element Definition in openHAB Sitemap\nDESCRIPTION: Defines the Switch element which presents a discrete state Item and allows changing its value. It can be rendered as an On/Off switch or as multiple buttons with custom labels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nSwitch item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [mappings=\"<mapping definition>\"]\n```\n\n----------------------------------------\n\nTITLE: Using Parameterized Logging in Java for OpenHAB\nDESCRIPTION: Shows how to use parameterized logging instead of string concatenation for efficient logging in OpenHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nvoid myFun() {\n    String someValue = \"abc\";\n    int someInt = 12;\n    logger.debug(\"Current value is {} and int is {}\", someValue, someInt);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Removal Grace Period for UPnP Discovery\nDESCRIPTION: Example showing how to implement the optional getRemovalGracePeriodSeconds method with configuration support.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\n@Component(configurationPid = \"discovery.hue\")\npublic class HueBridgeDiscoveryParticipant implements UpnpDiscoveryParticipant {\n\n    private long removalGracePeriodSeconds = 15;\n\n    @Activate\n    public void activate(@Nullable Map<String, Object> configProperties) {\n        updateRemovalGracePeriod(configProperties);\n    }\n\n    @Modified\n    public void modified(@Nullable Map<String, Object> configProperties) {\n        updateRemovalGracePeriod(configProperties);\n    }\n\n    private void updateRemovalGracePeriod(Map<String, Object> configProperties) {\n        if (configProperties != null) {\n            Object value = configProperties.get(HueBindingConstants.REMOVAL_GRACE_PERIOD);\n            if (value != null) {\n                try {\n                    removalGracePeriodSeconds = Integer.parseInt(value.toString());\n                } catch (NumberFormatException e) {\n                    logger.warn(\"Configuration property '{}' has invalid value: {}\",\n                            HueBindingConstants.REMOVAL_GRACE_PERIOD, value);\n                }\n            }\n        }\n    }\n\n    @Override\n    public long getRemovalGracePeriodSeconds(ServiceInfo serviceInfo) {\n        return removalGracePeriodSeconds;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Nested HTML Components in YAML\nDESCRIPTION: Shows how to create nested HTML components using the default slot feature. Demonstrates combining multiple components with different styles and content types.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n- component: div\n  config:\n    style:\n      font-style: italic\n  slots:\n    default:\n      - component: Content\n        config:\n          text: \"This text starts with italics \"\n      - component: span\n        config:\n          content: but then becomes BOLD!\n          style:\n            font-weight: bold\n```\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"font-style: italic;\">\n  This text starts with italics <span style=\"font-weight: bold;\">but then becomes BOLD!</span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Add-on with Maven (Shell)\nDESCRIPTION: Rebuild your add-on to deploy it in your local repository for the next execution.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/generic.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: Triggering Rule on Sunrise Event in Java\nDESCRIPTION: This rule demonstrates how to use a channel-based trigger. It triggers when the astro binding's sun channel for the 'home' thing generates a 'START' event for sunrise.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nrule \"Start wake up light on sunrise\"\nwhen\n    Channel \"astro:sun:home:rise#event\" triggered START\nthen\n    ...\nend\n```\n\n----------------------------------------\n\nTITLE: Viewing openHAB Logs in Bash\nDESCRIPTION: Commands to view real-time log messages from openHAB for both package repository and manual installations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\ntail -f /var/log/openhab/openhab.log -f /var/log/openhab/events.log\n```\n\nLANGUAGE: bash\nCODE:\n```\ntail -f /opt/openhab/userdata/logs/openhab.log -f /opt/openhab/userdata/logs/events.log\n```\n\n----------------------------------------\n\nTITLE: Defining Setpoint Element in openHAB Sitemap\nDESCRIPTION: Defines a Setpoint element for adjusting numeric values within a specified range and step size.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nSetpoint item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] minValue=<min value> maxValue=<max value> step=<step value>\n```\n\n----------------------------------------\n\nTITLE: Building openHAB Projects with Maven\nDESCRIPTION: Maven command to clean and install openHAB projects. This should be run in the root of the cloned repositories.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/intellij.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install\n```\n\n----------------------------------------\n\nTITLE: OSGi Service Component Annotation\nDESCRIPTION: Example of the component annotation required to register a discovery service as an OSGi service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = DiscoveryService.class, immediate = true, configurationPid = \"discovery.<binding-id>\")\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Component with Styling in YAML\nDESCRIPTION: Demonstrates creating a simple div element with bold text using YAML configuration. Shows how to set content and apply inline styles through the config property.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- component: div\n  config:\n    content: Make this text bold\n    style:\n        font-weight: bold\n```\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"font-weight: bold;\">Make this text bold</div>\n```\n\n----------------------------------------\n\nTITLE: Defining Temperature Trigger Type in OpenHAB\nDESCRIPTION: Implements a custom trigger type for temperature monitoring. It defines configuration parameters for temperature thresholds and operators, and provides output for the current temperature value.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\npublic class TemperatureTriggerType extends TriggerType {\n    public static final String UID = \"TemperatureTriggerType\";\n    public static final String DATA_CURRENT_TEMPERATURE = \"temperature\";\n\n    public static final String CONFIG_OPERATOR = \"operator\";\n    public static final String CONFIG_TEMPERATURE = \"temperature\";\n\n    public static TriggerType initialize() { // Factory method Pattern\n        // Define outputs\n        List<Output> output = new ArrayList<>();\n        Output temperature = new Output(DATA_CURRENT_TEMPERATURE, Integer.class.getName(),\n                \"Temperature\", \"Indicates the current room temperature\", null, null, null);\n        output.add(temperature);\n\n        // Define configurations\n        final ConfigDescriptionParameter temperature = ConfigDescriptionParameterBuilder\n                .create(CONFIG_TEMPERATURE, Type.INTEGER).withRequired(true).withReadOnly(true).withMultiple(false)\n                .withLabel(\"Temperature\").withDescription(\"Trigger temperature\").build();\n        final ConfigDescriptionParameter operator = ConfigDescriptionParameterBuilder.create(CONFIG_OPERATOR, Type.TEXT)\n                .withRequired(true).withReadOnly(true).withMultiple(false).withLabel(\"Operator\")\n                .withDescription(\"Below/Above temperature\").withDefault(\"above\").build();\n\n        final List<ConfigDescriptionParameter> config = new ArrayList<>();\n        config.add(temperature);\n        config.add(operator);\n\n        return new TemperatureTriggerType(output,config);\n    }\n\n    public TemperatureTriggerType(List<Output> output, List<ConfigDescriptionParameter> config) {\n        super(UID, config, \"Temperature Trigger\", \"This triggers when the temperature has reached a certain value\", null, Visibility.VISIBLE, output);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Color Item RGB Conversion\nDESCRIPTION: Demonstrates how to convert RGB values to HSBType for use with Color items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport java.awt.Color\n\n// Create item\nval newColor = new Color(red, blue, green) // where red, blue, and green are integers between 0 and 255\n\n//Saving to an Item\nMyColorItem.sendCommand(new HSBType(newColor))\n```\n\n----------------------------------------\n\nTITLE: Inline Groovy Transformation Example\nDESCRIPTION: Shows how to use an inline Groovy transformation that calculates string length without creating a separate file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\nGROOVY(|\"String has ${input.length()} characters\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Temperature in Java\nDESCRIPTION: Example of calculating average temperature over the last 5 minutes using the influxdb persistence service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nTemperature.averageSince(now.minusMinutes(5), \"influxdb\")`\n```\n\n----------------------------------------\n\nTITLE: Starting Equinox Runtime from Command Line\nDESCRIPTION: Command to launch the Equinox OSGi framework with console access and custom configuration directory.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/equinox.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar org.eclipse.osgi-3.x.x.jar -console -configuration configuration\n```\n\n----------------------------------------\n\nTITLE: Calculating Energy Consumption with Riemann Sum in Java\nDESCRIPTION: Code to calculate total energy consumption over the last month using Riemann Sum with TRAPEZOIDAL type from jdbc persistence service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nvar today = now.truncatedTo(ChronoUnit.DAYS)\nvar currentMonthStart = today.withDayOfMonth(1)\nvar lastMonthStart = today.minusMonths(1).withDayOfMonth(1)\nvar consumption = Power.riemannSumBetween(lastMonthStart, currentMonthStart, RiemannType.TRAPEZOIDAL, \"jdbc\")`\n```\n\n----------------------------------------\n\nTITLE: Pages Compatibility Summary Table in Markdown\nDESCRIPTION: Markdown table showing compatibility matrix for different types of openHAB pages, including where they are designed, viewed, and stored.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|Type|Designed in|Viewed in|Stored in|\n|----|-----------|---------|----------|\n|Home|main UI|main UI|JSON DB|\n|[Sitemap](./sitemaps.html)|main UI or `.sitemap` file|Basic UI, iOS/Android apps and others|Configuration folder or JSON DB|\n|[Layout](./layout-pages.html)|main UI|main UI|JSON DB|\n|[Map](./map-pages.html)|main UI|main UI|JSON DB|\n|[Floorplan](./floorplan-pages.html)|main UI|main UI|JSON DB|\n|[Chart](./chart-pages.html)|main UI|main UI|JSON DB|\n|[Tabbed](./tabbed-pages.html)|main UI|main UI|JSON DB|\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic JUnit Test for PercentType in Java\nDESCRIPTION: This snippet demonstrates a simple JUnit test for the toString conversion of a PercentType object. It uses the assertEquals method to verify the expected output.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/tests.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class PercentTypeTest {\n    @Test\n    public void DoubleValue() {\n        PercentType pt = new PercentType(\"0.0001\");\n        assertEquals(\"0.0001\", pt.toString());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dimmer Item Type Conversions\nDESCRIPTION: Shows how to convert Dimmer item states between different numeric types.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n//Loading from an Item\nval dimVal = MyDimmerItem.state as Number\n//as integer\nval int dimAsInt = dimVal.intValue\n// as float\nval float dimAsFloat = dimVal.floatValue\n```\n\n----------------------------------------\n\nTITLE: XML Configuration for Maximum Temperature Source Parameter in WeatherUnderground Binding\nDESCRIPTION: XML configuration defining a parameter for selecting the maximum temperature unit (Celsius or Fahrenheit) in the WeatherUnderground service. This parameter provides unit options with appropriate labels and descriptions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<parameter name=\"SourceUnit\" type=\"text\" required=\"true\">\n    <label>Maximum Temperature Source Unit</label>\n    <description>Select the maximum temperature unit provided by the Weather Underground service.</description>\n    <options>\n        <option value=\"C\">Degree Celsius</option>\n        <option value=\"F\">Degree Fahrenheit</option>\n    </options>\n    <default>C</default>\n</parameter>\n```\n\n----------------------------------------\n\nTITLE: Defining Buttons in Buttongrid Element\nDESCRIPTION: Demonstrates the syntax for defining buttons within a Buttongrid element. Each button is defined with its position, command, and optional description or icon.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nbuttons=[row_1:column_1:command_1=\"description_1\", row_2:column_2:command_2=\"description_2\"=<iconname>, ...]\n```\n\n----------------------------------------\n\nTITLE: Transform Method Implementation in Java\nDESCRIPTION: Concrete implementation of the transform method that shows how to process input strings in a transformation service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/transformations/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic @Nullable String transform(String config, String input) throws TransformationException {\n    return input + \",bro!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Automating Actions When Leaving Home (Ruby)\nDESCRIPTION: This Ruby snippet defines a rule that turns off lights and decreases temperature when the presence status changes to OFF, indicating that someone has left home.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrule \"Turn off the lights & adjust temperature on leaving\" do\n  received_command Presence, command: OFF\n  run do\n    gLights.off\n    gThermostat.decrease\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Triggering a Scene from JRuby Rules\nDESCRIPTION: This code snippet shows how to run a scene rule from JRuby by accessing the rule object through its ID and calling the run method (which is an alias for the trigger method).\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_scenes.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n  rules[\"scene_id\"].run\n```\n\n----------------------------------------\n\nTITLE: ProfileTypeProvider Implementation in Java\nDESCRIPTION: Implementation of a ProfileTypeProvider that announces custom profile types to the openHAB framework via OSGi service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/transformations/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = { ProfileTypeProvider.class })\npublic class MyProfileTypeProvider implements ProfileTypeProvider {\n    @Override\n    public Collection<ProfileType> getProfileTypes(Locale locale) {\n        //return custom types\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Switch Item State Conversion in Java\nDESCRIPTION: Example of converting Switch item ON/OFF states to numeric values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nval SwitchNum = if (MySwitchItem.state == ON) 1 else 0\n```\n\n----------------------------------------\n\nTITLE: Customizing Location Card Background Image in YAML\nDESCRIPTION: This YAML snippet demonstrates how to customize a location card's background image and adjust its brightness. It sets the background image path and applies a brightness filter to make overlaid text more readable.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/auto_overview.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponent: oh-location-card\nconfig:\n  backgroundImage: /static/garage.jpg\n  backgroundImageStyle:\n    filter: brightness(60%)\n  invertText: false\n```\n\n----------------------------------------\n\nTITLE: Listing Bundles in openHAB Console\nDESCRIPTION: This command lists all installed bundles in openHAB, showing their ID, state, level, version, and name. It's useful for getting an overview of the system's components and add-ons.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/bundles.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nopenhab> bundle:list\nSTART LEVEL 100 , List Threshold: 50\n ID | State    | Lvl | Version               | Name\n-----------------------------------------------------------------------------------------------------\n 22 â Active â  80 â 2.10.3                  â Jackson-annotations\n 23 â Active â  80 â 2.10.3                  â Jackson-core\n 24 â Active â  80 â 2.10.3                  â jackson-databind\n 25 â Active â  80 â 2.10.3                  â Jackson-dataformat-YAML\n 26 â Active â  80 â 2.10.3                  â Jackson datatype: JSR310\n 27 â Active â  80 â 2.8.2.v20180104-1110    â Gson: Google Json Library for Java\n...\n209 | Active |  80 | 3.0.0                   | openHAB Add-ons :: Bundles :: Network Binding\n```\n\n----------------------------------------\n\nTITLE: Simple ProfileFactory Implementation in Java\nDESCRIPTION: Basic implementation of a ProfileFactory as an OSGi service for creating custom profiles.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/transformations/index.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = { ProfileFactory.class })\npublic class MyProfileFactory implements ProfileFactory {\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Sunrise (YAML)\nDESCRIPTION: This YAML snippet defines a rule that raises blinds and adjusts temperature when the sun rises. It uses the Astro Binding to trigger the action based on sunrise events.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration: {}\ntriggers:\n  - id: \"1\"\n    configuration:\n      event: START\n      channelUID: astro:sun:home:rise#event\n    type: core.ChannelEventTrigger\nconditions: []\nactions:\n  - inputs: {}\n    id: \"2\"\n    configuration:\n      itemName: gBlinds\n      command: UP\n    type: core.ItemCommandAction\n  - inputs: {}\n    id: \"3\"\n    configuration:\n      itemName: gThermostat\n      command: INCREASE\n    type: core.ItemCommandAction\n```\n\n----------------------------------------\n\nTITLE: Complex Garage Door List Widget Combining Multiple Items\nDESCRIPTION: This widget combines a door sensor and control item to create a comprehensive garage door control widget. It uses conditional formatting to display different icons and colors based on the door state, and includes action configuration for door operation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuid: garagedoor_list\ntags:\n  - list\n  - garagedoor\nprops:\n  parameters:\n    - description: Door name\n      label: Name\n      name: name\n      required: false\n      type: TEXT\n    - context: item\n      description: Control Item\n      label: Control Item\n      name: control_item\n      required: false\n      type: TEXT\n    - context: item\n      description: Sensor Item\n      label: Sensor Item\n      name: sensor_item\n      required: false\n      type: TEXT\n  parameterGroups: []\ntimestamp: Feb 5, 2021, 2:01:31 PM\ncomponent: oh-list-item\nconfig:\n  icon: '=(items[props.sensor_item].state == \"CLOSED\") ? \"f7:house\" : \"f7:house_fill\"'\n  iconColor: '=(items[props.sensor_item].state == \"CLOSED\") ? \"green\" : \"red\"'\n  title: =props.name\n  action: command\n  actionItem: =props.control_item\n  actionCommand: ON\n  badgeColor: '=(items[props.sensor_item].state == \"CLOSED\") ? \"green\" : \"red\"'\n  badge: '=(items[props.sensor_item].state == \"CLOSED\") ? \"CLOSED\" : \"OPEN\"'\n```\n\n----------------------------------------\n\nTITLE: German Properties File with Custom Keys for ACME Weather\nDESCRIPTION: German translation properties file for ACME Weather binding, providing German translations for the custom keys defined in the XML. Includes add-on name, description, and error messages.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n# add-on\n\naddon.acmeweather.name = ACME Wetter Binding\naddon.acmeweather.description = Binding fÃ¼r ACME Wetter\n\n# thing status descriptions\n\noffline.communication-error = Die ACME Wetter API ist zur Zeit nicht verfÃ¼gbar. Fehler {0}\n```\n\n----------------------------------------\n\nTITLE: Early Return in OpenHAB Rules (Java)\nDESCRIPTION: Demonstrates how to use early returns in a rule to conditionally stop execution. If the temperature is above 20, the rule will immediately return without turning on the heating.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nif (Temperature.state > 20) {\n return;\n}\nHeating.sendCommand(ON)\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Discovery for WiZ Binding in OpenHAB\nDESCRIPTION: This XML snippet shows the configuration for IP discovery method for the WiZ binding in OpenHAB. It includes the binding type, name, description, and connection type. The discovery method is set to 'ip' with specific parameters for IP broadcast, including port, request format, MAC address formatting, and timeout.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/addon.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<addon:addon id=\"wiz\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xmlns:addon=\"https://openhab.org/schemas/addon/v1.0.0\"\n  xsi:schemaLocation=\"https://openhab.org/schemas/addon/v1.0.0 https://openhab.org/schemas/addon-1.0.0.xsd\">\n\n  <type>binding</type>\n  <name>WiZ Binding</name>\n  <description>Binding for WiZ smart devices.</description>\n  <connection>local</connection>\n\n  <discovery-methods>\n    <discovery-method>\n      <service-type>ip</service-type>\n      <discovery-parameters>\n        <discovery-parameter>\n          <name>type</name>\n          <value>ipBroadcast</value>\n        </discovery-parameter>\n        <discovery-parameter>\n          <name>destPort</name>\n          <value>38899</value>\n        </discovery-parameter>\n        <discovery-parameter>\n          <name>requestPlain</name>\n          <value>{\"method\":\"registration\",\"id\":1,\"params\":{\"phoneIp\":\"$srcIp\",\"register\":false,\"phoneMac\":\"$srcMac\"}}</value>\n        </discovery-parameter>\n        <discovery-parameter>\n          <name>fmtMac</name>\n          <value>%02X</value>\n        </discovery-parameter>\n        <discovery-parameter>\n          <name>timeoutMs</name>\n          <value>5000</value>\n        </discovery-parameter>\n      </discovery-parameters>\n      <match-properties>\n        <match-property>\n          <name>response</name>\n          <regex>.*</regex>\n        </match-property>\n      </match-properties>\n    </discovery-method>\n  </discovery-methods>\n\n</addon:addon>\n```\n\n----------------------------------------\n\nTITLE: Checking Timer Termination Status in Blockly\nDESCRIPTION: This function returns true if the timer has completed its countdown and the code within the timer block has finished executing. It signifies the end of the timer's operation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_6\n\nLANGUAGE: blockly\nCODE:\n```\nTimer has terminated\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation for Main UI Sidebar\nDESCRIPTION: This code snippet demonstrates the special comment format required to enclose documentation content that will be displayed in the openHAB Main UI sidebar help. Content between these markers will be rendered in the UI.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/CONTRIBUTING.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- START MAINUI SIDEBAR DOC - DO NOT REMOVE -->\nLorem ipsum dolor sit amet, consectetur adipisici elit, ...\n<!-- END MAINUI SIDEBAR DOC - DO NOT REMOVE -->\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Rule using OpenHAB UI YAML Configuration\nDESCRIPTION: YAML configuration for a movie scene that triggers multiple item commands when MovieScene is turned ON. Controls blinds, lights, LED strips, soundbar, and TV settings.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration: {}\ntriggers:\n  - id: \"1\"\n    configuration:\n      itemName: MovieScene\n      command: ON\n    type: core.ItemCommandTrigger\nconditions: []\nactions:\n  - inputs: {}\n    id: \"2\"\n    configuration:\n      itemName: LivingRoom_Blinds\n      command: 90%\n    type: core.ItemCommandAction\n  - inputs: {}\n    id: \"3\"\n    configuration:\n      itemName: Livingroom_MainLight\n      command: OFF\n    type: core.ItemCommandAction\n  - inputs: {}\n    id: \"4\"\n    configuration:\n      itemName: LivingRoom_LEDStripe\n      command: 50%\n    type: core.ItemCommandAction\n  - inputs: {}\n    id: \"5\"\n    configuration:\n      itemName: Soundbar\n      command: ON\n    type: core.ItemCommandAction\n  - inputs: {}\n    id: \"6\"\n    configuration:\n      itemName: TV\n      command: ON\n    type: core.ItemCommandAction\n```\n\n----------------------------------------\n\nTITLE: Custom Light List Widget with Hard-Coded Values\nDESCRIPTION: This YAML shows a custom light list widget with hard-coded values. It configures the widget with specific icon, color, and item settings using the oh-toggle-item component, and includes tags for organization.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nuid: test_light_list\nprops:\n  parameterGroups: []\n  parameters:\n    - name: prop1\n      label: Prop 1\n      type: TEXT\n      description: A text prop\n    - name: item\n      label: Item\n      type: TEXT\n      context: item\n      description: An item to control\ntags:\n  - lights\n  - list\ncomponent: oh-toggle-item\nconfig:\n  icon: f7:lightbulb\n  iconColor: '=(items.AllLights.state == \"ON\") ? \"yellow\" : \"gray\"'\n  title: All Lights\n  color: '=(items.AllLights.state == \"ON\") ? \"yellow\" : \"gray\"'\n  item: AllLights\n```\n\n----------------------------------------\n\nTITLE: Setting URLs for openHAB Access\nDESCRIPTION: URLs for accessing the openHAB interface after installation, including local and openHABian specific addresses\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/first_steps.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:8080\nhttp://openhabian:8080\n```\n\n----------------------------------------\n\nTITLE: Default Element Definition in openHAB Sitemap\nDESCRIPTION: Defines the Default element which presents an Item using its type-specific default UI representation (e.g., Dimmer as Slider, Player with playback controls).\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nDefault item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>]\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrency Guard in OpenHAB Rules (JavaScript)\nDESCRIPTION: Shows how to protect against concurrent execution of rule code using a ReentrantLock. This pattern is useful when rules might be triggered simultaneously by UI events.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport java.util.concurrent.locks.ReentrantLock\n\nval ReentrantLock lock  = new ReentrantLock()\n\nrule ConcurrentCode\nwhen\n    Item Dummy received update\nthen\n    lock.lock()\n    try {\n        // do stuff\n    } finally{\n        lock.unlock()\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: XML File Using Custom Translation Keys\nDESCRIPTION: XML configuration using custom translation keys with the syntax '@text/<key> [params]'. This approach requires a mandatory language file for English as the XML cannot contain the English texts directly.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_13\n\nLANGUAGE: xml\nCODE:\n```\n<addon:addon id=\"acmeweather\">\n    <type>binding</type>\n    <name>@text/addon.acmeweather.name</name>\n    <description>@text/addon.acmeweather.description</description>\n</addon:addon>\n```\n\n----------------------------------------\n\nTITLE: Modifying Basic Rule in YAML\nDESCRIPTION: This YAML snippet shows how to modify an existing rule to create a complementary rule. It changes the conditions and actions to turn off an Item when different conditions are met.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_basic.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntriggers:\n  - id: \"1\"\n    configuration:\n      itemName: vCloudiness\n    type: core.ItemStateChangeTrigger\nconditions:\n  - id: \"2\"\n    configuration:\n      itemName: vCloudiness\n      operator: LT\n      state: 50 %\n    type: core.ItemStateCondition\n  - id: \"3\"\n    configuration:\n      itemName: vIsCloudy\n      operator: \"!=\"\n      state: OFF\n    type: core.ItemStateCondition\nactions:\n  - id: \"4\"\n    configuration:\n      itemName: vIsCloudy\n      command: OFF\n    type: core.ItemCommandAction\nconfiguration: {}\ntype: core.rules:rule\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Start Level Reload in Java\nDESCRIPTION: This rule demonstrates the behavior of rules triggered at specific start levels. It logs information when the system reaches start level 70 and explains how rule reloading works during development.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nrule \"Start level reload\"\nwhen\n    System reached start level 70\nthen\n    logInfo(\"StartLevelTest\", \"triggered a second time, if active rule being edited and saved another time.\")\n    logInfo(\"StartLevelTest\", \"You wonÂ´t realize this behaviour under regular run conditions, each start level is reached exactly once.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Sample MQTT JSON Message Structure\nDESCRIPTION: Example JSON payload structure published by an MQTT-enabled plant sensor containing various metrics like light, moisture, temperature, conductivity and battery level.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/things_advanced.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"light\": 5424, \"moisture\": 30, \"temperature\": 21.4, \"conductivity\": 1020, \"battery\": 100}\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Style Classes to SVG Elements in YAML\nDESCRIPTION: This YAML configuration demonstrates how to apply multiple CSS classes to different SVG elements based on their ON state. It targets specific elements by their IDs and assigns corresponding animation classes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-fixed.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nSet Style Class based on On State:\nsz_main_light_buttonLine:buttonLine_toOn, sz_main_light_roundedButton:roundedButton_toOn\n```\n\n----------------------------------------\n\nTITLE: Example of Setpoint Element Usage\nDESCRIPTION: Shows an example of a Setpoint element for adjusting kitchen temperature within a specific range and step size.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nSetpoint item=KI_Temperature label=\"Kitchen [%.1f Â°C]\" minValue=4.5 maxValue=30 step=0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH Connection Parameters for openHAB Console\nDESCRIPTION: These are the SSH connection parameters required to connect to the openHAB console. They include the host address, port number, username, and password.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/windows.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nHost: 127.0.0.1\nPort: 8101\nUsername: openhab\nPassword: habopen\n```\n\n----------------------------------------\n\nTITLE: Configuring Equinox OSGi Bundles in INI\nDESCRIPTION: Configuration file (config.ini) that specifies required OSGi bundles for Equinox runtime. Sets up core runtime bundles, console functionality, and basic framework settings.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/equinox.md#2025-04-09_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nosgi.bundles=\\\norg.eclipse.core.runtime,\\\norg.eclipse.equinox.common,\\\norg.eclipse.core.jobs,\\\norg.eclipse.equinox.registry,\\\norg.eclipse.equinox.preferences,\\\norg.eclipse.core.contenttype,\\\norg.eclipse.equinox.app,\\\norg.eclipse.equinox.console,\\\norg.apache.felix.gogo.runtime,\\\norg.apache.felix.gogo.shell,\\\norg.apache.felix.gogo.command\n\neclipse.ignoreApp=true\neclipse.consoleLog=true\n```\n\n----------------------------------------\n\nTITLE: HTML Rendering of Label Component\nDESCRIPTION: Shows the resulting HTML output when using the Label component, which wraps the text in its own div element.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row fancy-row\">\n  <div>Label text here</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Default Variables with oh-context in YAML\nDESCRIPTION: Demonstrates how to create more complex default variable values such as arrays and objects using oh-context.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- component: oh-context\n  config:\n    variables:\n      lightArray:\n        - ON\n        - OFF\n        - OFF\n        - OFF\n      userObject:\n        user: Guest\n        color: red\n        timeout: 5\n```\n\n----------------------------------------\n\nTITLE: Implementing Reschedulable Timer with Cache in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a reschedulable timer using the cache. It stores the timer in the cache, allowing it to be rescheduled if motion is detected again within the 30-minute period.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_advanced.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.info('Motion was detected');\nitems.getItem('FrontPorchLight').sendCommand('ON');\n\ntimerId = ruleUID+'_timer';\nvar lightsOut = function() {\n  console.info('No more motion, turning off the light');\n  items.getItem('FrontPorchLight').sendCommand('OFF');\n  cache.put(timerId, null);\n};\n\nvar timer = cache.get(timerId);\nif(!timer) {\n    cache.put(timerId, ScriptExecution.createTimer(time.ZonedDateTime.now().plusMinutes(30), lightsOut));\n}\nelse {\n    timer.reschedule(time.ZonedDateTime.now());\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Colortemperaturepicker Element Usage\nDESCRIPTION: Demonstrates the usage of a Colortemperaturepicker element for controlling an LED light's color temperature.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nColortemperaturepicker item=LR_LEDLight_ColorTemp label=\"LED Light Color Temperature\" staticIcon=colorwheel\n```\n\n----------------------------------------\n\nTITLE: Translating Item States with Nested Ternary Operators\nDESCRIPTION: Expression using multiple nested ternary operators to translate numeric states of an Item into descriptive text labels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n=(items.xxx.state === '0') ? 'Off' : (items.xxx.state === '1') ? 'Heat' : (items.xxx.state === '11') ? 'Economy Heat' : (items.xxx.state === '15') ? 'Full Power': (items.xxx.state === '31') ? 'Manual' : 'Not Set'\n```\n\n----------------------------------------\n\nTITLE: Service Control Commands for systemd Systems\nDESCRIPTION: Essential commands for controlling the openHAB service on systems using systemd, including status check, start/stop, log viewing, and enabling autostart.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n# Learn about the current service status\nsudo systemctl status openhab.service\n\n# (Re-)Start openHAB (background service)\nsudo systemctl restart openhab.service\n\n# Stop the openHAB background service\nsudo systemctl stop openhab.service\n\n# Get the service log since the last boot\nsudo journalctl -u openhab.service -b\n\n# Make openHAB automatically start after booting the Linux host\nsudo systemctl daemon-reload\nsudo systemctl enable openhab.service\n```\n\n----------------------------------------\n\nTITLE: Frame Element Definition in openHAB Sitemap\nDESCRIPTION: Defines the Frame element syntax which creates visually separated areas for items in the UI. Frames can contain additional sitemap elements and may have optional label and icon parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nFrame [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] {\n    [additional sitemap elements]\n}\n```\n\n----------------------------------------\n\nTITLE: Number Item DecimalType Conversions in Java\nDESCRIPTION: Common conversion operations for DecimalType states, including hex code conversions and parsing.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\n// convert integer_number to string containing hex_code\nvar String hex_code = Long.toHexString(integer_number)\n\n// convert hex_code to Number type\nvar myNumber = Integer.parseInt(hex_code, 16) as Number\n// use the following for large_hex_code\nvar myNumber = Long.parseLong(hex, 16) as Number\n\n// convert hex_code to DecimalType\nvar DecimalType parsedResult = new DecimalType(Long.parseLong(hex_code, 16))\n```\n\n----------------------------------------\n\nTITLE: Markdown Unordered List Example\nDESCRIPTION: Shows the correct formatting for a simple unordered list using hyphens as bullet points.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/styleguide.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Some text\n- Some more text\n```\n\n----------------------------------------\n\nTITLE: Frame Element Example in openHAB Sitemap\nDESCRIPTION: Example of a Frame element that creates a visual section labeled \"Demo\" containing a light switch with a light icon.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nFrame label=\"Demo\" {\n    Switch item=Lights icon=\"light\"\n    //# and so on...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Image Element in OpenHAB Sitemap\nDESCRIPTION: Syntax for displaying images from URLs or local storage with refresh capabilities. Supports both direct URLs and item-based image sources.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nImage [item=<itemname>] [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] url=\"<url of image>\" [refresh=xxxx]\n```\n\nLANGUAGE: java\nCODE:\n```\nImage url=\"https://raw.githubusercontent.com/wiki/openhab/openhab/images/features.png\"\n\n// display a snapshot image from an IP camera, using refresh parameter to get updated images\nImage url=\"https://192.168.1.203:8080/?action=snapshot\" refresh=10000\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence Filters in Java\nDESCRIPTION: This code demonstrates how to define named filters for persistence in openHAB, including examples of equals, threshold, range, and time filters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nFilters {\n  exactlySomeState : = \"ARMED\", \"UNARMED\"\n  notTheseStates : ! \"UNDEF\", \"NULL\"\n  fiveMilliAmps : > 5 mA\n  tenPercent : > % 10\n  fromFiveToTenKelvin : [] 5 10 K\n  notBetweenSevenAndNine : ][ 7 9\n  thirtySeconds : T 30 s\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Script in Transformation Profile Configuration\nDESCRIPTION: Demonstrates using inline Ruby scripts directly in Item definitions when configuring transformation profiles, eliminating the need for separate script files.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nNumber <itemName> { channel=\"<channelUID>\"[profile=\"transform:RB\", toItemScript=\"| input.to_f * 10\", commandFromItemScript=\"| input.to_f * 0.1\" ] }\n```\n\n----------------------------------------\n\nTITLE: Defining Mapview Element in OpenHAB Sitemap\nDESCRIPTION: Syntax for displaying an OpenStreetMap based on a Location Item. Supports custom labels and height configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nMapview [item=<itemname>] [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [height=<heightvalue>]\n```\n\nLANGUAGE: java\nCODE:\n```\nMapview item=Demo_Location height=5\n```\n\n----------------------------------------\n\nTITLE: DateTime Comparison Operations\nDESCRIPTION: Examples of comparing DateTimeType values and extracting time components.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\n// See if DateTimeType is before now\nif(now.toInstant.isBefore((MyDateTimeItem.state as DateTimeType).instant)) ...\n\n// See if DateTimeType is after now\nif(now.toInstant.isAfter((MyDateTimeItem.state as DateTimeType).instant)) ...\n\n// Get the hour in the day from a DateTimeType\nval hour = (MyDateTimeItem.state as DateTimeType).getZonedDateTime(ZoneId.systemDefault).hour\n```\n\n----------------------------------------\n\nTITLE: Including Framework7 Icons in Documentation\nDESCRIPTION: This example shows how to embed Framework7 icons in documentation with optional color settings. These icons will render in the UI but not on the documentation website, so descriptive text is recommended.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/CONTRIBUTING.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAdd ... using the <!--F7:blue plus_circle_fill --> plus button ...\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Element in OpenHAB Sitemap\nDESCRIPTION: Syntax for creating time-series charts of logged data with extensive customization options for persistence, time periods, and display formatting.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nChart item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [refresh=xxxx]\nperiod=xxxx [service=\"<service>\"] [legend=true/false] [forceasitem=true/false] [yAxisDecimalPattern=xxxx]\n[interpolation=xxxx]\n```\n\n----------------------------------------\n\nTITLE: Mapping Syntax for Switch and Selection Elements in OpenHAB\nDESCRIPTION: Defines the basic syntax for creating mappings in OpenHAB sitemaps. Mappings allow assigning friendly descriptions and icons to item values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nmappings=[value_1=\"description_1\", value_2=\"description_2\"=<iconname>, value_press:value_release=\"description_3\", ...]\n```\n\n----------------------------------------\n\nTITLE: XML Discovery Method Structure\nDESCRIPTION: XML structure for defining discovery methods in OpenHAB addons. Includes root elements for discovery methods, parameters, and match properties used to identify devices on the network.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/addon.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<discovery-methods>\n  <discovery-method>\n    <service-type>mdns</service-type>\n    <discovery-parameters>\n      <discovery-parameter>\n        <name>parameterName</name>\n        <value>parameterValue</value>\n      </discovery-parameter>\n    </discovery-parameters>\n    <match-properties>\n      <match-property>\n        <name>propertyName</name>\n        <regex>propertyRegex</regex>\n      </match-property>\n    </match-properties>\n  </discovery-method>\n</discovery-methods>\n```\n\n----------------------------------------\n\nTITLE: Creating a Popup Component with Framework7 in YAML\nDESCRIPTION: Example of implementing a popup modal using Framework7 components with open/close functionality through special classes and properties.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- component: f7-card\n  config:\n    title: Popup Card\n  slots:\n    default:\n      - component: oh-link\n        config:\n          text: Open the popup\n          popupOpen: .demo-pop\n      - component: f7-popup\n        config:\n          class: demo-pop\n        slots:\n          default:\n            - component: oh-button\n              config:\n                text: Close it again\n                popupClose: .demo-pop\n```\n\n----------------------------------------\n\nTITLE: Dynamic Visibility Examples in OpenHAB\nDESCRIPTION: Examples demonstrating various visibility conditions including simple comparisons, multiple conditions, and combined AND conditions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nText item=BatteryWarning visibility=[Battery_Level<30]\nSwitch item=CinemaLight label=\"Cinema light\" visibility=[TV_Power==ON]\nSwitch item=LawnSprinkler visibility=[Day_Time==\"Morning\", Day_Time==\"Afternoon\", Temperature>19]\nSwitch item=LawnSprinkler visibility=[Day_Time==\"Morning\" AND Temperature>19]\n```\n\n----------------------------------------\n\nTITLE: Applying Type Filter to WebSocket Events in JSON (JavaScript)\nDESCRIPTION: Example of applying a type filter to the WebSocket connection. It includes the filter type, topic, payload with event types to include, source, and eventId.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"WebSocketEvent\",\n    \"topic\": \"openhab/websocket/filter/type\",\n    \"payload\": \"[\\\"ItemStateEvent\\\", \\\"ItemStateChangedEvent\\\"]\",\n    \"source\": \"WebSocketTestInstance\",\n    \"eventId\": \"5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting openHAB Windows Service\nDESCRIPTION: Commands to install openHAB as a Windows service and start it. These should be run in an elevated command prompt after configuring the service wrapper.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/windows.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nC:\\openHAB\\userdata\\bin\\openHAB-service.bat install\nnet start \"openHAB\"\n```\n\n----------------------------------------\n\nTITLE: DateTime Comparison Example in OpenHAB\nDESCRIPTION: Shows how to compare DateTime values relative to current time in seconds. Used for time-based conditions in rules.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_47\n\nLANGUAGE: text\nCODE:\n```\nLights_On_Time > 300\n```\n\n----------------------------------------\n\nTITLE: OpenHAB Mapping Examples\nDESCRIPTION: Examples showing different mapping configurations including simple value mappings, channel mappings, icon assignments, and press-release behavior.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nmappings=[ON=\"on\", OFF=\"standby\"]\nmappings=[1=\"DasErste\", 2=\"BBC One\", 3=\"Cartoon Network\"]\n\nmappings=[OFF=\"All heaters off\"]\nmappings=[15=\"Gone\", 19=\"Chilly\", 21=\"Cozy\"]\n\nmappings=[ON=\"Mic On\"=material:mic, OFF=\"Mic Off\"=material:mic_off]\n\nmappings=[ON:OFF=\"On\"]\n```\n\n----------------------------------------\n\nTITLE: Installing openHAB on RPM-based Systems\nDESCRIPTION: Command to install openHAB on RPM-based systems using yum. For systems that support it, dnf can be used instead of yum.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install openhab\n```\n\n----------------------------------------\n\nTITLE: Creating OpenHAB Directories - Linux Bash\nDESCRIPTION: Commands to create and set permissions for OpenHAB configuration directories.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /opt/openhab/{conf,userdata,addons}\nsudo chown -R openhab:openhab /opt/openhab\n```\n\n----------------------------------------\n\nTITLE: Navigating to Specific Tabs Programmatically using Page Routes in openHAB\nDESCRIPTION: Examples of how to programmatically navigate to specific tabs within a Tabbed Page by using the page route with the tab index. This can be used with UI Command Items or cloud notification actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/tabbed-pages.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n/page/MyTabbedPage/0\n```\n\nLANGUAGE: markdown\nCODE:\n```\n/page/MyTabbedPage/1\n```\n\nLANGUAGE: markdown\nCODE:\n```\n/pages/MyTabbedPage/2\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Hierarchical Metadata Structure in YAML\nDESCRIPTION: A more complex YAML metadata structure with nested configuration properties showing hierarchical organization. This example demonstrates how deep property access can be achieved via dot notation in Blockly.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nvalue: ON\nconfig:\n  ooone: \"123\"\n  oone:\n    two: \"456\"\n  one:\n    two:\n      three: \"756\"\n  field1: 1\n  field2: 2\n  field3: 3\n```\n\n----------------------------------------\n\nTITLE: OpenHAB Windows Service Configuration File\nDESCRIPTION: Configuration file for the openHAB Windows service that defines environment variables, Java parameters, and service properties. This file should be saved as openHAB-wrapper.conf.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/windows.md#2025-04-09_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\n#*******************************************************\n# openHAB-wrapper.conf for Windows Service Installation\n#*******************************************************\n\n# openHAB installation dir (Adapt this first setting to your system)\nset.default.OPENHAB_HOME=C:\\openHAB\n\n# Wrapper Properties\nset.default.OPENHAB_CONF=%OPENHAB_HOME%\\conf\nset.default.OPENHAB_RUNTIME=%OPENHAB_HOME%\\runtime\nset.default.OPENHAB_USERDATA=%OPENHAB_HOME%\\userdata\nset.default.OPENHAB_LOGDIR=%OPENHAB_USERDATA%\\logs\nset.default.KARAF_LOG=%OPENHAB_USERDATA%\\logs\nset.default.KARAF_HOME=%OPENHAB_RUNTIME%\nset.default.KARAF_BASE=%OPENHAB_USERDATA%\nset.default.KARAF_DATA=%OPENHAB_USERDATA%\nset.default.KARAF_ETC=%OPENHAB_USERDATA%\\etc\nset.default.PATH=%PATH%;%KARAF_BASE%\\lib;%KARAF_HOME%\\lib\n\n# Java Application\nwrapper.working.dir=%KARAF_BASE%\nwrapper.java.command=%JAVA_HOME%\\bin\\java\nwrapper.java.mainclass=org.apache.karaf.wrapper.internal.service.Main\nwrapper.java.classpath.1=%KARAF_HOME%\\lib\\boot\\*.jar\nwrapper.java.classpath.2=%KARAF_DATA%\\lib\\wrapper\\*.jar\nwrapper.java.classpath.3=%KARAF_HOME%\\lib\\jdk9plus\\*.jar\nwrapper.java.classpath.4=%KARAF_HOME%\\lib\\endorsed\\*.jar\nwrapper.java.library.path.1=%KARAF_DATA%\\lib\\wrapper\\\n\n# Java Parameters\nwrapper.java.additional.1=-Dkaraf.home=\"%KARAF_HOME%\"\nwrapper.java.additional.2=-Dkaraf.base=\"%KARAF_BASE%\"\nwrapper.java.additional.3=-Dkaraf.data=\"%KARAF_DATA%\"\nwrapper.java.additional.4=-Dkaraf.etc=\"%KARAF_ETC%\"\nwrapper.java.additional.5=-Dcom.sun.management.jmxremote\nwrapper.java.additional.6=-Dkaraf.startLocalConsole=false\nwrapper.java.additional.7=-Dkaraf.startRemoteShell=true\nwrapper.java.additional.8=-Dopenhab.home=\"%OPENHAB_HOME%\"\nwrapper.java.additional.9=-Dopenhab.conf=\"%OPENHAB_HOME%\\conf\"\nwrapper.java.additional.10=-Dopenhab.runtime=\"%OPENHAB_HOME%\\runtime\"\nwrapper.java.additional.11=-Dopenhab.userdata=\"%OPENHAB_HOME%\\userdata\"\nwrapper.java.additional.12=-Dopenhab.logdir=\"%OPENHAB_USERDATA%\\logs\"\nwrapper.java.additional.13=-Dfelix.cm.dir=\"%OPENHAB_HOME%\\userdata\\config\"\nwrapper.java.additional.14=-Djdk.util.zip.disableZip64ExtraFieldValidation=true\nwrapper.java.additional.15=-Djetty.host=0.0.0.0\nwrapper.java.additional.16=-Djetty.http.compliance=RFC2616\nwrapper.java.additional.17=-Dorg.apache.cxf.osgi.http.transport.disable=true\nwrapper.java.additional.18=-Dorg.osgi.service.http.port=8080\nwrapper.java.additional.19=-Dorg.osgi.service.http.port.secure=8443\nwrapper.java.additional.20=-Djava.util.logging.config.file=\"%KARAF_ETC%\\java.util.logging.properties\"\nwrapper.java.additional.21=-Dkaraf.logs=\"%OPENHAB_LOGDIR%\"\nwrapper.java.additional.22=-Djava.awt.headless=true\nwrapper.java.additional.23=-Dfile.encoding=UTF-8\nwrapper.java.maxmemory=512\n\n# Wrapper Logging Properties\nwrapper.console.format=PM\nwrapper.console.loglevel=INFO\nwrapper.logfile=%OPENHAB_USERDATA%\\logs\\wrapper.log\nwrapper.logfile.format=LPTM\nwrapper.logfile.loglevel=INFO\nwrapper.logfile.maxsize=10m\nwrapper.logfile.maxfiles=5\nwrapper.syslog.loglevel=NONE\n\n# Wrapper Windows Properties\nwrapper.console.title=openHAB\nwrapper.ntservice.name=openHAB\nwrapper.ntservice.displayname=openHAB\nwrapper.ntservice.description=openHAB Service\nwrapper.ntservice.dependency.1=\nwrapper.ntservice.starttype=AUTO_START\nwrapper.ntservice.interactive=false\n```\n\n----------------------------------------\n\nTITLE: Converting HSB Brightness to On/Off Status\nDESCRIPTION: Expression that extracts the brightness component from an HSB Color Item state and converts it to a user-friendly 'On' or 'Off' representation with percentage.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n=(@@'Color1'.split(',')[2] !== '0') ? 'On ' + '(' + @@'Color1'.split(',')[2] + '%)' : 'Off'\n```\n\n----------------------------------------\n\nTITLE: Complex Color Conditions for Number Item\nDESCRIPTION: This snippet illustrates how to set multiple color conditions with AND operators and a default color for a Number item's label, value, and icon.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nText item=NumberItem labelcolor=[>0 AND <50=\"yellow\", >=50=\"green\", \"gray\"] valuecolor=[>0 AND <50=\"yellow\", >=50=\"green\", \"gray\"] iconcolor=[>0 AND <50=\"yellow\", >=50=\"green\", \"gray\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a New openHAB Binding Skeleton in Windows\nDESCRIPTION: A Windows command for generating the basic skeleton of a new openHAB binding. This command helps developers to quickly start with the proper structure for binding development.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncreate_openhab_binding_skeleton.cmd MyNewBinding \"<Author>\" <GitHubUsername>\n```\n\n----------------------------------------\n\nTITLE: Rules Refresh Shell Script\nDESCRIPTION: Shell script to refresh openHAB rules files after persistence service startup.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\n#This script is called by openHAB after the persistence service has started\nsleep 5\nfind \"$OPENHAB_CONF/rules\" -type f -name '*.rules' -not -name refresh.rules | xargs touch\n```\n\n----------------------------------------\n\nTITLE: SSH Port Configuration\nDESCRIPTION: Configuration line to change the SSH port in runtime.cfg file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/console.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\norg.apache.karaf.shell:sshPort = 1234\n```\n\n----------------------------------------\n\nTITLE: Send Log-Only Notification via Blockly\nDESCRIPTION: Sends a notification only to myopenhab.org notifications log. These notifications are not sent to devices or logged locally on the openHAB server. Currently, log level and icon information are not displayed in the cloud log.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-notifications.md#2025-04-09_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Installing Service Wrapper Features in openHAB Console\nDESCRIPTION: Commands to install the service wrapper feature in openHAB, which allows running openHAB as a Windows service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/windows.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nfeature:install service-wrapper\nwrapper:install --name \"openHAB\" --display \"openHAB\" --description \"openHAB Service\"\n```\n\n----------------------------------------\n\nTITLE: Linking Item to Z-Wave Switch Channel in Items File\nDESCRIPTION: This snippet illustrates how to link an item to a specific channel of a Z-Wave switch in an OpenHAB items configuration file. It shows the syntax for defining an item with its name, label, group, and channel binding.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_7\n\nLANGUAGE: xtend\nCODE:\n```\nSwitch Kitchen_Light_Switch \"Kitchen Light\" (Indoor_Lights) { channel=\"zwave:device:1a2b3c4d:node2:switch_binary\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Icons in openHAB Sitemap\nDESCRIPTION: This snippet demonstrates the syntax for setting dynamic icons based on item states in an openHAB sitemap. It shows how to use comparison operators and combine multiple conditions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nicon=[item_name operator value = icon, item_name operator value AND item_name operator value = icon, ... ]\n```\n\n----------------------------------------\n\nTITLE: Text-to-Speech with Web Audio Sink\nDESCRIPTION: Example of using say action to perform text-to-speech through web audio sink\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/about.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsay(\"Hello world!\", \"voicerss:enUS\", \"webaudio\")\n```\n\n----------------------------------------\n\nTITLE: Translating Item States with Object as Switch Statement\nDESCRIPTION: Simplified version of state translation using an object lookup instead of nested ternary operators for better readability.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n={0:'Off',1:'Heat',11:'Economy Heat',15:'Full Power',31:'Manual'}[@@xxx] || 'Not Set'\n```\n\n----------------------------------------\n\nTITLE: Setting Page Visibility Rules in YAML\nDESCRIPTION: Demonstrates how to restrict page visibility using role-based access control. The visibleTo property accepts an array of role and user specifications to determine who can view the page.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvisibleTo:\n  - role:administrator\n  - role:user\n  - user:userid\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Transformation Profile in Items\nDESCRIPTION: Example of applying JavaScript transformation profiles to an Item, showing how to configure bidirectional transformations between Things and Items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nNumber <itemName> { channel=\"<channelUID>\"[profile=\"transform:JS\", toItemScript=\"decode_json.js\", commandFromItemScript=\"encode_json.js\" ] }\n```\n\n----------------------------------------\n\nTITLE: Sample User ID Command Output\nDESCRIPTION: Example output of the 'id' command showing the user ID, group ID, and group memberships for the openHAB user. These values are needed for Docker container configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuid=1032(openhab) gid=100(users) groups=100(users),65537(dialout),65539(openhab)\n```\n\n----------------------------------------\n\nTITLE: Updating Configuration using Configuration Admin Service in OSGi\nDESCRIPTION: This snippet shows how to use the Configuration Admin service to update or create a configuration for an OSGi bundle. It demonstrates obtaining a Configuration object, modifying its properties, and updating it, which will notify the target bundle of the changes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/configadmin.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.example;\n\nimport java.io.IOException;\nimport java.util.Dictionary;\nimport java.util.Hashtable;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.osgi.service.cm.Configuration;\nimport org.osgi.service.cm.ConfigurationAdmin;\nimport org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\n\n@Component(service = TimeEventHandler.class)\n@NonNullByDefault\npublic class TimeEventHandler {\n\n    private final ConfigurationAdmin configurationAdmin;\n\n    // Here we perform a configuration update as soon as this service gets activated\n    @Activate\n    public TimeEventHandler(@Reference ConfigurationAdmin configurationAdmin) {\n        this.configurationAdmin = configurationAdmin;\n        try {\n            Configuration config = configurationAdmin.getConfiguration(\"com.example.handler\", null);\n            Dictionary<String, Object> props = config.getProperties();\n\n            if (props == null) { // if null, the configuration is new\n                props = new Hashtable<>();\n            }\n\n            // set some properties\n            props.put(\"formatting\", \"EEE, d MMM yyyy HH:mm:ss Z\");\n\n            // update the configuration, the target bundle will be notified for the change\n            config.update(props);\n        } catch (IOException e) {\n            // TODO: handle exception\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: String Comparison Example in OpenHAB\nDESCRIPTION: Demonstrates case-sensitive string comparison in OpenHAB rules where ON and on are treated as different values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_46\n\nLANGUAGE: text\nCODE:\n```\n==ON\n```\n\n----------------------------------------\n\nTITLE: Internationalization File Format Example\nDESCRIPTION: Demonstrates the standard file naming format for internationalization property files, showing both general format and specific example.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFormat:     any_<language-code>_<country-code>.properties\nExample:    any_de_DE.properties\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Dictionary in Blockly\nDESCRIPTION: This block, found in the Loops section, allows iteration over the elements of a dictionary, providing the value into a chosen variable for each iteration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-standard-ext.md#2025-04-09_snippet_5\n\nLANGUAGE: blockly\nCODE:\n```\n![map-for-each](../images/blockly/blockly-map-for-each.png)\n```\n\n----------------------------------------\n\nTITLE: Window Open Reminder (YAML)\nDESCRIPTION: This YAML snippet defines a rule that sends a reminder notification if a window is left open for an hour. It uses a group state change trigger and a JavaScript action to set a timer.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration: {}\ntriggers:\n  - id: \"1\"\n    configuration:\n      groupName: gWindows\n      state: OPEN\n    type: core.GroupStateChangeTrigger\nconditions: []\nactions:\n  - inputs: {}\n    id: \"2\"\n    configuration:\n      type: application/javascript;version=ECMAScript-2021\n      script: >\n        var windowName = event.itemName;\n\n        var windowState = event.newState;\n\n        // Use a function generator, otherwise the variable windowName can be mutated by later runs of the rule\n\n        let generateNotificationFunction = (windowName) => {\n            return function () {\n                const window = items.getItem(windowName);\n                // Check if the window is still open\n                if (window.state === 'OPEN') {\n                    actions.NotificationAction.sendBroadcastNotification(`${window.label} is open for an hour!`);\n                }\n            }\n        }\n\n        // Create a timer that expires in one hour and then sends a notification using myOpenHAB, e.g. \"Livingroom window is open for an hour!\"\n\n        setTimeout(generateNotificationFunction(windowName), 3600 * 1000);\n    type: script.ScriptAction\n```\n\n----------------------------------------\n\nTITLE: Viewing NGINX Error Logs for Troubleshooting\nDESCRIPTION: Command to monitor the NGINX error log in real-time for troubleshooting issues with the configuration. This helps identify problems when the setup isn't working as expected.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsudo tail -f /var/log/nginx/error.log\n```\n\n----------------------------------------\n\nTITLE: Adding a Personal Widget to a Page Using widget: Syntax in YAML\nDESCRIPTION: This snippet demonstrates how to add a personal widget to a page by referencing its UID with the special 'widget:' syntax and configuring its props.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncomponent: widget:widget_0a26c10a4d\nconfig:\n  prop1: Test\n  item: Color1\n```\n\n----------------------------------------\n\nTITLE: Creating Hierarchical Group Structure in OpenHAB\nDESCRIPTION: Example of creating a hierarchical structure of Groups and Items, demonstrating both location-based and functional perspectives. Shows how Items can belong to multiple groups simultaneously.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// Overarching group\nGroup House\n// Location perspective\nGroup GroundFloor  (House)\nGroup Livingroom   (GroundFloor)\n// Functional perspective\nGroup Sensors      (House)\nGroup Temperatures (Sensors)\n\n// Example Item\nNumber:Temperature Livingroom_Temperature \"Temperature [%.1f Â°C]\" (Livingroom, Temperatures)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Real-Time Logs in openHAB Console\nDESCRIPTION: This snippet demonstrates how to use the log:tail command in the openHAB console to monitor logs in real-time. It shows example output including temperature readings and HTTP requests.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/logging.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenhab> log:tail\n20:38:00.031 [DEBUG] [sistence.rrd4j.internal.RRD4jService] - Stored 'Temperature_FF_Child' with state '19.1' in rrd4j database\n20:38:00.032 [DEBUG] [sistence.rrd4j.internal.RRD4jService] - Stored 'Temperature_FF_Bed' with state '19.5' in rrd4j database\n20:38:20.463 [DEBUG] [thome.io.rest.core.item.ItemResource] - Received HTTP POST request at 'items/Light_FF_Bath_Ceiling' with value 'ON'.\n20:38:21.444 [DEBUG] [thome.io.rest.core.item.ItemResource] - Received HTTP POST request at 'items/Light_FF_Bath_Mirror' with value 'ON'.\n```\n\n----------------------------------------\n\nTITLE: Conditional Item Command Sending in Blockly\nDESCRIPTION: This snippet demonstrates checking the state of one Item and conditionally sending a command to another Item based on that state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_7\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-sendCommandExample1](../images/blockly/blockly-sendCommandExample1.png)\n```\n\n----------------------------------------\n\nTITLE: Creating Let's Encrypt Validation Directory\nDESCRIPTION: Command to create directory for Let's Encrypt domain validation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir -p /var/www/mydomain\n```\n\n----------------------------------------\n\nTITLE: Using Component Slots for Hierarchical Structure in YAML\nDESCRIPTION: Demonstrates how to use slots to create a hierarchical structure by nesting an oh-list-item inside an oh-list component.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- component: oh-list\n  slots:\n    default:\n      - component: oh-list-item\n```\n\n----------------------------------------\n\nTITLE: Handling Commands in openHAB Thing Handler\nDESCRIPTION: Demonstrates how to implement the handleCommand method in a Thing Handler to process different command types and handle communication errors.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleCommand(ChannelUID channelUID, Command command) {\n    try {\n        switch (channelUID.getId()) {\n            case CHANNEL_TEMPERATURE:\n                if(command instanceof OnOffType.class) {\n                    // binding specific logic goes here\n                    SwitchState deviceSwitchState = convert((OnOffType) command);\n                    updateDeviceState(deviceSwitchState);\n                }\n                break;\n            // ...\n        }\n        statusUpdated(ThingStatus.ONLINE);\n    } catch(DeviceCommunicationException ex) {\n        // catch exceptions and handle it in your binding\n        statusUpdated(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ex.getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Commands in openHAB Thing Handler\nDESCRIPTION: Demonstrates how to implement the handleCommand method in a Thing Handler to process different command types and handle communication errors.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleCommand(ChannelUID channelUID, Command command) {\n    try {\n        switch (channelUID.getId()) {\n            case CHANNEL_TEMPERATURE:\n                if(command instanceof OnOffType.class) {\n                    // binding specific logic goes here\n                    SwitchState deviceSwitchState = convert((OnOffType) command);\n                    updateDeviceState(deviceSwitchState);\n                }\n                break;\n            // ...\n        }\n        statusUpdated(ThingStatus.ONLINE);\n    } catch(DeviceCommunicationException ex) {\n        // catch exceptions and handle it in your binding\n        statusUpdated(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, ex.getMessage());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic SVG Structure with Rectangles\nDESCRIPTION: Example SVG file structure showing three rectangles created in Inkscape, demonstrating the basic XML layout of an SVG image.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-fixed.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<svg width=\"210mm\" height=\"297mm\" ... some information omitted here>\n<defs id=\"defs1\" />\n  <g inkscape:label=\"Layer 1\" inkscape:groupmode=\"layer id=\"layer1\">\n    <rect style=\"fill:#0000ff;fill-rule:evenodd;stroke-width:0.264583\"\n       id=\"rect1\"\n       width=\"36.495762\"\n       height=\"25.169491\"\n       x=\"30.203388\"\n       y=\"31.461863\" />\n    <rect style=\"fill:#ff2a00;fill-rule:evenodd;stroke-width:0.264583;fill-opacity:1\"\n        id=\"rect2\"\n       ...omitted />\n    <rect style=\"fill:#0000ff;fill-rule:evenodd;stroke-width:0.264583\"\n        id=\"rect3\"\n    ...omitted />\n  </g>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Basic Timer Creation with Retrigger Check\nDESCRIPTION: Shows how a basic timer is created with a check for existing timer instances and retrigger handling.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (cache.private.exists('MyTimer') === false || cache.private.get('MyTimer').hasTerminated()) {\n  cache.private.put('MyTimer', actions.ScriptExecution.createTimer('MyTimer', time.ZonedDateTime.now().plusSeconds(10), function () {\n    cache.private.remove('MyTimer');\n  }));\n} else {\n  cache.private.get('MyTimer').reschedule(time.ZonedDateTime.now().plusSeconds(10));\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificate with OpenSSL\nDESCRIPTION: Command to generate a 2048-bit RSA key and self-signed certificate valid for one year.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/openhab.key -out /etc/ssl/openhab.crt\n```\n\n----------------------------------------\n\nTITLE: Dumping Props as JSON in Personal Widgets (YAML)\nDESCRIPTION: This snippet shows how to create a widget that dumps its props as JSON. It's useful for verifying the names of automatically generated action props based on different parameter group names.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/building-pages.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nuid: dump_props_as_json\nprops:\n  parameterGroups:\n    - name: sceneOne\n      context: action\n      label: Scene One\n    - name: sceneTwo\n      context: action\n      label: Scene Two\n    - name: tapAction\n      context: action\n      label: Tap Action\n    - name: action\n      context: action\n      label: Tap Action\n  parameters:\n    - name: prop1\n      label: Prop 1\n      type: TEXT\n      description: A text prop\ntags: []\ncomponent: f7-row\nconfig:\n  tag: pre\nslots:\n  default:\n    - component: Label\n      config:\n        text: =JSON.stringify(props, null, 4)\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command - Linux\nDESCRIPTION: Docker command to run OpenHAB container with necessary volume mounts and environment variables.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n        --name openhab \\\n        --net=host \\\n        -v /etc/localtime:/etc/localtime:ro \\\n        -v /etc/timezone:/etc/timezone:ro \\\n        -v /opt/openhab/conf:/openhab/conf \\\n        -v /opt/openhab/userdata:/openhab/userdata \\\n        -v /opt/openhab/addons:/openhab/addons \\\n        -d \\\n        -e USER_ID=<uid> \\\n        -e GROUP_ID=<gid> \\\n        -e CRYPTO_POLICY=unlimited \\\n        --restart=always \\\n        openhab/openhab:<version>-<distribution>\n```\n\n----------------------------------------\n\nTITLE: Defining Buttongrid Element in openHAB Sitemap\nDESCRIPTION: Defines a Buttongrid element representing a grid of buttons for sending commands to an Item. It can be used to simulate a remote control.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nButtongrid [item=<itemname>] [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] [buttons=\"<Button definition>\"]\n```\n\n----------------------------------------\n\nTITLE: Checking Timer Running Status in Blockly\nDESCRIPTION: This function returns true if the code within the timer block is currently running. It indicates that the countdown has finished and the timer block code is executing. This state typically lasts only a few milliseconds.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_5\n\nLANGUAGE: blockly\nCODE:\n```\nTimer is Running\n```\n\n----------------------------------------\n\nTITLE: Creating NGINX Password File\nDESCRIPTION: Command to create a password file for NGINX authentication using htpasswd.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo htpasswd -c /etc/nginx/.htpasswd username\n```\n\n----------------------------------------\n\nTITLE: Dynamic Color Expression\nDESCRIPTION: YAML expression for dynamically setting an element's color based on item states in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-fixed.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n=(items.AZ_Govee_Light_Strip_Power.state==='ON') ? items.AZ_Govee_Schreibtisch_Light_Strip_Color.state: '#aaaaaa'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item State in Blockly\nDESCRIPTION: This snippet demonstrates how to get the state of an Item named 'MainSwitch' and compare it to ON using Blockly blocks.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_0\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-item-example](../images/blockly/blockly-item-example.png)\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Item to CLOSED using PUT Request in Bash\nDESCRIPTION: This snippet shows how to set a Contact item named 'My_Item' to CLOSED using a PUT request to the OpenHAB REST API. It targets the item's state endpoint and sets the Content-Type header to text/plain.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/restdocs.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT --header \"Content-Type: text/plain\" --header \"Accept: application/json\" -d \"CLOSED\" \"http://{openHAB_IP}:8080/rest/items/My_Item/state\"\n```\n\n----------------------------------------\n\nTITLE: Sending ItemCommandEvent in JSON via WebSocket (JavaScript)\nDESCRIPTION: Example of sending an ItemCommandEvent to openHAB through the WebSocket connection. It includes the event type, topic, payload, optional eventId, and recommended source.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"ItemCommandEvent\",\n    \"topic\": \"openhab/items/DTR/command\",\n    \"payload\": \"{\\\"type\\\":\\\"Quantity\\\",\\\"value\\\":\\\"10 MB/s\\\"}\",\n    \"eventId\": \"5\",\n    \"source\": \"WebSocketTestInstance\"\n}\n```\n\n----------------------------------------\n\nTITLE: Renaming NGINX Configuration File\nDESCRIPTION: Command to rename the default NGINX configuration file to a more descriptive name for openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo mv /etc/nginx/sites-enabled/default /etc/nginx/sites-enabled/openhab\n```\n\n----------------------------------------\n\nTITLE: Using Regular Expressions in JavaScript Expressions\nDESCRIPTION: Demonstrates how to use regular expressions in expressions for complex string operations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nlabel: =props.item.match(/_(.*)_/)[1]\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Status State Transitions with PlantUML\nDESCRIPTION: PlantUML diagram code that defines state transitions for OpenHAB Thing statuses. Shows the flow between UNINITIALIZED, INITIALIZING, ONLINE, OFFLINE, UNKNOWN states and the removal process. Includes custom styling for visual clarity.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/diagrams/status_transitions_source.txt#2025-04-09_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nskinparam state {\n  BackgroundColor White\n  BorderColor Grey\n  ArrowColor #01324D\n  StartColor #01324D\n  EndColor #01324D\n}\n[*] -up-> UNINITIALIZED\nUNINITIALIZED -right-> INITIALIZING\nINITIALIZING -left-> UNINITIALIZED\nINITIALIZING -right-> initialized\n\nstate initialized {\n ONLINE -right-> OFFLINE\n ONLINE --> UNKNOWN\n OFFLINE -left-> ONLINE\n OFFLINE --> UNKNOWN\n UNKNOWN --> ONLINE\n UNKNOWN --> OFFLINE\n}\n\ninitialized -left-> UNINITIALIZED\n\nstate removal {\n [*] --> REMOVING\n REMOVING --> REMOVED\n REMOVED --> [*]  \n}\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Finding USB Device Attributes with udevadm in Linux\nDESCRIPTION: This shell command uses udevadm to gather all attributes of a USB device connected at /dev/ttyACM0. The information can be used to create persistent udev rules for the device.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/serial.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nudevadm info -a -p $(udevadm info -q path -n /dev/ttyACM0)\n```\n\n----------------------------------------\n\nTITLE: Receiving WebSocket Heartbeat Response in JSON (JavaScript)\nDESCRIPTION: Example of the heartbeat response received from openHAB. It includes the event type, topic, and payload acknowledging the heartbeat.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/websocket.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"WebSocketEvent\",\n    \"topic\": \"openhab/websocket/heartbeat\",\n    \"payload\": \"PONG\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Functions with oh-context Component\nDESCRIPTION: Example of creating a custom function in a widget to format numbers as USD currency, making the function available to all child components.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n- component: oh-context\n  config:\n    functions:\n      num2usd: =(x) => '$' + Number.parseFloat(x).toFixed(2)\n  slots:\n    default:\n      - component: Label\n        config:\n          text: =fn.num2usd(3.1)\n```\n\n----------------------------------------\n\nTITLE: Group Member Trigger Syntax in Rules DSL\nDESCRIPTION: Syntax for triggers that react to events from members of a group. These triggers fire when any direct member of the specified group receives commands, updates, or changes state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nMember of <group> received command [<command>]\nMember of <group> received update [<state>]\nMember of <group> changed [from <state>] [to <state>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Script Transformation Profile with Parameters\nDESCRIPTION: Shows how to pass additional parameters to a Ruby transformation script using URL-style syntax when configuring a transformation profile.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nNumber <itemName> { channel=\"<channelUID>\"[profile=\"transform:RB\", toItemScript=\"multiply.rb?factor=10\", commandFromItemScript=\"multiply.rb?factor=0.1\" ] }\n```\n\n----------------------------------------\n\nTITLE: String Length Transformation in JavaScript\nDESCRIPTION: A JavaScript transformation that calculates the length of an input string. Works with both modern JS Scripting and legacy Nashorn JS engines in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(function(data) {\n  var returnValue = \"String has \" + data.length + \" characters\"\n  return returnValue\n})(input)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Displaying Filled Icon Based on Item State\nDESCRIPTION: Expression that shows a filled or outline lightbulb icon based on whether the Item state is 'ON' or not.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nicon: =(@@props.item === 'ON') ? 'f7:lightbulb_fill' : 'f7:lightbulb'\n```\n\n----------------------------------------\n\nTITLE: Dynamic Lights Control Widget in OpenHAB YAML\nDESCRIPTION: A dynamic widget that displays and controls all light switches in the system. It uses oh-repeater to iterate through items with Switch and Light tags, with conditional filtering based on a Christmas-themed toggle.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nuid: all_lights\ntags:\n  - card\n  - lights\nprops:\n  parameters:\n    - description: A text prop\n      label: Prop 1\n      name: prop1\n      required: false\n      type: TEXT\n    - context: item\n      description: An item to control\n      label: Item\n      name: item\n      required: false\n      type: TEXT\n  parameterGroups: []\ntimestamp: Feb 11, 2021, 3:03:59 PM\ncomponent: f7-card\nconfig:\n  title: Lights\nslots:\n  default:\n    - component: oh-list\n      slots:\n        default:\n          - component: oh-repeater\n            config:\n              fragment: true\n              for: item\n              sourceType: itemsWithTags\n              itemTags: Switch,Light\n              filter: loop.item.label.includes(\"Christmas\") == false || items.TisTheSeason.state == \"ON\"\n            slots:\n              default:\n                - component: oh-toggle-item\n                  config:\n                    icon: f7:lightbulb\n                    iconColor: '=(items[loop.item.name].state == \"ON\") ? \"yellow\" : \"gray\"'\n                    color: '=(items[loop.item.name].state == \"ON\") ? \"yellow\" : \"gray\"'\n                    title: =loop.item.label\n                    item: =loop.item.name\n```\n\n----------------------------------------\n\nTITLE: Launching openHAB on macOS\nDESCRIPTION: Command to start openHAB using the startup script from the installation directory.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n./start.sh\n```\n\n----------------------------------------\n\nTITLE: Inline Ruby Transformation Example\nDESCRIPTION: Shows how to use an inline Ruby transformation that calculates string length without creating a separate file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRB(|\"String has #{input.length} characters\")\n```\n\n----------------------------------------\n\nTITLE: Basic Custom Widget YAML Configuration for Light List Item\nDESCRIPTION: This YAML defines a basic toggle widget for a light item, showing how to configure the icon, color, title and item binding. It demonstrates conditional formatting based on the item state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvalue: oh-toggle-item\nconfig:\n  icon: f7:lightbulb\n  iconColor: '=(items.AllLights.state == \"ON\") ? \"yellow\" : \"gray\"'\n  title: All Lights\n  color: '=(items.AllLights.state == \"ON\") ? \"yellow\" : \"gray\"'\n  item: AllLights\n```\n\n----------------------------------------\n\nTITLE: Sitemap Element Definition in openHAB\nDESCRIPTION: This snippet shows the mandatory sitemap element that must be the first line in any sitemap definition file. It defines the sitemap name and main screen title.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nsitemap <sitemapname> label=\"<title of the main screen>\" {\n    [all sitemap elements]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Types for Weather Underground Binding in XML\nDESCRIPTION: This XML snippet defines thing types, channel groups, and config parameters for a Weather Underground binding. It includes definitions for current weather and forecast information, with various options and configurations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_7\n\nLANGUAGE: XML\nCODE:\n```\n<thing:thing-descriptions bindingId=\"weatherunderground\">\n\n    <thing-type id=\"weather\">\n        <label>Weather Information</label>\n        <description>Provides various weather data from the Weather Underground service</description>\n\n        <channel-groups>\n            <channel-group id=\"current\" typeId=\"current\" />\n            <channel-group id=\"forecastTomorrow\" typeId=\"forecast\">\n                <label>Weather Forecast Tomorrow</label>\n                <description>This is the weather forecast for tomorrow.</description>\n            </channel-group>\n            <channel-group id=\"forecastDay2\" typeId=\"forecast\">\n                <label>Weather Forecast Day 2</label>\n                <description>This is the weather forecast in two days.</description>\n            </channel-group>\n        </channel-groups>\n\n        <config-description>\n            <parameter name=\"apikey\" type=\"text\" required=\"true\">\n                <context>password</context>\n                <label>API Key</label>\n                <description>API key to access the Weather Underground service.</description>\n            </parameter>\n            <parameter name=\"location\" type=\"text\" required=\"true\">\n                <label>Location of Weather Information</label>\n                <description>Multiple syntaxes are supported. Please read the binding documentation for more information.</description>\n            </parameter>\n            <parameter name=\"language\" type=\"text\" required=\"false\">\n                <label>Language</label>\n                <description>Language to be used by the Weather Underground service.</description>\n                <options>\n                    <option value=\"EN\">English</option>\n                    <option value=\"FR\">French</option>\n                    <option value=\"DL\">German</option>\n                </options>\n            </parameter>\n            <parameter name=\"refresh\" type=\"integer\" min=\"5\" required=\"false\" unit=\"min\">\n                <label>Refresh interval</label>\n                <description>Specifies the refresh interval in minutes.</description>\n                <default>30</default>\n            </parameter>\n        </config-description>\n    </thing-type>\n\n    <channel-group-type id=\"current\">\n        <label>Current Weather</label>\n        <description>This is the current weather.</description>\n        <channels>\n            <channel id=\"conditions\" typeId=\"currentConditions\" />\n            <channel id=\"temperature\" typeId=\"temperature\" />\n        </channels>\n    </channel-group-type>\n\n    <channel-group-type id=\"forecast\">\n        <label>Weather Forecast</label>\n        <description>This is the weather forecast.</description>\n        <channels>\n            <channel id=\"temperature\" typeId=\"temperature\">\n                <label>Temperature</label>\n                <description>Forecasted temperature</description>\n            </channel>\n            <channel id=\"maxTemperature\" typeId=\"maxTemperature\" />\n        </channels>\n    </channel-group-type>\n\n    <channel-type id=\"currentConditions\">\n        <item-type>String</item-type>\n        <label>Current Conditions</label>\n        <description>Weather current conditions.</description>\n        <state readOnly=\"true\" pattern=\"%s\"></state>\n    </channel-type>\n\n    <channel-type id=\"temperature\">\n        <item-type>Number</item-type>\n        <label>Temperature</label>\n        <description>Current temperature.</description>\n        <category>Temperature</category>\n        <state readOnly=\"true\" pattern=\"%.1f\" />\n        <config-description>\n            <parameter name=\"SourceUnit\" type=\"text\" required=\"true\">\n                <label>Temperature Source Unit</label>\n                <description>Select the temperature unit provided by the Weather Underground service.</description>\n                <options>\n                    <option value=\"C\">Degree Celsius</option>\n                    <option value=\"F\">Degree Fahrenheit</option>\n                </options>\n                <default>C</default>\n            </parameter>\n        </config-description>\n    </channel-type>\n\n    <channel-type id=\"maxTemperature\">\n        <item-type>Number</item-type>\n        <label>Maximum Temperature</label>\n        <description>Maximum temperature.</description>\n        <category>Temperature</category>\n        <state readOnly=\"true\" pattern=\"%.1f\" />\n        <config-description>\n\n\n```\n\n----------------------------------------\n\nTITLE: Contact Item State Conversion\nDESCRIPTION: Shows how to convert OpenClosedType to numeric values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nval contactNum = if (MyContactItem.state == OPEN) 1 else 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Samba Share for Manual openHAB Installation (INI)\nDESCRIPTION: Samba configuration for sharing the openHAB directory in a manual installation. This creates a single share for all openHAB files.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_44\n\nLANGUAGE: ini\nCODE:\n```\n[openHAB-files]\n  comment=openHAB\n  path=/opt/openhab\n  browseable=Yes\n  writeable=Yes\n  only guest=no\n  public=no\n  create mask=0777\n  directory mask=0777\n```\n\n----------------------------------------\n\nTITLE: Sending Command to Turn On Light in JavaScript\nDESCRIPTION: This code snippet shows how to send a command to turn on a light when motion is detected. It uses the Items object to access the FrontPorchLight item and send the ON command.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_advanced.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.info('Motion was detected');\nitems.getItem('FrontPorchLight').sendCommand('ON');\n```\n\n----------------------------------------\n\nTITLE: Timer with Cancel on Retrigger\nDESCRIPTION: Implements timer with cancellation logic when retriggered.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (cache.private.exists('MyTimer') === false || cache.private.get('MyTimer').hasTerminated()) {\n  cache.private.put('MyTimer', actions.ScriptExecution.createTimer('MyTimer', time.ZonedDateTime.now().plusSeconds(10), function () {\n    cache.private.remove('MyTimer');\n  }));\n} else {\n  cache.private.remove('MyTimer').cancel();\n};\n```\n\n----------------------------------------\n\nTITLE: Interactive Rectangle Element\nDESCRIPTION: SVG rectangle element with the openHAB interactive attribute added to make it clickable in the interface.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-fixed.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <rect style=\"fill:#0000ff;fill-rule:evenodd;stroke-width:0.264583\"\n    id=\"rect1\"\n    width=\"36.495762\"\n    height=\"25.169491\"\n    x=\"30.203388\"\n    y=\"31.461863\"\n    openhab=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Using State Transformation for Item Display in openHAB\nDESCRIPTION: Example of a Contact Item using MAP transformation to translate its state value from English to Spanish using a mapping file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nContact Livingroom_Window \"Ventana del salÃ³n [MAP(window_esp.map):%s]\"\n```\n\n----------------------------------------\n\nTITLE: Enabling WINS Support in Samba Configuration (INI)\nDESCRIPTION: Configuration snippet to enable WINS support in the Samba configuration file. This improves network name resolution.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_42\n\nLANGUAGE: ini\nCODE:\n```\nwins support = yes\n```\n\n----------------------------------------\n\nTITLE: Accessing openHAB Configuration Files\nDESCRIPTION: Indicates the location of openHAB's JSON-formatted configuration files, which contain the raw config data for various entities.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/tips-and-tricks.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nEverything presented in this tutorial is \"managed\" and saved to a text based JSON formatted database in `$OH_USERDATA/jsondb`.\n```\n\n----------------------------------------\n\nTITLE: Registering Discovery Service in Bridge Handler\nDESCRIPTION: Implementation of the getServices method in a bridge handler to register the discovery service with the bridge.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_27\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public Collection<Class<? extends ThingHandlerService>> getServices() {\n        return List.of(YourBindingDiscoveryService.class);\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Line Endings for Windows Development\nDESCRIPTION: A .gitattributes file configuration to ensure consistent line endings when developing on Windows. This prevents issues with the code formatting tool spotless.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/index.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n* text eol=lf\n```\n\n----------------------------------------\n\nTITLE: Filtering Event Monitor in Developer Sidebar\nDESCRIPTION: Shows an example of how to filter events in the Event Monitor tab of the Developer Sidebar using a wildcard pattern.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/tips-and-tricks.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nFor example, entering `*Hum*` would only show those events that include \"Hum\" in the names.\n```\n\n----------------------------------------\n\nTITLE: Configuring openHAB Systemd Service in INI\nDESCRIPTION: Systemd service configuration for openHAB, specifying the service description, dependencies, and execution parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_33\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=openHAB - empowering the smart home\nDocumentation=https://www.openhab.org/docs/\nDocumentation=https://community.openhab.org\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=openhab\nGroup=openhab\n\nWorkingDirectory=/opt/openhab\n#EnvironmentFile=-/etc/default/openhab\n\nExecStart=/opt/openhab/runtime/bin/karaf daemon\nExecStop=/opt/openhab/runtime/bin/karaf stop\nRestart=on-failure\nSuccessExitStatus=0 143\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Checking Java Version in Terminal\nDESCRIPTION: Command to verify the installed Java version and its output showing OpenJDK 17 installation details.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/index.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nopenjdk version \"17.0.5\" 2022-10-18 LTS\nOpenJDK Runtime Environment Zulu17.38+21-CA (build 17.0.5+8-LTS)\nOpenJDK 64-Bit Server VM Zulu17.38+21-CA (build 17.0.5+8-LTS, mixed mode, sharing)\n```\n\n----------------------------------------\n\nTITLE: Using the Label Component in YAML\nDESCRIPTION: Shows how to use the Label component to add text inside its own div container, which can be styled with class and style properties.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- component: f7-row\n  config:\n    class: fancy-row\n  slots:\n    default:\n      - component: Label\n        config:\n          text: Label text here\n```\n\n----------------------------------------\n\nTITLE: Using Object Expressions as Switch Statements in Widget Expressions\nDESCRIPTION: Simplified approach using JavaScript object syntax to replace multiple nested ternary operators when setting styles based on Item states.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nbackground: =({heat:'orange',cool:'blue',auto:'green',off:'white'})[@@hvacModeItem] || 'red'\n```\n\n----------------------------------------\n\nTITLE: Listing USB Device Identifiers for Docker Mapping\nDESCRIPTION: Commands to identify USB devices by their IDs for more reliable device mapping in Docker configurations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n> pwd\n/dev/serial/by-id\n\n> ls -l\ntotal 0\nlrwxrwxrwx 1 root root 13 Jan 19 17:26 usb-0658_0200-if00 -> ../../ttyACM0\nlrwxrwxrwx 1 root root 13 Jan 19 17:26 usb-ITEAD_SONOFF_Zigbee_3.0_USB_Dongle_Plus_V2_20220810144536-if00 -> ../../ttyACM1\nlrwxrwxrwx 1 root root 13 Jan 19 17:26 usb-Prolific_Technology_Inc._USB-Serial_Controller_D-if00-port0 -> ../../ttyUSB0\n\n> lsusb\nBus 002 Device 003: ID 067b:2303 Prolific Technology, Inc. PL2303 Serial Port / Mobile Action MA-8910P\nBus 002 Device 007: ID 1a86:55d4 QinHeng Electronics SONOFF Zigbee 3.0 USB Dongle Plus V2\nBus 002 Device 004: ID 0658:0200 Sigma Designs, Inc. Aeotec Z-Stick Gen5 (ZW090) - UZB\n```\n\n----------------------------------------\n\nTITLE: Creating openHAB System User on Linux\nDESCRIPTION: Command to create a system user for openHAB with restricted permissions on Linux systems.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nsudo adduser --system --no-create-home --group --disabled-login openhab\n```\n\n----------------------------------------\n\nTITLE: OpenHAB Installation Information Output\nDESCRIPTION: Example output from the openhab-cli info command showing version, user details, directories, and URLs for an OpenHABian installation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/index.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nVersion:     4.0.0 (Build)\n\nUser:        openhab (Active Process 7466)\nUser Groups: openhab tty dialout audio bluetooth gpio\n\nDirectories: Folder Name      | Path                        | User:Group\n             -----------      | ----                        | ----------\n             OPENHAB_HOME     | /usr/share/openhab          | openhab:openhab\n             OPENHAB_RUNTIME  | /usr/share/openhab/runtime  | openhab:openhab\n             OPENHAB_USERDATA | /var/lib/openhab            | openhab:openhab\n             OPENHAB_CONF     | /etc/openhab                | openhab:openhab\n             OPENHAB_LOGDIR   | /var/log/openhab            | openhab:openhab\n\nURLs:        http://169.254.63.209:8080\n             https://169.254.63.209:8443\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenHAB Temperature Trigger Handler\nDESCRIPTION: Java implementation of a trigger handler that monitors temperature changes and triggers rules based on configured thresholds.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class TemperatureTriggerHandler extends BaseTriggerModuleHandler\n  implements ExternalDeviceTempChangeListener {\n   final double temperature;\n   final boolean onAbove;\n   public TemperatureTriggerHandler(Trigger module) {\n      super(module);\n      Number tempNumber = (Number) context.get(TemperatureTriggerType.CONFIG_TEMPERATURE);\n      temperature = (tempNumber!=null) ? tempNumber.doubleValue() : 20.0;\n\n      String tempOp = (String) context.get(TemperatureTriggerType.CONFIG_OPERATOR);\n      onAbove = (tempOp != null && \"below\".equals(tempOp)) ? false : true;\n   }\n\n   @Override\n   public void setRuleEngineCallback(RuleEngineCallback ruleCallback) {\n      super.setRuleEngineCallback(ruleCallback);\n      ExternalTemperatureDevice.registerTemperatureChangeListener(this);\n   }\n\n   @Override\n   public void dispose() {\n      ExternalTemperatureDevice.unregisterTemperatureChangeListener(this);\n   }\n\n   @Override\n   public void tempChangedOnImaginaryDevice(int tempInCelsius) {\n      if (\n            (tempInCelsius>temperature && onAbove) ||\n            (tempInCelsius<temperature && !onAbove)\n         ) {\n            ((TriggerHandlerCallback) callback).triggered(module, context);\n         }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenHAB Temperature Trigger Handler\nDESCRIPTION: Java implementation of a trigger handler that monitors temperature changes and triggers rules based on configured thresholds.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npublic class TemperatureTriggerHandler extends BaseTriggerModuleHandler\n  implements ExternalDeviceTempChangeListener {\n   final double temperature;\n   final boolean onAbove;\n   public TemperatureTriggerHandler(Trigger module) {\n      super(module);\n      Number tempNumber = (Number) context.get(TemperatureTriggerType.CONFIG_TEMPERATURE);\n      temperature = (tempNumber!=null) ? tempNumber.doubleValue() : 20.0;\n\n      String tempOp = (String) context.get(TemperatureTriggerType.CONFIG_OPERATOR);\n      onAbove = (tempOp != null && \"below\".equals(tempOp)) ? false : true;\n   }\n\n   @Override\n   public void setRuleEngineCallback(RuleEngineCallback ruleCallback) {\n      super.setRuleEngineCallback(ruleCallback);\n      ExternalTemperatureDevice.registerTemperatureChangeListener(this);\n   }\n\n   @Override\n   public void dispose() {\n      ExternalTemperatureDevice.unregisterTemperatureChangeListener(this);\n   }\n\n   @Override\n   public void tempChangedOnImaginaryDevice(int tempInCelsius) {\n      if (\n            (tempInCelsius>temperature && onAbove) ||\n            (tempInCelsius<temperature && !onAbove)\n         ) {\n            ((TriggerHandlerCallback) callback).triggered(module, context);\n         }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating openHAB with PowerShell Script\nDESCRIPTION: PowerShell commands to update an existing openHAB installation to a newer version. The commands load the update script and execute it with the desired version number.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/windows.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd C:\\openHAB\n. .\\runtime\\bin\\update.ps1\nUpdate-openHAB -OHVersion x.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring UPnP Network Interface with Java Options\nDESCRIPTION: Java options to specify which network interface and IP address should be used for UPnP discovery and communication.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nEXTRA_JAVA_OPTS=\"-Dorg.jupnp.network.useInterfaces=eno1 -Dorg.jupnp.network.useAddresses=192.168.0.65\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available openHAB Versions on apt-based Systems\nDESCRIPTION: Command to list all available versions of openHAB in the configured repositories. Useful when planning to install a specific version.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\napt list -a openhab\n```\n\n----------------------------------------\n\nTITLE: Extracting openHAB ZIP Archive on macOS\nDESCRIPTION: Command to unzip the downloaded openHAB archive into the installation directory.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nunzip ~/Downloads/openhab-3.x.x.zip -d .\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Rule using JRuby\nDESCRIPTION: JRuby implementation of a movie scene rule using Ruby syntax. Defines a rule that executes multiple commands when MovieScene is triggered.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nrule \"Movie Scene\" do\n  received_command MovieScene, command: ON\n  run do\n    LivingRoom_Blinds.command(90)\n    LivingRoom_MainLight.off\n    LivingRoom_LEDStripe.command(50)\n    Soundbar.on\n    TV.on\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Example of Buttongrid Element Usage\nDESCRIPTION: Provides a complete example of a Buttongrid element simulating a remote control with various buttons for power, menu, navigation, and volume control.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nButtongrid label=\"Remote Control\" staticIcon=screen item=RemoteControl buttons=[1:1:POWER=\"Power\"=switch-off , 1:2:MENU=\"Menu\" , 1:3:EXIT=\"Exit\" , 2:2:UP=\"Up\"=f7:arrowtriangle_up , 4:2:DOWN=\"Down\"=f7:arrowtriangle_down , 3:1:LEFT=\"Left\"=f7:arrowtriangle_left , 3:3:RIGHT=\"Right\"=f7:arrowtriangle_right , 3:2:OK=\"Ok\" , 2:4:VOL_PLUS=\"Volume +\" , 4:4:VOL_MINUS=\"Volume -\" , 3:4:MUTE=\"Mute\"=soundvolume_mute]\n```\n\n----------------------------------------\n\nTITLE: Granting Java Network Permissions in Bash\nDESCRIPTION: Command to grant elevated network permissions to the Java Virtual Machine for openHAB add-ons.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nsetcap 'cap_net_raw,cap_net_admin=+eip cap_net_bind_service=+ep' $(realpath /usr/bin/java)\n```\n\n----------------------------------------\n\nTITLE: Executing the openHAB Upgrade Tool with Shell Command\nDESCRIPTION: This command demonstrates how to run the openHAB upgrade tool to perform the itemCopyUnitToMetadata migration. The tool is executed as a Java application with parameters specifying the openHAB userdata directory and the specific upgrade command to run.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\njava -jar upgradetool.jar --dir /var/lib/openhab --command itemCopyUnitToMetadata\n```\n\n----------------------------------------\n\nTITLE: Updating openHAB to Latest Version on macOS\nDESCRIPTION: Commands to update openHAB to the next major version using the built-in update script.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/openhab\nsudo runtime/bin/update\n```\n\n----------------------------------------\n\nTITLE: Uninstalling openHAB in Bash\nDESCRIPTION: Commands to stop, disable, and remove openHAB and its associated files from a Linux system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop openhab.service\nsudo systemctl disable openhab.service\nsudo rm -rf /opt/openhab/\nsudo rm /usr/lib/systemd/system/openhab.service\nsudo rm /lib/systemd/system/openhab.service\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Sunrise (Ruby)\nDESCRIPTION: This Ruby snippet defines a rule that raises blinds and adjusts temperature when the sun rises. It uses the Astro Binding's channel event to trigger the actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrule \"Raise the blinds & adjust temperature on sunrise\" do\n  channel \"astro:sun:home:rise#event\", triggered: \"START\"\n  run do\n    gBlinds.up\n    gThermostat.increase\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall Rules for openHAB (Shell)\nDESCRIPTION: Commands to add firewall rules for openHAB using firewalld. This opens the necessary ports for the openHAB Dashboard and Language Server Protocol.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=8443/tcp\nsudo firewall-cmd --permanent --add-port=5007/tcp\n```\n\n----------------------------------------\n\nTITLE: Getting OpenHAB Installation Information\nDESCRIPTION: Shell command to display OpenHAB installation details including paths and configuration locations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenhab-cli info\n```\n\n----------------------------------------\n\nTITLE: Creating openHAB User and Group on Synology DSM\nDESCRIPTION: Commands to create a dedicated openHAB user and group on Synology DiskStation. This is a prerequisite step before installing openHAB on the NAS.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo synouser --add openhab habopen \"openhab\" 0 \"\" 0\nsudo synogroup --add openhab openhab\n```\n\n----------------------------------------\n\nTITLE: Implementing ThingActions Interface in Java\nDESCRIPTION: Basic implementation of the ThingActions interface with proper annotations. The class is scoped to a specific binding and requires PROTOTYPE scope. Includes handler management methods.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n@Component(scope = ServiceScope.PROTOTYPE, service = MQTTActions.class)\n@ThingActionsScope(name = \"mqtt\") // Your bindings id is usually the scope\n@NonNullByDefault\npublic class MQTTActions implements ThingActions {\n    private @Nullable AbstractBrokerHandler handler;\n\n    @Override\n    public void setThingHandler(@Nullable ThingHandler handler) { this.handler = (AbstractBrokerHandler) handler; }\n\n    @Override\n    public @Nullable ThingHandler getThingHandler() { return handler; }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Actions on Sunrise (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a rule that raises blinds and adjusts temperature when the sun rises. It uses the Astro Binding's channel event to trigger the actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rules, triggers, items } = require('openhab');\n\nrules.JSRule({\n  name: 'Raise the blinds & adjust temperature on sunrise',\n  description: 'When the sun rises, raise the blinds and adjust the temperature',\n  triggers: [\n    triggers.ChannelEventTrigger('astro:sun:home:rise#event', 'START') // Triggers when the sun starts to rise\n  ],\n  execute: (event) => {\n      items.getItem('gBlinds').sendCommand('UP');\n      items.getItem('gTheromstat').sendCommand('INCREASE');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing openHAB on apt-based Systems\nDESCRIPTION: Command to install the openHAB package on apt-based systems. This installs the core openHAB system without add-ons.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install openhab\n```\n\n----------------------------------------\n\nTITLE: Installing openHAB Package on Arch Linux\nDESCRIPTION: Command to install the compiled openHAB package using pacman on Arch Linux.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -U openhab3-3.0.0.M4-1-any.pkg.tar.zst\n```\n\n----------------------------------------\n\nTITLE: Installing openHAB Add-ons on RPM-based Systems\nDESCRIPTION: Command to install the openHAB add-ons package on RPM-based systems. Useful for systems that will be disconnected from the internet, as it pre-installs all add-ons locally.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum install openhab-addons\n```\n\n----------------------------------------\n\nTITLE: Automating Actions When Leaving Home (YAML)\nDESCRIPTION: This YAML snippet defines a rule that turns off lights and decreases temperature when the presence status changes to OFF, indicating that someone has left home.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration: {}\ntriggers:\n  - id: \"1\"\n    configuration:\n      itemName: Presence\n      command: OFF\n    type: core.ItemCommandTrigger\nconditions: []\nactions:\n  - inputs: {}\n    id: \"2\"\n    configuration:\n      itemName: gLights\n      command: OFF\n    type: core.ItemCommandAction\n  - inputs: {}\n    id: \"3\"\n    configuration:\n      itemName: gThermostat\n      command: DECREASE\n    type: core.ItemCommandAction\n```\n\n----------------------------------------\n\nTITLE: Upgrading openHAB on Apt-Based Systems\nDESCRIPTION: Commands for upgrading openHAB on Debian-based systems using apt, including checking available versions and installing specific versions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get upgrade\n\n# To list available versions\napt-cache showpkg openhab\n\n# To install a specific version\nsudo apt-get install openhab=3.0.0-1\n```\n\n----------------------------------------\n\nTITLE: Monitoring openHAB Installation Progress\nDESCRIPTION: Command to check if the openHAB installation was successful by monitoring the processes running under the openhab user using htop.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/armbian.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo htop -u openhab\n```\n\n----------------------------------------\n\nTITLE: Managing openHAB Service on sysVinit Systems\nDESCRIPTION: Commands for starting, checking status, and enabling openHAB service on systems using sysVinit (e.g., Ubuntu 14.x, Debian Wheezy).\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsudo /etc/init.d/openhab start\nsudo /etc/init.d/openhab status\n\nsudo update-rc.d openhab defaults\n```\n\n----------------------------------------\n\nTITLE: String Length Transformation in DSL Script\nDESCRIPTION: A DSL script transformation that calculates the length of an input string and returns a formatted message. The script accesses the input variable that contains the value to transform.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nvar returnValue = \"String has \" + input.length + \" characters\"\n\nreturnValue\n```\n\n----------------------------------------\n\nTITLE: Automating Actions When Leaving Home (Java DSL)\nDESCRIPTION: This Java DSL snippet defines a rule that turns off lights and decreases temperature when the presence status changes to OFF, indicating that someone has left home.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nrule \"Turn off the lights & adjust temperature on leaving\"\nwhen\n  Item Presence received command OFF\nthen\n  gLights.sendCommand(OFF)\n  gThermostat.sendCommand(DECREASE)\nend\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command - Windows\nDESCRIPTION: Docker command for Windows to run OpenHAB container with necessary volume mounts and environment variables.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ^\n        --name openhab ^\n        --net=host ^\n        -v /etc/localtime:/etc/localtime:ro ^\n        -v /etc/timezone:/etc/timezone:ro ^\n        -v /opt/openhab/conf:/openhab/conf ^\n        -v /opt/openhab/userdata:/openhab/userdata ^\n        -v /opt/openhab/addons:/openhab/addons ^\n        -d ^\n        -e USER_ID=<uid> ^\n        -e GROUP_ID=<gid> ^\n        -e CRYPTO_POLICY=unlimited ^\n        --restart=always ^\n        openhab/openhab:<version>-<distribution>\n```\n\n----------------------------------------\n\nTITLE: Running Armbian Configuration Tool\nDESCRIPTION: Command to launch the Armbian configuration utility which provides a menu-driven interface for installing openHAB and other software packages.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/armbian.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo armbian-config\n```\n\n----------------------------------------\n\nTITLE: Installing OpenSSL on Linux\nDESCRIPTION: Command to install OpenSSL package on Debian-based Linux distributions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install openssl\n```\n\n----------------------------------------\n\nTITLE: Field Injection Service Component in Java\nDESCRIPTION: Shows how to implement a service component using field injection to reference the ItemRegistry service. Includes configuration parameters and lifecycle methods.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/osgi/osgids.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = MyService.class, immediate = true)\n@NonNullByDefault\npublic class MyService {\n    @Reference\n    protected @NonNullByDefault({}) ItemRegistry itemRegistry;\n\n    @Activate\n    protected void activate(BundleContext context) {\n        System.out.println(\"Bundle is activated!\");\n    }\n\n    @Deactivate\n    protected void deactivate(BundleContext context) {\n        System.out.println(\"Bundle is deactivated!\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest openHAB Docker Image\nDESCRIPTION: Command to download the latest openHAB Docker image with specific version and distribution parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull openhab/openhab:<version>-<distribution>\n```\n\n----------------------------------------\n\nTITLE: Systemd Service Configuration\nDESCRIPTION: Systemd service unit file for managing OpenHAB Docker container as a system service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[Unit]\nDescription=openHAB\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/bin/docker run --name=%n --net=host \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  -v /etc/timezone:/etc/timezone:ro \\\n  -v /opt/openhab/conf:/openhab/conf \\\n  -v /opt/openhab/userdata:/openhab/userdata \\\n  -v /opt/openhab/addons:/openhab/addons \\\n  -v /opt/openhab/.java:/openhab/.java \\\n  --device=/dev/ttyUSB0 \\\n  -e USER_ID=<uid_of_openhab> \\\n  -e GROUP_ID=<gid_of_openhab> \\\n  -e CRYPTO_POLICY=unlimited \\\n  openhab/openhab:<version>-<distribution>\nExecStop=/usr/bin/docker stop -t 2 %n ; /usr/bin/docker rm -f %n\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Using Custom Keys to Translate Error Messages in Java\nDESCRIPTION: Java code example demonstrating how to use custom translation keys for thing status error messages. The code updates a thing status to OFFLINE with a localized communication error message.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nupdateStatus(ThingStatus.OFFLINE, ThingStatusDetail.OFFLINE.COMMUNICATION_ERROR, \"@text/offline.communication-error [\\\"EX-500\\\"]\");\n```\n\n----------------------------------------\n\nTITLE: Creating NGINX Configuration File for openHAB Authentication\nDESCRIPTION: Command to create/edit a NGINX configuration file for authentication in the Synology DSM environment using nano text editor.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nsudo nano /usr/local/etc/nginx/sites-enabled/openHAB-auth\n```\n\n----------------------------------------\n\nTITLE: Using String Templates in JavaScript Expressions\nDESCRIPTION: Shows how to use string templates to create dynamic strings in expressions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntext: =`This button opens the ${props.page} page`\n```\n\n----------------------------------------\n\nTITLE: Logging Overview in OpenHAB Blockly\nDESCRIPTION: Overview of logging blocks available in OpenHAB Blockly for rules. These blocks allow publishing content to the OpenHAB log with different severity levels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-logging.md#2025-04-09_snippet_0\n\nLANGUAGE: blockly\nCODE:\n```\n![logging-overview](../images/blockly/blockly-logging-overview.png)\n```\n\n----------------------------------------\n\nTITLE: Adding openHAB Stable Repository on apt-based Systems\nDESCRIPTION: Command to add the openHAB stable repository to the apt sources list. This repository contains the latest official release with tested features.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\necho 'deb [signed-by=/usr/share/keyrings/openhab.gpg] https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main' | sudo tee /etc/apt/sources.list.d/openhab.list\n```\n\n----------------------------------------\n\nTITLE: French Language Properties for WeatherUnderground Binding\nDESCRIPTION: French translation properties file for the WeatherUnderground binding. Contains translations for binding name, thing types, configurations, channel groups, and channel types with their respective options.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n# binding\nbinding.weatherunderground.name = Extension WeatherUnderground\nbinding.weatherunderground.description = L'extension Weather Underground interroge le service Weather Underground pour rÃ©cupÃ©rer des donnÃ©es mÃ©tÃ©o.\n\n# thing types\nthing-type.weatherunderground.weather.label = Informations mÃ©tÃ©o\nthing-type.weatherunderground.weather.description = PrÃ©sente diverses donnÃ©es mÃ©tÃ©o fournies par le service Weather Underground.\n\n# thing type configuration\nthing-type.config.weatherunderground.weather.apikey.label = ClÃ© d'accÃ¨s\nthing-type.config.weatherunderground.weather.apikey.description = La clÃ© d'accÃ¨s au service Weather Underground.\nthing-type.config.weatherunderground.weather.location.label = Emplacement des donnÃ©es mÃ©tÃ©o\nthing-type.config.weatherunderground.weather.location.description = Plusieurs syntaxes sont possibles. Merci de consulter la documentation de l'extension pour plus d'information.\nthing-type.config.weatherunderground.weather.language.label = Langue\nthing-type.config.weatherunderground.weather.language.description = La langue Ã  utiliser par le service Weather Underground.\nthing-type.config.weatherunderground.weather.language.option.EN = Anglais\nthing-type.config.weatherunderground.weather.language.option.FR = FranÃ§ais\nthing-type.config.weatherunderground.weather.language.option.DL = Allemand\nthing-type.config.weatherunderground.weather.refresh.label = FrÃ©quence de rafraÃ®chissement\nthing-type.config.weatherunderground.weather.refresh.description = La frÃ©quence de rafraÃ®chissement des donnÃ©es en minutes.\n\n# channel group types\nchannel-group-type.weatherunderground.current.label = MÃ©tÃ©o actuelle\nchannel-group-type.weatherunderground.current.description = La mÃ©tÃ©o actuelle.\nchannel-group-type.weatherunderground.forecast.label = MÃ©tÃ©o prÃ©vue\nchannel-group-type.weatherunderground.forecast.description = La mÃ©tÃ©o prÃ©vue.\n\n# channel groups\nthing-type.weatherunderground.weather.group.forecastTomorrow.label = MÃ©tÃ©o de demain\nthing-type.weatherunderground.weather.group.forecastTomorrow.description = La mÃ©tÃ©o prÃ©vue demain.\nthing-type.weatherunderground.weather.group.forecastDay2.label = MÃ©tÃ©o dans 2 jours\nthing-type.weatherunderground.weather.group.forecastDay2.description = La mÃ©tÃ©o prÃ©vue dans 2 jours.\n\n# channel types\nchannel-type.weatherunderground.currentConditions.label = Conditions actuelles\nchannel-type.weatherunderground.currentConditions.description = Les conditions mÃ©tÃ©o actuelles.\nchannel-type.weatherunderground.temperature.label = TempÃ©rature\nchannel-type.weatherunderground.temperature.description = La tempÃ©rature actuelle.\nchannel-type.weatherunderground.maxTemperature.label = TempÃ©rature maximale\nchannel-type.weatherunderground.maxTemperature.description = La tempÃ©rature maximale.\n\n# channels inside a channel group type\nchannel-group-type.weatherunderground.current.channel.temperature.label = TempÃ©rature\nchannel-group-type.weatherunderground.current.channel.temperature.description = La tempÃ©rature prÃ©vue.\n\n# channel type configuration\nchannel-type.config.weatherunderground.temperature.SourceUnit.label = UnitÃ© de tempÃ©rature\nchannel-type.config.weatherunderground.temperature.SourceUnit.description = Choix de l'unitÃ© de tempÃ©rature fournie par le service Weather Underground pour la tempÃ©rature actuelle.\nchannel-type.config.weatherunderground.temperature.SourceUnit.option.C = DegrÃ©s Celsius\nchannel-type.config.weatherunderground.temperature.SourceUnit.option.F = DegrÃ©s Fahrenheit\nchannel-type.config.weatherunderground.maxTemperature.SourceUnit.label = UnitÃ© de tempÃ©rature maximale\nchannel-type.config.weatherunderground.maxTemperature.SourceUnit.description = Choix de l'unitÃ© de tempÃ©rature fournie par le service Weather Undergroundde pour la tempÃ©rature maximale.\nchannel-type.config.weatherunderground.maxTemperature.SourceUnit.option.C = DegrÃ©s Celsius\nchannel-type.config.weatherunderground.maxTemperature.SourceUnit.option.F = DegrÃ©s Fahrenheit\n```\n\n----------------------------------------\n\nTITLE: Generating Diffie-Hellman Parameters for NGINX\nDESCRIPTION: Commands to create a directory for SSL certificates and generate a 2048-bit Diffie-Hellman parameter file for stronger key exchange security.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p /etc/nginx/ssl\nopenssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048\n```\n\n----------------------------------------\n\nTITLE: Setting Log Levels in openHAB Karaf Console\nDESCRIPTION: This snippet demonstrates how to set the log level for a specific package using the Karaf console. It sets the Z-Wave binding log level to DEBUG.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/logging.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nlog:set DEBUG org.openhab.binding.zwave\n```\n\n----------------------------------------\n\nTITLE: Root Component Structure with Props in YAML\nDESCRIPTION: Demonstrates the structure of a root component in YAML, including UID, props with parameter groups and parameters, tags, and the component definition.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/building-pages.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nuid: component1\nprops:\n  parameterGroups:\n    - name: group1\n      label: Property group\n    ...\n  parameters:\n   - name: prop1\n     label: Prop 1\n     type: BOOLEAN\n     groupName: group1\n     description: What prop1 does\n   - name: prop2\n     label: Prop 2\n     type: TEXT\n     context: item\n     description: Choose an item for this prop\n   - name: prop3\n     type: INTEGER\n     advanced: true\n     ...\ntags: [\"tag1\", \"tag2\"]\ncomponent: ...\nconfig: ...\nslots: ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Group Item in OpenHAB\nDESCRIPTION: Syntax for creating a Group Item, which can be used to categorize or collect other Items or Groups. Groups can have labels, icons, and can be nested within other groups.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nGroup groupname [\"labeltext\"] [<iconname>] [(group1, group2, ...)]\n```\n\n----------------------------------------\n\nTITLE: Localizing ACME Weather Binding Labels in German (INI)\nDESCRIPTION: This INI file provides German translations for labels and descriptions used in the ACME Weather binding. It includes localizations for thing types, channels, and configuration parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_6\n\nLANGUAGE: INI\nCODE:\n```\nthing-type.acmeweather.weather.label = Wetterinformation\nthing-type.acmeweather.weather.description = Stellt verschiedene Wetterdaten vom ACME Wetterdienst bereit.\n\nthing-type.config.acmeweather.weather.location.label = Ort\nthing-type.config.acmeweather.weather.location.description = Ort der Wetterinformation. Syntax ist WOEID, siehe https://en.wikipedia.org/wiki/WOEID.\n\nchannel-type.acmeweather.precipitation.label = Niederschlag\nchannel-type.acmeweather.precipitation.description = Aktueller Niederschlag (Trocken, Regen, Schnee).\nchannel-type.acmeweather.precipitation.state.option.dry = Trocken\nchannel-type.acmeweather.precipitation.state.option.rain = Regen\nchannel-type.acmeweather.precipitation.state.option.snow = Schnee\n\nchannel-type.acmeweather.temperature.label = Temperatur\nchannel-type.acmeweather.temperature.description = Aktuelle Temperatur in Grad Celsius (Metrisch) oder Grad Fahrenheit (US).\nchannel-type.acmeweather.temperature.state.pattern = %d Wert\n\nthing-type.acmeweather.weather.channel.minTemperature.label = Min. Temperatur\nthing-type.acmeweather.weather.channel.minTemperature.description = Minimale Temperatur in Grad Celsius (Metrisch) oder Grad Fahrenheit (US).\n\nchannel-type.config.acmeweather.temperature.unit.label = Temperatur Einheit\nchannel-type.config.acmeweather.temperature.unit.description = Auswahl der gewÃ¼nschten Temperatur Einheit.\nchannel-type.config.acmeweather.temperature.unit.option.C = Grad Celsius\nchannel-type.config.acmeweather.temperature.unit.option.F = Grad Fahrenheit\n\nchannel-type.acmeweather.cmd-channel.command.option.RESET = Reset Device\nchannel-type.acmeweather.cmd-channel.command.option.CMD1 = Command one\nchannel-type.acmeweather.cmd-channel.command.option.CMD2 = Command two\n```\n\n----------------------------------------\n\nTITLE: Adding Binding Dependency in Maven POM (XML)\nDESCRIPTION: Modify the pom.xml file to include the artifact you are developing in the dependencies section.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/generic.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<!-- uncomment this and add the name of your binding that you want to work on -->\n```\n\n----------------------------------------\n\nTITLE: Creating Objects with JavaScript Syntax in Widget Expressions\nDESCRIPTION: Example of setting an actionVariable to a JavaScript object with name and selected properties using JavaScript object expression syntax.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nactionVariable: myObject\nactionVariableValue: ={'name':props.item,'selected':true}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Styling with CSS in YAML\nDESCRIPTION: Shows how to set global CSS styles for a page using the YAML configuration, specifically setting a custom border radius for cards.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/building-pages.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  label: My Page\n  style:\n    --f7-card-border-radius: var(--f7-card-expandable-border-radius)\n```\n\n----------------------------------------\n\nTITLE: Configuring Responsive Column Breakpoints in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure responsive breakpoints for columns in a grid layout. It shows three columns that adapt their width based on screen size: 100% width on mobile, 50% on small screens, and 33% on medium screens and larger.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-responsive.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  label: Overview\nblocks:\n  - component: oh-block\n    config: {}\n    slots:\n      default:\n        - component: oh-grid-row\n          config: {}\n          slots:\n            default:\n              - component: oh-grid-col\n                config:\n                  width: \"100\"\n                  small: \"50\"\n                  medium: \"33\"\n                slots:\n                  default: []\n              - component: oh-grid-col\n                config:\n                  width: \"100\"\n                  small: \"50\"\n                  medium: \"33\"\n                slots:\n                  default: []\n              - component: oh-grid-col\n                config:\n                  width: \"100\"\n                  medium: \"33\"\n                slots:\n                  default: []\n```\n\n----------------------------------------\n\nTITLE: Combined ProfileFactory and ProfileTypeProvider in Java\nDESCRIPTION: Implementation combining both ProfileFactory and ProfileTypeProvider interfaces in a single class for convenience.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/transformations/index.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = { ProfileFactory.class, ProfileTypeProvider.class })\npublic class MyProfileFactory implements ProfileFactory, ProfileTypeProvider {\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies with Maven BND Plugin (Shell)\nDESCRIPTION: Use Maven to resolve dependencies and update the runbundles section in app.bndrun.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/generic.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmvn bnd-resolver:resolve\n```\n\n----------------------------------------\n\nTITLE: Setting up Jekyll Page Redirection in YAML Front Matter\nDESCRIPTION: Configures a Jekyll page to automatically redirect to another URL using front matter. This snippet defines page metadata including redirection target and sitemap exclusion.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/designer.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to: /configuration/editors.html\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Action Parameters in Personal Widgets (YAML)\nDESCRIPTION: This snippet demonstrates how to define a parameter group with an 'action' context in a personal widget. This allows for automatic definition of implicit props that can be passed to built-in components accepting actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/building-pages.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprops:\n  parameterGroups:\n    - name: myaction\n      label: My Action\n      context: action\n...\n  component: oh-button\n  config:\n    actionPropsParameterGroup: myaction\n```\n\n----------------------------------------\n\nTITLE: Using the Content Component in YAML\nDESCRIPTION: Demonstrates how to use the Content component to add text without an additional container element, useful for layouts where div elements might cause issues.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n- component: f7-row\n  config:\n    class: fancy-row\n  slots:\n    default:\n      - component: Content\n        config:\n          text: Content text here\n```\n\n----------------------------------------\n\nTITLE: Using Hamcrest Matchers for Assertions in Java\nDESCRIPTION: This example shows how to use the Hamcrest matcher library to write more expressive assertions in unit tests. It demonstrates asserting equality of a PercentType's string representation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/tests.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nPercentType pt = new PercentType(\"0.0001\");\nassertThat(pt.toString(), is(equalTo(\"0.0001\")));\n```\n\n----------------------------------------\n\nTITLE: Cloning openHAB Repository in Bash\nDESCRIPTION: Command to clone an openHAB repository (addons, core, or webui) from GitHub. Replace the placeholder with your GitHub username and desired repository.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/intellij.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/<yourgitusername>/openhab-<addons|core|webui>\n```\n\n----------------------------------------\n\nTITLE: Updating openHAB to Specific Version on macOS\nDESCRIPTION: Command to update openHAB to a specific version (e.g., 2.5.11) using the update script.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo runtime/bin/update 2.5.11\n```\n\n----------------------------------------\n\nTITLE: Updating Package Index on apt-based Systems\nDESCRIPTION: Command to resynchronize the package index files on apt-based systems after adding a new repository. This ensures the system knows about the newly added openHAB packages.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Item Label Override Examples in openHAB Sitemap\nDESCRIPTION: Examples showing different ways to override Item labels in a Sitemap: preserving state format, hiding state representation, or changing both text and state representation including unit conversion.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nsitemap demo label=\"My home automation\" {\n    Frame label=\"Temperature\" {\n        // Overrides only the text, but will keep the state format from the Item definition\n        Text item=Livingroom_Temperature label=\"Livingroom\"\n        // Overrides the text and hides any state representation.\n        Text item=Livingroom_Temperature label=\"Livingroom []\"\n        // Overrides the text and state representation\n        // and also changes the state unit to Fahrenheit\n        // if the value of the item supports UoM (link below) the value will be transformed.\n        Text item=Livingroom_Temperature label=\"Livingroom [%.2f Â°F]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Demo App in Debug Mode with Maven (Shell)\nDESCRIPTION: Launch the demo app in debug mode, allowing attachment of an IDE for remote debugging on port 10001.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/generic.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn -D-runjdb=10001 package bnd-run:run\n```\n\n----------------------------------------\n\nTITLE: Copying Addon JAR to openHAB Distribution\nDESCRIPTION: Bash command to copy a built addon JAR file to the addons directory of an openHAB distribution. Replace placeholders with actual addon name and distribution directory.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/intellij.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp target/<ADDON_NAME>.jar <DISTRO_DIR>/addons\n```\n\n----------------------------------------\n\nTITLE: Updating openHAB to Snapshot Build on macOS\nDESCRIPTION: Command to update openHAB to a snapshot build using the update script.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo runtime/bin/update 2.5.12-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Mapping File Example for Transformation\nDESCRIPTION: Example of a mapping file used for Map transformations in openHAB, showing key-value pairs for converting values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-run-and-process.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nON=Ja\nOFF=Nein\neffects=Effekte\n-=?\nNULL=n/a\nhs = Hue/Saturation\nct = Color Temperature\n```\n\n----------------------------------------\n\nTITLE: Configuring Item Aliases for Persistence in Java\nDESCRIPTION: This code shows how to define alternative names (aliases) for items that will be used in storage by the persistence service in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nAliases {\n    <itemName1> -> <alias1>\n    <itemName2> -> <alias2>\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Usage of Trace Logging in Java for OpenHAB\nDESCRIPTION: Shows an example of incorrect usage of trace logging, which should not be used as a replacement for debugging.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nvoid myFun() {\n    logger.trace(\"Enter myfun\"); // DON'T, DON'T, really DON'T do that\n    doSomething();\n    logger.trace(\"Leave myfun\"); // DON'T, DON'T, really DON'T do that\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Description for Channel Types in OpenHAB\nDESCRIPTION: This XML snippet demonstrates how to specify state restrictions and additional information for an item linked to a channel in OpenHAB. It shows configuration for a temperature actuator with min/max values, step size, and display pattern.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<state min=\"12\" max=\"30\" step=\"0.5\" pattern=\"%.1f %unit%\" readOnly=\"false\"></state>\n```\n\n----------------------------------------\n\nTITLE: Installing specific Node.js and Ruby versions\nDESCRIPTION: This snippet shows how to install the required versions of Node.js and Ruby using nvm and rvm if they are not already installed on the system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/README.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnvm install 16.20.1\nrvm install ruby-3.3.2\n```\n\n----------------------------------------\n\nTITLE: Cloning and Building openHAB Package on Arch Linux\nDESCRIPTION: Series of commands to clone the openHAB package description from AUR, change directory, and build the package using makepkg.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://aur.archlinux.org/openhab3.git\ncd openhab3\nmakepkg -s\n```\n\n----------------------------------------\n\nTITLE: Bridge Definition with Things\nDESCRIPTION: Example showing how to define a Hue bridge with multiple connected bulbs as child Things.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_2\n\nLANGUAGE: xtend\nCODE:\n```\nBridge hue:bridge:mybridge [ ipAddress=\"192.168.3.123\" ] {\n Thing 0210 bulb1 [ lightId=\"1\" ]\n Thing 0210 bulb2 [ lightId=\"2\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Bundle Features in feature.xml\nDESCRIPTION: XML snippet showing how to configure sub-bundle feature.xml files to include dependencies from parent bundles, ensuring feature verification succeeds in multi-bundle scenarios.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/buildsystem.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<feature>openhab-transport-mqtt</feature>\n<bundle start-level=\"80\">mvn:org.openhab.addons.bundles/org.openhab.binding.mqtt/${project.version}</bundle>\n```\n\n----------------------------------------\n\nTITLE: Extending BaseDynamicStateDescriptionProvider in openHAB\nDESCRIPTION: Implementation of a DynamicStateDescriptionProvider that extends the BaseDynamicStateDescriptionProvider class. This simplified approach leverages the base provider functionality and shows proper injection of required dependencies.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Component(service = { DynamicStateDescriptionProvider.class, ExampleDynamicStateDescriptionProvider.class })\npublic class ExampleDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n\n    @Activate\n    public ExampleDynamicStateDescriptionProvider(final @Reference EventPublisher eventPublisher, //\n            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry, //\n            final @Reference ChannelTypeI18nLocalizationService channelTypeI18nLocalizationService) {\n        this.eventPublisher = eventPublisher;\n        this.itemChannelLinkRegistry = itemChannelLinkRegistry;\n        this.channelTypeI18nLocalizationService = channelTypeI18nLocalizationService;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading openHAB using YUM\nDESCRIPTION: This code snippet demonstrates how to upgrade openHAB using YUM package manager on older RedHat-based systems. It swaps the openHAB2 package with the new openHAB package.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/migration/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum swap openhab2 openhab\n```\n\n----------------------------------------\n\nTITLE: Simple Timer Creation\nDESCRIPTION: Demonstrates creation of a basic timer without retrigger handling.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (cache.private.exists('MyTimer') === false || cache.private.get('MyTimer').hasTerminated()) {\n  cache.private.put('MyTimer', actions.ScriptExecution.createTimer('MyTimer', time.ZonedDateTime.now().plusSeconds(10), function () {\n    cache.private.remove('MyTimer');\n  }));\n};\n```\n\n----------------------------------------\n\nTITLE: Modified addons.cfg with Network Binding\nDESCRIPTION: Example of how to modify the binding line in addons.cfg to install the Network Binding. Add the binding ID to the comma-separated list.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nbinding = astro,network\n```\n\n----------------------------------------\n\nTITLE: Adding Embedded Dependencies in Maven POM\nDESCRIPTION: XML snippet showing how to add a compile-scope dependency that will be embedded in the resulting OSGi bundle. This is the standard approach for adding dependencies in openHAB projects.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/buildsystem.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <dependencies>\n    <dependency>\n      <groupId>foo.bar</groupId>\n      <artifactId>baz</artifactId>\n      <version>1.0.0</version>\n      <scope>compile</scope>\n    </dependency>\n  </dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Group Types in XML for openHAB\nDESCRIPTION: XML example showing how to define a channel group type in openHAB. The channel group type specifies a label, description, category, and the list of channels contained within the group.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_15\n\nLANGUAGE: xml\nCODE:\n```\n<channel-group-type id=\"switch-actor\">\n    <label>Switch Actor</label>\n    <description>This is a single switch actor with a switch channel</description>\n    <category>Light</category>\n    <channels>\n        <channel id=\"switch\" typeId=\"switch\" />\n    </channels>\n</channel-group-type>\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Styling Properties\nDESCRIPTION: Shows how to apply custom CSS styling to pages using the pageStyle and modalStyle properties. These properties affect the f7-page component for both full-screen and modal displays.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npageStyle: \"background-color: #f5f5f5;\"\nmodalStyle: \"padding: 20px;\"\n```\n\n----------------------------------------\n\nTITLE: Triggering a Scene from JavaScript Rules\nDESCRIPTION: This code snippet demonstrates how to programmatically run a scene rule from JavaScript using the rules.runRule method with the scene ID and an empty parameter object.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_scenes.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n rules.runRule('scene_office_dimmed_light', {});\n```\n\n----------------------------------------\n\nTITLE: English Properties File with Custom Keys for ACME Weather\nDESCRIPTION: English language properties file for ACME Weather binding, defining custom keys referenced in the XML file. Includes translations for add-on name, description, and thing status descriptions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n# add-on\n\naddon.acmeweather.name = ACME Weather Binding\naddon.acmeweather.description = Binding for ACME Weather\n\n# thing status descriptions\n\noffline.communication-error = The ACME Weather API is currently not available. Error {0}\n```\n\n----------------------------------------\n\nTITLE: Removing and Adding Channels in XML for openHAB Thing Type\nDESCRIPTION: This XML snippet shows how to remove the 'water_level' channel and add a new 'chlorine' channel to 'foo:pool' things. It demonstrates combining multiple instructions in one instruction-set for Thing type updates.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_22\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<update:update-descriptions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                            xmlns:update=\"https://openhab.org/schemas/update-description/v1.0.0\"\n                            xsi:schemaLocation=\"https://openhab.org/schemas/update-description/v1.0.0 https://openhab.org/schemas/update-description-1.0.0.xsd\">\n\n  <thing-type uid=\"foo:pool\">\n    <instruction-set targetVersion=\"1\">\n      <remove-channel id=\"water-level\">\n      </remove-channel>\n      <add-channel id=\"chlorine\">\n        <type>foo:concentration</type>\n        <label>Chlorine Concentration</label>\n      </add-channel>\n    </instruction-set>\n  </thing-type>\n\n</update:update-descriptions>\n```\n\n----------------------------------------\n\nTITLE: Defining Representation Property in Thing Type XML\nDESCRIPTION: Example showing how to define a representation property in a Thing Type XML configuration. The representation property identifies a unique property for the device type.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_17\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    ...\n    <properties>\n        <property name=\"vendor\">Philips</property>\n    </properties>\n    <representation-property>uniqueId</representation-property>\n    ...\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: HTML Configuration Options Table\nDESCRIPTION: HTML table showing various configuration tasks and their availability across different configuration methods (text files, Main UI, openHAB console) along with recommendations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/index.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table class=\"centered highlight\">\n  <thead>\n    <tr>\n      <th data-field=\"task\">Configuration Task</th>\n      <th data-field=\"files\">via text files</th>\n      <th data-field=\"mainui\">in Main UI</th>\n      <th data-field=\"karaf\">openHAB console</th>\n      <th data-field=\"recommendation\">Recommendation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Auto-Discover Things and Items</td>\n      <td>â</td>\n      <td>âï¸</td>\n      <td>âï¸</td>\n      <td>Main UI<br/>Do not autocreate Items</td>\n    </tr>\n    <!-- Additional rows omitted for brevity -->\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Filtering Bundle List Output\nDESCRIPTION: Example of using pipe and grep to filter the bundle list output to show only openHAB-related bundles.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/console.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbundle:list | grep openHAB\n```\n\n----------------------------------------\n\nTITLE: German Language Properties File\nDESCRIPTION: Example of a German language properties file that provides translations for binding name and description.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nbinding.acmeweather.name =ACME Wetter Binding\nbinding.acmeweather.description = Das ACME Wetter Binding stellt verschiedene Wetterdaten wie die Temperatur, die Luftfeuchtigkeit und den Luftdruck fÃ¼r konfigurierbare Orte vom ACME Wetterdienst bereit.\n```\n\n----------------------------------------\n\nTITLE: Configuring Representation Property Parameters in XML\nDESCRIPTION: Example showing how to declare a representation property parameter in the config-description section of a Thing Type XML configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_18\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    ...\n    <representation-property>uniqueId</representation-property>\n    ...\n    <config-description>\n      <parameter name=\"uniqueId\" type=\"text\">\n        <label>Unique Id</label>\n        <description>The Unique Id for Representation Property</description>\n      </parameter>\n    </config-description>\n    ...\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Weather Binding XML Definition\nDESCRIPTION: Example of a binding XML file showing how to define names and descriptions that can be internationalized.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<binding:binding id=\"acmeweather\">\n    <name>ACME Weather Binding</name>\n    <description>The ACME Weather Binding requests the ACME Weather Service\n        to show the current temperature, humidity and pressure.</description>\n</binding:binding>\n```\n\n----------------------------------------\n\nTITLE: Implementing Active Scan in Hue Light Discovery Service\nDESCRIPTION: Implementation of startScan method for HueLightDiscoveryService that searches for both known and new Hue lights.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    public void startScan() {\n        List<FullLight> lights = hueBridgeHandler.getFullLights();\n        if (lights != null) {\n            for (FullLight l : lights) {\n                onLightAddedInternal(l);\n            }\n        }\n        // search for unpaired lights\n        hueBridgeHandler.startSearch();\n    }\n```\n\n----------------------------------------\n\nTITLE: Group Element Example in openHAB Sitemap\nDESCRIPTION: Example of a Group element that displays room temperatures with one decimal place precision and the Celsius unit.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nGroup item=gTemperature label=\"Room Temperatures [%.1f Â°C]\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Illustrates the expected directory structure for internationalization files within an OpenHAB bundle.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n|- OH-INF\n|---- i18n\n|------- acmeweather.properties\n|------- acmeweather_de.properties\n|------- acmeweather_de_DE.properties\n|------- acmeweather_fr.properties\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Properties in XML for openHAB\nDESCRIPTION: XML example showing how to define static properties for a thing type. Properties provide metadata about the device such as vendor information, model ID, and protocol, which can be used by solutions for various purposes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    ...\n    <properties>\n         <property name=\"vendor\">MyThingVendor</property>\n         <property name=\"modelId\">thingTypeId</property>\n         <property name=\"protocol\">ZigBee</property>\n         ...\n    </properties>\n...</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Publishing Events in OpenHAB using EventPublisher\nDESCRIPTION: Demonstrates how to publish events using EventPublisher with OSGi Declarative Services injection.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/events.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npublic class SomeComponentWantsToPost {\n\n    private final EventPublisher eventPublisher;\n\n    @Activate\n    public SomeComponentWantsToPost(final @Reference EventPublisher eventPublisher) {\n        this.eventPublisher = eventPublisher;\n    }\n\n    public void postSomething() {\n        ItemCommandEvent itemCommandEvent = ItemEventFactory.createCommandEvent(\"ItemX\", OnOffType.ON);\n        eventPublisher.post(itemCommandEvent);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Item Expression Shortcuts in JavaScript\nDESCRIPTION: Shows how to use the @ and # shortcuts to access item states in expressions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfooter: =@'Switch1'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfooter: =items['Switch1'].displayState || items['Switch1'].state\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfooter: =#'Temperature1'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfooter: =items['Temperature1'].numericState\n```\n\n----------------------------------------\n\nTITLE: Dynamic Visibility Syntax in OpenHAB Sitemaps\nDESCRIPTION: Defines the syntax for creating dynamic visibility rules in OpenHAB sitemaps. Allows showing or hiding elements based on item states and conditions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nvisibility=[item_name operator value, item_name operator value AND item_name operator value, ... ]\n```\n\n----------------------------------------\n\nTITLE: Disabling Dependency Embedding in POM Properties\nDESCRIPTION: XML snippet demonstrating how to prevent certain dependencies from being embedded by adding them to the dep.noembedding property. Used when the embedded bundle's manifest isn't properly exporting needed packages.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/buildsystem.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n  <properties>\n    <dep.noembedding>netty-common</dep.noembedding>\n  </properties>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Groups in XML for openHAB Thing Types\nDESCRIPTION: XML example showing how to define channel groups within a thing type definition. Channel groups provide a way to organize channels into logical blocks, useful for complex devices with many channels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_14\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"multi-channel-switch-actor\">\n    <!-- ... -->\n    <channel-groups>\n        <channel-group id=\"switch-actor-1\" typeId=\"switch-actor\" />\n        <channel-group id=\"switch-actor-2\" typeId=\"switch-actor\" />\n    </channel-groups>\n    <!-- ... -->\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Implementing ExtensionService Interface in Java for openHAB\nDESCRIPTION: To create an Extension Service in openHAB, implement the org.openhab.core.extension.ExtensionService interface and register it as an OSGi service. This service should provide a list of available extensions and handle their installation and uninstallation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/extensionservices/index.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\norg.openhab.core.extension.ExtensionService\n```\n\n----------------------------------------\n\nTITLE: Updating Armbian System for openHAB Installation\nDESCRIPTION: Commands to update the Armbian system packages before installing openHAB. This ensures all dependencies are up-to-date before proceeding with the openHAB installation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/armbian.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update\nsudo apt-get upgrade\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Redirect Configuration\nDESCRIPTION: YAML front matter configuration for Jekyll that sets up a page redirect. It disables sitemap inclusion and specifies the destination URL for the redirect.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/community/contributing.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to: /appendix/contributing.html\n---\n```\n\n----------------------------------------\n\nTITLE: Badges Configuration Table in Markdown\nDESCRIPTION: Markdown table defining the Equipment, Point and Property classes needed for displaying status and measurement badges on location cards in OpenHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/model.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Badge        | Type        | Equipment                                                  | Point                              | Property    |\n|--------------|-------------|------------------------------------------------------------|------------------------------------|-------------|\n| Low Battery  | Status      | _Any_                                                      | LowBattery                         | _Any_       |\n| Lights       | Status      | _Any_                                                      | Control, Switch                    | Light       |\n| Windows      | Status      | Window                                                     | OpenState                          | _Any_       |\n| Doors        | Status      | Door, FrontDoor, BackDoor, InnerDoor, CellarDoor, SideDoor | OpenState                          | _Any_       |\n| Garage Doors | Status      | GarageDoor                                                 | OpenState                          | _Any_       |\n| Blinds       | Status      | Blinds                                                     | OpenState                          | _Any_       |\n| Presence     | Status      | _Any_                                                      | Status                             | Presence    |\n| Lock         | Status      | Lock                                                       | Status, OpenState, Control, Switch | _Any_       |\n| Climate      | Status      | HVAC                                                       | Status, Control, Switch            | _Any_       |\n| Screens      | Status      | Screen, Television                                         | Status, Control, Switch            | Power       |\n| Speakers     | Status      | Receiver, Speaker                                          | Status, Control, Switch            | Power       |\n| Projectors   | Status      | Projector                                                  | Status, Control, Switch            | Power       |\n| Alarms       | Status      | _Any_                                                      | Alarm                              | _Any_       |\n| Luminance    | Measurement | _Any_                                                      | Measurement                        | Light       |\n| Temperature  | Measurement | _Any_                                                      | Measurement                        | Temperature |\n| Humidity     | Measurement | _Any_                                                      | Measurement                        | Humidity    |\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Discovery Methods in WeMo Binding\nDESCRIPTION: Example showing startBackgroundDiscovery and stopBackgroundDiscovery implementations for WeMo device discovery, managing a scheduled discovery job.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\n    @Override\n    protected void startBackgroundDiscovery() {\n        logger.debug(\"Start WeMo device background discovery\");\n        if (wemoDiscoveryJob == null || wemoDiscoveryJob.isCancelled()) {\n            wemoDiscoveryJob = scheduler.scheduleWithFixedDelay(wemoDiscoveryRunnable, 0, refreshInterval, TimeUnit.SECONDS);\n        }\n    }\n\n    @Override\n    protected void stopBackgroundDiscovery() {\n        logger.debug(\"Stop WeMo device background discovery\");\n        if (wemoDiscoveryJob != null) {\n            wemoDiscoveryJob.cancel(true);\n            wemoDiscoveryJob = null;\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Excluding Sub-Bundle Features from Aggregation\nDESCRIPTION: XML snippet demonstrating how to exclude sub-bundle feature.xml files from the feature aggregation process by adding an exclusion to the features/openhab-addons/pom.xml file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/buildsystem.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<exclude name=\"**/org.openhab.binding.mqtt*/**/feature.xml\"/>\n```\n\n----------------------------------------\n\nTITLE: Window Open Reminder (Java DSL)\nDESCRIPTION: This Java DSL snippet defines a rule that sends a reminder notification if a window is left open for an hour. It uses a group state change trigger and creates a timer to check the window state after an hour.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nrule \"Window open reminder\"\nwhen\n  Member of gWindows changed to OPEN\nthen\n  createTimer(now.plusMinutes(60), [ |\n    if (triggeringItem.state == OPEN) sendBroadcastNotification(triggeringItem.label + \" is open for one hour!\")\n  ])\nend\n```\n\n----------------------------------------\n\nTITLE: Managing openHAB Service on systemd Systems\nDESCRIPTION: Commands for starting, checking status, and enabling openHAB service on systems using systemd (e.g., Debian 8, Ubuntu 15.x, Raspbian Jessie).\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl start openhab.service\nsudo systemctl status openhab.service\n\nsudo systemctl daemon-reload\nsudo systemctl enable openhab.service\n```\n\n----------------------------------------\n\nTITLE: Creating Discovery Result with Combined Properties\nDESCRIPTION: Example demonstrating how to create a unique identifier by combining multiple non-unique configuration parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nString cfgParamValA = \"value-of-non-unique-config-param-A\";\nString cfgParamValB = \"value-of-non-unique-config-param-B\";\nString uniquePropVal = String.format(\"%s-%s\", cfgParamValA, cfgParamValB);\n...\nDiscoveryResult hub = DiscoveryResultBuilder.create(thingUID)\n  .withProperty(\"uniqueId\", uniquePropVal)\n  .withRepresentationProperty(\"uniqueId\")\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Image Channel State Update - Java\nDESCRIPTION: Example showing how to update an Image channel with raw image data using RawType and HttpUtil helper method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/faq.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHttpUtil.downloadImage(URL url)\n```\n\n----------------------------------------\n\nTITLE: Defining Video Element in OpenHAB Sitemap\nDESCRIPTION: Syntax for embedding video content with support for different encodings including MJPEG and HLS streams.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nVideo [item=<itemname>] [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] url=\"<url of video to embed>\" [encoding=\"<video encoding>\"]\n```\n\nLANGUAGE: java\nCODE:\n```\nVideo url=\"https://demo.openhab.org/Hue.m4v\"\n```\n\n----------------------------------------\n\nTITLE: Managing openHAB Systemd Service in Bash\nDESCRIPTION: Commands to enable, start, and check the status of the openHAB systemd service.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\n# initialize the new service (execute only once)\nsudo systemctl daemon-reload\nsudo systemctl enable openhab.service\n\n#start and retrieve status\nsudo systemctl start openhab.service\nsudo systemctl status openhab.service\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Built-in Audio Sinks\nDESCRIPTION: A table documenting the built-in audio sink options in openHAB, including system speaker and web audio implementations with their respective descriptions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/audio/index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Output device     | Audio sink                        | Description                                                                                                                                                                                                                                                                                                                 |\n|-------------------|-----------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| enhancedjavasound | System Speaker (with mp3 support) | This uses the JRE sound drivers plus an additional 3rd party library, which adds support for mp3 files.                                                                                                                                                                                                                     |\n| webaudio          | Web Audio                         | If sounds should not be played on the server but on the client: This sink sends the audio stream through HTTP to web clients, which then cause it to be played back by the browser. The browser needs to be opened and have a compatible UI running. Currently this feature is supported by Main UI, Basic UI and HABPanel. |\n```\n\n----------------------------------------\n\nTITLE: Filtering Items in XML Configuration for openHAB\nDESCRIPTION: This XML snippet demonstrates how to filter items in an openHAB configuration based on type and tag criteria. It shows the structure for defining multiple criteria within a filter element.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/config-xml.md#2025-04-09_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<filter>\n  <criteria name=\"type\">Switch,Dimmer</criteria>\n  <criteria name=\"tag\">Light,Heating</criteria>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Descriptions XML Structure for openHAB\nDESCRIPTION: This XML snippet outlines the structure for defining Thing descriptions in openHAB. It includes elements for bridge types, thing types, channel types, and channel group types, with their respective properties and nested elements. The schema allows for detailed configuration of devices and their capabilities within the openHAB system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<thing:thing-descriptions bindingId=\"bindingID\"\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n    xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0\n        https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n\n  <bridge-type id=\"bridge-type-id\" listed=\"{true|false}\" extensible=\"channel-type-id-1,channel-type-id-2,...\">\n    <supported-bridge-type-refs>\n      <bridge-type-ref id=\"bridge-type-ref-id\" />\n      ...\n    </supported-bridge-type-refs>\n\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <channels>\n      <channel id=\"channel-id\" typeId=\"channel-type-id\" />\n      OR\n      <channel id=\"channel-id\" typeId=\"channel-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel>\n      ...\n    </channels>\n    OR\n    <channel-groups>\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\" />\n      OR\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel-group>\n      ...\n    </channel-groups>\n\n    <properties>\n        <property name=\"propertyName\">propertyValue</property>\n        ...\n    </properties>\n    <representation-property>propertyName</representation-property>\n\n    <config-description>\n      ...\n    </config-description>\n    OR\n    <config-description-ref uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\" />\n  </bridge-type>\n\n  <thing-type id=\"thing-type-id\" listed=\"{true|false}\" extensible=\"channel-type-id-1,channel-type-id-2,...\">\n    <supported-bridge-type-refs>\n      <bridge-type-ref id=\"bridge-type-id\" />\n      ...\n    </supported-bridge-type-refs>\n\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <channels>\n      <channel id=\"channel-id\" typeId=\"channel-type-id\" />\n      OR\n      <channel id=\"channel-id\" typeId=\"channel-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel>\n      ...\n    </channels>\n    OR\n    <channel-groups>\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\" />\n      OR\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel-group>\n      ...\n    </channel-groups>\n\n    <properties>\n        <property name=\"propertyName\">propertyValue</property>\n        ...\n    </properties>\n    <representation-property>propertyName</representation-property>\n\n    <config-description>\n      ...\n    </config-description>\n    OR\n    <config-description-ref uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\" />\n  </thing-type>\n\n  <channel-type id=\"channel-type-id\" advanced=\"{true|false}\">\n    <item-type>Dimmer</item-type>\n    OR\n    <kind>trigger</kind>\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <tags>\n      <tag>String</tag>\n      ...\n    </tags>\n\n    <state min=\"decimal\" max=\"decimal\" step=\"decimal\" pattern=\"String\" readOnly=\"{true|false}\">\n      <options>\n        <option value=\"String\" />\n        OR\n        <option value=\"String\">String</option>\n        ...\n      </options>\n    </state>\n    OR\n    <event>\n      <options>\n        <option value=\"String\" />\n        OR\n        <option value=\"String\">String</option>\n        ...\n      </options>\n    </event>\n\n    <command>\n      <options>\n        <option value=\"String\" />\n        OR\n        <option value=\"String\">String</option>\n        ...\n      </options>\n    </command>\n\n    <config-description>\n      ...\n    </config-description>\n    OR\n    <config-description-ref uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\" />\n  </channel-type>\n\n  <channel-group-type id=\"channel-group-type-id\">\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <channels>\n      <channel id=\"channel-id\" typeId=\"channel-type-id\" />\n      ...\n    </channels>\n  </channel-group-type>\n\n  ...\n\n</thing:thing-descriptions>\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Descriptions XML Structure for openHAB\nDESCRIPTION: This XML snippet outlines the structure for defining Thing descriptions in openHAB. It includes elements for bridge types, thing types, channel types, and channel group types, with their respective properties and nested elements. The schema allows for detailed configuration of devices and their capabilities within the openHAB system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_20\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<thing:thing-descriptions bindingId=\"bindingID\"\n    xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:thing=\"https://openhab.org/schemas/thing-description/v1.0.0\"\n    xsi:schemaLocation=\"https://openhab.org/schemas/thing-description/v1.0.0\n        https://openhab.org/schemas/thing-description-1.0.0.xsd\">\n\n  <bridge-type id=\"bridge-type-id\" listed=\"{true|false}\" extensible=\"channel-type-id-1,channel-type-id-2,...\">\n    <supported-bridge-type-refs>\n      <bridge-type-ref id=\"bridge-type-ref-id\" />\n      ...\n    </supported-bridge-type-refs>\n\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <channels>\n      <channel id=\"channel-id\" typeId=\"channel-type-id\" />\n      OR\n      <channel id=\"channel-id\" typeId=\"channel-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel>\n      ...\n    </channels>\n    OR\n    <channel-groups>\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\" />\n      OR\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel-group>\n      ...\n    </channel-groups>\n\n    <properties>\n        <property name=\"propertyName\">propertyValue</property>\n        ...\n    </properties>\n    <representation-property>propertyName</representation-property>\n\n    <config-description>\n      ...\n    </config-description>\n    OR\n    <config-description-ref uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\" />\n  </bridge-type>\n\n  <thing-type id=\"thing-type-id\" listed=\"{true|false}\" extensible=\"channel-type-id-1,channel-type-id-2,...\">\n    <supported-bridge-type-refs>\n      <bridge-type-ref id=\"bridge-type-id\" />\n      ...\n    </supported-bridge-type-refs>\n\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <channels>\n      <channel id=\"channel-id\" typeId=\"channel-type-id\" />\n      OR\n      <channel id=\"channel-id\" typeId=\"channel-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel>\n      ...\n    </channels>\n    OR\n    <channel-groups>\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\" />\n      OR\n      <channel-group id=\"channel-group-id\" typeId=\"channel-group-type-id\">\n        <label>String</label>\n        <description>String</description>\n      </channel-group>\n      ...\n    </channel-groups>\n\n    <properties>\n        <property name=\"propertyName\">propertyValue</property>\n        ...\n    </properties>\n    <representation-property>propertyName</representation-property>\n\n    <config-description>\n      ...\n    </config-description>\n    OR\n    <config-description-ref uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\" />\n  </thing-type>\n\n  <channel-type id=\"channel-type-id\" advanced=\"{true|false}\">\n    <item-type>Dimmer</item-type>\n    OR\n    <kind>trigger</kind>\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <tags>\n      <tag>String</tag>\n      ...\n    </tags>\n\n    <state min=\"decimal\" max=\"decimal\" step=\"decimal\" pattern=\"String\" readOnly=\"{true|false}\">\n      <options>\n        <option value=\"String\" />\n        OR\n        <option value=\"String\">String</option>\n        ...\n      </options>\n    </state>\n    OR\n    <event>\n      <options>\n        <option value=\"String\" />\n        OR\n        <option value=\"String\">String</option>\n        ...\n      </options>\n    </event>\n\n    <command>\n      <options>\n        <option value=\"String\" />\n        OR\n        <option value=\"String\">String</option>\n        ...\n      </options>\n    </command>\n\n    <config-description>\n      ...\n    </config-description>\n    OR\n    <config-description-ref uri=\"{binding|thing-type|channel-type|any_other}:bindingID:...\" />\n  </channel-type>\n\n  <channel-group-type id=\"channel-group-type-id\">\n    <label>String</label>\n    <description>String</description>\n    <category>String</category>\n\n    <channels>\n      <channel id=\"channel-id\" typeId=\"channel-type-id\" />\n      ...\n    </channels>\n  </channel-group-type>\n\n  ...\n\n</thing:thing-descriptions>\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting openHAB Release\nDESCRIPTION: Commands to download and extract the latest official stable version of openHAB from the download page.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\ncd /tmp\nwget -O openhab-download.zip https://www.openhab.org/download/releases... # Insert download link here\nsudo unzip openhab-download.zip -d /opt/openhab\nrm openhab-download.zip\n```\n\n----------------------------------------\n\nTITLE: Building a Specific openHAB Binding with Maven\nDESCRIPTION: Maven command to build only a specific binding in the openHAB addons repository. Includes various options that can be added to customize the build process.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmvn clean install -pl :org.openhab.binding.mynewbinding\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels by Kind in openHAB XML Configuration\nDESCRIPTION: This XML code shows how to filter channels based on the 'kind' field in an openHAB configuration. It demonstrates the syntax for specifying multiple values for the 'kind' criteria.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/config-xml.md#2025-04-09_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<filter>\n  <criteria name=\"kind\">STATE|TRIGGER</criteria>\n</filter>\n```\n\n----------------------------------------\n\nTITLE: Implementing Fade Animation for SVG Element in CSS\nDESCRIPTION: This CSS snippet defines an animation that fades an SVG element in and out. It creates a keyframe animation named 'astro_keyframes' that changes the opacity of the element over time, and applies this animation to elements with the 'animate' class.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-fixed.md#2025-04-09_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n<style><![CDATA[\n  .animate {\n      animation: astro_keyframes 2000ms linear infinite normal forwards;\n  }\n\n  @keyframes astro_keyframes {\n      0% { opacity: 0; }\n      50% { opacity: 1; }\n      100% { opacity: 0; }\n  }\n]]</style>\n```\n\n----------------------------------------\n\nTITLE: Setting openHAB File Ownership\nDESCRIPTION: Command to change the ownership of extracted openHAB files to the openHAB user and group.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nsudo chown -hR openhab:openhab /opt/openhab\n```\n\n----------------------------------------\n\nTITLE: Executing OpenHAB Voice Actions in DSL Rules\nDESCRIPTION: Examples of using startDialog(), stopDialog(), and listenAndAnswer() functions within DSL rules to manage voice dialogs and execute voice-controlled actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nstartDialog(null, null)\nstopDialog(null)\n\nstartDialog(\"javasound\", \"sonos:PLAY5:kitchen\")\nstopDialog(\"javasound\")\n\nstartDialog(\"porcupineks\", \"voskstt\", \"voicerss\", \"voicerss:frFR_Zola\", \"system,rulehli\", \"javasound\", \"sonos:PLAY5:kitchen\", \"fr-FR\", \"terminator\", \"listeningItem\")\nstopDialog(\"javasound\")\n\nlistenAndAnswer(null, null)\nlistenAndAnswer(\"javasound\", \"sonos:PLAY5:kitchen\")\nlistenAndAnswer(\"voskstt\", \"voicerss\", \"voicerss:frFR_Axel\", \"system,rulehli\", \"javasound\", \"sonos:PLAY5:kitchen\", \"fr-FR\", \"listeningItem\")\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions with Stack Traces in Java for OpenHAB\nDESCRIPTION: Demonstrates how to properly log exceptions with stack traces in OpenHAB development, which is considered a bug that should be reported and fixed.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nvoid myFun() {\n    try {\n        doSomething();\n    } catch (IOException e) {\n        logger.warn(\"Explain what went wrong and how to avoid it. You can have arguments {}.\", someVariable, e);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding External Dependencies to Karaf Feature.xml\nDESCRIPTION: XML snippet demonstrating how to add external dependencies to the feature.xml file to ensure they are available at runtime, using the bundle tag with dependency attribute.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/buildsystem.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <bundle dependency=\"true\">mvn:org.openhab.addons.bundles/org.openhab.binding.bluetooth/${project.version}</bundle>\n  <bundle dependency=\"true\">mvn:com.github.foo/bar/2.0.0</bundle>\n```\n\n----------------------------------------\n\nTITLE: Preventing Automatic Upgrades of openHAB on apt-based Systems\nDESCRIPTION: Commands to prevent unexpected breakage by putting the openHAB packages on hold. This ensures openHAB is only upgraded manually when desired.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-mark hold openhab\nsudo apt-mark hold openhab-addons\n```\n\n----------------------------------------\n\nTITLE: Listing Available Voices using Console Command\nDESCRIPTION: Console command to list all available voices from installed Text-to-Speech services in the openHAB system.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice voices\n  VoiceRSS - allemand (Allemagne) - Hanna (voicerss:deDE_Hanna)\n  VoiceRSS - allemand (Allemagne) - Jonas (voicerss:deDE_Jonas)\n  VoiceRSS - allemand (Allemagne) - Lina (voicerss:deDE_Lina)\n  VoiceRSS - allemand (Allemagne) - default (voicerss:deDE)\n  VoiceRSS - allemand (Autriche) - Lukas (voicerss:deAT_Lukas)\n  VoiceRSS - allemand (Autriche) - default (voicerss:deAT)\n  VoiceRSS - allemand (Suisse) - Tim (voicerss:deCH_Tim)\n  VoiceRSS - allemand (Suisse) - default (voicerss:deCH)\n...\n  VoiceRSS - franÃ§ais (France) - Axel (voicerss:frFR_Axel)\n  VoiceRSS - franÃ§ais (France) - Bette (voicerss:frFR_Bette)\n  VoiceRSS - franÃ§ais (France) - Iva (voicerss:frFR_Iva)\n* VoiceRSS - franÃ§ais (France) - Zola (voicerss:frFR_Zola)\n  VoiceRSS - franÃ§ais (France) - default (voicerss:frFR)\n...\n  VoiceRSS - vietnamien (Vietnam) - Chi (voicerss:viVN_Chi)\n  VoiceRSS - vietnamien (Vietnam) - default (voicerss:viVN)\n```\n\n----------------------------------------\n\nTITLE: Trigger Module Types Definition\nDESCRIPTION: JSON definition of trigger module types including both simple and composite triggers with their configuration options.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"triggers\":[\n      {\n         \"uid\":\"SampleTrigger\",\n         \"label\":\"SampleTrigger label\",\n         \"description\":\"Sample Trigger description.\",\n         \"outputs\":[\n            {\n               \"name\":\"triggerOutput\",\n               \"type\":\"java.lang.String\",\n               \"label\":\"TriggerOutput label\",\n               \"description\":\"Text from user input or default message.\",\n               \"reference\":\"consoleInput\",\n               \"defaultValue\":\"dtag\"\n            }\n         ]\n      },\n      {\n         \"uid\":\"CompositeSampleTrigger\",\n         \"label\":\"CompositeTrigger label\",\n         \"description\":\"Composite Trigger description.\",\n         \"outputs\":[\n            {\n               \"name\":\"compositeTriggerOutput\",\n               \"type\":\"java.lang.String\",\n               \"label\":\"compositeTriggerOutput label\",\n               \"description\":\"Text from user input or default message.\",\n               \"reference\":\"compositeChildTrigger1.triggerOutput\"\n            }\n         ],\n         \"children\":[\n            {\n               \"id\":\"compositeChildTrigger1\",\n               \"type\":\"SampleTrigger\"\n            }\n         ]\n      }\n]\n```\n\n----------------------------------------\n\nTITLE: UPnP Discovery Participant Implementation for Hue Bridge\nDESCRIPTION: Complete implementation of UpnpDiscoveryParticipant for Hue Bridge discovery, handling thing type support, result creation, and thing UID generation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_23\n\nLANGUAGE: java\nCODE:\n```\npublic class HueBridgeDiscoveryParticipant implements UpnpDiscoveryParticipant {\n\n    @Override\n    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n        return Set.of(THING_TYPE_BRIDGE);\n    }\n\n    @Override\n    public DiscoveryResult createResult(RemoteDevice device) {\n        ThingUID uid = getThingUID(device);\n        if (uid != null) {\n            Map<String, Object> properties = new HashMap<>(2);\n            properties.put(HOST, device.getDetails().getBaseURL().getHost());\n            properties.put(SERIAL_NUMBER, device.getDetails().getSerialNumber());\n\n            DiscoveryResult result = DiscoveryResultBuilder.create(uid).withProperties(properties)\n                    .withLabel(device.getDetails().getFriendlyName()).withRepresentationProperty(SERIAL_NUMBER).build();\n            return result;\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public ThingUID getThingUID(RemoteDevice device) {\n        DeviceDetails details = device.getDetails();\n        if (details != null) {\n            ModelDetails modelDetails = details.getModelDetails();\n            if (modelDetails != null) {\n                String modelName = modelDetails.getModelName();\n                if (modelName != null) {\n                    if (modelName.startsWith(\"Philips hue bridge\")) {\n                        return new ThingUID(THING_TYPE_BRIDGE, details.getSerialNumber());\n                    }\n                }\n            }\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Upgrades of openHAB on apt-based Systems\nDESCRIPTION: Commands to enable automatic upgrades for openHAB packages by removing the hold status. This allows the system's regular update process to upgrade openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-mark unhold openhab\nsudo apt-mark unhold openhab-addons\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Files and Streams using Console Commands\nDESCRIPTION: Console commands to play audio files or stream audio from URLs through specified or default audio sinks.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:audio play doorbell.mp3\nopenhab> openhab:audio play sonos:PLAY5:kitchen doorbell.mp3\nopenhab> openhab:audio play sonos:PLAY5:kitchen doorbell.mp3 25\n\nopenhab> openhab:audio stream example.com\nopenhab> openhab:audio stream sonos:PLAY5:kitchen example.com\n```\n\n----------------------------------------\n\nTITLE: Channel Definition Examples\nDESCRIPTION: Examples showing how to define both state and trigger channels for Things with custom configurations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_4\n\nLANGUAGE: xtend\nCODE:\n```\nThing yahooweather:weather:losangeles [ location=2442047, unit=\"us\", refresh=120 ] {\n Channels:\n  String : customChannel1 \"My Custom Channel\" [\n   configParameter=\"Value\"\n  ]\n  Number : customChannel2 []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Type in XML for Yahoo Weather Binding\nDESCRIPTION: This snippet shows how to define a standalone channel type for temperature in the Yahoo Weather binding using XML. It specifies the item type, label, description, category, and state properties.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<thing:thing-descriptions bindingId=\"yahooweather\" [...]>\n    <channel-type id=\"temperature\">\n        <item-type>Number</item-type>\n        <label>Temperature</label>\n        <description>Current temperature in degrees Celsius</description>\n        <category>Temperature</category>\n        <state readOnly=\"true\" pattern=\"%.1f Â°C\">\n        </state>\n    </channel-type>\n    [...]\n</thing:thing-descriptions>\n```\n\n----------------------------------------\n\nTITLE: Showing Packages on Hold on apt-based Systems\nDESCRIPTION: Command to display all packages that are currently on hold and won't be automatically upgraded. Useful for verifying the hold status of openHAB packages.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-mark showhold\n```\n\n----------------------------------------\n\nTITLE: Recording Audio using Console Command\nDESCRIPTION: Console command to record audio from a specified source for a given duration and save it as a WAV file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:audio record javasound 10 hello.wav\n```\n\n----------------------------------------\n\nTITLE: Retrieving List of Items and Groups using GET Request in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve a list of all Items and Groups from the OpenHAB REST API using a GET request. It sets the Accept header to application/json and uses the 'recursive' parameter.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/restdocs.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET --header \"Accept: application/json\" \"http://{openHAB_IP}:8080/rest/items?recursive=false\"\n```\n\n----------------------------------------\n\nTITLE: Creating openHAB Testing Repository Configuration for RPM-based Systems\nDESCRIPTION: Repository configuration for testing openHAB releases on RPM-based systems. This provides access to beta or release candidate builds with new features in the testing phase.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n[openHAB-Testing]\nname=openHAB Testing\nbaseurl=https://openhab.jfrog.io/artifactory/openhab-linuxpkg-rpm/testing\ngpgcheck=1\ngpgkey=https://openhab.jfrog.io/artifactory/api/gpg/key/public\nenabled=1\n```\n\n----------------------------------------\n\nTITLE: Creating openHAB Stable Repository Configuration for RPM-based Systems\nDESCRIPTION: Repository configuration for stable openHAB releases on RPM-based systems. This goes in the /etc/yum.repos.d/openhab.repo file and provides access to the latest official releases.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n[openHAB-Stable]\nname=openHAB Stable\nbaseurl=https://openhab.jfrog.io/artifactory/openhab-linuxpkg-rpm/stable\ngpgcheck=1\ngpgkey=\"https://openhab.jfrog.io/artifactory/api/gpg/key/public\"\nenabled=1\n```\n\n----------------------------------------\n\nTITLE: Simplified Item Attribute Access in Blockly\nDESCRIPTION: This snippet demonstrates a simplified way to access Item attributes introduced in openHAB 4.1, allowing direct connection of the Item block.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_5\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-getItemAttributes](../images/blockly/blockly-getItemAttributes-simple.png)\n```\n\n----------------------------------------\n\nTITLE: Configuring openHAB Repository for DEB-based Systems\nDESCRIPTION: This code snippet shows the repository configuration line for DEB-based systems (e.g., Debian, Ubuntu) to install openHAB packages. It should be added to the appropriate .list file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/migration/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndeb https://openhab.jfrog.io/artifactory/openhab-linuxpkg stable main\n```\n\n----------------------------------------\n\nTITLE: Writing an Integration Test for ItemRegistry in Java\nDESCRIPTION: This example demonstrates how to write an integration test for the ItemRegistry using OSGi services. It shows setting up mocks, registering and unregistering services, and verifying the behavior of the ItemRegistry.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/tests.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\n@ExtendWith(MockitoExtension.class)\npublic class JavaItemRegistryOSGiTest extends JavaOSGiTest {\n\n    private static final String ITEM_NAME = \"switchItem\";\n\n    private @Mock @NonNullByDefault({}) ItemProvider itemProviderMock;\n\n    private @NonNullByDefault({}) ItemRegistry itemRegistry;\n\n    @BeforeEach\n    public void setUp() {\n        itemRegistry = getService(ItemRegistry.class);\n        when(itemProviderMock.getAll()).thenReturn(List.of(new SwitchItem(ITEM_NAME)));\n    }\n\n    @Test\n    public void getItemsShouldReturnItemsFromRegisteredItemProvider() {\n        assertThat(itemRegistry.getItems(), hasSize(0));\n\n        registerService(itemProviderMock);\n\n        List<Item> items = List.copyOf(itemRegistry.getItems());\n        assertThat(items, hasSize(1));\n        assertThat(items.get(0).getName(), is(equalTo(ITEM_NAME)));\n\n        unregisterService(itemProviderMock);\n\n        assertThat(itemRegistry.getItems(), hasSize(0));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating openHAB Directory in macOS Terminal\nDESCRIPTION: Commands to create a new directory for openHAB installation and navigate to it.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/openhab\ncd ~/openhab\n```\n\n----------------------------------------\n\nTITLE: Installing Add-ons via openHAB Console\nDESCRIPTION: Command to install an add-on using the openHAB console. Replace <id-as-from-list-command> with the actual add-on ID.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nopenhab:addons install <id-as-from-list-command>\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Removing Historical States in OpenHAB\nDESCRIPTION: Methods for retrieving all persisted states as HistoricItem objects and removing persisted states within different time ranges. These methods operate on ZonedDateTime boundaries and return Iterable<HistoricItem> or perform removal operations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\n<item>.getAllStatesSince(ZonedDateTime)\n<item>.getAllStatesUntil(ZonedDateTime)\n<item>.getAllStatesBetween(ZonedDateTime, ZonedDateTime)\n<item>.removeAllStatesSince(ZonedDateTime)\n<item>.removeAllStatesUntil(ZonedDateTime)\n<item>.removeAllStatesBetween(ZonedDateTime, ZonedDateTime)\n```\n\n----------------------------------------\n\nTITLE: German Properties File for Discovery Result Labels\nDESCRIPTION: German translation for discovery result labels, following the same pattern as the English file. Provides German translations for the local weather and forecast discovery results.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n# discovery result\ndiscovery.darksky.weather-and-forecast.api.local.label = Lokales Wetter und Wettervorhersage\n```\n\n----------------------------------------\n\nTITLE: Backing Up openHAB Configuration on macOS\nDESCRIPTION: Commands to create a backup of openHAB configuration using the built-in backup script.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo $OPENHAB_RUNTIME/bin/backup\n## OR ##\nsudo $OPENHAB_RUNTIME/bin/backup /path/to/backups/folder/myBackup.zip\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelType with Temperature Dimension in openHAB\nDESCRIPTION: This XML snippet shows how to define a channel type for temperature measurement, specifying the item type as Number:Temperature and including a state description pattern with unit placeholder.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/units-of-measurement.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<channel-type id=\"temperature\">\n    <item-type>Number:Temperature</item-type>\n    <label>Temperature</label>\n    <description>Current temperature</description>\n    <state readOnly=\"true\" pattern=\"%.1f %unit%\" />\n</channel-type>\n```\n\n----------------------------------------\n\nTITLE: Date and Time Extensions Examples in Java\nDESCRIPTION: Examples of using ZonedDateTime for various time-based calculations in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/persistence.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nLights.changedSince(now.minusMinutes(2).minusSeconds(30))\nTemperature.maximumSince(now.truncatedTo(ChronoUnit.DAYS))\nTemperature.minimumSince(parse(\"2012-01-01\"))\nPowerMeter.historicState(now.truncatedTo(ChronoUnit.DAYS).withDayOfMonth(1))\n```\n\n----------------------------------------\n\nTITLE: Logging Motion Detection in JavaScript\nDESCRIPTION: This snippet demonstrates how to log a message when motion is detected using the console.info() method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_advanced.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.info('Motion was detected');\n```\n\n----------------------------------------\n\nTITLE: Removing openHAB Windows Service\nDESCRIPTION: Commands to stop the openHAB Windows service and remove it from the system. These should be run in PowerShell with administrator privileges during uninstallation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/windows.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nnet stop openHAB\nC:\\openHAB\\userdata\\bin\\openHAB-service.bat remove\n```\n\n----------------------------------------\n\nTITLE: Window Open Reminder (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a rule that sends a reminder notification if a window is left open for an hour. It uses a group state change trigger and sets a timer to check the window state after an hour.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rules, triggers, items, actions } = require('openhab');\n\nrules.JSRule({\n  name: 'Window open reminder',\n  description: 'Remind you that the window is open for an hour',\n  triggers: [\n    triggers.GroupStateChangeTrigger('gWindows', 'OPEN') // Triggers when a member of the Windows group changes it's state to OPEN\n  ],\n  execute: (event) => {\n      const windowName = event.itemName;\n      const windowState = event.newState;\n      // Use a function generator, otherwise the variable windowName can be mutated by later runs of the rule\n      const generateNotificationFunction = (windowName) => {\n          return function () {\n              const window = items.getItem(windowName);\n              // Check if the window is still open\n              if (window.state === 'OPEN') {\n                  actions.NotificationAction.sendBroadcastNotification(`${window.label} is open for an hour!`);\n              }\n          }\n      }\n      // Create a timer that expires in one hour and then sends a notification using myOpenHAB, e.g. \"Livingroom window is open for an hour!\"\n      setTimeout(generateNotificationFunction(windowName), 3600 * 1000);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Declaring Items with Different Icon Sources in openHAB\nDESCRIPTION: Examples of Switch items using various icon sources including default openHAB icons, Material icons, Framework7 icons, and iconify icons. Shows different syntax patterns for icon reference.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nSwitch Livingroom_Light \"Livingroom Ceiling Light\" <switch>\nSwitch Parent_Bedroom_Light \"Parent Bedroom Light\" <oh:switch>\nSwitch Child_Bedroom_Light \"Child Bedroom Light\" <oh:classic:switch>\nSwitch Bathroom_Light \"Bathroom Light\" <material:lightbulb>\nSwitch Kitchen_Light \"Kitchen Light\" <f7:lightbulb>\nSwitch Garage_Light \"Garage Light\" <if:mdi:lightbulb>\n```\n\n----------------------------------------\n\nTITLE: Common Rule Examples in OpenHAB (Java)\nDESCRIPTION: A collection of common rule examples including startup initialization, scheduled tasks, announcements, command handling, motion-triggered lights, and astronomical events.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nvar Number counter\n\n// setting the counter to some initial value\n// we could have done this in the variable declaration already\nrule \"Startup\"\nwhen\n    System started\nthen\n    counter = 0\nend\n\n// increase the counter at midnight\nrule \"Increase counter\"\nwhen\n    Time cron \"0 0 0 * * ?\"\nthen\n    counter = counter + 1\nend\n\n// tell the number of days either at noon or if a button is pressed\nrule \"Announce number of days up\"\nwhen\n    Time is noon or\n    Item AnnounceButton received command ON\nthen\n    say(\"The system is up since \" + counter + \" days\")\nend\n\n// sets the counter to the value of a received command\nrule \"Set the counter\"\nwhen\n    Item SetCounterItem received command\nthen\n    counter = receivedCommand as DecimalType\nend\n\n// turns on a light when one of several motion sensors received command ON, turns it off when one of several received command OFF\nrule \"Motion sensor light\"\nwhen\n    Member of MotionSensors received command\nthen\n    if(receivedCommand == ON) Light.sendCommand(ON)\n    else Light.sendCommand(OFF)\nend\n\nrule \"Start wake up light on sunrise\"\nwhen\n    Channel \"astro:sun:home:rise#event\" triggered\nthen\n    switch(receivedEvent) {\n        case \"START\": {\n            Light.sendCommand(ON)\n        }\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: NGINX SSL Certificate Configuration\nDESCRIPTION: NGINX configuration snippet for specifying SSL certificate file locations.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n  ssl_certificate                 /etc/ssl/openhab.crt;\n  ssl_certificate_key             /etc/ssl/openhab.key;\n```\n\n----------------------------------------\n\nTITLE: Playing Music on Arrival (Java DSL)\nDESCRIPTION: This Java DSL snippet defines a rule that plays music when someone arrives home between 1 PM and 6 PM. It uses a presence trigger and checks the current time.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nrule \"Play music on arrival, but only on afternoon\"\nwhen\n    Item Presence received command ON\nthen\n    if(now.isAfter(now.withHour(13)) && now.isBefore(now.withHour(18))) {\n      Soundbar.sendCommand(ON)\n    }\nend\n```\n\n----------------------------------------\n\nTITLE: Multi-Channel Binding for an Item in Java\nDESCRIPTION: Example showing how to link a single Item to multiple channels. This specific example connects an Office_PC Switch to both an LG WebOS TV and a network service device.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nSwitch Office_PC {\n  channel=\"lgwebos:WebOSTV:01dd3ac4-62f4-7505-208b-12345679\",\n  channel=\"network:servicedevice:6d5de4e65d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Expire Metadata Structure in YAML\nDESCRIPTION: A YAML structure showing how expire metadata is defined with a value and configuration properties. This metadata controls how items expire and includes configuration for ignoring state updates and commands.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nvalue: 0h3m0s\nconfig:\n  ignoreStateUpdates: \"true\"\n  ignoreCommands: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Restarting and Testing NGINX on Synology\nDESCRIPTION: Command to reload the NGINX configuration and test if it contains any syntax errors. This should be run after making changes to the NGINX configuration file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsudo nginx -s reload && sudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: Playing Music on Arrival (YAML)\nDESCRIPTION: This YAML snippet defines a rule that plays music when someone arrives home between 1 PM and 6 PM. It uses a presence trigger and a time condition.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nconfiguration: {}\ntriggers:\n  - id: \"1\"\n    configuration:\n      itemName: Presence\n      command: ON\n    type: core.ItemCommandTrigger\nconditions:\n  - inputs: {}\n    id: \"3\"\n    configuration:\n      startTime: 13:00\n      endTime: 18:00\n    type: core.TimeOfDayCondition\nactions:\n  - inputs: {}\n    id: \"2\"\n    configuration:\n      itemName: Soundbar\n      command: ON\n    type: core.ItemCommandAction\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Profile for OpenHAB Item\nDESCRIPTION: Example of how to configure a profile for a Channel on an Item configuration. Shows the syntax for specifying a profile ID and optional parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n<item-type> MyItem { channel=\"<bindingID>:<thing-typeID>:MyThing:myChannel\"[profile=\"system:<profileID>\", <profile-parameterID>=\"MyValue\", ...]}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-changeable Rules with Custom RuleProvider in OpenHAB\nDESCRIPTION: Java implementation of a RuleProvider that injects constant, non-modifiable rules into the system. This approach is useful for rules that should be compiled into a bundle and remain unchanged during runtime.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n@NonNullByDefault\n@Component(immediately=true, service={RuleProvider.class})\npublic class MyStaticRulesProvider implements RuleProvider {\n    private Collection<ProviderChangeListener<Rule>> listeners = new ArrayList<>();\n    private Map<String, Rule> rules = Collections.singletonMap(\"AirConditionerSwitchOnRule\", createACRule());\n\n    @Override\n    public void addProviderChangeListener(ProviderChangeListener<Rule> listener) { listeners.add(listener); }\n\n    @Override\n    public Collection<Rule> getAll() { return rules.values(); }\n\n    @Override\n    public void removeProviderChangeListener(ProviderChangeListener<Rule> listener) { listeners.remove(listener); }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing NGINX Configuration\nDESCRIPTION: Command to test the NGINX configuration for any syntax errors before applying changes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: Trigger Types Table in Markdown\nDESCRIPTION: Lists and describes the different categories of triggers available in OpenHAB using a markdown table format.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Event       | Description                                                                                                                  |\n| ----------- | ---------------------------------------------------------------------------------------------------------------------------- |\n| **Items**   | Commands, updates, and changes on an individual Item's state.                                                                |\n| **Groups**  | Groups are special Items that have other Items as members. Rules can be triggered on any Item event from any of its members. |\n| **Time**    | Rules can trigger based on specific times.                                                                                   |\n| **Channel** | Some Things have Channels that can trigger rules directly instead of being linked to Items.                                  |\n| **Thing**   | When Things change or update status they generate events (e.g. ONLINE, OFFLINE, etc.).                                       |\n| **System**  | Events that occur during important activities internal to openHAB itself, such as startup complete.                          |\n```\n\n----------------------------------------\n\nTITLE: Implementing Bitwise NOT Operation in Blockly\nDESCRIPTION: This block performs a bitwise NOT operation, inverting the bits of its operand.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-standard-ext.md#2025-04-09_snippet_1\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-bitwise-not.png](../images/blockly/blockly-bitwise-not.png)\n```\n\n----------------------------------------\n\nTITLE: Settings Configuration Table Format\nDESCRIPTION: Markdown table listing additional openHAB settings and their purposes, covering network, audio, security, and other system configurations\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/first_steps.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSetting | Purpose\n-|-\nNetwork Settings | Configure the default networks OH listens on and broadcasts on, IPV6, etc.\nAudio | Configure the default microphone and audio destination\nEphemeris | Configure day types (e.g. which days of the week are weekends) and import your locale's holidays. Can be used in rules.\nAPI Security | Allows Basic Auth to be used for accessing protected parts of the openHAB API. By default an authorization token or OAuth2 is required.\nAddon Management | Choose whether to download add-ons when they are installed or use a locally stored collection of all the add-ons.\nPersistence | Set the system-wide default persistence engine.\nJson Storage | Settings for the automatic backup of UI generated configs.\nInbox | Settings that affect how Items are shown and approved in the Inbox where discovered Things appear.\nCharts | Default settings for generated charts.\nVoice | Settings for voice-to-text, text-to-voice and human language processing.\nOther Services | The items that appear here will change based on the set of add-ons installed. These are places to configure those bindings and capabilities (e.g. set up the connection for InfluxDB Persistence).\n```\n\n----------------------------------------\n\nTITLE: Adding New User to NGINX Password File\nDESCRIPTION: Command to add a new user to the existing NGINX password file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo htpasswd /etc/nginx/.htpasswd username\n```\n\n----------------------------------------\n\nTITLE: Audio Components List Documentation\nDESCRIPTION: Detailed markdown list describing the core audio components including audio streams, formats, sources, sinks, text-to-speech, and speech-to-text services. Each component is defined with its specific characteristics and responsibilities.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/audio.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- _Audio Streams_ are essentially byte streams with a given _audio format_.\n  They do not need to be limited in size, i.e. it is allowed to have continuous streams, e.g. the input from a microphone or from an Internet radio station.\n- _Audio Formats_ define the container (e.g. WAV), encoding, bit rate, sample frequency and depth and the bit order (little or big endian).\n- _Audio Sources_ are services that are capable of producing audio streams.\n  They can support different formats and provide a stream in a requested format upon request.\n  Typical audio source services are microphones. Typically, a continuous stream is expected from them.\n- _Audio Sinks_ are services that accept audio streams of certain formats.\n  Typically, these are expected to play the audio stream, i.e. they are some kind of speaker or media device.\n- _Text-to-Speech_ (TTS) services are similar to audio sources with respect to the ability to create audio streams.\n  The difference is that they take a string as an input and will synthesize this string to a spoken text using a given voice.\n  TTS services can provide information about the voices that they support and the locale that those voices are associated with.\n  Each voice supports exactly one locale.\n- _Speech-to-Text_ (STT) services are similar to audio sinks, but they do not simply play back the stream, but convert it to a plain string.\n  They provide information about supported formats and locales.\n```\n\n----------------------------------------\n\nTITLE: Using executeCommandLine with Parameters in openHAB Rules\nDESCRIPTION: Example showing how to execute a script with parameters from openHAB rules. Demonstrates different ways to pass arguments to scripts and handle script responses.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// When you are not interested in the script output\nexecuteCommandLine(\"path/to/my/script.sh\", itemState1, itemState2);\n\n// When you need the output in your further rule processing\nvar ScriptResponse = executeCommandLine(Duration.ofSeconds(60), \"path/to/my/script.sh\", itemState1, itemState2);\n\n// Space separated constants must be given as separate parameters as well\n// e.g. path/to/your/script.sh xyz fred.file\nvar ScriptResponse = executeCommandLine(Duration.ofSeconds(60), \"path/to/your/script.sh\", \"xyz\", \"fred.file\");\n```\n\n----------------------------------------\n\nTITLE: Listing Available Human Language Interpreters via Console\nDESCRIPTION: Console command to check which human language interpreters are available in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nopenhab> openhab:voice interpreters\n  Built-in Interpreter (system)\n* Rule-based Interpreter (rulehli)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency for Astro Binding in Maven POM\nDESCRIPTION: XML snippet showing how to add the Astro binding dependency to the demo project's pom.xml file. This is required to make the demo project aware of the add-on for running and debugging purposes.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/eclipse.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n    <groupId>org.openhab.addons.bundles</groupId>\n    <artifactId>org.openhab.binding.astro</artifactId>\n    <version>${project.version}</version>\n    <scope>runtime</scope>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Querying JsonDB Storage Contents in JSON\nDESCRIPTION: This snippet shows the contents of the JsonDB storage file for Things after adding a new network device Thing. It demonstrates the structure of the JSON data including channels, configuration properties, and other metadata.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/jsondb.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network:device:172_16_13_254\": {\n    \"class\": \"org.openhab.core.thing.internal.ThingImpl\",\n    \"value\": {\n      \"label\": \"ISP_Gateway\",\n      \"channels\": [\n        {\n          \"acceptedItemType\": \"Switch\",\n          \"kind\": \"STATE\",\n          \"uid\": {\n            \"segments\": [\n              \"network\",\n              \"device\",\n              \"172_16_13_254\",\n              \"online\"\n            ]\n          },\n          \"channelTypeUID\": {\n            \"segments\": [\n              \"network\",\n              \"online\"\n            ]\n          },\n          \"configuration\": {\n            \"properties\": {}\n          },\n          \"properties\": {},\n          \"defaultTags\": []\n        },\n        {\n          \"acceptedItemType\": \"Number\",\n          \"kind\": \"STATE\",\n          \"uid\": {\n          \"segments\": [\n              \"network\",\n              \"device\",\n              \"172_16_13_254\",\n              \"time\"\n            ]\n          },\n          \"channelTypeUID\": {\n            \"segments\": [\n              \"network\",\n              \"time\"\n            ]\n          },\n          \"configuration\": {\n            \"properties\": {}\n          },\n          \"properties\": {},\n          \"defaultTags\": []\n        }\n      ],\n      \"configuration\": {\n        \"properties\": {\n          \"hostname\": \"172.16.13.254\",\n          \"refresh_interval\": 60000,\n          \"port\": 0,\n          \"dhcplisten\": false,\n          \"retry\": 1,\n          \"timeout\": 5000,\n          \"use_system_ping\": false\n        }\n      },\n      \"properties\": {},\n      \"uid\": {\n          \"segments\": [\n          \"network\",\n          \"device\",\n          \"172_16_13_254\"\n        ]\n      },\n      \"thingTypeUID\": {\n        \"segments\": [\n          \"network\",\n          \"device\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Status Checking in OpenHAB\nDESCRIPTION: Shows how to check the status of a thing using its UID. The code retrieves thing status information and handles cases where the thing might be offline or non-existent.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nvar thingStatusInfo = getThingStatusInfo(\"zwave:device:c5155aa4:node2\")\n\nif ((thingStatusInfo !== null) && (thingStatusInfo.getStatus().toString() == \"ONLINE\")) {\n    logInfo(\"ThingStatus\", \"The thing is online.\")\n} else {\n    logError(\"ThingStatus\", \"The thing is offline or doesn't exist.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Thing Status Values Example\nDESCRIPTION: Example of a Thing UID format used in OpenHAB rules for identifying devices. Shows a Z-Wave device identifier structure.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nzwave:device:c5155aa4:node14\n```\n\n----------------------------------------\n\nTITLE: Adding Binding Requirement in BND Run File (Text)\nDESCRIPTION: Add your add-on to the runrequires section in the app.bndrun file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/generic.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nbnd.identity;id='org.openhab.binding.YOURBINDINGNAME'\n```\n\n----------------------------------------\n\nTITLE: Listing Bundles with Symbolic Names in openHAB Console\nDESCRIPTION: This command lists bundles with their symbolic names, which follow the naming convention of <prefix>.<type>.<id>. It's useful for identifying bundles in configuration files and logs.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/bundles.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nopenhab> bundle:list -s\n ID | State    | Lvl | Version                | Symbolic name\n----------------------------------------------------------------------------------------------\n...\n209 | Active   |  80 | 3.0.0                  | org.openhab.binding.network\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Metadata for Number Item in openHAB\nDESCRIPTION: This snippet demonstrates how to set the 'unit' metadata for a Number item to specify a custom unit (mm/h) for rainfall measurement, overriding the default unit.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/units-of-measurement.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nNumber:Speed \"Rainfall\" { unit=\"mm/h\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for OpenHAB Services Documentation\nDESCRIPTION: This snippet defines the front matter for the Markdown file, specifying the layout and title for the OpenHAB services documentation page.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/services.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: documentation\ntitle: Services\n---\n```\n\n----------------------------------------\n\nTITLE: Launching Demo App with Maven BND Plugin (Shell)\nDESCRIPTION: Launch the demo app using the content of the app.bndrun file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/generic.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmvn bnd-run:run\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Approve for Inbox in YAML Configuration\nDESCRIPTION: This YAML configuration enables the auto-approval feature for the inbox, which automatically approves new discovery entries, by setting the autoApprove property to true.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/discovery.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\norg.openhab.inbox:autoApprove=true\n```\n\n----------------------------------------\n\nTITLE: Interactive Bulb Group Element\nDESCRIPTION: SVG group element showing the structure of an interactive bulb with a proxy element for state indication.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/layout-pages-fixed.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n  <-- simplified elements from the bulb group -->\n  <g id=\"az-main-lightbulb2\" openhab=\"true\">\n    <path/>\n    <ellipse flash=\"true\" >...</ellipse>\n    more elements in the group\n  </g>\n```\n\n----------------------------------------\n\nTITLE: Tailing openHAB Logs\nDESCRIPTION: Command to stream openHAB logs in the openHAB console, useful for monitoring addon startup and operation.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/intellij.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlog:tail\n```\n\n----------------------------------------\n\nTITLE: Testing Web Audio Command in OpenHAB Console\nDESCRIPTION: Console command to test the web audio sink functionality by playing an audio file\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/about.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nopenhab> audio play webaudio barking.mp3\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Items in OpenHAB\nDESCRIPTION: Example of adding a tag to an Item definition. Tags allow characterizing Items beyond their basic type and can be used by add-ons for context-sensitive interactions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nSwitch Livingroom_Light \"Livingroom Ceiling Light\" [\"Light\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Items in OpenHAB\nDESCRIPTION: Example of adding a tag to an Item definition. Tags allow characterizing Items beyond their basic type and can be used by add-ons for context-sensitive interactions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nSwitch Livingroom_Light \"Livingroom Ceiling Light\" [\"Light\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring openHAB Repository for RPM-based Systems\nDESCRIPTION: This code snippet provides the repository configuration for RPM-based systems (e.g., RedHat, CentOS, Fedora) to install openHAB packages. It should be added to the appropriate .repo file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/migration/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[openHAB-Stable]\nname=openHAB Stable\nbaseurl=https://openhab.jfrog.io/artifactory/openhab-linuxpkg-rpm/stable\ngpgcheck=1\ngpgkey=https://openhab.jfrog.io/artifactory/api/gpg/key/public\nenabled=1\n```\n\n----------------------------------------\n\nTITLE: Querying Item State in OpenHAB CLI\nDESCRIPTION: Shows how to query the current state of an item using the openhab:status command\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/runtime.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopenhab> openhab:status Heating_GF_Corridor\nOFF\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Rule Structure in YAML\nDESCRIPTION: This YAML snippet shows the structure of a basic rule in openHAB, including triggers, conditions, and actions. It demonstrates how to set up a rule that turns on an Item when certain conditions are met.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_basic.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntriggers:\n  - id: \"1\"\n    configuration:\n      itemName: vCloudiness\n    type: core.ItemStateChangeTrigger\nconditions:\n  - id: \"2\"\n    configuration:\n      itemName: vCloudiness\n      operator: GE\n      state: 50 %\n    type: core.ItemStateCondition\n  - id: \"3\"\n    configuration:\n      itemName: vIsCloudy\n      operator: \"!=\"\n      state: ON\n    type: core.ItemStateCondition\nactions:\n  - id: \"4\"\n    configuration:\n      itemName: vIsCloudy\n      command: ON\n    type: core.ItemCommandAction\nconfiguration: {}\ntype: core.rules:rule\n```\n\n----------------------------------------\n\nTITLE: Disabling Background Discovery in YAML Configuration\nDESCRIPTION: This YAML snippet shows how to disable background discovery for a specific service (LIFX in this example) by setting the discovery background property to false.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/discovery.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndiscovery.lifx:background=false\n```\n\n----------------------------------------\n\nTITLE: Changing Item State in OpenHAB CLI\nDESCRIPTION: Demonstrates how to change an item's state using the openhab:send command\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/runtime.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenhab> openhab:send Heating_GF_Corridor ON\nCommand has been sent successfully.\n```\n\n----------------------------------------\n\nTITLE: Issue Reporting Guide Table in Markdown\nDESCRIPTION: A markdown table that maps different types of issues to their appropriate reporting repositories in the openHAB ecosystem. It helps contributors direct their issues to the correct project repository.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/appendix/contributing.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Issue                                                        | Where to report                                                    |\n|--------------------------------------------------------------|--------------------------------------------------------------------||\n| Problems and feature requests for openHAB add-ons            | [openHAB-addons](https://github.com/openhab/openhab-addons/issues) |\n| Issues related to the runtime environment, IDE and packaging | [openHAB-distro](https://github.com/openhab/openhab-distro/issues) |\n| Issues related to the core openHAB bundles                   | [openHAB-core](https://github.com/kaikreuzer/openhab-core/issues)  |\n```\n\n----------------------------------------\n\nTITLE: JSON Example for JsonPath Transformation\nDESCRIPTION: Example JSON structure used to demonstrate JsonPath transformation in Blockly. This shows a nested JSON object with device information including location and temperature.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-run-and-process.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{ \"device\": { \"location\": \"Outside\", \"status\": { \"temperature\": 23.2 }}}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Docker Compose\nDESCRIPTION: Configuration file (.env) that defines environment variables for the openHAB Docker Compose setup, including Java options for UPnP.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nCOMPOSE_PROJECT_NAME=openhab\n\nOPENHAB_ADDONS=/opt/openhab/addons\nOPENHAB_CONF=/opt/openhab/conf\nOPENHAB_LOGDIR=/opt/openhab/userdata/logs\nOPENHAB_USERDATA=/opt/openhab/userdata\n\nEXTRA_JAVA_OPTS=\"-Duser.timezone=Europe/Berlin -Dorg.jupnp.network.useInterfaces=eno1 -Dorg.jupnp.network.useAddresses=192.168.0.65\"\n```\n\n----------------------------------------\n\nTITLE: Playing Sound with Web Audio Sink\nDESCRIPTION: Example of using playSound action to play audio through web audio sink\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/about.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nplaySound(\"webaudio\", \"barking.mp3\")\n```\n\n----------------------------------------\n\nTITLE: Building and serving local documentation preview\nDESCRIPTION: This command builds and serves a local preview of the openHAB documentation using npm. It allows developers to view and test changes before submitting them.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/README.md#2025-04-09_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm run serve-preview\n```\n\n----------------------------------------\n\nTITLE: Connecting to openHAB Console via SSH\nDESCRIPTION: Command to establish SSH connection to the openHAB console on localhost port 8101. Default credentials are openhab:habopen.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/console.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nssh -p 8101 openhab@localhost\n```\n\n----------------------------------------\n\nTITLE: Updating openHAB for Versions Earlier than 2.1.0 on macOS\nDESCRIPTION: Commands to download and run the update script for openHAB versions earlier than 2.1.0.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/macos.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/openhab\nsudo sh -c \"$(curl -fsSL https://raw.githubusercontent.com/openhab/openhab-distro/main/distributions/openhab/src/main/resources/bin/update)\" -- 2.1.0\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter for Chart Pages Documentation\nDESCRIPTION: YAML frontmatter defining the title of the documentation page for Chart Pages\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/chart-pages.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Chart Pages\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Device Permissions in Docker Container (Linux)\nDESCRIPTION: Command to set read/write permissions for a USB device in the openHAB Docker container, allowing access to Z-Wave or ZigBee network sticks.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec \\\n    -d \\\n    openhab \\\n    /bin/chmod o+rw /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Markdown Documentation\nDESCRIPTION: This YAML frontmatter defines the layout and title for the markdown documentation page. It specifies that this page uses the 'documentation' layout and sets the title to 'Settings - Scenes'.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/settings/scenes.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: documentation\ntitle: Settings - Scenes\n---\n```\n\n----------------------------------------\n\nTITLE: Built-in English Grammar for OpenHAB Voice Interpreter\nDESCRIPTION: Examples of the built-in English grammar used by the OpenHAB voice interpreter for controlling items and executing commands.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nincrease the <item name>\ndecrease the <item name>\nset the color of the <item name> to red\nput the <item name> to next\nput the <item name> to previous\nplay the <item name>\npause the <item name>\nrewind the <item name>\nfast forward the <item name>\nstart the <item name>\nstop the <item name>\nrefresh the <item name>\n```\n\n----------------------------------------\n\nTITLE: Markdown Ordered List Example\nDESCRIPTION: Demonstrates the proper formatting of an ordered list in markdown using a repeated '1.' numbering style.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/styleguide.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Some text\n1. Some more text\n```\n\n----------------------------------------\n\nTITLE: Markdown Nested Unordered List Example\nDESCRIPTION: Illustrates a 'loose' unordered list with nested items and proper indentation spacing.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/styleguide.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Some text\n  - An indented item, making the list \"loose\"\n\n- Some more text\n\n- And even more text that could also stretch over multiple lines\n```\n\n----------------------------------------\n\nTITLE: Styling Introduction Page with CSS\nDESCRIPTION: CSS styles for the introduction page, including responsive design for the logo and welcome text formatting.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/introduction.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n@media (min-width: 720px) {\n  .intro-logo {\n    float: left;\n    padding: 30px;\n  }\n}\nh1.welcome {\n  font-family: 'Open Sans', sans-serif;\n  font-weight: 300;\n  font-size: 36pt;\n  margin-top: 0 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment for Documentation Authors\nDESCRIPTION: An HTML comment visible only to project contributors that explains when the file was created and provides guidance about its future removal.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/community/contributing.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Note to authors: This file was created in December 2016. Feel free to remove it after a few months... -->\n```\n\n----------------------------------------\n\nTITLE: Implementing AbstractItemEventSubscriber in Java for OpenHAB\nDESCRIPTION: Shows implementation of AbstractItemEventSubscriber for handling ItemStateEvents and ItemCommandEvents with simplified event handling methods.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/events.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Component(immediate = true, service = EventSubscriber.class)\npublic class SomeItemEventSubscriber extends AbstractItemEventSubscriber {\n\n    private final EventFilter eventFilter = new TopicEventFilter(\"openhab/items/ItemX/.*\");\n\n    @Override\n    public EventFilter getEventFilter() {\n        return eventFilter;\n    }\n\n    @Override\n    protected void receiveCommand(ItemCommandEvent commandEvent) {\n        // do something\n    }\n\n    @Override\n    protected void receiveUpdate(ItemStateEvent stateEvent) {\n        // do something\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling openHAB on Apt-Based Systems\nDESCRIPTION: Commands to completely remove openHAB and its repository from Debian-based systems using apt.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get purge openhab*\nsudo rm /etc/apt/sources.list.d/openhab.list\n```\n\n----------------------------------------\n\nTITLE: Defining Colorpicker Element in openHAB Sitemap\nDESCRIPTION: Defines a Colorpicker element for controlling RGB or RGBW lights, allowing adjustment of brightness and color hue.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nColorpicker item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>]\n```\n\n----------------------------------------\n\nTITLE: Creating Log Entries in openHAB Rules\nDESCRIPTION: This snippet shows how to create log entries at different levels (ERROR, WARN, INFO, DEBUG) within openHAB rules. It demonstrates logging with static text and dynamic values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/logging.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nlogError(\"heating\", \"This is a log entry of type Error!\")\nlogWarn(\"heating\", \"Heating control failed while in mode {}\", Heating_Mode.state)\nlogInfo(\"heating\", \"Heating mode set to normal\")\nlogDebug(\"heating\", \"Bedroom: Temperature: {}, Mode: {}\", Bedroom_Temp.state, Bedroom_Heater_Mode.state)\n```\n\n----------------------------------------\n\nTITLE: Defining State Options for Channel Types in OpenHAB\nDESCRIPTION: This XML snippet shows how to define a list of predefined state options for a channel in OpenHAB. It creates a read-only channel with three possible states representing pressure levels, which can be used by the UI to render appropriate labels.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<state readOnly=\"true\">\n    <options>\n        <option value=\"HIGH\">High Pressure</option>\n        <option value=\"MEDIUM\">Medium Pressure</option>\n        <option value=\"LOW\">Low Pressure</option>\n    </options>\n</state>\n```\n\n----------------------------------------\n\nTITLE: Setting up Node and Ruby versions using version managers\nDESCRIPTION: This snippet demonstrates how to use Node Version Manager (nvm) and Ruby Version Manager (rvm) to set up the required versions of Node.js and Ruby for building the documentation locally.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/README.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnvm use\nrvm use\n```\n\n----------------------------------------\n\nTITLE: Defining Default Tags for Channel Types in OpenHAB\nDESCRIPTION: This XML snippet shows how to assign default tags to channels in OpenHAB. Tags are used for automatic grouping and semantic categorization of items in the UI, with this example showing 'Control' and 'Light' tags.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<tags>\n    <tag>Control</tag>\n    <tag>Light</tag>\n</tags>\n```\n\n----------------------------------------\n\nTITLE: Executing Human Language Interpretation in Java Rules\nDESCRIPTION: Examples of using the interpret() function to execute human language interpretation within DSL rules in openHAB. Shows various overloads for specifying text, interpreters, and audio sink.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\ninterpret(\"turn on the light\")\nvar String result = interpret(\"turn on the light\", \"system\")\nresult = interpret(\"turn on the light\", \"system\", null)\nresult = interpret(\"turn on the light\", \"system,rulehli\")\nresult = interpret(VoiceCommand.state, \"system\", \"sonos:PLAY5:kitchen\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Thing Status and Channel Triggered Events in Bash\nDESCRIPTION: These snippets demonstrate how to subscribe to ThingStatusInfoChangedEvent and ChannelTriggeredEvent using the OpenHAB REST API. They use GET requests with specific topic parameters to filter the events.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/restdocs.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# ThingStatusInfoChangedEvent - The status of a thing changed.\ncurl \"http://{openHAB_IP}:8080/rest/events?topics=openhab/things/{thingUID}/statuschanged\"\n\n# ChannelTriggeredEvent - A channel has been triggered.\ncurl \"http://{openHAB_IP}:8080/rest/events?topics=openhab/channels/{channelUID}/triggered\"\n```\n\n----------------------------------------\n\nTITLE: Triggering Channels in openHAB Thing Handler\nDESCRIPTION: Demonstrates how to trigger a channel in a Thing Handler, with and without an event payload.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\ntriggerChannel(\"channelId\")\n\n// With event payload\ntriggerChannel(\"channelId\", \"PRESSED\")\n```\n\n----------------------------------------\n\nTITLE: Logging Thing ID in OpenHAB\nDESCRIPTION: Example output showing how a Thing ID appears when logged. The output displays the full Thing UID including binding type, thing type, and unique identifier.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nthing name = nanoleaf:controller:645E3A484A83\n```\n\n----------------------------------------\n\nTITLE: Creating Time-Based Condition in JavaScript\nDESCRIPTION: This code creates a condition that checks if the current time is between sunset and 23:00. It uses the JS-Joda library to parse and compare times.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_advanced.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar sunset = time.ZonedDateTime.parse(items.getItem('Sunset').state);\nvar endTime = time.ZonedDateTime.now().withHour(23).withMinute(0).withSecond(0).withNano(0);\nnow.isAfter(sunset) && now.isBefore(endTime)\n```\n\n----------------------------------------\n\nTITLE: Temperature Value Color with Multiple Conditions\nDESCRIPTION: This example shows how to set value colors for a Temperature item with multiple conditions, demonstrating the importance of condition order and the use of the 'Uninitialized' state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nText item=Temperature valuecolor=[Last_Update==\"Uninitialized\"=\"gray\",\n                                  >=25=\"orange\", >=15=\"green\", 0=\"white\", <15=\"blue\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Default Variable Value in JavaScript Expression\nDESCRIPTION: Demonstrates how to provide a default value for a variable in an expression using the OR operator.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntext: =(vars.selectedNumber || '0')\n```\n\n----------------------------------------\n\nTITLE: Defining Blockly Editor Documentation Layout in Markdown\nDESCRIPTION: This snippet defines the layout and title for the Blockly Editor documentation page using YAML front matter in Markdown.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/settings/blockly-editor.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: documentation\ntitle: Blockly Editor\n---\n```\n\n----------------------------------------\n\nTITLE: Rule Template Reference Example - JSON\nDESCRIPTION: Sample rule instance that references a rule template with configuration for condition operator and constraint\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uid\": \"sample.rulebytemplate\",\n    \"name\": \"RuleByTemplate\",\n    \"templateUID\": \"SampleRuleTemplate\",\n    \"tags\": [\n      \"rule\",\n      \"template\"\n    ],\n    \"configuration\": {\n      \"condition_operator\": \"!=\",\n      \"condition_constraint\": \"template\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Available Add-ons in openHAB Console\nDESCRIPTION: Command to list all available add-ons in the openHAB console. This command filters the feature list to show only those starting with 'openhab'.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfeature:list | grep ^openhab\n```\n\n----------------------------------------\n\nTITLE: Referencing Channel Type in Thing Definition using DSL\nDESCRIPTION: This example demonstrates how to reference an existing channel type within a thing's channel definition using the OpenHAB DSL. It shows the syntax for specifying a thing with its properties and referencing a temperature channel type.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/things.md#2025-04-09_snippet_6\n\nLANGUAGE: xtend\nCODE:\n```\nThing yahooweather:weather:losangeles [ location=2442047, unit=\"us\", refresh=120 ] {\n    Channels:\n        Type temperature : my_yesterday_temperature \"Yesterday's Temperature\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NGINX on Linux\nDESCRIPTION: Command to install NGINX on a Linux system using apt-get package manager.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get update && sudo apt-get install nginx\n```\n\n----------------------------------------\n\nTITLE: Redefining CSS Variables in YAML Configuration\nDESCRIPTION: This snippet demonstrates how to redefine a Framework7 CSS variable for a component and its descendants using YAML configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/css-pages-widgets.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstyle:\n  --f7-button-border-color: rgb(255, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Creating a New openHAB Binding Skeleton in Linux\nDESCRIPTION: A bash command for generating the basic skeleton of a new openHAB binding. This script helps developers to quickly start with the proper structure for binding development.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./create_openhab_binding_skeleton.sh  MyNewBinding \"<Author>\" <GitHubUsername>\n```\n\n----------------------------------------\n\nTITLE: Installing Specific openHAB Version on apt-based Systems\nDESCRIPTION: Commands to install a specific version of openHAB and openHAB add-ons on apt-based systems. This example installs version 4.0.1.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install openhab=4.0.1\nsudo apt install openhab-addons=4.0.1\n```\n\n----------------------------------------\n\nTITLE: Linking Items to Channels in Java Configuration\nDESCRIPTION: Examples of how to link different types of Items to specific channels in openHAB. Shows various bindings including network, netatmo, astro, and zwave with their specific channel formats.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nSwitch  Phone_Mobile       \"My Mobile Phone\"               {channel=\"network:device:devicename:online\"}\nNumber  Netatmo_Indoor_CO2 \"CO2\"                           {channel=\"netatmo:NAMain:home:inside:Co2\"}\nNumber  Azimuth            \"Azimuth\"                       {channel=\"astro:sun:home:position#azimuth\"}\nContact Garage             \"Garage is [MAP(en.map):%s]\"    {channel=\"zwave:21:command=sensor_binary,respond_to_basic=true\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Localized Thing Types in Java\nDESCRIPTION: Java code demonstrating how to retrieve thing types in a specific locale using the ThingTypeRegistry OSGi service. The example shows how to get thing types for the German locale.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nList<ThingType> thingTypes = thingTypeRegistry.getThingTypes(Locale.GERMAN);\n```\n\n----------------------------------------\n\nTITLE: Upgrading openHAB in Bash\nDESCRIPTION: Commands to upgrade openHAB to a new version or switch between stable and snapshot builds.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\ncd /opt/openhab\nsudo runtime/bin/update\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo runtime/bin/update 2.0.0\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo runtime/bin/update 2.2.0-SNAPSHOT\n```\n\n----------------------------------------\n\nTITLE: Using CSS Variables in YAML Configuration\nDESCRIPTION: This example shows how to use a CSS variable in a YAML configuration to set a CSS property.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/css-pages-widgets.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nborder-color: var(--f7-button-border-color)\n```\n\n----------------------------------------\n\nTITLE: Player Item State Handling in Java\nDESCRIPTION: Example of converting Player item states to numeric values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_25\n\nLANGUAGE: java\nCODE:\n```\n//Loading from an Item\nval int Playing = if (MyPlayerItem.state == PLAY) 1 else 0\n```\n\n----------------------------------------\n\nTITLE: Setting Label, Value, and Icon Colors for Temperature Item\nDESCRIPTION: This example shows how to set colors for a Temperature item's label, value, and icon based on its state. It demonstrates the use of comparison operators and default values.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nText item=Temperature labelcolor=[>0=\"blue\"] valuecolor=[22=\"green\"] iconcolor=[22=\"green\"]\nText item=Temperature labelcolor=[>0=\"blue\"] valuecolor=[==22=\"green\"] iconcolor=[==22=\"green\"]\nText item=Temperature labelcolor=[Temperature>0=\"blue\"] valuecolor=[Temperature==22=\"green\"] iconcolor=[Temperature==22=\"green\"]\n```\n\n----------------------------------------\n\nTITLE: MQTT JSONPath Transformation Example\nDESCRIPTION: Transformation string used to extract the temperature value from the JSON payload using JSONPath syntax. This is configured in the channel's Incoming Value Transformations setting.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/things_advanced.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nJSONPATH:$.temperature\n```\n\n----------------------------------------\n\nTITLE: Example of Selection Element Usage\nDESCRIPTION: Demonstrates the usage of a Selection element for choosing TV channels, with mappings for different channel options.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nSelection item=LR_TV_Channel label=\"TV Channel\" mappings=[0=\"DasErste\", 1=\"BBC One\", 2=\"Cartoon Network\"]\n```\n\n----------------------------------------\n\nTITLE: Defining System-wide Channel Type in XML\nDESCRIPTION: Example demonstrating how to define and reference a system-wide channel type that can be used across different bindings.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<thing-type id=\"thing-type-id\">\n    <label>Sample Thing</label>\n    <description>Some sample description</description>\n    <channels>\n        <channel id=\"s\" typeId=\"system.system-channel\" />\n    </channels>\n</thing-type>\n<channel-type id=\"system-channel\" system=\"true\">\n    <item-type>Number</item-type>\n    <label>System Channel</label>\n    <category>QualityOfService</category>\n</channel-type>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Basic Component with Item Binding in YAML\nDESCRIPTION: Example of configuring an oh-toggle component with an item binding using the config section in YAML.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- component: oh-toggle\n  config:\n    item: mySwitchItem\n```\n\n----------------------------------------\n\nTITLE: Defining OpenHAB Module Types in JSON\nDESCRIPTION: JSON configuration that defines custom automation module types including triggers, conditions, and actions for temperature control and presence detection. Includes configuration descriptions and input/output parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/module-types/index.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"triggers\":[\n      {\n         \"uid\":\"TemperatureTriggerType\",\n         \"label\":\"Temperature Trigger\",\n         \"description\":\"This triggers when the temperature has reached a certain value\",\n         \"configDescriptions\":[\n            {\n               \"name\":\"temperature\",\n               \"type\":\"INTEGER\",\n               \"label\":\"Temperature\",\n               \"description\":\"Trigger temperature\",\n               \"required\":true\n            },\n            {\n               \"name\":\"operator\",\n               \"type\":\"TEXT\",\n               \"label\":\"Operator\",\n               \"description\":\"Below/Above temperature\",\n               \"required\":true,\n               \"default\": \"above\"\n            }\n         ],\n         \"outputs\":[\n            {\n               \"name\":\"temperature\",\n               \"type\":\"java.lang.Integer\",\n               \"label\":\"Current Temperature\",\n               \"description\":\"Indicates the current room temperature\"\n            }\n         ]\n      }\n   ],\n   \"conditions\":[\n      {\n         \"uid\":\"PresenceConditionType\",\n         \"label\":\"Presence Condition\",\n         \"description\":\"This condition is satisfied when the configure presence item is in ON state\",\n         \"configDescriptions\":[\n            {\n               \"name\":\"presence\",\n               \"type\":\"TEXT\",\n               \"label\":\"Presence item\",\n               \"description\":\"The item that decides if this condition is satisfied\",\n               \"required\":true\n            }\n         ],\n         \"outputs\":[\n            {\n               \"name\":\"presence\",\n               \"type\":\"State\",\n               \"label\":\"Output value\",\n               \"description\":\"Indicates the state of the presence detector via an ON or OFF\"\n            }\n         ]\n      }\n   ],\n   \"actions\":[\n      {\n         \"uid\":\"AirConditionerActionType\",\n         \"label\":\"Switch an air conditioner\",\n         \"description\":\"Control an air conditioner. Depending on the configuration and inputs it is switched into different power levels\",\n         \"configDescriptions\":[\n            {\n               \"name\":\"level1_min_temp\",\n               \"type\":\"INTEGER\",\n               \"label\":\"Temperature for level 1\",\n               \"description\":\"Level 1 on the given temperature in Celsius\",\n               \"required\":true\n            },\n            {\n               \"name\":\"level2_min_temp\",\n               \"type\":\"INTEGER\",\n               \"label\":\"Temperature for level 2\",\n               \"description\":\"Level 2 on the given temperature in Celsius\",\n               \"required\":true\n            }\n         ],\n         \"inputs\":[\n            {\n               \"name\":\"temperature\",\n               \"type\":\"java.lang.Integer\",\n               \"label\":\"Current Temperature\",\n               \"description\":\"Depending on this temperature input the AC will turn on\"\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Timer with JS-Joda in JavaScript\nDESCRIPTION: This code creates a timer using the JS-Joda library to turn off the light after 30 minutes. It uses the ScriptExecution.createTimer() method to schedule the lightsOut function.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/rules_advanced.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.info('Motion was detected');\nitems.getItem('FrontPorchLight').sendCommand('ON');\nvar lightsOut = function() {\n  console.info('No more motion, turning off the light');\n  items.getItem('FrontPorchLight').sendCommand('OFF');\n};\nactions.ScriptExecution.createTimer(time.ZonedDateTime.now().plusMinutes(30), lightsOut);\n```\n\n----------------------------------------\n\nTITLE: Creating HSB Color from RGB in Blockly\nDESCRIPTION: This block converts a hexadecimal RGB color code into an HSB (Hue-Saturation-Brightness) string, which is required for sending color commands to openHAB items.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-standard-ext.md#2025-04-09_snippet_3\n\nLANGUAGE: blockly\nCODE:\n```\n![get-hsb-of](../images/blockly/blockly-colors-hsbof.png)\n```\n\n----------------------------------------\n\nTITLE: Nested Element Blocks in openHAB Sitemap\nDESCRIPTION: This snippet demonstrates how to create nested UI elements in a sitemap. When a Text element contains a block of elements, it functions as a link to a new view showing those nested elements.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nText item=LR_Multimedia_Summary label=\"Multimedia [%s]\" staticIcon=\"video\" {\n    Selection item=LR_TV_Channel mappings=[0=\"off\", 1=\"DasErste\", 2=\"BBC One\", 3=\"Cartoon Network\"]\n    Slider item=LR_TV_Volume\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Bank Holidays in XML\nDESCRIPTION: This XML snippet shows how to define custom bank holidays or important dates for use with Ephemeris, including fixed dates and recurring events.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<tns:Configuration hierarchy=\"us\" description=\"United States\"\n    xmlns:tns=\"https://www.example.org/Holiday\" xmlns:xsi=\"https://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"https://www.example.org/Holiday /Holiday.xsd\">\n    <tns:Holidays>\n        <tns:Fixed month=\"MARCH\" day=\"20\" descriptionPropertiesKey=\"Rich Birthday\" />\n        <tns:Fixed month=\"MARCH\" day=\"27\" descriptionPropertiesKey=\"Son's Birthday\" />\n        <tns:Fixed month=\"JUNE\" day=\"12\" descriptionPropertiesKey=\"Wife's Birthday\" />\n        <tns:Fixed month=\"DECEMBER\" day=\"27\" descriptionPropertiesKey=\"Anniversary\" />\n        <tns:FixedWeekday which=\"FIRST\" weekday=\"TUESDAY\" month=\"NOVEMBER\" descriptionPropertiesKey=\"Election Day\"/>\n    </tns:Holidays>\n</tns:Configuration>\n```\n\n----------------------------------------\n\nTITLE: Defining Bitwise Operations in Blockly\nDESCRIPTION: This block allows computation of bitwise operations like AND, OR, XOR, and bit shifts between two quantities.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-standard-ext.md#2025-04-09_snippet_0\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-bitwise-operators](../images/blockly/blockly-bitwise-operators.png)\n```\n\n----------------------------------------\n\nTITLE: Timer with Do Nothing on Retrigger\nDESCRIPTION: Shows timer implementation with empty handling for retrigger events.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-timers-and-delays.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (cache.private.exists('MyTimer') === false || cache.private.get('MyTimer').hasTerminated()) {\n  cache.private.put('MyTimer', actions.ScriptExecution.createTimer('MyTimer', time.ZonedDateTime.now().plusSeconds(10), function () {\n    cache.private.remove('MyTimer');\n  }));\n} else {\n  // do nothing\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Password File for openHAB Authentication on Synology\nDESCRIPTION: Command to create a password file in the openHAB userdata directory using htpasswd utility. This generates credentials that will be used for HTTP authentication when accessing openHAB remotely.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nhtpasswd -c /volume1/openHAB/userdata/.htpasswd username\n```\n\n----------------------------------------\n\nTITLE: Basic Sitemap Definition in openHAB\nDESCRIPTION: This snippet demonstrates a typical sitemap definition including frames, switches, text elements, and nested elements. It shows how to structure a complete sitemap with different UI components.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nsitemap demo label=\"My home automation\" {\n    Frame label=\"Date\" {\n        Text item=Date\n    }\n    Frame label=\"Demo\" {\n        Switch item=Lights icon=\"light\"\n        Text item=LR_Temperature label=\"Livingroom [%.1f Â°C]\"\n        Group item=Heating\n        Text item=LR_Multimedia_Summary label=\"Multimedia [%s]\" staticIcon=\"video\" {\n            Selection item=LR_TV_Channel mappings=[0=\"off\", 1=\"DasErste\", 2=\"BBC One\", 3=\"Cartoon Network\"]\n            Slider item=LR_TV_Volume\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Actions with Headers in openHAB Rules\nDESCRIPTION: Example demonstrating how to send an HTTP GET request with custom headers and a timeout value, then capturing the response in a variable.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/actions.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nval headers = newHashMap(\"Cache-control\" -> \"no-cache\")\nval output = sendHttpGetRequest(\"https://example.com/?id=1\", headers, 1000)\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Type in XML for openHAB Thing Type\nDESCRIPTION: This XML snippet demonstrates how to change the channel-type for the 'battery-level' channel to 'system:battery-level' in a Thing type update instruction. It uses the update-descriptions schema to define the update process.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_21\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<update:update-descriptions xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                            xmlns:update=\"https://openhab.org/schemas/update-description/v1.0.0\"\n                            xsi:schemaLocation=\"https://openhab.org/schemas/update-description/v1.0.0 https://openhab.org/schemas/update-description-1.0.0.xsd\">\n\n  <thing-type uid=\"deconz:batterysensor\">\n    <instruction-set targetVersion=\"1\">\n      <update-channel id=\"battery-level\">\n        <type>system:battery-level</type>\n      </update-channel>\n    </instruction-set>\n  </thing-type>\n\n</update:update-descriptions>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for Documentation Page\nDESCRIPTION: YAML front matter defining the layout and title of the documentation page\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/things_intermediate.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: documentation\ntitle:  Adding Things - Intermediate\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Thing Type with Version Property in XML for openHAB\nDESCRIPTION: This XML snippet illustrates how to define a Thing type with a 'thingTypeVersion' property. This property is used to prevent newly created things from being modified by update instructions intended for older versions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/thing-xml.md#2025-04-09_snippet_23\n\nLANGUAGE: XML\nCODE:\n```\n<thing-type id=\"batterysensor\">\n  <supported-bridge-type-refs>\n    <bridge-type-ref id=\"deconz\"/>\n  </supported-bridge-type-refs>\n  <label>Battery Sensor</label>\n  <channels>\n    <channel typeId=\"system.battery-level\" id=\"battery-level\"/>\n    <channel typeId=\"last-updated\" id=\"last-updated\"/>\n  </channels>\n  <properties>\n    <property name=\"thingTypeVersion\">1</property>\n  </properties>\n  <representation-property>uid</representation-property>\n  <config-description-ref uri=\"thing-type:deconz:sensor\"/>\n</thing-type>\n```\n\n----------------------------------------\n\nTITLE: Complex HTTP GET Request with Query Parameters in Blockly\nDESCRIPTION: Shows how to send an HTTP GET request with additional options like timeout, headers, and query parameters using a Dictionary.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-http.md#2025-04-09_snippet_1\n\nLANGUAGE: blockly\nCODE:\n```\n![http-get-complex](../images/blockly/blockly-http-get-complex.png)\n```\n\n----------------------------------------\n\nTITLE: Applying Code Formatting with Maven Spotless\nDESCRIPTION: This command applies code formatting rules using the Maven Spotless plugin. It helps in fixing formatting errors reported by the static code analysis tools.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/index.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmvn spotless:apply\n```\n\n----------------------------------------\n\nTITLE: Example of addons.cfg Configuration File\nDESCRIPTION: Example content of the addons.cfg configuration file. This file is used to specify which add-ons should be installed in openHAB.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/addons.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nui = basic,habpanel\naction = pushover\nbinding = astro\ntransformation = jsonpath\npersistence = influxdb\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Rule using JavaScript\nDESCRIPTION: JavaScript implementation of a movie scene rule using the OpenHAB JS library. Creates a rule that commands multiple items when MovieScene is turned ON.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rules, triggers, items } = require('openhab');\n\nrules.JSRule({\n  name: 'Movie Scene',\n  description: 'A Scene Rule',\n  triggers: [\n    triggers.ItemCommandTrigger('MovieScene', 'ON') // Triggers when Item MovieScene is commanded ON\n  ],\n  execute: (event) => {\n      items.getItem('LivingRoom_Blinds').sendCommand('90%');\n      items.getItem('LivingRoom_MainLight').sendCommand('OFF');\n      items.getItem('LivingRoom_LEDStripe').sendCommand('50%');\n      items.getItem('Soundbar').sendCommand('ON');\n      items.getItem('TV').sendCommand('ON');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Java Security Error for EC KeyPairGenerator\nDESCRIPTION: This error message indicates that the system is likely using OpenJDK instead of Oracle Java, which is required for openHAB due to its use of Elliptic Curve cryptography.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_6\n\nLANGUAGE: text\nCODE:\n```\njava.security.NoSuchAlgorithmException: EC KeyPairGenerator not available\n```\n\n----------------------------------------\n\nTITLE: NGINX SSL Security Configuration\nDESCRIPTION: Enhanced NGINX SSL configuration including protocol selection, cipher preferences, session handling, and keepalive settings. Implements strong security practices for HTTPS connections.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/reverse-proxy.md#2025-04-09_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n    ssl_protocols                   TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers       on;\n    ssl_dhparam                     /etc/nginx/ssl/dhparam.pem;\n    ssl_ciphers                     ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!CBC:!EDH:!kEDH:!PSK:!SRP:!kECDH;\n    ssl_session_timeout             1d;\n    ssl_session_cache               shared:SSL:10m;\n    keepalive_timeout               70;\n```\n\n----------------------------------------\n\nTITLE: DateTime Item Conversions\nDESCRIPTION: Examples of converting between DateTimeType, epoch timestamps, and Java ZonedDateTime.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\n// Get epoch from DateTimeType\nval Number epoch = (MyDateTimeItem.state as DateTimeType).instant.toEpochMilli\n\n// Get epoch from Java ZonedDateTime\nval Number nowEpoch = now.toInstant.toEpochMilli\n\n// Convert DateTimeType to Java ZonedDateTime\nval javaZonedDateTime = (MyDateTimeItem.state as DateTimeType).getZonedDateTime(ZoneId.systemDefault)\n\n// Convert Java ZonedDateTime to DateTimeType\nval DateTimeType date = new DateTimeType(now)\n```\n\n----------------------------------------\n\nTITLE: Stopping a Bundle in openHAB Console\nDESCRIPTION: This command demonstrates how to stop a specific bundle using its ID. The example shows stopping the Network Binding bundle and verifying its new state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/bundles.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nopenhab> bundle:stop 209\nopenhab> bundle:list\n...\n209 | Resolved |  80 | 3.0.0                 | openHAB Add-ons :: Bundles :: Network Binding\n```\n\n----------------------------------------\n\nTITLE: Configuring Samba Shares for Package-based openHAB Installation (INI)\nDESCRIPTION: Samba configuration for sharing openHAB directories in a package-based installation. This includes userdata, configuration, and log directories.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_43\n\nLANGUAGE: ini\nCODE:\n```\n[openHAB-userdata]\n  comment=openHAB userdata\n  path=/var/lib/openhab\n  browseable=Yes\n  writeable=Yes\n  only guest=no\n  public=no\n  create mask=0777\n  directory mask=0777\n\n[openHAB-conf]\n  comment=openHAB site configuration\n  path=/etc/openhab\n  browseable=Yes\n  writeable=Yes\n  only guest=no\n  public=no\n  create mask=0777\n  directory mask=0777\n\n[openHAB-logs]\n  comment=openHAB logs\n  path=/var/log/openhab\n  browseable=Yes\n  writeable=Yes\n  only guest=no\n  public=no\n  create mask=0777\n  directory mask=0777\n```\n\n----------------------------------------\n\nTITLE: Date Manipulation with Dayjs in Widget Expressions\nDESCRIPTION: Expression that subtracts one week from a DateTime Item state and formats it as a relative time string in the current locale.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n=dayjs(items.DateItem.state).subtract(1, 'week').fromNow()\n```\n\n----------------------------------------\n\nTITLE: Playing Music on Arrival (Ruby)\nDESCRIPTION: This Ruby snippet defines a rule that plays music when someone arrives home between 1 PM and 6 PM. It uses a presence trigger and a time condition.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrule \"Play music on arrival, but only on afternoon\" do\n  received_command Presence, command: ON\n  only_if { LocalTime.now.between? \"1pm\"..\"6pm\" }\n  run { Soundbar.on }\nend\n```\n\n----------------------------------------\n\nTITLE: Service Control Commands for sysVinit Systems\nDESCRIPTION: Essential commands for controlling the openHAB service on systems using sysVinit, including status check, start/stop, and enabling autostart.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n# Learn about the current service status\nsudo /etc/init.d/openhab status\n\n# (Re-)Start openHAB (background service)\nsudo /etc/init.d/openhab restart\n\n# Stop the openHAB background service\nsudo /etc/init.d/openhab stop\n\n# Make openHAB automatically start after booting the Linux host\nsudo update-rc.d openhab defaults\n```\n\n----------------------------------------\n\nTITLE: Getting Command Help in OpenHAB CLI\nDESCRIPTION: Shows how to get help information for a specific command using the help command\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/runtime.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nopenhab> help openhab:send\nUsage: openhab:send <item> <command> - sends a command for an item\n```\n\n----------------------------------------\n\nTITLE: Registering ThingActions in ThingHandler\nDESCRIPTION: Implementation of the getServices method in a ThingHandler to register the ThingActions class with the framework.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npublic class MyThingHandler extends BaseThingHandler {\n    ...\n    @Override\n    public Collection<Class<? extends ThingHandlerService>> getServices() {\n        return List.of(MQTTActions.class);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying openHAB Logo in HTML\nDESCRIPTION: HTML code to display the openHAB logo as an SVG image with specific dimensions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/introduction.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/openhab-logo-square.svg\" width=\"150\" height=\"150\" class=\"intro-logo\" />\n```\n\n----------------------------------------\n\nTITLE: Using Transformations in OpenHAB Rules (Java)\nDESCRIPTION: Examples of using transformation services in rules to convert data. Shows different transformation types including MAP, JSONPATH, and JS with both the safe transform() method and exception-throwing transformRaw() method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_30\n\nLANGUAGE: java\nCODE:\n```\ntransform(\"<transformation-identifier>\", \"<transf. expression or transf. file name>\", <input-data or variable>)\n```\n\nLANGUAGE: java\nCODE:\n```\nvar condition = transform(\"MAP\", \"window_esp.map\", \"CLOSED\")\nvar temperature = transform(\"JSONPATH\", \"$.temperature\", jsonstring)\nvar fahrenheit = transform(\"JS\", \"convert-C-to-F.js\", temperature)\nvar doorstate = transform(\"MAP\", \"garage.map\", GarageStateDoor1.state.toString) // must be type string\n```\n\nLANGUAGE: java\nCODE:\n```\ntransformRaw(\"<transformation-identifier>\", \"<transf. expression or transf. file name>\", <input-data or variable>)\n```\n\nLANGUAGE: java\nCODE:\n```\ntry {\n    var temperature = transformRaw(\"JSONPATH\", \"$.temperature\", jsonstring)\n}\ncatch(TransformationException e) {\n    logError(\"Error\", \"Some bad stuff happened in my rule: \" + e.getMessage)\n}\nfinally {\n    // always runs even if there was an error, good place for cleanup\n}\n```\n\n----------------------------------------\n\nTITLE: Linking ZWave Switch with Alexa Metadata in openHAB\nDESCRIPTION: This snippet shows how to define a Switch Item linked to a ZWave channel and include Alexa metadata for voice control integration. It demonstrates the syntax for combining channel linking and metadata in a single Item definition.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/items.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSwitch LightSwitch \"Light Switch\" {channel=\"zwave:device:22c99d1e:node3:switch_binary\", alexa=\"PowerController.powerState\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Powershell Terminal in VSCode for openHAB Development\nDESCRIPTION: VSCode configuration to use PowerShell as the default terminal on Windows systems when working with openHAB bundles. This setting is added to settings.json either globally or locally in a bundle's .vscode directory.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/ide/vscode.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"terminal.integrated.automationShell.windows\": \"C:\\\\Windows\\\\sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\"\n```\n\n----------------------------------------\n\nTITLE: Updating Channel State in openHAB Thing Handler\nDESCRIPTION: Demonstrates how to update the state of a channel in a Thing Handler using the updateState method.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nupdateState(\"channelId\", OnOffType.ON)\n```\n\n----------------------------------------\n\nTITLE: Importing Java Classes in Rules DSL\nDESCRIPTION: Example of how to import external Java classes to use in openHAB rules. The Rules DSL automatically imports several core packages, but additional imports may be required for specialized functionality.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport java.net.URI\n```\n\n----------------------------------------\n\nTITLE: Item-Based Trigger Syntax in Rules DSL\nDESCRIPTION: Syntax for item-based triggers in Rules DSL that react to commands, updates, or state changes for specific items. Optional parameters allow for filtering by specific commands or states.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nItem <item> received command [<command>]\nItem <item> received update [<state>]\nItem <item> changed [from <state>] [to <state>]\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for Transformation Settings Page\nDESCRIPTION: YAML front matter that defines the layout and title for the documentation page.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/mainui/settings/transformations.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: documentation\ntitle: Settings - Transformations\n---\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operators for Multiple Conditions in Widget Expressions\nDESCRIPTION: Example showing how to use nested ternary operators to set a component's background color based on an HVAC mode Item with multiple possible states.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/widget-expressions-variables.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nbackground: =(@@hvacModeItem == 'heat')?'orange':(@@hvacModeItem == 'cool')?'blue':(@@hvacModeItem == 'auto')?'green':(@@hvacModeItem == 'off')?'white':'red'\n```\n\n----------------------------------------\n\nTITLE: File Search Order Pattern\nDESCRIPTION: Shows the hierarchical search order for internationalization property files, from most specific to least specific locale.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/utils/i18n.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nany_<language-code>_<country-code>.properties\nany_<language-code>.properties\nany.properties\n```\n\n----------------------------------------\n\nTITLE: Executing Text-to-Speech Commands in Java Rules\nDESCRIPTION: Examples of using the say() function to execute Text-to-Speech commands within DSL rules in openHAB. Shows various overloads for specifying text, voice, volume, and audio sink.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/multimedia.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nsay(\"Hello world!\")\nsay(\"Hello world!\", new PercentType(25))\nsay(\"Hello world!\", \"voicerss:enGB\")\nsay(\"Hello world!\", \"voicerss:enGB\", new PercentType(25))\nsay(\"Hello world!\", \"voicerss:enUS\", \"sonos:PLAY5:kitchen\")\nsay(\"Hello world!\", \"voicerss:enUS\", \"sonos:PLAY5:kitchen\", new PercentType(25))\n```\n\n----------------------------------------\n\nTITLE: Installing openHAB Add-ons on apt-based Systems\nDESCRIPTION: Command to install the openHAB add-ons package on apt-based systems. This is useful for systems that will be disconnected from the internet, as it pre-installs all add-ons locally.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install openhab-addons\n```\n\n----------------------------------------\n\nTITLE: ThingTypeProvider Interface Reference - Java\nDESCRIPTION: Interface reference for implementing custom ThingTypeProvider to programmatically provide thing descriptions as an alternative to XML files.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/addons/faq.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\norg.openhab.core.thing.binding.ThingTypeProvider\n```\n\n----------------------------------------\n\nTITLE: Upgrading openHAB on Yum/Dnf-Based Systems\nDESCRIPTION: Commands for upgrading openHAB on RPM-based systems using yum or dnf, including checking available versions and installing specific versions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/linux.md#2025-04-09_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nsudo yum upgrade\n\n# To list installed version\nrpm -q openhab\n\n# To install a specific version\nsudo yum install openhab-3.0.0-1\n```\n\n----------------------------------------\n\nTITLE: Retrieving openHAB User ID for Docker Configuration\nDESCRIPTION: Command to get the user ID of the openHAB user, which is needed for Docker container configuration. This ensures proper permissions mapping inside the container.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo id openhab\n```\n\n----------------------------------------\n\nTITLE: Text Element Example in openHAB Sitemap\nDESCRIPTION: Example of a Text element showing temperature data with one decimal place precision and the Celsius unit, using a static temperature icon.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nText item=Temperature label=\"Livingroom [%.1f Â°C]\" staticIcon=temperature\n```\n\n----------------------------------------\n\nTITLE: Processing Group Members in Blockly\nDESCRIPTION: This snippet demonstrates how to get members of a group, log them, and send a command to each member using a loop in Blockly.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-items-things.md#2025-04-09_snippet_3\n\nLANGUAGE: blockly\nCODE:\n```\n![blockly-getMembersExample](../images/blockly/blockly-getMembersExample.png)\n```\n\n----------------------------------------\n\nTITLE: Creating Discovery Result with Representation Property\nDESCRIPTION: Example showing how to create a discovery result with a representation property and bridge association for unique thing identification.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nDiscoveryResult result = DiscoveryResultBuilder.create(thingUID)\n  .withProperty(\"uniqueId\", nonUniquePropertyValue)\n  .withBridge(bridgeUID) // bridgeUID plus nonUniquePropertyValue are unique\n  .withRepresentationProperty(\"uniqueId\")\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Dynamic Icon Filename Pattern in openHAB\nDESCRIPTION: Pattern definition for dynamic icon filenames that change based on item states. Shows the structure combining icon name, state, and file extension.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/items.md#2025-04-09_snippet_7\n\nLANGUAGE: perl\nCODE:\n```\n<name>-<state>.<extension>\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Device Permissions in Docker Container (Windows)\nDESCRIPTION: Windows command to set read/write permissions for a USB device in the openHAB Docker container, allowing access to Z-Wave or ZigBee network sticks.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec ^\n    -d ^\n    openhab ^\n    /bin/chmod o+rw /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: HTML Rendering of Content Component\nDESCRIPTION: Shows the resulting HTML output when using the Content component, which renders text directly without a container element.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/personal-widgets.md#2025-04-09_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"row fancy-row\">Content text here</div>\n```\n\n----------------------------------------\n\nTITLE: Starting a Bundle in openHAB Console\nDESCRIPTION: This command shows how to start a specific bundle using its ID. The example demonstrates starting the Network Binding bundle and confirming its active state.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/bundles.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nopenhab> bundle:start 209\nopenhab> bundle:list\n...\n209 | Active   |  80 | 3.0.0                 | openHAB Add-ons :: Bundles :: Network Binding\n```\n\n----------------------------------------\n\nTITLE: Playing Music on Arrival (JavaScript)\nDESCRIPTION: This JavaScript snippet defines a rule that plays music when someone arrives home between 1 PM and 6 PM. It uses a presence trigger and checks the current time.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst { rules, triggers, items, time } = require('openhab');\n\nrules.JSRule({\n  name: 'Play music on arrival, but only on afternoon',\n  description: 'When you return home, and it is between 1 PM and 6 PM, play your favorite music',\n  triggers: [\n    triggers.ItemCommandTrigger('Presence', 'ON') // Triggers when Item Presence is commanded ON\n  ],\n  execute: (event) => {\n      if (time.toZDT().isBetweenTimes('1:00 PM', '6:00 PM')) {\n          items.getItem('Soundbar').sendCommand('ON');\n      }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Log Output in openHAB Console\nDESCRIPTION: This snippet shows how to apply filters to the log:tail command in the openHAB console. It filters logs to only show entries from the ItemResource class.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/administration/logging.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopenhab> log:tail org.openhab.io.rest.core.item.ItemResource\n20:36:52.879 [DEBUG] [thome.io.rest.core.item.ItemResource] - Received HTTP POST request at 'items/Light_FF_Bath_Ceiling' with value 'ON'.\n20:36:53.545 [DEBUG] [thome.io.rest.core.item.ItemResource] - Received HTTP POST request at 'items/Light_FF_Bath_Ceiling' with value 'OFF'.\n```\n\n----------------------------------------\n\nTITLE: Defining Button Element in openHAB Sitemap\nDESCRIPTION: Defines a Button element to be used as a child of a Buttongrid element. It allows for stateful or stateless behavior and click or press & release actions.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/sitemaps.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nButton item=<itemname> [label=\"<labelname>\"] [icon=<iconref>] [staticIcon=<iconref>] row=<row> column=<column> [stateless] click=<cmd> [release=<cmd>]\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Custom CSS Variables in YAML\nDESCRIPTION: This snippet illustrates how to define a custom CSS variable and use it in nested components within a YAML configuration.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/css-pages-widgets.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  style:\n    --my-color: =props.color\nslots:\n  ...\n     ...\n        ...\n           config:\n             style:\n               background-color: var(--my-color)\n```\n\n----------------------------------------\n\nTITLE: Setting USB Device Permissions Inside Docker Container\nDESCRIPTION: Commands to set proper permissions for a Z-Wave USB device inside the openHAB Docker container. These are executed from within the container to ensure the openHAB application can access the USB device.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nroot@openhab:/openhab# chown openhab:openhab /dev/ttyACM0\nroot@openhab:/openhab# chmod o+rw /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Ignore for Inbox in YAML Configuration\nDESCRIPTION: This YAML configuration disables the auto-ignore feature for duplicate discovery results in the inbox by setting the autoIgnore property to false.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/discovery.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\norg.openhab.inbox:autoIgnore=false\n```\n\n----------------------------------------\n\nTITLE: Using CSS calc() for Dynamic Styling\nDESCRIPTION: This CSS snippet demonstrates how to use the calc() function to dynamically set an element's height based on viewport height and other CSS variables.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/ui/css-pages-widgets.md#2025-04-09_snippet_3\n\nLANGUAGE: css\nCODE:\n```\ncalc(96vh - var(--f7-navbar-height) - var(--f7-toolbar-height))\n```\n\n----------------------------------------\n\nTITLE: Inline JavaScript Transformation Example\nDESCRIPTION: Shows how to use an inline JavaScript transformation that calculates string length without creating a separate file.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/transformations.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nJS(|\"String has \" + input.length + \" characters\")\n```\n\n----------------------------------------\n\nTITLE: Creating Scene Rule using OpenHAB DSL\nDESCRIPTION: DSL implementation of a movie scene rule that triggers multiple item commands when MovieScene receives ON command. Uses OpenHAB's domain-specific language syntax.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/concepts/rules.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nrule \"Movie Scene\"\nwhen\n  Item MovieScene received command ON\nthen\n  LivingRoom_Blinds.sendCommand(90%)\n  LivingRoom_MainLight.sendCommand(OFF)\n  LivingRoom_LEDStripe.sendCommand(50%)\n  Soundbar.sendCommand(ON)\n  TV.sendCommand(ON)\nend\n```\n\n----------------------------------------\n\nTITLE: Creating OpenHAB System User - Linux Bash\nDESCRIPTION: Commands to create a system user 'openhab' with no shell access and add it to the openhab group.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd -r -s /sbin/nologin openhab\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -a -G openhab openhab\n```\n\n----------------------------------------\n\nTITLE: Java Generics Example in openHAB Development\nDESCRIPTION: Example demonstrating the proper use of Java generics in openHAB code, which are required where applicable to ensure type safety and avoid runtime type errors.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/guidelines.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static <T> boolean isEqual(GenericsType<T> g1, GenericsType<T> g2){\n    return g1.get().equals(g2.get());\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Custom Light List Widget in openHAB\nDESCRIPTION: This YAML demonstrates a parameterized custom light list widget that uses properties to make the widget reusable. It accepts a title and item parameter, and updates the icon color and widget title dynamically based on these parameters.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/tutorials/getting_started/custom_widgets.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nuid: test_light_list\nprops:\n  parameterGroups: []\n  parameters:\n    - name: title\n      label: Widget Title\n      type: TEXT\n      description: Used as the label for the widget.\n    - name: item\n      label: Item\n      type: TEXT\n      context: item\n      description: The item to control\ntags:\n  - lights\n  - list\ncomponent: oh-toggle-item\nconfig:\n  icon: f7:lightbulb\n  iconColor: '=(items[props.item].state == \"ON\") ? \"yellow\" : \"gray\"'\n  title: =props.title\n  color: '=(items[props.item].state == \"ON\") ? \"yellow\" : \"gray\"'\n  item: =props.item\n```\n\n----------------------------------------\n\nTITLE: DateTime Formatting and Epoch Conversion\nDESCRIPTION: Shows how to format dates and convert between epoch timestamps and human-readable formats.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-dsl.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nimport java.time.format.DateTimeFormatter\n\n// Convert epoch to a human readable\nval DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\")\nval long epoch = now.toInstant.toEpochMilli\nval ZonedDateTime zdt = ZonedDateTime.ofInstant(Instant.ofEpochMilli(epoch), ZoneOffset.UTC);\nval String dateTimeString = zdt.format(formatter)\n\n// Convert human readable time stamp to DateTimeType\nval DateTimeType dtt = DateTimeType.valueOf(dateTimeString)\n\n//convert state from Item of DateTimeType into a string\nval String datetime_string  = DateTime_Item.state.format(\"%1$td.%1$tm.%1$ty %1$tH:%1$tM\")\n```\n\n----------------------------------------\n\nTITLE: Configuring USB Device Access for Z-Wave Dongle\nDESCRIPTION: Commands to set up proper permissions for a Z-Wave USB dongle on Synology DiskStation. This adds the openHAB user to the dialout group and configures access to the ttyACM0 device.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/synology.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo synogroup --add dialout openhab\nsudo chown root:dialout /dev/ttyACM0\nsudo chmod g+rw /dev/ttyACM0\n```\n\n----------------------------------------\n\nTITLE: Updating openHAB on Windows\nDESCRIPTION: This code snippet demonstrates how to update openHAB to version 3.0.0 on Windows systems using PowerShell. It includes changing to the openHAB root directory and running the update command.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/migration/index.md#2025-04-09_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\ncd C:\\openHAB\n. .\\runtime\\bin\\update.ps1\nUpdate-openHAB -OHVersion 3.0.0\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP DELETE Request with Blockly\nDESCRIPTION: Illustrates how to send a simple HTTP DELETE request using Blockly. The block accepts a destination URI as a string.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/blockly/rules-blockly-http.md#2025-04-09_snippet_5\n\nLANGUAGE: blockly\nCODE:\n```\n![http-delete-simple](../images/blockly/blockly-http-delete-simple.png)\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing openHAB Docker Container\nDESCRIPTION: Commands to stop and remove an existing openHAB Docker container before updating to a new version.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/installation/docker.md#2025-04-09_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker stop openhab\n```\n\n----------------------------------------\n\nTITLE: Action Module Types Definition\nDESCRIPTION: JSON definition of action module types including simple and composite actions with their configurations and input/output specifications.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/configuration/rules-ng.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"actions\":[\n      {\n         \"uid\":\"SampleAction\",\n         \"label\":\"SampleAction label\",\n         \"description\":\"Sample Action description.\",\n         \"configDescriptions\":[\n            {\n               \"name\":\"message\",\n               \"type\":\"TEXT\",\n               \"label\":\"message label\",\n               \"description\":\"Defines the message description.\",\n               \"defaultValue\":\"Default message\",\n               \"required\":false\n            }\n         ]\n      },\n      {\n         \"uid\":\"CompositeSampleAction\",\n         \"label\":\"CompositeAction label\",\n         \"description\":\"Composite Action description.\",\n         \"configDescriptions\":[\n            {\n               \"name\":\"compositeMessage\",\n               \"type\":\"TEXT\",\n               \"label\":\"custom message label\",\n               \"description\":\"Defines the custom message description.\",\n               \"defaultValue\":\">>> Default Custom Message\",\n               \"required\":false\n            }\n         ],\n         \"inputs\":[\n            {\n               \"name\":\"compositeActionInput\",\n               \"type\":\"java.lang.String\",\n               \"label\":\"ActionInput label\",\n               \"description\":\"Text that will be printed.\",\n               \"required\":true\n            }\n         ],\n         \"children\":[\n            {\n               \"id\":\"SampleAction1\",\n               \"type\":\"SampleAction\",\n               \"configuration\":{\n                  \"message\":\"$compositeMessage\"\n               }\n            },\n            {\n               \"id\":\"SampleAction2\",\n               \"type\":\"SampleAction\",\n               \"configuration\":{\n                  \"message\":\"$compositeActionInput\"\n               }\n            }\n         ]\n      }\n]\n```\n\n----------------------------------------\n\nTITLE: Delegating Commands from ThingHandler to BridgeHandler in openHAB\nDESCRIPTION: This example shows how a ThingHandler (for a Philips Hue light) delegates command execution to its BridgeHandler. It retrieves the bridge handler, processes different channel commands, and forwards the actual state update to the bridge handler to manage the communication.\nSOURCE: https://github.com/openhab/openhab-docs/blob/main/developers/bindings/index.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\n@Override\npublic void handleCommand(ChannelUID channelUID, Command command) {\n\n    HueBridgeHandler hueBridgeHandler = (HueBridgeHandler) getBridge().getHandler();\n\n    switch (channelUID.getId()) {\n        case CHANNEL_ID_COLOR_TEMPERATURE:\n            StateUpdate lightState = lightStateConverter.toColorLightState(command);\n            hueBridgeHandler.updateLightState(getLight(), lightState);\n            break;\n        case CHANNEL_ID_COLOR:\n            // ...\n    }\n}\n```"
  }
]