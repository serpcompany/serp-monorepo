[
  {
    "owner": "chanzuckerberg",
    "repo": "cellxgene",
    "content": "TITLE: Installing CELLxGENE Annotate with pip\nDESCRIPTION: Command to install the CELLxGENE Annotate package using pip. Requires Python 3.10+ and is recommended to be installed in a conda or virtual environment.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install cellxgene\n```\n\n----------------------------------------\n\nTITLE: Launching CELLxGENE Annotate with an example dataset\nDESCRIPTION: Command to start CELLxGENE Annotate with an example anndata file hosted online. This demonstrates how to view a pre-formatted dataset.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncellxgene launch https://cellxgene-example-data.czi.technology/pbmc3k.h5ad\n```\n\n----------------------------------------\n\nTITLE: Active API Routes for CellXGene Front-End\nDESCRIPTION: Lists the currently used HTTP routes by the CellXGene web front-end, including GET and POST/PUT endpoints for retrieving configuration, schema, annotations, layouts, and performing data operations.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n- `GET /config`\n- `GET /schema`\n- `GET /annotations/obs`\n- `GET /annotations/var`\n- `GET /layout/obs` - get the default layout\n- `PUT /data/obs` - request will contain a filter by var `name`\n- `POST /diffexp/obs` - mode `topN`, typically with a `count` of 10, and two sets defined by an obs index filter (`{ filter: { obs: { index: [...] } } }`)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Information with GET /config\nDESCRIPTION: This endpoint provides configuration information to help front-end adaptation to the underlying engine, including available features, limitations, and display names. The response indicates which features are available and their interactive limits.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nGET /config\n--\n200\n{\n  \"config\": {\n    \"features\": [\n      // all /cluster/* paths not implemented\n      { \"method\": \"POST\", \"path\": \"/cluster/\", \"available\": false },\n      {\n        \"method\": \"PUT\",\n        \"path\": \"/layout/obs\",\n        \"available\": true,\n        \"interactiveLimit\": 10000\n      },\n      { \"method\": \"PUT\", \"path\": \"/layout/var\", \"available\": false }\n    ],\n    \"displayNames\": {\n      \"engine\": \"ScanPy version 1.33\",\n      \"dataset\": \"/home/joe/mouse/blorth.csv\"\n    },\n    \"parameters\": {\n      \"max-category-items\": 1000,\n      \"verbose\": false\n      // name: value\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Schema Definition with GET /schema\nDESCRIPTION: This endpoint provides the schema definition for the dataframe and annotations, including dimensionality, data types, and category definitions. The response includes the number of observations and variables, as well as metadata about the annotations.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nGET /schema\n--\n200\n{\n  \"schema\": {\n    \"dataframe\": {\n      \"nObs\": 383,\n      \"nVar\": 19944,\n      \"type\": \"float32\"\n    },\n    \"annotations\": {\n      \"obs\": [\n        { \"name\": \"name\", \"type\": \"string\" },\n        { \"name\": \"tissue_type\", \"type\": \"string\" },\n        { \"name\": \"num_reads\", \"type\": \"int32\" },\n        { \"name\": \"sample_name\", \"type\": \"string\" },\n        {\n          \"name\": \"clusters\",\n          \"type\": \"categorical\",\n          \"categories\"=[ 99, 1, \"unknown cluster\" ]\n        },\n        { \"name\": \"QScore\", \"type\": \"float32\" }\n      ],\n      \"var\": [\n        { \"name\": \"name\", \"type\": \"string\" },\n        { \"name\": \"gene\", \"type\": \"string\" }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Annotations with GET /annotations/obs\nDESCRIPTION: This endpoint fetches annotations (metadata) for all observations. It supports filtering to return only specific annotations by providing their names via URL query parameters. The response includes the annotation names and corresponding values for each observation.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nGET /annotations/obs?annotation-name=tissue_type&annotation-name=sex&annotation-name=num_reads&annotation-name=clusters\n--\n200\n{\n  \"names\": [\n    \"tissue_type\", \"sex\", \"num_reads\", \"clusters\"\n  ],\n  \"data\": [\n    [ 0, \"lung\", \"F\", 39844, 99 ],\n    [ 1, \"heart\", \"M\", 83, 1 ],\n    [ 49, \"spleen\", null, 2, \"unknown cluster\" ],\n    // [ obsOrVarIndex, value, value, value, value ],\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Expression Data with GET /data/obs\nDESCRIPTION: This endpoint retrieves data from the dataframe (expression values), organized by observations. It supports filtering by annotation values and can return data in JSON or CSV format. The response includes the variable indices and the corresponding expression values for each observation.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_7\n\nLANGUAGE: json\nCODE:\n```\nGET /data/obs?accept-type=application/json&obs:tissue=lung\n--\n200\n{\n  \"var\": [ [ 0, 20000 ] ],\n  \"obs\": [\n    [ 1, 39483, 3902, 203, 0, 0, ..., 28 ],   // length == 20001\n    // [ obsIndex, value1, value2, ..., value20000 ]\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Differential Expression Request/Response Example - JSON\nDESCRIPTION: Complete example of differential expression request and response showing filter specification and results format.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nPOST /diffexp/obs\n{\n  \"diffexp\": {\n    \"set1\": {\n      \"filter\": {\n        \"obs\": { \"index\": [ [0, 10000] ] }\n      }\n    },\n    \"set2\": {\n      \"filter\": {\n        \"obs\": { \"index\": [28448, 4, [88888, 99999] ] }\n      }\n    },\n    \"mode\": \"topN\",\n    \"count\": 5\n  }\n}\n---\n200 - Success\n{\n  \"diffexp\": [\n    [ 328, -2.569489, 2.655706e-63, 3.642036e-57 ]\n    // [ varIdx, logfoldchange, pVal, pValAdj ],\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running CellXGene with Tabula Muris Dataset\nDESCRIPTION: Command to load and display the Tabula Muris dataset with a custom title using the scanpy engine.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/Release_Validation_Recipe.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncellxgene --title 'T. Muris' scanpy directory-name/\n```\n\n----------------------------------------\n\nTITLE: Backend Development Script Usage\nDESCRIPTION: Command to run the backend development server with optional dataset specification and configuration options.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/developer_scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/backend_dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nDATASET=<dataset path> ./scripts/backend_dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nCXG_OPTIONS='--disable-annotations' ./scripts/backend_dev\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies for cellxgene Project\nDESCRIPTION: This code snippet enumerates the required Python packages and their minimum versions for the cellxgene project. It includes libraries for data analysis, web frameworks, cloud services, and scientific computing. Some packages have specific version requirements to ensure compatibility or address security concerns.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/server/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nanndata>=0.8.0\nboto3>=1.12.18\nclick>=7.1.2\nFlask>=3.0.0\nFlask-Compress>=1.4.0\nFlask-Cors>=3.0.9\nFlask-RESTful>=0.3.6\nflask-server-timing>=0.1.2\nflask-talisman>=0.7.0\nflatbuffers==2.0.7\nflatten-dict>=0.2.0\nfsspec>0.8.0\ngunicorn>=20.0.4\nh5py>=3.0.0\nnumba>=0.60.0\nnumpy==2.0.1\npackaging>=20.0\npandas>=2.2.2\nPyYAML>=5.4  # CVE-2020-14343\nrequests>=2.22.0\ns3fs==0.4.2\nscipy>=1.4\nsetuptools\n```\n\n----------------------------------------\n\nTITLE: POST/PUT Request Filter JSON Example\nDESCRIPTION: Shows how to structure a filter in the request body to select specific tissue types and read count thresholds using JSON format.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"obs\": {\n      \"annotation_value\": [\n        { \"name\": \"tissue\", \"values\": [\"lung\", \"heart\"] },\n        { \"name\": \"num_reads\", \"min\": 1000 },\n        { \"name\": \"tumor\", \"values\": true }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request URL Filter Example\nDESCRIPTION: Demonstrates how to filter data by tissue type and number of reads using GET request URL parameters.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /data?obs:tissue=lung&obs:tissue=heart&obs:num_reads=1000,*\n```\n\n----------------------------------------\n\nTITLE: System Parameters in CellXGene\nDESCRIPTION: Documents the configurable parameters used by the CellXGene system, including category limits, layout algorithm selection, and debug options.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n- `max-category-items` - if any categorical annotation has a unique value count exceeding\n  this parameter, it will not be displayed to the user. Number.\n- `layout` - algorithm to use for graph layout. String.\n- `diffexp` - algorithm to used to calculate differential expression. String.\n- `title` - data set name. String.\n- `debug` - run in debug mode. Boolean.\n- `verbose` - more verbose logging. Boolean.\n```\n\n----------------------------------------\n\nTITLE: Layout Response Structure - JSON\nDESCRIPTION: Response format for layout coordinates showing dimensionality and coordinate list for observations or variables.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"layout\": {\n    \"ndims\": 2,\n    \"coordinates\": [\n      [ 0, 0.284483, 0.983744 ],\n      [ 1, 0.038844, 0.739444 ]\n      // [ obsOrVarIndex, X_coord, Y_coord ],\n      // ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Differential Expression Mode Specification - JSON\nDESCRIPTION: Request body format for differential expression analysis specifying either topN or varFilter mode.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{ \"mode\": \"topN\", \"count\": N }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mode\": \"varFilter\",\n  \"varFilter\": {\n    \"filter\": {\n      \"var\": {\n        \"annotation_value\": [\n          { \"name\": \"gene\", \"values\": [ \"FOXP2\", \"ACTN1\" ] }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cluster Response Structure - JSON\nDESCRIPTION: Response format for successful cluster assignments showing index and cluster ID pairs.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cluster\": [\n    [ 0, 24 ]\n    // [ obsOrVarIndex, clusterID ],\n    // ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Differential Expression Set Filter - JSON\nDESCRIPTION: Example of complex filter structure for defining observation sets in differential expression analysis.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"set1\" {\n       \"filter\": {\n           \"obs\": {\n              \"annotation_value\": [\n                   { \"name\": \"tissue\", \"values\": [\"lung\", \"heart\"] },\n                   { \"name\": \"num_reads\", \"min\": 1000 },\n                   { \"name\": \"tumor\", \"values\": true }\n              ]\n           }\n       }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Backend Development Script Breakdown\nDESCRIPTION: Series of commands that illustrate how the backend development script works, including virtual environment creation, activation, and cellxgene installation and launch.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/developer_scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3.12 -m venv cellxgene\nsource cellxgene/bin/activate\nyes | pip uninstall cellxgene || true\npip install -e .\ncellxgene launch\n```\n\n----------------------------------------\n\nTITLE: Complex Filter JSON Example\nDESCRIPTION: Shows how to combine multiple filter types including annotation values and index ranges in a single request.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"filter\": {\n    \"obs\": {\n      \"annotation_value\": [\n        { \"name\": \"sex\", \"values\": [ \"F\" ] }\n      ],\n      \"index\": [\n        [0, 10000]\n      ]\n    },\n    \"var\": {\n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Index Filter JSON Example\nDESCRIPTION: Demonstrates how to filter observations by index ranges and specific values using JSON request body.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  filter: {\n    obs: {\n      index: [\n        1, 99, [1000, 2000]\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Save Selection Request/Response Example - JSON\nDESCRIPTION: Example of saving a filtered data selection with response indicating success.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nPOST /data/saveSelection?name=myFavCluster\n{\n  \"filter\": {\n    \"obs\": {\n      \"annotation_value\": [\n        { \"name\": \"cluster\", \"values\": [ \"99\" ] }\n      ],\n    }\n  }\n}\n--\n200 Success\n{\n  \"message\": \"OK\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Release Candidate Creation Command\nDESCRIPTION: Command that initializes requirements, bumps version, cleans build directories, and creates package-lock.json for the release candidate.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/release_process.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake create-release-candidate PART=[major | minor | patch]\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation Headers for CellXGene API\nDESCRIPTION: Specifies the HTTP content negotiation headers used in requests to the CellXGene API, indicating accepted content types and encoding formats.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n- `Accept: application/json` - CSV not currently used in any routes\n- `Accept-Encoding: gzip, deflate, br`\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for cellxgene\nDESCRIPTION: This requirements file lists the specific Python package dependencies needed for the cellxgene project. It includes version constraints for certain packages, such as limiting umap-learn to versions below 0.5.0 due to compatibility issues with scanpy.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/server/requirements-prepare.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-igraph>=0.8\nlouvain>=0.6\nscanpy\numap-learn<0.5.0 # The pinned version scanpy is not compatible with latest umap-learn\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Development Dependencies for cellxgene\nDESCRIPTION: This snippet lists Python packages required for development and testing of the cellxgene project. It includes version specifications for each package and references to additional requirements files.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/server/requirements-dev.txt#2025-04-16_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nblack\nbumpversion>=0.5\ncodecov>=2.0.15\nparameterized>=0.7.0\npytest>=3.6.3\npython-jose>=3.2.0\ntwine>=1.12.1\naiohttp>=3.9.1\n-r requirements.txt\n-r requirements-prepare.txt\n```\n\n----------------------------------------\n\nTITLE: Checking CellXGene Help Command\nDESCRIPTION: Command to verify the installation by displaying the help information.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/Release_Validation_Recipe.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncellxgene --help\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for MLflow and Scanpy\nDESCRIPTION: This requirements file specifies MLflow version 2.16.0 and Scanpy (unversioned) as package dependencies. These packages are commonly used for machine learning experiment tracking and single-cell genomics data analysis respectively.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/server/requirements-annotate.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmlflow==2.16.0\nscanpy\n```\n\n----------------------------------------\n\nTITLE: Unused API Routes in CellXGene\nDESCRIPTION: Lists routes that are defined in the API but not currently used by the CellXGene front-end application.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/REST_API.md#2025-04-16_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n- `/data/var`\n- `/cluster/*`\n- `/layout/var`\n- `/data/saveSelection`\n```\n\n----------------------------------------\n\nTITLE: Configuring Cellxgene Dockerfile\nDESCRIPTION: Dockerfile configuration for building Cellxgene container with local installation support\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/testing_environment_for_web_hosting.md#2025-04-16_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ubuntu:bionic\n\nENV LC_ALL=C.UTF-8\nENV LANG=C.UTF-8\nCOPY [ \"dist/\",    \"/cellxgene/dist/\" ]\n\nRUN apt-get update && \\\n    apt-get install -y build-essential libxml2-dev python3-dev python3-pip zlib1g-dev && \\\n    pip3 install /cellxgene/dist/cellxgene-0.5.1.tar.gz\n\nENTRYPOINT [\"cellxgene\"]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Containers\nDESCRIPTION: Commands to build and run the proxy and Cellxgene containers on the created network\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/testing_environment_for_web_hosting.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 80:80 --network cxg --name proxy proxy\ndocker run -v \"$PWD/example-dataset/:/data/\" --name cellxgene --network cxg cellxgene launch --host 0.0.0.0 data/pbmc3k.h5ad\n```\n\n----------------------------------------\n\nTITLE: Emergency Direct Production Release\nDESCRIPTION: Emergency command for direct deployment to production PyPI, bypassing the normal release pipeline. Includes building fresh distribution package and uploading directly to pypi.org. Should only be used when directed by troubleshooting guide.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/release_process.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nmake release-directly-to-prod\n```\n\n----------------------------------------\n\nTITLE: Release Pipeline Stage - Test PyPI Deployment\nDESCRIPTION: Command that prepares and deploys a release candidate to test.pypi.org. Includes cleaning build artifacts, installing dependencies, building both client and server components, and creating a distribution package.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/release_process.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nmake release-final-to-test-pypi\n```\n\n----------------------------------------\n\nTITLE: Release Pipeline Stage - Production PyPI Deployment\nDESCRIPTION: Command that handles the final deployment stage to pypi.org. Does not rebuild the distribution package but uploads existing artifacts to production PyPI.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/release_process.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nmake release-final\n```\n\n----------------------------------------\n\nTITLE: Test PyPI Upload Command\nDESCRIPTION: Command that handles installing requirements, building client and server, creating distribution release, and uploading to test.pypi.org.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/release_process.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake release-candidate-to-test-pypi\n```\n\n----------------------------------------\n\nTITLE: Release Candidate Recreation Command\nDESCRIPTION: Command for recreating a release candidate by installing requirements, bumping version number, cleaning directories, and generating package-lock.json.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/release_process.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake recreate-release-candidate\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Proxy Rules\nDESCRIPTION: Apache configuration file defining proxy rules for Cellxgene traffic routing\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/testing_environment_for_web_hosting.md#2025-04-16_snippet_3\n\nLANGUAGE: apache\nCODE:\n```\nProxyPass \"/data/\" http://cellxgene:5005/\nProxyPassReverse \"/data/\" http://cellxgene:5005/\n```\n\n----------------------------------------\n\nTITLE: Creating Apache Proxy Dockerfile\nDESCRIPTION: Dockerfile for setting up Apache reverse proxy container\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/testing_environment_for_web_hosting.md#2025-04-16_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM rgoyard/apache-proxy:latest\nADD proxy.conf /conf/\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Script for E2E Tests in JSON\nDESCRIPTION: This JSON snippet from package.json defines an npm script for running end-to-end tests. It specifies the Jest configuration file to use and the test file to execute.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/e2e_tests.md#2025-04-16_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"e2e\": \"jest --config __tests__/e2e/e2eJestConfig.json e2e/e2e.test.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Puppeteer for E2E Tests in JavaScript\nDESCRIPTION: This JavaScript file is responsible for configuring Jest, browser, and page objects at runtime for end-to-end testing. It sets up the necessary environment for Puppeteer to interact with the browser during tests.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/e2e_tests.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npuppeteer.setup.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for E2E Tests in JSON\nDESCRIPTION: This JSON configuration file is used to set up Jest specifically for running end-to-end tests. It determines which test files to run and what configuration to use for the e2e test suite.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/e2e_tests.md#2025-04-16_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\ne2eJestConfig.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Launch Options in JavaScript\nDESCRIPTION: This snippet shows the configuration file for Puppeteer's launch options. It specifies the location of the jest-puppeteer.config.js file which controls Puppeteer's behavior during test execution.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/e2e_tests.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\njest-puppeteer.config.js\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Network for Cellxgene\nDESCRIPTION: Creates a Docker network named 'cxg' for container communication\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/testing_environment_for_web_hosting.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create cxg\n```\n\n----------------------------------------\n\nTITLE: Referencing Server Requirements in CellxGene Project\nDESCRIPTION: This line specifies that the requirements for the CellxGene server should be read from a separate file located in the server directory. It uses the '-r' flag to indicate that the following path is a requirements file to be included.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/requirements.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r ./server/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Check Project Root Directory with Git\nDESCRIPTION: Command to determine the root directory of the project using git.\nSOURCE: https://github.com/chanzuckerberg/cellxgene/blob/main/dev_docs/developer_scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nPROJECT_ROOT=$(git rev-parse --show-toplevel); echo $PROJECT_ROOT\n```"
  }
]