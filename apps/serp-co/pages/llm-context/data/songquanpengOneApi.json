[
  {
    "owner": "songquanpeng",
    "repo": "one-api",
    "content": "TITLE: Setting OpenAI API Base and Key in Bash\nDESCRIPTION: This code snippet demonstrates how to set the `OPENAI_API_KEY` and `OPENAI_API_BASE` environment variables in a bash environment for use with OpenAI's official library.  The API Key is set to \"sk-xxxxxx\" and the API Base is set to a placeholder URL for a One API instance.  This configuration is required for the OpenAI library to correctly route requests through the One API.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=\"sk-xxxxxx\"\nOPENAI_API_BASE=\"https://<HOST>:<PORT>/v1\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: SQL Data Source Name\nDESCRIPTION: Specifies the database to be used instead of SQLite. It expects a MySQL database version 8.0. This example shows how to configure the data source name for MySQL including the username, password, host, port, and database name.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nSQL_DSN=root:123456@tcp(localhost:3306)/oneapi\n```\n\n----------------------------------------\n\nTITLE: Creating a Database for One API (MySQL)\nDESCRIPTION: This SQL statement is used to create the `one-api` database in MySQL. This database is required for the One API application to store its data. The application automatically creates the necessary tables within this database.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\ncreate database `one-api`\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment with SQLite\nDESCRIPTION: This command deploys One API using Docker with SQLite for data storage. It sets the container name, runs it in detached mode, restarts automatically, maps port 3000, sets the timezone, and mounts a volume for persistent data storage.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name one-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Command\nDESCRIPTION: This command deploys One API using Docker. It sets the container name, restarts policy, port mapping, timezone, and volume mapping for persistent data storage. Ensure the target directory for volume mapping exists and has write permissions.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name one-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api\n```\n\n----------------------------------------\n\nTITLE: Running React App in Development Mode\nDESCRIPTION: This command starts the React application in development mode, enabling features like hot-reloading and detailed error messages. It uses npm (Node Package Manager) to execute the start script defined in the package.json file.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/air/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment with MySQL\nDESCRIPTION: This command deploys One API using Docker with MySQL for data storage. It includes the necessary environment variable to connect to a MySQL database. The SQL_DSN environment variable needs to be configured to point to your MySQL instance.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name one-api -d --restart always -p 3000:3000 -e SQL_DSN=\"root:123456@tcp(localhost:3306)/oneapi\" -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration\nDESCRIPTION: This is a reference Nginx configuration for One API. It sets up a reverse proxy to forward requests to the application running on localhost:3000. The configuration includes settings for client body size, HTTP version, and forwarding headers.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver{\n   server_name openai.justsong.cn;  # Modify your domain name accordingly\n\n   location / {\n          client_max_body_size  64m;\n          proxy_http_version 1.1;\n          proxy_pass http://localhost:3000;  # Modify your port accordingly\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n          proxy_cache_bypass $http_upgrade;\n          proxy_set_header Accept-Encoding gzip;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration\nDESCRIPTION: This is a sample Nginx configuration for proxying requests to the One API application. It sets up a server block, configures proxy settings, and sets necessary headers for proper routing. Adjust the server_name and proxy_pass values according to your setup.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nserver{\n   server_name openai.justsong.cn;  # 请根据实际情况修改你的域名\n\n   location / {\n          client_max_body_size  64m;\n          proxy_http_version 1.1;\n          proxy_pass http://localhost:3000;  # 请根据实际情况修改你的端口\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n          proxy_cache_bypass $http_upgrade;\n          proxy_set_header Accept-Encoding gzip;\n          proxy_read_timeout 300s;  # GPT-4 需要较长的超时时间，请自行调整\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Startup\nDESCRIPTION: This command starts the One API application using Docker Compose. It reads the docker-compose.yml file and creates and starts the services defined within it.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# 目前支持 MySQL 启动，数据存储在 ./data/mysql 文件夹内\ndocker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Certbot Installation and Configuration\nDESCRIPTION: These commands install Certbot on Ubuntu, create symbolic links, and generate SSL certificates for the Nginx configuration. It automates the process of obtaining and installing Let's Encrypt certificates.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Ubuntu 安装 certbot：\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n# 生成证书 & 修改 Nginx 配置\nsudo certbot --nginx\n# 根据指示进行操作\n# 重启 Nginx\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Session Secret\nDESCRIPTION: Sets a fixed session key to ensure the validity of user cookies after system restarts.  This example shows how to define a session secret, which is useful for maintaining user sessions across system restarts.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\nSESSION_SECRET=random_string\n```\n\n----------------------------------------\n\nTITLE: JSON Response Format\nDESCRIPTION: This snippet defines the general JSON response format used by the One API. It includes a 'message' field for conveying information about the request, a 'success' field indicating the status of the request, and a 'data' field that can contain the returned data.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/docs/API.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"message\": \"请求信息\",\n  \"success\": true,\n  \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Redis Connection String\nDESCRIPTION: Configures the Redis connection string for request rate limiting.  This example shows the format for specifying the Redis connection string including the host, port, username, and password. It allows using Redis as a persistent storage for request rate limiting instead of memory.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nREDIS_CONN_STRING=redis://default:redispw@localhost:49153\n```\n\n----------------------------------------\n\nTITLE: Command Line Parameter: Port Number\nDESCRIPTION: Specifies the port number on which the server listens. Defaults to `3000`. This allows users to configure the port for the application to run on.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_21\n\nLANGUAGE: Shell\nCODE:\n```\n--port 3000\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Log SQL Data Source Name\nDESCRIPTION: Configures a separate database for storing logs. The example shows a configuration using MySQL for the `logs` table. This setting allows separating log data into a dedicated database, improving performance and organization.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nLOG_SQL_DSN=root:123456@tcp(localhost:3306)/oneapi-logs\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Frontend Base URL\nDESCRIPTION: Overrides the default backend address with a specified frontend address. This example showcases how to configure an alternative frontend base URL, allowing the backend to serve API requests from a different domain.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nFRONTEND_BASE_URL=https://openai.justsong.cn\n```\n\n----------------------------------------\n\nTITLE: Update Docker Container\nDESCRIPTION: This command automatically updates the One API Docker container using Watchtower. It monitors for changes to the image and restarts the container with the latest version.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower -cR\n```\n\n----------------------------------------\n\nTITLE: Docker Update Command\nDESCRIPTION: This command updates the One API Docker container using Watchtower. It automatically detects changes in the image and restarts the container with the latest version. Requires mounting the Docker socket.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower -cR\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Command (Japanese)\nDESCRIPTION: This command deploys the One API service using Docker. It maps port 3000, sets the timezone, and mounts a volume for persistent data storage.  The first `3000` in `-p 3000:3000` is the host port, which can be modified as needed. Requires Docker to be installed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.ja.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name one-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/one-api:/data justsong/one-api\n```\n\n----------------------------------------\n\nTITLE: Certbot Configuration (Japanese)\nDESCRIPTION: These commands install and configure Certbot to generate SSL certificates for HTTPS using Let's Encrypt. It includes installing Certbot, linking it to /usr/bin, generating the certificate, and restarting Nginx. Requires Certbot and Nginx to be installed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.ja.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Ubuntu に certbot をインストール:\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n# 証明書の生成と Nginx 設定の変更\nsudo certbot --nginx\n# プロンプトに従う\n# Nginx を再起動\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Certbot Installation and Configuration (Ubuntu)\nDESCRIPTION: These commands install Certbot on Ubuntu and generate SSL certificates for secure HTTPS connections. It also modifies the Nginx configuration to use the generated certificates. Requires Nginx to be installed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Install certbot on Ubuntu:\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n# Generate certificates & modify Nginx configuration\nsudo certbot --nginx\n# Follow the prompts\n# Restart Nginx\nsudo service nginx restart\n```\n\n----------------------------------------\n\nTITLE: Running the Executable\nDESCRIPTION: These commands make the executable file runnable and then execute it, specifying the port and log directory.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nchmod u+x one-api\n./one-api --port 3000 --log-dir ./logs\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment: Building Backend\nDESCRIPTION: These commands navigate to the root directory, download Go modules, and build the backend application.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n# 构建后端\ncd ../..\ngo mod download\ngo build -ldflags \"-s -w\" -o one-api\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment: Running the Application\nDESCRIPTION: These commands make the One API executable, and then execute it. It specifies the port and log directory.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nchmod u+x one-api\n./one-api --port 3000 --log-dir ./logs\n```\n\n----------------------------------------\n\nTITLE: Manual Build: Cloning the Repository\nDESCRIPTION: Clones the One API repository from GitHub to a local machine.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/songquanpeng/one-api.git\n```\n\n----------------------------------------\n\nTITLE: Manual Build: Building the Backend\nDESCRIPTION: These commands navigate to the root directory, download Go dependencies, and build the backend executable.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncd ../..\ngo mod download\ngo build -ldflags \"-s -w\" -o one-api\n```\n\n----------------------------------------\n\nTITLE: Manual Build: Building the Frontend\nDESCRIPTION: These commands navigate to the frontend directory, install dependencies, and build the frontend application.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd one-api/web/default\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment: Building Frontend\nDESCRIPTION: These commands navigate to the frontend directory, install dependencies, and build the frontend application.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# 构建前端\ncd one-api/web/default\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: POST /api/topup Request Body\nDESCRIPTION: This snippet demonstrates the JSON payload required for the `/api/topup` endpoint, which is used to add quota to a specified user's account. The 'user_id' field indicates the user to top up, 'quota' represents the amount to add, and 'remark' provides a description for the transaction.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/docs/API.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"user_id\": 1,\n  \"quota\": 100000,\n  \"remark\": \"充值 100000 额度\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building React App for Production\nDESCRIPTION: This command builds the React application for production, creating optimized and minified files in the `build` folder. It leverages npm to run the build script defined in the package.json file. This optimized build is suitable for deployment to a web server.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/air/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration (Japanese)\nDESCRIPTION: This Nginx configuration sets up a reverse proxy for the One API service. It configures the server name, proxy pass to the application running on localhost:3000, sets necessary headers, and configures proxy timeouts. The port in `proxy_pass` should be modified accordingly. Requires Nginx to be installed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.ja.md#_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver{\n   server_name openai.justsong.cn;  # ドメイン名は適宜変更\n\n   location / {\n          client_max_body_size  64m;\n          proxy_http_version 1.1;\n          proxy_pass http://localhost:3000;  # それに応じてポートを変更\n          proxy_set_header Host $host;\n          proxy_set_header X-Forwarded-For $remote_addr;\n          proxy_cache_bypass $http_upgrade;\n          proxy_set_header Accept-Encoding gzip;\n          proxy_read_timeout 300s;  # GPT-4 はより長いタイムアウトが必要\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running and Building React App (npm)\nDESCRIPTION: These commands are used to start the React application in development mode and build it for production.  The development mode starts a local server. The build command creates an optimized production bundle in the `build` folder.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/default/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Runs the app in the development mode\nnpm start\n\n# Builds the app for production to the `build` folder\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Status Check\nDESCRIPTION: This command checks the status of the services defined in the docker-compose.yml file.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# 查看部署状态\ndocker-compose ps\n```\n\n----------------------------------------\n\nTITLE: ChatGPT Web Docker Deployment\nDESCRIPTION: This command deploys ChatGPT Web using Docker, setting the OpenAI API base URL and API key as environment variables and mapping port 3002 on the host to port 3002 on the container.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name chatgpt-web -d -p 3002:3002 -e OPENAI_API_BASE_URL=https://openai.justsong.cn -e OPENAI_API_KEY=sk-xxx chenzhaoyu94/chatgpt-web\n```\n\n----------------------------------------\n\nTITLE: Adding Channel Configuration - JavaScript\nDESCRIPTION: This snippet shows how to add a new channel configuration to the `typeConfig` object in `Config.js`.  It defines input labels, prompts, and the model group name for a specific channel ID. The 'modelGroup' field dictates which model group to fetch when populating supported models.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/berry/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst typeConfig = {\n  // key 为渠道ID\n  3: {\n    inputLabel: {\n      // 输入框名称 配置\n      // 对应的字段名称\n      base_url: \"AZURE_OPENAI_ENDPOINT\",\n      other: \"默认 API 版本\",\n    },\n    prompt: {\n      // 输入框提示 配置\n      // 对应的字段名称\n      base_url: \"请填写AZURE_OPENAI_ENDPOINT\",\n\n      // 注意：通过判断 `other` 是否有值来判断是否需要显示 `other` 输入框， 默认是没有值的\n      other: \"请输入默认API版本，例如：2024-03-01-preview\",\n    },\n    modelGroup: \"openai\", // 模型组名称,这个值是给 填入渠道支持模型 按钮使用的。 填入渠道支持模型 按钮会根据这个值来获取模型组，如果填写默认是 openai\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Channel Options - JavaScript\nDESCRIPTION: This snippet demonstrates how to add new channel options to the CHANNEL_OPTIONS object in `ChannelConstants.js`.  It defines the structure for each channel option, including its ID, name, value, and color.  It is required to modify this file when a new channel is added.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/berry/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport const CHANNEL_OPTIONS = {\n  //key 为渠道ID\n  1: {\n    key: 1, // 渠道ID\n    text: \"OpenAI\", // 渠道名称\n    value: 1, // 渠道ID\n    color: \"primary\", // 渠道列表显示的颜色\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment Commands (Japanese)\nDESCRIPTION: These commands clone the One API repository, build the frontend and backend, and run the application. It includes installing npm packages, building the frontend with npm, downloading go modules, and building the backend with go. Requires Git, Node.js, npm, and Go to be installed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.ja.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/songquanpeng/one-api.git\n\n# フロントエンドのビルド\ncd one-api/web/default\nnpm install\nnpm run build\n\n# バックエンドのビルド\ncd ../..\ngo mod download\ngo build -ldflags \"-s -w\" -o one-api\n```\n\nLANGUAGE: shell\nCODE:\n```\nchmod u+x one-api\n./one-api --port 3000 --log-dir ./logs\n```\n\n----------------------------------------\n\nTITLE: Docker Update Command (Japanese)\nDESCRIPTION: This command updates the Docker image of One API using Watchtower. It automatically monitors the Docker image and restarts the container when a new version is available. Requires Docker and Watchtower to be installed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.ja.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrr/watchtower -cR\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Node Type\nDESCRIPTION: Specifies the node type, with valid values being 'master' or 'slave'. If not set, it defaults to 'master'. This configuration helps define the role of the node in a distributed system.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_15\n\nLANGUAGE: Shell\nCODE:\n```\nNODE_TYPE=slave\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Memory Cache Enabled\nDESCRIPTION: Enables or disables memory caching, potentially causing delays in updating user quotas.  Accepted values are 'true' or 'false', defaulting to 'false'. Enabling memory caching can improve performance but may introduce inconsistencies in user quota updates.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\n'MEMORY_CACHE_ENABLED'=true\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Channel Test Frequency\nDESCRIPTION: Configures the frequency for testing channels, measured in minutes.  If not set, no testing will occur. This parameter controls how often channels are tested for availability and functionality.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nCHANNEL_TEST_FREQUENCY=1440\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment: Cloning Repository\nDESCRIPTION: This command clones the One API repository from GitHub to a local directory.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/songquanpeng/one-api.git\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Channel Update Frequency\nDESCRIPTION: Sets the frequency for updating channel balances, measured in minutes. If not set, no update will happen. This parameter determines how often channel balances are refreshed.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_16\n\nLANGUAGE: Shell\nCODE:\n```\nCHANNEL_UPDATE_FREQUENCY=1440\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Polling Interval\nDESCRIPTION: Sets the time interval (in seconds) between requests when updating channel balances and testing channel availability. The default behavior is no interval.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_18\n\nLANGUAGE: Shell\nCODE:\n```\nPOLLING_INTERVAL=5\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Batch Update Enabled\nDESCRIPTION: Enables or disables batch database update aggregation. Accepted values are 'true' or 'false', defaulting to 'false'. Enabling this feature may cause delays in updating user quotas, but can help reduce the number of database connections.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_19\n\nLANGUAGE: Shell\nCODE:\n```\nBATCH_UPDATE_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Batch Update Interval\nDESCRIPTION: Sets the time interval for batch updating aggregates, measured in seconds, defaulting to '5'. This parameter controls how often batched updates are written to the database.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\nBATCH_UPDATE_INTERVAL=5\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json Build Command (React)\nDESCRIPTION: This snippet shows how to modify the build command in `package.json` to copy the built theme files to the correct directory.  `default` should be replaced with the actual theme name.  This step is essential for the build process to correctly output the theme files.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n\"build\": \"react-scripts build && mv -f build ../build/default\"\n```\n\n----------------------------------------\n\nTITLE: Modifying config.go ValidThemes (Go)\nDESCRIPTION: This snippet references modifying the `ValidThemes` list in `config.go`.  It's necessary to register the new theme name in this Go file, which presumably defines the valid theme options for the application backend.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nModifying `common/config/config.go`中的 `ValidThemes`\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Disallow All\nDESCRIPTION: This robots.txt configuration disallows all user agents from accessing any part of the website. It uses the User-agent: * to match all crawlers and Disallow: to prevent them from accessing any resources.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/air/public/robots.txt#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Robots.txt Configuration\nDESCRIPTION: This robots.txt configuration disallows all web crawlers from accessing any part of the site. The 'User-agent: *' directive applies the following rules to all crawlers, and 'Disallow: /' prevents them from accessing any directories or files.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/web/default/public/robots.txt#_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow: \n```\n\n----------------------------------------\n\nTITLE: Command Line Parameter: Log Directory\nDESCRIPTION: Specifies the log directory. If not set, the logs will not be saved. This allows the user to specify the directory where the logs are saved.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_22\n\nLANGUAGE: Shell\nCODE:\n```\n--log-dir ./logs\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration: Sync Frequency\nDESCRIPTION: Sets the frequency for synchronizing configurations from the database, measured in seconds.  If not set, no synchronization occurs. This parameter controls how often the system checks the database for updated configuration settings.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.en.md#_snippet_14\n\nLANGUAGE: Shell\nCODE:\n```\nSYNC_FREQUENCY=60\n```\n\n----------------------------------------\n\nTITLE: ChatGPT Next Web Docker Deployment\nDESCRIPTION: This command deploys ChatGPT Next Web using Docker, mapping port 3001 on the host to port 3000 on the container.\nSOURCE: https://github.com/songquanpeng/one-api/blob/main/README.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --name chat-next-web -d -p 3001:3000 yidadaa/chatgpt-next-web\n```"
  }
]